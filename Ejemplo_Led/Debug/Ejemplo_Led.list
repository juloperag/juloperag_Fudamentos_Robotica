
Ejemplo_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005648  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005904  08005904  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005904  08005904  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005904  08005904  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005904  08005904  00015904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800590c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014468  20000014  08005920  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001447c  08005920  0002447c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7fd  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee0  00000000  00000000  0002c841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d60  00000000  00000000  0002fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf22  00000000  00000000  00041910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000638c3  00000000  00000000  0004e832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b20f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c58  00000000  00000000  000b2148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057d0 	.word	0x080057d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080057d0 	.word	0x080057d0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ea8 	.word	0x20012ea8

08000274 <main>:
BaseType_t xReturned;
TaskHandle_t xHandleTask1 = NULL;
TaskHandle_t xHandleTask2 = NULL;

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	73fb      	strb	r3, [r7, #15]
	configPLL(clock);
 800027e:	7bfb      	ldrb	r3, [r7, #15]
 8000280:	4618      	mov	r0, r3
 8000282:	f005 f9c1 	bl	8005608 <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 8000286:	f000 f869 	bl	800035c <initSystem>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 800028a:	4b28      	ldr	r3, [pc, #160]	; (800032c <main+0xb8>)
 800028c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000290:	4a26      	ldr	r2, [pc, #152]	; (800032c <main+0xb8>)
 8000292:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000296:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <main+0xbc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a24      	ldr	r2, [pc, #144]	; (8000330 <main+0xbc>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6013      	str	r3, [r2, #0]

	//---------------------Inicio de uso de funciones para el funcionamiento del SEGGER----------------------
	//Necesaria para el SEGGER
	vInitPrioGroupValue();
 80002a6:	f002 fbcf 	bl	8002a48 <vInitPrioGroupValue>
	//Configuramos el puerto Serial para trabajar  con el SEGGER
	SEGGER_UART_init(500000);
 80002aa:	4822      	ldr	r0, [pc, #136]	; (8000334 <main+0xc0>)
 80002ac:	f003 f958 	bl	8003560 <SEGGER_UART_init>
	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
 80002b0:	f002 ff80 	bl	80031b4 <SEGGER_SYSVIEW_Conf>
	/* Despues activamos el sistema */
	//SEGGER_SYSVIEW_Start();
	//-----------------------Fin de uso de funciones para el funcionamiento del SEGGER----------------------

	//Configuracion tarea 1
	xReturned = xTaskCreate(
 80002b4:	4b20      	ldr	r3, [pc, #128]	; (8000338 <main+0xc4>)
 80002b6:	9301      	str	r3, [sp, #4]
 80002b8:	2302      	movs	r3, #2
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	4b1f      	ldr	r3, [pc, #124]	; (800033c <main+0xc8>)
 80002be:	22c8      	movs	r2, #200	; 0xc8
 80002c0:	491f      	ldr	r1, [pc, #124]	; (8000340 <main+0xcc>)
 80002c2:	4820      	ldr	r0, [pc, #128]	; (8000344 <main+0xd0>)
 80002c4:	f000 ff08 	bl	80010d8 <xTaskCreate>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4a1f      	ldr	r2, [pc, #124]	; (8000348 <main+0xd4>)
 80002cc:	6013      	str	r3, [r2, #0]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Blinky",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask1);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <main+0xd4>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d00a      	beq.n	80002ec <main+0x78>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002da:	f383 8811 	msr	BASEPRI, r3
 80002de:	f3bf 8f6f 	isb	sy
 80002e2:	f3bf 8f4f 	dsb	sy
 80002e6:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002e8:	bf00      	nop
 80002ea:	e7fe      	b.n	80002ea <main+0x76>

	//configuracion tarea 2
	xReturned = xTaskCreate(
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <main+0xd8>)
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	2302      	movs	r3, #2
 80002f2:	9300      	str	r3, [sp, #0]
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <main+0xdc>)
 80002f6:	22c8      	movs	r2, #200	; 0xc8
 80002f8:	4916      	ldr	r1, [pc, #88]	; (8000354 <main+0xe0>)
 80002fa:	4817      	ldr	r0, [pc, #92]	; (8000358 <main+0xe4>)
 80002fc:	f000 feec 	bl	80010d8 <xTaskCreate>
 8000300:	4603      	mov	r3, r0
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <main+0xd4>)
 8000304:	6013      	str	r3, [r2, #0]
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-2",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask2);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <main+0xd4>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d00a      	beq.n	8000324 <main+0xb0>
        __asm volatile
 800030e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000312:	f383 8811 	msr	BASEPRI, r3
 8000316:	f3bf 8f6f 	isb	sy
 800031a:	f3bf 8f4f 	dsb	sy
 800031e:	607b      	str	r3, [r7, #4]
    }
 8000320:	bf00      	nop
 8000322:	e7fe      	b.n	8000322 <main+0xae>

	/* Start the created tasks running. */
	vTaskStartScheduler();
 8000324:	f001 f874 	bl	8001410 <vTaskStartScheduler>

	while(1)
 8000328:	e7fe      	b.n	8000328 <main+0xb4>
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00
 8000330:	e0001000 	.word	0xe0001000
 8000334:	0007a120 	.word	0x0007a120
 8000338:	2000004c 	.word	0x2000004c
 800033c:	080057e8 	.word	0x080057e8
 8000340:	080057f0 	.word	0x080057f0
 8000344:	080003c5 	.word	0x080003c5
 8000348:	20000048 	.word	0x20000048
 800034c:	20000050 	.word	0x20000050
 8000350:	080057f8 	.word	0x080057f8
 8000354:	08005814 	.word	0x08005814
 8000358:	08000419 	.word	0x08000419

0800035c <initSystem>:
	}
}

//Funcion para definir la configuracion inicial del sistema
void initSystem(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af02      	add	r7, sp, #8
	//Definimos el pin a utilziar
	GPIO_Handler_Led.pGPIOx = GPIOA;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <initSystem+0x58>)
 8000364:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <initSystem+0x5c>)
 8000366:	609a      	str	r2, [r3, #8]
	GPIO_Handler_Led.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <initSystem+0x58>)
 800036a:	2205      	movs	r2, #5
 800036c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion para el PIN del GPIO
	GPIO_PIN_Config(&GPIO_Handler_Led,GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_LOW,GPIO_PUPDR_NOTHING, AF0);
 800036e:	2300      	movs	r3, #0
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2300      	movs	r3, #0
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	2200      	movs	r2, #0
 800037a:	2101      	movs	r1, #1
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <initSystem+0x58>)
 800037e:	f004 ff9f 	bl	80052c0 <GPIO_PIN_Config>
	//Cargamos la configuracion
	GPIO_Config(&GPIO_Handler_Led);
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <initSystem+0x58>)
 8000384:	f004 ffbe 	bl	8005304 <GPIO_Config>


	//Definimos el pin a utilziar
	GPIO_Handler_Button.pGPIOx = GPIOC;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <initSystem+0x60>)
 800038a:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <initSystem+0x64>)
 800038c:	609a      	str	r2, [r3, #8]
	GPIO_Handler_Button.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <initSystem+0x60>)
 8000390:	220d      	movs	r2, #13
 8000392:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion para el PIN del GPIO
	GPIO_PIN_Config(&GPIO_Handler_Button,GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_LOW,GPIO_PUPDR_NOTHING, AF0);
 8000394:	2300      	movs	r3, #0
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	2300      	movs	r3, #0
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2300      	movs	r3, #0
 800039e:	2200      	movs	r2, #0
 80003a0:	2100      	movs	r1, #0
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <initSystem+0x60>)
 80003a4:	f004 ff8c 	bl	80052c0 <GPIO_PIN_Config>
	//Cargamos la configuracion
	GPIO_Config(&GPIO_Handler_Button);
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <initSystem+0x60>)
 80003aa:	f004 ffab 	bl	8005304 <GPIO_Config>

}
 80003ae:	bf00      	nop
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20000030 	.word	0x20000030
 80003b8:	40020000 	.word	0x40020000
 80003bc:	2000003c 	.word	0x2000003c
 80003c0:	40020800 	.word	0x40020800

080003c4 <vTask_blink_led>:

/* Funcion que gobierna a la tarea 1*/
void vTask_blink_led( void * pvParameters )
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af02      	add	r7, sp, #8
 80003ca:	6078      	str	r0, [r7, #4]
	 BaseType_t notify_state = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
	 uint8_t change_state = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	72fb      	strb	r3, [r7, #11]

	while(1)
	{
		if(notify_state == pdTRUE)
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d106      	bne.n	80003e8 <vTask_blink_led+0x24>
		{
			change_state = !change_state;
 80003da:	7afb      	ldrb	r3, [r7, #11]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	bf0c      	ite	eq
 80003e0:	2301      	moveq	r3, #1
 80003e2:	2300      	movne	r3, #0
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	72fb      	strb	r3, [r7, #11]
		}
		if(change_state == 1)
 80003e8:	7afb      	ldrb	r3, [r7, #11]
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d103      	bne.n	80003f6 <vTask_blink_led+0x32>
		{
			GPIOxTooglePin(&GPIO_Handler_Led);
 80003ee:	4809      	ldr	r0, [pc, #36]	; (8000414 <vTask_blink_led+0x50>)
 80003f0:	f005 f8f3 	bl	80055da <GPIOxTooglePin>
 80003f4:	e003      	b.n	80003fe <vTask_blink_led+0x3a>
		}
		else
		{
			GPIO_writePin(&GPIO_Handler_Led, RESET);
 80003f6:	2100      	movs	r1, #0
 80003f8:	4806      	ldr	r0, [pc, #24]	; (8000414 <vTask_blink_led+0x50>)
 80003fa:	f005 f8ad 	bl	8005558 <GPIO_writePin>
		}

		notify_state = xTaskNotifyWait(0,
 80003fe:	23fa      	movs	r3, #250	; 0xfa
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2300      	movs	r3, #0
 8000404:	2200      	movs	r2, #0
 8000406:	2100      	movs	r1, #0
 8000408:	2000      	movs	r0, #0
 800040a:	f001 fce9 	bl	8001de0 <xTaskGenericNotifyWait>
 800040e:	60f8      	str	r0, [r7, #12]
		if(notify_state == pdTRUE)
 8000410:	e7e0      	b.n	80003d4 <vTask_blink_led+0x10>
 8000412:	bf00      	nop
 8000414:	20000030 	.word	0x20000030

08000418 <vTaskTwo>:
	}
}

/* Funcion que gobierna a la tarea 2*/
void vTaskTwo( void * pvParameters )
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	6078      	str	r0, [r7, #4]
	int8_t button_state = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_button_state = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		button_state =  GPIO_RedPin (&GPIO_Handler_Button);
 8000428:	480d      	ldr	r0, [pc, #52]	; (8000460 <vTaskTwo+0x48>)
 800042a:	f005 f8c0 	bl	80055ae <GPIO_RedPin>
 800042e:	4603      	mov	r3, r0
 8000430:	73bb      	strb	r3, [r7, #14]
		if(button_state==1)
 8000432:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d10b      	bne.n	8000452 <vTaskTwo+0x3a>
		{
			if(!prev_button_state)
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d108      	bne.n	8000452 <vTaskTwo+0x3a>
			{
				xTaskNotify(xHandleTask1,0,eNoAction);
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <vTaskTwo+0x4c>)
 8000442:	6818      	ldr	r0, [r3, #0]
 8000444:	2300      	movs	r3, #0
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	2300      	movs	r3, #0
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	f001 fd4f 	bl	8001ef0 <xTaskGenericNotify>
			}
		}

		prev_button_state = button_state;
 8000452:	7bbb      	ldrb	r3, [r7, #14]
 8000454:	73fb      	strb	r3, [r7, #15]

		vTaskDelay(pdMS_TO_TICKS(10));
 8000456:	200a      	movs	r0, #10
 8000458:	f000 ffa2 	bl	80013a0 <vTaskDelay>
		button_state =  GPIO_RedPin (&GPIO_Handler_Button);
 800045c:	e7e4      	b.n	8000428 <vTaskTwo+0x10>
 800045e:	bf00      	nop
 8000460:	2000003c 	.word	0x2000003c
 8000464:	2000004c 	.word	0x2000004c

08000468 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000468:	480d      	ldr	r0, [pc, #52]	; (80004a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800046c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	; (80004a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <LoopForever+0xe>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	; (80004b4 <LoopForever+0x16>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000496:	f005 f951 	bl	800573c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f7ff feeb 	bl	8000274 <main>

0800049e <LoopForever>:

LoopForever:
    b LoopForever
 800049e:	e7fe      	b.n	800049e <LoopForever>
  ldr   r0, =_estack
 80004a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80004ac:	0800590c 	.word	0x0800590c
  ldr r2, =_sbss
 80004b0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80004b4:	2001447c 	.word	0x2001447c

080004b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>

080004ba <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f103 0208 	add.w	r2, r3, #8
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f04f 32ff 	mov.w	r2, #4294967295
 80004d2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f103 0208 	add.w	r2, r3, #8
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f103 0208 	add.w	r2, r3, #8
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	683a      	ldr	r2, [r7, #0]
 8000538:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	1c5a      	adds	r2, r3, #1
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	601a      	str	r2, [r3, #0]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000572:	d103      	bne.n	800057c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	691b      	ldr	r3, [r3, #16]
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	e00c      	b.n	8000596 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3308      	adds	r3, #8
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	e002      	b.n	800058a <vListInsert+0x2e>
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	429a      	cmp	r2, r3
 8000594:	d2f6      	bcs.n	8000584 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	68fa      	ldr	r2, [r7, #12]
 80005aa:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1c5a      	adds	r2, r3, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	691b      	ldr	r3, [r3, #16]
 80005da:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	6892      	ldr	r2, [r2, #8]
 80005e4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	6852      	ldr	r2, [r2, #4]
 80005ee:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d103      	bne.n	8000602 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	681b      	ldr	r3, [r3, #0]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10a      	bne.n	800064e <xQueueGenericReset+0x2a>
        __asm volatile
 8000638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063c:	f383 8811 	msr	BASEPRI, r3
 8000640:	f3bf 8f6f 	isb	sy
 8000644:	f3bf 8f4f 	dsb	sy
 8000648:	60bb      	str	r3, [r7, #8]
    }
 800064a:	bf00      	nop
 800064c:	e7fe      	b.n	800064c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800064e:	f002 fa79 	bl	8002b44 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800065a:	68f9      	ldr	r1, [r7, #12]
 800065c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800065e:	fb01 f303 	mul.w	r3, r1, r3
 8000662:	441a      	add	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2200      	movs	r2, #0
 800066c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800067e:	3b01      	subs	r3, #1
 8000680:	68f9      	ldr	r1, [r7, #12]
 8000682:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000684:	fb01 f303 	mul.w	r3, r1, r3
 8000688:	441a      	add	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	22ff      	movs	r2, #255	; 0xff
 8000692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	22ff      	movs	r2, #255	; 0xff
 800069a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d114      	bne.n	80006ce <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	691b      	ldr	r3, [r3, #16]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d01a      	beq.n	80006e2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3310      	adds	r3, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f957 	bl	8001964 <xTaskRemoveFromEventList>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d012      	beq.n	80006e2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <xQueueGenericReset+0xcc>)
 80006be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	f3bf 8f6f 	isb	sy
 80006cc:	e009      	b.n	80006e2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3310      	adds	r3, #16
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fef1 	bl	80004ba <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3324      	adds	r3, #36	; 0x24
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff feec 	bl	80004ba <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80006e2:	f002 fa5f 	bl	8002ba4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	e000ed04 	.word	0xe000ed04

080006f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4613      	mov	r3, r2
 8000700:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d10a      	bne.n	800071e <xQueueGenericCreate+0x2a>
        __asm volatile
 8000708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070c:	f383 8811 	msr	BASEPRI, r3
 8000710:	f3bf 8f6f 	isb	sy
 8000714:	f3bf 8f4f 	dsb	sy
 8000718:	61bb      	str	r3, [r7, #24]
    }
 800071a:	bf00      	nop
 800071c:	e7fe      	b.n	800071c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	fb02 f303 	mul.w	r3, r2, r3
 8000726:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d006      	beq.n	800073c <xQueueGenericCreate+0x48>
 800072e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	429a      	cmp	r2, r3
 800073a:	d101      	bne.n	8000740 <xQueueGenericCreate+0x4c>
 800073c:	2301      	movs	r3, #1
 800073e:	e000      	b.n	8000742 <xQueueGenericCreate+0x4e>
 8000740:	2300      	movs	r3, #0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10a      	bne.n	800075c <xQueueGenericCreate+0x68>
        __asm volatile
 8000746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074a:	f383 8811 	msr	BASEPRI, r3
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	617b      	str	r3, [r7, #20]
    }
 8000758:	bf00      	nop
 800075a:	e7fe      	b.n	800075a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000762:	d90a      	bls.n	800077a <xQueueGenericCreate+0x86>
        __asm volatile
 8000764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000768:	f383 8811 	msr	BASEPRI, r3
 800076c:	f3bf 8f6f 	isb	sy
 8000770:	f3bf 8f4f 	dsb	sy
 8000774:	613b      	str	r3, [r7, #16]
    }
 8000776:	bf00      	nop
 8000778:	e7fe      	b.n	8000778 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	3350      	adds	r3, #80	; 0x50
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fb0c 	bl	8002d9c <pvPortMalloc>
 8000784:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d00d      	beq.n	80007a8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	3350      	adds	r3, #80	; 0x50
 8000794:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000796:	79fa      	ldrb	r2, [r7, #7]
 8000798:	6a3b      	ldr	r3, [r7, #32]
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	4613      	mov	r3, r2
 800079e:	69fa      	ldr	r2, [r7, #28]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f000 f805 	bl	80007b2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80007a8:	6a3b      	ldr	r3, [r7, #32]
    }
 80007aa:	4618      	mov	r0, r3
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d103      	bne.n	80007ce <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	e002      	b.n	80007d4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	68ba      	ldr	r2, [r7, #8]
 80007de:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007e0:	2101      	movs	r1, #1
 80007e2:	69b8      	ldr	r0, [r7, #24]
 80007e4:	f7ff ff1e 	bl	8000624 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	78fa      	ldrb	r2, [r7, #3]
 80007ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	68f9      	ldr	r1, [r7, #12]
 80007f6:	2073      	movs	r0, #115	; 0x73
 80007f8:	f003 fe5e 	bl	80044b8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b090      	sub	sp, #64	; 0x40
 8000808:	af02      	add	r7, sp, #8
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000812:	2300      	movs	r3, #0
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10a      	bne.n	8000836 <xQueueGenericSend+0x32>
        __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d103      	bne.n	8000844 <xQueueGenericSend+0x40>
 800083c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <xQueueGenericSend+0x44>
 8000844:	2301      	movs	r3, #1
 8000846:	e000      	b.n	800084a <xQueueGenericSend+0x46>
 8000848:	2300      	movs	r3, #0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d10a      	bne.n	8000864 <xQueueGenericSend+0x60>
        __asm volatile
 800084e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000852:	f383 8811 	msr	BASEPRI, r3
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	f3bf 8f4f 	dsb	sy
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000860:	bf00      	nop
 8000862:	e7fe      	b.n	8000862 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d103      	bne.n	8000872 <xQueueGenericSend+0x6e>
 800086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800086e:	2b01      	cmp	r3, #1
 8000870:	d101      	bne.n	8000876 <xQueueGenericSend+0x72>
 8000872:	2301      	movs	r3, #1
 8000874:	e000      	b.n	8000878 <xQueueGenericSend+0x74>
 8000876:	2300      	movs	r3, #0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10a      	bne.n	8000892 <xQueueGenericSend+0x8e>
        __asm volatile
 800087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000880:	f383 8811 	msr	BASEPRI, r3
 8000884:	f3bf 8f6f 	isb	sy
 8000888:	f3bf 8f4f 	dsb	sy
 800088c:	623b      	str	r3, [r7, #32]
    }
 800088e:	bf00      	nop
 8000890:	e7fe      	b.n	8000890 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000892:	f001 fa07 	bl	8001ca4 <xTaskGetSchedulerState>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <xQueueGenericSend+0x9e>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <xQueueGenericSend+0xa2>
 80008a2:	2301      	movs	r3, #1
 80008a4:	e000      	b.n	80008a8 <xQueueGenericSend+0xa4>
 80008a6:	2300      	movs	r3, #0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10a      	bne.n	80008c2 <xQueueGenericSend+0xbe>
        __asm volatile
 80008ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b0:	f383 8811 	msr	BASEPRI, r3
 80008b4:	f3bf 8f6f 	isb	sy
 80008b8:	f3bf 8f4f 	dsb	sy
 80008bc:	61fb      	str	r3, [r7, #28]
    }
 80008be:	bf00      	nop
 80008c0:	e7fe      	b.n	80008c0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80008c2:	f002 f93f 	bl	8002b44 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d302      	bcc.n	80008d8 <xQueueGenericSend+0xd4>
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d136      	bne.n	8000946 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80008d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 fb7a 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	460b      	mov	r3, r1
 80008ea:	4601      	mov	r1, r0
 80008ec:	205a      	movs	r0, #90	; 0x5a
 80008ee:	f003 fe59 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008f8:	f000 fa78 	bl	8000dec <prvCopyDataToQueue>
 80008fc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80008fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	2b00      	cmp	r3, #0
 8000904:	d010      	beq.n	8000928 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000908:	3324      	adds	r3, #36	; 0x24
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f82a 	bl	8001964 <xTaskRemoveFromEventList>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d013      	beq.n	800093e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000916:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <xQueueGenericSend+0x248>)
 8000918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	f3bf 8f4f 	dsb	sy
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	e00a      	b.n	800093e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8000928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092a:	2b00      	cmp	r3, #0
 800092c:	d007      	beq.n	800093e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800092e:	4b47      	ldr	r3, [pc, #284]	; (8000a4c <xQueueGenericSend+0x248>)
 8000930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	f3bf 8f4f 	dsb	sy
 800093a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800093e:	f002 f931 	bl	8002ba4 <vPortExitCritical>
                return pdPASS;
 8000942:	2301      	movs	r3, #1
 8000944:	e07d      	b.n	8000a42 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d110      	bne.n	800096e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800094c:	f002 f92a 	bl	8002ba4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fb3e 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000958:	68ba      	ldr	r2, [r7, #8]
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	460b      	mov	r3, r1
 8000962:	4601      	mov	r1, r0
 8000964:	205a      	movs	r0, #90	; 0x5a
 8000966:	f003 fe1d 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800096a:	2300      	movs	r3, #0
 800096c:	e069      	b.n	8000a42 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000970:	2b00      	cmp	r3, #0
 8000972:	d106      	bne.n	8000982 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4618      	mov	r0, r3
 800097a:	f001 f859 	bl	8001a30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800097e:	2301      	movs	r3, #1
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000982:	f002 f90f 	bl	8002ba4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000986:	f000 fda5 	bl	80014d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800098a:	f002 f8db 	bl	8002b44 <vPortEnterCritical>
 800098e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000994:	b25b      	sxtb	r3, r3
 8000996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800099a:	d103      	bne.n	80009a4 <xQueueGenericSend+0x1a0>
 800099c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80009a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d103      	bne.n	80009ba <xQueueGenericSend+0x1b6>
 80009b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80009ba:	f002 f8f3 	bl	8002ba4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009be:	1d3a      	adds	r2, r7, #4
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4611      	mov	r1, r2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 f848 	bl	8001a5c <xTaskCheckForTimeOut>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d124      	bne.n	8000a1c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80009d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009d4:	f000 fb02 	bl	8000fdc <prvIsQueueFull>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d018      	beq.n	8000a10 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e0:	3310      	adds	r3, #16
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 ff6a 	bl	80018c0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80009ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80009ee:	f000 fa8d 	bl	8000f0c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80009f2:	f000 fd7d 	bl	80014f0 <xTaskResumeAll>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f47f af62 	bne.w	80008c2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <xQueueGenericSend+0x248>)
 8000a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	f3bf 8f4f 	dsb	sy
 8000a0a:	f3bf 8f6f 	isb	sy
 8000a0e:	e758      	b.n	80008c2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a12:	f000 fa7b 	bl	8000f0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a16:	f000 fd6b 	bl	80014f0 <xTaskResumeAll>
 8000a1a:	e752      	b.n	80008c2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a1e:	f000 fa75 	bl	8000f0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a22:	f000 fd65 	bl	80014f0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8000a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 fad3 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	460b      	mov	r3, r1
 8000a38:	4601      	mov	r1, r0
 8000a3a:	205a      	movs	r0, #90	; 0x5a
 8000a3c:	f003 fdb2 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8000a40:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3738      	adds	r7, #56	; 0x38
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000ed04 	.word	0xe000ed04

08000a50 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b090      	sub	sp, #64	; 0x40
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8000a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d10a      	bne.n	8000a7e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8000a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a6c:	f383 8811 	msr	BASEPRI, r3
 8000a70:	f3bf 8f6f 	isb	sy
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000a7a:	bf00      	nop
 8000a7c:	e7fe      	b.n	8000a7c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <xQueueGenericSendFromISR+0x3c>
 8000a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d101      	bne.n	8000a90 <xQueueGenericSendFromISR+0x40>
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e000      	b.n	8000a92 <xQueueGenericSendFromISR+0x42>
 8000a90:	2300      	movs	r3, #0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10a      	bne.n	8000aac <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8000a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a9a:	f383 8811 	msr	BASEPRI, r3
 8000a9e:	f3bf 8f6f 	isb	sy
 8000aa2:	f3bf 8f4f 	dsb	sy
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000aa8:	bf00      	nop
 8000aaa:	e7fe      	b.n	8000aaa <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d103      	bne.n	8000aba <xQueueGenericSendFromISR+0x6a>
 8000ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d101      	bne.n	8000abe <xQueueGenericSendFromISR+0x6e>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e000      	b.n	8000ac0 <xQueueGenericSendFromISR+0x70>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d10a      	bne.n	8000ada <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8000ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac8:	f383 8811 	msr	BASEPRI, r3
 8000acc:	f3bf 8f6f 	isb	sy
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	623b      	str	r3, [r7, #32]
    }
 8000ad6:	bf00      	nop
 8000ad8:	e7fe      	b.n	8000ad8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ada:	f002 f91f 	bl	8002d1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8000ade:	f3ef 8211 	mrs	r2, BASEPRI
 8000ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae6:	f383 8811 	msr	BASEPRI, r3
 8000aea:	f3bf 8f6f 	isb	sy
 8000aee:	f3bf 8f4f 	dsb	sy
 8000af2:	61fa      	str	r2, [r7, #28]
 8000af4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8000af6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000afc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d302      	bcc.n	8000b0c <xQueueGenericSendFromISR+0xbc>
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d148      	bne.n	8000b9e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fa58 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000b24:	4601      	mov	r1, r0
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2060      	movs	r0, #96	; 0x60
 8000b2c:	f003 fc6a 	bl	8004404 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b30:	683a      	ldr	r2, [r7, #0]
 8000b32:	68b9      	ldr	r1, [r7, #8]
 8000b34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000b36:	f000 f959 	bl	8000dec <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000b3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b42:	d112      	bne.n	8000b6a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d025      	beq.n	8000b98 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b4e:	3324      	adds	r3, #36	; 0x24
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 ff07 	bl	8001964 <xTaskRemoveFromEventList>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d01d      	beq.n	8000b98 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01a      	beq.n	8000b98 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e016      	b.n	8000b98 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000b6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b70:	d10a      	bne.n	8000b88 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8000b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b76:	f383 8811 	msr	BASEPRI, r3
 8000b7a:	f3bf 8f6f 	isb	sy
 8000b7e:	f3bf 8f4f 	dsb	sy
 8000b82:	617b      	str	r3, [r7, #20]
    }
 8000b84:	bf00      	nop
 8000b86:	e7fe      	b.n	8000b86 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000b88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8000b9c:	e00b      	b.n	8000bb6 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f004 fa17 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	461a      	mov	r2, r3
 8000bac:	2060      	movs	r0, #96	; 0x60
 8000bae:	f003 fc29 	bl	8004404 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8000bc0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8000bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3740      	adds	r7, #64	; 0x40
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b08f      	sub	sp, #60	; 0x3c
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10a      	bne.n	8000bfc <xQueueReceive+0x30>
        __asm volatile
 8000be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bea:	f383 8811 	msr	BASEPRI, r3
 8000bee:	f3bf 8f6f 	isb	sy
 8000bf2:	f3bf 8f4f 	dsb	sy
 8000bf6:	623b      	str	r3, [r7, #32]
    }
 8000bf8:	bf00      	nop
 8000bfa:	e7fe      	b.n	8000bfa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <xQueueReceive+0x3e>
 8000c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <xQueueReceive+0x42>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <xQueueReceive+0x44>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10a      	bne.n	8000c2a <xQueueReceive+0x5e>
        __asm volatile
 8000c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c18:	f383 8811 	msr	BASEPRI, r3
 8000c1c:	f3bf 8f6f 	isb	sy
 8000c20:	f3bf 8f4f 	dsb	sy
 8000c24:	61fb      	str	r3, [r7, #28]
    }
 8000c26:	bf00      	nop
 8000c28:	e7fe      	b.n	8000c28 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c2a:	f001 f83b 	bl	8001ca4 <xTaskGetSchedulerState>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <xQueueReceive+0x6e>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <xQueueReceive+0x72>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <xQueueReceive+0x74>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10a      	bne.n	8000c5a <xQueueReceive+0x8e>
        __asm volatile
 8000c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c48:	f383 8811 	msr	BASEPRI, r3
 8000c4c:	f3bf 8f6f 	isb	sy
 8000c50:	f3bf 8f4f 	dsb	sy
 8000c54:	61bb      	str	r3, [r7, #24]
    }
 8000c56:	bf00      	nop
 8000c58:	e7fe      	b.n	8000c58 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c5a:	f001 ff73 	bl	8002b44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d02f      	beq.n	8000cca <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c6e:	f000 f927 	bl	8000ec0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 f9ad 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f004 f9a9 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000c82:	4602      	mov	r2, r0
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2101      	movs	r1, #1
 8000c88:	9100      	str	r1, [sp, #0]
 8000c8a:	4621      	mov	r1, r4
 8000c8c:	205c      	movs	r0, #92	; 0x5c
 8000c8e:	f003 fc89 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c98:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00f      	beq.n	8000cc2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca4:	3310      	adds	r3, #16
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fe5c 	bl	8001964 <xTaskRemoveFromEventList>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000cb2:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <xQueueReceive+0x21c>)
 8000cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000cc2:	f001 ff6f 	bl	8002ba4 <vPortExitCritical>
                return pdPASS;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e08a      	b.n	8000de0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d113      	bne.n	8000cf8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000cd0:	f001 ff68 	bl	8002ba4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 f97c 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000cdc:	4604      	mov	r4, r0
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f004 f978 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	9100      	str	r1, [sp, #0]
 8000cec:	4621      	mov	r1, r4
 8000cee:	205c      	movs	r0, #92	; 0x5c
 8000cf0:	f003 fc58 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e073      	b.n	8000de0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d106      	bne.n	8000d0c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fe94 	bl	8001a30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000d0c:	f001 ff4a 	bl	8002ba4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d10:	f000 fbe0 	bl	80014d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d14:	f001 ff16 	bl	8002b44 <vPortEnterCritical>
 8000d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d1e:	b25b      	sxtb	r3, r3
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d103      	bne.n	8000d2e <xQueueReceive+0x162>
 8000d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3a:	d103      	bne.n	8000d44 <xQueueReceive+0x178>
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000d44:	f001 ff2e 	bl	8002ba4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d48:	1d3a      	adds	r2, r7, #4
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fe83 	bl	8001a5c <xTaskCheckForTimeOut>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d124      	bne.n	8000da6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d5e:	f000 f927 	bl	8000fb0 <prvIsQueueEmpty>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d018      	beq.n	8000d9a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6a:	3324      	adds	r3, #36	; 0x24
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fda5 	bl	80018c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d78:	f000 f8c8 	bl	8000f0c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d7c:	f000 fbb8 	bl	80014f0 <xTaskResumeAll>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f47f af69 	bne.w	8000c5a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <xQueueReceive+0x21c>)
 8000d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	f3bf 8f4f 	dsb	sy
 8000d94:	f3bf 8f6f 	isb	sy
 8000d98:	e75f      	b.n	8000c5a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d9c:	f000 f8b6 	bl	8000f0c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000da0:	f000 fba6 	bl	80014f0 <xTaskResumeAll>
 8000da4:	e759      	b.n	8000c5a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000da8:	f000 f8b0 	bl	8000f0c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000dac:	f000 fba0 	bl	80014f0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000db2:	f000 f8fd 	bl	8000fb0 <prvIsQueueEmpty>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f43f af4e 	beq.w	8000c5a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 f907 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f004 f903 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	9100      	str	r1, [sp, #0]
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	205c      	movs	r0, #92	; 0x5c
 8000dda:	f003 fbe3 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8000dde:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3734      	adds	r7, #52	; 0x34
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	e000ed04 	.word	0xe000ed04

08000dec <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e00:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10d      	bne.n	8000e26 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d14d      	bne.n	8000eae <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 ff62 	bl	8001ce0 <xTaskPriorityDisinherit>
 8000e1c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	e043      	b.n	8000eae <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d119      	bne.n	8000e60 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6858      	ldr	r0, [r3, #4]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	461a      	mov	r2, r3
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	f004 fcb4 	bl	80057a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	441a      	add	r2, r3
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d32b      	bcc.n	8000eae <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	e026      	b.n	8000eae <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	68d8      	ldr	r0, [r3, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	461a      	mov	r2, r3
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	f004 fc9a 	bl	80057a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	425b      	negs	r3, r3
 8000e7a:	441a      	add	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	68da      	ldr	r2, [r3, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	425b      	negs	r3, r3
 8000e96:	441a      	add	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d105      	bne.n	8000eae <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1c5a      	adds	r2, r3, #1
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000eb6:	697b      	ldr	r3, [r7, #20]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d018      	beq.n	8000f04 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	441a      	add	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d303      	bcc.n	8000ef4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68d9      	ldr	r1, [r3, #12]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	461a      	mov	r2, r3
 8000efe:	6838      	ldr	r0, [r7, #0]
 8000f00:	f004 fc50 	bl	80057a4 <memcpy>
    }
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000f14:	f001 fe16 	bl	8002b44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f1e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f20:	e011      	b.n	8000f46 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d012      	beq.n	8000f50 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3324      	adds	r3, #36	; 0x24
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fd18 	bl	8001964 <xTaskRemoveFromEventList>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8000f3a:	f000 fdf5 	bl	8001b28 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dce9      	bgt.n	8000f22 <prvUnlockQueue+0x16>
 8000f4e:	e000      	b.n	8000f52 <prvUnlockQueue+0x46>
                        break;
 8000f50:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8000f5a:	f001 fe23 	bl	8002ba4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000f5e:	f001 fdf1 	bl	8002b44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f68:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f6a:	e011      	b.n	8000f90 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691b      	ldr	r3, [r3, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d012      	beq.n	8000f9a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3310      	adds	r3, #16
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fcf3 	bl	8001964 <xTaskRemoveFromEventList>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000f84:	f000 fdd0 	bl	8001b28 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dce9      	bgt.n	8000f6c <prvUnlockQueue+0x60>
 8000f98:	e000      	b.n	8000f9c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000f9a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	22ff      	movs	r2, #255	; 0xff
 8000fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000fa4:	f001 fdfe 	bl	8002ba4 <vPortExitCritical>
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fb8:	f001 fdc4 	bl	8002b44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e001      	b.n	8000fce <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000fce:	f001 fde9 	bl	8002ba4 <vPortExitCritical>

    return xReturn;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000fe4:	f001 fdae 	bl	8002b44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d102      	bne.n	8000ffa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e001      	b.n	8000ffe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000ffe:	f001 fdd1 	bl	8002ba4 <vPortExitCritical>

    return xReturn;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e01e      	b.n	800105a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <vQueueAddToRegistry+0x60>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d115      	bne.n	8001054 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001028:	4910      	ldr	r1, [pc, #64]	; (800106c <vQueueAddToRegistry+0x60>)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <vQueueAddToRegistry+0x60>)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4413      	add	r3, r2
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	f003 ffc7 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 8001046:	4601      	mov	r1, r0
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	2071      	movs	r0, #113	; 0x71
 800104e:	f003 f9d9 	bl	8004404 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001052:	e006      	b.n	8001062 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b07      	cmp	r3, #7
 800105e:	d9dd      	bls.n	800101c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000054 	.word	0x20000054

08001070 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001080:	f001 fd60 	bl	8002b44 <vPortEnterCritical>
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800108a:	b25b      	sxtb	r3, r3
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d103      	bne.n	800109a <vQueueWaitForMessageRestricted+0x2a>
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a6:	d103      	bne.n	80010b0 <vQueueWaitForMessageRestricted+0x40>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010b0:	f001 fd78 	bl	8002ba4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	3324      	adds	r3, #36	; 0x24
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 fc1f 	bl	8001908 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff1e 	bl	8000f0c <prvUnlockQueue>
    }
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af04      	add	r7, sp, #16
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	4613      	mov	r3, r2
 80010e6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fe55 	bl	8002d9c <pvPortMalloc>
 80010f2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00e      	beq.n	8001118 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80010fa:	2058      	movs	r0, #88	; 0x58
 80010fc:	f001 fe4e 	bl	8002d9c <pvPortMalloc>
 8001100:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
 800110e:	e005      	b.n	800111c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001110:	6978      	ldr	r0, [r7, #20]
 8001112:	f001 ff23 	bl	8002f5c <vPortFree>
 8001116:	e001      	b.n	800111c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d013      	beq.n	800114a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001122:	88fa      	ldrh	r2, [r7, #6]
 8001124:	2300      	movs	r3, #0
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f80e 	bl	800115a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800113e:	69f8      	ldr	r0, [r7, #28]
 8001140:	f000 f8a2 	bl	8001288 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001144:	2301      	movs	r3, #1
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	e002      	b.n	8001150 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001150:	69bb      	ldr	r3, [r7, #24]
    }
 8001152:	4618      	mov	r0, r3
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b088      	sub	sp, #32
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	461a      	mov	r2, r3
 8001172:	21a5      	movs	r1, #165	; 0xa5
 8001174:	f004 fb24 	bl	80057c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001182:	3b01      	subs	r3, #1
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f023 0307 	bic.w	r3, r3, #7
 8001190:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00a      	beq.n	80011b2 <prvInitialiseNewTask+0x58>
        __asm volatile
 800119c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a0:	f383 8811 	msr	BASEPRI, r3
 80011a4:	f3bf 8f6f 	isb	sy
 80011a8:	f3bf 8f4f 	dsb	sy
 80011ac:	617b      	str	r3, [r7, #20]
    }
 80011ae:	bf00      	nop
 80011b0:	e7fe      	b.n	80011b0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01f      	beq.n	80011f8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011b8:	2300      	movs	r3, #0
 80011ba:	61fb      	str	r3, [r7, #28]
 80011bc:	e012      	b.n	80011e4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4413      	add	r3, r2
 80011c4:	7819      	ldrb	r1, [r3, #0]
 80011c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	4413      	add	r3, r2
 80011cc:	3334      	adds	r3, #52	; 0x34
 80011ce:	460a      	mov	r2, r1
 80011d0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	d9e9      	bls.n	80011be <prvInitialiseNewTask+0x64>
 80011ea:	e000      	b.n	80011ee <prvInitialiseNewTask+0x94>
            {
                break;
 80011ec:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80011ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80011f6:	e003      	b.n	8001200 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001202:	2b04      	cmp	r3, #4
 8001204:	d901      	bls.n	800120a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001206:	2304      	movs	r3, #4
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800120a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001214:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001218:	2200      	movs	r2, #0
 800121a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800121c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121e:	3304      	adds	r3, #4
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff f96a 	bl	80004fa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001228:	3318      	adds	r3, #24
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f965 	bl	80004fa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001234:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	f1c3 0205 	rsb	r2, r3, #5
 800123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001248:	3350      	adds	r3, #80	; 0x50
 800124a:	2204      	movs	r2, #4
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fab6 	bl	80057c0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001256:	3354      	adds	r3, #84	; 0x54
 8001258:	2201      	movs	r2, #1
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f004 faaf 	bl	80057c0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	69b8      	ldr	r0, [r7, #24]
 8001268:	f001 fabe 	bl	80027e8 <pxPortInitialiseStack>
 800126c:	4602      	mov	r2, r0
 800126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001270:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800127c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800127e:	bf00      	nop
 8001280:	3720      	adds	r7, #32
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001290:	f001 fc58 	bl	8002b44 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <prvAddNewTaskToReadyList+0xfc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a3a      	ldr	r2, [pc, #232]	; (8001384 <prvAddNewTaskToReadyList+0xfc>)
 800129c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <prvAddNewTaskToReadyList+0x100>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d109      	bne.n	80012ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80012a6:	4a38      	ldr	r2, [pc, #224]	; (8001388 <prvAddNewTaskToReadyList+0x100>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012ac:	4b35      	ldr	r3, [pc, #212]	; (8001384 <prvAddNewTaskToReadyList+0xfc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d110      	bne.n	80012d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80012b4:	f000 fc5c 	bl	8001b70 <prvInitialiseTaskLists>
 80012b8:	e00d      	b.n	80012d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <prvAddNewTaskToReadyList+0x104>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <prvAddNewTaskToReadyList+0x100>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d802      	bhi.n	80012d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80012d0:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <prvAddNewTaskToReadyList+0x100>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <prvAddNewTaskToReadyList+0x108>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <prvAddNewTaskToReadyList+0x108>)
 80012de:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <prvAddNewTaskToReadyList+0x108>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <prvAddNewTaskToReadyList+0x94>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fd49 	bl	8004d88 <SEGGER_SYSVIEW_OnTaskCreate>
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	461d      	mov	r5, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	461c      	mov	r4, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	1ae3      	subs	r3, r4, r3
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	462b      	mov	r3, r5
 8001318:	f001 ffee 	bl	80032f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fdb6 	bl	8004e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	2201      	movs	r2, #1
 800132a:	409a      	lsls	r2, r3
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <prvAddNewTaskToReadyList+0x10c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4313      	orrs	r3, r2
 8001332:	4a18      	ldr	r2, [pc, #96]	; (8001394 <prvAddNewTaskToReadyList+0x10c>)
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4a15      	ldr	r2, [pc, #84]	; (8001398 <prvAddNewTaskToReadyList+0x110>)
 8001344:	441a      	add	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3304      	adds	r3, #4
 800134a:	4619      	mov	r1, r3
 800134c:	4610      	mov	r0, r2
 800134e:	f7ff f8e1 	bl	8000514 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001352:	f001 fc27 	bl	8002ba4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <prvAddNewTaskToReadyList+0x104>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00e      	beq.n	800137c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <prvAddNewTaskToReadyList+0x100>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	429a      	cmp	r2, r3
 800136a:	d207      	bcs.n	800137c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <prvAddNewTaskToReadyList+0x114>)
 800136e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	f3bf 8f4f 	dsb	sy
 8001378:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	2000016c 	.word	0x2000016c
 8001388:	20000094 	.word	0x20000094
 800138c:	20000178 	.word	0x20000178
 8001390:	20000188 	.word	0x20000188
 8001394:	20000174 	.word	0x20000174
 8001398:	20000098 	.word	0x20000098
 800139c:	e000ed04 	.word	0xe000ed04

080013a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01b      	beq.n	80013ea <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <vTaskDelay+0x68>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00a      	beq.n	80013d0 <vTaskDelay+0x30>
        __asm volatile
 80013ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013be:	f383 8811 	msr	BASEPRI, r3
 80013c2:	f3bf 8f6f 	isb	sy
 80013c6:	f3bf 8f4f 	dsb	sy
 80013ca:	60bb      	str	r3, [r7, #8]
    }
 80013cc:	bf00      	nop
 80013ce:	e7fe      	b.n	80013ce <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80013d0:	f000 f880 	bl	80014d4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	2023      	movs	r0, #35	; 0x23
 80013d8:	f002 ffd8 	bl	800438c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80013dc:	2100      	movs	r1, #0
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fe78 	bl	80020d4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80013e4:	f000 f884 	bl	80014f0 <xTaskResumeAll>
 80013e8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d107      	bne.n	8001400 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <vTaskDelay+0x6c>)
 80013f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	f3bf 8f4f 	dsb	sy
 80013fc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000194 	.word	0x20000194
 800140c:	e000ed04 	.word	0xe000ed04

08001410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <vTaskStartScheduler+0xa4>)
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2300      	movs	r3, #0
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	2282      	movs	r2, #130	; 0x82
 8001422:	4925      	ldr	r1, [pc, #148]	; (80014b8 <vTaskStartScheduler+0xa8>)
 8001424:	4825      	ldr	r0, [pc, #148]	; (80014bc <vTaskStartScheduler+0xac>)
 8001426:	f7ff fe57 	bl	80010d8 <xTaskCreate>
 800142a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d102      	bne.n	8001438 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001432:	f000 fec7 	bl	80021c4 <xTimerCreateTimerTask>
 8001436:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d124      	bne.n	8001488 <vTaskStartScheduler+0x78>
        __asm volatile
 800143e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001442:	f383 8811 	msr	BASEPRI, r3
 8001446:	f3bf 8f6f 	isb	sy
 800144a:	f3bf 8f4f 	dsb	sy
 800144e:	60bb      	str	r3, [r7, #8]
    }
 8001450:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001452:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <vTaskStartScheduler+0xb0>)
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <vTaskStartScheduler+0xb4>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <vTaskStartScheduler+0xb8>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <vTaskStartScheduler+0xbc>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <vTaskStartScheduler+0xa4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d102      	bne.n	8001478 <vTaskStartScheduler+0x68>
 8001472:	f003 fc6d 	bl	8004d50 <SEGGER_SYSVIEW_OnIdle>
 8001476:	e004      	b.n	8001482 <vTaskStartScheduler+0x72>
 8001478:	4b14      	ldr	r3, [pc, #80]	; (80014cc <vTaskStartScheduler+0xbc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f003 fcc5 	bl	8004e0c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001482:	f001 fa3f 	bl	8002904 <xPortStartScheduler>
 8001486:	e00e      	b.n	80014a6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148e:	d10a      	bne.n	80014a6 <vTaskStartScheduler+0x96>
        __asm volatile
 8001490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001494:	f383 8811 	msr	BASEPRI, r3
 8001498:	f3bf 8f6f 	isb	sy
 800149c:	f3bf 8f4f 	dsb	sy
 80014a0:	607b      	str	r3, [r7, #4]
    }
 80014a2:	bf00      	nop
 80014a4:	e7fe      	b.n	80014a4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <vTaskStartScheduler+0xc0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000190 	.word	0x20000190
 80014b8:	0800581c 	.word	0x0800581c
 80014bc:	08001b41 	.word	0x08001b41
 80014c0:	2000018c 	.word	0x2000018c
 80014c4:	20000178 	.word	0x20000178
 80014c8:	20000170 	.word	0x20000170
 80014cc:	20000094 	.word	0x20000094
 80014d0:	20000004 	.word	0x20000004

080014d4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <vTaskSuspendAll+0x18>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a03      	ldr	r2, [pc, #12]	; (80014ec <vTaskSuspendAll+0x18>)
 80014e0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	20000194 	.word	0x20000194

080014f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80014fe:	4b43      	ldr	r3, [pc, #268]	; (800160c <xTaskResumeAll+0x11c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10a      	bne.n	800151c <xTaskResumeAll+0x2c>
        __asm volatile
 8001506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800150a:	f383 8811 	msr	BASEPRI, r3
 800150e:	f3bf 8f6f 	isb	sy
 8001512:	f3bf 8f4f 	dsb	sy
 8001516:	603b      	str	r3, [r7, #0]
    }
 8001518:	bf00      	nop
 800151a:	e7fe      	b.n	800151a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800151c:	f001 fb12 	bl	8002b44 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001520:	4b3a      	ldr	r3, [pc, #232]	; (800160c <xTaskResumeAll+0x11c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	4a39      	ldr	r2, [pc, #228]	; (800160c <xTaskResumeAll+0x11c>)
 8001528:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800152a:	4b38      	ldr	r3, [pc, #224]	; (800160c <xTaskResumeAll+0x11c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d165      	bne.n	80015fe <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <xTaskResumeAll+0x120>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d061      	beq.n	80015fe <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800153a:	e032      	b.n	80015a2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800153c:	4b35      	ldr	r3, [pc, #212]	; (8001614 <xTaskResumeAll+0x124>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3318      	adds	r3, #24
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f840 	bl	80005ce <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3304      	adds	r3, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f83b 	bl	80005ce <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fc98 	bl	8004e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	2201      	movs	r2, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <xTaskResumeAll+0x128>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4313      	orrs	r3, r2
 800156e:	4a2a      	ldr	r2, [pc, #168]	; (8001618 <xTaskResumeAll+0x128>)
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4a27      	ldr	r2, [pc, #156]	; (800161c <xTaskResumeAll+0x12c>)
 8001580:	441a      	add	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3304      	adds	r3, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f7fe ffc3 	bl	8000514 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <xTaskResumeAll+0x130>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	429a      	cmp	r2, r3
 800159a:	d302      	bcc.n	80015a2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800159c:	4b21      	ldr	r3, [pc, #132]	; (8001624 <xTaskResumeAll+0x134>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <xTaskResumeAll+0x124>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1c8      	bne.n	800153c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80015b0:	f000 fb5c 	bl	8001c6c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <xTaskResumeAll+0x138>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d010      	beq.n	80015e2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80015c0:	f000 f858 	bl	8001674 <xTaskIncrementTick>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <xTaskResumeAll+0x134>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f1      	bne.n	80015c0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <xTaskResumeAll+0x138>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <xTaskResumeAll+0x134>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80015ea:	2301      	movs	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <xTaskResumeAll+0x13c>)
 80015f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	f3bf 8f4f 	dsb	sy
 80015fa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80015fe:	f001 fad1 	bl	8002ba4 <vPortExitCritical>

    return xAlreadyYielded;
 8001602:	68bb      	ldr	r3, [r7, #8]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000194 	.word	0x20000194
 8001610:	2000016c 	.word	0x2000016c
 8001614:	2000012c 	.word	0x2000012c
 8001618:	20000174 	.word	0x20000174
 800161c:	20000098 	.word	0x20000098
 8001620:	20000094 	.word	0x20000094
 8001624:	20000180 	.word	0x20000180
 8001628:	2000017c 	.word	0x2000017c
 800162c:	e000ed04 	.word	0xe000ed04

08001630 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <xTaskGetTickCount+0x1c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800163c:	687b      	ldr	r3, [r7, #4]
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000170 	.word	0x20000170

08001650 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001656:	f001 fb61 	bl	8002d1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <xTaskGetTickCountFromISR+0x20>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001664:	683b      	ldr	r3, [r7, #0]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000170 	.word	0x20000170

08001674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800167e:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <xTaskIncrementTick+0x14c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 8092 	bne.w	80017ac <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001688:	4b4e      	ldr	r3, [pc, #312]	; (80017c4 <xTaskIncrementTick+0x150>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001690:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <xTaskIncrementTick+0x150>)
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d120      	bne.n	80016de <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800169c:	4b4a      	ldr	r3, [pc, #296]	; (80017c8 <xTaskIncrementTick+0x154>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00a      	beq.n	80016bc <xTaskIncrementTick+0x48>
        __asm volatile
 80016a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016aa:	f383 8811 	msr	BASEPRI, r3
 80016ae:	f3bf 8f6f 	isb	sy
 80016b2:	f3bf 8f4f 	dsb	sy
 80016b6:	603b      	str	r3, [r7, #0]
    }
 80016b8:	bf00      	nop
 80016ba:	e7fe      	b.n	80016ba <xTaskIncrementTick+0x46>
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <xTaskIncrementTick+0x154>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <xTaskIncrementTick+0x158>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a40      	ldr	r2, [pc, #256]	; (80017c8 <xTaskIncrementTick+0x154>)
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4a40      	ldr	r2, [pc, #256]	; (80017cc <xTaskIncrementTick+0x158>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <xTaskIncrementTick+0x15c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	4a3e      	ldr	r2, [pc, #248]	; (80017d0 <xTaskIncrementTick+0x15c>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	f000 fac7 	bl	8001c6c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <xTaskIncrementTick+0x160>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d34c      	bcc.n	8001782 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <xTaskIncrementTick+0x154>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d104      	bne.n	80016fc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016f2:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <xTaskIncrementTick+0x160>)
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	601a      	str	r2, [r3, #0]
                    break;
 80016fa:	e042      	b.n	8001782 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80016fc:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <xTaskIncrementTick+0x154>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	d203      	bcs.n	800171c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001714:	4a2f      	ldr	r2, [pc, #188]	; (80017d4 <xTaskIncrementTick+0x160>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800171a:	e032      	b.n	8001782 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	3304      	adds	r3, #4
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff54 	bl	80005ce <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	2b00      	cmp	r3, #0
 800172c:	d004      	beq.n	8001738 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3318      	adds	r3, #24
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff4b 	bl	80005ce <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fba8 	bl	8004e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	2201      	movs	r2, #1
 8001746:	409a      	lsls	r2, r3
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <xTaskIncrementTick+0x164>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4313      	orrs	r3, r2
 800174e:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <xTaskIncrementTick+0x164>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <xTaskIncrementTick+0x168>)
 8001760:	441a      	add	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3304      	adds	r3, #4
 8001766:	4619      	mov	r1, r3
 8001768:	4610      	mov	r0, r2
 800176a:	f7fe fed3 	bl	8000514 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <xTaskIncrementTick+0x16c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	429a      	cmp	r2, r3
 800177a:	d3b5      	bcc.n	80016e8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800177c:	2301      	movs	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001780:	e7b2      	b.n	80016e8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <xTaskIncrementTick+0x16c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	4914      	ldr	r1, [pc, #80]	; (80017dc <xTaskIncrementTick+0x168>)
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d901      	bls.n	800179e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800179a:	2301      	movs	r3, #1
 800179c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <xTaskIncrementTick+0x170>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e004      	b.n	80017b6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <xTaskIncrementTick+0x174>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <xTaskIncrementTick+0x174>)
 80017b4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80017b6:	697b      	ldr	r3, [r7, #20]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000194 	.word	0x20000194
 80017c4:	20000170 	.word	0x20000170
 80017c8:	20000124 	.word	0x20000124
 80017cc:	20000128 	.word	0x20000128
 80017d0:	20000184 	.word	0x20000184
 80017d4:	2000018c 	.word	0x2000018c
 80017d8:	20000174 	.word	0x20000174
 80017dc:	20000098 	.word	0x20000098
 80017e0:	20000094 	.word	0x20000094
 80017e4:	20000180 	.word	0x20000180
 80017e8:	2000017c 	.word	0x2000017c

080017ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80017f2:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <vTaskSwitchContext+0xbc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <vTaskSwitchContext+0xc0>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001800:	e04d      	b.n	800189e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <vTaskSwitchContext+0xc0>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <vTaskSwitchContext+0xc4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001816:	7afb      	ldrb	r3, [r7, #11]
 8001818:	f1c3 031f 	rsb	r3, r3, #31
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	4925      	ldr	r1, [pc, #148]	; (80018b4 <vTaskSwitchContext+0xc8>)
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10a      	bne.n	8001848 <vTaskSwitchContext+0x5c>
        __asm volatile
 8001832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001836:	f383 8811 	msr	BASEPRI, r3
 800183a:	f3bf 8f6f 	isb	sy
 800183e:	f3bf 8f4f 	dsb	sy
 8001842:	607b      	str	r3, [r7, #4]
    }
 8001844:	bf00      	nop
 8001846:	e7fe      	b.n	8001846 <vTaskSwitchContext+0x5a>
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <vTaskSwitchContext+0xc8>)
 8001854:	4413      	add	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	3308      	adds	r3, #8
 800186a:	429a      	cmp	r2, r3
 800186c:	d104      	bne.n	8001878 <vTaskSwitchContext+0x8c>
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <vTaskSwitchContext+0xcc>)
 8001880:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <vTaskSwitchContext+0xcc>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <vTaskSwitchContext+0xd0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d102      	bne.n	8001894 <vTaskSwitchContext+0xa8>
 800188e:	f003 fa5f 	bl	8004d50 <SEGGER_SYSVIEW_OnIdle>
}
 8001892:	e004      	b.n	800189e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <vTaskSwitchContext+0xcc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f003 fab7 	bl	8004e0c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000194 	.word	0x20000194
 80018ac:	20000180 	.word	0x20000180
 80018b0:	20000174 	.word	0x20000174
 80018b4:	20000098 	.word	0x20000098
 80018b8:	20000094 	.word	0x20000094
 80018bc:	20000190 	.word	0x20000190

080018c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d10a      	bne.n	80018e6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80018d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d4:	f383 8811 	msr	BASEPRI, r3
 80018d8:	f3bf 8f6f 	isb	sy
 80018dc:	f3bf 8f4f 	dsb	sy
 80018e0:	60fb      	str	r3, [r7, #12]
    }
 80018e2:	bf00      	nop
 80018e4:	e7fe      	b.n	80018e4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <vTaskPlaceOnEventList+0x44>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3318      	adds	r3, #24
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe fe34 	bl	800055c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80018f4:	2101      	movs	r1, #1
 80018f6:	6838      	ldr	r0, [r7, #0]
 80018f8:	f000 fbec 	bl	80020d4 <prvAddCurrentTaskToDelayedList>
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000094 	.word	0x20000094

08001908 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10a      	bne.n	8001930 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800191e:	f383 8811 	msr	BASEPRI, r3
 8001922:	f3bf 8f6f 	isb	sy
 8001926:	f3bf 8f4f 	dsb	sy
 800192a:	617b      	str	r3, [r7, #20]
    }
 800192c:	bf00      	nop
 800192e:	e7fe      	b.n	800192e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <vTaskPlaceOnEventListRestricted+0x58>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3318      	adds	r3, #24
 8001936:	4619      	mov	r1, r3
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f7fe fdeb 	bl	8000514 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
 8001948:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800194a:	2024      	movs	r0, #36	; 0x24
 800194c:	f002 fd00 	bl	8004350 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	68b8      	ldr	r0, [r7, #8]
 8001954:	f000 fbbe 	bl	80020d4 <prvAddCurrentTaskToDelayedList>
    }
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000094 	.word	0x20000094

08001964 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10a      	bne.n	8001990 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	60fb      	str	r3, [r7, #12]
    }
 800198c:	bf00      	nop
 800198e:	e7fe      	b.n	800198e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	3318      	adds	r3, #24
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fe1a 	bl	80005ce <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <xTaskRemoveFromEventList+0xb4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d120      	bne.n	80019e4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	3304      	adds	r3, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fe11 	bl	80005ce <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fa6e 	bl	8004e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b8:	2201      	movs	r2, #1
 80019ba:	409a      	lsls	r2, r3
 80019bc:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <xTaskRemoveFromEventList+0xb8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <xTaskRemoveFromEventList+0xb8>)
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <xTaskRemoveFromEventList+0xbc>)
 80019d4:	441a      	add	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	3304      	adds	r3, #4
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f7fe fd99 	bl	8000514 <vListInsertEnd>
 80019e2:	e005      	b.n	80019f0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	3318      	adds	r3, #24
 80019e8:	4619      	mov	r1, r3
 80019ea:	480e      	ldr	r0, [pc, #56]	; (8001a24 <xTaskRemoveFromEventList+0xc0>)
 80019ec:	f7fe fd92 	bl	8000514 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <xTaskRemoveFromEventList+0xc4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d905      	bls.n	8001a0a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80019fe:	2301      	movs	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <xTaskRemoveFromEventList+0xc8>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	e001      	b.n	8001a0e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8001a0e:	697b      	ldr	r3, [r7, #20]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000194 	.word	0x20000194
 8001a1c:	20000174 	.word	0x20000174
 8001a20:	20000098 	.word	0x20000098
 8001a24:	2000012c 	.word	0x2000012c
 8001a28:	20000094 	.word	0x20000094
 8001a2c:	20000180 	.word	0x20000180

08001a30 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <vTaskInternalSetTimeOutState+0x24>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <vTaskInternalSetTimeOutState+0x28>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	605a      	str	r2, [r3, #4]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	20000184 	.word	0x20000184
 8001a58:	20000170 	.word	0x20000170

08001a5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8001a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	613b      	str	r3, [r7, #16]
    }
 8001a7e:	bf00      	nop
 8001a80:	e7fe      	b.n	8001a80 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10a      	bne.n	8001a9e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8c:	f383 8811 	msr	BASEPRI, r3
 8001a90:	f3bf 8f6f 	isb	sy
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	60fb      	str	r3, [r7, #12]
    }
 8001a9a:	bf00      	nop
 8001a9c:	e7fe      	b.n	8001a9c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001a9e:	f001 f851 	bl	8002b44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <xTaskCheckForTimeOut+0xc4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aba:	d102      	bne.n	8001ac2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	e026      	b.n	8001b10 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <xTaskCheckForTimeOut+0xc8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d00a      	beq.n	8001ae4 <xTaskCheckForTimeOut+0x88>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d305      	bcc.n	8001ae4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e015      	b.n	8001b10 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d20b      	bcs.n	8001b06 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1ad2      	subs	r2, r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff98 	bl	8001a30 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e004      	b.n	8001b10 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001b10:	f001 f848 	bl	8002ba4 <vPortExitCritical>

    return xReturn;
 8001b14:	69fb      	ldr	r3, [r7, #28]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000170 	.word	0x20000170
 8001b24:	20000184 	.word	0x20000184

08001b28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <vTaskMissedYield+0x14>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	20000180 	.word	0x20000180

08001b40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001b48:	f000 f852 	bl	8001bf0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <prvIdleTask+0x28>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d9f9      	bls.n	8001b48 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <prvIdleTask+0x2c>)
 8001b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001b64:	e7f0      	b.n	8001b48 <prvIdleTask+0x8>
 8001b66:	bf00      	nop
 8001b68:	20000098 	.word	0x20000098
 8001b6c:	e000ed04 	.word	0xe000ed04

08001b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	e00c      	b.n	8001b96 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <prvInitialiseTaskLists+0x60>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc95 	bl	80004ba <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3301      	adds	r3, #1
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d9ef      	bls.n	8001b7c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <prvInitialiseTaskLists+0x64>)
 8001b9e:	f7fe fc8c 	bl	80004ba <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001ba2:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <prvInitialiseTaskLists+0x68>)
 8001ba4:	f7fe fc89 	bl	80004ba <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <prvInitialiseTaskLists+0x6c>)
 8001baa:	f7fe fc86 	bl	80004ba <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8001bae:	480c      	ldr	r0, [pc, #48]	; (8001be0 <prvInitialiseTaskLists+0x70>)
 8001bb0:	f7fe fc83 	bl	80004ba <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8001bb4:	480b      	ldr	r0, [pc, #44]	; (8001be4 <prvInitialiseTaskLists+0x74>)
 8001bb6:	f7fe fc80 	bl	80004ba <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <prvInitialiseTaskLists+0x78>)
 8001bbc:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <prvInitialiseTaskLists+0x64>)
 8001bbe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <prvInitialiseTaskLists+0x7c>)
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <prvInitialiseTaskLists+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000098 	.word	0x20000098
 8001bd4:	200000fc 	.word	0x200000fc
 8001bd8:	20000110 	.word	0x20000110
 8001bdc:	2000012c 	.word	0x2000012c
 8001be0:	20000140 	.word	0x20000140
 8001be4:	20000158 	.word	0x20000158
 8001be8:	20000124 	.word	0x20000124
 8001bec:	20000128 	.word	0x20000128

08001bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bf6:	e019      	b.n	8001c2c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8001bf8:	f000 ffa4 	bl	8002b44 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <prvCheckTasksWaitingTermination+0x50>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fce0 	bl	80005ce <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <prvCheckTasksWaitingTermination+0x54>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <prvCheckTasksWaitingTermination+0x54>)
 8001c16:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <prvCheckTasksWaitingTermination+0x58>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <prvCheckTasksWaitingTermination+0x58>)
 8001c20:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8001c22:	f000 ffbf 	bl	8002ba4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f810 	bl	8001c4c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <prvCheckTasksWaitingTermination+0x58>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e1      	bne.n	8001bf8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000140 	.word	0x20000140
 8001c44:	2000016c 	.word	0x2000016c
 8001c48:	20000154 	.word	0x20000154

08001c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 f97f 	bl	8002f5c <vPortFree>
                vPortFree( pxTCB );
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f001 f97c 	bl	8002f5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <prvResetNextTaskUnblockTime+0x30>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d104      	bne.n	8001c84 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <prvResetNextTaskUnblockTime+0x34>)
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c82:	e005      	b.n	8001c90 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <prvResetNextTaskUnblockTime+0x30>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <prvResetNextTaskUnblockTime+0x34>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000124 	.word	0x20000124
 8001ca0:	2000018c 	.word	0x2000018c

08001ca4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <xTaskGetSchedulerState+0x34>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	e008      	b.n	8001cca <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <xTaskGetSchedulerState+0x38>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	e001      	b.n	8001cca <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8001cca:	687b      	ldr	r3, [r7, #4]
    }
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	20000178 	.word	0x20000178
 8001cdc:	20000194 	.word	0x20000194

08001ce0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d068      	beq.n	8001dc8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001cf6:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <xTaskPriorityDisinherit+0xf4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d00a      	beq.n	8001d16 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8001d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d04:	f383 8811 	msr	BASEPRI, r3
 8001d08:	f3bf 8f6f 	isb	sy
 8001d0c:	f3bf 8f4f 	dsb	sy
 8001d10:	60fb      	str	r3, [r7, #12]
    }
 8001d12:	bf00      	nop
 8001d14:	e7fe      	b.n	8001d14 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10a      	bne.n	8001d34 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8001d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d22:	f383 8811 	msr	BASEPRI, r3
 8001d26:	f3bf 8f6f 	isb	sy
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	60bb      	str	r3, [r7, #8]
    }
 8001d30:	bf00      	nop
 8001d32:	e7fe      	b.n	8001d32 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d03e      	beq.n	8001dc8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d13a      	bne.n	8001dc8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	3304      	adds	r3, #4
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fc39 	bl	80005ce <uxListRemove>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10a      	bne.n	8001d78 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	2201      	movs	r2, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <xTaskPriorityDisinherit+0xf8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4013      	ands	r3, r2
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <xTaskPriorityDisinherit+0xf8>)
 8001d76:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	204a      	movs	r0, #74	; 0x4a
 8001d7e:	f002 fb05 	bl	800438c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f1c3 0205 	rsb	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <xTaskPriorityDisinherit+0xf8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <xTaskPriorityDisinherit+0xf8>)
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <xTaskPriorityDisinherit+0xfc>)
 8001db6:	441a      	add	r2, r3
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f7fe fba8 	bl	8000514 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001dc8:	697b      	ldr	r3, [r7, #20]
    }
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000094 	.word	0x20000094
 8001dd8:	20000174 	.word	0x20000174
 8001ddc:	20000098 	.word	0x20000098

08001de0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8001df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	613b      	str	r3, [r7, #16]
    }
 8001e06:	bf00      	nop
 8001e08:	e7fe      	b.n	8001e08 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8001e0a:	f000 fe9b 	bl	8002b44 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <xTaskGenericNotifyWait+0x108>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4413      	add	r3, r2
 8001e16:	3354      	adds	r3, #84	; 0x54
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d022      	beq.n	8001e66 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <xTaskGenericNotifyWait+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	3214      	adds	r2, #20
 8001e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	43d2      	mvns	r2, r2
 8001e30:	4011      	ands	r1, r2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	3214      	adds	r2, #20
 8001e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <xTaskGenericNotifyWait+0x108>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	3354      	adds	r3, #84	; 0x54
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e4e:	2101      	movs	r1, #1
 8001e50:	6a38      	ldr	r0, [r7, #32]
 8001e52:	f000 f93f 	bl	80020d4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8001e56:	4b25      	ldr	r3, [pc, #148]	; (8001eec <xTaskGenericNotifyWait+0x10c>)
 8001e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f3bf 8f4f 	dsb	sy
 8001e62:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e66:	f000 fe9d 	bl	8002ba4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8001e6a:	f000 fe6b 	bl	8002b44 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	2040      	movs	r0, #64	; 0x40
 8001e7c:	f002 fb92 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d007      	beq.n	8001e96 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <xTaskGenericNotifyWait+0x108>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	3214      	adds	r2, #20
 8001e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <xTaskGenericNotifyWait+0x108>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3354      	adds	r3, #84	; 0x54
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d002      	beq.n	8001eae <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e00e      	b.n	8001ecc <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <xTaskGenericNotifyWait+0x108>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	3214      	adds	r2, #20
 8001eb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	43d2      	mvns	r2, r2
 8001ebe:	4011      	ands	r1, r2
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	3214      	adds	r2, #20
 8001ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <xTaskGenericNotifyWait+0x108>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3354      	adds	r3, #84	; 0x54
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8001eda:	f000 fe63 	bl	8002ba4 <vPortExitCritical>

        return xReturn;
 8001ede:	697b      	ldr	r3, [r7, #20]
    }
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000094 	.word	0x20000094
 8001eec:	e000ed04 	.word	0xe000ed04

08001ef0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08e      	sub	sp, #56	; 0x38
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8001efe:	2301      	movs	r3, #1
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <xTaskGenericNotify+0x2e>
        __asm volatile
 8001f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0c:	f383 8811 	msr	BASEPRI, r3
 8001f10:	f3bf 8f6f 	isb	sy
 8001f14:	f3bf 8f4f 	dsb	sy
 8001f18:	623b      	str	r3, [r7, #32]
    }
 8001f1a:	bf00      	nop
 8001f1c:	e7fe      	b.n	8001f1c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <xTaskGenericNotify+0x4a>
        __asm volatile
 8001f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	f3bf 8f4f 	dsb	sy
 8001f34:	61fb      	str	r3, [r7, #28]
    }
 8001f36:	bf00      	nop
 8001f38:	e7fe      	b.n	8001f38 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8001f3e:	f000 fe01 	bl	8002b44 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8001f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	3214      	adds	r2, #20
 8001f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f54:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8001f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3354      	adds	r3, #84	; 0x54
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8001f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4413      	add	r3, r2
 8001f6a:	3354      	adds	r3, #84	; 0x54
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d83b      	bhi.n	8001fee <xTaskGenericNotify+0xfe>
 8001f76:	a201      	add	r2, pc, #4	; (adr r2, 8001f7c <xTaskGenericNotify+0x8c>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	0800200d 	.word	0x0800200d
 8001f80:	08001f91 	.word	0x08001f91
 8001f84:	08001fad 	.word	0x08001fad
 8001f88:	08001fc5 	.word	0x08001fc5
 8001f8c:	08001fd3 	.word	0x08001fd3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	3214      	adds	r2, #20
 8001f96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	ea42 0103 	orr.w	r1, r2, r3
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	3214      	adds	r2, #20
 8001fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001faa:	e032      	b.n	8002012 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	3214      	adds	r2, #20
 8001fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb6:	1c59      	adds	r1, r3, #1
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	3214      	adds	r2, #20
 8001fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fc2:	e026      	b.n	8002012 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	3214      	adds	r2, #20
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8001fd0:	e01f      	b.n	8002012 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d006      	beq.n	8001fe8 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	3214      	adds	r2, #20
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8001fe6:	e014      	b.n	8002012 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8001fec:	e011      	b.n	8002012 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8001fee:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <xTaskGenericNotify+0x1d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <xTaskGenericNotify+0x120>
        __asm volatile
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	61bb      	str	r3, [r7, #24]
    }
 8002008:	bf00      	nop
 800200a:	e7fe      	b.n	800200a <xTaskGenericNotify+0x11a>
                    break;
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <xTaskGenericNotify+0x122>

                    break;
 8002010:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8002012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002014:	4618      	mov	r0, r3
 8002016:	f002 ffdd 	bl	8004fd4 <SEGGER_SYSVIEW_ShrinkId>
 800201a:	4601      	mov	r1, r0
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4613      	mov	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	203e      	movs	r0, #62	; 0x3e
 8002028:	f002 fabc 	bl	80045a4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800202c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002030:	2b01      	cmp	r3, #1
 8002032:	d13d      	bne.n	80020b0 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002036:	3304      	adds	r3, #4
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fac8 	bl	80005ce <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	4618      	mov	r0, r3
 8002042:	f002 ff25 	bl	8004e90 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <xTaskGenericNotify+0x1d4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <xTaskGenericNotify+0x1d4>)
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4a18      	ldr	r2, [pc, #96]	; (80020c8 <xTaskGenericNotify+0x1d8>)
 8002066:	441a      	add	r2, r3
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	3304      	adds	r3, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4610      	mov	r0, r2
 8002070:	f7fe fa50 	bl	8000514 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <xTaskGenericNotify+0x1a2>
        __asm volatile
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	617b      	str	r3, [r7, #20]
    }
 800208e:	bf00      	nop
 8002090:	e7fe      	b.n	8002090 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <xTaskGenericNotify+0x1dc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209c:	429a      	cmp	r2, r3
 800209e:	d907      	bls.n	80020b0 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <xTaskGenericNotify+0x1e0>)
 80020a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80020b0:	f000 fd78 	bl	8002ba4 <vPortExitCritical>

        return xReturn;
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80020b6:	4618      	mov	r0, r3
 80020b8:	3730      	adds	r7, #48	; 0x30
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000170 	.word	0x20000170
 80020c4:	20000174 	.word	0x20000174
 80020c8:	20000098 	.word	0x20000098
 80020cc:	20000094 	.word	0x20000094
 80020d0:	e000ed04 	.word	0xe000ed04

080020d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80020de:	4b32      	ldr	r3, [pc, #200]	; (80021a8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3304      	adds	r3, #4
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fa6f 	bl	80005ce <uxListRemove>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	2201      	movs	r2, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4013      	ands	r3, r2
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800210c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002114:	d110      	bne.n	8002138 <prvAddCurrentTaskToDelayedList+0x64>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800211c:	4b23      	ldr	r3, [pc, #140]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	211b      	movs	r1, #27
 8002122:	4618      	mov	r0, r3
 8002124:	f002 fef6 	bl	8004f14 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3304      	adds	r3, #4
 800212e:	4619      	mov	r1, r3
 8002130:	4820      	ldr	r0, [pc, #128]	; (80021b4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002132:	f7fe f9ef 	bl	8000514 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002136:	e032      	b.n	800219e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68ba      	ldr	r2, [r7, #8]
 8002146:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d20f      	bcs.n	8002170 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2104      	movs	r1, #4
 8002156:	4618      	mov	r0, r3
 8002158:	f002 fedc 	bl	8004f14 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3304      	adds	r3, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f7fe f9f7 	bl	800055c <vListInsert>
}
 800216e:	e016      	b.n	800219e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2104      	movs	r1, #4
 8002176:	4618      	mov	r0, r3
 8002178:	f002 fecc 	bl	8004f14 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	3304      	adds	r3, #4
 8002186:	4619      	mov	r1, r3
 8002188:	4610      	mov	r0, r2
 800218a:	f7fe f9e7 	bl	800055c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xec>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	429a      	cmp	r2, r3
 8002196:	d202      	bcs.n	800219e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002198:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6013      	str	r3, [r2, #0]
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000170 	.word	0x20000170
 80021ac:	20000094 	.word	0x20000094
 80021b0:	20000174 	.word	0x20000174
 80021b4:	20000158 	.word	0x20000158
 80021b8:	20000128 	.word	0x20000128
 80021bc:	20000124 	.word	0x20000124
 80021c0:	2000018c 	.word	0x2000018c

080021c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80021ce:	f000 fad5 	bl	800277c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <xTimerCreateTimerTask+0x54>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <xTimerCreateTimerTask+0x58>)
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2302      	movs	r3, #2
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2300      	movs	r3, #0
 80021e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021e8:	490d      	ldr	r1, [pc, #52]	; (8002220 <xTimerCreateTimerTask+0x5c>)
 80021ea:	480e      	ldr	r0, [pc, #56]	; (8002224 <xTimerCreateTimerTask+0x60>)
 80021ec:	f7fe ff74 	bl	80010d8 <xTaskCreate>
 80021f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80021f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	603b      	str	r3, [r7, #0]
    }
 800220a:	bf00      	nop
 800220c:	e7fe      	b.n	800220c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800220e:	687b      	ldr	r3, [r7, #4]
    }
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200001c8 	.word	0x200001c8
 800221c:	200001cc 	.word	0x200001cc
 8002220:	08005824 	.word	0x08005824
 8002224:	0800235d 	.word	0x0800235d

08002228 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10a      	bne.n	8002256 <xTimerGenericCommand+0x2e>
        __asm volatile
 8002240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
 8002250:	623b      	str	r3, [r7, #32]
    }
 8002252:	bf00      	nop
 8002254:	e7fe      	b.n	8002254 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <xTimerGenericCommand+0x98>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d02a      	beq.n	80022b4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b05      	cmp	r3, #5
 800226e:	dc18      	bgt.n	80022a2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002270:	f7ff fd18 	bl	8001ca4 <xTaskGetSchedulerState>
 8002274:	4603      	mov	r3, r0
 8002276:	2b02      	cmp	r3, #2
 8002278:	d109      	bne.n	800228e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <xTimerGenericCommand+0x98>)
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	f107 0114 	add.w	r1, r7, #20
 8002282:	2300      	movs	r3, #0
 8002284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002286:	f7fe fabd 	bl	8000804 <xQueueGenericSend>
 800228a:	6278      	str	r0, [r7, #36]	; 0x24
 800228c:	e012      	b.n	80022b4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <xTimerGenericCommand+0x98>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f107 0114 	add.w	r1, r7, #20
 8002296:	2300      	movs	r3, #0
 8002298:	2200      	movs	r2, #0
 800229a:	f7fe fab3 	bl	8000804 <xQueueGenericSend>
 800229e:	6278      	str	r0, [r7, #36]	; 0x24
 80022a0:	e008      	b.n	80022b4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <xTimerGenericCommand+0x98>)
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	f107 0114 	add.w	r1, r7, #20
 80022aa:	2300      	movs	r3, #0
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	f7fe fbcf 	bl	8000a50 <xQueueGenericSendFromISR>
 80022b2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80022b6:	4618      	mov	r0, r3
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200001c8 	.word	0x200001c8

080022c4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022ce:	4b22      	ldr	r3, [pc, #136]	; (8002358 <prvProcessExpiredTimer+0x94>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3304      	adds	r3, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f976 	bl	80005ce <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d022      	beq.n	8002336 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	18d1      	adds	r1, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	6978      	ldr	r0, [r7, #20]
 80022fe:	f000 f8d1 	bl	80024a4 <prvInsertTimerInActiveList>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01f      	beq.n	8002348 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002308:	2300      	movs	r3, #0
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2300      	movs	r3, #0
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	2100      	movs	r1, #0
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff88 	bl	8002228 <xTimerGenericCommand>
 8002318:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d113      	bne.n	8002348 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	60fb      	str	r3, [r7, #12]
    }
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	6978      	ldr	r0, [r7, #20]
 800234e:	4798      	blx	r3
    }
 8002350:	bf00      	nop
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200001c0 	.word	0x200001c0

0800235c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f857 	bl	800241c <prvGetNextExpireTime>
 800236e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4619      	mov	r1, r3
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f803 	bl	8002380 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800237a:	f000 f8d5 	bl	8002528 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800237e:	e7f1      	b.n	8002364 <prvTimerTask+0x8>

08002380 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800238a:	f7ff f8a3 	bl	80014d4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f866 	bl	8002464 <prvSampleTimeNow>
 8002398:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d130      	bne.n	8002402 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <prvProcessTimerOrBlockTask+0x3c>
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d806      	bhi.n	80023bc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80023ae:	f7ff f89f 	bl	80014f0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80023b2:	68f9      	ldr	r1, [r7, #12]
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff85 	bl	80022c4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80023ba:	e024      	b.n	8002406 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <prvProcessTimerOrBlockTask+0x90>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <prvProcessTimerOrBlockTask+0x50>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <prvProcessTimerOrBlockTask+0x52>
 80023d0:	2300      	movs	r3, #0
 80023d2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <prvProcessTimerOrBlockTask+0x94>)
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	f7fe fe45 	bl	8001070 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80023e6:	f7ff f883 	bl	80014f0 <xTaskResumeAll>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <prvProcessTimerOrBlockTask+0x98>)
 80023f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	f3bf 8f6f 	isb	sy
    }
 8002400:	e001      	b.n	8002406 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002402:	f7ff f875 	bl	80014f0 <xTaskResumeAll>
    }
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200001c4 	.word	0x200001c4
 8002414:	200001c8 	.word	0x200001c8
 8002418:	e000ed04 	.word	0xe000ed04

0800241c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <prvGetNextExpireTime+0x44>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <prvGetNextExpireTime+0x16>
 800242e:	2201      	movs	r2, #1
 8002430:	e000      	b.n	8002434 <prvGetNextExpireTime+0x18>
 8002432:	2200      	movs	r2, #0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <prvGetNextExpireTime+0x44>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e001      	b.n	8002450 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002450:	68fb      	ldr	r3, [r7, #12]
    }
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200001c0 	.word	0x200001c0

08002464 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800246c:	f7ff f8e0 	bl	8001630 <xTaskGetTickCount>
 8002470:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <prvSampleTimeNow+0x3c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	429a      	cmp	r2, r3
 800247a:	d205      	bcs.n	8002488 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800247c:	f000 f91a 	bl	80026b4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	e002      	b.n	800248e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800248e:	4a04      	ldr	r2, [pc, #16]	; (80024a0 <prvSampleTimeNow+0x3c>)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002494:	68fb      	ldr	r3, [r7, #12]
    }
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200001d0 	.word	0x200001d0

080024a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d812      	bhi.n	80024f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	1ad2      	subs	r2, r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d302      	bcc.n	80024de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80024d8:	2301      	movs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e01b      	b.n	8002516 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <prvInsertTimerInActiveList+0x7c>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3304      	adds	r3, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f7fe f837 	bl	800055c <vListInsert>
 80024ee:	e012      	b.n	8002516 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d206      	bcs.n	8002506 <prvInsertTimerInActiveList+0x62>
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d302      	bcc.n	8002506 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002500:	2301      	movs	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e007      	b.n	8002516 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <prvInsertTimerInActiveList+0x80>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3304      	adds	r3, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f7fe f823 	bl	800055c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002516:	697b      	ldr	r3, [r7, #20]
    }
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200001c4 	.word	0x200001c4
 8002524:	200001c0 	.word	0x200001c0

08002528 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800252e:	e0ae      	b.n	800268e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f2c0 80aa 	blt.w	800268c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	3304      	adds	r3, #4
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe f840 	bl	80005ce <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff87 	bl	8002464 <prvSampleTimeNow>
 8002556:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b09      	cmp	r3, #9
 800255c:	f200 8097 	bhi.w	800268e <prvProcessReceivedCommands+0x166>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <prvProcessReceivedCommands+0x40>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	08002591 	.word	0x08002591
 800256c:	08002591 	.word	0x08002591
 8002570:	08002591 	.word	0x08002591
 8002574:	08002605 	.word	0x08002605
 8002578:	08002619 	.word	0x08002619
 800257c:	08002663 	.word	0x08002663
 8002580:	08002591 	.word	0x08002591
 8002584:	08002591 	.word	0x08002591
 8002588:	08002605 	.word	0x08002605
 800258c:	08002619 	.word	0x08002619
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2da      	uxtb	r2, r3
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	18d1      	adds	r1, r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a3a      	ldr	r2, [r7, #32]
 80025ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025b0:	f7ff ff78 	bl	80024a4 <prvInsertTimerInActiveList>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d069      	beq.n	800268e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025c0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05e      	beq.n	800268e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	441a      	add	r2, r3
 80025d8:	2300      	movs	r3, #0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2300      	movs	r3, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025e2:	f7ff fe21 	bl	8002228 <xTimerGenericCommand>
 80025e6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d14f      	bne.n	800268e <prvProcessReceivedCommands+0x166>
        __asm volatile
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	61bb      	str	r3, [r7, #24]
    }
 8002600:	bf00      	nop
 8002602:	e7fe      	b.n	8002602 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800260a:	f023 0301 	bic.w	r3, r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002616:	e03a      	b.n	800268e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	b2da      	uxtb	r2, r3
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	617b      	str	r3, [r7, #20]
    }
 800264a:	bf00      	nop
 800264c:	e7fe      	b.n	800264c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	18d1      	adds	r1, r2, r3
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800265c:	f7ff ff22 	bl	80024a4 <prvInsertTimerInActiveList>
                        break;
 8002660:	e015      	b.n	800268e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002672:	f000 fc73 	bl	8002f5c <vPortFree>
 8002676:	e00a      	b.n	800268e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800268a:	e000      	b.n	800268e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800268c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <prvProcessReceivedCommands+0x188>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f107 0108 	add.w	r1, r7, #8
 8002696:	2200      	movs	r2, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fa97 	bl	8000bcc <xQueueReceive>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f af45 	bne.w	8002530 <prvProcessReceivedCommands+0x8>
        }
    }
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	3728      	adds	r7, #40	; 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200001c8 	.word	0x200001c8

080026b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026ba:	e048      	b.n	800274e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <prvSwitchTimerLists+0xc0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <prvSwitchTimerLists+0xc0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	3304      	adds	r3, #4
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd ff7a 	bl	80005ce <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d02e      	beq.n	800274e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d90e      	bls.n	8002720 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <prvSwitchTimerLists+0xc0>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3304      	adds	r3, #4
 8002716:	4619      	mov	r1, r3
 8002718:	4610      	mov	r0, r2
 800271a:	f7fd ff1f 	bl	800055c <vListInsert>
 800271e:	e016      	b.n	800274e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2300      	movs	r3, #0
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	2100      	movs	r1, #0
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff fd7c 	bl	8002228 <xTimerGenericCommand>
 8002730:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	603b      	str	r3, [r7, #0]
    }
 800274a:	bf00      	nop
 800274c:	e7fe      	b.n	800274c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <prvSwitchTimerLists+0xc0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1b1      	bne.n	80026bc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <prvSwitchTimerLists+0xc0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <prvSwitchTimerLists+0xc4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a04      	ldr	r2, [pc, #16]	; (8002774 <prvSwitchTimerLists+0xc0>)
 8002764:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <prvSwitchTimerLists+0xc4>)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	6013      	str	r3, [r2, #0]
    }
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200001c0 	.word	0x200001c0
 8002778:	200001c4 	.word	0x200001c4

0800277c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002780:	f000 f9e0 	bl	8002b44 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <prvCheckForValidListAndQueue+0x54>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11d      	bne.n	80027c8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800278c:	4811      	ldr	r0, [pc, #68]	; (80027d4 <prvCheckForValidListAndQueue+0x58>)
 800278e:	f7fd fe94 	bl	80004ba <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002792:	4811      	ldr	r0, [pc, #68]	; (80027d8 <prvCheckForValidListAndQueue+0x5c>)
 8002794:	f7fd fe91 	bl	80004ba <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002798:	4b10      	ldr	r3, [pc, #64]	; (80027dc <prvCheckForValidListAndQueue+0x60>)
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <prvCheckForValidListAndQueue+0x58>)
 800279c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <prvCheckForValidListAndQueue+0x64>)
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <prvCheckForValidListAndQueue+0x5c>)
 80027a2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80027a4:	2200      	movs	r2, #0
 80027a6:	210c      	movs	r1, #12
 80027a8:	200a      	movs	r0, #10
 80027aa:	f7fd ffa3 	bl	80006f4 <xQueueGenericCreate>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <prvCheckForValidListAndQueue+0x54>)
 80027b2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <prvCheckForValidListAndQueue+0x54>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <prvCheckForValidListAndQueue+0x54>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4908      	ldr	r1, [pc, #32]	; (80027e4 <prvCheckForValidListAndQueue+0x68>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fc22 	bl	800100c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80027c8:	f000 f9ec 	bl	8002ba4 <vPortExitCritical>
    }
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	200001c8 	.word	0x200001c8
 80027d4:	20000198 	.word	0x20000198
 80027d8:	200001ac 	.word	0x200001ac
 80027dc:	200001c0 	.word	0x200001c0
 80027e0:	200001c4 	.word	0x200001c4
 80027e4:	0800582c 	.word	0x0800582c

080027e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3b04      	subs	r3, #4
 80027f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002800:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3b04      	subs	r3, #4
 8002806:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f023 0201 	bic.w	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3b04      	subs	r3, #4
 8002816:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002818:	4a0c      	ldr	r2, [pc, #48]	; (800284c <pxPortInitialiseStack+0x64>)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3b14      	subs	r3, #20
 8002822:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b04      	subs	r3, #4
 800282e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f06f 0202 	mvn.w	r2, #2
 8002836:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3b20      	subs	r3, #32
 800283c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	08002851 	.word	0x08002851

08002850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <prvTaskExitError+0x54>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002862:	d00a      	beq.n	800287a <prvTaskExitError+0x2a>
        __asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	60fb      	str	r3, [r7, #12]
    }
 8002876:	bf00      	nop
 8002878:	e7fe      	b.n	8002878 <prvTaskExitError+0x28>
        __asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	60bb      	str	r3, [r7, #8]
    }
 800288c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800288e:	bf00      	nop
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0fc      	beq.n	8002890 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	20000008 	.word	0x20000008
	...

080028b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <pxCurrentTCBConst2>)
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	6808      	ldr	r0, [r1, #0]
 80028b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ba:	f380 8809 	msr	PSP, r0
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f04f 0000 	mov.w	r0, #0
 80028c6:	f380 8811 	msr	BASEPRI, r0
 80028ca:	4770      	bx	lr
 80028cc:	f3af 8000 	nop.w

080028d0 <pxCurrentTCBConst2>:
 80028d0:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop

080028d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80028d8:	4808      	ldr	r0, [pc, #32]	; (80028fc <prvPortStartFirstTask+0x24>)
 80028da:	6800      	ldr	r0, [r0, #0]
 80028dc:	6800      	ldr	r0, [r0, #0]
 80028de:	f380 8808 	msr	MSP, r0
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f380 8814 	msr	CONTROL, r0
 80028ea:	b662      	cpsie	i
 80028ec:	b661      	cpsie	f
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	df00      	svc	0
 80028f8:	bf00      	nop
 80028fa:	0000      	.short	0x0000
 80028fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002900:	bf00      	nop
 8002902:	bf00      	nop

08002904 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800290a:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <xPortStartScheduler+0x120>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a46      	ldr	r2, [pc, #280]	; (8002a28 <xPortStartScheduler+0x124>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d10a      	bne.n	800292a <xPortStartScheduler+0x26>
        __asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	613b      	str	r3, [r7, #16]
    }
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800292a:	4b3e      	ldr	r3, [pc, #248]	; (8002a24 <xPortStartScheduler+0x120>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a3f      	ldr	r2, [pc, #252]	; (8002a2c <xPortStartScheduler+0x128>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d10a      	bne.n	800294a <xPortStartScheduler+0x46>
        __asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	60fb      	str	r3, [r7, #12]
    }
 8002946:	bf00      	nop
 8002948:	e7fe      	b.n	8002948 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800294a:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <xPortStartScheduler+0x12c>)
 800294c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	22ff      	movs	r2, #255	; 0xff
 800295a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <xPortStartScheduler+0x130>)
 8002970:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002972:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <xPortStartScheduler+0x134>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002978:	e009      	b.n	800298e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <xPortStartScheduler+0x134>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3b01      	subs	r3, #1
 8002980:	4a2d      	ldr	r2, [pc, #180]	; (8002a38 <xPortStartScheduler+0x134>)
 8002982:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b80      	cmp	r3, #128	; 0x80
 8002998:	d0ef      	beq.n	800297a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800299a:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <xPortStartScheduler+0x134>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d00a      	beq.n	80029bc <xPortStartScheduler+0xb8>
        __asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	60bb      	str	r3, [r7, #8]
    }
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <xPortStartScheduler+0x134>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <xPortStartScheduler+0x134>)
 80029c4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <xPortStartScheduler+0x134>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029ce:	4a1a      	ldr	r2, [pc, #104]	; (8002a38 <xPortStartScheduler+0x134>)
 80029d0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <xPortStartScheduler+0x138>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <xPortStartScheduler+0x138>)
 80029e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <xPortStartScheduler+0x138>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <xPortStartScheduler+0x138>)
 80029ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80029f0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80029f2:	f000 f963 	bl	8002cbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <xPortStartScheduler+0x13c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80029fc:	f000 f982 	bl	8002d04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <xPortStartScheduler+0x140>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <xPortStartScheduler+0x140>)
 8002a06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002a0c:	f7ff ff64 	bl	80028d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002a10:	f7fe feec 	bl	80017ec <vTaskSwitchContext>
    prvTaskExitError();
 8002a14:	f7ff ff1c 	bl	8002850 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00
 8002a28:	410fc271 	.word	0x410fc271
 8002a2c:	410fc270 	.word	0x410fc270
 8002a30:	e000e400 	.word	0xe000e400
 8002a34:	200001d4 	.word	0x200001d4
 8002a38:	200001d8 	.word	0x200001d8
 8002a3c:	e000ed20 	.word	0xe000ed20
 8002a40:	20000008 	.word	0x20000008
 8002a44:	e000ef34 	.word	0xe000ef34

08002a48 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <vInitPrioGroupValue+0xe4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <vInitPrioGroupValue+0xe8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10a      	bne.n	8002a6e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	613b      	str	r3, [r7, #16]
    }
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	; (8002b2c <vInitPrioGroupValue+0xe4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a30      	ldr	r2, [pc, #192]	; (8002b34 <vInitPrioGroupValue+0xec>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10a      	bne.n	8002a8e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	60fb      	str	r3, [r7, #12]
    }
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <vInitPrioGroupValue+0xf0>)
 8002a90:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	22ff      	movs	r2, #255	; 0xff
 8002a9e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <vInitPrioGroupValue+0xf4>)
 8002ab4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <vInitPrioGroupValue+0xf8>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002abc:	e009      	b.n	8002ad2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <vInitPrioGroupValue+0xf8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <vInitPrioGroupValue+0xf8>)
 8002ac6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b80      	cmp	r3, #128	; 0x80
 8002adc:	d0ef      	beq.n	8002abe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <vInitPrioGroupValue+0xf8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f1c3 0307 	rsb	r3, r3, #7
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d00a      	beq.n	8002b00 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	60bb      	str	r3, [r7, #8]
    }
 8002afc:	bf00      	nop
 8002afe:	e7fe      	b.n	8002afe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <vInitPrioGroupValue+0xf8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <vInitPrioGroupValue+0xf8>)
 8002b08:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <vInitPrioGroupValue+0xf8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <vInitPrioGroupValue+0xf8>)
 8002b14:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00
 8002b30:	410fc271 	.word	0x410fc271
 8002b34:	410fc270 	.word	0x410fc270
 8002b38:	e000e400 	.word	0xe000e400
 8002b3c:	200001d4 	.word	0x200001d4
 8002b40:	200001d8 	.word	0x200001d8

08002b44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
        __asm volatile
 8002b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	607b      	str	r3, [r7, #4]
    }
 8002b5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002b5e:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <vPortEnterCritical+0x58>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a0d      	ldr	r2, [pc, #52]	; (8002b9c <vPortEnterCritical+0x58>)
 8002b66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <vPortEnterCritical+0x58>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10f      	bne.n	8002b90 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <vPortEnterCritical+0x5c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <vPortEnterCritical+0x4c>
        __asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	603b      	str	r3, [r7, #0]
    }
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <vPortEnterCritical+0x4a>
    }
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	20000008 	.word	0x20000008
 8002ba0:	e000ed04 	.word	0xe000ed04

08002ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <vPortExitCritical+0x50>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <vPortExitCritical+0x24>
        __asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	607b      	str	r3, [r7, #4]
    }
 8002bc4:	bf00      	nop
 8002bc6:	e7fe      	b.n	8002bc6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <vPortExitCritical+0x50>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	4a09      	ldr	r2, [pc, #36]	; (8002bf4 <vPortExitCritical+0x50>)
 8002bd0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <vPortExitCritical+0x50>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <vPortExitCritical+0x42>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f383 8811 	msr	BASEPRI, r3
    }
 8002be4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000008 	.word	0x20000008
	...

08002c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002c00:	f3ef 8009 	mrs	r0, PSP
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <pxCurrentTCBConst>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	f01e 0f10 	tst.w	lr, #16
 8002c10:	bf08      	it	eq
 8002c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c1a:	6010      	str	r0, [r2, #0]
 8002c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002c24:	f380 8811 	msr	BASEPRI, r0
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f7fe fddc 	bl	80017ec <vTaskSwitchContext>
 8002c34:	f04f 0000 	mov.w	r0, #0
 8002c38:	f380 8811 	msr	BASEPRI, r0
 8002c3c:	bc09      	pop	{r0, r3}
 8002c3e:	6819      	ldr	r1, [r3, #0]
 8002c40:	6808      	ldr	r0, [r1, #0]
 8002c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c46:	f01e 0f10 	tst.w	lr, #16
 8002c4a:	bf08      	it	eq
 8002c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002c50:	f380 8809 	msr	PSP, r0
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	f3af 8000 	nop.w

08002c60 <pxCurrentTCBConst>:
 8002c60:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop

08002c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	607b      	str	r3, [r7, #4]
    }
 8002c80:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002c82:	f001 ffeb 	bl	8004c5c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c86:	f7fe fcf5 	bl	8001674 <xTaskIncrementTick>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d006      	beq.n	8002c9e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002c90:	f002 f842 	bl	8004d18 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <SysTick_Handler+0x50>)
 8002c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e001      	b.n	8002ca2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8002c9e:	f002 f81f 	bl	8004ce0 <SEGGER_SYSVIEW_RecordExitISR>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f383 8811 	msr	BASEPRI, r3
    }
 8002cac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	e000ed04 	.word	0xe000ed04

08002cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <vPortSetupTimerInterrupt+0x34>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <vPortSetupTimerInterrupt+0x38>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <vPortSetupTimerInterrupt+0x3c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <vPortSetupTimerInterrupt+0x40>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	099b      	lsrs	r3, r3, #6
 8002cd8:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <vPortSetupTimerInterrupt+0x44>)
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002cde:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <vPortSetupTimerInterrupt+0x34>)
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	601a      	str	r2, [r3, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e010 	.word	0xe000e010
 8002cf4:	e000e018 	.word	0xe000e018
 8002cf8:	20000000 	.word	0x20000000
 8002cfc:	10624dd3 	.word	0x10624dd3
 8002d00:	e000e014 	.word	0xe000e014

08002d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002d14 <vPortEnableVFP+0x10>
 8002d08:	6801      	ldr	r1, [r0, #0]
 8002d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d0e:	6001      	str	r1, [r0, #0]
 8002d10:	4770      	bx	lr
 8002d12:	0000      	.short	0x0000
 8002d14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop

08002d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002d22:	f3ef 8305 	mrs	r3, IPSR
 8002d26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d914      	bls.n	8002d58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <vPortValidateInterruptPriority+0x70>)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <vPortValidateInterruptPriority+0x74>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	7afa      	ldrb	r2, [r7, #11]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d20a      	bcs.n	8002d58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	607b      	str	r3, [r7, #4]
    }
 8002d54:	bf00      	nop
 8002d56:	e7fe      	b.n	8002d56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <vPortValidateInterruptPriority+0x78>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d60:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <vPortValidateInterruptPriority+0x7c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d90a      	bls.n	8002d7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	603b      	str	r3, [r7, #0]
    }
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <vPortValidateInterruptPriority+0x60>
    }
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e3f0 	.word	0xe000e3f0
 8002d90:	200001d4 	.word	0x200001d4
 8002d94:	e000ed0c 	.word	0xe000ed0c
 8002d98:	200001d8 	.word	0x200001d8

08002d9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002da8:	f7fe fb94 	bl	80014d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002dac:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <pvPortMalloc+0x1a8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002db4:	f000 f934 	bl	8003020 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002db8:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <pvPortMalloc+0x1ac>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 80a7 	bne.w	8002f14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02d      	beq.n	8002e28 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002dcc:	2208      	movs	r2, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d227      	bcs.n	8002e28 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002dd8:	2208      	movs	r2, #8
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d021      	beq.n	8002e2e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f023 0307 	bic.w	r3, r3, #7
 8002df0:	3308      	adds	r3, #8
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d214      	bcs.n	8002e22 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f023 0307 	bic.w	r3, r3, #7
 8002dfe:	3308      	adds	r3, #8
 8002e00:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <pvPortMalloc+0x92>
        __asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	617b      	str	r3, [r7, #20]
    }
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e26:	e002      	b.n	8002e2e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	e000      	b.n	8002e30 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d06e      	beq.n	8002f14 <pvPortMalloc+0x178>
 8002e36:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <pvPortMalloc+0x1b0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d869      	bhi.n	8002f14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002e40:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <pvPortMalloc+0x1b4>)
 8002e42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002e44:	4b42      	ldr	r3, [pc, #264]	; (8002f50 <pvPortMalloc+0x1b4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e4a:	e004      	b.n	8002e56 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d903      	bls.n	8002e68 <pvPortMalloc+0xcc>
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f1      	bne.n	8002e4c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002e68:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <pvPortMalloc+0x1a8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d050      	beq.n	8002f14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2208      	movs	r2, #8
 8002e78:	4413      	add	r3, r2
 8002e7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	1ad2      	subs	r2, r2, r3
 8002e8c:	2308      	movs	r3, #8
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d91f      	bls.n	8002ed4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <pvPortMalloc+0x120>
        __asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	613b      	str	r3, [r7, #16]
    }
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1ad2      	subs	r2, r2, r3
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002ece:	69b8      	ldr	r0, [r7, #24]
 8002ed0:	f000 f908 	bl	80030e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <pvPortMalloc+0x1b0>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <pvPortMalloc+0x1b0>)
 8002ee0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <pvPortMalloc+0x1b0>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <pvPortMalloc+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d203      	bcs.n	8002ef6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <pvPortMalloc+0x1b0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <pvPortMalloc+0x1b8>)
 8002ef4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <pvPortMalloc+0x1ac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <pvPortMalloc+0x1bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <pvPortMalloc+0x1bc>)
 8002f12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002f14:	f7fe faec 	bl	80014f0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <pvPortMalloc+0x19c>
        __asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	60fb      	str	r3, [r7, #12]
    }
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <pvPortMalloc+0x19a>
    return pvReturn;
 8002f38:	69fb      	ldr	r3, [r7, #28]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3728      	adds	r7, #40	; 0x28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20012de4 	.word	0x20012de4
 8002f48:	20012df8 	.word	0x20012df8
 8002f4c:	20012de8 	.word	0x20012de8
 8002f50:	20012ddc 	.word	0x20012ddc
 8002f54:	20012dec 	.word	0x20012dec
 8002f58:	20012df0 	.word	0x20012df0

08002f5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d04d      	beq.n	800300a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002f6e:	2308      	movs	r3, #8
 8002f70:	425b      	negs	r3, r3
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4413      	add	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <vPortFree+0xb8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <vPortFree+0x44>
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	60fb      	str	r3, [r7, #12]
    }
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <vPortFree+0x62>
        __asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	60bb      	str	r3, [r7, #8]
    }
 8002fba:	bf00      	nop
 8002fbc:	e7fe      	b.n	8002fbc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <vPortFree+0xb8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01e      	beq.n	800300a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d11a      	bne.n	800300a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <vPortFree+0xb8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	401a      	ands	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002fe4:	f7fe fa76 	bl	80014d4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <vPortFree+0xbc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <vPortFree+0xbc>)
 8002ff4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ff6:	6938      	ldr	r0, [r7, #16]
 8002ff8:	f000 f874 	bl	80030e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <vPortFree+0xc0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3301      	adds	r3, #1
 8003002:	4a06      	ldr	r2, [pc, #24]	; (800301c <vPortFree+0xc0>)
 8003004:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003006:	f7fe fa73 	bl	80014f0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800300a:	bf00      	nop
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20012df8 	.word	0x20012df8
 8003018:	20012de8 	.word	0x20012de8
 800301c:	20012df4 	.word	0x20012df4

08003020 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003026:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800302a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800302c:	4b27      	ldr	r3, [pc, #156]	; (80030cc <prvHeapInit+0xac>)
 800302e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3307      	adds	r3, #7
 800303e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0307 	bic.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <prvHeapInit+0xac>)
 8003050:	4413      	add	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <prvHeapInit+0xb0>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800305e:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <prvHeapInit+0xb0>)
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	4413      	add	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800306c:	2208      	movs	r2, #8
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0307 	bic.w	r3, r3, #7
 800307a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <prvHeapInit+0xb4>)
 8003080:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <prvHeapInit+0xb4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2200      	movs	r2, #0
 8003088:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <prvHeapInit+0xb4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	1ad2      	subs	r2, r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <prvHeapInit+0xb4>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <prvHeapInit+0xb8>)
 80030ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a09      	ldr	r2, [pc, #36]	; (80030dc <prvHeapInit+0xbc>)
 80030b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030b8:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <prvHeapInit+0xc0>)
 80030ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	200001dc 	.word	0x200001dc
 80030d0:	20012ddc 	.word	0x20012ddc
 80030d4:	20012de4 	.word	0x20012de4
 80030d8:	20012dec 	.word	0x20012dec
 80030dc:	20012de8 	.word	0x20012de8
 80030e0:	20012df8 	.word	0x20012df8

080030e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80030ec:	4b28      	ldr	r3, [pc, #160]	; (8003190 <prvInsertBlockIntoFreeList+0xac>)
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e002      	b.n	80030f8 <prvInsertBlockIntoFreeList+0x14>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d8f7      	bhi.n	80030f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4413      	add	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d108      	bne.n	8003126 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	441a      	add	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	441a      	add	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d118      	bne.n	800316c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <prvInsertBlockIntoFreeList+0xb0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d00d      	beq.n	8003162 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	441a      	add	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e008      	b.n	8003174 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <prvInsertBlockIntoFreeList+0xb0>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e003      	b.n	8003174 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	d002      	beq.n	8003182 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20012ddc 	.word	0x20012ddc
 8003194:	20012de4 	.word	0x20012de4

08003198 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800319c:	4803      	ldr	r0, [pc, #12]	; (80031ac <_cbSendSystemDesc+0x14>)
 800319e:	f001 fd07 	bl	8004bb0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80031a2:	4803      	ldr	r0, [pc, #12]	; (80031b0 <_cbSendSystemDesc+0x18>)
 80031a4:	f001 fd04 	bl	8004bb0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	08005834 	.word	0x08005834
 80031b0:	08005864 	.word	0x08005864

080031b4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SEGGER_SYSVIEW_Conf+0x20>)
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <SEGGER_SYSVIEW_Conf+0x24>)
 80031c2:	4a06      	ldr	r2, [pc, #24]	; (80031dc <SEGGER_SYSVIEW_Conf+0x28>)
 80031c4:	f001 f870 	bl	80042a8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80031c8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80031cc:	f001 f8b0 	bl	8004330 <SEGGER_SYSVIEW_SetRAMBase>
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000000 	.word	0x20000000
 80031d8:	08003199 	.word	0x08003199
 80031dc:	080058ec 	.word	0x080058ec

080031e0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80031e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
 80031ea:	e033      	b.n	8003254 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80031ec:	491e      	ldr	r1, [pc, #120]	; (8003268 <_cbSendTaskList+0x88>)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	491a      	ldr	r1, [pc, #104]	; (8003268 <_cbSendTaskList+0x88>)
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3304      	adds	r3, #4
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	4c16      	ldr	r4, [pc, #88]	; (8003268 <_cbSendTaskList+0x88>)
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4423      	add	r3, r4
 800321c:	3308      	adds	r3, #8
 800321e:	681c      	ldr	r4, [r3, #0]
 8003220:	4d11      	ldr	r5, [pc, #68]	; (8003268 <_cbSendTaskList+0x88>)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	442b      	add	r3, r5
 800322e:	330c      	adds	r3, #12
 8003230:	681d      	ldr	r5, [r3, #0]
 8003232:	4e0d      	ldr	r6, [pc, #52]	; (8003268 <_cbSendTaskList+0x88>)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4433      	add	r3, r6
 8003240:	3310      	adds	r3, #16
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	462b      	mov	r3, r5
 8003248:	4622      	mov	r2, r4
 800324a:	f000 f8bd 	bl	80033c8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3301      	adds	r3, #1
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <_cbSendTaskList+0x8c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	429a      	cmp	r2, r3
 800325c:	d3c6      	bcc.n	80031ec <_cbSendTaskList+0xc>
  }
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003268:	20012dfc 	.word	0x20012dfc
 800326c:	20012e9c 	.word	0x20012e9c

08003270 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003278:	f7fe f9ea 	bl	8001650 <xTaskGetTickCountFromISR>
 800327c:	4603      	mov	r3, r0
 800327e:	2200      	movs	r2, #0
 8003280:	469a      	mov	sl, r3
 8003282:	4693      	mov	fp, r2
 8003284:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003288:	e9d7 0100 	ldrd	r0, r1, [r7]
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	f04f 0a00 	mov.w	sl, #0
 8003294:	f04f 0b00 	mov.w	fp, #0
 8003298:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800329c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80032a0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80032a4:	4652      	mov	r2, sl
 80032a6:	465b      	mov	r3, fp
 80032a8:	1a14      	subs	r4, r2, r0
 80032aa:	eb63 0501 	sbc.w	r5, r3, r1
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	00ab      	lsls	r3, r5, #2
 80032b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80032bc:	00a2      	lsls	r2, r4, #2
 80032be:	4614      	mov	r4, r2
 80032c0:	461d      	mov	r5, r3
 80032c2:	eb14 0800 	adds.w	r8, r4, r0
 80032c6:	eb45 0901 	adc.w	r9, r5, r1
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032de:	4690      	mov	r8, r2
 80032e0:	4699      	mov	r9, r3
 80032e2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80032e6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080032f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003306:	2205      	movs	r2, #5
 8003308:	492b      	ldr	r1, [pc, #172]	; (80033b8 <SYSVIEW_AddTask+0xc0>)
 800330a:	68b8      	ldr	r0, [r7, #8]
 800330c:	f002 fa3a 	bl	8005784 <memcmp>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d04b      	beq.n	80033ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003316:	4b29      	ldr	r3, [pc, #164]	; (80033bc <SYSVIEW_AddTask+0xc4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b07      	cmp	r3, #7
 800331c:	d903      	bls.n	8003326 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800331e:	4828      	ldr	r0, [pc, #160]	; (80033c0 <SYSVIEW_AddTask+0xc8>)
 8003320:	f001 ff44 	bl	80051ac <SEGGER_SYSVIEW_Warn>
    return;
 8003324:	e044      	b.n	80033b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003326:	4b25      	ldr	r3, [pc, #148]	; (80033bc <SYSVIEW_AddTask+0xc4>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4926      	ldr	r1, [pc, #152]	; (80033c4 <SYSVIEW_AddTask+0xcc>)
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <SYSVIEW_AddTask+0xc4>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4921      	ldr	r1, [pc, #132]	; (80033c4 <SYSVIEW_AddTask+0xcc>)
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3304      	adds	r3, #4
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <SYSVIEW_AddTask+0xc4>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	491b      	ldr	r1, [pc, #108]	; (80033c4 <SYSVIEW_AddTask+0xcc>)
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	3308      	adds	r3, #8
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <SYSVIEW_AddTask+0xc4>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4916      	ldr	r1, [pc, #88]	; (80033c4 <SYSVIEW_AddTask+0xcc>)
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	330c      	adds	r3, #12
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <SYSVIEW_AddTask+0xc4>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4910      	ldr	r1, [pc, #64]	; (80033c4 <SYSVIEW_AddTask+0xcc>)
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	3310      	adds	r3, #16
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <SYSVIEW_AddTask+0xc4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3301      	adds	r3, #1
 8003398:	4a08      	ldr	r2, [pc, #32]	; (80033bc <SYSVIEW_AddTask+0xc4>)
 800339a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f80e 	bl	80033c8 <SYSVIEW_SendTaskInfo>
 80033ac:	e000      	b.n	80033b0 <SYSVIEW_AddTask+0xb8>
    return;
 80033ae:	bf00      	nop

}
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	08005874 	.word	0x08005874
 80033bc:	20012e9c 	.word	0x20012e9c
 80033c0:	0800587c 	.word	0x0800587c
 80033c4:	20012dfc 	.word	0x20012dfc

080033c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80033d6:	f107 0314 	add.w	r3, r7, #20
 80033da:	2214      	movs	r2, #20
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f002 f9ee 	bl	80057c0 <memset>
  TaskInfo.TaskID     = TaskID;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4618      	mov	r0, r3
 80033fe:	f001 fadf 	bl	80049c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003402:	bf00      	nop
 8003404:	3728      	adds	r7, #40	; 0x28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	2b00      	cmp	r3, #0
 800341c:	db0b      	blt.n	8003436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	f003 021f 	and.w	r2, r3, #31
 8003424:	4907      	ldr	r1, [pc, #28]	; (8003444 <__NVIC_EnableIRQ+0x38>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	2001      	movs	r0, #1
 800342e:	fa00 f202 	lsl.w	r2, r0, r2
 8003432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	e000e100 	.word	0xe000e100

08003448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db0a      	blt.n	8003472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	490c      	ldr	r1, [pc, #48]	; (8003494 <__NVIC_SetPriority+0x4c>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	440b      	add	r3, r1
 800346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003470:	e00a      	b.n	8003488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4908      	ldr	r1, [pc, #32]	; (8003498 <__NVIC_SetPriority+0x50>)
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3b04      	subs	r3, #4
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	440b      	add	r3, r1
 8003486:	761a      	strb	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80034a2:	f001 fedf 	bl	8005264 <SEGGER_SYSVIEW_IsStarted>
 80034a6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80034ae:	f001 f90b 	bl	80046c8 <SEGGER_SYSVIEW_Start>
  }
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <_cbOnUARTRx+0x3c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d806      	bhi.n	80034dc <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <_cbOnUARTRx+0x3c>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <_cbOnUARTRx+0x3c>)
 80034d8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80034da:	e009      	b.n	80034f0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80034dc:	f7ff ffde 	bl	800349c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <_cbOnUARTRx+0x3c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4618      	mov	r0, r3
 80034e6:	1dfb      	adds	r3, r7, #7
 80034e8:	2201      	movs	r2, #1
 80034ea:	4619      	mov	r1, r3
 80034ec:	f000 fb9a 	bl	8003c24 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80034f0:	bf00      	nop
}
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	2000000c 	.word	0x2000000c

080034fc <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003504:	4b14      	ldr	r3, [pc, #80]	; (8003558 <_cbOnUARTTx+0x5c>)
 8003506:	785b      	ldrb	r3, [r3, #1]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d80f      	bhi.n	800352c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <_cbOnUARTTx+0x5c>)
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	461a      	mov	r2, r3
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <_cbOnUARTTx+0x60>)
 8003514:	5c9a      	ldrb	r2, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <_cbOnUARTTx+0x5c>)
 800351c:	785b      	ldrb	r3, [r3, #1]
 800351e:	3301      	adds	r3, #1
 8003520:	b2da      	uxtb	r2, r3
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <_cbOnUARTTx+0x5c>)
 8003524:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003526:	2301      	movs	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
    goto Done;
 800352a:	e00f      	b.n	800354c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <_cbOnUARTTx+0x5c>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fa19 	bl	800396c <SEGGER_RTT_ReadUpBufferNoLock>
 800353a:	4603      	mov	r3, r0
 800353c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	da02      	bge.n	800354a <_cbOnUARTTx+0x4e>
    r = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e000      	b.n	800354c <_cbOnUARTTx+0x50>
  }
Done:
 800354a:	bf00      	nop
  return r;
 800354c:	68fb      	ldr	r3, [r7, #12]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	2000000c 	.word	0x2000000c
 800355c:	080058f4 	.word	0x080058f4

08003560 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003568:	4a04      	ldr	r2, [pc, #16]	; (800357c <SEGGER_UART_init+0x1c>)
 800356a:	4905      	ldr	r1, [pc, #20]	; (8003580 <SEGGER_UART_init+0x20>)
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f863 	bl	8003638 <HIF_UART_Init>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	080034bd 	.word	0x080034bd
 8003580:	080034fd 	.word	0x080034fd

08003584 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <USART2_IRQHandler+0x80>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d011      	beq.n	80035be <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <USART2_IRQHandler+0x84>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 030b 	and.w	r3, r3, #11
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d108      	bne.n	80035be <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80035ac:	4b17      	ldr	r3, [pc, #92]	; (800360c <USART2_IRQHandler+0x88>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <USART2_IRQHandler+0x88>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	79fa      	ldrb	r2, [r7, #7]
 80035ba:	4610      	mov	r0, r2
 80035bc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01a      	beq.n	80035fe <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <USART2_IRQHandler+0x8c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d015      	beq.n	80035fc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <USART2_IRQHandler+0x8c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	1dfa      	adds	r2, r7, #7
 80035d6:	4610      	mov	r0, r2
 80035d8:	4798      	blx	r3
 80035da:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <USART2_IRQHandler+0x90>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a0b      	ldr	r2, [pc, #44]	; (8003614 <USART2_IRQHandler+0x90>)
 80035e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e006      	b.n	80035fe <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <USART2_IRQHandler+0x80>)
 80035f2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80035f4:	79fa      	ldrb	r2, [r7, #7]
 80035f6:	4b04      	ldr	r3, [pc, #16]	; (8003608 <USART2_IRQHandler+0x84>)
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e000      	b.n	80035fe <USART2_IRQHandler+0x7a>
      return;
 80035fc:	bf00      	nop
    }
  }
}
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40004400 	.word	0x40004400
 8003608:	40004404 	.word	0x40004404
 800360c:	20012ea0 	.word	0x20012ea0
 8003610:	20012ea4 	.word	0x20012ea4
 8003614:	4000440c 	.word	0x4000440c

08003618 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003626:	6013      	str	r3, [r2, #0]
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	4000440c 	.word	0x4000440c

08003638 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003644:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HIF_UART_Init+0xc8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <HIF_UART_Init+0xc8>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003650:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HIF_UART_Init+0xcc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <HIF_UART_Init+0xcc>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800365c:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <HIF_UART_Init+0xd0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003668:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003670:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003672:	4a25      	ldr	r2, [pc, #148]	; (8003708 <HIF_UART_Init+0xd0>)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003678:	4b24      	ldr	r3, [pc, #144]	; (800370c <HIF_UART_Init+0xd4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003684:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800368c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800368e:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HIF_UART_Init+0xd4>)
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003694:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <HIF_UART_Init+0xd8>)
 8003696:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800369a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HIF_UART_Init+0xdc>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <HIF_UART_Init+0xe0>)
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80036ae:	4a1b      	ldr	r2, [pc, #108]	; (800371c <HIF_UART_Init+0xe4>)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c6:	d302      	bcc.n	80036ce <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80036c8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80036cc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4a11      	ldr	r2, [pc, #68]	; (8003720 <HIF_UART_Init+0xe8>)
 80036da:	b29b      	uxth	r3, r3
 80036dc:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80036de:	4a11      	ldr	r2, [pc, #68]	; (8003724 <HIF_UART_Init+0xec>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80036e4:	4a10      	ldr	r2, [pc, #64]	; (8003728 <HIF_UART_Init+0xf0>)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80036ea:	2106      	movs	r1, #6
 80036ec:	2026      	movs	r0, #38	; 0x26
 80036ee:	f7ff feab 	bl	8003448 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80036f2:	2026      	movs	r0, #38	; 0x26
 80036f4:	f7ff fe8a 	bl	800340c <__NVIC_EnableIRQ>
}
 80036f8:	bf00      	nop
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023840 	.word	0x40023840
 8003704:	40023830 	.word	0x40023830
 8003708:	40020020 	.word	0x40020020
 800370c:	40020000 	.word	0x40020000
 8003710:	4000440c 	.word	0x4000440c
 8003714:	40004410 	.word	0x40004410
 8003718:	40004414 	.word	0x40004414
 800371c:	05f5e100 	.word	0x05f5e100
 8003720:	40004408 	.word	0x40004408
 8003724:	20012ea0 	.word	0x20012ea0
 8003728:	20012ea4 	.word	0x20012ea4

0800372c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <_DoInit+0x98>)
 8003734:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2203      	movs	r2, #3
 800373a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2203      	movs	r2, #3
 8003740:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a20      	ldr	r2, [pc, #128]	; (80037c8 <_DoInit+0x9c>)
 8003746:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a20      	ldr	r2, [pc, #128]	; (80037cc <_DoInit+0xa0>)
 800374c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003754:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <_DoInit+0x9c>)
 800376c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <_DoInit+0xa4>)
 8003772:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2210      	movs	r2, #16
 8003778:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3307      	adds	r3, #7
 8003790:	4a10      	ldr	r2, [pc, #64]	; (80037d4 <_DoInit+0xa8>)
 8003792:	6810      	ldr	r0, [r2, #0]
 8003794:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003796:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <_DoInit+0xac>)
 800379e:	6810      	ldr	r0, [r2, #0]
 80037a0:	6018      	str	r0, [r3, #0]
 80037a2:	8891      	ldrh	r1, [r2, #4]
 80037a4:	7992      	ldrb	r2, [r2, #6]
 80037a6:	8099      	strh	r1, [r3, #4]
 80037a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037b4:	f3bf 8f5f 	dmb	sy
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20012ea8 	.word	0x20012ea8
 80037c8:	080058cc 	.word	0x080058cc
 80037cc:	20012f50 	.word	0x20012f50
 80037d0:	20013350 	.word	0x20013350
 80037d4:	080058d8 	.word	0x080058d8
 80037d8:	080058dc 	.word	0x080058dc

080037dc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80037e8:	2300      	movs	r3, #0
 80037ea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d905      	bls.n	800380c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
 800380a:	e007      	b.n	800381c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	1acb      	subs	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3b01      	subs	r3, #1
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003826:	4293      	cmp	r3, r2
 8003828:	bf28      	it	cs
 800382a:	4613      	movcs	r3, r2
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4293      	cmp	r3, r2
 8003834:	bf28      	it	cs
 8003836:	4613      	movcs	r3, r2
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	6978      	ldr	r0, [r7, #20]
 800384a:	f001 ffab 	bl	80057a4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800384e:	6a3a      	ldr	r2, [r7, #32]
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	4413      	add	r3, r2
 8003854:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	4413      	add	r3, r2
 800385c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	4413      	add	r3, r2
 800386c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	429a      	cmp	r2, r3
 8003876:	d101      	bne.n	800387c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800387c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1b2      	bne.n	80037f2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800388c:	6a3b      	ldr	r3, [r7, #32]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3728      	adds	r7, #40	; 0x28
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003896:	b580      	push	{r7, lr}
 8003898:	b088      	sub	sp, #32
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d911      	bls.n	80038de <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	6938      	ldr	r0, [r7, #16]
 80038ca:	f001 ff6b 	bl	80057a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038ce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	441a      	add	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80038dc:	e01f      	b.n	800391e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	6938      	ldr	r0, [r7, #16]
 80038f2:	f001 ff57 	bl	80057a4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4413      	add	r3, r2
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4619      	mov	r1, r3
 800390e:	6938      	ldr	r0, [r7, #16]
 8003910:	f001 ff48 	bl	80057a4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003914:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	60da      	str	r2, [r3, #12]
}
 800391e:	bf00      	nop
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003926:	b480      	push	{r7}
 8003928:	b087      	sub	sp, #28
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	429a      	cmp	r2, r3
 8003940:	d808      	bhi.n	8003954 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad2      	subs	r2, r2, r3
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	4413      	add	r3, r2
 800394e:	3b01      	subs	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e004      	b.n	800395e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800395e:	697b      	ldr	r3, [r7, #20]
}
 8003960:	4618      	mov	r0, r3
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	; 0x30
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003978:	4b3e      	ldr	r3, [pc, #248]	; (8003a74 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003986:	f7ff fed1 	bl	800372c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4a37      	ldr	r2, [pc, #220]	; (8003a74 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003998:	4413      	add	r3, r2
 800399a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80039ac:	2300      	movs	r3, #0
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80039b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d92b      	bls.n	8003a10 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	bf28      	it	cs
 80039ca:	4613      	movcs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	4413      	add	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	6939      	ldr	r1, [r7, #16]
 80039dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039de:	f001 fee1 	bl	80057a4 <memcpy>
    NumBytesRead += NumBytesRem;
 80039e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	4413      	add	r3, r2
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4413      	add	r3, r2
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4413      	add	r3, r2
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d101      	bne.n	8003a10 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	bf28      	it	cs
 8003a20:	4613      	movcs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	4413      	add	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	6939      	ldr	r1, [r7, #16]
 8003a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a3a:	f001 feb3 	bl	80057a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	4413      	add	r3, r2
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a68:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3730      	adds	r7, #48	; 0x30
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20012ea8 	.word	0x20012ea8

08003a78 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08c      	sub	sp, #48	; 0x30
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003a84:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <SEGGER_RTT_ReadNoLock+0x108>)
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <SEGGER_RTT_ReadNoLock+0x1e>
 8003a92:	f7ff fe4b 	bl	800372c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	3360      	adds	r3, #96	; 0x60
 8003aa2:	4a37      	ldr	r2, [pc, #220]	; (8003b80 <SEGGER_RTT_ReadNoLock+0x108>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d92b      	bls.n	8003b1c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	bf28      	it	cs
 8003ad6:	4613      	movcs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	4413      	add	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	6939      	ldr	r1, [r7, #16]
 8003ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aea:	f001 fe5b 	bl	80057a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4413      	add	r3, r2
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4413      	add	r3, r2
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d101      	bne.n	8003b1c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bf28      	it	cs
 8003b2c:	4613      	movcs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d019      	beq.n	8003b6a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	4413      	add	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	6939      	ldr	r1, [r7, #16]
 8003b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b46:	f001 fe2d 	bl	80057a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4413      	add	r3, r2
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4413      	add	r3, r2
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	4413      	add	r3, r2
 8003b68:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b74:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3730      	adds	r7, #48	; 0x30
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20012ea8 	.word	0x20012ea8

08003b84 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	3360      	adds	r3, #96	; 0x60
 8003ba0:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d029      	beq.n	8003c02 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d82e      	bhi.n	8003c10 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d013      	beq.n	8003be2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8003bba:	e029      	b.n	8003c10 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003bbc:	6978      	ldr	r0, [r7, #20]
 8003bbe:	f7ff feb2 	bl	8003926 <_GetAvailWriteSpace>
 8003bc2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d202      	bcs.n	8003bd2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003bd0:	e021      	b.n	8003c16 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	69b9      	ldr	r1, [r7, #24]
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f7ff fe5b 	bl	8003896 <_WriteNoCheck>
    break;
 8003be0:	e019      	b.n	8003c16 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f7ff fe9f 	bl	8003926 <_GetAvailWriteSpace>
 8003be8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	bf28      	it	cs
 8003bf2:	4613      	movcs	r3, r2
 8003bf4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	69b9      	ldr	r1, [r7, #24]
 8003bfa:	6978      	ldr	r0, [r7, #20]
 8003bfc:	f7ff fe4b 	bl	8003896 <_WriteNoCheck>
    break;
 8003c00:	e009      	b.n	8003c16 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	69b9      	ldr	r1, [r7, #24]
 8003c06:	6978      	ldr	r0, [r7, #20]
 8003c08:	f7ff fde8 	bl	80037dc <_WriteBlocking>
 8003c0c:	61f8      	str	r0, [r7, #28]
    break;
 8003c0e:	e002      	b.n	8003c16 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
    break;
 8003c14:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003c16:	69fb      	ldr	r3, [r7, #28]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3720      	adds	r7, #32
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20012ea8 	.word	0x20012ea8

08003c24 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b088      	sub	sp, #32
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003c3e:	f7ff fd75 	bl	800372c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c42:	f3ef 8311 	mrs	r3, BASEPRI
 8003c46:	f04f 0120 	mov.w	r1, #32
 8003c4a:	f381 8811 	msr	BASEPRI, r1
 8003c4e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7ff ff95 	bl	8003b84 <SEGGER_RTT_WriteDownBufferNoLock>
 8003c5a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003c62:	697b      	ldr	r3, [r7, #20]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3720      	adds	r7, #32
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20012ea8 	.word	0x20012ea8

08003c70 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003c7e:	4b3d      	ldr	r3, [pc, #244]	; (8003d74 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003c8c:	f7ff fd4e 	bl	800372c <_DoInit>
  SEGGER_RTT_LOCK();
 8003c90:	f3ef 8311 	mrs	r3, BASEPRI
 8003c94:	f04f 0120 	mov.w	r1, #32
 8003c98:	f381 8811 	msr	BASEPRI, r1
 8003c9c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003c9e:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ca0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003ca6:	6939      	ldr	r1, [r7, #16]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	dbeb      	blt.n	8003ca6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003cce:	e000      	b.n	8003cd2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003cd0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	da3f      	bge.n	8003d5c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003cdc:	6939      	ldr	r1, [r7, #16]
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	440b      	add	r3, r1
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003cf0:	6939      	ldr	r1, [r7, #16]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	440b      	add	r3, r1
 8003d00:	3304      	adds	r3, #4
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d06:	6939      	ldr	r1, [r7, #16]
 8003d08:	69fa      	ldr	r2, [r7, #28]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	4413      	add	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	440b      	add	r3, r1
 8003d14:	3320      	adds	r3, #32
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003d1a:	6939      	ldr	r1, [r7, #16]
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	440b      	add	r3, r1
 8003d28:	3328      	adds	r3, #40	; 0x28
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d2e:	6939      	ldr	r1, [r7, #16]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3324      	adds	r3, #36	; 0x24
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003d42:	6939      	ldr	r1, [r7, #16]
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	440b      	add	r3, r1
 8003d50:	332c      	adds	r3, #44	; 0x2c
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d56:	f3bf 8f5f 	dmb	sy
 8003d5a:	e002      	b.n	8003d62 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d60:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003d68:	69fb      	ldr	r3, [r7, #28]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3720      	adds	r7, #32
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20012ea8 	.word	0x20012ea8

08003d78 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003d86:	4b33      	ldr	r3, [pc, #204]	; (8003e54 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003d94:	f7ff fcca 	bl	800372c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d98:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003d9a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d24d      	bcs.n	8003e44 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003da8:	f3ef 8311 	mrs	r3, BASEPRI
 8003dac:	f04f 0120 	mov.w	r1, #32
 8003db0:	f381 8811 	msr	BASEPRI, r1
 8003db4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d031      	beq.n	8003e20 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003dbc:	6979      	ldr	r1, [r7, #20]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	440b      	add	r3, r1
 8003dca:	3360      	adds	r3, #96	; 0x60
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003dd0:	6979      	ldr	r1, [r7, #20]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	3364      	adds	r3, #100	; 0x64
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	4613      	mov	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	440b      	add	r3, r1
 8003df2:	3368      	adds	r3, #104	; 0x68
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003df8:	6979      	ldr	r1, [r7, #20]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	440b      	add	r3, r1
 8003e06:	3370      	adds	r3, #112	; 0x70
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003e0c:	6979      	ldr	r1, [r7, #20]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	440b      	add	r3, r1
 8003e1a:	336c      	adds	r3, #108	; 0x6c
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003e20:	6979      	ldr	r1, [r7, #20]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3374      	adds	r3, #116	; 0x74
 8003e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e32:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e34:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	e002      	b.n	8003e4a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003e44:	f04f 33ff 	mov.w	r3, #4294967295
 8003e48:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20012ea8 	.word	0x20012ea8

08003e58 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003e68:	e002      	b.n	8003e70 <_EncodeStr+0x18>
    Len++;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f6      	bne.n	8003e6a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d901      	bls.n	8003e88 <_EncodeStr+0x30>
    Len = Limit;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2bfe      	cmp	r3, #254	; 0xfe
 8003e8c:	d806      	bhi.n	8003e9c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	60fa      	str	r2, [r7, #12]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e011      	b.n	8003ec0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	60fa      	str	r2, [r7, #12]
 8003ea2:	22ff      	movs	r2, #255	; 0xff
 8003ea4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	60fa      	str	r2, [r7, #12]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	0a19      	lsrs	r1, r3, #8
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	60fa      	str	r2, [r7, #12]
 8003ebc:	b2ca      	uxtb	r2, r1
 8003ebe:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003ec4:	e00a      	b.n	8003edc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	1c53      	adds	r3, r2, #1
 8003eca:	60bb      	str	r3, [r7, #8]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	60f9      	str	r1, [r7, #12]
 8003ed2:	7812      	ldrb	r2, [r2, #0]
 8003ed4:	701a      	strb	r2, [r3, #0]
    n++;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d3f0      	bcc.n	8003ec6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <_HandleIncomingPacket+0xe0>)
 8003f14:	7e1b      	ldrb	r3, [r3, #24]
 8003f16:	4618      	mov	r0, r3
 8003f18:	1cfb      	adds	r3, r7, #3
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f7ff fdab 	bl	8003a78 <SEGGER_RTT_ReadNoLock>
 8003f22:	4603      	mov	r3, r0
 8003f24:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	dd54      	ble.n	8003fd6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d032      	beq.n	8003f98 <_HandleIncomingPacket+0x8c>
 8003f32:	2b80      	cmp	r3, #128	; 0x80
 8003f34:	dc42      	bgt.n	8003fbc <_HandleIncomingPacket+0xb0>
 8003f36:	2b07      	cmp	r3, #7
 8003f38:	dc16      	bgt.n	8003f68 <_HandleIncomingPacket+0x5c>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	dd3e      	ble.n	8003fbc <_HandleIncomingPacket+0xb0>
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	2b06      	cmp	r3, #6
 8003f42:	d83b      	bhi.n	8003fbc <_HandleIncomingPacket+0xb0>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <_HandleIncomingPacket+0x40>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f6f 	.word	0x08003f6f
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f7b 	.word	0x08003f7b
 8003f58:	08003f81 	.word	0x08003f81
 8003f5c:	08003f87 	.word	0x08003f87
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08003f93 	.word	0x08003f93
 8003f68:	2b7f      	cmp	r3, #127	; 0x7f
 8003f6a:	d036      	beq.n	8003fda <_HandleIncomingPacket+0xce>
 8003f6c:	e026      	b.n	8003fbc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003f6e:	f000 fbab 	bl	80046c8 <SEGGER_SYSVIEW_Start>
      break;
 8003f72:	e037      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f74:	f000 fc64 	bl	8004840 <SEGGER_SYSVIEW_Stop>
      break;
 8003f78:	e034      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f7a:	f000 fe3d 	bl	8004bf8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003f7e:	e031      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003f80:	f000 fe02 	bl	8004b88 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003f84:	e02e      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003f86:	f000 fc81 	bl	800488c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003f8a:	e02b      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003f8c:	f001 f8d0 	bl	8005130 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003f90:	e028      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003f92:	f001 f8af 	bl	80050f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003f96:	e025      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f98:	4b14      	ldr	r3, [pc, #80]	; (8003fec <_HandleIncomingPacket+0xe0>)
 8003f9a:	7e1b      	ldrb	r3, [r3, #24]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	1cfb      	adds	r3, r7, #3
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f7ff fd68 	bl	8003a78 <SEGGER_RTT_ReadNoLock>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	dd15      	ble.n	8003fde <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f81d 	bl	8004ff4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003fba:	e010      	b.n	8003fde <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	b25b      	sxtb	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	da0e      	bge.n	8003fe2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <_HandleIncomingPacket+0xe0>)
 8003fc6:	7e1b      	ldrb	r3, [r3, #24]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	1cfb      	adds	r3, r7, #3
 8003fcc:	2201      	movs	r2, #1
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f7ff fd52 	bl	8003a78 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003fd4:	e005      	b.n	8003fe2 <_HandleIncomingPacket+0xd6>
    }
  }
 8003fd6:	bf00      	nop
 8003fd8:	e004      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e002      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <_HandleIncomingPacket+0xd8>
      break;
 8003fe2:	bf00      	nop
}
 8003fe4:	bf00      	nop
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20014368 	.word	0x20014368

08003ff0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	; 0x30
 8003ff4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004004:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <_TrySendOverflowPacket+0xe0>)
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
 800400a:	e00b      	b.n	8004024 <_TrySendOverflowPacket+0x34>
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	b2da      	uxtb	r2, r3
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	1c59      	adds	r1, r3, #1
 8004014:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	701a      	strb	r2, [r3, #0]
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	09db      	lsrs	r3, r3, #7
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	2b7f      	cmp	r3, #127	; 0x7f
 8004028:	d8f0      	bhi.n	800400c <_TrySendOverflowPacket+0x1c>
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004038:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <_TrySendOverflowPacket+0xe4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004040:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <_TrySendOverflowPacket+0xe0>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	623b      	str	r3, [r7, #32]
 8004052:	e00b      	b.n	800406c <_TrySendOverflowPacket+0x7c>
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	b2da      	uxtb	r2, r3
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	6279      	str	r1, [r7, #36]	; 0x24
 800405e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	09db      	lsrs	r3, r3, #7
 800406a:	623b      	str	r3, [r7, #32]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2b7f      	cmp	r3, #127	; 0x7f
 8004070:	d8f0      	bhi.n	8004054 <_TrySendOverflowPacket+0x64>
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	627a      	str	r2, [r7, #36]	; 0x24
 8004078:	6a3a      	ldr	r2, [r7, #32]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <_TrySendOverflowPacket+0xe0>)
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	4618      	mov	r0, r3
 8004088:	1d3b      	adds	r3, r7, #4
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	461a      	mov	r2, r3
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	4619      	mov	r1, r3
 8004094:	f7fc f8a4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004098:	4603      	mov	r3, r0
 800409a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800409c:	f7ff fabc 	bl	8003618 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <_TrySendOverflowPacket+0xe0>)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <_TrySendOverflowPacket+0xe0>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <_TrySendOverflowPacket+0xe0>)
 80040b6:	701a      	strb	r2, [r3, #0]
 80040b8:	e004      	b.n	80040c4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <_TrySendOverflowPacket+0xe0>)
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	3301      	adds	r3, #1
 80040c0:	4a03      	ldr	r2, [pc, #12]	; (80040d0 <_TrySendOverflowPacket+0xe0>)
 80040c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80040c4:	693b      	ldr	r3, [r7, #16]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3730      	adds	r7, #48	; 0x30
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20014368 	.word	0x20014368
 80040d4:	e0001004 	.word	0xe0001004

080040d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08a      	sub	sp, #40	; 0x28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80040e4:	4b6d      	ldr	r3, [pc, #436]	; (800429c <_SendPacket+0x1c4>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d010      	beq.n	800410e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80040ec:	4b6b      	ldr	r3, [pc, #428]	; (800429c <_SendPacket+0x1c4>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a5 	beq.w	8004240 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80040f6:	4b69      	ldr	r3, [pc, #420]	; (800429c <_SendPacket+0x1c4>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d109      	bne.n	8004112 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80040fe:	f7ff ff77 	bl	8003ff0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004102:	4b66      	ldr	r3, [pc, #408]	; (800429c <_SendPacket+0x1c4>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b01      	cmp	r3, #1
 8004108:	f040 809c 	bne.w	8004244 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800410c:	e001      	b.n	8004112 <_SendPacket+0x3a>
    goto Send;
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <_SendPacket+0x3c>
Send:
 8004112:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b1f      	cmp	r3, #31
 8004118:	d809      	bhi.n	800412e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800411a:	4b60      	ldr	r3, [pc, #384]	; (800429c <_SendPacket+0x1c4>)
 800411c:	69da      	ldr	r2, [r3, #28]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 808d 	bne.w	8004248 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b17      	cmp	r3, #23
 8004132:	d807      	bhi.n	8004144 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b01      	subs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e03d      	b.n	80041c0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b7f      	cmp	r3, #127	; 0x7f
 8004150:	d912      	bls.n	8004178 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	09da      	lsrs	r2, r3, #7
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b01      	subs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	3a01      	subs	r2, #1
 800416a:	60fa      	str	r2, [r7, #12]
 800416c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	701a      	strb	r2, [r3, #0]
 8004176:	e006      	b.n	8004186 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3b01      	subs	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b7f      	cmp	r3, #127	; 0x7f
 800418a:	d912      	bls.n	80041b2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	09da      	lsrs	r2, r3, #7
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b01      	subs	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	3a01      	subs	r2, #1
 80041a4:	60fa      	str	r2, [r7, #12]
 80041a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e006      	b.n	80041c0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041c0:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <_SendPacket+0x1c8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041c6:	4b35      	ldr	r3, [pc, #212]	; (800429c <_SendPacket+0x1c4>)
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	e00b      	b.n	80041f2 <_SendPacket+0x11a>
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1c59      	adds	r1, r3, #1
 80041e2:	6279      	str	r1, [r7, #36]	; 0x24
 80041e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	09db      	lsrs	r3, r3, #7
 80041f0:	623b      	str	r3, [r7, #32]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	2b7f      	cmp	r3, #127	; 0x7f
 80041f6:	d8f0      	bhi.n	80041da <_SendPacket+0x102>
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	627a      	str	r2, [r7, #36]	; 0x24
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <_SendPacket+0x1c4>)
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	4618      	mov	r0, r3
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	461a      	mov	r2, r3
 8004216:	68f9      	ldr	r1, [r7, #12]
 8004218:	f7fb ffe2 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800421c:	4603      	mov	r3, r0
 800421e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004220:	f7ff f9fa 	bl	8003618 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800422a:	4a1c      	ldr	r2, [pc, #112]	; (800429c <_SendPacket+0x1c4>)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	60d3      	str	r3, [r2, #12]
 8004230:	e00b      	b.n	800424a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004232:	4b1a      	ldr	r3, [pc, #104]	; (800429c <_SendPacket+0x1c4>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b18      	ldr	r3, [pc, #96]	; (800429c <_SendPacket+0x1c4>)
 800423c:	701a      	strb	r2, [r3, #0]
 800423e:	e004      	b.n	800424a <_SendPacket+0x172>
    goto SendDone;
 8004240:	bf00      	nop
 8004242:	e002      	b.n	800424a <_SendPacket+0x172>
      goto SendDone;
 8004244:	bf00      	nop
 8004246:	e000      	b.n	800424a <_SendPacket+0x172>
      goto SendDone;
 8004248:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800424a:	4b14      	ldr	r3, [pc, #80]	; (800429c <_SendPacket+0x1c4>)
 800424c:	7e1b      	ldrb	r3, [r3, #24]
 800424e:	4619      	mov	r1, r3
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <_SendPacket+0x1cc>)
 8004252:	460b      	mov	r3, r1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	440b      	add	r3, r1
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	336c      	adds	r3, #108	; 0x6c
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <_SendPacket+0x1c4>)
 8004262:	7e1b      	ldrb	r3, [r3, #24]
 8004264:	4618      	mov	r0, r3
 8004266:	490f      	ldr	r1, [pc, #60]	; (80042a4 <_SendPacket+0x1cc>)
 8004268:	4603      	mov	r3, r0
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4403      	add	r3, r0
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	440b      	add	r3, r1
 8004272:	3370      	adds	r3, #112	; 0x70
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d00b      	beq.n	8004292 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <_SendPacket+0x1c4>)
 800427c:	789b      	ldrb	r3, [r3, #2]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d107      	bne.n	8004292 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <_SendPacket+0x1c4>)
 8004284:	2201      	movs	r2, #1
 8004286:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004288:	f7ff fe40 	bl	8003f0c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <_SendPacket+0x1c4>)
 800428e:	2200      	movs	r2, #0
 8004290:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004292:	bf00      	nop
 8004294:	3728      	adds	r7, #40	; 0x28
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20014368 	.word	0x20014368
 80042a0:	e0001004 	.word	0xe0001004
 80042a4:	20012ea8 	.word	0x20012ea8

080042a8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80042b6:	2300      	movs	r3, #0
 80042b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042bc:	4917      	ldr	r1, [pc, #92]	; (800431c <SEGGER_SYSVIEW_Init+0x74>)
 80042be:	4818      	ldr	r0, [pc, #96]	; (8004320 <SEGGER_SYSVIEW_Init+0x78>)
 80042c0:	f7ff fcd6 	bl	8003c70 <SEGGER_RTT_AllocUpBuffer>
 80042c4:	4603      	mov	r3, r0
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 80042ca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 80042ce:	785a      	ldrb	r2, [r3, #1]
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 80042d2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 80042d6:	7e1b      	ldrb	r3, [r3, #24]
 80042d8:	4618      	mov	r0, r3
 80042da:	2300      	movs	r3, #0
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2308      	movs	r3, #8
 80042e0:	4a11      	ldr	r2, [pc, #68]	; (8004328 <SEGGER_SYSVIEW_Init+0x80>)
 80042e2:	490f      	ldr	r1, [pc, #60]	; (8004320 <SEGGER_SYSVIEW_Init+0x78>)
 80042e4:	f7ff fd48 	bl	8003d78 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80042e8:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <SEGGER_SYSVIEW_Init+0x84>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 80042f4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80042f6:	4a0b      	ldr	r2, [pc, #44]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80042fc:	4a09      	ldr	r2, [pc, #36]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004302:	4a08      	ldr	r2, [pc, #32]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004308:	4a06      	ldr	r2, [pc, #24]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <SEGGER_SYSVIEW_Init+0x7c>)
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20013360 	.word	0x20013360
 8004320:	080058e4 	.word	0x080058e4
 8004324:	20014368 	.word	0x20014368
 8004328:	20014360 	.word	0x20014360
 800432c:	e0001004 	.word	0xe0001004

08004330 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004338:	4a04      	ldr	r2, [pc, #16]	; (800434c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6113      	str	r3, [r2, #16]
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	20014368 	.word	0x20014368

08004350 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004358:	f3ef 8311 	mrs	r3, BASEPRI
 800435c:	f04f 0120 	mov.w	r1, #32
 8004360:	f381 8811 	msr	BASEPRI, r1
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	4808      	ldr	r0, [pc, #32]	; (8004388 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004368:	f7ff fdc3 	bl	8003ef2 <_PreparePacket>
 800436c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	68b8      	ldr	r0, [r7, #8]
 8004374:	f7ff feb0 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f383 8811 	msr	BASEPRI, r3
}
 800437e:	bf00      	nop
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20014398 	.word	0x20014398

0800438c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004396:	f3ef 8311 	mrs	r3, BASEPRI
 800439a:	f04f 0120 	mov.w	r1, #32
 800439e:	f381 8811 	msr	BASEPRI, r1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	4816      	ldr	r0, [pc, #88]	; (8004400 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80043a6:	f7ff fda4 	bl	8003ef2 <_PreparePacket>
 80043aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	e00b      	b.n	80043d2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	1c59      	adds	r1, r3, #1
 80043c2:	61f9      	str	r1, [r7, #28]
 80043c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	09db      	lsrs	r3, r3, #7
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b7f      	cmp	r3, #127	; 0x7f
 80043d6:	d8f0      	bhi.n	80043ba <SEGGER_SYSVIEW_RecordU32+0x2e>
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	61fa      	str	r2, [r7, #28]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	6938      	ldr	r0, [r7, #16]
 80043ee:	f7ff fe73 	bl	80040d8 <_SendPacket>
  RECORD_END();
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f383 8811 	msr	BASEPRI, r3
}
 80043f8:	bf00      	nop
 80043fa:	3720      	adds	r7, #32
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20014398 	.word	0x20014398

08004404 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	; 0x30
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004410:	f3ef 8311 	mrs	r3, BASEPRI
 8004414:	f04f 0120 	mov.w	r1, #32
 8004418:	f381 8811 	msr	BASEPRI, r1
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	4825      	ldr	r0, [pc, #148]	; (80044b4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004420:	f7ff fd67 	bl	8003ef2 <_PreparePacket>
 8004424:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
 8004432:	e00b      	b.n	800444c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	b2da      	uxtb	r2, r3
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800443e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	09db      	lsrs	r3, r3, #7
 800444a:	62bb      	str	r3, [r7, #40]	; 0x28
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	2b7f      	cmp	r3, #127	; 0x7f
 8004450:	d8f0      	bhi.n	8004434 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	623b      	str	r3, [r7, #32]
 800446a:	e00b      	b.n	8004484 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	6279      	str	r1, [r7, #36]	; 0x24
 8004476:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	09db      	lsrs	r3, r3, #7
 8004482:	623b      	str	r3, [r7, #32]
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b7f      	cmp	r3, #127	; 0x7f
 8004488:	d8f0      	bhi.n	800446c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	627a      	str	r2, [r7, #36]	; 0x24
 8004490:	6a3a      	ldr	r2, [r7, #32]
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	6979      	ldr	r1, [r7, #20]
 800449e:	69b8      	ldr	r0, [r7, #24]
 80044a0:	f7ff fe1a 	bl	80040d8 <_SendPacket>
  RECORD_END();
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f383 8811 	msr	BASEPRI, r3
}
 80044aa:	bf00      	nop
 80044ac:	3730      	adds	r7, #48	; 0x30
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20014398 	.word	0x20014398

080044b8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08e      	sub	sp, #56	; 0x38
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80044c6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ca:	f04f 0120 	mov.w	r1, #32
 80044ce:	f381 8811 	msr	BASEPRI, r1
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	4832      	ldr	r0, [pc, #200]	; (80045a0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80044d6:	f7ff fd0c 	bl	8003ef2 <_PreparePacket>
 80044da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	637b      	str	r3, [r7, #52]	; 0x34
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
 80044e8:	e00b      	b.n	8004502 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	6379      	str	r1, [r7, #52]	; 0x34
 80044f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	701a      	strb	r2, [r3, #0]
 80044fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fe:	09db      	lsrs	r3, r3, #7
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b7f      	cmp	r3, #127	; 0x7f
 8004506:	d8f0      	bhi.n	80044ea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	637a      	str	r2, [r7, #52]	; 0x34
 800450e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004520:	e00b      	b.n	800453a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	b2da      	uxtb	r2, r3
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	1c59      	adds	r1, r3, #1
 800452a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800452c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	09db      	lsrs	r3, r3, #7
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	2b7f      	cmp	r3, #127	; 0x7f
 800453e:	d8f0      	bhi.n	8004522 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	623b      	str	r3, [r7, #32]
 8004558:	e00b      	b.n	8004572 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1c59      	adds	r1, r3, #1
 8004562:	6279      	str	r1, [r7, #36]	; 0x24
 8004564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	09db      	lsrs	r3, r3, #7
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	2b7f      	cmp	r3, #127	; 0x7f
 8004576:	d8f0      	bhi.n	800455a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	627a      	str	r2, [r7, #36]	; 0x24
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	6979      	ldr	r1, [r7, #20]
 800458c:	69b8      	ldr	r0, [r7, #24]
 800458e:	f7ff fda3 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f383 8811 	msr	BASEPRI, r3
}
 8004598:	bf00      	nop
 800459a:	3738      	adds	r7, #56	; 0x38
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20014398 	.word	0x20014398

080045a4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b090      	sub	sp, #64	; 0x40
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045b2:	f3ef 8311 	mrs	r3, BASEPRI
 80045b6:	f04f 0120 	mov.w	r1, #32
 80045ba:	f381 8811 	msr	BASEPRI, r1
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	4840      	ldr	r0, [pc, #256]	; (80046c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80045c2:	f7ff fc96 	bl	8003ef2 <_PreparePacket>
 80045c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045d4:	e00b      	b.n	80045ee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	1c59      	adds	r1, r3, #1
 80045de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80045e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	09db      	lsrs	r3, r3, #7
 80045ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	2b7f      	cmp	r3, #127	; 0x7f
 80045f2:	d8f0      	bhi.n	80045d6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80045f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
 800460c:	e00b      	b.n	8004626 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	b2da      	uxtb	r2, r3
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	1c59      	adds	r1, r3, #1
 8004616:	6379      	str	r1, [r7, #52]	; 0x34
 8004618:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	09db      	lsrs	r3, r3, #7
 8004624:	633b      	str	r3, [r7, #48]	; 0x30
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	2b7f      	cmp	r3, #127	; 0x7f
 800462a:	d8f0      	bhi.n	800460e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	637a      	str	r2, [r7, #52]	; 0x34
 8004632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
 8004644:	e00b      	b.n	800465e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	b2da      	uxtb	r2, r3
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	1c59      	adds	r1, r3, #1
 800464e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	09db      	lsrs	r3, r3, #7
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	2b7f      	cmp	r3, #127	; 0x7f
 8004662:	d8f0      	bhi.n	8004646 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800466a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	627b      	str	r3, [r7, #36]	; 0x24
 8004678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467a:	623b      	str	r3, [r7, #32]
 800467c:	e00b      	b.n	8004696 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	1c59      	adds	r1, r3, #1
 8004686:	6279      	str	r1, [r7, #36]	; 0x24
 8004688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	09db      	lsrs	r3, r3, #7
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	2b7f      	cmp	r3, #127	; 0x7f
 800469a:	d8f0      	bhi.n	800467e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	627a      	str	r2, [r7, #36]	; 0x24
 80046a2:	6a3a      	ldr	r2, [r7, #32]
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	6979      	ldr	r1, [r7, #20]
 80046b0:	69b8      	ldr	r0, [r7, #24]
 80046b2:	f7ff fd11 	bl	80040d8 <_SendPacket>
  RECORD_END();
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f383 8811 	msr	BASEPRI, r3
}
 80046bc:	bf00      	nop
 80046be:	3740      	adds	r7, #64	; 0x40
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20014398 	.word	0x20014398

080046c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08c      	sub	sp, #48	; 0x30
 80046cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80046ce:	4b59      	ldr	r3, [pc, #356]	; (8004834 <SEGGER_SYSVIEW_Start+0x16c>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80046d4:	f3ef 8311 	mrs	r3, BASEPRI
 80046d8:	f04f 0120 	mov.w	r1, #32
 80046dc:	f381 8811 	msr	BASEPRI, r1
 80046e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80046e2:	4b54      	ldr	r3, [pc, #336]	; (8004834 <SEGGER_SYSVIEW_Start+0x16c>)
 80046e4:	785b      	ldrb	r3, [r3, #1]
 80046e6:	220a      	movs	r2, #10
 80046e8:	4953      	ldr	r1, [pc, #332]	; (8004838 <SEGGER_SYSVIEW_Start+0x170>)
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fb fd78 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80046f6:	f7fe ff8f 	bl	8003618 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80046fa:	200a      	movs	r0, #10
 80046fc:	f7ff fe28 	bl	8004350 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004700:	f3ef 8311 	mrs	r3, BASEPRI
 8004704:	f04f 0120 	mov.w	r1, #32
 8004708:	f381 8811 	msr	BASEPRI, r1
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	484b      	ldr	r0, [pc, #300]	; (800483c <SEGGER_SYSVIEW_Start+0x174>)
 8004710:	f7ff fbef 	bl	8003ef2 <_PreparePacket>
 8004714:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800471e:	4b45      	ldr	r3, [pc, #276]	; (8004834 <SEGGER_SYSVIEW_Start+0x16c>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
 8004724:	e00b      	b.n	800473e <SEGGER_SYSVIEW_Start+0x76>
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	b2da      	uxtb	r2, r3
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	1c59      	adds	r1, r3, #1
 800472e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	09db      	lsrs	r3, r3, #7
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	2b7f      	cmp	r3, #127	; 0x7f
 8004742:	d8f0      	bhi.n	8004726 <SEGGER_SYSVIEW_Start+0x5e>
 8004744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800474a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800474c:	b2d2      	uxtb	r2, r2
 800474e:	701a      	strb	r2, [r3, #0]
 8004750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004752:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
 8004758:	4b36      	ldr	r3, [pc, #216]	; (8004834 <SEGGER_SYSVIEW_Start+0x16c>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	e00b      	b.n	8004778 <SEGGER_SYSVIEW_Start+0xb0>
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	6279      	str	r1, [r7, #36]	; 0x24
 800476a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	09db      	lsrs	r3, r3, #7
 8004776:	623b      	str	r3, [r7, #32]
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b7f      	cmp	r3, #127	; 0x7f
 800477c:	d8f0      	bhi.n	8004760 <SEGGER_SYSVIEW_Start+0x98>
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	627a      	str	r2, [r7, #36]	; 0x24
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	4b28      	ldr	r3, [pc, #160]	; (8004834 <SEGGER_SYSVIEW_Start+0x16c>)
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	e00b      	b.n	80047b2 <SEGGER_SYSVIEW_Start+0xea>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	61f9      	str	r1, [r7, #28]
 80047a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	09db      	lsrs	r3, r3, #7
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b7f      	cmp	r3, #127	; 0x7f
 80047b6:	d8f0      	bhi.n	800479a <SEGGER_SYSVIEW_Start+0xd2>
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	61fa      	str	r2, [r7, #28]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	e00b      	b.n	80047ea <SEGGER_SYSVIEW_Start+0x122>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	1c59      	adds	r1, r3, #1
 80047da:	6179      	str	r1, [r7, #20]
 80047dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	701a      	strb	r2, [r3, #0]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	09db      	lsrs	r3, r3, #7
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b7f      	cmp	r3, #127	; 0x7f
 80047ee:	d8f0      	bhi.n	80047d2 <SEGGER_SYSVIEW_Start+0x10a>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	617a      	str	r2, [r7, #20]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004800:	2218      	movs	r2, #24
 8004802:	6839      	ldr	r1, [r7, #0]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7ff fc67 	bl	80040d8 <_SendPacket>
      RECORD_END();
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <SEGGER_SYSVIEW_Start+0x16c>)
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <SEGGER_SYSVIEW_Start+0x16c>)
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800481e:	f000 f9eb 	bl	8004bf8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004822:	f000 f9b1 	bl	8004b88 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004826:	f000 fc83 	bl	8005130 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800482a:	bf00      	nop
 800482c:	3730      	adds	r7, #48	; 0x30
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20014368 	.word	0x20014368
 8004838:	080058f8 	.word	0x080058f8
 800483c:	20014398 	.word	0x20014398

08004840 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004846:	f3ef 8311 	mrs	r3, BASEPRI
 800484a:	f04f 0120 	mov.w	r1, #32
 800484e:	f381 8811 	msr	BASEPRI, r1
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	480b      	ldr	r0, [pc, #44]	; (8004884 <SEGGER_SYSVIEW_Stop+0x44>)
 8004856:	f7ff fb4c 	bl	8003ef2 <_PreparePacket>
 800485a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <SEGGER_SYSVIEW_Stop+0x48>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d007      	beq.n	8004874 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004864:	220b      	movs	r2, #11
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	6838      	ldr	r0, [r7, #0]
 800486a:	f7ff fc35 	bl	80040d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <SEGGER_SYSVIEW_Stop+0x48>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f383 8811 	msr	BASEPRI, r3
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20014398 	.word	0x20014398
 8004888:	20014368 	.word	0x20014368

0800488c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004892:	f3ef 8311 	mrs	r3, BASEPRI
 8004896:	f04f 0120 	mov.w	r1, #32
 800489a:	f381 8811 	msr	BASEPRI, r1
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	4845      	ldr	r0, [pc, #276]	; (80049b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80048a2:	f7ff fb26 	bl	8003ef2 <_PreparePacket>
 80048a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b0:	4b42      	ldr	r3, [pc, #264]	; (80049bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b6:	e00b      	b.n	80048d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	1c59      	adds	r1, r3, #1
 80048c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	09db      	lsrs	r3, r3, #7
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	2b7f      	cmp	r3, #127	; 0x7f
 80048d4:	d8f0      	bhi.n	80048b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ea:	4b34      	ldr	r3, [pc, #208]	; (80049bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	623b      	str	r3, [r7, #32]
 80048f0:	e00b      	b.n	800490a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	1c59      	adds	r1, r3, #1
 80048fa:	6279      	str	r1, [r7, #36]	; 0x24
 80048fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	6a3b      	ldr	r3, [r7, #32]
 8004906:	09db      	lsrs	r3, r3, #7
 8004908:	623b      	str	r3, [r7, #32]
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	2b7f      	cmp	r3, #127	; 0x7f
 800490e:	d8f0      	bhi.n	80048f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	627a      	str	r2, [r7, #36]	; 0x24
 8004916:	6a3a      	ldr	r2, [r7, #32]
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	4b25      	ldr	r3, [pc, #148]	; (80049bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e00b      	b.n	8004944 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	b2da      	uxtb	r2, r3
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	61f9      	str	r1, [r7, #28]
 8004936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	09db      	lsrs	r3, r3, #7
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b7f      	cmp	r3, #127	; 0x7f
 8004948:	d8f0      	bhi.n	800492c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	61fa      	str	r2, [r7, #28]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	e00b      	b.n	800497c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	b2da      	uxtb	r2, r3
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	1c59      	adds	r1, r3, #1
 800496c:	6179      	str	r1, [r7, #20]
 800496e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	09db      	lsrs	r3, r3, #7
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b7f      	cmp	r3, #127	; 0x7f
 8004980:	d8f0      	bhi.n	8004964 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	617a      	str	r2, [r7, #20]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004992:	2218      	movs	r2, #24
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	68b8      	ldr	r0, [r7, #8]
 8004998:	f7ff fb9e 	bl	80040d8 <_SendPacket>
  RECORD_END();
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80049aa:	4b04      	ldr	r3, [pc, #16]	; (80049bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	4798      	blx	r3
  }
}
 80049b0:	bf00      	nop
 80049b2:	3730      	adds	r7, #48	; 0x30
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20014398 	.word	0x20014398
 80049bc:	20014368 	.word	0x20014368

080049c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b092      	sub	sp, #72	; 0x48
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80049c8:	f3ef 8311 	mrs	r3, BASEPRI
 80049cc:	f04f 0120 	mov.w	r1, #32
 80049d0:	f381 8811 	msr	BASEPRI, r1
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	486a      	ldr	r0, [pc, #424]	; (8004b80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80049d8:	f7ff fa8b 	bl	8003ef2 <_PreparePacket>
 80049dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	647b      	str	r3, [r7, #68]	; 0x44
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b66      	ldr	r3, [pc, #408]	; (8004b84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	643b      	str	r3, [r7, #64]	; 0x40
 80049f2:	e00b      	b.n	8004a0c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80049f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	6479      	str	r1, [r7, #68]	; 0x44
 80049fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a08:	09db      	lsrs	r3, r3, #7
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a10:	d8f0      	bhi.n	80049f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	647a      	str	r2, [r7, #68]	; 0x44
 8004a18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a2c:	e00b      	b.n	8004a46 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a34:	1c59      	adds	r1, r3, #1
 8004a36:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	09db      	lsrs	r3, r3, #7
 8004a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	2b7f      	cmp	r3, #127	; 0x7f
 8004a4a:	d8f0      	bhi.n	8004a2e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	4619      	mov	r1, r3
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff f9f7 	bl	8003e58 <_EncodeStr>
 8004a6a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004a6c:	2209      	movs	r2, #9
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	6938      	ldr	r0, [r7, #16]
 8004a72:	f7ff fb31 	bl	80040d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b40      	ldr	r3, [pc, #256]	; (8004b84 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8a:	e00b      	b.n	8004aa4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	1c59      	adds	r1, r3, #1
 8004a94:	6379      	str	r1, [r7, #52]	; 0x34
 8004a96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	09db      	lsrs	r3, r3, #7
 8004aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa8:	d8f0      	bhi.n	8004a8c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	637a      	str	r2, [r7, #52]	; 0x34
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac4:	e00b      	b.n	8004ade <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	09db      	lsrs	r3, r3, #7
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ae2:	d8f0      	bhi.n	8004ac6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	1c5a      	adds	r2, r3, #1
 8004ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	e00b      	b.n	8004b18 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	6279      	str	r1, [r7, #36]	; 0x24
 8004b0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	09db      	lsrs	r3, r3, #7
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b1c:	d8f0      	bhi.n	8004b00 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	627a      	str	r2, [r7, #36]	; 0x24
 8004b24:	6a3a      	ldr	r2, [r7, #32]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e00b      	b.n	8004b50 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	1c59      	adds	r1, r3, #1
 8004b40:	61f9      	str	r1, [r7, #28]
 8004b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	09db      	lsrs	r3, r3, #7
 8004b4e:	61bb      	str	r3, [r7, #24]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b7f      	cmp	r3, #127	; 0x7f
 8004b54:	d8f0      	bhi.n	8004b38 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	61fa      	str	r2, [r7, #28]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	b2d2      	uxtb	r2, r2
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004b66:	2215      	movs	r2, #21
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	6938      	ldr	r0, [r7, #16]
 8004b6c:	f7ff fab4 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f383 8811 	msr	BASEPRI, r3
}
 8004b76:	bf00      	nop
 8004b78:	3748      	adds	r7, #72	; 0x48
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20014398 	.word	0x20014398
 8004b84:	20014368 	.word	0x20014368

08004b88 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004b8c:	4b07      	ldr	r3, [pc, #28]	; (8004bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004b9e:	4b03      	ldr	r3, [pc, #12]	; (8004bac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4798      	blx	r3
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20014368 	.word	0x20014368

08004bb0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bbc:	f04f 0120 	mov.w	r1, #32
 8004bc0:	f381 8811 	msr	BASEPRI, r1
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	480b      	ldr	r0, [pc, #44]	; (8004bf4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004bc8:	f7ff f993 	bl	8003ef2 <_PreparePacket>
 8004bcc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bce:	2280      	movs	r2, #128	; 0x80
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	6938      	ldr	r0, [r7, #16]
 8004bd4:	f7ff f940 	bl	8003e58 <_EncodeStr>
 8004bd8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004bda:	220e      	movs	r2, #14
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	6938      	ldr	r0, [r7, #16]
 8004be0:	f7ff fa7a 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f383 8811 	msr	BASEPRI, r3
}
 8004bea:	bf00      	nop
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20014398 	.word	0x20014398

08004bf8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01a      	beq.n	8004c3c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d015      	beq.n	8004c3c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004c10:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4798      	blx	r3
 8004c18:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c1c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	000a      	movs	r2, r1
 8004c2c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004c2e:	4613      	mov	r3, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	4621      	mov	r1, r4
 8004c34:	200d      	movs	r0, #13
 8004c36:	f7ff fbe5 	bl	8004404 <SEGGER_SYSVIEW_RecordU32x2>
 8004c3a:	e006      	b.n	8004c4a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4619      	mov	r1, r3
 8004c42:	200c      	movs	r0, #12
 8004c44:	f7ff fba2 	bl	800438c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20014368 	.word	0x20014368
 8004c58:	e0001004 	.word	0xe0001004

08004c5c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c62:	f3ef 8311 	mrs	r3, BASEPRI
 8004c66:	f04f 0120 	mov.w	r1, #32
 8004c6a:	f381 8811 	msr	BASEPRI, r1
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	4819      	ldr	r0, [pc, #100]	; (8004cd8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004c72:	f7ff f93e 	bl	8003ef2 <_PreparePacket>
 8004c76:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004c7c:	4b17      	ldr	r3, [pc, #92]	; (8004cdc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c84:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	e00b      	b.n	8004ca8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	6179      	str	r1, [r7, #20]
 8004c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	09db      	lsrs	r3, r3, #7
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b7f      	cmp	r3, #127	; 0x7f
 8004cac:	d8f0      	bhi.n	8004c90 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	617a      	str	r2, [r7, #20]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	68b8      	ldr	r0, [r7, #8]
 8004cc4:	f7ff fa08 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f383 8811 	msr	BASEPRI, r3
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20014398 	.word	0x20014398
 8004cdc:	e000ed04 	.word	0xe000ed04

08004ce0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cea:	f04f 0120 	mov.w	r1, #32
 8004cee:	f381 8811 	msr	BASEPRI, r1
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	4807      	ldr	r0, [pc, #28]	; (8004d14 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004cf6:	f7ff f8fc 	bl	8003ef2 <_PreparePacket>
 8004cfa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	6839      	ldr	r1, [r7, #0]
 8004d00:	6838      	ldr	r0, [r7, #0]
 8004d02:	f7ff f9e9 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f383 8811 	msr	BASEPRI, r3
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20014398 	.word	0x20014398

08004d18 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d22:	f04f 0120 	mov.w	r1, #32
 8004d26:	f381 8811 	msr	BASEPRI, r1
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	4807      	ldr	r0, [pc, #28]	; (8004d4c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004d2e:	f7ff f8e0 	bl	8003ef2 <_PreparePacket>
 8004d32:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004d34:	2212      	movs	r2, #18
 8004d36:	6839      	ldr	r1, [r7, #0]
 8004d38:	6838      	ldr	r0, [r7, #0]
 8004d3a:	f7ff f9cd 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f383 8811 	msr	BASEPRI, r3
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20014398 	.word	0x20014398

08004d50 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d56:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5a:	f04f 0120 	mov.w	r1, #32
 8004d5e:	f381 8811 	msr	BASEPRI, r1
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	4807      	ldr	r0, [pc, #28]	; (8004d84 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004d66:	f7ff f8c4 	bl	8003ef2 <_PreparePacket>
 8004d6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004d6c:	2211      	movs	r2, #17
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	6838      	ldr	r0, [r7, #0]
 8004d72:	f7ff f9b1 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f383 8811 	msr	BASEPRI, r3
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20014398 	.word	0x20014398

08004d88 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	f04f 0120 	mov.w	r1, #32
 8004d98:	f381 8811 	msr	BASEPRI, r1
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	4819      	ldr	r0, [pc, #100]	; (8004e04 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004da0:	f7ff f8a7 	bl	8003ef2 <_PreparePacket>
 8004da4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004daa:	4b17      	ldr	r3, [pc, #92]	; (8004e08 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e00b      	b.n	8004dd6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	1c59      	adds	r1, r3, #1
 8004dc6:	61f9      	str	r1, [r7, #28]
 8004dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	09db      	lsrs	r3, r3, #7
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dda:	d8f0      	bhi.n	8004dbe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	61fa      	str	r2, [r7, #28]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004dec:	2208      	movs	r2, #8
 8004dee:	68f9      	ldr	r1, [r7, #12]
 8004df0:	6938      	ldr	r0, [r7, #16]
 8004df2:	f7ff f971 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f383 8811 	msr	BASEPRI, r3
}
 8004dfc:	bf00      	nop
 8004dfe:	3720      	adds	r7, #32
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20014398 	.word	0x20014398
 8004e08:	20014368 	.word	0x20014368

08004e0c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e14:	f3ef 8311 	mrs	r3, BASEPRI
 8004e18:	f04f 0120 	mov.w	r1, #32
 8004e1c:	f381 8811 	msr	BASEPRI, r1
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	4819      	ldr	r0, [pc, #100]	; (8004e88 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004e24:	f7ff f865 	bl	8003ef2 <_PreparePacket>
 8004e28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e2e:	4b17      	ldr	r3, [pc, #92]	; (8004e8c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	61bb      	str	r3, [r7, #24]
 8004e40:	e00b      	b.n	8004e5a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	1c59      	adds	r1, r3, #1
 8004e4a:	61f9      	str	r1, [r7, #28]
 8004e4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	09db      	lsrs	r3, r3, #7
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e5e:	d8f0      	bhi.n	8004e42 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	61fa      	str	r2, [r7, #28]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004e70:	2204      	movs	r2, #4
 8004e72:	68f9      	ldr	r1, [r7, #12]
 8004e74:	6938      	ldr	r0, [r7, #16]
 8004e76:	f7ff f92f 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f383 8811 	msr	BASEPRI, r3
}
 8004e80:	bf00      	nop
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20014398 	.word	0x20014398
 8004e8c:	20014368 	.word	0x20014368

08004e90 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e98:	f3ef 8311 	mrs	r3, BASEPRI
 8004e9c:	f04f 0120 	mov.w	r1, #32
 8004ea0:	f381 8811 	msr	BASEPRI, r1
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	4819      	ldr	r0, [pc, #100]	; (8004f0c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ea8:	f7ff f823 	bl	8003ef2 <_PreparePacket>
 8004eac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004eb2:	4b17      	ldr	r3, [pc, #92]	; (8004f10 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	e00b      	b.n	8004ede <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1c59      	adds	r1, r3, #1
 8004ece:	61f9      	str	r1, [r7, #28]
 8004ed0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	09db      	lsrs	r3, r3, #7
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee2:	d8f0      	bhi.n	8004ec6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	61fa      	str	r2, [r7, #28]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004ef4:	2206      	movs	r2, #6
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	6938      	ldr	r0, [r7, #16]
 8004efa:	f7ff f8ed 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f383 8811 	msr	BASEPRI, r3
}
 8004f04:	bf00      	nop
 8004f06:	3720      	adds	r7, #32
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20014398 	.word	0x20014398
 8004f10:	20014368 	.word	0x20014368

08004f14 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	; 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f22:	f04f 0120 	mov.w	r1, #32
 8004f26:	f381 8811 	msr	BASEPRI, r1
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	4827      	ldr	r0, [pc, #156]	; (8004fcc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004f2e:	f7fe ffe0 	bl	8003ef2 <_PreparePacket>
 8004f32:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f38:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	623b      	str	r3, [r7, #32]
 8004f4a:	e00b      	b.n	8004f64 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	1c59      	adds	r1, r3, #1
 8004f54:	6279      	str	r1, [r7, #36]	; 0x24
 8004f56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	09db      	lsrs	r3, r3, #7
 8004f62:	623b      	str	r3, [r7, #32]
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	2b7f      	cmp	r3, #127	; 0x7f
 8004f68:	d8f0      	bhi.n	8004f4c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	627a      	str	r2, [r7, #36]	; 0x24
 8004f70:	6a3a      	ldr	r2, [r7, #32]
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	e00b      	b.n	8004f9c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	1c59      	adds	r1, r3, #1
 8004f8c:	61f9      	str	r1, [r7, #28]
 8004f8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f92:	b2d2      	uxtb	r2, r2
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	09db      	lsrs	r3, r3, #7
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa0:	d8f0      	bhi.n	8004f84 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	61fa      	str	r2, [r7, #28]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004fb2:	2207      	movs	r2, #7
 8004fb4:	68f9      	ldr	r1, [r7, #12]
 8004fb6:	6938      	ldr	r0, [r7, #16]
 8004fb8:	f7ff f88e 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f383 8811 	msr	BASEPRI, r3
}
 8004fc2:	bf00      	nop
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20014398 	.word	0x20014398
 8004fd0:	20014368 	.word	0x20014368

08004fd4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	1ad3      	subs	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20014368 	.word	0x20014368

08004ff4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08c      	sub	sp, #48	; 0x30
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d06d      	beq.n	80050e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800500c:	2300      	movs	r3, #0
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005010:	e008      	b.n	8005024 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	3301      	adds	r3, #1
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005028:	429a      	cmp	r2, r3
 800502a:	d3f2      	bcc.n	8005012 <SEGGER_SYSVIEW_SendModule+0x1e>
 800502c:	e000      	b.n	8005030 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800502e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d055      	beq.n	80050e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005036:	f3ef 8311 	mrs	r3, BASEPRI
 800503a:	f04f 0120 	mov.w	r1, #32
 800503e:	f381 8811 	msr	BASEPRI, r1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	482a      	ldr	r0, [pc, #168]	; (80050f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005046:	f7fe ff54 	bl	8003ef2 <_PreparePacket>
 800504a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	623b      	str	r3, [r7, #32]
 8005058:	e00b      	b.n	8005072 <SEGGER_SYSVIEW_SendModule+0x7e>
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	1c59      	adds	r1, r3, #1
 8005062:	6279      	str	r1, [r7, #36]	; 0x24
 8005064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	09db      	lsrs	r3, r3, #7
 8005070:	623b      	str	r3, [r7, #32]
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	2b7f      	cmp	r3, #127	; 0x7f
 8005076:	d8f0      	bhi.n	800505a <SEGGER_SYSVIEW_SendModule+0x66>
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	627a      	str	r2, [r7, #36]	; 0x24
 800507e:	6a3a      	ldr	r2, [r7, #32]
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e00b      	b.n	80050ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	61f9      	str	r1, [r7, #28]
 800509e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	09db      	lsrs	r3, r3, #7
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b7f      	cmp	r3, #127	; 0x7f
 80050b0:	d8f0      	bhi.n	8005094 <SEGGER_SYSVIEW_SendModule+0xa0>
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	61fa      	str	r2, [r7, #28]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2280      	movs	r2, #128	; 0x80
 80050c8:	4619      	mov	r1, r3
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7fe fec4 	bl	8003e58 <_EncodeStr>
 80050d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80050d2:	2216      	movs	r2, #22
 80050d4:	68f9      	ldr	r1, [r7, #12]
 80050d6:	6938      	ldr	r0, [r7, #16]
 80050d8:	f7fe fffe 	bl	80040d8 <_SendPacket>
      RECORD_END();
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80050e2:	bf00      	nop
 80050e4:	3730      	adds	r7, #48	; 0x30
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20014390 	.word	0x20014390
 80050f0:	20014398 	.word	0x20014398

080050f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00f      	beq.n	8005122 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f2      	bne.n	8005108 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20014390 	.word	0x20014390

08005130 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005136:	f3ef 8311 	mrs	r3, BASEPRI
 800513a:	f04f 0120 	mov.w	r1, #32
 800513e:	f381 8811 	msr	BASEPRI, r1
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	4817      	ldr	r0, [pc, #92]	; (80051a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005146:	f7fe fed4 	bl	8003ef2 <_PreparePacket>
 800514a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	e00b      	b.n	8005174 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	6179      	str	r1, [r7, #20]
 8005166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	09db      	lsrs	r3, r3, #7
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b7f      	cmp	r3, #127	; 0x7f
 8005178:	d8f0      	bhi.n	800515c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	617a      	str	r2, [r7, #20]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800518a:	221b      	movs	r2, #27
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	68b8      	ldr	r0, [r7, #8]
 8005190:	f7fe ffa2 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f383 8811 	msr	BASEPRI, r3
}
 800519a:	bf00      	nop
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20014398 	.word	0x20014398
 80051a8:	20014394 	.word	0x20014394

080051ac <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051b4:	f3ef 8311 	mrs	r3, BASEPRI
 80051b8:	f04f 0120 	mov.w	r1, #32
 80051bc:	f381 8811 	msr	BASEPRI, r1
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	4827      	ldr	r0, [pc, #156]	; (8005260 <SEGGER_SYSVIEW_Warn+0xb4>)
 80051c4:	f7fe fe95 	bl	8003ef2 <_PreparePacket>
 80051c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051ca:	2280      	movs	r2, #128	; 0x80
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	6938      	ldr	r0, [r7, #16]
 80051d0:	f7fe fe42 	bl	8003e58 <_EncodeStr>
 80051d4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
 80051da:	2301      	movs	r3, #1
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	e00b      	b.n	80051f8 <SEGGER_SYSVIEW_Warn+0x4c>
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	6279      	str	r1, [r7, #36]	; 0x24
 80051ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	09db      	lsrs	r3, r3, #7
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b7f      	cmp	r3, #127	; 0x7f
 80051fc:	d8f0      	bhi.n	80051e0 <SEGGER_SYSVIEW_Warn+0x34>
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	627a      	str	r2, [r7, #36]	; 0x24
 8005204:	6a3a      	ldr	r2, [r7, #32]
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	e00b      	b.n	8005230 <SEGGER_SYSVIEW_Warn+0x84>
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	1c59      	adds	r1, r3, #1
 8005220:	61f9      	str	r1, [r7, #28]
 8005222:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	09db      	lsrs	r3, r3, #7
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b7f      	cmp	r3, #127	; 0x7f
 8005234:	d8f0      	bhi.n	8005218 <SEGGER_SYSVIEW_Warn+0x6c>
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	61fa      	str	r2, [r7, #28]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005246:	221a      	movs	r2, #26
 8005248:	68f9      	ldr	r1, [r7, #12]
 800524a:	6938      	ldr	r0, [r7, #16]
 800524c:	f7fe ff44 	bl	80040d8 <_SendPacket>
  RECORD_END();
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f383 8811 	msr	BASEPRI, r3
}
 8005256:	bf00      	nop
 8005258:	3728      	adds	r7, #40	; 0x28
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20014398 	.word	0x20014398

08005264 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800526a:	7e1b      	ldrb	r3, [r3, #24]
 800526c:	4619      	mov	r1, r3
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005270:	460b      	mov	r3, r1
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	440b      	add	r3, r1
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	336c      	adds	r3, #108	; 0x6c
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005280:	7e1b      	ldrb	r3, [r3, #24]
 8005282:	4618      	mov	r0, r3
 8005284:	490d      	ldr	r1, [pc, #52]	; (80052bc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005286:	4603      	mov	r3, r0
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4403      	add	r3, r0
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	3370      	adds	r3, #112	; 0x70
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d00b      	beq.n	80052b0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800529a:	789b      	ldrb	r3, [r3, #2]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80052a0:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80052a6:	f7fe fe31 	bl	8003f0c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80052aa:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80052b0:	4b01      	ldr	r3, [pc, #4]	; (80052b8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20014368 	.word	0x20014368
 80052bc:	20012ea8 	.word	0x20012ea8

080052c0 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	70fb      	strb	r3, [r7, #3]
 80052d2:	460b      	mov	r3, r1
 80052d4:	70bb      	strb	r3, [r7, #2]
 80052d6:	4613      	mov	r3, r2
 80052d8:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	78ba      	ldrb	r2, [r7, #2]
 80052e4:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	787a      	ldrb	r2, [r7, #1]
 80052ea:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7c3a      	ldrb	r2, [r7, #16]
 80052f0:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	7d3a      	ldrb	r2, [r7, #20]
 80052f6:	715a      	strb	r2, [r3, #5]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a88      	ldr	r2, [pc, #544]	; (800553c <GPIO_Config+0x238>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d106      	bne.n	800532c <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 800531e:	4b88      	ldr	r3, [pc, #544]	; (8005540 <GPIO_Config+0x23c>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	4a87      	ldr	r2, [pc, #540]	; (8005540 <GPIO_Config+0x23c>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6313      	str	r3, [r2, #48]	; 0x30
 800532a:	e03a      	b.n	80053a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4a84      	ldr	r2, [pc, #528]	; (8005544 <GPIO_Config+0x240>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d106      	bne.n	8005344 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8005336:	4b82      	ldr	r3, [pc, #520]	; (8005540 <GPIO_Config+0x23c>)
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	4a81      	ldr	r2, [pc, #516]	; (8005540 <GPIO_Config+0x23c>)
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	6313      	str	r3, [r2, #48]	; 0x30
 8005342:	e02e      	b.n	80053a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4a7f      	ldr	r2, [pc, #508]	; (8005548 <GPIO_Config+0x244>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d106      	bne.n	800535c <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800534e:	4b7c      	ldr	r3, [pc, #496]	; (8005540 <GPIO_Config+0x23c>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	4a7b      	ldr	r2, [pc, #492]	; (8005540 <GPIO_Config+0x23c>)
 8005354:	f043 0304 	orr.w	r3, r3, #4
 8005358:	6313      	str	r3, [r2, #48]	; 0x30
 800535a:	e022      	b.n	80053a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	4a7a      	ldr	r2, [pc, #488]	; (800554c <GPIO_Config+0x248>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d106      	bne.n	8005374 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8005366:	4b76      	ldr	r3, [pc, #472]	; (8005540 <GPIO_Config+0x23c>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	4a75      	ldr	r2, [pc, #468]	; (8005540 <GPIO_Config+0x23c>)
 800536c:	f043 0308 	orr.w	r3, r3, #8
 8005370:	6313      	str	r3, [r2, #48]	; 0x30
 8005372:	e016      	b.n	80053a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	4a75      	ldr	r2, [pc, #468]	; (8005550 <GPIO_Config+0x24c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d106      	bne.n	800538c <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800537e:	4b70      	ldr	r3, [pc, #448]	; (8005540 <GPIO_Config+0x23c>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	4a6f      	ldr	r2, [pc, #444]	; (8005540 <GPIO_Config+0x23c>)
 8005384:	f043 0310 	orr.w	r3, r3, #16
 8005388:	6313      	str	r3, [r2, #48]	; 0x30
 800538a:	e00a      	b.n	80053a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a70      	ldr	r2, [pc, #448]	; (8005554 <GPIO_Config+0x250>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d105      	bne.n	80053a2 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8005396:	4b6a      	ldr	r3, [pc, #424]	; (8005540 <GPIO_Config+0x23c>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	4a69      	ldr	r2, [pc, #420]	; (8005540 <GPIO_Config+0x23c>)
 800539c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a0:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	461a      	mov	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	2103      	movs	r1, #3
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	43db      	mvns	r3, r3
 80053c8:	4619      	mov	r1, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	400a      	ands	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	430a      	orrs	r2, r1
 80053e0:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	789b      	ldrb	r3, [r3, #2]
 80053e6:	461a      	mov	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	4619      	mov	r1, r3
 80053fe:	2301      	movs	r3, #1
 8005400:	408b      	lsls	r3, r1
 8005402:	43db      	mvns	r3, r3
 8005404:	4619      	mov	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	400a      	ands	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	2103      	movs	r1, #3
 800543e:	fa01 f303 	lsl.w	r3, r1, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	4619      	mov	r1, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	400a      	ands	r2, r1
 800544c:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	6899      	ldr	r1, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	430a      	orrs	r2, r1
 800545c:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	791b      	ldrb	r3, [r3, #4]
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	2103      	movs	r1, #3
 800547e:	fa01 f303 	lsl.w	r3, r1, r3
 8005482:	43db      	mvns	r3, r3
 8005484:	4619      	mov	r1, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	400a      	ands	r2, r1
 800548c:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	68d9      	ldr	r1, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	430a      	orrs	r2, r1
 800549c:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d143      	bne.n	800552e <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b07      	cmp	r3, #7
 80054ac:	d81f      	bhi.n	80054ee <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	210f      	movs	r1, #15
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	4619      	mov	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	400a      	ands	r2, r1
 80054ce:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	6a1a      	ldr	r2, [r3, #32]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	795b      	ldrb	r3, [r3, #5]
 80054da:	4619      	mov	r1, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	4619      	mov	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 80054ec:	e01f      	b.n	800552e <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	3b08      	subs	r3, #8
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fe:	210f      	movs	r1, #15
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	400a      	ands	r2, r1
 8005510:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	795b      	ldrb	r3, [r3, #5]
 800551c:	4619      	mov	r1, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	4619      	mov	r1, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	430a      	orrs	r2, r1
 800552c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40020000 	.word	0x40020000
 8005540:	40023800 	.word	0x40023800
 8005544:	40020400 	.word	0x40020400
 8005548:	40020800 	.word	0x40020800
 800554c:	40020c00 	.word	0x40020c00
 8005550:	40021000 	.word	0x40021000
 8005554:	40021c00 	.word	0x40021c00

08005558 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d10d      	bne.n	8005586 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	4619      	mov	r1, r3
 8005576:	2301      	movs	r3, #1
 8005578:	408b      	lsls	r3, r1
 800557a:	4619      	mov	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	430a      	orrs	r2, r1
 8005582:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8005584:	e00d      	b.n	80055a2 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	3310      	adds	r3, #16
 8005592:	2101      	movs	r1, #1
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	4619      	mov	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	430a      	orrs	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <GPIO_RedPin>:

//---------------- MODER: Lectura input----------------------

uint32_t GPIO_RedPin (GPIO_Handler_t *pPinHandler)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
	//Creamos una variable auxiliar
	uint32_t pinValue = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]

	/*Cargamos el valor del registro IDR y lo desplazamos a la posicion
	 * correspondiente
	 */
	pinValue = (pPinHandler->pGPIOx->IDR >> pPinHandler->GPIO_PinConfig.GPIO_PinNumber)&(0b1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	40d3      	lsrs	r3, r2
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	60fb      	str	r3, [r7, #12]

	return pinValue;
 80055cc:	68fb      	ldr	r3, [r7, #12]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <GPIOxTooglePin>:


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	4619      	mov	r1, r3
 80055ee:	2301      	movs	r3, #1
 80055f0:	408b      	lsls	r3, r1
 80055f2:	4619      	mov	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	404a      	eors	r2, r1
 80055fa:	615a      	str	r2, [r3, #20]
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8005612:	4a39      	ldr	r2, [pc, #228]	; (80056f8 <configPLL+0xf0>)
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8005618:	79fb      	ldrb	r3, [r7, #7]
 800561a:	2b31      	cmp	r3, #49	; 0x31
 800561c:	d804      	bhi.n	8005628 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800561e:	4b37      	ldr	r3, [pc, #220]	; (80056fc <configPLL+0xf4>)
 8005620:	4a36      	ldr	r2, [pc, #216]	; (80056fc <configPLL+0xf4>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	6093      	str	r3, [r2, #8]
 8005626:	e005      	b.n	8005634 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005628:	4b34      	ldr	r3, [pc, #208]	; (80056fc <configPLL+0xf4>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a33      	ldr	r2, [pc, #204]	; (80056fc <configPLL+0xf4>)
 800562e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8005632:	6093      	str	r3, [r2, #8]
	}

	//---------------------------------1) Calibracion HSI------------------------------------------
	//Registro: CR

	adjustHSI();
 8005634:	f000 f866 	bl	8005704 <adjustHSI>

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8005638:	4b30      	ldr	r3, [pc, #192]	; (80056fc <configPLL+0xf4>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4a2f      	ldr	r2, [pc, #188]	; (80056fc <configPLL+0xf4>)
 800563e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005642:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <configPLL+0xf4>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a2c      	ldr	r2, [pc, #176]	; (80056fc <configPLL+0xf4>)
 800564a:	f043 0312 	orr.w	r3, r3, #18
 800564e:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8005650:	4b2a      	ldr	r3, [pc, #168]	; (80056fc <configPLL+0xf4>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	79fa      	ldrb	r2, [r7, #7]
 8005656:	0092      	lsls	r2, r2, #2
 8005658:	3a0e      	subs	r2, #14
 800565a:	0192      	lsls	r2, r2, #6
 800565c:	4611      	mov	r1, r2
 800565e:	4a27      	ldr	r2, [pc, #156]	; (80056fc <configPLL+0xf4>)
 8005660:	430b      	orrs	r3, r1
 8005662:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8005664:	4b25      	ldr	r3, [pc, #148]	; (80056fc <configPLL+0xf4>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a24      	ldr	r2, [pc, #144]	; (80056fc <configPLL+0xf4>)
 800566a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566e:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8005670:	4b22      	ldr	r3, [pc, #136]	; (80056fc <configPLL+0xf4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a21      	ldr	r2, [pc, #132]	; (80056fc <configPLL+0xf4>)
 8005676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800567a:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800567c:	e000      	b.n	8005680 <configPLL+0x78>
	{
		__NOP();
 800567e:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8005680:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <configPLL+0xf4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0f8      	beq.n	800567e <configPLL+0x76>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	2b5a      	cmp	r3, #90	; 0x5a
 8005690:	d909      	bls.n	80056a6 <configPLL+0x9e>
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	2b64      	cmp	r3, #100	; 0x64
 8005696:	d806      	bhi.n	80056a6 <configPLL+0x9e>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8005698:	4b19      	ldr	r3, [pc, #100]	; (8005700 <configPLL+0xf8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a18      	ldr	r2, [pc, #96]	; (8005700 <configPLL+0xf8>)
 800569e:	f043 0303 	orr.w	r3, r3, #3
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e01d      	b.n	80056e2 <configPLL+0xda>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	d909      	bls.n	80056c0 <configPLL+0xb8>
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	2b5a      	cmp	r3, #90	; 0x5a
 80056b0:	d806      	bhi.n	80056c0 <configPLL+0xb8>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <configPLL+0xf8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a12      	ldr	r2, [pc, #72]	; (8005700 <configPLL+0xf8>)
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e010      	b.n	80056e2 <configPLL+0xda>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	2b1e      	cmp	r3, #30
 80056c4:	d909      	bls.n	80056da <configPLL+0xd2>
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d806      	bhi.n	80056da <configPLL+0xd2>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <configPLL+0xf8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a0b      	ldr	r2, [pc, #44]	; (8005700 <configPLL+0xf8>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e003      	b.n	80056e2 <configPLL+0xda>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 80056da:	4b09      	ldr	r3, [pc, #36]	; (8005700 <configPLL+0xf8>)
 80056dc:	4a08      	ldr	r2, [pc, #32]	; (8005700 <configPLL+0xf8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <configPLL+0xf4>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4a05      	ldr	r2, [pc, #20]	; (80056fc <configPLL+0xf4>)
 80056e8:	f043 0302 	orr.w	r3, r3, #2
 80056ec:	6093      	str	r3, [r2, #8]

}
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	2001447b 	.word	0x2001447b
 80056fc:	40023800 	.word	0x40023800
 8005700:	40023c00 	.word	0x40023c00

08005704 <adjustHSI>:

//Funcion para ajustar el HSI
void adjustHSI(void)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
	//0b01100;
	uint8_t hsiTrimValue = 0b01100; //Variable de 5 bit usado para la calibracion deñ HSI
 800570a:	230c      	movs	r3, #12
 800570c:	71fb      	strb	r3, [r7, #7]

	RCC->CR &= ~(0b11111<<RCC_CR_HSITRIM_Pos);                //Limpiamos el campo
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <adjustHSI+0x34>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a09      	ldr	r2, [pc, #36]	; (8005738 <adjustHSI+0x34>)
 8005714:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005718:	6013      	str	r3, [r2, #0]
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
 800571a:	4b07      	ldr	r3, [pc, #28]	; (8005738 <adjustHSI+0x34>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	79fa      	ldrb	r2, [r7, #7]
 8005720:	00d2      	lsls	r2, r2, #3
 8005722:	4611      	mov	r1, r2
 8005724:	4a04      	ldr	r2, [pc, #16]	; (8005738 <adjustHSI+0x34>)
 8005726:	430b      	orrs	r3, r1
 8005728:	6013      	str	r3, [r2, #0]
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800

0800573c <__libc_init_array>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4d0d      	ldr	r5, [pc, #52]	; (8005774 <__libc_init_array+0x38>)
 8005740:	4c0d      	ldr	r4, [pc, #52]	; (8005778 <__libc_init_array+0x3c>)
 8005742:	1b64      	subs	r4, r4, r5
 8005744:	10a4      	asrs	r4, r4, #2
 8005746:	2600      	movs	r6, #0
 8005748:	42a6      	cmp	r6, r4
 800574a:	d109      	bne.n	8005760 <__libc_init_array+0x24>
 800574c:	4d0b      	ldr	r5, [pc, #44]	; (800577c <__libc_init_array+0x40>)
 800574e:	4c0c      	ldr	r4, [pc, #48]	; (8005780 <__libc_init_array+0x44>)
 8005750:	f000 f83e 	bl	80057d0 <_init>
 8005754:	1b64      	subs	r4, r4, r5
 8005756:	10a4      	asrs	r4, r4, #2
 8005758:	2600      	movs	r6, #0
 800575a:	42a6      	cmp	r6, r4
 800575c:	d105      	bne.n	800576a <__libc_init_array+0x2e>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f855 3b04 	ldr.w	r3, [r5], #4
 8005764:	4798      	blx	r3
 8005766:	3601      	adds	r6, #1
 8005768:	e7ee      	b.n	8005748 <__libc_init_array+0xc>
 800576a:	f855 3b04 	ldr.w	r3, [r5], #4
 800576e:	4798      	blx	r3
 8005770:	3601      	adds	r6, #1
 8005772:	e7f2      	b.n	800575a <__libc_init_array+0x1e>
 8005774:	08005904 	.word	0x08005904
 8005778:	08005904 	.word	0x08005904
 800577c:	08005904 	.word	0x08005904
 8005780:	08005908 	.word	0x08005908

08005784 <memcmp>:
 8005784:	b510      	push	{r4, lr}
 8005786:	3901      	subs	r1, #1
 8005788:	4402      	add	r2, r0
 800578a:	4290      	cmp	r0, r2
 800578c:	d101      	bne.n	8005792 <memcmp+0xe>
 800578e:	2000      	movs	r0, #0
 8005790:	e005      	b.n	800579e <memcmp+0x1a>
 8005792:	7803      	ldrb	r3, [r0, #0]
 8005794:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005798:	42a3      	cmp	r3, r4
 800579a:	d001      	beq.n	80057a0 <memcmp+0x1c>
 800579c:	1b18      	subs	r0, r3, r4
 800579e:	bd10      	pop	{r4, pc}
 80057a0:	3001      	adds	r0, #1
 80057a2:	e7f2      	b.n	800578a <memcmp+0x6>

080057a4 <memcpy>:
 80057a4:	440a      	add	r2, r1
 80057a6:	4291      	cmp	r1, r2
 80057a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ac:	d100      	bne.n	80057b0 <memcpy+0xc>
 80057ae:	4770      	bx	lr
 80057b0:	b510      	push	{r4, lr}
 80057b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ba:	4291      	cmp	r1, r2
 80057bc:	d1f9      	bne.n	80057b2 <memcpy+0xe>
 80057be:	bd10      	pop	{r4, pc}

080057c0 <memset>:
 80057c0:	4402      	add	r2, r0
 80057c2:	4603      	mov	r3, r0
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	f803 1b01 	strb.w	r1, [r3], #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
