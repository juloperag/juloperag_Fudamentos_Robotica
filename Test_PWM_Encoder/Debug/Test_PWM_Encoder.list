
Test_PWM_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000928c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  08009430  08009430  00019430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c0c  08009c0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c0c  08009c0c  00019c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c14  08009c14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c14  08009c14  00019c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c18  08009c18  00019c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a44  200001e0  08009dfc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  08009dfc  00020c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004178  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fad  00000000  00000000  00024388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00025338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00025748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b64  00000000  00000000  00025ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a84  00000000  00000000  00036624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000583fe  00000000  00000000  0003c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000944a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d0  00000000  00000000  000944f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009414 	.word	0x08009414

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009414 	.word	0x08009414

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <main>:
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado


int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	//Realizamos la configuracuion inicial
	int_Hardware();
 800109c:	f000 f82c 	bl	80010f8 <int_Hardware>
	//Configuracion inicial Motor
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 80010a0:	2101      	movs	r1, #1
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <main+0x40>)
 80010a4:	f002 f8c6 	bl	8003234 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 80010a8:	2101      	movs	r1, #1
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <main+0x44>)
 80010ac:	f002 f8c2 	bl	8003234 <GPIO_writePin>
	//Definimos el motor derecho como el que se movera
	handler_GPIO_Motor_EN_Test = &handler_GPIO_MotorR_EN;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <main+0x48>)
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <main+0x4c>)
 80010b4:	601a      	str	r2, [r3, #0]
	handler_PWM_Motor_Test = &handler_PWM_MotorR;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <main+0x50>)
 80010b8:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <main+0x54>)
 80010ba:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <main+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d106      	bne.n	80010d2 <main+0x3a>
		{
			runCommand(bufferRecepcion);
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <main+0x5c>)
 80010c6:	f000 fa75 	bl	80015b4 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <main+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e7f4      	b.n	80010bc <main+0x24>
		}
		else
		{
			__NOP();
 80010d2:	bf00      	nop
		if(commandComplete==1)
 80010d4:	e7f2      	b.n	80010bc <main+0x24>
 80010d6:	bf00      	nop
 80010d8:	20000270 	.word	0x20000270
 80010dc:	200002a0 	.word	0x200002a0
 80010e0:	200002e4 	.word	0x200002e4
 80010e4:	2000027c 	.word	0x2000027c
 80010e8:	200002e8 	.word	0x200002e8
 80010ec:	20000288 	.word	0x20000288
 80010f0:	2000000a 	.word	0x2000000a
 80010f4:	20000374 	.word	0x20000374

080010f8 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80010fe:	4ba2      	ldr	r3, [pc, #648]	; (8001388 <int_Hardware+0x290>)
 8001100:	4aa2      	ldr	r2, [pc, #648]	; (800138c <int_Hardware+0x294>)
 8001102:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001104:	4ba0      	ldr	r3, [pc, #640]	; (8001388 <int_Hardware+0x290>)
 8001106:	2205      	movs	r2, #5
 8001108:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800110a:	2300      	movs	r3, #0
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	2300      	movs	r3, #0
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2200      	movs	r2, #0
 8001116:	2101      	movs	r1, #1
 8001118:	489b      	ldr	r0, [pc, #620]	; (8001388 <int_Hardware+0x290>)
 800111a:	f001 ff3f 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 800111e:	489a      	ldr	r0, [pc, #616]	; (8001388 <int_Hardware+0x290>)
 8001120:	f001 ff5e 	bl	8002fe0 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001124:	4b9a      	ldr	r3, [pc, #616]	; (8001390 <int_Hardware+0x298>)
 8001126:	4a99      	ldr	r2, [pc, #612]	; (800138c <int_Hardware+0x294>)
 8001128:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800112a:	4b99      	ldr	r3, [pc, #612]	; (8001390 <int_Hardware+0x298>)
 800112c:	2202      	movs	r2, #2
 800112e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001130:	2307      	movs	r3, #7
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	2300      	movs	r3, #0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2200      	movs	r2, #0
 800113c:	2102      	movs	r1, #2
 800113e:	4894      	ldr	r0, [pc, #592]	; (8001390 <int_Hardware+0x298>)
 8001140:	f001 ff2c 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001144:	4892      	ldr	r0, [pc, #584]	; (8001390 <int_Hardware+0x298>)
 8001146:	f001 ff4b 	bl	8002fe0 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800114a:	4b92      	ldr	r3, [pc, #584]	; (8001394 <int_Hardware+0x29c>)
 800114c:	4a8f      	ldr	r2, [pc, #572]	; (800138c <int_Hardware+0x294>)
 800114e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8001150:	4b90      	ldr	r3, [pc, #576]	; (8001394 <int_Hardware+0x29c>)
 8001152:	2203      	movs	r2, #3
 8001154:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001156:	2307      	movs	r3, #7
 8001158:	9301      	str	r3, [sp, #4]
 800115a:	2300      	movs	r3, #0
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	2200      	movs	r2, #0
 8001162:	2102      	movs	r1, #2
 8001164:	488b      	ldr	r0, [pc, #556]	; (8001394 <int_Hardware+0x29c>)
 8001166:	f001 ff19 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800116a:	488a      	ldr	r0, [pc, #552]	; (8001394 <int_Hardware+0x29c>)
 800116c:	f001 ff38 	bl	8002fe0 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001170:	4b89      	ldr	r3, [pc, #548]	; (8001398 <int_Hardware+0x2a0>)
 8001172:	4a86      	ldr	r2, [pc, #536]	; (800138c <int_Hardware+0x294>)
 8001174:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <int_Hardware+0x2a0>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800117c:	2302      	movs	r3, #2
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	2300      	movs	r3, #0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	2200      	movs	r2, #0
 8001188:	2102      	movs	r1, #2
 800118a:	4883      	ldr	r0, [pc, #524]	; (8001398 <int_Hardware+0x2a0>)
 800118c:	f001 ff06 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001190:	4881      	ldr	r0, [pc, #516]	; (8001398 <int_Hardware+0x2a0>)
 8001192:	f001 ff25 	bl	8002fe0 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001196:	4b81      	ldr	r3, [pc, #516]	; (800139c <int_Hardware+0x2a4>)
 8001198:	4a81      	ldr	r2, [pc, #516]	; (80013a0 <int_Hardware+0x2a8>)
 800119a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800119c:	4b7f      	ldr	r3, [pc, #508]	; (800139c <int_Hardware+0x2a4>)
 800119e:	220c      	movs	r2, #12
 80011a0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011a2:	2300      	movs	r3, #0
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	2200      	movs	r2, #0
 80011ae:	2101      	movs	r1, #1
 80011b0:	487a      	ldr	r0, [pc, #488]	; (800139c <int_Hardware+0x2a4>)
 80011b2:	f001 fef3 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80011b6:	4879      	ldr	r0, [pc, #484]	; (800139c <int_Hardware+0x2a4>)
 80011b8:	f001 ff12 	bl	8002fe0 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80011bc:	4b79      	ldr	r3, [pc, #484]	; (80013a4 <int_Hardware+0x2ac>)
 80011be:	4a78      	ldr	r2, [pc, #480]	; (80013a0 <int_Hardware+0x2a8>)
 80011c0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80011c2:	4b78      	ldr	r3, [pc, #480]	; (80013a4 <int_Hardware+0x2ac>)
 80011c4:	220a      	movs	r2, #10
 80011c6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011c8:	2300      	movs	r3, #0
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	2300      	movs	r3, #0
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	2200      	movs	r2, #0
 80011d4:	2101      	movs	r1, #1
 80011d6:	4873      	ldr	r0, [pc, #460]	; (80013a4 <int_Hardware+0x2ac>)
 80011d8:	f001 fee0 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80011dc:	4871      	ldr	r0, [pc, #452]	; (80013a4 <int_Hardware+0x2ac>)
 80011de:	f001 feff 	bl	8002fe0 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80011e2:	4b71      	ldr	r3, [pc, #452]	; (80013a8 <int_Hardware+0x2b0>)
 80011e4:	4a69      	ldr	r2, [pc, #420]	; (800138c <int_Hardware+0x294>)
 80011e6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80011e8:	4b6f      	ldr	r3, [pc, #444]	; (80013a8 <int_Hardware+0x2b0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80011ee:	2302      	movs	r3, #2
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	2300      	movs	r3, #0
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2200      	movs	r2, #0
 80011fa:	2102      	movs	r1, #2
 80011fc:	486a      	ldr	r0, [pc, #424]	; (80013a8 <int_Hardware+0x2b0>)
 80011fe:	f001 fecd 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001202:	4869      	ldr	r0, [pc, #420]	; (80013a8 <int_Hardware+0x2b0>)
 8001204:	f001 feec 	bl	8002fe0 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8001208:	4b68      	ldr	r3, [pc, #416]	; (80013ac <int_Hardware+0x2b4>)
 800120a:	4a69      	ldr	r2, [pc, #420]	; (80013b0 <int_Hardware+0x2b8>)
 800120c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800120e:	4b67      	ldr	r3, [pc, #412]	; (80013ac <int_Hardware+0x2b4>)
 8001210:	2202      	movs	r2, #2
 8001212:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001214:	2300      	movs	r3, #0
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	2300      	movs	r3, #0
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2200      	movs	r2, #0
 8001220:	2101      	movs	r1, #1
 8001222:	4862      	ldr	r0, [pc, #392]	; (80013ac <int_Hardware+0x2b4>)
 8001224:	f001 feba 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8001228:	4860      	ldr	r0, [pc, #384]	; (80013ac <int_Hardware+0x2b4>)
 800122a:	f001 fed9 	bl	8002fe0 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 800122e:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <int_Hardware+0x2bc>)
 8001230:	4a5b      	ldr	r2, [pc, #364]	; (80013a0 <int_Hardware+0x2a8>)
 8001232:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001234:	4b5f      	ldr	r3, [pc, #380]	; (80013b4 <int_Hardware+0x2bc>)
 8001236:	220b      	movs	r2, #11
 8001238:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800123a:	2300      	movs	r3, #0
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2300      	movs	r3, #0
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	2200      	movs	r2, #0
 8001246:	2101      	movs	r1, #1
 8001248:	485a      	ldr	r0, [pc, #360]	; (80013b4 <int_Hardware+0x2bc>)
 800124a:	f001 fea7 	bl	8002f9c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 800124e:	4859      	ldr	r0, [pc, #356]	; (80013b4 <int_Hardware+0x2bc>)
 8001250:	f001 fec6 	bl	8002fe0 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8001254:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <int_Hardware+0x2c0>)
 8001256:	4a59      	ldr	r2, [pc, #356]	; (80013bc <int_Hardware+0x2c4>)
 8001258:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800125a:	4b57      	ldr	r3, [pc, #348]	; (80013b8 <int_Hardware+0x2c0>)
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_9600;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001260:	4b55      	ldr	r3, [pc, #340]	; (80013b8 <int_Hardware+0x2c0>)
 8001262:	2200      	movs	r2, #0
 8001264:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001266:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <int_Hardware+0x2c0>)
 8001268:	2200      	movs	r2, #0
 800126a:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800126c:	4b52      	ldr	r3, [pc, #328]	; (80013b8 <int_Hardware+0x2c0>)
 800126e:	2200      	movs	r2, #0
 8001270:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001272:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <int_Hardware+0x2c0>)
 8001274:	2201      	movs	r2, #1
 8001276:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8001278:	4b4f      	ldr	r3, [pc, #316]	; (80013b8 <int_Hardware+0x2c0>)
 800127a:	2201      	movs	r2, #1
 800127c:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 800127e:	484e      	ldr	r0, [pc, #312]	; (80013b8 <int_Hardware+0x2c0>)
 8001280:	f002 fb42 	bl	8003908 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001284:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <int_Hardware+0x2c8>)
 8001286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128a:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800128c:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <int_Hardware+0x2c8>)
 800128e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001292:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <int_Hardware+0x2c8>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800129a:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <int_Hardware+0x2c8>)
 800129c:	22fa      	movs	r2, #250	; 0xfa
 800129e:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <int_Hardware+0x2c8>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80012a6:	4846      	ldr	r0, [pc, #280]	; (80013c0 <int_Hardware+0x2c8>)
 80012a8:	f000 fc90 	bl	8001bcc <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_study.ptrTIMx = TIM3;
 80012ac:	4b45      	ldr	r3, [pc, #276]	; (80013c4 <int_Hardware+0x2cc>)
 80012ae:	4a46      	ldr	r2, [pc, #280]	; (80013c8 <int_Hardware+0x2d0>)
 80012b0:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_study.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <int_Hardware+0x2cc>)
 80012b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012b8:	805a      	strh	r2, [r3, #2]
	handler_TIMER_study.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80012ba:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <int_Hardware+0x2cc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
	handler_TIMER_study.TIMx_Config.TIMX_period = 10000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <int_Hardware+0x2cc>)
 80012c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80012c6:	605a      	str	r2, [r3, #4]
	handler_TIMER_study.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012c8:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <int_Hardware+0x2cc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_study);
 80012ce:	483d      	ldr	r0, [pc, #244]	; (80013c4 <int_Hardware+0x2cc>)
 80012d0:	f000 fc7c 	bl	8001bcc <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <int_Hardware+0x2d4>)
 80012d6:	4a3e      	ldr	r2, [pc, #248]	; (80013d0 <int_Hardware+0x2d8>)
 80012d8:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80012da:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <int_Hardware+0x2d4>)
 80012dc:	220a      	movs	r2, #10
 80012de:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80012e0:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <int_Hardware+0x2d4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <int_Hardware+0x2d4>)
 80012e8:	2264      	movs	r2, #100	; 0x64
 80012ea:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <int_Hardware+0x2d4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80012f2:	4836      	ldr	r0, [pc, #216]	; (80013cc <int_Hardware+0x2d4>)
 80012f4:	f000 fc6a 	bl	8001bcc <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <int_Hardware+0x2dc>)
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <int_Hardware+0x2a8>)
 80012fc:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <int_Hardware+0x2dc>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <int_Hardware+0x2e0>)
 8001306:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <int_Hardware+0x2dc>)
 8001308:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_FALLING_EDGE;
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <int_Hardware+0x2e0>)
 800130c:	2200      	movs	r2, #0
 800130e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001310:	4831      	ldr	r0, [pc, #196]	; (80013d8 <int_Hardware+0x2e0>)
 8001312:	f000 fdd3 	bl	8001ebc <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <int_Hardware+0x2e4>)
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <int_Hardware+0x2a8>)
 800131a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800131c:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <int_Hardware+0x2e4>)
 800131e:	2203      	movs	r2, #3
 8001320:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <int_Hardware+0x2e8>)
 8001324:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <int_Hardware+0x2e4>)
 8001326:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_FALLING_EDGE;
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <int_Hardware+0x2e8>)
 800132a:	2200      	movs	r2, #0
 800132c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 800132e:	482c      	ldr	r0, [pc, #176]	; (80013e0 <int_Hardware+0x2e8>)
 8001330:	f000 fdc4 	bl	8001ebc <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <int_Hardware+0x2ec>)
 8001336:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <int_Hardware+0x2d8>)
 8001338:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <int_Hardware+0x2ec>)
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <int_Hardware+0x2ec>)
 8001342:	220a      	movs	r2, #10
 8001344:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <int_Hardware+0x2ec>)
 8001348:	2201      	movs	r2, #1
 800134a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800134c:	4825      	ldr	r0, [pc, #148]	; (80013e4 <int_Hardware+0x2ec>)
 800134e:	f001 ffe7 	bl	8003320 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001352:	2101      	movs	r1, #1
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <int_Hardware+0x2ec>)
 8001356:	f002 f943 	bl	80035e0 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <int_Hardware+0x2f0>)
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <int_Hardware+0x2d8>)
 800135e:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <int_Hardware+0x2f0>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <int_Hardware+0x2f0>)
 8001368:	220a      	movs	r2, #10
 800136a:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <int_Hardware+0x2f0>)
 800136e:	2201      	movs	r2, #1
 8001370:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001372:	481d      	ldr	r0, [pc, #116]	; (80013e8 <int_Hardware+0x2f0>)
 8001374:	f001 ffd4 	bl	8003320 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8001378:	2101      	movs	r1, #1
 800137a:	481b      	ldr	r0, [pc, #108]	; (80013e8 <int_Hardware+0x2f0>)
 800137c:	f002 f930 	bl	80035e0 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001fc 	.word	0x200001fc
 800138c:	40020000 	.word	0x40020000
 8001390:	20000240 	.word	0x20000240
 8001394:	2000024c 	.word	0x2000024c
 8001398:	20000264 	.word	0x20000264
 800139c:	20000270 	.word	0x20000270
 80013a0:	40020800 	.word	0x40020800
 80013a4:	2000027c 	.word	0x2000027c
 80013a8:	20000294 	.word	0x20000294
 80013ac:	200002a0 	.word	0x200002a0
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	200002ac 	.word	0x200002ac
 80013b8:	20000258 	.word	0x20000258
 80013bc:	40004400 	.word	0x40004400
 80013c0:	20000208 	.word	0x20000208
 80013c4:	200002d4 	.word	0x200002d4
 80013c8:	40000400 	.word	0x40000400
 80013cc:	200002c4 	.word	0x200002c4
 80013d0:	40000c00 	.word	0x40000c00
 80013d4:	20000218 	.word	0x20000218
 80013d8:	20000224 	.word	0x20000224
 80013dc:	2000022c 	.word	0x2000022c
 80013e0:	20000238 	.word	0x20000238
 80013e4:	20000288 	.word	0x20000288
 80013e8:	200002b8 	.word	0x200002b8

080013ec <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <BasicTimer2_Callback+0x10>)
 80013f2:	f001 ff4a 	bl	800328a <GPIOxTooglePin>
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200001fc 	.word	0x200001fc

08001400 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8001400:	b598      	push	{r3, r4, r7, lr}
 8001402:	af00      	add	r7, sp, #0
	if (value_dutty<20)
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <BasicTimer3_Callback+0xdc>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b13      	cmp	r3, #19
 800140a:	d829      	bhi.n	8001460 <BasicTimer3_Callback+0x60>
	{
		//Guardamos el numero de conteos de la fotocompuerta
		count_for_dutty[index_fre][index_count] = count_foto;
 800140c:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <BasicTimer3_Callback+0xe0>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <BasicTimer3_Callback+0xe4>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461c      	mov	r4, r3
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <BasicTimer3_Callback+0xe8>)
 800141a:	8818      	ldrh	r0, [r3, #0]
 800141c:	4933      	ldr	r1, [pc, #204]	; (80014ec <BasicTimer3_Callback+0xec>)
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	00da      	lsls	r2, r3, #3
 8001426:	1ad2      	subs	r2, r2, r3
 8001428:	1913      	adds	r3, r2, r4
 800142a:	4602      	mov	r2, r0
 800142c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		//Reiniciamos la variable
		count_foto = 0;
 8001430:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <BasicTimer3_Callback+0xe8>)
 8001432:	2200      	movs	r2, #0
 8001434:	801a      	strh	r2, [r3, #0]
		//Aumentamos el valor de las variables
		index_count++;
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <BasicTimer3_Callback+0xe4>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <BasicTimer3_Callback+0xe4>)
 8001440:	701a      	strb	r2, [r3, #0]
		value_dutty++;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <BasicTimer3_Callback+0xdc>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <BasicTimer3_Callback+0xdc>)
 800144c:	701a      	strb	r2, [r3, #0]
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty);
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <BasicTimer3_Callback+0xf0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a22      	ldr	r2, [pc, #136]	; (80014dc <BasicTimer3_Callback+0xdc>)
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fa19 	bl	8003890 <updateDuttyCyclePercentage>
		else
		{
			status_study(RESET);
		}
	}
}
 800145e:	e03a      	b.n	80014d6 <BasicTimer3_Callback+0xd6>
		count_for_dutty[index_fre][index_count] = count_foto;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <BasicTimer3_Callback+0xe0>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <BasicTimer3_Callback+0xe4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461c      	mov	r4, r3
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <BasicTimer3_Callback+0xe8>)
 800146e:	8818      	ldrh	r0, [r3, #0]
 8001470:	491e      	ldr	r1, [pc, #120]	; (80014ec <BasicTimer3_Callback+0xec>)
 8001472:	4613      	mov	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4413      	add	r3, r2
 8001478:	00da      	lsls	r2, r3, #3
 800147a:	1ad2      	subs	r2, r2, r3
 800147c:	1913      	adds	r3, r2, r4
 800147e:	4602      	mov	r2, r0
 8001480:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		index_fre++;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <BasicTimer3_Callback+0xe0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	b2da      	uxtb	r2, r3
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <BasicTimer3_Callback+0xe0>)
 800148e:	701a      	strb	r2, [r3, #0]
		if(index_fre<3)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <BasicTimer3_Callback+0xe0>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d81b      	bhi.n	80014d0 <BasicTimer3_Callback+0xd0>
			value_dutty = 0;
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <BasicTimer3_Callback+0xdc>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
			index_count = 0;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <BasicTimer3_Callback+0xe4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
			count_foto = 0;
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <BasicTimer3_Callback+0xe8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	801a      	strh	r2, [r3, #0]
			updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty);
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <BasicTimer3_Callback+0xf0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <BasicTimer3_Callback+0xdc>)
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 f9eb 	bl	8003890 <updateDuttyCyclePercentage>
			updateFrequencyTimer(&handler_TIMER_Motor, frequency[index_fre]);
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <BasicTimer3_Callback+0xe0>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <BasicTimer3_Callback+0xf4>)
 80014c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014c6:	4619      	mov	r1, r3
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <BasicTimer3_Callback+0xf8>)
 80014ca:	f000 fcc1 	bl	8001e50 <updateFrequencyTimer>
}
 80014ce:	e002      	b.n	80014d6 <BasicTimer3_Callback+0xd6>
			status_study(RESET);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 fa33 	bl	800193c <status_study>
}
 80014d6:	bf00      	nop
 80014d8:	bd98      	pop	{r3, r4, r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000370 	.word	0x20000370
 80014e0:	200002ee 	.word	0x200002ee
 80014e4:	200002ed 	.word	0x200002ed
 80014e8:	2000036e 	.word	0x2000036e
 80014ec:	200002f0 	.word	0x200002f0
 80014f0:	200002e8 	.word	0x200002e8
 80014f4:	20000004 	.word	0x20000004
 80014f8:	200002c4 	.word	0x200002c4

080014fc <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001500:	f002 fce4 	bl	8003ecc <getRxData>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4b02      	ldr	r3, [pc, #8]	; (8001514 <BasicUSART2_Callback+0x18>)
 800150a:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 800150c:	f000 f824 	bl	8001558 <recepcionCommand>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000

08001518 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	count_foto++;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <callback_extInt1+0x1c>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	3301      	adds	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <callback_extInt1+0x1c>)
 8001526:	801a      	strh	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000036e 	.word	0x2000036e

08001538 <callback_extInt3>:
void callback_extInt3(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	count_foto++;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <callback_extInt3+0x1c>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <callback_extInt3+0x1c>)
 8001546:	801a      	strh	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000036e 	.word	0x2000036e

08001558 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
	if(charRead == '@')
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <recepcionCommand+0x4c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b40      	cmp	r3, #64	; 0x40
 8001562:	d10c      	bne.n	800157e <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <recepcionCommand+0x50>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <recepcionCommand+0x54>)
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <recepcionCommand+0x58>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <recepcionCommand+0x50>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 800157c:	e00c      	b.n	8001598 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <recepcionCommand+0x50>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <recepcionCommand+0x4c>)
 8001586:	7819      	ldrb	r1, [r3, #0]
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <recepcionCommand+0x54>)
 800158a:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <recepcionCommand+0x50>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <recepcionCommand+0x50>)
 8001596:	701a      	strb	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000371 	.word	0x20000371
 80015ac:	20000374 	.word	0x20000374
 80015b0:	2000000a 	.word	0x2000000a

080015b4 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b0a9      	sub	sp, #164	; 0xa4
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 80015bc:	2300      	movs	r3, #0
 80015be:	657b      	str	r3, [r7, #84]	; 0x54
 80015c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015c4:	223c      	movs	r2, #60	; 0x3c
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fe73 	bl	80042b4 <memset>
	int firtsParameter = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	653b      	str	r3, [r7, #80]	; 0x50
	int secondParameter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	int thirdParameter = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	64bb      	str	r3, [r7, #72]	; 0x48
	char bufferMsg[64]= {0};
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	223c      	movs	r2, #60	; 0x3c
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fe64 	bl	80042b4 <memset>

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter);
 80015ec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80015f0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80015f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	460b      	mov	r3, r1
 8001602:	49a4      	ldr	r1, [pc, #656]	; (8001894 <runCommand+0x2e0>)
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f003 fcfd 	bl	8005004 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 800160a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800160e:	49a2      	ldr	r1, [pc, #648]	; (8001898 <runCommand+0x2e4>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe fde5 	bl	80001e0 <strcmp>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d124      	bne.n	8001666 <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 800161c:	499f      	ldr	r1, [pc, #636]	; (800189c <runCommand+0x2e8>)
 800161e:	48a0      	ldr	r0, [pc, #640]	; (80018a0 <runCommand+0x2ec>)
 8001620:	f002 fc16 	bl	8003e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001624:	499f      	ldr	r1, [pc, #636]	; (80018a4 <runCommand+0x2f0>)
 8001626:	489e      	ldr	r0, [pc, #632]	; (80018a0 <runCommand+0x2ec>)
 8001628:	f002 fc12 	bl	8003e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # # # ---Definir los 3 valores de las frecuencias para el study en Hz. \n");
 800162c:	499e      	ldr	r1, [pc, #632]	; (80018a8 <runCommand+0x2f4>)
 800162e:	489c      	ldr	r0, [pc, #624]	; (80018a0 <runCommand+0x2ec>)
 8001630:	f002 fc0e 	bl	8003e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) motor # ---Elige el tipo de motor para el test, 1:Derecho, 2:Izquierdo \n");
 8001634:	499d      	ldr	r1, [pc, #628]	; (80018ac <runCommand+0x2f8>)
 8001636:	489a      	ldr	r0, [pc, #616]	; (80018a0 <runCommand+0x2ec>)
 8001638:	f002 fc0a 	bl	8003e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) on --- Enciende el motor seleccionado \n");
 800163c:	499c      	ldr	r1, [pc, #624]	; (80018b0 <runCommand+0x2fc>)
 800163e:	4898      	ldr	r0, [pc, #608]	; (80018a0 <runCommand+0x2ec>)
 8001640:	f002 fc06 	bl	8003e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) off --- Apaga el motor seleccionado \n");
 8001644:	499b      	ldr	r1, [pc, #620]	; (80018b4 <runCommand+0x300>)
 8001646:	4896      	ldr	r0, [pc, #600]	; (80018a0 <runCommand+0x2ec>)
 8001648:	f002 fc02 	bl	8003e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) start ---Inicializa el estudio \n");
 800164c:	499a      	ldr	r1, [pc, #616]	; (80018b8 <runCommand+0x304>)
 800164e:	4894      	ldr	r0, [pc, #592]	; (80018a0 <runCommand+0x2ec>)
 8001650:	f002 fbfe 	bl	8003e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 8001654:	4999      	ldr	r1, [pc, #612]	; (80018bc <runCommand+0x308>)
 8001656:	4892      	ldr	r0, [pc, #584]	; (80018a0 <runCommand+0x2ec>)
 8001658:	f002 fbfa 	bl	8003e50 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "8) print ---Imprime los valores del conteo de interrupciones en el estudio \n");
 800165c:	4998      	ldr	r1, [pc, #608]	; (80018c0 <runCommand+0x30c>)
 800165e:	4890      	ldr	r0, [pc, #576]	; (80018a0 <runCommand+0x2ec>)
 8001660:	f002 fbf6 	bl	8003e50 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8001664:	e111      	b.n	800188a <runCommand+0x2d6>
	else if (strcmp(cmd, "frequency") == 0)
 8001666:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800166a:	4996      	ldr	r1, [pc, #600]	; (80018c4 <runCommand+0x310>)
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fdb7 	bl	80001e0 <strcmp>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d115      	bne.n	80016a4 <runCommand+0xf0>
		frequency[0] = 100000/firtsParameter;
 8001678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800167a:	4a93      	ldr	r2, [pc, #588]	; (80018c8 <runCommand+0x314>)
 800167c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b92      	ldr	r3, [pc, #584]	; (80018cc <runCommand+0x318>)
 8001684:	801a      	strh	r2, [r3, #0]
		frequency[1] = 100000/secondParameter;
 8001686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001688:	4a8f      	ldr	r2, [pc, #572]	; (80018c8 <runCommand+0x314>)
 800168a:	fb92 f3f3 	sdiv	r3, r2, r3
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b8e      	ldr	r3, [pc, #568]	; (80018cc <runCommand+0x318>)
 8001692:	805a      	strh	r2, [r3, #2]
		frequency[2] = 100000/thirdParameter;
 8001694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001696:	4a8c      	ldr	r2, [pc, #560]	; (80018c8 <runCommand+0x314>)
 8001698:	fb92 f3f3 	sdiv	r3, r2, r3
 800169c:	b29a      	uxth	r2, r3
 800169e:	4b8b      	ldr	r3, [pc, #556]	; (80018cc <runCommand+0x318>)
 80016a0:	809a      	strh	r2, [r3, #4]
}
 80016a2:	e0f2      	b.n	800188a <runCommand+0x2d6>
	else if (strcmp(cmd, "motor") == 0)
 80016a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016a8:	4989      	ldr	r1, [pc, #548]	; (80018d0 <runCommand+0x31c>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fd98 	bl	80001e0 <strcmp>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d118      	bne.n	80016e8 <runCommand+0x134>
		if(firtsParameter==1)
 80016b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <runCommand+0x116>
			handler_GPIO_Motor_EN_Test = &handler_GPIO_MotorR_EN;
 80016bc:	4b85      	ldr	r3, [pc, #532]	; (80018d4 <runCommand+0x320>)
 80016be:	4a86      	ldr	r2, [pc, #536]	; (80018d8 <runCommand+0x324>)
 80016c0:	601a      	str	r2, [r3, #0]
			handler_PWM_Motor_Test = &handler_PWM_MotorR;
 80016c2:	4b86      	ldr	r3, [pc, #536]	; (80018dc <runCommand+0x328>)
 80016c4:	4a86      	ldr	r2, [pc, #536]	; (80018e0 <runCommand+0x32c>)
 80016c6:	601a      	str	r2, [r3, #0]
}
 80016c8:	e0df      	b.n	800188a <runCommand+0x2d6>
		else if(firtsParameter==2)
 80016ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d106      	bne.n	80016de <runCommand+0x12a>
			handler_GPIO_Motor_EN_Test = &handler_GPIO_MotorL_EN;
 80016d0:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <runCommand+0x320>)
 80016d2:	4a84      	ldr	r2, [pc, #528]	; (80018e4 <runCommand+0x330>)
 80016d4:	601a      	str	r2, [r3, #0]
			handler_PWM_Motor_Test = &handler_PWM_MotorL;
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <runCommand+0x328>)
 80016d8:	4a83      	ldr	r2, [pc, #524]	; (80018e8 <runCommand+0x334>)
 80016da:	601a      	str	r2, [r3, #0]
}
 80016dc:	e0d5      	b.n	800188a <runCommand+0x2d6>
			writeMsgForTXE(&handler_USART_USB, "Valor no valido de motor \n");
 80016de:	4983      	ldr	r1, [pc, #524]	; (80018ec <runCommand+0x338>)
 80016e0:	486f      	ldr	r0, [pc, #444]	; (80018a0 <runCommand+0x2ec>)
 80016e2:	f002 fbb5 	bl	8003e50 <writeMsgForTXE>
}
 80016e6:	e0d0      	b.n	800188a <runCommand+0x2d6>
	else if (strcmp(cmd, "on") == 0)
 80016e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016ec:	4980      	ldr	r1, [pc, #512]	; (80018f0 <runCommand+0x33c>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd76 	bl	80001e0 <strcmp>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d115      	bne.n	8001726 <runCommand+0x172>
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, 95);
 80016fa:	4b78      	ldr	r3, [pc, #480]	; (80018dc <runCommand+0x328>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	215f      	movs	r1, #95	; 0x5f
 8001700:	4618      	mov	r0, r3
 8001702:	f002 f8c5 	bl	8003890 <updateDuttyCyclePercentage>
		updateFrequencyTimer(&handler_TIMER_Motor, 4000);
 8001706:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800170a:	487a      	ldr	r0, [pc, #488]	; (80018f4 <runCommand+0x340>)
 800170c:	f000 fba0 	bl	8001e50 <updateFrequencyTimer>
		GPIO_writePin (handler_GPIO_Motor_EN_Test, RESET);
 8001710:	4b70      	ldr	r3, [pc, #448]	; (80018d4 <runCommand+0x320>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fd8c 	bl	8003234 <GPIO_writePin>
		writeMsgForTXE(&handler_USART_USB, "Motor Encendido \n");
 800171c:	4976      	ldr	r1, [pc, #472]	; (80018f8 <runCommand+0x344>)
 800171e:	4860      	ldr	r0, [pc, #384]	; (80018a0 <runCommand+0x2ec>)
 8001720:	f002 fb96 	bl	8003e50 <writeMsgForTXE>
}
 8001724:	e0b1      	b.n	800188a <runCommand+0x2d6>
	else if (strcmp(cmd, "off") == 0)
 8001726:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800172a:	4974      	ldr	r1, [pc, #464]	; (80018fc <runCommand+0x348>)
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd57 	bl	80001e0 <strcmp>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <runCommand+0x19a>
		GPIO_writePin (handler_GPIO_Motor_EN_Test, SET);
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <runCommand+0x320>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fd78 	bl	8003234 <GPIO_writePin>
		writeMsgForTXE(&handler_USART_USB, "Motor Apagado \n");
 8001744:	496e      	ldr	r1, [pc, #440]	; (8001900 <runCommand+0x34c>)
 8001746:	4856      	ldr	r0, [pc, #344]	; (80018a0 <runCommand+0x2ec>)
 8001748:	f002 fb82 	bl	8003e50 <writeMsgForTXE>
}
 800174c:	e09d      	b.n	800188a <runCommand+0x2d6>
	else if (strcmp(cmd, "start") == 0)
 800174e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001752:	496c      	ldr	r1, [pc, #432]	; (8001904 <runCommand+0x350>)
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fd43 	bl	80001e0 <strcmp>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d122      	bne.n	80017a6 <runCommand+0x1f2>
		index_count=0;
 8001760:	4b69      	ldr	r3, [pc, #420]	; (8001908 <runCommand+0x354>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
		value_dutty=0;
 8001766:	4b69      	ldr	r3, [pc, #420]	; (800190c <runCommand+0x358>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
		index_fre=0;
 800176c:	4b68      	ldr	r3, [pc, #416]	; (8001910 <runCommand+0x35c>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty);
 8001772:	4b5a      	ldr	r3, [pc, #360]	; (80018dc <runCommand+0x328>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a65      	ldr	r2, [pc, #404]	; (800190c <runCommand+0x358>)
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f002 f887 	bl	8003890 <updateDuttyCyclePercentage>
		updateFrequencyTimer(&handler_TIMER_Motor, frequency[index_fre]);
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <runCommand+0x35c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <runCommand+0x318>)
 800178a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800178e:	4619      	mov	r1, r3
 8001790:	4858      	ldr	r0, [pc, #352]	; (80018f4 <runCommand+0x340>)
 8001792:	f000 fb5d 	bl	8001e50 <updateFrequencyTimer>
		writeMsgForTXE(&handler_USART_USB, "Inicio del estudio... \n");
 8001796:	495f      	ldr	r1, [pc, #380]	; (8001914 <runCommand+0x360>)
 8001798:	4841      	ldr	r0, [pc, #260]	; (80018a0 <runCommand+0x2ec>)
 800179a:	f002 fb59 	bl	8003e50 <writeMsgForTXE>
		status_study(SET);
 800179e:	2001      	movs	r0, #1
 80017a0:	f000 f8cc 	bl	800193c <status_study>
}
 80017a4:	e071      	b.n	800188a <runCommand+0x2d6>
	else if (strcmp(cmd, "stop") == 0)
 80017a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017aa:	495b      	ldr	r1, [pc, #364]	; (8001918 <runCommand+0x364>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fd17 	bl	80001e0 <strcmp>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <runCommand+0x214>
		status_study(RESET);
 80017b8:	2000      	movs	r0, #0
 80017ba:	f000 f8bf 	bl	800193c <status_study>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado... \n");
 80017be:	4957      	ldr	r1, [pc, #348]	; (800191c <runCommand+0x368>)
 80017c0:	4837      	ldr	r0, [pc, #220]	; (80018a0 <runCommand+0x2ec>)
 80017c2:	f002 fb45 	bl	8003e50 <writeMsgForTXE>
}
 80017c6:	e060      	b.n	800188a <runCommand+0x2d6>
	else if (strcmp(cmd, "print") == 0)
 80017c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017cc:	4954      	ldr	r1, [pc, #336]	; (8001920 <runCommand+0x36c>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fd06 	bl	80001e0 <strcmp>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d153      	bne.n	8001882 <runCommand+0x2ce>
		if(flag_study==0)
 80017da:	4b52      	ldr	r3, [pc, #328]	; (8001924 <runCommand+0x370>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d14a      	bne.n	8001878 <runCommand+0x2c4>
			for(uint8_t i=0; i<3;i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80017e8:	e041      	b.n	800186e <runCommand+0x2ba>
				sprintf(bufferMsg,"Estudio para Frecuencia: %u Hz \n", 100000/frequency[i]);
 80017ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80017ee:	4a37      	ldr	r2, [pc, #220]	; (80018cc <runCommand+0x318>)
 80017f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <runCommand+0x314>)
 80017f8:	fb93 f2f2 	sdiv	r2, r3, r2
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4949      	ldr	r1, [pc, #292]	; (8001928 <runCommand+0x374>)
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fbde 	bl	8004fc4 <siprintf>
				writeMsg(&handler_USART_USB, bufferMsg);
 8001808:	f107 0308 	add.w	r3, r7, #8
 800180c:	4619      	mov	r1, r3
 800180e:	4824      	ldr	r0, [pc, #144]	; (80018a0 <runCommand+0x2ec>)
 8001810:	f002 faff 	bl	8003e12 <writeMsg>
				for(uint8_t e=0; e<21;e++)
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800181a:	e01f      	b.n	800185c <runCommand+0x2a8>
					sprintf(bufferMsg,"Porcentaje de Dutty %u : %u Cuentas \n",  e, count_for_dutty[i][e]);
 800181c:	f897 4096 	ldrb.w	r4, [r7, #150]	; 0x96
 8001820:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001824:	f897 1096 	ldrb.w	r1, [r7, #150]	; 0x96
 8001828:	4840      	ldr	r0, [pc, #256]	; (800192c <runCommand+0x378>)
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	00da      	lsls	r2, r3, #3
 8001832:	1ad2      	subs	r2, r2, r3
 8001834:	1853      	adds	r3, r2, r1
 8001836:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800183a:	f107 0008 	add.w	r0, r7, #8
 800183e:	4622      	mov	r2, r4
 8001840:	493b      	ldr	r1, [pc, #236]	; (8001930 <runCommand+0x37c>)
 8001842:	f003 fbbf 	bl	8004fc4 <siprintf>
					writeMsg(&handler_USART_USB, bufferMsg);
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4619      	mov	r1, r3
 800184c:	4814      	ldr	r0, [pc, #80]	; (80018a0 <runCommand+0x2ec>)
 800184e:	f002 fae0 	bl	8003e12 <writeMsg>
				for(uint8_t e=0; e<21;e++)
 8001852:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001856:	3301      	adds	r3, #1
 8001858:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800185c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001860:	2b14      	cmp	r3, #20
 8001862:	d9db      	bls.n	800181c <runCommand+0x268>
			for(uint8_t i=0; i<3;i++)
 8001864:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001868:	3301      	adds	r3, #1
 800186a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800186e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001872:	2b02      	cmp	r3, #2
 8001874:	d9b9      	bls.n	80017ea <runCommand+0x236>
}
 8001876:	e008      	b.n	800188a <runCommand+0x2d6>
			writeMsgForTXE(&handler_USART_USB, "Estudio no finalizado \n");
 8001878:	492e      	ldr	r1, [pc, #184]	; (8001934 <runCommand+0x380>)
 800187a:	4809      	ldr	r0, [pc, #36]	; (80018a0 <runCommand+0x2ec>)
 800187c:	f002 fae8 	bl	8003e50 <writeMsgForTXE>
}
 8001880:	e003      	b.n	800188a <runCommand+0x2d6>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8001882:	492d      	ldr	r1, [pc, #180]	; (8001938 <runCommand+0x384>)
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <runCommand+0x2ec>)
 8001886:	f002 fae3 	bl	8003e50 <writeMsgForTXE>
}
 800188a:	bf00      	nop
 800188c:	379c      	adds	r7, #156	; 0x9c
 800188e:	46bd      	mov	sp, r7
 8001890:	bd90      	pop	{r4, r7, pc}
 8001892:	bf00      	nop
 8001894:	08009430 	.word	0x08009430
 8001898:	0800943c 	.word	0x0800943c
 800189c:	08009444 	.word	0x08009444
 80018a0:	20000258 	.word	0x20000258
 80018a4:	08009454 	.word	0x08009454
 80018a8:	08009480 	.word	0x08009480
 80018ac:	080094d8 	.word	0x080094d8
 80018b0:	08009524 	.word	0x08009524
 80018b4:	08009550 	.word	0x08009550
 80018b8:	0800957c 	.word	0x0800957c
 80018bc:	080095a0 	.word	0x080095a0
 80018c0:	080095d8 	.word	0x080095d8
 80018c4:	08009628 	.word	0x08009628
 80018c8:	000186a0 	.word	0x000186a0
 80018cc:	20000004 	.word	0x20000004
 80018d0:	08009634 	.word	0x08009634
 80018d4:	200002e4 	.word	0x200002e4
 80018d8:	2000027c 	.word	0x2000027c
 80018dc:	200002e8 	.word	0x200002e8
 80018e0:	20000288 	.word	0x20000288
 80018e4:	200002ac 	.word	0x200002ac
 80018e8:	200002b8 	.word	0x200002b8
 80018ec:	0800963c 	.word	0x0800963c
 80018f0:	08009658 	.word	0x08009658
 80018f4:	200002c4 	.word	0x200002c4
 80018f8:	0800965c 	.word	0x0800965c
 80018fc:	08009670 	.word	0x08009670
 8001900:	08009674 	.word	0x08009674
 8001904:	08009684 	.word	0x08009684
 8001908:	200002ed 	.word	0x200002ed
 800190c:	20000370 	.word	0x20000370
 8001910:	200002ee 	.word	0x200002ee
 8001914:	0800968c 	.word	0x0800968c
 8001918:	080096a4 	.word	0x080096a4
 800191c:	080096ac 	.word	0x080096ac
 8001920:	080096c4 	.word	0x080096c4
 8001924:	200002ec 	.word	0x200002ec
 8001928:	080096cc 	.word	0x080096cc
 800192c:	200002f0 	.word	0x200002f0
 8001930:	080096f0 	.word	0x080096f0
 8001934:	08009718 	.word	0x08009718
 8001938:	08009730 	.word	0x08009730

0800193c <status_study>:


//----------------------------Inicio de la definicion de las funciones-----------------------------------------

void status_study(uint8_t status)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d113      	bne.n	8001974 <status_study+0x38>
	{
		//Activamos el PWM
		statusInOutPWM(handler_PWM_Motor_Test, CHANNEL_ENABLE);
 800194c:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <status_study+0x68>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f001 fe44 	bl	80035e0 <statusInOutPWM>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_study, INTERRUPTION_ENABLE);
 8001958:	2101      	movs	r1, #1
 800195a:	4813      	ldr	r0, [pc, #76]	; (80019a8 <status_study+0x6c>)
 800195c:	f000 fa58 	bl	8001e10 <statusiInterruptionTimer>
		//Activamos el motor
		GPIO_writePin (handler_GPIO_Motor_EN_Test, RESET);
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <status_study+0x70>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fc64 	bl	8003234 <GPIO_writePin>
		//levantamos Bandera
		flag_study = 1;
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <status_study+0x74>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]
		//Desactivamos el motor
		GPIO_writePin (handler_GPIO_Motor_EN_Test, SET);
		//Reiniciamos Bandera
		flag_study = 0;
	}
}
 8001972:	e012      	b.n	800199a <status_study+0x5e>
		statusInOutPWM(handler_PWM_Motor_Test, CHANNEL_DISABLE);
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <status_study+0x68>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2100      	movs	r1, #0
 800197a:	4618      	mov	r0, r3
 800197c:	f001 fe30 	bl	80035e0 <statusInOutPWM>
		statusiInterruptionTimer(&handler_TIMER_study, INTERRUPTION_DISABLE);
 8001980:	2100      	movs	r1, #0
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <status_study+0x6c>)
 8001984:	f000 fa44 	bl	8001e10 <statusiInterruptionTimer>
		GPIO_writePin (handler_GPIO_Motor_EN_Test, SET);
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <status_study+0x70>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fc50 	bl	8003234 <GPIO_writePin>
		flag_study = 0;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <status_study+0x74>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200002e8 	.word	0x200002e8
 80019a8:	200002d4 	.word	0x200002d4
 80019ac:	200002e4 	.word	0x200002e4
 80019b0:	200002ec 	.word	0x200002ec

080019b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	; (80019f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <LoopForever+0xe>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <LoopForever+0x16>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019e2:	f002 fc43 	bl	800426c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e6:	f7ff fb57 	bl	8001098 <main>

080019ea <LoopForever>:

LoopForever:
    b LoopForever
 80019ea:	e7fe      	b.n	80019ea <LoopForever>
  ldr   r0, =_estack
 80019ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019f8:	08009c1c 	.word	0x08009c1c
  ldr r2, =_sbss
 80019fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a00:	20000c24 	.word	0x20000c24

08001a04 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>

08001a06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
	return 1;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <_kill>:

int _kill(int pid, int sig)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a20:	f002 fc1e 	bl	8004260 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2216      	movs	r2, #22
 8001a28:	601a      	str	r2, [r3, #0]
	return -1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_exit>:

void _exit (int status)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffe7 	bl	8001a16 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a48:	e7fe      	b.n	8001a48 <_exit+0x12>

08001a4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e00a      	b.n	8001a72 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a5c:	f3af 8000 	nop.w
 8001a60:	4601      	mov	r1, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	60ba      	str	r2, [r7, #8]
 8001a68:	b2ca      	uxtb	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbf0      	blt.n	8001a5c <_read+0x12>
	}

return len;
 8001a7a:	687b      	ldr	r3, [r7, #4]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	e009      	b.n	8001aaa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60ba      	str	r2, [r7, #8]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbf1      	blt.n	8001a96 <_write+0x12>
	}
	return len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_close>:

int _close(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae4:	605a      	str	r2, [r3, #4]
	return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_isatty>:

int _isatty(int file)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	return 1;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
	return 0;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b54:	f002 fb84 	bl	8004260 <__errno>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <_sbrk+0x64>)
 8001b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b76:	68fb      	ldr	r3, [r7, #12]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20020000 	.word	0x20020000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	200003b4 	.word	0x200003b4
 8001b8c:	20000c28 	.word	0x20000c28

08001b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	db0b      	blt.n	8001bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f003 021f 	and.w	r2, r3, #31
 8001ba8:	4907      	ldr	r1, [pc, #28]	; (8001bc8 <__NVIC_EnableIRQ+0x38>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000e100 	.word	0xe000e100

08001bcc <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d10a      	bne.n	8001bf4 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001bde:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <BasicTimer_Config+0x184>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a5b      	ldr	r2, [pc, #364]	; (8001d50 <BasicTimer_Config+0x184>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4a59      	ldr	r2, [pc, #356]	; (8001d54 <BasicTimer_Config+0x188>)
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e02e      	b.n	8001c52 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <BasicTimer_Config+0x18c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10a      	bne.n	8001c14 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001bfe:	4b54      	ldr	r3, [pc, #336]	; (8001d50 <BasicTimer_Config+0x184>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a53      	ldr	r2, [pc, #332]	; (8001d50 <BasicTimer_Config+0x184>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4a53      	ldr	r2, [pc, #332]	; (8001d5c <BasicTimer_Config+0x190>)
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01e      	b.n	8001c52 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4a51      	ldr	r2, [pc, #324]	; (8001d60 <BasicTimer_Config+0x194>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10a      	bne.n	8001c34 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <BasicTimer_Config+0x184>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a4b      	ldr	r2, [pc, #300]	; (8001d50 <BasicTimer_Config+0x184>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	4a4d      	ldr	r2, [pc, #308]	; (8001d64 <BasicTimer_Config+0x198>)
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e00e      	b.n	8001c52 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <BasicTimer_Config+0x19c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d109      	bne.n	8001c52 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001c3e:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <BasicTimer_Config+0x184>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a43      	ldr	r2, [pc, #268]	; (8001d50 <BasicTimer_Config+0x184>)
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4a47      	ldr	r2, [pc, #284]	; (8001d6c <BasicTimer_Config+0x1a0>)
 8001c50:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001c52:	f001 fb4d 	bl	80032f0 <getClockAPB1>
 8001c56:	4603      	mov	r3, r0
 8001c58:	73fb      	strb	r3, [r7, #15]

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	8852      	ldrh	r2, [r2, #2]
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	1e5a      	subs	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d112      	bne.n	8001c9a <BasicTimer_Config+0xce>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f022 0210 	bic.w	r2, r2, #16
 8001c82:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	3201      	adds	r2, #1
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
 8001c98:	e018      	b.n	8001ccc <BasicTimer_Config+0x100>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f022 0210 	bic.w	r2, r2, #16
 8001ca8:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f042 0210 	orr.w	r2, r2, #16
 8001cb8:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6852      	ldr	r2, [r2, #4]
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ccc:	b672      	cpsid	i
}
 8001cce:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d103      	bne.n	8001ce2 <BasicTimer_Config+0x116>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001cda:	201c      	movs	r0, #28
 8001cdc:	f7ff ff58 	bl	8001b90 <__NVIC_EnableIRQ>
 8001ce0:	e019      	b.n	8001d16 <BasicTimer_Config+0x14a>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <BasicTimer_Config+0x18c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d103      	bne.n	8001cf4 <BasicTimer_Config+0x128>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001cec:	201d      	movs	r0, #29
 8001cee:	f7ff ff4f 	bl	8001b90 <__NVIC_EnableIRQ>
 8001cf2:	e010      	b.n	8001d16 <BasicTimer_Config+0x14a>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <BasicTimer_Config+0x194>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d103      	bne.n	8001d06 <BasicTimer_Config+0x13a>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001cfe:	201e      	movs	r0, #30
 8001d00:	f7ff ff46 	bl	8001b90 <__NVIC_EnableIRQ>
 8001d04:	e007      	b.n	8001d16 <BasicTimer_Config+0x14a>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <BasicTimer_Config+0x19c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d102      	bne.n	8001d16 <BasicTimer_Config+0x14a>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001d10:	2032      	movs	r0, #50	; 0x32
 8001d12:	f7ff ff3d 	bl	8001b90 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d16:	b662      	cpsie	i
}
 8001d18:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7a1b      	ldrb	r3, [r3, #8]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f875 	bl	8001e10 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	200003b8 	.word	0x200003b8
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	200003bc 	.word	0x200003bc
 8001d60:	40000800 	.word	0x40000800
 8001d64:	200003c0 	.word	0x200003c0
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	200003c4 	.word	0x200003c4

08001d70 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
	__NOP();
 8001d74:	bf00      	nop
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	__NOP();
 8001d84:	bf00      	nop
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <TIM2_IRQHandler+0x1c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <TIM2_IRQHandler+0x1c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8001da4:	f7ff fb22 	bl	80013ec <BasicTimer2_Callback>

}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200003b8 	.word	0x200003b8

08001db0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <TIM3_IRQHandler+0x1c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <TIM3_IRQHandler+0x1c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8001dc4:	f7ff fb1c 	bl	8001400 <BasicTimer3_Callback>

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200003bc 	.word	0x200003bc

08001dd0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <TIM4_IRQHandler+0x1c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <TIM4_IRQHandler+0x1c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8001de4:	f7ff ffc4 	bl	8001d70 <BasicTimer4_Callback>

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200003c0 	.word	0x200003c0

08001df0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <TIM5_IRQHandler+0x1c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <TIM5_IRQHandler+0x1c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8001e04:	f7ff ffbc 	bl	8001d80 <BasicTimer5_Callback>

}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200003c4 	.word	0x200003c4

08001e10 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8001e32:	e007      	b.n	8001e44 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	60da      	str	r2, [r3, #12]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6852      	ldr	r2, [r2, #4]
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <__NVIC_EnableIRQ>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	db0b      	blt.n	8001eaa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <__NVIC_EnableIRQ+0x38>)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	095b      	lsrs	r3, r3, #5
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e100 	.word	0xe000e100

08001ebc <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af02      	add	r7, sp, #8
 8001ec2:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f001 f861 	bl	8002f9c <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 f87e 	bl	8002fe0 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001ee4:	4b97      	ldr	r3, [pc, #604]	; (8002144 <extInt_Config+0x288>)
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	4a96      	ldr	r2, [pc, #600]	; (8002144 <extInt_Config+0x288>)
 8001eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eee:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b0f      	cmp	r3, #15
 8001ef8:	f200 85cf 	bhi.w	8002a9a <extInt_Config+0xbde>
 8001efc:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <extInt_Config+0x48>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f45 	.word	0x08001f45
 8001f08:	08001ffb 	.word	0x08001ffb
 8001f0c:	080020b1 	.word	0x080020b1
 8001f10:	08002187 	.word	0x08002187
 8001f14:	0800223d 	.word	0x0800223d
 8001f18:	080022eb 	.word	0x080022eb
 8001f1c:	080023b1 	.word	0x080023b1
 8001f20:	08002459 	.word	0x08002459
 8001f24:	08002501 	.word	0x08002501
 8001f28:	080025a9 	.word	0x080025a9
 8001f2c:	0800266f 	.word	0x0800266f
 8001f30:	08002717 	.word	0x08002717
 8001f34:	080027bf 	.word	0x080027bf
 8001f38:	08002885 	.word	0x08002885
 8001f3c:	0800292d 	.word	0x0800292d
 8001f40:	080029d5 	.word	0x080029d5
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8001f44:	4b80      	ldr	r3, [pc, #512]	; (8002148 <extInt_Config+0x28c>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a7f      	ldr	r2, [pc, #508]	; (8002148 <extInt_Config+0x28c>)
 8001f4a:	f023 030f 	bic.w	r3, r3, #15
 8001f4e:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4a7d      	ldr	r2, [pc, #500]	; (800214c <extInt_Config+0x290>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d105      	bne.n	8001f68 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8001f5c:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <extInt_Config+0x28c>)
 8001f5e:	4a7a      	ldr	r2, [pc, #488]	; (8002148 <extInt_Config+0x28c>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8001f64:	f000 bd9b 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	4a78      	ldr	r2, [pc, #480]	; (8002150 <extInt_Config+0x294>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d107      	bne.n	8001f84 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8001f74:	4b74      	ldr	r3, [pc, #464]	; (8002148 <extInt_Config+0x28c>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	4a73      	ldr	r2, [pc, #460]	; (8002148 <extInt_Config+0x28c>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6093      	str	r3, [r2, #8]
		break;
 8001f80:	f000 bd8d 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4a72      	ldr	r2, [pc, #456]	; (8002154 <extInt_Config+0x298>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d107      	bne.n	8001fa0 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8001f90:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <extInt_Config+0x28c>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a6c      	ldr	r2, [pc, #432]	; (8002148 <extInt_Config+0x28c>)
 8001f96:	f043 0302 	orr.w	r3, r3, #2
 8001f9a:	6093      	str	r3, [r2, #8]
		break;
 8001f9c:	f000 bd7f 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4a6c      	ldr	r2, [pc, #432]	; (8002158 <extInt_Config+0x29c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d107      	bne.n	8001fbc <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8001fac:	4b66      	ldr	r3, [pc, #408]	; (8002148 <extInt_Config+0x28c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	4a65      	ldr	r2, [pc, #404]	; (8002148 <extInt_Config+0x28c>)
 8001fb2:	f043 0303 	orr.w	r3, r3, #3
 8001fb6:	6093      	str	r3, [r2, #8]
		break;
 8001fb8:	f000 bd71 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4a66      	ldr	r2, [pc, #408]	; (800215c <extInt_Config+0x2a0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d107      	bne.n	8001fd8 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8001fc8:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <extInt_Config+0x28c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4a5e      	ldr	r2, [pc, #376]	; (8002148 <extInt_Config+0x28c>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6093      	str	r3, [r2, #8]
		break;
 8001fd4:	f000 bd63 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	4a60      	ldr	r2, [pc, #384]	; (8002160 <extInt_Config+0x2a4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d107      	bne.n	8001ff4 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8001fe4:	4b58      	ldr	r3, [pc, #352]	; (8002148 <extInt_Config+0x28c>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a57      	ldr	r2, [pc, #348]	; (8002148 <extInt_Config+0x28c>)
 8001fea:	f043 0307 	orr.w	r3, r3, #7
 8001fee:	6093      	str	r3, [r2, #8]
		break;
 8001ff0:	f000 bd55 	b.w	8002a9e <extInt_Config+0xbe2>
			__NOP();
 8001ff4:	bf00      	nop
		break;
 8001ff6:	f000 bd52 	b.w	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8001ffa:	4b53      	ldr	r3, [pc, #332]	; (8002148 <extInt_Config+0x28c>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	4a52      	ldr	r2, [pc, #328]	; (8002148 <extInt_Config+0x28c>)
 8002000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002004:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a4f      	ldr	r2, [pc, #316]	; (800214c <extInt_Config+0x290>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d105      	bne.n	800201e <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002012:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <extInt_Config+0x28c>)
 8002014:	4a4c      	ldr	r2, [pc, #304]	; (8002148 <extInt_Config+0x28c>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800201a:	f000 bd40 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a4a      	ldr	r2, [pc, #296]	; (8002150 <extInt_Config+0x294>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d107      	bne.n	800203a <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800202a:	4b47      	ldr	r3, [pc, #284]	; (8002148 <extInt_Config+0x28c>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	4a46      	ldr	r2, [pc, #280]	; (8002148 <extInt_Config+0x28c>)
 8002030:	f043 0310 	orr.w	r3, r3, #16
 8002034:	6093      	str	r3, [r2, #8]
		break;
 8002036:	f000 bd32 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a44      	ldr	r2, [pc, #272]	; (8002154 <extInt_Config+0x298>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d107      	bne.n	8002056 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002046:	4b40      	ldr	r3, [pc, #256]	; (8002148 <extInt_Config+0x28c>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	4a3f      	ldr	r2, [pc, #252]	; (8002148 <extInt_Config+0x28c>)
 800204c:	f043 0320 	orr.w	r3, r3, #32
 8002050:	6093      	str	r3, [r2, #8]
		break;
 8002052:	f000 bd24 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a3e      	ldr	r2, [pc, #248]	; (8002158 <extInt_Config+0x29c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d107      	bne.n	8002072 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002062:	4b39      	ldr	r3, [pc, #228]	; (8002148 <extInt_Config+0x28c>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4a38      	ldr	r2, [pc, #224]	; (8002148 <extInt_Config+0x28c>)
 8002068:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800206c:	6093      	str	r3, [r2, #8]
		break;
 800206e:	f000 bd16 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a38      	ldr	r2, [pc, #224]	; (800215c <extInt_Config+0x2a0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d107      	bne.n	800208e <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800207e:	4b32      	ldr	r3, [pc, #200]	; (8002148 <extInt_Config+0x28c>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	4a31      	ldr	r2, [pc, #196]	; (8002148 <extInt_Config+0x28c>)
 8002084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002088:	6093      	str	r3, [r2, #8]
		break;
 800208a:	f000 bd08 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4a32      	ldr	r2, [pc, #200]	; (8002160 <extInt_Config+0x2a4>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d107      	bne.n	80020aa <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800209a:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <extInt_Config+0x28c>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <extInt_Config+0x28c>)
 80020a0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020a4:	6093      	str	r3, [r2, #8]
		break;
 80020a6:	f000 bcfa 	b.w	8002a9e <extInt_Config+0xbe2>
			__NOP();
 80020aa:	bf00      	nop
		break;
 80020ac:	f000 bcf7 	b.w	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <extInt_Config+0x28c>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a24      	ldr	r2, [pc, #144]	; (8002148 <extInt_Config+0x28c>)
 80020b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020ba:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4a22      	ldr	r2, [pc, #136]	; (800214c <extInt_Config+0x290>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d105      	bne.n	80020d4 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <extInt_Config+0x28c>)
 80020ca:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <extInt_Config+0x28c>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80020d0:	f000 bce5 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <extInt_Config+0x294>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d107      	bne.n	80020f0 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <extInt_Config+0x28c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a18      	ldr	r2, [pc, #96]	; (8002148 <extInt_Config+0x28c>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6093      	str	r3, [r2, #8]
		break;
 80020ec:	f000 bcd7 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4a17      	ldr	r2, [pc, #92]	; (8002154 <extInt_Config+0x298>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d107      	bne.n	800210c <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <extInt_Config+0x28c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <extInt_Config+0x28c>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002106:	6093      	str	r3, [r2, #8]
		break;
 8002108:	f000 bcc9 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <extInt_Config+0x29c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d107      	bne.n	8002128 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <extInt_Config+0x28c>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <extInt_Config+0x28c>)
 800211e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002122:	6093      	str	r3, [r2, #8]
		break;
 8002124:	f000 bcbb 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <extInt_Config+0x2a0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d117      	bne.n	8002164 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <extInt_Config+0x28c>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a03      	ldr	r2, [pc, #12]	; (8002148 <extInt_Config+0x28c>)
 800213a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213e:	6093      	str	r3, [r2, #8]
		break;
 8002140:	f000 bcad 	b.w	8002a9e <extInt_Config+0xbe2>
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4a8a      	ldr	r2, [pc, #552]	; (8002394 <extInt_Config+0x4d8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d107      	bne.n	8002180 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002170:	4b89      	ldr	r3, [pc, #548]	; (8002398 <extInt_Config+0x4dc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4a88      	ldr	r2, [pc, #544]	; (8002398 <extInt_Config+0x4dc>)
 8002176:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800217a:	6093      	str	r3, [r2, #8]
		break;
 800217c:	f000 bc8f 	b.w	8002a9e <extInt_Config+0xbe2>
			__NOP();
 8002180:	bf00      	nop
		break;
 8002182:	f000 bc8c 	b.w	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8002186:	4b84      	ldr	r3, [pc, #528]	; (8002398 <extInt_Config+0x4dc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	4a83      	ldr	r2, [pc, #524]	; (8002398 <extInt_Config+0x4dc>)
 800218c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002190:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4a80      	ldr	r2, [pc, #512]	; (800239c <extInt_Config+0x4e0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d105      	bne.n	80021aa <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800219e:	4b7e      	ldr	r3, [pc, #504]	; (8002398 <extInt_Config+0x4dc>)
 80021a0:	4a7d      	ldr	r2, [pc, #500]	; (8002398 <extInt_Config+0x4dc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80021a6:	f000 bc7a 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a7b      	ldr	r2, [pc, #492]	; (80023a0 <extInt_Config+0x4e4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d107      	bne.n	80021c6 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <extInt_Config+0x4dc>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a77      	ldr	r2, [pc, #476]	; (8002398 <extInt_Config+0x4dc>)
 80021bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021c0:	6093      	str	r3, [r2, #8]
		break;
 80021c2:	f000 bc6c 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a75      	ldr	r2, [pc, #468]	; (80023a4 <extInt_Config+0x4e8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d107      	bne.n	80021e2 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80021d2:	4b71      	ldr	r3, [pc, #452]	; (8002398 <extInt_Config+0x4dc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4a70      	ldr	r2, [pc, #448]	; (8002398 <extInt_Config+0x4dc>)
 80021d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021dc:	6093      	str	r3, [r2, #8]
		break;
 80021de:	f000 bc5e 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a6f      	ldr	r2, [pc, #444]	; (80023a8 <extInt_Config+0x4ec>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d107      	bne.n	80021fe <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80021ee:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <extInt_Config+0x4dc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4a69      	ldr	r2, [pc, #420]	; (8002398 <extInt_Config+0x4dc>)
 80021f4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80021f8:	6093      	str	r3, [r2, #8]
		break;
 80021fa:	f000 bc50 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a69      	ldr	r2, [pc, #420]	; (80023ac <extInt_Config+0x4f0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d107      	bne.n	800221a <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800220a:	4b63      	ldr	r3, [pc, #396]	; (8002398 <extInt_Config+0x4dc>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4a62      	ldr	r2, [pc, #392]	; (8002398 <extInt_Config+0x4dc>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6093      	str	r3, [r2, #8]
		break;
 8002216:	f000 bc42 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <extInt_Config+0x4d8>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d107      	bne.n	8002236 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002226:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <extInt_Config+0x4dc>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4a5b      	ldr	r2, [pc, #364]	; (8002398 <extInt_Config+0x4dc>)
 800222c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002230:	6093      	str	r3, [r2, #8]
		break;
 8002232:	f000 bc34 	b.w	8002a9e <extInt_Config+0xbe2>
			__NOP();
 8002236:	bf00      	nop
		break;
 8002238:	f000 bc31 	b.w	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 800223c:	4b56      	ldr	r3, [pc, #344]	; (8002398 <extInt_Config+0x4dc>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a55      	ldr	r2, [pc, #340]	; (8002398 <extInt_Config+0x4dc>)
 8002242:	f023 030f 	bic.w	r3, r3, #15
 8002246:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4a53      	ldr	r2, [pc, #332]	; (800239c <extInt_Config+0x4e0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d105      	bne.n	8002260 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002254:	4b50      	ldr	r3, [pc, #320]	; (8002398 <extInt_Config+0x4dc>)
 8002256:	4a50      	ldr	r2, [pc, #320]	; (8002398 <extInt_Config+0x4dc>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800225c:	f000 bc1f 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4a4e      	ldr	r2, [pc, #312]	; (80023a0 <extInt_Config+0x4e4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d107      	bne.n	800227c <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 800226c:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <extInt_Config+0x4dc>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a49      	ldr	r2, [pc, #292]	; (8002398 <extInt_Config+0x4dc>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	60d3      	str	r3, [r2, #12]
		break;
 8002278:	f000 bc11 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4a48      	ldr	r2, [pc, #288]	; (80023a4 <extInt_Config+0x4e8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d107      	bne.n	8002298 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002288:	4b43      	ldr	r3, [pc, #268]	; (8002398 <extInt_Config+0x4dc>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a42      	ldr	r2, [pc, #264]	; (8002398 <extInt_Config+0x4dc>)
 800228e:	f043 0302 	orr.w	r3, r3, #2
 8002292:	60d3      	str	r3, [r2, #12]
		break;
 8002294:	f000 bc03 	b.w	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4a42      	ldr	r2, [pc, #264]	; (80023a8 <extInt_Config+0x4ec>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d106      	bne.n	80022b2 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80022a4:	4b3c      	ldr	r3, [pc, #240]	; (8002398 <extInt_Config+0x4dc>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <extInt_Config+0x4dc>)
 80022aa:	f043 0303 	orr.w	r3, r3, #3
 80022ae:	60d3      	str	r3, [r2, #12]
		break;
 80022b0:	e3f5      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a3c      	ldr	r2, [pc, #240]	; (80023ac <extInt_Config+0x4f0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d106      	bne.n	80022cc <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <extInt_Config+0x4dc>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4a35      	ldr	r2, [pc, #212]	; (8002398 <extInt_Config+0x4dc>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	60d3      	str	r3, [r2, #12]
		break;
 80022ca:	e3e8      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4a30      	ldr	r2, [pc, #192]	; (8002394 <extInt_Config+0x4d8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d106      	bne.n	80022e6 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80022d8:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <extInt_Config+0x4dc>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a2e      	ldr	r2, [pc, #184]	; (8002398 <extInt_Config+0x4dc>)
 80022de:	f043 0307 	orr.w	r3, r3, #7
 80022e2:	60d3      	str	r3, [r2, #12]
		break;
 80022e4:	e3db      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 80022e6:	bf00      	nop
		break;
 80022e8:	e3d9      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 80022ea:	4b2b      	ldr	r3, [pc, #172]	; (8002398 <extInt_Config+0x4dc>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <extInt_Config+0x4dc>)
 80022f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f4:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a27      	ldr	r2, [pc, #156]	; (800239c <extInt_Config+0x4e0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d104      	bne.n	800230c <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002302:	4b25      	ldr	r3, [pc, #148]	; (8002398 <extInt_Config+0x4dc>)
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <extInt_Config+0x4dc>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800230a:	e3c8      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4a23      	ldr	r2, [pc, #140]	; (80023a0 <extInt_Config+0x4e4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d106      	bne.n	8002326 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <extInt_Config+0x4dc>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a1e      	ldr	r2, [pc, #120]	; (8002398 <extInt_Config+0x4dc>)
 800231e:	f043 0310 	orr.w	r3, r3, #16
 8002322:	60d3      	str	r3, [r2, #12]
		break;
 8002324:	e3bb      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <extInt_Config+0x4e8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d106      	bne.n	8002340 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <extInt_Config+0x4dc>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a18      	ldr	r2, [pc, #96]	; (8002398 <extInt_Config+0x4dc>)
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	60d3      	str	r3, [r2, #12]
		break;
 800233e:	e3ae      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <extInt_Config+0x4ec>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d106      	bne.n	800235a <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <extInt_Config+0x4dc>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <extInt_Config+0x4dc>)
 8002352:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002356:	60d3      	str	r3, [r2, #12]
		break;
 8002358:	e3a1      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <extInt_Config+0x4f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d106      	bne.n	8002374 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <extInt_Config+0x4dc>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <extInt_Config+0x4dc>)
 800236c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002370:	60d3      	str	r3, [r2, #12]
		break;
 8002372:	e394      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <extInt_Config+0x4d8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d106      	bne.n	800238e <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <extInt_Config+0x4dc>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <extInt_Config+0x4dc>)
 8002386:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800238a:	60d3      	str	r3, [r2, #12]
		break;
 800238c:	e387      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 800238e:	bf00      	nop
		break;
 8002390:	e385      	b.n	8002a9e <extInt_Config+0xbe2>
 8002392:	bf00      	nop
 8002394:	40021c00 	.word	0x40021c00
 8002398:	40013800 	.word	0x40013800
 800239c:	40020000 	.word	0x40020000
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 80023b0:	4b86      	ldr	r3, [pc, #536]	; (80025cc <extInt_Config+0x710>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a85      	ldr	r2, [pc, #532]	; (80025cc <extInt_Config+0x710>)
 80023b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ba:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4a83      	ldr	r2, [pc, #524]	; (80025d0 <extInt_Config+0x714>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d104      	bne.n	80023d2 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80023c8:	4b80      	ldr	r3, [pc, #512]	; (80025cc <extInt_Config+0x710>)
 80023ca:	4a80      	ldr	r2, [pc, #512]	; (80025cc <extInt_Config+0x710>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80023d0:	e365      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a7e      	ldr	r2, [pc, #504]	; (80025d4 <extInt_Config+0x718>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d106      	bne.n	80023ec <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80023de:	4b7b      	ldr	r3, [pc, #492]	; (80025cc <extInt_Config+0x710>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a7a      	ldr	r2, [pc, #488]	; (80025cc <extInt_Config+0x710>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	60d3      	str	r3, [r2, #12]
		break;
 80023ea:	e358      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4a79      	ldr	r2, [pc, #484]	; (80025d8 <extInt_Config+0x71c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d106      	bne.n	8002406 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80023f8:	4b74      	ldr	r3, [pc, #464]	; (80025cc <extInt_Config+0x710>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a73      	ldr	r2, [pc, #460]	; (80025cc <extInt_Config+0x710>)
 80023fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002402:	60d3      	str	r3, [r2, #12]
		break;
 8002404:	e34b      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a73      	ldr	r2, [pc, #460]	; (80025dc <extInt_Config+0x720>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d106      	bne.n	8002420 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002412:	4b6e      	ldr	r3, [pc, #440]	; (80025cc <extInt_Config+0x710>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	4a6d      	ldr	r2, [pc, #436]	; (80025cc <extInt_Config+0x710>)
 8002418:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800241c:	60d3      	str	r3, [r2, #12]
		break;
 800241e:	e33e      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	4a6e      	ldr	r2, [pc, #440]	; (80025e0 <extInt_Config+0x724>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d106      	bne.n	800243a <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 800242c:	4b67      	ldr	r3, [pc, #412]	; (80025cc <extInt_Config+0x710>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a66      	ldr	r2, [pc, #408]	; (80025cc <extInt_Config+0x710>)
 8002432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002436:	60d3      	str	r3, [r2, #12]
		break;
 8002438:	e331      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a68      	ldr	r2, [pc, #416]	; (80025e4 <extInt_Config+0x728>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d106      	bne.n	8002454 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8002446:	4b61      	ldr	r3, [pc, #388]	; (80025cc <extInt_Config+0x710>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	4a60      	ldr	r2, [pc, #384]	; (80025cc <extInt_Config+0x710>)
 800244c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002450:	60d3      	str	r3, [r2, #12]
		break;
 8002452:	e324      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 8002454:	bf00      	nop
		break;
 8002456:	e322      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8002458:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <extInt_Config+0x710>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a5b      	ldr	r2, [pc, #364]	; (80025cc <extInt_Config+0x710>)
 800245e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002462:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4a59      	ldr	r2, [pc, #356]	; (80025d0 <extInt_Config+0x714>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d104      	bne.n	800247a <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8002470:	4b56      	ldr	r3, [pc, #344]	; (80025cc <extInt_Config+0x710>)
 8002472:	4a56      	ldr	r2, [pc, #344]	; (80025cc <extInt_Config+0x710>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002478:	e311      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a54      	ldr	r2, [pc, #336]	; (80025d4 <extInt_Config+0x718>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d106      	bne.n	8002494 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002486:	4b51      	ldr	r3, [pc, #324]	; (80025cc <extInt_Config+0x710>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4a50      	ldr	r2, [pc, #320]	; (80025cc <extInt_Config+0x710>)
 800248c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002490:	60d3      	str	r3, [r2, #12]
		break;
 8002492:	e304      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4a4f      	ldr	r2, [pc, #316]	; (80025d8 <extInt_Config+0x71c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d106      	bne.n	80024ae <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80024a0:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <extInt_Config+0x710>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4a49      	ldr	r2, [pc, #292]	; (80025cc <extInt_Config+0x710>)
 80024a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024aa:	60d3      	str	r3, [r2, #12]
		break;
 80024ac:	e2f7      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a49      	ldr	r2, [pc, #292]	; (80025dc <extInt_Config+0x720>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d106      	bne.n	80024c8 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <extInt_Config+0x710>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	4a43      	ldr	r2, [pc, #268]	; (80025cc <extInt_Config+0x710>)
 80024c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80024c4:	60d3      	str	r3, [r2, #12]
		break;
 80024c6:	e2ea      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4a44      	ldr	r2, [pc, #272]	; (80025e0 <extInt_Config+0x724>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d106      	bne.n	80024e2 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80024d4:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <extInt_Config+0x710>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <extInt_Config+0x710>)
 80024da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024de:	60d3      	str	r3, [r2, #12]
		break;
 80024e0:	e2dd      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a3e      	ldr	r2, [pc, #248]	; (80025e4 <extInt_Config+0x728>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d106      	bne.n	80024fc <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <extInt_Config+0x710>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a36      	ldr	r2, [pc, #216]	; (80025cc <extInt_Config+0x710>)
 80024f4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80024f8:	60d3      	str	r3, [r2, #12]
		break;
 80024fa:	e2d0      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 80024fc:	bf00      	nop
		break;
 80024fe:	e2ce      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8002500:	4b32      	ldr	r3, [pc, #200]	; (80025cc <extInt_Config+0x710>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	4a31      	ldr	r2, [pc, #196]	; (80025cc <extInt_Config+0x710>)
 8002506:	f023 030f 	bic.w	r3, r3, #15
 800250a:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <extInt_Config+0x714>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d104      	bne.n	8002522 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002518:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <extInt_Config+0x710>)
 800251a:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <extInt_Config+0x710>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002520:	e2bd      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a2a      	ldr	r2, [pc, #168]	; (80025d4 <extInt_Config+0x718>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d106      	bne.n	800253c <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800252e:	4b27      	ldr	r3, [pc, #156]	; (80025cc <extInt_Config+0x710>)
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	4a26      	ldr	r2, [pc, #152]	; (80025cc <extInt_Config+0x710>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6113      	str	r3, [r2, #16]
		break;
 800253a:	e2b0      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <extInt_Config+0x71c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d106      	bne.n	8002556 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8002548:	4b20      	ldr	r3, [pc, #128]	; (80025cc <extInt_Config+0x710>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <extInt_Config+0x710>)
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	6113      	str	r3, [r2, #16]
		break;
 8002554:	e2a3      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a1f      	ldr	r2, [pc, #124]	; (80025dc <extInt_Config+0x720>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d106      	bne.n	8002570 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <extInt_Config+0x710>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	4a19      	ldr	r2, [pc, #100]	; (80025cc <extInt_Config+0x710>)
 8002568:	f043 0303 	orr.w	r3, r3, #3
 800256c:	6113      	str	r3, [r2, #16]
		break;
 800256e:	e296      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <extInt_Config+0x724>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d106      	bne.n	800258a <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <extInt_Config+0x710>)
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4a12      	ldr	r2, [pc, #72]	; (80025cc <extInt_Config+0x710>)
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	6113      	str	r3, [r2, #16]
		break;
 8002588:	e289      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <extInt_Config+0x728>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d106      	bne.n	80025a4 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <extInt_Config+0x710>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <extInt_Config+0x710>)
 800259c:	f043 0307 	orr.w	r3, r3, #7
 80025a0:	6113      	str	r3, [r2, #16]
		break;
 80025a2:	e27c      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 80025a4:	bf00      	nop
		break;
 80025a6:	e27a      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <extInt_Config+0x710>)
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <extInt_Config+0x710>)
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b2:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <extInt_Config+0x714>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d113      	bne.n	80025e8 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80025c0:	4b02      	ldr	r3, [pc, #8]	; (80025cc <extInt_Config+0x710>)
 80025c2:	4a02      	ldr	r2, [pc, #8]	; (80025cc <extInt_Config+0x710>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80025c8:	e269      	b.n	8002a9e <extInt_Config+0xbe2>
 80025ca:	bf00      	nop
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4a83      	ldr	r2, [pc, #524]	; (80027fc <extInt_Config+0x940>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d106      	bne.n	8002602 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80025f4:	4b82      	ldr	r3, [pc, #520]	; (8002800 <extInt_Config+0x944>)
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	4a81      	ldr	r2, [pc, #516]	; (8002800 <extInt_Config+0x944>)
 80025fa:	f043 0310 	orr.w	r3, r3, #16
 80025fe:	6113      	str	r3, [r2, #16]
		break;
 8002600:	e24d      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a7e      	ldr	r2, [pc, #504]	; (8002804 <extInt_Config+0x948>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d106      	bne.n	800261c <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800260e:	4b7c      	ldr	r3, [pc, #496]	; (8002800 <extInt_Config+0x944>)
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	4a7b      	ldr	r2, [pc, #492]	; (8002800 <extInt_Config+0x944>)
 8002614:	f043 0320 	orr.w	r3, r3, #32
 8002618:	6113      	str	r3, [r2, #16]
		break;
 800261a:	e240      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4a79      	ldr	r2, [pc, #484]	; (8002808 <extInt_Config+0x94c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d106      	bne.n	8002636 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002628:	4b75      	ldr	r3, [pc, #468]	; (8002800 <extInt_Config+0x944>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	4a74      	ldr	r2, [pc, #464]	; (8002800 <extInt_Config+0x944>)
 800262e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002632:	6113      	str	r3, [r2, #16]
		break;
 8002634:	e233      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a73      	ldr	r2, [pc, #460]	; (800280c <extInt_Config+0x950>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d106      	bne.n	8002650 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002642:	4b6f      	ldr	r3, [pc, #444]	; (8002800 <extInt_Config+0x944>)
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	4a6e      	ldr	r2, [pc, #440]	; (8002800 <extInt_Config+0x944>)
 8002648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264c:	6113      	str	r3, [r2, #16]
		break;
 800264e:	e226      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4a6e      	ldr	r2, [pc, #440]	; (8002810 <extInt_Config+0x954>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d106      	bne.n	800266a <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 800265c:	4b68      	ldr	r3, [pc, #416]	; (8002800 <extInt_Config+0x944>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	4a67      	ldr	r2, [pc, #412]	; (8002800 <extInt_Config+0x944>)
 8002662:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002666:	6113      	str	r3, [r2, #16]
		break;
 8002668:	e219      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 800266a:	bf00      	nop
		break;
 800266c:	e217      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 800266e:	4b64      	ldr	r3, [pc, #400]	; (8002800 <extInt_Config+0x944>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	4a63      	ldr	r2, [pc, #396]	; (8002800 <extInt_Config+0x944>)
 8002674:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002678:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a64      	ldr	r2, [pc, #400]	; (8002814 <extInt_Config+0x958>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d104      	bne.n	8002690 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002686:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <extInt_Config+0x944>)
 8002688:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <extInt_Config+0x944>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800268e:	e206      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	4a59      	ldr	r2, [pc, #356]	; (80027fc <extInt_Config+0x940>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d106      	bne.n	80026aa <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 800269c:	4b58      	ldr	r3, [pc, #352]	; (8002800 <extInt_Config+0x944>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	4a57      	ldr	r2, [pc, #348]	; (8002800 <extInt_Config+0x944>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6113      	str	r3, [r2, #16]
		break;
 80026a8:	e1f9      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a54      	ldr	r2, [pc, #336]	; (8002804 <extInt_Config+0x948>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d106      	bne.n	80026c4 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80026b6:	4b52      	ldr	r3, [pc, #328]	; (8002800 <extInt_Config+0x944>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	4a51      	ldr	r2, [pc, #324]	; (8002800 <extInt_Config+0x944>)
 80026bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c0:	6113      	str	r3, [r2, #16]
		break;
 80026c2:	e1ec      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4a4f      	ldr	r2, [pc, #316]	; (8002808 <extInt_Config+0x94c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d106      	bne.n	80026de <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <extInt_Config+0x944>)
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <extInt_Config+0x944>)
 80026d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026da:	6113      	str	r3, [r2, #16]
		break;
 80026dc:	e1df      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a49      	ldr	r2, [pc, #292]	; (800280c <extInt_Config+0x950>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d106      	bne.n	80026f8 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 80026ea:	4b45      	ldr	r3, [pc, #276]	; (8002800 <extInt_Config+0x944>)
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	4a44      	ldr	r2, [pc, #272]	; (8002800 <extInt_Config+0x944>)
 80026f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f4:	6113      	str	r3, [r2, #16]
		break;
 80026f6:	e1d2      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	4a44      	ldr	r2, [pc, #272]	; (8002810 <extInt_Config+0x954>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d106      	bne.n	8002712 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002704:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <extInt_Config+0x944>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4a3d      	ldr	r2, [pc, #244]	; (8002800 <extInt_Config+0x944>)
 800270a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800270e:	6113      	str	r3, [r2, #16]
		break;
 8002710:	e1c5      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 8002712:	bf00      	nop
		break;
 8002714:	e1c3      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <extInt_Config+0x944>)
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	4a39      	ldr	r2, [pc, #228]	; (8002800 <extInt_Config+0x944>)
 800271c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002720:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a3a      	ldr	r2, [pc, #232]	; (8002814 <extInt_Config+0x958>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d104      	bne.n	8002738 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800272e:	4b34      	ldr	r3, [pc, #208]	; (8002800 <extInt_Config+0x944>)
 8002730:	4a33      	ldr	r2, [pc, #204]	; (8002800 <extInt_Config+0x944>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002736:	e1b2      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	4a2f      	ldr	r2, [pc, #188]	; (80027fc <extInt_Config+0x940>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d106      	bne.n	8002752 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <extInt_Config+0x944>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <extInt_Config+0x944>)
 800274a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800274e:	6113      	str	r3, [r2, #16]
		break;
 8002750:	e1a5      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a2a      	ldr	r2, [pc, #168]	; (8002804 <extInt_Config+0x948>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d106      	bne.n	800276c <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800275e:	4b28      	ldr	r3, [pc, #160]	; (8002800 <extInt_Config+0x944>)
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	4a27      	ldr	r2, [pc, #156]	; (8002800 <extInt_Config+0x944>)
 8002764:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002768:	6113      	str	r3, [r2, #16]
		break;
 800276a:	e198      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4a25      	ldr	r2, [pc, #148]	; (8002808 <extInt_Config+0x94c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d106      	bne.n	8002786 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002778:	4b21      	ldr	r3, [pc, #132]	; (8002800 <extInt_Config+0x944>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	4a20      	ldr	r2, [pc, #128]	; (8002800 <extInt_Config+0x944>)
 800277e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002782:	6113      	str	r3, [r2, #16]
		break;
 8002784:	e18b      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a1f      	ldr	r2, [pc, #124]	; (800280c <extInt_Config+0x950>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d106      	bne.n	80027a0 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <extInt_Config+0x944>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <extInt_Config+0x944>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6113      	str	r3, [r2, #16]
		break;
 800279e:	e17e      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <extInt_Config+0x954>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d106      	bne.n	80027ba <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <extInt_Config+0x944>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	4a13      	ldr	r2, [pc, #76]	; (8002800 <extInt_Config+0x944>)
 80027b2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80027b6:	6113      	str	r3, [r2, #16]
		break;
 80027b8:	e171      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 80027ba:	bf00      	nop
		break;
 80027bc:	e16f      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <extInt_Config+0x944>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	4a0f      	ldr	r2, [pc, #60]	; (8002800 <extInt_Config+0x944>)
 80027c4:	f023 030f 	bic.w	r3, r3, #15
 80027c8:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a10      	ldr	r2, [pc, #64]	; (8002814 <extInt_Config+0x958>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d104      	bne.n	80027e0 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <extInt_Config+0x944>)
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <extInt_Config+0x944>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80027de:	e15e      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <extInt_Config+0x940>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d115      	bne.n	8002818 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <extInt_Config+0x944>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4a03      	ldr	r2, [pc, #12]	; (8002800 <extInt_Config+0x944>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6153      	str	r3, [r2, #20]
		break;
 80027f8:	e151      	b.n	8002a9e <extInt_Config+0xbe2>
 80027fa:	bf00      	nop
 80027fc:	40020400 	.word	0x40020400
 8002800:	40013800 	.word	0x40013800
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40021c00 	.word	0x40021c00
 8002814:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4a83      	ldr	r2, [pc, #524]	; (8002a2c <extInt_Config+0xb70>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d106      	bne.n	8002832 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002824:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <extInt_Config+0xb74>)
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4a81      	ldr	r2, [pc, #516]	; (8002a30 <extInt_Config+0xb74>)
 800282a:	f043 0302 	orr.w	r3, r3, #2
 800282e:	6153      	str	r3, [r2, #20]
		break;
 8002830:	e135      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a7e      	ldr	r2, [pc, #504]	; (8002a34 <extInt_Config+0xb78>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d106      	bne.n	800284c <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800283e:	4b7c      	ldr	r3, [pc, #496]	; (8002a30 <extInt_Config+0xb74>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <extInt_Config+0xb74>)
 8002844:	f043 0303 	orr.w	r3, r3, #3
 8002848:	6153      	str	r3, [r2, #20]
		break;
 800284a:	e128      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4a79      	ldr	r2, [pc, #484]	; (8002a38 <extInt_Config+0xb7c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d106      	bne.n	8002866 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002858:	4b75      	ldr	r3, [pc, #468]	; (8002a30 <extInt_Config+0xb74>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	4a74      	ldr	r2, [pc, #464]	; (8002a30 <extInt_Config+0xb74>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6153      	str	r3, [r2, #20]
		break;
 8002864:	e11b      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a73      	ldr	r2, [pc, #460]	; (8002a3c <extInt_Config+0xb80>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d106      	bne.n	8002880 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002872:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <extInt_Config+0xb74>)
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4a6e      	ldr	r2, [pc, #440]	; (8002a30 <extInt_Config+0xb74>)
 8002878:	f043 0307 	orr.w	r3, r3, #7
 800287c:	6153      	str	r3, [r2, #20]
		break;
 800287e:	e10e      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 8002880:	bf00      	nop
		break;
 8002882:	e10c      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8002884:	4b6a      	ldr	r3, [pc, #424]	; (8002a30 <extInt_Config+0xb74>)
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	4a69      	ldr	r2, [pc, #420]	; (8002a30 <extInt_Config+0xb74>)
 800288a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288e:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4a6a      	ldr	r2, [pc, #424]	; (8002a40 <extInt_Config+0xb84>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d104      	bne.n	80028a6 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 800289c:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <extInt_Config+0xb74>)
 800289e:	4a64      	ldr	r2, [pc, #400]	; (8002a30 <extInt_Config+0xb74>)
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80028a4:	e0fb      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <extInt_Config+0xb88>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d106      	bne.n	80028c0 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80028b2:	4b5f      	ldr	r3, [pc, #380]	; (8002a30 <extInt_Config+0xb74>)
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	4a5e      	ldr	r2, [pc, #376]	; (8002a30 <extInt_Config+0xb74>)
 80028b8:	f043 0310 	orr.w	r3, r3, #16
 80028bc:	6153      	str	r3, [r2, #20]
		break;
 80028be:	e0ee      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4a59      	ldr	r2, [pc, #356]	; (8002a2c <extInt_Config+0xb70>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d106      	bne.n	80028da <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 80028cc:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <extInt_Config+0xb74>)
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4a57      	ldr	r2, [pc, #348]	; (8002a30 <extInt_Config+0xb74>)
 80028d2:	f043 0320 	orr.w	r3, r3, #32
 80028d6:	6153      	str	r3, [r2, #20]
		break;
 80028d8:	e0e1      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4a54      	ldr	r2, [pc, #336]	; (8002a34 <extInt_Config+0xb78>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d106      	bne.n	80028f4 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 80028e6:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <extInt_Config+0xb74>)
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	4a51      	ldr	r2, [pc, #324]	; (8002a30 <extInt_Config+0xb74>)
 80028ec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80028f0:	6153      	str	r3, [r2, #20]
		break;
 80028f2:	e0d4      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4a4f      	ldr	r2, [pc, #316]	; (8002a38 <extInt_Config+0xb7c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d106      	bne.n	800290e <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002900:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <extInt_Config+0xb74>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <extInt_Config+0xb74>)
 8002906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290a:	6153      	str	r3, [r2, #20]
		break;
 800290c:	e0c7      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a49      	ldr	r2, [pc, #292]	; (8002a3c <extInt_Config+0xb80>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d106      	bne.n	8002928 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800291a:	4b45      	ldr	r3, [pc, #276]	; (8002a30 <extInt_Config+0xb74>)
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4a44      	ldr	r2, [pc, #272]	; (8002a30 <extInt_Config+0xb74>)
 8002920:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002924:	6153      	str	r3, [r2, #20]
		break;
 8002926:	e0ba      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 8002928:	bf00      	nop
		break;
 800292a:	e0b8      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 800292c:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <extInt_Config+0xb74>)
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	4a3f      	ldr	r2, [pc, #252]	; (8002a30 <extInt_Config+0xb74>)
 8002932:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002936:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4a40      	ldr	r2, [pc, #256]	; (8002a40 <extInt_Config+0xb84>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d104      	bne.n	800294e <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <extInt_Config+0xb74>)
 8002946:	4a3a      	ldr	r2, [pc, #232]	; (8002a30 <extInt_Config+0xb74>)
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800294c:	e0a7      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <extInt_Config+0xb88>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d106      	bne.n	8002968 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800295a:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <extInt_Config+0xb74>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <extInt_Config+0xb74>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002964:	6153      	str	r3, [r2, #20]
		break;
 8002966:	e09a      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4a2f      	ldr	r2, [pc, #188]	; (8002a2c <extInt_Config+0xb70>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d106      	bne.n	8002982 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <extInt_Config+0xb74>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	4a2d      	ldr	r2, [pc, #180]	; (8002a30 <extInt_Config+0xb74>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297e:	6153      	str	r3, [r2, #20]
		break;
 8002980:	e08d      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <extInt_Config+0xb78>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d106      	bne.n	800299c <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800298e:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <extInt_Config+0xb74>)
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <extInt_Config+0xb74>)
 8002994:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002998:	6153      	str	r3, [r2, #20]
		break;
 800299a:	e080      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <extInt_Config+0xb7c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d106      	bne.n	80029b6 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <extInt_Config+0xb74>)
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <extInt_Config+0xb74>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b2:	6153      	str	r3, [r2, #20]
		break;
 80029b4:	e073      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <extInt_Config+0xb80>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d106      	bne.n	80029d0 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80029c2:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <extInt_Config+0xb74>)
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4a1a      	ldr	r2, [pc, #104]	; (8002a30 <extInt_Config+0xb74>)
 80029c8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029cc:	6153      	str	r3, [r2, #20]
		break;
 80029ce:	e066      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 80029d0:	bf00      	nop
		break;
 80029d2:	e064      	b.n	8002a9e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 80029d4:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <extInt_Config+0xb74>)
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <extInt_Config+0xb74>)
 80029da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029de:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <extInt_Config+0xb84>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d104      	bne.n	80029f6 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 80029ec:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <extInt_Config+0xb74>)
 80029ee:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <extInt_Config+0xb74>)
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80029f4:	e053      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a11      	ldr	r2, [pc, #68]	; (8002a44 <extInt_Config+0xb88>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d106      	bne.n	8002a10 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <extInt_Config+0xb74>)
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <extInt_Config+0xb74>)
 8002a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0c:	6153      	str	r3, [r2, #20]
		break;
 8002a0e:	e046      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <extInt_Config+0xb70>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d115      	bne.n	8002a48 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <extInt_Config+0xb74>)
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <extInt_Config+0xb74>)
 8002a22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a26:	6153      	str	r3, [r2, #20]
		break;
 8002a28:	e039      	b.n	8002a9e <extInt_Config+0xbe2>
 8002a2a:	bf00      	nop
 8002a2c:	40020800 	.word	0x40020800
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40021c00 	.word	0x40021c00
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4a85      	ldr	r2, [pc, #532]	; (8002c64 <extInt_Config+0xda8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d106      	bne.n	8002a62 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002a54:	4b84      	ldr	r3, [pc, #528]	; (8002c68 <extInt_Config+0xdac>)
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	4a83      	ldr	r2, [pc, #524]	; (8002c68 <extInt_Config+0xdac>)
 8002a5a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002a5e:	6153      	str	r3, [r2, #20]
		break;
 8002a60:	e01d      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a80      	ldr	r2, [pc, #512]	; (8002c6c <extInt_Config+0xdb0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d106      	bne.n	8002a7c <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002a6e:	4b7e      	ldr	r3, [pc, #504]	; (8002c68 <extInt_Config+0xdac>)
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	4a7d      	ldr	r2, [pc, #500]	; (8002c68 <extInt_Config+0xdac>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6153      	str	r3, [r2, #20]
		break;
 8002a7a:	e010      	b.n	8002a9e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4a7b      	ldr	r2, [pc, #492]	; (8002c70 <extInt_Config+0xdb4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d106      	bne.n	8002a96 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002a88:	4b77      	ldr	r3, [pc, #476]	; (8002c68 <extInt_Config+0xdac>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	4a76      	ldr	r2, [pc, #472]	; (8002c68 <extInt_Config+0xdac>)
 8002a8e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002a92:	6153      	str	r3, [r2, #20]
		break;
 8002a94:	e003      	b.n	8002a9e <extInt_Config+0xbe2>
			__NOP();
 8002a96:	bf00      	nop
		break;
 8002a98:	e001      	b.n	8002a9e <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8002a9a:	bf00      	nop
		break;
 8002a9c:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	791b      	ldrb	r3, [r3, #4]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d126      	bne.n	8002af4 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002aa6:	4b73      	ldr	r3, [pc, #460]	; (8002c74 <extInt_Config+0xdb8>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	408a      	lsls	r2, r1
 8002ab6:	43d2      	mvns	r2, r2
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <extInt_Config+0xdb8>)
 8002abc:	400b      	ands	r3, r1
 8002abe:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ac0:	4b6c      	ldr	r3, [pc, #432]	; (8002c74 <extInt_Config+0xdb8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	4611      	mov	r1, r2
 8002acc:	2201      	movs	r2, #1
 8002ace:	408a      	lsls	r2, r1
 8002ad0:	43d2      	mvns	r2, r2
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4a67      	ldr	r2, [pc, #412]	; (8002c74 <extInt_Config+0xdb8>)
 8002ad6:	400b      	ands	r3, r1
 8002ad8:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ada:	4b66      	ldr	r3, [pc, #408]	; (8002c74 <extInt_Config+0xdb8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	408a      	lsls	r2, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	4a61      	ldr	r2, [pc, #388]	; (8002c74 <extInt_Config+0xdb8>)
 8002aee:	430b      	orrs	r3, r1
 8002af0:	6093      	str	r3, [r2, #8]
 8002af2:	e02b      	b.n	8002b4c <extInt_Config+0xc90>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	791b      	ldrb	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d126      	bne.n	8002b4a <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002afc:	4b5d      	ldr	r3, [pc, #372]	; (8002c74 <extInt_Config+0xdb8>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	4611      	mov	r1, r2
 8002b08:	2201      	movs	r2, #1
 8002b0a:	408a      	lsls	r2, r1
 8002b0c:	43d2      	mvns	r2, r2
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4a58      	ldr	r2, [pc, #352]	; (8002c74 <extInt_Config+0xdb8>)
 8002b12:	400b      	ands	r3, r1
 8002b14:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b16:	4b57      	ldr	r3, [pc, #348]	; (8002c74 <extInt_Config+0xdb8>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	7812      	ldrb	r2, [r2, #0]
 8002b20:	4611      	mov	r1, r2
 8002b22:	2201      	movs	r2, #1
 8002b24:	408a      	lsls	r2, r1
 8002b26:	43d2      	mvns	r2, r2
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <extInt_Config+0xdb8>)
 8002b2c:	400b      	ands	r3, r1
 8002b2e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <extInt_Config+0xdb8>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	7812      	ldrb	r2, [r2, #0]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	408a      	lsls	r2, r1
 8002b40:	4611      	mov	r1, r2
 8002b42:	4a4c      	ldr	r2, [pc, #304]	; (8002c74 <extInt_Config+0xdb8>)
 8002b44:	430b      	orrs	r3, r1
 8002b46:	60d3      	str	r3, [r2, #12]
 8002b48:	e000      	b.n	8002b4c <extInt_Config+0xc90>

	}
	else
	{
		__NOP();
 8002b4a:	bf00      	nop
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b4c:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <extInt_Config+0xdb8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	4611      	mov	r1, r2
 8002b58:	2201      	movs	r2, #1
 8002b5a:	408a      	lsls	r2, r1
 8002b5c:	43d2      	mvns	r2, r2
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4a44      	ldr	r2, [pc, #272]	; (8002c74 <extInt_Config+0xdb8>)
 8002b62:	400b      	ands	r3, r1
 8002b64:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <extInt_Config+0xdb8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	4611      	mov	r1, r2
 8002b72:	2201      	movs	r2, #1
 8002b74:	408a      	lsls	r2, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <extInt_Config+0xdb8>)
 8002b7a:	430b      	orrs	r3, r1
 8002b7c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7e:	b672      	cpsid	i
}
 8002b80:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b0f      	cmp	r3, #15
 8002b8a:	d863      	bhi.n	8002c54 <extInt_Config+0xd98>
 8002b8c:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <extInt_Config+0xcd8>)
 8002b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b92:	bf00      	nop
 8002b94:	08002bd5 	.word	0x08002bd5
 8002b98:	08002bdd 	.word	0x08002bdd
 8002b9c:	08002be5 	.word	0x08002be5
 8002ba0:	08002bed 	.word	0x08002bed
 8002ba4:	08002bf5 	.word	0x08002bf5
 8002ba8:	08002bfd 	.word	0x08002bfd
 8002bac:	08002c05 	.word	0x08002c05
 8002bb0:	08002c0d 	.word	0x08002c0d
 8002bb4:	08002c15 	.word	0x08002c15
 8002bb8:	08002c1d 	.word	0x08002c1d
 8002bbc:	08002c25 	.word	0x08002c25
 8002bc0:	08002c2d 	.word	0x08002c2d
 8002bc4:	08002c35 	.word	0x08002c35
 8002bc8:	08002c3d 	.word	0x08002c3d
 8002bcc:	08002c45 	.word	0x08002c45
 8002bd0:	08002c4d 	.word	0x08002c4d
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8002bd4:	2006      	movs	r0, #6
 8002bd6:	f7ff f953 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002bda:	e03c      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8002bdc:	2007      	movs	r0, #7
 8002bde:	f7ff f94f 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002be2:	e038      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8002be4:	2008      	movs	r0, #8
 8002be6:	f7ff f94b 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002bea:	e034      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8002bec:	2009      	movs	r0, #9
 8002bee:	f7ff f947 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002bf2:	e030      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8002bf4:	200a      	movs	r0, #10
 8002bf6:	f7ff f943 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002bfa:	e02c      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bfc:	2017      	movs	r0, #23
 8002bfe:	f7ff f93f 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c02:	e028      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c04:	2017      	movs	r0, #23
 8002c06:	f7ff f93b 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c0a:	e024      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c0c:	2017      	movs	r0, #23
 8002c0e:	f7ff f937 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c12:	e020      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c14:	2017      	movs	r0, #23
 8002c16:	f7ff f933 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c1a:	e01c      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c1c:	2017      	movs	r0, #23
 8002c1e:	f7ff f92f 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c22:	e018      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c24:	2028      	movs	r0, #40	; 0x28
 8002c26:	f7ff f92b 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c2a:	e014      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c2c:	2028      	movs	r0, #40	; 0x28
 8002c2e:	f7ff f927 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c32:	e010      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c34:	2028      	movs	r0, #40	; 0x28
 8002c36:	f7ff f923 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c3a:	e00c      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c3c:	2028      	movs	r0, #40	; 0x28
 8002c3e:	f7ff f91f 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c42:	e008      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c44:	2028      	movs	r0, #40	; 0x28
 8002c46:	f7ff f91b 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c4a:	e004      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c4c:	2028      	movs	r0, #40	; 0x28
 8002c4e:	f7ff f917 	bl	8001e80 <__NVIC_EnableIRQ>
		break;
 8002c52:	e000      	b.n	8002c56 <extInt_Config+0xd9a>
	}

	default: {
		break;
 8002c54:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002c56:	b662      	cpsie	i
}
 8002c58:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40020c00 	.word	0x40020c00
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40021c00 	.word	0x40021c00
 8002c74:	40013c00 	.word	0x40013c00

08002c78 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
	__NOP();
 8002c7c:	bf00      	nop
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
	__NOP();
 8002c8c:	bf00      	nop
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
	__NOP();
 8002c9c:	bf00      	nop
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	__NOP();
 8002cac:	bf00      	nop
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
	__NOP();
 8002cbc:	bf00      	nop
}
 8002cbe:	bf00      	nop
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
	__NOP();
 8002ccc:	bf00      	nop
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
	__NOP();
 8002cdc:	bf00      	nop
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
	__NOP();
 8002cec:	bf00      	nop
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
	__NOP();
 8002cfc:	bf00      	nop
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
	__NOP();
 8002d0c:	bf00      	nop
}
 8002d0e:	bf00      	nop
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
	__NOP();
 8002d1c:	bf00      	nop
}
 8002d1e:	bf00      	nop
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
	__NOP();
 8002d2c:	bf00      	nop
}
 8002d2e:	bf00      	nop
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
	__NOP();
 8002d3c:	bf00      	nop
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
	__NOP();
 8002d4c:	bf00      	nop
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <EXTI0_IRQHandler+0x28>)
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <EXTI0_IRQHandler+0x28>)
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <EXTI0_IRQHandler+0x28>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8002d74:	f7ff ff80 	bl	8002c78 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8002d78:	e000      	b.n	8002d7c <EXTI0_IRQHandler+0x24>
		__NOP();
 8002d7a:	bf00      	nop
}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40013c00 	.word	0x40013c00

08002d84 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <EXTI1_IRQHandler+0x28>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <EXTI1_IRQHandler+0x28>)
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <EXTI1_IRQHandler+0x28>)
 8002d9a:	f043 0302 	orr.w	r3, r3, #2
 8002d9e:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8002da0:	f7fe fbba 	bl	8001518 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8002da4:	e000      	b.n	8002da8 <EXTI1_IRQHandler+0x24>
		__NOP();
 8002da6:	bf00      	nop
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40013c00 	.word	0x40013c00

08002db0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <EXTI2_IRQHandler+0x28>)
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <EXTI2_IRQHandler+0x28>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <EXTI2_IRQHandler+0x28>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8002dcc:	f7ff ff5c 	bl	8002c88 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8002dd0:	e000      	b.n	8002dd4 <EXTI2_IRQHandler+0x24>
		__NOP();
 8002dd2:	bf00      	nop
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40013c00 	.word	0x40013c00

08002ddc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <EXTI3_IRQHandler+0x28>)
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <EXTI3_IRQHandler+0x28>)
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <EXTI3_IRQHandler+0x28>)
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8002df8:	f7fe fb9e 	bl	8001538 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8002dfc:	e000      	b.n	8002e00 <EXTI3_IRQHandler+0x24>
		__NOP();
 8002dfe:	bf00      	nop
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <EXTI4_IRQHandler+0x28>)
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <EXTI4_IRQHandler+0x28>)
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <EXTI4_IRQHandler+0x28>)
 8002e1e:	f043 0310 	orr.w	r3, r3, #16
 8002e22:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8002e24:	f7ff ff38 	bl	8002c98 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8002e28:	e000      	b.n	8002e2c <EXTI4_IRQHandler+0x24>
		__NOP();
 8002e2a:	bf00      	nop
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40013c00 	.word	0x40013c00

08002e34 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8002e38:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8002e44:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e4a:	f043 0320 	orr.w	r3, r3, #32
 8002e4e:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8002e50:	f7ff ff2a 	bl	8002ca8 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8002e54:	e03c      	b.n	8002ed0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e6c:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8002e6e:	f7ff ff23 	bl	8002cb8 <callback_extInt6>
}
 8002e72:	e02d      	b.n	8002ed0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8a:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8002e8c:	f7ff ff1c 	bl	8002cc8 <callback_extInt7>
}
 8002e90:	e01e      	b.n	8002ed0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8002eaa:	f7ff ff15 	bl	8002cd8 <callback_extInt8>
}
 8002eae:	e00f      	b.n	8002ed0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8002eb0:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <EXTI9_5_IRQHandler+0xa0>)
 8002ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec6:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8002ec8:	f7ff ff0e 	bl	8002ce8 <callback_extInt9>
}
 8002ecc:	e000      	b.n	8002ed0 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8002ece:	bf00      	nop
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40013c00 	.word	0x40013c00

08002ed8 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8002edc:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8002ee8:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ef2:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8002ef4:	f7ff ff00 	bl	8002cf8 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8002ef8:	e04b      	b.n	8002f92 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8002efa:	4b27      	ldr	r3, [pc, #156]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f10:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8002f12:	f7ff fef9 	bl	8002d08 <callback_extInt11>
}
 8002f16:	e03c      	b.n	8002f92 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8002f18:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8002f24:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f2e:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8002f30:	f7ff fef2 	bl	8002d18 <callback_extInt12>
}
 8002f34:	e02d      	b.n	8002f92 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8002f36:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f4c:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8002f4e:	f7ff feeb 	bl	8002d28 <callback_extInt13>
}
 8002f52:	e01e      	b.n	8002f92 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8002f54:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f6a:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8002f6c:	f7ff fee4 	bl	8002d38 <callback_extInt14>
}
 8002f70:	e00f      	b.n	8002f92 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <EXTI15_10_IRQHandler+0xc0>)
 8002f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f88:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8002f8a:	f7ff fedd 	bl	8002d48 <callback_extInt15>
}
 8002f8e:	e000      	b.n	8002f92 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8002f90:	bf00      	nop
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40013c00 	.word	0x40013c00

08002f9c <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	70fb      	strb	r3, [r7, #3]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70bb      	strb	r3, [r7, #2]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	78ba      	ldrb	r2, [r7, #2]
 8002fc0:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	787a      	ldrb	r2, [r7, #1]
 8002fc6:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7c3a      	ldrb	r2, [r7, #16]
 8002fcc:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7d3a      	ldrb	r2, [r7, #20]
 8002fd2:	715a      	strb	r2, [r3, #5]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a88      	ldr	r2, [pc, #544]	; (8003218 <GPIO_Config+0x238>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d106      	bne.n	8003008 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8002ffa:	4b88      	ldr	r3, [pc, #544]	; (800321c <GPIO_Config+0x23c>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a87      	ldr	r2, [pc, #540]	; (800321c <GPIO_Config+0x23c>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	e03a      	b.n	800307e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a84      	ldr	r2, [pc, #528]	; (8003220 <GPIO_Config+0x240>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d106      	bne.n	8003020 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003012:	4b82      	ldr	r3, [pc, #520]	; (800321c <GPIO_Config+0x23c>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a81      	ldr	r2, [pc, #516]	; (800321c <GPIO_Config+0x23c>)
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	e02e      	b.n	800307e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a7f      	ldr	r2, [pc, #508]	; (8003224 <GPIO_Config+0x244>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d106      	bne.n	8003038 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800302a:	4b7c      	ldr	r3, [pc, #496]	; (800321c <GPIO_Config+0x23c>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a7b      	ldr	r2, [pc, #492]	; (800321c <GPIO_Config+0x23c>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	e022      	b.n	800307e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a7a      	ldr	r2, [pc, #488]	; (8003228 <GPIO_Config+0x248>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d106      	bne.n	8003050 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003042:	4b76      	ldr	r3, [pc, #472]	; (800321c <GPIO_Config+0x23c>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a75      	ldr	r2, [pc, #468]	; (800321c <GPIO_Config+0x23c>)
 8003048:	f043 0308 	orr.w	r3, r3, #8
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	e016      	b.n	800307e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a75      	ldr	r2, [pc, #468]	; (800322c <GPIO_Config+0x24c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d106      	bne.n	8003068 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800305a:	4b70      	ldr	r3, [pc, #448]	; (800321c <GPIO_Config+0x23c>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a6f      	ldr	r2, [pc, #444]	; (800321c <GPIO_Config+0x23c>)
 8003060:	f043 0310 	orr.w	r3, r3, #16
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	e00a      	b.n	800307e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a70      	ldr	r2, [pc, #448]	; (8003230 <GPIO_Config+0x250>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d105      	bne.n	800307e <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003072:	4b6a      	ldr	r3, [pc, #424]	; (800321c <GPIO_Config+0x23c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	4a69      	ldr	r2, [pc, #420]	; (800321c <GPIO_Config+0x23c>)
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	2103      	movs	r1, #3
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	4619      	mov	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	400a      	ands	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	789b      	ldrb	r3, [r3, #2]
 80030c2:	461a      	mov	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	2301      	movs	r3, #1
 80030dc:	408b      	lsls	r3, r1
 80030de:	43db      	mvns	r3, r3
 80030e0:	4619      	mov	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	400a      	ands	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	78db      	ldrb	r3, [r3, #3]
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	2103      	movs	r1, #3
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	43db      	mvns	r3, r3
 8003120:	4619      	mov	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	400a      	ands	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	6899      	ldr	r1, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	430a      	orrs	r2, r1
 8003138:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	791b      	ldrb	r3, [r3, #4]
 800313e:	461a      	mov	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	2103      	movs	r1, #3
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43db      	mvns	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	400a      	ands	r2, r1
 8003168:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	68d9      	ldr	r1, [r3, #12]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	430a      	orrs	r2, r1
 8003178:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d143      	bne.n	800320a <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b07      	cmp	r3, #7
 8003188:	d81f      	bhi.n	80031ca <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	210f      	movs	r1, #15
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	4619      	mov	r1, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	400a      	ands	r2, r1
 80031aa:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	795b      	ldrb	r3, [r3, #5]
 80031b6:	4619      	mov	r1, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 80031c8:	e01f      	b.n	800320a <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	3b08      	subs	r3, #8
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031da:	210f      	movs	r1, #15
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4619      	mov	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	400a      	ands	r2, r1
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	795b      	ldrb	r3, [r3, #5]
 80031f8:	4619      	mov	r1, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	4619      	mov	r1, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	430a      	orrs	r2, r1
 8003208:	625a      	str	r2, [r3, #36]	; 0x24
}
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40020000 	.word	0x40020000
 800321c:	40023800 	.word	0x40023800
 8003220:	40020400 	.word	0x40020400
 8003224:	40020800 	.word	0x40020800
 8003228:	40020c00 	.word	0x40020c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40021c00 	.word	0x40021c00

08003234 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10d      	bne.n	8003262 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	2301      	movs	r3, #1
 8003254:	408b      	lsls	r3, r1
 8003256:	4619      	mov	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	430a      	orrs	r2, r1
 800325e:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8003260:	e00d      	b.n	800327e <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	3310      	adds	r3, #16
 800326e:	2101      	movs	r1, #1
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	4619      	mov	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	430a      	orrs	r2, r1
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	2301      	movs	r3, #1
 80032a0:	408b      	lsls	r3, r1
 80032a2:	4619      	mov	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	404a      	eors	r2, r1
 80032aa:	615a      	str	r2, [r3, #20]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 80032c2:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <getConfigPLL+0x30>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d103      	bne.n	80032d6 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <getConfigPLL+0x34>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	71fb      	strb	r3, [r7, #7]
 80032d4:	e001      	b.n	80032da <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 80032d6:	2310      	movs	r3, #16
 80032d8:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 80032da:	79fb      	ldrb	r3, [r7, #7]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40023800 	.word	0x40023800
 80032ec:	200003c8 	.word	0x200003c8

080032f0 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80032f6:	f7ff ffdf 	bl	80032b8 <getConfigPLL>
 80032fa:	4603      	mov	r3, r0
 80032fc:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80032fe:	2300      	movs	r3, #0
 8003300:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8003302:	79bb      	ldrb	r3, [r7, #6]
 8003304:	2b31      	cmp	r3, #49	; 0x31
 8003306:	d802      	bhi.n	800330e <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8003308:	79bb      	ldrb	r3, [r7, #6]
 800330a:	71fb      	strb	r3, [r7, #7]
 800330c:	e002      	b.n	8003314 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 800330e:	79bb      	ldrb	r3, [r7, #6]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8003314:	79fb      	ldrb	r3, [r7, #7]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d106      	bne.n	8003340 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003332:	4b81      	ldr	r3, [pc, #516]	; (8003538 <pwm_Config+0x218>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a80      	ldr	r2, [pc, #512]	; (8003538 <pwm_Config+0x218>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
 800333e:	e024      	b.n	800338a <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	4a7d      	ldr	r2, [pc, #500]	; (800353c <pwm_Config+0x21c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d106      	bne.n	8003358 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800334a:	4b7b      	ldr	r3, [pc, #492]	; (8003538 <pwm_Config+0x218>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a7a      	ldr	r2, [pc, #488]	; (8003538 <pwm_Config+0x218>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	e018      	b.n	800338a <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a78      	ldr	r2, [pc, #480]	; (8003540 <pwm_Config+0x220>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d106      	bne.n	8003370 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003362:	4b75      	ldr	r3, [pc, #468]	; (8003538 <pwm_Config+0x218>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a74      	ldr	r2, [pc, #464]	; (8003538 <pwm_Config+0x218>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	e00c      	b.n	800338a <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4a73      	ldr	r2, [pc, #460]	; (8003544 <pwm_Config+0x224>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d106      	bne.n	8003388 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800337a:	4b6f      	ldr	r3, [pc, #444]	; (8003538 <pwm_Config+0x218>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a6e      	ldr	r2, [pc, #440]	; (8003538 <pwm_Config+0x218>)
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	e000      	b.n	800338a <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8003388:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa4c 	bl	8003828 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b03      	cmp	r3, #3
 8003396:	f200 8118 	bhi.w	80035ca <pwm_Config+0x2aa>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <pwm_Config+0x80>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	08003433 	.word	0x08003433
 80033a8:	080034b5 	.word	0x080034b5
 80033ac:	08003549 	.word	0x08003549
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	699a      	ldr	r2, [r3, #24]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f022 0203 	bic.w	r2, r2, #3
 80033be:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80033ce:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80033de:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	699a      	ldr	r2, [r3, #24]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f022 0208 	bic.w	r2, r2, #8
 80033ee:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f042 0208 	orr.w	r2, r2, #8
 80033fe:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f042 0204 	orr.w	r2, r2, #4
 800341e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342e:	619a      	str	r2, [r3, #24]

		break;
 8003430:	e0cc      	b.n	80035cc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f022 0203 	bic.w	r2, r2, #3
 8003440:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003450:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003460:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003470:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003480:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	699a      	ldr	r2, [r3, #24]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003490:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	699a      	ldr	r2, [r3, #24]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	699a      	ldr	r2, [r3, #24]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b0:	619a      	str	r2, [r3, #24]

		break;
 80034b2:	e08b      	b.n	80035cc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f022 0203 	bic.w	r2, r2, #3
 80034c2:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80034d2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80034e2:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f022 0208 	bic.w	r2, r2, #8
 80034f2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f042 0208 	orr.w	r2, r2, #8
 8003502:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f022 0204 	bic.w	r2, r2, #4
 8003512:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f042 0204 	orr.w	r2, r2, #4
 8003522:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003532:	61da      	str	r2, [r3, #28]

		break;
 8003534:	e04a      	b.n	80035cc <pwm_Config+0x2ac>
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003556:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	69da      	ldr	r2, [r3, #28]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003566:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003576:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003586:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003596:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	69da      	ldr	r2, [r3, #28]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035b6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035c6:	61da      	str	r2, [r3, #28]

		break;
 80035c8:	e000      	b.n	80035cc <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 80035ca:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	791b      	ldrb	r3, [r3, #4]
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f896 	bl	8003704 <statusPolarityPWM>

}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d87f      	bhi.n	80036f4 <statusInOutPWM+0x114>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <statusInOutPWM+0x1c>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	08003647 	.word	0x08003647
 8003604:	08003681 	.word	0x08003681
 8003608:	080036bb 	.word	0x080036bb
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d110      	bne.n	8003634 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	6a1a      	ldr	r2, [r3, #32]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f022 0201 	bic.w	r2, r2, #1
 8003620:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	6a1a      	ldr	r2, [r3, #32]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8003632:	e060      	b.n	80036f6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	6a1a      	ldr	r2, [r3, #32]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	621a      	str	r2, [r3, #32]
		break;
 8003644:	e057      	b.n	80036f6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d110      	bne.n	800366e <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f022 0210 	bic.w	r2, r2, #16
 800365a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f042 0210 	orr.w	r2, r2, #16
 800366a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 800366c:	e043      	b.n	80036f6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	6a1a      	ldr	r2, [r3, #32]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f022 0210 	bic.w	r2, r2, #16
 800367c:	621a      	str	r2, [r3, #32]
		break;
 800367e:	e03a      	b.n	80036f6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8003680:	78fb      	ldrb	r3, [r7, #3]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d110      	bne.n	80036a8 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	6a1a      	ldr	r2, [r3, #32]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003694:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036a4:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 80036a6:	e026      	b.n	80036f6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036b6:	621a      	str	r2, [r3, #32]
		break;
 80036b8:	e01d      	b.n	80036f6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d110      	bne.n	80036e2 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	6a1a      	ldr	r2, [r3, #32]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036ce:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036de:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 80036e0:	e009      	b.n	80036f6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036f0:	621a      	str	r2, [r3, #32]
		break;
 80036f2:	e000      	b.n	80036f6 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 80036f4:	bf00      	nop
	}
	}
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop

08003704 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d87f      	bhi.n	8003818 <statusPolarityPWM+0x114>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <statusPolarityPWM+0x1c>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003731 	.word	0x08003731
 8003724:	0800376b 	.word	0x0800376b
 8003728:	080037a5 	.word	0x080037a5
 800372c:	080037df 	.word	0x080037df
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d110      	bne.n	8003758 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f022 0202 	bic.w	r2, r2, #2
 8003744:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f042 0202 	orr.w	r2, r2, #2
 8003754:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8003756:	e060      	b.n	800381a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	6a1a      	ldr	r2, [r3, #32]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f022 0202 	bic.w	r2, r2, #2
 8003766:	621a      	str	r2, [r3, #32]
		break;
 8003768:	e057      	b.n	800381a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d110      	bne.n	8003792 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f022 0220 	bic.w	r2, r2, #32
 800377e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	6a1a      	ldr	r2, [r3, #32]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f042 0220 	orr.w	r2, r2, #32
 800378e:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8003790:	e043      	b.n	800381a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f022 0220 	bic.w	r2, r2, #32
 80037a0:	621a      	str	r2, [r3, #32]
		break;
 80037a2:	e03a      	b.n	800381a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d110      	bne.n	80037cc <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037b8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c8:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 80037ca:	e026      	b.n	800381a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	6a1a      	ldr	r2, [r3, #32]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037da:	621a      	str	r2, [r3, #32]
		break;
 80037dc:	e01d      	b.n	800381a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d110      	bne.n	8003806 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037f2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003802:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8003804:	e009      	b.n	800381a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003814:	621a      	str	r2, [r3, #32]
		break;
 8003816:	e000      	b.n	800381a <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8003818:	bf00      	nop
	}
	}

}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop

08003828 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b03      	cmp	r3, #3
 8003836:	d823      	bhi.n	8003880 <setDuttyCycle+0x58>
 8003838:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <setDuttyCycle+0x18>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003851 	.word	0x08003851
 8003844:	0800385d 	.word	0x0800385d
 8003848:	08003869 	.word	0x08003869
 800384c:	08003875 	.word	0x08003875
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	885a      	ldrh	r2, [r3, #2]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800385a:	e012      	b.n	8003882 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	885a      	ldrh	r2, [r3, #2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003866:	e00c      	b.n	8003882 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	885a      	ldrh	r2, [r3, #2]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003872:	e006      	b.n	8003882 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	885a      	ldrh	r2, [r3, #2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800387e:	e000      	b.n	8003882 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8003880:	bf00      	nop
	}
	}

}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop

08003890 <updateDuttyCyclePercentage>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje
void updateDuttyCyclePercentage(PWM_Handler_t *prtPwmHandler, uint8_t newDuttyPercentage)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <updateDuttyCyclePercentage+0x38>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	fb12 f303 	smulbb	r3, r2, r3
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ffb4 	bl	8003828 <setDuttyCycle>
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	51eb851f 	.word	0x51eb851f

080038cc <__NVIC_EnableIRQ>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	db0b      	blt.n	80038f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	f003 021f 	and.w	r2, r3, #31
 80038e4:	4907      	ldr	r1, [pc, #28]	; (8003904 <__NVIC_EnableIRQ+0x38>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2001      	movs	r0, #1
 80038ee:	fa00 f202 	lsl.w	r2, r0, r2
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000e100 	.word	0xe000e100

08003908 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a8f      	ldr	r2, [pc, #572]	; (8003b54 <USART_Config+0x24c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d107      	bne.n	800392a <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 800391a:	4b8f      	ldr	r3, [pc, #572]	; (8003b58 <USART_Config+0x250>)
 800391c:	2210      	movs	r2, #16
 800391e:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a8d      	ldr	r2, [pc, #564]	; (8003b5c <USART_Config+0x254>)
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	e019      	b.n	800395e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4a8c      	ldr	r2, [pc, #560]	; (8003b60 <USART_Config+0x258>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8003934:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <USART_Config+0x250>)
 8003936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800393a:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4a88      	ldr	r2, [pc, #544]	; (8003b64 <USART_Config+0x25c>)
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e00b      	b.n	800395e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	4a87      	ldr	r2, [pc, #540]	; (8003b68 <USART_Config+0x260>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d106      	bne.n	800395e <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8003950:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <USART_Config+0x250>)
 8003952:	2220      	movs	r2, #32
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4a84      	ldr	r2, [pc, #528]	; (8003b6c <USART_Config+0x264>)
 800395c:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2200      	movs	r2, #0
 8003964:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d03d      	beq.n	80039f2 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003984:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003994:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039a4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039b4:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	789b      	ldrb	r3, [r3, #2]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d110      	bne.n	80039e0 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039cc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	e018      	b.n	8003a12 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	e00f      	b.n	8003a12 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a00:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a10:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	78db      	ldrb	r3, [r3, #3]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d84c      	bhi.n	8003ab4 <USART_Config+0x1ac>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <USART_Config+0x118>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a31 	.word	0x08003a31
 8003a24:	08003a4f 	.word	0x08003a4f
 8003a28:	08003a71 	.word	0x08003a71
 8003a2c:	08003a93 	.word	0x08003a93
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a3e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	6912      	ldr	r2, [r2, #16]
 8003a4a:	611a      	str	r2, [r3, #16]
		break;
 8003a4c:	e041      	b.n	8003ad2 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a5c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a6c:	611a      	str	r2, [r3, #16]
		break;
 8003a6e:	e030      	b.n	8003ad2 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a7e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8e:	611a      	str	r2, [r3, #16]
		break;
 8003a90:	e01f      	b.n	8003ad2 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003aa0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003ab0:	611a      	str	r2, [r3, #16]
		break;
 8003ab2:	e00e      	b.n	8003ad2 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ac2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	6912      	ldr	r2, [r2, #16]
 8003ace:	611a      	str	r2, [r3, #16]
		break;
 8003ad0:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4a21      	ldr	r2, [pc, #132]	; (8003b60 <USART_Config+0x258>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d104      	bne.n	8003aea <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8003ae0:	f7ff fc06 	bl	80032f0 <getClockAPB1>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e003      	b.n	8003af2 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8003aea:	f7ff fbe5 	bl	80032b8 <getConfigPLL>
 8003aee:	4603      	mov	r3, r0
 8003af0:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f91f 	bl	8003d44 <getValueBaudRate>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	e02f      	b.n	8003b72 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10b      	bne.n	8003b32 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 f90f 	bl	8003d44 <getValueBaudRate>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	e01f      	b.n	8003b72 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	785b      	ldrb	r3, [r3, #1]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d11a      	bne.n	8003b70 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f8ff 	bl	8003d44 <getValueBaudRate>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	e00f      	b.n	8003b72 <USART_Config+0x26a>
 8003b52:	bf00      	nop
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	200003cc 	.word	0x200003cc
 8003b60:	40004400 	.word	0x40004400
 8003b64:	200003d0 	.word	0x200003d0
 8003b68:	40011400 	.word	0x40011400
 8003b6c:	200003d4 	.word	0x200003d4
	}
	else
	{
		__NOP();
 8003b70:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d866      	bhi.n	8003c48 <USART_Config+0x340>
 8003b7a:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <USART_Config+0x278>)
 8003b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003bb3 	.word	0x08003bb3
 8003b88:	08003bd5 	.word	0x08003bd5
 8003b8c:	08003c17 	.word	0x08003c17
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f022 0208 	bic.w	r2, r2, #8
 8003b9e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f042 0208 	orr.w	r2, r2, #8
 8003bae:	60da      	str	r2, [r3, #12]

		break;
 8003bb0:	e063      	b.n	8003c7a <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f022 0204 	bic.w	r2, r2, #4
 8003bc0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f042 0204 	orr.w	r2, r2, #4
 8003bd0:	60da      	str	r2, [r3, #12]

		break;
 8003bd2:	e052      	b.n	8003c7a <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f022 0208 	bic.w	r2, r2, #8
 8003be2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f042 0208 	orr.w	r2, r2, #8
 8003bf2:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f042 0204 	orr.w	r2, r2, #4
 8003c12:	60da      	str	r2, [r3, #12]


		break;
 8003c14:	e031      	b.n	8003c7a <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c24:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f022 0208 	bic.w	r2, r2, #8
 8003c34:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f022 0204 	bic.w	r2, r2, #4
 8003c44:	60da      	str	r2, [r3, #12]
		break;
 8003c46:	e018      	b.n	8003c7a <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c56:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f022 0208 	bic.w	r2, r2, #8
 8003c66:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f022 0204 	bic.w	r2, r2, #4
 8003c76:	60da      	str	r2, [r3, #12]
		break;
 8003c78:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8003c7a:	b672      	cpsid	i
}
 8003c7c:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	791b      	ldrb	r3, [r3, #4]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d110      	bne.n	8003ca8 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f022 0220 	bic.w	r2, r2, #32
 8003c94:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f042 0220 	orr.w	r2, r2, #32
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	e007      	b.n	8003cb8 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f022 0220 	bic.w	r2, r2, #32
 8003cb6:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	791b      	ldrb	r3, [r3, #4]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d003      	beq.n	8003cc8 <USART_Config+0x3c0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	795b      	ldrb	r3, [r3, #5]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d11a      	bne.n	8003cfe <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <USART_Config+0x430>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d103      	bne.n	8003cda <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8003cd2:	2025      	movs	r0, #37	; 0x25
 8003cd4:	f7ff fdfa 	bl	80038cc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003cd8:	e013      	b.n	8003d02 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <USART_Config+0x434>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d103      	bne.n	8003cec <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8003ce4:	2026      	movs	r0, #38	; 0x26
 8003ce6:	f7ff fdf1 	bl	80038cc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003cea:	e00a      	b.n	8003d02 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <USART_Config+0x438>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d105      	bne.n	8003d02 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8003cf6:	2047      	movs	r0, #71	; 0x47
 8003cf8:	f7ff fde8 	bl	80038cc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003cfc:	e001      	b.n	8003d02 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8003d02:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003d04:	b662      	cpsie	i
}
 8003d06:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d00f      	beq.n	8003d30 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d2e:	60da      	str	r2, [r3, #12]
	}
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40004400 	.word	0x40004400
 8003d40:	40011400 	.word	0x40011400

08003d44 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8003d44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	4601      	mov	r1, r0
 8003d50:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8003d52:	79f9      	ldrb	r1, [r7, #7]
 8003d54:	2000      	movs	r0, #0
 8003d56:	460a      	mov	r2, r1
 8003d58:	4603      	mov	r3, r0
 8003d5a:	491f      	ldr	r1, [pc, #124]	; (8003dd8 <getValueBaudRate+0x94>)
 8003d5c:	fb01 f003 	mul.w	r0, r1, r3
 8003d60:	2102      	movs	r1, #2
 8003d62:	fb02 f101 	mul.w	r1, r2, r1
 8003d66:	4401      	add	r1, r0
 8003d68:	481b      	ldr	r0, [pc, #108]	; (8003dd8 <getValueBaudRate+0x94>)
 8003d6a:	fba2 4500 	umull	r4, r5, r2, r0
 8003d6e:	194b      	adds	r3, r1, r5
 8003d70:	461d      	mov	r5, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	2200      	movs	r2, #0
 8003d78:	4698      	mov	r8, r3
 8003d7a:	4691      	mov	r9, r2
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	464b      	mov	r3, r9
 8003d80:	4620      	mov	r0, r4
 8003d82:	4629      	mov	r1, r5
 8003d84:	f7fc ff98 	bl	8000cb8 <__aeabi_ldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <getValueBaudRate+0x98>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	0b5b      	lsrs	r3, r3, #13
 8003d9a:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003db2:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <getValueBaudRate+0x98>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	0a5b      	lsrs	r3, r3, #9
 8003dba:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	7afb      	ldrb	r3, [r7, #11]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	813b      	strh	r3, [r7, #8]

    return value;
 8003dcc:	893b      	ldrh	r3, [r7, #8]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dd8:	540be400 	.word	0x540be400
 8003ddc:	d1b71759 	.word	0xd1b71759

08003de0 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8003dec:	e000      	b.n	8003df0 <writeChar+0x10>
	{
		__NOP();
 8003dee:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f7      	beq.n	8003dee <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	605a      	str	r2, [r3, #4]

}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8003e20:	e00a      	b.n	8003e38 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ffd7 	bl	8003de0 <writeChar>
		i++;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	3301      	adds	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ee      	bne.n	8003e22 <writeMsg+0x10>
	}
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8003e5a:	4b16      	ldr	r3, [pc, #88]	; (8003eb4 <writeMsgForTXE+0x64>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d111      	bne.n	8003e86 <writeMsgForTXE+0x36>
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <writeMsgForTXE+0x68>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10d      	bne.n	8003e86 <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	4813      	ldr	r0, [pc, #76]	; (8003ebc <writeMsgForTXE+0x6c>)
 8003e6e:	f001 f8a9 	bl	8004fc4 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <writeMsgForTXE+0x70>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 f830 	bl	8003ee4 <interruptionTX>
 8003e84:	e012      	b.n	8003eac <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <writeMsgForTXE+0x74>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	2364      	movs	r3, #100	; 0x64
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	4a0d      	ldr	r2, [pc, #52]	; (8003ec8 <writeMsgForTXE+0x78>)
 8003e94:	4413      	add	r3, r2
 8003e96:	6839      	ldr	r1, [r7, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 f893 	bl	8004fc4 <siprintf>
		inLine++;
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <writeMsgForTXE+0x74>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <writeMsgForTXE+0x74>)
 8003ea8:	701a      	strb	r2, [r3, #0]
	}
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000c12 	.word	0x20000c12
 8003eb8:	20000c11 	.word	0x20000c11
 8003ebc:	200003dc 	.word	0x200003dc
 8003ec0:	20000c13 	.word	0x20000c13
 8003ec4:	20000c10 	.word	0x20000c10
 8003ec8:	20000440 	.word	0x20000440

08003ecc <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	return auxRxData;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <getRxData+0x14>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	200003d8 	.word	0x200003d8

08003ee4 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10c      	bne.n	8003f10 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8003f0e:	e005      	b.n	8003f1c <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
	__NOP();
 8003f2c:	bf00      	nop
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
	__NOP();
 8003f3c:	bf00      	nop
}
 8003f3e:	bf00      	nop
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8003f4c:	4b37      	ldr	r3, [pc, #220]	; (800402c <USART1_IRQHandler+0xe4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8003f5a:	4b34      	ldr	r3, [pc, #208]	; (800402c <USART1_IRQHandler+0xe4>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4b33      	ldr	r3, [pc, #204]	; (8004030 <USART1_IRQHandler+0xe8>)
 8003f64:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8003f66:	f7ff ffdf 	bl	8003f28 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8003f6a:	e05d      	b.n	8004028 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	; (800402c <USART1_IRQHandler+0xe4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d055      	beq.n	8004026 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8003f7a:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <USART1_IRQHandler+0xec>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8003f82:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <USART1_IRQHandler+0xf0>)
 8003f84:	781a      	ldrb	r2, [r3, #0]
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <USART1_IRQHandler+0xe4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <USART1_IRQHandler+0xe4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ffa6 	bl	8003ee4 <interruptionTX>
}
 8003f98:	e046      	b.n	8004028 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <USART1_IRQHandler+0xec>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d142      	bne.n	8004028 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <USART1_IRQHandler+0xf4>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b25      	ldr	r3, [pc, #148]	; (8004040 <USART1_IRQHandler+0xf8>)
 8003faa:	5c9b      	ldrb	r3, [r3, r2]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00e      	beq.n	8003fce <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <USART1_IRQHandler+0xf4>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4b22      	ldr	r3, [pc, #136]	; (8004040 <USART1_IRQHandler+0xf8>)
 8003fb8:	5c9a      	ldrb	r2, [r3, r2]
 8003fba:	4b1c      	ldr	r3, [pc, #112]	; (800402c <USART1_IRQHandler+0xe4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	605a      	str	r2, [r3, #4]
				posChar++;
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	; (800403c <USART1_IRQHandler+0xf4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <USART1_IRQHandler+0xf4>)
 8003fca:	701a      	strb	r2, [r3, #0]
}
 8003fcc:	e02c      	b.n	8004028 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <USART1_IRQHandler+0xfc>)
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <USART1_IRQHandler+0x100>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d215      	bcs.n	8004006 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8003fda:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <USART1_IRQHandler+0xfc>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2364      	movs	r3, #100	; 0x64
 8003fe2:	fb02 f303 	mul.w	r3, r2, r3
 8003fe6:	4a19      	ldr	r2, [pc, #100]	; (800404c <USART1_IRQHandler+0x104>)
 8003fe8:	4413      	add	r3, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	4814      	ldr	r0, [pc, #80]	; (8004040 <USART1_IRQHandler+0xf8>)
 8003fee:	f000 ffe9 	bl	8004fc4 <siprintf>
					posChar = 0;
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <USART1_IRQHandler+0xf4>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8003ff8:	4b12      	ldr	r3, [pc, #72]	; (8004044 <USART1_IRQHandler+0xfc>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <USART1_IRQHandler+0xfc>)
 8004002:	701a      	strb	r2, [r3, #0]
}
 8004004:	e010      	b.n	8004028 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <USART1_IRQHandler+0xe4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2100      	movs	r1, #0
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff69 	bl	8003ee4 <interruptionTX>
					posChar = 0;
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <USART1_IRQHandler+0xf4>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <USART1_IRQHandler+0xfc>)
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <USART1_IRQHandler+0x100>)
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
}
 8004024:	e000      	b.n	8004028 <USART1_IRQHandler+0xe0>
		__NOP();
 8004026:	bf00      	nop
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	200003cc 	.word	0x200003cc
 8004030:	200003d8 	.word	0x200003d8
 8004034:	20000c13 	.word	0x20000c13
 8004038:	200003d9 	.word	0x200003d9
 800403c:	20000c12 	.word	0x20000c12
 8004040:	200003dc 	.word	0x200003dc
 8004044:	20000c11 	.word	0x20000c11
 8004048:	20000c10 	.word	0x20000c10
 800404c:	20000440 	.word	0x20000440

08004050 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8004054:	4b37      	ldr	r3, [pc, #220]	; (8004134 <USART2_IRQHandler+0xe4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8004062:	4b34      	ldr	r3, [pc, #208]	; (8004134 <USART2_IRQHandler+0xe4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	4b33      	ldr	r3, [pc, #204]	; (8004138 <USART2_IRQHandler+0xe8>)
 800406c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 800406e:	f7fd fa45 	bl	80014fc <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004072:	e05d      	b.n	8004130 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <USART2_IRQHandler+0xe4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d055      	beq.n	800412e <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <USART2_IRQHandler+0xec>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <USART2_IRQHandler+0xf0>)
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	4b29      	ldr	r3, [pc, #164]	; (8004134 <USART2_IRQHandler+0xe4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8004094:	4b27      	ldr	r3, [pc, #156]	; (8004134 <USART2_IRQHandler+0xe4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff ff22 	bl	8003ee4 <interruptionTX>
}
 80040a0:	e046      	b.n	8004130 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <USART2_IRQHandler+0xec>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d142      	bne.n	8004130 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <USART2_IRQHandler+0xf4>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <USART2_IRQHandler+0xf8>)
 80040b2:	5c9b      	ldrb	r3, [r3, r2]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00e      	beq.n	80040d6 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 80040b8:	4b22      	ldr	r3, [pc, #136]	; (8004144 <USART2_IRQHandler+0xf4>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <USART2_IRQHandler+0xf8>)
 80040c0:	5c9a      	ldrb	r2, [r3, r2]
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <USART2_IRQHandler+0xe4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
				posChar++;
 80040c8:	4b1e      	ldr	r3, [pc, #120]	; (8004144 <USART2_IRQHandler+0xf4>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b1c      	ldr	r3, [pc, #112]	; (8004144 <USART2_IRQHandler+0xf4>)
 80040d2:	701a      	strb	r2, [r3, #0]
}
 80040d4:	e02c      	b.n	8004130 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80040d6:	4b1d      	ldr	r3, [pc, #116]	; (800414c <USART2_IRQHandler+0xfc>)
 80040d8:	781a      	ldrb	r2, [r3, #0]
 80040da:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <USART2_IRQHandler+0x100>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d215      	bcs.n	800410e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <USART2_IRQHandler+0xfc>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	2364      	movs	r3, #100	; 0x64
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	4a19      	ldr	r2, [pc, #100]	; (8004154 <USART2_IRQHandler+0x104>)
 80040f0:	4413      	add	r3, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	4814      	ldr	r0, [pc, #80]	; (8004148 <USART2_IRQHandler+0xf8>)
 80040f6:	f000 ff65 	bl	8004fc4 <siprintf>
					posChar = 0;
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <USART2_IRQHandler+0xf4>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <USART2_IRQHandler+0xfc>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	3301      	adds	r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	4b10      	ldr	r3, [pc, #64]	; (800414c <USART2_IRQHandler+0xfc>)
 800410a:	701a      	strb	r2, [r3, #0]
}
 800410c:	e010      	b.n	8004130 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <USART2_IRQHandler+0xe4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fee5 	bl	8003ee4 <interruptionTX>
					posChar = 0;
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <USART2_IRQHandler+0xf4>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004120:	4b0a      	ldr	r3, [pc, #40]	; (800414c <USART2_IRQHandler+0xfc>)
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <USART2_IRQHandler+0x100>)
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
}
 800412c:	e000      	b.n	8004130 <USART2_IRQHandler+0xe0>
		__NOP();
 800412e:	bf00      	nop
}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}
 8004134:	200003d0 	.word	0x200003d0
 8004138:	200003d8 	.word	0x200003d8
 800413c:	20000c13 	.word	0x20000c13
 8004140:	200003d9 	.word	0x200003d9
 8004144:	20000c12 	.word	0x20000c12
 8004148:	200003dc 	.word	0x200003dc
 800414c:	20000c11 	.word	0x20000c11
 8004150:	20000c10 	.word	0x20000c10
 8004154:	20000440 	.word	0x20000440

08004158 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800415c:	4b37      	ldr	r3, [pc, #220]	; (800423c <USART6_IRQHandler+0xe4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800416a:	4b34      	ldr	r3, [pc, #208]	; (800423c <USART6_IRQHandler+0xe4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b33      	ldr	r3, [pc, #204]	; (8004240 <USART6_IRQHandler+0xe8>)
 8004174:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8004176:	f7ff fedf 	bl	8003f38 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800417a:	e05d      	b.n	8004238 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 800417c:	4b2f      	ldr	r3, [pc, #188]	; (800423c <USART6_IRQHandler+0xe4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d055      	beq.n	8004236 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800418a:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <USART6_IRQHandler+0xec>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8004192:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <USART6_IRQHandler+0xf0>)
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	4b29      	ldr	r3, [pc, #164]	; (800423c <USART6_IRQHandler+0xe4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800419c:	4b27      	ldr	r3, [pc, #156]	; (800423c <USART6_IRQHandler+0xe4>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fe9e 	bl	8003ee4 <interruptionTX>
}
 80041a8:	e046      	b.n	8004238 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <USART6_IRQHandler+0xec>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d142      	bne.n	8004238 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80041b2:	4b26      	ldr	r3, [pc, #152]	; (800424c <USART6_IRQHandler+0xf4>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <USART6_IRQHandler+0xf8>)
 80041ba:	5c9b      	ldrb	r3, [r3, r2]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 80041c0:	4b22      	ldr	r3, [pc, #136]	; (800424c <USART6_IRQHandler+0xf4>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	4b22      	ldr	r3, [pc, #136]	; (8004250 <USART6_IRQHandler+0xf8>)
 80041c8:	5c9a      	ldrb	r2, [r3, r2]
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <USART6_IRQHandler+0xe4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
				posChar++;
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <USART6_IRQHandler+0xf4>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	4b1c      	ldr	r3, [pc, #112]	; (800424c <USART6_IRQHandler+0xf4>)
 80041da:	701a      	strb	r2, [r3, #0]
}
 80041dc:	e02c      	b.n	8004238 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80041de:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <USART6_IRQHandler+0xfc>)
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <USART6_IRQHandler+0x100>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d215      	bcs.n	8004216 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <USART6_IRQHandler+0xfc>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	2364      	movs	r3, #100	; 0x64
 80041f2:	fb02 f303 	mul.w	r3, r2, r3
 80041f6:	4a19      	ldr	r2, [pc, #100]	; (800425c <USART6_IRQHandler+0x104>)
 80041f8:	4413      	add	r3, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	4814      	ldr	r0, [pc, #80]	; (8004250 <USART6_IRQHandler+0xf8>)
 80041fe:	f000 fee1 	bl	8004fc4 <siprintf>
					posChar = 0;
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <USART6_IRQHandler+0xf4>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <USART6_IRQHandler+0xfc>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <USART6_IRQHandler+0xfc>)
 8004212:	701a      	strb	r2, [r3, #0]
}
 8004214:	e010      	b.n	8004238 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <USART6_IRQHandler+0xe4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fe61 	bl	8003ee4 <interruptionTX>
					posChar = 0;
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <USART6_IRQHandler+0xf4>)
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <USART6_IRQHandler+0xfc>)
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <USART6_IRQHandler+0x100>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
}
 8004234:	e000      	b.n	8004238 <USART6_IRQHandler+0xe0>
		__NOP();
 8004236:	bf00      	nop
}
 8004238:	bf00      	nop
 800423a:	bd80      	pop	{r7, pc}
 800423c:	200003d4 	.word	0x200003d4
 8004240:	200003d8 	.word	0x200003d8
 8004244:	20000c13 	.word	0x20000c13
 8004248:	200003d9 	.word	0x200003d9
 800424c:	20000c12 	.word	0x20000c12
 8004250:	200003dc 	.word	0x200003dc
 8004254:	20000c11 	.word	0x20000c11
 8004258:	20000c10 	.word	0x20000c10
 800425c:	20000440 	.word	0x20000440

08004260 <__errno>:
 8004260:	4b01      	ldr	r3, [pc, #4]	; (8004268 <__errno+0x8>)
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	2000000c 	.word	0x2000000c

0800426c <__libc_init_array>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4d0d      	ldr	r5, [pc, #52]	; (80042a4 <__libc_init_array+0x38>)
 8004270:	4c0d      	ldr	r4, [pc, #52]	; (80042a8 <__libc_init_array+0x3c>)
 8004272:	1b64      	subs	r4, r4, r5
 8004274:	10a4      	asrs	r4, r4, #2
 8004276:	2600      	movs	r6, #0
 8004278:	42a6      	cmp	r6, r4
 800427a:	d109      	bne.n	8004290 <__libc_init_array+0x24>
 800427c:	4d0b      	ldr	r5, [pc, #44]	; (80042ac <__libc_init_array+0x40>)
 800427e:	4c0c      	ldr	r4, [pc, #48]	; (80042b0 <__libc_init_array+0x44>)
 8004280:	f005 f8c8 	bl	8009414 <_init>
 8004284:	1b64      	subs	r4, r4, r5
 8004286:	10a4      	asrs	r4, r4, #2
 8004288:	2600      	movs	r6, #0
 800428a:	42a6      	cmp	r6, r4
 800428c:	d105      	bne.n	800429a <__libc_init_array+0x2e>
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	f855 3b04 	ldr.w	r3, [r5], #4
 8004294:	4798      	blx	r3
 8004296:	3601      	adds	r6, #1
 8004298:	e7ee      	b.n	8004278 <__libc_init_array+0xc>
 800429a:	f855 3b04 	ldr.w	r3, [r5], #4
 800429e:	4798      	blx	r3
 80042a0:	3601      	adds	r6, #1
 80042a2:	e7f2      	b.n	800428a <__libc_init_array+0x1e>
 80042a4:	08009c14 	.word	0x08009c14
 80042a8:	08009c14 	.word	0x08009c14
 80042ac:	08009c14 	.word	0x08009c14
 80042b0:	08009c18 	.word	0x08009c18

080042b4 <memset>:
 80042b4:	4402      	add	r2, r0
 80042b6:	4603      	mov	r3, r0
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d100      	bne.n	80042be <memset+0xa>
 80042bc:	4770      	bx	lr
 80042be:	f803 1b01 	strb.w	r1, [r3], #1
 80042c2:	e7f9      	b.n	80042b8 <memset+0x4>

080042c4 <__cvt>:
 80042c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	ec55 4b10 	vmov	r4, r5, d0
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	460e      	mov	r6, r1
 80042d0:	4619      	mov	r1, r3
 80042d2:	462b      	mov	r3, r5
 80042d4:	bfbb      	ittet	lt
 80042d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042da:	461d      	movlt	r5, r3
 80042dc:	2300      	movge	r3, #0
 80042de:	232d      	movlt	r3, #45	; 0x2d
 80042e0:	700b      	strb	r3, [r1, #0]
 80042e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042e8:	4691      	mov	r9, r2
 80042ea:	f023 0820 	bic.w	r8, r3, #32
 80042ee:	bfbc      	itt	lt
 80042f0:	4622      	movlt	r2, r4
 80042f2:	4614      	movlt	r4, r2
 80042f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042f8:	d005      	beq.n	8004306 <__cvt+0x42>
 80042fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042fe:	d100      	bne.n	8004302 <__cvt+0x3e>
 8004300:	3601      	adds	r6, #1
 8004302:	2102      	movs	r1, #2
 8004304:	e000      	b.n	8004308 <__cvt+0x44>
 8004306:	2103      	movs	r1, #3
 8004308:	ab03      	add	r3, sp, #12
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	ab02      	add	r3, sp, #8
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	ec45 4b10 	vmov	d0, r4, r5
 8004314:	4653      	mov	r3, sl
 8004316:	4632      	mov	r2, r6
 8004318:	f001 fe42 	bl	8005fa0 <_dtoa_r>
 800431c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004320:	4607      	mov	r7, r0
 8004322:	d102      	bne.n	800432a <__cvt+0x66>
 8004324:	f019 0f01 	tst.w	r9, #1
 8004328:	d022      	beq.n	8004370 <__cvt+0xac>
 800432a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800432e:	eb07 0906 	add.w	r9, r7, r6
 8004332:	d110      	bne.n	8004356 <__cvt+0x92>
 8004334:	783b      	ldrb	r3, [r7, #0]
 8004336:	2b30      	cmp	r3, #48	; 0x30
 8004338:	d10a      	bne.n	8004350 <__cvt+0x8c>
 800433a:	2200      	movs	r2, #0
 800433c:	2300      	movs	r3, #0
 800433e:	4620      	mov	r0, r4
 8004340:	4629      	mov	r1, r5
 8004342:	f7fc fbd9 	bl	8000af8 <__aeabi_dcmpeq>
 8004346:	b918      	cbnz	r0, 8004350 <__cvt+0x8c>
 8004348:	f1c6 0601 	rsb	r6, r6, #1
 800434c:	f8ca 6000 	str.w	r6, [sl]
 8004350:	f8da 3000 	ldr.w	r3, [sl]
 8004354:	4499      	add	r9, r3
 8004356:	2200      	movs	r2, #0
 8004358:	2300      	movs	r3, #0
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fc fbcb 	bl	8000af8 <__aeabi_dcmpeq>
 8004362:	b108      	cbz	r0, 8004368 <__cvt+0xa4>
 8004364:	f8cd 900c 	str.w	r9, [sp, #12]
 8004368:	2230      	movs	r2, #48	; 0x30
 800436a:	9b03      	ldr	r3, [sp, #12]
 800436c:	454b      	cmp	r3, r9
 800436e:	d307      	bcc.n	8004380 <__cvt+0xbc>
 8004370:	9b03      	ldr	r3, [sp, #12]
 8004372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004374:	1bdb      	subs	r3, r3, r7
 8004376:	4638      	mov	r0, r7
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	b004      	add	sp, #16
 800437c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004380:	1c59      	adds	r1, r3, #1
 8004382:	9103      	str	r1, [sp, #12]
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e7f0      	b.n	800436a <__cvt+0xa6>

08004388 <__exponent>:
 8004388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800438a:	4603      	mov	r3, r0
 800438c:	2900      	cmp	r1, #0
 800438e:	bfb8      	it	lt
 8004390:	4249      	neglt	r1, r1
 8004392:	f803 2b02 	strb.w	r2, [r3], #2
 8004396:	bfb4      	ite	lt
 8004398:	222d      	movlt	r2, #45	; 0x2d
 800439a:	222b      	movge	r2, #43	; 0x2b
 800439c:	2909      	cmp	r1, #9
 800439e:	7042      	strb	r2, [r0, #1]
 80043a0:	dd2a      	ble.n	80043f8 <__exponent+0x70>
 80043a2:	f10d 0407 	add.w	r4, sp, #7
 80043a6:	46a4      	mov	ip, r4
 80043a8:	270a      	movs	r7, #10
 80043aa:	46a6      	mov	lr, r4
 80043ac:	460a      	mov	r2, r1
 80043ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80043b2:	fb07 1516 	mls	r5, r7, r6, r1
 80043b6:	3530      	adds	r5, #48	; 0x30
 80043b8:	2a63      	cmp	r2, #99	; 0x63
 80043ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80043be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043c2:	4631      	mov	r1, r6
 80043c4:	dcf1      	bgt.n	80043aa <__exponent+0x22>
 80043c6:	3130      	adds	r1, #48	; 0x30
 80043c8:	f1ae 0502 	sub.w	r5, lr, #2
 80043cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043d0:	1c44      	adds	r4, r0, #1
 80043d2:	4629      	mov	r1, r5
 80043d4:	4561      	cmp	r1, ip
 80043d6:	d30a      	bcc.n	80043ee <__exponent+0x66>
 80043d8:	f10d 0209 	add.w	r2, sp, #9
 80043dc:	eba2 020e 	sub.w	r2, r2, lr
 80043e0:	4565      	cmp	r5, ip
 80043e2:	bf88      	it	hi
 80043e4:	2200      	movhi	r2, #0
 80043e6:	4413      	add	r3, r2
 80043e8:	1a18      	subs	r0, r3, r0
 80043ea:	b003      	add	sp, #12
 80043ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043f6:	e7ed      	b.n	80043d4 <__exponent+0x4c>
 80043f8:	2330      	movs	r3, #48	; 0x30
 80043fa:	3130      	adds	r1, #48	; 0x30
 80043fc:	7083      	strb	r3, [r0, #2]
 80043fe:	70c1      	strb	r1, [r0, #3]
 8004400:	1d03      	adds	r3, r0, #4
 8004402:	e7f1      	b.n	80043e8 <__exponent+0x60>

08004404 <_printf_float>:
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	ed2d 8b02 	vpush	{d8}
 800440c:	b08d      	sub	sp, #52	; 0x34
 800440e:	460c      	mov	r4, r1
 8004410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004414:	4616      	mov	r6, r2
 8004416:	461f      	mov	r7, r3
 8004418:	4605      	mov	r5, r0
 800441a:	f002 ff1f 	bl	800725c <_localeconv_r>
 800441e:	f8d0 a000 	ldr.w	sl, [r0]
 8004422:	4650      	mov	r0, sl
 8004424:	f7fb fee6 	bl	80001f4 <strlen>
 8004428:	2300      	movs	r3, #0
 800442a:	930a      	str	r3, [sp, #40]	; 0x28
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	9305      	str	r3, [sp, #20]
 8004430:	f8d8 3000 	ldr.w	r3, [r8]
 8004434:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004438:	3307      	adds	r3, #7
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	f103 0208 	add.w	r2, r3, #8
 8004442:	f8c8 2000 	str.w	r2, [r8]
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800444e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004456:	9307      	str	r3, [sp, #28]
 8004458:	f8cd 8018 	str.w	r8, [sp, #24]
 800445c:	ee08 0a10 	vmov	s16, r0
 8004460:	4b9f      	ldr	r3, [pc, #636]	; (80046e0 <_printf_float+0x2dc>)
 8004462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	f7fc fb77 	bl	8000b5c <__aeabi_dcmpun>
 800446e:	bb88      	cbnz	r0, 80044d4 <_printf_float+0xd0>
 8004470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004474:	4b9a      	ldr	r3, [pc, #616]	; (80046e0 <_printf_float+0x2dc>)
 8004476:	f04f 32ff 	mov.w	r2, #4294967295
 800447a:	f7fc fb51 	bl	8000b20 <__aeabi_dcmple>
 800447e:	bb48      	cbnz	r0, 80044d4 <_printf_float+0xd0>
 8004480:	2200      	movs	r2, #0
 8004482:	2300      	movs	r3, #0
 8004484:	4640      	mov	r0, r8
 8004486:	4649      	mov	r1, r9
 8004488:	f7fc fb40 	bl	8000b0c <__aeabi_dcmplt>
 800448c:	b110      	cbz	r0, 8004494 <_printf_float+0x90>
 800448e:	232d      	movs	r3, #45	; 0x2d
 8004490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004494:	4b93      	ldr	r3, [pc, #588]	; (80046e4 <_printf_float+0x2e0>)
 8004496:	4894      	ldr	r0, [pc, #592]	; (80046e8 <_printf_float+0x2e4>)
 8004498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800449c:	bf94      	ite	ls
 800449e:	4698      	movls	r8, r3
 80044a0:	4680      	movhi	r8, r0
 80044a2:	2303      	movs	r3, #3
 80044a4:	6123      	str	r3, [r4, #16]
 80044a6:	9b05      	ldr	r3, [sp, #20]
 80044a8:	f023 0204 	bic.w	r2, r3, #4
 80044ac:	6022      	str	r2, [r4, #0]
 80044ae:	f04f 0900 	mov.w	r9, #0
 80044b2:	9700      	str	r7, [sp, #0]
 80044b4:	4633      	mov	r3, r6
 80044b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80044b8:	4621      	mov	r1, r4
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 f9d8 	bl	8004870 <_printf_common>
 80044c0:	3001      	adds	r0, #1
 80044c2:	f040 8090 	bne.w	80045e6 <_printf_float+0x1e2>
 80044c6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ca:	b00d      	add	sp, #52	; 0x34
 80044cc:	ecbd 8b02 	vpop	{d8}
 80044d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d4:	4642      	mov	r2, r8
 80044d6:	464b      	mov	r3, r9
 80044d8:	4640      	mov	r0, r8
 80044da:	4649      	mov	r1, r9
 80044dc:	f7fc fb3e 	bl	8000b5c <__aeabi_dcmpun>
 80044e0:	b140      	cbz	r0, 80044f4 <_printf_float+0xf0>
 80044e2:	464b      	mov	r3, r9
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bfbc      	itt	lt
 80044e8:	232d      	movlt	r3, #45	; 0x2d
 80044ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044ee:	487f      	ldr	r0, [pc, #508]	; (80046ec <_printf_float+0x2e8>)
 80044f0:	4b7f      	ldr	r3, [pc, #508]	; (80046f0 <_printf_float+0x2ec>)
 80044f2:	e7d1      	b.n	8004498 <_printf_float+0x94>
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80044fa:	9206      	str	r2, [sp, #24]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	d13f      	bne.n	8004580 <_printf_float+0x17c>
 8004500:	2306      	movs	r3, #6
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	9b05      	ldr	r3, [sp, #20]
 8004506:	6861      	ldr	r1, [r4, #4]
 8004508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800450c:	2300      	movs	r3, #0
 800450e:	9303      	str	r3, [sp, #12]
 8004510:	ab0a      	add	r3, sp, #40	; 0x28
 8004512:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004516:	ab09      	add	r3, sp, #36	; 0x24
 8004518:	ec49 8b10 	vmov	d0, r8, r9
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	6022      	str	r2, [r4, #0]
 8004520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004524:	4628      	mov	r0, r5
 8004526:	f7ff fecd 	bl	80042c4 <__cvt>
 800452a:	9b06      	ldr	r3, [sp, #24]
 800452c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800452e:	2b47      	cmp	r3, #71	; 0x47
 8004530:	4680      	mov	r8, r0
 8004532:	d108      	bne.n	8004546 <_printf_float+0x142>
 8004534:	1cc8      	adds	r0, r1, #3
 8004536:	db02      	blt.n	800453e <_printf_float+0x13a>
 8004538:	6863      	ldr	r3, [r4, #4]
 800453a:	4299      	cmp	r1, r3
 800453c:	dd41      	ble.n	80045c2 <_printf_float+0x1be>
 800453e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004542:	fa5f fb8b 	uxtb.w	fp, fp
 8004546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800454a:	d820      	bhi.n	800458e <_printf_float+0x18a>
 800454c:	3901      	subs	r1, #1
 800454e:	465a      	mov	r2, fp
 8004550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004554:	9109      	str	r1, [sp, #36]	; 0x24
 8004556:	f7ff ff17 	bl	8004388 <__exponent>
 800455a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800455c:	1813      	adds	r3, r2, r0
 800455e:	2a01      	cmp	r2, #1
 8004560:	4681      	mov	r9, r0
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	dc02      	bgt.n	800456c <_printf_float+0x168>
 8004566:	6822      	ldr	r2, [r4, #0]
 8004568:	07d2      	lsls	r2, r2, #31
 800456a:	d501      	bpl.n	8004570 <_printf_float+0x16c>
 800456c:	3301      	adds	r3, #1
 800456e:	6123      	str	r3, [r4, #16]
 8004570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004574:	2b00      	cmp	r3, #0
 8004576:	d09c      	beq.n	80044b2 <_printf_float+0xae>
 8004578:	232d      	movs	r3, #45	; 0x2d
 800457a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800457e:	e798      	b.n	80044b2 <_printf_float+0xae>
 8004580:	9a06      	ldr	r2, [sp, #24]
 8004582:	2a47      	cmp	r2, #71	; 0x47
 8004584:	d1be      	bne.n	8004504 <_printf_float+0x100>
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1bc      	bne.n	8004504 <_printf_float+0x100>
 800458a:	2301      	movs	r3, #1
 800458c:	e7b9      	b.n	8004502 <_printf_float+0xfe>
 800458e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004592:	d118      	bne.n	80045c6 <_printf_float+0x1c2>
 8004594:	2900      	cmp	r1, #0
 8004596:	6863      	ldr	r3, [r4, #4]
 8004598:	dd0b      	ble.n	80045b2 <_printf_float+0x1ae>
 800459a:	6121      	str	r1, [r4, #16]
 800459c:	b913      	cbnz	r3, 80045a4 <_printf_float+0x1a0>
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	07d0      	lsls	r0, r2, #31
 80045a2:	d502      	bpl.n	80045aa <_printf_float+0x1a6>
 80045a4:	3301      	adds	r3, #1
 80045a6:	440b      	add	r3, r1
 80045a8:	6123      	str	r3, [r4, #16]
 80045aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80045ac:	f04f 0900 	mov.w	r9, #0
 80045b0:	e7de      	b.n	8004570 <_printf_float+0x16c>
 80045b2:	b913      	cbnz	r3, 80045ba <_printf_float+0x1b6>
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	07d2      	lsls	r2, r2, #31
 80045b8:	d501      	bpl.n	80045be <_printf_float+0x1ba>
 80045ba:	3302      	adds	r3, #2
 80045bc:	e7f4      	b.n	80045a8 <_printf_float+0x1a4>
 80045be:	2301      	movs	r3, #1
 80045c0:	e7f2      	b.n	80045a8 <_printf_float+0x1a4>
 80045c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80045c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045c8:	4299      	cmp	r1, r3
 80045ca:	db05      	blt.n	80045d8 <_printf_float+0x1d4>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	6121      	str	r1, [r4, #16]
 80045d0:	07d8      	lsls	r0, r3, #31
 80045d2:	d5ea      	bpl.n	80045aa <_printf_float+0x1a6>
 80045d4:	1c4b      	adds	r3, r1, #1
 80045d6:	e7e7      	b.n	80045a8 <_printf_float+0x1a4>
 80045d8:	2900      	cmp	r1, #0
 80045da:	bfd4      	ite	le
 80045dc:	f1c1 0202 	rsble	r2, r1, #2
 80045e0:	2201      	movgt	r2, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	e7e0      	b.n	80045a8 <_printf_float+0x1a4>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	055a      	lsls	r2, r3, #21
 80045ea:	d407      	bmi.n	80045fc <_printf_float+0x1f8>
 80045ec:	6923      	ldr	r3, [r4, #16]
 80045ee:	4642      	mov	r2, r8
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	d12c      	bne.n	8004654 <_printf_float+0x250>
 80045fa:	e764      	b.n	80044c6 <_printf_float+0xc2>
 80045fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004600:	f240 80e0 	bls.w	80047c4 <_printf_float+0x3c0>
 8004604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004608:	2200      	movs	r2, #0
 800460a:	2300      	movs	r3, #0
 800460c:	f7fc fa74 	bl	8000af8 <__aeabi_dcmpeq>
 8004610:	2800      	cmp	r0, #0
 8004612:	d034      	beq.n	800467e <_printf_float+0x27a>
 8004614:	4a37      	ldr	r2, [pc, #220]	; (80046f4 <_printf_float+0x2f0>)
 8004616:	2301      	movs	r3, #1
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f43f af51 	beq.w	80044c6 <_printf_float+0xc2>
 8004624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004628:	429a      	cmp	r2, r3
 800462a:	db02      	blt.n	8004632 <_printf_float+0x22e>
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	07d8      	lsls	r0, r3, #31
 8004630:	d510      	bpl.n	8004654 <_printf_float+0x250>
 8004632:	ee18 3a10 	vmov	r3, s16
 8004636:	4652      	mov	r2, sl
 8004638:	4631      	mov	r1, r6
 800463a:	4628      	mov	r0, r5
 800463c:	47b8      	blx	r7
 800463e:	3001      	adds	r0, #1
 8004640:	f43f af41 	beq.w	80044c6 <_printf_float+0xc2>
 8004644:	f04f 0800 	mov.w	r8, #0
 8004648:	f104 091a 	add.w	r9, r4, #26
 800464c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800464e:	3b01      	subs	r3, #1
 8004650:	4543      	cmp	r3, r8
 8004652:	dc09      	bgt.n	8004668 <_printf_float+0x264>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	079b      	lsls	r3, r3, #30
 8004658:	f100 8105 	bmi.w	8004866 <_printf_float+0x462>
 800465c:	68e0      	ldr	r0, [r4, #12]
 800465e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004660:	4298      	cmp	r0, r3
 8004662:	bfb8      	it	lt
 8004664:	4618      	movlt	r0, r3
 8004666:	e730      	b.n	80044ca <_printf_float+0xc6>
 8004668:	2301      	movs	r3, #1
 800466a:	464a      	mov	r2, r9
 800466c:	4631      	mov	r1, r6
 800466e:	4628      	mov	r0, r5
 8004670:	47b8      	blx	r7
 8004672:	3001      	adds	r0, #1
 8004674:	f43f af27 	beq.w	80044c6 <_printf_float+0xc2>
 8004678:	f108 0801 	add.w	r8, r8, #1
 800467c:	e7e6      	b.n	800464c <_printf_float+0x248>
 800467e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	dc39      	bgt.n	80046f8 <_printf_float+0x2f4>
 8004684:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <_printf_float+0x2f0>)
 8004686:	2301      	movs	r3, #1
 8004688:	4631      	mov	r1, r6
 800468a:	4628      	mov	r0, r5
 800468c:	47b8      	blx	r7
 800468e:	3001      	adds	r0, #1
 8004690:	f43f af19 	beq.w	80044c6 <_printf_float+0xc2>
 8004694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004698:	4313      	orrs	r3, r2
 800469a:	d102      	bne.n	80046a2 <_printf_float+0x29e>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	07d9      	lsls	r1, r3, #31
 80046a0:	d5d8      	bpl.n	8004654 <_printf_float+0x250>
 80046a2:	ee18 3a10 	vmov	r3, s16
 80046a6:	4652      	mov	r2, sl
 80046a8:	4631      	mov	r1, r6
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b8      	blx	r7
 80046ae:	3001      	adds	r0, #1
 80046b0:	f43f af09 	beq.w	80044c6 <_printf_float+0xc2>
 80046b4:	f04f 0900 	mov.w	r9, #0
 80046b8:	f104 0a1a 	add.w	sl, r4, #26
 80046bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046be:	425b      	negs	r3, r3
 80046c0:	454b      	cmp	r3, r9
 80046c2:	dc01      	bgt.n	80046c8 <_printf_float+0x2c4>
 80046c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c6:	e792      	b.n	80045ee <_printf_float+0x1ea>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4652      	mov	r2, sl
 80046cc:	4631      	mov	r1, r6
 80046ce:	4628      	mov	r0, r5
 80046d0:	47b8      	blx	r7
 80046d2:	3001      	adds	r0, #1
 80046d4:	f43f aef7 	beq.w	80044c6 <_printf_float+0xc2>
 80046d8:	f109 0901 	add.w	r9, r9, #1
 80046dc:	e7ee      	b.n	80046bc <_printf_float+0x2b8>
 80046de:	bf00      	nop
 80046e0:	7fefffff 	.word	0x7fefffff
 80046e4:	08009758 	.word	0x08009758
 80046e8:	0800975c 	.word	0x0800975c
 80046ec:	08009764 	.word	0x08009764
 80046f0:	08009760 	.word	0x08009760
 80046f4:	08009b59 	.word	0x08009b59
 80046f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046fc:	429a      	cmp	r2, r3
 80046fe:	bfa8      	it	ge
 8004700:	461a      	movge	r2, r3
 8004702:	2a00      	cmp	r2, #0
 8004704:	4691      	mov	r9, r2
 8004706:	dc37      	bgt.n	8004778 <_printf_float+0x374>
 8004708:	f04f 0b00 	mov.w	fp, #0
 800470c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004710:	f104 021a 	add.w	r2, r4, #26
 8004714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004716:	9305      	str	r3, [sp, #20]
 8004718:	eba3 0309 	sub.w	r3, r3, r9
 800471c:	455b      	cmp	r3, fp
 800471e:	dc33      	bgt.n	8004788 <_printf_float+0x384>
 8004720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004724:	429a      	cmp	r2, r3
 8004726:	db3b      	blt.n	80047a0 <_printf_float+0x39c>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	07da      	lsls	r2, r3, #31
 800472c:	d438      	bmi.n	80047a0 <_printf_float+0x39c>
 800472e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004730:	9a05      	ldr	r2, [sp, #20]
 8004732:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004734:	1a9a      	subs	r2, r3, r2
 8004736:	eba3 0901 	sub.w	r9, r3, r1
 800473a:	4591      	cmp	r9, r2
 800473c:	bfa8      	it	ge
 800473e:	4691      	movge	r9, r2
 8004740:	f1b9 0f00 	cmp.w	r9, #0
 8004744:	dc35      	bgt.n	80047b2 <_printf_float+0x3ae>
 8004746:	f04f 0800 	mov.w	r8, #0
 800474a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800474e:	f104 0a1a 	add.w	sl, r4, #26
 8004752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	eba3 0309 	sub.w	r3, r3, r9
 800475c:	4543      	cmp	r3, r8
 800475e:	f77f af79 	ble.w	8004654 <_printf_float+0x250>
 8004762:	2301      	movs	r3, #1
 8004764:	4652      	mov	r2, sl
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f aeaa 	beq.w	80044c6 <_printf_float+0xc2>
 8004772:	f108 0801 	add.w	r8, r8, #1
 8004776:	e7ec      	b.n	8004752 <_printf_float+0x34e>
 8004778:	4613      	mov	r3, r2
 800477a:	4631      	mov	r1, r6
 800477c:	4642      	mov	r2, r8
 800477e:	4628      	mov	r0, r5
 8004780:	47b8      	blx	r7
 8004782:	3001      	adds	r0, #1
 8004784:	d1c0      	bne.n	8004708 <_printf_float+0x304>
 8004786:	e69e      	b.n	80044c6 <_printf_float+0xc2>
 8004788:	2301      	movs	r3, #1
 800478a:	4631      	mov	r1, r6
 800478c:	4628      	mov	r0, r5
 800478e:	9205      	str	r2, [sp, #20]
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	f43f ae97 	beq.w	80044c6 <_printf_float+0xc2>
 8004798:	9a05      	ldr	r2, [sp, #20]
 800479a:	f10b 0b01 	add.w	fp, fp, #1
 800479e:	e7b9      	b.n	8004714 <_printf_float+0x310>
 80047a0:	ee18 3a10 	vmov	r3, s16
 80047a4:	4652      	mov	r2, sl
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	d1be      	bne.n	800472e <_printf_float+0x32a>
 80047b0:	e689      	b.n	80044c6 <_printf_float+0xc2>
 80047b2:	9a05      	ldr	r2, [sp, #20]
 80047b4:	464b      	mov	r3, r9
 80047b6:	4442      	add	r2, r8
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	d1c1      	bne.n	8004746 <_printf_float+0x342>
 80047c2:	e680      	b.n	80044c6 <_printf_float+0xc2>
 80047c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047c6:	2a01      	cmp	r2, #1
 80047c8:	dc01      	bgt.n	80047ce <_printf_float+0x3ca>
 80047ca:	07db      	lsls	r3, r3, #31
 80047cc:	d538      	bpl.n	8004840 <_printf_float+0x43c>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4642      	mov	r2, r8
 80047d2:	4631      	mov	r1, r6
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	f43f ae74 	beq.w	80044c6 <_printf_float+0xc2>
 80047de:	ee18 3a10 	vmov	r3, s16
 80047e2:	4652      	mov	r2, sl
 80047e4:	4631      	mov	r1, r6
 80047e6:	4628      	mov	r0, r5
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	f43f ae6b 	beq.w	80044c6 <_printf_float+0xc2>
 80047f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047f4:	2200      	movs	r2, #0
 80047f6:	2300      	movs	r3, #0
 80047f8:	f7fc f97e 	bl	8000af8 <__aeabi_dcmpeq>
 80047fc:	b9d8      	cbnz	r0, 8004836 <_printf_float+0x432>
 80047fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004800:	f108 0201 	add.w	r2, r8, #1
 8004804:	3b01      	subs	r3, #1
 8004806:	4631      	mov	r1, r6
 8004808:	4628      	mov	r0, r5
 800480a:	47b8      	blx	r7
 800480c:	3001      	adds	r0, #1
 800480e:	d10e      	bne.n	800482e <_printf_float+0x42a>
 8004810:	e659      	b.n	80044c6 <_printf_float+0xc2>
 8004812:	2301      	movs	r3, #1
 8004814:	4652      	mov	r2, sl
 8004816:	4631      	mov	r1, r6
 8004818:	4628      	mov	r0, r5
 800481a:	47b8      	blx	r7
 800481c:	3001      	adds	r0, #1
 800481e:	f43f ae52 	beq.w	80044c6 <_printf_float+0xc2>
 8004822:	f108 0801 	add.w	r8, r8, #1
 8004826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004828:	3b01      	subs	r3, #1
 800482a:	4543      	cmp	r3, r8
 800482c:	dcf1      	bgt.n	8004812 <_printf_float+0x40e>
 800482e:	464b      	mov	r3, r9
 8004830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004834:	e6dc      	b.n	80045f0 <_printf_float+0x1ec>
 8004836:	f04f 0800 	mov.w	r8, #0
 800483a:	f104 0a1a 	add.w	sl, r4, #26
 800483e:	e7f2      	b.n	8004826 <_printf_float+0x422>
 8004840:	2301      	movs	r3, #1
 8004842:	4642      	mov	r2, r8
 8004844:	e7df      	b.n	8004806 <_printf_float+0x402>
 8004846:	2301      	movs	r3, #1
 8004848:	464a      	mov	r2, r9
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	47b8      	blx	r7
 8004850:	3001      	adds	r0, #1
 8004852:	f43f ae38 	beq.w	80044c6 <_printf_float+0xc2>
 8004856:	f108 0801 	add.w	r8, r8, #1
 800485a:	68e3      	ldr	r3, [r4, #12]
 800485c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800485e:	1a5b      	subs	r3, r3, r1
 8004860:	4543      	cmp	r3, r8
 8004862:	dcf0      	bgt.n	8004846 <_printf_float+0x442>
 8004864:	e6fa      	b.n	800465c <_printf_float+0x258>
 8004866:	f04f 0800 	mov.w	r8, #0
 800486a:	f104 0919 	add.w	r9, r4, #25
 800486e:	e7f4      	b.n	800485a <_printf_float+0x456>

08004870 <_printf_common>:
 8004870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	4616      	mov	r6, r2
 8004876:	4699      	mov	r9, r3
 8004878:	688a      	ldr	r2, [r1, #8]
 800487a:	690b      	ldr	r3, [r1, #16]
 800487c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004880:	4293      	cmp	r3, r2
 8004882:	bfb8      	it	lt
 8004884:	4613      	movlt	r3, r2
 8004886:	6033      	str	r3, [r6, #0]
 8004888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800488c:	4607      	mov	r7, r0
 800488e:	460c      	mov	r4, r1
 8004890:	b10a      	cbz	r2, 8004896 <_printf_common+0x26>
 8004892:	3301      	adds	r3, #1
 8004894:	6033      	str	r3, [r6, #0]
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	0699      	lsls	r1, r3, #26
 800489a:	bf42      	ittt	mi
 800489c:	6833      	ldrmi	r3, [r6, #0]
 800489e:	3302      	addmi	r3, #2
 80048a0:	6033      	strmi	r3, [r6, #0]
 80048a2:	6825      	ldr	r5, [r4, #0]
 80048a4:	f015 0506 	ands.w	r5, r5, #6
 80048a8:	d106      	bne.n	80048b8 <_printf_common+0x48>
 80048aa:	f104 0a19 	add.w	sl, r4, #25
 80048ae:	68e3      	ldr	r3, [r4, #12]
 80048b0:	6832      	ldr	r2, [r6, #0]
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	42ab      	cmp	r3, r5
 80048b6:	dc26      	bgt.n	8004906 <_printf_common+0x96>
 80048b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048bc:	1e13      	subs	r3, r2, #0
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	bf18      	it	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	0692      	lsls	r2, r2, #26
 80048c6:	d42b      	bmi.n	8004920 <_printf_common+0xb0>
 80048c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048cc:	4649      	mov	r1, r9
 80048ce:	4638      	mov	r0, r7
 80048d0:	47c0      	blx	r8
 80048d2:	3001      	adds	r0, #1
 80048d4:	d01e      	beq.n	8004914 <_printf_common+0xa4>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	68e5      	ldr	r5, [r4, #12]
 80048da:	6832      	ldr	r2, [r6, #0]
 80048dc:	f003 0306 	and.w	r3, r3, #6
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	bf08      	it	eq
 80048e4:	1aad      	subeq	r5, r5, r2
 80048e6:	68a3      	ldr	r3, [r4, #8]
 80048e8:	6922      	ldr	r2, [r4, #16]
 80048ea:	bf0c      	ite	eq
 80048ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048f0:	2500      	movne	r5, #0
 80048f2:	4293      	cmp	r3, r2
 80048f4:	bfc4      	itt	gt
 80048f6:	1a9b      	subgt	r3, r3, r2
 80048f8:	18ed      	addgt	r5, r5, r3
 80048fa:	2600      	movs	r6, #0
 80048fc:	341a      	adds	r4, #26
 80048fe:	42b5      	cmp	r5, r6
 8004900:	d11a      	bne.n	8004938 <_printf_common+0xc8>
 8004902:	2000      	movs	r0, #0
 8004904:	e008      	b.n	8004918 <_printf_common+0xa8>
 8004906:	2301      	movs	r3, #1
 8004908:	4652      	mov	r2, sl
 800490a:	4649      	mov	r1, r9
 800490c:	4638      	mov	r0, r7
 800490e:	47c0      	blx	r8
 8004910:	3001      	adds	r0, #1
 8004912:	d103      	bne.n	800491c <_printf_common+0xac>
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491c:	3501      	adds	r5, #1
 800491e:	e7c6      	b.n	80048ae <_printf_common+0x3e>
 8004920:	18e1      	adds	r1, r4, r3
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	2030      	movs	r0, #48	; 0x30
 8004926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800492a:	4422      	add	r2, r4
 800492c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004934:	3302      	adds	r3, #2
 8004936:	e7c7      	b.n	80048c8 <_printf_common+0x58>
 8004938:	2301      	movs	r3, #1
 800493a:	4622      	mov	r2, r4
 800493c:	4649      	mov	r1, r9
 800493e:	4638      	mov	r0, r7
 8004940:	47c0      	blx	r8
 8004942:	3001      	adds	r0, #1
 8004944:	d0e6      	beq.n	8004914 <_printf_common+0xa4>
 8004946:	3601      	adds	r6, #1
 8004948:	e7d9      	b.n	80048fe <_printf_common+0x8e>
	...

0800494c <_printf_i>:
 800494c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004950:	7e0f      	ldrb	r7, [r1, #24]
 8004952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004954:	2f78      	cmp	r7, #120	; 0x78
 8004956:	4691      	mov	r9, r2
 8004958:	4680      	mov	r8, r0
 800495a:	460c      	mov	r4, r1
 800495c:	469a      	mov	sl, r3
 800495e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004962:	d807      	bhi.n	8004974 <_printf_i+0x28>
 8004964:	2f62      	cmp	r7, #98	; 0x62
 8004966:	d80a      	bhi.n	800497e <_printf_i+0x32>
 8004968:	2f00      	cmp	r7, #0
 800496a:	f000 80d8 	beq.w	8004b1e <_printf_i+0x1d2>
 800496e:	2f58      	cmp	r7, #88	; 0x58
 8004970:	f000 80a3 	beq.w	8004aba <_printf_i+0x16e>
 8004974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800497c:	e03a      	b.n	80049f4 <_printf_i+0xa8>
 800497e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004982:	2b15      	cmp	r3, #21
 8004984:	d8f6      	bhi.n	8004974 <_printf_i+0x28>
 8004986:	a101      	add	r1, pc, #4	; (adr r1, 800498c <_printf_i+0x40>)
 8004988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800498c:	080049e5 	.word	0x080049e5
 8004990:	080049f9 	.word	0x080049f9
 8004994:	08004975 	.word	0x08004975
 8004998:	08004975 	.word	0x08004975
 800499c:	08004975 	.word	0x08004975
 80049a0:	08004975 	.word	0x08004975
 80049a4:	080049f9 	.word	0x080049f9
 80049a8:	08004975 	.word	0x08004975
 80049ac:	08004975 	.word	0x08004975
 80049b0:	08004975 	.word	0x08004975
 80049b4:	08004975 	.word	0x08004975
 80049b8:	08004b05 	.word	0x08004b05
 80049bc:	08004a29 	.word	0x08004a29
 80049c0:	08004ae7 	.word	0x08004ae7
 80049c4:	08004975 	.word	0x08004975
 80049c8:	08004975 	.word	0x08004975
 80049cc:	08004b27 	.word	0x08004b27
 80049d0:	08004975 	.word	0x08004975
 80049d4:	08004a29 	.word	0x08004a29
 80049d8:	08004975 	.word	0x08004975
 80049dc:	08004975 	.word	0x08004975
 80049e0:	08004aef 	.word	0x08004aef
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	1d1a      	adds	r2, r3, #4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	602a      	str	r2, [r5, #0]
 80049ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0a3      	b.n	8004b40 <_printf_i+0x1f4>
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	6829      	ldr	r1, [r5, #0]
 80049fc:	0606      	lsls	r6, r0, #24
 80049fe:	f101 0304 	add.w	r3, r1, #4
 8004a02:	d50a      	bpl.n	8004a1a <_printf_i+0xce>
 8004a04:	680e      	ldr	r6, [r1, #0]
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	2e00      	cmp	r6, #0
 8004a0a:	da03      	bge.n	8004a14 <_printf_i+0xc8>
 8004a0c:	232d      	movs	r3, #45	; 0x2d
 8004a0e:	4276      	negs	r6, r6
 8004a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a14:	485e      	ldr	r0, [pc, #376]	; (8004b90 <_printf_i+0x244>)
 8004a16:	230a      	movs	r3, #10
 8004a18:	e019      	b.n	8004a4e <_printf_i+0x102>
 8004a1a:	680e      	ldr	r6, [r1, #0]
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a22:	bf18      	it	ne
 8004a24:	b236      	sxthne	r6, r6
 8004a26:	e7ef      	b.n	8004a08 <_printf_i+0xbc>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	1d19      	adds	r1, r3, #4
 8004a2e:	6029      	str	r1, [r5, #0]
 8004a30:	0601      	lsls	r1, r0, #24
 8004a32:	d501      	bpl.n	8004a38 <_printf_i+0xec>
 8004a34:	681e      	ldr	r6, [r3, #0]
 8004a36:	e002      	b.n	8004a3e <_printf_i+0xf2>
 8004a38:	0646      	lsls	r6, r0, #25
 8004a3a:	d5fb      	bpl.n	8004a34 <_printf_i+0xe8>
 8004a3c:	881e      	ldrh	r6, [r3, #0]
 8004a3e:	4854      	ldr	r0, [pc, #336]	; (8004b90 <_printf_i+0x244>)
 8004a40:	2f6f      	cmp	r7, #111	; 0x6f
 8004a42:	bf0c      	ite	eq
 8004a44:	2308      	moveq	r3, #8
 8004a46:	230a      	movne	r3, #10
 8004a48:	2100      	movs	r1, #0
 8004a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a4e:	6865      	ldr	r5, [r4, #4]
 8004a50:	60a5      	str	r5, [r4, #8]
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	bfa2      	ittt	ge
 8004a56:	6821      	ldrge	r1, [r4, #0]
 8004a58:	f021 0104 	bicge.w	r1, r1, #4
 8004a5c:	6021      	strge	r1, [r4, #0]
 8004a5e:	b90e      	cbnz	r6, 8004a64 <_printf_i+0x118>
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	d04d      	beq.n	8004b00 <_printf_i+0x1b4>
 8004a64:	4615      	mov	r5, r2
 8004a66:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a6a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a6e:	5dc7      	ldrb	r7, [r0, r7]
 8004a70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a74:	4637      	mov	r7, r6
 8004a76:	42bb      	cmp	r3, r7
 8004a78:	460e      	mov	r6, r1
 8004a7a:	d9f4      	bls.n	8004a66 <_printf_i+0x11a>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d10b      	bne.n	8004a98 <_printf_i+0x14c>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	07de      	lsls	r6, r3, #31
 8004a84:	d508      	bpl.n	8004a98 <_printf_i+0x14c>
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	6861      	ldr	r1, [r4, #4]
 8004a8a:	4299      	cmp	r1, r3
 8004a8c:	bfde      	ittt	le
 8004a8e:	2330      	movle	r3, #48	; 0x30
 8004a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a98:	1b52      	subs	r2, r2, r5
 8004a9a:	6122      	str	r2, [r4, #16]
 8004a9c:	f8cd a000 	str.w	sl, [sp]
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	aa03      	add	r2, sp, #12
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f7ff fee2 	bl	8004870 <_printf_common>
 8004aac:	3001      	adds	r0, #1
 8004aae:	d14c      	bne.n	8004b4a <_printf_i+0x1fe>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	b004      	add	sp, #16
 8004ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aba:	4835      	ldr	r0, [pc, #212]	; (8004b90 <_printf_i+0x244>)
 8004abc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ac0:	6829      	ldr	r1, [r5, #0]
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ac8:	6029      	str	r1, [r5, #0]
 8004aca:	061d      	lsls	r5, r3, #24
 8004acc:	d514      	bpl.n	8004af8 <_printf_i+0x1ac>
 8004ace:	07df      	lsls	r7, r3, #31
 8004ad0:	bf44      	itt	mi
 8004ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ad6:	6023      	strmi	r3, [r4, #0]
 8004ad8:	b91e      	cbnz	r6, 8004ae2 <_printf_i+0x196>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	f023 0320 	bic.w	r3, r3, #32
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	e7b0      	b.n	8004a48 <_printf_i+0xfc>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	f043 0320 	orr.w	r3, r3, #32
 8004aec:	6023      	str	r3, [r4, #0]
 8004aee:	2378      	movs	r3, #120	; 0x78
 8004af0:	4828      	ldr	r0, [pc, #160]	; (8004b94 <_printf_i+0x248>)
 8004af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004af6:	e7e3      	b.n	8004ac0 <_printf_i+0x174>
 8004af8:	0659      	lsls	r1, r3, #25
 8004afa:	bf48      	it	mi
 8004afc:	b2b6      	uxthmi	r6, r6
 8004afe:	e7e6      	b.n	8004ace <_printf_i+0x182>
 8004b00:	4615      	mov	r5, r2
 8004b02:	e7bb      	b.n	8004a7c <_printf_i+0x130>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	6826      	ldr	r6, [r4, #0]
 8004b08:	6961      	ldr	r1, [r4, #20]
 8004b0a:	1d18      	adds	r0, r3, #4
 8004b0c:	6028      	str	r0, [r5, #0]
 8004b0e:	0635      	lsls	r5, r6, #24
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	d501      	bpl.n	8004b18 <_printf_i+0x1cc>
 8004b14:	6019      	str	r1, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <_printf_i+0x1d2>
 8004b18:	0670      	lsls	r0, r6, #25
 8004b1a:	d5fb      	bpl.n	8004b14 <_printf_i+0x1c8>
 8004b1c:	8019      	strh	r1, [r3, #0]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	4615      	mov	r5, r2
 8004b24:	e7ba      	b.n	8004a9c <_printf_i+0x150>
 8004b26:	682b      	ldr	r3, [r5, #0]
 8004b28:	1d1a      	adds	r2, r3, #4
 8004b2a:	602a      	str	r2, [r5, #0]
 8004b2c:	681d      	ldr	r5, [r3, #0]
 8004b2e:	6862      	ldr	r2, [r4, #4]
 8004b30:	2100      	movs	r1, #0
 8004b32:	4628      	mov	r0, r5
 8004b34:	f7fb fb6c 	bl	8000210 <memchr>
 8004b38:	b108      	cbz	r0, 8004b3e <_printf_i+0x1f2>
 8004b3a:	1b40      	subs	r0, r0, r5
 8004b3c:	6060      	str	r0, [r4, #4]
 8004b3e:	6863      	ldr	r3, [r4, #4]
 8004b40:	6123      	str	r3, [r4, #16]
 8004b42:	2300      	movs	r3, #0
 8004b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b48:	e7a8      	b.n	8004a9c <_printf_i+0x150>
 8004b4a:	6923      	ldr	r3, [r4, #16]
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	47d0      	blx	sl
 8004b54:	3001      	adds	r0, #1
 8004b56:	d0ab      	beq.n	8004ab0 <_printf_i+0x164>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	079b      	lsls	r3, r3, #30
 8004b5c:	d413      	bmi.n	8004b86 <_printf_i+0x23a>
 8004b5e:	68e0      	ldr	r0, [r4, #12]
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	4298      	cmp	r0, r3
 8004b64:	bfb8      	it	lt
 8004b66:	4618      	movlt	r0, r3
 8004b68:	e7a4      	b.n	8004ab4 <_printf_i+0x168>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4649      	mov	r1, r9
 8004b70:	4640      	mov	r0, r8
 8004b72:	47d0      	blx	sl
 8004b74:	3001      	adds	r0, #1
 8004b76:	d09b      	beq.n	8004ab0 <_printf_i+0x164>
 8004b78:	3501      	adds	r5, #1
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	9903      	ldr	r1, [sp, #12]
 8004b7e:	1a5b      	subs	r3, r3, r1
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dcf2      	bgt.n	8004b6a <_printf_i+0x21e>
 8004b84:	e7eb      	b.n	8004b5e <_printf_i+0x212>
 8004b86:	2500      	movs	r5, #0
 8004b88:	f104 0619 	add.w	r6, r4, #25
 8004b8c:	e7f5      	b.n	8004b7a <_printf_i+0x22e>
 8004b8e:	bf00      	nop
 8004b90:	08009768 	.word	0x08009768
 8004b94:	08009779 	.word	0x08009779

08004b98 <_scanf_float>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	4617      	mov	r7, r2
 8004ba0:	9303      	str	r3, [sp, #12]
 8004ba2:	688b      	ldr	r3, [r1, #8]
 8004ba4:	1e5a      	subs	r2, r3, #1
 8004ba6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004baa:	bf83      	ittte	hi
 8004bac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004bb0:	195b      	addhi	r3, r3, r5
 8004bb2:	9302      	strhi	r3, [sp, #8]
 8004bb4:	2300      	movls	r3, #0
 8004bb6:	bf86      	itte	hi
 8004bb8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004bbc:	608b      	strhi	r3, [r1, #8]
 8004bbe:	9302      	strls	r3, [sp, #8]
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	468b      	mov	fp, r1
 8004bc4:	2500      	movs	r5, #0
 8004bc6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004bca:	f84b 3b1c 	str.w	r3, [fp], #28
 8004bce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004bd2:	4680      	mov	r8, r0
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	465e      	mov	r6, fp
 8004bd8:	46aa      	mov	sl, r5
 8004bda:	46a9      	mov	r9, r5
 8004bdc:	9501      	str	r5, [sp, #4]
 8004bde:	68a2      	ldr	r2, [r4, #8]
 8004be0:	b152      	cbz	r2, 8004bf8 <_scanf_float+0x60>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b4e      	cmp	r3, #78	; 0x4e
 8004be8:	d864      	bhi.n	8004cb4 <_scanf_float+0x11c>
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d83c      	bhi.n	8004c68 <_scanf_float+0xd0>
 8004bee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004bf2:	b2c8      	uxtb	r0, r1
 8004bf4:	280e      	cmp	r0, #14
 8004bf6:	d93a      	bls.n	8004c6e <_scanf_float+0xd6>
 8004bf8:	f1b9 0f00 	cmp.w	r9, #0
 8004bfc:	d003      	beq.n	8004c06 <_scanf_float+0x6e>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c0a:	f1ba 0f01 	cmp.w	sl, #1
 8004c0e:	f200 8113 	bhi.w	8004e38 <_scanf_float+0x2a0>
 8004c12:	455e      	cmp	r6, fp
 8004c14:	f200 8105 	bhi.w	8004e22 <_scanf_float+0x28a>
 8004c18:	2501      	movs	r5, #1
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	b007      	add	sp, #28
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004c26:	2a0d      	cmp	r2, #13
 8004c28:	d8e6      	bhi.n	8004bf8 <_scanf_float+0x60>
 8004c2a:	a101      	add	r1, pc, #4	; (adr r1, 8004c30 <_scanf_float+0x98>)
 8004c2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c30:	08004d6f 	.word	0x08004d6f
 8004c34:	08004bf9 	.word	0x08004bf9
 8004c38:	08004bf9 	.word	0x08004bf9
 8004c3c:	08004bf9 	.word	0x08004bf9
 8004c40:	08004dcf 	.word	0x08004dcf
 8004c44:	08004da7 	.word	0x08004da7
 8004c48:	08004bf9 	.word	0x08004bf9
 8004c4c:	08004bf9 	.word	0x08004bf9
 8004c50:	08004d7d 	.word	0x08004d7d
 8004c54:	08004bf9 	.word	0x08004bf9
 8004c58:	08004bf9 	.word	0x08004bf9
 8004c5c:	08004bf9 	.word	0x08004bf9
 8004c60:	08004bf9 	.word	0x08004bf9
 8004c64:	08004d35 	.word	0x08004d35
 8004c68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004c6c:	e7db      	b.n	8004c26 <_scanf_float+0x8e>
 8004c6e:	290e      	cmp	r1, #14
 8004c70:	d8c2      	bhi.n	8004bf8 <_scanf_float+0x60>
 8004c72:	a001      	add	r0, pc, #4	; (adr r0, 8004c78 <_scanf_float+0xe0>)
 8004c74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004c78:	08004d27 	.word	0x08004d27
 8004c7c:	08004bf9 	.word	0x08004bf9
 8004c80:	08004d27 	.word	0x08004d27
 8004c84:	08004dbb 	.word	0x08004dbb
 8004c88:	08004bf9 	.word	0x08004bf9
 8004c8c:	08004cd5 	.word	0x08004cd5
 8004c90:	08004d11 	.word	0x08004d11
 8004c94:	08004d11 	.word	0x08004d11
 8004c98:	08004d11 	.word	0x08004d11
 8004c9c:	08004d11 	.word	0x08004d11
 8004ca0:	08004d11 	.word	0x08004d11
 8004ca4:	08004d11 	.word	0x08004d11
 8004ca8:	08004d11 	.word	0x08004d11
 8004cac:	08004d11 	.word	0x08004d11
 8004cb0:	08004d11 	.word	0x08004d11
 8004cb4:	2b6e      	cmp	r3, #110	; 0x6e
 8004cb6:	d809      	bhi.n	8004ccc <_scanf_float+0x134>
 8004cb8:	2b60      	cmp	r3, #96	; 0x60
 8004cba:	d8b2      	bhi.n	8004c22 <_scanf_float+0x8a>
 8004cbc:	2b54      	cmp	r3, #84	; 0x54
 8004cbe:	d077      	beq.n	8004db0 <_scanf_float+0x218>
 8004cc0:	2b59      	cmp	r3, #89	; 0x59
 8004cc2:	d199      	bne.n	8004bf8 <_scanf_float+0x60>
 8004cc4:	2d07      	cmp	r5, #7
 8004cc6:	d197      	bne.n	8004bf8 <_scanf_float+0x60>
 8004cc8:	2508      	movs	r5, #8
 8004cca:	e029      	b.n	8004d20 <_scanf_float+0x188>
 8004ccc:	2b74      	cmp	r3, #116	; 0x74
 8004cce:	d06f      	beq.n	8004db0 <_scanf_float+0x218>
 8004cd0:	2b79      	cmp	r3, #121	; 0x79
 8004cd2:	e7f6      	b.n	8004cc2 <_scanf_float+0x12a>
 8004cd4:	6821      	ldr	r1, [r4, #0]
 8004cd6:	05c8      	lsls	r0, r1, #23
 8004cd8:	d51a      	bpl.n	8004d10 <_scanf_float+0x178>
 8004cda:	9b02      	ldr	r3, [sp, #8]
 8004cdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ce0:	6021      	str	r1, [r4, #0]
 8004ce2:	f109 0901 	add.w	r9, r9, #1
 8004ce6:	b11b      	cbz	r3, 8004cf0 <_scanf_float+0x158>
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	3201      	adds	r2, #1
 8004cec:	9302      	str	r3, [sp, #8]
 8004cee:	60a2      	str	r2, [r4, #8]
 8004cf0:	68a3      	ldr	r3, [r4, #8]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	60a3      	str	r3, [r4, #8]
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	6123      	str	r3, [r4, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	607b      	str	r3, [r7, #4]
 8004d04:	f340 8084 	ble.w	8004e10 <_scanf_float+0x278>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	e766      	b.n	8004bde <_scanf_float+0x46>
 8004d10:	eb1a 0f05 	cmn.w	sl, r5
 8004d14:	f47f af70 	bne.w	8004bf8 <_scanf_float+0x60>
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004d1e:	6022      	str	r2, [r4, #0]
 8004d20:	f806 3b01 	strb.w	r3, [r6], #1
 8004d24:	e7e4      	b.n	8004cf0 <_scanf_float+0x158>
 8004d26:	6822      	ldr	r2, [r4, #0]
 8004d28:	0610      	lsls	r0, r2, #24
 8004d2a:	f57f af65 	bpl.w	8004bf8 <_scanf_float+0x60>
 8004d2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d32:	e7f4      	b.n	8004d1e <_scanf_float+0x186>
 8004d34:	f1ba 0f00 	cmp.w	sl, #0
 8004d38:	d10e      	bne.n	8004d58 <_scanf_float+0x1c0>
 8004d3a:	f1b9 0f00 	cmp.w	r9, #0
 8004d3e:	d10e      	bne.n	8004d5e <_scanf_float+0x1c6>
 8004d40:	6822      	ldr	r2, [r4, #0]
 8004d42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d4a:	d108      	bne.n	8004d5e <_scanf_float+0x1c6>
 8004d4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	f04f 0a01 	mov.w	sl, #1
 8004d56:	e7e3      	b.n	8004d20 <_scanf_float+0x188>
 8004d58:	f1ba 0f02 	cmp.w	sl, #2
 8004d5c:	d055      	beq.n	8004e0a <_scanf_float+0x272>
 8004d5e:	2d01      	cmp	r5, #1
 8004d60:	d002      	beq.n	8004d68 <_scanf_float+0x1d0>
 8004d62:	2d04      	cmp	r5, #4
 8004d64:	f47f af48 	bne.w	8004bf8 <_scanf_float+0x60>
 8004d68:	3501      	adds	r5, #1
 8004d6a:	b2ed      	uxtb	r5, r5
 8004d6c:	e7d8      	b.n	8004d20 <_scanf_float+0x188>
 8004d6e:	f1ba 0f01 	cmp.w	sl, #1
 8004d72:	f47f af41 	bne.w	8004bf8 <_scanf_float+0x60>
 8004d76:	f04f 0a02 	mov.w	sl, #2
 8004d7a:	e7d1      	b.n	8004d20 <_scanf_float+0x188>
 8004d7c:	b97d      	cbnz	r5, 8004d9e <_scanf_float+0x206>
 8004d7e:	f1b9 0f00 	cmp.w	r9, #0
 8004d82:	f47f af3c 	bne.w	8004bfe <_scanf_float+0x66>
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004d8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004d90:	f47f af39 	bne.w	8004c06 <_scanf_float+0x6e>
 8004d94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004d98:	6022      	str	r2, [r4, #0]
 8004d9a:	2501      	movs	r5, #1
 8004d9c:	e7c0      	b.n	8004d20 <_scanf_float+0x188>
 8004d9e:	2d03      	cmp	r5, #3
 8004da0:	d0e2      	beq.n	8004d68 <_scanf_float+0x1d0>
 8004da2:	2d05      	cmp	r5, #5
 8004da4:	e7de      	b.n	8004d64 <_scanf_float+0x1cc>
 8004da6:	2d02      	cmp	r5, #2
 8004da8:	f47f af26 	bne.w	8004bf8 <_scanf_float+0x60>
 8004dac:	2503      	movs	r5, #3
 8004dae:	e7b7      	b.n	8004d20 <_scanf_float+0x188>
 8004db0:	2d06      	cmp	r5, #6
 8004db2:	f47f af21 	bne.w	8004bf8 <_scanf_float+0x60>
 8004db6:	2507      	movs	r5, #7
 8004db8:	e7b2      	b.n	8004d20 <_scanf_float+0x188>
 8004dba:	6822      	ldr	r2, [r4, #0]
 8004dbc:	0591      	lsls	r1, r2, #22
 8004dbe:	f57f af1b 	bpl.w	8004bf8 <_scanf_float+0x60>
 8004dc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004dcc:	e7a8      	b.n	8004d20 <_scanf_float+0x188>
 8004dce:	6822      	ldr	r2, [r4, #0]
 8004dd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004dd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004dd8:	d006      	beq.n	8004de8 <_scanf_float+0x250>
 8004dda:	0550      	lsls	r0, r2, #21
 8004ddc:	f57f af0c 	bpl.w	8004bf8 <_scanf_float+0x60>
 8004de0:	f1b9 0f00 	cmp.w	r9, #0
 8004de4:	f43f af0f 	beq.w	8004c06 <_scanf_float+0x6e>
 8004de8:	0591      	lsls	r1, r2, #22
 8004dea:	bf58      	it	pl
 8004dec:	9901      	ldrpl	r1, [sp, #4]
 8004dee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004df2:	bf58      	it	pl
 8004df4:	eba9 0101 	subpl.w	r1, r9, r1
 8004df8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004dfc:	bf58      	it	pl
 8004dfe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004e02:	6022      	str	r2, [r4, #0]
 8004e04:	f04f 0900 	mov.w	r9, #0
 8004e08:	e78a      	b.n	8004d20 <_scanf_float+0x188>
 8004e0a:	f04f 0a03 	mov.w	sl, #3
 8004e0e:	e787      	b.n	8004d20 <_scanf_float+0x188>
 8004e10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004e14:	4639      	mov	r1, r7
 8004e16:	4640      	mov	r0, r8
 8004e18:	4798      	blx	r3
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	f43f aedf 	beq.w	8004bde <_scanf_float+0x46>
 8004e20:	e6ea      	b.n	8004bf8 <_scanf_float+0x60>
 8004e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e2a:	463a      	mov	r2, r7
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	4798      	blx	r3
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	e6ec      	b.n	8004c12 <_scanf_float+0x7a>
 8004e38:	1e6b      	subs	r3, r5, #1
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d825      	bhi.n	8004e8a <_scanf_float+0x2f2>
 8004e3e:	2d02      	cmp	r5, #2
 8004e40:	d836      	bhi.n	8004eb0 <_scanf_float+0x318>
 8004e42:	455e      	cmp	r6, fp
 8004e44:	f67f aee8 	bls.w	8004c18 <_scanf_float+0x80>
 8004e48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e4c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004e50:	463a      	mov	r2, r7
 8004e52:	4640      	mov	r0, r8
 8004e54:	4798      	blx	r3
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	6123      	str	r3, [r4, #16]
 8004e5c:	e7f1      	b.n	8004e42 <_scanf_float+0x2aa>
 8004e5e:	9802      	ldr	r0, [sp, #8]
 8004e60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004e68:	9002      	str	r0, [sp, #8]
 8004e6a:	463a      	mov	r2, r7
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4798      	blx	r3
 8004e70:	6923      	ldr	r3, [r4, #16]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	6123      	str	r3, [r4, #16]
 8004e76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e7a:	fa5f fa8a 	uxtb.w	sl, sl
 8004e7e:	f1ba 0f02 	cmp.w	sl, #2
 8004e82:	d1ec      	bne.n	8004e5e <_scanf_float+0x2c6>
 8004e84:	3d03      	subs	r5, #3
 8004e86:	b2ed      	uxtb	r5, r5
 8004e88:	1b76      	subs	r6, r6, r5
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	05da      	lsls	r2, r3, #23
 8004e8e:	d52f      	bpl.n	8004ef0 <_scanf_float+0x358>
 8004e90:	055b      	lsls	r3, r3, #21
 8004e92:	d510      	bpl.n	8004eb6 <_scanf_float+0x31e>
 8004e94:	455e      	cmp	r6, fp
 8004e96:	f67f aebf 	bls.w	8004c18 <_scanf_float+0x80>
 8004e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ea2:	463a      	mov	r2, r7
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	4798      	blx	r3
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	e7f1      	b.n	8004e94 <_scanf_float+0x2fc>
 8004eb0:	46aa      	mov	sl, r5
 8004eb2:	9602      	str	r6, [sp, #8]
 8004eb4:	e7df      	b.n	8004e76 <_scanf_float+0x2de>
 8004eb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	2965      	cmp	r1, #101	; 0x65
 8004ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ec2:	f106 35ff 	add.w	r5, r6, #4294967295
 8004ec6:	6123      	str	r3, [r4, #16]
 8004ec8:	d00c      	beq.n	8004ee4 <_scanf_float+0x34c>
 8004eca:	2945      	cmp	r1, #69	; 0x45
 8004ecc:	d00a      	beq.n	8004ee4 <_scanf_float+0x34c>
 8004ece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ed2:	463a      	mov	r2, r7
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4798      	blx	r3
 8004ed8:	6923      	ldr	r3, [r4, #16]
 8004eda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	1eb5      	subs	r5, r6, #2
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ee8:	463a      	mov	r2, r7
 8004eea:	4640      	mov	r0, r8
 8004eec:	4798      	blx	r3
 8004eee:	462e      	mov	r6, r5
 8004ef0:	6825      	ldr	r5, [r4, #0]
 8004ef2:	f015 0510 	ands.w	r5, r5, #16
 8004ef6:	d159      	bne.n	8004fac <_scanf_float+0x414>
 8004ef8:	7035      	strb	r5, [r6, #0]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f04:	d11b      	bne.n	8004f3e <_scanf_float+0x3a6>
 8004f06:	9b01      	ldr	r3, [sp, #4]
 8004f08:	454b      	cmp	r3, r9
 8004f0a:	eba3 0209 	sub.w	r2, r3, r9
 8004f0e:	d123      	bne.n	8004f58 <_scanf_float+0x3c0>
 8004f10:	2200      	movs	r2, #0
 8004f12:	4659      	mov	r1, fp
 8004f14:	4640      	mov	r0, r8
 8004f16:	f000 ff09 	bl	8005d2c <_strtod_r>
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	9b03      	ldr	r3, [sp, #12]
 8004f1e:	f012 0f02 	tst.w	r2, #2
 8004f22:	ec57 6b10 	vmov	r6, r7, d0
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	d021      	beq.n	8004f6e <_scanf_float+0x3d6>
 8004f2a:	9903      	ldr	r1, [sp, #12]
 8004f2c:	1d1a      	adds	r2, r3, #4
 8004f2e:	600a      	str	r2, [r1, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	e9c3 6700 	strd	r6, r7, [r3]
 8004f36:	68e3      	ldr	r3, [r4, #12]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	60e3      	str	r3, [r4, #12]
 8004f3c:	e66d      	b.n	8004c1a <_scanf_float+0x82>
 8004f3e:	9b04      	ldr	r3, [sp, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0e5      	beq.n	8004f10 <_scanf_float+0x378>
 8004f44:	9905      	ldr	r1, [sp, #20]
 8004f46:	230a      	movs	r3, #10
 8004f48:	462a      	mov	r2, r5
 8004f4a:	3101      	adds	r1, #1
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	f000 ff75 	bl	8005e3c <_strtol_r>
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	9e05      	ldr	r6, [sp, #20]
 8004f56:	1ac2      	subs	r2, r0, r3
 8004f58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004f5c:	429e      	cmp	r6, r3
 8004f5e:	bf28      	it	cs
 8004f60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004f64:	4912      	ldr	r1, [pc, #72]	; (8004fb0 <_scanf_float+0x418>)
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 f82c 	bl	8004fc4 <siprintf>
 8004f6c:	e7d0      	b.n	8004f10 <_scanf_float+0x378>
 8004f6e:	9903      	ldr	r1, [sp, #12]
 8004f70:	f012 0f04 	tst.w	r2, #4
 8004f74:	f103 0204 	add.w	r2, r3, #4
 8004f78:	600a      	str	r2, [r1, #0]
 8004f7a:	d1d9      	bne.n	8004f30 <_scanf_float+0x398>
 8004f7c:	f8d3 8000 	ldr.w	r8, [r3]
 8004f80:	ee10 2a10 	vmov	r2, s0
 8004f84:	ee10 0a10 	vmov	r0, s0
 8004f88:	463b      	mov	r3, r7
 8004f8a:	4639      	mov	r1, r7
 8004f8c:	f7fb fde6 	bl	8000b5c <__aeabi_dcmpun>
 8004f90:	b128      	cbz	r0, 8004f9e <_scanf_float+0x406>
 8004f92:	4808      	ldr	r0, [pc, #32]	; (8004fb4 <_scanf_float+0x41c>)
 8004f94:	f000 f810 	bl	8004fb8 <nanf>
 8004f98:	ed88 0a00 	vstr	s0, [r8]
 8004f9c:	e7cb      	b.n	8004f36 <_scanf_float+0x39e>
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	f7fb fe39 	bl	8000c18 <__aeabi_d2f>
 8004fa6:	f8c8 0000 	str.w	r0, [r8]
 8004faa:	e7c4      	b.n	8004f36 <_scanf_float+0x39e>
 8004fac:	2500      	movs	r5, #0
 8004fae:	e634      	b.n	8004c1a <_scanf_float+0x82>
 8004fb0:	0800978a 	.word	0x0800978a
 8004fb4:	08009bab 	.word	0x08009bab

08004fb8 <nanf>:
 8004fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004fc0 <nanf+0x8>
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	7fc00000 	.word	0x7fc00000

08004fc4 <siprintf>:
 8004fc4:	b40e      	push	{r1, r2, r3}
 8004fc6:	b500      	push	{lr}
 8004fc8:	b09c      	sub	sp, #112	; 0x70
 8004fca:	ab1d      	add	r3, sp, #116	; 0x74
 8004fcc:	9002      	str	r0, [sp, #8]
 8004fce:	9006      	str	r0, [sp, #24]
 8004fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fd4:	4809      	ldr	r0, [pc, #36]	; (8004ffc <siprintf+0x38>)
 8004fd6:	9107      	str	r1, [sp, #28]
 8004fd8:	9104      	str	r1, [sp, #16]
 8004fda:	4909      	ldr	r1, [pc, #36]	; (8005000 <siprintf+0x3c>)
 8004fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe0:	9105      	str	r1, [sp, #20]
 8004fe2:	6800      	ldr	r0, [r0, #0]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	a902      	add	r1, sp, #8
 8004fe8:	f002 ff8a 	bl	8007f00 <_svfiprintf_r>
 8004fec:	9b02      	ldr	r3, [sp, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	b01c      	add	sp, #112	; 0x70
 8004ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff8:	b003      	add	sp, #12
 8004ffa:	4770      	bx	lr
 8004ffc:	2000000c 	.word	0x2000000c
 8005000:	ffff0208 	.word	0xffff0208

08005004 <siscanf>:
 8005004:	b40e      	push	{r1, r2, r3}
 8005006:	b510      	push	{r4, lr}
 8005008:	b09f      	sub	sp, #124	; 0x7c
 800500a:	ac21      	add	r4, sp, #132	; 0x84
 800500c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005010:	f854 2b04 	ldr.w	r2, [r4], #4
 8005014:	9201      	str	r2, [sp, #4]
 8005016:	f8ad 101c 	strh.w	r1, [sp, #28]
 800501a:	9004      	str	r0, [sp, #16]
 800501c:	9008      	str	r0, [sp, #32]
 800501e:	f7fb f8e9 	bl	80001f4 <strlen>
 8005022:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <siscanf+0x50>)
 8005024:	9005      	str	r0, [sp, #20]
 8005026:	9009      	str	r0, [sp, #36]	; 0x24
 8005028:	930d      	str	r3, [sp, #52]	; 0x34
 800502a:	480b      	ldr	r0, [pc, #44]	; (8005058 <siscanf+0x54>)
 800502c:	9a01      	ldr	r2, [sp, #4]
 800502e:	6800      	ldr	r0, [r0, #0]
 8005030:	9403      	str	r4, [sp, #12]
 8005032:	2300      	movs	r3, #0
 8005034:	9311      	str	r3, [sp, #68]	; 0x44
 8005036:	9316      	str	r3, [sp, #88]	; 0x58
 8005038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800503c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005040:	a904      	add	r1, sp, #16
 8005042:	4623      	mov	r3, r4
 8005044:	f003 f8b6 	bl	80081b4 <__ssvfiscanf_r>
 8005048:	b01f      	add	sp, #124	; 0x7c
 800504a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800504e:	b003      	add	sp, #12
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	0800507f 	.word	0x0800507f
 8005058:	2000000c 	.word	0x2000000c

0800505c <__sread>:
 800505c:	b510      	push	{r4, lr}
 800505e:	460c      	mov	r4, r1
 8005060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005064:	f003 fb70 	bl	8008748 <_read_r>
 8005068:	2800      	cmp	r0, #0
 800506a:	bfab      	itete	ge
 800506c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800506e:	89a3      	ldrhlt	r3, [r4, #12]
 8005070:	181b      	addge	r3, r3, r0
 8005072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005076:	bfac      	ite	ge
 8005078:	6563      	strge	r3, [r4, #84]	; 0x54
 800507a:	81a3      	strhlt	r3, [r4, #12]
 800507c:	bd10      	pop	{r4, pc}

0800507e <__seofread>:
 800507e:	2000      	movs	r0, #0
 8005080:	4770      	bx	lr

08005082 <__swrite>:
 8005082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005086:	461f      	mov	r7, r3
 8005088:	898b      	ldrh	r3, [r1, #12]
 800508a:	05db      	lsls	r3, r3, #23
 800508c:	4605      	mov	r5, r0
 800508e:	460c      	mov	r4, r1
 8005090:	4616      	mov	r6, r2
 8005092:	d505      	bpl.n	80050a0 <__swrite+0x1e>
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	2302      	movs	r3, #2
 800509a:	2200      	movs	r2, #0
 800509c:	f002 f8e2 	bl	8007264 <_lseek_r>
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	4632      	mov	r2, r6
 80050ae:	463b      	mov	r3, r7
 80050b0:	4628      	mov	r0, r5
 80050b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	f000 bec3 	b.w	8005e40 <_write_r>

080050ba <__sseek>:
 80050ba:	b510      	push	{r4, lr}
 80050bc:	460c      	mov	r4, r1
 80050be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c2:	f002 f8cf 	bl	8007264 <_lseek_r>
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	bf15      	itete	ne
 80050cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80050ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050d6:	81a3      	strheq	r3, [r4, #12]
 80050d8:	bf18      	it	ne
 80050da:	81a3      	strhne	r3, [r4, #12]
 80050dc:	bd10      	pop	{r4, pc}

080050de <__sclose>:
 80050de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e2:	f000 bebf 	b.w	8005e64 <_close_r>

080050e6 <sulp>:
 80050e6:	b570      	push	{r4, r5, r6, lr}
 80050e8:	4604      	mov	r4, r0
 80050ea:	460d      	mov	r5, r1
 80050ec:	ec45 4b10 	vmov	d0, r4, r5
 80050f0:	4616      	mov	r6, r2
 80050f2:	f002 fc63 	bl	80079bc <__ulp>
 80050f6:	ec51 0b10 	vmov	r0, r1, d0
 80050fa:	b17e      	cbz	r6, 800511c <sulp+0x36>
 80050fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005100:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005104:	2b00      	cmp	r3, #0
 8005106:	dd09      	ble.n	800511c <sulp+0x36>
 8005108:	051b      	lsls	r3, r3, #20
 800510a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800510e:	2400      	movs	r4, #0
 8005110:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005114:	4622      	mov	r2, r4
 8005116:	462b      	mov	r3, r5
 8005118:	f7fb fa86 	bl	8000628 <__aeabi_dmul>
 800511c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005120 <_strtod_l>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	ed2d 8b02 	vpush	{d8}
 8005128:	b09d      	sub	sp, #116	; 0x74
 800512a:	461f      	mov	r7, r3
 800512c:	2300      	movs	r3, #0
 800512e:	9318      	str	r3, [sp, #96]	; 0x60
 8005130:	4ba2      	ldr	r3, [pc, #648]	; (80053bc <_strtod_l+0x29c>)
 8005132:	9213      	str	r2, [sp, #76]	; 0x4c
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	9305      	str	r3, [sp, #20]
 8005138:	4604      	mov	r4, r0
 800513a:	4618      	mov	r0, r3
 800513c:	4688      	mov	r8, r1
 800513e:	f7fb f859 	bl	80001f4 <strlen>
 8005142:	f04f 0a00 	mov.w	sl, #0
 8005146:	4605      	mov	r5, r0
 8005148:	f04f 0b00 	mov.w	fp, #0
 800514c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005152:	781a      	ldrb	r2, [r3, #0]
 8005154:	2a2b      	cmp	r2, #43	; 0x2b
 8005156:	d04e      	beq.n	80051f6 <_strtod_l+0xd6>
 8005158:	d83b      	bhi.n	80051d2 <_strtod_l+0xb2>
 800515a:	2a0d      	cmp	r2, #13
 800515c:	d834      	bhi.n	80051c8 <_strtod_l+0xa8>
 800515e:	2a08      	cmp	r2, #8
 8005160:	d834      	bhi.n	80051cc <_strtod_l+0xac>
 8005162:	2a00      	cmp	r2, #0
 8005164:	d03e      	beq.n	80051e4 <_strtod_l+0xc4>
 8005166:	2300      	movs	r3, #0
 8005168:	930a      	str	r3, [sp, #40]	; 0x28
 800516a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800516c:	7833      	ldrb	r3, [r6, #0]
 800516e:	2b30      	cmp	r3, #48	; 0x30
 8005170:	f040 80b0 	bne.w	80052d4 <_strtod_l+0x1b4>
 8005174:	7873      	ldrb	r3, [r6, #1]
 8005176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800517a:	2b58      	cmp	r3, #88	; 0x58
 800517c:	d168      	bne.n	8005250 <_strtod_l+0x130>
 800517e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	ab18      	add	r3, sp, #96	; 0x60
 8005184:	9702      	str	r7, [sp, #8]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	4a8d      	ldr	r2, [pc, #564]	; (80053c0 <_strtod_l+0x2a0>)
 800518a:	ab19      	add	r3, sp, #100	; 0x64
 800518c:	a917      	add	r1, sp, #92	; 0x5c
 800518e:	4620      	mov	r0, r4
 8005190:	f001 fd5c 	bl	8006c4c <__gethex>
 8005194:	f010 0707 	ands.w	r7, r0, #7
 8005198:	4605      	mov	r5, r0
 800519a:	d005      	beq.n	80051a8 <_strtod_l+0x88>
 800519c:	2f06      	cmp	r7, #6
 800519e:	d12c      	bne.n	80051fa <_strtod_l+0xda>
 80051a0:	3601      	adds	r6, #1
 80051a2:	2300      	movs	r3, #0
 80051a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80051a6:	930a      	str	r3, [sp, #40]	; 0x28
 80051a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f040 8590 	bne.w	8005cd0 <_strtod_l+0xbb0>
 80051b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b2:	b1eb      	cbz	r3, 80051f0 <_strtod_l+0xd0>
 80051b4:	4652      	mov	r2, sl
 80051b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80051ba:	ec43 2b10 	vmov	d0, r2, r3
 80051be:	b01d      	add	sp, #116	; 0x74
 80051c0:	ecbd 8b02 	vpop	{d8}
 80051c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c8:	2a20      	cmp	r2, #32
 80051ca:	d1cc      	bne.n	8005166 <_strtod_l+0x46>
 80051cc:	3301      	adds	r3, #1
 80051ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80051d0:	e7be      	b.n	8005150 <_strtod_l+0x30>
 80051d2:	2a2d      	cmp	r2, #45	; 0x2d
 80051d4:	d1c7      	bne.n	8005166 <_strtod_l+0x46>
 80051d6:	2201      	movs	r2, #1
 80051d8:	920a      	str	r2, [sp, #40]	; 0x28
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1c2      	bne.n	800516a <_strtod_l+0x4a>
 80051e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 856e 	bne.w	8005ccc <_strtod_l+0xbac>
 80051f0:	4652      	mov	r2, sl
 80051f2:	465b      	mov	r3, fp
 80051f4:	e7e1      	b.n	80051ba <_strtod_l+0x9a>
 80051f6:	2200      	movs	r2, #0
 80051f8:	e7ee      	b.n	80051d8 <_strtod_l+0xb8>
 80051fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80051fc:	b13a      	cbz	r2, 800520e <_strtod_l+0xee>
 80051fe:	2135      	movs	r1, #53	; 0x35
 8005200:	a81a      	add	r0, sp, #104	; 0x68
 8005202:	f002 fce6 	bl	8007bd2 <__copybits>
 8005206:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005208:	4620      	mov	r0, r4
 800520a:	f002 f8a5 	bl	8007358 <_Bfree>
 800520e:	3f01      	subs	r7, #1
 8005210:	2f04      	cmp	r7, #4
 8005212:	d806      	bhi.n	8005222 <_strtod_l+0x102>
 8005214:	e8df f007 	tbb	[pc, r7]
 8005218:	1714030a 	.word	0x1714030a
 800521c:	0a          	.byte	0x0a
 800521d:	00          	.byte	0x00
 800521e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005222:	0728      	lsls	r0, r5, #28
 8005224:	d5c0      	bpl.n	80051a8 <_strtod_l+0x88>
 8005226:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800522a:	e7bd      	b.n	80051a8 <_strtod_l+0x88>
 800522c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005230:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005236:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800523a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800523e:	e7f0      	b.n	8005222 <_strtod_l+0x102>
 8005240:	f8df b180 	ldr.w	fp, [pc, #384]	; 80053c4 <_strtod_l+0x2a4>
 8005244:	e7ed      	b.n	8005222 <_strtod_l+0x102>
 8005246:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800524a:	f04f 3aff 	mov.w	sl, #4294967295
 800524e:	e7e8      	b.n	8005222 <_strtod_l+0x102>
 8005250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	9217      	str	r2, [sp, #92]	; 0x5c
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b30      	cmp	r3, #48	; 0x30
 800525a:	d0f9      	beq.n	8005250 <_strtod_l+0x130>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0a3      	beq.n	80051a8 <_strtod_l+0x88>
 8005260:	2301      	movs	r3, #1
 8005262:	f04f 0900 	mov.w	r9, #0
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800526a:	9308      	str	r3, [sp, #32]
 800526c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005270:	464f      	mov	r7, r9
 8005272:	220a      	movs	r2, #10
 8005274:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005276:	7806      	ldrb	r6, [r0, #0]
 8005278:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800527c:	b2d9      	uxtb	r1, r3
 800527e:	2909      	cmp	r1, #9
 8005280:	d92a      	bls.n	80052d8 <_strtod_l+0x1b8>
 8005282:	9905      	ldr	r1, [sp, #20]
 8005284:	462a      	mov	r2, r5
 8005286:	f003 fac3 	bl	8008810 <strncmp>
 800528a:	b398      	cbz	r0, 80052f4 <_strtod_l+0x1d4>
 800528c:	2000      	movs	r0, #0
 800528e:	4632      	mov	r2, r6
 8005290:	463d      	mov	r5, r7
 8005292:	9005      	str	r0, [sp, #20]
 8005294:	4603      	mov	r3, r0
 8005296:	2a65      	cmp	r2, #101	; 0x65
 8005298:	d001      	beq.n	800529e <_strtod_l+0x17e>
 800529a:	2a45      	cmp	r2, #69	; 0x45
 800529c:	d118      	bne.n	80052d0 <_strtod_l+0x1b0>
 800529e:	b91d      	cbnz	r5, 80052a8 <_strtod_l+0x188>
 80052a0:	9a04      	ldr	r2, [sp, #16]
 80052a2:	4302      	orrs	r2, r0
 80052a4:	d09e      	beq.n	80051e4 <_strtod_l+0xc4>
 80052a6:	2500      	movs	r5, #0
 80052a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80052ac:	f108 0201 	add.w	r2, r8, #1
 80052b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80052b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80052b6:	2a2b      	cmp	r2, #43	; 0x2b
 80052b8:	d075      	beq.n	80053a6 <_strtod_l+0x286>
 80052ba:	2a2d      	cmp	r2, #45	; 0x2d
 80052bc:	d07b      	beq.n	80053b6 <_strtod_l+0x296>
 80052be:	f04f 0c00 	mov.w	ip, #0
 80052c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052c6:	2909      	cmp	r1, #9
 80052c8:	f240 8082 	bls.w	80053d0 <_strtod_l+0x2b0>
 80052cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80052d0:	2600      	movs	r6, #0
 80052d2:	e09d      	b.n	8005410 <_strtod_l+0x2f0>
 80052d4:	2300      	movs	r3, #0
 80052d6:	e7c4      	b.n	8005262 <_strtod_l+0x142>
 80052d8:	2f08      	cmp	r7, #8
 80052da:	bfd8      	it	le
 80052dc:	9907      	ldrle	r1, [sp, #28]
 80052de:	f100 0001 	add.w	r0, r0, #1
 80052e2:	bfda      	itte	le
 80052e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80052e8:	9307      	strle	r3, [sp, #28]
 80052ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80052ee:	3701      	adds	r7, #1
 80052f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80052f2:	e7bf      	b.n	8005274 <_strtod_l+0x154>
 80052f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052f6:	195a      	adds	r2, r3, r5
 80052f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80052fa:	5d5a      	ldrb	r2, [r3, r5]
 80052fc:	2f00      	cmp	r7, #0
 80052fe:	d037      	beq.n	8005370 <_strtod_l+0x250>
 8005300:	9005      	str	r0, [sp, #20]
 8005302:	463d      	mov	r5, r7
 8005304:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005308:	2b09      	cmp	r3, #9
 800530a:	d912      	bls.n	8005332 <_strtod_l+0x212>
 800530c:	2301      	movs	r3, #1
 800530e:	e7c2      	b.n	8005296 <_strtod_l+0x176>
 8005310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	9217      	str	r2, [sp, #92]	; 0x5c
 8005316:	785a      	ldrb	r2, [r3, #1]
 8005318:	3001      	adds	r0, #1
 800531a:	2a30      	cmp	r2, #48	; 0x30
 800531c:	d0f8      	beq.n	8005310 <_strtod_l+0x1f0>
 800531e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005322:	2b08      	cmp	r3, #8
 8005324:	f200 84d9 	bhi.w	8005cda <_strtod_l+0xbba>
 8005328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800532a:	9005      	str	r0, [sp, #20]
 800532c:	2000      	movs	r0, #0
 800532e:	9308      	str	r3, [sp, #32]
 8005330:	4605      	mov	r5, r0
 8005332:	3a30      	subs	r2, #48	; 0x30
 8005334:	f100 0301 	add.w	r3, r0, #1
 8005338:	d014      	beq.n	8005364 <_strtod_l+0x244>
 800533a:	9905      	ldr	r1, [sp, #20]
 800533c:	4419      	add	r1, r3
 800533e:	9105      	str	r1, [sp, #20]
 8005340:	462b      	mov	r3, r5
 8005342:	eb00 0e05 	add.w	lr, r0, r5
 8005346:	210a      	movs	r1, #10
 8005348:	4573      	cmp	r3, lr
 800534a:	d113      	bne.n	8005374 <_strtod_l+0x254>
 800534c:	182b      	adds	r3, r5, r0
 800534e:	2b08      	cmp	r3, #8
 8005350:	f105 0501 	add.w	r5, r5, #1
 8005354:	4405      	add	r5, r0
 8005356:	dc1c      	bgt.n	8005392 <_strtod_l+0x272>
 8005358:	9907      	ldr	r1, [sp, #28]
 800535a:	230a      	movs	r3, #10
 800535c:	fb03 2301 	mla	r3, r3, r1, r2
 8005360:	9307      	str	r3, [sp, #28]
 8005362:	2300      	movs	r3, #0
 8005364:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005366:	1c51      	adds	r1, r2, #1
 8005368:	9117      	str	r1, [sp, #92]	; 0x5c
 800536a:	7852      	ldrb	r2, [r2, #1]
 800536c:	4618      	mov	r0, r3
 800536e:	e7c9      	b.n	8005304 <_strtod_l+0x1e4>
 8005370:	4638      	mov	r0, r7
 8005372:	e7d2      	b.n	800531a <_strtod_l+0x1fa>
 8005374:	2b08      	cmp	r3, #8
 8005376:	dc04      	bgt.n	8005382 <_strtod_l+0x262>
 8005378:	9e07      	ldr	r6, [sp, #28]
 800537a:	434e      	muls	r6, r1
 800537c:	9607      	str	r6, [sp, #28]
 800537e:	3301      	adds	r3, #1
 8005380:	e7e2      	b.n	8005348 <_strtod_l+0x228>
 8005382:	f103 0c01 	add.w	ip, r3, #1
 8005386:	f1bc 0f10 	cmp.w	ip, #16
 800538a:	bfd8      	it	le
 800538c:	fb01 f909 	mulle.w	r9, r1, r9
 8005390:	e7f5      	b.n	800537e <_strtod_l+0x25e>
 8005392:	2d10      	cmp	r5, #16
 8005394:	bfdc      	itt	le
 8005396:	230a      	movle	r3, #10
 8005398:	fb03 2909 	mlale	r9, r3, r9, r2
 800539c:	e7e1      	b.n	8005362 <_strtod_l+0x242>
 800539e:	2300      	movs	r3, #0
 80053a0:	9305      	str	r3, [sp, #20]
 80053a2:	2301      	movs	r3, #1
 80053a4:	e77c      	b.n	80052a0 <_strtod_l+0x180>
 80053a6:	f04f 0c00 	mov.w	ip, #0
 80053aa:	f108 0202 	add.w	r2, r8, #2
 80053ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80053b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80053b4:	e785      	b.n	80052c2 <_strtod_l+0x1a2>
 80053b6:	f04f 0c01 	mov.w	ip, #1
 80053ba:	e7f6      	b.n	80053aa <_strtod_l+0x28a>
 80053bc:	080099d8 	.word	0x080099d8
 80053c0:	08009790 	.word	0x08009790
 80053c4:	7ff00000 	.word	0x7ff00000
 80053c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80053ca:	1c51      	adds	r1, r2, #1
 80053cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80053ce:	7852      	ldrb	r2, [r2, #1]
 80053d0:	2a30      	cmp	r2, #48	; 0x30
 80053d2:	d0f9      	beq.n	80053c8 <_strtod_l+0x2a8>
 80053d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80053d8:	2908      	cmp	r1, #8
 80053da:	f63f af79 	bhi.w	80052d0 <_strtod_l+0x1b0>
 80053de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80053e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80053e4:	9206      	str	r2, [sp, #24]
 80053e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80053e8:	1c51      	adds	r1, r2, #1
 80053ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80053ec:	7852      	ldrb	r2, [r2, #1]
 80053ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80053f2:	2e09      	cmp	r6, #9
 80053f4:	d937      	bls.n	8005466 <_strtod_l+0x346>
 80053f6:	9e06      	ldr	r6, [sp, #24]
 80053f8:	1b89      	subs	r1, r1, r6
 80053fa:	2908      	cmp	r1, #8
 80053fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005400:	dc02      	bgt.n	8005408 <_strtod_l+0x2e8>
 8005402:	4576      	cmp	r6, lr
 8005404:	bfa8      	it	ge
 8005406:	4676      	movge	r6, lr
 8005408:	f1bc 0f00 	cmp.w	ip, #0
 800540c:	d000      	beq.n	8005410 <_strtod_l+0x2f0>
 800540e:	4276      	negs	r6, r6
 8005410:	2d00      	cmp	r5, #0
 8005412:	d14d      	bne.n	80054b0 <_strtod_l+0x390>
 8005414:	9904      	ldr	r1, [sp, #16]
 8005416:	4301      	orrs	r1, r0
 8005418:	f47f aec6 	bne.w	80051a8 <_strtod_l+0x88>
 800541c:	2b00      	cmp	r3, #0
 800541e:	f47f aee1 	bne.w	80051e4 <_strtod_l+0xc4>
 8005422:	2a69      	cmp	r2, #105	; 0x69
 8005424:	d027      	beq.n	8005476 <_strtod_l+0x356>
 8005426:	dc24      	bgt.n	8005472 <_strtod_l+0x352>
 8005428:	2a49      	cmp	r2, #73	; 0x49
 800542a:	d024      	beq.n	8005476 <_strtod_l+0x356>
 800542c:	2a4e      	cmp	r2, #78	; 0x4e
 800542e:	f47f aed9 	bne.w	80051e4 <_strtod_l+0xc4>
 8005432:	499f      	ldr	r1, [pc, #636]	; (80056b0 <_strtod_l+0x590>)
 8005434:	a817      	add	r0, sp, #92	; 0x5c
 8005436:	f001 fe61 	bl	80070fc <__match>
 800543a:	2800      	cmp	r0, #0
 800543c:	f43f aed2 	beq.w	80051e4 <_strtod_l+0xc4>
 8005440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b28      	cmp	r3, #40	; 0x28
 8005446:	d12d      	bne.n	80054a4 <_strtod_l+0x384>
 8005448:	499a      	ldr	r1, [pc, #616]	; (80056b4 <_strtod_l+0x594>)
 800544a:	aa1a      	add	r2, sp, #104	; 0x68
 800544c:	a817      	add	r0, sp, #92	; 0x5c
 800544e:	f001 fe69 	bl	8007124 <__hexnan>
 8005452:	2805      	cmp	r0, #5
 8005454:	d126      	bne.n	80054a4 <_strtod_l+0x384>
 8005456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005458:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800545c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005460:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005464:	e6a0      	b.n	80051a8 <_strtod_l+0x88>
 8005466:	210a      	movs	r1, #10
 8005468:	fb01 2e0e 	mla	lr, r1, lr, r2
 800546c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005470:	e7b9      	b.n	80053e6 <_strtod_l+0x2c6>
 8005472:	2a6e      	cmp	r2, #110	; 0x6e
 8005474:	e7db      	b.n	800542e <_strtod_l+0x30e>
 8005476:	4990      	ldr	r1, [pc, #576]	; (80056b8 <_strtod_l+0x598>)
 8005478:	a817      	add	r0, sp, #92	; 0x5c
 800547a:	f001 fe3f 	bl	80070fc <__match>
 800547e:	2800      	cmp	r0, #0
 8005480:	f43f aeb0 	beq.w	80051e4 <_strtod_l+0xc4>
 8005484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005486:	498d      	ldr	r1, [pc, #564]	; (80056bc <_strtod_l+0x59c>)
 8005488:	3b01      	subs	r3, #1
 800548a:	a817      	add	r0, sp, #92	; 0x5c
 800548c:	9317      	str	r3, [sp, #92]	; 0x5c
 800548e:	f001 fe35 	bl	80070fc <__match>
 8005492:	b910      	cbnz	r0, 800549a <_strtod_l+0x37a>
 8005494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005496:	3301      	adds	r3, #1
 8005498:	9317      	str	r3, [sp, #92]	; 0x5c
 800549a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80056cc <_strtod_l+0x5ac>
 800549e:	f04f 0a00 	mov.w	sl, #0
 80054a2:	e681      	b.n	80051a8 <_strtod_l+0x88>
 80054a4:	4886      	ldr	r0, [pc, #536]	; (80056c0 <_strtod_l+0x5a0>)
 80054a6:	f003 f963 	bl	8008770 <nan>
 80054aa:	ec5b ab10 	vmov	sl, fp, d0
 80054ae:	e67b      	b.n	80051a8 <_strtod_l+0x88>
 80054b0:	9b05      	ldr	r3, [sp, #20]
 80054b2:	9807      	ldr	r0, [sp, #28]
 80054b4:	1af3      	subs	r3, r6, r3
 80054b6:	2f00      	cmp	r7, #0
 80054b8:	bf08      	it	eq
 80054ba:	462f      	moveq	r7, r5
 80054bc:	2d10      	cmp	r5, #16
 80054be:	9306      	str	r3, [sp, #24]
 80054c0:	46a8      	mov	r8, r5
 80054c2:	bfa8      	it	ge
 80054c4:	f04f 0810 	movge.w	r8, #16
 80054c8:	f7fb f834 	bl	8000534 <__aeabi_ui2d>
 80054cc:	2d09      	cmp	r5, #9
 80054ce:	4682      	mov	sl, r0
 80054d0:	468b      	mov	fp, r1
 80054d2:	dd13      	ble.n	80054fc <_strtod_l+0x3dc>
 80054d4:	4b7b      	ldr	r3, [pc, #492]	; (80056c4 <_strtod_l+0x5a4>)
 80054d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80054da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054de:	f7fb f8a3 	bl	8000628 <__aeabi_dmul>
 80054e2:	4682      	mov	sl, r0
 80054e4:	4648      	mov	r0, r9
 80054e6:	468b      	mov	fp, r1
 80054e8:	f7fb f824 	bl	8000534 <__aeabi_ui2d>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4650      	mov	r0, sl
 80054f2:	4659      	mov	r1, fp
 80054f4:	f7fa fee2 	bl	80002bc <__adddf3>
 80054f8:	4682      	mov	sl, r0
 80054fa:	468b      	mov	fp, r1
 80054fc:	2d0f      	cmp	r5, #15
 80054fe:	dc38      	bgt.n	8005572 <_strtod_l+0x452>
 8005500:	9b06      	ldr	r3, [sp, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f43f ae50 	beq.w	80051a8 <_strtod_l+0x88>
 8005508:	dd24      	ble.n	8005554 <_strtod_l+0x434>
 800550a:	2b16      	cmp	r3, #22
 800550c:	dc0b      	bgt.n	8005526 <_strtod_l+0x406>
 800550e:	496d      	ldr	r1, [pc, #436]	; (80056c4 <_strtod_l+0x5a4>)
 8005510:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005518:	4652      	mov	r2, sl
 800551a:	465b      	mov	r3, fp
 800551c:	f7fb f884 	bl	8000628 <__aeabi_dmul>
 8005520:	4682      	mov	sl, r0
 8005522:	468b      	mov	fp, r1
 8005524:	e640      	b.n	80051a8 <_strtod_l+0x88>
 8005526:	9a06      	ldr	r2, [sp, #24]
 8005528:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800552c:	4293      	cmp	r3, r2
 800552e:	db20      	blt.n	8005572 <_strtod_l+0x452>
 8005530:	4c64      	ldr	r4, [pc, #400]	; (80056c4 <_strtod_l+0x5a4>)
 8005532:	f1c5 050f 	rsb	r5, r5, #15
 8005536:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800553a:	4652      	mov	r2, sl
 800553c:	465b      	mov	r3, fp
 800553e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005542:	f7fb f871 	bl	8000628 <__aeabi_dmul>
 8005546:	9b06      	ldr	r3, [sp, #24]
 8005548:	1b5d      	subs	r5, r3, r5
 800554a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800554e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005552:	e7e3      	b.n	800551c <_strtod_l+0x3fc>
 8005554:	9b06      	ldr	r3, [sp, #24]
 8005556:	3316      	adds	r3, #22
 8005558:	db0b      	blt.n	8005572 <_strtod_l+0x452>
 800555a:	9b05      	ldr	r3, [sp, #20]
 800555c:	1b9e      	subs	r6, r3, r6
 800555e:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <_strtod_l+0x5a4>)
 8005560:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005564:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005568:	4650      	mov	r0, sl
 800556a:	4659      	mov	r1, fp
 800556c:	f7fb f986 	bl	800087c <__aeabi_ddiv>
 8005570:	e7d6      	b.n	8005520 <_strtod_l+0x400>
 8005572:	9b06      	ldr	r3, [sp, #24]
 8005574:	eba5 0808 	sub.w	r8, r5, r8
 8005578:	4498      	add	r8, r3
 800557a:	f1b8 0f00 	cmp.w	r8, #0
 800557e:	dd74      	ble.n	800566a <_strtod_l+0x54a>
 8005580:	f018 030f 	ands.w	r3, r8, #15
 8005584:	d00a      	beq.n	800559c <_strtod_l+0x47c>
 8005586:	494f      	ldr	r1, [pc, #316]	; (80056c4 <_strtod_l+0x5a4>)
 8005588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800558c:	4652      	mov	r2, sl
 800558e:	465b      	mov	r3, fp
 8005590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005594:	f7fb f848 	bl	8000628 <__aeabi_dmul>
 8005598:	4682      	mov	sl, r0
 800559a:	468b      	mov	fp, r1
 800559c:	f038 080f 	bics.w	r8, r8, #15
 80055a0:	d04f      	beq.n	8005642 <_strtod_l+0x522>
 80055a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80055a6:	dd22      	ble.n	80055ee <_strtod_l+0x4ce>
 80055a8:	2500      	movs	r5, #0
 80055aa:	462e      	mov	r6, r5
 80055ac:	9507      	str	r5, [sp, #28]
 80055ae:	9505      	str	r5, [sp, #20]
 80055b0:	2322      	movs	r3, #34	; 0x22
 80055b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80056cc <_strtod_l+0x5ac>
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	f04f 0a00 	mov.w	sl, #0
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f43f adf2 	beq.w	80051a8 <_strtod_l+0x88>
 80055c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80055c6:	4620      	mov	r0, r4
 80055c8:	f001 fec6 	bl	8007358 <_Bfree>
 80055cc:	9905      	ldr	r1, [sp, #20]
 80055ce:	4620      	mov	r0, r4
 80055d0:	f001 fec2 	bl	8007358 <_Bfree>
 80055d4:	4631      	mov	r1, r6
 80055d6:	4620      	mov	r0, r4
 80055d8:	f001 febe 	bl	8007358 <_Bfree>
 80055dc:	9907      	ldr	r1, [sp, #28]
 80055de:	4620      	mov	r0, r4
 80055e0:	f001 feba 	bl	8007358 <_Bfree>
 80055e4:	4629      	mov	r1, r5
 80055e6:	4620      	mov	r0, r4
 80055e8:	f001 feb6 	bl	8007358 <_Bfree>
 80055ec:	e5dc      	b.n	80051a8 <_strtod_l+0x88>
 80055ee:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <_strtod_l+0x5a8>)
 80055f0:	9304      	str	r3, [sp, #16]
 80055f2:	2300      	movs	r3, #0
 80055f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80055f8:	4650      	mov	r0, sl
 80055fa:	4659      	mov	r1, fp
 80055fc:	4699      	mov	r9, r3
 80055fe:	f1b8 0f01 	cmp.w	r8, #1
 8005602:	dc21      	bgt.n	8005648 <_strtod_l+0x528>
 8005604:	b10b      	cbz	r3, 800560a <_strtod_l+0x4ea>
 8005606:	4682      	mov	sl, r0
 8005608:	468b      	mov	fp, r1
 800560a:	4b2f      	ldr	r3, [pc, #188]	; (80056c8 <_strtod_l+0x5a8>)
 800560c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005610:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005614:	4652      	mov	r2, sl
 8005616:	465b      	mov	r3, fp
 8005618:	e9d9 0100 	ldrd	r0, r1, [r9]
 800561c:	f7fb f804 	bl	8000628 <__aeabi_dmul>
 8005620:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <_strtod_l+0x5ac>)
 8005622:	460a      	mov	r2, r1
 8005624:	400b      	ands	r3, r1
 8005626:	492a      	ldr	r1, [pc, #168]	; (80056d0 <_strtod_l+0x5b0>)
 8005628:	428b      	cmp	r3, r1
 800562a:	4682      	mov	sl, r0
 800562c:	d8bc      	bhi.n	80055a8 <_strtod_l+0x488>
 800562e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005632:	428b      	cmp	r3, r1
 8005634:	bf86      	itte	hi
 8005636:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80056d4 <_strtod_l+0x5b4>
 800563a:	f04f 3aff 	movhi.w	sl, #4294967295
 800563e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005642:	2300      	movs	r3, #0
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	e084      	b.n	8005752 <_strtod_l+0x632>
 8005648:	f018 0f01 	tst.w	r8, #1
 800564c:	d005      	beq.n	800565a <_strtod_l+0x53a>
 800564e:	9b04      	ldr	r3, [sp, #16]
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fa ffe8 	bl	8000628 <__aeabi_dmul>
 8005658:	2301      	movs	r3, #1
 800565a:	9a04      	ldr	r2, [sp, #16]
 800565c:	3208      	adds	r2, #8
 800565e:	f109 0901 	add.w	r9, r9, #1
 8005662:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005666:	9204      	str	r2, [sp, #16]
 8005668:	e7c9      	b.n	80055fe <_strtod_l+0x4de>
 800566a:	d0ea      	beq.n	8005642 <_strtod_l+0x522>
 800566c:	f1c8 0800 	rsb	r8, r8, #0
 8005670:	f018 020f 	ands.w	r2, r8, #15
 8005674:	d00a      	beq.n	800568c <_strtod_l+0x56c>
 8005676:	4b13      	ldr	r3, [pc, #76]	; (80056c4 <_strtod_l+0x5a4>)
 8005678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800567c:	4650      	mov	r0, sl
 800567e:	4659      	mov	r1, fp
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f7fb f8fa 	bl	800087c <__aeabi_ddiv>
 8005688:	4682      	mov	sl, r0
 800568a:	468b      	mov	fp, r1
 800568c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005690:	d0d7      	beq.n	8005642 <_strtod_l+0x522>
 8005692:	f1b8 0f1f 	cmp.w	r8, #31
 8005696:	dd1f      	ble.n	80056d8 <_strtod_l+0x5b8>
 8005698:	2500      	movs	r5, #0
 800569a:	462e      	mov	r6, r5
 800569c:	9507      	str	r5, [sp, #28]
 800569e:	9505      	str	r5, [sp, #20]
 80056a0:	2322      	movs	r3, #34	; 0x22
 80056a2:	f04f 0a00 	mov.w	sl, #0
 80056a6:	f04f 0b00 	mov.w	fp, #0
 80056aa:	6023      	str	r3, [r4, #0]
 80056ac:	e786      	b.n	80055bc <_strtod_l+0x49c>
 80056ae:	bf00      	nop
 80056b0:	08009765 	.word	0x08009765
 80056b4:	080097a4 	.word	0x080097a4
 80056b8:	0800975d 	.word	0x0800975d
 80056bc:	080098e4 	.word	0x080098e4
 80056c0:	08009bab 	.word	0x08009bab
 80056c4:	08009a70 	.word	0x08009a70
 80056c8:	08009a48 	.word	0x08009a48
 80056cc:	7ff00000 	.word	0x7ff00000
 80056d0:	7ca00000 	.word	0x7ca00000
 80056d4:	7fefffff 	.word	0x7fefffff
 80056d8:	f018 0310 	ands.w	r3, r8, #16
 80056dc:	bf18      	it	ne
 80056de:	236a      	movne	r3, #106	; 0x6a
 80056e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005a90 <_strtod_l+0x970>
 80056e4:	9304      	str	r3, [sp, #16]
 80056e6:	4650      	mov	r0, sl
 80056e8:	4659      	mov	r1, fp
 80056ea:	2300      	movs	r3, #0
 80056ec:	f018 0f01 	tst.w	r8, #1
 80056f0:	d004      	beq.n	80056fc <_strtod_l+0x5dc>
 80056f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80056f6:	f7fa ff97 	bl	8000628 <__aeabi_dmul>
 80056fa:	2301      	movs	r3, #1
 80056fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005700:	f109 0908 	add.w	r9, r9, #8
 8005704:	d1f2      	bne.n	80056ec <_strtod_l+0x5cc>
 8005706:	b10b      	cbz	r3, 800570c <_strtod_l+0x5ec>
 8005708:	4682      	mov	sl, r0
 800570a:	468b      	mov	fp, r1
 800570c:	9b04      	ldr	r3, [sp, #16]
 800570e:	b1c3      	cbz	r3, 8005742 <_strtod_l+0x622>
 8005710:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005714:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005718:	2b00      	cmp	r3, #0
 800571a:	4659      	mov	r1, fp
 800571c:	dd11      	ble.n	8005742 <_strtod_l+0x622>
 800571e:	2b1f      	cmp	r3, #31
 8005720:	f340 8124 	ble.w	800596c <_strtod_l+0x84c>
 8005724:	2b34      	cmp	r3, #52	; 0x34
 8005726:	bfde      	ittt	le
 8005728:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800572c:	f04f 33ff 	movle.w	r3, #4294967295
 8005730:	fa03 f202 	lslle.w	r2, r3, r2
 8005734:	f04f 0a00 	mov.w	sl, #0
 8005738:	bfcc      	ite	gt
 800573a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800573e:	ea02 0b01 	andle.w	fp, r2, r1
 8005742:	2200      	movs	r2, #0
 8005744:	2300      	movs	r3, #0
 8005746:	4650      	mov	r0, sl
 8005748:	4659      	mov	r1, fp
 800574a:	f7fb f9d5 	bl	8000af8 <__aeabi_dcmpeq>
 800574e:	2800      	cmp	r0, #0
 8005750:	d1a2      	bne.n	8005698 <_strtod_l+0x578>
 8005752:	9b07      	ldr	r3, [sp, #28]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	9908      	ldr	r1, [sp, #32]
 8005758:	462b      	mov	r3, r5
 800575a:	463a      	mov	r2, r7
 800575c:	4620      	mov	r0, r4
 800575e:	f001 fe63 	bl	8007428 <__s2b>
 8005762:	9007      	str	r0, [sp, #28]
 8005764:	2800      	cmp	r0, #0
 8005766:	f43f af1f 	beq.w	80055a8 <_strtod_l+0x488>
 800576a:	9b05      	ldr	r3, [sp, #20]
 800576c:	1b9e      	subs	r6, r3, r6
 800576e:	9b06      	ldr	r3, [sp, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	bfb4      	ite	lt
 8005774:	4633      	movlt	r3, r6
 8005776:	2300      	movge	r3, #0
 8005778:	930c      	str	r3, [sp, #48]	; 0x30
 800577a:	9b06      	ldr	r3, [sp, #24]
 800577c:	2500      	movs	r5, #0
 800577e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005782:	9312      	str	r3, [sp, #72]	; 0x48
 8005784:	462e      	mov	r6, r5
 8005786:	9b07      	ldr	r3, [sp, #28]
 8005788:	4620      	mov	r0, r4
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	f001 fda4 	bl	80072d8 <_Balloc>
 8005790:	9005      	str	r0, [sp, #20]
 8005792:	2800      	cmp	r0, #0
 8005794:	f43f af0c 	beq.w	80055b0 <_strtod_l+0x490>
 8005798:	9b07      	ldr	r3, [sp, #28]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	3202      	adds	r2, #2
 800579e:	f103 010c 	add.w	r1, r3, #12
 80057a2:	0092      	lsls	r2, r2, #2
 80057a4:	300c      	adds	r0, #12
 80057a6:	f001 fd89 	bl	80072bc <memcpy>
 80057aa:	ec4b ab10 	vmov	d0, sl, fp
 80057ae:	aa1a      	add	r2, sp, #104	; 0x68
 80057b0:	a919      	add	r1, sp, #100	; 0x64
 80057b2:	4620      	mov	r0, r4
 80057b4:	f002 f97e 	bl	8007ab4 <__d2b>
 80057b8:	ec4b ab18 	vmov	d8, sl, fp
 80057bc:	9018      	str	r0, [sp, #96]	; 0x60
 80057be:	2800      	cmp	r0, #0
 80057c0:	f43f aef6 	beq.w	80055b0 <_strtod_l+0x490>
 80057c4:	2101      	movs	r1, #1
 80057c6:	4620      	mov	r0, r4
 80057c8:	f001 fec8 	bl	800755c <__i2b>
 80057cc:	4606      	mov	r6, r0
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f43f aeee 	beq.w	80055b0 <_strtod_l+0x490>
 80057d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057d6:	9904      	ldr	r1, [sp, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	bfab      	itete	ge
 80057dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80057de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80057e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80057e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80057e6:	bfac      	ite	ge
 80057e8:	eb03 0902 	addge.w	r9, r3, r2
 80057ec:	1ad7      	sublt	r7, r2, r3
 80057ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80057f0:	eba3 0801 	sub.w	r8, r3, r1
 80057f4:	4490      	add	r8, r2
 80057f6:	4ba1      	ldr	r3, [pc, #644]	; (8005a7c <_strtod_l+0x95c>)
 80057f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80057fc:	4598      	cmp	r8, r3
 80057fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005802:	f280 80c7 	bge.w	8005994 <_strtod_l+0x874>
 8005806:	eba3 0308 	sub.w	r3, r3, r8
 800580a:	2b1f      	cmp	r3, #31
 800580c:	eba2 0203 	sub.w	r2, r2, r3
 8005810:	f04f 0101 	mov.w	r1, #1
 8005814:	f300 80b1 	bgt.w	800597a <_strtod_l+0x85a>
 8005818:	fa01 f303 	lsl.w	r3, r1, r3
 800581c:	930d      	str	r3, [sp, #52]	; 0x34
 800581e:	2300      	movs	r3, #0
 8005820:	9308      	str	r3, [sp, #32]
 8005822:	eb09 0802 	add.w	r8, r9, r2
 8005826:	9b04      	ldr	r3, [sp, #16]
 8005828:	45c1      	cmp	r9, r8
 800582a:	4417      	add	r7, r2
 800582c:	441f      	add	r7, r3
 800582e:	464b      	mov	r3, r9
 8005830:	bfa8      	it	ge
 8005832:	4643      	movge	r3, r8
 8005834:	42bb      	cmp	r3, r7
 8005836:	bfa8      	it	ge
 8005838:	463b      	movge	r3, r7
 800583a:	2b00      	cmp	r3, #0
 800583c:	bfc2      	ittt	gt
 800583e:	eba8 0803 	subgt.w	r8, r8, r3
 8005842:	1aff      	subgt	r7, r7, r3
 8005844:	eba9 0903 	subgt.w	r9, r9, r3
 8005848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800584a:	2b00      	cmp	r3, #0
 800584c:	dd17      	ble.n	800587e <_strtod_l+0x75e>
 800584e:	4631      	mov	r1, r6
 8005850:	461a      	mov	r2, r3
 8005852:	4620      	mov	r0, r4
 8005854:	f001 ff42 	bl	80076dc <__pow5mult>
 8005858:	4606      	mov	r6, r0
 800585a:	2800      	cmp	r0, #0
 800585c:	f43f aea8 	beq.w	80055b0 <_strtod_l+0x490>
 8005860:	4601      	mov	r1, r0
 8005862:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005864:	4620      	mov	r0, r4
 8005866:	f001 fe8f 	bl	8007588 <__multiply>
 800586a:	900b      	str	r0, [sp, #44]	; 0x2c
 800586c:	2800      	cmp	r0, #0
 800586e:	f43f ae9f 	beq.w	80055b0 <_strtod_l+0x490>
 8005872:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005874:	4620      	mov	r0, r4
 8005876:	f001 fd6f 	bl	8007358 <_Bfree>
 800587a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800587c:	9318      	str	r3, [sp, #96]	; 0x60
 800587e:	f1b8 0f00 	cmp.w	r8, #0
 8005882:	f300 808c 	bgt.w	800599e <_strtod_l+0x87e>
 8005886:	9b06      	ldr	r3, [sp, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	dd08      	ble.n	800589e <_strtod_l+0x77e>
 800588c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800588e:	9905      	ldr	r1, [sp, #20]
 8005890:	4620      	mov	r0, r4
 8005892:	f001 ff23 	bl	80076dc <__pow5mult>
 8005896:	9005      	str	r0, [sp, #20]
 8005898:	2800      	cmp	r0, #0
 800589a:	f43f ae89 	beq.w	80055b0 <_strtod_l+0x490>
 800589e:	2f00      	cmp	r7, #0
 80058a0:	dd08      	ble.n	80058b4 <_strtod_l+0x794>
 80058a2:	9905      	ldr	r1, [sp, #20]
 80058a4:	463a      	mov	r2, r7
 80058a6:	4620      	mov	r0, r4
 80058a8:	f001 ff72 	bl	8007790 <__lshift>
 80058ac:	9005      	str	r0, [sp, #20]
 80058ae:	2800      	cmp	r0, #0
 80058b0:	f43f ae7e 	beq.w	80055b0 <_strtod_l+0x490>
 80058b4:	f1b9 0f00 	cmp.w	r9, #0
 80058b8:	dd08      	ble.n	80058cc <_strtod_l+0x7ac>
 80058ba:	4631      	mov	r1, r6
 80058bc:	464a      	mov	r2, r9
 80058be:	4620      	mov	r0, r4
 80058c0:	f001 ff66 	bl	8007790 <__lshift>
 80058c4:	4606      	mov	r6, r0
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f43f ae72 	beq.w	80055b0 <_strtod_l+0x490>
 80058cc:	9a05      	ldr	r2, [sp, #20]
 80058ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80058d0:	4620      	mov	r0, r4
 80058d2:	f001 ffe9 	bl	80078a8 <__mdiff>
 80058d6:	4605      	mov	r5, r0
 80058d8:	2800      	cmp	r0, #0
 80058da:	f43f ae69 	beq.w	80055b0 <_strtod_l+0x490>
 80058de:	68c3      	ldr	r3, [r0, #12]
 80058e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058e2:	2300      	movs	r3, #0
 80058e4:	60c3      	str	r3, [r0, #12]
 80058e6:	4631      	mov	r1, r6
 80058e8:	f001 ffc2 	bl	8007870 <__mcmp>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	da60      	bge.n	80059b2 <_strtod_l+0x892>
 80058f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058f2:	ea53 030a 	orrs.w	r3, r3, sl
 80058f6:	f040 8082 	bne.w	80059fe <_strtod_l+0x8de>
 80058fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d17d      	bne.n	80059fe <_strtod_l+0x8de>
 8005902:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005906:	0d1b      	lsrs	r3, r3, #20
 8005908:	051b      	lsls	r3, r3, #20
 800590a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800590e:	d976      	bls.n	80059fe <_strtod_l+0x8de>
 8005910:	696b      	ldr	r3, [r5, #20]
 8005912:	b913      	cbnz	r3, 800591a <_strtod_l+0x7fa>
 8005914:	692b      	ldr	r3, [r5, #16]
 8005916:	2b01      	cmp	r3, #1
 8005918:	dd71      	ble.n	80059fe <_strtod_l+0x8de>
 800591a:	4629      	mov	r1, r5
 800591c:	2201      	movs	r2, #1
 800591e:	4620      	mov	r0, r4
 8005920:	f001 ff36 	bl	8007790 <__lshift>
 8005924:	4631      	mov	r1, r6
 8005926:	4605      	mov	r5, r0
 8005928:	f001 ffa2 	bl	8007870 <__mcmp>
 800592c:	2800      	cmp	r0, #0
 800592e:	dd66      	ble.n	80059fe <_strtod_l+0x8de>
 8005930:	9904      	ldr	r1, [sp, #16]
 8005932:	4a53      	ldr	r2, [pc, #332]	; (8005a80 <_strtod_l+0x960>)
 8005934:	465b      	mov	r3, fp
 8005936:	2900      	cmp	r1, #0
 8005938:	f000 8081 	beq.w	8005a3e <_strtod_l+0x91e>
 800593c:	ea02 010b 	and.w	r1, r2, fp
 8005940:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005944:	dc7b      	bgt.n	8005a3e <_strtod_l+0x91e>
 8005946:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800594a:	f77f aea9 	ble.w	80056a0 <_strtod_l+0x580>
 800594e:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <_strtod_l+0x964>)
 8005950:	4650      	mov	r0, sl
 8005952:	4659      	mov	r1, fp
 8005954:	2200      	movs	r2, #0
 8005956:	f7fa fe67 	bl	8000628 <__aeabi_dmul>
 800595a:	460b      	mov	r3, r1
 800595c:	4303      	orrs	r3, r0
 800595e:	bf08      	it	eq
 8005960:	2322      	moveq	r3, #34	; 0x22
 8005962:	4682      	mov	sl, r0
 8005964:	468b      	mov	fp, r1
 8005966:	bf08      	it	eq
 8005968:	6023      	streq	r3, [r4, #0]
 800596a:	e62b      	b.n	80055c4 <_strtod_l+0x4a4>
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	ea03 0a0a 	and.w	sl, r3, sl
 8005978:	e6e3      	b.n	8005742 <_strtod_l+0x622>
 800597a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800597e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005982:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005986:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800598a:	fa01 f308 	lsl.w	r3, r1, r8
 800598e:	9308      	str	r3, [sp, #32]
 8005990:	910d      	str	r1, [sp, #52]	; 0x34
 8005992:	e746      	b.n	8005822 <_strtod_l+0x702>
 8005994:	2300      	movs	r3, #0
 8005996:	9308      	str	r3, [sp, #32]
 8005998:	2301      	movs	r3, #1
 800599a:	930d      	str	r3, [sp, #52]	; 0x34
 800599c:	e741      	b.n	8005822 <_strtod_l+0x702>
 800599e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059a0:	4642      	mov	r2, r8
 80059a2:	4620      	mov	r0, r4
 80059a4:	f001 fef4 	bl	8007790 <__lshift>
 80059a8:	9018      	str	r0, [sp, #96]	; 0x60
 80059aa:	2800      	cmp	r0, #0
 80059ac:	f47f af6b 	bne.w	8005886 <_strtod_l+0x766>
 80059b0:	e5fe      	b.n	80055b0 <_strtod_l+0x490>
 80059b2:	465f      	mov	r7, fp
 80059b4:	d16e      	bne.n	8005a94 <_strtod_l+0x974>
 80059b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80059bc:	b342      	cbz	r2, 8005a10 <_strtod_l+0x8f0>
 80059be:	4a32      	ldr	r2, [pc, #200]	; (8005a88 <_strtod_l+0x968>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d128      	bne.n	8005a16 <_strtod_l+0x8f6>
 80059c4:	9b04      	ldr	r3, [sp, #16]
 80059c6:	4651      	mov	r1, sl
 80059c8:	b1eb      	cbz	r3, 8005a06 <_strtod_l+0x8e6>
 80059ca:	4b2d      	ldr	r3, [pc, #180]	; (8005a80 <_strtod_l+0x960>)
 80059cc:	403b      	ands	r3, r7
 80059ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295
 80059d6:	d819      	bhi.n	8005a0c <_strtod_l+0x8ec>
 80059d8:	0d1b      	lsrs	r3, r3, #20
 80059da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d117      	bne.n	8005a16 <_strtod_l+0x8f6>
 80059e6:	4b29      	ldr	r3, [pc, #164]	; (8005a8c <_strtod_l+0x96c>)
 80059e8:	429f      	cmp	r7, r3
 80059ea:	d102      	bne.n	80059f2 <_strtod_l+0x8d2>
 80059ec:	3101      	adds	r1, #1
 80059ee:	f43f addf 	beq.w	80055b0 <_strtod_l+0x490>
 80059f2:	4b23      	ldr	r3, [pc, #140]	; (8005a80 <_strtod_l+0x960>)
 80059f4:	403b      	ands	r3, r7
 80059f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80059fa:	f04f 0a00 	mov.w	sl, #0
 80059fe:	9b04      	ldr	r3, [sp, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1a4      	bne.n	800594e <_strtod_l+0x82e>
 8005a04:	e5de      	b.n	80055c4 <_strtod_l+0x4a4>
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	e7ea      	b.n	80059e2 <_strtod_l+0x8c2>
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	e7e8      	b.n	80059e2 <_strtod_l+0x8c2>
 8005a10:	ea53 030a 	orrs.w	r3, r3, sl
 8005a14:	d08c      	beq.n	8005930 <_strtod_l+0x810>
 8005a16:	9b08      	ldr	r3, [sp, #32]
 8005a18:	b1db      	cbz	r3, 8005a52 <_strtod_l+0x932>
 8005a1a:	423b      	tst	r3, r7
 8005a1c:	d0ef      	beq.n	80059fe <_strtod_l+0x8de>
 8005a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a20:	9a04      	ldr	r2, [sp, #16]
 8005a22:	4650      	mov	r0, sl
 8005a24:	4659      	mov	r1, fp
 8005a26:	b1c3      	cbz	r3, 8005a5a <_strtod_l+0x93a>
 8005a28:	f7ff fb5d 	bl	80050e6 <sulp>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	ec51 0b18 	vmov	r0, r1, d8
 8005a34:	f7fa fc42 	bl	80002bc <__adddf3>
 8005a38:	4682      	mov	sl, r0
 8005a3a:	468b      	mov	fp, r1
 8005a3c:	e7df      	b.n	80059fe <_strtod_l+0x8de>
 8005a3e:	4013      	ands	r3, r2
 8005a40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005a48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005a4c:	f04f 3aff 	mov.w	sl, #4294967295
 8005a50:	e7d5      	b.n	80059fe <_strtod_l+0x8de>
 8005a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a54:	ea13 0f0a 	tst.w	r3, sl
 8005a58:	e7e0      	b.n	8005a1c <_strtod_l+0x8fc>
 8005a5a:	f7ff fb44 	bl	80050e6 <sulp>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	ec51 0b18 	vmov	r0, r1, d8
 8005a66:	f7fa fc27 	bl	80002b8 <__aeabi_dsub>
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4682      	mov	sl, r0
 8005a70:	468b      	mov	fp, r1
 8005a72:	f7fb f841 	bl	8000af8 <__aeabi_dcmpeq>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d0c1      	beq.n	80059fe <_strtod_l+0x8de>
 8005a7a:	e611      	b.n	80056a0 <_strtod_l+0x580>
 8005a7c:	fffffc02 	.word	0xfffffc02
 8005a80:	7ff00000 	.word	0x7ff00000
 8005a84:	39500000 	.word	0x39500000
 8005a88:	000fffff 	.word	0x000fffff
 8005a8c:	7fefffff 	.word	0x7fefffff
 8005a90:	080097b8 	.word	0x080097b8
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	f002 f868 	bl	8007b6c <__ratio>
 8005a9c:	ec59 8b10 	vmov	r8, r9, d0
 8005aa0:	ee10 0a10 	vmov	r0, s0
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005aaa:	4649      	mov	r1, r9
 8005aac:	f7fb f838 	bl	8000b20 <__aeabi_dcmple>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d07a      	beq.n	8005baa <_strtod_l+0xa8a>
 8005ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d04a      	beq.n	8005b50 <_strtod_l+0xa30>
 8005aba:	4b95      	ldr	r3, [pc, #596]	; (8005d10 <_strtod_l+0xbf0>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005ac2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005d10 <_strtod_l+0xbf0>
 8005ac6:	f04f 0800 	mov.w	r8, #0
 8005aca:	4b92      	ldr	r3, [pc, #584]	; (8005d14 <_strtod_l+0xbf4>)
 8005acc:	403b      	ands	r3, r7
 8005ace:	930d      	str	r3, [sp, #52]	; 0x34
 8005ad0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ad2:	4b91      	ldr	r3, [pc, #580]	; (8005d18 <_strtod_l+0xbf8>)
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	f040 80b0 	bne.w	8005c3a <_strtod_l+0xb1a>
 8005ada:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ade:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005ae2:	ec4b ab10 	vmov	d0, sl, fp
 8005ae6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005aea:	f001 ff67 	bl	80079bc <__ulp>
 8005aee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005af2:	ec53 2b10 	vmov	r2, r3, d0
 8005af6:	f7fa fd97 	bl	8000628 <__aeabi_dmul>
 8005afa:	4652      	mov	r2, sl
 8005afc:	465b      	mov	r3, fp
 8005afe:	f7fa fbdd 	bl	80002bc <__adddf3>
 8005b02:	460b      	mov	r3, r1
 8005b04:	4983      	ldr	r1, [pc, #524]	; (8005d14 <_strtod_l+0xbf4>)
 8005b06:	4a85      	ldr	r2, [pc, #532]	; (8005d1c <_strtod_l+0xbfc>)
 8005b08:	4019      	ands	r1, r3
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	4682      	mov	sl, r0
 8005b0e:	d960      	bls.n	8005bd2 <_strtod_l+0xab2>
 8005b10:	ee18 3a90 	vmov	r3, s17
 8005b14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d104      	bne.n	8005b26 <_strtod_l+0xa06>
 8005b1c:	ee18 3a10 	vmov	r3, s16
 8005b20:	3301      	adds	r3, #1
 8005b22:	f43f ad45 	beq.w	80055b0 <_strtod_l+0x490>
 8005b26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005d28 <_strtod_l+0xc08>
 8005b2a:	f04f 3aff 	mov.w	sl, #4294967295
 8005b2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b30:	4620      	mov	r0, r4
 8005b32:	f001 fc11 	bl	8007358 <_Bfree>
 8005b36:	9905      	ldr	r1, [sp, #20]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f001 fc0d 	bl	8007358 <_Bfree>
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4620      	mov	r0, r4
 8005b42:	f001 fc09 	bl	8007358 <_Bfree>
 8005b46:	4629      	mov	r1, r5
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f001 fc05 	bl	8007358 <_Bfree>
 8005b4e:	e61a      	b.n	8005786 <_strtod_l+0x666>
 8005b50:	f1ba 0f00 	cmp.w	sl, #0
 8005b54:	d11b      	bne.n	8005b8e <_strtod_l+0xa6e>
 8005b56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b5a:	b9f3      	cbnz	r3, 8005b9a <_strtod_l+0xa7a>
 8005b5c:	4b6c      	ldr	r3, [pc, #432]	; (8005d10 <_strtod_l+0xbf0>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	4640      	mov	r0, r8
 8005b62:	4649      	mov	r1, r9
 8005b64:	f7fa ffd2 	bl	8000b0c <__aeabi_dcmplt>
 8005b68:	b9d0      	cbnz	r0, 8005ba0 <_strtod_l+0xa80>
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	4b6c      	ldr	r3, [pc, #432]	; (8005d20 <_strtod_l+0xc00>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	f7fa fd59 	bl	8000628 <__aeabi_dmul>
 8005b76:	4680      	mov	r8, r0
 8005b78:	4689      	mov	r9, r1
 8005b7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005b82:	9315      	str	r3, [sp, #84]	; 0x54
 8005b84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005b88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005b8c:	e79d      	b.n	8005aca <_strtod_l+0x9aa>
 8005b8e:	f1ba 0f01 	cmp.w	sl, #1
 8005b92:	d102      	bne.n	8005b9a <_strtod_l+0xa7a>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	f43f ad83 	beq.w	80056a0 <_strtod_l+0x580>
 8005b9a:	4b62      	ldr	r3, [pc, #392]	; (8005d24 <_strtod_l+0xc04>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	e78e      	b.n	8005abe <_strtod_l+0x99e>
 8005ba0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005d20 <_strtod_l+0xc00>
 8005ba4:	f04f 0800 	mov.w	r8, #0
 8005ba8:	e7e7      	b.n	8005b7a <_strtod_l+0xa5a>
 8005baa:	4b5d      	ldr	r3, [pc, #372]	; (8005d20 <_strtod_l+0xc00>)
 8005bac:	4640      	mov	r0, r8
 8005bae:	4649      	mov	r1, r9
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f7fa fd39 	bl	8000628 <__aeabi_dmul>
 8005bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb8:	4680      	mov	r8, r0
 8005bba:	4689      	mov	r9, r1
 8005bbc:	b933      	cbnz	r3, 8005bcc <_strtod_l+0xaac>
 8005bbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bc2:	900e      	str	r0, [sp, #56]	; 0x38
 8005bc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005bca:	e7dd      	b.n	8005b88 <_strtod_l+0xa68>
 8005bcc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005bd0:	e7f9      	b.n	8005bc6 <_strtod_l+0xaa6>
 8005bd2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005bd6:	9b04      	ldr	r3, [sp, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1a8      	bne.n	8005b2e <_strtod_l+0xa0e>
 8005bdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005be0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005be2:	0d1b      	lsrs	r3, r3, #20
 8005be4:	051b      	lsls	r3, r3, #20
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d1a1      	bne.n	8005b2e <_strtod_l+0xa0e>
 8005bea:	4640      	mov	r0, r8
 8005bec:	4649      	mov	r1, r9
 8005bee:	f7fb f8b3 	bl	8000d58 <__aeabi_d2lz>
 8005bf2:	f7fa fceb 	bl	80005cc <__aeabi_l2d>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	f7fa fb5b 	bl	80002b8 <__aeabi_dsub>
 8005c02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c08:	ea43 030a 	orr.w	r3, r3, sl
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	4680      	mov	r8, r0
 8005c10:	4689      	mov	r9, r1
 8005c12:	d055      	beq.n	8005cc0 <_strtod_l+0xba0>
 8005c14:	a336      	add	r3, pc, #216	; (adr r3, 8005cf0 <_strtod_l+0xbd0>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f7fa ff77 	bl	8000b0c <__aeabi_dcmplt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f47f acd0 	bne.w	80055c4 <_strtod_l+0x4a4>
 8005c24:	a334      	add	r3, pc, #208	; (adr r3, 8005cf8 <_strtod_l+0xbd8>)
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	f7fa ff8b 	bl	8000b48 <__aeabi_dcmpgt>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f43f af7b 	beq.w	8005b2e <_strtod_l+0xa0e>
 8005c38:	e4c4      	b.n	80055c4 <_strtod_l+0x4a4>
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	b333      	cbz	r3, 8005c8c <_strtod_l+0xb6c>
 8005c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c44:	d822      	bhi.n	8005c8c <_strtod_l+0xb6c>
 8005c46:	a32e      	add	r3, pc, #184	; (adr r3, 8005d00 <_strtod_l+0xbe0>)
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	4649      	mov	r1, r9
 8005c50:	f7fa ff66 	bl	8000b20 <__aeabi_dcmple>
 8005c54:	b1a0      	cbz	r0, 8005c80 <_strtod_l+0xb60>
 8005c56:	4649      	mov	r1, r9
 8005c58:	4640      	mov	r0, r8
 8005c5a:	f7fa ffbd 	bl	8000bd8 <__aeabi_d2uiz>
 8005c5e:	2801      	cmp	r0, #1
 8005c60:	bf38      	it	cc
 8005c62:	2001      	movcc	r0, #1
 8005c64:	f7fa fc66 	bl	8000534 <__aeabi_ui2d>
 8005c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	4689      	mov	r9, r1
 8005c6e:	bb23      	cbnz	r3, 8005cba <_strtod_l+0xb9a>
 8005c70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c74:	9010      	str	r0, [sp, #64]	; 0x40
 8005c76:	9311      	str	r3, [sp, #68]	; 0x44
 8005c78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005c90:	eeb0 0a48 	vmov.f32	s0, s16
 8005c94:	eef0 0a68 	vmov.f32	s1, s17
 8005c98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005c9c:	f001 fe8e 	bl	80079bc <__ulp>
 8005ca0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ca4:	ec53 2b10 	vmov	r2, r3, d0
 8005ca8:	f7fa fcbe 	bl	8000628 <__aeabi_dmul>
 8005cac:	ec53 2b18 	vmov	r2, r3, d8
 8005cb0:	f7fa fb04 	bl	80002bc <__adddf3>
 8005cb4:	4682      	mov	sl, r0
 8005cb6:	468b      	mov	fp, r1
 8005cb8:	e78d      	b.n	8005bd6 <_strtod_l+0xab6>
 8005cba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8005cbe:	e7db      	b.n	8005c78 <_strtod_l+0xb58>
 8005cc0:	a311      	add	r3, pc, #68	; (adr r3, 8005d08 <_strtod_l+0xbe8>)
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f7fa ff21 	bl	8000b0c <__aeabi_dcmplt>
 8005cca:	e7b2      	b.n	8005c32 <_strtod_l+0xb12>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	930a      	str	r3, [sp, #40]	; 0x28
 8005cd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	f7ff ba6b 	b.w	80051b0 <_strtod_l+0x90>
 8005cda:	2a65      	cmp	r2, #101	; 0x65
 8005cdc:	f43f ab5f 	beq.w	800539e <_strtod_l+0x27e>
 8005ce0:	2a45      	cmp	r2, #69	; 0x45
 8005ce2:	f43f ab5c 	beq.w	800539e <_strtod_l+0x27e>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f7ff bb94 	b.w	8005414 <_strtod_l+0x2f4>
 8005cec:	f3af 8000 	nop.w
 8005cf0:	94a03595 	.word	0x94a03595
 8005cf4:	3fdfffff 	.word	0x3fdfffff
 8005cf8:	35afe535 	.word	0x35afe535
 8005cfc:	3fe00000 	.word	0x3fe00000
 8005d00:	ffc00000 	.word	0xffc00000
 8005d04:	41dfffff 	.word	0x41dfffff
 8005d08:	94a03595 	.word	0x94a03595
 8005d0c:	3fcfffff 	.word	0x3fcfffff
 8005d10:	3ff00000 	.word	0x3ff00000
 8005d14:	7ff00000 	.word	0x7ff00000
 8005d18:	7fe00000 	.word	0x7fe00000
 8005d1c:	7c9fffff 	.word	0x7c9fffff
 8005d20:	3fe00000 	.word	0x3fe00000
 8005d24:	bff00000 	.word	0xbff00000
 8005d28:	7fefffff 	.word	0x7fefffff

08005d2c <_strtod_r>:
 8005d2c:	4b01      	ldr	r3, [pc, #4]	; (8005d34 <_strtod_r+0x8>)
 8005d2e:	f7ff b9f7 	b.w	8005120 <_strtod_l>
 8005d32:	bf00      	nop
 8005d34:	20000074 	.word	0x20000074

08005d38 <_strtol_l.constprop.0>:
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3e:	d001      	beq.n	8005d44 <_strtol_l.constprop.0+0xc>
 8005d40:	2b24      	cmp	r3, #36	; 0x24
 8005d42:	d906      	bls.n	8005d52 <_strtol_l.constprop.0+0x1a>
 8005d44:	f7fe fa8c 	bl	8004260 <__errno>
 8005d48:	2316      	movs	r3, #22
 8005d4a:	6003      	str	r3, [r0, #0]
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005e38 <_strtol_l.constprop.0+0x100>
 8005d56:	460d      	mov	r5, r1
 8005d58:	462e      	mov	r6, r5
 8005d5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005d62:	f017 0708 	ands.w	r7, r7, #8
 8005d66:	d1f7      	bne.n	8005d58 <_strtol_l.constprop.0+0x20>
 8005d68:	2c2d      	cmp	r4, #45	; 0x2d
 8005d6a:	d132      	bne.n	8005dd2 <_strtol_l.constprop.0+0x9a>
 8005d6c:	782c      	ldrb	r4, [r5, #0]
 8005d6e:	2701      	movs	r7, #1
 8005d70:	1cb5      	adds	r5, r6, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d05b      	beq.n	8005e2e <_strtol_l.constprop.0+0xf6>
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d109      	bne.n	8005d8e <_strtol_l.constprop.0+0x56>
 8005d7a:	2c30      	cmp	r4, #48	; 0x30
 8005d7c:	d107      	bne.n	8005d8e <_strtol_l.constprop.0+0x56>
 8005d7e:	782c      	ldrb	r4, [r5, #0]
 8005d80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d84:	2c58      	cmp	r4, #88	; 0x58
 8005d86:	d14d      	bne.n	8005e24 <_strtol_l.constprop.0+0xec>
 8005d88:	786c      	ldrb	r4, [r5, #1]
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	3502      	adds	r5, #2
 8005d8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005d92:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d96:	f04f 0c00 	mov.w	ip, #0
 8005d9a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005d9e:	4666      	mov	r6, ip
 8005da0:	fb03 8a19 	mls	sl, r3, r9, r8
 8005da4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005da8:	f1be 0f09 	cmp.w	lr, #9
 8005dac:	d816      	bhi.n	8005ddc <_strtol_l.constprop.0+0xa4>
 8005dae:	4674      	mov	r4, lr
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	dd24      	ble.n	8005dfe <_strtol_l.constprop.0+0xc6>
 8005db4:	f1bc 0f00 	cmp.w	ip, #0
 8005db8:	db1e      	blt.n	8005df8 <_strtol_l.constprop.0+0xc0>
 8005dba:	45b1      	cmp	r9, r6
 8005dbc:	d31c      	bcc.n	8005df8 <_strtol_l.constprop.0+0xc0>
 8005dbe:	d101      	bne.n	8005dc4 <_strtol_l.constprop.0+0x8c>
 8005dc0:	45a2      	cmp	sl, r4
 8005dc2:	db19      	blt.n	8005df8 <_strtol_l.constprop.0+0xc0>
 8005dc4:	fb06 4603 	mla	r6, r6, r3, r4
 8005dc8:	f04f 0c01 	mov.w	ip, #1
 8005dcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dd0:	e7e8      	b.n	8005da4 <_strtol_l.constprop.0+0x6c>
 8005dd2:	2c2b      	cmp	r4, #43	; 0x2b
 8005dd4:	bf04      	itt	eq
 8005dd6:	782c      	ldrbeq	r4, [r5, #0]
 8005dd8:	1cb5      	addeq	r5, r6, #2
 8005dda:	e7ca      	b.n	8005d72 <_strtol_l.constprop.0+0x3a>
 8005ddc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005de0:	f1be 0f19 	cmp.w	lr, #25
 8005de4:	d801      	bhi.n	8005dea <_strtol_l.constprop.0+0xb2>
 8005de6:	3c37      	subs	r4, #55	; 0x37
 8005de8:	e7e2      	b.n	8005db0 <_strtol_l.constprop.0+0x78>
 8005dea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005dee:	f1be 0f19 	cmp.w	lr, #25
 8005df2:	d804      	bhi.n	8005dfe <_strtol_l.constprop.0+0xc6>
 8005df4:	3c57      	subs	r4, #87	; 0x57
 8005df6:	e7db      	b.n	8005db0 <_strtol_l.constprop.0+0x78>
 8005df8:	f04f 3cff 	mov.w	ip, #4294967295
 8005dfc:	e7e6      	b.n	8005dcc <_strtol_l.constprop.0+0x94>
 8005dfe:	f1bc 0f00 	cmp.w	ip, #0
 8005e02:	da05      	bge.n	8005e10 <_strtol_l.constprop.0+0xd8>
 8005e04:	2322      	movs	r3, #34	; 0x22
 8005e06:	6003      	str	r3, [r0, #0]
 8005e08:	4646      	mov	r6, r8
 8005e0a:	b942      	cbnz	r2, 8005e1e <_strtol_l.constprop.0+0xe6>
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	e79e      	b.n	8005d4e <_strtol_l.constprop.0+0x16>
 8005e10:	b107      	cbz	r7, 8005e14 <_strtol_l.constprop.0+0xdc>
 8005e12:	4276      	negs	r6, r6
 8005e14:	2a00      	cmp	r2, #0
 8005e16:	d0f9      	beq.n	8005e0c <_strtol_l.constprop.0+0xd4>
 8005e18:	f1bc 0f00 	cmp.w	ip, #0
 8005e1c:	d000      	beq.n	8005e20 <_strtol_l.constprop.0+0xe8>
 8005e1e:	1e69      	subs	r1, r5, #1
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	e7f3      	b.n	8005e0c <_strtol_l.constprop.0+0xd4>
 8005e24:	2430      	movs	r4, #48	; 0x30
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1b1      	bne.n	8005d8e <_strtol_l.constprop.0+0x56>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	e7af      	b.n	8005d8e <_strtol_l.constprop.0+0x56>
 8005e2e:	2c30      	cmp	r4, #48	; 0x30
 8005e30:	d0a5      	beq.n	8005d7e <_strtol_l.constprop.0+0x46>
 8005e32:	230a      	movs	r3, #10
 8005e34:	e7ab      	b.n	8005d8e <_strtol_l.constprop.0+0x56>
 8005e36:	bf00      	nop
 8005e38:	080097e1 	.word	0x080097e1

08005e3c <_strtol_r>:
 8005e3c:	f7ff bf7c 	b.w	8005d38 <_strtol_l.constprop.0>

08005e40 <_write_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4d07      	ldr	r5, [pc, #28]	; (8005e60 <_write_r+0x20>)
 8005e44:	4604      	mov	r4, r0
 8005e46:	4608      	mov	r0, r1
 8005e48:	4611      	mov	r1, r2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fb fe18 	bl	8001a84 <_write>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_write_r+0x1e>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_write_r+0x1e>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	20000c1c 	.word	0x20000c1c

08005e64 <_close_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d06      	ldr	r5, [pc, #24]	; (8005e80 <_close_r+0x1c>)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	f7fb fe24 	bl	8001abc <_close>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_close_r+0x1a>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_close_r+0x1a>
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	20000c1c 	.word	0x20000c1c

08005e84 <quorem>:
 8005e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	6903      	ldr	r3, [r0, #16]
 8005e8a:	690c      	ldr	r4, [r1, #16]
 8005e8c:	42a3      	cmp	r3, r4
 8005e8e:	4607      	mov	r7, r0
 8005e90:	f2c0 8081 	blt.w	8005f96 <quorem+0x112>
 8005e94:	3c01      	subs	r4, #1
 8005e96:	f101 0814 	add.w	r8, r1, #20
 8005e9a:	f100 0514 	add.w	r5, r0, #20
 8005e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eac:	3301      	adds	r3, #1
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005eb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ebc:	d331      	bcc.n	8005f22 <quorem+0x9e>
 8005ebe:	f04f 0e00 	mov.w	lr, #0
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	46ac      	mov	ip, r5
 8005ec6:	46f2      	mov	sl, lr
 8005ec8:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ecc:	b293      	uxth	r3, r2
 8005ece:	fb06 e303 	mla	r3, r6, r3, lr
 8005ed2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	ebaa 0303 	sub.w	r3, sl, r3
 8005edc:	f8dc a000 	ldr.w	sl, [ip]
 8005ee0:	0c12      	lsrs	r2, r2, #16
 8005ee2:	fa13 f38a 	uxtah	r3, r3, sl
 8005ee6:	fb06 e202 	mla	r2, r6, r2, lr
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	9b00      	ldr	r3, [sp, #0]
 8005eee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ef2:	b292      	uxth	r2, r2
 8005ef4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005efc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f00:	4581      	cmp	r9, r0
 8005f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f06:	f84c 3b04 	str.w	r3, [ip], #4
 8005f0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f0e:	d2db      	bcs.n	8005ec8 <quorem+0x44>
 8005f10:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f14:	b92b      	cbnz	r3, 8005f22 <quorem+0x9e>
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	3b04      	subs	r3, #4
 8005f1a:	429d      	cmp	r5, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	d32e      	bcc.n	8005f7e <quorem+0xfa>
 8005f20:	613c      	str	r4, [r7, #16]
 8005f22:	4638      	mov	r0, r7
 8005f24:	f001 fca4 	bl	8007870 <__mcmp>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	db24      	blt.n	8005f76 <quorem+0xf2>
 8005f2c:	3601      	adds	r6, #1
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f04f 0c00 	mov.w	ip, #0
 8005f34:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f38:	f8d0 e000 	ldr.w	lr, [r0]
 8005f3c:	b293      	uxth	r3, r2
 8005f3e:	ebac 0303 	sub.w	r3, ip, r3
 8005f42:	0c12      	lsrs	r2, r2, #16
 8005f44:	fa13 f38e 	uxtah	r3, r3, lr
 8005f48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005f4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f56:	45c1      	cmp	r9, r8
 8005f58:	f840 3b04 	str.w	r3, [r0], #4
 8005f5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f60:	d2e8      	bcs.n	8005f34 <quorem+0xb0>
 8005f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f6a:	b922      	cbnz	r2, 8005f76 <quorem+0xf2>
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	429d      	cmp	r5, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	d30a      	bcc.n	8005f8a <quorem+0x106>
 8005f74:	613c      	str	r4, [r7, #16]
 8005f76:	4630      	mov	r0, r6
 8005f78:	b003      	add	sp, #12
 8005f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f7e:	6812      	ldr	r2, [r2, #0]
 8005f80:	3b04      	subs	r3, #4
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	d1cc      	bne.n	8005f20 <quorem+0x9c>
 8005f86:	3c01      	subs	r4, #1
 8005f88:	e7c7      	b.n	8005f1a <quorem+0x96>
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	3b04      	subs	r3, #4
 8005f8e:	2a00      	cmp	r2, #0
 8005f90:	d1f0      	bne.n	8005f74 <quorem+0xf0>
 8005f92:	3c01      	subs	r4, #1
 8005f94:	e7eb      	b.n	8005f6e <quorem+0xea>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e7ee      	b.n	8005f78 <quorem+0xf4>
 8005f9a:	0000      	movs	r0, r0
 8005f9c:	0000      	movs	r0, r0
	...

08005fa0 <_dtoa_r>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	ed2d 8b04 	vpush	{d8-d9}
 8005fa8:	ec57 6b10 	vmov	r6, r7, d0
 8005fac:	b093      	sub	sp, #76	; 0x4c
 8005fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fb4:	9106      	str	r1, [sp, #24]
 8005fb6:	ee10 aa10 	vmov	sl, s0
 8005fba:	4604      	mov	r4, r0
 8005fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8005fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8005fc0:	46bb      	mov	fp, r7
 8005fc2:	b975      	cbnz	r5, 8005fe2 <_dtoa_r+0x42>
 8005fc4:	2010      	movs	r0, #16
 8005fc6:	f001 f95f 	bl	8007288 <malloc>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8005fce:	b920      	cbnz	r0, 8005fda <_dtoa_r+0x3a>
 8005fd0:	4ba7      	ldr	r3, [pc, #668]	; (8006270 <_dtoa_r+0x2d0>)
 8005fd2:	21ea      	movs	r1, #234	; 0xea
 8005fd4:	48a7      	ldr	r0, [pc, #668]	; (8006274 <_dtoa_r+0x2d4>)
 8005fd6:	f002 fceb 	bl	80089b0 <__assert_func>
 8005fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fde:	6005      	str	r5, [r0, #0]
 8005fe0:	60c5      	str	r5, [r0, #12]
 8005fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fe4:	6819      	ldr	r1, [r3, #0]
 8005fe6:	b151      	cbz	r1, 8005ffe <_dtoa_r+0x5e>
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	604a      	str	r2, [r1, #4]
 8005fec:	2301      	movs	r3, #1
 8005fee:	4093      	lsls	r3, r2
 8005ff0:	608b      	str	r3, [r1, #8]
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f001 f9b0 	bl	8007358 <_Bfree>
 8005ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	1e3b      	subs	r3, r7, #0
 8006000:	bfaa      	itet	ge
 8006002:	2300      	movge	r3, #0
 8006004:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006008:	f8c8 3000 	strge.w	r3, [r8]
 800600c:	4b9a      	ldr	r3, [pc, #616]	; (8006278 <_dtoa_r+0x2d8>)
 800600e:	bfbc      	itt	lt
 8006010:	2201      	movlt	r2, #1
 8006012:	f8c8 2000 	strlt.w	r2, [r8]
 8006016:	ea33 030b 	bics.w	r3, r3, fp
 800601a:	d11b      	bne.n	8006054 <_dtoa_r+0xb4>
 800601c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800601e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006022:	6013      	str	r3, [r2, #0]
 8006024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006028:	4333      	orrs	r3, r6
 800602a:	f000 8592 	beq.w	8006b52 <_dtoa_r+0xbb2>
 800602e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006030:	b963      	cbnz	r3, 800604c <_dtoa_r+0xac>
 8006032:	4b92      	ldr	r3, [pc, #584]	; (800627c <_dtoa_r+0x2dc>)
 8006034:	e022      	b.n	800607c <_dtoa_r+0xdc>
 8006036:	4b92      	ldr	r3, [pc, #584]	; (8006280 <_dtoa_r+0x2e0>)
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	3308      	adds	r3, #8
 800603c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	9801      	ldr	r0, [sp, #4]
 8006042:	b013      	add	sp, #76	; 0x4c
 8006044:	ecbd 8b04 	vpop	{d8-d9}
 8006048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604c:	4b8b      	ldr	r3, [pc, #556]	; (800627c <_dtoa_r+0x2dc>)
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	3303      	adds	r3, #3
 8006052:	e7f3      	b.n	800603c <_dtoa_r+0x9c>
 8006054:	2200      	movs	r2, #0
 8006056:	2300      	movs	r3, #0
 8006058:	4650      	mov	r0, sl
 800605a:	4659      	mov	r1, fp
 800605c:	f7fa fd4c 	bl	8000af8 <__aeabi_dcmpeq>
 8006060:	ec4b ab19 	vmov	d9, sl, fp
 8006064:	4680      	mov	r8, r0
 8006066:	b158      	cbz	r0, 8006080 <_dtoa_r+0xe0>
 8006068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800606a:	2301      	movs	r3, #1
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 856b 	beq.w	8006b4c <_dtoa_r+0xbac>
 8006076:	4883      	ldr	r0, [pc, #524]	; (8006284 <_dtoa_r+0x2e4>)
 8006078:	6018      	str	r0, [r3, #0]
 800607a:	1e43      	subs	r3, r0, #1
 800607c:	9301      	str	r3, [sp, #4]
 800607e:	e7df      	b.n	8006040 <_dtoa_r+0xa0>
 8006080:	ec4b ab10 	vmov	d0, sl, fp
 8006084:	aa10      	add	r2, sp, #64	; 0x40
 8006086:	a911      	add	r1, sp, #68	; 0x44
 8006088:	4620      	mov	r0, r4
 800608a:	f001 fd13 	bl	8007ab4 <__d2b>
 800608e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006092:	ee08 0a10 	vmov	s16, r0
 8006096:	2d00      	cmp	r5, #0
 8006098:	f000 8084 	beq.w	80061a4 <_dtoa_r+0x204>
 800609c:	ee19 3a90 	vmov	r3, s19
 80060a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80060a8:	4656      	mov	r6, sl
 80060aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80060ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80060b6:	4b74      	ldr	r3, [pc, #464]	; (8006288 <_dtoa_r+0x2e8>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	4630      	mov	r0, r6
 80060bc:	4639      	mov	r1, r7
 80060be:	f7fa f8fb 	bl	80002b8 <__aeabi_dsub>
 80060c2:	a365      	add	r3, pc, #404	; (adr r3, 8006258 <_dtoa_r+0x2b8>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa faae 	bl	8000628 <__aeabi_dmul>
 80060cc:	a364      	add	r3, pc, #400	; (adr r3, 8006260 <_dtoa_r+0x2c0>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f7fa f8f3 	bl	80002bc <__adddf3>
 80060d6:	4606      	mov	r6, r0
 80060d8:	4628      	mov	r0, r5
 80060da:	460f      	mov	r7, r1
 80060dc:	f7fa fa3a 	bl	8000554 <__aeabi_i2d>
 80060e0:	a361      	add	r3, pc, #388	; (adr r3, 8006268 <_dtoa_r+0x2c8>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f7fa fa9f 	bl	8000628 <__aeabi_dmul>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4630      	mov	r0, r6
 80060f0:	4639      	mov	r1, r7
 80060f2:	f7fa f8e3 	bl	80002bc <__adddf3>
 80060f6:	4606      	mov	r6, r0
 80060f8:	460f      	mov	r7, r1
 80060fa:	f7fa fd45 	bl	8000b88 <__aeabi_d2iz>
 80060fe:	2200      	movs	r2, #0
 8006100:	9000      	str	r0, [sp, #0]
 8006102:	2300      	movs	r3, #0
 8006104:	4630      	mov	r0, r6
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa fd00 	bl	8000b0c <__aeabi_dcmplt>
 800610c:	b150      	cbz	r0, 8006124 <_dtoa_r+0x184>
 800610e:	9800      	ldr	r0, [sp, #0]
 8006110:	f7fa fa20 	bl	8000554 <__aeabi_i2d>
 8006114:	4632      	mov	r2, r6
 8006116:	463b      	mov	r3, r7
 8006118:	f7fa fcee 	bl	8000af8 <__aeabi_dcmpeq>
 800611c:	b910      	cbnz	r0, 8006124 <_dtoa_r+0x184>
 800611e:	9b00      	ldr	r3, [sp, #0]
 8006120:	3b01      	subs	r3, #1
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	9b00      	ldr	r3, [sp, #0]
 8006126:	2b16      	cmp	r3, #22
 8006128:	d85a      	bhi.n	80061e0 <_dtoa_r+0x240>
 800612a:	9a00      	ldr	r2, [sp, #0]
 800612c:	4b57      	ldr	r3, [pc, #348]	; (800628c <_dtoa_r+0x2ec>)
 800612e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	ec51 0b19 	vmov	r0, r1, d9
 800613a:	f7fa fce7 	bl	8000b0c <__aeabi_dcmplt>
 800613e:	2800      	cmp	r0, #0
 8006140:	d050      	beq.n	80061e4 <_dtoa_r+0x244>
 8006142:	9b00      	ldr	r3, [sp, #0]
 8006144:	3b01      	subs	r3, #1
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	2300      	movs	r3, #0
 800614a:	930b      	str	r3, [sp, #44]	; 0x2c
 800614c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800614e:	1b5d      	subs	r5, r3, r5
 8006150:	1e6b      	subs	r3, r5, #1
 8006152:	9305      	str	r3, [sp, #20]
 8006154:	bf45      	ittet	mi
 8006156:	f1c5 0301 	rsbmi	r3, r5, #1
 800615a:	9304      	strmi	r3, [sp, #16]
 800615c:	2300      	movpl	r3, #0
 800615e:	2300      	movmi	r3, #0
 8006160:	bf4c      	ite	mi
 8006162:	9305      	strmi	r3, [sp, #20]
 8006164:	9304      	strpl	r3, [sp, #16]
 8006166:	9b00      	ldr	r3, [sp, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	db3d      	blt.n	80061e8 <_dtoa_r+0x248>
 800616c:	9b05      	ldr	r3, [sp, #20]
 800616e:	9a00      	ldr	r2, [sp, #0]
 8006170:	920a      	str	r2, [sp, #40]	; 0x28
 8006172:	4413      	add	r3, r2
 8006174:	9305      	str	r3, [sp, #20]
 8006176:	2300      	movs	r3, #0
 8006178:	9307      	str	r3, [sp, #28]
 800617a:	9b06      	ldr	r3, [sp, #24]
 800617c:	2b09      	cmp	r3, #9
 800617e:	f200 8089 	bhi.w	8006294 <_dtoa_r+0x2f4>
 8006182:	2b05      	cmp	r3, #5
 8006184:	bfc4      	itt	gt
 8006186:	3b04      	subgt	r3, #4
 8006188:	9306      	strgt	r3, [sp, #24]
 800618a:	9b06      	ldr	r3, [sp, #24]
 800618c:	f1a3 0302 	sub.w	r3, r3, #2
 8006190:	bfcc      	ite	gt
 8006192:	2500      	movgt	r5, #0
 8006194:	2501      	movle	r5, #1
 8006196:	2b03      	cmp	r3, #3
 8006198:	f200 8087 	bhi.w	80062aa <_dtoa_r+0x30a>
 800619c:	e8df f003 	tbb	[pc, r3]
 80061a0:	59383a2d 	.word	0x59383a2d
 80061a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061a8:	441d      	add	r5, r3
 80061aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	bfc1      	itttt	gt
 80061b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80061ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80061be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80061c2:	bfda      	itte	le
 80061c4:	f1c3 0320 	rsble	r3, r3, #32
 80061c8:	fa06 f003 	lslle.w	r0, r6, r3
 80061cc:	4318      	orrgt	r0, r3
 80061ce:	f7fa f9b1 	bl	8000534 <__aeabi_ui2d>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4606      	mov	r6, r0
 80061d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80061da:	3d01      	subs	r5, #1
 80061dc:	930e      	str	r3, [sp, #56]	; 0x38
 80061de:	e76a      	b.n	80060b6 <_dtoa_r+0x116>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e7b2      	b.n	800614a <_dtoa_r+0x1aa>
 80061e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80061e6:	e7b1      	b.n	800614c <_dtoa_r+0x1ac>
 80061e8:	9b04      	ldr	r3, [sp, #16]
 80061ea:	9a00      	ldr	r2, [sp, #0]
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	9304      	str	r3, [sp, #16]
 80061f0:	4253      	negs	r3, r2
 80061f2:	9307      	str	r3, [sp, #28]
 80061f4:	2300      	movs	r3, #0
 80061f6:	930a      	str	r3, [sp, #40]	; 0x28
 80061f8:	e7bf      	b.n	800617a <_dtoa_r+0x1da>
 80061fa:	2300      	movs	r3, #0
 80061fc:	9308      	str	r3, [sp, #32]
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	dc55      	bgt.n	80062b0 <_dtoa_r+0x310>
 8006204:	2301      	movs	r3, #1
 8006206:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800620a:	461a      	mov	r2, r3
 800620c:	9209      	str	r2, [sp, #36]	; 0x24
 800620e:	e00c      	b.n	800622a <_dtoa_r+0x28a>
 8006210:	2301      	movs	r3, #1
 8006212:	e7f3      	b.n	80061fc <_dtoa_r+0x25c>
 8006214:	2300      	movs	r3, #0
 8006216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006218:	9308      	str	r3, [sp, #32]
 800621a:	9b00      	ldr	r3, [sp, #0]
 800621c:	4413      	add	r3, r2
 800621e:	9302      	str	r3, [sp, #8]
 8006220:	3301      	adds	r3, #1
 8006222:	2b01      	cmp	r3, #1
 8006224:	9303      	str	r3, [sp, #12]
 8006226:	bfb8      	it	lt
 8006228:	2301      	movlt	r3, #1
 800622a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800622c:	2200      	movs	r2, #0
 800622e:	6042      	str	r2, [r0, #4]
 8006230:	2204      	movs	r2, #4
 8006232:	f102 0614 	add.w	r6, r2, #20
 8006236:	429e      	cmp	r6, r3
 8006238:	6841      	ldr	r1, [r0, #4]
 800623a:	d93d      	bls.n	80062b8 <_dtoa_r+0x318>
 800623c:	4620      	mov	r0, r4
 800623e:	f001 f84b 	bl	80072d8 <_Balloc>
 8006242:	9001      	str	r0, [sp, #4]
 8006244:	2800      	cmp	r0, #0
 8006246:	d13b      	bne.n	80062c0 <_dtoa_r+0x320>
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <_dtoa_r+0x2f0>)
 800624a:	4602      	mov	r2, r0
 800624c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006250:	e6c0      	b.n	8005fd4 <_dtoa_r+0x34>
 8006252:	2301      	movs	r3, #1
 8006254:	e7df      	b.n	8006216 <_dtoa_r+0x276>
 8006256:	bf00      	nop
 8006258:	636f4361 	.word	0x636f4361
 800625c:	3fd287a7 	.word	0x3fd287a7
 8006260:	8b60c8b3 	.word	0x8b60c8b3
 8006264:	3fc68a28 	.word	0x3fc68a28
 8006268:	509f79fb 	.word	0x509f79fb
 800626c:	3fd34413 	.word	0x3fd34413
 8006270:	080098ee 	.word	0x080098ee
 8006274:	08009905 	.word	0x08009905
 8006278:	7ff00000 	.word	0x7ff00000
 800627c:	080098ea 	.word	0x080098ea
 8006280:	080098e1 	.word	0x080098e1
 8006284:	08009b5a 	.word	0x08009b5a
 8006288:	3ff80000 	.word	0x3ff80000
 800628c:	08009a70 	.word	0x08009a70
 8006290:	08009960 	.word	0x08009960
 8006294:	2501      	movs	r5, #1
 8006296:	2300      	movs	r3, #0
 8006298:	9306      	str	r3, [sp, #24]
 800629a:	9508      	str	r5, [sp, #32]
 800629c:	f04f 33ff 	mov.w	r3, #4294967295
 80062a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062a4:	2200      	movs	r2, #0
 80062a6:	2312      	movs	r3, #18
 80062a8:	e7b0      	b.n	800620c <_dtoa_r+0x26c>
 80062aa:	2301      	movs	r3, #1
 80062ac:	9308      	str	r3, [sp, #32]
 80062ae:	e7f5      	b.n	800629c <_dtoa_r+0x2fc>
 80062b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062b6:	e7b8      	b.n	800622a <_dtoa_r+0x28a>
 80062b8:	3101      	adds	r1, #1
 80062ba:	6041      	str	r1, [r0, #4]
 80062bc:	0052      	lsls	r2, r2, #1
 80062be:	e7b8      	b.n	8006232 <_dtoa_r+0x292>
 80062c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c2:	9a01      	ldr	r2, [sp, #4]
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	2b0e      	cmp	r3, #14
 80062ca:	f200 809d 	bhi.w	8006408 <_dtoa_r+0x468>
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	f000 809a 	beq.w	8006408 <_dtoa_r+0x468>
 80062d4:	9b00      	ldr	r3, [sp, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	dd32      	ble.n	8006340 <_dtoa_r+0x3a0>
 80062da:	4ab7      	ldr	r2, [pc, #732]	; (80065b8 <_dtoa_r+0x618>)
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062e8:	9b00      	ldr	r3, [sp, #0]
 80062ea:	05d8      	lsls	r0, r3, #23
 80062ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80062f0:	d516      	bpl.n	8006320 <_dtoa_r+0x380>
 80062f2:	4bb2      	ldr	r3, [pc, #712]	; (80065bc <_dtoa_r+0x61c>)
 80062f4:	ec51 0b19 	vmov	r0, r1, d9
 80062f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062fc:	f7fa fabe 	bl	800087c <__aeabi_ddiv>
 8006300:	f007 070f 	and.w	r7, r7, #15
 8006304:	4682      	mov	sl, r0
 8006306:	468b      	mov	fp, r1
 8006308:	2503      	movs	r5, #3
 800630a:	4eac      	ldr	r6, [pc, #688]	; (80065bc <_dtoa_r+0x61c>)
 800630c:	b957      	cbnz	r7, 8006324 <_dtoa_r+0x384>
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	4650      	mov	r0, sl
 8006314:	4659      	mov	r1, fp
 8006316:	f7fa fab1 	bl	800087c <__aeabi_ddiv>
 800631a:	4682      	mov	sl, r0
 800631c:	468b      	mov	fp, r1
 800631e:	e028      	b.n	8006372 <_dtoa_r+0x3d2>
 8006320:	2502      	movs	r5, #2
 8006322:	e7f2      	b.n	800630a <_dtoa_r+0x36a>
 8006324:	07f9      	lsls	r1, r7, #31
 8006326:	d508      	bpl.n	800633a <_dtoa_r+0x39a>
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006330:	f7fa f97a 	bl	8000628 <__aeabi_dmul>
 8006334:	3501      	adds	r5, #1
 8006336:	4680      	mov	r8, r0
 8006338:	4689      	mov	r9, r1
 800633a:	107f      	asrs	r7, r7, #1
 800633c:	3608      	adds	r6, #8
 800633e:	e7e5      	b.n	800630c <_dtoa_r+0x36c>
 8006340:	f000 809b 	beq.w	800647a <_dtoa_r+0x4da>
 8006344:	9b00      	ldr	r3, [sp, #0]
 8006346:	4f9d      	ldr	r7, [pc, #628]	; (80065bc <_dtoa_r+0x61c>)
 8006348:	425e      	negs	r6, r3
 800634a:	4b9b      	ldr	r3, [pc, #620]	; (80065b8 <_dtoa_r+0x618>)
 800634c:	f006 020f 	and.w	r2, r6, #15
 8006350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	ec51 0b19 	vmov	r0, r1, d9
 800635c:	f7fa f964 	bl	8000628 <__aeabi_dmul>
 8006360:	1136      	asrs	r6, r6, #4
 8006362:	4682      	mov	sl, r0
 8006364:	468b      	mov	fp, r1
 8006366:	2300      	movs	r3, #0
 8006368:	2502      	movs	r5, #2
 800636a:	2e00      	cmp	r6, #0
 800636c:	d17a      	bne.n	8006464 <_dtoa_r+0x4c4>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1d3      	bne.n	800631a <_dtoa_r+0x37a>
 8006372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 8082 	beq.w	800647e <_dtoa_r+0x4de>
 800637a:	4b91      	ldr	r3, [pc, #580]	; (80065c0 <_dtoa_r+0x620>)
 800637c:	2200      	movs	r2, #0
 800637e:	4650      	mov	r0, sl
 8006380:	4659      	mov	r1, fp
 8006382:	f7fa fbc3 	bl	8000b0c <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	d079      	beq.n	800647e <_dtoa_r+0x4de>
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d076      	beq.n	800647e <_dtoa_r+0x4de>
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	dd36      	ble.n	8006404 <_dtoa_r+0x464>
 8006396:	9b00      	ldr	r3, [sp, #0]
 8006398:	4650      	mov	r0, sl
 800639a:	4659      	mov	r1, fp
 800639c:	1e5f      	subs	r7, r3, #1
 800639e:	2200      	movs	r2, #0
 80063a0:	4b88      	ldr	r3, [pc, #544]	; (80065c4 <_dtoa_r+0x624>)
 80063a2:	f7fa f941 	bl	8000628 <__aeabi_dmul>
 80063a6:	9e02      	ldr	r6, [sp, #8]
 80063a8:	4682      	mov	sl, r0
 80063aa:	468b      	mov	fp, r1
 80063ac:	3501      	adds	r5, #1
 80063ae:	4628      	mov	r0, r5
 80063b0:	f7fa f8d0 	bl	8000554 <__aeabi_i2d>
 80063b4:	4652      	mov	r2, sl
 80063b6:	465b      	mov	r3, fp
 80063b8:	f7fa f936 	bl	8000628 <__aeabi_dmul>
 80063bc:	4b82      	ldr	r3, [pc, #520]	; (80065c8 <_dtoa_r+0x628>)
 80063be:	2200      	movs	r2, #0
 80063c0:	f7f9 ff7c 	bl	80002bc <__adddf3>
 80063c4:	46d0      	mov	r8, sl
 80063c6:	46d9      	mov	r9, fp
 80063c8:	4682      	mov	sl, r0
 80063ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80063ce:	2e00      	cmp	r6, #0
 80063d0:	d158      	bne.n	8006484 <_dtoa_r+0x4e4>
 80063d2:	4b7e      	ldr	r3, [pc, #504]	; (80065cc <_dtoa_r+0x62c>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	4640      	mov	r0, r8
 80063d8:	4649      	mov	r1, r9
 80063da:	f7f9 ff6d 	bl	80002b8 <__aeabi_dsub>
 80063de:	4652      	mov	r2, sl
 80063e0:	465b      	mov	r3, fp
 80063e2:	4680      	mov	r8, r0
 80063e4:	4689      	mov	r9, r1
 80063e6:	f7fa fbaf 	bl	8000b48 <__aeabi_dcmpgt>
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f040 8295 	bne.w	800691a <_dtoa_r+0x97a>
 80063f0:	4652      	mov	r2, sl
 80063f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80063f6:	4640      	mov	r0, r8
 80063f8:	4649      	mov	r1, r9
 80063fa:	f7fa fb87 	bl	8000b0c <__aeabi_dcmplt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	f040 8289 	bne.w	8006916 <_dtoa_r+0x976>
 8006404:	ec5b ab19 	vmov	sl, fp, d9
 8006408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800640a:	2b00      	cmp	r3, #0
 800640c:	f2c0 8148 	blt.w	80066a0 <_dtoa_r+0x700>
 8006410:	9a00      	ldr	r2, [sp, #0]
 8006412:	2a0e      	cmp	r2, #14
 8006414:	f300 8144 	bgt.w	80066a0 <_dtoa_r+0x700>
 8006418:	4b67      	ldr	r3, [pc, #412]	; (80065b8 <_dtoa_r+0x618>)
 800641a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800641e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	f280 80d5 	bge.w	80065d4 <_dtoa_r+0x634>
 800642a:	9b03      	ldr	r3, [sp, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f300 80d1 	bgt.w	80065d4 <_dtoa_r+0x634>
 8006432:	f040 826f 	bne.w	8006914 <_dtoa_r+0x974>
 8006436:	4b65      	ldr	r3, [pc, #404]	; (80065cc <_dtoa_r+0x62c>)
 8006438:	2200      	movs	r2, #0
 800643a:	4640      	mov	r0, r8
 800643c:	4649      	mov	r1, r9
 800643e:	f7fa f8f3 	bl	8000628 <__aeabi_dmul>
 8006442:	4652      	mov	r2, sl
 8006444:	465b      	mov	r3, fp
 8006446:	f7fa fb75 	bl	8000b34 <__aeabi_dcmpge>
 800644a:	9e03      	ldr	r6, [sp, #12]
 800644c:	4637      	mov	r7, r6
 800644e:	2800      	cmp	r0, #0
 8006450:	f040 8245 	bne.w	80068de <_dtoa_r+0x93e>
 8006454:	9d01      	ldr	r5, [sp, #4]
 8006456:	2331      	movs	r3, #49	; 0x31
 8006458:	f805 3b01 	strb.w	r3, [r5], #1
 800645c:	9b00      	ldr	r3, [sp, #0]
 800645e:	3301      	adds	r3, #1
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	e240      	b.n	80068e6 <_dtoa_r+0x946>
 8006464:	07f2      	lsls	r2, r6, #31
 8006466:	d505      	bpl.n	8006474 <_dtoa_r+0x4d4>
 8006468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646c:	f7fa f8dc 	bl	8000628 <__aeabi_dmul>
 8006470:	3501      	adds	r5, #1
 8006472:	2301      	movs	r3, #1
 8006474:	1076      	asrs	r6, r6, #1
 8006476:	3708      	adds	r7, #8
 8006478:	e777      	b.n	800636a <_dtoa_r+0x3ca>
 800647a:	2502      	movs	r5, #2
 800647c:	e779      	b.n	8006372 <_dtoa_r+0x3d2>
 800647e:	9f00      	ldr	r7, [sp, #0]
 8006480:	9e03      	ldr	r6, [sp, #12]
 8006482:	e794      	b.n	80063ae <_dtoa_r+0x40e>
 8006484:	9901      	ldr	r1, [sp, #4]
 8006486:	4b4c      	ldr	r3, [pc, #304]	; (80065b8 <_dtoa_r+0x618>)
 8006488:	4431      	add	r1, r6
 800648a:	910d      	str	r1, [sp, #52]	; 0x34
 800648c:	9908      	ldr	r1, [sp, #32]
 800648e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006496:	2900      	cmp	r1, #0
 8006498:	d043      	beq.n	8006522 <_dtoa_r+0x582>
 800649a:	494d      	ldr	r1, [pc, #308]	; (80065d0 <_dtoa_r+0x630>)
 800649c:	2000      	movs	r0, #0
 800649e:	f7fa f9ed 	bl	800087c <__aeabi_ddiv>
 80064a2:	4652      	mov	r2, sl
 80064a4:	465b      	mov	r3, fp
 80064a6:	f7f9 ff07 	bl	80002b8 <__aeabi_dsub>
 80064aa:	9d01      	ldr	r5, [sp, #4]
 80064ac:	4682      	mov	sl, r0
 80064ae:	468b      	mov	fp, r1
 80064b0:	4649      	mov	r1, r9
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7fa fb68 	bl	8000b88 <__aeabi_d2iz>
 80064b8:	4606      	mov	r6, r0
 80064ba:	f7fa f84b 	bl	8000554 <__aeabi_i2d>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4640      	mov	r0, r8
 80064c4:	4649      	mov	r1, r9
 80064c6:	f7f9 fef7 	bl	80002b8 <__aeabi_dsub>
 80064ca:	3630      	adds	r6, #48	; 0x30
 80064cc:	f805 6b01 	strb.w	r6, [r5], #1
 80064d0:	4652      	mov	r2, sl
 80064d2:	465b      	mov	r3, fp
 80064d4:	4680      	mov	r8, r0
 80064d6:	4689      	mov	r9, r1
 80064d8:	f7fa fb18 	bl	8000b0c <__aeabi_dcmplt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d163      	bne.n	80065a8 <_dtoa_r+0x608>
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	4936      	ldr	r1, [pc, #216]	; (80065c0 <_dtoa_r+0x620>)
 80064e6:	2000      	movs	r0, #0
 80064e8:	f7f9 fee6 	bl	80002b8 <__aeabi_dsub>
 80064ec:	4652      	mov	r2, sl
 80064ee:	465b      	mov	r3, fp
 80064f0:	f7fa fb0c 	bl	8000b0c <__aeabi_dcmplt>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f040 80b5 	bne.w	8006664 <_dtoa_r+0x6c4>
 80064fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064fc:	429d      	cmp	r5, r3
 80064fe:	d081      	beq.n	8006404 <_dtoa_r+0x464>
 8006500:	4b30      	ldr	r3, [pc, #192]	; (80065c4 <_dtoa_r+0x624>)
 8006502:	2200      	movs	r2, #0
 8006504:	4650      	mov	r0, sl
 8006506:	4659      	mov	r1, fp
 8006508:	f7fa f88e 	bl	8000628 <__aeabi_dmul>
 800650c:	4b2d      	ldr	r3, [pc, #180]	; (80065c4 <_dtoa_r+0x624>)
 800650e:	4682      	mov	sl, r0
 8006510:	468b      	mov	fp, r1
 8006512:	4640      	mov	r0, r8
 8006514:	4649      	mov	r1, r9
 8006516:	2200      	movs	r2, #0
 8006518:	f7fa f886 	bl	8000628 <__aeabi_dmul>
 800651c:	4680      	mov	r8, r0
 800651e:	4689      	mov	r9, r1
 8006520:	e7c6      	b.n	80064b0 <_dtoa_r+0x510>
 8006522:	4650      	mov	r0, sl
 8006524:	4659      	mov	r1, fp
 8006526:	f7fa f87f 	bl	8000628 <__aeabi_dmul>
 800652a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800652c:	9d01      	ldr	r5, [sp, #4]
 800652e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006530:	4682      	mov	sl, r0
 8006532:	468b      	mov	fp, r1
 8006534:	4649      	mov	r1, r9
 8006536:	4640      	mov	r0, r8
 8006538:	f7fa fb26 	bl	8000b88 <__aeabi_d2iz>
 800653c:	4606      	mov	r6, r0
 800653e:	f7fa f809 	bl	8000554 <__aeabi_i2d>
 8006542:	3630      	adds	r6, #48	; 0x30
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4640      	mov	r0, r8
 800654a:	4649      	mov	r1, r9
 800654c:	f7f9 feb4 	bl	80002b8 <__aeabi_dsub>
 8006550:	f805 6b01 	strb.w	r6, [r5], #1
 8006554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006556:	429d      	cmp	r5, r3
 8006558:	4680      	mov	r8, r0
 800655a:	4689      	mov	r9, r1
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	d124      	bne.n	80065ac <_dtoa_r+0x60c>
 8006562:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <_dtoa_r+0x630>)
 8006564:	4650      	mov	r0, sl
 8006566:	4659      	mov	r1, fp
 8006568:	f7f9 fea8 	bl	80002bc <__adddf3>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4640      	mov	r0, r8
 8006572:	4649      	mov	r1, r9
 8006574:	f7fa fae8 	bl	8000b48 <__aeabi_dcmpgt>
 8006578:	2800      	cmp	r0, #0
 800657a:	d173      	bne.n	8006664 <_dtoa_r+0x6c4>
 800657c:	4652      	mov	r2, sl
 800657e:	465b      	mov	r3, fp
 8006580:	4913      	ldr	r1, [pc, #76]	; (80065d0 <_dtoa_r+0x630>)
 8006582:	2000      	movs	r0, #0
 8006584:	f7f9 fe98 	bl	80002b8 <__aeabi_dsub>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4640      	mov	r0, r8
 800658e:	4649      	mov	r1, r9
 8006590:	f7fa fabc 	bl	8000b0c <__aeabi_dcmplt>
 8006594:	2800      	cmp	r0, #0
 8006596:	f43f af35 	beq.w	8006404 <_dtoa_r+0x464>
 800659a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800659c:	1e6b      	subs	r3, r5, #1
 800659e:	930f      	str	r3, [sp, #60]	; 0x3c
 80065a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065a4:	2b30      	cmp	r3, #48	; 0x30
 80065a6:	d0f8      	beq.n	800659a <_dtoa_r+0x5fa>
 80065a8:	9700      	str	r7, [sp, #0]
 80065aa:	e049      	b.n	8006640 <_dtoa_r+0x6a0>
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <_dtoa_r+0x624>)
 80065ae:	f7fa f83b 	bl	8000628 <__aeabi_dmul>
 80065b2:	4680      	mov	r8, r0
 80065b4:	4689      	mov	r9, r1
 80065b6:	e7bd      	b.n	8006534 <_dtoa_r+0x594>
 80065b8:	08009a70 	.word	0x08009a70
 80065bc:	08009a48 	.word	0x08009a48
 80065c0:	3ff00000 	.word	0x3ff00000
 80065c4:	40240000 	.word	0x40240000
 80065c8:	401c0000 	.word	0x401c0000
 80065cc:	40140000 	.word	0x40140000
 80065d0:	3fe00000 	.word	0x3fe00000
 80065d4:	9d01      	ldr	r5, [sp, #4]
 80065d6:	4656      	mov	r6, sl
 80065d8:	465f      	mov	r7, fp
 80065da:	4642      	mov	r2, r8
 80065dc:	464b      	mov	r3, r9
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7fa f94b 	bl	800087c <__aeabi_ddiv>
 80065e6:	f7fa facf 	bl	8000b88 <__aeabi_d2iz>
 80065ea:	4682      	mov	sl, r0
 80065ec:	f7f9 ffb2 	bl	8000554 <__aeabi_i2d>
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	f7fa f818 	bl	8000628 <__aeabi_dmul>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006604:	f7f9 fe58 	bl	80002b8 <__aeabi_dsub>
 8006608:	f805 6b01 	strb.w	r6, [r5], #1
 800660c:	9e01      	ldr	r6, [sp, #4]
 800660e:	9f03      	ldr	r7, [sp, #12]
 8006610:	1bae      	subs	r6, r5, r6
 8006612:	42b7      	cmp	r7, r6
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	d135      	bne.n	8006686 <_dtoa_r+0x6e6>
 800661a:	f7f9 fe4f 	bl	80002bc <__adddf3>
 800661e:	4642      	mov	r2, r8
 8006620:	464b      	mov	r3, r9
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	f7fa fa8f 	bl	8000b48 <__aeabi_dcmpgt>
 800662a:	b9d0      	cbnz	r0, 8006662 <_dtoa_r+0x6c2>
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	4630      	mov	r0, r6
 8006632:	4639      	mov	r1, r7
 8006634:	f7fa fa60 	bl	8000af8 <__aeabi_dcmpeq>
 8006638:	b110      	cbz	r0, 8006640 <_dtoa_r+0x6a0>
 800663a:	f01a 0f01 	tst.w	sl, #1
 800663e:	d110      	bne.n	8006662 <_dtoa_r+0x6c2>
 8006640:	4620      	mov	r0, r4
 8006642:	ee18 1a10 	vmov	r1, s16
 8006646:	f000 fe87 	bl	8007358 <_Bfree>
 800664a:	2300      	movs	r3, #0
 800664c:	9800      	ldr	r0, [sp, #0]
 800664e:	702b      	strb	r3, [r5, #0]
 8006650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006652:	3001      	adds	r0, #1
 8006654:	6018      	str	r0, [r3, #0]
 8006656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006658:	2b00      	cmp	r3, #0
 800665a:	f43f acf1 	beq.w	8006040 <_dtoa_r+0xa0>
 800665e:	601d      	str	r5, [r3, #0]
 8006660:	e4ee      	b.n	8006040 <_dtoa_r+0xa0>
 8006662:	9f00      	ldr	r7, [sp, #0]
 8006664:	462b      	mov	r3, r5
 8006666:	461d      	mov	r5, r3
 8006668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800666c:	2a39      	cmp	r2, #57	; 0x39
 800666e:	d106      	bne.n	800667e <_dtoa_r+0x6de>
 8006670:	9a01      	ldr	r2, [sp, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d1f7      	bne.n	8006666 <_dtoa_r+0x6c6>
 8006676:	9901      	ldr	r1, [sp, #4]
 8006678:	2230      	movs	r2, #48	; 0x30
 800667a:	3701      	adds	r7, #1
 800667c:	700a      	strb	r2, [r1, #0]
 800667e:	781a      	ldrb	r2, [r3, #0]
 8006680:	3201      	adds	r2, #1
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e790      	b.n	80065a8 <_dtoa_r+0x608>
 8006686:	4ba6      	ldr	r3, [pc, #664]	; (8006920 <_dtoa_r+0x980>)
 8006688:	2200      	movs	r2, #0
 800668a:	f7f9 ffcd 	bl	8000628 <__aeabi_dmul>
 800668e:	2200      	movs	r2, #0
 8006690:	2300      	movs	r3, #0
 8006692:	4606      	mov	r6, r0
 8006694:	460f      	mov	r7, r1
 8006696:	f7fa fa2f 	bl	8000af8 <__aeabi_dcmpeq>
 800669a:	2800      	cmp	r0, #0
 800669c:	d09d      	beq.n	80065da <_dtoa_r+0x63a>
 800669e:	e7cf      	b.n	8006640 <_dtoa_r+0x6a0>
 80066a0:	9a08      	ldr	r2, [sp, #32]
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	f000 80d7 	beq.w	8006856 <_dtoa_r+0x8b6>
 80066a8:	9a06      	ldr	r2, [sp, #24]
 80066aa:	2a01      	cmp	r2, #1
 80066ac:	f300 80ba 	bgt.w	8006824 <_dtoa_r+0x884>
 80066b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	f000 80b2 	beq.w	800681c <_dtoa_r+0x87c>
 80066b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066bc:	9e07      	ldr	r6, [sp, #28]
 80066be:	9d04      	ldr	r5, [sp, #16]
 80066c0:	9a04      	ldr	r2, [sp, #16]
 80066c2:	441a      	add	r2, r3
 80066c4:	9204      	str	r2, [sp, #16]
 80066c6:	9a05      	ldr	r2, [sp, #20]
 80066c8:	2101      	movs	r1, #1
 80066ca:	441a      	add	r2, r3
 80066cc:	4620      	mov	r0, r4
 80066ce:	9205      	str	r2, [sp, #20]
 80066d0:	f000 ff44 	bl	800755c <__i2b>
 80066d4:	4607      	mov	r7, r0
 80066d6:	2d00      	cmp	r5, #0
 80066d8:	dd0c      	ble.n	80066f4 <_dtoa_r+0x754>
 80066da:	9b05      	ldr	r3, [sp, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	dd09      	ble.n	80066f4 <_dtoa_r+0x754>
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	9a04      	ldr	r2, [sp, #16]
 80066e4:	bfa8      	it	ge
 80066e6:	462b      	movge	r3, r5
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	9204      	str	r2, [sp, #16]
 80066ec:	9a05      	ldr	r2, [sp, #20]
 80066ee:	1aed      	subs	r5, r5, r3
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	9b07      	ldr	r3, [sp, #28]
 80066f6:	b31b      	cbz	r3, 8006740 <_dtoa_r+0x7a0>
 80066f8:	9b08      	ldr	r3, [sp, #32]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 80af 	beq.w	800685e <_dtoa_r+0x8be>
 8006700:	2e00      	cmp	r6, #0
 8006702:	dd13      	ble.n	800672c <_dtoa_r+0x78c>
 8006704:	4639      	mov	r1, r7
 8006706:	4632      	mov	r2, r6
 8006708:	4620      	mov	r0, r4
 800670a:	f000 ffe7 	bl	80076dc <__pow5mult>
 800670e:	ee18 2a10 	vmov	r2, s16
 8006712:	4601      	mov	r1, r0
 8006714:	4607      	mov	r7, r0
 8006716:	4620      	mov	r0, r4
 8006718:	f000 ff36 	bl	8007588 <__multiply>
 800671c:	ee18 1a10 	vmov	r1, s16
 8006720:	4680      	mov	r8, r0
 8006722:	4620      	mov	r0, r4
 8006724:	f000 fe18 	bl	8007358 <_Bfree>
 8006728:	ee08 8a10 	vmov	s16, r8
 800672c:	9b07      	ldr	r3, [sp, #28]
 800672e:	1b9a      	subs	r2, r3, r6
 8006730:	d006      	beq.n	8006740 <_dtoa_r+0x7a0>
 8006732:	ee18 1a10 	vmov	r1, s16
 8006736:	4620      	mov	r0, r4
 8006738:	f000 ffd0 	bl	80076dc <__pow5mult>
 800673c:	ee08 0a10 	vmov	s16, r0
 8006740:	2101      	movs	r1, #1
 8006742:	4620      	mov	r0, r4
 8006744:	f000 ff0a 	bl	800755c <__i2b>
 8006748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674a:	2b00      	cmp	r3, #0
 800674c:	4606      	mov	r6, r0
 800674e:	f340 8088 	ble.w	8006862 <_dtoa_r+0x8c2>
 8006752:	461a      	mov	r2, r3
 8006754:	4601      	mov	r1, r0
 8006756:	4620      	mov	r0, r4
 8006758:	f000 ffc0 	bl	80076dc <__pow5mult>
 800675c:	9b06      	ldr	r3, [sp, #24]
 800675e:	2b01      	cmp	r3, #1
 8006760:	4606      	mov	r6, r0
 8006762:	f340 8081 	ble.w	8006868 <_dtoa_r+0x8c8>
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	6933      	ldr	r3, [r6, #16]
 800676c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006770:	6918      	ldr	r0, [r3, #16]
 8006772:	f000 fea3 	bl	80074bc <__hi0bits>
 8006776:	f1c0 0020 	rsb	r0, r0, #32
 800677a:	9b05      	ldr	r3, [sp, #20]
 800677c:	4418      	add	r0, r3
 800677e:	f010 001f 	ands.w	r0, r0, #31
 8006782:	f000 8092 	beq.w	80068aa <_dtoa_r+0x90a>
 8006786:	f1c0 0320 	rsb	r3, r0, #32
 800678a:	2b04      	cmp	r3, #4
 800678c:	f340 808a 	ble.w	80068a4 <_dtoa_r+0x904>
 8006790:	f1c0 001c 	rsb	r0, r0, #28
 8006794:	9b04      	ldr	r3, [sp, #16]
 8006796:	4403      	add	r3, r0
 8006798:	9304      	str	r3, [sp, #16]
 800679a:	9b05      	ldr	r3, [sp, #20]
 800679c:	4403      	add	r3, r0
 800679e:	4405      	add	r5, r0
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	9b04      	ldr	r3, [sp, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dd07      	ble.n	80067b8 <_dtoa_r+0x818>
 80067a8:	ee18 1a10 	vmov	r1, s16
 80067ac:	461a      	mov	r2, r3
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 ffee 	bl	8007790 <__lshift>
 80067b4:	ee08 0a10 	vmov	s16, r0
 80067b8:	9b05      	ldr	r3, [sp, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	dd05      	ble.n	80067ca <_dtoa_r+0x82a>
 80067be:	4631      	mov	r1, r6
 80067c0:	461a      	mov	r2, r3
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 ffe4 	bl	8007790 <__lshift>
 80067c8:	4606      	mov	r6, r0
 80067ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d06e      	beq.n	80068ae <_dtoa_r+0x90e>
 80067d0:	ee18 0a10 	vmov	r0, s16
 80067d4:	4631      	mov	r1, r6
 80067d6:	f001 f84b 	bl	8007870 <__mcmp>
 80067da:	2800      	cmp	r0, #0
 80067dc:	da67      	bge.n	80068ae <_dtoa_r+0x90e>
 80067de:	9b00      	ldr	r3, [sp, #0]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	ee18 1a10 	vmov	r1, s16
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	220a      	movs	r2, #10
 80067ea:	2300      	movs	r3, #0
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 fdd5 	bl	800739c <__multadd>
 80067f2:	9b08      	ldr	r3, [sp, #32]
 80067f4:	ee08 0a10 	vmov	s16, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 81b1 	beq.w	8006b60 <_dtoa_r+0xbc0>
 80067fe:	2300      	movs	r3, #0
 8006800:	4639      	mov	r1, r7
 8006802:	220a      	movs	r2, #10
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fdc9 	bl	800739c <__multadd>
 800680a:	9b02      	ldr	r3, [sp, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	4607      	mov	r7, r0
 8006810:	f300 808e 	bgt.w	8006930 <_dtoa_r+0x990>
 8006814:	9b06      	ldr	r3, [sp, #24]
 8006816:	2b02      	cmp	r3, #2
 8006818:	dc51      	bgt.n	80068be <_dtoa_r+0x91e>
 800681a:	e089      	b.n	8006930 <_dtoa_r+0x990>
 800681c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800681e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006822:	e74b      	b.n	80066bc <_dtoa_r+0x71c>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	1e5e      	subs	r6, r3, #1
 8006828:	9b07      	ldr	r3, [sp, #28]
 800682a:	42b3      	cmp	r3, r6
 800682c:	bfbf      	itttt	lt
 800682e:	9b07      	ldrlt	r3, [sp, #28]
 8006830:	9607      	strlt	r6, [sp, #28]
 8006832:	1af2      	sublt	r2, r6, r3
 8006834:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006836:	bfb6      	itet	lt
 8006838:	189b      	addlt	r3, r3, r2
 800683a:	1b9e      	subge	r6, r3, r6
 800683c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	bfb8      	it	lt
 8006842:	2600      	movlt	r6, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	bfb7      	itett	lt
 8006848:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800684c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006850:	1a9d      	sublt	r5, r3, r2
 8006852:	2300      	movlt	r3, #0
 8006854:	e734      	b.n	80066c0 <_dtoa_r+0x720>
 8006856:	9e07      	ldr	r6, [sp, #28]
 8006858:	9d04      	ldr	r5, [sp, #16]
 800685a:	9f08      	ldr	r7, [sp, #32]
 800685c:	e73b      	b.n	80066d6 <_dtoa_r+0x736>
 800685e:	9a07      	ldr	r2, [sp, #28]
 8006860:	e767      	b.n	8006732 <_dtoa_r+0x792>
 8006862:	9b06      	ldr	r3, [sp, #24]
 8006864:	2b01      	cmp	r3, #1
 8006866:	dc18      	bgt.n	800689a <_dtoa_r+0x8fa>
 8006868:	f1ba 0f00 	cmp.w	sl, #0
 800686c:	d115      	bne.n	800689a <_dtoa_r+0x8fa>
 800686e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006872:	b993      	cbnz	r3, 800689a <_dtoa_r+0x8fa>
 8006874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006878:	0d1b      	lsrs	r3, r3, #20
 800687a:	051b      	lsls	r3, r3, #20
 800687c:	b183      	cbz	r3, 80068a0 <_dtoa_r+0x900>
 800687e:	9b04      	ldr	r3, [sp, #16]
 8006880:	3301      	adds	r3, #1
 8006882:	9304      	str	r3, [sp, #16]
 8006884:	9b05      	ldr	r3, [sp, #20]
 8006886:	3301      	adds	r3, #1
 8006888:	9305      	str	r3, [sp, #20]
 800688a:	f04f 0801 	mov.w	r8, #1
 800688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	f47f af6a 	bne.w	800676a <_dtoa_r+0x7ca>
 8006896:	2001      	movs	r0, #1
 8006898:	e76f      	b.n	800677a <_dtoa_r+0x7da>
 800689a:	f04f 0800 	mov.w	r8, #0
 800689e:	e7f6      	b.n	800688e <_dtoa_r+0x8ee>
 80068a0:	4698      	mov	r8, r3
 80068a2:	e7f4      	b.n	800688e <_dtoa_r+0x8ee>
 80068a4:	f43f af7d 	beq.w	80067a2 <_dtoa_r+0x802>
 80068a8:	4618      	mov	r0, r3
 80068aa:	301c      	adds	r0, #28
 80068ac:	e772      	b.n	8006794 <_dtoa_r+0x7f4>
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	dc37      	bgt.n	8006924 <_dtoa_r+0x984>
 80068b4:	9b06      	ldr	r3, [sp, #24]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	dd34      	ble.n	8006924 <_dtoa_r+0x984>
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	9302      	str	r3, [sp, #8]
 80068be:	9b02      	ldr	r3, [sp, #8]
 80068c0:	b96b      	cbnz	r3, 80068de <_dtoa_r+0x93e>
 80068c2:	4631      	mov	r1, r6
 80068c4:	2205      	movs	r2, #5
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 fd68 	bl	800739c <__multadd>
 80068cc:	4601      	mov	r1, r0
 80068ce:	4606      	mov	r6, r0
 80068d0:	ee18 0a10 	vmov	r0, s16
 80068d4:	f000 ffcc 	bl	8007870 <__mcmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	f73f adbb 	bgt.w	8006454 <_dtoa_r+0x4b4>
 80068de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e0:	9d01      	ldr	r5, [sp, #4]
 80068e2:	43db      	mvns	r3, r3
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	f04f 0800 	mov.w	r8, #0
 80068ea:	4631      	mov	r1, r6
 80068ec:	4620      	mov	r0, r4
 80068ee:	f000 fd33 	bl	8007358 <_Bfree>
 80068f2:	2f00      	cmp	r7, #0
 80068f4:	f43f aea4 	beq.w	8006640 <_dtoa_r+0x6a0>
 80068f8:	f1b8 0f00 	cmp.w	r8, #0
 80068fc:	d005      	beq.n	800690a <_dtoa_r+0x96a>
 80068fe:	45b8      	cmp	r8, r7
 8006900:	d003      	beq.n	800690a <_dtoa_r+0x96a>
 8006902:	4641      	mov	r1, r8
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fd27 	bl	8007358 <_Bfree>
 800690a:	4639      	mov	r1, r7
 800690c:	4620      	mov	r0, r4
 800690e:	f000 fd23 	bl	8007358 <_Bfree>
 8006912:	e695      	b.n	8006640 <_dtoa_r+0x6a0>
 8006914:	2600      	movs	r6, #0
 8006916:	4637      	mov	r7, r6
 8006918:	e7e1      	b.n	80068de <_dtoa_r+0x93e>
 800691a:	9700      	str	r7, [sp, #0]
 800691c:	4637      	mov	r7, r6
 800691e:	e599      	b.n	8006454 <_dtoa_r+0x4b4>
 8006920:	40240000 	.word	0x40240000
 8006924:	9b08      	ldr	r3, [sp, #32]
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80ca 	beq.w	8006ac0 <_dtoa_r+0xb20>
 800692c:	9b03      	ldr	r3, [sp, #12]
 800692e:	9302      	str	r3, [sp, #8]
 8006930:	2d00      	cmp	r5, #0
 8006932:	dd05      	ble.n	8006940 <_dtoa_r+0x9a0>
 8006934:	4639      	mov	r1, r7
 8006936:	462a      	mov	r2, r5
 8006938:	4620      	mov	r0, r4
 800693a:	f000 ff29 	bl	8007790 <__lshift>
 800693e:	4607      	mov	r7, r0
 8006940:	f1b8 0f00 	cmp.w	r8, #0
 8006944:	d05b      	beq.n	80069fe <_dtoa_r+0xa5e>
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fcc5 	bl	80072d8 <_Balloc>
 800694e:	4605      	mov	r5, r0
 8006950:	b928      	cbnz	r0, 800695e <_dtoa_r+0x9be>
 8006952:	4b87      	ldr	r3, [pc, #540]	; (8006b70 <_dtoa_r+0xbd0>)
 8006954:	4602      	mov	r2, r0
 8006956:	f240 21ea 	movw	r1, #746	; 0x2ea
 800695a:	f7ff bb3b 	b.w	8005fd4 <_dtoa_r+0x34>
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	3202      	adds	r2, #2
 8006962:	0092      	lsls	r2, r2, #2
 8006964:	f107 010c 	add.w	r1, r7, #12
 8006968:	300c      	adds	r0, #12
 800696a:	f000 fca7 	bl	80072bc <memcpy>
 800696e:	2201      	movs	r2, #1
 8006970:	4629      	mov	r1, r5
 8006972:	4620      	mov	r0, r4
 8006974:	f000 ff0c 	bl	8007790 <__lshift>
 8006978:	9b01      	ldr	r3, [sp, #4]
 800697a:	f103 0901 	add.w	r9, r3, #1
 800697e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006982:	4413      	add	r3, r2
 8006984:	9305      	str	r3, [sp, #20]
 8006986:	f00a 0301 	and.w	r3, sl, #1
 800698a:	46b8      	mov	r8, r7
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	4607      	mov	r7, r0
 8006990:	4631      	mov	r1, r6
 8006992:	ee18 0a10 	vmov	r0, s16
 8006996:	f7ff fa75 	bl	8005e84 <quorem>
 800699a:	4641      	mov	r1, r8
 800699c:	9002      	str	r0, [sp, #8]
 800699e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069a2:	ee18 0a10 	vmov	r0, s16
 80069a6:	f000 ff63 	bl	8007870 <__mcmp>
 80069aa:	463a      	mov	r2, r7
 80069ac:	9003      	str	r0, [sp, #12]
 80069ae:	4631      	mov	r1, r6
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 ff79 	bl	80078a8 <__mdiff>
 80069b6:	68c2      	ldr	r2, [r0, #12]
 80069b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80069bc:	4605      	mov	r5, r0
 80069be:	bb02      	cbnz	r2, 8006a02 <_dtoa_r+0xa62>
 80069c0:	4601      	mov	r1, r0
 80069c2:	ee18 0a10 	vmov	r0, s16
 80069c6:	f000 ff53 	bl	8007870 <__mcmp>
 80069ca:	4602      	mov	r2, r0
 80069cc:	4629      	mov	r1, r5
 80069ce:	4620      	mov	r0, r4
 80069d0:	9207      	str	r2, [sp, #28]
 80069d2:	f000 fcc1 	bl	8007358 <_Bfree>
 80069d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80069da:	ea43 0102 	orr.w	r1, r3, r2
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	430b      	orrs	r3, r1
 80069e2:	464d      	mov	r5, r9
 80069e4:	d10f      	bne.n	8006a06 <_dtoa_r+0xa66>
 80069e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069ea:	d02a      	beq.n	8006a42 <_dtoa_r+0xaa2>
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	dd02      	ble.n	80069f8 <_dtoa_r+0xa58>
 80069f2:	9b02      	ldr	r3, [sp, #8]
 80069f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80069f8:	f88b a000 	strb.w	sl, [fp]
 80069fc:	e775      	b.n	80068ea <_dtoa_r+0x94a>
 80069fe:	4638      	mov	r0, r7
 8006a00:	e7ba      	b.n	8006978 <_dtoa_r+0x9d8>
 8006a02:	2201      	movs	r2, #1
 8006a04:	e7e2      	b.n	80069cc <_dtoa_r+0xa2c>
 8006a06:	9b03      	ldr	r3, [sp, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db04      	blt.n	8006a16 <_dtoa_r+0xa76>
 8006a0c:	9906      	ldr	r1, [sp, #24]
 8006a0e:	430b      	orrs	r3, r1
 8006a10:	9904      	ldr	r1, [sp, #16]
 8006a12:	430b      	orrs	r3, r1
 8006a14:	d122      	bne.n	8006a5c <_dtoa_r+0xabc>
 8006a16:	2a00      	cmp	r2, #0
 8006a18:	ddee      	ble.n	80069f8 <_dtoa_r+0xa58>
 8006a1a:	ee18 1a10 	vmov	r1, s16
 8006a1e:	2201      	movs	r2, #1
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 feb5 	bl	8007790 <__lshift>
 8006a26:	4631      	mov	r1, r6
 8006a28:	ee08 0a10 	vmov	s16, r0
 8006a2c:	f000 ff20 	bl	8007870 <__mcmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	dc03      	bgt.n	8006a3c <_dtoa_r+0xa9c>
 8006a34:	d1e0      	bne.n	80069f8 <_dtoa_r+0xa58>
 8006a36:	f01a 0f01 	tst.w	sl, #1
 8006a3a:	d0dd      	beq.n	80069f8 <_dtoa_r+0xa58>
 8006a3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a40:	d1d7      	bne.n	80069f2 <_dtoa_r+0xa52>
 8006a42:	2339      	movs	r3, #57	; 0x39
 8006a44:	f88b 3000 	strb.w	r3, [fp]
 8006a48:	462b      	mov	r3, r5
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a52:	2a39      	cmp	r2, #57	; 0x39
 8006a54:	d071      	beq.n	8006b3a <_dtoa_r+0xb9a>
 8006a56:	3201      	adds	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	e746      	b.n	80068ea <_dtoa_r+0x94a>
 8006a5c:	2a00      	cmp	r2, #0
 8006a5e:	dd07      	ble.n	8006a70 <_dtoa_r+0xad0>
 8006a60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006a64:	d0ed      	beq.n	8006a42 <_dtoa_r+0xaa2>
 8006a66:	f10a 0301 	add.w	r3, sl, #1
 8006a6a:	f88b 3000 	strb.w	r3, [fp]
 8006a6e:	e73c      	b.n	80068ea <_dtoa_r+0x94a>
 8006a70:	9b05      	ldr	r3, [sp, #20]
 8006a72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006a76:	4599      	cmp	r9, r3
 8006a78:	d047      	beq.n	8006b0a <_dtoa_r+0xb6a>
 8006a7a:	ee18 1a10 	vmov	r1, s16
 8006a7e:	2300      	movs	r3, #0
 8006a80:	220a      	movs	r2, #10
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fc8a 	bl	800739c <__multadd>
 8006a88:	45b8      	cmp	r8, r7
 8006a8a:	ee08 0a10 	vmov	s16, r0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	f04f 020a 	mov.w	r2, #10
 8006a96:	4641      	mov	r1, r8
 8006a98:	4620      	mov	r0, r4
 8006a9a:	d106      	bne.n	8006aaa <_dtoa_r+0xb0a>
 8006a9c:	f000 fc7e 	bl	800739c <__multadd>
 8006aa0:	4680      	mov	r8, r0
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	f109 0901 	add.w	r9, r9, #1
 8006aa8:	e772      	b.n	8006990 <_dtoa_r+0x9f0>
 8006aaa:	f000 fc77 	bl	800739c <__multadd>
 8006aae:	4639      	mov	r1, r7
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	220a      	movs	r2, #10
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 fc70 	bl	800739c <__multadd>
 8006abc:	4607      	mov	r7, r0
 8006abe:	e7f1      	b.n	8006aa4 <_dtoa_r+0xb04>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	9302      	str	r3, [sp, #8]
 8006ac4:	9d01      	ldr	r5, [sp, #4]
 8006ac6:	ee18 0a10 	vmov	r0, s16
 8006aca:	4631      	mov	r1, r6
 8006acc:	f7ff f9da 	bl	8005e84 <quorem>
 8006ad0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	f805 ab01 	strb.w	sl, [r5], #1
 8006ada:	1aea      	subs	r2, r5, r3
 8006adc:	9b02      	ldr	r3, [sp, #8]
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	dd09      	ble.n	8006af6 <_dtoa_r+0xb56>
 8006ae2:	ee18 1a10 	vmov	r1, s16
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	220a      	movs	r2, #10
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 fc56 	bl	800739c <__multadd>
 8006af0:	ee08 0a10 	vmov	s16, r0
 8006af4:	e7e7      	b.n	8006ac6 <_dtoa_r+0xb26>
 8006af6:	9b02      	ldr	r3, [sp, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bfc8      	it	gt
 8006afc:	461d      	movgt	r5, r3
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	bfd8      	it	le
 8006b02:	2501      	movle	r5, #1
 8006b04:	441d      	add	r5, r3
 8006b06:	f04f 0800 	mov.w	r8, #0
 8006b0a:	ee18 1a10 	vmov	r1, s16
 8006b0e:	2201      	movs	r2, #1
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fe3d 	bl	8007790 <__lshift>
 8006b16:	4631      	mov	r1, r6
 8006b18:	ee08 0a10 	vmov	s16, r0
 8006b1c:	f000 fea8 	bl	8007870 <__mcmp>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	dc91      	bgt.n	8006a48 <_dtoa_r+0xaa8>
 8006b24:	d102      	bne.n	8006b2c <_dtoa_r+0xb8c>
 8006b26:	f01a 0f01 	tst.w	sl, #1
 8006b2a:	d18d      	bne.n	8006a48 <_dtoa_r+0xaa8>
 8006b2c:	462b      	mov	r3, r5
 8006b2e:	461d      	mov	r5, r3
 8006b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b34:	2a30      	cmp	r2, #48	; 0x30
 8006b36:	d0fa      	beq.n	8006b2e <_dtoa_r+0xb8e>
 8006b38:	e6d7      	b.n	80068ea <_dtoa_r+0x94a>
 8006b3a:	9a01      	ldr	r2, [sp, #4]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d184      	bne.n	8006a4a <_dtoa_r+0xaaa>
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	3301      	adds	r3, #1
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	2331      	movs	r3, #49	; 0x31
 8006b48:	7013      	strb	r3, [r2, #0]
 8006b4a:	e6ce      	b.n	80068ea <_dtoa_r+0x94a>
 8006b4c:	4b09      	ldr	r3, [pc, #36]	; (8006b74 <_dtoa_r+0xbd4>)
 8006b4e:	f7ff ba95 	b.w	800607c <_dtoa_r+0xdc>
 8006b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f aa6e 	bne.w	8006036 <_dtoa_r+0x96>
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <_dtoa_r+0xbd8>)
 8006b5c:	f7ff ba8e 	b.w	800607c <_dtoa_r+0xdc>
 8006b60:	9b02      	ldr	r3, [sp, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dcae      	bgt.n	8006ac4 <_dtoa_r+0xb24>
 8006b66:	9b06      	ldr	r3, [sp, #24]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	f73f aea8 	bgt.w	80068be <_dtoa_r+0x91e>
 8006b6e:	e7a9      	b.n	8006ac4 <_dtoa_r+0xb24>
 8006b70:	08009960 	.word	0x08009960
 8006b74:	08009b59 	.word	0x08009b59
 8006b78:	080098e1 	.word	0x080098e1

08006b7c <rshift>:
 8006b7c:	6903      	ldr	r3, [r0, #16]
 8006b7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b8a:	f100 0414 	add.w	r4, r0, #20
 8006b8e:	dd45      	ble.n	8006c1c <rshift+0xa0>
 8006b90:	f011 011f 	ands.w	r1, r1, #31
 8006b94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b9c:	d10c      	bne.n	8006bb8 <rshift+0x3c>
 8006b9e:	f100 0710 	add.w	r7, r0, #16
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	42b1      	cmp	r1, r6
 8006ba6:	d334      	bcc.n	8006c12 <rshift+0x96>
 8006ba8:	1a9b      	subs	r3, r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	1eea      	subs	r2, r5, #3
 8006bae:	4296      	cmp	r6, r2
 8006bb0:	bf38      	it	cc
 8006bb2:	2300      	movcc	r3, #0
 8006bb4:	4423      	add	r3, r4
 8006bb6:	e015      	b.n	8006be4 <rshift+0x68>
 8006bb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006bbc:	f1c1 0820 	rsb	r8, r1, #32
 8006bc0:	40cf      	lsrs	r7, r1
 8006bc2:	f105 0e04 	add.w	lr, r5, #4
 8006bc6:	46a1      	mov	r9, r4
 8006bc8:	4576      	cmp	r6, lr
 8006bca:	46f4      	mov	ip, lr
 8006bcc:	d815      	bhi.n	8006bfa <rshift+0x7e>
 8006bce:	1a9a      	subs	r2, r3, r2
 8006bd0:	0092      	lsls	r2, r2, #2
 8006bd2:	3a04      	subs	r2, #4
 8006bd4:	3501      	adds	r5, #1
 8006bd6:	42ae      	cmp	r6, r5
 8006bd8:	bf38      	it	cc
 8006bda:	2200      	movcc	r2, #0
 8006bdc:	18a3      	adds	r3, r4, r2
 8006bde:	50a7      	str	r7, [r4, r2]
 8006be0:	b107      	cbz	r7, 8006be4 <rshift+0x68>
 8006be2:	3304      	adds	r3, #4
 8006be4:	1b1a      	subs	r2, r3, r4
 8006be6:	42a3      	cmp	r3, r4
 8006be8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006bec:	bf08      	it	eq
 8006bee:	2300      	moveq	r3, #0
 8006bf0:	6102      	str	r2, [r0, #16]
 8006bf2:	bf08      	it	eq
 8006bf4:	6143      	streq	r3, [r0, #20]
 8006bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bfa:	f8dc c000 	ldr.w	ip, [ip]
 8006bfe:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c02:	ea4c 0707 	orr.w	r7, ip, r7
 8006c06:	f849 7b04 	str.w	r7, [r9], #4
 8006c0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c0e:	40cf      	lsrs	r7, r1
 8006c10:	e7da      	b.n	8006bc8 <rshift+0x4c>
 8006c12:	f851 cb04 	ldr.w	ip, [r1], #4
 8006c16:	f847 cf04 	str.w	ip, [r7, #4]!
 8006c1a:	e7c3      	b.n	8006ba4 <rshift+0x28>
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	e7e1      	b.n	8006be4 <rshift+0x68>

08006c20 <__hexdig_fun>:
 8006c20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006c24:	2b09      	cmp	r3, #9
 8006c26:	d802      	bhi.n	8006c2e <__hexdig_fun+0xe>
 8006c28:	3820      	subs	r0, #32
 8006c2a:	b2c0      	uxtb	r0, r0
 8006c2c:	4770      	bx	lr
 8006c2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d801      	bhi.n	8006c3a <__hexdig_fun+0x1a>
 8006c36:	3847      	subs	r0, #71	; 0x47
 8006c38:	e7f7      	b.n	8006c2a <__hexdig_fun+0xa>
 8006c3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c3e:	2b05      	cmp	r3, #5
 8006c40:	d801      	bhi.n	8006c46 <__hexdig_fun+0x26>
 8006c42:	3827      	subs	r0, #39	; 0x27
 8006c44:	e7f1      	b.n	8006c2a <__hexdig_fun+0xa>
 8006c46:	2000      	movs	r0, #0
 8006c48:	4770      	bx	lr
	...

08006c4c <__gethex>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	ed2d 8b02 	vpush	{d8}
 8006c54:	b089      	sub	sp, #36	; 0x24
 8006c56:	ee08 0a10 	vmov	s16, r0
 8006c5a:	9304      	str	r3, [sp, #16]
 8006c5c:	4bb4      	ldr	r3, [pc, #720]	; (8006f30 <__gethex+0x2e4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	4618      	mov	r0, r3
 8006c64:	468b      	mov	fp, r1
 8006c66:	4690      	mov	r8, r2
 8006c68:	f7f9 fac4 	bl	80001f4 <strlen>
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	f8db 2000 	ldr.w	r2, [fp]
 8006c72:	4403      	add	r3, r0
 8006c74:	4682      	mov	sl, r0
 8006c76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006c7a:	9305      	str	r3, [sp, #20]
 8006c7c:	1c93      	adds	r3, r2, #2
 8006c7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006c82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006c86:	32fe      	adds	r2, #254	; 0xfe
 8006c88:	18d1      	adds	r1, r2, r3
 8006c8a:	461f      	mov	r7, r3
 8006c8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c90:	9100      	str	r1, [sp, #0]
 8006c92:	2830      	cmp	r0, #48	; 0x30
 8006c94:	d0f8      	beq.n	8006c88 <__gethex+0x3c>
 8006c96:	f7ff ffc3 	bl	8006c20 <__hexdig_fun>
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d13a      	bne.n	8006d16 <__gethex+0xca>
 8006ca0:	9901      	ldr	r1, [sp, #4]
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f001 fdb3 	bl	8008810 <strncmp>
 8006caa:	4605      	mov	r5, r0
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d168      	bne.n	8006d82 <__gethex+0x136>
 8006cb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006cb4:	eb07 060a 	add.w	r6, r7, sl
 8006cb8:	f7ff ffb2 	bl	8006c20 <__hexdig_fun>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d062      	beq.n	8006d86 <__gethex+0x13a>
 8006cc0:	4633      	mov	r3, r6
 8006cc2:	7818      	ldrb	r0, [r3, #0]
 8006cc4:	2830      	cmp	r0, #48	; 0x30
 8006cc6:	461f      	mov	r7, r3
 8006cc8:	f103 0301 	add.w	r3, r3, #1
 8006ccc:	d0f9      	beq.n	8006cc2 <__gethex+0x76>
 8006cce:	f7ff ffa7 	bl	8006c20 <__hexdig_fun>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	fab0 f480 	clz	r4, r0
 8006cd8:	0964      	lsrs	r4, r4, #5
 8006cda:	4635      	mov	r5, r6
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	463a      	mov	r2, r7
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	3201      	adds	r2, #1
 8006ce4:	7830      	ldrb	r0, [r6, #0]
 8006ce6:	f7ff ff9b 	bl	8006c20 <__hexdig_fun>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d1f8      	bne.n	8006ce0 <__gethex+0x94>
 8006cee:	9901      	ldr	r1, [sp, #4]
 8006cf0:	4652      	mov	r2, sl
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f001 fd8c 	bl	8008810 <strncmp>
 8006cf8:	b980      	cbnz	r0, 8006d1c <__gethex+0xd0>
 8006cfa:	b94d      	cbnz	r5, 8006d10 <__gethex+0xc4>
 8006cfc:	eb06 050a 	add.w	r5, r6, sl
 8006d00:	462a      	mov	r2, r5
 8006d02:	4616      	mov	r6, r2
 8006d04:	3201      	adds	r2, #1
 8006d06:	7830      	ldrb	r0, [r6, #0]
 8006d08:	f7ff ff8a 	bl	8006c20 <__hexdig_fun>
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d1f8      	bne.n	8006d02 <__gethex+0xb6>
 8006d10:	1bad      	subs	r5, r5, r6
 8006d12:	00ad      	lsls	r5, r5, #2
 8006d14:	e004      	b.n	8006d20 <__gethex+0xd4>
 8006d16:	2400      	movs	r4, #0
 8006d18:	4625      	mov	r5, r4
 8006d1a:	e7e0      	b.n	8006cde <__gethex+0x92>
 8006d1c:	2d00      	cmp	r5, #0
 8006d1e:	d1f7      	bne.n	8006d10 <__gethex+0xc4>
 8006d20:	7833      	ldrb	r3, [r6, #0]
 8006d22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d26:	2b50      	cmp	r3, #80	; 0x50
 8006d28:	d13b      	bne.n	8006da2 <__gethex+0x156>
 8006d2a:	7873      	ldrb	r3, [r6, #1]
 8006d2c:	2b2b      	cmp	r3, #43	; 0x2b
 8006d2e:	d02c      	beq.n	8006d8a <__gethex+0x13e>
 8006d30:	2b2d      	cmp	r3, #45	; 0x2d
 8006d32:	d02e      	beq.n	8006d92 <__gethex+0x146>
 8006d34:	1c71      	adds	r1, r6, #1
 8006d36:	f04f 0900 	mov.w	r9, #0
 8006d3a:	7808      	ldrb	r0, [r1, #0]
 8006d3c:	f7ff ff70 	bl	8006c20 <__hexdig_fun>
 8006d40:	1e43      	subs	r3, r0, #1
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b18      	cmp	r3, #24
 8006d46:	d82c      	bhi.n	8006da2 <__gethex+0x156>
 8006d48:	f1a0 0210 	sub.w	r2, r0, #16
 8006d4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d50:	f7ff ff66 	bl	8006c20 <__hexdig_fun>
 8006d54:	1e43      	subs	r3, r0, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b18      	cmp	r3, #24
 8006d5a:	d91d      	bls.n	8006d98 <__gethex+0x14c>
 8006d5c:	f1b9 0f00 	cmp.w	r9, #0
 8006d60:	d000      	beq.n	8006d64 <__gethex+0x118>
 8006d62:	4252      	negs	r2, r2
 8006d64:	4415      	add	r5, r2
 8006d66:	f8cb 1000 	str.w	r1, [fp]
 8006d6a:	b1e4      	cbz	r4, 8006da6 <__gethex+0x15a>
 8006d6c:	9b00      	ldr	r3, [sp, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bf14      	ite	ne
 8006d72:	2700      	movne	r7, #0
 8006d74:	2706      	moveq	r7, #6
 8006d76:	4638      	mov	r0, r7
 8006d78:	b009      	add	sp, #36	; 0x24
 8006d7a:	ecbd 8b02 	vpop	{d8}
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d82:	463e      	mov	r6, r7
 8006d84:	4625      	mov	r5, r4
 8006d86:	2401      	movs	r4, #1
 8006d88:	e7ca      	b.n	8006d20 <__gethex+0xd4>
 8006d8a:	f04f 0900 	mov.w	r9, #0
 8006d8e:	1cb1      	adds	r1, r6, #2
 8006d90:	e7d3      	b.n	8006d3a <__gethex+0xee>
 8006d92:	f04f 0901 	mov.w	r9, #1
 8006d96:	e7fa      	b.n	8006d8e <__gethex+0x142>
 8006d98:	230a      	movs	r3, #10
 8006d9a:	fb03 0202 	mla	r2, r3, r2, r0
 8006d9e:	3a10      	subs	r2, #16
 8006da0:	e7d4      	b.n	8006d4c <__gethex+0x100>
 8006da2:	4631      	mov	r1, r6
 8006da4:	e7df      	b.n	8006d66 <__gethex+0x11a>
 8006da6:	1bf3      	subs	r3, r6, r7
 8006da8:	3b01      	subs	r3, #1
 8006daa:	4621      	mov	r1, r4
 8006dac:	2b07      	cmp	r3, #7
 8006dae:	dc0b      	bgt.n	8006dc8 <__gethex+0x17c>
 8006db0:	ee18 0a10 	vmov	r0, s16
 8006db4:	f000 fa90 	bl	80072d8 <_Balloc>
 8006db8:	4604      	mov	r4, r0
 8006dba:	b940      	cbnz	r0, 8006dce <__gethex+0x182>
 8006dbc:	4b5d      	ldr	r3, [pc, #372]	; (8006f34 <__gethex+0x2e8>)
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	21de      	movs	r1, #222	; 0xde
 8006dc2:	485d      	ldr	r0, [pc, #372]	; (8006f38 <__gethex+0x2ec>)
 8006dc4:	f001 fdf4 	bl	80089b0 <__assert_func>
 8006dc8:	3101      	adds	r1, #1
 8006dca:	105b      	asrs	r3, r3, #1
 8006dcc:	e7ee      	b.n	8006dac <__gethex+0x160>
 8006dce:	f100 0914 	add.w	r9, r0, #20
 8006dd2:	f04f 0b00 	mov.w	fp, #0
 8006dd6:	f1ca 0301 	rsb	r3, sl, #1
 8006dda:	f8cd 9008 	str.w	r9, [sp, #8]
 8006dde:	f8cd b000 	str.w	fp, [sp]
 8006de2:	9306      	str	r3, [sp, #24]
 8006de4:	42b7      	cmp	r7, r6
 8006de6:	d340      	bcc.n	8006e6a <__gethex+0x21e>
 8006de8:	9802      	ldr	r0, [sp, #8]
 8006dea:	9b00      	ldr	r3, [sp, #0]
 8006dec:	f840 3b04 	str.w	r3, [r0], #4
 8006df0:	eba0 0009 	sub.w	r0, r0, r9
 8006df4:	1080      	asrs	r0, r0, #2
 8006df6:	0146      	lsls	r6, r0, #5
 8006df8:	6120      	str	r0, [r4, #16]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fb5e 	bl	80074bc <__hi0bits>
 8006e00:	1a30      	subs	r0, r6, r0
 8006e02:	f8d8 6000 	ldr.w	r6, [r8]
 8006e06:	42b0      	cmp	r0, r6
 8006e08:	dd63      	ble.n	8006ed2 <__gethex+0x286>
 8006e0a:	1b87      	subs	r7, r0, r6
 8006e0c:	4639      	mov	r1, r7
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 ff02 	bl	8007c18 <__any_on>
 8006e14:	4682      	mov	sl, r0
 8006e16:	b1a8      	cbz	r0, 8006e44 <__gethex+0x1f8>
 8006e18:	1e7b      	subs	r3, r7, #1
 8006e1a:	1159      	asrs	r1, r3, #5
 8006e1c:	f003 021f 	and.w	r2, r3, #31
 8006e20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006e24:	f04f 0a01 	mov.w	sl, #1
 8006e28:	fa0a f202 	lsl.w	r2, sl, r2
 8006e2c:	420a      	tst	r2, r1
 8006e2e:	d009      	beq.n	8006e44 <__gethex+0x1f8>
 8006e30:	4553      	cmp	r3, sl
 8006e32:	dd05      	ble.n	8006e40 <__gethex+0x1f4>
 8006e34:	1eb9      	subs	r1, r7, #2
 8006e36:	4620      	mov	r0, r4
 8006e38:	f000 feee 	bl	8007c18 <__any_on>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d145      	bne.n	8006ecc <__gethex+0x280>
 8006e40:	f04f 0a02 	mov.w	sl, #2
 8006e44:	4639      	mov	r1, r7
 8006e46:	4620      	mov	r0, r4
 8006e48:	f7ff fe98 	bl	8006b7c <rshift>
 8006e4c:	443d      	add	r5, r7
 8006e4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e52:	42ab      	cmp	r3, r5
 8006e54:	da4c      	bge.n	8006ef0 <__gethex+0x2a4>
 8006e56:	ee18 0a10 	vmov	r0, s16
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	f000 fa7c 	bl	8007358 <_Bfree>
 8006e60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e62:	2300      	movs	r3, #0
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	27a3      	movs	r7, #163	; 0xa3
 8006e68:	e785      	b.n	8006d76 <__gethex+0x12a>
 8006e6a:	1e73      	subs	r3, r6, #1
 8006e6c:	9a05      	ldr	r2, [sp, #20]
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d019      	beq.n	8006eac <__gethex+0x260>
 8006e78:	f1bb 0f20 	cmp.w	fp, #32
 8006e7c:	d107      	bne.n	8006e8e <__gethex+0x242>
 8006e7e:	9b02      	ldr	r3, [sp, #8]
 8006e80:	9a00      	ldr	r2, [sp, #0]
 8006e82:	f843 2b04 	str.w	r2, [r3], #4
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	469b      	mov	fp, r3
 8006e8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006e92:	f7ff fec5 	bl	8006c20 <__hexdig_fun>
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	f000 000f 	and.w	r0, r0, #15
 8006e9c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006ea0:	4303      	orrs	r3, r0
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	f10b 0b04 	add.w	fp, fp, #4
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	e00d      	b.n	8006ec8 <__gethex+0x27c>
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	9a06      	ldr	r2, [sp, #24]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	42bb      	cmp	r3, r7
 8006eb4:	d3e0      	bcc.n	8006e78 <__gethex+0x22c>
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	9901      	ldr	r1, [sp, #4]
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	4652      	mov	r2, sl
 8006ebe:	f001 fca7 	bl	8008810 <strncmp>
 8006ec2:	9b07      	ldr	r3, [sp, #28]
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d1d7      	bne.n	8006e78 <__gethex+0x22c>
 8006ec8:	461e      	mov	r6, r3
 8006eca:	e78b      	b.n	8006de4 <__gethex+0x198>
 8006ecc:	f04f 0a03 	mov.w	sl, #3
 8006ed0:	e7b8      	b.n	8006e44 <__gethex+0x1f8>
 8006ed2:	da0a      	bge.n	8006eea <__gethex+0x29e>
 8006ed4:	1a37      	subs	r7, r6, r0
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	ee18 0a10 	vmov	r0, s16
 8006edc:	463a      	mov	r2, r7
 8006ede:	f000 fc57 	bl	8007790 <__lshift>
 8006ee2:	1bed      	subs	r5, r5, r7
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	f100 0914 	add.w	r9, r0, #20
 8006eea:	f04f 0a00 	mov.w	sl, #0
 8006eee:	e7ae      	b.n	8006e4e <__gethex+0x202>
 8006ef0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ef4:	42a8      	cmp	r0, r5
 8006ef6:	dd72      	ble.n	8006fde <__gethex+0x392>
 8006ef8:	1b45      	subs	r5, r0, r5
 8006efa:	42ae      	cmp	r6, r5
 8006efc:	dc36      	bgt.n	8006f6c <__gethex+0x320>
 8006efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d02a      	beq.n	8006f5c <__gethex+0x310>
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d02c      	beq.n	8006f64 <__gethex+0x318>
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d11c      	bne.n	8006f48 <__gethex+0x2fc>
 8006f0e:	42ae      	cmp	r6, r5
 8006f10:	d11a      	bne.n	8006f48 <__gethex+0x2fc>
 8006f12:	2e01      	cmp	r6, #1
 8006f14:	d112      	bne.n	8006f3c <__gethex+0x2f0>
 8006f16:	9a04      	ldr	r2, [sp, #16]
 8006f18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	2301      	movs	r3, #1
 8006f20:	6123      	str	r3, [r4, #16]
 8006f22:	f8c9 3000 	str.w	r3, [r9]
 8006f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f28:	2762      	movs	r7, #98	; 0x62
 8006f2a:	601c      	str	r4, [r3, #0]
 8006f2c:	e723      	b.n	8006d76 <__gethex+0x12a>
 8006f2e:	bf00      	nop
 8006f30:	080099d8 	.word	0x080099d8
 8006f34:	08009960 	.word	0x08009960
 8006f38:	08009971 	.word	0x08009971
 8006f3c:	1e71      	subs	r1, r6, #1
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f000 fe6a 	bl	8007c18 <__any_on>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d1e6      	bne.n	8006f16 <__gethex+0x2ca>
 8006f48:	ee18 0a10 	vmov	r0, s16
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	f000 fa03 	bl	8007358 <_Bfree>
 8006f52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f54:	2300      	movs	r3, #0
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	2750      	movs	r7, #80	; 0x50
 8006f5a:	e70c      	b.n	8006d76 <__gethex+0x12a>
 8006f5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f2      	bne.n	8006f48 <__gethex+0x2fc>
 8006f62:	e7d8      	b.n	8006f16 <__gethex+0x2ca>
 8006f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1d5      	bne.n	8006f16 <__gethex+0x2ca>
 8006f6a:	e7ed      	b.n	8006f48 <__gethex+0x2fc>
 8006f6c:	1e6f      	subs	r7, r5, #1
 8006f6e:	f1ba 0f00 	cmp.w	sl, #0
 8006f72:	d131      	bne.n	8006fd8 <__gethex+0x38c>
 8006f74:	b127      	cbz	r7, 8006f80 <__gethex+0x334>
 8006f76:	4639      	mov	r1, r7
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fe4d 	bl	8007c18 <__any_on>
 8006f7e:	4682      	mov	sl, r0
 8006f80:	117b      	asrs	r3, r7, #5
 8006f82:	2101      	movs	r1, #1
 8006f84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006f88:	f007 071f 	and.w	r7, r7, #31
 8006f8c:	fa01 f707 	lsl.w	r7, r1, r7
 8006f90:	421f      	tst	r7, r3
 8006f92:	4629      	mov	r1, r5
 8006f94:	4620      	mov	r0, r4
 8006f96:	bf18      	it	ne
 8006f98:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f9c:	1b76      	subs	r6, r6, r5
 8006f9e:	f7ff fded 	bl	8006b7c <rshift>
 8006fa2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006fa6:	2702      	movs	r7, #2
 8006fa8:	f1ba 0f00 	cmp.w	sl, #0
 8006fac:	d048      	beq.n	8007040 <__gethex+0x3f4>
 8006fae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d015      	beq.n	8006fe2 <__gethex+0x396>
 8006fb6:	2b03      	cmp	r3, #3
 8006fb8:	d017      	beq.n	8006fea <__gethex+0x39e>
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d109      	bne.n	8006fd2 <__gethex+0x386>
 8006fbe:	f01a 0f02 	tst.w	sl, #2
 8006fc2:	d006      	beq.n	8006fd2 <__gethex+0x386>
 8006fc4:	f8d9 0000 	ldr.w	r0, [r9]
 8006fc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8006fcc:	f01a 0f01 	tst.w	sl, #1
 8006fd0:	d10e      	bne.n	8006ff0 <__gethex+0x3a4>
 8006fd2:	f047 0710 	orr.w	r7, r7, #16
 8006fd6:	e033      	b.n	8007040 <__gethex+0x3f4>
 8006fd8:	f04f 0a01 	mov.w	sl, #1
 8006fdc:	e7d0      	b.n	8006f80 <__gethex+0x334>
 8006fde:	2701      	movs	r7, #1
 8006fe0:	e7e2      	b.n	8006fa8 <__gethex+0x35c>
 8006fe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fe4:	f1c3 0301 	rsb	r3, r3, #1
 8006fe8:	9315      	str	r3, [sp, #84]	; 0x54
 8006fea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0f0      	beq.n	8006fd2 <__gethex+0x386>
 8006ff0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006ff4:	f104 0314 	add.w	r3, r4, #20
 8006ff8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006ffc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007000:	f04f 0c00 	mov.w	ip, #0
 8007004:	4618      	mov	r0, r3
 8007006:	f853 2b04 	ldr.w	r2, [r3], #4
 800700a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800700e:	d01c      	beq.n	800704a <__gethex+0x3fe>
 8007010:	3201      	adds	r2, #1
 8007012:	6002      	str	r2, [r0, #0]
 8007014:	2f02      	cmp	r7, #2
 8007016:	f104 0314 	add.w	r3, r4, #20
 800701a:	d13f      	bne.n	800709c <__gethex+0x450>
 800701c:	f8d8 2000 	ldr.w	r2, [r8]
 8007020:	3a01      	subs	r2, #1
 8007022:	42b2      	cmp	r2, r6
 8007024:	d10a      	bne.n	800703c <__gethex+0x3f0>
 8007026:	1171      	asrs	r1, r6, #5
 8007028:	2201      	movs	r2, #1
 800702a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800702e:	f006 061f 	and.w	r6, r6, #31
 8007032:	fa02 f606 	lsl.w	r6, r2, r6
 8007036:	421e      	tst	r6, r3
 8007038:	bf18      	it	ne
 800703a:	4617      	movne	r7, r2
 800703c:	f047 0720 	orr.w	r7, r7, #32
 8007040:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007042:	601c      	str	r4, [r3, #0]
 8007044:	9b04      	ldr	r3, [sp, #16]
 8007046:	601d      	str	r5, [r3, #0]
 8007048:	e695      	b.n	8006d76 <__gethex+0x12a>
 800704a:	4299      	cmp	r1, r3
 800704c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007050:	d8d8      	bhi.n	8007004 <__gethex+0x3b8>
 8007052:	68a3      	ldr	r3, [r4, #8]
 8007054:	459b      	cmp	fp, r3
 8007056:	db19      	blt.n	800708c <__gethex+0x440>
 8007058:	6861      	ldr	r1, [r4, #4]
 800705a:	ee18 0a10 	vmov	r0, s16
 800705e:	3101      	adds	r1, #1
 8007060:	f000 f93a 	bl	80072d8 <_Balloc>
 8007064:	4681      	mov	r9, r0
 8007066:	b918      	cbnz	r0, 8007070 <__gethex+0x424>
 8007068:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <__gethex+0x488>)
 800706a:	4602      	mov	r2, r0
 800706c:	2184      	movs	r1, #132	; 0x84
 800706e:	e6a8      	b.n	8006dc2 <__gethex+0x176>
 8007070:	6922      	ldr	r2, [r4, #16]
 8007072:	3202      	adds	r2, #2
 8007074:	f104 010c 	add.w	r1, r4, #12
 8007078:	0092      	lsls	r2, r2, #2
 800707a:	300c      	adds	r0, #12
 800707c:	f000 f91e 	bl	80072bc <memcpy>
 8007080:	4621      	mov	r1, r4
 8007082:	ee18 0a10 	vmov	r0, s16
 8007086:	f000 f967 	bl	8007358 <_Bfree>
 800708a:	464c      	mov	r4, r9
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007094:	6122      	str	r2, [r4, #16]
 8007096:	2201      	movs	r2, #1
 8007098:	615a      	str	r2, [r3, #20]
 800709a:	e7bb      	b.n	8007014 <__gethex+0x3c8>
 800709c:	6922      	ldr	r2, [r4, #16]
 800709e:	455a      	cmp	r2, fp
 80070a0:	dd0b      	ble.n	80070ba <__gethex+0x46e>
 80070a2:	2101      	movs	r1, #1
 80070a4:	4620      	mov	r0, r4
 80070a6:	f7ff fd69 	bl	8006b7c <rshift>
 80070aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070ae:	3501      	adds	r5, #1
 80070b0:	42ab      	cmp	r3, r5
 80070b2:	f6ff aed0 	blt.w	8006e56 <__gethex+0x20a>
 80070b6:	2701      	movs	r7, #1
 80070b8:	e7c0      	b.n	800703c <__gethex+0x3f0>
 80070ba:	f016 061f 	ands.w	r6, r6, #31
 80070be:	d0fa      	beq.n	80070b6 <__gethex+0x46a>
 80070c0:	4453      	add	r3, sl
 80070c2:	f1c6 0620 	rsb	r6, r6, #32
 80070c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80070ca:	f000 f9f7 	bl	80074bc <__hi0bits>
 80070ce:	42b0      	cmp	r0, r6
 80070d0:	dbe7      	blt.n	80070a2 <__gethex+0x456>
 80070d2:	e7f0      	b.n	80070b6 <__gethex+0x46a>
 80070d4:	08009960 	.word	0x08009960

080070d8 <L_shift>:
 80070d8:	f1c2 0208 	rsb	r2, r2, #8
 80070dc:	0092      	lsls	r2, r2, #2
 80070de:	b570      	push	{r4, r5, r6, lr}
 80070e0:	f1c2 0620 	rsb	r6, r2, #32
 80070e4:	6843      	ldr	r3, [r0, #4]
 80070e6:	6804      	ldr	r4, [r0, #0]
 80070e8:	fa03 f506 	lsl.w	r5, r3, r6
 80070ec:	432c      	orrs	r4, r5
 80070ee:	40d3      	lsrs	r3, r2
 80070f0:	6004      	str	r4, [r0, #0]
 80070f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80070f6:	4288      	cmp	r0, r1
 80070f8:	d3f4      	bcc.n	80070e4 <L_shift+0xc>
 80070fa:	bd70      	pop	{r4, r5, r6, pc}

080070fc <__match>:
 80070fc:	b530      	push	{r4, r5, lr}
 80070fe:	6803      	ldr	r3, [r0, #0]
 8007100:	3301      	adds	r3, #1
 8007102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007106:	b914      	cbnz	r4, 800710e <__match+0x12>
 8007108:	6003      	str	r3, [r0, #0]
 800710a:	2001      	movs	r0, #1
 800710c:	bd30      	pop	{r4, r5, pc}
 800710e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007112:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007116:	2d19      	cmp	r5, #25
 8007118:	bf98      	it	ls
 800711a:	3220      	addls	r2, #32
 800711c:	42a2      	cmp	r2, r4
 800711e:	d0f0      	beq.n	8007102 <__match+0x6>
 8007120:	2000      	movs	r0, #0
 8007122:	e7f3      	b.n	800710c <__match+0x10>

08007124 <__hexnan>:
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	680b      	ldr	r3, [r1, #0]
 800712a:	115e      	asrs	r6, r3, #5
 800712c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007130:	f013 031f 	ands.w	r3, r3, #31
 8007134:	b087      	sub	sp, #28
 8007136:	bf18      	it	ne
 8007138:	3604      	addne	r6, #4
 800713a:	2500      	movs	r5, #0
 800713c:	1f37      	subs	r7, r6, #4
 800713e:	4690      	mov	r8, r2
 8007140:	6802      	ldr	r2, [r0, #0]
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	4682      	mov	sl, r0
 8007146:	f846 5c04 	str.w	r5, [r6, #-4]
 800714a:	46b9      	mov	r9, r7
 800714c:	463c      	mov	r4, r7
 800714e:	9502      	str	r5, [sp, #8]
 8007150:	46ab      	mov	fp, r5
 8007152:	7851      	ldrb	r1, [r2, #1]
 8007154:	1c53      	adds	r3, r2, #1
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	b341      	cbz	r1, 80071ac <__hexnan+0x88>
 800715a:	4608      	mov	r0, r1
 800715c:	9205      	str	r2, [sp, #20]
 800715e:	9104      	str	r1, [sp, #16]
 8007160:	f7ff fd5e 	bl	8006c20 <__hexdig_fun>
 8007164:	2800      	cmp	r0, #0
 8007166:	d14f      	bne.n	8007208 <__hexnan+0xe4>
 8007168:	9904      	ldr	r1, [sp, #16]
 800716a:	9a05      	ldr	r2, [sp, #20]
 800716c:	2920      	cmp	r1, #32
 800716e:	d818      	bhi.n	80071a2 <__hexnan+0x7e>
 8007170:	9b02      	ldr	r3, [sp, #8]
 8007172:	459b      	cmp	fp, r3
 8007174:	dd13      	ble.n	800719e <__hexnan+0x7a>
 8007176:	454c      	cmp	r4, r9
 8007178:	d206      	bcs.n	8007188 <__hexnan+0x64>
 800717a:	2d07      	cmp	r5, #7
 800717c:	dc04      	bgt.n	8007188 <__hexnan+0x64>
 800717e:	462a      	mov	r2, r5
 8007180:	4649      	mov	r1, r9
 8007182:	4620      	mov	r0, r4
 8007184:	f7ff ffa8 	bl	80070d8 <L_shift>
 8007188:	4544      	cmp	r4, r8
 800718a:	d950      	bls.n	800722e <__hexnan+0x10a>
 800718c:	2300      	movs	r3, #0
 800718e:	f1a4 0904 	sub.w	r9, r4, #4
 8007192:	f844 3c04 	str.w	r3, [r4, #-4]
 8007196:	f8cd b008 	str.w	fp, [sp, #8]
 800719a:	464c      	mov	r4, r9
 800719c:	461d      	mov	r5, r3
 800719e:	9a03      	ldr	r2, [sp, #12]
 80071a0:	e7d7      	b.n	8007152 <__hexnan+0x2e>
 80071a2:	2929      	cmp	r1, #41	; 0x29
 80071a4:	d156      	bne.n	8007254 <__hexnan+0x130>
 80071a6:	3202      	adds	r2, #2
 80071a8:	f8ca 2000 	str.w	r2, [sl]
 80071ac:	f1bb 0f00 	cmp.w	fp, #0
 80071b0:	d050      	beq.n	8007254 <__hexnan+0x130>
 80071b2:	454c      	cmp	r4, r9
 80071b4:	d206      	bcs.n	80071c4 <__hexnan+0xa0>
 80071b6:	2d07      	cmp	r5, #7
 80071b8:	dc04      	bgt.n	80071c4 <__hexnan+0xa0>
 80071ba:	462a      	mov	r2, r5
 80071bc:	4649      	mov	r1, r9
 80071be:	4620      	mov	r0, r4
 80071c0:	f7ff ff8a 	bl	80070d8 <L_shift>
 80071c4:	4544      	cmp	r4, r8
 80071c6:	d934      	bls.n	8007232 <__hexnan+0x10e>
 80071c8:	f1a8 0204 	sub.w	r2, r8, #4
 80071cc:	4623      	mov	r3, r4
 80071ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80071d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80071d6:	429f      	cmp	r7, r3
 80071d8:	d2f9      	bcs.n	80071ce <__hexnan+0xaa>
 80071da:	1b3b      	subs	r3, r7, r4
 80071dc:	f023 0303 	bic.w	r3, r3, #3
 80071e0:	3304      	adds	r3, #4
 80071e2:	3401      	adds	r4, #1
 80071e4:	3e03      	subs	r6, #3
 80071e6:	42b4      	cmp	r4, r6
 80071e8:	bf88      	it	hi
 80071ea:	2304      	movhi	r3, #4
 80071ec:	4443      	add	r3, r8
 80071ee:	2200      	movs	r2, #0
 80071f0:	f843 2b04 	str.w	r2, [r3], #4
 80071f4:	429f      	cmp	r7, r3
 80071f6:	d2fb      	bcs.n	80071f0 <__hexnan+0xcc>
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	b91b      	cbnz	r3, 8007204 <__hexnan+0xe0>
 80071fc:	4547      	cmp	r7, r8
 80071fe:	d127      	bne.n	8007250 <__hexnan+0x12c>
 8007200:	2301      	movs	r3, #1
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	2005      	movs	r0, #5
 8007206:	e026      	b.n	8007256 <__hexnan+0x132>
 8007208:	3501      	adds	r5, #1
 800720a:	2d08      	cmp	r5, #8
 800720c:	f10b 0b01 	add.w	fp, fp, #1
 8007210:	dd06      	ble.n	8007220 <__hexnan+0xfc>
 8007212:	4544      	cmp	r4, r8
 8007214:	d9c3      	bls.n	800719e <__hexnan+0x7a>
 8007216:	2300      	movs	r3, #0
 8007218:	f844 3c04 	str.w	r3, [r4, #-4]
 800721c:	2501      	movs	r5, #1
 800721e:	3c04      	subs	r4, #4
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	f000 000f 	and.w	r0, r0, #15
 8007226:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800722a:	6022      	str	r2, [r4, #0]
 800722c:	e7b7      	b.n	800719e <__hexnan+0x7a>
 800722e:	2508      	movs	r5, #8
 8007230:	e7b5      	b.n	800719e <__hexnan+0x7a>
 8007232:	9b01      	ldr	r3, [sp, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0df      	beq.n	80071f8 <__hexnan+0xd4>
 8007238:	f04f 32ff 	mov.w	r2, #4294967295
 800723c:	f1c3 0320 	rsb	r3, r3, #32
 8007240:	fa22 f303 	lsr.w	r3, r2, r3
 8007244:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007248:	401a      	ands	r2, r3
 800724a:	f846 2c04 	str.w	r2, [r6, #-4]
 800724e:	e7d3      	b.n	80071f8 <__hexnan+0xd4>
 8007250:	3f04      	subs	r7, #4
 8007252:	e7d1      	b.n	80071f8 <__hexnan+0xd4>
 8007254:	2004      	movs	r0, #4
 8007256:	b007      	add	sp, #28
 8007258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800725c <_localeconv_r>:
 800725c:	4800      	ldr	r0, [pc, #0]	; (8007260 <_localeconv_r+0x4>)
 800725e:	4770      	bx	lr
 8007260:	20000164 	.word	0x20000164

08007264 <_lseek_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	; (8007284 <_lseek_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fa fc49 	bl	8001b0a <_lseek>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_lseek_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_lseek_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	20000c1c 	.word	0x20000c1c

08007288 <malloc>:
 8007288:	4b02      	ldr	r3, [pc, #8]	; (8007294 <malloc+0xc>)
 800728a:	4601      	mov	r1, r0
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	f000 bd67 	b.w	8007d60 <_malloc_r>
 8007292:	bf00      	nop
 8007294:	2000000c 	.word	0x2000000c

08007298 <__ascii_mbtowc>:
 8007298:	b082      	sub	sp, #8
 800729a:	b901      	cbnz	r1, 800729e <__ascii_mbtowc+0x6>
 800729c:	a901      	add	r1, sp, #4
 800729e:	b142      	cbz	r2, 80072b2 <__ascii_mbtowc+0x1a>
 80072a0:	b14b      	cbz	r3, 80072b6 <__ascii_mbtowc+0x1e>
 80072a2:	7813      	ldrb	r3, [r2, #0]
 80072a4:	600b      	str	r3, [r1, #0]
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	1e10      	subs	r0, r2, #0
 80072aa:	bf18      	it	ne
 80072ac:	2001      	movne	r0, #1
 80072ae:	b002      	add	sp, #8
 80072b0:	4770      	bx	lr
 80072b2:	4610      	mov	r0, r2
 80072b4:	e7fb      	b.n	80072ae <__ascii_mbtowc+0x16>
 80072b6:	f06f 0001 	mvn.w	r0, #1
 80072ba:	e7f8      	b.n	80072ae <__ascii_mbtowc+0x16>

080072bc <memcpy>:
 80072bc:	440a      	add	r2, r1
 80072be:	4291      	cmp	r1, r2
 80072c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072c4:	d100      	bne.n	80072c8 <memcpy+0xc>
 80072c6:	4770      	bx	lr
 80072c8:	b510      	push	{r4, lr}
 80072ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072d2:	4291      	cmp	r1, r2
 80072d4:	d1f9      	bne.n	80072ca <memcpy+0xe>
 80072d6:	bd10      	pop	{r4, pc}

080072d8 <_Balloc>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072dc:	4604      	mov	r4, r0
 80072de:	460d      	mov	r5, r1
 80072e0:	b976      	cbnz	r6, 8007300 <_Balloc+0x28>
 80072e2:	2010      	movs	r0, #16
 80072e4:	f7ff ffd0 	bl	8007288 <malloc>
 80072e8:	4602      	mov	r2, r0
 80072ea:	6260      	str	r0, [r4, #36]	; 0x24
 80072ec:	b920      	cbnz	r0, 80072f8 <_Balloc+0x20>
 80072ee:	4b18      	ldr	r3, [pc, #96]	; (8007350 <_Balloc+0x78>)
 80072f0:	4818      	ldr	r0, [pc, #96]	; (8007354 <_Balloc+0x7c>)
 80072f2:	2166      	movs	r1, #102	; 0x66
 80072f4:	f001 fb5c 	bl	80089b0 <__assert_func>
 80072f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072fc:	6006      	str	r6, [r0, #0]
 80072fe:	60c6      	str	r6, [r0, #12]
 8007300:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007302:	68f3      	ldr	r3, [r6, #12]
 8007304:	b183      	cbz	r3, 8007328 <_Balloc+0x50>
 8007306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800730e:	b9b8      	cbnz	r0, 8007340 <_Balloc+0x68>
 8007310:	2101      	movs	r1, #1
 8007312:	fa01 f605 	lsl.w	r6, r1, r5
 8007316:	1d72      	adds	r2, r6, #5
 8007318:	0092      	lsls	r2, r2, #2
 800731a:	4620      	mov	r0, r4
 800731c:	f000 fc9d 	bl	8007c5a <_calloc_r>
 8007320:	b160      	cbz	r0, 800733c <_Balloc+0x64>
 8007322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007326:	e00e      	b.n	8007346 <_Balloc+0x6e>
 8007328:	2221      	movs	r2, #33	; 0x21
 800732a:	2104      	movs	r1, #4
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fc94 	bl	8007c5a <_calloc_r>
 8007332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007334:	60f0      	str	r0, [r6, #12]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e4      	bne.n	8007306 <_Balloc+0x2e>
 800733c:	2000      	movs	r0, #0
 800733e:	bd70      	pop	{r4, r5, r6, pc}
 8007340:	6802      	ldr	r2, [r0, #0]
 8007342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007346:	2300      	movs	r3, #0
 8007348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800734c:	e7f7      	b.n	800733e <_Balloc+0x66>
 800734e:	bf00      	nop
 8007350:	080098ee 	.word	0x080098ee
 8007354:	080099ec 	.word	0x080099ec

08007358 <_Bfree>:
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800735c:	4605      	mov	r5, r0
 800735e:	460c      	mov	r4, r1
 8007360:	b976      	cbnz	r6, 8007380 <_Bfree+0x28>
 8007362:	2010      	movs	r0, #16
 8007364:	f7ff ff90 	bl	8007288 <malloc>
 8007368:	4602      	mov	r2, r0
 800736a:	6268      	str	r0, [r5, #36]	; 0x24
 800736c:	b920      	cbnz	r0, 8007378 <_Bfree+0x20>
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <_Bfree+0x3c>)
 8007370:	4809      	ldr	r0, [pc, #36]	; (8007398 <_Bfree+0x40>)
 8007372:	218a      	movs	r1, #138	; 0x8a
 8007374:	f001 fb1c 	bl	80089b0 <__assert_func>
 8007378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800737c:	6006      	str	r6, [r0, #0]
 800737e:	60c6      	str	r6, [r0, #12]
 8007380:	b13c      	cbz	r4, 8007392 <_Bfree+0x3a>
 8007382:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007384:	6862      	ldr	r2, [r4, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800738c:	6021      	str	r1, [r4, #0]
 800738e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	080098ee 	.word	0x080098ee
 8007398:	080099ec 	.word	0x080099ec

0800739c <__multadd>:
 800739c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a0:	690d      	ldr	r5, [r1, #16]
 80073a2:	4607      	mov	r7, r0
 80073a4:	460c      	mov	r4, r1
 80073a6:	461e      	mov	r6, r3
 80073a8:	f101 0c14 	add.w	ip, r1, #20
 80073ac:	2000      	movs	r0, #0
 80073ae:	f8dc 3000 	ldr.w	r3, [ip]
 80073b2:	b299      	uxth	r1, r3
 80073b4:	fb02 6101 	mla	r1, r2, r1, r6
 80073b8:	0c1e      	lsrs	r6, r3, #16
 80073ba:	0c0b      	lsrs	r3, r1, #16
 80073bc:	fb02 3306 	mla	r3, r2, r6, r3
 80073c0:	b289      	uxth	r1, r1
 80073c2:	3001      	adds	r0, #1
 80073c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073c8:	4285      	cmp	r5, r0
 80073ca:	f84c 1b04 	str.w	r1, [ip], #4
 80073ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073d2:	dcec      	bgt.n	80073ae <__multadd+0x12>
 80073d4:	b30e      	cbz	r6, 800741a <__multadd+0x7e>
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	42ab      	cmp	r3, r5
 80073da:	dc19      	bgt.n	8007410 <__multadd+0x74>
 80073dc:	6861      	ldr	r1, [r4, #4]
 80073de:	4638      	mov	r0, r7
 80073e0:	3101      	adds	r1, #1
 80073e2:	f7ff ff79 	bl	80072d8 <_Balloc>
 80073e6:	4680      	mov	r8, r0
 80073e8:	b928      	cbnz	r0, 80073f6 <__multadd+0x5a>
 80073ea:	4602      	mov	r2, r0
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <__multadd+0x84>)
 80073ee:	480d      	ldr	r0, [pc, #52]	; (8007424 <__multadd+0x88>)
 80073f0:	21b5      	movs	r1, #181	; 0xb5
 80073f2:	f001 fadd 	bl	80089b0 <__assert_func>
 80073f6:	6922      	ldr	r2, [r4, #16]
 80073f8:	3202      	adds	r2, #2
 80073fa:	f104 010c 	add.w	r1, r4, #12
 80073fe:	0092      	lsls	r2, r2, #2
 8007400:	300c      	adds	r0, #12
 8007402:	f7ff ff5b 	bl	80072bc <memcpy>
 8007406:	4621      	mov	r1, r4
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff ffa5 	bl	8007358 <_Bfree>
 800740e:	4644      	mov	r4, r8
 8007410:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007414:	3501      	adds	r5, #1
 8007416:	615e      	str	r6, [r3, #20]
 8007418:	6125      	str	r5, [r4, #16]
 800741a:	4620      	mov	r0, r4
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	08009960 	.word	0x08009960
 8007424:	080099ec 	.word	0x080099ec

08007428 <__s2b>:
 8007428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800742c:	460c      	mov	r4, r1
 800742e:	4615      	mov	r5, r2
 8007430:	461f      	mov	r7, r3
 8007432:	2209      	movs	r2, #9
 8007434:	3308      	adds	r3, #8
 8007436:	4606      	mov	r6, r0
 8007438:	fb93 f3f2 	sdiv	r3, r3, r2
 800743c:	2100      	movs	r1, #0
 800743e:	2201      	movs	r2, #1
 8007440:	429a      	cmp	r2, r3
 8007442:	db09      	blt.n	8007458 <__s2b+0x30>
 8007444:	4630      	mov	r0, r6
 8007446:	f7ff ff47 	bl	80072d8 <_Balloc>
 800744a:	b940      	cbnz	r0, 800745e <__s2b+0x36>
 800744c:	4602      	mov	r2, r0
 800744e:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <__s2b+0x8c>)
 8007450:	4819      	ldr	r0, [pc, #100]	; (80074b8 <__s2b+0x90>)
 8007452:	21ce      	movs	r1, #206	; 0xce
 8007454:	f001 faac 	bl	80089b0 <__assert_func>
 8007458:	0052      	lsls	r2, r2, #1
 800745a:	3101      	adds	r1, #1
 800745c:	e7f0      	b.n	8007440 <__s2b+0x18>
 800745e:	9b08      	ldr	r3, [sp, #32]
 8007460:	6143      	str	r3, [r0, #20]
 8007462:	2d09      	cmp	r5, #9
 8007464:	f04f 0301 	mov.w	r3, #1
 8007468:	6103      	str	r3, [r0, #16]
 800746a:	dd16      	ble.n	800749a <__s2b+0x72>
 800746c:	f104 0909 	add.w	r9, r4, #9
 8007470:	46c8      	mov	r8, r9
 8007472:	442c      	add	r4, r5
 8007474:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007478:	4601      	mov	r1, r0
 800747a:	3b30      	subs	r3, #48	; 0x30
 800747c:	220a      	movs	r2, #10
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff ff8c 	bl	800739c <__multadd>
 8007484:	45a0      	cmp	r8, r4
 8007486:	d1f5      	bne.n	8007474 <__s2b+0x4c>
 8007488:	f1a5 0408 	sub.w	r4, r5, #8
 800748c:	444c      	add	r4, r9
 800748e:	1b2d      	subs	r5, r5, r4
 8007490:	1963      	adds	r3, r4, r5
 8007492:	42bb      	cmp	r3, r7
 8007494:	db04      	blt.n	80074a0 <__s2b+0x78>
 8007496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749a:	340a      	adds	r4, #10
 800749c:	2509      	movs	r5, #9
 800749e:	e7f6      	b.n	800748e <__s2b+0x66>
 80074a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074a4:	4601      	mov	r1, r0
 80074a6:	3b30      	subs	r3, #48	; 0x30
 80074a8:	220a      	movs	r2, #10
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff ff76 	bl	800739c <__multadd>
 80074b0:	e7ee      	b.n	8007490 <__s2b+0x68>
 80074b2:	bf00      	nop
 80074b4:	08009960 	.word	0x08009960
 80074b8:	080099ec 	.word	0x080099ec

080074bc <__hi0bits>:
 80074bc:	0c03      	lsrs	r3, r0, #16
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	b9d3      	cbnz	r3, 80074f8 <__hi0bits+0x3c>
 80074c2:	0400      	lsls	r0, r0, #16
 80074c4:	2310      	movs	r3, #16
 80074c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80074ca:	bf04      	itt	eq
 80074cc:	0200      	lsleq	r0, r0, #8
 80074ce:	3308      	addeq	r3, #8
 80074d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80074d4:	bf04      	itt	eq
 80074d6:	0100      	lsleq	r0, r0, #4
 80074d8:	3304      	addeq	r3, #4
 80074da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80074de:	bf04      	itt	eq
 80074e0:	0080      	lsleq	r0, r0, #2
 80074e2:	3302      	addeq	r3, #2
 80074e4:	2800      	cmp	r0, #0
 80074e6:	db05      	blt.n	80074f4 <__hi0bits+0x38>
 80074e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074ec:	f103 0301 	add.w	r3, r3, #1
 80074f0:	bf08      	it	eq
 80074f2:	2320      	moveq	r3, #32
 80074f4:	4618      	mov	r0, r3
 80074f6:	4770      	bx	lr
 80074f8:	2300      	movs	r3, #0
 80074fa:	e7e4      	b.n	80074c6 <__hi0bits+0xa>

080074fc <__lo0bits>:
 80074fc:	6803      	ldr	r3, [r0, #0]
 80074fe:	f013 0207 	ands.w	r2, r3, #7
 8007502:	4601      	mov	r1, r0
 8007504:	d00b      	beq.n	800751e <__lo0bits+0x22>
 8007506:	07da      	lsls	r2, r3, #31
 8007508:	d423      	bmi.n	8007552 <__lo0bits+0x56>
 800750a:	0798      	lsls	r0, r3, #30
 800750c:	bf49      	itett	mi
 800750e:	085b      	lsrmi	r3, r3, #1
 8007510:	089b      	lsrpl	r3, r3, #2
 8007512:	2001      	movmi	r0, #1
 8007514:	600b      	strmi	r3, [r1, #0]
 8007516:	bf5c      	itt	pl
 8007518:	600b      	strpl	r3, [r1, #0]
 800751a:	2002      	movpl	r0, #2
 800751c:	4770      	bx	lr
 800751e:	b298      	uxth	r0, r3
 8007520:	b9a8      	cbnz	r0, 800754e <__lo0bits+0x52>
 8007522:	0c1b      	lsrs	r3, r3, #16
 8007524:	2010      	movs	r0, #16
 8007526:	b2da      	uxtb	r2, r3
 8007528:	b90a      	cbnz	r2, 800752e <__lo0bits+0x32>
 800752a:	3008      	adds	r0, #8
 800752c:	0a1b      	lsrs	r3, r3, #8
 800752e:	071a      	lsls	r2, r3, #28
 8007530:	bf04      	itt	eq
 8007532:	091b      	lsreq	r3, r3, #4
 8007534:	3004      	addeq	r0, #4
 8007536:	079a      	lsls	r2, r3, #30
 8007538:	bf04      	itt	eq
 800753a:	089b      	lsreq	r3, r3, #2
 800753c:	3002      	addeq	r0, #2
 800753e:	07da      	lsls	r2, r3, #31
 8007540:	d403      	bmi.n	800754a <__lo0bits+0x4e>
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	f100 0001 	add.w	r0, r0, #1
 8007548:	d005      	beq.n	8007556 <__lo0bits+0x5a>
 800754a:	600b      	str	r3, [r1, #0]
 800754c:	4770      	bx	lr
 800754e:	4610      	mov	r0, r2
 8007550:	e7e9      	b.n	8007526 <__lo0bits+0x2a>
 8007552:	2000      	movs	r0, #0
 8007554:	4770      	bx	lr
 8007556:	2020      	movs	r0, #32
 8007558:	4770      	bx	lr
	...

0800755c <__i2b>:
 800755c:	b510      	push	{r4, lr}
 800755e:	460c      	mov	r4, r1
 8007560:	2101      	movs	r1, #1
 8007562:	f7ff feb9 	bl	80072d8 <_Balloc>
 8007566:	4602      	mov	r2, r0
 8007568:	b928      	cbnz	r0, 8007576 <__i2b+0x1a>
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <__i2b+0x24>)
 800756c:	4805      	ldr	r0, [pc, #20]	; (8007584 <__i2b+0x28>)
 800756e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007572:	f001 fa1d 	bl	80089b0 <__assert_func>
 8007576:	2301      	movs	r3, #1
 8007578:	6144      	str	r4, [r0, #20]
 800757a:	6103      	str	r3, [r0, #16]
 800757c:	bd10      	pop	{r4, pc}
 800757e:	bf00      	nop
 8007580:	08009960 	.word	0x08009960
 8007584:	080099ec 	.word	0x080099ec

08007588 <__multiply>:
 8007588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758c:	4691      	mov	r9, r2
 800758e:	690a      	ldr	r2, [r1, #16]
 8007590:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007594:	429a      	cmp	r2, r3
 8007596:	bfb8      	it	lt
 8007598:	460b      	movlt	r3, r1
 800759a:	460c      	mov	r4, r1
 800759c:	bfbc      	itt	lt
 800759e:	464c      	movlt	r4, r9
 80075a0:	4699      	movlt	r9, r3
 80075a2:	6927      	ldr	r7, [r4, #16]
 80075a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80075a8:	68a3      	ldr	r3, [r4, #8]
 80075aa:	6861      	ldr	r1, [r4, #4]
 80075ac:	eb07 060a 	add.w	r6, r7, sl
 80075b0:	42b3      	cmp	r3, r6
 80075b2:	b085      	sub	sp, #20
 80075b4:	bfb8      	it	lt
 80075b6:	3101      	addlt	r1, #1
 80075b8:	f7ff fe8e 	bl	80072d8 <_Balloc>
 80075bc:	b930      	cbnz	r0, 80075cc <__multiply+0x44>
 80075be:	4602      	mov	r2, r0
 80075c0:	4b44      	ldr	r3, [pc, #272]	; (80076d4 <__multiply+0x14c>)
 80075c2:	4845      	ldr	r0, [pc, #276]	; (80076d8 <__multiply+0x150>)
 80075c4:	f240 115d 	movw	r1, #349	; 0x15d
 80075c8:	f001 f9f2 	bl	80089b0 <__assert_func>
 80075cc:	f100 0514 	add.w	r5, r0, #20
 80075d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80075d4:	462b      	mov	r3, r5
 80075d6:	2200      	movs	r2, #0
 80075d8:	4543      	cmp	r3, r8
 80075da:	d321      	bcc.n	8007620 <__multiply+0x98>
 80075dc:	f104 0314 	add.w	r3, r4, #20
 80075e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80075e4:	f109 0314 	add.w	r3, r9, #20
 80075e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	1b3a      	subs	r2, r7, r4
 80075f0:	3a15      	subs	r2, #21
 80075f2:	f022 0203 	bic.w	r2, r2, #3
 80075f6:	3204      	adds	r2, #4
 80075f8:	f104 0115 	add.w	r1, r4, #21
 80075fc:	428f      	cmp	r7, r1
 80075fe:	bf38      	it	cc
 8007600:	2204      	movcc	r2, #4
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	9a02      	ldr	r2, [sp, #8]
 8007606:	9303      	str	r3, [sp, #12]
 8007608:	429a      	cmp	r2, r3
 800760a:	d80c      	bhi.n	8007626 <__multiply+0x9e>
 800760c:	2e00      	cmp	r6, #0
 800760e:	dd03      	ble.n	8007618 <__multiply+0x90>
 8007610:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007614:	2b00      	cmp	r3, #0
 8007616:	d05a      	beq.n	80076ce <__multiply+0x146>
 8007618:	6106      	str	r6, [r0, #16]
 800761a:	b005      	add	sp, #20
 800761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007620:	f843 2b04 	str.w	r2, [r3], #4
 8007624:	e7d8      	b.n	80075d8 <__multiply+0x50>
 8007626:	f8b3 a000 	ldrh.w	sl, [r3]
 800762a:	f1ba 0f00 	cmp.w	sl, #0
 800762e:	d024      	beq.n	800767a <__multiply+0xf2>
 8007630:	f104 0e14 	add.w	lr, r4, #20
 8007634:	46a9      	mov	r9, r5
 8007636:	f04f 0c00 	mov.w	ip, #0
 800763a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800763e:	f8d9 1000 	ldr.w	r1, [r9]
 8007642:	fa1f fb82 	uxth.w	fp, r2
 8007646:	b289      	uxth	r1, r1
 8007648:	fb0a 110b 	mla	r1, sl, fp, r1
 800764c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007650:	f8d9 2000 	ldr.w	r2, [r9]
 8007654:	4461      	add	r1, ip
 8007656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800765a:	fb0a c20b 	mla	r2, sl, fp, ip
 800765e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007662:	b289      	uxth	r1, r1
 8007664:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007668:	4577      	cmp	r7, lr
 800766a:	f849 1b04 	str.w	r1, [r9], #4
 800766e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007672:	d8e2      	bhi.n	800763a <__multiply+0xb2>
 8007674:	9a01      	ldr	r2, [sp, #4]
 8007676:	f845 c002 	str.w	ip, [r5, r2]
 800767a:	9a03      	ldr	r2, [sp, #12]
 800767c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007680:	3304      	adds	r3, #4
 8007682:	f1b9 0f00 	cmp.w	r9, #0
 8007686:	d020      	beq.n	80076ca <__multiply+0x142>
 8007688:	6829      	ldr	r1, [r5, #0]
 800768a:	f104 0c14 	add.w	ip, r4, #20
 800768e:	46ae      	mov	lr, r5
 8007690:	f04f 0a00 	mov.w	sl, #0
 8007694:	f8bc b000 	ldrh.w	fp, [ip]
 8007698:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800769c:	fb09 220b 	mla	r2, r9, fp, r2
 80076a0:	4492      	add	sl, r2
 80076a2:	b289      	uxth	r1, r1
 80076a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80076a8:	f84e 1b04 	str.w	r1, [lr], #4
 80076ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80076b0:	f8be 1000 	ldrh.w	r1, [lr]
 80076b4:	0c12      	lsrs	r2, r2, #16
 80076b6:	fb09 1102 	mla	r1, r9, r2, r1
 80076ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80076be:	4567      	cmp	r7, ip
 80076c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80076c4:	d8e6      	bhi.n	8007694 <__multiply+0x10c>
 80076c6:	9a01      	ldr	r2, [sp, #4]
 80076c8:	50a9      	str	r1, [r5, r2]
 80076ca:	3504      	adds	r5, #4
 80076cc:	e79a      	b.n	8007604 <__multiply+0x7c>
 80076ce:	3e01      	subs	r6, #1
 80076d0:	e79c      	b.n	800760c <__multiply+0x84>
 80076d2:	bf00      	nop
 80076d4:	08009960 	.word	0x08009960
 80076d8:	080099ec 	.word	0x080099ec

080076dc <__pow5mult>:
 80076dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e0:	4615      	mov	r5, r2
 80076e2:	f012 0203 	ands.w	r2, r2, #3
 80076e6:	4606      	mov	r6, r0
 80076e8:	460f      	mov	r7, r1
 80076ea:	d007      	beq.n	80076fc <__pow5mult+0x20>
 80076ec:	4c25      	ldr	r4, [pc, #148]	; (8007784 <__pow5mult+0xa8>)
 80076ee:	3a01      	subs	r2, #1
 80076f0:	2300      	movs	r3, #0
 80076f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076f6:	f7ff fe51 	bl	800739c <__multadd>
 80076fa:	4607      	mov	r7, r0
 80076fc:	10ad      	asrs	r5, r5, #2
 80076fe:	d03d      	beq.n	800777c <__pow5mult+0xa0>
 8007700:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007702:	b97c      	cbnz	r4, 8007724 <__pow5mult+0x48>
 8007704:	2010      	movs	r0, #16
 8007706:	f7ff fdbf 	bl	8007288 <malloc>
 800770a:	4602      	mov	r2, r0
 800770c:	6270      	str	r0, [r6, #36]	; 0x24
 800770e:	b928      	cbnz	r0, 800771c <__pow5mult+0x40>
 8007710:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <__pow5mult+0xac>)
 8007712:	481e      	ldr	r0, [pc, #120]	; (800778c <__pow5mult+0xb0>)
 8007714:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007718:	f001 f94a 	bl	80089b0 <__assert_func>
 800771c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007720:	6004      	str	r4, [r0, #0]
 8007722:	60c4      	str	r4, [r0, #12]
 8007724:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800772c:	b94c      	cbnz	r4, 8007742 <__pow5mult+0x66>
 800772e:	f240 2171 	movw	r1, #625	; 0x271
 8007732:	4630      	mov	r0, r6
 8007734:	f7ff ff12 	bl	800755c <__i2b>
 8007738:	2300      	movs	r3, #0
 800773a:	f8c8 0008 	str.w	r0, [r8, #8]
 800773e:	4604      	mov	r4, r0
 8007740:	6003      	str	r3, [r0, #0]
 8007742:	f04f 0900 	mov.w	r9, #0
 8007746:	07eb      	lsls	r3, r5, #31
 8007748:	d50a      	bpl.n	8007760 <__pow5mult+0x84>
 800774a:	4639      	mov	r1, r7
 800774c:	4622      	mov	r2, r4
 800774e:	4630      	mov	r0, r6
 8007750:	f7ff ff1a 	bl	8007588 <__multiply>
 8007754:	4639      	mov	r1, r7
 8007756:	4680      	mov	r8, r0
 8007758:	4630      	mov	r0, r6
 800775a:	f7ff fdfd 	bl	8007358 <_Bfree>
 800775e:	4647      	mov	r7, r8
 8007760:	106d      	asrs	r5, r5, #1
 8007762:	d00b      	beq.n	800777c <__pow5mult+0xa0>
 8007764:	6820      	ldr	r0, [r4, #0]
 8007766:	b938      	cbnz	r0, 8007778 <__pow5mult+0x9c>
 8007768:	4622      	mov	r2, r4
 800776a:	4621      	mov	r1, r4
 800776c:	4630      	mov	r0, r6
 800776e:	f7ff ff0b 	bl	8007588 <__multiply>
 8007772:	6020      	str	r0, [r4, #0]
 8007774:	f8c0 9000 	str.w	r9, [r0]
 8007778:	4604      	mov	r4, r0
 800777a:	e7e4      	b.n	8007746 <__pow5mult+0x6a>
 800777c:	4638      	mov	r0, r7
 800777e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007782:	bf00      	nop
 8007784:	08009b38 	.word	0x08009b38
 8007788:	080098ee 	.word	0x080098ee
 800778c:	080099ec 	.word	0x080099ec

08007790 <__lshift>:
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	460c      	mov	r4, r1
 8007796:	6849      	ldr	r1, [r1, #4]
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800779e:	68a3      	ldr	r3, [r4, #8]
 80077a0:	4607      	mov	r7, r0
 80077a2:	4691      	mov	r9, r2
 80077a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077a8:	f108 0601 	add.w	r6, r8, #1
 80077ac:	42b3      	cmp	r3, r6
 80077ae:	db0b      	blt.n	80077c8 <__lshift+0x38>
 80077b0:	4638      	mov	r0, r7
 80077b2:	f7ff fd91 	bl	80072d8 <_Balloc>
 80077b6:	4605      	mov	r5, r0
 80077b8:	b948      	cbnz	r0, 80077ce <__lshift+0x3e>
 80077ba:	4602      	mov	r2, r0
 80077bc:	4b2a      	ldr	r3, [pc, #168]	; (8007868 <__lshift+0xd8>)
 80077be:	482b      	ldr	r0, [pc, #172]	; (800786c <__lshift+0xdc>)
 80077c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80077c4:	f001 f8f4 	bl	80089b0 <__assert_func>
 80077c8:	3101      	adds	r1, #1
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	e7ee      	b.n	80077ac <__lshift+0x1c>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f100 0114 	add.w	r1, r0, #20
 80077d4:	f100 0210 	add.w	r2, r0, #16
 80077d8:	4618      	mov	r0, r3
 80077da:	4553      	cmp	r3, sl
 80077dc:	db37      	blt.n	800784e <__lshift+0xbe>
 80077de:	6920      	ldr	r0, [r4, #16]
 80077e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077e4:	f104 0314 	add.w	r3, r4, #20
 80077e8:	f019 091f 	ands.w	r9, r9, #31
 80077ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80077f4:	d02f      	beq.n	8007856 <__lshift+0xc6>
 80077f6:	f1c9 0e20 	rsb	lr, r9, #32
 80077fa:	468a      	mov	sl, r1
 80077fc:	f04f 0c00 	mov.w	ip, #0
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	fa02 f209 	lsl.w	r2, r2, r9
 8007806:	ea42 020c 	orr.w	r2, r2, ip
 800780a:	f84a 2b04 	str.w	r2, [sl], #4
 800780e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007812:	4298      	cmp	r0, r3
 8007814:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007818:	d8f2      	bhi.n	8007800 <__lshift+0x70>
 800781a:	1b03      	subs	r3, r0, r4
 800781c:	3b15      	subs	r3, #21
 800781e:	f023 0303 	bic.w	r3, r3, #3
 8007822:	3304      	adds	r3, #4
 8007824:	f104 0215 	add.w	r2, r4, #21
 8007828:	4290      	cmp	r0, r2
 800782a:	bf38      	it	cc
 800782c:	2304      	movcc	r3, #4
 800782e:	f841 c003 	str.w	ip, [r1, r3]
 8007832:	f1bc 0f00 	cmp.w	ip, #0
 8007836:	d001      	beq.n	800783c <__lshift+0xac>
 8007838:	f108 0602 	add.w	r6, r8, #2
 800783c:	3e01      	subs	r6, #1
 800783e:	4638      	mov	r0, r7
 8007840:	612e      	str	r6, [r5, #16]
 8007842:	4621      	mov	r1, r4
 8007844:	f7ff fd88 	bl	8007358 <_Bfree>
 8007848:	4628      	mov	r0, r5
 800784a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007852:	3301      	adds	r3, #1
 8007854:	e7c1      	b.n	80077da <__lshift+0x4a>
 8007856:	3904      	subs	r1, #4
 8007858:	f853 2b04 	ldr.w	r2, [r3], #4
 800785c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007860:	4298      	cmp	r0, r3
 8007862:	d8f9      	bhi.n	8007858 <__lshift+0xc8>
 8007864:	e7ea      	b.n	800783c <__lshift+0xac>
 8007866:	bf00      	nop
 8007868:	08009960 	.word	0x08009960
 800786c:	080099ec 	.word	0x080099ec

08007870 <__mcmp>:
 8007870:	b530      	push	{r4, r5, lr}
 8007872:	6902      	ldr	r2, [r0, #16]
 8007874:	690c      	ldr	r4, [r1, #16]
 8007876:	1b12      	subs	r2, r2, r4
 8007878:	d10e      	bne.n	8007898 <__mcmp+0x28>
 800787a:	f100 0314 	add.w	r3, r0, #20
 800787e:	3114      	adds	r1, #20
 8007880:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007884:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007888:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800788c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007890:	42a5      	cmp	r5, r4
 8007892:	d003      	beq.n	800789c <__mcmp+0x2c>
 8007894:	d305      	bcc.n	80078a2 <__mcmp+0x32>
 8007896:	2201      	movs	r2, #1
 8007898:	4610      	mov	r0, r2
 800789a:	bd30      	pop	{r4, r5, pc}
 800789c:	4283      	cmp	r3, r0
 800789e:	d3f3      	bcc.n	8007888 <__mcmp+0x18>
 80078a0:	e7fa      	b.n	8007898 <__mcmp+0x28>
 80078a2:	f04f 32ff 	mov.w	r2, #4294967295
 80078a6:	e7f7      	b.n	8007898 <__mcmp+0x28>

080078a8 <__mdiff>:
 80078a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	4606      	mov	r6, r0
 80078b0:	4611      	mov	r1, r2
 80078b2:	4620      	mov	r0, r4
 80078b4:	4690      	mov	r8, r2
 80078b6:	f7ff ffdb 	bl	8007870 <__mcmp>
 80078ba:	1e05      	subs	r5, r0, #0
 80078bc:	d110      	bne.n	80078e0 <__mdiff+0x38>
 80078be:	4629      	mov	r1, r5
 80078c0:	4630      	mov	r0, r6
 80078c2:	f7ff fd09 	bl	80072d8 <_Balloc>
 80078c6:	b930      	cbnz	r0, 80078d6 <__mdiff+0x2e>
 80078c8:	4b3a      	ldr	r3, [pc, #232]	; (80079b4 <__mdiff+0x10c>)
 80078ca:	4602      	mov	r2, r0
 80078cc:	f240 2132 	movw	r1, #562	; 0x232
 80078d0:	4839      	ldr	r0, [pc, #228]	; (80079b8 <__mdiff+0x110>)
 80078d2:	f001 f86d 	bl	80089b0 <__assert_func>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80078dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e0:	bfa4      	itt	ge
 80078e2:	4643      	movge	r3, r8
 80078e4:	46a0      	movge	r8, r4
 80078e6:	4630      	mov	r0, r6
 80078e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80078ec:	bfa6      	itte	ge
 80078ee:	461c      	movge	r4, r3
 80078f0:	2500      	movge	r5, #0
 80078f2:	2501      	movlt	r5, #1
 80078f4:	f7ff fcf0 	bl	80072d8 <_Balloc>
 80078f8:	b920      	cbnz	r0, 8007904 <__mdiff+0x5c>
 80078fa:	4b2e      	ldr	r3, [pc, #184]	; (80079b4 <__mdiff+0x10c>)
 80078fc:	4602      	mov	r2, r0
 80078fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007902:	e7e5      	b.n	80078d0 <__mdiff+0x28>
 8007904:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007908:	6926      	ldr	r6, [r4, #16]
 800790a:	60c5      	str	r5, [r0, #12]
 800790c:	f104 0914 	add.w	r9, r4, #20
 8007910:	f108 0514 	add.w	r5, r8, #20
 8007914:	f100 0e14 	add.w	lr, r0, #20
 8007918:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800791c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007920:	f108 0210 	add.w	r2, r8, #16
 8007924:	46f2      	mov	sl, lr
 8007926:	2100      	movs	r1, #0
 8007928:	f859 3b04 	ldr.w	r3, [r9], #4
 800792c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007930:	fa1f f883 	uxth.w	r8, r3
 8007934:	fa11 f18b 	uxtah	r1, r1, fp
 8007938:	0c1b      	lsrs	r3, r3, #16
 800793a:	eba1 0808 	sub.w	r8, r1, r8
 800793e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007942:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007946:	fa1f f888 	uxth.w	r8, r8
 800794a:	1419      	asrs	r1, r3, #16
 800794c:	454e      	cmp	r6, r9
 800794e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007952:	f84a 3b04 	str.w	r3, [sl], #4
 8007956:	d8e7      	bhi.n	8007928 <__mdiff+0x80>
 8007958:	1b33      	subs	r3, r6, r4
 800795a:	3b15      	subs	r3, #21
 800795c:	f023 0303 	bic.w	r3, r3, #3
 8007960:	3304      	adds	r3, #4
 8007962:	3415      	adds	r4, #21
 8007964:	42a6      	cmp	r6, r4
 8007966:	bf38      	it	cc
 8007968:	2304      	movcc	r3, #4
 800796a:	441d      	add	r5, r3
 800796c:	4473      	add	r3, lr
 800796e:	469e      	mov	lr, r3
 8007970:	462e      	mov	r6, r5
 8007972:	4566      	cmp	r6, ip
 8007974:	d30e      	bcc.n	8007994 <__mdiff+0xec>
 8007976:	f10c 0203 	add.w	r2, ip, #3
 800797a:	1b52      	subs	r2, r2, r5
 800797c:	f022 0203 	bic.w	r2, r2, #3
 8007980:	3d03      	subs	r5, #3
 8007982:	45ac      	cmp	ip, r5
 8007984:	bf38      	it	cc
 8007986:	2200      	movcc	r2, #0
 8007988:	441a      	add	r2, r3
 800798a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800798e:	b17b      	cbz	r3, 80079b0 <__mdiff+0x108>
 8007990:	6107      	str	r7, [r0, #16]
 8007992:	e7a3      	b.n	80078dc <__mdiff+0x34>
 8007994:	f856 8b04 	ldr.w	r8, [r6], #4
 8007998:	fa11 f288 	uxtah	r2, r1, r8
 800799c:	1414      	asrs	r4, r2, #16
 800799e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80079a2:	b292      	uxth	r2, r2
 80079a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80079a8:	f84e 2b04 	str.w	r2, [lr], #4
 80079ac:	1421      	asrs	r1, r4, #16
 80079ae:	e7e0      	b.n	8007972 <__mdiff+0xca>
 80079b0:	3f01      	subs	r7, #1
 80079b2:	e7ea      	b.n	800798a <__mdiff+0xe2>
 80079b4:	08009960 	.word	0x08009960
 80079b8:	080099ec 	.word	0x080099ec

080079bc <__ulp>:
 80079bc:	b082      	sub	sp, #8
 80079be:	ed8d 0b00 	vstr	d0, [sp]
 80079c2:	9b01      	ldr	r3, [sp, #4]
 80079c4:	4912      	ldr	r1, [pc, #72]	; (8007a10 <__ulp+0x54>)
 80079c6:	4019      	ands	r1, r3
 80079c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80079cc:	2900      	cmp	r1, #0
 80079ce:	dd05      	ble.n	80079dc <__ulp+0x20>
 80079d0:	2200      	movs	r2, #0
 80079d2:	460b      	mov	r3, r1
 80079d4:	ec43 2b10 	vmov	d0, r2, r3
 80079d8:	b002      	add	sp, #8
 80079da:	4770      	bx	lr
 80079dc:	4249      	negs	r1, r1
 80079de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80079e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80079e6:	f04f 0200 	mov.w	r2, #0
 80079ea:	f04f 0300 	mov.w	r3, #0
 80079ee:	da04      	bge.n	80079fa <__ulp+0x3e>
 80079f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80079f4:	fa41 f300 	asr.w	r3, r1, r0
 80079f8:	e7ec      	b.n	80079d4 <__ulp+0x18>
 80079fa:	f1a0 0114 	sub.w	r1, r0, #20
 80079fe:	291e      	cmp	r1, #30
 8007a00:	bfda      	itte	le
 8007a02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007a06:	fa20 f101 	lsrle.w	r1, r0, r1
 8007a0a:	2101      	movgt	r1, #1
 8007a0c:	460a      	mov	r2, r1
 8007a0e:	e7e1      	b.n	80079d4 <__ulp+0x18>
 8007a10:	7ff00000 	.word	0x7ff00000

08007a14 <__b2d>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	6905      	ldr	r5, [r0, #16]
 8007a18:	f100 0714 	add.w	r7, r0, #20
 8007a1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007a20:	1f2e      	subs	r6, r5, #4
 8007a22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007a26:	4620      	mov	r0, r4
 8007a28:	f7ff fd48 	bl	80074bc <__hi0bits>
 8007a2c:	f1c0 0320 	rsb	r3, r0, #32
 8007a30:	280a      	cmp	r0, #10
 8007a32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007ab0 <__b2d+0x9c>
 8007a36:	600b      	str	r3, [r1, #0]
 8007a38:	dc14      	bgt.n	8007a64 <__b2d+0x50>
 8007a3a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007a3e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007a42:	42b7      	cmp	r7, r6
 8007a44:	ea41 030c 	orr.w	r3, r1, ip
 8007a48:	bf34      	ite	cc
 8007a4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007a4e:	2100      	movcs	r1, #0
 8007a50:	3015      	adds	r0, #21
 8007a52:	fa04 f000 	lsl.w	r0, r4, r0
 8007a56:	fa21 f10e 	lsr.w	r1, r1, lr
 8007a5a:	ea40 0201 	orr.w	r2, r0, r1
 8007a5e:	ec43 2b10 	vmov	d0, r2, r3
 8007a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a64:	42b7      	cmp	r7, r6
 8007a66:	bf3a      	itte	cc
 8007a68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007a6c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007a70:	2100      	movcs	r1, #0
 8007a72:	380b      	subs	r0, #11
 8007a74:	d017      	beq.n	8007aa6 <__b2d+0x92>
 8007a76:	f1c0 0c20 	rsb	ip, r0, #32
 8007a7a:	fa04 f500 	lsl.w	r5, r4, r0
 8007a7e:	42be      	cmp	r6, r7
 8007a80:	fa21 f40c 	lsr.w	r4, r1, ip
 8007a84:	ea45 0504 	orr.w	r5, r5, r4
 8007a88:	bf8c      	ite	hi
 8007a8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007a8e:	2400      	movls	r4, #0
 8007a90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007a94:	fa01 f000 	lsl.w	r0, r1, r0
 8007a98:	fa24 f40c 	lsr.w	r4, r4, ip
 8007a9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007aa0:	ea40 0204 	orr.w	r2, r0, r4
 8007aa4:	e7db      	b.n	8007a5e <__b2d+0x4a>
 8007aa6:	ea44 030c 	orr.w	r3, r4, ip
 8007aaa:	460a      	mov	r2, r1
 8007aac:	e7d7      	b.n	8007a5e <__b2d+0x4a>
 8007aae:	bf00      	nop
 8007ab0:	3ff00000 	.word	0x3ff00000

08007ab4 <__d2b>:
 8007ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	4689      	mov	r9, r1
 8007aba:	2101      	movs	r1, #1
 8007abc:	ec57 6b10 	vmov	r6, r7, d0
 8007ac0:	4690      	mov	r8, r2
 8007ac2:	f7ff fc09 	bl	80072d8 <_Balloc>
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	b930      	cbnz	r0, 8007ad8 <__d2b+0x24>
 8007aca:	4602      	mov	r2, r0
 8007acc:	4b25      	ldr	r3, [pc, #148]	; (8007b64 <__d2b+0xb0>)
 8007ace:	4826      	ldr	r0, [pc, #152]	; (8007b68 <__d2b+0xb4>)
 8007ad0:	f240 310a 	movw	r1, #778	; 0x30a
 8007ad4:	f000 ff6c 	bl	80089b0 <__assert_func>
 8007ad8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007adc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ae0:	bb35      	cbnz	r5, 8007b30 <__d2b+0x7c>
 8007ae2:	2e00      	cmp	r6, #0
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	d028      	beq.n	8007b3a <__d2b+0x86>
 8007ae8:	4668      	mov	r0, sp
 8007aea:	9600      	str	r6, [sp, #0]
 8007aec:	f7ff fd06 	bl	80074fc <__lo0bits>
 8007af0:	9900      	ldr	r1, [sp, #0]
 8007af2:	b300      	cbz	r0, 8007b36 <__d2b+0x82>
 8007af4:	9a01      	ldr	r2, [sp, #4]
 8007af6:	f1c0 0320 	rsb	r3, r0, #32
 8007afa:	fa02 f303 	lsl.w	r3, r2, r3
 8007afe:	430b      	orrs	r3, r1
 8007b00:	40c2      	lsrs	r2, r0
 8007b02:	6163      	str	r3, [r4, #20]
 8007b04:	9201      	str	r2, [sp, #4]
 8007b06:	9b01      	ldr	r3, [sp, #4]
 8007b08:	61a3      	str	r3, [r4, #24]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bf14      	ite	ne
 8007b0e:	2202      	movne	r2, #2
 8007b10:	2201      	moveq	r2, #1
 8007b12:	6122      	str	r2, [r4, #16]
 8007b14:	b1d5      	cbz	r5, 8007b4c <__d2b+0x98>
 8007b16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b1a:	4405      	add	r5, r0
 8007b1c:	f8c9 5000 	str.w	r5, [r9]
 8007b20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b24:	f8c8 0000 	str.w	r0, [r8]
 8007b28:	4620      	mov	r0, r4
 8007b2a:	b003      	add	sp, #12
 8007b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b34:	e7d5      	b.n	8007ae2 <__d2b+0x2e>
 8007b36:	6161      	str	r1, [r4, #20]
 8007b38:	e7e5      	b.n	8007b06 <__d2b+0x52>
 8007b3a:	a801      	add	r0, sp, #4
 8007b3c:	f7ff fcde 	bl	80074fc <__lo0bits>
 8007b40:	9b01      	ldr	r3, [sp, #4]
 8007b42:	6163      	str	r3, [r4, #20]
 8007b44:	2201      	movs	r2, #1
 8007b46:	6122      	str	r2, [r4, #16]
 8007b48:	3020      	adds	r0, #32
 8007b4a:	e7e3      	b.n	8007b14 <__d2b+0x60>
 8007b4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b54:	f8c9 0000 	str.w	r0, [r9]
 8007b58:	6918      	ldr	r0, [r3, #16]
 8007b5a:	f7ff fcaf 	bl	80074bc <__hi0bits>
 8007b5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b62:	e7df      	b.n	8007b24 <__d2b+0x70>
 8007b64:	08009960 	.word	0x08009960
 8007b68:	080099ec 	.word	0x080099ec

08007b6c <__ratio>:
 8007b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b70:	4688      	mov	r8, r1
 8007b72:	4669      	mov	r1, sp
 8007b74:	4681      	mov	r9, r0
 8007b76:	f7ff ff4d 	bl	8007a14 <__b2d>
 8007b7a:	a901      	add	r1, sp, #4
 8007b7c:	4640      	mov	r0, r8
 8007b7e:	ec55 4b10 	vmov	r4, r5, d0
 8007b82:	f7ff ff47 	bl	8007a14 <__b2d>
 8007b86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007b8e:	eba3 0c02 	sub.w	ip, r3, r2
 8007b92:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007b9c:	ec51 0b10 	vmov	r0, r1, d0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	bfd6      	itet	le
 8007ba4:	460a      	movle	r2, r1
 8007ba6:	462a      	movgt	r2, r5
 8007ba8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007bac:	468b      	mov	fp, r1
 8007bae:	462f      	mov	r7, r5
 8007bb0:	bfd4      	ite	le
 8007bb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007bb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007bba:	4620      	mov	r0, r4
 8007bbc:	ee10 2a10 	vmov	r2, s0
 8007bc0:	465b      	mov	r3, fp
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	f7f8 fe5a 	bl	800087c <__aeabi_ddiv>
 8007bc8:	ec41 0b10 	vmov	d0, r0, r1
 8007bcc:	b003      	add	sp, #12
 8007bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bd2 <__copybits>:
 8007bd2:	3901      	subs	r1, #1
 8007bd4:	b570      	push	{r4, r5, r6, lr}
 8007bd6:	1149      	asrs	r1, r1, #5
 8007bd8:	6914      	ldr	r4, [r2, #16]
 8007bda:	3101      	adds	r1, #1
 8007bdc:	f102 0314 	add.w	r3, r2, #20
 8007be0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007be4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007be8:	1f05      	subs	r5, r0, #4
 8007bea:	42a3      	cmp	r3, r4
 8007bec:	d30c      	bcc.n	8007c08 <__copybits+0x36>
 8007bee:	1aa3      	subs	r3, r4, r2
 8007bf0:	3b11      	subs	r3, #17
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
 8007bf6:	3211      	adds	r2, #17
 8007bf8:	42a2      	cmp	r2, r4
 8007bfa:	bf88      	it	hi
 8007bfc:	2300      	movhi	r3, #0
 8007bfe:	4418      	add	r0, r3
 8007c00:	2300      	movs	r3, #0
 8007c02:	4288      	cmp	r0, r1
 8007c04:	d305      	bcc.n	8007c12 <__copybits+0x40>
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c0c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007c10:	e7eb      	b.n	8007bea <__copybits+0x18>
 8007c12:	f840 3b04 	str.w	r3, [r0], #4
 8007c16:	e7f4      	b.n	8007c02 <__copybits+0x30>

08007c18 <__any_on>:
 8007c18:	f100 0214 	add.w	r2, r0, #20
 8007c1c:	6900      	ldr	r0, [r0, #16]
 8007c1e:	114b      	asrs	r3, r1, #5
 8007c20:	4298      	cmp	r0, r3
 8007c22:	b510      	push	{r4, lr}
 8007c24:	db11      	blt.n	8007c4a <__any_on+0x32>
 8007c26:	dd0a      	ble.n	8007c3e <__any_on+0x26>
 8007c28:	f011 011f 	ands.w	r1, r1, #31
 8007c2c:	d007      	beq.n	8007c3e <__any_on+0x26>
 8007c2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007c32:	fa24 f001 	lsr.w	r0, r4, r1
 8007c36:	fa00 f101 	lsl.w	r1, r0, r1
 8007c3a:	428c      	cmp	r4, r1
 8007c3c:	d10b      	bne.n	8007c56 <__any_on+0x3e>
 8007c3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d803      	bhi.n	8007c4e <__any_on+0x36>
 8007c46:	2000      	movs	r0, #0
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	e7f7      	b.n	8007c3e <__any_on+0x26>
 8007c4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c52:	2900      	cmp	r1, #0
 8007c54:	d0f5      	beq.n	8007c42 <__any_on+0x2a>
 8007c56:	2001      	movs	r0, #1
 8007c58:	e7f6      	b.n	8007c48 <__any_on+0x30>

08007c5a <_calloc_r>:
 8007c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c5c:	fba1 2402 	umull	r2, r4, r1, r2
 8007c60:	b94c      	cbnz	r4, 8007c76 <_calloc_r+0x1c>
 8007c62:	4611      	mov	r1, r2
 8007c64:	9201      	str	r2, [sp, #4]
 8007c66:	f000 f87b 	bl	8007d60 <_malloc_r>
 8007c6a:	9a01      	ldr	r2, [sp, #4]
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	b930      	cbnz	r0, 8007c7e <_calloc_r+0x24>
 8007c70:	4628      	mov	r0, r5
 8007c72:	b003      	add	sp, #12
 8007c74:	bd30      	pop	{r4, r5, pc}
 8007c76:	220c      	movs	r2, #12
 8007c78:	6002      	str	r2, [r0, #0]
 8007c7a:	2500      	movs	r5, #0
 8007c7c:	e7f8      	b.n	8007c70 <_calloc_r+0x16>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	f7fc fb18 	bl	80042b4 <memset>
 8007c84:	e7f4      	b.n	8007c70 <_calloc_r+0x16>
	...

08007c88 <_free_r>:
 8007c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	d044      	beq.n	8007d18 <_free_r+0x90>
 8007c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c92:	9001      	str	r0, [sp, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f1a1 0404 	sub.w	r4, r1, #4
 8007c9a:	bfb8      	it	lt
 8007c9c:	18e4      	addlt	r4, r4, r3
 8007c9e:	f001 f88b 	bl	8008db8 <__malloc_lock>
 8007ca2:	4a1e      	ldr	r2, [pc, #120]	; (8007d1c <_free_r+0x94>)
 8007ca4:	9801      	ldr	r0, [sp, #4]
 8007ca6:	6813      	ldr	r3, [r2, #0]
 8007ca8:	b933      	cbnz	r3, 8007cb8 <_free_r+0x30>
 8007caa:	6063      	str	r3, [r4, #4]
 8007cac:	6014      	str	r4, [r2, #0]
 8007cae:	b003      	add	sp, #12
 8007cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cb4:	f001 b886 	b.w	8008dc4 <__malloc_unlock>
 8007cb8:	42a3      	cmp	r3, r4
 8007cba:	d908      	bls.n	8007cce <_free_r+0x46>
 8007cbc:	6825      	ldr	r5, [r4, #0]
 8007cbe:	1961      	adds	r1, r4, r5
 8007cc0:	428b      	cmp	r3, r1
 8007cc2:	bf01      	itttt	eq
 8007cc4:	6819      	ldreq	r1, [r3, #0]
 8007cc6:	685b      	ldreq	r3, [r3, #4]
 8007cc8:	1949      	addeq	r1, r1, r5
 8007cca:	6021      	streq	r1, [r4, #0]
 8007ccc:	e7ed      	b.n	8007caa <_free_r+0x22>
 8007cce:	461a      	mov	r2, r3
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	b10b      	cbz	r3, 8007cd8 <_free_r+0x50>
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	d9fa      	bls.n	8007cce <_free_r+0x46>
 8007cd8:	6811      	ldr	r1, [r2, #0]
 8007cda:	1855      	adds	r5, r2, r1
 8007cdc:	42a5      	cmp	r5, r4
 8007cde:	d10b      	bne.n	8007cf8 <_free_r+0x70>
 8007ce0:	6824      	ldr	r4, [r4, #0]
 8007ce2:	4421      	add	r1, r4
 8007ce4:	1854      	adds	r4, r2, r1
 8007ce6:	42a3      	cmp	r3, r4
 8007ce8:	6011      	str	r1, [r2, #0]
 8007cea:	d1e0      	bne.n	8007cae <_free_r+0x26>
 8007cec:	681c      	ldr	r4, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	6053      	str	r3, [r2, #4]
 8007cf2:	4421      	add	r1, r4
 8007cf4:	6011      	str	r1, [r2, #0]
 8007cf6:	e7da      	b.n	8007cae <_free_r+0x26>
 8007cf8:	d902      	bls.n	8007d00 <_free_r+0x78>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	6003      	str	r3, [r0, #0]
 8007cfe:	e7d6      	b.n	8007cae <_free_r+0x26>
 8007d00:	6825      	ldr	r5, [r4, #0]
 8007d02:	1961      	adds	r1, r4, r5
 8007d04:	428b      	cmp	r3, r1
 8007d06:	bf04      	itt	eq
 8007d08:	6819      	ldreq	r1, [r3, #0]
 8007d0a:	685b      	ldreq	r3, [r3, #4]
 8007d0c:	6063      	str	r3, [r4, #4]
 8007d0e:	bf04      	itt	eq
 8007d10:	1949      	addeq	r1, r1, r5
 8007d12:	6021      	streq	r1, [r4, #0]
 8007d14:	6054      	str	r4, [r2, #4]
 8007d16:	e7ca      	b.n	8007cae <_free_r+0x26>
 8007d18:	b003      	add	sp, #12
 8007d1a:	bd30      	pop	{r4, r5, pc}
 8007d1c:	20000c14 	.word	0x20000c14

08007d20 <sbrk_aligned>:
 8007d20:	b570      	push	{r4, r5, r6, lr}
 8007d22:	4e0e      	ldr	r6, [pc, #56]	; (8007d5c <sbrk_aligned+0x3c>)
 8007d24:	460c      	mov	r4, r1
 8007d26:	6831      	ldr	r1, [r6, #0]
 8007d28:	4605      	mov	r5, r0
 8007d2a:	b911      	cbnz	r1, 8007d32 <sbrk_aligned+0x12>
 8007d2c:	f000 fd28 	bl	8008780 <_sbrk_r>
 8007d30:	6030      	str	r0, [r6, #0]
 8007d32:	4621      	mov	r1, r4
 8007d34:	4628      	mov	r0, r5
 8007d36:	f000 fd23 	bl	8008780 <_sbrk_r>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	d00a      	beq.n	8007d54 <sbrk_aligned+0x34>
 8007d3e:	1cc4      	adds	r4, r0, #3
 8007d40:	f024 0403 	bic.w	r4, r4, #3
 8007d44:	42a0      	cmp	r0, r4
 8007d46:	d007      	beq.n	8007d58 <sbrk_aligned+0x38>
 8007d48:	1a21      	subs	r1, r4, r0
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 fd18 	bl	8008780 <_sbrk_r>
 8007d50:	3001      	adds	r0, #1
 8007d52:	d101      	bne.n	8007d58 <sbrk_aligned+0x38>
 8007d54:	f04f 34ff 	mov.w	r4, #4294967295
 8007d58:	4620      	mov	r0, r4
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	20000c18 	.word	0x20000c18

08007d60 <_malloc_r>:
 8007d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d64:	1ccd      	adds	r5, r1, #3
 8007d66:	f025 0503 	bic.w	r5, r5, #3
 8007d6a:	3508      	adds	r5, #8
 8007d6c:	2d0c      	cmp	r5, #12
 8007d6e:	bf38      	it	cc
 8007d70:	250c      	movcc	r5, #12
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	4607      	mov	r7, r0
 8007d76:	db01      	blt.n	8007d7c <_malloc_r+0x1c>
 8007d78:	42a9      	cmp	r1, r5
 8007d7a:	d905      	bls.n	8007d88 <_malloc_r+0x28>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	2600      	movs	r6, #0
 8007d82:	4630      	mov	r0, r6
 8007d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d88:	4e2e      	ldr	r6, [pc, #184]	; (8007e44 <_malloc_r+0xe4>)
 8007d8a:	f001 f815 	bl	8008db8 <__malloc_lock>
 8007d8e:	6833      	ldr	r3, [r6, #0]
 8007d90:	461c      	mov	r4, r3
 8007d92:	bb34      	cbnz	r4, 8007de2 <_malloc_r+0x82>
 8007d94:	4629      	mov	r1, r5
 8007d96:	4638      	mov	r0, r7
 8007d98:	f7ff ffc2 	bl	8007d20 <sbrk_aligned>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	4604      	mov	r4, r0
 8007da0:	d14d      	bne.n	8007e3e <_malloc_r+0xde>
 8007da2:	6834      	ldr	r4, [r6, #0]
 8007da4:	4626      	mov	r6, r4
 8007da6:	2e00      	cmp	r6, #0
 8007da8:	d140      	bne.n	8007e2c <_malloc_r+0xcc>
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	4631      	mov	r1, r6
 8007dae:	4638      	mov	r0, r7
 8007db0:	eb04 0803 	add.w	r8, r4, r3
 8007db4:	f000 fce4 	bl	8008780 <_sbrk_r>
 8007db8:	4580      	cmp	r8, r0
 8007dba:	d13a      	bne.n	8007e32 <_malloc_r+0xd2>
 8007dbc:	6821      	ldr	r1, [r4, #0]
 8007dbe:	3503      	adds	r5, #3
 8007dc0:	1a6d      	subs	r5, r5, r1
 8007dc2:	f025 0503 	bic.w	r5, r5, #3
 8007dc6:	3508      	adds	r5, #8
 8007dc8:	2d0c      	cmp	r5, #12
 8007dca:	bf38      	it	cc
 8007dcc:	250c      	movcc	r5, #12
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f7ff ffa5 	bl	8007d20 <sbrk_aligned>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d02b      	beq.n	8007e32 <_malloc_r+0xd2>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	442b      	add	r3, r5
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	e00e      	b.n	8007e00 <_malloc_r+0xa0>
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	1b52      	subs	r2, r2, r5
 8007de6:	d41e      	bmi.n	8007e26 <_malloc_r+0xc6>
 8007de8:	2a0b      	cmp	r2, #11
 8007dea:	d916      	bls.n	8007e1a <_malloc_r+0xba>
 8007dec:	1961      	adds	r1, r4, r5
 8007dee:	42a3      	cmp	r3, r4
 8007df0:	6025      	str	r5, [r4, #0]
 8007df2:	bf18      	it	ne
 8007df4:	6059      	strne	r1, [r3, #4]
 8007df6:	6863      	ldr	r3, [r4, #4]
 8007df8:	bf08      	it	eq
 8007dfa:	6031      	streq	r1, [r6, #0]
 8007dfc:	5162      	str	r2, [r4, r5]
 8007dfe:	604b      	str	r3, [r1, #4]
 8007e00:	4638      	mov	r0, r7
 8007e02:	f104 060b 	add.w	r6, r4, #11
 8007e06:	f000 ffdd 	bl	8008dc4 <__malloc_unlock>
 8007e0a:	f026 0607 	bic.w	r6, r6, #7
 8007e0e:	1d23      	adds	r3, r4, #4
 8007e10:	1af2      	subs	r2, r6, r3
 8007e12:	d0b6      	beq.n	8007d82 <_malloc_r+0x22>
 8007e14:	1b9b      	subs	r3, r3, r6
 8007e16:	50a3      	str	r3, [r4, r2]
 8007e18:	e7b3      	b.n	8007d82 <_malloc_r+0x22>
 8007e1a:	6862      	ldr	r2, [r4, #4]
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	bf0c      	ite	eq
 8007e20:	6032      	streq	r2, [r6, #0]
 8007e22:	605a      	strne	r2, [r3, #4]
 8007e24:	e7ec      	b.n	8007e00 <_malloc_r+0xa0>
 8007e26:	4623      	mov	r3, r4
 8007e28:	6864      	ldr	r4, [r4, #4]
 8007e2a:	e7b2      	b.n	8007d92 <_malloc_r+0x32>
 8007e2c:	4634      	mov	r4, r6
 8007e2e:	6876      	ldr	r6, [r6, #4]
 8007e30:	e7b9      	b.n	8007da6 <_malloc_r+0x46>
 8007e32:	230c      	movs	r3, #12
 8007e34:	603b      	str	r3, [r7, #0]
 8007e36:	4638      	mov	r0, r7
 8007e38:	f000 ffc4 	bl	8008dc4 <__malloc_unlock>
 8007e3c:	e7a1      	b.n	8007d82 <_malloc_r+0x22>
 8007e3e:	6025      	str	r5, [r4, #0]
 8007e40:	e7de      	b.n	8007e00 <_malloc_r+0xa0>
 8007e42:	bf00      	nop
 8007e44:	20000c14 	.word	0x20000c14

08007e48 <__ssputs_r>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	688e      	ldr	r6, [r1, #8]
 8007e4e:	429e      	cmp	r6, r3
 8007e50:	4682      	mov	sl, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	4690      	mov	r8, r2
 8007e56:	461f      	mov	r7, r3
 8007e58:	d838      	bhi.n	8007ecc <__ssputs_r+0x84>
 8007e5a:	898a      	ldrh	r2, [r1, #12]
 8007e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e60:	d032      	beq.n	8007ec8 <__ssputs_r+0x80>
 8007e62:	6825      	ldr	r5, [r4, #0]
 8007e64:	6909      	ldr	r1, [r1, #16]
 8007e66:	eba5 0901 	sub.w	r9, r5, r1
 8007e6a:	6965      	ldr	r5, [r4, #20]
 8007e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e74:	3301      	adds	r3, #1
 8007e76:	444b      	add	r3, r9
 8007e78:	106d      	asrs	r5, r5, #1
 8007e7a:	429d      	cmp	r5, r3
 8007e7c:	bf38      	it	cc
 8007e7e:	461d      	movcc	r5, r3
 8007e80:	0553      	lsls	r3, r2, #21
 8007e82:	d531      	bpl.n	8007ee8 <__ssputs_r+0xa0>
 8007e84:	4629      	mov	r1, r5
 8007e86:	f7ff ff6b 	bl	8007d60 <_malloc_r>
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	b950      	cbnz	r0, 8007ea4 <__ssputs_r+0x5c>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	f8ca 3000 	str.w	r3, [sl]
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea4:	6921      	ldr	r1, [r4, #16]
 8007ea6:	464a      	mov	r2, r9
 8007ea8:	f7ff fa08 	bl	80072bc <memcpy>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	6126      	str	r6, [r4, #16]
 8007eba:	6165      	str	r5, [r4, #20]
 8007ebc:	444e      	add	r6, r9
 8007ebe:	eba5 0509 	sub.w	r5, r5, r9
 8007ec2:	6026      	str	r6, [r4, #0]
 8007ec4:	60a5      	str	r5, [r4, #8]
 8007ec6:	463e      	mov	r6, r7
 8007ec8:	42be      	cmp	r6, r7
 8007eca:	d900      	bls.n	8007ece <__ssputs_r+0x86>
 8007ecc:	463e      	mov	r6, r7
 8007ece:	6820      	ldr	r0, [r4, #0]
 8007ed0:	4632      	mov	r2, r6
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	f000 ff56 	bl	8008d84 <memmove>
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	1b9b      	subs	r3, r3, r6
 8007edc:	60a3      	str	r3, [r4, #8]
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	4433      	add	r3, r6
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e7db      	b.n	8007ea0 <__ssputs_r+0x58>
 8007ee8:	462a      	mov	r2, r5
 8007eea:	f000 ff71 	bl	8008dd0 <_realloc_r>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d1e1      	bne.n	8007eb8 <__ssputs_r+0x70>
 8007ef4:	6921      	ldr	r1, [r4, #16]
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	f7ff fec6 	bl	8007c88 <_free_r>
 8007efc:	e7c7      	b.n	8007e8e <__ssputs_r+0x46>
	...

08007f00 <_svfiprintf_r>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	4698      	mov	r8, r3
 8007f06:	898b      	ldrh	r3, [r1, #12]
 8007f08:	061b      	lsls	r3, r3, #24
 8007f0a:	b09d      	sub	sp, #116	; 0x74
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	4614      	mov	r4, r2
 8007f12:	d50e      	bpl.n	8007f32 <_svfiprintf_r+0x32>
 8007f14:	690b      	ldr	r3, [r1, #16]
 8007f16:	b963      	cbnz	r3, 8007f32 <_svfiprintf_r+0x32>
 8007f18:	2140      	movs	r1, #64	; 0x40
 8007f1a:	f7ff ff21 	bl	8007d60 <_malloc_r>
 8007f1e:	6028      	str	r0, [r5, #0]
 8007f20:	6128      	str	r0, [r5, #16]
 8007f22:	b920      	cbnz	r0, 8007f2e <_svfiprintf_r+0x2e>
 8007f24:	230c      	movs	r3, #12
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	e0d1      	b.n	80080d2 <_svfiprintf_r+0x1d2>
 8007f2e:	2340      	movs	r3, #64	; 0x40
 8007f30:	616b      	str	r3, [r5, #20]
 8007f32:	2300      	movs	r3, #0
 8007f34:	9309      	str	r3, [sp, #36]	; 0x24
 8007f36:	2320      	movs	r3, #32
 8007f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f40:	2330      	movs	r3, #48	; 0x30
 8007f42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080ec <_svfiprintf_r+0x1ec>
 8007f46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f4a:	f04f 0901 	mov.w	r9, #1
 8007f4e:	4623      	mov	r3, r4
 8007f50:	469a      	mov	sl, r3
 8007f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f56:	b10a      	cbz	r2, 8007f5c <_svfiprintf_r+0x5c>
 8007f58:	2a25      	cmp	r2, #37	; 0x25
 8007f5a:	d1f9      	bne.n	8007f50 <_svfiprintf_r+0x50>
 8007f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f60:	d00b      	beq.n	8007f7a <_svfiprintf_r+0x7a>
 8007f62:	465b      	mov	r3, fp
 8007f64:	4622      	mov	r2, r4
 8007f66:	4629      	mov	r1, r5
 8007f68:	4638      	mov	r0, r7
 8007f6a:	f7ff ff6d 	bl	8007e48 <__ssputs_r>
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f000 80aa 	beq.w	80080c8 <_svfiprintf_r+0x1c8>
 8007f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f76:	445a      	add	r2, fp
 8007f78:	9209      	str	r2, [sp, #36]	; 0x24
 8007f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80a2 	beq.w	80080c8 <_svfiprintf_r+0x1c8>
 8007f84:	2300      	movs	r3, #0
 8007f86:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f8e:	f10a 0a01 	add.w	sl, sl, #1
 8007f92:	9304      	str	r3, [sp, #16]
 8007f94:	9307      	str	r3, [sp, #28]
 8007f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f9c:	4654      	mov	r4, sl
 8007f9e:	2205      	movs	r2, #5
 8007fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa4:	4851      	ldr	r0, [pc, #324]	; (80080ec <_svfiprintf_r+0x1ec>)
 8007fa6:	f7f8 f933 	bl	8000210 <memchr>
 8007faa:	9a04      	ldr	r2, [sp, #16]
 8007fac:	b9d8      	cbnz	r0, 8007fe6 <_svfiprintf_r+0xe6>
 8007fae:	06d0      	lsls	r0, r2, #27
 8007fb0:	bf44      	itt	mi
 8007fb2:	2320      	movmi	r3, #32
 8007fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb8:	0711      	lsls	r1, r2, #28
 8007fba:	bf44      	itt	mi
 8007fbc:	232b      	movmi	r3, #43	; 0x2b
 8007fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc8:	d015      	beq.n	8007ff6 <_svfiprintf_r+0xf6>
 8007fca:	9a07      	ldr	r2, [sp, #28]
 8007fcc:	4654      	mov	r4, sl
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f04f 0c0a 	mov.w	ip, #10
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fda:	3b30      	subs	r3, #48	; 0x30
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	d94e      	bls.n	800807e <_svfiprintf_r+0x17e>
 8007fe0:	b1b0      	cbz	r0, 8008010 <_svfiprintf_r+0x110>
 8007fe2:	9207      	str	r2, [sp, #28]
 8007fe4:	e014      	b.n	8008010 <_svfiprintf_r+0x110>
 8007fe6:	eba0 0308 	sub.w	r3, r0, r8
 8007fea:	fa09 f303 	lsl.w	r3, r9, r3
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	46a2      	mov	sl, r4
 8007ff4:	e7d2      	b.n	8007f9c <_svfiprintf_r+0x9c>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	1d19      	adds	r1, r3, #4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	9103      	str	r1, [sp, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bfbb      	ittet	lt
 8008002:	425b      	neglt	r3, r3
 8008004:	f042 0202 	orrlt.w	r2, r2, #2
 8008008:	9307      	strge	r3, [sp, #28]
 800800a:	9307      	strlt	r3, [sp, #28]
 800800c:	bfb8      	it	lt
 800800e:	9204      	strlt	r2, [sp, #16]
 8008010:	7823      	ldrb	r3, [r4, #0]
 8008012:	2b2e      	cmp	r3, #46	; 0x2e
 8008014:	d10c      	bne.n	8008030 <_svfiprintf_r+0x130>
 8008016:	7863      	ldrb	r3, [r4, #1]
 8008018:	2b2a      	cmp	r3, #42	; 0x2a
 800801a:	d135      	bne.n	8008088 <_svfiprintf_r+0x188>
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	1d1a      	adds	r2, r3, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	9203      	str	r2, [sp, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfb8      	it	lt
 8008028:	f04f 33ff 	movlt.w	r3, #4294967295
 800802c:	3402      	adds	r4, #2
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080fc <_svfiprintf_r+0x1fc>
 8008034:	7821      	ldrb	r1, [r4, #0]
 8008036:	2203      	movs	r2, #3
 8008038:	4650      	mov	r0, sl
 800803a:	f7f8 f8e9 	bl	8000210 <memchr>
 800803e:	b140      	cbz	r0, 8008052 <_svfiprintf_r+0x152>
 8008040:	2340      	movs	r3, #64	; 0x40
 8008042:	eba0 000a 	sub.w	r0, r0, sl
 8008046:	fa03 f000 	lsl.w	r0, r3, r0
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	4303      	orrs	r3, r0
 800804e:	3401      	adds	r4, #1
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008056:	4826      	ldr	r0, [pc, #152]	; (80080f0 <_svfiprintf_r+0x1f0>)
 8008058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800805c:	2206      	movs	r2, #6
 800805e:	f7f8 f8d7 	bl	8000210 <memchr>
 8008062:	2800      	cmp	r0, #0
 8008064:	d038      	beq.n	80080d8 <_svfiprintf_r+0x1d8>
 8008066:	4b23      	ldr	r3, [pc, #140]	; (80080f4 <_svfiprintf_r+0x1f4>)
 8008068:	bb1b      	cbnz	r3, 80080b2 <_svfiprintf_r+0x1b2>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	3307      	adds	r3, #7
 800806e:	f023 0307 	bic.w	r3, r3, #7
 8008072:	3308      	adds	r3, #8
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	4433      	add	r3, r6
 800807a:	9309      	str	r3, [sp, #36]	; 0x24
 800807c:	e767      	b.n	8007f4e <_svfiprintf_r+0x4e>
 800807e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008082:	460c      	mov	r4, r1
 8008084:	2001      	movs	r0, #1
 8008086:	e7a5      	b.n	8007fd4 <_svfiprintf_r+0xd4>
 8008088:	2300      	movs	r3, #0
 800808a:	3401      	adds	r4, #1
 800808c:	9305      	str	r3, [sp, #20]
 800808e:	4619      	mov	r1, r3
 8008090:	f04f 0c0a 	mov.w	ip, #10
 8008094:	4620      	mov	r0, r4
 8008096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800809a:	3a30      	subs	r2, #48	; 0x30
 800809c:	2a09      	cmp	r2, #9
 800809e:	d903      	bls.n	80080a8 <_svfiprintf_r+0x1a8>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0c5      	beq.n	8008030 <_svfiprintf_r+0x130>
 80080a4:	9105      	str	r1, [sp, #20]
 80080a6:	e7c3      	b.n	8008030 <_svfiprintf_r+0x130>
 80080a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ac:	4604      	mov	r4, r0
 80080ae:	2301      	movs	r3, #1
 80080b0:	e7f0      	b.n	8008094 <_svfiprintf_r+0x194>
 80080b2:	ab03      	add	r3, sp, #12
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	462a      	mov	r2, r5
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <_svfiprintf_r+0x1f8>)
 80080ba:	a904      	add	r1, sp, #16
 80080bc:	4638      	mov	r0, r7
 80080be:	f7fc f9a1 	bl	8004404 <_printf_float>
 80080c2:	1c42      	adds	r2, r0, #1
 80080c4:	4606      	mov	r6, r0
 80080c6:	d1d6      	bne.n	8008076 <_svfiprintf_r+0x176>
 80080c8:	89ab      	ldrh	r3, [r5, #12]
 80080ca:	065b      	lsls	r3, r3, #25
 80080cc:	f53f af2c 	bmi.w	8007f28 <_svfiprintf_r+0x28>
 80080d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080d2:	b01d      	add	sp, #116	; 0x74
 80080d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	462a      	mov	r2, r5
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <_svfiprintf_r+0x1f8>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	4638      	mov	r0, r7
 80080e4:	f7fc fc32 	bl	800494c <_printf_i>
 80080e8:	e7eb      	b.n	80080c2 <_svfiprintf_r+0x1c2>
 80080ea:	bf00      	nop
 80080ec:	08009b44 	.word	0x08009b44
 80080f0:	08009b4e 	.word	0x08009b4e
 80080f4:	08004405 	.word	0x08004405
 80080f8:	08007e49 	.word	0x08007e49
 80080fc:	08009b4a 	.word	0x08009b4a

08008100 <_sungetc_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	1c4b      	adds	r3, r1, #1
 8008104:	4614      	mov	r4, r2
 8008106:	d103      	bne.n	8008110 <_sungetc_r+0x10>
 8008108:	f04f 35ff 	mov.w	r5, #4294967295
 800810c:	4628      	mov	r0, r5
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	8993      	ldrh	r3, [r2, #12]
 8008112:	f023 0320 	bic.w	r3, r3, #32
 8008116:	8193      	strh	r3, [r2, #12]
 8008118:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800811a:	6852      	ldr	r2, [r2, #4]
 800811c:	b2cd      	uxtb	r5, r1
 800811e:	b18b      	cbz	r3, 8008144 <_sungetc_r+0x44>
 8008120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008122:	4293      	cmp	r3, r2
 8008124:	dd08      	ble.n	8008138 <_sungetc_r+0x38>
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	1e5a      	subs	r2, r3, #1
 800812a:	6022      	str	r2, [r4, #0]
 800812c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008130:	6863      	ldr	r3, [r4, #4]
 8008132:	3301      	adds	r3, #1
 8008134:	6063      	str	r3, [r4, #4]
 8008136:	e7e9      	b.n	800810c <_sungetc_r+0xc>
 8008138:	4621      	mov	r1, r4
 800813a:	f000 fbf1 	bl	8008920 <__submore>
 800813e:	2800      	cmp	r0, #0
 8008140:	d0f1      	beq.n	8008126 <_sungetc_r+0x26>
 8008142:	e7e1      	b.n	8008108 <_sungetc_r+0x8>
 8008144:	6921      	ldr	r1, [r4, #16]
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	b151      	cbz	r1, 8008160 <_sungetc_r+0x60>
 800814a:	4299      	cmp	r1, r3
 800814c:	d208      	bcs.n	8008160 <_sungetc_r+0x60>
 800814e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008152:	42a9      	cmp	r1, r5
 8008154:	d104      	bne.n	8008160 <_sungetc_r+0x60>
 8008156:	3b01      	subs	r3, #1
 8008158:	3201      	adds	r2, #1
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	6062      	str	r2, [r4, #4]
 800815e:	e7d5      	b.n	800810c <_sungetc_r+0xc>
 8008160:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008168:	6363      	str	r3, [r4, #52]	; 0x34
 800816a:	2303      	movs	r3, #3
 800816c:	63a3      	str	r3, [r4, #56]	; 0x38
 800816e:	4623      	mov	r3, r4
 8008170:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	2301      	movs	r3, #1
 8008178:	e7dc      	b.n	8008134 <_sungetc_r+0x34>

0800817a <__ssrefill_r>:
 800817a:	b510      	push	{r4, lr}
 800817c:	460c      	mov	r4, r1
 800817e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008180:	b169      	cbz	r1, 800819e <__ssrefill_r+0x24>
 8008182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008186:	4299      	cmp	r1, r3
 8008188:	d001      	beq.n	800818e <__ssrefill_r+0x14>
 800818a:	f7ff fd7d 	bl	8007c88 <_free_r>
 800818e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008190:	6063      	str	r3, [r4, #4]
 8008192:	2000      	movs	r0, #0
 8008194:	6360      	str	r0, [r4, #52]	; 0x34
 8008196:	b113      	cbz	r3, 800819e <__ssrefill_r+0x24>
 8008198:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800819a:	6023      	str	r3, [r4, #0]
 800819c:	bd10      	pop	{r4, pc}
 800819e:	6923      	ldr	r3, [r4, #16]
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	2300      	movs	r3, #0
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f043 0320 	orr.w	r3, r3, #32
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	f04f 30ff 	mov.w	r0, #4294967295
 80081b2:	e7f3      	b.n	800819c <__ssrefill_r+0x22>

080081b4 <__ssvfiscanf_r>:
 80081b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b8:	460c      	mov	r4, r1
 80081ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80081be:	2100      	movs	r1, #0
 80081c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80081c4:	49a6      	ldr	r1, [pc, #664]	; (8008460 <__ssvfiscanf_r+0x2ac>)
 80081c6:	91a0      	str	r1, [sp, #640]	; 0x280
 80081c8:	f10d 0804 	add.w	r8, sp, #4
 80081cc:	49a5      	ldr	r1, [pc, #660]	; (8008464 <__ssvfiscanf_r+0x2b0>)
 80081ce:	4fa6      	ldr	r7, [pc, #664]	; (8008468 <__ssvfiscanf_r+0x2b4>)
 80081d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800846c <__ssvfiscanf_r+0x2b8>
 80081d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80081d8:	4606      	mov	r6, r0
 80081da:	91a1      	str	r1, [sp, #644]	; 0x284
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	7813      	ldrb	r3, [r2, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 815a 	beq.w	800849a <__ssvfiscanf_r+0x2e6>
 80081e6:	5dd9      	ldrb	r1, [r3, r7]
 80081e8:	f011 0108 	ands.w	r1, r1, #8
 80081ec:	f102 0501 	add.w	r5, r2, #1
 80081f0:	d019      	beq.n	8008226 <__ssvfiscanf_r+0x72>
 80081f2:	6863      	ldr	r3, [r4, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dd0f      	ble.n	8008218 <__ssvfiscanf_r+0x64>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	781a      	ldrb	r2, [r3, #0]
 80081fc:	5cba      	ldrb	r2, [r7, r2]
 80081fe:	0712      	lsls	r2, r2, #28
 8008200:	d401      	bmi.n	8008206 <__ssvfiscanf_r+0x52>
 8008202:	462a      	mov	r2, r5
 8008204:	e7eb      	b.n	80081de <__ssvfiscanf_r+0x2a>
 8008206:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008208:	3201      	adds	r2, #1
 800820a:	9245      	str	r2, [sp, #276]	; 0x114
 800820c:	6862      	ldr	r2, [r4, #4]
 800820e:	3301      	adds	r3, #1
 8008210:	3a01      	subs	r2, #1
 8008212:	6062      	str	r2, [r4, #4]
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	e7ec      	b.n	80081f2 <__ssvfiscanf_r+0x3e>
 8008218:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800821a:	4621      	mov	r1, r4
 800821c:	4630      	mov	r0, r6
 800821e:	4798      	blx	r3
 8008220:	2800      	cmp	r0, #0
 8008222:	d0e9      	beq.n	80081f8 <__ssvfiscanf_r+0x44>
 8008224:	e7ed      	b.n	8008202 <__ssvfiscanf_r+0x4e>
 8008226:	2b25      	cmp	r3, #37	; 0x25
 8008228:	d012      	beq.n	8008250 <__ssvfiscanf_r+0x9c>
 800822a:	469a      	mov	sl, r3
 800822c:	6863      	ldr	r3, [r4, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f340 8091 	ble.w	8008356 <__ssvfiscanf_r+0x1a2>
 8008234:	6822      	ldr	r2, [r4, #0]
 8008236:	7813      	ldrb	r3, [r2, #0]
 8008238:	4553      	cmp	r3, sl
 800823a:	f040 812e 	bne.w	800849a <__ssvfiscanf_r+0x2e6>
 800823e:	6863      	ldr	r3, [r4, #4]
 8008240:	3b01      	subs	r3, #1
 8008242:	6063      	str	r3, [r4, #4]
 8008244:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008246:	3201      	adds	r2, #1
 8008248:	3301      	adds	r3, #1
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	9345      	str	r3, [sp, #276]	; 0x114
 800824e:	e7d8      	b.n	8008202 <__ssvfiscanf_r+0x4e>
 8008250:	9141      	str	r1, [sp, #260]	; 0x104
 8008252:	9143      	str	r1, [sp, #268]	; 0x10c
 8008254:	7853      	ldrb	r3, [r2, #1]
 8008256:	2b2a      	cmp	r3, #42	; 0x2a
 8008258:	bf02      	ittt	eq
 800825a:	2310      	moveq	r3, #16
 800825c:	1c95      	addeq	r5, r2, #2
 800825e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008260:	220a      	movs	r2, #10
 8008262:	46aa      	mov	sl, r5
 8008264:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008268:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800826c:	2b09      	cmp	r3, #9
 800826e:	d91d      	bls.n	80082ac <__ssvfiscanf_r+0xf8>
 8008270:	487e      	ldr	r0, [pc, #504]	; (800846c <__ssvfiscanf_r+0x2b8>)
 8008272:	2203      	movs	r2, #3
 8008274:	f7f7 ffcc 	bl	8000210 <memchr>
 8008278:	b140      	cbz	r0, 800828c <__ssvfiscanf_r+0xd8>
 800827a:	2301      	movs	r3, #1
 800827c:	eba0 0009 	sub.w	r0, r0, r9
 8008280:	fa03 f000 	lsl.w	r0, r3, r0
 8008284:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008286:	4318      	orrs	r0, r3
 8008288:	9041      	str	r0, [sp, #260]	; 0x104
 800828a:	4655      	mov	r5, sl
 800828c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008290:	2b78      	cmp	r3, #120	; 0x78
 8008292:	d806      	bhi.n	80082a2 <__ssvfiscanf_r+0xee>
 8008294:	2b57      	cmp	r3, #87	; 0x57
 8008296:	d810      	bhi.n	80082ba <__ssvfiscanf_r+0x106>
 8008298:	2b25      	cmp	r3, #37	; 0x25
 800829a:	d0c6      	beq.n	800822a <__ssvfiscanf_r+0x76>
 800829c:	d856      	bhi.n	800834c <__ssvfiscanf_r+0x198>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d064      	beq.n	800836c <__ssvfiscanf_r+0x1b8>
 80082a2:	2303      	movs	r3, #3
 80082a4:	9347      	str	r3, [sp, #284]	; 0x11c
 80082a6:	230a      	movs	r3, #10
 80082a8:	9342      	str	r3, [sp, #264]	; 0x108
 80082aa:	e071      	b.n	8008390 <__ssvfiscanf_r+0x1dc>
 80082ac:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80082ae:	fb02 1103 	mla	r1, r2, r3, r1
 80082b2:	3930      	subs	r1, #48	; 0x30
 80082b4:	9143      	str	r1, [sp, #268]	; 0x10c
 80082b6:	4655      	mov	r5, sl
 80082b8:	e7d3      	b.n	8008262 <__ssvfiscanf_r+0xae>
 80082ba:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80082be:	2a20      	cmp	r2, #32
 80082c0:	d8ef      	bhi.n	80082a2 <__ssvfiscanf_r+0xee>
 80082c2:	a101      	add	r1, pc, #4	; (adr r1, 80082c8 <__ssvfiscanf_r+0x114>)
 80082c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80082c8:	0800837b 	.word	0x0800837b
 80082cc:	080082a3 	.word	0x080082a3
 80082d0:	080082a3 	.word	0x080082a3
 80082d4:	080083d9 	.word	0x080083d9
 80082d8:	080082a3 	.word	0x080082a3
 80082dc:	080082a3 	.word	0x080082a3
 80082e0:	080082a3 	.word	0x080082a3
 80082e4:	080082a3 	.word	0x080082a3
 80082e8:	080082a3 	.word	0x080082a3
 80082ec:	080082a3 	.word	0x080082a3
 80082f0:	080082a3 	.word	0x080082a3
 80082f4:	080083ef 	.word	0x080083ef
 80082f8:	080083c5 	.word	0x080083c5
 80082fc:	08008353 	.word	0x08008353
 8008300:	08008353 	.word	0x08008353
 8008304:	08008353 	.word	0x08008353
 8008308:	080082a3 	.word	0x080082a3
 800830c:	080083c9 	.word	0x080083c9
 8008310:	080082a3 	.word	0x080082a3
 8008314:	080082a3 	.word	0x080082a3
 8008318:	080082a3 	.word	0x080082a3
 800831c:	080082a3 	.word	0x080082a3
 8008320:	080083ff 	.word	0x080083ff
 8008324:	080083d1 	.word	0x080083d1
 8008328:	08008373 	.word	0x08008373
 800832c:	080082a3 	.word	0x080082a3
 8008330:	080082a3 	.word	0x080082a3
 8008334:	080083fb 	.word	0x080083fb
 8008338:	080082a3 	.word	0x080082a3
 800833c:	080083c5 	.word	0x080083c5
 8008340:	080082a3 	.word	0x080082a3
 8008344:	080082a3 	.word	0x080082a3
 8008348:	0800837b 	.word	0x0800837b
 800834c:	3b45      	subs	r3, #69	; 0x45
 800834e:	2b02      	cmp	r3, #2
 8008350:	d8a7      	bhi.n	80082a2 <__ssvfiscanf_r+0xee>
 8008352:	2305      	movs	r3, #5
 8008354:	e01b      	b.n	800838e <__ssvfiscanf_r+0x1da>
 8008356:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008358:	4621      	mov	r1, r4
 800835a:	4630      	mov	r0, r6
 800835c:	4798      	blx	r3
 800835e:	2800      	cmp	r0, #0
 8008360:	f43f af68 	beq.w	8008234 <__ssvfiscanf_r+0x80>
 8008364:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008366:	2800      	cmp	r0, #0
 8008368:	f040 808d 	bne.w	8008486 <__ssvfiscanf_r+0x2d2>
 800836c:	f04f 30ff 	mov.w	r0, #4294967295
 8008370:	e08f      	b.n	8008492 <__ssvfiscanf_r+0x2de>
 8008372:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008374:	f042 0220 	orr.w	r2, r2, #32
 8008378:	9241      	str	r2, [sp, #260]	; 0x104
 800837a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800837c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008380:	9241      	str	r2, [sp, #260]	; 0x104
 8008382:	2210      	movs	r2, #16
 8008384:	2b6f      	cmp	r3, #111	; 0x6f
 8008386:	9242      	str	r2, [sp, #264]	; 0x108
 8008388:	bf34      	ite	cc
 800838a:	2303      	movcc	r3, #3
 800838c:	2304      	movcs	r3, #4
 800838e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd42      	ble.n	800841c <__ssvfiscanf_r+0x268>
 8008396:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008398:	0659      	lsls	r1, r3, #25
 800839a:	d404      	bmi.n	80083a6 <__ssvfiscanf_r+0x1f2>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	781a      	ldrb	r2, [r3, #0]
 80083a0:	5cba      	ldrb	r2, [r7, r2]
 80083a2:	0712      	lsls	r2, r2, #28
 80083a4:	d441      	bmi.n	800842a <__ssvfiscanf_r+0x276>
 80083a6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	dc50      	bgt.n	800844e <__ssvfiscanf_r+0x29a>
 80083ac:	466b      	mov	r3, sp
 80083ae:	4622      	mov	r2, r4
 80083b0:	a941      	add	r1, sp, #260	; 0x104
 80083b2:	4630      	mov	r0, r6
 80083b4:	f000 f876 	bl	80084a4 <_scanf_chars>
 80083b8:	2801      	cmp	r0, #1
 80083ba:	d06e      	beq.n	800849a <__ssvfiscanf_r+0x2e6>
 80083bc:	2802      	cmp	r0, #2
 80083be:	f47f af20 	bne.w	8008202 <__ssvfiscanf_r+0x4e>
 80083c2:	e7cf      	b.n	8008364 <__ssvfiscanf_r+0x1b0>
 80083c4:	220a      	movs	r2, #10
 80083c6:	e7dd      	b.n	8008384 <__ssvfiscanf_r+0x1d0>
 80083c8:	2300      	movs	r3, #0
 80083ca:	9342      	str	r3, [sp, #264]	; 0x108
 80083cc:	2303      	movs	r3, #3
 80083ce:	e7de      	b.n	800838e <__ssvfiscanf_r+0x1da>
 80083d0:	2308      	movs	r3, #8
 80083d2:	9342      	str	r3, [sp, #264]	; 0x108
 80083d4:	2304      	movs	r3, #4
 80083d6:	e7da      	b.n	800838e <__ssvfiscanf_r+0x1da>
 80083d8:	4629      	mov	r1, r5
 80083da:	4640      	mov	r0, r8
 80083dc:	f000 f9e0 	bl	80087a0 <__sccl>
 80083e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80083e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083e6:	9341      	str	r3, [sp, #260]	; 0x104
 80083e8:	4605      	mov	r5, r0
 80083ea:	2301      	movs	r3, #1
 80083ec:	e7cf      	b.n	800838e <__ssvfiscanf_r+0x1da>
 80083ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80083f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f4:	9341      	str	r3, [sp, #260]	; 0x104
 80083f6:	2300      	movs	r3, #0
 80083f8:	e7c9      	b.n	800838e <__ssvfiscanf_r+0x1da>
 80083fa:	2302      	movs	r3, #2
 80083fc:	e7c7      	b.n	800838e <__ssvfiscanf_r+0x1da>
 80083fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008400:	06c3      	lsls	r3, r0, #27
 8008402:	f53f aefe 	bmi.w	8008202 <__ssvfiscanf_r+0x4e>
 8008406:	9b00      	ldr	r3, [sp, #0]
 8008408:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800840a:	1d19      	adds	r1, r3, #4
 800840c:	9100      	str	r1, [sp, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f010 0f01 	tst.w	r0, #1
 8008414:	bf14      	ite	ne
 8008416:	801a      	strhne	r2, [r3, #0]
 8008418:	601a      	streq	r2, [r3, #0]
 800841a:	e6f2      	b.n	8008202 <__ssvfiscanf_r+0x4e>
 800841c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800841e:	4621      	mov	r1, r4
 8008420:	4630      	mov	r0, r6
 8008422:	4798      	blx	r3
 8008424:	2800      	cmp	r0, #0
 8008426:	d0b6      	beq.n	8008396 <__ssvfiscanf_r+0x1e2>
 8008428:	e79c      	b.n	8008364 <__ssvfiscanf_r+0x1b0>
 800842a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800842c:	3201      	adds	r2, #1
 800842e:	9245      	str	r2, [sp, #276]	; 0x114
 8008430:	6862      	ldr	r2, [r4, #4]
 8008432:	3a01      	subs	r2, #1
 8008434:	2a00      	cmp	r2, #0
 8008436:	6062      	str	r2, [r4, #4]
 8008438:	dd02      	ble.n	8008440 <__ssvfiscanf_r+0x28c>
 800843a:	3301      	adds	r3, #1
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	e7ad      	b.n	800839c <__ssvfiscanf_r+0x1e8>
 8008440:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008442:	4621      	mov	r1, r4
 8008444:	4630      	mov	r0, r6
 8008446:	4798      	blx	r3
 8008448:	2800      	cmp	r0, #0
 800844a:	d0a7      	beq.n	800839c <__ssvfiscanf_r+0x1e8>
 800844c:	e78a      	b.n	8008364 <__ssvfiscanf_r+0x1b0>
 800844e:	2b04      	cmp	r3, #4
 8008450:	dc0e      	bgt.n	8008470 <__ssvfiscanf_r+0x2bc>
 8008452:	466b      	mov	r3, sp
 8008454:	4622      	mov	r2, r4
 8008456:	a941      	add	r1, sp, #260	; 0x104
 8008458:	4630      	mov	r0, r6
 800845a:	f000 f87d 	bl	8008558 <_scanf_i>
 800845e:	e7ab      	b.n	80083b8 <__ssvfiscanf_r+0x204>
 8008460:	08008101 	.word	0x08008101
 8008464:	0800817b 	.word	0x0800817b
 8008468:	080097e1 	.word	0x080097e1
 800846c:	08009b4a 	.word	0x08009b4a
 8008470:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <__ssvfiscanf_r+0x2ec>)
 8008472:	2b00      	cmp	r3, #0
 8008474:	f43f aec5 	beq.w	8008202 <__ssvfiscanf_r+0x4e>
 8008478:	466b      	mov	r3, sp
 800847a:	4622      	mov	r2, r4
 800847c:	a941      	add	r1, sp, #260	; 0x104
 800847e:	4630      	mov	r0, r6
 8008480:	f7fc fb8a 	bl	8004b98 <_scanf_float>
 8008484:	e798      	b.n	80083b8 <__ssvfiscanf_r+0x204>
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	f013 0f40 	tst.w	r3, #64	; 0x40
 800848c:	bf18      	it	ne
 800848e:	f04f 30ff 	movne.w	r0, #4294967295
 8008492:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800849a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800849c:	e7f9      	b.n	8008492 <__ssvfiscanf_r+0x2de>
 800849e:	bf00      	nop
 80084a0:	08004b99 	.word	0x08004b99

080084a4 <_scanf_chars>:
 80084a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a8:	4615      	mov	r5, r2
 80084aa:	688a      	ldr	r2, [r1, #8]
 80084ac:	4680      	mov	r8, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	b932      	cbnz	r2, 80084c0 <_scanf_chars+0x1c>
 80084b2:	698a      	ldr	r2, [r1, #24]
 80084b4:	2a00      	cmp	r2, #0
 80084b6:	bf0c      	ite	eq
 80084b8:	2201      	moveq	r2, #1
 80084ba:	f04f 32ff 	movne.w	r2, #4294967295
 80084be:	608a      	str	r2, [r1, #8]
 80084c0:	6822      	ldr	r2, [r4, #0]
 80084c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008554 <_scanf_chars+0xb0>
 80084c6:	06d1      	lsls	r1, r2, #27
 80084c8:	bf5f      	itttt	pl
 80084ca:	681a      	ldrpl	r2, [r3, #0]
 80084cc:	1d11      	addpl	r1, r2, #4
 80084ce:	6019      	strpl	r1, [r3, #0]
 80084d0:	6816      	ldrpl	r6, [r2, #0]
 80084d2:	2700      	movs	r7, #0
 80084d4:	69a0      	ldr	r0, [r4, #24]
 80084d6:	b188      	cbz	r0, 80084fc <_scanf_chars+0x58>
 80084d8:	2801      	cmp	r0, #1
 80084da:	d107      	bne.n	80084ec <_scanf_chars+0x48>
 80084dc:	682a      	ldr	r2, [r5, #0]
 80084de:	7811      	ldrb	r1, [r2, #0]
 80084e0:	6962      	ldr	r2, [r4, #20]
 80084e2:	5c52      	ldrb	r2, [r2, r1]
 80084e4:	b952      	cbnz	r2, 80084fc <_scanf_chars+0x58>
 80084e6:	2f00      	cmp	r7, #0
 80084e8:	d031      	beq.n	800854e <_scanf_chars+0xaa>
 80084ea:	e022      	b.n	8008532 <_scanf_chars+0x8e>
 80084ec:	2802      	cmp	r0, #2
 80084ee:	d120      	bne.n	8008532 <_scanf_chars+0x8e>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80084f8:	071b      	lsls	r3, r3, #28
 80084fa:	d41a      	bmi.n	8008532 <_scanf_chars+0x8e>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	06da      	lsls	r2, r3, #27
 8008500:	bf5e      	ittt	pl
 8008502:	682b      	ldrpl	r3, [r5, #0]
 8008504:	781b      	ldrbpl	r3, [r3, #0]
 8008506:	f806 3b01 	strbpl.w	r3, [r6], #1
 800850a:	682a      	ldr	r2, [r5, #0]
 800850c:	686b      	ldr	r3, [r5, #4]
 800850e:	3201      	adds	r2, #1
 8008510:	602a      	str	r2, [r5, #0]
 8008512:	68a2      	ldr	r2, [r4, #8]
 8008514:	3b01      	subs	r3, #1
 8008516:	3a01      	subs	r2, #1
 8008518:	606b      	str	r3, [r5, #4]
 800851a:	3701      	adds	r7, #1
 800851c:	60a2      	str	r2, [r4, #8]
 800851e:	b142      	cbz	r2, 8008532 <_scanf_chars+0x8e>
 8008520:	2b00      	cmp	r3, #0
 8008522:	dcd7      	bgt.n	80084d4 <_scanf_chars+0x30>
 8008524:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008528:	4629      	mov	r1, r5
 800852a:	4640      	mov	r0, r8
 800852c:	4798      	blx	r3
 800852e:	2800      	cmp	r0, #0
 8008530:	d0d0      	beq.n	80084d4 <_scanf_chars+0x30>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f013 0310 	ands.w	r3, r3, #16
 8008538:	d105      	bne.n	8008546 <_scanf_chars+0xa2>
 800853a:	68e2      	ldr	r2, [r4, #12]
 800853c:	3201      	adds	r2, #1
 800853e:	60e2      	str	r2, [r4, #12]
 8008540:	69a2      	ldr	r2, [r4, #24]
 8008542:	b102      	cbz	r2, 8008546 <_scanf_chars+0xa2>
 8008544:	7033      	strb	r3, [r6, #0]
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	443b      	add	r3, r7
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	2000      	movs	r0, #0
 800854e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008552:	bf00      	nop
 8008554:	080097e1 	.word	0x080097e1

08008558 <_scanf_i>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	4698      	mov	r8, r3
 800855e:	4b76      	ldr	r3, [pc, #472]	; (8008738 <_scanf_i+0x1e0>)
 8008560:	460c      	mov	r4, r1
 8008562:	4682      	mov	sl, r0
 8008564:	4616      	mov	r6, r2
 8008566:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800856a:	b087      	sub	sp, #28
 800856c:	ab03      	add	r3, sp, #12
 800856e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008572:	4b72      	ldr	r3, [pc, #456]	; (800873c <_scanf_i+0x1e4>)
 8008574:	69a1      	ldr	r1, [r4, #24]
 8008576:	4a72      	ldr	r2, [pc, #456]	; (8008740 <_scanf_i+0x1e8>)
 8008578:	2903      	cmp	r1, #3
 800857a:	bf18      	it	ne
 800857c:	461a      	movne	r2, r3
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	9201      	str	r2, [sp, #4]
 8008582:	1e5a      	subs	r2, r3, #1
 8008584:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008588:	bf88      	it	hi
 800858a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800858e:	4627      	mov	r7, r4
 8008590:	bf82      	ittt	hi
 8008592:	eb03 0905 	addhi.w	r9, r3, r5
 8008596:	f240 135d 	movwhi	r3, #349	; 0x15d
 800859a:	60a3      	strhi	r3, [r4, #8]
 800859c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80085a0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80085a4:	bf98      	it	ls
 80085a6:	f04f 0900 	movls.w	r9, #0
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	463d      	mov	r5, r7
 80085ae:	f04f 0b00 	mov.w	fp, #0
 80085b2:	6831      	ldr	r1, [r6, #0]
 80085b4:	ab03      	add	r3, sp, #12
 80085b6:	7809      	ldrb	r1, [r1, #0]
 80085b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80085bc:	2202      	movs	r2, #2
 80085be:	f7f7 fe27 	bl	8000210 <memchr>
 80085c2:	b328      	cbz	r0, 8008610 <_scanf_i+0xb8>
 80085c4:	f1bb 0f01 	cmp.w	fp, #1
 80085c8:	d159      	bne.n	800867e <_scanf_i+0x126>
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	b92a      	cbnz	r2, 80085da <_scanf_i+0x82>
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	2308      	movs	r3, #8
 80085d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085d6:	6063      	str	r3, [r4, #4]
 80085d8:	6022      	str	r2, [r4, #0]
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80085e0:	6022      	str	r2, [r4, #0]
 80085e2:	68a2      	ldr	r2, [r4, #8]
 80085e4:	1e51      	subs	r1, r2, #1
 80085e6:	60a1      	str	r1, [r4, #8]
 80085e8:	b192      	cbz	r2, 8008610 <_scanf_i+0xb8>
 80085ea:	6832      	ldr	r2, [r6, #0]
 80085ec:	1c51      	adds	r1, r2, #1
 80085ee:	6031      	str	r1, [r6, #0]
 80085f0:	7812      	ldrb	r2, [r2, #0]
 80085f2:	f805 2b01 	strb.w	r2, [r5], #1
 80085f6:	6872      	ldr	r2, [r6, #4]
 80085f8:	3a01      	subs	r2, #1
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	6072      	str	r2, [r6, #4]
 80085fe:	dc07      	bgt.n	8008610 <_scanf_i+0xb8>
 8008600:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008604:	4631      	mov	r1, r6
 8008606:	4650      	mov	r0, sl
 8008608:	4790      	blx	r2
 800860a:	2800      	cmp	r0, #0
 800860c:	f040 8085 	bne.w	800871a <_scanf_i+0x1c2>
 8008610:	f10b 0b01 	add.w	fp, fp, #1
 8008614:	f1bb 0f03 	cmp.w	fp, #3
 8008618:	d1cb      	bne.n	80085b2 <_scanf_i+0x5a>
 800861a:	6863      	ldr	r3, [r4, #4]
 800861c:	b90b      	cbnz	r3, 8008622 <_scanf_i+0xca>
 800861e:	230a      	movs	r3, #10
 8008620:	6063      	str	r3, [r4, #4]
 8008622:	6863      	ldr	r3, [r4, #4]
 8008624:	4947      	ldr	r1, [pc, #284]	; (8008744 <_scanf_i+0x1ec>)
 8008626:	6960      	ldr	r0, [r4, #20]
 8008628:	1ac9      	subs	r1, r1, r3
 800862a:	f000 f8b9 	bl	80087a0 <__sccl>
 800862e:	f04f 0b00 	mov.w	fp, #0
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d03d      	beq.n	80086b6 <_scanf_i+0x15e>
 800863a:	6831      	ldr	r1, [r6, #0]
 800863c:	6960      	ldr	r0, [r4, #20]
 800863e:	f891 c000 	ldrb.w	ip, [r1]
 8008642:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008646:	2800      	cmp	r0, #0
 8008648:	d035      	beq.n	80086b6 <_scanf_i+0x15e>
 800864a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800864e:	d124      	bne.n	800869a <_scanf_i+0x142>
 8008650:	0510      	lsls	r0, r2, #20
 8008652:	d522      	bpl.n	800869a <_scanf_i+0x142>
 8008654:	f10b 0b01 	add.w	fp, fp, #1
 8008658:	f1b9 0f00 	cmp.w	r9, #0
 800865c:	d003      	beq.n	8008666 <_scanf_i+0x10e>
 800865e:	3301      	adds	r3, #1
 8008660:	f109 39ff 	add.w	r9, r9, #4294967295
 8008664:	60a3      	str	r3, [r4, #8]
 8008666:	6873      	ldr	r3, [r6, #4]
 8008668:	3b01      	subs	r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	6073      	str	r3, [r6, #4]
 800866e:	dd1b      	ble.n	80086a8 <_scanf_i+0x150>
 8008670:	6833      	ldr	r3, [r6, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	6033      	str	r3, [r6, #0]
 8008676:	68a3      	ldr	r3, [r4, #8]
 8008678:	3b01      	subs	r3, #1
 800867a:	60a3      	str	r3, [r4, #8]
 800867c:	e7d9      	b.n	8008632 <_scanf_i+0xda>
 800867e:	f1bb 0f02 	cmp.w	fp, #2
 8008682:	d1ae      	bne.n	80085e2 <_scanf_i+0x8a>
 8008684:	6822      	ldr	r2, [r4, #0]
 8008686:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800868a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800868e:	d1bf      	bne.n	8008610 <_scanf_i+0xb8>
 8008690:	2310      	movs	r3, #16
 8008692:	6063      	str	r3, [r4, #4]
 8008694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008698:	e7a2      	b.n	80085e0 <_scanf_i+0x88>
 800869a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800869e:	6022      	str	r2, [r4, #0]
 80086a0:	780b      	ldrb	r3, [r1, #0]
 80086a2:	f805 3b01 	strb.w	r3, [r5], #1
 80086a6:	e7de      	b.n	8008666 <_scanf_i+0x10e>
 80086a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086ac:	4631      	mov	r1, r6
 80086ae:	4650      	mov	r0, sl
 80086b0:	4798      	blx	r3
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d0df      	beq.n	8008676 <_scanf_i+0x11e>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	05db      	lsls	r3, r3, #23
 80086ba:	d50d      	bpl.n	80086d8 <_scanf_i+0x180>
 80086bc:	42bd      	cmp	r5, r7
 80086be:	d909      	bls.n	80086d4 <_scanf_i+0x17c>
 80086c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80086c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086c8:	4632      	mov	r2, r6
 80086ca:	4650      	mov	r0, sl
 80086cc:	4798      	blx	r3
 80086ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80086d2:	464d      	mov	r5, r9
 80086d4:	42bd      	cmp	r5, r7
 80086d6:	d02d      	beq.n	8008734 <_scanf_i+0x1dc>
 80086d8:	6822      	ldr	r2, [r4, #0]
 80086da:	f012 0210 	ands.w	r2, r2, #16
 80086de:	d113      	bne.n	8008708 <_scanf_i+0x1b0>
 80086e0:	702a      	strb	r2, [r5, #0]
 80086e2:	6863      	ldr	r3, [r4, #4]
 80086e4:	9e01      	ldr	r6, [sp, #4]
 80086e6:	4639      	mov	r1, r7
 80086e8:	4650      	mov	r0, sl
 80086ea:	47b0      	blx	r6
 80086ec:	6821      	ldr	r1, [r4, #0]
 80086ee:	f8d8 3000 	ldr.w	r3, [r8]
 80086f2:	f011 0f20 	tst.w	r1, #32
 80086f6:	d013      	beq.n	8008720 <_scanf_i+0x1c8>
 80086f8:	1d1a      	adds	r2, r3, #4
 80086fa:	f8c8 2000 	str.w	r2, [r8]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	6018      	str	r0, [r3, #0]
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	3301      	adds	r3, #1
 8008706:	60e3      	str	r3, [r4, #12]
 8008708:	1bed      	subs	r5, r5, r7
 800870a:	44ab      	add	fp, r5
 800870c:	6925      	ldr	r5, [r4, #16]
 800870e:	445d      	add	r5, fp
 8008710:	6125      	str	r5, [r4, #16]
 8008712:	2000      	movs	r0, #0
 8008714:	b007      	add	sp, #28
 8008716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871a:	f04f 0b00 	mov.w	fp, #0
 800871e:	e7ca      	b.n	80086b6 <_scanf_i+0x15e>
 8008720:	1d1a      	adds	r2, r3, #4
 8008722:	f8c8 2000 	str.w	r2, [r8]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f011 0f01 	tst.w	r1, #1
 800872c:	bf14      	ite	ne
 800872e:	8018      	strhne	r0, [r3, #0]
 8008730:	6018      	streq	r0, [r3, #0]
 8008732:	e7e6      	b.n	8008702 <_scanf_i+0x1aa>
 8008734:	2001      	movs	r0, #1
 8008736:	e7ed      	b.n	8008714 <_scanf_i+0x1bc>
 8008738:	08009748 	.word	0x08009748
 800873c:	0800891d 	.word	0x0800891d
 8008740:	08005e3d 	.word	0x08005e3d
 8008744:	08009b6e 	.word	0x08009b6e

08008748 <_read_r>:
 8008748:	b538      	push	{r3, r4, r5, lr}
 800874a:	4d07      	ldr	r5, [pc, #28]	; (8008768 <_read_r+0x20>)
 800874c:	4604      	mov	r4, r0
 800874e:	4608      	mov	r0, r1
 8008750:	4611      	mov	r1, r2
 8008752:	2200      	movs	r2, #0
 8008754:	602a      	str	r2, [r5, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	f7f9 f977 	bl	8001a4a <_read>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_read_r+0x1e>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_read_r+0x1e>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20000c1c 	.word	0x20000c1c
 800876c:	00000000 	.word	0x00000000

08008770 <nan>:
 8008770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008778 <nan+0x8>
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	00000000 	.word	0x00000000
 800877c:	7ff80000 	.word	0x7ff80000

08008780 <_sbrk_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d06      	ldr	r5, [pc, #24]	; (800879c <_sbrk_r+0x1c>)
 8008784:	2300      	movs	r3, #0
 8008786:	4604      	mov	r4, r0
 8008788:	4608      	mov	r0, r1
 800878a:	602b      	str	r3, [r5, #0]
 800878c:	f7f9 f9ca 	bl	8001b24 <_sbrk>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d102      	bne.n	800879a <_sbrk_r+0x1a>
 8008794:	682b      	ldr	r3, [r5, #0]
 8008796:	b103      	cbz	r3, 800879a <_sbrk_r+0x1a>
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	bd38      	pop	{r3, r4, r5, pc}
 800879c:	20000c1c 	.word	0x20000c1c

080087a0 <__sccl>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	780b      	ldrb	r3, [r1, #0]
 80087a4:	4604      	mov	r4, r0
 80087a6:	2b5e      	cmp	r3, #94	; 0x5e
 80087a8:	bf0b      	itete	eq
 80087aa:	784b      	ldrbeq	r3, [r1, #1]
 80087ac:	1c48      	addne	r0, r1, #1
 80087ae:	1c88      	addeq	r0, r1, #2
 80087b0:	2200      	movne	r2, #0
 80087b2:	bf08      	it	eq
 80087b4:	2201      	moveq	r2, #1
 80087b6:	1e61      	subs	r1, r4, #1
 80087b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80087bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80087c0:	42a9      	cmp	r1, r5
 80087c2:	d1fb      	bne.n	80087bc <__sccl+0x1c>
 80087c4:	b90b      	cbnz	r3, 80087ca <__sccl+0x2a>
 80087c6:	3801      	subs	r0, #1
 80087c8:	bd70      	pop	{r4, r5, r6, pc}
 80087ca:	f082 0201 	eor.w	r2, r2, #1
 80087ce:	54e2      	strb	r2, [r4, r3]
 80087d0:	4605      	mov	r5, r0
 80087d2:	4628      	mov	r0, r5
 80087d4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80087d8:	292d      	cmp	r1, #45	; 0x2d
 80087da:	d006      	beq.n	80087ea <__sccl+0x4a>
 80087dc:	295d      	cmp	r1, #93	; 0x5d
 80087de:	d0f3      	beq.n	80087c8 <__sccl+0x28>
 80087e0:	b909      	cbnz	r1, 80087e6 <__sccl+0x46>
 80087e2:	4628      	mov	r0, r5
 80087e4:	e7f0      	b.n	80087c8 <__sccl+0x28>
 80087e6:	460b      	mov	r3, r1
 80087e8:	e7f1      	b.n	80087ce <__sccl+0x2e>
 80087ea:	786e      	ldrb	r6, [r5, #1]
 80087ec:	2e5d      	cmp	r6, #93	; 0x5d
 80087ee:	d0fa      	beq.n	80087e6 <__sccl+0x46>
 80087f0:	42b3      	cmp	r3, r6
 80087f2:	dcf8      	bgt.n	80087e6 <__sccl+0x46>
 80087f4:	3502      	adds	r5, #2
 80087f6:	4619      	mov	r1, r3
 80087f8:	3101      	adds	r1, #1
 80087fa:	428e      	cmp	r6, r1
 80087fc:	5462      	strb	r2, [r4, r1]
 80087fe:	dcfb      	bgt.n	80087f8 <__sccl+0x58>
 8008800:	1af1      	subs	r1, r6, r3
 8008802:	3901      	subs	r1, #1
 8008804:	1c58      	adds	r0, r3, #1
 8008806:	42b3      	cmp	r3, r6
 8008808:	bfa8      	it	ge
 800880a:	2100      	movge	r1, #0
 800880c:	1843      	adds	r3, r0, r1
 800880e:	e7e0      	b.n	80087d2 <__sccl+0x32>

08008810 <strncmp>:
 8008810:	b510      	push	{r4, lr}
 8008812:	b17a      	cbz	r2, 8008834 <strncmp+0x24>
 8008814:	4603      	mov	r3, r0
 8008816:	3901      	subs	r1, #1
 8008818:	1884      	adds	r4, r0, r2
 800881a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800881e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008822:	4290      	cmp	r0, r2
 8008824:	d101      	bne.n	800882a <strncmp+0x1a>
 8008826:	42a3      	cmp	r3, r4
 8008828:	d101      	bne.n	800882e <strncmp+0x1e>
 800882a:	1a80      	subs	r0, r0, r2
 800882c:	bd10      	pop	{r4, pc}
 800882e:	2800      	cmp	r0, #0
 8008830:	d1f3      	bne.n	800881a <strncmp+0xa>
 8008832:	e7fa      	b.n	800882a <strncmp+0x1a>
 8008834:	4610      	mov	r0, r2
 8008836:	e7f9      	b.n	800882c <strncmp+0x1c>

08008838 <_strtoul_l.constprop.0>:
 8008838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800883c:	4f36      	ldr	r7, [pc, #216]	; (8008918 <_strtoul_l.constprop.0+0xe0>)
 800883e:	4686      	mov	lr, r0
 8008840:	460d      	mov	r5, r1
 8008842:	4628      	mov	r0, r5
 8008844:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008848:	5de6      	ldrb	r6, [r4, r7]
 800884a:	f016 0608 	ands.w	r6, r6, #8
 800884e:	d1f8      	bne.n	8008842 <_strtoul_l.constprop.0+0xa>
 8008850:	2c2d      	cmp	r4, #45	; 0x2d
 8008852:	d12f      	bne.n	80088b4 <_strtoul_l.constprop.0+0x7c>
 8008854:	782c      	ldrb	r4, [r5, #0]
 8008856:	2601      	movs	r6, #1
 8008858:	1c85      	adds	r5, r0, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d057      	beq.n	800890e <_strtoul_l.constprop.0+0xd6>
 800885e:	2b10      	cmp	r3, #16
 8008860:	d109      	bne.n	8008876 <_strtoul_l.constprop.0+0x3e>
 8008862:	2c30      	cmp	r4, #48	; 0x30
 8008864:	d107      	bne.n	8008876 <_strtoul_l.constprop.0+0x3e>
 8008866:	7828      	ldrb	r0, [r5, #0]
 8008868:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800886c:	2858      	cmp	r0, #88	; 0x58
 800886e:	d149      	bne.n	8008904 <_strtoul_l.constprop.0+0xcc>
 8008870:	786c      	ldrb	r4, [r5, #1]
 8008872:	2310      	movs	r3, #16
 8008874:	3502      	adds	r5, #2
 8008876:	f04f 38ff 	mov.w	r8, #4294967295
 800887a:	2700      	movs	r7, #0
 800887c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008880:	fb03 f908 	mul.w	r9, r3, r8
 8008884:	ea6f 0909 	mvn.w	r9, r9
 8008888:	4638      	mov	r0, r7
 800888a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800888e:	f1bc 0f09 	cmp.w	ip, #9
 8008892:	d814      	bhi.n	80088be <_strtoul_l.constprop.0+0x86>
 8008894:	4664      	mov	r4, ip
 8008896:	42a3      	cmp	r3, r4
 8008898:	dd22      	ble.n	80088e0 <_strtoul_l.constprop.0+0xa8>
 800889a:	2f00      	cmp	r7, #0
 800889c:	db1d      	blt.n	80088da <_strtoul_l.constprop.0+0xa2>
 800889e:	4580      	cmp	r8, r0
 80088a0:	d31b      	bcc.n	80088da <_strtoul_l.constprop.0+0xa2>
 80088a2:	d101      	bne.n	80088a8 <_strtoul_l.constprop.0+0x70>
 80088a4:	45a1      	cmp	r9, r4
 80088a6:	db18      	blt.n	80088da <_strtoul_l.constprop.0+0xa2>
 80088a8:	fb00 4003 	mla	r0, r0, r3, r4
 80088ac:	2701      	movs	r7, #1
 80088ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088b2:	e7ea      	b.n	800888a <_strtoul_l.constprop.0+0x52>
 80088b4:	2c2b      	cmp	r4, #43	; 0x2b
 80088b6:	bf04      	itt	eq
 80088b8:	782c      	ldrbeq	r4, [r5, #0]
 80088ba:	1c85      	addeq	r5, r0, #2
 80088bc:	e7cd      	b.n	800885a <_strtoul_l.constprop.0+0x22>
 80088be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80088c2:	f1bc 0f19 	cmp.w	ip, #25
 80088c6:	d801      	bhi.n	80088cc <_strtoul_l.constprop.0+0x94>
 80088c8:	3c37      	subs	r4, #55	; 0x37
 80088ca:	e7e4      	b.n	8008896 <_strtoul_l.constprop.0+0x5e>
 80088cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80088d0:	f1bc 0f19 	cmp.w	ip, #25
 80088d4:	d804      	bhi.n	80088e0 <_strtoul_l.constprop.0+0xa8>
 80088d6:	3c57      	subs	r4, #87	; 0x57
 80088d8:	e7dd      	b.n	8008896 <_strtoul_l.constprop.0+0x5e>
 80088da:	f04f 37ff 	mov.w	r7, #4294967295
 80088de:	e7e6      	b.n	80088ae <_strtoul_l.constprop.0+0x76>
 80088e0:	2f00      	cmp	r7, #0
 80088e2:	da07      	bge.n	80088f4 <_strtoul_l.constprop.0+0xbc>
 80088e4:	2322      	movs	r3, #34	; 0x22
 80088e6:	f8ce 3000 	str.w	r3, [lr]
 80088ea:	f04f 30ff 	mov.w	r0, #4294967295
 80088ee:	b932      	cbnz	r2, 80088fe <_strtoul_l.constprop.0+0xc6>
 80088f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088f4:	b106      	cbz	r6, 80088f8 <_strtoul_l.constprop.0+0xc0>
 80088f6:	4240      	negs	r0, r0
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	d0f9      	beq.n	80088f0 <_strtoul_l.constprop.0+0xb8>
 80088fc:	b107      	cbz	r7, 8008900 <_strtoul_l.constprop.0+0xc8>
 80088fe:	1e69      	subs	r1, r5, #1
 8008900:	6011      	str	r1, [r2, #0]
 8008902:	e7f5      	b.n	80088f0 <_strtoul_l.constprop.0+0xb8>
 8008904:	2430      	movs	r4, #48	; 0x30
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1b5      	bne.n	8008876 <_strtoul_l.constprop.0+0x3e>
 800890a:	2308      	movs	r3, #8
 800890c:	e7b3      	b.n	8008876 <_strtoul_l.constprop.0+0x3e>
 800890e:	2c30      	cmp	r4, #48	; 0x30
 8008910:	d0a9      	beq.n	8008866 <_strtoul_l.constprop.0+0x2e>
 8008912:	230a      	movs	r3, #10
 8008914:	e7af      	b.n	8008876 <_strtoul_l.constprop.0+0x3e>
 8008916:	bf00      	nop
 8008918:	080097e1 	.word	0x080097e1

0800891c <_strtoul_r>:
 800891c:	f7ff bf8c 	b.w	8008838 <_strtoul_l.constprop.0>

08008920 <__submore>:
 8008920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800892c:	4299      	cmp	r1, r3
 800892e:	d11d      	bne.n	800896c <__submore+0x4c>
 8008930:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008934:	f7ff fa14 	bl	8007d60 <_malloc_r>
 8008938:	b918      	cbnz	r0, 8008942 <__submore+0x22>
 800893a:	f04f 30ff 	mov.w	r0, #4294967295
 800893e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008946:	63a3      	str	r3, [r4, #56]	; 0x38
 8008948:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800894c:	6360      	str	r0, [r4, #52]	; 0x34
 800894e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008952:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008956:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800895a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800895e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008962:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008966:	6020      	str	r0, [r4, #0]
 8008968:	2000      	movs	r0, #0
 800896a:	e7e8      	b.n	800893e <__submore+0x1e>
 800896c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800896e:	0077      	lsls	r7, r6, #1
 8008970:	463a      	mov	r2, r7
 8008972:	f000 fa2d 	bl	8008dd0 <_realloc_r>
 8008976:	4605      	mov	r5, r0
 8008978:	2800      	cmp	r0, #0
 800897a:	d0de      	beq.n	800893a <__submore+0x1a>
 800897c:	eb00 0806 	add.w	r8, r0, r6
 8008980:	4601      	mov	r1, r0
 8008982:	4632      	mov	r2, r6
 8008984:	4640      	mov	r0, r8
 8008986:	f7fe fc99 	bl	80072bc <memcpy>
 800898a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800898e:	f8c4 8000 	str.w	r8, [r4]
 8008992:	e7e9      	b.n	8008968 <__submore+0x48>

08008994 <__ascii_wctomb>:
 8008994:	b149      	cbz	r1, 80089aa <__ascii_wctomb+0x16>
 8008996:	2aff      	cmp	r2, #255	; 0xff
 8008998:	bf85      	ittet	hi
 800899a:	238a      	movhi	r3, #138	; 0x8a
 800899c:	6003      	strhi	r3, [r0, #0]
 800899e:	700a      	strbls	r2, [r1, #0]
 80089a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80089a4:	bf98      	it	ls
 80089a6:	2001      	movls	r0, #1
 80089a8:	4770      	bx	lr
 80089aa:	4608      	mov	r0, r1
 80089ac:	4770      	bx	lr
	...

080089b0 <__assert_func>:
 80089b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089b2:	4614      	mov	r4, r2
 80089b4:	461a      	mov	r2, r3
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <__assert_func+0x2c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4605      	mov	r5, r0
 80089bc:	68d8      	ldr	r0, [r3, #12]
 80089be:	b14c      	cbz	r4, 80089d4 <__assert_func+0x24>
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <__assert_func+0x30>)
 80089c2:	9100      	str	r1, [sp, #0]
 80089c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089c8:	4906      	ldr	r1, [pc, #24]	; (80089e4 <__assert_func+0x34>)
 80089ca:	462b      	mov	r3, r5
 80089cc:	f000 f9a6 	bl	8008d1c <fiprintf>
 80089d0:	f000 fc46 	bl	8009260 <abort>
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <__assert_func+0x38>)
 80089d6:	461c      	mov	r4, r3
 80089d8:	e7f3      	b.n	80089c2 <__assert_func+0x12>
 80089da:	bf00      	nop
 80089dc:	2000000c 	.word	0x2000000c
 80089e0:	08009b70 	.word	0x08009b70
 80089e4:	08009b7d 	.word	0x08009b7d
 80089e8:	08009bab 	.word	0x08009bab

080089ec <__sflush_r>:
 80089ec:	898a      	ldrh	r2, [r1, #12]
 80089ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f2:	4605      	mov	r5, r0
 80089f4:	0710      	lsls	r0, r2, #28
 80089f6:	460c      	mov	r4, r1
 80089f8:	d458      	bmi.n	8008aac <__sflush_r+0xc0>
 80089fa:	684b      	ldr	r3, [r1, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dc05      	bgt.n	8008a0c <__sflush_r+0x20>
 8008a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dc02      	bgt.n	8008a0c <__sflush_r+0x20>
 8008a06:	2000      	movs	r0, #0
 8008a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	d0f9      	beq.n	8008a06 <__sflush_r+0x1a>
 8008a12:	2300      	movs	r3, #0
 8008a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a18:	682f      	ldr	r7, [r5, #0]
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	d032      	beq.n	8008a84 <__sflush_r+0x98>
 8008a1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	075a      	lsls	r2, r3, #29
 8008a24:	d505      	bpl.n	8008a32 <__sflush_r+0x46>
 8008a26:	6863      	ldr	r3, [r4, #4]
 8008a28:	1ac0      	subs	r0, r0, r3
 8008a2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a2c:	b10b      	cbz	r3, 8008a32 <__sflush_r+0x46>
 8008a2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a30:	1ac0      	subs	r0, r0, r3
 8008a32:	2300      	movs	r3, #0
 8008a34:	4602      	mov	r2, r0
 8008a36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a38:	6a21      	ldr	r1, [r4, #32]
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b0      	blx	r6
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	d106      	bne.n	8008a52 <__sflush_r+0x66>
 8008a44:	6829      	ldr	r1, [r5, #0]
 8008a46:	291d      	cmp	r1, #29
 8008a48:	d82c      	bhi.n	8008aa4 <__sflush_r+0xb8>
 8008a4a:	4a2a      	ldr	r2, [pc, #168]	; (8008af4 <__sflush_r+0x108>)
 8008a4c:	40ca      	lsrs	r2, r1
 8008a4e:	07d6      	lsls	r6, r2, #31
 8008a50:	d528      	bpl.n	8008aa4 <__sflush_r+0xb8>
 8008a52:	2200      	movs	r2, #0
 8008a54:	6062      	str	r2, [r4, #4]
 8008a56:	04d9      	lsls	r1, r3, #19
 8008a58:	6922      	ldr	r2, [r4, #16]
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	d504      	bpl.n	8008a68 <__sflush_r+0x7c>
 8008a5e:	1c42      	adds	r2, r0, #1
 8008a60:	d101      	bne.n	8008a66 <__sflush_r+0x7a>
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	b903      	cbnz	r3, 8008a68 <__sflush_r+0x7c>
 8008a66:	6560      	str	r0, [r4, #84]	; 0x54
 8008a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a6a:	602f      	str	r7, [r5, #0]
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	d0ca      	beq.n	8008a06 <__sflush_r+0x1a>
 8008a70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a74:	4299      	cmp	r1, r3
 8008a76:	d002      	beq.n	8008a7e <__sflush_r+0x92>
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f7ff f905 	bl	8007c88 <_free_r>
 8008a7e:	2000      	movs	r0, #0
 8008a80:	6360      	str	r0, [r4, #52]	; 0x34
 8008a82:	e7c1      	b.n	8008a08 <__sflush_r+0x1c>
 8008a84:	6a21      	ldr	r1, [r4, #32]
 8008a86:	2301      	movs	r3, #1
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b0      	blx	r6
 8008a8c:	1c41      	adds	r1, r0, #1
 8008a8e:	d1c7      	bne.n	8008a20 <__sflush_r+0x34>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d0c4      	beq.n	8008a20 <__sflush_r+0x34>
 8008a96:	2b1d      	cmp	r3, #29
 8008a98:	d001      	beq.n	8008a9e <__sflush_r+0xb2>
 8008a9a:	2b16      	cmp	r3, #22
 8008a9c:	d101      	bne.n	8008aa2 <__sflush_r+0xb6>
 8008a9e:	602f      	str	r7, [r5, #0]
 8008aa0:	e7b1      	b.n	8008a06 <__sflush_r+0x1a>
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	e7ad      	b.n	8008a08 <__sflush_r+0x1c>
 8008aac:	690f      	ldr	r7, [r1, #16]
 8008aae:	2f00      	cmp	r7, #0
 8008ab0:	d0a9      	beq.n	8008a06 <__sflush_r+0x1a>
 8008ab2:	0793      	lsls	r3, r2, #30
 8008ab4:	680e      	ldr	r6, [r1, #0]
 8008ab6:	bf08      	it	eq
 8008ab8:	694b      	ldreq	r3, [r1, #20]
 8008aba:	600f      	str	r7, [r1, #0]
 8008abc:	bf18      	it	ne
 8008abe:	2300      	movne	r3, #0
 8008ac0:	eba6 0807 	sub.w	r8, r6, r7
 8008ac4:	608b      	str	r3, [r1, #8]
 8008ac6:	f1b8 0f00 	cmp.w	r8, #0
 8008aca:	dd9c      	ble.n	8008a06 <__sflush_r+0x1a>
 8008acc:	6a21      	ldr	r1, [r4, #32]
 8008ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ad0:	4643      	mov	r3, r8
 8008ad2:	463a      	mov	r2, r7
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b0      	blx	r6
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	dc06      	bgt.n	8008aea <__sflush_r+0xfe>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	e78e      	b.n	8008a08 <__sflush_r+0x1c>
 8008aea:	4407      	add	r7, r0
 8008aec:	eba8 0800 	sub.w	r8, r8, r0
 8008af0:	e7e9      	b.n	8008ac6 <__sflush_r+0xda>
 8008af2:	bf00      	nop
 8008af4:	20400001 	.word	0x20400001

08008af8 <_fflush_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	690b      	ldr	r3, [r1, #16]
 8008afc:	4605      	mov	r5, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	b913      	cbnz	r3, 8008b08 <_fflush_r+0x10>
 8008b02:	2500      	movs	r5, #0
 8008b04:	4628      	mov	r0, r5
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	b118      	cbz	r0, 8008b12 <_fflush_r+0x1a>
 8008b0a:	6983      	ldr	r3, [r0, #24]
 8008b0c:	b90b      	cbnz	r3, 8008b12 <_fflush_r+0x1a>
 8008b0e:	f000 f887 	bl	8008c20 <__sinit>
 8008b12:	4b14      	ldr	r3, [pc, #80]	; (8008b64 <_fflush_r+0x6c>)
 8008b14:	429c      	cmp	r4, r3
 8008b16:	d11b      	bne.n	8008b50 <_fflush_r+0x58>
 8008b18:	686c      	ldr	r4, [r5, #4]
 8008b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0ef      	beq.n	8008b02 <_fflush_r+0xa>
 8008b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b24:	07d0      	lsls	r0, r2, #31
 8008b26:	d404      	bmi.n	8008b32 <_fflush_r+0x3a>
 8008b28:	0599      	lsls	r1, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_fflush_r+0x3a>
 8008b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b2e:	f000 f927 	bl	8008d80 <__retarget_lock_acquire_recursive>
 8008b32:	4628      	mov	r0, r5
 8008b34:	4621      	mov	r1, r4
 8008b36:	f7ff ff59 	bl	80089ec <__sflush_r>
 8008b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b3c:	07da      	lsls	r2, r3, #31
 8008b3e:	4605      	mov	r5, r0
 8008b40:	d4e0      	bmi.n	8008b04 <_fflush_r+0xc>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	059b      	lsls	r3, r3, #22
 8008b46:	d4dd      	bmi.n	8008b04 <_fflush_r+0xc>
 8008b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4a:	f000 f91a 	bl	8008d82 <__retarget_lock_release_recursive>
 8008b4e:	e7d9      	b.n	8008b04 <_fflush_r+0xc>
 8008b50:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <_fflush_r+0x70>)
 8008b52:	429c      	cmp	r4, r3
 8008b54:	d101      	bne.n	8008b5a <_fflush_r+0x62>
 8008b56:	68ac      	ldr	r4, [r5, #8]
 8008b58:	e7df      	b.n	8008b1a <_fflush_r+0x22>
 8008b5a:	4b04      	ldr	r3, [pc, #16]	; (8008b6c <_fflush_r+0x74>)
 8008b5c:	429c      	cmp	r4, r3
 8008b5e:	bf08      	it	eq
 8008b60:	68ec      	ldreq	r4, [r5, #12]
 8008b62:	e7da      	b.n	8008b1a <_fflush_r+0x22>
 8008b64:	08009bcc 	.word	0x08009bcc
 8008b68:	08009bec 	.word	0x08009bec
 8008b6c:	08009bac 	.word	0x08009bac

08008b70 <std>:
 8008b70:	2300      	movs	r3, #0
 8008b72:	b510      	push	{r4, lr}
 8008b74:	4604      	mov	r4, r0
 8008b76:	e9c0 3300 	strd	r3, r3, [r0]
 8008b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b7e:	6083      	str	r3, [r0, #8]
 8008b80:	8181      	strh	r1, [r0, #12]
 8008b82:	6643      	str	r3, [r0, #100]	; 0x64
 8008b84:	81c2      	strh	r2, [r0, #14]
 8008b86:	6183      	str	r3, [r0, #24]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	2208      	movs	r2, #8
 8008b8c:	305c      	adds	r0, #92	; 0x5c
 8008b8e:	f7fb fb91 	bl	80042b4 <memset>
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <std+0x38>)
 8008b94:	6263      	str	r3, [r4, #36]	; 0x24
 8008b96:	4b05      	ldr	r3, [pc, #20]	; (8008bac <std+0x3c>)
 8008b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <std+0x40>)
 8008b9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <std+0x44>)
 8008ba0:	6224      	str	r4, [r4, #32]
 8008ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	bf00      	nop
 8008ba8:	0800505d 	.word	0x0800505d
 8008bac:	08005083 	.word	0x08005083
 8008bb0:	080050bb 	.word	0x080050bb
 8008bb4:	080050df 	.word	0x080050df

08008bb8 <_cleanup_r>:
 8008bb8:	4901      	ldr	r1, [pc, #4]	; (8008bc0 <_cleanup_r+0x8>)
 8008bba:	f000 b8c1 	b.w	8008d40 <_fwalk_reent>
 8008bbe:	bf00      	nop
 8008bc0:	08008af9 	.word	0x08008af9

08008bc4 <__sfmoreglue>:
 8008bc4:	b570      	push	{r4, r5, r6, lr}
 8008bc6:	2268      	movs	r2, #104	; 0x68
 8008bc8:	1e4d      	subs	r5, r1, #1
 8008bca:	4355      	muls	r5, r2
 8008bcc:	460e      	mov	r6, r1
 8008bce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bd2:	f7ff f8c5 	bl	8007d60 <_malloc_r>
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	b140      	cbz	r0, 8008bec <__sfmoreglue+0x28>
 8008bda:	2100      	movs	r1, #0
 8008bdc:	e9c0 1600 	strd	r1, r6, [r0]
 8008be0:	300c      	adds	r0, #12
 8008be2:	60a0      	str	r0, [r4, #8]
 8008be4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008be8:	f7fb fb64 	bl	80042b4 <memset>
 8008bec:	4620      	mov	r0, r4
 8008bee:	bd70      	pop	{r4, r5, r6, pc}

08008bf0 <__sfp_lock_acquire>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	; (8008bf8 <__sfp_lock_acquire+0x8>)
 8008bf2:	f000 b8c5 	b.w	8008d80 <__retarget_lock_acquire_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20000c21 	.word	0x20000c21

08008bfc <__sfp_lock_release>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__sfp_lock_release+0x8>)
 8008bfe:	f000 b8c0 	b.w	8008d82 <__retarget_lock_release_recursive>
 8008c02:	bf00      	nop
 8008c04:	20000c21 	.word	0x20000c21

08008c08 <__sinit_lock_acquire>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__sinit_lock_acquire+0x8>)
 8008c0a:	f000 b8b9 	b.w	8008d80 <__retarget_lock_acquire_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20000c22 	.word	0x20000c22

08008c14 <__sinit_lock_release>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__sinit_lock_release+0x8>)
 8008c16:	f000 b8b4 	b.w	8008d82 <__retarget_lock_release_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	20000c22 	.word	0x20000c22

08008c20 <__sinit>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	4604      	mov	r4, r0
 8008c24:	f7ff fff0 	bl	8008c08 <__sinit_lock_acquire>
 8008c28:	69a3      	ldr	r3, [r4, #24]
 8008c2a:	b11b      	cbz	r3, 8008c34 <__sinit+0x14>
 8008c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c30:	f7ff bff0 	b.w	8008c14 <__sinit_lock_release>
 8008c34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c38:	6523      	str	r3, [r4, #80]	; 0x50
 8008c3a:	4b13      	ldr	r3, [pc, #76]	; (8008c88 <__sinit+0x68>)
 8008c3c:	4a13      	ldr	r2, [pc, #76]	; (8008c8c <__sinit+0x6c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c42:	42a3      	cmp	r3, r4
 8008c44:	bf04      	itt	eq
 8008c46:	2301      	moveq	r3, #1
 8008c48:	61a3      	streq	r3, [r4, #24]
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 f820 	bl	8008c90 <__sfp>
 8008c50:	6060      	str	r0, [r4, #4]
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f81c 	bl	8008c90 <__sfp>
 8008c58:	60a0      	str	r0, [r4, #8]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 f818 	bl	8008c90 <__sfp>
 8008c60:	2200      	movs	r2, #0
 8008c62:	60e0      	str	r0, [r4, #12]
 8008c64:	2104      	movs	r1, #4
 8008c66:	6860      	ldr	r0, [r4, #4]
 8008c68:	f7ff ff82 	bl	8008b70 <std>
 8008c6c:	68a0      	ldr	r0, [r4, #8]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	2109      	movs	r1, #9
 8008c72:	f7ff ff7d 	bl	8008b70 <std>
 8008c76:	68e0      	ldr	r0, [r4, #12]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	2112      	movs	r1, #18
 8008c7c:	f7ff ff78 	bl	8008b70 <std>
 8008c80:	2301      	movs	r3, #1
 8008c82:	61a3      	str	r3, [r4, #24]
 8008c84:	e7d2      	b.n	8008c2c <__sinit+0xc>
 8008c86:	bf00      	nop
 8008c88:	08009754 	.word	0x08009754
 8008c8c:	08008bb9 	.word	0x08008bb9

08008c90 <__sfp>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	4607      	mov	r7, r0
 8008c94:	f7ff ffac 	bl	8008bf0 <__sfp_lock_acquire>
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <__sfp+0x84>)
 8008c9a:	681e      	ldr	r6, [r3, #0]
 8008c9c:	69b3      	ldr	r3, [r6, #24]
 8008c9e:	b913      	cbnz	r3, 8008ca6 <__sfp+0x16>
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7ff ffbd 	bl	8008c20 <__sinit>
 8008ca6:	3648      	adds	r6, #72	; 0x48
 8008ca8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	d503      	bpl.n	8008cb8 <__sfp+0x28>
 8008cb0:	6833      	ldr	r3, [r6, #0]
 8008cb2:	b30b      	cbz	r3, 8008cf8 <__sfp+0x68>
 8008cb4:	6836      	ldr	r6, [r6, #0]
 8008cb6:	e7f7      	b.n	8008ca8 <__sfp+0x18>
 8008cb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cbc:	b9d5      	cbnz	r5, 8008cf4 <__sfp+0x64>
 8008cbe:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <__sfp+0x88>)
 8008cc0:	60e3      	str	r3, [r4, #12]
 8008cc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cc6:	6665      	str	r5, [r4, #100]	; 0x64
 8008cc8:	f000 f859 	bl	8008d7e <__retarget_lock_init_recursive>
 8008ccc:	f7ff ff96 	bl	8008bfc <__sfp_lock_release>
 8008cd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008cd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008cd8:	6025      	str	r5, [r4, #0]
 8008cda:	61a5      	str	r5, [r4, #24]
 8008cdc:	2208      	movs	r2, #8
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ce4:	f7fb fae6 	bl	80042b4 <memset>
 8008ce8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008cec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf4:	3468      	adds	r4, #104	; 0x68
 8008cf6:	e7d9      	b.n	8008cac <__sfp+0x1c>
 8008cf8:	2104      	movs	r1, #4
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f7ff ff62 	bl	8008bc4 <__sfmoreglue>
 8008d00:	4604      	mov	r4, r0
 8008d02:	6030      	str	r0, [r6, #0]
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d1d5      	bne.n	8008cb4 <__sfp+0x24>
 8008d08:	f7ff ff78 	bl	8008bfc <__sfp_lock_release>
 8008d0c:	230c      	movs	r3, #12
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	e7ee      	b.n	8008cf0 <__sfp+0x60>
 8008d12:	bf00      	nop
 8008d14:	08009754 	.word	0x08009754
 8008d18:	ffff0001 	.word	0xffff0001

08008d1c <fiprintf>:
 8008d1c:	b40e      	push	{r1, r2, r3}
 8008d1e:	b503      	push	{r0, r1, lr}
 8008d20:	4601      	mov	r1, r0
 8008d22:	ab03      	add	r3, sp, #12
 8008d24:	4805      	ldr	r0, [pc, #20]	; (8008d3c <fiprintf+0x20>)
 8008d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2a:	6800      	ldr	r0, [r0, #0]
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	f000 f8a7 	bl	8008e80 <_vfiprintf_r>
 8008d32:	b002      	add	sp, #8
 8008d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d38:	b003      	add	sp, #12
 8008d3a:	4770      	bx	lr
 8008d3c:	2000000c 	.word	0x2000000c

08008d40 <_fwalk_reent>:
 8008d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d44:	4606      	mov	r6, r0
 8008d46:	4688      	mov	r8, r1
 8008d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d4c:	2700      	movs	r7, #0
 8008d4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d52:	f1b9 0901 	subs.w	r9, r9, #1
 8008d56:	d505      	bpl.n	8008d64 <_fwalk_reent+0x24>
 8008d58:	6824      	ldr	r4, [r4, #0]
 8008d5a:	2c00      	cmp	r4, #0
 8008d5c:	d1f7      	bne.n	8008d4e <_fwalk_reent+0xe>
 8008d5e:	4638      	mov	r0, r7
 8008d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d64:	89ab      	ldrh	r3, [r5, #12]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d907      	bls.n	8008d7a <_fwalk_reent+0x3a>
 8008d6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	d003      	beq.n	8008d7a <_fwalk_reent+0x3a>
 8008d72:	4629      	mov	r1, r5
 8008d74:	4630      	mov	r0, r6
 8008d76:	47c0      	blx	r8
 8008d78:	4307      	orrs	r7, r0
 8008d7a:	3568      	adds	r5, #104	; 0x68
 8008d7c:	e7e9      	b.n	8008d52 <_fwalk_reent+0x12>

08008d7e <__retarget_lock_init_recursive>:
 8008d7e:	4770      	bx	lr

08008d80 <__retarget_lock_acquire_recursive>:
 8008d80:	4770      	bx	lr

08008d82 <__retarget_lock_release_recursive>:
 8008d82:	4770      	bx	lr

08008d84 <memmove>:
 8008d84:	4288      	cmp	r0, r1
 8008d86:	b510      	push	{r4, lr}
 8008d88:	eb01 0402 	add.w	r4, r1, r2
 8008d8c:	d902      	bls.n	8008d94 <memmove+0x10>
 8008d8e:	4284      	cmp	r4, r0
 8008d90:	4623      	mov	r3, r4
 8008d92:	d807      	bhi.n	8008da4 <memmove+0x20>
 8008d94:	1e43      	subs	r3, r0, #1
 8008d96:	42a1      	cmp	r1, r4
 8008d98:	d008      	beq.n	8008dac <memmove+0x28>
 8008d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008da2:	e7f8      	b.n	8008d96 <memmove+0x12>
 8008da4:	4402      	add	r2, r0
 8008da6:	4601      	mov	r1, r0
 8008da8:	428a      	cmp	r2, r1
 8008daa:	d100      	bne.n	8008dae <memmove+0x2a>
 8008dac:	bd10      	pop	{r4, pc}
 8008dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008db6:	e7f7      	b.n	8008da8 <memmove+0x24>

08008db8 <__malloc_lock>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__malloc_lock+0x8>)
 8008dba:	f7ff bfe1 	b.w	8008d80 <__retarget_lock_acquire_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20000c20 	.word	0x20000c20

08008dc4 <__malloc_unlock>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	; (8008dcc <__malloc_unlock+0x8>)
 8008dc6:	f7ff bfdc 	b.w	8008d82 <__retarget_lock_release_recursive>
 8008dca:	bf00      	nop
 8008dcc:	20000c20 	.word	0x20000c20

08008dd0 <_realloc_r>:
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	4614      	mov	r4, r2
 8008dd8:	460e      	mov	r6, r1
 8008dda:	b921      	cbnz	r1, 8008de6 <_realloc_r+0x16>
 8008ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008de0:	4611      	mov	r1, r2
 8008de2:	f7fe bfbd 	b.w	8007d60 <_malloc_r>
 8008de6:	b92a      	cbnz	r2, 8008df4 <_realloc_r+0x24>
 8008de8:	f7fe ff4e 	bl	8007c88 <_free_r>
 8008dec:	4625      	mov	r5, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008df4:	f000 faa0 	bl	8009338 <_malloc_usable_size_r>
 8008df8:	4284      	cmp	r4, r0
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	d802      	bhi.n	8008e04 <_realloc_r+0x34>
 8008dfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e02:	d812      	bhi.n	8008e2a <_realloc_r+0x5a>
 8008e04:	4621      	mov	r1, r4
 8008e06:	4640      	mov	r0, r8
 8008e08:	f7fe ffaa 	bl	8007d60 <_malloc_r>
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d0ed      	beq.n	8008dee <_realloc_r+0x1e>
 8008e12:	42bc      	cmp	r4, r7
 8008e14:	4622      	mov	r2, r4
 8008e16:	4631      	mov	r1, r6
 8008e18:	bf28      	it	cs
 8008e1a:	463a      	movcs	r2, r7
 8008e1c:	f7fe fa4e 	bl	80072bc <memcpy>
 8008e20:	4631      	mov	r1, r6
 8008e22:	4640      	mov	r0, r8
 8008e24:	f7fe ff30 	bl	8007c88 <_free_r>
 8008e28:	e7e1      	b.n	8008dee <_realloc_r+0x1e>
 8008e2a:	4635      	mov	r5, r6
 8008e2c:	e7df      	b.n	8008dee <_realloc_r+0x1e>

08008e2e <__sfputc_r>:
 8008e2e:	6893      	ldr	r3, [r2, #8]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	b410      	push	{r4}
 8008e36:	6093      	str	r3, [r2, #8]
 8008e38:	da08      	bge.n	8008e4c <__sfputc_r+0x1e>
 8008e3a:	6994      	ldr	r4, [r2, #24]
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	db01      	blt.n	8008e44 <__sfputc_r+0x16>
 8008e40:	290a      	cmp	r1, #10
 8008e42:	d103      	bne.n	8008e4c <__sfputc_r+0x1e>
 8008e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e48:	f000 b94a 	b.w	80090e0 <__swbuf_r>
 8008e4c:	6813      	ldr	r3, [r2, #0]
 8008e4e:	1c58      	adds	r0, r3, #1
 8008e50:	6010      	str	r0, [r2, #0]
 8008e52:	7019      	strb	r1, [r3, #0]
 8008e54:	4608      	mov	r0, r1
 8008e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <__sfputs_r>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460f      	mov	r7, r1
 8008e62:	4614      	mov	r4, r2
 8008e64:	18d5      	adds	r5, r2, r3
 8008e66:	42ac      	cmp	r4, r5
 8008e68:	d101      	bne.n	8008e6e <__sfputs_r+0x12>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	e007      	b.n	8008e7e <__sfputs_r+0x22>
 8008e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e72:	463a      	mov	r2, r7
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ffda 	bl	8008e2e <__sfputc_r>
 8008e7a:	1c43      	adds	r3, r0, #1
 8008e7c:	d1f3      	bne.n	8008e66 <__sfputs_r+0xa>
 8008e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e80 <_vfiprintf_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	460d      	mov	r5, r1
 8008e86:	b09d      	sub	sp, #116	; 0x74
 8008e88:	4614      	mov	r4, r2
 8008e8a:	4698      	mov	r8, r3
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	b118      	cbz	r0, 8008e98 <_vfiprintf_r+0x18>
 8008e90:	6983      	ldr	r3, [r0, #24]
 8008e92:	b90b      	cbnz	r3, 8008e98 <_vfiprintf_r+0x18>
 8008e94:	f7ff fec4 	bl	8008c20 <__sinit>
 8008e98:	4b89      	ldr	r3, [pc, #548]	; (80090c0 <_vfiprintf_r+0x240>)
 8008e9a:	429d      	cmp	r5, r3
 8008e9c:	d11b      	bne.n	8008ed6 <_vfiprintf_r+0x56>
 8008e9e:	6875      	ldr	r5, [r6, #4]
 8008ea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ea2:	07d9      	lsls	r1, r3, #31
 8008ea4:	d405      	bmi.n	8008eb2 <_vfiprintf_r+0x32>
 8008ea6:	89ab      	ldrh	r3, [r5, #12]
 8008ea8:	059a      	lsls	r2, r3, #22
 8008eaa:	d402      	bmi.n	8008eb2 <_vfiprintf_r+0x32>
 8008eac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eae:	f7ff ff67 	bl	8008d80 <__retarget_lock_acquire_recursive>
 8008eb2:	89ab      	ldrh	r3, [r5, #12]
 8008eb4:	071b      	lsls	r3, r3, #28
 8008eb6:	d501      	bpl.n	8008ebc <_vfiprintf_r+0x3c>
 8008eb8:	692b      	ldr	r3, [r5, #16]
 8008eba:	b9eb      	cbnz	r3, 8008ef8 <_vfiprintf_r+0x78>
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f000 f960 	bl	8009184 <__swsetup_r>
 8008ec4:	b1c0      	cbz	r0, 8008ef8 <_vfiprintf_r+0x78>
 8008ec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec8:	07dc      	lsls	r4, r3, #31
 8008eca:	d50e      	bpl.n	8008eea <_vfiprintf_r+0x6a>
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed0:	b01d      	add	sp, #116	; 0x74
 8008ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed6:	4b7b      	ldr	r3, [pc, #492]	; (80090c4 <_vfiprintf_r+0x244>)
 8008ed8:	429d      	cmp	r5, r3
 8008eda:	d101      	bne.n	8008ee0 <_vfiprintf_r+0x60>
 8008edc:	68b5      	ldr	r5, [r6, #8]
 8008ede:	e7df      	b.n	8008ea0 <_vfiprintf_r+0x20>
 8008ee0:	4b79      	ldr	r3, [pc, #484]	; (80090c8 <_vfiprintf_r+0x248>)
 8008ee2:	429d      	cmp	r5, r3
 8008ee4:	bf08      	it	eq
 8008ee6:	68f5      	ldreq	r5, [r6, #12]
 8008ee8:	e7da      	b.n	8008ea0 <_vfiprintf_r+0x20>
 8008eea:	89ab      	ldrh	r3, [r5, #12]
 8008eec:	0598      	lsls	r0, r3, #22
 8008eee:	d4ed      	bmi.n	8008ecc <_vfiprintf_r+0x4c>
 8008ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ef2:	f7ff ff46 	bl	8008d82 <__retarget_lock_release_recursive>
 8008ef6:	e7e9      	b.n	8008ecc <_vfiprintf_r+0x4c>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9309      	str	r3, [sp, #36]	; 0x24
 8008efc:	2320      	movs	r3, #32
 8008efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f06:	2330      	movs	r3, #48	; 0x30
 8008f08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090cc <_vfiprintf_r+0x24c>
 8008f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f10:	f04f 0901 	mov.w	r9, #1
 8008f14:	4623      	mov	r3, r4
 8008f16:	469a      	mov	sl, r3
 8008f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f1c:	b10a      	cbz	r2, 8008f22 <_vfiprintf_r+0xa2>
 8008f1e:	2a25      	cmp	r2, #37	; 0x25
 8008f20:	d1f9      	bne.n	8008f16 <_vfiprintf_r+0x96>
 8008f22:	ebba 0b04 	subs.w	fp, sl, r4
 8008f26:	d00b      	beq.n	8008f40 <_vfiprintf_r+0xc0>
 8008f28:	465b      	mov	r3, fp
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f7ff ff94 	bl	8008e5c <__sfputs_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	f000 80aa 	beq.w	800908e <_vfiprintf_r+0x20e>
 8008f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f3c:	445a      	add	r2, fp
 8008f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f40:	f89a 3000 	ldrb.w	r3, [sl]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 80a2 	beq.w	800908e <_vfiprintf_r+0x20e>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f54:	f10a 0a01 	add.w	sl, sl, #1
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	9307      	str	r3, [sp, #28]
 8008f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f60:	931a      	str	r3, [sp, #104]	; 0x68
 8008f62:	4654      	mov	r4, sl
 8008f64:	2205      	movs	r2, #5
 8008f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6a:	4858      	ldr	r0, [pc, #352]	; (80090cc <_vfiprintf_r+0x24c>)
 8008f6c:	f7f7 f950 	bl	8000210 <memchr>
 8008f70:	9a04      	ldr	r2, [sp, #16]
 8008f72:	b9d8      	cbnz	r0, 8008fac <_vfiprintf_r+0x12c>
 8008f74:	06d1      	lsls	r1, r2, #27
 8008f76:	bf44      	itt	mi
 8008f78:	2320      	movmi	r3, #32
 8008f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f7e:	0713      	lsls	r3, r2, #28
 8008f80:	bf44      	itt	mi
 8008f82:	232b      	movmi	r3, #43	; 0x2b
 8008f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f88:	f89a 3000 	ldrb.w	r3, [sl]
 8008f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8e:	d015      	beq.n	8008fbc <_vfiprintf_r+0x13c>
 8008f90:	9a07      	ldr	r2, [sp, #28]
 8008f92:	4654      	mov	r4, sl
 8008f94:	2000      	movs	r0, #0
 8008f96:	f04f 0c0a 	mov.w	ip, #10
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa0:	3b30      	subs	r3, #48	; 0x30
 8008fa2:	2b09      	cmp	r3, #9
 8008fa4:	d94e      	bls.n	8009044 <_vfiprintf_r+0x1c4>
 8008fa6:	b1b0      	cbz	r0, 8008fd6 <_vfiprintf_r+0x156>
 8008fa8:	9207      	str	r2, [sp, #28]
 8008faa:	e014      	b.n	8008fd6 <_vfiprintf_r+0x156>
 8008fac:	eba0 0308 	sub.w	r3, r0, r8
 8008fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	9304      	str	r3, [sp, #16]
 8008fb8:	46a2      	mov	sl, r4
 8008fba:	e7d2      	b.n	8008f62 <_vfiprintf_r+0xe2>
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	1d19      	adds	r1, r3, #4
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	9103      	str	r1, [sp, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	bfbb      	ittet	lt
 8008fc8:	425b      	neglt	r3, r3
 8008fca:	f042 0202 	orrlt.w	r2, r2, #2
 8008fce:	9307      	strge	r3, [sp, #28]
 8008fd0:	9307      	strlt	r3, [sp, #28]
 8008fd2:	bfb8      	it	lt
 8008fd4:	9204      	strlt	r2, [sp, #16]
 8008fd6:	7823      	ldrb	r3, [r4, #0]
 8008fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8008fda:	d10c      	bne.n	8008ff6 <_vfiprintf_r+0x176>
 8008fdc:	7863      	ldrb	r3, [r4, #1]
 8008fde:	2b2a      	cmp	r3, #42	; 0x2a
 8008fe0:	d135      	bne.n	800904e <_vfiprintf_r+0x1ce>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	1d1a      	adds	r2, r3, #4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	9203      	str	r2, [sp, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bfb8      	it	lt
 8008fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ff2:	3402      	adds	r4, #2
 8008ff4:	9305      	str	r3, [sp, #20]
 8008ff6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090dc <_vfiprintf_r+0x25c>
 8008ffa:	7821      	ldrb	r1, [r4, #0]
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	4650      	mov	r0, sl
 8009000:	f7f7 f906 	bl	8000210 <memchr>
 8009004:	b140      	cbz	r0, 8009018 <_vfiprintf_r+0x198>
 8009006:	2340      	movs	r3, #64	; 0x40
 8009008:	eba0 000a 	sub.w	r0, r0, sl
 800900c:	fa03 f000 	lsl.w	r0, r3, r0
 8009010:	9b04      	ldr	r3, [sp, #16]
 8009012:	4303      	orrs	r3, r0
 8009014:	3401      	adds	r4, #1
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901c:	482c      	ldr	r0, [pc, #176]	; (80090d0 <_vfiprintf_r+0x250>)
 800901e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009022:	2206      	movs	r2, #6
 8009024:	f7f7 f8f4 	bl	8000210 <memchr>
 8009028:	2800      	cmp	r0, #0
 800902a:	d03f      	beq.n	80090ac <_vfiprintf_r+0x22c>
 800902c:	4b29      	ldr	r3, [pc, #164]	; (80090d4 <_vfiprintf_r+0x254>)
 800902e:	bb1b      	cbnz	r3, 8009078 <_vfiprintf_r+0x1f8>
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	3307      	adds	r3, #7
 8009034:	f023 0307 	bic.w	r3, r3, #7
 8009038:	3308      	adds	r3, #8
 800903a:	9303      	str	r3, [sp, #12]
 800903c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903e:	443b      	add	r3, r7
 8009040:	9309      	str	r3, [sp, #36]	; 0x24
 8009042:	e767      	b.n	8008f14 <_vfiprintf_r+0x94>
 8009044:	fb0c 3202 	mla	r2, ip, r2, r3
 8009048:	460c      	mov	r4, r1
 800904a:	2001      	movs	r0, #1
 800904c:	e7a5      	b.n	8008f9a <_vfiprintf_r+0x11a>
 800904e:	2300      	movs	r3, #0
 8009050:	3401      	adds	r4, #1
 8009052:	9305      	str	r3, [sp, #20]
 8009054:	4619      	mov	r1, r3
 8009056:	f04f 0c0a 	mov.w	ip, #10
 800905a:	4620      	mov	r0, r4
 800905c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009060:	3a30      	subs	r2, #48	; 0x30
 8009062:	2a09      	cmp	r2, #9
 8009064:	d903      	bls.n	800906e <_vfiprintf_r+0x1ee>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0c5      	beq.n	8008ff6 <_vfiprintf_r+0x176>
 800906a:	9105      	str	r1, [sp, #20]
 800906c:	e7c3      	b.n	8008ff6 <_vfiprintf_r+0x176>
 800906e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009072:	4604      	mov	r4, r0
 8009074:	2301      	movs	r3, #1
 8009076:	e7f0      	b.n	800905a <_vfiprintf_r+0x1da>
 8009078:	ab03      	add	r3, sp, #12
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	462a      	mov	r2, r5
 800907e:	4b16      	ldr	r3, [pc, #88]	; (80090d8 <_vfiprintf_r+0x258>)
 8009080:	a904      	add	r1, sp, #16
 8009082:	4630      	mov	r0, r6
 8009084:	f7fb f9be 	bl	8004404 <_printf_float>
 8009088:	4607      	mov	r7, r0
 800908a:	1c78      	adds	r0, r7, #1
 800908c:	d1d6      	bne.n	800903c <_vfiprintf_r+0x1bc>
 800908e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009090:	07d9      	lsls	r1, r3, #31
 8009092:	d405      	bmi.n	80090a0 <_vfiprintf_r+0x220>
 8009094:	89ab      	ldrh	r3, [r5, #12]
 8009096:	059a      	lsls	r2, r3, #22
 8009098:	d402      	bmi.n	80090a0 <_vfiprintf_r+0x220>
 800909a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800909c:	f7ff fe71 	bl	8008d82 <__retarget_lock_release_recursive>
 80090a0:	89ab      	ldrh	r3, [r5, #12]
 80090a2:	065b      	lsls	r3, r3, #25
 80090a4:	f53f af12 	bmi.w	8008ecc <_vfiprintf_r+0x4c>
 80090a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090aa:	e711      	b.n	8008ed0 <_vfiprintf_r+0x50>
 80090ac:	ab03      	add	r3, sp, #12
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	462a      	mov	r2, r5
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <_vfiprintf_r+0x258>)
 80090b4:	a904      	add	r1, sp, #16
 80090b6:	4630      	mov	r0, r6
 80090b8:	f7fb fc48 	bl	800494c <_printf_i>
 80090bc:	e7e4      	b.n	8009088 <_vfiprintf_r+0x208>
 80090be:	bf00      	nop
 80090c0:	08009bcc 	.word	0x08009bcc
 80090c4:	08009bec 	.word	0x08009bec
 80090c8:	08009bac 	.word	0x08009bac
 80090cc:	08009b44 	.word	0x08009b44
 80090d0:	08009b4e 	.word	0x08009b4e
 80090d4:	08004405 	.word	0x08004405
 80090d8:	08008e5d 	.word	0x08008e5d
 80090dc:	08009b4a 	.word	0x08009b4a

080090e0 <__swbuf_r>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	460e      	mov	r6, r1
 80090e4:	4614      	mov	r4, r2
 80090e6:	4605      	mov	r5, r0
 80090e8:	b118      	cbz	r0, 80090f2 <__swbuf_r+0x12>
 80090ea:	6983      	ldr	r3, [r0, #24]
 80090ec:	b90b      	cbnz	r3, 80090f2 <__swbuf_r+0x12>
 80090ee:	f7ff fd97 	bl	8008c20 <__sinit>
 80090f2:	4b21      	ldr	r3, [pc, #132]	; (8009178 <__swbuf_r+0x98>)
 80090f4:	429c      	cmp	r4, r3
 80090f6:	d12b      	bne.n	8009150 <__swbuf_r+0x70>
 80090f8:	686c      	ldr	r4, [r5, #4]
 80090fa:	69a3      	ldr	r3, [r4, #24]
 80090fc:	60a3      	str	r3, [r4, #8]
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	071a      	lsls	r2, r3, #28
 8009102:	d52f      	bpl.n	8009164 <__swbuf_r+0x84>
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	b36b      	cbz	r3, 8009164 <__swbuf_r+0x84>
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	6820      	ldr	r0, [r4, #0]
 800910c:	1ac0      	subs	r0, r0, r3
 800910e:	6963      	ldr	r3, [r4, #20]
 8009110:	b2f6      	uxtb	r6, r6
 8009112:	4283      	cmp	r3, r0
 8009114:	4637      	mov	r7, r6
 8009116:	dc04      	bgt.n	8009122 <__swbuf_r+0x42>
 8009118:	4621      	mov	r1, r4
 800911a:	4628      	mov	r0, r5
 800911c:	f7ff fcec 	bl	8008af8 <_fflush_r>
 8009120:	bb30      	cbnz	r0, 8009170 <__swbuf_r+0x90>
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	3b01      	subs	r3, #1
 8009126:	60a3      	str	r3, [r4, #8]
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	6022      	str	r2, [r4, #0]
 800912e:	701e      	strb	r6, [r3, #0]
 8009130:	6963      	ldr	r3, [r4, #20]
 8009132:	3001      	adds	r0, #1
 8009134:	4283      	cmp	r3, r0
 8009136:	d004      	beq.n	8009142 <__swbuf_r+0x62>
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	07db      	lsls	r3, r3, #31
 800913c:	d506      	bpl.n	800914c <__swbuf_r+0x6c>
 800913e:	2e0a      	cmp	r6, #10
 8009140:	d104      	bne.n	800914c <__swbuf_r+0x6c>
 8009142:	4621      	mov	r1, r4
 8009144:	4628      	mov	r0, r5
 8009146:	f7ff fcd7 	bl	8008af8 <_fflush_r>
 800914a:	b988      	cbnz	r0, 8009170 <__swbuf_r+0x90>
 800914c:	4638      	mov	r0, r7
 800914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009150:	4b0a      	ldr	r3, [pc, #40]	; (800917c <__swbuf_r+0x9c>)
 8009152:	429c      	cmp	r4, r3
 8009154:	d101      	bne.n	800915a <__swbuf_r+0x7a>
 8009156:	68ac      	ldr	r4, [r5, #8]
 8009158:	e7cf      	b.n	80090fa <__swbuf_r+0x1a>
 800915a:	4b09      	ldr	r3, [pc, #36]	; (8009180 <__swbuf_r+0xa0>)
 800915c:	429c      	cmp	r4, r3
 800915e:	bf08      	it	eq
 8009160:	68ec      	ldreq	r4, [r5, #12]
 8009162:	e7ca      	b.n	80090fa <__swbuf_r+0x1a>
 8009164:	4621      	mov	r1, r4
 8009166:	4628      	mov	r0, r5
 8009168:	f000 f80c 	bl	8009184 <__swsetup_r>
 800916c:	2800      	cmp	r0, #0
 800916e:	d0cb      	beq.n	8009108 <__swbuf_r+0x28>
 8009170:	f04f 37ff 	mov.w	r7, #4294967295
 8009174:	e7ea      	b.n	800914c <__swbuf_r+0x6c>
 8009176:	bf00      	nop
 8009178:	08009bcc 	.word	0x08009bcc
 800917c:	08009bec 	.word	0x08009bec
 8009180:	08009bac 	.word	0x08009bac

08009184 <__swsetup_r>:
 8009184:	4b32      	ldr	r3, [pc, #200]	; (8009250 <__swsetup_r+0xcc>)
 8009186:	b570      	push	{r4, r5, r6, lr}
 8009188:	681d      	ldr	r5, [r3, #0]
 800918a:	4606      	mov	r6, r0
 800918c:	460c      	mov	r4, r1
 800918e:	b125      	cbz	r5, 800919a <__swsetup_r+0x16>
 8009190:	69ab      	ldr	r3, [r5, #24]
 8009192:	b913      	cbnz	r3, 800919a <__swsetup_r+0x16>
 8009194:	4628      	mov	r0, r5
 8009196:	f7ff fd43 	bl	8008c20 <__sinit>
 800919a:	4b2e      	ldr	r3, [pc, #184]	; (8009254 <__swsetup_r+0xd0>)
 800919c:	429c      	cmp	r4, r3
 800919e:	d10f      	bne.n	80091c0 <__swsetup_r+0x3c>
 80091a0:	686c      	ldr	r4, [r5, #4]
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091a8:	0719      	lsls	r1, r3, #28
 80091aa:	d42c      	bmi.n	8009206 <__swsetup_r+0x82>
 80091ac:	06dd      	lsls	r5, r3, #27
 80091ae:	d411      	bmi.n	80091d4 <__swsetup_r+0x50>
 80091b0:	2309      	movs	r3, #9
 80091b2:	6033      	str	r3, [r6, #0]
 80091b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091b8:	81a3      	strh	r3, [r4, #12]
 80091ba:	f04f 30ff 	mov.w	r0, #4294967295
 80091be:	e03e      	b.n	800923e <__swsetup_r+0xba>
 80091c0:	4b25      	ldr	r3, [pc, #148]	; (8009258 <__swsetup_r+0xd4>)
 80091c2:	429c      	cmp	r4, r3
 80091c4:	d101      	bne.n	80091ca <__swsetup_r+0x46>
 80091c6:	68ac      	ldr	r4, [r5, #8]
 80091c8:	e7eb      	b.n	80091a2 <__swsetup_r+0x1e>
 80091ca:	4b24      	ldr	r3, [pc, #144]	; (800925c <__swsetup_r+0xd8>)
 80091cc:	429c      	cmp	r4, r3
 80091ce:	bf08      	it	eq
 80091d0:	68ec      	ldreq	r4, [r5, #12]
 80091d2:	e7e6      	b.n	80091a2 <__swsetup_r+0x1e>
 80091d4:	0758      	lsls	r0, r3, #29
 80091d6:	d512      	bpl.n	80091fe <__swsetup_r+0x7a>
 80091d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091da:	b141      	cbz	r1, 80091ee <__swsetup_r+0x6a>
 80091dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091e0:	4299      	cmp	r1, r3
 80091e2:	d002      	beq.n	80091ea <__swsetup_r+0x66>
 80091e4:	4630      	mov	r0, r6
 80091e6:	f7fe fd4f 	bl	8007c88 <_free_r>
 80091ea:	2300      	movs	r3, #0
 80091ec:	6363      	str	r3, [r4, #52]	; 0x34
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	2300      	movs	r3, #0
 80091f8:	6063      	str	r3, [r4, #4]
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	6023      	str	r3, [r4, #0]
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	f043 0308 	orr.w	r3, r3, #8
 8009204:	81a3      	strh	r3, [r4, #12]
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	b94b      	cbnz	r3, 800921e <__swsetup_r+0x9a>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009214:	d003      	beq.n	800921e <__swsetup_r+0x9a>
 8009216:	4621      	mov	r1, r4
 8009218:	4630      	mov	r0, r6
 800921a:	f000 f84d 	bl	80092b8 <__smakebuf_r>
 800921e:	89a0      	ldrh	r0, [r4, #12]
 8009220:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009224:	f010 0301 	ands.w	r3, r0, #1
 8009228:	d00a      	beq.n	8009240 <__swsetup_r+0xbc>
 800922a:	2300      	movs	r3, #0
 800922c:	60a3      	str	r3, [r4, #8]
 800922e:	6963      	ldr	r3, [r4, #20]
 8009230:	425b      	negs	r3, r3
 8009232:	61a3      	str	r3, [r4, #24]
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	b943      	cbnz	r3, 800924a <__swsetup_r+0xc6>
 8009238:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800923c:	d1ba      	bne.n	80091b4 <__swsetup_r+0x30>
 800923e:	bd70      	pop	{r4, r5, r6, pc}
 8009240:	0781      	lsls	r1, r0, #30
 8009242:	bf58      	it	pl
 8009244:	6963      	ldrpl	r3, [r4, #20]
 8009246:	60a3      	str	r3, [r4, #8]
 8009248:	e7f4      	b.n	8009234 <__swsetup_r+0xb0>
 800924a:	2000      	movs	r0, #0
 800924c:	e7f7      	b.n	800923e <__swsetup_r+0xba>
 800924e:	bf00      	nop
 8009250:	2000000c 	.word	0x2000000c
 8009254:	08009bcc 	.word	0x08009bcc
 8009258:	08009bec 	.word	0x08009bec
 800925c:	08009bac 	.word	0x08009bac

08009260 <abort>:
 8009260:	b508      	push	{r3, lr}
 8009262:	2006      	movs	r0, #6
 8009264:	f000 f898 	bl	8009398 <raise>
 8009268:	2001      	movs	r0, #1
 800926a:	f7f8 fbe4 	bl	8001a36 <_exit>

0800926e <__swhatbuf_r>:
 800926e:	b570      	push	{r4, r5, r6, lr}
 8009270:	460e      	mov	r6, r1
 8009272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009276:	2900      	cmp	r1, #0
 8009278:	b096      	sub	sp, #88	; 0x58
 800927a:	4614      	mov	r4, r2
 800927c:	461d      	mov	r5, r3
 800927e:	da08      	bge.n	8009292 <__swhatbuf_r+0x24>
 8009280:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	602a      	str	r2, [r5, #0]
 8009288:	061a      	lsls	r2, r3, #24
 800928a:	d410      	bmi.n	80092ae <__swhatbuf_r+0x40>
 800928c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009290:	e00e      	b.n	80092b0 <__swhatbuf_r+0x42>
 8009292:	466a      	mov	r2, sp
 8009294:	f000 f89c 	bl	80093d0 <_fstat_r>
 8009298:	2800      	cmp	r0, #0
 800929a:	dbf1      	blt.n	8009280 <__swhatbuf_r+0x12>
 800929c:	9a01      	ldr	r2, [sp, #4]
 800929e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092a6:	425a      	negs	r2, r3
 80092a8:	415a      	adcs	r2, r3
 80092aa:	602a      	str	r2, [r5, #0]
 80092ac:	e7ee      	b.n	800928c <__swhatbuf_r+0x1e>
 80092ae:	2340      	movs	r3, #64	; 0x40
 80092b0:	2000      	movs	r0, #0
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	b016      	add	sp, #88	; 0x58
 80092b6:	bd70      	pop	{r4, r5, r6, pc}

080092b8 <__smakebuf_r>:
 80092b8:	898b      	ldrh	r3, [r1, #12]
 80092ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092bc:	079d      	lsls	r5, r3, #30
 80092be:	4606      	mov	r6, r0
 80092c0:	460c      	mov	r4, r1
 80092c2:	d507      	bpl.n	80092d4 <__smakebuf_r+0x1c>
 80092c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	2301      	movs	r3, #1
 80092ce:	6163      	str	r3, [r4, #20]
 80092d0:	b002      	add	sp, #8
 80092d2:	bd70      	pop	{r4, r5, r6, pc}
 80092d4:	ab01      	add	r3, sp, #4
 80092d6:	466a      	mov	r2, sp
 80092d8:	f7ff ffc9 	bl	800926e <__swhatbuf_r>
 80092dc:	9900      	ldr	r1, [sp, #0]
 80092de:	4605      	mov	r5, r0
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7fe fd3d 	bl	8007d60 <_malloc_r>
 80092e6:	b948      	cbnz	r0, 80092fc <__smakebuf_r+0x44>
 80092e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ec:	059a      	lsls	r2, r3, #22
 80092ee:	d4ef      	bmi.n	80092d0 <__smakebuf_r+0x18>
 80092f0:	f023 0303 	bic.w	r3, r3, #3
 80092f4:	f043 0302 	orr.w	r3, r3, #2
 80092f8:	81a3      	strh	r3, [r4, #12]
 80092fa:	e7e3      	b.n	80092c4 <__smakebuf_r+0xc>
 80092fc:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <__smakebuf_r+0x7c>)
 80092fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	6020      	str	r0, [r4, #0]
 8009304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	9b00      	ldr	r3, [sp, #0]
 800930c:	6163      	str	r3, [r4, #20]
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	6120      	str	r0, [r4, #16]
 8009312:	b15b      	cbz	r3, 800932c <__smakebuf_r+0x74>
 8009314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009318:	4630      	mov	r0, r6
 800931a:	f000 f86b 	bl	80093f4 <_isatty_r>
 800931e:	b128      	cbz	r0, 800932c <__smakebuf_r+0x74>
 8009320:	89a3      	ldrh	r3, [r4, #12]
 8009322:	f023 0303 	bic.w	r3, r3, #3
 8009326:	f043 0301 	orr.w	r3, r3, #1
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	89a0      	ldrh	r0, [r4, #12]
 800932e:	4305      	orrs	r5, r0
 8009330:	81a5      	strh	r5, [r4, #12]
 8009332:	e7cd      	b.n	80092d0 <__smakebuf_r+0x18>
 8009334:	08008bb9 	.word	0x08008bb9

08009338 <_malloc_usable_size_r>:
 8009338:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800933c:	1f18      	subs	r0, r3, #4
 800933e:	2b00      	cmp	r3, #0
 8009340:	bfbc      	itt	lt
 8009342:	580b      	ldrlt	r3, [r1, r0]
 8009344:	18c0      	addlt	r0, r0, r3
 8009346:	4770      	bx	lr

08009348 <_raise_r>:
 8009348:	291f      	cmp	r1, #31
 800934a:	b538      	push	{r3, r4, r5, lr}
 800934c:	4604      	mov	r4, r0
 800934e:	460d      	mov	r5, r1
 8009350:	d904      	bls.n	800935c <_raise_r+0x14>
 8009352:	2316      	movs	r3, #22
 8009354:	6003      	str	r3, [r0, #0]
 8009356:	f04f 30ff 	mov.w	r0, #4294967295
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800935e:	b112      	cbz	r2, 8009366 <_raise_r+0x1e>
 8009360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009364:	b94b      	cbnz	r3, 800937a <_raise_r+0x32>
 8009366:	4620      	mov	r0, r4
 8009368:	f000 f830 	bl	80093cc <_getpid_r>
 800936c:	462a      	mov	r2, r5
 800936e:	4601      	mov	r1, r0
 8009370:	4620      	mov	r0, r4
 8009372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009376:	f000 b817 	b.w	80093a8 <_kill_r>
 800937a:	2b01      	cmp	r3, #1
 800937c:	d00a      	beq.n	8009394 <_raise_r+0x4c>
 800937e:	1c59      	adds	r1, r3, #1
 8009380:	d103      	bne.n	800938a <_raise_r+0x42>
 8009382:	2316      	movs	r3, #22
 8009384:	6003      	str	r3, [r0, #0]
 8009386:	2001      	movs	r0, #1
 8009388:	e7e7      	b.n	800935a <_raise_r+0x12>
 800938a:	2400      	movs	r4, #0
 800938c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009390:	4628      	mov	r0, r5
 8009392:	4798      	blx	r3
 8009394:	2000      	movs	r0, #0
 8009396:	e7e0      	b.n	800935a <_raise_r+0x12>

08009398 <raise>:
 8009398:	4b02      	ldr	r3, [pc, #8]	; (80093a4 <raise+0xc>)
 800939a:	4601      	mov	r1, r0
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f7ff bfd3 	b.w	8009348 <_raise_r>
 80093a2:	bf00      	nop
 80093a4:	2000000c 	.word	0x2000000c

080093a8 <_kill_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d07      	ldr	r5, [pc, #28]	; (80093c8 <_kill_r+0x20>)
 80093ac:	2300      	movs	r3, #0
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	4611      	mov	r1, r2
 80093b4:	602b      	str	r3, [r5, #0]
 80093b6:	f7f8 fb2e 	bl	8001a16 <_kill>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	d102      	bne.n	80093c4 <_kill_r+0x1c>
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	b103      	cbz	r3, 80093c4 <_kill_r+0x1c>
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	bd38      	pop	{r3, r4, r5, pc}
 80093c6:	bf00      	nop
 80093c8:	20000c1c 	.word	0x20000c1c

080093cc <_getpid_r>:
 80093cc:	f7f8 bb1b 	b.w	8001a06 <_getpid>

080093d0 <_fstat_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d07      	ldr	r5, [pc, #28]	; (80093f0 <_fstat_r+0x20>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	4611      	mov	r1, r2
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	f7f8 fb79 	bl	8001ad4 <_fstat>
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	d102      	bne.n	80093ec <_fstat_r+0x1c>
 80093e6:	682b      	ldr	r3, [r5, #0]
 80093e8:	b103      	cbz	r3, 80093ec <_fstat_r+0x1c>
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	bd38      	pop	{r3, r4, r5, pc}
 80093ee:	bf00      	nop
 80093f0:	20000c1c 	.word	0x20000c1c

080093f4 <_isatty_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d06      	ldr	r5, [pc, #24]	; (8009410 <_isatty_r+0x1c>)
 80093f8:	2300      	movs	r3, #0
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	f7f8 fb78 	bl	8001af4 <_isatty>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_isatty_r+0x1a>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_isatty_r+0x1a>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	20000c1c 	.word	0x20000c1c

08009414 <_init>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	bf00      	nop
 8009418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941a:	bc08      	pop	{r3}
 800941c:	469e      	mov	lr, r3
 800941e:	4770      	bx	lr

08009420 <_fini>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr
