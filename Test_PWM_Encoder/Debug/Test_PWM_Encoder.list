
Test_PWM_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000969c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  08009840  08009840  00019840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2a4  0800a2a4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2ac  0800a2ac  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2ac  0800a2ac  0001a2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2b0  0800a2b0  0001a2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a2b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a4c  200001e8  0800a49c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c34  0800a49c  00020c34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000429e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fad  00000000  00000000  000244b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  00025468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000388  00000000  00000000  00025888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010cd4  00000000  00000000  00025c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005df6  00000000  00000000  000368e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000584c9  00000000  00000000  0003c6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00094ba3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000271c  00000000  00000000  00094bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009824 	.word	0x08009824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08009824 	.word	0x08009824

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <main>:
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado


int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	//Realizamos la configuracuion inicial
	int_Hardware();
 800109c:	f000 f842 	bl	8001124 <int_Hardware>
	//Configuracion inicial Motor
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 80010a0:	2101      	movs	r1, #1
 80010a2:	4814      	ldr	r0, [pc, #80]	; (80010f4 <main+0x5c>)
 80010a4:	f002 face 	bl	8003644 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 80010a8:	2101      	movs	r1, #1
 80010aa:	4813      	ldr	r0, [pc, #76]	; (80010f8 <main+0x60>)
 80010ac:	f002 faca 	bl	8003644 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 80010b0:	2101      	movs	r1, #1
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <main+0x64>)
 80010b4:	f002 fac6 	bl	8003644 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 80010b8:	2101      	movs	r1, #1
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <main+0x68>)
 80010bc:	f002 fac2 	bl	8003644 <GPIO_writePin>
	//Definimos el motor derecho como el que se movera
	handler_GPIO_Motor_EN_Test = &handler_GPIO_MotorR_EN;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <main+0x6c>)
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <main+0x64>)
 80010c4:	601a      	str	r2, [r3, #0]
	handler_PWM_Motor_Test = &handler_PWM_MotorR;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <main+0x70>)
 80010c8:	4a10      	ldr	r2, [pc, #64]	; (800110c <main+0x74>)
 80010ca:	601a      	str	r2, [r3, #0]
	handler_GPIO_Motor_IN_Test = &handler_GPIO_MotorR_IN;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <main+0x78>)
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <main+0x5c>)
 80010d0:	601a      	str	r2, [r3, #0]
	flag_dir  = flag_dir_M1;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <main+0x7c>)
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <main+0x80>)
 80010d8:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <main+0x84>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d106      	bne.n	80010f0 <main+0x58>
		{
			runCommand(bufferRecepcion);
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <main+0x88>)
 80010e4:	f000 fa88 	bl	80015f8 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <main+0x84>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e7f4      	b.n	80010da <main+0x42>
		}
		else
		{
			__NOP();
 80010f0:	bf00      	nop
		if(commandComplete==1)
 80010f2:	e7f2      	b.n	80010da <main+0x42>
 80010f4:	20000278 	.word	0x20000278
 80010f8:	200002a8 	.word	0x200002a8
 80010fc:	20000284 	.word	0x20000284
 8001100:	200002b4 	.word	0x200002b4
 8001104:	200002ec 	.word	0x200002ec
 8001108:	200002f4 	.word	0x200002f4
 800110c:	20000290 	.word	0x20000290
 8001110:	200002f0 	.word	0x200002f0
 8001114:	2000000f 	.word	0x2000000f
 8001118:	2000000e 	.word	0x2000000e
 800111c:	20000011 	.word	0x20000011
 8001120:	20000384 	.word	0x20000384

08001124 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 800112a:	4ba2      	ldr	r3, [pc, #648]	; (80013b4 <int_Hardware+0x290>)
 800112c:	4aa2      	ldr	r2, [pc, #648]	; (80013b8 <int_Hardware+0x294>)
 800112e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001130:	4ba0      	ldr	r3, [pc, #640]	; (80013b4 <int_Hardware+0x290>)
 8001132:	2205      	movs	r2, #5
 8001134:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001136:	2300      	movs	r3, #0
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	2300      	movs	r3, #0
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	2200      	movs	r2, #0
 8001142:	2101      	movs	r1, #1
 8001144:	489b      	ldr	r0, [pc, #620]	; (80013b4 <int_Hardware+0x290>)
 8001146:	f002 f931 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 800114a:	489a      	ldr	r0, [pc, #616]	; (80013b4 <int_Hardware+0x290>)
 800114c:	f002 f950 	bl	80033f0 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001150:	4b9a      	ldr	r3, [pc, #616]	; (80013bc <int_Hardware+0x298>)
 8001152:	4a99      	ldr	r2, [pc, #612]	; (80013b8 <int_Hardware+0x294>)
 8001154:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001156:	4b99      	ldr	r3, [pc, #612]	; (80013bc <int_Hardware+0x298>)
 8001158:	2202      	movs	r2, #2
 800115a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800115c:	2307      	movs	r3, #7
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	2300      	movs	r3, #0
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2200      	movs	r2, #0
 8001168:	2102      	movs	r1, #2
 800116a:	4894      	ldr	r0, [pc, #592]	; (80013bc <int_Hardware+0x298>)
 800116c:	f002 f91e 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001170:	4892      	ldr	r0, [pc, #584]	; (80013bc <int_Hardware+0x298>)
 8001172:	f002 f93d 	bl	80033f0 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8001176:	4b92      	ldr	r3, [pc, #584]	; (80013c0 <int_Hardware+0x29c>)
 8001178:	4a8f      	ldr	r2, [pc, #572]	; (80013b8 <int_Hardware+0x294>)
 800117a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 800117c:	4b90      	ldr	r3, [pc, #576]	; (80013c0 <int_Hardware+0x29c>)
 800117e:	2203      	movs	r2, #3
 8001180:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001182:	2307      	movs	r3, #7
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2300      	movs	r3, #0
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	2200      	movs	r2, #0
 800118e:	2102      	movs	r1, #2
 8001190:	488b      	ldr	r0, [pc, #556]	; (80013c0 <int_Hardware+0x29c>)
 8001192:	f002 f90b 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001196:	488a      	ldr	r0, [pc, #552]	; (80013c0 <int_Hardware+0x29c>)
 8001198:	f002 f92a 	bl	80033f0 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 800119c:	4b89      	ldr	r3, [pc, #548]	; (80013c4 <int_Hardware+0x2a0>)
 800119e:	4a86      	ldr	r2, [pc, #536]	; (80013b8 <int_Hardware+0x294>)
 80011a0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 80011a2:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <int_Hardware+0x2a0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80011a8:	2302      	movs	r3, #2
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2300      	movs	r3, #0
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	4883      	ldr	r0, [pc, #524]	; (80013c4 <int_Hardware+0x2a0>)
 80011b8:	f002 f8f8 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 80011bc:	4881      	ldr	r0, [pc, #516]	; (80013c4 <int_Hardware+0x2a0>)
 80011be:	f002 f917 	bl	80033f0 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 80011c2:	4b81      	ldr	r3, [pc, #516]	; (80013c8 <int_Hardware+0x2a4>)
 80011c4:	4a81      	ldr	r2, [pc, #516]	; (80013cc <int_Hardware+0x2a8>)
 80011c6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 80011c8:	4b7f      	ldr	r3, [pc, #508]	; (80013c8 <int_Hardware+0x2a4>)
 80011ca:	220c      	movs	r2, #12
 80011cc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011ce:	2300      	movs	r3, #0
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2300      	movs	r3, #0
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2301      	movs	r3, #1
 80011d8:	2200      	movs	r2, #0
 80011da:	2101      	movs	r1, #1
 80011dc:	487a      	ldr	r0, [pc, #488]	; (80013c8 <int_Hardware+0x2a4>)
 80011de:	f002 f8e5 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80011e2:	4879      	ldr	r0, [pc, #484]	; (80013c8 <int_Hardware+0x2a4>)
 80011e4:	f002 f904 	bl	80033f0 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80011e8:	4b79      	ldr	r3, [pc, #484]	; (80013d0 <int_Hardware+0x2ac>)
 80011ea:	4a78      	ldr	r2, [pc, #480]	; (80013cc <int_Hardware+0x2a8>)
 80011ec:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <int_Hardware+0x2ac>)
 80011f0:	220a      	movs	r2, #10
 80011f2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011f4:	2300      	movs	r3, #0
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	4873      	ldr	r0, [pc, #460]	; (80013d0 <int_Hardware+0x2ac>)
 8001204:	f002 f8d2 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 8001208:	4871      	ldr	r0, [pc, #452]	; (80013d0 <int_Hardware+0x2ac>)
 800120a:	f002 f8f1 	bl	80033f0 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 800120e:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <int_Hardware+0x2b0>)
 8001210:	4a69      	ldr	r2, [pc, #420]	; (80013b8 <int_Hardware+0x294>)
 8001212:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 8001214:	4b6f      	ldr	r3, [pc, #444]	; (80013d4 <int_Hardware+0x2b0>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800121a:	2302      	movs	r3, #2
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	2300      	movs	r3, #0
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	2200      	movs	r2, #0
 8001226:	2102      	movs	r1, #2
 8001228:	486a      	ldr	r0, [pc, #424]	; (80013d4 <int_Hardware+0x2b0>)
 800122a:	f002 f8bf 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 800122e:	4869      	ldr	r0, [pc, #420]	; (80013d4 <int_Hardware+0x2b0>)
 8001230:	f002 f8de 	bl	80033f0 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8001234:	4b68      	ldr	r3, [pc, #416]	; (80013d8 <int_Hardware+0x2b4>)
 8001236:	4a69      	ldr	r2, [pc, #420]	; (80013dc <int_Hardware+0x2b8>)
 8001238:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800123a:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <int_Hardware+0x2b4>)
 800123c:	2202      	movs	r2, #2
 800123e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001240:	2300      	movs	r3, #0
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2301      	movs	r3, #1
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	4862      	ldr	r0, [pc, #392]	; (80013d8 <int_Hardware+0x2b4>)
 8001250:	f002 f8ac 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8001254:	4860      	ldr	r0, [pc, #384]	; (80013d8 <int_Hardware+0x2b4>)
 8001256:	f002 f8cb 	bl	80033f0 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 800125a:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <int_Hardware+0x2bc>)
 800125c:	4a5b      	ldr	r2, [pc, #364]	; (80013cc <int_Hardware+0x2a8>)
 800125e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <int_Hardware+0x2bc>)
 8001262:	220b      	movs	r2, #11
 8001264:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001266:	2300      	movs	r3, #0
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2300      	movs	r3, #0
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	485a      	ldr	r0, [pc, #360]	; (80013e0 <int_Hardware+0x2bc>)
 8001276:	f002 f899 	bl	80033ac <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 800127a:	4859      	ldr	r0, [pc, #356]	; (80013e0 <int_Hardware+0x2bc>)
 800127c:	f002 f8b8 	bl	80033f0 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8001280:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <int_Hardware+0x2c0>)
 8001282:	4a59      	ldr	r2, [pc, #356]	; (80013e8 <int_Hardware+0x2c4>)
 8001284:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8001286:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <int_Hardware+0x2c0>)
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_9600;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 800128c:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <int_Hardware+0x2c0>)
 800128e:	2200      	movs	r2, #0
 8001290:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <int_Hardware+0x2c0>)
 8001294:	2200      	movs	r2, #0
 8001296:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8001298:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <int_Hardware+0x2c0>)
 800129a:	2200      	movs	r2, #0
 800129c:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 800129e:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <int_Hardware+0x2c0>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80012a4:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <int_Hardware+0x2c0>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 80012aa:	484e      	ldr	r0, [pc, #312]	; (80013e4 <int_Hardware+0x2c0>)
 80012ac:	f002 fd34 	bl	8003d18 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 80012b0:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <int_Hardware+0x2c8>)
 80012b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b6:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <int_Hardware+0x2c8>)
 80012ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012be:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <int_Hardware+0x2c8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <int_Hardware+0x2c8>)
 80012c8:	22fa      	movs	r2, #250	; 0xfa
 80012ca:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <int_Hardware+0x2c8>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80012d2:	4846      	ldr	r0, [pc, #280]	; (80013ec <int_Hardware+0x2c8>)
 80012d4:	f000 fe46 	bl	8001f64 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_study.ptrTIMx = TIM3;
 80012d8:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <int_Hardware+0x2cc>)
 80012da:	4a46      	ldr	r2, [pc, #280]	; (80013f4 <int_Hardware+0x2d0>)
 80012dc:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_study.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <int_Hardware+0x2cc>)
 80012e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e4:	805a      	strh	r2, [r3, #2]
	handler_TIMER_study.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80012e6:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <int_Hardware+0x2cc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
	handler_TIMER_study.TIMx_Config.TIMX_period = 10000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80012ec:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <int_Hardware+0x2cc>)
 80012ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80012f2:	605a      	str	r2, [r3, #4]
	handler_TIMER_study.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012f4:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <int_Hardware+0x2cc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_study);
 80012fa:	483d      	ldr	r0, [pc, #244]	; (80013f0 <int_Hardware+0x2cc>)
 80012fc:	f000 fe32 	bl	8001f64 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8001300:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <int_Hardware+0x2d4>)
 8001302:	4a3e      	ldr	r2, [pc, #248]	; (80013fc <int_Hardware+0x2d8>)
 8001304:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <int_Hardware+0x2d4>)
 8001308:	220a      	movs	r2, #10
 800130a:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 800130c:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <int_Hardware+0x2d4>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <int_Hardware+0x2d4>)
 8001314:	2264      	movs	r2, #100	; 0x64
 8001316:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <int_Hardware+0x2d4>)
 800131a:	2200      	movs	r2, #0
 800131c:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 800131e:	4836      	ldr	r0, [pc, #216]	; (80013f8 <int_Hardware+0x2d4>)
 8001320:	f000 fe20 	bl	8001f64 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <int_Hardware+0x2dc>)
 8001326:	4a29      	ldr	r2, [pc, #164]	; (80013cc <int_Hardware+0x2a8>)
 8001328:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800132a:	4b35      	ldr	r3, [pc, #212]	; (8001400 <int_Hardware+0x2dc>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001330:	4b34      	ldr	r3, [pc, #208]	; (8001404 <int_Hardware+0x2e0>)
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <int_Hardware+0x2dc>)
 8001334:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_FALLING_EDGE;
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <int_Hardware+0x2e0>)
 8001338:	2200      	movs	r2, #0
 800133a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 800133c:	4831      	ldr	r0, [pc, #196]	; (8001404 <int_Hardware+0x2e0>)
 800133e:	f000 ff95 	bl	800226c <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001342:	4b31      	ldr	r3, [pc, #196]	; (8001408 <int_Hardware+0x2e4>)
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <int_Hardware+0x2a8>)
 8001346:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001348:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <int_Hardware+0x2e4>)
 800134a:	2203      	movs	r2, #3
 800134c:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <int_Hardware+0x2e8>)
 8001350:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <int_Hardware+0x2e4>)
 8001352:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_FALLING_EDGE;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <int_Hardware+0x2e8>)
 8001356:	2200      	movs	r2, #0
 8001358:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 800135a:	482c      	ldr	r0, [pc, #176]	; (800140c <int_Hardware+0x2e8>)
 800135c:	f000 ff86 	bl	800226c <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <int_Hardware+0x2ec>)
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <int_Hardware+0x2d8>)
 8001364:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <int_Hardware+0x2ec>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <int_Hardware+0x2ec>)
 800136e:	220a      	movs	r2, #10
 8001370:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <int_Hardware+0x2ec>)
 8001374:	2201      	movs	r2, #1
 8001376:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 8001378:	4825      	ldr	r0, [pc, #148]	; (8001410 <int_Hardware+0x2ec>)
 800137a:	f002 f9d9 	bl	8003730 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 800137e:	2101      	movs	r1, #1
 8001380:	4823      	ldr	r0, [pc, #140]	; (8001410 <int_Hardware+0x2ec>)
 8001382:	f002 fb35 	bl	80039f0 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <int_Hardware+0x2f0>)
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <int_Hardware+0x2d8>)
 800138a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <int_Hardware+0x2f0>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <int_Hardware+0x2f0>)
 8001394:	220a      	movs	r2, #10
 8001396:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <int_Hardware+0x2f0>)
 800139a:	2201      	movs	r2, #1
 800139c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 800139e:	481d      	ldr	r0, [pc, #116]	; (8001414 <int_Hardware+0x2f0>)
 80013a0:	f002 f9c6 	bl	8003730 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 80013a4:	2101      	movs	r1, #1
 80013a6:	481b      	ldr	r0, [pc, #108]	; (8001414 <int_Hardware+0x2f0>)
 80013a8:	f002 fb22 	bl	80039f0 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000204 	.word	0x20000204
 80013b8:	40020000 	.word	0x40020000
 80013bc:	20000248 	.word	0x20000248
 80013c0:	20000254 	.word	0x20000254
 80013c4:	2000026c 	.word	0x2000026c
 80013c8:	20000278 	.word	0x20000278
 80013cc:	40020800 	.word	0x40020800
 80013d0:	20000284 	.word	0x20000284
 80013d4:	2000029c 	.word	0x2000029c
 80013d8:	200002a8 	.word	0x200002a8
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	200002b4 	.word	0x200002b4
 80013e4:	20000260 	.word	0x20000260
 80013e8:	40004400 	.word	0x40004400
 80013ec:	20000210 	.word	0x20000210
 80013f0:	200002dc 	.word	0x200002dc
 80013f4:	40000400 	.word	0x40000400
 80013f8:	200002cc 	.word	0x200002cc
 80013fc:	40000c00 	.word	0x40000c00
 8001400:	20000220 	.word	0x20000220
 8001404:	2000022c 	.word	0x2000022c
 8001408:	20000234 	.word	0x20000234
 800140c:	20000240 	.word	0x20000240
 8001410:	20000290 	.word	0x20000290
 8001414:	200002c0 	.word	0x200002c0

08001418 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <BasicTimer2_Callback+0x10>)
 800141e:	f002 f93c 	bl	800369a <GPIOxTooglePin>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000204 	.word	0x20000204

0800142c <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 800142c:	b598      	push	{r3, r4, r7, lr}
 800142e:	af00      	add	r7, sp, #0
	if (value_dutty<20)
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <BasicTimer3_Callback+0xdc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b13      	cmp	r3, #19
 8001436:	d829      	bhi.n	800148c <BasicTimer3_Callback+0x60>
	{
		//Guardamos el numero de conteos de la fotocompuerta
		count_for_dutty[index_fre][index_count] = count_foto;
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <BasicTimer3_Callback+0xe0>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <BasicTimer3_Callback+0xe4>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461c      	mov	r4, r3
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <BasicTimer3_Callback+0xe8>)
 8001446:	8818      	ldrh	r0, [r3, #0]
 8001448:	4933      	ldr	r1, [pc, #204]	; (8001518 <BasicTimer3_Callback+0xec>)
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	00da      	lsls	r2, r3, #3
 8001452:	1ad2      	subs	r2, r2, r3
 8001454:	1913      	adds	r3, r2, r4
 8001456:	4602      	mov	r2, r0
 8001458:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		//Reiniciamos la variable
		count_foto = 0;
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <BasicTimer3_Callback+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	801a      	strh	r2, [r3, #0]
		//Aumentamos el valor de las variables
		index_count++;
 8001462:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <BasicTimer3_Callback+0xe4>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b29      	ldr	r3, [pc, #164]	; (8001510 <BasicTimer3_Callback+0xe4>)
 800146c:	701a      	strb	r2, [r3, #0]
		value_dutty++;
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <BasicTimer3_Callback+0xdc>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <BasicTimer3_Callback+0xdc>)
 8001478:	701a      	strb	r2, [r3, #0]
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty);
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <BasicTimer3_Callback+0xf0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a22      	ldr	r2, [pc, #136]	; (8001508 <BasicTimer3_Callback+0xdc>)
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f002 fc0b 	bl	8003ca0 <updateDuttyCyclePercentage>
		else
		{
			status_study(RESET);
		}
	}
}
 800148a:	e03a      	b.n	8001502 <BasicTimer3_Callback+0xd6>
		count_for_dutty[index_fre][index_count] = count_foto;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <BasicTimer3_Callback+0xe0>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <BasicTimer3_Callback+0xe4>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461c      	mov	r4, r3
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <BasicTimer3_Callback+0xe8>)
 800149a:	8818      	ldrh	r0, [r3, #0]
 800149c:	491e      	ldr	r1, [pc, #120]	; (8001518 <BasicTimer3_Callback+0xec>)
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	00da      	lsls	r2, r3, #3
 80014a6:	1ad2      	subs	r2, r2, r3
 80014a8:	1913      	adds	r3, r2, r4
 80014aa:	4602      	mov	r2, r0
 80014ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		index_fre++;
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <BasicTimer3_Callback+0xe0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <BasicTimer3_Callback+0xe0>)
 80014ba:	701a      	strb	r2, [r3, #0]
		if(index_fre<3)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <BasicTimer3_Callback+0xe0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d81b      	bhi.n	80014fc <BasicTimer3_Callback+0xd0>
			value_dutty = 0;
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <BasicTimer3_Callback+0xdc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
			index_count = 0;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <BasicTimer3_Callback+0xe4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
			count_foto = 0;
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <BasicTimer3_Callback+0xe8>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	801a      	strh	r2, [r3, #0]
			updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty);
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <BasicTimer3_Callback+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <BasicTimer3_Callback+0xdc>)
 80014dc:	7812      	ldrb	r2, [r2, #0]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fbdd 	bl	8003ca0 <updateDuttyCyclePercentage>
			updateFrequencyTimer(&handler_TIMER_Motor, frequency[index_fre]);
 80014e6:	4b09      	ldr	r3, [pc, #36]	; (800150c <BasicTimer3_Callback+0xe0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <BasicTimer3_Callback+0xf4>)
 80014ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014f2:	4619      	mov	r1, r3
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <BasicTimer3_Callback+0xf8>)
 80014f6:	f000 fe83 	bl	8002200 <updateFrequencyTimer>
}
 80014fa:	e002      	b.n	8001502 <BasicTimer3_Callback+0xd6>
			status_study(RESET);
 80014fc:	2000      	movs	r0, #0
 80014fe:	f000 fb81 	bl	8001c04 <status_study>
}
 8001502:	bf00      	nop
 8001504:	bd98      	pop	{r3, r4, r7, pc}
 8001506:	bf00      	nop
 8001508:	20000380 	.word	0x20000380
 800150c:	200002fa 	.word	0x200002fa
 8001510:	200002f9 	.word	0x200002f9
 8001514:	2000037a 	.word	0x2000037a
 8001518:	200002fc 	.word	0x200002fc
 800151c:	200002f4 	.word	0x200002f4
 8001520:	20000004 	.word	0x20000004
 8001524:	200002cc 	.word	0x200002cc

08001528 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 800152c:	f002 fed6 	bl	80042dc <getRxData>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <BasicUSART2_Callback+0x30>)
 8001536:	701a      	strb	r2, [r3, #0]
	//Verificar
	if(charRead=='-' || charRead=='+')
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <BasicUSART2_Callback+0x30>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b2d      	cmp	r3, #45	; 0x2d
 800153e:	d003      	beq.n	8001548 <BasicUSART2_Callback+0x20>
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <BasicUSART2_Callback+0x30>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b2b      	cmp	r3, #43	; 0x2b
 8001546:	d102      	bne.n	800154e <BasicUSART2_Callback+0x26>
	{
		//Cambiar dutty de a uno
		change_dutty();
 8001548:	f000 fb9e 	bl	8001c88 <change_dutty>
 800154c:	e002      	b.n	8001554 <BasicUSART2_Callback+0x2c>
	}
	else
	{
		//Funcion que almacena los caracteres del comando recibido
		recepcionCommand();
 800154e:	f000 f825 	bl	800159c <recepcionCommand>
	}
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000

0800155c <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	count_foto_R++;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <callback_extInt1+0x1c>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b29a      	uxth	r2, r3
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <callback_extInt1+0x1c>)
 800156a:	801a      	strh	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000037c 	.word	0x2000037c

0800157c <callback_extInt3>:
void callback_extInt3(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
	count_foto_L++;
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <callback_extInt3+0x1c>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <callback_extInt3+0x1c>)
 800158a:	801a      	strh	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000037e 	.word	0x2000037e

0800159c <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	if(charRead == '@')
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <recepcionCommand+0x4c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b40      	cmp	r3, #64	; 0x40
 80015a6:	d10c      	bne.n	80015c2 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <recepcionCommand+0x50>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <recepcionCommand+0x54>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <recepcionCommand+0x58>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <recepcionCommand+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 80015c0:	e00c      	b.n	80015dc <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <recepcionCommand+0x50>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <recepcionCommand+0x4c>)
 80015ca:	7819      	ldrb	r1, [r3, #0]
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <recepcionCommand+0x54>)
 80015ce:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <recepcionCommand+0x50>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <recepcionCommand+0x50>)
 80015da:	701a      	strb	r2, [r3, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000381 	.word	0x20000381
 80015f0:	20000384 	.word	0x20000384
 80015f4:	20000011 	.word	0x20000011

080015f8 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b0a9      	sub	sp, #164	; 0xa4
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8001600:	2300      	movs	r3, #0
 8001602:	657b      	str	r3, [r7, #84]	; 0x54
 8001604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001608:	223c      	movs	r2, #60	; 0x3c
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f003 f859 	bl	80046c4 <memset>
	int firtsParameter = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	653b      	str	r3, [r7, #80]	; 0x50
	int secondParameter = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	64fb      	str	r3, [r7, #76]	; 0x4c
	int thirdParameter = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	64bb      	str	r3, [r7, #72]	; 0x48
	char bufferMsg[64]= {0};
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	223c      	movs	r2, #60	; 0x3c
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f003 f84a 	bl	80046c4 <memset>

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter);
 8001630:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001634:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001638:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800163c:	9301      	str	r3, [sp, #4]
 800163e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	460b      	mov	r3, r1
 8001646:	4999      	ldr	r1, [pc, #612]	; (80018ac <runCommand+0x2b4>)
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f003 fee3 	bl	8005414 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 800164e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001652:	4997      	ldr	r1, [pc, #604]	; (80018b0 <runCommand+0x2b8>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fdc3 	bl	80001e0 <strcmp>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d138      	bne.n	80016d2 <runCommand+0xda>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8001660:	4994      	ldr	r1, [pc, #592]	; (80018b4 <runCommand+0x2bc>)
 8001662:	4895      	ldr	r0, [pc, #596]	; (80018b8 <runCommand+0x2c0>)
 8001664:	f002 fdfc 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001668:	4994      	ldr	r1, [pc, #592]	; (80018bc <runCommand+0x2c4>)
 800166a:	4893      	ldr	r0, [pc, #588]	; (80018b8 <runCommand+0x2c0>)
 800166c:	f002 fdf8 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) Frequency # # # ---Definir los 3 valores de las frecuencias para el study en Hz. \n");
 8001670:	4993      	ldr	r1, [pc, #588]	; (80018c0 <runCommand+0x2c8>)
 8001672:	4891      	ldr	r0, [pc, #580]	; (80018b8 <runCommand+0x2c0>)
 8001674:	f002 fdf4 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) Motor # ---Elige el tipo de motor para el test, 1:Derecho, 2:Izquierdo \n");
 8001678:	4992      	ldr	r1, [pc, #584]	; (80018c4 <runCommand+0x2cc>)
 800167a:	488f      	ldr	r0, [pc, #572]	; (80018b8 <runCommand+0x2c0>)
 800167c:	f002 fdf0 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) sON --- Enciende el motor seleccionado en la prueba estatica \n");
 8001680:	4991      	ldr	r1, [pc, #580]	; (80018c8 <runCommand+0x2d0>)
 8001682:	488d      	ldr	r0, [pc, #564]	; (80018b8 <runCommand+0x2c0>)
 8001684:	f002 fdec 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) sOFF --- Apaga el motor seleccionado prueba estatica \n");
 8001688:	4990      	ldr	r1, [pc, #576]	; (80018cc <runCommand+0x2d4>)
 800168a:	488b      	ldr	r0, [pc, #556]	; (80018b8 <runCommand+0x2c0>)
 800168c:	f002 fde8 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) sDireccion --- Cambiar la direccion en la prueba estatica \n");
 8001690:	498f      	ldr	r1, [pc, #572]	; (80018d0 <runCommand+0x2d8>)
 8001692:	4889      	ldr	r0, [pc, #548]	; (80018b8 <runCommand+0x2c0>)
 8001694:	f002 fde4 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) sDutty # --- Cambiar el valor del dutty en la prueba estatica #/0-100 \n");
 8001698:	498e      	ldr	r1, [pc, #568]	; (80018d4 <runCommand+0x2dc>)
 800169a:	4887      	ldr	r0, [pc, #540]	; (80018b8 <runCommand+0x2c0>)
 800169c:	f002 fde0 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "8) sFrequency # --- cambiar el valor de la frecuenciea en la prueba estatica en HZ \n");
 80016a0:	498d      	ldr	r1, [pc, #564]	; (80018d8 <runCommand+0x2e0>)
 80016a2:	4885      	ldr	r0, [pc, #532]	; (80018b8 <runCommand+0x2c0>)
 80016a4:	f002 fddc 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "9) sCount --- Mostrar el numero de cuentas \n");
 80016a8:	498c      	ldr	r1, [pc, #560]	; (80018dc <runCommand+0x2e4>)
 80016aa:	4883      	ldr	r0, [pc, #524]	; (80018b8 <runCommand+0x2c0>)
 80016ac:	f002 fdd8 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "10) sCountInit--- Iniciar el numero de cuentas \n");
 80016b0:	498b      	ldr	r1, [pc, #556]	; (80018e0 <runCommand+0x2e8>)
 80016b2:	4881      	ldr	r0, [pc, #516]	; (80018b8 <runCommand+0x2c0>)
 80016b4:	f002 fdd4 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "11) Start ---Inicializa el estudio \n");
 80016b8:	498a      	ldr	r1, [pc, #552]	; (80018e4 <runCommand+0x2ec>)
 80016ba:	487f      	ldr	r0, [pc, #508]	; (80018b8 <runCommand+0x2c0>)
 80016bc:	f002 fdd0 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "12) Stop ---Para el estudio en medio de la ejecucion \n");
 80016c0:	4989      	ldr	r1, [pc, #548]	; (80018e8 <runCommand+0x2f0>)
 80016c2:	487d      	ldr	r0, [pc, #500]	; (80018b8 <runCommand+0x2c0>)
 80016c4:	f002 fdcc 	bl	8004260 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "13) Print ---Imprime los valores del conteo de interrupciones en el estudio \n");
 80016c8:	4988      	ldr	r1, [pc, #544]	; (80018ec <runCommand+0x2f4>)
 80016ca:	487b      	ldr	r0, [pc, #492]	; (80018b8 <runCommand+0x2c0>)
 80016cc:	f002 fdc8 	bl	8004260 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 80016d0:	e253      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "Frequency") == 0)
 80016d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016d6:	4986      	ldr	r1, [pc, #536]	; (80018f0 <runCommand+0x2f8>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd81 	bl	80001e0 <strcmp>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d115      	bne.n	8001710 <runCommand+0x118>
		frequency[0] = 100000/firtsParameter;
 80016e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016e6:	4a83      	ldr	r2, [pc, #524]	; (80018f4 <runCommand+0x2fc>)
 80016e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <runCommand+0x300>)
 80016f0:	801a      	strh	r2, [r3, #0]
		frequency[1] = 100000/secondParameter;
 80016f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016f4:	4a7f      	ldr	r2, [pc, #508]	; (80018f4 <runCommand+0x2fc>)
 80016f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	4b7e      	ldr	r3, [pc, #504]	; (80018f8 <runCommand+0x300>)
 80016fe:	805a      	strh	r2, [r3, #2]
		frequency[2] = 100000/thirdParameter;
 8001700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001702:	4a7c      	ldr	r2, [pc, #496]	; (80018f4 <runCommand+0x2fc>)
 8001704:	fb92 f3f3 	sdiv	r3, r2, r3
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b7b      	ldr	r3, [pc, #492]	; (80018f8 <runCommand+0x300>)
 800170c:	809a      	strh	r2, [r3, #4]
}
 800170e:	e234      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "Motor") == 0)
 8001710:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001714:	4979      	ldr	r1, [pc, #484]	; (80018fc <runCommand+0x304>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd62 	bl	80001e0 <strcmp>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d12e      	bne.n	8001780 <runCommand+0x188>
		if(firtsParameter==1)
 8001722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001724:	2b01      	cmp	r3, #1
 8001726:	d111      	bne.n	800174c <runCommand+0x154>
			handler_GPIO_Motor_EN_Test = &handler_GPIO_MotorR_EN;
 8001728:	4b75      	ldr	r3, [pc, #468]	; (8001900 <runCommand+0x308>)
 800172a:	4a76      	ldr	r2, [pc, #472]	; (8001904 <runCommand+0x30c>)
 800172c:	601a      	str	r2, [r3, #0]
			handler_PWM_Motor_Test = &handler_PWM_MotorR;
 800172e:	4b76      	ldr	r3, [pc, #472]	; (8001908 <runCommand+0x310>)
 8001730:	4a76      	ldr	r2, [pc, #472]	; (800190c <runCommand+0x314>)
 8001732:	601a      	str	r2, [r3, #0]
			handler_GPIO_Motor_IN_Test = &handler_GPIO_MotorR_IN;
 8001734:	4b76      	ldr	r3, [pc, #472]	; (8001910 <runCommand+0x318>)
 8001736:	4a77      	ldr	r2, [pc, #476]	; (8001914 <runCommand+0x31c>)
 8001738:	601a      	str	r2, [r3, #0]
			flag_dir  = flag_dir_M1;
 800173a:	4b77      	ldr	r3, [pc, #476]	; (8001918 <runCommand+0x320>)
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	4b77      	ldr	r3, [pc, #476]	; (800191c <runCommand+0x324>)
 8001740:	701a      	strb	r2, [r3, #0]
			writeMsgForTXE(&handler_USART_USB, "Motor 1 seleccionado \n");
 8001742:	4977      	ldr	r1, [pc, #476]	; (8001920 <runCommand+0x328>)
 8001744:	485c      	ldr	r0, [pc, #368]	; (80018b8 <runCommand+0x2c0>)
 8001746:	f002 fd8b 	bl	8004260 <writeMsgForTXE>
}
 800174a:	e216      	b.n	8001b7a <runCommand+0x582>
		else if(firtsParameter==2)
 800174c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800174e:	2b02      	cmp	r3, #2
 8001750:	d111      	bne.n	8001776 <runCommand+0x17e>
			handler_GPIO_Motor_EN_Test = &handler_GPIO_MotorL_EN;
 8001752:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <runCommand+0x308>)
 8001754:	4a73      	ldr	r2, [pc, #460]	; (8001924 <runCommand+0x32c>)
 8001756:	601a      	str	r2, [r3, #0]
			handler_PWM_Motor_Test = &handler_PWM_MotorL;
 8001758:	4b6b      	ldr	r3, [pc, #428]	; (8001908 <runCommand+0x310>)
 800175a:	4a73      	ldr	r2, [pc, #460]	; (8001928 <runCommand+0x330>)
 800175c:	601a      	str	r2, [r3, #0]
			handler_GPIO_Motor_IN_Test = &handler_GPIO_MotorL_IN;
 800175e:	4b6c      	ldr	r3, [pc, #432]	; (8001910 <runCommand+0x318>)
 8001760:	4a72      	ldr	r2, [pc, #456]	; (800192c <runCommand+0x334>)
 8001762:	601a      	str	r2, [r3, #0]
			flag_dir  = flag_dir_M2;
 8001764:	4b72      	ldr	r3, [pc, #456]	; (8001930 <runCommand+0x338>)
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	4b6c      	ldr	r3, [pc, #432]	; (800191c <runCommand+0x324>)
 800176a:	701a      	strb	r2, [r3, #0]
			writeMsgForTXE(&handler_USART_USB, "Motor 2 seleccionado \n");
 800176c:	4971      	ldr	r1, [pc, #452]	; (8001934 <runCommand+0x33c>)
 800176e:	4852      	ldr	r0, [pc, #328]	; (80018b8 <runCommand+0x2c0>)
 8001770:	f002 fd76 	bl	8004260 <writeMsgForTXE>
}
 8001774:	e201      	b.n	8001b7a <runCommand+0x582>
			writeMsgForTXE(&handler_USART_USB, "Valor no valido de motor \n");
 8001776:	4970      	ldr	r1, [pc, #448]	; (8001938 <runCommand+0x340>)
 8001778:	484f      	ldr	r0, [pc, #316]	; (80018b8 <runCommand+0x2c0>)
 800177a:	f002 fd71 	bl	8004260 <writeMsgForTXE>
}
 800177e:	e1fc      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "sON") == 0)
 8001780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001784:	496d      	ldr	r1, [pc, #436]	; (800193c <runCommand+0x344>)
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fd2a 	bl	80001e0 <strcmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d118      	bne.n	80017c4 <runCommand+0x1cc>
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty_estatico);
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <runCommand+0x310>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6a      	ldr	r2, [pc, #424]	; (8001940 <runCommand+0x348>)
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f002 fa7f 	bl	8003ca0 <updateDuttyCyclePercentage>
		updateFrequencyTimer(&handler_TIMER_Motor, value_frequency_estatico);
 80017a2:	4b68      	ldr	r3, [pc, #416]	; (8001944 <runCommand+0x34c>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4867      	ldr	r0, [pc, #412]	; (8001948 <runCommand+0x350>)
 80017aa:	f000 fd29 	bl	8002200 <updateFrequencyTimer>
		GPIO_writePin (handler_GPIO_Motor_EN_Test, RESET);
 80017ae:	4b54      	ldr	r3, [pc, #336]	; (8001900 <runCommand+0x308>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f001 ff45 	bl	8003644 <GPIO_writePin>
		writeMsgForTXE(&handler_USART_USB, "Motor Encendido \n");
 80017ba:	4964      	ldr	r1, [pc, #400]	; (800194c <runCommand+0x354>)
 80017bc:	483e      	ldr	r0, [pc, #248]	; (80018b8 <runCommand+0x2c0>)
 80017be:	f002 fd4f 	bl	8004260 <writeMsgForTXE>
}
 80017c2:	e1da      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "sOFF") == 0)
 80017c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c8:	4961      	ldr	r1, [pc, #388]	; (8001950 <runCommand+0x358>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fd08 	bl	80001e0 <strcmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10a      	bne.n	80017ec <runCommand+0x1f4>
		GPIO_writePin (handler_GPIO_Motor_EN_Test, SET);
 80017d6:	4b4a      	ldr	r3, [pc, #296]	; (8001900 <runCommand+0x308>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2101      	movs	r1, #1
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 ff31 	bl	8003644 <GPIO_writePin>
		writeMsgForTXE(&handler_USART_USB, "Motor Apagado \n");
 80017e2:	495c      	ldr	r1, [pc, #368]	; (8001954 <runCommand+0x35c>)
 80017e4:	4834      	ldr	r0, [pc, #208]	; (80018b8 <runCommand+0x2c0>)
 80017e6:	f002 fd3b 	bl	8004260 <writeMsgForTXE>
}
 80017ea:	e1c6      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "sDireccion") == 0)
 80017ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017f0:	4959      	ldr	r1, [pc, #356]	; (8001958 <runCommand+0x360>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fcf4 	bl	80001e0 <strcmp>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d13c      	bne.n	8001878 <runCommand+0x280>
		if(handler_GPIO_Motor_IN_Test==&handler_GPIO_MotorR_IN)
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <runCommand+0x318>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a44      	ldr	r2, [pc, #272]	; (8001914 <runCommand+0x31c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d110      	bne.n	800182a <runCommand+0x232>
			flag_dir_M1 = (~flag_dir_M1)&(0x01);
 8001808:	4b43      	ldr	r3, [pc, #268]	; (8001918 <runCommand+0x320>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	4b3e      	ldr	r3, [pc, #248]	; (8001918 <runCommand+0x320>)
 800181e:	701a      	strb	r2, [r3, #0]
			flag_dir = flag_dir_M1;
 8001820:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <runCommand+0x320>)
 8001822:	781a      	ldrb	r2, [r3, #0]
 8001824:	4b3d      	ldr	r3, [pc, #244]	; (800191c <runCommand+0x324>)
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e00f      	b.n	800184a <runCommand+0x252>
			flag_dir_M2 = (~flag_dir_M2)&(0x01);
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <runCommand+0x338>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf0c      	ite	eq
 8001836:	2301      	moveq	r3, #1
 8001838:	2300      	movne	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <runCommand+0x338>)
 8001840:	701a      	strb	r2, [r3, #0]
			flag_dir = flag_dir_M2;
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <runCommand+0x338>)
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <runCommand+0x324>)
 8001848:	701a      	strb	r2, [r3, #0]
		GPIO_writePin(handler_GPIO_Motor_IN_Test, flag_dir&SET);
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <runCommand+0x318>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <runCommand+0x324>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f001 fef2 	bl	8003644 <GPIO_writePin>
		statusPolarityPWM(handler_PWM_Motor_Test, flag_dir&SET);
 8001860:	4b29      	ldr	r3, [pc, #164]	; (8001908 <runCommand+0x310>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <runCommand+0x324>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	4619      	mov	r1, r3
 8001870:	4610      	mov	r0, r2
 8001872:	f002 f94f 	bl	8003b14 <statusPolarityPWM>
}
 8001876:	e180      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "sDutty") == 0)
 8001878:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800187c:	4937      	ldr	r1, [pc, #220]	; (800195c <runCommand+0x364>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fcae 	bl	80001e0 <strcmp>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d16c      	bne.n	8001964 <runCommand+0x36c>
		value_dutty_estatico = firtsParameter;
 800188a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <runCommand+0x348>)
 8001890:	701a      	strb	r2, [r3, #0]
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty_estatico);
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <runCommand+0x310>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a2a      	ldr	r2, [pc, #168]	; (8001940 <runCommand+0x348>)
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f002 f9ff 	bl	8003ca0 <updateDuttyCyclePercentage>
		writeMsgForTXE(&handler_USART_USB, "Dutty Actualizado \n");
 80018a2:	492f      	ldr	r1, [pc, #188]	; (8001960 <runCommand+0x368>)
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <runCommand+0x2c0>)
 80018a6:	f002 fcdb 	bl	8004260 <writeMsgForTXE>
}
 80018aa:	e166      	b.n	8001b7a <runCommand+0x582>
 80018ac:	08009840 	.word	0x08009840
 80018b0:	0800984c 	.word	0x0800984c
 80018b4:	08009854 	.word	0x08009854
 80018b8:	20000260 	.word	0x20000260
 80018bc:	08009864 	.word	0x08009864
 80018c0:	08009890 	.word	0x08009890
 80018c4:	080098e8 	.word	0x080098e8
 80018c8:	08009934 	.word	0x08009934
 80018cc:	08009978 	.word	0x08009978
 80018d0:	080099b4 	.word	0x080099b4
 80018d4:	080099f4 	.word	0x080099f4
 80018d8:	08009a40 	.word	0x08009a40
 80018dc:	08009a98 	.word	0x08009a98
 80018e0:	08009ac8 	.word	0x08009ac8
 80018e4:	08009afc 	.word	0x08009afc
 80018e8:	08009b24 	.word	0x08009b24
 80018ec:	08009b5c 	.word	0x08009b5c
 80018f0:	08009bac 	.word	0x08009bac
 80018f4:	000186a0 	.word	0x000186a0
 80018f8:	20000004 	.word	0x20000004
 80018fc:	08009bb8 	.word	0x08009bb8
 8001900:	200002ec 	.word	0x200002ec
 8001904:	20000284 	.word	0x20000284
 8001908:	200002f4 	.word	0x200002f4
 800190c:	20000290 	.word	0x20000290
 8001910:	200002f0 	.word	0x200002f0
 8001914:	20000278 	.word	0x20000278
 8001918:	2000000f 	.word	0x2000000f
 800191c:	2000000e 	.word	0x2000000e
 8001920:	08009bc0 	.word	0x08009bc0
 8001924:	200002b4 	.word	0x200002b4
 8001928:	200002c0 	.word	0x200002c0
 800192c:	200002a8 	.word	0x200002a8
 8001930:	20000010 	.word	0x20000010
 8001934:	08009bd8 	.word	0x08009bd8
 8001938:	08009bf0 	.word	0x08009bf0
 800193c:	08009c0c 	.word	0x08009c0c
 8001940:	2000000a 	.word	0x2000000a
 8001944:	2000000c 	.word	0x2000000c
 8001948:	200002cc 	.word	0x200002cc
 800194c:	08009c10 	.word	0x08009c10
 8001950:	08009c24 	.word	0x08009c24
 8001954:	08009c2c 	.word	0x08009c2c
 8001958:	08009c3c 	.word	0x08009c3c
 800195c:	08009c48 	.word	0x08009c48
 8001960:	08009c50 	.word	0x08009c50
	else if (strcmp(cmd, "sFrequency") == 0)
 8001964:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001968:	4986      	ldr	r1, [pc, #536]	; (8001b84 <runCommand+0x58c>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fc38 	bl	80001e0 <strcmp>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d119      	bne.n	80019aa <runCommand+0x3b2>
		value_frequency_estatico = 100000/firtsParameter;
 8001976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001978:	4a83      	ldr	r2, [pc, #524]	; (8001b88 <runCommand+0x590>)
 800197a:	fb92 f3f3 	sdiv	r3, r2, r3
 800197e:	b29a      	uxth	r2, r3
 8001980:	4b82      	ldr	r3, [pc, #520]	; (8001b8c <runCommand+0x594>)
 8001982:	801a      	strh	r2, [r3, #0]
		updateFrequencyTimer(&handler_TIMER_Motor, value_frequency_estatico);
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <runCommand+0x594>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	4881      	ldr	r0, [pc, #516]	; (8001b90 <runCommand+0x598>)
 800198c:	f000 fc38 	bl	8002200 <updateFrequencyTimer>
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty_estatico);
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <runCommand+0x59c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a80      	ldr	r2, [pc, #512]	; (8001b98 <runCommand+0x5a0>)
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f002 f980 	bl	8003ca0 <updateDuttyCyclePercentage>
		writeMsgForTXE(&handler_USART_USB, "Frecuencia Actualizado \n");
 80019a0:	497e      	ldr	r1, [pc, #504]	; (8001b9c <runCommand+0x5a4>)
 80019a2:	487f      	ldr	r0, [pc, #508]	; (8001ba0 <runCommand+0x5a8>)
 80019a4:	f002 fc5c 	bl	8004260 <writeMsgForTXE>
}
 80019a8:	e0e7      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "sCount") == 0)
 80019aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ae:	497d      	ldr	r1, [pc, #500]	; (8001ba4 <runCommand+0x5ac>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fc15 	bl	80001e0 <strcmp>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d11e      	bne.n	80019fa <runCommand+0x402>
		sprintf(bufferMsg,"Cuentas_R: %u \n", count_foto_R);
 80019bc:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <runCommand+0x5b0>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	4979      	ldr	r1, [pc, #484]	; (8001bac <runCommand+0x5b4>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fd03 	bl	80053d4 <siprintf>
		writeMsg(&handler_USART_USB, bufferMsg);
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4619      	mov	r1, r3
 80019d4:	4872      	ldr	r0, [pc, #456]	; (8001ba0 <runCommand+0x5a8>)
 80019d6:	f002 fc24 	bl	8004222 <writeMsg>
		sprintf(bufferMsg,"Cuentas_L: %u \n", count_foto_L);
 80019da:	4b75      	ldr	r3, [pc, #468]	; (8001bb0 <runCommand+0x5b8>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4973      	ldr	r1, [pc, #460]	; (8001bb4 <runCommand+0x5bc>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fcf4 	bl	80053d4 <siprintf>
		writeMsg(&handler_USART_USB, bufferMsg);
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	4619      	mov	r1, r3
 80019f2:	486b      	ldr	r0, [pc, #428]	; (8001ba0 <runCommand+0x5a8>)
 80019f4:	f002 fc15 	bl	8004222 <writeMsg>
}
 80019f8:	e0bf      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "sCountInit") == 0)
 80019fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019fe:	496e      	ldr	r1, [pc, #440]	; (8001bb8 <runCommand+0x5c0>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fbed 	bl	80001e0 <strcmp>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d113      	bne.n	8001a34 <runCommand+0x43c>
		if(flag_study==0)
 8001a0c:	4b6b      	ldr	r3, [pc, #428]	; (8001bbc <runCommand+0x5c4>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <runCommand+0x432>
			count_foto_L = 0;
 8001a14:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <runCommand+0x5b8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	801a      	strh	r2, [r3, #0]
			count_foto_R = 0;
 8001a1a:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <runCommand+0x5b0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
			writeMsgForTXE(&handler_USART_USB, "Reinicio exitoso. \n");
 8001a20:	4967      	ldr	r1, [pc, #412]	; (8001bc0 <runCommand+0x5c8>)
 8001a22:	485f      	ldr	r0, [pc, #380]	; (8001ba0 <runCommand+0x5a8>)
 8001a24:	f002 fc1c 	bl	8004260 <writeMsgForTXE>
}
 8001a28:	e0a7      	b.n	8001b7a <runCommand+0x582>
			writeMsgForTXE(&handler_USART_USB, "Prueba de encoder en curso, no es posible. \n");
 8001a2a:	4966      	ldr	r1, [pc, #408]	; (8001bc4 <runCommand+0x5cc>)
 8001a2c:	485c      	ldr	r0, [pc, #368]	; (8001ba0 <runCommand+0x5a8>)
 8001a2e:	f002 fc17 	bl	8004260 <writeMsgForTXE>
}
 8001a32:	e0a2      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "Start") == 0)
 8001a34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a38:	4963      	ldr	r1, [pc, #396]	; (8001bc8 <runCommand+0x5d0>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fbd0 	bl	80001e0 <strcmp>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d127      	bne.n	8001a96 <runCommand+0x49e>
		index_count=0;
 8001a46:	4b61      	ldr	r3, [pc, #388]	; (8001bcc <runCommand+0x5d4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
		value_dutty=0;
 8001a4c:	4b60      	ldr	r3, [pc, #384]	; (8001bd0 <runCommand+0x5d8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
		index_fre=0;
 8001a52:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <runCommand+0x5dc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty);
 8001a58:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <runCommand+0x59c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a5c      	ldr	r2, [pc, #368]	; (8001bd0 <runCommand+0x5d8>)
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 f91c 	bl	8003ca0 <updateDuttyCyclePercentage>
		updateFrequencyTimer(&handler_TIMER_Motor, frequency[index_fre]);
 8001a68:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <runCommand+0x5dc>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <runCommand+0x5e0>)
 8001a70:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4846      	ldr	r0, [pc, #280]	; (8001b90 <runCommand+0x598>)
 8001a78:	f000 fbc2 	bl	8002200 <updateFrequencyTimer>
		writeMsgForTXE(&handler_USART_USB, "Inicio del estudio... \n");
 8001a7c:	4957      	ldr	r1, [pc, #348]	; (8001bdc <runCommand+0x5e4>)
 8001a7e:	4848      	ldr	r0, [pc, #288]	; (8001ba0 <runCommand+0x5a8>)
 8001a80:	f002 fbee 	bl	8004260 <writeMsgForTXE>
		status_study(flag_dir&SET);
 8001a84:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <runCommand+0x5e8>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f8b8 	bl	8001c04 <status_study>
}
 8001a94:	e071      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "Stop") == 0)
 8001a96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a9a:	4952      	ldr	r1, [pc, #328]	; (8001be4 <runCommand+0x5ec>)
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fb9f 	bl	80001e0 <strcmp>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <runCommand+0x4c0>
		status_study(flag_dir&RESET);
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f000 f8ab 	bl	8001c04 <status_study>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado... \n");
 8001aae:	494e      	ldr	r1, [pc, #312]	; (8001be8 <runCommand+0x5f0>)
 8001ab0:	483b      	ldr	r0, [pc, #236]	; (8001ba0 <runCommand+0x5a8>)
 8001ab2:	f002 fbd5 	bl	8004260 <writeMsgForTXE>
}
 8001ab6:	e060      	b.n	8001b7a <runCommand+0x582>
	else if (strcmp(cmd, "Print") == 0)
 8001ab8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001abc:	494b      	ldr	r1, [pc, #300]	; (8001bec <runCommand+0x5f4>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fb8e 	bl	80001e0 <strcmp>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d153      	bne.n	8001b72 <runCommand+0x57a>
		if(flag_study==0)
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <runCommand+0x5c4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d14a      	bne.n	8001b68 <runCommand+0x570>
			for(uint8_t i=0; i<3;i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001ad8:	e041      	b.n	8001b5e <runCommand+0x566>
				sprintf(bufferMsg,"Estudio para Frecuencia: %u Hz \n", 100000/frequency[i]);
 8001ada:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ade:	4a3e      	ldr	r2, [pc, #248]	; (8001bd8 <runCommand+0x5e0>)
 8001ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <runCommand+0x590>)
 8001ae8:	fb93 f2f2 	sdiv	r2, r3, r2
 8001aec:	f107 0308 	add.w	r3, r7, #8
 8001af0:	493f      	ldr	r1, [pc, #252]	; (8001bf0 <runCommand+0x5f8>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fc6e 	bl	80053d4 <siprintf>
				writeMsg(&handler_USART_USB, bufferMsg);
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	4619      	mov	r1, r3
 8001afe:	4828      	ldr	r0, [pc, #160]	; (8001ba0 <runCommand+0x5a8>)
 8001b00:	f002 fb8f 	bl	8004222 <writeMsg>
				for(uint8_t e=0; e<21;e++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001b0a:	e01f      	b.n	8001b4c <runCommand+0x554>
					sprintf(bufferMsg,"Porcentaje de Dutty %u : %u Cuentas \n",  e, count_for_dutty[i][e]);
 8001b0c:	f897 4096 	ldrb.w	r4, [r7, #150]	; 0x96
 8001b10:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8001b14:	f897 1096 	ldrb.w	r1, [r7, #150]	; 0x96
 8001b18:	4836      	ldr	r0, [pc, #216]	; (8001bf4 <runCommand+0x5fc>)
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00da      	lsls	r2, r3, #3
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	1853      	adds	r3, r2, r1
 8001b26:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001b2a:	f107 0008 	add.w	r0, r7, #8
 8001b2e:	4622      	mov	r2, r4
 8001b30:	4931      	ldr	r1, [pc, #196]	; (8001bf8 <runCommand+0x600>)
 8001b32:	f003 fc4f 	bl	80053d4 <siprintf>
					writeMsg(&handler_USART_USB, bufferMsg);
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4818      	ldr	r0, [pc, #96]	; (8001ba0 <runCommand+0x5a8>)
 8001b3e:	f002 fb70 	bl	8004222 <writeMsg>
				for(uint8_t e=0; e<21;e++)
 8001b42:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001b46:	3301      	adds	r3, #1
 8001b48:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001b4c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001b50:	2b14      	cmp	r3, #20
 8001b52:	d9db      	bls.n	8001b0c <runCommand+0x514>
			for(uint8_t i=0; i<3;i++)
 8001b54:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001b5e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d9b9      	bls.n	8001ada <runCommand+0x4e2>
}
 8001b66:	e008      	b.n	8001b7a <runCommand+0x582>
			writeMsgForTXE(&handler_USART_USB, "Estudio no finalizado \n");
 8001b68:	4924      	ldr	r1, [pc, #144]	; (8001bfc <runCommand+0x604>)
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <runCommand+0x5a8>)
 8001b6c:	f002 fb78 	bl	8004260 <writeMsgForTXE>
}
 8001b70:	e003      	b.n	8001b7a <runCommand+0x582>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8001b72:	4923      	ldr	r1, [pc, #140]	; (8001c00 <runCommand+0x608>)
 8001b74:	480a      	ldr	r0, [pc, #40]	; (8001ba0 <runCommand+0x5a8>)
 8001b76:	f002 fb73 	bl	8004260 <writeMsgForTXE>
}
 8001b7a:	bf00      	nop
 8001b7c:	379c      	adds	r7, #156	; 0x9c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	08009c64 	.word	0x08009c64
 8001b88:	000186a0 	.word	0x000186a0
 8001b8c:	2000000c 	.word	0x2000000c
 8001b90:	200002cc 	.word	0x200002cc
 8001b94:	200002f4 	.word	0x200002f4
 8001b98:	2000000a 	.word	0x2000000a
 8001b9c:	08009c70 	.word	0x08009c70
 8001ba0:	20000260 	.word	0x20000260
 8001ba4:	08009c8c 	.word	0x08009c8c
 8001ba8:	2000037c 	.word	0x2000037c
 8001bac:	08009c94 	.word	0x08009c94
 8001bb0:	2000037e 	.word	0x2000037e
 8001bb4:	08009ca4 	.word	0x08009ca4
 8001bb8:	08009cb4 	.word	0x08009cb4
 8001bbc:	200002f8 	.word	0x200002f8
 8001bc0:	08009cc0 	.word	0x08009cc0
 8001bc4:	08009cd4 	.word	0x08009cd4
 8001bc8:	08009d04 	.word	0x08009d04
 8001bcc:	200002f9 	.word	0x200002f9
 8001bd0:	20000380 	.word	0x20000380
 8001bd4:	200002fa 	.word	0x200002fa
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	08009d0c 	.word	0x08009d0c
 8001be0:	2000000e 	.word	0x2000000e
 8001be4:	08009d24 	.word	0x08009d24
 8001be8:	08009d2c 	.word	0x08009d2c
 8001bec:	08009d44 	.word	0x08009d44
 8001bf0:	08009d4c 	.word	0x08009d4c
 8001bf4:	200002fc 	.word	0x200002fc
 8001bf8:	08009d70 	.word	0x08009d70
 8001bfc:	08009d98 	.word	0x08009d98
 8001c00:	08009db0 	.word	0x08009db0

08001c04 <status_study>:


//----------------------------Inicio de la definicion de las funciones-----------------------------------------

void status_study(uint8_t status)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d113      	bne.n	8001c3c <status_study+0x38>
	{
		//Activamos el PWM
		statusInOutPWM(handler_PWM_Motor_Test, CHANNEL_ENABLE);
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <status_study+0x70>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 fee8 	bl	80039f0 <statusInOutPWM>
		//Activamos la interrupcion
		statusiInterruptionTimer(&handler_TIMER_study, INTERRUPTION_ENABLE);
 8001c20:	2101      	movs	r1, #1
 8001c22:	4815      	ldr	r0, [pc, #84]	; (8001c78 <status_study+0x74>)
 8001c24:	f000 facc 	bl	80021c0 <statusiInterruptionTimer>
		//Activamos el motor
		GPIO_writePin (handler_GPIO_Motor_EN_Test, flag_dir&RESET);
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <status_study+0x78>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fd08 	bl	8003644 <GPIO_writePin>
		//levantamos Bandera
		flag_study = 1;
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <status_study+0x7c>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
		//Desactivamos el motor
		GPIO_writePin (handler_GPIO_Motor_EN_Test, flag_dir&SET);
		//Reiniciamos Bandera
		flag_study = 0;
	}
}
 8001c3a:	e017      	b.n	8001c6c <status_study+0x68>
		statusInOutPWM(handler_PWM_Motor_Test, CHANNEL_DISABLE);
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <status_study+0x70>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f001 fed4 	bl	80039f0 <statusInOutPWM>
		statusiInterruptionTimer(&handler_TIMER_study, INTERRUPTION_DISABLE);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	480b      	ldr	r0, [pc, #44]	; (8001c78 <status_study+0x74>)
 8001c4c:	f000 fab8 	bl	80021c0 <statusiInterruptionTimer>
		GPIO_writePin (handler_GPIO_Motor_EN_Test, flag_dir&SET);
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <status_study+0x78>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <status_study+0x80>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f001 fcef 	bl	8003644 <GPIO_writePin>
		flag_study = 0;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <status_study+0x7c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200002f4 	.word	0x200002f4
 8001c78:	200002dc 	.word	0x200002dc
 8001c7c:	200002ec 	.word	0x200002ec
 8001c80:	200002f8 	.word	0x200002f8
 8001c84:	2000000e 	.word	0x2000000e

08001c88 <change_dutty>:

void change_dutty(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b090      	sub	sp, #64	; 0x40
 8001c8c:	af00      	add	r7, sp, #0
	//Variable que guarda texto
	char bufferMsg[64]= {0};
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	223c      	movs	r2, #60	; 0x3c
 8001c96:	2100      	movs	r1, #0
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f002 fd13 	bl	80046c4 <memset>
	//Verificamos el caracter
	if(charRead=='+')
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <change_dutty+0xb0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b2b      	cmp	r3, #43	; 0x2b
 8001ca4:	d11f      	bne.n	8001ce6 <change_dutty+0x5e>
	{
		if(value_dutty_estatico<100)
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <change_dutty+0xb4>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b63      	cmp	r3, #99	; 0x63
 8001cac:	d805      	bhi.n	8001cba <change_dutty+0x32>
		{
			value_dutty_estatico++;
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <change_dutty+0xb4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <change_dutty+0xb4>)
 8001cb8:	701a      	strb	r2, [r3, #0]
		}
		//Actualizamos el valor del dutty y frecuencia
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty_estatico);
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <change_dutty+0xb8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <change_dutty+0xb4>)
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f001 ffeb 	bl	8003ca0 <updateDuttyCyclePercentage>
		//Convertimos texto
		sprintf(bufferMsg,"Valor dutty : %u \n", value_dutty_estatico);
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <change_dutty+0xb4>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	491c      	ldr	r1, [pc, #112]	; (8001d44 <change_dutty+0xbc>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fb7d 	bl	80053d4 <siprintf>
		//imprimimos mensaje
		writeMsg(&handler_USART_USB, bufferMsg);
 8001cda:	463b      	mov	r3, r7
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481a      	ldr	r0, [pc, #104]	; (8001d48 <change_dutty+0xc0>)
 8001ce0:	f002 fa9f 	bl	8004222 <writeMsg>
	}
	else
	{
		__NOP();
	}
}
 8001ce4:	e024      	b.n	8001d30 <change_dutty+0xa8>
	else if(charRead=='-')
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <change_dutty+0xb0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b2d      	cmp	r3, #45	; 0x2d
 8001cec:	d11f      	bne.n	8001d2e <change_dutty+0xa6>
		if(value_dutty_estatico>0)
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <change_dutty+0xb4>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <change_dutty+0x7a>
			value_dutty_estatico--;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <change_dutty+0xb4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <change_dutty+0xb4>)
 8001d00:	701a      	strb	r2, [r3, #0]
		updateDuttyCyclePercentage(handler_PWM_Motor_Test, value_dutty_estatico);
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <change_dutty+0xb8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <change_dutty+0xb4>)
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 ffc7 	bl	8003ca0 <updateDuttyCyclePercentage>
		sprintf(bufferMsg,"Valor dutty : %u \n", value_dutty_estatico);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <change_dutty+0xb4>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	463b      	mov	r3, r7
 8001d1a:	490a      	ldr	r1, [pc, #40]	; (8001d44 <change_dutty+0xbc>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fb59 	bl	80053d4 <siprintf>
		writeMsg(&handler_USART_USB, bufferMsg);
 8001d22:	463b      	mov	r3, r7
 8001d24:	4619      	mov	r1, r3
 8001d26:	4808      	ldr	r0, [pc, #32]	; (8001d48 <change_dutty+0xc0>)
 8001d28:	f002 fa7b 	bl	8004222 <writeMsg>
}
 8001d2c:	e000      	b.n	8001d30 <change_dutty+0xa8>
		__NOP();
 8001d2e:	bf00      	nop
}
 8001d30:	bf00      	nop
 8001d32:	3740      	adds	r7, #64	; 0x40
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	2000000a 	.word	0x2000000a
 8001d40:	200002f4 	.word	0x200002f4
 8001d44:	08009dc8 	.word	0x08009dc8
 8001d48:	20000260 	.word	0x20000260

08001d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <LoopForever+0xe>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	; (8001d98 <LoopForever+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d7a:	f002 fc7f 	bl	800467c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d7e:	f7ff f98b 	bl	8001098 <main>

08001d82 <LoopForever>:

LoopForever:
    b LoopForever
 8001d82:	e7fe      	b.n	8001d82 <LoopForever>
  ldr   r0, =_estack
 8001d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001d90:	0800a2b4 	.word	0x0800a2b4
  ldr r2, =_sbss
 8001d94:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001d98:	20000c34 	.word	0x20000c34

08001d9c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC_IRQHandler>

08001d9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
	return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_kill>:

int _kill(int pid, int sig)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001db8:	f002 fc5a 	bl	8004670 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2216      	movs	r2, #22
 8001dc0:	601a      	str	r2, [r3, #0]
	return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_exit>:

void _exit (int status)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffe7 	bl	8001dae <_kill>
	while (1) {}		/* Make sure we hang here */
 8001de0:	e7fe      	b.n	8001de0 <_exit+0x12>

08001de2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e00a      	b.n	8001e0a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001df4:	f3af 8000 	nop.w
 8001df8:	4601      	mov	r1, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	60ba      	str	r2, [r7, #8]
 8001e00:	b2ca      	uxtb	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbf0      	blt.n	8001df4 <_read+0x12>
	}

return len;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e009      	b.n	8001e42 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	60ba      	str	r2, [r7, #8]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbf1      	blt.n	8001e2e <_write+0x12>
	}
	return len;
 8001e4a:	687b      	ldr	r3, [r7, #4]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_close>:

int _close(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	return -1;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e7c:	605a      	str	r2, [r3, #4]
	return 0;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <_isatty>:

int _isatty(int file)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	return 1;
 8001e94:	2301      	movs	r3, #1
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
	return 0;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <_sbrk+0x5c>)
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <_sbrk+0x60>)
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d102      	bne.n	8001ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <_sbrk+0x64>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <_sbrk+0x68>)
 8001edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <_sbrk+0x64>)
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d207      	bcs.n	8001efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eec:	f002 fbc0 	bl	8004670 <__errno>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	e009      	b.n	8001f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <_sbrk+0x64>)
 8001f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20020000 	.word	0x20020000
 8001f1c:	00000400 	.word	0x00000400
 8001f20:	200003c4 	.word	0x200003c4
 8001f24:	20000c38 	.word	0x20000c38

08001f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db0b      	blt.n	8001f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 021f 	and.w	r2, r3, #31
 8001f40:	4907      	ldr	r1, [pc, #28]	; (8001f60 <__NVIC_EnableIRQ+0x38>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2001      	movs	r0, #1
 8001f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100

08001f64 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d10a      	bne.n	8001f8c <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001f76:	4b62      	ldr	r3, [pc, #392]	; (8002100 <BasicTimer_Config+0x19c>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a61      	ldr	r2, [pc, #388]	; (8002100 <BasicTimer_Config+0x19c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	4a5f      	ldr	r2, [pc, #380]	; (8002104 <BasicTimer_Config+0x1a0>)
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e02e      	b.n	8001fea <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <BasicTimer_Config+0x1a4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d10a      	bne.n	8001fac <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001f96:	4b5a      	ldr	r3, [pc, #360]	; (8002100 <BasicTimer_Config+0x19c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a59      	ldr	r2, [pc, #356]	; (8002100 <BasicTimer_Config+0x19c>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4a59      	ldr	r2, [pc, #356]	; (800210c <BasicTimer_Config+0x1a8>)
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01e      	b.n	8001fea <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a57      	ldr	r2, [pc, #348]	; (8002110 <BasicTimer_Config+0x1ac>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d10a      	bne.n	8001fcc <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001fb6:	4b52      	ldr	r3, [pc, #328]	; (8002100 <BasicTimer_Config+0x19c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a51      	ldr	r2, [pc, #324]	; (8002100 <BasicTimer_Config+0x19c>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4a53      	ldr	r2, [pc, #332]	; (8002114 <BasicTimer_Config+0x1b0>)
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e00e      	b.n	8001fea <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a51      	ldr	r2, [pc, #324]	; (8002118 <BasicTimer_Config+0x1b4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d109      	bne.n	8001fea <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <BasicTimer_Config+0x19c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a49      	ldr	r2, [pc, #292]	; (8002100 <BasicTimer_Config+0x19c>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	4a4d      	ldr	r2, [pc, #308]	; (800211c <BasicTimer_Config+0x1b8>)
 8001fe8:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001fea:	f001 fb6d 	bl	80036c8 <getConfigPLL>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001ff2:	f001 fb85 	bl	8003700 <getClockAPB1>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8001ffa:	7bbb      	ldrb	r3, [r7, #14]
 8001ffc:	2b31      	cmp	r3, #49	; 0x31
 8001ffe:	d903      	bls.n	8002008 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e000      	b.n	800200a <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8002008:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	8852      	ldrh	r2, [r2, #2]
 8002010:	fb02 f303 	mul.w	r3, r2, r3
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d112      	bne.n	800204a <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	f022 0210 	bic.w	r2, r2, #16
 8002032:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	3201      	adds	r2, #1
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
 8002048:	e018      	b.n	800207c <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f022 0210 	bic.w	r2, r2, #16
 8002058:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f042 0210 	orr.w	r2, r2, #16
 8002068:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6852      	ldr	r2, [r2, #4]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d103      	bne.n	8002092 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800208a:	201c      	movs	r0, #28
 800208c:	f7ff ff4c 	bl	8001f28 <__NVIC_EnableIRQ>
 8002090:	e019      	b.n	80020c6 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <BasicTimer_Config+0x1a4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d103      	bne.n	80020a4 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 800209c:	201d      	movs	r0, #29
 800209e:	f7ff ff43 	bl	8001f28 <__NVIC_EnableIRQ>
 80020a2:	e010      	b.n	80020c6 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a19      	ldr	r2, [pc, #100]	; (8002110 <BasicTimer_Config+0x1ac>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d103      	bne.n	80020b6 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 80020ae:	201e      	movs	r0, #30
 80020b0:	f7ff ff3a 	bl	8001f28 <__NVIC_EnableIRQ>
 80020b4:	e007      	b.n	80020c6 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	4a17      	ldr	r2, [pc, #92]	; (8002118 <BasicTimer_Config+0x1b4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d102      	bne.n	80020c6 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 80020c0:	2032      	movs	r0, #50	; 0x32
 80020c2:	f7ff ff31 	bl	8001f28 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80020c6:	b662      	cpsie	i
}
 80020c8:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	7a1b      	ldrb	r3, [r3, #8]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f875 	bl	80021c0 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f022 0201 	bic.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	200003c8 	.word	0x200003c8
 8002108:	40000400 	.word	0x40000400
 800210c:	200003cc 	.word	0x200003cc
 8002110:	40000800 	.word	0x40000800
 8002114:	200003d0 	.word	0x200003d0
 8002118:	40000c00 	.word	0x40000c00
 800211c:	200003d4 	.word	0x200003d4

08002120 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
	__NOP();
 8002124:	bf00      	nop
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
	__NOP();
 8002134:	bf00      	nop
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <TIM2_IRQHandler+0x1c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <TIM2_IRQHandler+0x1c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002154:	f7ff f960 	bl	8001418 <BasicTimer2_Callback>

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200003c8 	.word	0x200003c8

08002160 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <TIM3_IRQHandler+0x1c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691a      	ldr	r2, [r3, #16]
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <TIM3_IRQHandler+0x1c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002174:	f7ff f95a 	bl	800142c <BasicTimer3_Callback>

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200003cc 	.word	0x200003cc

08002180 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <TIM4_IRQHandler+0x1c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <TIM4_IRQHandler+0x1c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002194:	f7ff ffc4 	bl	8002120 <BasicTimer4_Callback>

}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200003d0 	.word	0x200003d0

080021a0 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <TIM5_IRQHandler+0x1c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <TIM5_IRQHandler+0x1c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 80021b4:	f7ff ffbc 	bl	8002130 <BasicTimer5_Callback>

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200003d4 	.word	0x200003d4

080021c0 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 80021e2:	e007      	b.n	80021f4 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	60da      	str	r2, [r3, #12]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 800220c:	887a      	ldrh	r2, [r7, #2]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6852      	ldr	r2, [r2, #4]
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <__NVIC_EnableIRQ>:
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af02      	add	r7, sp, #8
 8002272:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2300      	movs	r3, #0
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2301      	movs	r3, #1
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	f001 f891 	bl	80033ac <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f001 f8ae 	bl	80033f0 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002294:	4b97      	ldr	r3, [pc, #604]	; (80024f4 <extInt_Config+0x288>)
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	4a96      	ldr	r2, [pc, #600]	; (80024f4 <extInt_Config+0x288>)
 800229a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229e:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	f200 85cf 	bhi.w	8002e4a <extInt_Config+0xbde>
 80022ac:	a201      	add	r2, pc, #4	; (adr r2, 80022b4 <extInt_Config+0x48>)
 80022ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b2:	bf00      	nop
 80022b4:	080022f5 	.word	0x080022f5
 80022b8:	080023ab 	.word	0x080023ab
 80022bc:	08002461 	.word	0x08002461
 80022c0:	08002537 	.word	0x08002537
 80022c4:	080025ed 	.word	0x080025ed
 80022c8:	0800269b 	.word	0x0800269b
 80022cc:	08002761 	.word	0x08002761
 80022d0:	08002809 	.word	0x08002809
 80022d4:	080028b1 	.word	0x080028b1
 80022d8:	08002959 	.word	0x08002959
 80022dc:	08002a1f 	.word	0x08002a1f
 80022e0:	08002ac7 	.word	0x08002ac7
 80022e4:	08002b6f 	.word	0x08002b6f
 80022e8:	08002c35 	.word	0x08002c35
 80022ec:	08002cdd 	.word	0x08002cdd
 80022f0:	08002d85 	.word	0x08002d85
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80022f4:	4b80      	ldr	r3, [pc, #512]	; (80024f8 <extInt_Config+0x28c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	4a7f      	ldr	r2, [pc, #508]	; (80024f8 <extInt_Config+0x28c>)
 80022fa:	f023 030f 	bic.w	r3, r3, #15
 80022fe:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4a7d      	ldr	r2, [pc, #500]	; (80024fc <extInt_Config+0x290>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d105      	bne.n	8002318 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 800230c:	4b7a      	ldr	r3, [pc, #488]	; (80024f8 <extInt_Config+0x28c>)
 800230e:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <extInt_Config+0x28c>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002314:	f000 bd9b 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4a78      	ldr	r2, [pc, #480]	; (8002500 <extInt_Config+0x294>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d107      	bne.n	8002334 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002324:	4b74      	ldr	r3, [pc, #464]	; (80024f8 <extInt_Config+0x28c>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a73      	ldr	r2, [pc, #460]	; (80024f8 <extInt_Config+0x28c>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6093      	str	r3, [r2, #8]
		break;
 8002330:	f000 bd8d 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4a72      	ldr	r2, [pc, #456]	; (8002504 <extInt_Config+0x298>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d107      	bne.n	8002350 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002340:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <extInt_Config+0x28c>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a6c      	ldr	r2, [pc, #432]	; (80024f8 <extInt_Config+0x28c>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	6093      	str	r3, [r2, #8]
		break;
 800234c:	f000 bd7f 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4a6c      	ldr	r2, [pc, #432]	; (8002508 <extInt_Config+0x29c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d107      	bne.n	800236c <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 800235c:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <extInt_Config+0x28c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a65      	ldr	r2, [pc, #404]	; (80024f8 <extInt_Config+0x28c>)
 8002362:	f043 0303 	orr.w	r3, r3, #3
 8002366:	6093      	str	r3, [r2, #8]
		break;
 8002368:	f000 bd71 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4a66      	ldr	r2, [pc, #408]	; (800250c <extInt_Config+0x2a0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d107      	bne.n	8002388 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <extInt_Config+0x28c>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <extInt_Config+0x28c>)
 800237e:	f043 0304 	orr.w	r3, r3, #4
 8002382:	6093      	str	r3, [r2, #8]
		break;
 8002384:	f000 bd63 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4a60      	ldr	r2, [pc, #384]	; (8002510 <extInt_Config+0x2a4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d107      	bne.n	80023a4 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002394:	4b58      	ldr	r3, [pc, #352]	; (80024f8 <extInt_Config+0x28c>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <extInt_Config+0x28c>)
 800239a:	f043 0307 	orr.w	r3, r3, #7
 800239e:	6093      	str	r3, [r2, #8]
		break;
 80023a0:	f000 bd55 	b.w	8002e4e <extInt_Config+0xbe2>
			__NOP();
 80023a4:	bf00      	nop
		break;
 80023a6:	f000 bd52 	b.w	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <extInt_Config+0x28c>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <extInt_Config+0x28c>)
 80023b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b4:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <extInt_Config+0x290>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d105      	bne.n	80023ce <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80023c2:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <extInt_Config+0x28c>)
 80023c4:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <extInt_Config+0x28c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80023ca:	f000 bd40 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <extInt_Config+0x294>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d107      	bne.n	80023ea <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <extInt_Config+0x28c>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4a46      	ldr	r2, [pc, #280]	; (80024f8 <extInt_Config+0x28c>)
 80023e0:	f043 0310 	orr.w	r3, r3, #16
 80023e4:	6093      	str	r3, [r2, #8]
		break;
 80023e6:	f000 bd32 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a44      	ldr	r2, [pc, #272]	; (8002504 <extInt_Config+0x298>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d107      	bne.n	8002406 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80023f6:	4b40      	ldr	r3, [pc, #256]	; (80024f8 <extInt_Config+0x28c>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	4a3f      	ldr	r2, [pc, #252]	; (80024f8 <extInt_Config+0x28c>)
 80023fc:	f043 0320 	orr.w	r3, r3, #32
 8002400:	6093      	str	r3, [r2, #8]
		break;
 8002402:	f000 bd24 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a3e      	ldr	r2, [pc, #248]	; (8002508 <extInt_Config+0x29c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d107      	bne.n	8002422 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <extInt_Config+0x28c>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <extInt_Config+0x28c>)
 8002418:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800241c:	6093      	str	r3, [r2, #8]
		break;
 800241e:	f000 bd16 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a38      	ldr	r2, [pc, #224]	; (800250c <extInt_Config+0x2a0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d107      	bne.n	800243e <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <extInt_Config+0x28c>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <extInt_Config+0x28c>)
 8002434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002438:	6093      	str	r3, [r2, #8]
		break;
 800243a:	f000 bd08 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a32      	ldr	r2, [pc, #200]	; (8002510 <extInt_Config+0x2a4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d107      	bne.n	800245a <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <extInt_Config+0x28c>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <extInt_Config+0x28c>)
 8002450:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002454:	6093      	str	r3, [r2, #8]
		break;
 8002456:	f000 bcfa 	b.w	8002e4e <extInt_Config+0xbe2>
			__NOP();
 800245a:	bf00      	nop
		break;
 800245c:	f000 bcf7 	b.w	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8002460:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <extInt_Config+0x28c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <extInt_Config+0x28c>)
 8002466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800246a:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	4a22      	ldr	r2, [pc, #136]	; (80024fc <extInt_Config+0x290>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d105      	bne.n	8002484 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <extInt_Config+0x28c>)
 800247a:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <extInt_Config+0x28c>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002480:	f000 bce5 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <extInt_Config+0x294>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d107      	bne.n	80024a0 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <extInt_Config+0x28c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <extInt_Config+0x28c>)
 8002496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249a:	6093      	str	r3, [r2, #8]
		break;
 800249c:	f000 bcd7 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	4a17      	ldr	r2, [pc, #92]	; (8002504 <extInt_Config+0x298>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d107      	bne.n	80024bc <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <extInt_Config+0x28c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a11      	ldr	r2, [pc, #68]	; (80024f8 <extInt_Config+0x28c>)
 80024b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b6:	6093      	str	r3, [r2, #8]
		break;
 80024b8:	f000 bcc9 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4a11      	ldr	r2, [pc, #68]	; (8002508 <extInt_Config+0x29c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d107      	bne.n	80024d8 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <extInt_Config+0x28c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <extInt_Config+0x28c>)
 80024ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80024d2:	6093      	str	r3, [r2, #8]
		break;
 80024d4:	f000 bcbb 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <extInt_Config+0x2a0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d117      	bne.n	8002514 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <extInt_Config+0x28c>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <extInt_Config+0x28c>)
 80024ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ee:	6093      	str	r3, [r2, #8]
		break;
 80024f0:	f000 bcad 	b.w	8002e4e <extInt_Config+0xbe2>
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40013800 	.word	0x40013800
 80024fc:	40020000 	.word	0x40020000
 8002500:	40020400 	.word	0x40020400
 8002504:	40020800 	.word	0x40020800
 8002508:	40020c00 	.word	0x40020c00
 800250c:	40021000 	.word	0x40021000
 8002510:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	4a8a      	ldr	r2, [pc, #552]	; (8002744 <extInt_Config+0x4d8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d107      	bne.n	8002530 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002520:	4b89      	ldr	r3, [pc, #548]	; (8002748 <extInt_Config+0x4dc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a88      	ldr	r2, [pc, #544]	; (8002748 <extInt_Config+0x4dc>)
 8002526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800252a:	6093      	str	r3, [r2, #8]
		break;
 800252c:	f000 bc8f 	b.w	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002530:	bf00      	nop
		break;
 8002532:	f000 bc8c 	b.w	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8002536:	4b84      	ldr	r3, [pc, #528]	; (8002748 <extInt_Config+0x4dc>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4a83      	ldr	r2, [pc, #524]	; (8002748 <extInt_Config+0x4dc>)
 800253c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002540:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a80      	ldr	r2, [pc, #512]	; (800274c <extInt_Config+0x4e0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d105      	bne.n	800255a <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800254e:	4b7e      	ldr	r3, [pc, #504]	; (8002748 <extInt_Config+0x4dc>)
 8002550:	4a7d      	ldr	r2, [pc, #500]	; (8002748 <extInt_Config+0x4dc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002556:	f000 bc7a 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a7b      	ldr	r2, [pc, #492]	; (8002750 <extInt_Config+0x4e4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d107      	bne.n	8002576 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002566:	4b78      	ldr	r3, [pc, #480]	; (8002748 <extInt_Config+0x4dc>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4a77      	ldr	r2, [pc, #476]	; (8002748 <extInt_Config+0x4dc>)
 800256c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002570:	6093      	str	r3, [r2, #8]
		break;
 8002572:	f000 bc6c 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a75      	ldr	r2, [pc, #468]	; (8002754 <extInt_Config+0x4e8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d107      	bne.n	8002592 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002582:	4b71      	ldr	r3, [pc, #452]	; (8002748 <extInt_Config+0x4dc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4a70      	ldr	r2, [pc, #448]	; (8002748 <extInt_Config+0x4dc>)
 8002588:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800258c:	6093      	str	r3, [r2, #8]
		break;
 800258e:	f000 bc5e 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a6f      	ldr	r2, [pc, #444]	; (8002758 <extInt_Config+0x4ec>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d107      	bne.n	80025ae <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800259e:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <extInt_Config+0x4dc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4a69      	ldr	r2, [pc, #420]	; (8002748 <extInt_Config+0x4dc>)
 80025a4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80025a8:	6093      	str	r3, [r2, #8]
		break;
 80025aa:	f000 bc50 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a69      	ldr	r2, [pc, #420]	; (800275c <extInt_Config+0x4f0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d107      	bne.n	80025ca <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80025ba:	4b63      	ldr	r3, [pc, #396]	; (8002748 <extInt_Config+0x4dc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4a62      	ldr	r2, [pc, #392]	; (8002748 <extInt_Config+0x4dc>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c4:	6093      	str	r3, [r2, #8]
		break;
 80025c6:	f000 bc42 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a5c      	ldr	r2, [pc, #368]	; (8002744 <extInt_Config+0x4d8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d107      	bne.n	80025e6 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <extInt_Config+0x4dc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a5b      	ldr	r2, [pc, #364]	; (8002748 <extInt_Config+0x4dc>)
 80025dc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80025e0:	6093      	str	r3, [r2, #8]
		break;
 80025e2:	f000 bc34 	b.w	8002e4e <extInt_Config+0xbe2>
			__NOP();
 80025e6:	bf00      	nop
		break;
 80025e8:	f000 bc31 	b.w	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80025ec:	4b56      	ldr	r3, [pc, #344]	; (8002748 <extInt_Config+0x4dc>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4a55      	ldr	r2, [pc, #340]	; (8002748 <extInt_Config+0x4dc>)
 80025f2:	f023 030f 	bic.w	r3, r3, #15
 80025f6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4a53      	ldr	r2, [pc, #332]	; (800274c <extInt_Config+0x4e0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d105      	bne.n	8002610 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <extInt_Config+0x4dc>)
 8002606:	4a50      	ldr	r2, [pc, #320]	; (8002748 <extInt_Config+0x4dc>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800260c:	f000 bc1f 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4a4e      	ldr	r2, [pc, #312]	; (8002750 <extInt_Config+0x4e4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d107      	bne.n	800262c <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 800261c:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <extInt_Config+0x4dc>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a49      	ldr	r2, [pc, #292]	; (8002748 <extInt_Config+0x4dc>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	60d3      	str	r3, [r2, #12]
		break;
 8002628:	f000 bc11 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	4a48      	ldr	r2, [pc, #288]	; (8002754 <extInt_Config+0x4e8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d107      	bne.n	8002648 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002638:	4b43      	ldr	r3, [pc, #268]	; (8002748 <extInt_Config+0x4dc>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4a42      	ldr	r2, [pc, #264]	; (8002748 <extInt_Config+0x4dc>)
 800263e:	f043 0302 	orr.w	r3, r3, #2
 8002642:	60d3      	str	r3, [r2, #12]
		break;
 8002644:	f000 bc03 	b.w	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4a42      	ldr	r2, [pc, #264]	; (8002758 <extInt_Config+0x4ec>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d106      	bne.n	8002662 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002654:	4b3c      	ldr	r3, [pc, #240]	; (8002748 <extInt_Config+0x4dc>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a3b      	ldr	r2, [pc, #236]	; (8002748 <extInt_Config+0x4dc>)
 800265a:	f043 0303 	orr.w	r3, r3, #3
 800265e:	60d3      	str	r3, [r2, #12]
		break;
 8002660:	e3f5      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a3c      	ldr	r2, [pc, #240]	; (800275c <extInt_Config+0x4f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d106      	bne.n	800267c <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800266e:	4b36      	ldr	r3, [pc, #216]	; (8002748 <extInt_Config+0x4dc>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a35      	ldr	r2, [pc, #212]	; (8002748 <extInt_Config+0x4dc>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	60d3      	str	r3, [r2, #12]
		break;
 800267a:	e3e8      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4a30      	ldr	r2, [pc, #192]	; (8002744 <extInt_Config+0x4d8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d106      	bne.n	8002696 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002688:	4b2f      	ldr	r3, [pc, #188]	; (8002748 <extInt_Config+0x4dc>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a2e      	ldr	r2, [pc, #184]	; (8002748 <extInt_Config+0x4dc>)
 800268e:	f043 0307 	orr.w	r3, r3, #7
 8002692:	60d3      	str	r3, [r2, #12]
		break;
 8002694:	e3db      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002696:	bf00      	nop
		break;
 8002698:	e3d9      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 800269a:	4b2b      	ldr	r3, [pc, #172]	; (8002748 <extInt_Config+0x4dc>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <extInt_Config+0x4dc>)
 80026a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026a4:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	4a27      	ldr	r2, [pc, #156]	; (800274c <extInt_Config+0x4e0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d104      	bne.n	80026bc <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80026b2:	4b25      	ldr	r3, [pc, #148]	; (8002748 <extInt_Config+0x4dc>)
 80026b4:	4a24      	ldr	r2, [pc, #144]	; (8002748 <extInt_Config+0x4dc>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80026ba:	e3c8      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <extInt_Config+0x4e4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d106      	bne.n	80026d6 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80026c8:	4b1f      	ldr	r3, [pc, #124]	; (8002748 <extInt_Config+0x4dc>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <extInt_Config+0x4dc>)
 80026ce:	f043 0310 	orr.w	r3, r3, #16
 80026d2:	60d3      	str	r3, [r2, #12]
		break;
 80026d4:	e3bb      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	; (8002754 <extInt_Config+0x4e8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d106      	bne.n	80026f0 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80026e2:	4b19      	ldr	r3, [pc, #100]	; (8002748 <extInt_Config+0x4dc>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	4a18      	ldr	r2, [pc, #96]	; (8002748 <extInt_Config+0x4dc>)
 80026e8:	f043 0320 	orr.w	r3, r3, #32
 80026ec:	60d3      	str	r3, [r2, #12]
		break;
 80026ee:	e3ae      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <extInt_Config+0x4ec>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d106      	bne.n	800270a <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <extInt_Config+0x4dc>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <extInt_Config+0x4dc>)
 8002702:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002706:	60d3      	str	r3, [r2, #12]
		break;
 8002708:	e3a1      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <extInt_Config+0x4f0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d106      	bne.n	8002724 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <extInt_Config+0x4dc>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4a0b      	ldr	r2, [pc, #44]	; (8002748 <extInt_Config+0x4dc>)
 800271c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002720:	60d3      	str	r3, [r2, #12]
		break;
 8002722:	e394      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4a06      	ldr	r2, [pc, #24]	; (8002744 <extInt_Config+0x4d8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d106      	bne.n	800273e <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <extInt_Config+0x4dc>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <extInt_Config+0x4dc>)
 8002736:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800273a:	60d3      	str	r3, [r2, #12]
		break;
 800273c:	e387      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 800273e:	bf00      	nop
		break;
 8002740:	e385      	b.n	8002e4e <extInt_Config+0xbe2>
 8002742:	bf00      	nop
 8002744:	40021c00 	.word	0x40021c00
 8002748:	40013800 	.word	0x40013800
 800274c:	40020000 	.word	0x40020000
 8002750:	40020400 	.word	0x40020400
 8002754:	40020800 	.word	0x40020800
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8002760:	4b86      	ldr	r3, [pc, #536]	; (800297c <extInt_Config+0x710>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a85      	ldr	r2, [pc, #532]	; (800297c <extInt_Config+0x710>)
 8002766:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800276a:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4a83      	ldr	r2, [pc, #524]	; (8002980 <extInt_Config+0x714>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d104      	bne.n	8002782 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002778:	4b80      	ldr	r3, [pc, #512]	; (800297c <extInt_Config+0x710>)
 800277a:	4a80      	ldr	r2, [pc, #512]	; (800297c <extInt_Config+0x710>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002780:	e365      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4a7e      	ldr	r2, [pc, #504]	; (8002984 <extInt_Config+0x718>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d106      	bne.n	800279c <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800278e:	4b7b      	ldr	r3, [pc, #492]	; (800297c <extInt_Config+0x710>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	4a7a      	ldr	r2, [pc, #488]	; (800297c <extInt_Config+0x710>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	60d3      	str	r3, [r2, #12]
		break;
 800279a:	e358      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a79      	ldr	r2, [pc, #484]	; (8002988 <extInt_Config+0x71c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d106      	bne.n	80027b6 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80027a8:	4b74      	ldr	r3, [pc, #464]	; (800297c <extInt_Config+0x710>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	4a73      	ldr	r2, [pc, #460]	; (800297c <extInt_Config+0x710>)
 80027ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b2:	60d3      	str	r3, [r2, #12]
		break;
 80027b4:	e34b      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a73      	ldr	r2, [pc, #460]	; (800298c <extInt_Config+0x720>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d106      	bne.n	80027d0 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 80027c2:	4b6e      	ldr	r3, [pc, #440]	; (800297c <extInt_Config+0x710>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a6d      	ldr	r2, [pc, #436]	; (800297c <extInt_Config+0x710>)
 80027c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80027cc:	60d3      	str	r3, [r2, #12]
		break;
 80027ce:	e33e      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	4a6e      	ldr	r2, [pc, #440]	; (8002990 <extInt_Config+0x724>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d106      	bne.n	80027ea <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80027dc:	4b67      	ldr	r3, [pc, #412]	; (800297c <extInt_Config+0x710>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a66      	ldr	r2, [pc, #408]	; (800297c <extInt_Config+0x710>)
 80027e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e6:	60d3      	str	r3, [r2, #12]
		break;
 80027e8:	e331      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a68      	ldr	r2, [pc, #416]	; (8002994 <extInt_Config+0x728>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d106      	bne.n	8002804 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80027f6:	4b61      	ldr	r3, [pc, #388]	; (800297c <extInt_Config+0x710>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4a60      	ldr	r2, [pc, #384]	; (800297c <extInt_Config+0x710>)
 80027fc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002800:	60d3      	str	r3, [r2, #12]
		break;
 8002802:	e324      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002804:	bf00      	nop
		break;
 8002806:	e322      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8002808:	4b5c      	ldr	r3, [pc, #368]	; (800297c <extInt_Config+0x710>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a5b      	ldr	r2, [pc, #364]	; (800297c <extInt_Config+0x710>)
 800280e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002812:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4a59      	ldr	r2, [pc, #356]	; (8002980 <extInt_Config+0x714>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d104      	bne.n	800282a <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8002820:	4b56      	ldr	r3, [pc, #344]	; (800297c <extInt_Config+0x710>)
 8002822:	4a56      	ldr	r2, [pc, #344]	; (800297c <extInt_Config+0x710>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002828:	e311      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a54      	ldr	r2, [pc, #336]	; (8002984 <extInt_Config+0x718>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d106      	bne.n	8002844 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <extInt_Config+0x710>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4a50      	ldr	r2, [pc, #320]	; (800297c <extInt_Config+0x710>)
 800283c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002840:	60d3      	str	r3, [r2, #12]
		break;
 8002842:	e304      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <extInt_Config+0x71c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d106      	bne.n	800285e <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8002850:	4b4a      	ldr	r3, [pc, #296]	; (800297c <extInt_Config+0x710>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a49      	ldr	r2, [pc, #292]	; (800297c <extInt_Config+0x710>)
 8002856:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800285a:	60d3      	str	r3, [r2, #12]
		break;
 800285c:	e2f7      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a49      	ldr	r2, [pc, #292]	; (800298c <extInt_Config+0x720>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d106      	bne.n	8002878 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800286a:	4b44      	ldr	r3, [pc, #272]	; (800297c <extInt_Config+0x710>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4a43      	ldr	r2, [pc, #268]	; (800297c <extInt_Config+0x710>)
 8002870:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002874:	60d3      	str	r3, [r2, #12]
		break;
 8002876:	e2ea      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4a44      	ldr	r2, [pc, #272]	; (8002990 <extInt_Config+0x724>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d106      	bne.n	8002892 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002884:	4b3d      	ldr	r3, [pc, #244]	; (800297c <extInt_Config+0x710>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a3c      	ldr	r2, [pc, #240]	; (800297c <extInt_Config+0x710>)
 800288a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288e:	60d3      	str	r3, [r2, #12]
		break;
 8002890:	e2dd      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a3e      	ldr	r2, [pc, #248]	; (8002994 <extInt_Config+0x728>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d106      	bne.n	80028ac <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800289e:	4b37      	ldr	r3, [pc, #220]	; (800297c <extInt_Config+0x710>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a36      	ldr	r2, [pc, #216]	; (800297c <extInt_Config+0x710>)
 80028a4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80028a8:	60d3      	str	r3, [r2, #12]
		break;
 80028aa:	e2d0      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 80028ac:	bf00      	nop
		break;
 80028ae:	e2ce      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <extInt_Config+0x710>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	4a31      	ldr	r2, [pc, #196]	; (800297c <extInt_Config+0x710>)
 80028b6:	f023 030f 	bic.w	r3, r3, #15
 80028ba:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <extInt_Config+0x714>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d104      	bne.n	80028d2 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <extInt_Config+0x710>)
 80028ca:	4a2c      	ldr	r2, [pc, #176]	; (800297c <extInt_Config+0x710>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80028d0:	e2bd      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a2a      	ldr	r2, [pc, #168]	; (8002984 <extInt_Config+0x718>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d106      	bne.n	80028ec <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80028de:	4b27      	ldr	r3, [pc, #156]	; (800297c <extInt_Config+0x710>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	4a26      	ldr	r2, [pc, #152]	; (800297c <extInt_Config+0x710>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6113      	str	r3, [r2, #16]
		break;
 80028ea:	e2b0      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a25      	ldr	r2, [pc, #148]	; (8002988 <extInt_Config+0x71c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d106      	bne.n	8002906 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80028f8:	4b20      	ldr	r3, [pc, #128]	; (800297c <extInt_Config+0x710>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	4a1f      	ldr	r2, [pc, #124]	; (800297c <extInt_Config+0x710>)
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	6113      	str	r3, [r2, #16]
		break;
 8002904:	e2a3      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <extInt_Config+0x720>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d106      	bne.n	8002920 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <extInt_Config+0x710>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	4a19      	ldr	r2, [pc, #100]	; (800297c <extInt_Config+0x710>)
 8002918:	f043 0303 	orr.w	r3, r3, #3
 800291c:	6113      	str	r3, [r2, #16]
		break;
 800291e:	e296      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <extInt_Config+0x724>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d106      	bne.n	800293a <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <extInt_Config+0x710>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a12      	ldr	r2, [pc, #72]	; (800297c <extInt_Config+0x710>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6113      	str	r3, [r2, #16]
		break;
 8002938:	e289      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <extInt_Config+0x728>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d106      	bne.n	8002954 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <extInt_Config+0x710>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4a0c      	ldr	r2, [pc, #48]	; (800297c <extInt_Config+0x710>)
 800294c:	f043 0307 	orr.w	r3, r3, #7
 8002950:	6113      	str	r3, [r2, #16]
		break;
 8002952:	e27c      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002954:	bf00      	nop
		break;
 8002956:	e27a      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <extInt_Config+0x710>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <extInt_Config+0x710>)
 800295e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002962:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4a05      	ldr	r2, [pc, #20]	; (8002980 <extInt_Config+0x714>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d113      	bne.n	8002998 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002970:	4b02      	ldr	r3, [pc, #8]	; (800297c <extInt_Config+0x710>)
 8002972:	4a02      	ldr	r2, [pc, #8]	; (800297c <extInt_Config+0x710>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002978:	e269      	b.n	8002e4e <extInt_Config+0xbe2>
 800297a:	bf00      	nop
 800297c:	40013800 	.word	0x40013800
 8002980:	40020000 	.word	0x40020000
 8002984:	40020400 	.word	0x40020400
 8002988:	40020800 	.word	0x40020800
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40021000 	.word	0x40021000
 8002994:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	4a83      	ldr	r2, [pc, #524]	; (8002bac <extInt_Config+0x940>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d106      	bne.n	80029b2 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80029a4:	4b82      	ldr	r3, [pc, #520]	; (8002bb0 <extInt_Config+0x944>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	4a81      	ldr	r2, [pc, #516]	; (8002bb0 <extInt_Config+0x944>)
 80029aa:	f043 0310 	orr.w	r3, r3, #16
 80029ae:	6113      	str	r3, [r2, #16]
		break;
 80029b0:	e24d      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a7e      	ldr	r2, [pc, #504]	; (8002bb4 <extInt_Config+0x948>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d106      	bne.n	80029cc <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80029be:	4b7c      	ldr	r3, [pc, #496]	; (8002bb0 <extInt_Config+0x944>)
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	4a7b      	ldr	r2, [pc, #492]	; (8002bb0 <extInt_Config+0x944>)
 80029c4:	f043 0320 	orr.w	r3, r3, #32
 80029c8:	6113      	str	r3, [r2, #16]
		break;
 80029ca:	e240      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a79      	ldr	r2, [pc, #484]	; (8002bb8 <extInt_Config+0x94c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d106      	bne.n	80029e6 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80029d8:	4b75      	ldr	r3, [pc, #468]	; (8002bb0 <extInt_Config+0x944>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	4a74      	ldr	r2, [pc, #464]	; (8002bb0 <extInt_Config+0x944>)
 80029de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80029e2:	6113      	str	r3, [r2, #16]
		break;
 80029e4:	e233      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a73      	ldr	r2, [pc, #460]	; (8002bbc <extInt_Config+0x950>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d106      	bne.n	8002a00 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80029f2:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <extInt_Config+0x944>)
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	4a6e      	ldr	r2, [pc, #440]	; (8002bb0 <extInt_Config+0x944>)
 80029f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029fc:	6113      	str	r3, [r2, #16]
		break;
 80029fe:	e226      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <extInt_Config+0x954>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d106      	bne.n	8002a1a <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002a0c:	4b68      	ldr	r3, [pc, #416]	; (8002bb0 <extInt_Config+0x944>)
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	4a67      	ldr	r2, [pc, #412]	; (8002bb0 <extInt_Config+0x944>)
 8002a12:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002a16:	6113      	str	r3, [r2, #16]
		break;
 8002a18:	e219      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002a1a:	bf00      	nop
		break;
 8002a1c:	e217      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 8002a1e:	4b64      	ldr	r3, [pc, #400]	; (8002bb0 <extInt_Config+0x944>)
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	4a63      	ldr	r2, [pc, #396]	; (8002bb0 <extInt_Config+0x944>)
 8002a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a28:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a64      	ldr	r2, [pc, #400]	; (8002bc4 <extInt_Config+0x958>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d104      	bne.n	8002a40 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002a36:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <extInt_Config+0x944>)
 8002a38:	4a5d      	ldr	r2, [pc, #372]	; (8002bb0 <extInt_Config+0x944>)
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002a3e:	e206      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	4a59      	ldr	r2, [pc, #356]	; (8002bac <extInt_Config+0x940>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d106      	bne.n	8002a5a <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8002a4c:	4b58      	ldr	r3, [pc, #352]	; (8002bb0 <extInt_Config+0x944>)
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	4a57      	ldr	r2, [pc, #348]	; (8002bb0 <extInt_Config+0x944>)
 8002a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a56:	6113      	str	r3, [r2, #16]
		break;
 8002a58:	e1f9      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <extInt_Config+0x948>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d106      	bne.n	8002a74 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002a66:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <extInt_Config+0x944>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	4a51      	ldr	r2, [pc, #324]	; (8002bb0 <extInt_Config+0x944>)
 8002a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a70:	6113      	str	r3, [r2, #16]
		break;
 8002a72:	e1ec      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a4f      	ldr	r2, [pc, #316]	; (8002bb8 <extInt_Config+0x94c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d106      	bne.n	8002a8e <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002a80:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <extInt_Config+0x944>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4a4a      	ldr	r2, [pc, #296]	; (8002bb0 <extInt_Config+0x944>)
 8002a86:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a8a:	6113      	str	r3, [r2, #16]
		break;
 8002a8c:	e1df      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <extInt_Config+0x950>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d106      	bne.n	8002aa8 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8002a9a:	4b45      	ldr	r3, [pc, #276]	; (8002bb0 <extInt_Config+0x944>)
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	4a44      	ldr	r2, [pc, #272]	; (8002bb0 <extInt_Config+0x944>)
 8002aa0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa4:	6113      	str	r3, [r2, #16]
		break;
 8002aa6:	e1d2      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4a44      	ldr	r2, [pc, #272]	; (8002bc0 <extInt_Config+0x954>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d106      	bne.n	8002ac2 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002ab4:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <extInt_Config+0x944>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4a3d      	ldr	r2, [pc, #244]	; (8002bb0 <extInt_Config+0x944>)
 8002aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002abe:	6113      	str	r3, [r2, #16]
		break;
 8002ac0:	e1c5      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002ac2:	bf00      	nop
		break;
 8002ac4:	e1c3      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <extInt_Config+0x944>)
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	4a39      	ldr	r2, [pc, #228]	; (8002bb0 <extInt_Config+0x944>)
 8002acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ad0:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <extInt_Config+0x958>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d104      	bne.n	8002ae8 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <extInt_Config+0x944>)
 8002ae0:	4a33      	ldr	r2, [pc, #204]	; (8002bb0 <extInt_Config+0x944>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002ae6:	e1b2      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <extInt_Config+0x940>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d106      	bne.n	8002b02 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <extInt_Config+0x944>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <extInt_Config+0x944>)
 8002afa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002afe:	6113      	str	r3, [r2, #16]
		break;
 8002b00:	e1a5      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a2a      	ldr	r2, [pc, #168]	; (8002bb4 <extInt_Config+0x948>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d106      	bne.n	8002b1c <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <extInt_Config+0x944>)
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <extInt_Config+0x944>)
 8002b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b18:	6113      	str	r3, [r2, #16]
		break;
 8002b1a:	e198      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4a25      	ldr	r2, [pc, #148]	; (8002bb8 <extInt_Config+0x94c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d106      	bne.n	8002b36 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002b28:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <extInt_Config+0x944>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <extInt_Config+0x944>)
 8002b2e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002b32:	6113      	str	r3, [r2, #16]
		break;
 8002b34:	e18b      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <extInt_Config+0x950>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d106      	bne.n	8002b50 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <extInt_Config+0x944>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <extInt_Config+0x944>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6113      	str	r3, [r2, #16]
		break;
 8002b4e:	e17e      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <extInt_Config+0x954>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d106      	bne.n	8002b6a <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <extInt_Config+0x944>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <extInt_Config+0x944>)
 8002b62:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002b66:	6113      	str	r3, [r2, #16]
		break;
 8002b68:	e171      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002b6a:	bf00      	nop
		break;
 8002b6c:	e16f      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <extInt_Config+0x944>)
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <extInt_Config+0x944>)
 8002b74:	f023 030f 	bic.w	r3, r3, #15
 8002b78:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <extInt_Config+0x958>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d104      	bne.n	8002b90 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <extInt_Config+0x944>)
 8002b88:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <extInt_Config+0x944>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002b8e:	e15e      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <extInt_Config+0x940>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d115      	bne.n	8002bc8 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <extInt_Config+0x944>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	4a03      	ldr	r2, [pc, #12]	; (8002bb0 <extInt_Config+0x944>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6153      	str	r3, [r2, #20]
		break;
 8002ba8:	e151      	b.n	8002e4e <extInt_Config+0xbe2>
 8002baa:	bf00      	nop
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40013800 	.word	0x40013800
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40021c00 	.word	0x40021c00
 8002bc4:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <extInt_Config+0xb70>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d106      	bne.n	8002be2 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002bd4:	4b82      	ldr	r3, [pc, #520]	; (8002de0 <extInt_Config+0xb74>)
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	4a81      	ldr	r2, [pc, #516]	; (8002de0 <extInt_Config+0xb74>)
 8002bda:	f043 0302 	orr.w	r3, r3, #2
 8002bde:	6153      	str	r3, [r2, #20]
		break;
 8002be0:	e135      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a7e      	ldr	r2, [pc, #504]	; (8002de4 <extInt_Config+0xb78>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d106      	bne.n	8002bfc <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8002bee:	4b7c      	ldr	r3, [pc, #496]	; (8002de0 <extInt_Config+0xb74>)
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4a7b      	ldr	r2, [pc, #492]	; (8002de0 <extInt_Config+0xb74>)
 8002bf4:	f043 0303 	orr.w	r3, r3, #3
 8002bf8:	6153      	str	r3, [r2, #20]
		break;
 8002bfa:	e128      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4a79      	ldr	r2, [pc, #484]	; (8002de8 <extInt_Config+0xb7c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d106      	bne.n	8002c16 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002c08:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <extInt_Config+0xb74>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4a74      	ldr	r2, [pc, #464]	; (8002de0 <extInt_Config+0xb74>)
 8002c0e:	f043 0304 	orr.w	r3, r3, #4
 8002c12:	6153      	str	r3, [r2, #20]
		break;
 8002c14:	e11b      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a73      	ldr	r2, [pc, #460]	; (8002dec <extInt_Config+0xb80>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d106      	bne.n	8002c30 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002c22:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <extInt_Config+0xb74>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <extInt_Config+0xb74>)
 8002c28:	f043 0307 	orr.w	r3, r3, #7
 8002c2c:	6153      	str	r3, [r2, #20]
		break;
 8002c2e:	e10e      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002c30:	bf00      	nop
		break;
 8002c32:	e10c      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <extInt_Config+0xb74>)
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	4a69      	ldr	r2, [pc, #420]	; (8002de0 <extInt_Config+0xb74>)
 8002c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3e:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <extInt_Config+0xb84>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d104      	bne.n	8002c56 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <extInt_Config+0xb74>)
 8002c4e:	4a64      	ldr	r2, [pc, #400]	; (8002de0 <extInt_Config+0xb74>)
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002c54:	e0fb      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <extInt_Config+0xb88>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d106      	bne.n	8002c70 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <extInt_Config+0xb74>)
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	4a5e      	ldr	r2, [pc, #376]	; (8002de0 <extInt_Config+0xb74>)
 8002c68:	f043 0310 	orr.w	r3, r3, #16
 8002c6c:	6153      	str	r3, [r2, #20]
		break;
 8002c6e:	e0ee      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4a59      	ldr	r2, [pc, #356]	; (8002ddc <extInt_Config+0xb70>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d106      	bne.n	8002c8a <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002c7c:	4b58      	ldr	r3, [pc, #352]	; (8002de0 <extInt_Config+0xb74>)
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	4a57      	ldr	r2, [pc, #348]	; (8002de0 <extInt_Config+0xb74>)
 8002c82:	f043 0320 	orr.w	r3, r3, #32
 8002c86:	6153      	str	r3, [r2, #20]
		break;
 8002c88:	e0e1      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <extInt_Config+0xb78>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d106      	bne.n	8002ca4 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002c96:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <extInt_Config+0xb74>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	4a51      	ldr	r2, [pc, #324]	; (8002de0 <extInt_Config+0xb74>)
 8002c9c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002ca0:	6153      	str	r3, [r2, #20]
		break;
 8002ca2:	e0d4      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4a4f      	ldr	r2, [pc, #316]	; (8002de8 <extInt_Config+0xb7c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d106      	bne.n	8002cbe <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <extInt_Config+0xb74>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	4a4a      	ldr	r2, [pc, #296]	; (8002de0 <extInt_Config+0xb74>)
 8002cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cba:	6153      	str	r3, [r2, #20]
		break;
 8002cbc:	e0c7      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a49      	ldr	r2, [pc, #292]	; (8002dec <extInt_Config+0xb80>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d106      	bne.n	8002cd8 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002cca:	4b45      	ldr	r3, [pc, #276]	; (8002de0 <extInt_Config+0xb74>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4a44      	ldr	r2, [pc, #272]	; (8002de0 <extInt_Config+0xb74>)
 8002cd0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002cd4:	6153      	str	r3, [r2, #20]
		break;
 8002cd6:	e0ba      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002cd8:	bf00      	nop
		break;
 8002cda:	e0b8      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8002cdc:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <extInt_Config+0xb74>)
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <extInt_Config+0xb74>)
 8002ce2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ce6:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4a40      	ldr	r2, [pc, #256]	; (8002df0 <extInt_Config+0xb84>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d104      	bne.n	8002cfe <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <extInt_Config+0xb74>)
 8002cf6:	4a3a      	ldr	r2, [pc, #232]	; (8002de0 <extInt_Config+0xb74>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002cfc:	e0a7      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <extInt_Config+0xb88>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d106      	bne.n	8002d18 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002d0a:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <extInt_Config+0xb74>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <extInt_Config+0xb74>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6153      	str	r3, [r2, #20]
		break;
 8002d16:	e09a      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4a2f      	ldr	r2, [pc, #188]	; (8002ddc <extInt_Config+0xb70>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d106      	bne.n	8002d32 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <extInt_Config+0xb74>)
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4a2d      	ldr	r2, [pc, #180]	; (8002de0 <extInt_Config+0xb74>)
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2e:	6153      	str	r3, [r2, #20]
		break;
 8002d30:	e08d      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <extInt_Config+0xb78>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d106      	bne.n	8002d4c <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <extInt_Config+0xb74>)
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <extInt_Config+0xb74>)
 8002d44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d48:	6153      	str	r3, [r2, #20]
		break;
 8002d4a:	e080      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <extInt_Config+0xb7c>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d106      	bne.n	8002d66 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <extInt_Config+0xb74>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	4a20      	ldr	r2, [pc, #128]	; (8002de0 <extInt_Config+0xb74>)
 8002d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d62:	6153      	str	r3, [r2, #20]
		break;
 8002d64:	e073      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <extInt_Config+0xb80>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d106      	bne.n	8002d80 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <extInt_Config+0xb74>)
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <extInt_Config+0xb74>)
 8002d78:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d7c:	6153      	str	r3, [r2, #20]
		break;
 8002d7e:	e066      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002d80:	bf00      	nop
		break;
 8002d82:	e064      	b.n	8002e4e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <extInt_Config+0xb74>)
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	4a15      	ldr	r2, [pc, #84]	; (8002de0 <extInt_Config+0xb74>)
 8002d8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d8e:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4a16      	ldr	r2, [pc, #88]	; (8002df0 <extInt_Config+0xb84>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d104      	bne.n	8002da6 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002d9c:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <extInt_Config+0xb74>)
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <extInt_Config+0xb74>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002da4:	e053      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <extInt_Config+0xb88>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d106      	bne.n	8002dc0 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <extInt_Config+0xb74>)
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <extInt_Config+0xb74>)
 8002db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dbc:	6153      	str	r3, [r2, #20]
		break;
 8002dbe:	e046      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <extInt_Config+0xb70>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d115      	bne.n	8002df8 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <extInt_Config+0xb74>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <extInt_Config+0xb74>)
 8002dd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dd6:	6153      	str	r3, [r2, #20]
		break;
 8002dd8:	e039      	b.n	8002e4e <extInt_Config+0xbe2>
 8002dda:	bf00      	nop
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40021c00 	.word	0x40021c00
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4a9d      	ldr	r2, [pc, #628]	; (8003074 <extInt_Config+0xe08>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d106      	bne.n	8002e12 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002e04:	4b9c      	ldr	r3, [pc, #624]	; (8003078 <extInt_Config+0xe0c>)
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	4a9b      	ldr	r2, [pc, #620]	; (8003078 <extInt_Config+0xe0c>)
 8002e0a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002e0e:	6153      	str	r3, [r2, #20]
		break;
 8002e10:	e01d      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4a98      	ldr	r2, [pc, #608]	; (800307c <extInt_Config+0xe10>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d106      	bne.n	8002e2c <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002e1e:	4b96      	ldr	r3, [pc, #600]	; (8003078 <extInt_Config+0xe0c>)
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	4a95      	ldr	r2, [pc, #596]	; (8003078 <extInt_Config+0xe0c>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6153      	str	r3, [r2, #20]
		break;
 8002e2a:	e010      	b.n	8002e4e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4a93      	ldr	r2, [pc, #588]	; (8003080 <extInt_Config+0xe14>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d106      	bne.n	8002e46 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002e38:	4b8f      	ldr	r3, [pc, #572]	; (8003078 <extInt_Config+0xe0c>)
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4a8e      	ldr	r2, [pc, #568]	; (8003078 <extInt_Config+0xe0c>)
 8002e3e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002e42:	6153      	str	r3, [r2, #20]
		break;
 8002e44:	e003      	b.n	8002e4e <extInt_Config+0xbe2>
			__NOP();
 8002e46:	bf00      	nop
		break;
 8002e48:	e001      	b.n	8002e4e <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8002e4a:	bf00      	nop
		break;
 8002e4c:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	791b      	ldrb	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d126      	bne.n	8002ea4 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e56:	4b8b      	ldr	r3, [pc, #556]	; (8003084 <extInt_Config+0xe18>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	4611      	mov	r1, r2
 8002e62:	2201      	movs	r2, #1
 8002e64:	408a      	lsls	r2, r1
 8002e66:	43d2      	mvns	r2, r2
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4a86      	ldr	r2, [pc, #536]	; (8003084 <extInt_Config+0xe18>)
 8002e6c:	400b      	ands	r3, r1
 8002e6e:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e70:	4b84      	ldr	r3, [pc, #528]	; (8003084 <extInt_Config+0xe18>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	7812      	ldrb	r2, [r2, #0]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	408a      	lsls	r2, r1
 8002e80:	43d2      	mvns	r2, r2
 8002e82:	4611      	mov	r1, r2
 8002e84:	4a7f      	ldr	r2, [pc, #508]	; (8003084 <extInt_Config+0xe18>)
 8002e86:	400b      	ands	r3, r1
 8002e88:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e8a:	4b7e      	ldr	r3, [pc, #504]	; (8003084 <extInt_Config+0xe18>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	7812      	ldrb	r2, [r2, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	2201      	movs	r2, #1
 8002e98:	408a      	lsls	r2, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4a79      	ldr	r2, [pc, #484]	; (8003084 <extInt_Config+0xe18>)
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	6093      	str	r3, [r2, #8]
 8002ea2:	e05c      	b.n	8002f5e <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	791b      	ldrb	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d126      	bne.n	8002efa <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002eac:	4b75      	ldr	r3, [pc, #468]	; (8003084 <extInt_Config+0xe18>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	2201      	movs	r2, #1
 8002eba:	408a      	lsls	r2, r1
 8002ebc:	43d2      	mvns	r2, r2
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4a70      	ldr	r2, [pc, #448]	; (8003084 <extInt_Config+0xe18>)
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	; (8003084 <extInt_Config+0xe18>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	408a      	lsls	r2, r1
 8002ed6:	43d2      	mvns	r2, r2
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4a6a      	ldr	r2, [pc, #424]	; (8003084 <extInt_Config+0xe18>)
 8002edc:	400b      	ands	r3, r1
 8002ede:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ee0:	4b68      	ldr	r3, [pc, #416]	; (8003084 <extInt_Config+0xe18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	7812      	ldrb	r2, [r2, #0]
 8002eea:	4611      	mov	r1, r2
 8002eec:	2201      	movs	r2, #1
 8002eee:	408a      	lsls	r2, r1
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4a64      	ldr	r2, [pc, #400]	; (8003084 <extInt_Config+0xe18>)
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	60d3      	str	r3, [r2, #12]
 8002ef8:	e031      	b.n	8002f5e <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002efa:	4b62      	ldr	r3, [pc, #392]	; (8003084 <extInt_Config+0xe18>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	7812      	ldrb	r2, [r2, #0]
 8002f04:	4611      	mov	r1, r2
 8002f06:	2201      	movs	r2, #1
 8002f08:	408a      	lsls	r2, r1
 8002f0a:	43d2      	mvns	r2, r2
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4a5d      	ldr	r2, [pc, #372]	; (8003084 <extInt_Config+0xe18>)
 8002f10:	400b      	ands	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f14:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <extInt_Config+0xe18>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	2201      	movs	r2, #1
 8002f22:	408a      	lsls	r2, r1
 8002f24:	43d2      	mvns	r2, r2
 8002f26:	4611      	mov	r1, r2
 8002f28:	4a56      	ldr	r2, [pc, #344]	; (8003084 <extInt_Config+0xe18>)
 8002f2a:	400b      	ands	r3, r1
 8002f2c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f2e:	4b55      	ldr	r3, [pc, #340]	; (8003084 <extInt_Config+0xe18>)
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	7812      	ldrb	r2, [r2, #0]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	408a      	lsls	r2, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4a50      	ldr	r2, [pc, #320]	; (8003084 <extInt_Config+0xe18>)
 8002f42:	430b      	orrs	r3, r1
 8002f44:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f46:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <extInt_Config+0xe18>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	7812      	ldrb	r2, [r2, #0]
 8002f50:	4611      	mov	r1, r2
 8002f52:	2201      	movs	r2, #1
 8002f54:	408a      	lsls	r2, r1
 8002f56:	4611      	mov	r1, r2
 8002f58:	4a4a      	ldr	r2, [pc, #296]	; (8003084 <extInt_Config+0xe18>)
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f5e:	4b49      	ldr	r3, [pc, #292]	; (8003084 <extInt_Config+0xe18>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	4611      	mov	r1, r2
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	408a      	lsls	r2, r1
 8002f6e:	43d2      	mvns	r2, r2
 8002f70:	4611      	mov	r1, r2
 8002f72:	4a44      	ldr	r2, [pc, #272]	; (8003084 <extInt_Config+0xe18>)
 8002f74:	400b      	ands	r3, r1
 8002f76:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f78:	4b42      	ldr	r3, [pc, #264]	; (8003084 <extInt_Config+0xe18>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	4611      	mov	r1, r2
 8002f84:	2201      	movs	r2, #1
 8002f86:	408a      	lsls	r2, r1
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4a3e      	ldr	r2, [pc, #248]	; (8003084 <extInt_Config+0xe18>)
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f90:	b672      	cpsid	i
}
 8002f92:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b0f      	cmp	r3, #15
 8002f9c:	d862      	bhi.n	8003064 <extInt_Config+0xdf8>
 8002f9e:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <extInt_Config+0xd38>)
 8002fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa4:	08002fe5 	.word	0x08002fe5
 8002fa8:	08002fed 	.word	0x08002fed
 8002fac:	08002ff5 	.word	0x08002ff5
 8002fb0:	08002ffd 	.word	0x08002ffd
 8002fb4:	08003005 	.word	0x08003005
 8002fb8:	0800300d 	.word	0x0800300d
 8002fbc:	08003015 	.word	0x08003015
 8002fc0:	0800301d 	.word	0x0800301d
 8002fc4:	08003025 	.word	0x08003025
 8002fc8:	0800302d 	.word	0x0800302d
 8002fcc:	08003035 	.word	0x08003035
 8002fd0:	0800303d 	.word	0x0800303d
 8002fd4:	08003045 	.word	0x08003045
 8002fd8:	0800304d 	.word	0x0800304d
 8002fdc:	08003055 	.word	0x08003055
 8002fe0:	0800305d 	.word	0x0800305d
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8002fe4:	2006      	movs	r0, #6
 8002fe6:	f7ff f923 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8002fea:	e03c      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8002fec:	2007      	movs	r0, #7
 8002fee:	f7ff f91f 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8002ff2:	e038      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8002ff4:	2008      	movs	r0, #8
 8002ff6:	f7ff f91b 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8002ffa:	e034      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8002ffc:	2009      	movs	r0, #9
 8002ffe:	f7ff f917 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8003002:	e030      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003004:	200a      	movs	r0, #10
 8003006:	f7ff f913 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 800300a:	e02c      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800300c:	2017      	movs	r0, #23
 800300e:	f7ff f90f 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8003012:	e028      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003014:	2017      	movs	r0, #23
 8003016:	f7ff f90b 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 800301a:	e024      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800301c:	2017      	movs	r0, #23
 800301e:	f7ff f907 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8003022:	e020      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003024:	2017      	movs	r0, #23
 8003026:	f7ff f903 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 800302a:	e01c      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 800302c:	2017      	movs	r0, #23
 800302e:	f7ff f8ff 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8003032:	e018      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003034:	2028      	movs	r0, #40	; 0x28
 8003036:	f7ff f8fb 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 800303a:	e014      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800303c:	2028      	movs	r0, #40	; 0x28
 800303e:	f7ff f8f7 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8003042:	e010      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003044:	2028      	movs	r0, #40	; 0x28
 8003046:	f7ff f8f3 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 800304a:	e00c      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800304c:	2028      	movs	r0, #40	; 0x28
 800304e:	f7ff f8ef 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8003052:	e008      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003054:	2028      	movs	r0, #40	; 0x28
 8003056:	f7ff f8eb 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 800305a:	e004      	b.n	8003066 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800305c:	2028      	movs	r0, #40	; 0x28
 800305e:	f7ff f8e7 	bl	8002230 <__NVIC_EnableIRQ>
		break;
 8003062:	e000      	b.n	8003066 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8003064:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003066:	b662      	cpsie	i
}
 8003068:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40020c00 	.word	0x40020c00
 8003078:	40013800 	.word	0x40013800
 800307c:	40021000 	.word	0x40021000
 8003080:	40021c00 	.word	0x40021c00
 8003084:	40013c00 	.word	0x40013c00

08003088 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
	__NOP();
 800308c:	bf00      	nop
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
	__NOP();
 800309c:	bf00      	nop
}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
	__NOP();
 80030ac:	bf00      	nop
}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
	__NOP();
 80030bc:	bf00      	nop
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
	__NOP();
 80030cc:	bf00      	nop
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
	__NOP();
 80030dc:	bf00      	nop
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
	__NOP();
 80030ec:	bf00      	nop
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
	__NOP();
 80030fc:	bf00      	nop
}
 80030fe:	bf00      	nop
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
	__NOP();
 800310c:	bf00      	nop
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
	__NOP();
 800311c:	bf00      	nop
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	__NOP();
 800312c:	bf00      	nop
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
	__NOP();
 800313c:	bf00      	nop
}
 800313e:	bf00      	nop
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
	__NOP();
 800314c:	bf00      	nop
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	__NOP();
 800315c:	bf00      	nop
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <EXTI0_IRQHandler+0x28>)
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d008      	beq.n	800318a <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <EXTI0_IRQHandler+0x28>)
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <EXTI0_IRQHandler+0x28>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003184:	f7ff ff80 	bl	8003088 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8003188:	e000      	b.n	800318c <EXTI0_IRQHandler+0x24>
		__NOP();
 800318a:	bf00      	nop
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40013c00 	.word	0x40013c00

08003194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <EXTI1_IRQHandler+0x28>)
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <EXTI1_IRQHandler+0x28>)
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <EXTI1_IRQHandler+0x28>)
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 80031b0:	f7fe f9d4 	bl	800155c <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 80031b4:	e000      	b.n	80031b8 <EXTI1_IRQHandler+0x24>
		__NOP();
 80031b6:	bf00      	nop
}
 80031b8:	bf00      	nop
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40013c00 	.word	0x40013c00

080031c0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <EXTI2_IRQHandler+0x28>)
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <EXTI2_IRQHandler+0x28>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <EXTI2_IRQHandler+0x28>)
 80031d6:	f043 0304 	orr.w	r3, r3, #4
 80031da:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 80031dc:	f7ff ff5c 	bl	8003098 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 80031e0:	e000      	b.n	80031e4 <EXTI2_IRQHandler+0x24>
		__NOP();
 80031e2:	bf00      	nop
}
 80031e4:	bf00      	nop
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40013c00 	.word	0x40013c00

080031ec <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <EXTI3_IRQHandler+0x28>)
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <EXTI3_IRQHandler+0x28>)
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	4a04      	ldr	r2, [pc, #16]	; (8003214 <EXTI3_IRQHandler+0x28>)
 8003202:	f043 0308 	orr.w	r3, r3, #8
 8003206:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8003208:	f7fe f9b8 	bl	800157c <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 800320c:	e000      	b.n	8003210 <EXTI3_IRQHandler+0x24>
		__NOP();
 800320e:	bf00      	nop
}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40013c00 	.word	0x40013c00

08003218 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <EXTI4_IRQHandler+0x28>)
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <EXTI4_IRQHandler+0x28>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	4a04      	ldr	r2, [pc, #16]	; (8003240 <EXTI4_IRQHandler+0x28>)
 800322e:	f043 0310 	orr.w	r3, r3, #16
 8003232:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8003234:	f7ff ff38 	bl	80030a8 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8003238:	e000      	b.n	800323c <EXTI4_IRQHandler+0x24>
		__NOP();
 800323a:	bf00      	nop
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40013c00 	.word	0x40013c00

08003244 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8003254:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 800325a:	f043 0320 	orr.w	r3, r3, #32
 800325e:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8003260:	f7ff ff2a 	bl	80030b8 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8003264:	e03c      	b.n	80032e0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8003266:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8003272:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 8003278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800327c:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800327e:	f7ff ff23 	bl	80030c8 <callback_extInt6>
}
 8003282:	e02d      	b.n	80032e0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003284:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	4a13      	ldr	r2, [pc, #76]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 8003296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329a:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 800329c:	f7ff ff1c 	bl	80030d8 <callback_extInt7>
}
 80032a0:	e01e      	b.n	80032e0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 80032ae:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 80032ba:	f7ff ff15 	bl	80030e8 <callback_extInt8>
}
 80032be:	e00f      	b.n	80032e0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <EXTI9_5_IRQHandler+0xa0>)
 80032d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032d6:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 80032d8:	f7ff ff0e 	bl	80030f8 <callback_extInt9>
}
 80032dc:	e000      	b.n	80032e0 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80032de:	bf00      	nop
}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40013c00 	.word	0x40013c00

080032e8 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	4a2a      	ldr	r2, [pc, #168]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003302:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8003304:	f7ff ff00 	bl	8003108 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8003308:	e04b      	b.n	80033a2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003312:	2b00      	cmp	r3, #0
 8003314:	d008      	beq.n	8003328 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 800331c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003320:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8003322:	f7ff fef9 	bl	8003118 <callback_extInt11>
}
 8003326:	e03c      	b.n	80033a2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8003328:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8003334:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 800333a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800333e:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8003340:	f7ff fef2 	bl	8003128 <callback_extInt12>
}
 8003344:	e02d      	b.n	80033a2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800335c:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800335e:	f7ff feeb 	bl	8003138 <callback_extInt13>
}
 8003362:	e01e      	b.n	80033a2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800337a:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 800337c:	f7ff fee4 	bl	8003148 <callback_extInt14>
}
 8003380:	e00f      	b.n	80033a2 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <EXTI15_10_IRQHandler+0xc0>)
 8003394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003398:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 800339a:	f7ff fedd 	bl	8003158 <callback_extInt15>
}
 800339e:	e000      	b.n	80033a2 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 80033a0:	bf00      	nop
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40013c00 	.word	0x40013c00

080033ac <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	70fb      	strb	r3, [r7, #3]
 80033be:	460b      	mov	r3, r1
 80033c0:	70bb      	strb	r3, [r7, #2]
 80033c2:	4613      	mov	r3, r2
 80033c4:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	78ba      	ldrb	r2, [r7, #2]
 80033d0:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	787a      	ldrb	r2, [r7, #1]
 80033d6:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7c3a      	ldrb	r2, [r7, #16]
 80033dc:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7d3a      	ldrb	r2, [r7, #20]
 80033e2:	715a      	strb	r2, [r3, #5]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a88      	ldr	r2, [pc, #544]	; (8003628 <GPIO_Config+0x238>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d106      	bne.n	8003418 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 800340a:	4b88      	ldr	r3, [pc, #544]	; (800362c <GPIO_Config+0x23c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a87      	ldr	r2, [pc, #540]	; (800362c <GPIO_Config+0x23c>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	e03a      	b.n	800348e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a84      	ldr	r2, [pc, #528]	; (8003630 <GPIO_Config+0x240>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d106      	bne.n	8003430 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003422:	4b82      	ldr	r3, [pc, #520]	; (800362c <GPIO_Config+0x23c>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	4a81      	ldr	r2, [pc, #516]	; (800362c <GPIO_Config+0x23c>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6313      	str	r3, [r2, #48]	; 0x30
 800342e:	e02e      	b.n	800348e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a7f      	ldr	r2, [pc, #508]	; (8003634 <GPIO_Config+0x244>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d106      	bne.n	8003448 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800343a:	4b7c      	ldr	r3, [pc, #496]	; (800362c <GPIO_Config+0x23c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a7b      	ldr	r2, [pc, #492]	; (800362c <GPIO_Config+0x23c>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	e022      	b.n	800348e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a7a      	ldr	r2, [pc, #488]	; (8003638 <GPIO_Config+0x248>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d106      	bne.n	8003460 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003452:	4b76      	ldr	r3, [pc, #472]	; (800362c <GPIO_Config+0x23c>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a75      	ldr	r2, [pc, #468]	; (800362c <GPIO_Config+0x23c>)
 8003458:	f043 0308 	orr.w	r3, r3, #8
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	e016      	b.n	800348e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a75      	ldr	r2, [pc, #468]	; (800363c <GPIO_Config+0x24c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d106      	bne.n	8003478 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800346a:	4b70      	ldr	r3, [pc, #448]	; (800362c <GPIO_Config+0x23c>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a6f      	ldr	r2, [pc, #444]	; (800362c <GPIO_Config+0x23c>)
 8003470:	f043 0310 	orr.w	r3, r3, #16
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	e00a      	b.n	800348e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a70      	ldr	r2, [pc, #448]	; (8003640 <GPIO_Config+0x250>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d105      	bne.n	800348e <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003482:	4b6a      	ldr	r3, [pc, #424]	; (800362c <GPIO_Config+0x23c>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	4a69      	ldr	r2, [pc, #420]	; (800362c <GPIO_Config+0x23c>)
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	461a      	mov	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2103      	movs	r1, #3
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	400a      	ands	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	6819      	ldr	r1, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	789b      	ldrb	r3, [r3, #2]
 80034d2:	461a      	mov	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	2301      	movs	r3, #1
 80034ec:	408b      	lsls	r3, r1
 80034ee:	43db      	mvns	r3, r3
 80034f0:	4619      	mov	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	400a      	ands	r2, r1
 80034f8:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	78db      	ldrb	r3, [r3, #3]
 800350e:	461a      	mov	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	2103      	movs	r1, #3
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	400a      	ands	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	6899      	ldr	r1, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	791b      	ldrb	r3, [r3, #4]
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	2103      	movs	r1, #3
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43db      	mvns	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	400a      	ands	r2, r1
 8003578:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	68d9      	ldr	r1, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	430a      	orrs	r2, r1
 8003588:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d143      	bne.n	800361a <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b07      	cmp	r3, #7
 8003598:	d81f      	bhi.n	80035da <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	210f      	movs	r1, #15
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	400a      	ands	r2, r1
 80035ba:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	795b      	ldrb	r3, [r3, #5]
 80035c6:	4619      	mov	r1, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	4619      	mov	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 80035d8:	e01f      	b.n	800361a <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	3b08      	subs	r3, #8
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ea:	210f      	movs	r1, #15
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	400a      	ands	r2, r1
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	795b      	ldrb	r3, [r3, #5]
 8003608:	4619      	mov	r1, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	4619      	mov	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	430a      	orrs	r2, r1
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40020000 	.word	0x40020000
 800362c:	40023800 	.word	0x40023800
 8003630:	40020400 	.word	0x40020400
 8003634:	40020800 	.word	0x40020800
 8003638:	40020c00 	.word	0x40020c00
 800363c:	40021000 	.word	0x40021000
 8003640:	40021c00 	.word	0x40021c00

08003644 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10d      	bne.n	8003672 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4619      	mov	r1, r3
 8003662:	2301      	movs	r3, #1
 8003664:	408b      	lsls	r3, r1
 8003666:	4619      	mov	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	430a      	orrs	r2, r1
 800366e:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8003670:	e00d      	b.n	800368e <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	3310      	adds	r3, #16
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	4619      	mov	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	430a      	orrs	r2, r1
 800368c:	619a      	str	r2, [r3, #24]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	4619      	mov	r1, r3
 80036ae:	2301      	movs	r3, #1
 80036b0:	408b      	lsls	r3, r1
 80036b2:	4619      	mov	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	404a      	eors	r2, r1
 80036ba:	615a      	str	r2, [r3, #20]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <getConfigPLL+0x30>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d103      	bne.n	80036e6 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <getConfigPLL+0x34>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
 80036e4:	e001      	b.n	80036ea <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 80036e6:	2310      	movs	r3, #16
 80036e8:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 80036ea:	79fb      	ldrb	r3, [r7, #7]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	40023800 	.word	0x40023800
 80036fc:	200003d8 	.word	0x200003d8

08003700 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003706:	f7ff ffdf 	bl	80036c8 <getConfigPLL>
 800370a:	4603      	mov	r3, r0
 800370c:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 800370e:	2300      	movs	r3, #0
 8003710:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8003712:	79bb      	ldrb	r3, [r7, #6]
 8003714:	2b31      	cmp	r3, #49	; 0x31
 8003716:	d802      	bhi.n	800371e <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	71fb      	strb	r3, [r7, #7]
 800371c:	e002      	b.n	8003724 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 800371e:	79bb      	ldrb	r3, [r7, #6]
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8003724:	79fb      	ldrb	r3, [r7, #7]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d106      	bne.n	8003750 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003742:	4b81      	ldr	r3, [pc, #516]	; (8003948 <pwm_Config+0x218>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a80      	ldr	r2, [pc, #512]	; (8003948 <pwm_Config+0x218>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
 800374e:	e024      	b.n	800379a <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a7d      	ldr	r2, [pc, #500]	; (800394c <pwm_Config+0x21c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d106      	bne.n	8003768 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800375a:	4b7b      	ldr	r3, [pc, #492]	; (8003948 <pwm_Config+0x218>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a7a      	ldr	r2, [pc, #488]	; (8003948 <pwm_Config+0x218>)
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	e018      	b.n	800379a <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a78      	ldr	r2, [pc, #480]	; (8003950 <pwm_Config+0x220>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d106      	bne.n	8003780 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003772:	4b75      	ldr	r3, [pc, #468]	; (8003948 <pwm_Config+0x218>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a74      	ldr	r2, [pc, #464]	; (8003948 <pwm_Config+0x218>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	e00c      	b.n	800379a <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4a73      	ldr	r2, [pc, #460]	; (8003954 <pwm_Config+0x224>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d106      	bne.n	8003798 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800378a:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <pwm_Config+0x218>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a6e      	ldr	r2, [pc, #440]	; (8003948 <pwm_Config+0x218>)
 8003790:	f043 0308 	orr.w	r3, r3, #8
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	e000      	b.n	800379a <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8003798:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa4c 	bl	8003c38 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	f200 8118 	bhi.w	80039da <pwm_Config+0x2aa>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <pwm_Config+0x80>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	080037c1 	.word	0x080037c1
 80037b4:	08003843 	.word	0x08003843
 80037b8:	080038c5 	.word	0x080038c5
 80037bc:	08003959 	.word	0x08003959
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f022 0203 	bic.w	r2, r2, #3
 80037ce:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037de:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80037ee:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f022 0208 	bic.w	r2, r2, #8
 80037fe:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f042 0208 	orr.w	r2, r2, #8
 800380e:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f022 0204 	bic.w	r2, r2, #4
 800381e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f042 0204 	orr.w	r2, r2, #4
 800382e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800383e:	619a      	str	r2, [r3, #24]

		break;
 8003840:	e0cc      	b.n	80039dc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	699a      	ldr	r2, [r3, #24]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f022 0203 	bic.w	r2, r2, #3
 8003850:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003860:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003870:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003880:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003890:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	699a      	ldr	r2, [r3, #24]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c0:	619a      	str	r2, [r3, #24]

		break;
 80038c2:	e08b      	b.n	80039dc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f022 0203 	bic.w	r2, r2, #3
 80038d2:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038e2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80038f2:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f022 0208 	bic.w	r2, r2, #8
 8003902:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f042 0208 	orr.w	r2, r2, #8
 8003912:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f042 0204 	orr.w	r2, r2, #4
 8003932:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003942:	61da      	str	r2, [r3, #28]

		break;
 8003944:	e04a      	b.n	80039dc <pwm_Config+0x2ac>
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003966:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003976:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003986:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003996:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a6:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	69da      	ldr	r2, [r3, #28]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039c6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039d6:	61da      	str	r2, [r3, #28]

		break;
 80039d8:	e000      	b.n	80039dc <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 80039da:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	791b      	ldrb	r3, [r3, #4]
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f896 	bl	8003b14 <statusPolarityPWM>

}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d87f      	bhi.n	8003b04 <statusInOutPWM+0x114>
 8003a04:	a201      	add	r2, pc, #4	; (adr r2, 8003a0c <statusInOutPWM+0x1c>)
 8003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0a:	bf00      	nop
 8003a0c:	08003a1d 	.word	0x08003a1d
 8003a10:	08003a57 	.word	0x08003a57
 8003a14:	08003a91 	.word	0x08003a91
 8003a18:	08003acb 	.word	0x08003acb
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d110      	bne.n	8003a44 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8003a42:	e060      	b.n	8003b06 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	621a      	str	r2, [r3, #32]
		break;
 8003a54:	e057      	b.n	8003b06 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d110      	bne.n	8003a7e <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	6a1a      	ldr	r2, [r3, #32]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f022 0210 	bic.w	r2, r2, #16
 8003a6a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f042 0210 	orr.w	r2, r2, #16
 8003a7a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8003a7c:	e043      	b.n	8003b06 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f022 0210 	bic.w	r2, r2, #16
 8003a8c:	621a      	str	r2, [r3, #32]
		break;
 8003a8e:	e03a      	b.n	8003b06 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d110      	bne.n	8003ab8 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab4:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8003ab6:	e026      	b.n	8003b06 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	6a1a      	ldr	r2, [r3, #32]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac6:	621a      	str	r2, [r3, #32]
		break;
 8003ac8:	e01d      	b.n	8003b06 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d110      	bne.n	8003af2 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	6a1a      	ldr	r2, [r3, #32]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ade:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aee:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8003af0:	e009      	b.n	8003b06 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	6a1a      	ldr	r2, [r3, #32]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b00:	621a      	str	r2, [r3, #32]
		break;
 8003b02:	e000      	b.n	8003b06 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8003b04:	bf00      	nop
	}
	}
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop

08003b14 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d87f      	bhi.n	8003c28 <statusPolarityPWM+0x114>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <statusPolarityPWM+0x1c>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b41 	.word	0x08003b41
 8003b34:	08003b7b 	.word	0x08003b7b
 8003b38:	08003bb5 	.word	0x08003bb5
 8003b3c:	08003bef 	.word	0x08003bef
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d110      	bne.n	8003b68 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f022 0202 	bic.w	r2, r2, #2
 8003b54:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f042 0202 	orr.w	r2, r2, #2
 8003b64:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8003b66:	e060      	b.n	8003c2a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	6a1a      	ldr	r2, [r3, #32]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f022 0202 	bic.w	r2, r2, #2
 8003b76:	621a      	str	r2, [r3, #32]
		break;
 8003b78:	e057      	b.n	8003c2a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d110      	bne.n	8003ba2 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	6a1a      	ldr	r2, [r3, #32]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f022 0220 	bic.w	r2, r2, #32
 8003b8e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	6a1a      	ldr	r2, [r3, #32]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f042 0220 	orr.w	r2, r2, #32
 8003b9e:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8003ba0:	e043      	b.n	8003c2a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f022 0220 	bic.w	r2, r2, #32
 8003bb0:	621a      	str	r2, [r3, #32]
		break;
 8003bb2:	e03a      	b.n	8003c2a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d110      	bne.n	8003bdc <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bc8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd8:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8003bda:	e026      	b.n	8003c2a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bea:	621a      	str	r2, [r3, #32]
		break;
 8003bec:	e01d      	b.n	8003c2a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d110      	bne.n	8003c16 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c02:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c12:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8003c14:	e009      	b.n	8003c2a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c24:	621a      	str	r2, [r3, #32]
		break;
 8003c26:	e000      	b.n	8003c2a <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8003c28:	bf00      	nop
	}
	}

}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop

08003c38 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d823      	bhi.n	8003c90 <setDuttyCycle+0x58>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <setDuttyCycle+0x18>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003c6d 	.word	0x08003c6d
 8003c58:	08003c79 	.word	0x08003c79
 8003c5c:	08003c85 	.word	0x08003c85
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	885a      	ldrh	r2, [r3, #2]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003c6a:	e012      	b.n	8003c92 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	885a      	ldrh	r2, [r3, #2]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003c76:	e00c      	b.n	8003c92 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	885a      	ldrh	r2, [r3, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003c82:	e006      	b.n	8003c92 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	885a      	ldrh	r2, [r3, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003c8e:	e000      	b.n	8003c92 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8003c90:	bf00      	nop
	}
	}

}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop

08003ca0 <updateDuttyCyclePercentage>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje
void updateDuttyCyclePercentage(PWM_Handler_t *prtPwmHandler, uint8_t newDuttyPercentage)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	460b      	mov	r3, r1
 8003caa:	70fb      	strb	r3, [r7, #3]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <updateDuttyCyclePercentage+0x38>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	fb12 f303 	smulbb	r3, r2, r3
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ffb4 	bl	8003c38 <setDuttyCycle>
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	51eb851f 	.word	0x51eb851f

08003cdc <__NVIC_EnableIRQ>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	db0b      	blt.n	8003d06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	f003 021f 	and.w	r2, r3, #31
 8003cf4:	4907      	ldr	r1, [pc, #28]	; (8003d14 <__NVIC_EnableIRQ+0x38>)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2001      	movs	r0, #1
 8003cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	e000e100 	.word	0xe000e100

08003d18 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4a8f      	ldr	r2, [pc, #572]	; (8003f64 <USART_Config+0x24c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d107      	bne.n	8003d3a <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8003d2a:	4b8f      	ldr	r3, [pc, #572]	; (8003f68 <USART_Config+0x250>)
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	4a8d      	ldr	r2, [pc, #564]	; (8003f6c <USART_Config+0x254>)
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e019      	b.n	8003d6e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4a8c      	ldr	r2, [pc, #560]	; (8003f70 <USART_Config+0x258>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d108      	bne.n	8003d56 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8003d44:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <USART_Config+0x250>)
 8003d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a88      	ldr	r2, [pc, #544]	; (8003f74 <USART_Config+0x25c>)
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e00b      	b.n	8003d6e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4a87      	ldr	r2, [pc, #540]	; (8003f78 <USART_Config+0x260>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d106      	bne.n	8003d6e <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8003d60:	4b81      	ldr	r3, [pc, #516]	; (8003f68 <USART_Config+0x250>)
 8003d62:	2220      	movs	r2, #32
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	4a84      	ldr	r2, [pc, #528]	; (8003f7c <USART_Config+0x264>)
 8003d6c:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	789b      	ldrb	r3, [r3, #2]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d03d      	beq.n	8003e02 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d94:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003da4:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003db4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dc4:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	789b      	ldrb	r3, [r3, #2]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d110      	bne.n	8003df0 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ddc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	e018      	b.n	8003e22 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dfe:	60da      	str	r2, [r3, #12]
 8003e00:	e00f      	b.n	8003e22 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e10:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e20:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	78db      	ldrb	r3, [r3, #3]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d84c      	bhi.n	8003ec4 <USART_Config+0x1ac>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <USART_Config+0x118>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e5f 	.word	0x08003e5f
 8003e38:	08003e81 	.word	0x08003e81
 8003e3c:	08003ea3 	.word	0x08003ea3
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003e4e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	6912      	ldr	r2, [r2, #16]
 8003e5a:	611a      	str	r2, [r3, #16]
		break;
 8003e5c:	e041      	b.n	8003ee2 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003e6c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e7c:	611a      	str	r2, [r3, #16]
		break;
 8003e7e:	e030      	b.n	8003ee2 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003e8e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	691a      	ldr	r2, [r3, #16]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e9e:	611a      	str	r2, [r3, #16]
		break;
 8003ea0:	e01f      	b.n	8003ee2 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003eb0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003ec0:	611a      	str	r2, [r3, #16]
		break;
 8003ec2:	e00e      	b.n	8003ee2 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ed2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	6912      	ldr	r2, [r2, #16]
 8003ede:	611a      	str	r2, [r3, #16]
		break;
 8003ee0:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <USART_Config+0x258>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d104      	bne.n	8003efa <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8003ef0:	f7ff fc06 	bl	8003700 <getClockAPB1>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e003      	b.n	8003f02 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8003efa:	f7ff fbe5 	bl	80036c8 <getConfigPLL>
 8003efe:	4603      	mov	r3, r0
 8003f00:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f91f 	bl	8004154 <getValueBaudRate>
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	e02f      	b.n	8003f82 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	785b      	ldrb	r3, [r3, #1]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10b      	bne.n	8003f42 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 f90f 	bl	8004154 <getValueBaudRate>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e01f      	b.n	8003f82 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	785b      	ldrb	r3, [r3, #1]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d11a      	bne.n	8003f80 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f8ff 	bl	8004154 <getValueBaudRate>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	e00f      	b.n	8003f82 <USART_Config+0x26a>
 8003f62:	bf00      	nop
 8003f64:	40011000 	.word	0x40011000
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	200003dc 	.word	0x200003dc
 8003f70:	40004400 	.word	0x40004400
 8003f74:	200003e0 	.word	0x200003e0
 8003f78:	40011400 	.word	0x40011400
 8003f7c:	200003e4 	.word	0x200003e4
	}
	else
	{
		__NOP();
 8003f80:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d866      	bhi.n	8004058 <USART_Config+0x340>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <USART_Config+0x278>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08003fc3 	.word	0x08003fc3
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08004027 	.word	0x08004027
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f022 0208 	bic.w	r2, r2, #8
 8003fae:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	60da      	str	r2, [r3, #12]

		break;
 8003fc0:	e063      	b.n	800408a <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f022 0204 	bic.w	r2, r2, #4
 8003fd0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f042 0204 	orr.w	r2, r2, #4
 8003fe0:	60da      	str	r2, [r3, #12]

		break;
 8003fe2:	e052      	b.n	800408a <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f022 0208 	bic.w	r2, r2, #8
 8003ff2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f042 0208 	orr.w	r2, r2, #8
 8004002:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f022 0204 	bic.w	r2, r2, #4
 8004012:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f042 0204 	orr.w	r2, r2, #4
 8004022:	60da      	str	r2, [r3, #12]


		break;
 8004024:	e031      	b.n	800408a <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004034:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f022 0208 	bic.w	r2, r2, #8
 8004044:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f022 0204 	bic.w	r2, r2, #4
 8004054:	60da      	str	r2, [r3, #12]
		break;
 8004056:	e018      	b.n	800408a <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004066:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f022 0208 	bic.w	r2, r2, #8
 8004076:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	60da      	str	r2, [r3, #12]
		break;
 8004088:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800408a:	b672      	cpsid	i
}
 800408c:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	791b      	ldrb	r3, [r3, #4]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d110      	bne.n	80040b8 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f022 0220 	bic.w	r2, r2, #32
 80040a4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f042 0220 	orr.w	r2, r2, #32
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e007      	b.n	80040c8 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f022 0220 	bic.w	r2, r2, #32
 80040c6:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	791b      	ldrb	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d003      	beq.n	80040d8 <USART_Config+0x3c0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	795b      	ldrb	r3, [r3, #5]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d11a      	bne.n	800410e <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a1a      	ldr	r2, [pc, #104]	; (8004148 <USART_Config+0x430>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d103      	bne.n	80040ea <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80040e2:	2025      	movs	r0, #37	; 0x25
 80040e4:	f7ff fdfa 	bl	8003cdc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80040e8:	e013      	b.n	8004112 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	4a17      	ldr	r2, [pc, #92]	; (800414c <USART_Config+0x434>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80040f4:	2026      	movs	r0, #38	; 0x26
 80040f6:	f7ff fdf1 	bl	8003cdc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80040fa:	e00a      	b.n	8004112 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a13      	ldr	r2, [pc, #76]	; (8004150 <USART_Config+0x438>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d105      	bne.n	8004112 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8004106:	2047      	movs	r0, #71	; 0x47
 8004108:	f7ff fde8 	bl	8003cdc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800410c:	e001      	b.n	8004112 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 800410e:	bf00      	nop
 8004110:	e000      	b.n	8004114 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004112:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004114:	b662      	cpsie	i
}
 8004116:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d00f      	beq.n	8004140 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800412e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413e:	60da      	str	r2, [r3, #12]
	}
}
 8004140:	bf00      	nop
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40011000 	.word	0x40011000
 800414c:	40004400 	.word	0x40004400
 8004150:	40011400 	.word	0x40011400

08004154 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004154:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004158:	b086      	sub	sp, #24
 800415a:	af00      	add	r7, sp, #0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	4601      	mov	r1, r0
 8004160:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004162:	79f9      	ldrb	r1, [r7, #7]
 8004164:	2000      	movs	r0, #0
 8004166:	460a      	mov	r2, r1
 8004168:	4603      	mov	r3, r0
 800416a:	491f      	ldr	r1, [pc, #124]	; (80041e8 <getValueBaudRate+0x94>)
 800416c:	fb01 f003 	mul.w	r0, r1, r3
 8004170:	2102      	movs	r1, #2
 8004172:	fb02 f101 	mul.w	r1, r2, r1
 8004176:	4401      	add	r1, r0
 8004178:	481b      	ldr	r0, [pc, #108]	; (80041e8 <getValueBaudRate+0x94>)
 800417a:	fba2 4500 	umull	r4, r5, r2, r0
 800417e:	194b      	adds	r3, r1, r5
 8004180:	461d      	mov	r5, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	2200      	movs	r2, #0
 8004188:	4698      	mov	r8, r3
 800418a:	4691      	mov	r9, r2
 800418c:	4642      	mov	r2, r8
 800418e:	464b      	mov	r3, r9
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc fd90 	bl	8000cb8 <__aeabi_ldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4613      	mov	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <getValueBaudRate+0x98>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	0b5b      	lsrs	r3, r3, #13
 80041aa:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <getValueBaudRate+0x98>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	0a5b      	lsrs	r3, r3, #9
 80041ca:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	7afb      	ldrb	r3, [r7, #11]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	813b      	strh	r3, [r7, #8]

    return value;
 80041dc:	893b      	ldrh	r3, [r7, #8]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041e8:	540be400 	.word	0x540be400
 80041ec:	d1b71759 	.word	0xd1b71759

080041f0 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 80041fc:	e000      	b.n	8004200 <writeChar+0x10>
	{
		__NOP();
 80041fe:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f7      	beq.n	80041fe <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	605a      	str	r2, [r3, #4]

}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8004230:	e00a      	b.n	8004248 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	4413      	add	r3, r2
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	4619      	mov	r1, r3
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ffd7 	bl	80041f0 <writeChar>
		i++;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	3301      	adds	r3, #1
 8004246:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	4413      	add	r3, r2
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1ee      	bne.n	8004232 <writeMsg+0x10>
	}
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <writeMsgForTXE+0x64>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d111      	bne.n	8004296 <writeMsgForTXE+0x36>
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <writeMsgForTXE+0x68>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10d      	bne.n	8004296 <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	4813      	ldr	r0, [pc, #76]	; (80042cc <writeMsgForTXE+0x6c>)
 800427e:	f001 f8a9 	bl	80053d4 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <writeMsgForTXE+0x70>)
 8004284:	2201      	movs	r2, #1
 8004286:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2101      	movs	r1, #1
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f830 	bl	80042f4 <interruptionTX>
 8004294:	e012      	b.n	80042bc <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8004296:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <writeMsgForTXE+0x74>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	2364      	movs	r3, #100	; 0x64
 800429e:	fb02 f303 	mul.w	r3, r2, r3
 80042a2:	4a0d      	ldr	r2, [pc, #52]	; (80042d8 <writeMsgForTXE+0x78>)
 80042a4:	4413      	add	r3, r2
 80042a6:	6839      	ldr	r1, [r7, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 f893 	bl	80053d4 <siprintf>
		inLine++;
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <writeMsgForTXE+0x74>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <writeMsgForTXE+0x74>)
 80042b8:	701a      	strb	r2, [r3, #0]
	}
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000c22 	.word	0x20000c22
 80042c8:	20000c21 	.word	0x20000c21
 80042cc:	200003ec 	.word	0x200003ec
 80042d0:	20000c23 	.word	0x20000c23
 80042d4:	20000c20 	.word	0x20000c20
 80042d8:	20000450 	.word	0x20000450

080042dc <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
	return auxRxData;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <getRxData+0x14>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200003e8 	.word	0x200003e8

080042f4 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10c      	bne.n	8004320 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800431e:	e005      	b.n	800432c <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60da      	str	r2, [r3, #12]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
	__NOP();
 800433c:	bf00      	nop
}
 800433e:	bf00      	nop
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
	__NOP();
 800434c:	bf00      	nop
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 800435c:	4b37      	ldr	r3, [pc, #220]	; (800443c <USART1_IRQHandler+0xe4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800436a:	4b34      	ldr	r3, [pc, #208]	; (800443c <USART1_IRQHandler+0xe4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b33      	ldr	r3, [pc, #204]	; (8004440 <USART1_IRQHandler+0xe8>)
 8004374:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8004376:	f7ff ffdf 	bl	8004338 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 800437a:	e05d      	b.n	8004438 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 800437c:	4b2f      	ldr	r3, [pc, #188]	; (800443c <USART1_IRQHandler+0xe4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b00      	cmp	r3, #0
 8004388:	d055      	beq.n	8004436 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800438a:	4b2e      	ldr	r3, [pc, #184]	; (8004444 <USART1_IRQHandler+0xec>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8004392:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <USART1_IRQHandler+0xf0>)
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	4b29      	ldr	r3, [pc, #164]	; (800443c <USART1_IRQHandler+0xe4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <USART1_IRQHandler+0xe4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ffa6 	bl	80042f4 <interruptionTX>
}
 80043a8:	e046      	b.n	8004438 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80043aa:	4b26      	ldr	r3, [pc, #152]	; (8004444 <USART1_IRQHandler+0xec>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d142      	bne.n	8004438 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80043b2:	4b26      	ldr	r3, [pc, #152]	; (800444c <USART1_IRQHandler+0xf4>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	4b25      	ldr	r3, [pc, #148]	; (8004450 <USART1_IRQHandler+0xf8>)
 80043ba:	5c9b      	ldrb	r3, [r3, r2]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00e      	beq.n	80043de <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 80043c0:	4b22      	ldr	r3, [pc, #136]	; (800444c <USART1_IRQHandler+0xf4>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <USART1_IRQHandler+0xf8>)
 80043c8:	5c9a      	ldrb	r2, [r3, r2]
 80043ca:	4b1c      	ldr	r3, [pc, #112]	; (800443c <USART1_IRQHandler+0xe4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
				posChar++;
 80043d0:	4b1e      	ldr	r3, [pc, #120]	; (800444c <USART1_IRQHandler+0xf4>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	4b1c      	ldr	r3, [pc, #112]	; (800444c <USART1_IRQHandler+0xf4>)
 80043da:	701a      	strb	r2, [r3, #0]
}
 80043dc:	e02c      	b.n	8004438 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <USART1_IRQHandler+0xfc>)
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <USART1_IRQHandler+0x100>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d215      	bcs.n	8004416 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <USART1_IRQHandler+0xfc>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	2364      	movs	r3, #100	; 0x64
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <USART1_IRQHandler+0x104>)
 80043f8:	4413      	add	r3, r2
 80043fa:	4619      	mov	r1, r3
 80043fc:	4814      	ldr	r0, [pc, #80]	; (8004450 <USART1_IRQHandler+0xf8>)
 80043fe:	f000 ffe9 	bl	80053d4 <siprintf>
					posChar = 0;
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <USART1_IRQHandler+0xf4>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <USART1_IRQHandler+0xfc>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	3301      	adds	r3, #1
 800440e:	b2da      	uxtb	r2, r3
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <USART1_IRQHandler+0xfc>)
 8004412:	701a      	strb	r2, [r3, #0]
}
 8004414:	e010      	b.n	8004438 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <USART1_IRQHandler+0xe4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff69 	bl	80042f4 <interruptionTX>
					posChar = 0;
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <USART1_IRQHandler+0xf4>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <USART1_IRQHandler+0xfc>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <USART1_IRQHandler+0x100>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
}
 8004434:	e000      	b.n	8004438 <USART1_IRQHandler+0xe0>
		__NOP();
 8004436:	bf00      	nop
}
 8004438:	bf00      	nop
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200003dc 	.word	0x200003dc
 8004440:	200003e8 	.word	0x200003e8
 8004444:	20000c23 	.word	0x20000c23
 8004448:	200003e9 	.word	0x200003e9
 800444c:	20000c22 	.word	0x20000c22
 8004450:	200003ec 	.word	0x200003ec
 8004454:	20000c21 	.word	0x20000c21
 8004458:	20000c20 	.word	0x20000c20
 800445c:	20000450 	.word	0x20000450

08004460 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8004464:	4b37      	ldr	r3, [pc, #220]	; (8004544 <USART2_IRQHandler+0xe4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0320 	and.w	r3, r3, #32
 800446e:	2b00      	cmp	r3, #0
 8004470:	d008      	beq.n	8004484 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8004472:	4b34      	ldr	r3, [pc, #208]	; (8004544 <USART2_IRQHandler+0xe4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4b33      	ldr	r3, [pc, #204]	; (8004548 <USART2_IRQHandler+0xe8>)
 800447c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 800447e:	f7fd f853 	bl	8001528 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004482:	e05d      	b.n	8004540 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8004484:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <USART2_IRQHandler+0xe4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d055      	beq.n	800453e <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004492:	4b2e      	ldr	r3, [pc, #184]	; (800454c <USART2_IRQHandler+0xec>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800449a:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <USART2_IRQHandler+0xf0>)
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	4b29      	ldr	r3, [pc, #164]	; (8004544 <USART2_IRQHandler+0xe4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <USART2_IRQHandler+0xe4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff22 	bl	80042f4 <interruptionTX>
}
 80044b0:	e046      	b.n	8004540 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <USART2_IRQHandler+0xec>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d142      	bne.n	8004540 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <USART2_IRQHandler+0xf4>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <USART2_IRQHandler+0xf8>)
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 80044c8:	4b22      	ldr	r3, [pc, #136]	; (8004554 <USART2_IRQHandler+0xf4>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <USART2_IRQHandler+0xf8>)
 80044d0:	5c9a      	ldrb	r2, [r3, r2]
 80044d2:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <USART2_IRQHandler+0xe4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
				posChar++;
 80044d8:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <USART2_IRQHandler+0xf4>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	3301      	adds	r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <USART2_IRQHandler+0xf4>)
 80044e2:	701a      	strb	r2, [r3, #0]
}
 80044e4:	e02c      	b.n	8004540 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <USART2_IRQHandler+0xfc>)
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <USART2_IRQHandler+0x100>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d215      	bcs.n	800451e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <USART2_IRQHandler+0xfc>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	2364      	movs	r3, #100	; 0x64
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <USART2_IRQHandler+0x104>)
 8004500:	4413      	add	r3, r2
 8004502:	4619      	mov	r1, r3
 8004504:	4814      	ldr	r0, [pc, #80]	; (8004558 <USART2_IRQHandler+0xf8>)
 8004506:	f000 ff65 	bl	80053d4 <siprintf>
					posChar = 0;
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <USART2_IRQHandler+0xf4>)
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <USART2_IRQHandler+0xfc>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	3301      	adds	r3, #1
 8004516:	b2da      	uxtb	r2, r3
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <USART2_IRQHandler+0xfc>)
 800451a:	701a      	strb	r2, [r3, #0]
}
 800451c:	e010      	b.n	8004540 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <USART2_IRQHandler+0xe4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fee5 	bl	80042f4 <interruptionTX>
					posChar = 0;
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <USART2_IRQHandler+0xf4>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <USART2_IRQHandler+0xfc>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004536:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <USART2_IRQHandler+0x100>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
}
 800453c:	e000      	b.n	8004540 <USART2_IRQHandler+0xe0>
		__NOP();
 800453e:	bf00      	nop
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200003e0 	.word	0x200003e0
 8004548:	200003e8 	.word	0x200003e8
 800454c:	20000c23 	.word	0x20000c23
 8004550:	200003e9 	.word	0x200003e9
 8004554:	20000c22 	.word	0x20000c22
 8004558:	200003ec 	.word	0x200003ec
 800455c:	20000c21 	.word	0x20000c21
 8004560:	20000c20 	.word	0x20000c20
 8004564:	20000450 	.word	0x20000450

08004568 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800456c:	4b37      	ldr	r3, [pc, #220]	; (800464c <USART6_IRQHandler+0xe4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d008      	beq.n	800458c <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800457a:	4b34      	ldr	r3, [pc, #208]	; (800464c <USART6_IRQHandler+0xe4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b33      	ldr	r3, [pc, #204]	; (8004650 <USART6_IRQHandler+0xe8>)
 8004584:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8004586:	f7ff fedf 	bl	8004348 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800458a:	e05d      	b.n	8004648 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 800458c:	4b2f      	ldr	r3, [pc, #188]	; (800464c <USART6_IRQHandler+0xe4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d055      	beq.n	8004646 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800459a:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <USART6_IRQHandler+0xec>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10b      	bne.n	80045ba <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 80045a2:	4b2d      	ldr	r3, [pc, #180]	; (8004658 <USART6_IRQHandler+0xf0>)
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <USART6_IRQHandler+0xe4>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <USART6_IRQHandler+0xe4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2100      	movs	r1, #0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff fe9e 	bl	80042f4 <interruptionTX>
}
 80045b8:	e046      	b.n	8004648 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <USART6_IRQHandler+0xec>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d142      	bne.n	8004648 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <USART6_IRQHandler+0xf4>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <USART6_IRQHandler+0xf8>)
 80045ca:	5c9b      	ldrb	r3, [r3, r2]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 80045d0:	4b22      	ldr	r3, [pc, #136]	; (800465c <USART6_IRQHandler+0xf4>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <USART6_IRQHandler+0xf8>)
 80045d8:	5c9a      	ldrb	r2, [r3, r2]
 80045da:	4b1c      	ldr	r3, [pc, #112]	; (800464c <USART6_IRQHandler+0xe4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	605a      	str	r2, [r3, #4]
				posChar++;
 80045e0:	4b1e      	ldr	r3, [pc, #120]	; (800465c <USART6_IRQHandler+0xf4>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	3301      	adds	r3, #1
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	4b1c      	ldr	r3, [pc, #112]	; (800465c <USART6_IRQHandler+0xf4>)
 80045ea:	701a      	strb	r2, [r3, #0]
}
 80045ec:	e02c      	b.n	8004648 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <USART6_IRQHandler+0xfc>)
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <USART6_IRQHandler+0x100>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d215      	bcs.n	8004626 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80045fa:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <USART6_IRQHandler+0xfc>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	2364      	movs	r3, #100	; 0x64
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	4a19      	ldr	r2, [pc, #100]	; (800466c <USART6_IRQHandler+0x104>)
 8004608:	4413      	add	r3, r2
 800460a:	4619      	mov	r1, r3
 800460c:	4814      	ldr	r0, [pc, #80]	; (8004660 <USART6_IRQHandler+0xf8>)
 800460e:	f000 fee1 	bl	80053d4 <siprintf>
					posChar = 0;
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <USART6_IRQHandler+0xf4>)
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <USART6_IRQHandler+0xfc>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	4b10      	ldr	r3, [pc, #64]	; (8004664 <USART6_IRQHandler+0xfc>)
 8004622:	701a      	strb	r2, [r3, #0]
}
 8004624:	e010      	b.n	8004648 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <USART6_IRQHandler+0xe4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fe61 	bl	80042f4 <interruptionTX>
					posChar = 0;
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <USART6_IRQHandler+0xf4>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <USART6_IRQHandler+0xfc>)
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800463e:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <USART6_IRQHandler+0x100>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
}
 8004644:	e000      	b.n	8004648 <USART6_IRQHandler+0xe0>
		__NOP();
 8004646:	bf00      	nop
}
 8004648:	bf00      	nop
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200003e4 	.word	0x200003e4
 8004650:	200003e8 	.word	0x200003e8
 8004654:	20000c23 	.word	0x20000c23
 8004658:	200003e9 	.word	0x200003e9
 800465c:	20000c22 	.word	0x20000c22
 8004660:	200003ec 	.word	0x200003ec
 8004664:	20000c21 	.word	0x20000c21
 8004668:	20000c20 	.word	0x20000c20
 800466c:	20000450 	.word	0x20000450

08004670 <__errno>:
 8004670:	4b01      	ldr	r3, [pc, #4]	; (8004678 <__errno+0x8>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000014 	.word	0x20000014

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4d0d      	ldr	r5, [pc, #52]	; (80046b4 <__libc_init_array+0x38>)
 8004680:	4c0d      	ldr	r4, [pc, #52]	; (80046b8 <__libc_init_array+0x3c>)
 8004682:	1b64      	subs	r4, r4, r5
 8004684:	10a4      	asrs	r4, r4, #2
 8004686:	2600      	movs	r6, #0
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	4d0b      	ldr	r5, [pc, #44]	; (80046bc <__libc_init_array+0x40>)
 800468e:	4c0c      	ldr	r4, [pc, #48]	; (80046c0 <__libc_init_array+0x44>)
 8004690:	f005 f8c8 	bl	8009824 <_init>
 8004694:	1b64      	subs	r4, r4, r5
 8004696:	10a4      	asrs	r4, r4, #2
 8004698:	2600      	movs	r6, #0
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	0800a2ac 	.word	0x0800a2ac
 80046b8:	0800a2ac 	.word	0x0800a2ac
 80046bc:	0800a2ac 	.word	0x0800a2ac
 80046c0:	0800a2b0 	.word	0x0800a2b0

080046c4 <memset>:
 80046c4:	4402      	add	r2, r0
 80046c6:	4603      	mov	r3, r0
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d100      	bne.n	80046ce <memset+0xa>
 80046cc:	4770      	bx	lr
 80046ce:	f803 1b01 	strb.w	r1, [r3], #1
 80046d2:	e7f9      	b.n	80046c8 <memset+0x4>

080046d4 <__cvt>:
 80046d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046d8:	ec55 4b10 	vmov	r4, r5, d0
 80046dc:	2d00      	cmp	r5, #0
 80046de:	460e      	mov	r6, r1
 80046e0:	4619      	mov	r1, r3
 80046e2:	462b      	mov	r3, r5
 80046e4:	bfbb      	ittet	lt
 80046e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80046ea:	461d      	movlt	r5, r3
 80046ec:	2300      	movge	r3, #0
 80046ee:	232d      	movlt	r3, #45	; 0x2d
 80046f0:	700b      	strb	r3, [r1, #0]
 80046f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046f8:	4691      	mov	r9, r2
 80046fa:	f023 0820 	bic.w	r8, r3, #32
 80046fe:	bfbc      	itt	lt
 8004700:	4622      	movlt	r2, r4
 8004702:	4614      	movlt	r4, r2
 8004704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004708:	d005      	beq.n	8004716 <__cvt+0x42>
 800470a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800470e:	d100      	bne.n	8004712 <__cvt+0x3e>
 8004710:	3601      	adds	r6, #1
 8004712:	2102      	movs	r1, #2
 8004714:	e000      	b.n	8004718 <__cvt+0x44>
 8004716:	2103      	movs	r1, #3
 8004718:	ab03      	add	r3, sp, #12
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	ab02      	add	r3, sp, #8
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	ec45 4b10 	vmov	d0, r4, r5
 8004724:	4653      	mov	r3, sl
 8004726:	4632      	mov	r2, r6
 8004728:	f001 fe42 	bl	80063b0 <_dtoa_r>
 800472c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004730:	4607      	mov	r7, r0
 8004732:	d102      	bne.n	800473a <__cvt+0x66>
 8004734:	f019 0f01 	tst.w	r9, #1
 8004738:	d022      	beq.n	8004780 <__cvt+0xac>
 800473a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800473e:	eb07 0906 	add.w	r9, r7, r6
 8004742:	d110      	bne.n	8004766 <__cvt+0x92>
 8004744:	783b      	ldrb	r3, [r7, #0]
 8004746:	2b30      	cmp	r3, #48	; 0x30
 8004748:	d10a      	bne.n	8004760 <__cvt+0x8c>
 800474a:	2200      	movs	r2, #0
 800474c:	2300      	movs	r3, #0
 800474e:	4620      	mov	r0, r4
 8004750:	4629      	mov	r1, r5
 8004752:	f7fc f9d1 	bl	8000af8 <__aeabi_dcmpeq>
 8004756:	b918      	cbnz	r0, 8004760 <__cvt+0x8c>
 8004758:	f1c6 0601 	rsb	r6, r6, #1
 800475c:	f8ca 6000 	str.w	r6, [sl]
 8004760:	f8da 3000 	ldr.w	r3, [sl]
 8004764:	4499      	add	r9, r3
 8004766:	2200      	movs	r2, #0
 8004768:	2300      	movs	r3, #0
 800476a:	4620      	mov	r0, r4
 800476c:	4629      	mov	r1, r5
 800476e:	f7fc f9c3 	bl	8000af8 <__aeabi_dcmpeq>
 8004772:	b108      	cbz	r0, 8004778 <__cvt+0xa4>
 8004774:	f8cd 900c 	str.w	r9, [sp, #12]
 8004778:	2230      	movs	r2, #48	; 0x30
 800477a:	9b03      	ldr	r3, [sp, #12]
 800477c:	454b      	cmp	r3, r9
 800477e:	d307      	bcc.n	8004790 <__cvt+0xbc>
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004784:	1bdb      	subs	r3, r3, r7
 8004786:	4638      	mov	r0, r7
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	b004      	add	sp, #16
 800478c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004790:	1c59      	adds	r1, r3, #1
 8004792:	9103      	str	r1, [sp, #12]
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	e7f0      	b.n	800477a <__cvt+0xa6>

08004798 <__exponent>:
 8004798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800479a:	4603      	mov	r3, r0
 800479c:	2900      	cmp	r1, #0
 800479e:	bfb8      	it	lt
 80047a0:	4249      	neglt	r1, r1
 80047a2:	f803 2b02 	strb.w	r2, [r3], #2
 80047a6:	bfb4      	ite	lt
 80047a8:	222d      	movlt	r2, #45	; 0x2d
 80047aa:	222b      	movge	r2, #43	; 0x2b
 80047ac:	2909      	cmp	r1, #9
 80047ae:	7042      	strb	r2, [r0, #1]
 80047b0:	dd2a      	ble.n	8004808 <__exponent+0x70>
 80047b2:	f10d 0407 	add.w	r4, sp, #7
 80047b6:	46a4      	mov	ip, r4
 80047b8:	270a      	movs	r7, #10
 80047ba:	46a6      	mov	lr, r4
 80047bc:	460a      	mov	r2, r1
 80047be:	fb91 f6f7 	sdiv	r6, r1, r7
 80047c2:	fb07 1516 	mls	r5, r7, r6, r1
 80047c6:	3530      	adds	r5, #48	; 0x30
 80047c8:	2a63      	cmp	r2, #99	; 0x63
 80047ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80047ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047d2:	4631      	mov	r1, r6
 80047d4:	dcf1      	bgt.n	80047ba <__exponent+0x22>
 80047d6:	3130      	adds	r1, #48	; 0x30
 80047d8:	f1ae 0502 	sub.w	r5, lr, #2
 80047dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047e0:	1c44      	adds	r4, r0, #1
 80047e2:	4629      	mov	r1, r5
 80047e4:	4561      	cmp	r1, ip
 80047e6:	d30a      	bcc.n	80047fe <__exponent+0x66>
 80047e8:	f10d 0209 	add.w	r2, sp, #9
 80047ec:	eba2 020e 	sub.w	r2, r2, lr
 80047f0:	4565      	cmp	r5, ip
 80047f2:	bf88      	it	hi
 80047f4:	2200      	movhi	r2, #0
 80047f6:	4413      	add	r3, r2
 80047f8:	1a18      	subs	r0, r3, r0
 80047fa:	b003      	add	sp, #12
 80047fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004802:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004806:	e7ed      	b.n	80047e4 <__exponent+0x4c>
 8004808:	2330      	movs	r3, #48	; 0x30
 800480a:	3130      	adds	r1, #48	; 0x30
 800480c:	7083      	strb	r3, [r0, #2]
 800480e:	70c1      	strb	r1, [r0, #3]
 8004810:	1d03      	adds	r3, r0, #4
 8004812:	e7f1      	b.n	80047f8 <__exponent+0x60>

08004814 <_printf_float>:
 8004814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004818:	ed2d 8b02 	vpush	{d8}
 800481c:	b08d      	sub	sp, #52	; 0x34
 800481e:	460c      	mov	r4, r1
 8004820:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004824:	4616      	mov	r6, r2
 8004826:	461f      	mov	r7, r3
 8004828:	4605      	mov	r5, r0
 800482a:	f002 ff1f 	bl	800766c <_localeconv_r>
 800482e:	f8d0 a000 	ldr.w	sl, [r0]
 8004832:	4650      	mov	r0, sl
 8004834:	f7fb fcde 	bl	80001f4 <strlen>
 8004838:	2300      	movs	r3, #0
 800483a:	930a      	str	r3, [sp, #40]	; 0x28
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	9305      	str	r3, [sp, #20]
 8004840:	f8d8 3000 	ldr.w	r3, [r8]
 8004844:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004848:	3307      	adds	r3, #7
 800484a:	f023 0307 	bic.w	r3, r3, #7
 800484e:	f103 0208 	add.w	r2, r3, #8
 8004852:	f8c8 2000 	str.w	r2, [r8]
 8004856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800485e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004866:	9307      	str	r3, [sp, #28]
 8004868:	f8cd 8018 	str.w	r8, [sp, #24]
 800486c:	ee08 0a10 	vmov	s16, r0
 8004870:	4b9f      	ldr	r3, [pc, #636]	; (8004af0 <_printf_float+0x2dc>)
 8004872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004876:	f04f 32ff 	mov.w	r2, #4294967295
 800487a:	f7fc f96f 	bl	8000b5c <__aeabi_dcmpun>
 800487e:	bb88      	cbnz	r0, 80048e4 <_printf_float+0xd0>
 8004880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004884:	4b9a      	ldr	r3, [pc, #616]	; (8004af0 <_printf_float+0x2dc>)
 8004886:	f04f 32ff 	mov.w	r2, #4294967295
 800488a:	f7fc f949 	bl	8000b20 <__aeabi_dcmple>
 800488e:	bb48      	cbnz	r0, 80048e4 <_printf_float+0xd0>
 8004890:	2200      	movs	r2, #0
 8004892:	2300      	movs	r3, #0
 8004894:	4640      	mov	r0, r8
 8004896:	4649      	mov	r1, r9
 8004898:	f7fc f938 	bl	8000b0c <__aeabi_dcmplt>
 800489c:	b110      	cbz	r0, 80048a4 <_printf_float+0x90>
 800489e:	232d      	movs	r3, #45	; 0x2d
 80048a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a4:	4b93      	ldr	r3, [pc, #588]	; (8004af4 <_printf_float+0x2e0>)
 80048a6:	4894      	ldr	r0, [pc, #592]	; (8004af8 <_printf_float+0x2e4>)
 80048a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048ac:	bf94      	ite	ls
 80048ae:	4698      	movls	r8, r3
 80048b0:	4680      	movhi	r8, r0
 80048b2:	2303      	movs	r3, #3
 80048b4:	6123      	str	r3, [r4, #16]
 80048b6:	9b05      	ldr	r3, [sp, #20]
 80048b8:	f023 0204 	bic.w	r2, r3, #4
 80048bc:	6022      	str	r2, [r4, #0]
 80048be:	f04f 0900 	mov.w	r9, #0
 80048c2:	9700      	str	r7, [sp, #0]
 80048c4:	4633      	mov	r3, r6
 80048c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80048c8:	4621      	mov	r1, r4
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 f9d8 	bl	8004c80 <_printf_common>
 80048d0:	3001      	adds	r0, #1
 80048d2:	f040 8090 	bne.w	80049f6 <_printf_float+0x1e2>
 80048d6:	f04f 30ff 	mov.w	r0, #4294967295
 80048da:	b00d      	add	sp, #52	; 0x34
 80048dc:	ecbd 8b02 	vpop	{d8}
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e4:	4642      	mov	r2, r8
 80048e6:	464b      	mov	r3, r9
 80048e8:	4640      	mov	r0, r8
 80048ea:	4649      	mov	r1, r9
 80048ec:	f7fc f936 	bl	8000b5c <__aeabi_dcmpun>
 80048f0:	b140      	cbz	r0, 8004904 <_printf_float+0xf0>
 80048f2:	464b      	mov	r3, r9
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bfbc      	itt	lt
 80048f8:	232d      	movlt	r3, #45	; 0x2d
 80048fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048fe:	487f      	ldr	r0, [pc, #508]	; (8004afc <_printf_float+0x2e8>)
 8004900:	4b7f      	ldr	r3, [pc, #508]	; (8004b00 <_printf_float+0x2ec>)
 8004902:	e7d1      	b.n	80048a8 <_printf_float+0x94>
 8004904:	6863      	ldr	r3, [r4, #4]
 8004906:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800490a:	9206      	str	r2, [sp, #24]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	d13f      	bne.n	8004990 <_printf_float+0x17c>
 8004910:	2306      	movs	r3, #6
 8004912:	6063      	str	r3, [r4, #4]
 8004914:	9b05      	ldr	r3, [sp, #20]
 8004916:	6861      	ldr	r1, [r4, #4]
 8004918:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800491c:	2300      	movs	r3, #0
 800491e:	9303      	str	r3, [sp, #12]
 8004920:	ab0a      	add	r3, sp, #40	; 0x28
 8004922:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004926:	ab09      	add	r3, sp, #36	; 0x24
 8004928:	ec49 8b10 	vmov	d0, r8, r9
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	6022      	str	r2, [r4, #0]
 8004930:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004934:	4628      	mov	r0, r5
 8004936:	f7ff fecd 	bl	80046d4 <__cvt>
 800493a:	9b06      	ldr	r3, [sp, #24]
 800493c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800493e:	2b47      	cmp	r3, #71	; 0x47
 8004940:	4680      	mov	r8, r0
 8004942:	d108      	bne.n	8004956 <_printf_float+0x142>
 8004944:	1cc8      	adds	r0, r1, #3
 8004946:	db02      	blt.n	800494e <_printf_float+0x13a>
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	4299      	cmp	r1, r3
 800494c:	dd41      	ble.n	80049d2 <_printf_float+0x1be>
 800494e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004952:	fa5f fb8b 	uxtb.w	fp, fp
 8004956:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800495a:	d820      	bhi.n	800499e <_printf_float+0x18a>
 800495c:	3901      	subs	r1, #1
 800495e:	465a      	mov	r2, fp
 8004960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004964:	9109      	str	r1, [sp, #36]	; 0x24
 8004966:	f7ff ff17 	bl	8004798 <__exponent>
 800496a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800496c:	1813      	adds	r3, r2, r0
 800496e:	2a01      	cmp	r2, #1
 8004970:	4681      	mov	r9, r0
 8004972:	6123      	str	r3, [r4, #16]
 8004974:	dc02      	bgt.n	800497c <_printf_float+0x168>
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	07d2      	lsls	r2, r2, #31
 800497a:	d501      	bpl.n	8004980 <_printf_float+0x16c>
 800497c:	3301      	adds	r3, #1
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004984:	2b00      	cmp	r3, #0
 8004986:	d09c      	beq.n	80048c2 <_printf_float+0xae>
 8004988:	232d      	movs	r3, #45	; 0x2d
 800498a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800498e:	e798      	b.n	80048c2 <_printf_float+0xae>
 8004990:	9a06      	ldr	r2, [sp, #24]
 8004992:	2a47      	cmp	r2, #71	; 0x47
 8004994:	d1be      	bne.n	8004914 <_printf_float+0x100>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1bc      	bne.n	8004914 <_printf_float+0x100>
 800499a:	2301      	movs	r3, #1
 800499c:	e7b9      	b.n	8004912 <_printf_float+0xfe>
 800499e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049a2:	d118      	bne.n	80049d6 <_printf_float+0x1c2>
 80049a4:	2900      	cmp	r1, #0
 80049a6:	6863      	ldr	r3, [r4, #4]
 80049a8:	dd0b      	ble.n	80049c2 <_printf_float+0x1ae>
 80049aa:	6121      	str	r1, [r4, #16]
 80049ac:	b913      	cbnz	r3, 80049b4 <_printf_float+0x1a0>
 80049ae:	6822      	ldr	r2, [r4, #0]
 80049b0:	07d0      	lsls	r0, r2, #31
 80049b2:	d502      	bpl.n	80049ba <_printf_float+0x1a6>
 80049b4:	3301      	adds	r3, #1
 80049b6:	440b      	add	r3, r1
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80049bc:	f04f 0900 	mov.w	r9, #0
 80049c0:	e7de      	b.n	8004980 <_printf_float+0x16c>
 80049c2:	b913      	cbnz	r3, 80049ca <_printf_float+0x1b6>
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	07d2      	lsls	r2, r2, #31
 80049c8:	d501      	bpl.n	80049ce <_printf_float+0x1ba>
 80049ca:	3302      	adds	r3, #2
 80049cc:	e7f4      	b.n	80049b8 <_printf_float+0x1a4>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e7f2      	b.n	80049b8 <_printf_float+0x1a4>
 80049d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80049d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d8:	4299      	cmp	r1, r3
 80049da:	db05      	blt.n	80049e8 <_printf_float+0x1d4>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	6121      	str	r1, [r4, #16]
 80049e0:	07d8      	lsls	r0, r3, #31
 80049e2:	d5ea      	bpl.n	80049ba <_printf_float+0x1a6>
 80049e4:	1c4b      	adds	r3, r1, #1
 80049e6:	e7e7      	b.n	80049b8 <_printf_float+0x1a4>
 80049e8:	2900      	cmp	r1, #0
 80049ea:	bfd4      	ite	le
 80049ec:	f1c1 0202 	rsble	r2, r1, #2
 80049f0:	2201      	movgt	r2, #1
 80049f2:	4413      	add	r3, r2
 80049f4:	e7e0      	b.n	80049b8 <_printf_float+0x1a4>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	055a      	lsls	r2, r3, #21
 80049fa:	d407      	bmi.n	8004a0c <_printf_float+0x1f8>
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	4642      	mov	r2, r8
 8004a00:	4631      	mov	r1, r6
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	d12c      	bne.n	8004a64 <_printf_float+0x250>
 8004a0a:	e764      	b.n	80048d6 <_printf_float+0xc2>
 8004a0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a10:	f240 80e0 	bls.w	8004bd4 <_printf_float+0x3c0>
 8004a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f7fc f86c 	bl	8000af8 <__aeabi_dcmpeq>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d034      	beq.n	8004a8e <_printf_float+0x27a>
 8004a24:	4a37      	ldr	r2, [pc, #220]	; (8004b04 <_printf_float+0x2f0>)
 8004a26:	2301      	movs	r3, #1
 8004a28:	4631      	mov	r1, r6
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	f43f af51 	beq.w	80048d6 <_printf_float+0xc2>
 8004a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	db02      	blt.n	8004a42 <_printf_float+0x22e>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	07d8      	lsls	r0, r3, #31
 8004a40:	d510      	bpl.n	8004a64 <_printf_float+0x250>
 8004a42:	ee18 3a10 	vmov	r3, s16
 8004a46:	4652      	mov	r2, sl
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f43f af41 	beq.w	80048d6 <_printf_float+0xc2>
 8004a54:	f04f 0800 	mov.w	r8, #0
 8004a58:	f104 091a 	add.w	r9, r4, #26
 8004a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4543      	cmp	r3, r8
 8004a62:	dc09      	bgt.n	8004a78 <_printf_float+0x264>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	079b      	lsls	r3, r3, #30
 8004a68:	f100 8105 	bmi.w	8004c76 <_printf_float+0x462>
 8004a6c:	68e0      	ldr	r0, [r4, #12]
 8004a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a70:	4298      	cmp	r0, r3
 8004a72:	bfb8      	it	lt
 8004a74:	4618      	movlt	r0, r3
 8004a76:	e730      	b.n	80048da <_printf_float+0xc6>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	464a      	mov	r2, r9
 8004a7c:	4631      	mov	r1, r6
 8004a7e:	4628      	mov	r0, r5
 8004a80:	47b8      	blx	r7
 8004a82:	3001      	adds	r0, #1
 8004a84:	f43f af27 	beq.w	80048d6 <_printf_float+0xc2>
 8004a88:	f108 0801 	add.w	r8, r8, #1
 8004a8c:	e7e6      	b.n	8004a5c <_printf_float+0x248>
 8004a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	dc39      	bgt.n	8004b08 <_printf_float+0x2f4>
 8004a94:	4a1b      	ldr	r2, [pc, #108]	; (8004b04 <_printf_float+0x2f0>)
 8004a96:	2301      	movs	r3, #1
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	47b8      	blx	r7
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f43f af19 	beq.w	80048d6 <_printf_float+0xc2>
 8004aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	d102      	bne.n	8004ab2 <_printf_float+0x29e>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	07d9      	lsls	r1, r3, #31
 8004ab0:	d5d8      	bpl.n	8004a64 <_printf_float+0x250>
 8004ab2:	ee18 3a10 	vmov	r3, s16
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b8      	blx	r7
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f43f af09 	beq.w	80048d6 <_printf_float+0xc2>
 8004ac4:	f04f 0900 	mov.w	r9, #0
 8004ac8:	f104 0a1a 	add.w	sl, r4, #26
 8004acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ace:	425b      	negs	r3, r3
 8004ad0:	454b      	cmp	r3, r9
 8004ad2:	dc01      	bgt.n	8004ad8 <_printf_float+0x2c4>
 8004ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad6:	e792      	b.n	80049fe <_printf_float+0x1ea>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	4652      	mov	r2, sl
 8004adc:	4631      	mov	r1, r6
 8004ade:	4628      	mov	r0, r5
 8004ae0:	47b8      	blx	r7
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	f43f aef7 	beq.w	80048d6 <_printf_float+0xc2>
 8004ae8:	f109 0901 	add.w	r9, r9, #1
 8004aec:	e7ee      	b.n	8004acc <_printf_float+0x2b8>
 8004aee:	bf00      	nop
 8004af0:	7fefffff 	.word	0x7fefffff
 8004af4:	08009dec 	.word	0x08009dec
 8004af8:	08009df0 	.word	0x08009df0
 8004afc:	08009df8 	.word	0x08009df8
 8004b00:	08009df4 	.word	0x08009df4
 8004b04:	0800a1f1 	.word	0x0800a1f1
 8004b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	bfa8      	it	ge
 8004b10:	461a      	movge	r2, r3
 8004b12:	2a00      	cmp	r2, #0
 8004b14:	4691      	mov	r9, r2
 8004b16:	dc37      	bgt.n	8004b88 <_printf_float+0x374>
 8004b18:	f04f 0b00 	mov.w	fp, #0
 8004b1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b20:	f104 021a 	add.w	r2, r4, #26
 8004b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b26:	9305      	str	r3, [sp, #20]
 8004b28:	eba3 0309 	sub.w	r3, r3, r9
 8004b2c:	455b      	cmp	r3, fp
 8004b2e:	dc33      	bgt.n	8004b98 <_printf_float+0x384>
 8004b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b34:	429a      	cmp	r2, r3
 8004b36:	db3b      	blt.n	8004bb0 <_printf_float+0x39c>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	07da      	lsls	r2, r3, #31
 8004b3c:	d438      	bmi.n	8004bb0 <_printf_float+0x39c>
 8004b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b40:	9a05      	ldr	r2, [sp, #20]
 8004b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b44:	1a9a      	subs	r2, r3, r2
 8004b46:	eba3 0901 	sub.w	r9, r3, r1
 8004b4a:	4591      	cmp	r9, r2
 8004b4c:	bfa8      	it	ge
 8004b4e:	4691      	movge	r9, r2
 8004b50:	f1b9 0f00 	cmp.w	r9, #0
 8004b54:	dc35      	bgt.n	8004bc2 <_printf_float+0x3ae>
 8004b56:	f04f 0800 	mov.w	r8, #0
 8004b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b5e:	f104 0a1a 	add.w	sl, r4, #26
 8004b62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	eba3 0309 	sub.w	r3, r3, r9
 8004b6c:	4543      	cmp	r3, r8
 8004b6e:	f77f af79 	ble.w	8004a64 <_printf_float+0x250>
 8004b72:	2301      	movs	r3, #1
 8004b74:	4652      	mov	r2, sl
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f aeaa 	beq.w	80048d6 <_printf_float+0xc2>
 8004b82:	f108 0801 	add.w	r8, r8, #1
 8004b86:	e7ec      	b.n	8004b62 <_printf_float+0x34e>
 8004b88:	4613      	mov	r3, r2
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	d1c0      	bne.n	8004b18 <_printf_float+0x304>
 8004b96:	e69e      	b.n	80048d6 <_printf_float+0xc2>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	9205      	str	r2, [sp, #20]
 8004ba0:	47b8      	blx	r7
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	f43f ae97 	beq.w	80048d6 <_printf_float+0xc2>
 8004ba8:	9a05      	ldr	r2, [sp, #20]
 8004baa:	f10b 0b01 	add.w	fp, fp, #1
 8004bae:	e7b9      	b.n	8004b24 <_printf_float+0x310>
 8004bb0:	ee18 3a10 	vmov	r3, s16
 8004bb4:	4652      	mov	r2, sl
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b8      	blx	r7
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d1be      	bne.n	8004b3e <_printf_float+0x32a>
 8004bc0:	e689      	b.n	80048d6 <_printf_float+0xc2>
 8004bc2:	9a05      	ldr	r2, [sp, #20]
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	4442      	add	r2, r8
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b8      	blx	r7
 8004bce:	3001      	adds	r0, #1
 8004bd0:	d1c1      	bne.n	8004b56 <_printf_float+0x342>
 8004bd2:	e680      	b.n	80048d6 <_printf_float+0xc2>
 8004bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bd6:	2a01      	cmp	r2, #1
 8004bd8:	dc01      	bgt.n	8004bde <_printf_float+0x3ca>
 8004bda:	07db      	lsls	r3, r3, #31
 8004bdc:	d538      	bpl.n	8004c50 <_printf_float+0x43c>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4642      	mov	r2, r8
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	f43f ae74 	beq.w	80048d6 <_printf_float+0xc2>
 8004bee:	ee18 3a10 	vmov	r3, s16
 8004bf2:	4652      	mov	r2, sl
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	47b8      	blx	r7
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	f43f ae6b 	beq.w	80048d6 <_printf_float+0xc2>
 8004c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c04:	2200      	movs	r2, #0
 8004c06:	2300      	movs	r3, #0
 8004c08:	f7fb ff76 	bl	8000af8 <__aeabi_dcmpeq>
 8004c0c:	b9d8      	cbnz	r0, 8004c46 <_printf_float+0x432>
 8004c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c10:	f108 0201 	add.w	r2, r8, #1
 8004c14:	3b01      	subs	r3, #1
 8004c16:	4631      	mov	r1, r6
 8004c18:	4628      	mov	r0, r5
 8004c1a:	47b8      	blx	r7
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d10e      	bne.n	8004c3e <_printf_float+0x42a>
 8004c20:	e659      	b.n	80048d6 <_printf_float+0xc2>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4652      	mov	r2, sl
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f ae52 	beq.w	80048d6 <_printf_float+0xc2>
 8004c32:	f108 0801 	add.w	r8, r8, #1
 8004c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	4543      	cmp	r3, r8
 8004c3c:	dcf1      	bgt.n	8004c22 <_printf_float+0x40e>
 8004c3e:	464b      	mov	r3, r9
 8004c40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c44:	e6dc      	b.n	8004a00 <_printf_float+0x1ec>
 8004c46:	f04f 0800 	mov.w	r8, #0
 8004c4a:	f104 0a1a 	add.w	sl, r4, #26
 8004c4e:	e7f2      	b.n	8004c36 <_printf_float+0x422>
 8004c50:	2301      	movs	r3, #1
 8004c52:	4642      	mov	r2, r8
 8004c54:	e7df      	b.n	8004c16 <_printf_float+0x402>
 8004c56:	2301      	movs	r3, #1
 8004c58:	464a      	mov	r2, r9
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	47b8      	blx	r7
 8004c60:	3001      	adds	r0, #1
 8004c62:	f43f ae38 	beq.w	80048d6 <_printf_float+0xc2>
 8004c66:	f108 0801 	add.w	r8, r8, #1
 8004c6a:	68e3      	ldr	r3, [r4, #12]
 8004c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c6e:	1a5b      	subs	r3, r3, r1
 8004c70:	4543      	cmp	r3, r8
 8004c72:	dcf0      	bgt.n	8004c56 <_printf_float+0x442>
 8004c74:	e6fa      	b.n	8004a6c <_printf_float+0x258>
 8004c76:	f04f 0800 	mov.w	r8, #0
 8004c7a:	f104 0919 	add.w	r9, r4, #25
 8004c7e:	e7f4      	b.n	8004c6a <_printf_float+0x456>

08004c80 <_printf_common>:
 8004c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c84:	4616      	mov	r6, r2
 8004c86:	4699      	mov	r9, r3
 8004c88:	688a      	ldr	r2, [r1, #8]
 8004c8a:	690b      	ldr	r3, [r1, #16]
 8004c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	bfb8      	it	lt
 8004c94:	4613      	movlt	r3, r2
 8004c96:	6033      	str	r3, [r6, #0]
 8004c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c9c:	4607      	mov	r7, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	b10a      	cbz	r2, 8004ca6 <_printf_common+0x26>
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	6033      	str	r3, [r6, #0]
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	0699      	lsls	r1, r3, #26
 8004caa:	bf42      	ittt	mi
 8004cac:	6833      	ldrmi	r3, [r6, #0]
 8004cae:	3302      	addmi	r3, #2
 8004cb0:	6033      	strmi	r3, [r6, #0]
 8004cb2:	6825      	ldr	r5, [r4, #0]
 8004cb4:	f015 0506 	ands.w	r5, r5, #6
 8004cb8:	d106      	bne.n	8004cc8 <_printf_common+0x48>
 8004cba:	f104 0a19 	add.w	sl, r4, #25
 8004cbe:	68e3      	ldr	r3, [r4, #12]
 8004cc0:	6832      	ldr	r2, [r6, #0]
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	42ab      	cmp	r3, r5
 8004cc6:	dc26      	bgt.n	8004d16 <_printf_common+0x96>
 8004cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ccc:	1e13      	subs	r3, r2, #0
 8004cce:	6822      	ldr	r2, [r4, #0]
 8004cd0:	bf18      	it	ne
 8004cd2:	2301      	movne	r3, #1
 8004cd4:	0692      	lsls	r2, r2, #26
 8004cd6:	d42b      	bmi.n	8004d30 <_printf_common+0xb0>
 8004cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cdc:	4649      	mov	r1, r9
 8004cde:	4638      	mov	r0, r7
 8004ce0:	47c0      	blx	r8
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d01e      	beq.n	8004d24 <_printf_common+0xa4>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	68e5      	ldr	r5, [r4, #12]
 8004cea:	6832      	ldr	r2, [r6, #0]
 8004cec:	f003 0306 	and.w	r3, r3, #6
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	bf08      	it	eq
 8004cf4:	1aad      	subeq	r5, r5, r2
 8004cf6:	68a3      	ldr	r3, [r4, #8]
 8004cf8:	6922      	ldr	r2, [r4, #16]
 8004cfa:	bf0c      	ite	eq
 8004cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d00:	2500      	movne	r5, #0
 8004d02:	4293      	cmp	r3, r2
 8004d04:	bfc4      	itt	gt
 8004d06:	1a9b      	subgt	r3, r3, r2
 8004d08:	18ed      	addgt	r5, r5, r3
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	341a      	adds	r4, #26
 8004d0e:	42b5      	cmp	r5, r6
 8004d10:	d11a      	bne.n	8004d48 <_printf_common+0xc8>
 8004d12:	2000      	movs	r0, #0
 8004d14:	e008      	b.n	8004d28 <_printf_common+0xa8>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4652      	mov	r2, sl
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	47c0      	blx	r8
 8004d20:	3001      	adds	r0, #1
 8004d22:	d103      	bne.n	8004d2c <_printf_common+0xac>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	e7c6      	b.n	8004cbe <_printf_common+0x3e>
 8004d30:	18e1      	adds	r1, r4, r3
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	2030      	movs	r0, #48	; 0x30
 8004d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d3a:	4422      	add	r2, r4
 8004d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d44:	3302      	adds	r3, #2
 8004d46:	e7c7      	b.n	8004cd8 <_printf_common+0x58>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4638      	mov	r0, r7
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d0e6      	beq.n	8004d24 <_printf_common+0xa4>
 8004d56:	3601      	adds	r6, #1
 8004d58:	e7d9      	b.n	8004d0e <_printf_common+0x8e>
	...

08004d5c <_printf_i>:
 8004d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	7e0f      	ldrb	r7, [r1, #24]
 8004d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d64:	2f78      	cmp	r7, #120	; 0x78
 8004d66:	4691      	mov	r9, r2
 8004d68:	4680      	mov	r8, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	469a      	mov	sl, r3
 8004d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d72:	d807      	bhi.n	8004d84 <_printf_i+0x28>
 8004d74:	2f62      	cmp	r7, #98	; 0x62
 8004d76:	d80a      	bhi.n	8004d8e <_printf_i+0x32>
 8004d78:	2f00      	cmp	r7, #0
 8004d7a:	f000 80d8 	beq.w	8004f2e <_printf_i+0x1d2>
 8004d7e:	2f58      	cmp	r7, #88	; 0x58
 8004d80:	f000 80a3 	beq.w	8004eca <_printf_i+0x16e>
 8004d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d8c:	e03a      	b.n	8004e04 <_printf_i+0xa8>
 8004d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d92:	2b15      	cmp	r3, #21
 8004d94:	d8f6      	bhi.n	8004d84 <_printf_i+0x28>
 8004d96:	a101      	add	r1, pc, #4	; (adr r1, 8004d9c <_printf_i+0x40>)
 8004d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d9c:	08004df5 	.word	0x08004df5
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004d85 	.word	0x08004d85
 8004da8:	08004d85 	.word	0x08004d85
 8004dac:	08004d85 	.word	0x08004d85
 8004db0:	08004d85 	.word	0x08004d85
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004d85 	.word	0x08004d85
 8004dbc:	08004d85 	.word	0x08004d85
 8004dc0:	08004d85 	.word	0x08004d85
 8004dc4:	08004d85 	.word	0x08004d85
 8004dc8:	08004f15 	.word	0x08004f15
 8004dcc:	08004e39 	.word	0x08004e39
 8004dd0:	08004ef7 	.word	0x08004ef7
 8004dd4:	08004d85 	.word	0x08004d85
 8004dd8:	08004d85 	.word	0x08004d85
 8004ddc:	08004f37 	.word	0x08004f37
 8004de0:	08004d85 	.word	0x08004d85
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004d85 	.word	0x08004d85
 8004dec:	08004d85 	.word	0x08004d85
 8004df0:	08004eff 	.word	0x08004eff
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	1d1a      	adds	r2, r3, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	602a      	str	r2, [r5, #0]
 8004dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0a3      	b.n	8004f50 <_printf_i+0x1f4>
 8004e08:	6820      	ldr	r0, [r4, #0]
 8004e0a:	6829      	ldr	r1, [r5, #0]
 8004e0c:	0606      	lsls	r6, r0, #24
 8004e0e:	f101 0304 	add.w	r3, r1, #4
 8004e12:	d50a      	bpl.n	8004e2a <_printf_i+0xce>
 8004e14:	680e      	ldr	r6, [r1, #0]
 8004e16:	602b      	str	r3, [r5, #0]
 8004e18:	2e00      	cmp	r6, #0
 8004e1a:	da03      	bge.n	8004e24 <_printf_i+0xc8>
 8004e1c:	232d      	movs	r3, #45	; 0x2d
 8004e1e:	4276      	negs	r6, r6
 8004e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e24:	485e      	ldr	r0, [pc, #376]	; (8004fa0 <_printf_i+0x244>)
 8004e26:	230a      	movs	r3, #10
 8004e28:	e019      	b.n	8004e5e <_printf_i+0x102>
 8004e2a:	680e      	ldr	r6, [r1, #0]
 8004e2c:	602b      	str	r3, [r5, #0]
 8004e2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e32:	bf18      	it	ne
 8004e34:	b236      	sxthne	r6, r6
 8004e36:	e7ef      	b.n	8004e18 <_printf_i+0xbc>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	1d19      	adds	r1, r3, #4
 8004e3e:	6029      	str	r1, [r5, #0]
 8004e40:	0601      	lsls	r1, r0, #24
 8004e42:	d501      	bpl.n	8004e48 <_printf_i+0xec>
 8004e44:	681e      	ldr	r6, [r3, #0]
 8004e46:	e002      	b.n	8004e4e <_printf_i+0xf2>
 8004e48:	0646      	lsls	r6, r0, #25
 8004e4a:	d5fb      	bpl.n	8004e44 <_printf_i+0xe8>
 8004e4c:	881e      	ldrh	r6, [r3, #0]
 8004e4e:	4854      	ldr	r0, [pc, #336]	; (8004fa0 <_printf_i+0x244>)
 8004e50:	2f6f      	cmp	r7, #111	; 0x6f
 8004e52:	bf0c      	ite	eq
 8004e54:	2308      	moveq	r3, #8
 8004e56:	230a      	movne	r3, #10
 8004e58:	2100      	movs	r1, #0
 8004e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e5e:	6865      	ldr	r5, [r4, #4]
 8004e60:	60a5      	str	r5, [r4, #8]
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	bfa2      	ittt	ge
 8004e66:	6821      	ldrge	r1, [r4, #0]
 8004e68:	f021 0104 	bicge.w	r1, r1, #4
 8004e6c:	6021      	strge	r1, [r4, #0]
 8004e6e:	b90e      	cbnz	r6, 8004e74 <_printf_i+0x118>
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	d04d      	beq.n	8004f10 <_printf_i+0x1b4>
 8004e74:	4615      	mov	r5, r2
 8004e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e7e:	5dc7      	ldrb	r7, [r0, r7]
 8004e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e84:	4637      	mov	r7, r6
 8004e86:	42bb      	cmp	r3, r7
 8004e88:	460e      	mov	r6, r1
 8004e8a:	d9f4      	bls.n	8004e76 <_printf_i+0x11a>
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d10b      	bne.n	8004ea8 <_printf_i+0x14c>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	07de      	lsls	r6, r3, #31
 8004e94:	d508      	bpl.n	8004ea8 <_printf_i+0x14c>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	6861      	ldr	r1, [r4, #4]
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	bfde      	ittt	le
 8004e9e:	2330      	movle	r3, #48	; 0x30
 8004ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ea8:	1b52      	subs	r2, r2, r5
 8004eaa:	6122      	str	r2, [r4, #16]
 8004eac:	f8cd a000 	str.w	sl, [sp]
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	aa03      	add	r2, sp, #12
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	f7ff fee2 	bl	8004c80 <_printf_common>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d14c      	bne.n	8004f5a <_printf_i+0x1fe>
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	b004      	add	sp, #16
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eca:	4835      	ldr	r0, [pc, #212]	; (8004fa0 <_printf_i+0x244>)
 8004ecc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ed0:	6829      	ldr	r1, [r5, #0]
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ed8:	6029      	str	r1, [r5, #0]
 8004eda:	061d      	lsls	r5, r3, #24
 8004edc:	d514      	bpl.n	8004f08 <_printf_i+0x1ac>
 8004ede:	07df      	lsls	r7, r3, #31
 8004ee0:	bf44      	itt	mi
 8004ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ee6:	6023      	strmi	r3, [r4, #0]
 8004ee8:	b91e      	cbnz	r6, 8004ef2 <_printf_i+0x196>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f023 0320 	bic.w	r3, r3, #32
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	e7b0      	b.n	8004e58 <_printf_i+0xfc>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	f043 0320 	orr.w	r3, r3, #32
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	2378      	movs	r3, #120	; 0x78
 8004f00:	4828      	ldr	r0, [pc, #160]	; (8004fa4 <_printf_i+0x248>)
 8004f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f06:	e7e3      	b.n	8004ed0 <_printf_i+0x174>
 8004f08:	0659      	lsls	r1, r3, #25
 8004f0a:	bf48      	it	mi
 8004f0c:	b2b6      	uxthmi	r6, r6
 8004f0e:	e7e6      	b.n	8004ede <_printf_i+0x182>
 8004f10:	4615      	mov	r5, r2
 8004f12:	e7bb      	b.n	8004e8c <_printf_i+0x130>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	6826      	ldr	r6, [r4, #0]
 8004f18:	6961      	ldr	r1, [r4, #20]
 8004f1a:	1d18      	adds	r0, r3, #4
 8004f1c:	6028      	str	r0, [r5, #0]
 8004f1e:	0635      	lsls	r5, r6, #24
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	d501      	bpl.n	8004f28 <_printf_i+0x1cc>
 8004f24:	6019      	str	r1, [r3, #0]
 8004f26:	e002      	b.n	8004f2e <_printf_i+0x1d2>
 8004f28:	0670      	lsls	r0, r6, #25
 8004f2a:	d5fb      	bpl.n	8004f24 <_printf_i+0x1c8>
 8004f2c:	8019      	strh	r1, [r3, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6123      	str	r3, [r4, #16]
 8004f32:	4615      	mov	r5, r2
 8004f34:	e7ba      	b.n	8004eac <_printf_i+0x150>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	1d1a      	adds	r2, r3, #4
 8004f3a:	602a      	str	r2, [r5, #0]
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	6862      	ldr	r2, [r4, #4]
 8004f40:	2100      	movs	r1, #0
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb f964 	bl	8000210 <memchr>
 8004f48:	b108      	cbz	r0, 8004f4e <_printf_i+0x1f2>
 8004f4a:	1b40      	subs	r0, r0, r5
 8004f4c:	6060      	str	r0, [r4, #4]
 8004f4e:	6863      	ldr	r3, [r4, #4]
 8004f50:	6123      	str	r3, [r4, #16]
 8004f52:	2300      	movs	r3, #0
 8004f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f58:	e7a8      	b.n	8004eac <_printf_i+0x150>
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	462a      	mov	r2, r5
 8004f5e:	4649      	mov	r1, r9
 8004f60:	4640      	mov	r0, r8
 8004f62:	47d0      	blx	sl
 8004f64:	3001      	adds	r0, #1
 8004f66:	d0ab      	beq.n	8004ec0 <_printf_i+0x164>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	079b      	lsls	r3, r3, #30
 8004f6c:	d413      	bmi.n	8004f96 <_printf_i+0x23a>
 8004f6e:	68e0      	ldr	r0, [r4, #12]
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	4298      	cmp	r0, r3
 8004f74:	bfb8      	it	lt
 8004f76:	4618      	movlt	r0, r3
 8004f78:	e7a4      	b.n	8004ec4 <_printf_i+0x168>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4640      	mov	r0, r8
 8004f82:	47d0      	blx	sl
 8004f84:	3001      	adds	r0, #1
 8004f86:	d09b      	beq.n	8004ec0 <_printf_i+0x164>
 8004f88:	3501      	adds	r5, #1
 8004f8a:	68e3      	ldr	r3, [r4, #12]
 8004f8c:	9903      	ldr	r1, [sp, #12]
 8004f8e:	1a5b      	subs	r3, r3, r1
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	dcf2      	bgt.n	8004f7a <_printf_i+0x21e>
 8004f94:	e7eb      	b.n	8004f6e <_printf_i+0x212>
 8004f96:	2500      	movs	r5, #0
 8004f98:	f104 0619 	add.w	r6, r4, #25
 8004f9c:	e7f5      	b.n	8004f8a <_printf_i+0x22e>
 8004f9e:	bf00      	nop
 8004fa0:	08009dfc 	.word	0x08009dfc
 8004fa4:	08009e0d 	.word	0x08009e0d

08004fa8 <_scanf_float>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	b087      	sub	sp, #28
 8004fae:	4617      	mov	r7, r2
 8004fb0:	9303      	str	r3, [sp, #12]
 8004fb2:	688b      	ldr	r3, [r1, #8]
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004fba:	bf83      	ittte	hi
 8004fbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004fc0:	195b      	addhi	r3, r3, r5
 8004fc2:	9302      	strhi	r3, [sp, #8]
 8004fc4:	2300      	movls	r3, #0
 8004fc6:	bf86      	itte	hi
 8004fc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004fcc:	608b      	strhi	r3, [r1, #8]
 8004fce:	9302      	strls	r3, [sp, #8]
 8004fd0:	680b      	ldr	r3, [r1, #0]
 8004fd2:	468b      	mov	fp, r1
 8004fd4:	2500      	movs	r5, #0
 8004fd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004fda:	f84b 3b1c 	str.w	r3, [fp], #28
 8004fde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fe2:	4680      	mov	r8, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	465e      	mov	r6, fp
 8004fe8:	46aa      	mov	sl, r5
 8004fea:	46a9      	mov	r9, r5
 8004fec:	9501      	str	r5, [sp, #4]
 8004fee:	68a2      	ldr	r2, [r4, #8]
 8004ff0:	b152      	cbz	r2, 8005008 <_scanf_float+0x60>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8004ff8:	d864      	bhi.n	80050c4 <_scanf_float+0x11c>
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d83c      	bhi.n	8005078 <_scanf_float+0xd0>
 8004ffe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005002:	b2c8      	uxtb	r0, r1
 8005004:	280e      	cmp	r0, #14
 8005006:	d93a      	bls.n	800507e <_scanf_float+0xd6>
 8005008:	f1b9 0f00 	cmp.w	r9, #0
 800500c:	d003      	beq.n	8005016 <_scanf_float+0x6e>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800501a:	f1ba 0f01 	cmp.w	sl, #1
 800501e:	f200 8113 	bhi.w	8005248 <_scanf_float+0x2a0>
 8005022:	455e      	cmp	r6, fp
 8005024:	f200 8105 	bhi.w	8005232 <_scanf_float+0x28a>
 8005028:	2501      	movs	r5, #1
 800502a:	4628      	mov	r0, r5
 800502c:	b007      	add	sp, #28
 800502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005032:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005036:	2a0d      	cmp	r2, #13
 8005038:	d8e6      	bhi.n	8005008 <_scanf_float+0x60>
 800503a:	a101      	add	r1, pc, #4	; (adr r1, 8005040 <_scanf_float+0x98>)
 800503c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005040:	0800517f 	.word	0x0800517f
 8005044:	08005009 	.word	0x08005009
 8005048:	08005009 	.word	0x08005009
 800504c:	08005009 	.word	0x08005009
 8005050:	080051df 	.word	0x080051df
 8005054:	080051b7 	.word	0x080051b7
 8005058:	08005009 	.word	0x08005009
 800505c:	08005009 	.word	0x08005009
 8005060:	0800518d 	.word	0x0800518d
 8005064:	08005009 	.word	0x08005009
 8005068:	08005009 	.word	0x08005009
 800506c:	08005009 	.word	0x08005009
 8005070:	08005009 	.word	0x08005009
 8005074:	08005145 	.word	0x08005145
 8005078:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800507c:	e7db      	b.n	8005036 <_scanf_float+0x8e>
 800507e:	290e      	cmp	r1, #14
 8005080:	d8c2      	bhi.n	8005008 <_scanf_float+0x60>
 8005082:	a001      	add	r0, pc, #4	; (adr r0, 8005088 <_scanf_float+0xe0>)
 8005084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005088:	08005137 	.word	0x08005137
 800508c:	08005009 	.word	0x08005009
 8005090:	08005137 	.word	0x08005137
 8005094:	080051cb 	.word	0x080051cb
 8005098:	08005009 	.word	0x08005009
 800509c:	080050e5 	.word	0x080050e5
 80050a0:	08005121 	.word	0x08005121
 80050a4:	08005121 	.word	0x08005121
 80050a8:	08005121 	.word	0x08005121
 80050ac:	08005121 	.word	0x08005121
 80050b0:	08005121 	.word	0x08005121
 80050b4:	08005121 	.word	0x08005121
 80050b8:	08005121 	.word	0x08005121
 80050bc:	08005121 	.word	0x08005121
 80050c0:	08005121 	.word	0x08005121
 80050c4:	2b6e      	cmp	r3, #110	; 0x6e
 80050c6:	d809      	bhi.n	80050dc <_scanf_float+0x134>
 80050c8:	2b60      	cmp	r3, #96	; 0x60
 80050ca:	d8b2      	bhi.n	8005032 <_scanf_float+0x8a>
 80050cc:	2b54      	cmp	r3, #84	; 0x54
 80050ce:	d077      	beq.n	80051c0 <_scanf_float+0x218>
 80050d0:	2b59      	cmp	r3, #89	; 0x59
 80050d2:	d199      	bne.n	8005008 <_scanf_float+0x60>
 80050d4:	2d07      	cmp	r5, #7
 80050d6:	d197      	bne.n	8005008 <_scanf_float+0x60>
 80050d8:	2508      	movs	r5, #8
 80050da:	e029      	b.n	8005130 <_scanf_float+0x188>
 80050dc:	2b74      	cmp	r3, #116	; 0x74
 80050de:	d06f      	beq.n	80051c0 <_scanf_float+0x218>
 80050e0:	2b79      	cmp	r3, #121	; 0x79
 80050e2:	e7f6      	b.n	80050d2 <_scanf_float+0x12a>
 80050e4:	6821      	ldr	r1, [r4, #0]
 80050e6:	05c8      	lsls	r0, r1, #23
 80050e8:	d51a      	bpl.n	8005120 <_scanf_float+0x178>
 80050ea:	9b02      	ldr	r3, [sp, #8]
 80050ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050f0:	6021      	str	r1, [r4, #0]
 80050f2:	f109 0901 	add.w	r9, r9, #1
 80050f6:	b11b      	cbz	r3, 8005100 <_scanf_float+0x158>
 80050f8:	3b01      	subs	r3, #1
 80050fa:	3201      	adds	r2, #1
 80050fc:	9302      	str	r3, [sp, #8]
 80050fe:	60a2      	str	r2, [r4, #8]
 8005100:	68a3      	ldr	r3, [r4, #8]
 8005102:	3b01      	subs	r3, #1
 8005104:	60a3      	str	r3, [r4, #8]
 8005106:	6923      	ldr	r3, [r4, #16]
 8005108:	3301      	adds	r3, #1
 800510a:	6123      	str	r3, [r4, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3b01      	subs	r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	607b      	str	r3, [r7, #4]
 8005114:	f340 8084 	ble.w	8005220 <_scanf_float+0x278>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	603b      	str	r3, [r7, #0]
 800511e:	e766      	b.n	8004fee <_scanf_float+0x46>
 8005120:	eb1a 0f05 	cmn.w	sl, r5
 8005124:	f47f af70 	bne.w	8005008 <_scanf_float+0x60>
 8005128:	6822      	ldr	r2, [r4, #0]
 800512a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800512e:	6022      	str	r2, [r4, #0]
 8005130:	f806 3b01 	strb.w	r3, [r6], #1
 8005134:	e7e4      	b.n	8005100 <_scanf_float+0x158>
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	0610      	lsls	r0, r2, #24
 800513a:	f57f af65 	bpl.w	8005008 <_scanf_float+0x60>
 800513e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005142:	e7f4      	b.n	800512e <_scanf_float+0x186>
 8005144:	f1ba 0f00 	cmp.w	sl, #0
 8005148:	d10e      	bne.n	8005168 <_scanf_float+0x1c0>
 800514a:	f1b9 0f00 	cmp.w	r9, #0
 800514e:	d10e      	bne.n	800516e <_scanf_float+0x1c6>
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800515a:	d108      	bne.n	800516e <_scanf_float+0x1c6>
 800515c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005160:	6022      	str	r2, [r4, #0]
 8005162:	f04f 0a01 	mov.w	sl, #1
 8005166:	e7e3      	b.n	8005130 <_scanf_float+0x188>
 8005168:	f1ba 0f02 	cmp.w	sl, #2
 800516c:	d055      	beq.n	800521a <_scanf_float+0x272>
 800516e:	2d01      	cmp	r5, #1
 8005170:	d002      	beq.n	8005178 <_scanf_float+0x1d0>
 8005172:	2d04      	cmp	r5, #4
 8005174:	f47f af48 	bne.w	8005008 <_scanf_float+0x60>
 8005178:	3501      	adds	r5, #1
 800517a:	b2ed      	uxtb	r5, r5
 800517c:	e7d8      	b.n	8005130 <_scanf_float+0x188>
 800517e:	f1ba 0f01 	cmp.w	sl, #1
 8005182:	f47f af41 	bne.w	8005008 <_scanf_float+0x60>
 8005186:	f04f 0a02 	mov.w	sl, #2
 800518a:	e7d1      	b.n	8005130 <_scanf_float+0x188>
 800518c:	b97d      	cbnz	r5, 80051ae <_scanf_float+0x206>
 800518e:	f1b9 0f00 	cmp.w	r9, #0
 8005192:	f47f af3c 	bne.w	800500e <_scanf_float+0x66>
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800519c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80051a0:	f47f af39 	bne.w	8005016 <_scanf_float+0x6e>
 80051a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051a8:	6022      	str	r2, [r4, #0]
 80051aa:	2501      	movs	r5, #1
 80051ac:	e7c0      	b.n	8005130 <_scanf_float+0x188>
 80051ae:	2d03      	cmp	r5, #3
 80051b0:	d0e2      	beq.n	8005178 <_scanf_float+0x1d0>
 80051b2:	2d05      	cmp	r5, #5
 80051b4:	e7de      	b.n	8005174 <_scanf_float+0x1cc>
 80051b6:	2d02      	cmp	r5, #2
 80051b8:	f47f af26 	bne.w	8005008 <_scanf_float+0x60>
 80051bc:	2503      	movs	r5, #3
 80051be:	e7b7      	b.n	8005130 <_scanf_float+0x188>
 80051c0:	2d06      	cmp	r5, #6
 80051c2:	f47f af21 	bne.w	8005008 <_scanf_float+0x60>
 80051c6:	2507      	movs	r5, #7
 80051c8:	e7b2      	b.n	8005130 <_scanf_float+0x188>
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	0591      	lsls	r1, r2, #22
 80051ce:	f57f af1b 	bpl.w	8005008 <_scanf_float+0x60>
 80051d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051d6:	6022      	str	r2, [r4, #0]
 80051d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80051dc:	e7a8      	b.n	8005130 <_scanf_float+0x188>
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80051e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051e8:	d006      	beq.n	80051f8 <_scanf_float+0x250>
 80051ea:	0550      	lsls	r0, r2, #21
 80051ec:	f57f af0c 	bpl.w	8005008 <_scanf_float+0x60>
 80051f0:	f1b9 0f00 	cmp.w	r9, #0
 80051f4:	f43f af0f 	beq.w	8005016 <_scanf_float+0x6e>
 80051f8:	0591      	lsls	r1, r2, #22
 80051fa:	bf58      	it	pl
 80051fc:	9901      	ldrpl	r1, [sp, #4]
 80051fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005202:	bf58      	it	pl
 8005204:	eba9 0101 	subpl.w	r1, r9, r1
 8005208:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800520c:	bf58      	it	pl
 800520e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005212:	6022      	str	r2, [r4, #0]
 8005214:	f04f 0900 	mov.w	r9, #0
 8005218:	e78a      	b.n	8005130 <_scanf_float+0x188>
 800521a:	f04f 0a03 	mov.w	sl, #3
 800521e:	e787      	b.n	8005130 <_scanf_float+0x188>
 8005220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005224:	4639      	mov	r1, r7
 8005226:	4640      	mov	r0, r8
 8005228:	4798      	blx	r3
 800522a:	2800      	cmp	r0, #0
 800522c:	f43f aedf 	beq.w	8004fee <_scanf_float+0x46>
 8005230:	e6ea      	b.n	8005008 <_scanf_float+0x60>
 8005232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800523a:	463a      	mov	r2, r7
 800523c:	4640      	mov	r0, r8
 800523e:	4798      	blx	r3
 8005240:	6923      	ldr	r3, [r4, #16]
 8005242:	3b01      	subs	r3, #1
 8005244:	6123      	str	r3, [r4, #16]
 8005246:	e6ec      	b.n	8005022 <_scanf_float+0x7a>
 8005248:	1e6b      	subs	r3, r5, #1
 800524a:	2b06      	cmp	r3, #6
 800524c:	d825      	bhi.n	800529a <_scanf_float+0x2f2>
 800524e:	2d02      	cmp	r5, #2
 8005250:	d836      	bhi.n	80052c0 <_scanf_float+0x318>
 8005252:	455e      	cmp	r6, fp
 8005254:	f67f aee8 	bls.w	8005028 <_scanf_float+0x80>
 8005258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800525c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005260:	463a      	mov	r2, r7
 8005262:	4640      	mov	r0, r8
 8005264:	4798      	blx	r3
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	3b01      	subs	r3, #1
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	e7f1      	b.n	8005252 <_scanf_float+0x2aa>
 800526e:	9802      	ldr	r0, [sp, #8]
 8005270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005274:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005278:	9002      	str	r0, [sp, #8]
 800527a:	463a      	mov	r2, r7
 800527c:	4640      	mov	r0, r8
 800527e:	4798      	blx	r3
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	3b01      	subs	r3, #1
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800528a:	fa5f fa8a 	uxtb.w	sl, sl
 800528e:	f1ba 0f02 	cmp.w	sl, #2
 8005292:	d1ec      	bne.n	800526e <_scanf_float+0x2c6>
 8005294:	3d03      	subs	r5, #3
 8005296:	b2ed      	uxtb	r5, r5
 8005298:	1b76      	subs	r6, r6, r5
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	05da      	lsls	r2, r3, #23
 800529e:	d52f      	bpl.n	8005300 <_scanf_float+0x358>
 80052a0:	055b      	lsls	r3, r3, #21
 80052a2:	d510      	bpl.n	80052c6 <_scanf_float+0x31e>
 80052a4:	455e      	cmp	r6, fp
 80052a6:	f67f aebf 	bls.w	8005028 <_scanf_float+0x80>
 80052aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052b2:	463a      	mov	r2, r7
 80052b4:	4640      	mov	r0, r8
 80052b6:	4798      	blx	r3
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	e7f1      	b.n	80052a4 <_scanf_float+0x2fc>
 80052c0:	46aa      	mov	sl, r5
 80052c2:	9602      	str	r6, [sp, #8]
 80052c4:	e7df      	b.n	8005286 <_scanf_float+0x2de>
 80052c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052ca:	6923      	ldr	r3, [r4, #16]
 80052cc:	2965      	cmp	r1, #101	; 0x65
 80052ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80052d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80052d6:	6123      	str	r3, [r4, #16]
 80052d8:	d00c      	beq.n	80052f4 <_scanf_float+0x34c>
 80052da:	2945      	cmp	r1, #69	; 0x45
 80052dc:	d00a      	beq.n	80052f4 <_scanf_float+0x34c>
 80052de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052e2:	463a      	mov	r2, r7
 80052e4:	4640      	mov	r0, r8
 80052e6:	4798      	blx	r3
 80052e8:	6923      	ldr	r3, [r4, #16]
 80052ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	1eb5      	subs	r5, r6, #2
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052f8:	463a      	mov	r2, r7
 80052fa:	4640      	mov	r0, r8
 80052fc:	4798      	blx	r3
 80052fe:	462e      	mov	r6, r5
 8005300:	6825      	ldr	r5, [r4, #0]
 8005302:	f015 0510 	ands.w	r5, r5, #16
 8005306:	d159      	bne.n	80053bc <_scanf_float+0x414>
 8005308:	7035      	strb	r5, [r6, #0]
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d11b      	bne.n	800534e <_scanf_float+0x3a6>
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	454b      	cmp	r3, r9
 800531a:	eba3 0209 	sub.w	r2, r3, r9
 800531e:	d123      	bne.n	8005368 <_scanf_float+0x3c0>
 8005320:	2200      	movs	r2, #0
 8005322:	4659      	mov	r1, fp
 8005324:	4640      	mov	r0, r8
 8005326:	f000 ff09 	bl	800613c <_strtod_r>
 800532a:	6822      	ldr	r2, [r4, #0]
 800532c:	9b03      	ldr	r3, [sp, #12]
 800532e:	f012 0f02 	tst.w	r2, #2
 8005332:	ec57 6b10 	vmov	r6, r7, d0
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	d021      	beq.n	800537e <_scanf_float+0x3d6>
 800533a:	9903      	ldr	r1, [sp, #12]
 800533c:	1d1a      	adds	r2, r3, #4
 800533e:	600a      	str	r2, [r1, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	e9c3 6700 	strd	r6, r7, [r3]
 8005346:	68e3      	ldr	r3, [r4, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60e3      	str	r3, [r4, #12]
 800534c:	e66d      	b.n	800502a <_scanf_float+0x82>
 800534e:	9b04      	ldr	r3, [sp, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0e5      	beq.n	8005320 <_scanf_float+0x378>
 8005354:	9905      	ldr	r1, [sp, #20]
 8005356:	230a      	movs	r3, #10
 8005358:	462a      	mov	r2, r5
 800535a:	3101      	adds	r1, #1
 800535c:	4640      	mov	r0, r8
 800535e:	f000 ff75 	bl	800624c <_strtol_r>
 8005362:	9b04      	ldr	r3, [sp, #16]
 8005364:	9e05      	ldr	r6, [sp, #20]
 8005366:	1ac2      	subs	r2, r0, r3
 8005368:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800536c:	429e      	cmp	r6, r3
 800536e:	bf28      	it	cs
 8005370:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005374:	4912      	ldr	r1, [pc, #72]	; (80053c0 <_scanf_float+0x418>)
 8005376:	4630      	mov	r0, r6
 8005378:	f000 f82c 	bl	80053d4 <siprintf>
 800537c:	e7d0      	b.n	8005320 <_scanf_float+0x378>
 800537e:	9903      	ldr	r1, [sp, #12]
 8005380:	f012 0f04 	tst.w	r2, #4
 8005384:	f103 0204 	add.w	r2, r3, #4
 8005388:	600a      	str	r2, [r1, #0]
 800538a:	d1d9      	bne.n	8005340 <_scanf_float+0x398>
 800538c:	f8d3 8000 	ldr.w	r8, [r3]
 8005390:	ee10 2a10 	vmov	r2, s0
 8005394:	ee10 0a10 	vmov	r0, s0
 8005398:	463b      	mov	r3, r7
 800539a:	4639      	mov	r1, r7
 800539c:	f7fb fbde 	bl	8000b5c <__aeabi_dcmpun>
 80053a0:	b128      	cbz	r0, 80053ae <_scanf_float+0x406>
 80053a2:	4808      	ldr	r0, [pc, #32]	; (80053c4 <_scanf_float+0x41c>)
 80053a4:	f000 f810 	bl	80053c8 <nanf>
 80053a8:	ed88 0a00 	vstr	s0, [r8]
 80053ac:	e7cb      	b.n	8005346 <_scanf_float+0x39e>
 80053ae:	4630      	mov	r0, r6
 80053b0:	4639      	mov	r1, r7
 80053b2:	f7fb fc31 	bl	8000c18 <__aeabi_d2f>
 80053b6:	f8c8 0000 	str.w	r0, [r8]
 80053ba:	e7c4      	b.n	8005346 <_scanf_float+0x39e>
 80053bc:	2500      	movs	r5, #0
 80053be:	e634      	b.n	800502a <_scanf_float+0x82>
 80053c0:	08009e1e 	.word	0x08009e1e
 80053c4:	0800a243 	.word	0x0800a243

080053c8 <nanf>:
 80053c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80053d0 <nanf+0x8>
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	7fc00000 	.word	0x7fc00000

080053d4 <siprintf>:
 80053d4:	b40e      	push	{r1, r2, r3}
 80053d6:	b500      	push	{lr}
 80053d8:	b09c      	sub	sp, #112	; 0x70
 80053da:	ab1d      	add	r3, sp, #116	; 0x74
 80053dc:	9002      	str	r0, [sp, #8]
 80053de:	9006      	str	r0, [sp, #24]
 80053e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053e4:	4809      	ldr	r0, [pc, #36]	; (800540c <siprintf+0x38>)
 80053e6:	9107      	str	r1, [sp, #28]
 80053e8:	9104      	str	r1, [sp, #16]
 80053ea:	4909      	ldr	r1, [pc, #36]	; (8005410 <siprintf+0x3c>)
 80053ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f0:	9105      	str	r1, [sp, #20]
 80053f2:	6800      	ldr	r0, [r0, #0]
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	a902      	add	r1, sp, #8
 80053f8:	f002 ff8a 	bl	8008310 <_svfiprintf_r>
 80053fc:	9b02      	ldr	r3, [sp, #8]
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	b01c      	add	sp, #112	; 0x70
 8005404:	f85d eb04 	ldr.w	lr, [sp], #4
 8005408:	b003      	add	sp, #12
 800540a:	4770      	bx	lr
 800540c:	20000014 	.word	0x20000014
 8005410:	ffff0208 	.word	0xffff0208

08005414 <siscanf>:
 8005414:	b40e      	push	{r1, r2, r3}
 8005416:	b510      	push	{r4, lr}
 8005418:	b09f      	sub	sp, #124	; 0x7c
 800541a:	ac21      	add	r4, sp, #132	; 0x84
 800541c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005420:	f854 2b04 	ldr.w	r2, [r4], #4
 8005424:	9201      	str	r2, [sp, #4]
 8005426:	f8ad 101c 	strh.w	r1, [sp, #28]
 800542a:	9004      	str	r0, [sp, #16]
 800542c:	9008      	str	r0, [sp, #32]
 800542e:	f7fa fee1 	bl	80001f4 <strlen>
 8005432:	4b0c      	ldr	r3, [pc, #48]	; (8005464 <siscanf+0x50>)
 8005434:	9005      	str	r0, [sp, #20]
 8005436:	9009      	str	r0, [sp, #36]	; 0x24
 8005438:	930d      	str	r3, [sp, #52]	; 0x34
 800543a:	480b      	ldr	r0, [pc, #44]	; (8005468 <siscanf+0x54>)
 800543c:	9a01      	ldr	r2, [sp, #4]
 800543e:	6800      	ldr	r0, [r0, #0]
 8005440:	9403      	str	r4, [sp, #12]
 8005442:	2300      	movs	r3, #0
 8005444:	9311      	str	r3, [sp, #68]	; 0x44
 8005446:	9316      	str	r3, [sp, #88]	; 0x58
 8005448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800544c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005450:	a904      	add	r1, sp, #16
 8005452:	4623      	mov	r3, r4
 8005454:	f003 f8b6 	bl	80085c4 <__ssvfiscanf_r>
 8005458:	b01f      	add	sp, #124	; 0x7c
 800545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545e:	b003      	add	sp, #12
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	0800548f 	.word	0x0800548f
 8005468:	20000014 	.word	0x20000014

0800546c <__sread>:
 800546c:	b510      	push	{r4, lr}
 800546e:	460c      	mov	r4, r1
 8005470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005474:	f003 fb70 	bl	8008b58 <_read_r>
 8005478:	2800      	cmp	r0, #0
 800547a:	bfab      	itete	ge
 800547c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800547e:	89a3      	ldrhlt	r3, [r4, #12]
 8005480:	181b      	addge	r3, r3, r0
 8005482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005486:	bfac      	ite	ge
 8005488:	6563      	strge	r3, [r4, #84]	; 0x54
 800548a:	81a3      	strhlt	r3, [r4, #12]
 800548c:	bd10      	pop	{r4, pc}

0800548e <__seofread>:
 800548e:	2000      	movs	r0, #0
 8005490:	4770      	bx	lr

08005492 <__swrite>:
 8005492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	461f      	mov	r7, r3
 8005498:	898b      	ldrh	r3, [r1, #12]
 800549a:	05db      	lsls	r3, r3, #23
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	4616      	mov	r6, r2
 80054a2:	d505      	bpl.n	80054b0 <__swrite+0x1e>
 80054a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a8:	2302      	movs	r3, #2
 80054aa:	2200      	movs	r2, #0
 80054ac:	f002 f8e2 	bl	8007674 <_lseek_r>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	4632      	mov	r2, r6
 80054be:	463b      	mov	r3, r7
 80054c0:	4628      	mov	r0, r5
 80054c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	f000 bec3 	b.w	8006250 <_write_r>

080054ca <__sseek>:
 80054ca:	b510      	push	{r4, lr}
 80054cc:	460c      	mov	r4, r1
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f002 f8cf 	bl	8007674 <_lseek_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	bf15      	itete	ne
 80054dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80054de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054e6:	81a3      	strheq	r3, [r4, #12]
 80054e8:	bf18      	it	ne
 80054ea:	81a3      	strhne	r3, [r4, #12]
 80054ec:	bd10      	pop	{r4, pc}

080054ee <__sclose>:
 80054ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f2:	f000 bebf 	b.w	8006274 <_close_r>

080054f6 <sulp>:
 80054f6:	b570      	push	{r4, r5, r6, lr}
 80054f8:	4604      	mov	r4, r0
 80054fa:	460d      	mov	r5, r1
 80054fc:	ec45 4b10 	vmov	d0, r4, r5
 8005500:	4616      	mov	r6, r2
 8005502:	f002 fc63 	bl	8007dcc <__ulp>
 8005506:	ec51 0b10 	vmov	r0, r1, d0
 800550a:	b17e      	cbz	r6, 800552c <sulp+0x36>
 800550c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005510:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005514:	2b00      	cmp	r3, #0
 8005516:	dd09      	ble.n	800552c <sulp+0x36>
 8005518:	051b      	lsls	r3, r3, #20
 800551a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800551e:	2400      	movs	r4, #0
 8005520:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005524:	4622      	mov	r2, r4
 8005526:	462b      	mov	r3, r5
 8005528:	f7fb f87e 	bl	8000628 <__aeabi_dmul>
 800552c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005530 <_strtod_l>:
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	ed2d 8b02 	vpush	{d8}
 8005538:	b09d      	sub	sp, #116	; 0x74
 800553a:	461f      	mov	r7, r3
 800553c:	2300      	movs	r3, #0
 800553e:	9318      	str	r3, [sp, #96]	; 0x60
 8005540:	4ba2      	ldr	r3, [pc, #648]	; (80057cc <_strtod_l+0x29c>)
 8005542:	9213      	str	r2, [sp, #76]	; 0x4c
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	9305      	str	r3, [sp, #20]
 8005548:	4604      	mov	r4, r0
 800554a:	4618      	mov	r0, r3
 800554c:	4688      	mov	r8, r1
 800554e:	f7fa fe51 	bl	80001f4 <strlen>
 8005552:	f04f 0a00 	mov.w	sl, #0
 8005556:	4605      	mov	r5, r0
 8005558:	f04f 0b00 	mov.w	fp, #0
 800555c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	2a2b      	cmp	r2, #43	; 0x2b
 8005566:	d04e      	beq.n	8005606 <_strtod_l+0xd6>
 8005568:	d83b      	bhi.n	80055e2 <_strtod_l+0xb2>
 800556a:	2a0d      	cmp	r2, #13
 800556c:	d834      	bhi.n	80055d8 <_strtod_l+0xa8>
 800556e:	2a08      	cmp	r2, #8
 8005570:	d834      	bhi.n	80055dc <_strtod_l+0xac>
 8005572:	2a00      	cmp	r2, #0
 8005574:	d03e      	beq.n	80055f4 <_strtod_l+0xc4>
 8005576:	2300      	movs	r3, #0
 8005578:	930a      	str	r3, [sp, #40]	; 0x28
 800557a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800557c:	7833      	ldrb	r3, [r6, #0]
 800557e:	2b30      	cmp	r3, #48	; 0x30
 8005580:	f040 80b0 	bne.w	80056e4 <_strtod_l+0x1b4>
 8005584:	7873      	ldrb	r3, [r6, #1]
 8005586:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800558a:	2b58      	cmp	r3, #88	; 0x58
 800558c:	d168      	bne.n	8005660 <_strtod_l+0x130>
 800558e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	ab18      	add	r3, sp, #96	; 0x60
 8005594:	9702      	str	r7, [sp, #8]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	4a8d      	ldr	r2, [pc, #564]	; (80057d0 <_strtod_l+0x2a0>)
 800559a:	ab19      	add	r3, sp, #100	; 0x64
 800559c:	a917      	add	r1, sp, #92	; 0x5c
 800559e:	4620      	mov	r0, r4
 80055a0:	f001 fd5c 	bl	800705c <__gethex>
 80055a4:	f010 0707 	ands.w	r7, r0, #7
 80055a8:	4605      	mov	r5, r0
 80055aa:	d005      	beq.n	80055b8 <_strtod_l+0x88>
 80055ac:	2f06      	cmp	r7, #6
 80055ae:	d12c      	bne.n	800560a <_strtod_l+0xda>
 80055b0:	3601      	adds	r6, #1
 80055b2:	2300      	movs	r3, #0
 80055b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80055b6:	930a      	str	r3, [sp, #40]	; 0x28
 80055b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f040 8590 	bne.w	80060e0 <_strtod_l+0xbb0>
 80055c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c2:	b1eb      	cbz	r3, 8005600 <_strtod_l+0xd0>
 80055c4:	4652      	mov	r2, sl
 80055c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055ca:	ec43 2b10 	vmov	d0, r2, r3
 80055ce:	b01d      	add	sp, #116	; 0x74
 80055d0:	ecbd 8b02 	vpop	{d8}
 80055d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d8:	2a20      	cmp	r2, #32
 80055da:	d1cc      	bne.n	8005576 <_strtod_l+0x46>
 80055dc:	3301      	adds	r3, #1
 80055de:	9317      	str	r3, [sp, #92]	; 0x5c
 80055e0:	e7be      	b.n	8005560 <_strtod_l+0x30>
 80055e2:	2a2d      	cmp	r2, #45	; 0x2d
 80055e4:	d1c7      	bne.n	8005576 <_strtod_l+0x46>
 80055e6:	2201      	movs	r2, #1
 80055e8:	920a      	str	r2, [sp, #40]	; 0x28
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1c2      	bne.n	800557a <_strtod_l+0x4a>
 80055f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f040 856e 	bne.w	80060dc <_strtod_l+0xbac>
 8005600:	4652      	mov	r2, sl
 8005602:	465b      	mov	r3, fp
 8005604:	e7e1      	b.n	80055ca <_strtod_l+0x9a>
 8005606:	2200      	movs	r2, #0
 8005608:	e7ee      	b.n	80055e8 <_strtod_l+0xb8>
 800560a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800560c:	b13a      	cbz	r2, 800561e <_strtod_l+0xee>
 800560e:	2135      	movs	r1, #53	; 0x35
 8005610:	a81a      	add	r0, sp, #104	; 0x68
 8005612:	f002 fce6 	bl	8007fe2 <__copybits>
 8005616:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005618:	4620      	mov	r0, r4
 800561a:	f002 f8a5 	bl	8007768 <_Bfree>
 800561e:	3f01      	subs	r7, #1
 8005620:	2f04      	cmp	r7, #4
 8005622:	d806      	bhi.n	8005632 <_strtod_l+0x102>
 8005624:	e8df f007 	tbb	[pc, r7]
 8005628:	1714030a 	.word	0x1714030a
 800562c:	0a          	.byte	0x0a
 800562d:	00          	.byte	0x00
 800562e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005632:	0728      	lsls	r0, r5, #28
 8005634:	d5c0      	bpl.n	80055b8 <_strtod_l+0x88>
 8005636:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800563a:	e7bd      	b.n	80055b8 <_strtod_l+0x88>
 800563c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005640:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005642:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005646:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800564a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800564e:	e7f0      	b.n	8005632 <_strtod_l+0x102>
 8005650:	f8df b180 	ldr.w	fp, [pc, #384]	; 80057d4 <_strtod_l+0x2a4>
 8005654:	e7ed      	b.n	8005632 <_strtod_l+0x102>
 8005656:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800565a:	f04f 3aff 	mov.w	sl, #4294967295
 800565e:	e7e8      	b.n	8005632 <_strtod_l+0x102>
 8005660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	9217      	str	r2, [sp, #92]	; 0x5c
 8005666:	785b      	ldrb	r3, [r3, #1]
 8005668:	2b30      	cmp	r3, #48	; 0x30
 800566a:	d0f9      	beq.n	8005660 <_strtod_l+0x130>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0a3      	beq.n	80055b8 <_strtod_l+0x88>
 8005670:	2301      	movs	r3, #1
 8005672:	f04f 0900 	mov.w	r9, #0
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005680:	464f      	mov	r7, r9
 8005682:	220a      	movs	r2, #10
 8005684:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005686:	7806      	ldrb	r6, [r0, #0]
 8005688:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800568c:	b2d9      	uxtb	r1, r3
 800568e:	2909      	cmp	r1, #9
 8005690:	d92a      	bls.n	80056e8 <_strtod_l+0x1b8>
 8005692:	9905      	ldr	r1, [sp, #20]
 8005694:	462a      	mov	r2, r5
 8005696:	f003 fac3 	bl	8008c20 <strncmp>
 800569a:	b398      	cbz	r0, 8005704 <_strtod_l+0x1d4>
 800569c:	2000      	movs	r0, #0
 800569e:	4632      	mov	r2, r6
 80056a0:	463d      	mov	r5, r7
 80056a2:	9005      	str	r0, [sp, #20]
 80056a4:	4603      	mov	r3, r0
 80056a6:	2a65      	cmp	r2, #101	; 0x65
 80056a8:	d001      	beq.n	80056ae <_strtod_l+0x17e>
 80056aa:	2a45      	cmp	r2, #69	; 0x45
 80056ac:	d118      	bne.n	80056e0 <_strtod_l+0x1b0>
 80056ae:	b91d      	cbnz	r5, 80056b8 <_strtod_l+0x188>
 80056b0:	9a04      	ldr	r2, [sp, #16]
 80056b2:	4302      	orrs	r2, r0
 80056b4:	d09e      	beq.n	80055f4 <_strtod_l+0xc4>
 80056b6:	2500      	movs	r5, #0
 80056b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80056bc:	f108 0201 	add.w	r2, r8, #1
 80056c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80056c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80056c6:	2a2b      	cmp	r2, #43	; 0x2b
 80056c8:	d075      	beq.n	80057b6 <_strtod_l+0x286>
 80056ca:	2a2d      	cmp	r2, #45	; 0x2d
 80056cc:	d07b      	beq.n	80057c6 <_strtod_l+0x296>
 80056ce:	f04f 0c00 	mov.w	ip, #0
 80056d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80056d6:	2909      	cmp	r1, #9
 80056d8:	f240 8082 	bls.w	80057e0 <_strtod_l+0x2b0>
 80056dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80056e0:	2600      	movs	r6, #0
 80056e2:	e09d      	b.n	8005820 <_strtod_l+0x2f0>
 80056e4:	2300      	movs	r3, #0
 80056e6:	e7c4      	b.n	8005672 <_strtod_l+0x142>
 80056e8:	2f08      	cmp	r7, #8
 80056ea:	bfd8      	it	le
 80056ec:	9907      	ldrle	r1, [sp, #28]
 80056ee:	f100 0001 	add.w	r0, r0, #1
 80056f2:	bfda      	itte	le
 80056f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80056f8:	9307      	strle	r3, [sp, #28]
 80056fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80056fe:	3701      	adds	r7, #1
 8005700:	9017      	str	r0, [sp, #92]	; 0x5c
 8005702:	e7bf      	b.n	8005684 <_strtod_l+0x154>
 8005704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005706:	195a      	adds	r2, r3, r5
 8005708:	9217      	str	r2, [sp, #92]	; 0x5c
 800570a:	5d5a      	ldrb	r2, [r3, r5]
 800570c:	2f00      	cmp	r7, #0
 800570e:	d037      	beq.n	8005780 <_strtod_l+0x250>
 8005710:	9005      	str	r0, [sp, #20]
 8005712:	463d      	mov	r5, r7
 8005714:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005718:	2b09      	cmp	r3, #9
 800571a:	d912      	bls.n	8005742 <_strtod_l+0x212>
 800571c:	2301      	movs	r3, #1
 800571e:	e7c2      	b.n	80056a6 <_strtod_l+0x176>
 8005720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	9217      	str	r2, [sp, #92]	; 0x5c
 8005726:	785a      	ldrb	r2, [r3, #1]
 8005728:	3001      	adds	r0, #1
 800572a:	2a30      	cmp	r2, #48	; 0x30
 800572c:	d0f8      	beq.n	8005720 <_strtod_l+0x1f0>
 800572e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005732:	2b08      	cmp	r3, #8
 8005734:	f200 84d9 	bhi.w	80060ea <_strtod_l+0xbba>
 8005738:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800573a:	9005      	str	r0, [sp, #20]
 800573c:	2000      	movs	r0, #0
 800573e:	9308      	str	r3, [sp, #32]
 8005740:	4605      	mov	r5, r0
 8005742:	3a30      	subs	r2, #48	; 0x30
 8005744:	f100 0301 	add.w	r3, r0, #1
 8005748:	d014      	beq.n	8005774 <_strtod_l+0x244>
 800574a:	9905      	ldr	r1, [sp, #20]
 800574c:	4419      	add	r1, r3
 800574e:	9105      	str	r1, [sp, #20]
 8005750:	462b      	mov	r3, r5
 8005752:	eb00 0e05 	add.w	lr, r0, r5
 8005756:	210a      	movs	r1, #10
 8005758:	4573      	cmp	r3, lr
 800575a:	d113      	bne.n	8005784 <_strtod_l+0x254>
 800575c:	182b      	adds	r3, r5, r0
 800575e:	2b08      	cmp	r3, #8
 8005760:	f105 0501 	add.w	r5, r5, #1
 8005764:	4405      	add	r5, r0
 8005766:	dc1c      	bgt.n	80057a2 <_strtod_l+0x272>
 8005768:	9907      	ldr	r1, [sp, #28]
 800576a:	230a      	movs	r3, #10
 800576c:	fb03 2301 	mla	r3, r3, r1, r2
 8005770:	9307      	str	r3, [sp, #28]
 8005772:	2300      	movs	r3, #0
 8005774:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005776:	1c51      	adds	r1, r2, #1
 8005778:	9117      	str	r1, [sp, #92]	; 0x5c
 800577a:	7852      	ldrb	r2, [r2, #1]
 800577c:	4618      	mov	r0, r3
 800577e:	e7c9      	b.n	8005714 <_strtod_l+0x1e4>
 8005780:	4638      	mov	r0, r7
 8005782:	e7d2      	b.n	800572a <_strtod_l+0x1fa>
 8005784:	2b08      	cmp	r3, #8
 8005786:	dc04      	bgt.n	8005792 <_strtod_l+0x262>
 8005788:	9e07      	ldr	r6, [sp, #28]
 800578a:	434e      	muls	r6, r1
 800578c:	9607      	str	r6, [sp, #28]
 800578e:	3301      	adds	r3, #1
 8005790:	e7e2      	b.n	8005758 <_strtod_l+0x228>
 8005792:	f103 0c01 	add.w	ip, r3, #1
 8005796:	f1bc 0f10 	cmp.w	ip, #16
 800579a:	bfd8      	it	le
 800579c:	fb01 f909 	mulle.w	r9, r1, r9
 80057a0:	e7f5      	b.n	800578e <_strtod_l+0x25e>
 80057a2:	2d10      	cmp	r5, #16
 80057a4:	bfdc      	itt	le
 80057a6:	230a      	movle	r3, #10
 80057a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80057ac:	e7e1      	b.n	8005772 <_strtod_l+0x242>
 80057ae:	2300      	movs	r3, #0
 80057b0:	9305      	str	r3, [sp, #20]
 80057b2:	2301      	movs	r3, #1
 80057b4:	e77c      	b.n	80056b0 <_strtod_l+0x180>
 80057b6:	f04f 0c00 	mov.w	ip, #0
 80057ba:	f108 0202 	add.w	r2, r8, #2
 80057be:	9217      	str	r2, [sp, #92]	; 0x5c
 80057c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80057c4:	e785      	b.n	80056d2 <_strtod_l+0x1a2>
 80057c6:	f04f 0c01 	mov.w	ip, #1
 80057ca:	e7f6      	b.n	80057ba <_strtod_l+0x28a>
 80057cc:	0800a070 	.word	0x0800a070
 80057d0:	08009e24 	.word	0x08009e24
 80057d4:	7ff00000 	.word	0x7ff00000
 80057d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057da:	1c51      	adds	r1, r2, #1
 80057dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80057de:	7852      	ldrb	r2, [r2, #1]
 80057e0:	2a30      	cmp	r2, #48	; 0x30
 80057e2:	d0f9      	beq.n	80057d8 <_strtod_l+0x2a8>
 80057e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80057e8:	2908      	cmp	r1, #8
 80057ea:	f63f af79 	bhi.w	80056e0 <_strtod_l+0x1b0>
 80057ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80057f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057f4:	9206      	str	r2, [sp, #24]
 80057f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057f8:	1c51      	adds	r1, r2, #1
 80057fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80057fc:	7852      	ldrb	r2, [r2, #1]
 80057fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005802:	2e09      	cmp	r6, #9
 8005804:	d937      	bls.n	8005876 <_strtod_l+0x346>
 8005806:	9e06      	ldr	r6, [sp, #24]
 8005808:	1b89      	subs	r1, r1, r6
 800580a:	2908      	cmp	r1, #8
 800580c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005810:	dc02      	bgt.n	8005818 <_strtod_l+0x2e8>
 8005812:	4576      	cmp	r6, lr
 8005814:	bfa8      	it	ge
 8005816:	4676      	movge	r6, lr
 8005818:	f1bc 0f00 	cmp.w	ip, #0
 800581c:	d000      	beq.n	8005820 <_strtod_l+0x2f0>
 800581e:	4276      	negs	r6, r6
 8005820:	2d00      	cmp	r5, #0
 8005822:	d14d      	bne.n	80058c0 <_strtod_l+0x390>
 8005824:	9904      	ldr	r1, [sp, #16]
 8005826:	4301      	orrs	r1, r0
 8005828:	f47f aec6 	bne.w	80055b8 <_strtod_l+0x88>
 800582c:	2b00      	cmp	r3, #0
 800582e:	f47f aee1 	bne.w	80055f4 <_strtod_l+0xc4>
 8005832:	2a69      	cmp	r2, #105	; 0x69
 8005834:	d027      	beq.n	8005886 <_strtod_l+0x356>
 8005836:	dc24      	bgt.n	8005882 <_strtod_l+0x352>
 8005838:	2a49      	cmp	r2, #73	; 0x49
 800583a:	d024      	beq.n	8005886 <_strtod_l+0x356>
 800583c:	2a4e      	cmp	r2, #78	; 0x4e
 800583e:	f47f aed9 	bne.w	80055f4 <_strtod_l+0xc4>
 8005842:	499f      	ldr	r1, [pc, #636]	; (8005ac0 <_strtod_l+0x590>)
 8005844:	a817      	add	r0, sp, #92	; 0x5c
 8005846:	f001 fe61 	bl	800750c <__match>
 800584a:	2800      	cmp	r0, #0
 800584c:	f43f aed2 	beq.w	80055f4 <_strtod_l+0xc4>
 8005850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b28      	cmp	r3, #40	; 0x28
 8005856:	d12d      	bne.n	80058b4 <_strtod_l+0x384>
 8005858:	499a      	ldr	r1, [pc, #616]	; (8005ac4 <_strtod_l+0x594>)
 800585a:	aa1a      	add	r2, sp, #104	; 0x68
 800585c:	a817      	add	r0, sp, #92	; 0x5c
 800585e:	f001 fe69 	bl	8007534 <__hexnan>
 8005862:	2805      	cmp	r0, #5
 8005864:	d126      	bne.n	80058b4 <_strtod_l+0x384>
 8005866:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005868:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800586c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005870:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005874:	e6a0      	b.n	80055b8 <_strtod_l+0x88>
 8005876:	210a      	movs	r1, #10
 8005878:	fb01 2e0e 	mla	lr, r1, lr, r2
 800587c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005880:	e7b9      	b.n	80057f6 <_strtod_l+0x2c6>
 8005882:	2a6e      	cmp	r2, #110	; 0x6e
 8005884:	e7db      	b.n	800583e <_strtod_l+0x30e>
 8005886:	4990      	ldr	r1, [pc, #576]	; (8005ac8 <_strtod_l+0x598>)
 8005888:	a817      	add	r0, sp, #92	; 0x5c
 800588a:	f001 fe3f 	bl	800750c <__match>
 800588e:	2800      	cmp	r0, #0
 8005890:	f43f aeb0 	beq.w	80055f4 <_strtod_l+0xc4>
 8005894:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005896:	498d      	ldr	r1, [pc, #564]	; (8005acc <_strtod_l+0x59c>)
 8005898:	3b01      	subs	r3, #1
 800589a:	a817      	add	r0, sp, #92	; 0x5c
 800589c:	9317      	str	r3, [sp, #92]	; 0x5c
 800589e:	f001 fe35 	bl	800750c <__match>
 80058a2:	b910      	cbnz	r0, 80058aa <_strtod_l+0x37a>
 80058a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058a6:	3301      	adds	r3, #1
 80058a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80058aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005adc <_strtod_l+0x5ac>
 80058ae:	f04f 0a00 	mov.w	sl, #0
 80058b2:	e681      	b.n	80055b8 <_strtod_l+0x88>
 80058b4:	4886      	ldr	r0, [pc, #536]	; (8005ad0 <_strtod_l+0x5a0>)
 80058b6:	f003 f963 	bl	8008b80 <nan>
 80058ba:	ec5b ab10 	vmov	sl, fp, d0
 80058be:	e67b      	b.n	80055b8 <_strtod_l+0x88>
 80058c0:	9b05      	ldr	r3, [sp, #20]
 80058c2:	9807      	ldr	r0, [sp, #28]
 80058c4:	1af3      	subs	r3, r6, r3
 80058c6:	2f00      	cmp	r7, #0
 80058c8:	bf08      	it	eq
 80058ca:	462f      	moveq	r7, r5
 80058cc:	2d10      	cmp	r5, #16
 80058ce:	9306      	str	r3, [sp, #24]
 80058d0:	46a8      	mov	r8, r5
 80058d2:	bfa8      	it	ge
 80058d4:	f04f 0810 	movge.w	r8, #16
 80058d8:	f7fa fe2c 	bl	8000534 <__aeabi_ui2d>
 80058dc:	2d09      	cmp	r5, #9
 80058de:	4682      	mov	sl, r0
 80058e0:	468b      	mov	fp, r1
 80058e2:	dd13      	ble.n	800590c <_strtod_l+0x3dc>
 80058e4:	4b7b      	ldr	r3, [pc, #492]	; (8005ad4 <_strtod_l+0x5a4>)
 80058e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80058ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80058ee:	f7fa fe9b 	bl	8000628 <__aeabi_dmul>
 80058f2:	4682      	mov	sl, r0
 80058f4:	4648      	mov	r0, r9
 80058f6:	468b      	mov	fp, r1
 80058f8:	f7fa fe1c 	bl	8000534 <__aeabi_ui2d>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4650      	mov	r0, sl
 8005902:	4659      	mov	r1, fp
 8005904:	f7fa fcda 	bl	80002bc <__adddf3>
 8005908:	4682      	mov	sl, r0
 800590a:	468b      	mov	fp, r1
 800590c:	2d0f      	cmp	r5, #15
 800590e:	dc38      	bgt.n	8005982 <_strtod_l+0x452>
 8005910:	9b06      	ldr	r3, [sp, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f43f ae50 	beq.w	80055b8 <_strtod_l+0x88>
 8005918:	dd24      	ble.n	8005964 <_strtod_l+0x434>
 800591a:	2b16      	cmp	r3, #22
 800591c:	dc0b      	bgt.n	8005936 <_strtod_l+0x406>
 800591e:	496d      	ldr	r1, [pc, #436]	; (8005ad4 <_strtod_l+0x5a4>)
 8005920:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005928:	4652      	mov	r2, sl
 800592a:	465b      	mov	r3, fp
 800592c:	f7fa fe7c 	bl	8000628 <__aeabi_dmul>
 8005930:	4682      	mov	sl, r0
 8005932:	468b      	mov	fp, r1
 8005934:	e640      	b.n	80055b8 <_strtod_l+0x88>
 8005936:	9a06      	ldr	r2, [sp, #24]
 8005938:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800593c:	4293      	cmp	r3, r2
 800593e:	db20      	blt.n	8005982 <_strtod_l+0x452>
 8005940:	4c64      	ldr	r4, [pc, #400]	; (8005ad4 <_strtod_l+0x5a4>)
 8005942:	f1c5 050f 	rsb	r5, r5, #15
 8005946:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800594a:	4652      	mov	r2, sl
 800594c:	465b      	mov	r3, fp
 800594e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005952:	f7fa fe69 	bl	8000628 <__aeabi_dmul>
 8005956:	9b06      	ldr	r3, [sp, #24]
 8005958:	1b5d      	subs	r5, r3, r5
 800595a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800595e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005962:	e7e3      	b.n	800592c <_strtod_l+0x3fc>
 8005964:	9b06      	ldr	r3, [sp, #24]
 8005966:	3316      	adds	r3, #22
 8005968:	db0b      	blt.n	8005982 <_strtod_l+0x452>
 800596a:	9b05      	ldr	r3, [sp, #20]
 800596c:	1b9e      	subs	r6, r3, r6
 800596e:	4b59      	ldr	r3, [pc, #356]	; (8005ad4 <_strtod_l+0x5a4>)
 8005970:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005974:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005978:	4650      	mov	r0, sl
 800597a:	4659      	mov	r1, fp
 800597c:	f7fa ff7e 	bl	800087c <__aeabi_ddiv>
 8005980:	e7d6      	b.n	8005930 <_strtod_l+0x400>
 8005982:	9b06      	ldr	r3, [sp, #24]
 8005984:	eba5 0808 	sub.w	r8, r5, r8
 8005988:	4498      	add	r8, r3
 800598a:	f1b8 0f00 	cmp.w	r8, #0
 800598e:	dd74      	ble.n	8005a7a <_strtod_l+0x54a>
 8005990:	f018 030f 	ands.w	r3, r8, #15
 8005994:	d00a      	beq.n	80059ac <_strtod_l+0x47c>
 8005996:	494f      	ldr	r1, [pc, #316]	; (8005ad4 <_strtod_l+0x5a4>)
 8005998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800599c:	4652      	mov	r2, sl
 800599e:	465b      	mov	r3, fp
 80059a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059a4:	f7fa fe40 	bl	8000628 <__aeabi_dmul>
 80059a8:	4682      	mov	sl, r0
 80059aa:	468b      	mov	fp, r1
 80059ac:	f038 080f 	bics.w	r8, r8, #15
 80059b0:	d04f      	beq.n	8005a52 <_strtod_l+0x522>
 80059b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80059b6:	dd22      	ble.n	80059fe <_strtod_l+0x4ce>
 80059b8:	2500      	movs	r5, #0
 80059ba:	462e      	mov	r6, r5
 80059bc:	9507      	str	r5, [sp, #28]
 80059be:	9505      	str	r5, [sp, #20]
 80059c0:	2322      	movs	r3, #34	; 0x22
 80059c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005adc <_strtod_l+0x5ac>
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	f04f 0a00 	mov.w	sl, #0
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f43f adf2 	beq.w	80055b8 <_strtod_l+0x88>
 80059d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059d6:	4620      	mov	r0, r4
 80059d8:	f001 fec6 	bl	8007768 <_Bfree>
 80059dc:	9905      	ldr	r1, [sp, #20]
 80059de:	4620      	mov	r0, r4
 80059e0:	f001 fec2 	bl	8007768 <_Bfree>
 80059e4:	4631      	mov	r1, r6
 80059e6:	4620      	mov	r0, r4
 80059e8:	f001 febe 	bl	8007768 <_Bfree>
 80059ec:	9907      	ldr	r1, [sp, #28]
 80059ee:	4620      	mov	r0, r4
 80059f0:	f001 feba 	bl	8007768 <_Bfree>
 80059f4:	4629      	mov	r1, r5
 80059f6:	4620      	mov	r0, r4
 80059f8:	f001 feb6 	bl	8007768 <_Bfree>
 80059fc:	e5dc      	b.n	80055b8 <_strtod_l+0x88>
 80059fe:	4b36      	ldr	r3, [pc, #216]	; (8005ad8 <_strtod_l+0x5a8>)
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	2300      	movs	r3, #0
 8005a04:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005a08:	4650      	mov	r0, sl
 8005a0a:	4659      	mov	r1, fp
 8005a0c:	4699      	mov	r9, r3
 8005a0e:	f1b8 0f01 	cmp.w	r8, #1
 8005a12:	dc21      	bgt.n	8005a58 <_strtod_l+0x528>
 8005a14:	b10b      	cbz	r3, 8005a1a <_strtod_l+0x4ea>
 8005a16:	4682      	mov	sl, r0
 8005a18:	468b      	mov	fp, r1
 8005a1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ad8 <_strtod_l+0x5a8>)
 8005a1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005a20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005a24:	4652      	mov	r2, sl
 8005a26:	465b      	mov	r3, fp
 8005a28:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005a2c:	f7fa fdfc 	bl	8000628 <__aeabi_dmul>
 8005a30:	4b2a      	ldr	r3, [pc, #168]	; (8005adc <_strtod_l+0x5ac>)
 8005a32:	460a      	mov	r2, r1
 8005a34:	400b      	ands	r3, r1
 8005a36:	492a      	ldr	r1, [pc, #168]	; (8005ae0 <_strtod_l+0x5b0>)
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	4682      	mov	sl, r0
 8005a3c:	d8bc      	bhi.n	80059b8 <_strtod_l+0x488>
 8005a3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005a42:	428b      	cmp	r3, r1
 8005a44:	bf86      	itte	hi
 8005a46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005ae4 <_strtod_l+0x5b4>
 8005a4a:	f04f 3aff 	movhi.w	sl, #4294967295
 8005a4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005a52:	2300      	movs	r3, #0
 8005a54:	9304      	str	r3, [sp, #16]
 8005a56:	e084      	b.n	8005b62 <_strtod_l+0x632>
 8005a58:	f018 0f01 	tst.w	r8, #1
 8005a5c:	d005      	beq.n	8005a6a <_strtod_l+0x53a>
 8005a5e:	9b04      	ldr	r3, [sp, #16]
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f7fa fde0 	bl	8000628 <__aeabi_dmul>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	9a04      	ldr	r2, [sp, #16]
 8005a6c:	3208      	adds	r2, #8
 8005a6e:	f109 0901 	add.w	r9, r9, #1
 8005a72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a76:	9204      	str	r2, [sp, #16]
 8005a78:	e7c9      	b.n	8005a0e <_strtod_l+0x4de>
 8005a7a:	d0ea      	beq.n	8005a52 <_strtod_l+0x522>
 8005a7c:	f1c8 0800 	rsb	r8, r8, #0
 8005a80:	f018 020f 	ands.w	r2, r8, #15
 8005a84:	d00a      	beq.n	8005a9c <_strtod_l+0x56c>
 8005a86:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <_strtod_l+0x5a4>)
 8005a88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a8c:	4650      	mov	r0, sl
 8005a8e:	4659      	mov	r1, fp
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f7fa fef2 	bl	800087c <__aeabi_ddiv>
 8005a98:	4682      	mov	sl, r0
 8005a9a:	468b      	mov	fp, r1
 8005a9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005aa0:	d0d7      	beq.n	8005a52 <_strtod_l+0x522>
 8005aa2:	f1b8 0f1f 	cmp.w	r8, #31
 8005aa6:	dd1f      	ble.n	8005ae8 <_strtod_l+0x5b8>
 8005aa8:	2500      	movs	r5, #0
 8005aaa:	462e      	mov	r6, r5
 8005aac:	9507      	str	r5, [sp, #28]
 8005aae:	9505      	str	r5, [sp, #20]
 8005ab0:	2322      	movs	r3, #34	; 0x22
 8005ab2:	f04f 0a00 	mov.w	sl, #0
 8005ab6:	f04f 0b00 	mov.w	fp, #0
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	e786      	b.n	80059cc <_strtod_l+0x49c>
 8005abe:	bf00      	nop
 8005ac0:	08009df9 	.word	0x08009df9
 8005ac4:	08009e38 	.word	0x08009e38
 8005ac8:	08009df1 	.word	0x08009df1
 8005acc:	08009f7c 	.word	0x08009f7c
 8005ad0:	0800a243 	.word	0x0800a243
 8005ad4:	0800a108 	.word	0x0800a108
 8005ad8:	0800a0e0 	.word	0x0800a0e0
 8005adc:	7ff00000 	.word	0x7ff00000
 8005ae0:	7ca00000 	.word	0x7ca00000
 8005ae4:	7fefffff 	.word	0x7fefffff
 8005ae8:	f018 0310 	ands.w	r3, r8, #16
 8005aec:	bf18      	it	ne
 8005aee:	236a      	movne	r3, #106	; 0x6a
 8005af0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005ea0 <_strtod_l+0x970>
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	4650      	mov	r0, sl
 8005af8:	4659      	mov	r1, fp
 8005afa:	2300      	movs	r3, #0
 8005afc:	f018 0f01 	tst.w	r8, #1
 8005b00:	d004      	beq.n	8005b0c <_strtod_l+0x5dc>
 8005b02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b06:	f7fa fd8f 	bl	8000628 <__aeabi_dmul>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005b10:	f109 0908 	add.w	r9, r9, #8
 8005b14:	d1f2      	bne.n	8005afc <_strtod_l+0x5cc>
 8005b16:	b10b      	cbz	r3, 8005b1c <_strtod_l+0x5ec>
 8005b18:	4682      	mov	sl, r0
 8005b1a:	468b      	mov	fp, r1
 8005b1c:	9b04      	ldr	r3, [sp, #16]
 8005b1e:	b1c3      	cbz	r3, 8005b52 <_strtod_l+0x622>
 8005b20:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005b24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	dd11      	ble.n	8005b52 <_strtod_l+0x622>
 8005b2e:	2b1f      	cmp	r3, #31
 8005b30:	f340 8124 	ble.w	8005d7c <_strtod_l+0x84c>
 8005b34:	2b34      	cmp	r3, #52	; 0x34
 8005b36:	bfde      	ittt	le
 8005b38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005b3c:	f04f 33ff 	movle.w	r3, #4294967295
 8005b40:	fa03 f202 	lslle.w	r2, r3, r2
 8005b44:	f04f 0a00 	mov.w	sl, #0
 8005b48:	bfcc      	ite	gt
 8005b4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005b4e:	ea02 0b01 	andle.w	fp, r2, r1
 8005b52:	2200      	movs	r2, #0
 8005b54:	2300      	movs	r3, #0
 8005b56:	4650      	mov	r0, sl
 8005b58:	4659      	mov	r1, fp
 8005b5a:	f7fa ffcd 	bl	8000af8 <__aeabi_dcmpeq>
 8005b5e:	2800      	cmp	r0, #0
 8005b60:	d1a2      	bne.n	8005aa8 <_strtod_l+0x578>
 8005b62:	9b07      	ldr	r3, [sp, #28]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	9908      	ldr	r1, [sp, #32]
 8005b68:	462b      	mov	r3, r5
 8005b6a:	463a      	mov	r2, r7
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f001 fe63 	bl	8007838 <__s2b>
 8005b72:	9007      	str	r0, [sp, #28]
 8005b74:	2800      	cmp	r0, #0
 8005b76:	f43f af1f 	beq.w	80059b8 <_strtod_l+0x488>
 8005b7a:	9b05      	ldr	r3, [sp, #20]
 8005b7c:	1b9e      	subs	r6, r3, r6
 8005b7e:	9b06      	ldr	r3, [sp, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfb4      	ite	lt
 8005b84:	4633      	movlt	r3, r6
 8005b86:	2300      	movge	r3, #0
 8005b88:	930c      	str	r3, [sp, #48]	; 0x30
 8005b8a:	9b06      	ldr	r3, [sp, #24]
 8005b8c:	2500      	movs	r5, #0
 8005b8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005b92:	9312      	str	r3, [sp, #72]	; 0x48
 8005b94:	462e      	mov	r6, r5
 8005b96:	9b07      	ldr	r3, [sp, #28]
 8005b98:	4620      	mov	r0, r4
 8005b9a:	6859      	ldr	r1, [r3, #4]
 8005b9c:	f001 fda4 	bl	80076e8 <_Balloc>
 8005ba0:	9005      	str	r0, [sp, #20]
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f43f af0c 	beq.w	80059c0 <_strtod_l+0x490>
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	3202      	adds	r2, #2
 8005bae:	f103 010c 	add.w	r1, r3, #12
 8005bb2:	0092      	lsls	r2, r2, #2
 8005bb4:	300c      	adds	r0, #12
 8005bb6:	f001 fd89 	bl	80076cc <memcpy>
 8005bba:	ec4b ab10 	vmov	d0, sl, fp
 8005bbe:	aa1a      	add	r2, sp, #104	; 0x68
 8005bc0:	a919      	add	r1, sp, #100	; 0x64
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	f002 f97e 	bl	8007ec4 <__d2b>
 8005bc8:	ec4b ab18 	vmov	d8, sl, fp
 8005bcc:	9018      	str	r0, [sp, #96]	; 0x60
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f43f aef6 	beq.w	80059c0 <_strtod_l+0x490>
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f001 fec8 	bl	800796c <__i2b>
 8005bdc:	4606      	mov	r6, r0
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f43f aeee 	beq.w	80059c0 <_strtod_l+0x490>
 8005be4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005be6:	9904      	ldr	r1, [sp, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bfab      	itete	ge
 8005bec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005bee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005bf0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005bf2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005bf6:	bfac      	ite	ge
 8005bf8:	eb03 0902 	addge.w	r9, r3, r2
 8005bfc:	1ad7      	sublt	r7, r2, r3
 8005bfe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c00:	eba3 0801 	sub.w	r8, r3, r1
 8005c04:	4490      	add	r8, r2
 8005c06:	4ba1      	ldr	r3, [pc, #644]	; (8005e8c <_strtod_l+0x95c>)
 8005c08:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c0c:	4598      	cmp	r8, r3
 8005c0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c12:	f280 80c7 	bge.w	8005da4 <_strtod_l+0x874>
 8005c16:	eba3 0308 	sub.w	r3, r3, r8
 8005c1a:	2b1f      	cmp	r3, #31
 8005c1c:	eba2 0203 	sub.w	r2, r2, r3
 8005c20:	f04f 0101 	mov.w	r1, #1
 8005c24:	f300 80b1 	bgt.w	8005d8a <_strtod_l+0x85a>
 8005c28:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2c:	930d      	str	r3, [sp, #52]	; 0x34
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9308      	str	r3, [sp, #32]
 8005c32:	eb09 0802 	add.w	r8, r9, r2
 8005c36:	9b04      	ldr	r3, [sp, #16]
 8005c38:	45c1      	cmp	r9, r8
 8005c3a:	4417      	add	r7, r2
 8005c3c:	441f      	add	r7, r3
 8005c3e:	464b      	mov	r3, r9
 8005c40:	bfa8      	it	ge
 8005c42:	4643      	movge	r3, r8
 8005c44:	42bb      	cmp	r3, r7
 8005c46:	bfa8      	it	ge
 8005c48:	463b      	movge	r3, r7
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bfc2      	ittt	gt
 8005c4e:	eba8 0803 	subgt.w	r8, r8, r3
 8005c52:	1aff      	subgt	r7, r7, r3
 8005c54:	eba9 0903 	subgt.w	r9, r9, r3
 8005c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	dd17      	ble.n	8005c8e <_strtod_l+0x75e>
 8005c5e:	4631      	mov	r1, r6
 8005c60:	461a      	mov	r2, r3
 8005c62:	4620      	mov	r0, r4
 8005c64:	f001 ff42 	bl	8007aec <__pow5mult>
 8005c68:	4606      	mov	r6, r0
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	f43f aea8 	beq.w	80059c0 <_strtod_l+0x490>
 8005c70:	4601      	mov	r1, r0
 8005c72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c74:	4620      	mov	r0, r4
 8005c76:	f001 fe8f 	bl	8007998 <__multiply>
 8005c7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f43f ae9f 	beq.w	80059c0 <_strtod_l+0x490>
 8005c82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c84:	4620      	mov	r0, r4
 8005c86:	f001 fd6f 	bl	8007768 <_Bfree>
 8005c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c8c:	9318      	str	r3, [sp, #96]	; 0x60
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	f300 808c 	bgt.w	8005dae <_strtod_l+0x87e>
 8005c96:	9b06      	ldr	r3, [sp, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	dd08      	ble.n	8005cae <_strtod_l+0x77e>
 8005c9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c9e:	9905      	ldr	r1, [sp, #20]
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f001 ff23 	bl	8007aec <__pow5mult>
 8005ca6:	9005      	str	r0, [sp, #20]
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	f43f ae89 	beq.w	80059c0 <_strtod_l+0x490>
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	dd08      	ble.n	8005cc4 <_strtod_l+0x794>
 8005cb2:	9905      	ldr	r1, [sp, #20]
 8005cb4:	463a      	mov	r2, r7
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f001 ff72 	bl	8007ba0 <__lshift>
 8005cbc:	9005      	str	r0, [sp, #20]
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f43f ae7e 	beq.w	80059c0 <_strtod_l+0x490>
 8005cc4:	f1b9 0f00 	cmp.w	r9, #0
 8005cc8:	dd08      	ble.n	8005cdc <_strtod_l+0x7ac>
 8005cca:	4631      	mov	r1, r6
 8005ccc:	464a      	mov	r2, r9
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f001 ff66 	bl	8007ba0 <__lshift>
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f43f ae72 	beq.w	80059c0 <_strtod_l+0x490>
 8005cdc:	9a05      	ldr	r2, [sp, #20]
 8005cde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f001 ffe9 	bl	8007cb8 <__mdiff>
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	f43f ae69 	beq.w	80059c0 <_strtod_l+0x490>
 8005cee:	68c3      	ldr	r3, [r0, #12]
 8005cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60c3      	str	r3, [r0, #12]
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	f001 ffc2 	bl	8007c80 <__mcmp>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	da60      	bge.n	8005dc2 <_strtod_l+0x892>
 8005d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d02:	ea53 030a 	orrs.w	r3, r3, sl
 8005d06:	f040 8082 	bne.w	8005e0e <_strtod_l+0x8de>
 8005d0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d17d      	bne.n	8005e0e <_strtod_l+0x8de>
 8005d12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d16:	0d1b      	lsrs	r3, r3, #20
 8005d18:	051b      	lsls	r3, r3, #20
 8005d1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d1e:	d976      	bls.n	8005e0e <_strtod_l+0x8de>
 8005d20:	696b      	ldr	r3, [r5, #20]
 8005d22:	b913      	cbnz	r3, 8005d2a <_strtod_l+0x7fa>
 8005d24:	692b      	ldr	r3, [r5, #16]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	dd71      	ble.n	8005e0e <_strtod_l+0x8de>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f001 ff36 	bl	8007ba0 <__lshift>
 8005d34:	4631      	mov	r1, r6
 8005d36:	4605      	mov	r5, r0
 8005d38:	f001 ffa2 	bl	8007c80 <__mcmp>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	dd66      	ble.n	8005e0e <_strtod_l+0x8de>
 8005d40:	9904      	ldr	r1, [sp, #16]
 8005d42:	4a53      	ldr	r2, [pc, #332]	; (8005e90 <_strtod_l+0x960>)
 8005d44:	465b      	mov	r3, fp
 8005d46:	2900      	cmp	r1, #0
 8005d48:	f000 8081 	beq.w	8005e4e <_strtod_l+0x91e>
 8005d4c:	ea02 010b 	and.w	r1, r2, fp
 8005d50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005d54:	dc7b      	bgt.n	8005e4e <_strtod_l+0x91e>
 8005d56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005d5a:	f77f aea9 	ble.w	8005ab0 <_strtod_l+0x580>
 8005d5e:	4b4d      	ldr	r3, [pc, #308]	; (8005e94 <_strtod_l+0x964>)
 8005d60:	4650      	mov	r0, sl
 8005d62:	4659      	mov	r1, fp
 8005d64:	2200      	movs	r2, #0
 8005d66:	f7fa fc5f 	bl	8000628 <__aeabi_dmul>
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4303      	orrs	r3, r0
 8005d6e:	bf08      	it	eq
 8005d70:	2322      	moveq	r3, #34	; 0x22
 8005d72:	4682      	mov	sl, r0
 8005d74:	468b      	mov	fp, r1
 8005d76:	bf08      	it	eq
 8005d78:	6023      	streq	r3, [r4, #0]
 8005d7a:	e62b      	b.n	80059d4 <_strtod_l+0x4a4>
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	ea03 0a0a 	and.w	sl, r3, sl
 8005d88:	e6e3      	b.n	8005b52 <_strtod_l+0x622>
 8005d8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005d8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005d92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005d96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005d9a:	fa01 f308 	lsl.w	r3, r1, r8
 8005d9e:	9308      	str	r3, [sp, #32]
 8005da0:	910d      	str	r1, [sp, #52]	; 0x34
 8005da2:	e746      	b.n	8005c32 <_strtod_l+0x702>
 8005da4:	2300      	movs	r3, #0
 8005da6:	9308      	str	r3, [sp, #32]
 8005da8:	2301      	movs	r3, #1
 8005daa:	930d      	str	r3, [sp, #52]	; 0x34
 8005dac:	e741      	b.n	8005c32 <_strtod_l+0x702>
 8005dae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005db0:	4642      	mov	r2, r8
 8005db2:	4620      	mov	r0, r4
 8005db4:	f001 fef4 	bl	8007ba0 <__lshift>
 8005db8:	9018      	str	r0, [sp, #96]	; 0x60
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f47f af6b 	bne.w	8005c96 <_strtod_l+0x766>
 8005dc0:	e5fe      	b.n	80059c0 <_strtod_l+0x490>
 8005dc2:	465f      	mov	r7, fp
 8005dc4:	d16e      	bne.n	8005ea4 <_strtod_l+0x974>
 8005dc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dcc:	b342      	cbz	r2, 8005e20 <_strtod_l+0x8f0>
 8005dce:	4a32      	ldr	r2, [pc, #200]	; (8005e98 <_strtod_l+0x968>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d128      	bne.n	8005e26 <_strtod_l+0x8f6>
 8005dd4:	9b04      	ldr	r3, [sp, #16]
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	b1eb      	cbz	r3, 8005e16 <_strtod_l+0x8e6>
 8005dda:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <_strtod_l+0x960>)
 8005ddc:	403b      	ands	r3, r7
 8005dde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295
 8005de6:	d819      	bhi.n	8005e1c <_strtod_l+0x8ec>
 8005de8:	0d1b      	lsrs	r3, r3, #20
 8005dea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005dee:	fa02 f303 	lsl.w	r3, r2, r3
 8005df2:	4299      	cmp	r1, r3
 8005df4:	d117      	bne.n	8005e26 <_strtod_l+0x8f6>
 8005df6:	4b29      	ldr	r3, [pc, #164]	; (8005e9c <_strtod_l+0x96c>)
 8005df8:	429f      	cmp	r7, r3
 8005dfa:	d102      	bne.n	8005e02 <_strtod_l+0x8d2>
 8005dfc:	3101      	adds	r1, #1
 8005dfe:	f43f addf 	beq.w	80059c0 <_strtod_l+0x490>
 8005e02:	4b23      	ldr	r3, [pc, #140]	; (8005e90 <_strtod_l+0x960>)
 8005e04:	403b      	ands	r3, r7
 8005e06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005e0a:	f04f 0a00 	mov.w	sl, #0
 8005e0e:	9b04      	ldr	r3, [sp, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1a4      	bne.n	8005d5e <_strtod_l+0x82e>
 8005e14:	e5de      	b.n	80059d4 <_strtod_l+0x4a4>
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	e7ea      	b.n	8005df2 <_strtod_l+0x8c2>
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	e7e8      	b.n	8005df2 <_strtod_l+0x8c2>
 8005e20:	ea53 030a 	orrs.w	r3, r3, sl
 8005e24:	d08c      	beq.n	8005d40 <_strtod_l+0x810>
 8005e26:	9b08      	ldr	r3, [sp, #32]
 8005e28:	b1db      	cbz	r3, 8005e62 <_strtod_l+0x932>
 8005e2a:	423b      	tst	r3, r7
 8005e2c:	d0ef      	beq.n	8005e0e <_strtod_l+0x8de>
 8005e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e30:	9a04      	ldr	r2, [sp, #16]
 8005e32:	4650      	mov	r0, sl
 8005e34:	4659      	mov	r1, fp
 8005e36:	b1c3      	cbz	r3, 8005e6a <_strtod_l+0x93a>
 8005e38:	f7ff fb5d 	bl	80054f6 <sulp>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	ec51 0b18 	vmov	r0, r1, d8
 8005e44:	f7fa fa3a 	bl	80002bc <__adddf3>
 8005e48:	4682      	mov	sl, r0
 8005e4a:	468b      	mov	fp, r1
 8005e4c:	e7df      	b.n	8005e0e <_strtod_l+0x8de>
 8005e4e:	4013      	ands	r3, r2
 8005e50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005e54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005e58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005e5c:	f04f 3aff 	mov.w	sl, #4294967295
 8005e60:	e7d5      	b.n	8005e0e <_strtod_l+0x8de>
 8005e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e64:	ea13 0f0a 	tst.w	r3, sl
 8005e68:	e7e0      	b.n	8005e2c <_strtod_l+0x8fc>
 8005e6a:	f7ff fb44 	bl	80054f6 <sulp>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	ec51 0b18 	vmov	r0, r1, d8
 8005e76:	f7fa fa1f 	bl	80002b8 <__aeabi_dsub>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4682      	mov	sl, r0
 8005e80:	468b      	mov	fp, r1
 8005e82:	f7fa fe39 	bl	8000af8 <__aeabi_dcmpeq>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d0c1      	beq.n	8005e0e <_strtod_l+0x8de>
 8005e8a:	e611      	b.n	8005ab0 <_strtod_l+0x580>
 8005e8c:	fffffc02 	.word	0xfffffc02
 8005e90:	7ff00000 	.word	0x7ff00000
 8005e94:	39500000 	.word	0x39500000
 8005e98:	000fffff 	.word	0x000fffff
 8005e9c:	7fefffff 	.word	0x7fefffff
 8005ea0:	08009e50 	.word	0x08009e50
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f002 f868 	bl	8007f7c <__ratio>
 8005eac:	ec59 8b10 	vmov	r8, r9, d0
 8005eb0:	ee10 0a10 	vmov	r0, s0
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005eba:	4649      	mov	r1, r9
 8005ebc:	f7fa fe30 	bl	8000b20 <__aeabi_dcmple>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d07a      	beq.n	8005fba <_strtod_l+0xa8a>
 8005ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d04a      	beq.n	8005f60 <_strtod_l+0xa30>
 8005eca:	4b95      	ldr	r3, [pc, #596]	; (8006120 <_strtod_l+0xbf0>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005ed2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006120 <_strtod_l+0xbf0>
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	4b92      	ldr	r3, [pc, #584]	; (8006124 <_strtod_l+0xbf4>)
 8005edc:	403b      	ands	r3, r7
 8005ede:	930d      	str	r3, [sp, #52]	; 0x34
 8005ee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ee2:	4b91      	ldr	r3, [pc, #580]	; (8006128 <_strtod_l+0xbf8>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	f040 80b0 	bne.w	800604a <_strtod_l+0xb1a>
 8005eea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005eee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005ef2:	ec4b ab10 	vmov	d0, sl, fp
 8005ef6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005efa:	f001 ff67 	bl	8007dcc <__ulp>
 8005efe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f02:	ec53 2b10 	vmov	r2, r3, d0
 8005f06:	f7fa fb8f 	bl	8000628 <__aeabi_dmul>
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	465b      	mov	r3, fp
 8005f0e:	f7fa f9d5 	bl	80002bc <__adddf3>
 8005f12:	460b      	mov	r3, r1
 8005f14:	4983      	ldr	r1, [pc, #524]	; (8006124 <_strtod_l+0xbf4>)
 8005f16:	4a85      	ldr	r2, [pc, #532]	; (800612c <_strtod_l+0xbfc>)
 8005f18:	4019      	ands	r1, r3
 8005f1a:	4291      	cmp	r1, r2
 8005f1c:	4682      	mov	sl, r0
 8005f1e:	d960      	bls.n	8005fe2 <_strtod_l+0xab2>
 8005f20:	ee18 3a90 	vmov	r3, s17
 8005f24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d104      	bne.n	8005f36 <_strtod_l+0xa06>
 8005f2c:	ee18 3a10 	vmov	r3, s16
 8005f30:	3301      	adds	r3, #1
 8005f32:	f43f ad45 	beq.w	80059c0 <_strtod_l+0x490>
 8005f36:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006138 <_strtod_l+0xc08>
 8005f3a:	f04f 3aff 	mov.w	sl, #4294967295
 8005f3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f40:	4620      	mov	r0, r4
 8005f42:	f001 fc11 	bl	8007768 <_Bfree>
 8005f46:	9905      	ldr	r1, [sp, #20]
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f001 fc0d 	bl	8007768 <_Bfree>
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4620      	mov	r0, r4
 8005f52:	f001 fc09 	bl	8007768 <_Bfree>
 8005f56:	4629      	mov	r1, r5
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f001 fc05 	bl	8007768 <_Bfree>
 8005f5e:	e61a      	b.n	8005b96 <_strtod_l+0x666>
 8005f60:	f1ba 0f00 	cmp.w	sl, #0
 8005f64:	d11b      	bne.n	8005f9e <_strtod_l+0xa6e>
 8005f66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f6a:	b9f3      	cbnz	r3, 8005faa <_strtod_l+0xa7a>
 8005f6c:	4b6c      	ldr	r3, [pc, #432]	; (8006120 <_strtod_l+0xbf0>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	4640      	mov	r0, r8
 8005f72:	4649      	mov	r1, r9
 8005f74:	f7fa fdca 	bl	8000b0c <__aeabi_dcmplt>
 8005f78:	b9d0      	cbnz	r0, 8005fb0 <_strtod_l+0xa80>
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	4b6c      	ldr	r3, [pc, #432]	; (8006130 <_strtod_l+0xc00>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	f7fa fb51 	bl	8000628 <__aeabi_dmul>
 8005f86:	4680      	mov	r8, r0
 8005f88:	4689      	mov	r9, r1
 8005f8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005f8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005f92:	9315      	str	r3, [sp, #84]	; 0x54
 8005f94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005f98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005f9c:	e79d      	b.n	8005eda <_strtod_l+0x9aa>
 8005f9e:	f1ba 0f01 	cmp.w	sl, #1
 8005fa2:	d102      	bne.n	8005faa <_strtod_l+0xa7a>
 8005fa4:	2f00      	cmp	r7, #0
 8005fa6:	f43f ad83 	beq.w	8005ab0 <_strtod_l+0x580>
 8005faa:	4b62      	ldr	r3, [pc, #392]	; (8006134 <_strtod_l+0xc04>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	e78e      	b.n	8005ece <_strtod_l+0x99e>
 8005fb0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006130 <_strtod_l+0xc00>
 8005fb4:	f04f 0800 	mov.w	r8, #0
 8005fb8:	e7e7      	b.n	8005f8a <_strtod_l+0xa5a>
 8005fba:	4b5d      	ldr	r3, [pc, #372]	; (8006130 <_strtod_l+0xc00>)
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f7fa fb31 	bl	8000628 <__aeabi_dmul>
 8005fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fc8:	4680      	mov	r8, r0
 8005fca:	4689      	mov	r9, r1
 8005fcc:	b933      	cbnz	r3, 8005fdc <_strtod_l+0xaac>
 8005fce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fd2:	900e      	str	r0, [sp, #56]	; 0x38
 8005fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005fda:	e7dd      	b.n	8005f98 <_strtod_l+0xa68>
 8005fdc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8005fe0:	e7f9      	b.n	8005fd6 <_strtod_l+0xaa6>
 8005fe2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005fe6:	9b04      	ldr	r3, [sp, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1a8      	bne.n	8005f3e <_strtod_l+0xa0e>
 8005fec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ff0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ff2:	0d1b      	lsrs	r3, r3, #20
 8005ff4:	051b      	lsls	r3, r3, #20
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d1a1      	bne.n	8005f3e <_strtod_l+0xa0e>
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	f7fa feab 	bl	8000d58 <__aeabi_d2lz>
 8006002:	f7fa fae3 	bl	80005cc <__aeabi_l2d>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa f953 	bl	80002b8 <__aeabi_dsub>
 8006012:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006018:	ea43 030a 	orr.w	r3, r3, sl
 800601c:	4313      	orrs	r3, r2
 800601e:	4680      	mov	r8, r0
 8006020:	4689      	mov	r9, r1
 8006022:	d055      	beq.n	80060d0 <_strtod_l+0xba0>
 8006024:	a336      	add	r3, pc, #216	; (adr r3, 8006100 <_strtod_l+0xbd0>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f7fa fd6f 	bl	8000b0c <__aeabi_dcmplt>
 800602e:	2800      	cmp	r0, #0
 8006030:	f47f acd0 	bne.w	80059d4 <_strtod_l+0x4a4>
 8006034:	a334      	add	r3, pc, #208	; (adr r3, 8006108 <_strtod_l+0xbd8>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	4640      	mov	r0, r8
 800603c:	4649      	mov	r1, r9
 800603e:	f7fa fd83 	bl	8000b48 <__aeabi_dcmpgt>
 8006042:	2800      	cmp	r0, #0
 8006044:	f43f af7b 	beq.w	8005f3e <_strtod_l+0xa0e>
 8006048:	e4c4      	b.n	80059d4 <_strtod_l+0x4a4>
 800604a:	9b04      	ldr	r3, [sp, #16]
 800604c:	b333      	cbz	r3, 800609c <_strtod_l+0xb6c>
 800604e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006050:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006054:	d822      	bhi.n	800609c <_strtod_l+0xb6c>
 8006056:	a32e      	add	r3, pc, #184	; (adr r3, 8006110 <_strtod_l+0xbe0>)
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa fd5e 	bl	8000b20 <__aeabi_dcmple>
 8006064:	b1a0      	cbz	r0, 8006090 <_strtod_l+0xb60>
 8006066:	4649      	mov	r1, r9
 8006068:	4640      	mov	r0, r8
 800606a:	f7fa fdb5 	bl	8000bd8 <__aeabi_d2uiz>
 800606e:	2801      	cmp	r0, #1
 8006070:	bf38      	it	cc
 8006072:	2001      	movcc	r0, #1
 8006074:	f7fa fa5e 	bl	8000534 <__aeabi_ui2d>
 8006078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800607a:	4680      	mov	r8, r0
 800607c:	4689      	mov	r9, r1
 800607e:	bb23      	cbnz	r3, 80060ca <_strtod_l+0xb9a>
 8006080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006084:	9010      	str	r0, [sp, #64]	; 0x40
 8006086:	9311      	str	r3, [sp, #68]	; 0x44
 8006088:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800608c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006094:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	9309      	str	r3, [sp, #36]	; 0x24
 800609c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060a0:	eeb0 0a48 	vmov.f32	s0, s16
 80060a4:	eef0 0a68 	vmov.f32	s1, s17
 80060a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060ac:	f001 fe8e 	bl	8007dcc <__ulp>
 80060b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060b4:	ec53 2b10 	vmov	r2, r3, d0
 80060b8:	f7fa fab6 	bl	8000628 <__aeabi_dmul>
 80060bc:	ec53 2b18 	vmov	r2, r3, d8
 80060c0:	f7fa f8fc 	bl	80002bc <__adddf3>
 80060c4:	4682      	mov	sl, r0
 80060c6:	468b      	mov	fp, r1
 80060c8:	e78d      	b.n	8005fe6 <_strtod_l+0xab6>
 80060ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80060ce:	e7db      	b.n	8006088 <_strtod_l+0xb58>
 80060d0:	a311      	add	r3, pc, #68	; (adr r3, 8006118 <_strtod_l+0xbe8>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f7fa fd19 	bl	8000b0c <__aeabi_dcmplt>
 80060da:	e7b2      	b.n	8006042 <_strtod_l+0xb12>
 80060dc:	2300      	movs	r3, #0
 80060de:	930a      	str	r3, [sp, #40]	; 0x28
 80060e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80060e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060e4:	6013      	str	r3, [r2, #0]
 80060e6:	f7ff ba6b 	b.w	80055c0 <_strtod_l+0x90>
 80060ea:	2a65      	cmp	r2, #101	; 0x65
 80060ec:	f43f ab5f 	beq.w	80057ae <_strtod_l+0x27e>
 80060f0:	2a45      	cmp	r2, #69	; 0x45
 80060f2:	f43f ab5c 	beq.w	80057ae <_strtod_l+0x27e>
 80060f6:	2301      	movs	r3, #1
 80060f8:	f7ff bb94 	b.w	8005824 <_strtod_l+0x2f4>
 80060fc:	f3af 8000 	nop.w
 8006100:	94a03595 	.word	0x94a03595
 8006104:	3fdfffff 	.word	0x3fdfffff
 8006108:	35afe535 	.word	0x35afe535
 800610c:	3fe00000 	.word	0x3fe00000
 8006110:	ffc00000 	.word	0xffc00000
 8006114:	41dfffff 	.word	0x41dfffff
 8006118:	94a03595 	.word	0x94a03595
 800611c:	3fcfffff 	.word	0x3fcfffff
 8006120:	3ff00000 	.word	0x3ff00000
 8006124:	7ff00000 	.word	0x7ff00000
 8006128:	7fe00000 	.word	0x7fe00000
 800612c:	7c9fffff 	.word	0x7c9fffff
 8006130:	3fe00000 	.word	0x3fe00000
 8006134:	bff00000 	.word	0xbff00000
 8006138:	7fefffff 	.word	0x7fefffff

0800613c <_strtod_r>:
 800613c:	4b01      	ldr	r3, [pc, #4]	; (8006144 <_strtod_r+0x8>)
 800613e:	f7ff b9f7 	b.w	8005530 <_strtod_l>
 8006142:	bf00      	nop
 8006144:	2000007c 	.word	0x2000007c

08006148 <_strtol_l.constprop.0>:
 8006148:	2b01      	cmp	r3, #1
 800614a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800614e:	d001      	beq.n	8006154 <_strtol_l.constprop.0+0xc>
 8006150:	2b24      	cmp	r3, #36	; 0x24
 8006152:	d906      	bls.n	8006162 <_strtol_l.constprop.0+0x1a>
 8006154:	f7fe fa8c 	bl	8004670 <__errno>
 8006158:	2316      	movs	r3, #22
 800615a:	6003      	str	r3, [r0, #0]
 800615c:	2000      	movs	r0, #0
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006248 <_strtol_l.constprop.0+0x100>
 8006166:	460d      	mov	r5, r1
 8006168:	462e      	mov	r6, r5
 800616a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800616e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006172:	f017 0708 	ands.w	r7, r7, #8
 8006176:	d1f7      	bne.n	8006168 <_strtol_l.constprop.0+0x20>
 8006178:	2c2d      	cmp	r4, #45	; 0x2d
 800617a:	d132      	bne.n	80061e2 <_strtol_l.constprop.0+0x9a>
 800617c:	782c      	ldrb	r4, [r5, #0]
 800617e:	2701      	movs	r7, #1
 8006180:	1cb5      	adds	r5, r6, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d05b      	beq.n	800623e <_strtol_l.constprop.0+0xf6>
 8006186:	2b10      	cmp	r3, #16
 8006188:	d109      	bne.n	800619e <_strtol_l.constprop.0+0x56>
 800618a:	2c30      	cmp	r4, #48	; 0x30
 800618c:	d107      	bne.n	800619e <_strtol_l.constprop.0+0x56>
 800618e:	782c      	ldrb	r4, [r5, #0]
 8006190:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006194:	2c58      	cmp	r4, #88	; 0x58
 8006196:	d14d      	bne.n	8006234 <_strtol_l.constprop.0+0xec>
 8006198:	786c      	ldrb	r4, [r5, #1]
 800619a:	2310      	movs	r3, #16
 800619c:	3502      	adds	r5, #2
 800619e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80061a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80061a6:	f04f 0c00 	mov.w	ip, #0
 80061aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80061ae:	4666      	mov	r6, ip
 80061b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80061b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80061b8:	f1be 0f09 	cmp.w	lr, #9
 80061bc:	d816      	bhi.n	80061ec <_strtol_l.constprop.0+0xa4>
 80061be:	4674      	mov	r4, lr
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	dd24      	ble.n	800620e <_strtol_l.constprop.0+0xc6>
 80061c4:	f1bc 0f00 	cmp.w	ip, #0
 80061c8:	db1e      	blt.n	8006208 <_strtol_l.constprop.0+0xc0>
 80061ca:	45b1      	cmp	r9, r6
 80061cc:	d31c      	bcc.n	8006208 <_strtol_l.constprop.0+0xc0>
 80061ce:	d101      	bne.n	80061d4 <_strtol_l.constprop.0+0x8c>
 80061d0:	45a2      	cmp	sl, r4
 80061d2:	db19      	blt.n	8006208 <_strtol_l.constprop.0+0xc0>
 80061d4:	fb06 4603 	mla	r6, r6, r3, r4
 80061d8:	f04f 0c01 	mov.w	ip, #1
 80061dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061e0:	e7e8      	b.n	80061b4 <_strtol_l.constprop.0+0x6c>
 80061e2:	2c2b      	cmp	r4, #43	; 0x2b
 80061e4:	bf04      	itt	eq
 80061e6:	782c      	ldrbeq	r4, [r5, #0]
 80061e8:	1cb5      	addeq	r5, r6, #2
 80061ea:	e7ca      	b.n	8006182 <_strtol_l.constprop.0+0x3a>
 80061ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80061f0:	f1be 0f19 	cmp.w	lr, #25
 80061f4:	d801      	bhi.n	80061fa <_strtol_l.constprop.0+0xb2>
 80061f6:	3c37      	subs	r4, #55	; 0x37
 80061f8:	e7e2      	b.n	80061c0 <_strtol_l.constprop.0+0x78>
 80061fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80061fe:	f1be 0f19 	cmp.w	lr, #25
 8006202:	d804      	bhi.n	800620e <_strtol_l.constprop.0+0xc6>
 8006204:	3c57      	subs	r4, #87	; 0x57
 8006206:	e7db      	b.n	80061c0 <_strtol_l.constprop.0+0x78>
 8006208:	f04f 3cff 	mov.w	ip, #4294967295
 800620c:	e7e6      	b.n	80061dc <_strtol_l.constprop.0+0x94>
 800620e:	f1bc 0f00 	cmp.w	ip, #0
 8006212:	da05      	bge.n	8006220 <_strtol_l.constprop.0+0xd8>
 8006214:	2322      	movs	r3, #34	; 0x22
 8006216:	6003      	str	r3, [r0, #0]
 8006218:	4646      	mov	r6, r8
 800621a:	b942      	cbnz	r2, 800622e <_strtol_l.constprop.0+0xe6>
 800621c:	4630      	mov	r0, r6
 800621e:	e79e      	b.n	800615e <_strtol_l.constprop.0+0x16>
 8006220:	b107      	cbz	r7, 8006224 <_strtol_l.constprop.0+0xdc>
 8006222:	4276      	negs	r6, r6
 8006224:	2a00      	cmp	r2, #0
 8006226:	d0f9      	beq.n	800621c <_strtol_l.constprop.0+0xd4>
 8006228:	f1bc 0f00 	cmp.w	ip, #0
 800622c:	d000      	beq.n	8006230 <_strtol_l.constprop.0+0xe8>
 800622e:	1e69      	subs	r1, r5, #1
 8006230:	6011      	str	r1, [r2, #0]
 8006232:	e7f3      	b.n	800621c <_strtol_l.constprop.0+0xd4>
 8006234:	2430      	movs	r4, #48	; 0x30
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1b1      	bne.n	800619e <_strtol_l.constprop.0+0x56>
 800623a:	2308      	movs	r3, #8
 800623c:	e7af      	b.n	800619e <_strtol_l.constprop.0+0x56>
 800623e:	2c30      	cmp	r4, #48	; 0x30
 8006240:	d0a5      	beq.n	800618e <_strtol_l.constprop.0+0x46>
 8006242:	230a      	movs	r3, #10
 8006244:	e7ab      	b.n	800619e <_strtol_l.constprop.0+0x56>
 8006246:	bf00      	nop
 8006248:	08009e79 	.word	0x08009e79

0800624c <_strtol_r>:
 800624c:	f7ff bf7c 	b.w	8006148 <_strtol_l.constprop.0>

08006250 <_write_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d07      	ldr	r5, [pc, #28]	; (8006270 <_write_r+0x20>)
 8006254:	4604      	mov	r4, r0
 8006256:	4608      	mov	r0, r1
 8006258:	4611      	mov	r1, r2
 800625a:	2200      	movs	r2, #0
 800625c:	602a      	str	r2, [r5, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	f7fb fddc 	bl	8001e1c <_write>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_write_r+0x1e>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_write_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	20000c2c 	.word	0x20000c2c

08006274 <_close_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d06      	ldr	r5, [pc, #24]	; (8006290 <_close_r+0x1c>)
 8006278:	2300      	movs	r3, #0
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fb fde8 	bl	8001e54 <_close>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_close_r+0x1a>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_close_r+0x1a>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20000c2c 	.word	0x20000c2c

08006294 <quorem>:
 8006294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	6903      	ldr	r3, [r0, #16]
 800629a:	690c      	ldr	r4, [r1, #16]
 800629c:	42a3      	cmp	r3, r4
 800629e:	4607      	mov	r7, r0
 80062a0:	f2c0 8081 	blt.w	80063a6 <quorem+0x112>
 80062a4:	3c01      	subs	r4, #1
 80062a6:	f101 0814 	add.w	r8, r1, #20
 80062aa:	f100 0514 	add.w	r5, r0, #20
 80062ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062bc:	3301      	adds	r3, #1
 80062be:	429a      	cmp	r2, r3
 80062c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062cc:	d331      	bcc.n	8006332 <quorem+0x9e>
 80062ce:	f04f 0e00 	mov.w	lr, #0
 80062d2:	4640      	mov	r0, r8
 80062d4:	46ac      	mov	ip, r5
 80062d6:	46f2      	mov	sl, lr
 80062d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80062dc:	b293      	uxth	r3, r2
 80062de:	fb06 e303 	mla	r3, r6, r3, lr
 80062e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	ebaa 0303 	sub.w	r3, sl, r3
 80062ec:	f8dc a000 	ldr.w	sl, [ip]
 80062f0:	0c12      	lsrs	r2, r2, #16
 80062f2:	fa13 f38a 	uxtah	r3, r3, sl
 80062f6:	fb06 e202 	mla	r2, r6, r2, lr
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	9b00      	ldr	r3, [sp, #0]
 80062fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006302:	b292      	uxth	r2, r2
 8006304:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800630c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006310:	4581      	cmp	r9, r0
 8006312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006316:	f84c 3b04 	str.w	r3, [ip], #4
 800631a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800631e:	d2db      	bcs.n	80062d8 <quorem+0x44>
 8006320:	f855 300b 	ldr.w	r3, [r5, fp]
 8006324:	b92b      	cbnz	r3, 8006332 <quorem+0x9e>
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	3b04      	subs	r3, #4
 800632a:	429d      	cmp	r5, r3
 800632c:	461a      	mov	r2, r3
 800632e:	d32e      	bcc.n	800638e <quorem+0xfa>
 8006330:	613c      	str	r4, [r7, #16]
 8006332:	4638      	mov	r0, r7
 8006334:	f001 fca4 	bl	8007c80 <__mcmp>
 8006338:	2800      	cmp	r0, #0
 800633a:	db24      	blt.n	8006386 <quorem+0xf2>
 800633c:	3601      	adds	r6, #1
 800633e:	4628      	mov	r0, r5
 8006340:	f04f 0c00 	mov.w	ip, #0
 8006344:	f858 2b04 	ldr.w	r2, [r8], #4
 8006348:	f8d0 e000 	ldr.w	lr, [r0]
 800634c:	b293      	uxth	r3, r2
 800634e:	ebac 0303 	sub.w	r3, ip, r3
 8006352:	0c12      	lsrs	r2, r2, #16
 8006354:	fa13 f38e 	uxtah	r3, r3, lr
 8006358:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800635c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006360:	b29b      	uxth	r3, r3
 8006362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006366:	45c1      	cmp	r9, r8
 8006368:	f840 3b04 	str.w	r3, [r0], #4
 800636c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006370:	d2e8      	bcs.n	8006344 <quorem+0xb0>
 8006372:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800637a:	b922      	cbnz	r2, 8006386 <quorem+0xf2>
 800637c:	3b04      	subs	r3, #4
 800637e:	429d      	cmp	r5, r3
 8006380:	461a      	mov	r2, r3
 8006382:	d30a      	bcc.n	800639a <quorem+0x106>
 8006384:	613c      	str	r4, [r7, #16]
 8006386:	4630      	mov	r0, r6
 8006388:	b003      	add	sp, #12
 800638a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	3b04      	subs	r3, #4
 8006392:	2a00      	cmp	r2, #0
 8006394:	d1cc      	bne.n	8006330 <quorem+0x9c>
 8006396:	3c01      	subs	r4, #1
 8006398:	e7c7      	b.n	800632a <quorem+0x96>
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	3b04      	subs	r3, #4
 800639e:	2a00      	cmp	r2, #0
 80063a0:	d1f0      	bne.n	8006384 <quorem+0xf0>
 80063a2:	3c01      	subs	r4, #1
 80063a4:	e7eb      	b.n	800637e <quorem+0xea>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e7ee      	b.n	8006388 <quorem+0xf4>
 80063aa:	0000      	movs	r0, r0
 80063ac:	0000      	movs	r0, r0
	...

080063b0 <_dtoa_r>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	ed2d 8b04 	vpush	{d8-d9}
 80063b8:	ec57 6b10 	vmov	r6, r7, d0
 80063bc:	b093      	sub	sp, #76	; 0x4c
 80063be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063c4:	9106      	str	r1, [sp, #24]
 80063c6:	ee10 aa10 	vmov	sl, s0
 80063ca:	4604      	mov	r4, r0
 80063cc:	9209      	str	r2, [sp, #36]	; 0x24
 80063ce:	930c      	str	r3, [sp, #48]	; 0x30
 80063d0:	46bb      	mov	fp, r7
 80063d2:	b975      	cbnz	r5, 80063f2 <_dtoa_r+0x42>
 80063d4:	2010      	movs	r0, #16
 80063d6:	f001 f95f 	bl	8007698 <malloc>
 80063da:	4602      	mov	r2, r0
 80063dc:	6260      	str	r0, [r4, #36]	; 0x24
 80063de:	b920      	cbnz	r0, 80063ea <_dtoa_r+0x3a>
 80063e0:	4ba7      	ldr	r3, [pc, #668]	; (8006680 <_dtoa_r+0x2d0>)
 80063e2:	21ea      	movs	r1, #234	; 0xea
 80063e4:	48a7      	ldr	r0, [pc, #668]	; (8006684 <_dtoa_r+0x2d4>)
 80063e6:	f002 fceb 	bl	8008dc0 <__assert_func>
 80063ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063ee:	6005      	str	r5, [r0, #0]
 80063f0:	60c5      	str	r5, [r0, #12]
 80063f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	b151      	cbz	r1, 800640e <_dtoa_r+0x5e>
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	604a      	str	r2, [r1, #4]
 80063fc:	2301      	movs	r3, #1
 80063fe:	4093      	lsls	r3, r2
 8006400:	608b      	str	r3, [r1, #8]
 8006402:	4620      	mov	r0, r4
 8006404:	f001 f9b0 	bl	8007768 <_Bfree>
 8006408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	1e3b      	subs	r3, r7, #0
 8006410:	bfaa      	itet	ge
 8006412:	2300      	movge	r3, #0
 8006414:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006418:	f8c8 3000 	strge.w	r3, [r8]
 800641c:	4b9a      	ldr	r3, [pc, #616]	; (8006688 <_dtoa_r+0x2d8>)
 800641e:	bfbc      	itt	lt
 8006420:	2201      	movlt	r2, #1
 8006422:	f8c8 2000 	strlt.w	r2, [r8]
 8006426:	ea33 030b 	bics.w	r3, r3, fp
 800642a:	d11b      	bne.n	8006464 <_dtoa_r+0xb4>
 800642c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800642e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006438:	4333      	orrs	r3, r6
 800643a:	f000 8592 	beq.w	8006f62 <_dtoa_r+0xbb2>
 800643e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006440:	b963      	cbnz	r3, 800645c <_dtoa_r+0xac>
 8006442:	4b92      	ldr	r3, [pc, #584]	; (800668c <_dtoa_r+0x2dc>)
 8006444:	e022      	b.n	800648c <_dtoa_r+0xdc>
 8006446:	4b92      	ldr	r3, [pc, #584]	; (8006690 <_dtoa_r+0x2e0>)
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	3308      	adds	r3, #8
 800644c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	9801      	ldr	r0, [sp, #4]
 8006452:	b013      	add	sp, #76	; 0x4c
 8006454:	ecbd 8b04 	vpop	{d8-d9}
 8006458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645c:	4b8b      	ldr	r3, [pc, #556]	; (800668c <_dtoa_r+0x2dc>)
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	3303      	adds	r3, #3
 8006462:	e7f3      	b.n	800644c <_dtoa_r+0x9c>
 8006464:	2200      	movs	r2, #0
 8006466:	2300      	movs	r3, #0
 8006468:	4650      	mov	r0, sl
 800646a:	4659      	mov	r1, fp
 800646c:	f7fa fb44 	bl	8000af8 <__aeabi_dcmpeq>
 8006470:	ec4b ab19 	vmov	d9, sl, fp
 8006474:	4680      	mov	r8, r0
 8006476:	b158      	cbz	r0, 8006490 <_dtoa_r+0xe0>
 8006478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800647a:	2301      	movs	r3, #1
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 856b 	beq.w	8006f5c <_dtoa_r+0xbac>
 8006486:	4883      	ldr	r0, [pc, #524]	; (8006694 <_dtoa_r+0x2e4>)
 8006488:	6018      	str	r0, [r3, #0]
 800648a:	1e43      	subs	r3, r0, #1
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	e7df      	b.n	8006450 <_dtoa_r+0xa0>
 8006490:	ec4b ab10 	vmov	d0, sl, fp
 8006494:	aa10      	add	r2, sp, #64	; 0x40
 8006496:	a911      	add	r1, sp, #68	; 0x44
 8006498:	4620      	mov	r0, r4
 800649a:	f001 fd13 	bl	8007ec4 <__d2b>
 800649e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80064a2:	ee08 0a10 	vmov	s16, r0
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	f000 8084 	beq.w	80065b4 <_dtoa_r+0x204>
 80064ac:	ee19 3a90 	vmov	r3, s19
 80064b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064b8:	4656      	mov	r6, sl
 80064ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80064c6:	4b74      	ldr	r3, [pc, #464]	; (8006698 <_dtoa_r+0x2e8>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	4630      	mov	r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	f7f9 fef3 	bl	80002b8 <__aeabi_dsub>
 80064d2:	a365      	add	r3, pc, #404	; (adr r3, 8006668 <_dtoa_r+0x2b8>)
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	f7fa f8a6 	bl	8000628 <__aeabi_dmul>
 80064dc:	a364      	add	r3, pc, #400	; (adr r3, 8006670 <_dtoa_r+0x2c0>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f7f9 feeb 	bl	80002bc <__adddf3>
 80064e6:	4606      	mov	r6, r0
 80064e8:	4628      	mov	r0, r5
 80064ea:	460f      	mov	r7, r1
 80064ec:	f7fa f832 	bl	8000554 <__aeabi_i2d>
 80064f0:	a361      	add	r3, pc, #388	; (adr r3, 8006678 <_dtoa_r+0x2c8>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f897 	bl	8000628 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4630      	mov	r0, r6
 8006500:	4639      	mov	r1, r7
 8006502:	f7f9 fedb 	bl	80002bc <__adddf3>
 8006506:	4606      	mov	r6, r0
 8006508:	460f      	mov	r7, r1
 800650a:	f7fa fb3d 	bl	8000b88 <__aeabi_d2iz>
 800650e:	2200      	movs	r2, #0
 8006510:	9000      	str	r0, [sp, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	4630      	mov	r0, r6
 8006516:	4639      	mov	r1, r7
 8006518:	f7fa faf8 	bl	8000b0c <__aeabi_dcmplt>
 800651c:	b150      	cbz	r0, 8006534 <_dtoa_r+0x184>
 800651e:	9800      	ldr	r0, [sp, #0]
 8006520:	f7fa f818 	bl	8000554 <__aeabi_i2d>
 8006524:	4632      	mov	r2, r6
 8006526:	463b      	mov	r3, r7
 8006528:	f7fa fae6 	bl	8000af8 <__aeabi_dcmpeq>
 800652c:	b910      	cbnz	r0, 8006534 <_dtoa_r+0x184>
 800652e:	9b00      	ldr	r3, [sp, #0]
 8006530:	3b01      	subs	r3, #1
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	9b00      	ldr	r3, [sp, #0]
 8006536:	2b16      	cmp	r3, #22
 8006538:	d85a      	bhi.n	80065f0 <_dtoa_r+0x240>
 800653a:	9a00      	ldr	r2, [sp, #0]
 800653c:	4b57      	ldr	r3, [pc, #348]	; (800669c <_dtoa_r+0x2ec>)
 800653e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	ec51 0b19 	vmov	r0, r1, d9
 800654a:	f7fa fadf 	bl	8000b0c <__aeabi_dcmplt>
 800654e:	2800      	cmp	r0, #0
 8006550:	d050      	beq.n	80065f4 <_dtoa_r+0x244>
 8006552:	9b00      	ldr	r3, [sp, #0]
 8006554:	3b01      	subs	r3, #1
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	2300      	movs	r3, #0
 800655a:	930b      	str	r3, [sp, #44]	; 0x2c
 800655c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800655e:	1b5d      	subs	r5, r3, r5
 8006560:	1e6b      	subs	r3, r5, #1
 8006562:	9305      	str	r3, [sp, #20]
 8006564:	bf45      	ittet	mi
 8006566:	f1c5 0301 	rsbmi	r3, r5, #1
 800656a:	9304      	strmi	r3, [sp, #16]
 800656c:	2300      	movpl	r3, #0
 800656e:	2300      	movmi	r3, #0
 8006570:	bf4c      	ite	mi
 8006572:	9305      	strmi	r3, [sp, #20]
 8006574:	9304      	strpl	r3, [sp, #16]
 8006576:	9b00      	ldr	r3, [sp, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	db3d      	blt.n	80065f8 <_dtoa_r+0x248>
 800657c:	9b05      	ldr	r3, [sp, #20]
 800657e:	9a00      	ldr	r2, [sp, #0]
 8006580:	920a      	str	r2, [sp, #40]	; 0x28
 8006582:	4413      	add	r3, r2
 8006584:	9305      	str	r3, [sp, #20]
 8006586:	2300      	movs	r3, #0
 8006588:	9307      	str	r3, [sp, #28]
 800658a:	9b06      	ldr	r3, [sp, #24]
 800658c:	2b09      	cmp	r3, #9
 800658e:	f200 8089 	bhi.w	80066a4 <_dtoa_r+0x2f4>
 8006592:	2b05      	cmp	r3, #5
 8006594:	bfc4      	itt	gt
 8006596:	3b04      	subgt	r3, #4
 8006598:	9306      	strgt	r3, [sp, #24]
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	f1a3 0302 	sub.w	r3, r3, #2
 80065a0:	bfcc      	ite	gt
 80065a2:	2500      	movgt	r5, #0
 80065a4:	2501      	movle	r5, #1
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	f200 8087 	bhi.w	80066ba <_dtoa_r+0x30a>
 80065ac:	e8df f003 	tbb	[pc, r3]
 80065b0:	59383a2d 	.word	0x59383a2d
 80065b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065b8:	441d      	add	r5, r3
 80065ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065be:	2b20      	cmp	r3, #32
 80065c0:	bfc1      	itttt	gt
 80065c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80065ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065d2:	bfda      	itte	le
 80065d4:	f1c3 0320 	rsble	r3, r3, #32
 80065d8:	fa06 f003 	lslle.w	r0, r6, r3
 80065dc:	4318      	orrgt	r0, r3
 80065de:	f7f9 ffa9 	bl	8000534 <__aeabi_ui2d>
 80065e2:	2301      	movs	r3, #1
 80065e4:	4606      	mov	r6, r0
 80065e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065ea:	3d01      	subs	r5, #1
 80065ec:	930e      	str	r3, [sp, #56]	; 0x38
 80065ee:	e76a      	b.n	80064c6 <_dtoa_r+0x116>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e7b2      	b.n	800655a <_dtoa_r+0x1aa>
 80065f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80065f6:	e7b1      	b.n	800655c <_dtoa_r+0x1ac>
 80065f8:	9b04      	ldr	r3, [sp, #16]
 80065fa:	9a00      	ldr	r2, [sp, #0]
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	9304      	str	r3, [sp, #16]
 8006600:	4253      	negs	r3, r2
 8006602:	9307      	str	r3, [sp, #28]
 8006604:	2300      	movs	r3, #0
 8006606:	930a      	str	r3, [sp, #40]	; 0x28
 8006608:	e7bf      	b.n	800658a <_dtoa_r+0x1da>
 800660a:	2300      	movs	r3, #0
 800660c:	9308      	str	r3, [sp, #32]
 800660e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc55      	bgt.n	80066c0 <_dtoa_r+0x310>
 8006614:	2301      	movs	r3, #1
 8006616:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800661a:	461a      	mov	r2, r3
 800661c:	9209      	str	r2, [sp, #36]	; 0x24
 800661e:	e00c      	b.n	800663a <_dtoa_r+0x28a>
 8006620:	2301      	movs	r3, #1
 8006622:	e7f3      	b.n	800660c <_dtoa_r+0x25c>
 8006624:	2300      	movs	r3, #0
 8006626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006628:	9308      	str	r3, [sp, #32]
 800662a:	9b00      	ldr	r3, [sp, #0]
 800662c:	4413      	add	r3, r2
 800662e:	9302      	str	r3, [sp, #8]
 8006630:	3301      	adds	r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	bfb8      	it	lt
 8006638:	2301      	movlt	r3, #1
 800663a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800663c:	2200      	movs	r2, #0
 800663e:	6042      	str	r2, [r0, #4]
 8006640:	2204      	movs	r2, #4
 8006642:	f102 0614 	add.w	r6, r2, #20
 8006646:	429e      	cmp	r6, r3
 8006648:	6841      	ldr	r1, [r0, #4]
 800664a:	d93d      	bls.n	80066c8 <_dtoa_r+0x318>
 800664c:	4620      	mov	r0, r4
 800664e:	f001 f84b 	bl	80076e8 <_Balloc>
 8006652:	9001      	str	r0, [sp, #4]
 8006654:	2800      	cmp	r0, #0
 8006656:	d13b      	bne.n	80066d0 <_dtoa_r+0x320>
 8006658:	4b11      	ldr	r3, [pc, #68]	; (80066a0 <_dtoa_r+0x2f0>)
 800665a:	4602      	mov	r2, r0
 800665c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006660:	e6c0      	b.n	80063e4 <_dtoa_r+0x34>
 8006662:	2301      	movs	r3, #1
 8006664:	e7df      	b.n	8006626 <_dtoa_r+0x276>
 8006666:	bf00      	nop
 8006668:	636f4361 	.word	0x636f4361
 800666c:	3fd287a7 	.word	0x3fd287a7
 8006670:	8b60c8b3 	.word	0x8b60c8b3
 8006674:	3fc68a28 	.word	0x3fc68a28
 8006678:	509f79fb 	.word	0x509f79fb
 800667c:	3fd34413 	.word	0x3fd34413
 8006680:	08009f86 	.word	0x08009f86
 8006684:	08009f9d 	.word	0x08009f9d
 8006688:	7ff00000 	.word	0x7ff00000
 800668c:	08009f82 	.word	0x08009f82
 8006690:	08009f79 	.word	0x08009f79
 8006694:	0800a1f2 	.word	0x0800a1f2
 8006698:	3ff80000 	.word	0x3ff80000
 800669c:	0800a108 	.word	0x0800a108
 80066a0:	08009ff8 	.word	0x08009ff8
 80066a4:	2501      	movs	r5, #1
 80066a6:	2300      	movs	r3, #0
 80066a8:	9306      	str	r3, [sp, #24]
 80066aa:	9508      	str	r5, [sp, #32]
 80066ac:	f04f 33ff 	mov.w	r3, #4294967295
 80066b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066b4:	2200      	movs	r2, #0
 80066b6:	2312      	movs	r3, #18
 80066b8:	e7b0      	b.n	800661c <_dtoa_r+0x26c>
 80066ba:	2301      	movs	r3, #1
 80066bc:	9308      	str	r3, [sp, #32]
 80066be:	e7f5      	b.n	80066ac <_dtoa_r+0x2fc>
 80066c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066c6:	e7b8      	b.n	800663a <_dtoa_r+0x28a>
 80066c8:	3101      	adds	r1, #1
 80066ca:	6041      	str	r1, [r0, #4]
 80066cc:	0052      	lsls	r2, r2, #1
 80066ce:	e7b8      	b.n	8006642 <_dtoa_r+0x292>
 80066d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	2b0e      	cmp	r3, #14
 80066da:	f200 809d 	bhi.w	8006818 <_dtoa_r+0x468>
 80066de:	2d00      	cmp	r5, #0
 80066e0:	f000 809a 	beq.w	8006818 <_dtoa_r+0x468>
 80066e4:	9b00      	ldr	r3, [sp, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dd32      	ble.n	8006750 <_dtoa_r+0x3a0>
 80066ea:	4ab7      	ldr	r2, [pc, #732]	; (80069c8 <_dtoa_r+0x618>)
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066f8:	9b00      	ldr	r3, [sp, #0]
 80066fa:	05d8      	lsls	r0, r3, #23
 80066fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006700:	d516      	bpl.n	8006730 <_dtoa_r+0x380>
 8006702:	4bb2      	ldr	r3, [pc, #712]	; (80069cc <_dtoa_r+0x61c>)
 8006704:	ec51 0b19 	vmov	r0, r1, d9
 8006708:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800670c:	f7fa f8b6 	bl	800087c <__aeabi_ddiv>
 8006710:	f007 070f 	and.w	r7, r7, #15
 8006714:	4682      	mov	sl, r0
 8006716:	468b      	mov	fp, r1
 8006718:	2503      	movs	r5, #3
 800671a:	4eac      	ldr	r6, [pc, #688]	; (80069cc <_dtoa_r+0x61c>)
 800671c:	b957      	cbnz	r7, 8006734 <_dtoa_r+0x384>
 800671e:	4642      	mov	r2, r8
 8006720:	464b      	mov	r3, r9
 8006722:	4650      	mov	r0, sl
 8006724:	4659      	mov	r1, fp
 8006726:	f7fa f8a9 	bl	800087c <__aeabi_ddiv>
 800672a:	4682      	mov	sl, r0
 800672c:	468b      	mov	fp, r1
 800672e:	e028      	b.n	8006782 <_dtoa_r+0x3d2>
 8006730:	2502      	movs	r5, #2
 8006732:	e7f2      	b.n	800671a <_dtoa_r+0x36a>
 8006734:	07f9      	lsls	r1, r7, #31
 8006736:	d508      	bpl.n	800674a <_dtoa_r+0x39a>
 8006738:	4640      	mov	r0, r8
 800673a:	4649      	mov	r1, r9
 800673c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006740:	f7f9 ff72 	bl	8000628 <__aeabi_dmul>
 8006744:	3501      	adds	r5, #1
 8006746:	4680      	mov	r8, r0
 8006748:	4689      	mov	r9, r1
 800674a:	107f      	asrs	r7, r7, #1
 800674c:	3608      	adds	r6, #8
 800674e:	e7e5      	b.n	800671c <_dtoa_r+0x36c>
 8006750:	f000 809b 	beq.w	800688a <_dtoa_r+0x4da>
 8006754:	9b00      	ldr	r3, [sp, #0]
 8006756:	4f9d      	ldr	r7, [pc, #628]	; (80069cc <_dtoa_r+0x61c>)
 8006758:	425e      	negs	r6, r3
 800675a:	4b9b      	ldr	r3, [pc, #620]	; (80069c8 <_dtoa_r+0x618>)
 800675c:	f006 020f 	and.w	r2, r6, #15
 8006760:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	ec51 0b19 	vmov	r0, r1, d9
 800676c:	f7f9 ff5c 	bl	8000628 <__aeabi_dmul>
 8006770:	1136      	asrs	r6, r6, #4
 8006772:	4682      	mov	sl, r0
 8006774:	468b      	mov	fp, r1
 8006776:	2300      	movs	r3, #0
 8006778:	2502      	movs	r5, #2
 800677a:	2e00      	cmp	r6, #0
 800677c:	d17a      	bne.n	8006874 <_dtoa_r+0x4c4>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1d3      	bne.n	800672a <_dtoa_r+0x37a>
 8006782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8082 	beq.w	800688e <_dtoa_r+0x4de>
 800678a:	4b91      	ldr	r3, [pc, #580]	; (80069d0 <_dtoa_r+0x620>)
 800678c:	2200      	movs	r2, #0
 800678e:	4650      	mov	r0, sl
 8006790:	4659      	mov	r1, fp
 8006792:	f7fa f9bb 	bl	8000b0c <__aeabi_dcmplt>
 8006796:	2800      	cmp	r0, #0
 8006798:	d079      	beq.n	800688e <_dtoa_r+0x4de>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d076      	beq.n	800688e <_dtoa_r+0x4de>
 80067a0:	9b02      	ldr	r3, [sp, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dd36      	ble.n	8006814 <_dtoa_r+0x464>
 80067a6:	9b00      	ldr	r3, [sp, #0]
 80067a8:	4650      	mov	r0, sl
 80067aa:	4659      	mov	r1, fp
 80067ac:	1e5f      	subs	r7, r3, #1
 80067ae:	2200      	movs	r2, #0
 80067b0:	4b88      	ldr	r3, [pc, #544]	; (80069d4 <_dtoa_r+0x624>)
 80067b2:	f7f9 ff39 	bl	8000628 <__aeabi_dmul>
 80067b6:	9e02      	ldr	r6, [sp, #8]
 80067b8:	4682      	mov	sl, r0
 80067ba:	468b      	mov	fp, r1
 80067bc:	3501      	adds	r5, #1
 80067be:	4628      	mov	r0, r5
 80067c0:	f7f9 fec8 	bl	8000554 <__aeabi_i2d>
 80067c4:	4652      	mov	r2, sl
 80067c6:	465b      	mov	r3, fp
 80067c8:	f7f9 ff2e 	bl	8000628 <__aeabi_dmul>
 80067cc:	4b82      	ldr	r3, [pc, #520]	; (80069d8 <_dtoa_r+0x628>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	f7f9 fd74 	bl	80002bc <__adddf3>
 80067d4:	46d0      	mov	r8, sl
 80067d6:	46d9      	mov	r9, fp
 80067d8:	4682      	mov	sl, r0
 80067da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067de:	2e00      	cmp	r6, #0
 80067e0:	d158      	bne.n	8006894 <_dtoa_r+0x4e4>
 80067e2:	4b7e      	ldr	r3, [pc, #504]	; (80069dc <_dtoa_r+0x62c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	4640      	mov	r0, r8
 80067e8:	4649      	mov	r1, r9
 80067ea:	f7f9 fd65 	bl	80002b8 <__aeabi_dsub>
 80067ee:	4652      	mov	r2, sl
 80067f0:	465b      	mov	r3, fp
 80067f2:	4680      	mov	r8, r0
 80067f4:	4689      	mov	r9, r1
 80067f6:	f7fa f9a7 	bl	8000b48 <__aeabi_dcmpgt>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f040 8295 	bne.w	8006d2a <_dtoa_r+0x97a>
 8006800:	4652      	mov	r2, sl
 8006802:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7fa f97f 	bl	8000b0c <__aeabi_dcmplt>
 800680e:	2800      	cmp	r0, #0
 8006810:	f040 8289 	bne.w	8006d26 <_dtoa_r+0x976>
 8006814:	ec5b ab19 	vmov	sl, fp, d9
 8006818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800681a:	2b00      	cmp	r3, #0
 800681c:	f2c0 8148 	blt.w	8006ab0 <_dtoa_r+0x700>
 8006820:	9a00      	ldr	r2, [sp, #0]
 8006822:	2a0e      	cmp	r2, #14
 8006824:	f300 8144 	bgt.w	8006ab0 <_dtoa_r+0x700>
 8006828:	4b67      	ldr	r3, [pc, #412]	; (80069c8 <_dtoa_r+0x618>)
 800682a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800682e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	f280 80d5 	bge.w	80069e4 <_dtoa_r+0x634>
 800683a:	9b03      	ldr	r3, [sp, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f300 80d1 	bgt.w	80069e4 <_dtoa_r+0x634>
 8006842:	f040 826f 	bne.w	8006d24 <_dtoa_r+0x974>
 8006846:	4b65      	ldr	r3, [pc, #404]	; (80069dc <_dtoa_r+0x62c>)
 8006848:	2200      	movs	r2, #0
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	f7f9 feeb 	bl	8000628 <__aeabi_dmul>
 8006852:	4652      	mov	r2, sl
 8006854:	465b      	mov	r3, fp
 8006856:	f7fa f96d 	bl	8000b34 <__aeabi_dcmpge>
 800685a:	9e03      	ldr	r6, [sp, #12]
 800685c:	4637      	mov	r7, r6
 800685e:	2800      	cmp	r0, #0
 8006860:	f040 8245 	bne.w	8006cee <_dtoa_r+0x93e>
 8006864:	9d01      	ldr	r5, [sp, #4]
 8006866:	2331      	movs	r3, #49	; 0x31
 8006868:	f805 3b01 	strb.w	r3, [r5], #1
 800686c:	9b00      	ldr	r3, [sp, #0]
 800686e:	3301      	adds	r3, #1
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	e240      	b.n	8006cf6 <_dtoa_r+0x946>
 8006874:	07f2      	lsls	r2, r6, #31
 8006876:	d505      	bpl.n	8006884 <_dtoa_r+0x4d4>
 8006878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800687c:	f7f9 fed4 	bl	8000628 <__aeabi_dmul>
 8006880:	3501      	adds	r5, #1
 8006882:	2301      	movs	r3, #1
 8006884:	1076      	asrs	r6, r6, #1
 8006886:	3708      	adds	r7, #8
 8006888:	e777      	b.n	800677a <_dtoa_r+0x3ca>
 800688a:	2502      	movs	r5, #2
 800688c:	e779      	b.n	8006782 <_dtoa_r+0x3d2>
 800688e:	9f00      	ldr	r7, [sp, #0]
 8006890:	9e03      	ldr	r6, [sp, #12]
 8006892:	e794      	b.n	80067be <_dtoa_r+0x40e>
 8006894:	9901      	ldr	r1, [sp, #4]
 8006896:	4b4c      	ldr	r3, [pc, #304]	; (80069c8 <_dtoa_r+0x618>)
 8006898:	4431      	add	r1, r6
 800689a:	910d      	str	r1, [sp, #52]	; 0x34
 800689c:	9908      	ldr	r1, [sp, #32]
 800689e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068a6:	2900      	cmp	r1, #0
 80068a8:	d043      	beq.n	8006932 <_dtoa_r+0x582>
 80068aa:	494d      	ldr	r1, [pc, #308]	; (80069e0 <_dtoa_r+0x630>)
 80068ac:	2000      	movs	r0, #0
 80068ae:	f7f9 ffe5 	bl	800087c <__aeabi_ddiv>
 80068b2:	4652      	mov	r2, sl
 80068b4:	465b      	mov	r3, fp
 80068b6:	f7f9 fcff 	bl	80002b8 <__aeabi_dsub>
 80068ba:	9d01      	ldr	r5, [sp, #4]
 80068bc:	4682      	mov	sl, r0
 80068be:	468b      	mov	fp, r1
 80068c0:	4649      	mov	r1, r9
 80068c2:	4640      	mov	r0, r8
 80068c4:	f7fa f960 	bl	8000b88 <__aeabi_d2iz>
 80068c8:	4606      	mov	r6, r0
 80068ca:	f7f9 fe43 	bl	8000554 <__aeabi_i2d>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	f7f9 fcef 	bl	80002b8 <__aeabi_dsub>
 80068da:	3630      	adds	r6, #48	; 0x30
 80068dc:	f805 6b01 	strb.w	r6, [r5], #1
 80068e0:	4652      	mov	r2, sl
 80068e2:	465b      	mov	r3, fp
 80068e4:	4680      	mov	r8, r0
 80068e6:	4689      	mov	r9, r1
 80068e8:	f7fa f910 	bl	8000b0c <__aeabi_dcmplt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d163      	bne.n	80069b8 <_dtoa_r+0x608>
 80068f0:	4642      	mov	r2, r8
 80068f2:	464b      	mov	r3, r9
 80068f4:	4936      	ldr	r1, [pc, #216]	; (80069d0 <_dtoa_r+0x620>)
 80068f6:	2000      	movs	r0, #0
 80068f8:	f7f9 fcde 	bl	80002b8 <__aeabi_dsub>
 80068fc:	4652      	mov	r2, sl
 80068fe:	465b      	mov	r3, fp
 8006900:	f7fa f904 	bl	8000b0c <__aeabi_dcmplt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f040 80b5 	bne.w	8006a74 <_dtoa_r+0x6c4>
 800690a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800690c:	429d      	cmp	r5, r3
 800690e:	d081      	beq.n	8006814 <_dtoa_r+0x464>
 8006910:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <_dtoa_r+0x624>)
 8006912:	2200      	movs	r2, #0
 8006914:	4650      	mov	r0, sl
 8006916:	4659      	mov	r1, fp
 8006918:	f7f9 fe86 	bl	8000628 <__aeabi_dmul>
 800691c:	4b2d      	ldr	r3, [pc, #180]	; (80069d4 <_dtoa_r+0x624>)
 800691e:	4682      	mov	sl, r0
 8006920:	468b      	mov	fp, r1
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	2200      	movs	r2, #0
 8006928:	f7f9 fe7e 	bl	8000628 <__aeabi_dmul>
 800692c:	4680      	mov	r8, r0
 800692e:	4689      	mov	r9, r1
 8006930:	e7c6      	b.n	80068c0 <_dtoa_r+0x510>
 8006932:	4650      	mov	r0, sl
 8006934:	4659      	mov	r1, fp
 8006936:	f7f9 fe77 	bl	8000628 <__aeabi_dmul>
 800693a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800693c:	9d01      	ldr	r5, [sp, #4]
 800693e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006940:	4682      	mov	sl, r0
 8006942:	468b      	mov	fp, r1
 8006944:	4649      	mov	r1, r9
 8006946:	4640      	mov	r0, r8
 8006948:	f7fa f91e 	bl	8000b88 <__aeabi_d2iz>
 800694c:	4606      	mov	r6, r0
 800694e:	f7f9 fe01 	bl	8000554 <__aeabi_i2d>
 8006952:	3630      	adds	r6, #48	; 0x30
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4640      	mov	r0, r8
 800695a:	4649      	mov	r1, r9
 800695c:	f7f9 fcac 	bl	80002b8 <__aeabi_dsub>
 8006960:	f805 6b01 	strb.w	r6, [r5], #1
 8006964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006966:	429d      	cmp	r5, r3
 8006968:	4680      	mov	r8, r0
 800696a:	4689      	mov	r9, r1
 800696c:	f04f 0200 	mov.w	r2, #0
 8006970:	d124      	bne.n	80069bc <_dtoa_r+0x60c>
 8006972:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <_dtoa_r+0x630>)
 8006974:	4650      	mov	r0, sl
 8006976:	4659      	mov	r1, fp
 8006978:	f7f9 fca0 	bl	80002bc <__adddf3>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	4640      	mov	r0, r8
 8006982:	4649      	mov	r1, r9
 8006984:	f7fa f8e0 	bl	8000b48 <__aeabi_dcmpgt>
 8006988:	2800      	cmp	r0, #0
 800698a:	d173      	bne.n	8006a74 <_dtoa_r+0x6c4>
 800698c:	4652      	mov	r2, sl
 800698e:	465b      	mov	r3, fp
 8006990:	4913      	ldr	r1, [pc, #76]	; (80069e0 <_dtoa_r+0x630>)
 8006992:	2000      	movs	r0, #0
 8006994:	f7f9 fc90 	bl	80002b8 <__aeabi_dsub>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4640      	mov	r0, r8
 800699e:	4649      	mov	r1, r9
 80069a0:	f7fa f8b4 	bl	8000b0c <__aeabi_dcmplt>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f43f af35 	beq.w	8006814 <_dtoa_r+0x464>
 80069aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069ac:	1e6b      	subs	r3, r5, #1
 80069ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80069b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069b4:	2b30      	cmp	r3, #48	; 0x30
 80069b6:	d0f8      	beq.n	80069aa <_dtoa_r+0x5fa>
 80069b8:	9700      	str	r7, [sp, #0]
 80069ba:	e049      	b.n	8006a50 <_dtoa_r+0x6a0>
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <_dtoa_r+0x624>)
 80069be:	f7f9 fe33 	bl	8000628 <__aeabi_dmul>
 80069c2:	4680      	mov	r8, r0
 80069c4:	4689      	mov	r9, r1
 80069c6:	e7bd      	b.n	8006944 <_dtoa_r+0x594>
 80069c8:	0800a108 	.word	0x0800a108
 80069cc:	0800a0e0 	.word	0x0800a0e0
 80069d0:	3ff00000 	.word	0x3ff00000
 80069d4:	40240000 	.word	0x40240000
 80069d8:	401c0000 	.word	0x401c0000
 80069dc:	40140000 	.word	0x40140000
 80069e0:	3fe00000 	.word	0x3fe00000
 80069e4:	9d01      	ldr	r5, [sp, #4]
 80069e6:	4656      	mov	r6, sl
 80069e8:	465f      	mov	r7, fp
 80069ea:	4642      	mov	r2, r8
 80069ec:	464b      	mov	r3, r9
 80069ee:	4630      	mov	r0, r6
 80069f0:	4639      	mov	r1, r7
 80069f2:	f7f9 ff43 	bl	800087c <__aeabi_ddiv>
 80069f6:	f7fa f8c7 	bl	8000b88 <__aeabi_d2iz>
 80069fa:	4682      	mov	sl, r0
 80069fc:	f7f9 fdaa 	bl	8000554 <__aeabi_i2d>
 8006a00:	4642      	mov	r2, r8
 8006a02:	464b      	mov	r3, r9
 8006a04:	f7f9 fe10 	bl	8000628 <__aeabi_dmul>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	4639      	mov	r1, r7
 8006a10:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a14:	f7f9 fc50 	bl	80002b8 <__aeabi_dsub>
 8006a18:	f805 6b01 	strb.w	r6, [r5], #1
 8006a1c:	9e01      	ldr	r6, [sp, #4]
 8006a1e:	9f03      	ldr	r7, [sp, #12]
 8006a20:	1bae      	subs	r6, r5, r6
 8006a22:	42b7      	cmp	r7, r6
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	d135      	bne.n	8006a96 <_dtoa_r+0x6e6>
 8006a2a:	f7f9 fc47 	bl	80002bc <__adddf3>
 8006a2e:	4642      	mov	r2, r8
 8006a30:	464b      	mov	r3, r9
 8006a32:	4606      	mov	r6, r0
 8006a34:	460f      	mov	r7, r1
 8006a36:	f7fa f887 	bl	8000b48 <__aeabi_dcmpgt>
 8006a3a:	b9d0      	cbnz	r0, 8006a72 <_dtoa_r+0x6c2>
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	464b      	mov	r3, r9
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7fa f858 	bl	8000af8 <__aeabi_dcmpeq>
 8006a48:	b110      	cbz	r0, 8006a50 <_dtoa_r+0x6a0>
 8006a4a:	f01a 0f01 	tst.w	sl, #1
 8006a4e:	d110      	bne.n	8006a72 <_dtoa_r+0x6c2>
 8006a50:	4620      	mov	r0, r4
 8006a52:	ee18 1a10 	vmov	r1, s16
 8006a56:	f000 fe87 	bl	8007768 <_Bfree>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9800      	ldr	r0, [sp, #0]
 8006a5e:	702b      	strb	r3, [r5, #0]
 8006a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a62:	3001      	adds	r0, #1
 8006a64:	6018      	str	r0, [r3, #0]
 8006a66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f43f acf1 	beq.w	8006450 <_dtoa_r+0xa0>
 8006a6e:	601d      	str	r5, [r3, #0]
 8006a70:	e4ee      	b.n	8006450 <_dtoa_r+0xa0>
 8006a72:	9f00      	ldr	r7, [sp, #0]
 8006a74:	462b      	mov	r3, r5
 8006a76:	461d      	mov	r5, r3
 8006a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a7c:	2a39      	cmp	r2, #57	; 0x39
 8006a7e:	d106      	bne.n	8006a8e <_dtoa_r+0x6de>
 8006a80:	9a01      	ldr	r2, [sp, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d1f7      	bne.n	8006a76 <_dtoa_r+0x6c6>
 8006a86:	9901      	ldr	r1, [sp, #4]
 8006a88:	2230      	movs	r2, #48	; 0x30
 8006a8a:	3701      	adds	r7, #1
 8006a8c:	700a      	strb	r2, [r1, #0]
 8006a8e:	781a      	ldrb	r2, [r3, #0]
 8006a90:	3201      	adds	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	e790      	b.n	80069b8 <_dtoa_r+0x608>
 8006a96:	4ba6      	ldr	r3, [pc, #664]	; (8006d30 <_dtoa_r+0x980>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f7f9 fdc5 	bl	8000628 <__aeabi_dmul>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	f7fa f827 	bl	8000af8 <__aeabi_dcmpeq>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d09d      	beq.n	80069ea <_dtoa_r+0x63a>
 8006aae:	e7cf      	b.n	8006a50 <_dtoa_r+0x6a0>
 8006ab0:	9a08      	ldr	r2, [sp, #32]
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	f000 80d7 	beq.w	8006c66 <_dtoa_r+0x8b6>
 8006ab8:	9a06      	ldr	r2, [sp, #24]
 8006aba:	2a01      	cmp	r2, #1
 8006abc:	f300 80ba 	bgt.w	8006c34 <_dtoa_r+0x884>
 8006ac0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	f000 80b2 	beq.w	8006c2c <_dtoa_r+0x87c>
 8006ac8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006acc:	9e07      	ldr	r6, [sp, #28]
 8006ace:	9d04      	ldr	r5, [sp, #16]
 8006ad0:	9a04      	ldr	r2, [sp, #16]
 8006ad2:	441a      	add	r2, r3
 8006ad4:	9204      	str	r2, [sp, #16]
 8006ad6:	9a05      	ldr	r2, [sp, #20]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	441a      	add	r2, r3
 8006adc:	4620      	mov	r0, r4
 8006ade:	9205      	str	r2, [sp, #20]
 8006ae0:	f000 ff44 	bl	800796c <__i2b>
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	2d00      	cmp	r5, #0
 8006ae8:	dd0c      	ble.n	8006b04 <_dtoa_r+0x754>
 8006aea:	9b05      	ldr	r3, [sp, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dd09      	ble.n	8006b04 <_dtoa_r+0x754>
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	9a04      	ldr	r2, [sp, #16]
 8006af4:	bfa8      	it	ge
 8006af6:	462b      	movge	r3, r5
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	9204      	str	r2, [sp, #16]
 8006afc:	9a05      	ldr	r2, [sp, #20]
 8006afe:	1aed      	subs	r5, r5, r3
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	9305      	str	r3, [sp, #20]
 8006b04:	9b07      	ldr	r3, [sp, #28]
 8006b06:	b31b      	cbz	r3, 8006b50 <_dtoa_r+0x7a0>
 8006b08:	9b08      	ldr	r3, [sp, #32]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80af 	beq.w	8006c6e <_dtoa_r+0x8be>
 8006b10:	2e00      	cmp	r6, #0
 8006b12:	dd13      	ble.n	8006b3c <_dtoa_r+0x78c>
 8006b14:	4639      	mov	r1, r7
 8006b16:	4632      	mov	r2, r6
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 ffe7 	bl	8007aec <__pow5mult>
 8006b1e:	ee18 2a10 	vmov	r2, s16
 8006b22:	4601      	mov	r1, r0
 8006b24:	4607      	mov	r7, r0
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 ff36 	bl	8007998 <__multiply>
 8006b2c:	ee18 1a10 	vmov	r1, s16
 8006b30:	4680      	mov	r8, r0
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fe18 	bl	8007768 <_Bfree>
 8006b38:	ee08 8a10 	vmov	s16, r8
 8006b3c:	9b07      	ldr	r3, [sp, #28]
 8006b3e:	1b9a      	subs	r2, r3, r6
 8006b40:	d006      	beq.n	8006b50 <_dtoa_r+0x7a0>
 8006b42:	ee18 1a10 	vmov	r1, s16
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 ffd0 	bl	8007aec <__pow5mult>
 8006b4c:	ee08 0a10 	vmov	s16, r0
 8006b50:	2101      	movs	r1, #1
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 ff0a 	bl	800796c <__i2b>
 8006b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	f340 8088 	ble.w	8006c72 <_dtoa_r+0x8c2>
 8006b62:	461a      	mov	r2, r3
 8006b64:	4601      	mov	r1, r0
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 ffc0 	bl	8007aec <__pow5mult>
 8006b6c:	9b06      	ldr	r3, [sp, #24]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	4606      	mov	r6, r0
 8006b72:	f340 8081 	ble.w	8006c78 <_dtoa_r+0x8c8>
 8006b76:	f04f 0800 	mov.w	r8, #0
 8006b7a:	6933      	ldr	r3, [r6, #16]
 8006b7c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b80:	6918      	ldr	r0, [r3, #16]
 8006b82:	f000 fea3 	bl	80078cc <__hi0bits>
 8006b86:	f1c0 0020 	rsb	r0, r0, #32
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	4418      	add	r0, r3
 8006b8e:	f010 001f 	ands.w	r0, r0, #31
 8006b92:	f000 8092 	beq.w	8006cba <_dtoa_r+0x90a>
 8006b96:	f1c0 0320 	rsb	r3, r0, #32
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	f340 808a 	ble.w	8006cb4 <_dtoa_r+0x904>
 8006ba0:	f1c0 001c 	rsb	r0, r0, #28
 8006ba4:	9b04      	ldr	r3, [sp, #16]
 8006ba6:	4403      	add	r3, r0
 8006ba8:	9304      	str	r3, [sp, #16]
 8006baa:	9b05      	ldr	r3, [sp, #20]
 8006bac:	4403      	add	r3, r0
 8006bae:	4405      	add	r5, r0
 8006bb0:	9305      	str	r3, [sp, #20]
 8006bb2:	9b04      	ldr	r3, [sp, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dd07      	ble.n	8006bc8 <_dtoa_r+0x818>
 8006bb8:	ee18 1a10 	vmov	r1, s16
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 ffee 	bl	8007ba0 <__lshift>
 8006bc4:	ee08 0a10 	vmov	s16, r0
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dd05      	ble.n	8006bda <_dtoa_r+0x82a>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 ffe4 	bl	8007ba0 <__lshift>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d06e      	beq.n	8006cbe <_dtoa_r+0x90e>
 8006be0:	ee18 0a10 	vmov	r0, s16
 8006be4:	4631      	mov	r1, r6
 8006be6:	f001 f84b 	bl	8007c80 <__mcmp>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	da67      	bge.n	8006cbe <_dtoa_r+0x90e>
 8006bee:	9b00      	ldr	r3, [sp, #0]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	ee18 1a10 	vmov	r1, s16
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	220a      	movs	r2, #10
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fdd5 	bl	80077ac <__multadd>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	ee08 0a10 	vmov	s16, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 81b1 	beq.w	8006f70 <_dtoa_r+0xbc0>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4639      	mov	r1, r7
 8006c12:	220a      	movs	r2, #10
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fdc9 	bl	80077ac <__multadd>
 8006c1a:	9b02      	ldr	r3, [sp, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	4607      	mov	r7, r0
 8006c20:	f300 808e 	bgt.w	8006d40 <_dtoa_r+0x990>
 8006c24:	9b06      	ldr	r3, [sp, #24]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	dc51      	bgt.n	8006cce <_dtoa_r+0x91e>
 8006c2a:	e089      	b.n	8006d40 <_dtoa_r+0x990>
 8006c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c32:	e74b      	b.n	8006acc <_dtoa_r+0x71c>
 8006c34:	9b03      	ldr	r3, [sp, #12]
 8006c36:	1e5e      	subs	r6, r3, #1
 8006c38:	9b07      	ldr	r3, [sp, #28]
 8006c3a:	42b3      	cmp	r3, r6
 8006c3c:	bfbf      	itttt	lt
 8006c3e:	9b07      	ldrlt	r3, [sp, #28]
 8006c40:	9607      	strlt	r6, [sp, #28]
 8006c42:	1af2      	sublt	r2, r6, r3
 8006c44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c46:	bfb6      	itet	lt
 8006c48:	189b      	addlt	r3, r3, r2
 8006c4a:	1b9e      	subge	r6, r3, r6
 8006c4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	bfb8      	it	lt
 8006c52:	2600      	movlt	r6, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfb7      	itett	lt
 8006c58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c60:	1a9d      	sublt	r5, r3, r2
 8006c62:	2300      	movlt	r3, #0
 8006c64:	e734      	b.n	8006ad0 <_dtoa_r+0x720>
 8006c66:	9e07      	ldr	r6, [sp, #28]
 8006c68:	9d04      	ldr	r5, [sp, #16]
 8006c6a:	9f08      	ldr	r7, [sp, #32]
 8006c6c:	e73b      	b.n	8006ae6 <_dtoa_r+0x736>
 8006c6e:	9a07      	ldr	r2, [sp, #28]
 8006c70:	e767      	b.n	8006b42 <_dtoa_r+0x792>
 8006c72:	9b06      	ldr	r3, [sp, #24]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	dc18      	bgt.n	8006caa <_dtoa_r+0x8fa>
 8006c78:	f1ba 0f00 	cmp.w	sl, #0
 8006c7c:	d115      	bne.n	8006caa <_dtoa_r+0x8fa>
 8006c7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c82:	b993      	cbnz	r3, 8006caa <_dtoa_r+0x8fa>
 8006c84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c88:	0d1b      	lsrs	r3, r3, #20
 8006c8a:	051b      	lsls	r3, r3, #20
 8006c8c:	b183      	cbz	r3, 8006cb0 <_dtoa_r+0x900>
 8006c8e:	9b04      	ldr	r3, [sp, #16]
 8006c90:	3301      	adds	r3, #1
 8006c92:	9304      	str	r3, [sp, #16]
 8006c94:	9b05      	ldr	r3, [sp, #20]
 8006c96:	3301      	adds	r3, #1
 8006c98:	9305      	str	r3, [sp, #20]
 8006c9a:	f04f 0801 	mov.w	r8, #1
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f af6a 	bne.w	8006b7a <_dtoa_r+0x7ca>
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	e76f      	b.n	8006b8a <_dtoa_r+0x7da>
 8006caa:	f04f 0800 	mov.w	r8, #0
 8006cae:	e7f6      	b.n	8006c9e <_dtoa_r+0x8ee>
 8006cb0:	4698      	mov	r8, r3
 8006cb2:	e7f4      	b.n	8006c9e <_dtoa_r+0x8ee>
 8006cb4:	f43f af7d 	beq.w	8006bb2 <_dtoa_r+0x802>
 8006cb8:	4618      	mov	r0, r3
 8006cba:	301c      	adds	r0, #28
 8006cbc:	e772      	b.n	8006ba4 <_dtoa_r+0x7f4>
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	dc37      	bgt.n	8006d34 <_dtoa_r+0x984>
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	dd34      	ble.n	8006d34 <_dtoa_r+0x984>
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	9302      	str	r3, [sp, #8]
 8006cce:	9b02      	ldr	r3, [sp, #8]
 8006cd0:	b96b      	cbnz	r3, 8006cee <_dtoa_r+0x93e>
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f000 fd68 	bl	80077ac <__multadd>
 8006cdc:	4601      	mov	r1, r0
 8006cde:	4606      	mov	r6, r0
 8006ce0:	ee18 0a10 	vmov	r0, s16
 8006ce4:	f000 ffcc 	bl	8007c80 <__mcmp>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	f73f adbb 	bgt.w	8006864 <_dtoa_r+0x4b4>
 8006cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf0:	9d01      	ldr	r5, [sp, #4]
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 fd33 	bl	8007768 <_Bfree>
 8006d02:	2f00      	cmp	r7, #0
 8006d04:	f43f aea4 	beq.w	8006a50 <_dtoa_r+0x6a0>
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	d005      	beq.n	8006d1a <_dtoa_r+0x96a>
 8006d0e:	45b8      	cmp	r8, r7
 8006d10:	d003      	beq.n	8006d1a <_dtoa_r+0x96a>
 8006d12:	4641      	mov	r1, r8
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fd27 	bl	8007768 <_Bfree>
 8006d1a:	4639      	mov	r1, r7
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 fd23 	bl	8007768 <_Bfree>
 8006d22:	e695      	b.n	8006a50 <_dtoa_r+0x6a0>
 8006d24:	2600      	movs	r6, #0
 8006d26:	4637      	mov	r7, r6
 8006d28:	e7e1      	b.n	8006cee <_dtoa_r+0x93e>
 8006d2a:	9700      	str	r7, [sp, #0]
 8006d2c:	4637      	mov	r7, r6
 8006d2e:	e599      	b.n	8006864 <_dtoa_r+0x4b4>
 8006d30:	40240000 	.word	0x40240000
 8006d34:	9b08      	ldr	r3, [sp, #32]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 80ca 	beq.w	8006ed0 <_dtoa_r+0xb20>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	9302      	str	r3, [sp, #8]
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	dd05      	ble.n	8006d50 <_dtoa_r+0x9a0>
 8006d44:	4639      	mov	r1, r7
 8006d46:	462a      	mov	r2, r5
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f000 ff29 	bl	8007ba0 <__lshift>
 8006d4e:	4607      	mov	r7, r0
 8006d50:	f1b8 0f00 	cmp.w	r8, #0
 8006d54:	d05b      	beq.n	8006e0e <_dtoa_r+0xa5e>
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fcc5 	bl	80076e8 <_Balloc>
 8006d5e:	4605      	mov	r5, r0
 8006d60:	b928      	cbnz	r0, 8006d6e <_dtoa_r+0x9be>
 8006d62:	4b87      	ldr	r3, [pc, #540]	; (8006f80 <_dtoa_r+0xbd0>)
 8006d64:	4602      	mov	r2, r0
 8006d66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d6a:	f7ff bb3b 	b.w	80063e4 <_dtoa_r+0x34>
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	3202      	adds	r2, #2
 8006d72:	0092      	lsls	r2, r2, #2
 8006d74:	f107 010c 	add.w	r1, r7, #12
 8006d78:	300c      	adds	r0, #12
 8006d7a:	f000 fca7 	bl	80076cc <memcpy>
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4629      	mov	r1, r5
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 ff0c 	bl	8007ba0 <__lshift>
 8006d88:	9b01      	ldr	r3, [sp, #4]
 8006d8a:	f103 0901 	add.w	r9, r3, #1
 8006d8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d92:	4413      	add	r3, r2
 8006d94:	9305      	str	r3, [sp, #20]
 8006d96:	f00a 0301 	and.w	r3, sl, #1
 8006d9a:	46b8      	mov	r8, r7
 8006d9c:	9304      	str	r3, [sp, #16]
 8006d9e:	4607      	mov	r7, r0
 8006da0:	4631      	mov	r1, r6
 8006da2:	ee18 0a10 	vmov	r0, s16
 8006da6:	f7ff fa75 	bl	8006294 <quorem>
 8006daa:	4641      	mov	r1, r8
 8006dac:	9002      	str	r0, [sp, #8]
 8006dae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006db2:	ee18 0a10 	vmov	r0, s16
 8006db6:	f000 ff63 	bl	8007c80 <__mcmp>
 8006dba:	463a      	mov	r2, r7
 8006dbc:	9003      	str	r0, [sp, #12]
 8006dbe:	4631      	mov	r1, r6
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 ff79 	bl	8007cb8 <__mdiff>
 8006dc6:	68c2      	ldr	r2, [r0, #12]
 8006dc8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006dcc:	4605      	mov	r5, r0
 8006dce:	bb02      	cbnz	r2, 8006e12 <_dtoa_r+0xa62>
 8006dd0:	4601      	mov	r1, r0
 8006dd2:	ee18 0a10 	vmov	r0, s16
 8006dd6:	f000 ff53 	bl	8007c80 <__mcmp>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4620      	mov	r0, r4
 8006de0:	9207      	str	r2, [sp, #28]
 8006de2:	f000 fcc1 	bl	8007768 <_Bfree>
 8006de6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dea:	ea43 0102 	orr.w	r1, r3, r2
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	430b      	orrs	r3, r1
 8006df2:	464d      	mov	r5, r9
 8006df4:	d10f      	bne.n	8006e16 <_dtoa_r+0xa66>
 8006df6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dfa:	d02a      	beq.n	8006e52 <_dtoa_r+0xaa2>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dd02      	ble.n	8006e08 <_dtoa_r+0xa58>
 8006e02:	9b02      	ldr	r3, [sp, #8]
 8006e04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e08:	f88b a000 	strb.w	sl, [fp]
 8006e0c:	e775      	b.n	8006cfa <_dtoa_r+0x94a>
 8006e0e:	4638      	mov	r0, r7
 8006e10:	e7ba      	b.n	8006d88 <_dtoa_r+0x9d8>
 8006e12:	2201      	movs	r2, #1
 8006e14:	e7e2      	b.n	8006ddc <_dtoa_r+0xa2c>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	db04      	blt.n	8006e26 <_dtoa_r+0xa76>
 8006e1c:	9906      	ldr	r1, [sp, #24]
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	9904      	ldr	r1, [sp, #16]
 8006e22:	430b      	orrs	r3, r1
 8006e24:	d122      	bne.n	8006e6c <_dtoa_r+0xabc>
 8006e26:	2a00      	cmp	r2, #0
 8006e28:	ddee      	ble.n	8006e08 <_dtoa_r+0xa58>
 8006e2a:	ee18 1a10 	vmov	r1, s16
 8006e2e:	2201      	movs	r2, #1
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 feb5 	bl	8007ba0 <__lshift>
 8006e36:	4631      	mov	r1, r6
 8006e38:	ee08 0a10 	vmov	s16, r0
 8006e3c:	f000 ff20 	bl	8007c80 <__mcmp>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	dc03      	bgt.n	8006e4c <_dtoa_r+0xa9c>
 8006e44:	d1e0      	bne.n	8006e08 <_dtoa_r+0xa58>
 8006e46:	f01a 0f01 	tst.w	sl, #1
 8006e4a:	d0dd      	beq.n	8006e08 <_dtoa_r+0xa58>
 8006e4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e50:	d1d7      	bne.n	8006e02 <_dtoa_r+0xa52>
 8006e52:	2339      	movs	r3, #57	; 0x39
 8006e54:	f88b 3000 	strb.w	r3, [fp]
 8006e58:	462b      	mov	r3, r5
 8006e5a:	461d      	mov	r5, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e62:	2a39      	cmp	r2, #57	; 0x39
 8006e64:	d071      	beq.n	8006f4a <_dtoa_r+0xb9a>
 8006e66:	3201      	adds	r2, #1
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	e746      	b.n	8006cfa <_dtoa_r+0x94a>
 8006e6c:	2a00      	cmp	r2, #0
 8006e6e:	dd07      	ble.n	8006e80 <_dtoa_r+0xad0>
 8006e70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e74:	d0ed      	beq.n	8006e52 <_dtoa_r+0xaa2>
 8006e76:	f10a 0301 	add.w	r3, sl, #1
 8006e7a:	f88b 3000 	strb.w	r3, [fp]
 8006e7e:	e73c      	b.n	8006cfa <_dtoa_r+0x94a>
 8006e80:	9b05      	ldr	r3, [sp, #20]
 8006e82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e86:	4599      	cmp	r9, r3
 8006e88:	d047      	beq.n	8006f1a <_dtoa_r+0xb6a>
 8006e8a:	ee18 1a10 	vmov	r1, s16
 8006e8e:	2300      	movs	r3, #0
 8006e90:	220a      	movs	r2, #10
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fc8a 	bl	80077ac <__multadd>
 8006e98:	45b8      	cmp	r8, r7
 8006e9a:	ee08 0a10 	vmov	s16, r0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	f04f 020a 	mov.w	r2, #10
 8006ea6:	4641      	mov	r1, r8
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	d106      	bne.n	8006eba <_dtoa_r+0xb0a>
 8006eac:	f000 fc7e 	bl	80077ac <__multadd>
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	4607      	mov	r7, r0
 8006eb4:	f109 0901 	add.w	r9, r9, #1
 8006eb8:	e772      	b.n	8006da0 <_dtoa_r+0x9f0>
 8006eba:	f000 fc77 	bl	80077ac <__multadd>
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	220a      	movs	r2, #10
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 fc70 	bl	80077ac <__multadd>
 8006ecc:	4607      	mov	r7, r0
 8006ece:	e7f1      	b.n	8006eb4 <_dtoa_r+0xb04>
 8006ed0:	9b03      	ldr	r3, [sp, #12]
 8006ed2:	9302      	str	r3, [sp, #8]
 8006ed4:	9d01      	ldr	r5, [sp, #4]
 8006ed6:	ee18 0a10 	vmov	r0, s16
 8006eda:	4631      	mov	r1, r6
 8006edc:	f7ff f9da 	bl	8006294 <quorem>
 8006ee0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	f805 ab01 	strb.w	sl, [r5], #1
 8006eea:	1aea      	subs	r2, r5, r3
 8006eec:	9b02      	ldr	r3, [sp, #8]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	dd09      	ble.n	8006f06 <_dtoa_r+0xb56>
 8006ef2:	ee18 1a10 	vmov	r1, s16
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	220a      	movs	r2, #10
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 fc56 	bl	80077ac <__multadd>
 8006f00:	ee08 0a10 	vmov	s16, r0
 8006f04:	e7e7      	b.n	8006ed6 <_dtoa_r+0xb26>
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bfc8      	it	gt
 8006f0c:	461d      	movgt	r5, r3
 8006f0e:	9b01      	ldr	r3, [sp, #4]
 8006f10:	bfd8      	it	le
 8006f12:	2501      	movle	r5, #1
 8006f14:	441d      	add	r5, r3
 8006f16:	f04f 0800 	mov.w	r8, #0
 8006f1a:	ee18 1a10 	vmov	r1, s16
 8006f1e:	2201      	movs	r2, #1
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 fe3d 	bl	8007ba0 <__lshift>
 8006f26:	4631      	mov	r1, r6
 8006f28:	ee08 0a10 	vmov	s16, r0
 8006f2c:	f000 fea8 	bl	8007c80 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	dc91      	bgt.n	8006e58 <_dtoa_r+0xaa8>
 8006f34:	d102      	bne.n	8006f3c <_dtoa_r+0xb8c>
 8006f36:	f01a 0f01 	tst.w	sl, #1
 8006f3a:	d18d      	bne.n	8006e58 <_dtoa_r+0xaa8>
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	461d      	mov	r5, r3
 8006f40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f44:	2a30      	cmp	r2, #48	; 0x30
 8006f46:	d0fa      	beq.n	8006f3e <_dtoa_r+0xb8e>
 8006f48:	e6d7      	b.n	8006cfa <_dtoa_r+0x94a>
 8006f4a:	9a01      	ldr	r2, [sp, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d184      	bne.n	8006e5a <_dtoa_r+0xaaa>
 8006f50:	9b00      	ldr	r3, [sp, #0]
 8006f52:	3301      	adds	r3, #1
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	2331      	movs	r3, #49	; 0x31
 8006f58:	7013      	strb	r3, [r2, #0]
 8006f5a:	e6ce      	b.n	8006cfa <_dtoa_r+0x94a>
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <_dtoa_r+0xbd4>)
 8006f5e:	f7ff ba95 	b.w	800648c <_dtoa_r+0xdc>
 8006f62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f47f aa6e 	bne.w	8006446 <_dtoa_r+0x96>
 8006f6a:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <_dtoa_r+0xbd8>)
 8006f6c:	f7ff ba8e 	b.w	800648c <_dtoa_r+0xdc>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dcae      	bgt.n	8006ed4 <_dtoa_r+0xb24>
 8006f76:	9b06      	ldr	r3, [sp, #24]
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	f73f aea8 	bgt.w	8006cce <_dtoa_r+0x91e>
 8006f7e:	e7a9      	b.n	8006ed4 <_dtoa_r+0xb24>
 8006f80:	08009ff8 	.word	0x08009ff8
 8006f84:	0800a1f1 	.word	0x0800a1f1
 8006f88:	08009f79 	.word	0x08009f79

08006f8c <rshift>:
 8006f8c:	6903      	ldr	r3, [r0, #16]
 8006f8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006f9a:	f100 0414 	add.w	r4, r0, #20
 8006f9e:	dd45      	ble.n	800702c <rshift+0xa0>
 8006fa0:	f011 011f 	ands.w	r1, r1, #31
 8006fa4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006fa8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006fac:	d10c      	bne.n	8006fc8 <rshift+0x3c>
 8006fae:	f100 0710 	add.w	r7, r0, #16
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	42b1      	cmp	r1, r6
 8006fb6:	d334      	bcc.n	8007022 <rshift+0x96>
 8006fb8:	1a9b      	subs	r3, r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	1eea      	subs	r2, r5, #3
 8006fbe:	4296      	cmp	r6, r2
 8006fc0:	bf38      	it	cc
 8006fc2:	2300      	movcc	r3, #0
 8006fc4:	4423      	add	r3, r4
 8006fc6:	e015      	b.n	8006ff4 <rshift+0x68>
 8006fc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006fcc:	f1c1 0820 	rsb	r8, r1, #32
 8006fd0:	40cf      	lsrs	r7, r1
 8006fd2:	f105 0e04 	add.w	lr, r5, #4
 8006fd6:	46a1      	mov	r9, r4
 8006fd8:	4576      	cmp	r6, lr
 8006fda:	46f4      	mov	ip, lr
 8006fdc:	d815      	bhi.n	800700a <rshift+0x7e>
 8006fde:	1a9a      	subs	r2, r3, r2
 8006fe0:	0092      	lsls	r2, r2, #2
 8006fe2:	3a04      	subs	r2, #4
 8006fe4:	3501      	adds	r5, #1
 8006fe6:	42ae      	cmp	r6, r5
 8006fe8:	bf38      	it	cc
 8006fea:	2200      	movcc	r2, #0
 8006fec:	18a3      	adds	r3, r4, r2
 8006fee:	50a7      	str	r7, [r4, r2]
 8006ff0:	b107      	cbz	r7, 8006ff4 <rshift+0x68>
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	1b1a      	subs	r2, r3, r4
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006ffc:	bf08      	it	eq
 8006ffe:	2300      	moveq	r3, #0
 8007000:	6102      	str	r2, [r0, #16]
 8007002:	bf08      	it	eq
 8007004:	6143      	streq	r3, [r0, #20]
 8007006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800700a:	f8dc c000 	ldr.w	ip, [ip]
 800700e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007012:	ea4c 0707 	orr.w	r7, ip, r7
 8007016:	f849 7b04 	str.w	r7, [r9], #4
 800701a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800701e:	40cf      	lsrs	r7, r1
 8007020:	e7da      	b.n	8006fd8 <rshift+0x4c>
 8007022:	f851 cb04 	ldr.w	ip, [r1], #4
 8007026:	f847 cf04 	str.w	ip, [r7, #4]!
 800702a:	e7c3      	b.n	8006fb4 <rshift+0x28>
 800702c:	4623      	mov	r3, r4
 800702e:	e7e1      	b.n	8006ff4 <rshift+0x68>

08007030 <__hexdig_fun>:
 8007030:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007034:	2b09      	cmp	r3, #9
 8007036:	d802      	bhi.n	800703e <__hexdig_fun+0xe>
 8007038:	3820      	subs	r0, #32
 800703a:	b2c0      	uxtb	r0, r0
 800703c:	4770      	bx	lr
 800703e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007042:	2b05      	cmp	r3, #5
 8007044:	d801      	bhi.n	800704a <__hexdig_fun+0x1a>
 8007046:	3847      	subs	r0, #71	; 0x47
 8007048:	e7f7      	b.n	800703a <__hexdig_fun+0xa>
 800704a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800704e:	2b05      	cmp	r3, #5
 8007050:	d801      	bhi.n	8007056 <__hexdig_fun+0x26>
 8007052:	3827      	subs	r0, #39	; 0x27
 8007054:	e7f1      	b.n	800703a <__hexdig_fun+0xa>
 8007056:	2000      	movs	r0, #0
 8007058:	4770      	bx	lr
	...

0800705c <__gethex>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	ed2d 8b02 	vpush	{d8}
 8007064:	b089      	sub	sp, #36	; 0x24
 8007066:	ee08 0a10 	vmov	s16, r0
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	4bb4      	ldr	r3, [pc, #720]	; (8007340 <__gethex+0x2e4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	4618      	mov	r0, r3
 8007074:	468b      	mov	fp, r1
 8007076:	4690      	mov	r8, r2
 8007078:	f7f9 f8bc 	bl	80001f4 <strlen>
 800707c:	9b01      	ldr	r3, [sp, #4]
 800707e:	f8db 2000 	ldr.w	r2, [fp]
 8007082:	4403      	add	r3, r0
 8007084:	4682      	mov	sl, r0
 8007086:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	1c93      	adds	r3, r2, #2
 800708e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007092:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007096:	32fe      	adds	r2, #254	; 0xfe
 8007098:	18d1      	adds	r1, r2, r3
 800709a:	461f      	mov	r7, r3
 800709c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80070a0:	9100      	str	r1, [sp, #0]
 80070a2:	2830      	cmp	r0, #48	; 0x30
 80070a4:	d0f8      	beq.n	8007098 <__gethex+0x3c>
 80070a6:	f7ff ffc3 	bl	8007030 <__hexdig_fun>
 80070aa:	4604      	mov	r4, r0
 80070ac:	2800      	cmp	r0, #0
 80070ae:	d13a      	bne.n	8007126 <__gethex+0xca>
 80070b0:	9901      	ldr	r1, [sp, #4]
 80070b2:	4652      	mov	r2, sl
 80070b4:	4638      	mov	r0, r7
 80070b6:	f001 fdb3 	bl	8008c20 <strncmp>
 80070ba:	4605      	mov	r5, r0
 80070bc:	2800      	cmp	r0, #0
 80070be:	d168      	bne.n	8007192 <__gethex+0x136>
 80070c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80070c4:	eb07 060a 	add.w	r6, r7, sl
 80070c8:	f7ff ffb2 	bl	8007030 <__hexdig_fun>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d062      	beq.n	8007196 <__gethex+0x13a>
 80070d0:	4633      	mov	r3, r6
 80070d2:	7818      	ldrb	r0, [r3, #0]
 80070d4:	2830      	cmp	r0, #48	; 0x30
 80070d6:	461f      	mov	r7, r3
 80070d8:	f103 0301 	add.w	r3, r3, #1
 80070dc:	d0f9      	beq.n	80070d2 <__gethex+0x76>
 80070de:	f7ff ffa7 	bl	8007030 <__hexdig_fun>
 80070e2:	2301      	movs	r3, #1
 80070e4:	fab0 f480 	clz	r4, r0
 80070e8:	0964      	lsrs	r4, r4, #5
 80070ea:	4635      	mov	r5, r6
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	463a      	mov	r2, r7
 80070f0:	4616      	mov	r6, r2
 80070f2:	3201      	adds	r2, #1
 80070f4:	7830      	ldrb	r0, [r6, #0]
 80070f6:	f7ff ff9b 	bl	8007030 <__hexdig_fun>
 80070fa:	2800      	cmp	r0, #0
 80070fc:	d1f8      	bne.n	80070f0 <__gethex+0x94>
 80070fe:	9901      	ldr	r1, [sp, #4]
 8007100:	4652      	mov	r2, sl
 8007102:	4630      	mov	r0, r6
 8007104:	f001 fd8c 	bl	8008c20 <strncmp>
 8007108:	b980      	cbnz	r0, 800712c <__gethex+0xd0>
 800710a:	b94d      	cbnz	r5, 8007120 <__gethex+0xc4>
 800710c:	eb06 050a 	add.w	r5, r6, sl
 8007110:	462a      	mov	r2, r5
 8007112:	4616      	mov	r6, r2
 8007114:	3201      	adds	r2, #1
 8007116:	7830      	ldrb	r0, [r6, #0]
 8007118:	f7ff ff8a 	bl	8007030 <__hexdig_fun>
 800711c:	2800      	cmp	r0, #0
 800711e:	d1f8      	bne.n	8007112 <__gethex+0xb6>
 8007120:	1bad      	subs	r5, r5, r6
 8007122:	00ad      	lsls	r5, r5, #2
 8007124:	e004      	b.n	8007130 <__gethex+0xd4>
 8007126:	2400      	movs	r4, #0
 8007128:	4625      	mov	r5, r4
 800712a:	e7e0      	b.n	80070ee <__gethex+0x92>
 800712c:	2d00      	cmp	r5, #0
 800712e:	d1f7      	bne.n	8007120 <__gethex+0xc4>
 8007130:	7833      	ldrb	r3, [r6, #0]
 8007132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007136:	2b50      	cmp	r3, #80	; 0x50
 8007138:	d13b      	bne.n	80071b2 <__gethex+0x156>
 800713a:	7873      	ldrb	r3, [r6, #1]
 800713c:	2b2b      	cmp	r3, #43	; 0x2b
 800713e:	d02c      	beq.n	800719a <__gethex+0x13e>
 8007140:	2b2d      	cmp	r3, #45	; 0x2d
 8007142:	d02e      	beq.n	80071a2 <__gethex+0x146>
 8007144:	1c71      	adds	r1, r6, #1
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	7808      	ldrb	r0, [r1, #0]
 800714c:	f7ff ff70 	bl	8007030 <__hexdig_fun>
 8007150:	1e43      	subs	r3, r0, #1
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b18      	cmp	r3, #24
 8007156:	d82c      	bhi.n	80071b2 <__gethex+0x156>
 8007158:	f1a0 0210 	sub.w	r2, r0, #16
 800715c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007160:	f7ff ff66 	bl	8007030 <__hexdig_fun>
 8007164:	1e43      	subs	r3, r0, #1
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b18      	cmp	r3, #24
 800716a:	d91d      	bls.n	80071a8 <__gethex+0x14c>
 800716c:	f1b9 0f00 	cmp.w	r9, #0
 8007170:	d000      	beq.n	8007174 <__gethex+0x118>
 8007172:	4252      	negs	r2, r2
 8007174:	4415      	add	r5, r2
 8007176:	f8cb 1000 	str.w	r1, [fp]
 800717a:	b1e4      	cbz	r4, 80071b6 <__gethex+0x15a>
 800717c:	9b00      	ldr	r3, [sp, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bf14      	ite	ne
 8007182:	2700      	movne	r7, #0
 8007184:	2706      	moveq	r7, #6
 8007186:	4638      	mov	r0, r7
 8007188:	b009      	add	sp, #36	; 0x24
 800718a:	ecbd 8b02 	vpop	{d8}
 800718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007192:	463e      	mov	r6, r7
 8007194:	4625      	mov	r5, r4
 8007196:	2401      	movs	r4, #1
 8007198:	e7ca      	b.n	8007130 <__gethex+0xd4>
 800719a:	f04f 0900 	mov.w	r9, #0
 800719e:	1cb1      	adds	r1, r6, #2
 80071a0:	e7d3      	b.n	800714a <__gethex+0xee>
 80071a2:	f04f 0901 	mov.w	r9, #1
 80071a6:	e7fa      	b.n	800719e <__gethex+0x142>
 80071a8:	230a      	movs	r3, #10
 80071aa:	fb03 0202 	mla	r2, r3, r2, r0
 80071ae:	3a10      	subs	r2, #16
 80071b0:	e7d4      	b.n	800715c <__gethex+0x100>
 80071b2:	4631      	mov	r1, r6
 80071b4:	e7df      	b.n	8007176 <__gethex+0x11a>
 80071b6:	1bf3      	subs	r3, r6, r7
 80071b8:	3b01      	subs	r3, #1
 80071ba:	4621      	mov	r1, r4
 80071bc:	2b07      	cmp	r3, #7
 80071be:	dc0b      	bgt.n	80071d8 <__gethex+0x17c>
 80071c0:	ee18 0a10 	vmov	r0, s16
 80071c4:	f000 fa90 	bl	80076e8 <_Balloc>
 80071c8:	4604      	mov	r4, r0
 80071ca:	b940      	cbnz	r0, 80071de <__gethex+0x182>
 80071cc:	4b5d      	ldr	r3, [pc, #372]	; (8007344 <__gethex+0x2e8>)
 80071ce:	4602      	mov	r2, r0
 80071d0:	21de      	movs	r1, #222	; 0xde
 80071d2:	485d      	ldr	r0, [pc, #372]	; (8007348 <__gethex+0x2ec>)
 80071d4:	f001 fdf4 	bl	8008dc0 <__assert_func>
 80071d8:	3101      	adds	r1, #1
 80071da:	105b      	asrs	r3, r3, #1
 80071dc:	e7ee      	b.n	80071bc <__gethex+0x160>
 80071de:	f100 0914 	add.w	r9, r0, #20
 80071e2:	f04f 0b00 	mov.w	fp, #0
 80071e6:	f1ca 0301 	rsb	r3, sl, #1
 80071ea:	f8cd 9008 	str.w	r9, [sp, #8]
 80071ee:	f8cd b000 	str.w	fp, [sp]
 80071f2:	9306      	str	r3, [sp, #24]
 80071f4:	42b7      	cmp	r7, r6
 80071f6:	d340      	bcc.n	800727a <__gethex+0x21e>
 80071f8:	9802      	ldr	r0, [sp, #8]
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	f840 3b04 	str.w	r3, [r0], #4
 8007200:	eba0 0009 	sub.w	r0, r0, r9
 8007204:	1080      	asrs	r0, r0, #2
 8007206:	0146      	lsls	r6, r0, #5
 8007208:	6120      	str	r0, [r4, #16]
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fb5e 	bl	80078cc <__hi0bits>
 8007210:	1a30      	subs	r0, r6, r0
 8007212:	f8d8 6000 	ldr.w	r6, [r8]
 8007216:	42b0      	cmp	r0, r6
 8007218:	dd63      	ble.n	80072e2 <__gethex+0x286>
 800721a:	1b87      	subs	r7, r0, r6
 800721c:	4639      	mov	r1, r7
 800721e:	4620      	mov	r0, r4
 8007220:	f000 ff02 	bl	8008028 <__any_on>
 8007224:	4682      	mov	sl, r0
 8007226:	b1a8      	cbz	r0, 8007254 <__gethex+0x1f8>
 8007228:	1e7b      	subs	r3, r7, #1
 800722a:	1159      	asrs	r1, r3, #5
 800722c:	f003 021f 	and.w	r2, r3, #31
 8007230:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007234:	f04f 0a01 	mov.w	sl, #1
 8007238:	fa0a f202 	lsl.w	r2, sl, r2
 800723c:	420a      	tst	r2, r1
 800723e:	d009      	beq.n	8007254 <__gethex+0x1f8>
 8007240:	4553      	cmp	r3, sl
 8007242:	dd05      	ble.n	8007250 <__gethex+0x1f4>
 8007244:	1eb9      	subs	r1, r7, #2
 8007246:	4620      	mov	r0, r4
 8007248:	f000 feee 	bl	8008028 <__any_on>
 800724c:	2800      	cmp	r0, #0
 800724e:	d145      	bne.n	80072dc <__gethex+0x280>
 8007250:	f04f 0a02 	mov.w	sl, #2
 8007254:	4639      	mov	r1, r7
 8007256:	4620      	mov	r0, r4
 8007258:	f7ff fe98 	bl	8006f8c <rshift>
 800725c:	443d      	add	r5, r7
 800725e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007262:	42ab      	cmp	r3, r5
 8007264:	da4c      	bge.n	8007300 <__gethex+0x2a4>
 8007266:	ee18 0a10 	vmov	r0, s16
 800726a:	4621      	mov	r1, r4
 800726c:	f000 fa7c 	bl	8007768 <_Bfree>
 8007270:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007272:	2300      	movs	r3, #0
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	27a3      	movs	r7, #163	; 0xa3
 8007278:	e785      	b.n	8007186 <__gethex+0x12a>
 800727a:	1e73      	subs	r3, r6, #1
 800727c:	9a05      	ldr	r2, [sp, #20]
 800727e:	9303      	str	r3, [sp, #12]
 8007280:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007284:	4293      	cmp	r3, r2
 8007286:	d019      	beq.n	80072bc <__gethex+0x260>
 8007288:	f1bb 0f20 	cmp.w	fp, #32
 800728c:	d107      	bne.n	800729e <__gethex+0x242>
 800728e:	9b02      	ldr	r3, [sp, #8]
 8007290:	9a00      	ldr	r2, [sp, #0]
 8007292:	f843 2b04 	str.w	r2, [r3], #4
 8007296:	9302      	str	r3, [sp, #8]
 8007298:	2300      	movs	r3, #0
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	469b      	mov	fp, r3
 800729e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80072a2:	f7ff fec5 	bl	8007030 <__hexdig_fun>
 80072a6:	9b00      	ldr	r3, [sp, #0]
 80072a8:	f000 000f 	and.w	r0, r0, #15
 80072ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80072b0:	4303      	orrs	r3, r0
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	f10b 0b04 	add.w	fp, fp, #4
 80072b8:	9b03      	ldr	r3, [sp, #12]
 80072ba:	e00d      	b.n	80072d8 <__gethex+0x27c>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	9a06      	ldr	r2, [sp, #24]
 80072c0:	4413      	add	r3, r2
 80072c2:	42bb      	cmp	r3, r7
 80072c4:	d3e0      	bcc.n	8007288 <__gethex+0x22c>
 80072c6:	4618      	mov	r0, r3
 80072c8:	9901      	ldr	r1, [sp, #4]
 80072ca:	9307      	str	r3, [sp, #28]
 80072cc:	4652      	mov	r2, sl
 80072ce:	f001 fca7 	bl	8008c20 <strncmp>
 80072d2:	9b07      	ldr	r3, [sp, #28]
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1d7      	bne.n	8007288 <__gethex+0x22c>
 80072d8:	461e      	mov	r6, r3
 80072da:	e78b      	b.n	80071f4 <__gethex+0x198>
 80072dc:	f04f 0a03 	mov.w	sl, #3
 80072e0:	e7b8      	b.n	8007254 <__gethex+0x1f8>
 80072e2:	da0a      	bge.n	80072fa <__gethex+0x29e>
 80072e4:	1a37      	subs	r7, r6, r0
 80072e6:	4621      	mov	r1, r4
 80072e8:	ee18 0a10 	vmov	r0, s16
 80072ec:	463a      	mov	r2, r7
 80072ee:	f000 fc57 	bl	8007ba0 <__lshift>
 80072f2:	1bed      	subs	r5, r5, r7
 80072f4:	4604      	mov	r4, r0
 80072f6:	f100 0914 	add.w	r9, r0, #20
 80072fa:	f04f 0a00 	mov.w	sl, #0
 80072fe:	e7ae      	b.n	800725e <__gethex+0x202>
 8007300:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007304:	42a8      	cmp	r0, r5
 8007306:	dd72      	ble.n	80073ee <__gethex+0x392>
 8007308:	1b45      	subs	r5, r0, r5
 800730a:	42ae      	cmp	r6, r5
 800730c:	dc36      	bgt.n	800737c <__gethex+0x320>
 800730e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d02a      	beq.n	800736c <__gethex+0x310>
 8007316:	2b03      	cmp	r3, #3
 8007318:	d02c      	beq.n	8007374 <__gethex+0x318>
 800731a:	2b01      	cmp	r3, #1
 800731c:	d11c      	bne.n	8007358 <__gethex+0x2fc>
 800731e:	42ae      	cmp	r6, r5
 8007320:	d11a      	bne.n	8007358 <__gethex+0x2fc>
 8007322:	2e01      	cmp	r6, #1
 8007324:	d112      	bne.n	800734c <__gethex+0x2f0>
 8007326:	9a04      	ldr	r2, [sp, #16]
 8007328:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	2301      	movs	r3, #1
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	f8c9 3000 	str.w	r3, [r9]
 8007336:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007338:	2762      	movs	r7, #98	; 0x62
 800733a:	601c      	str	r4, [r3, #0]
 800733c:	e723      	b.n	8007186 <__gethex+0x12a>
 800733e:	bf00      	nop
 8007340:	0800a070 	.word	0x0800a070
 8007344:	08009ff8 	.word	0x08009ff8
 8007348:	0800a009 	.word	0x0800a009
 800734c:	1e71      	subs	r1, r6, #1
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fe6a 	bl	8008028 <__any_on>
 8007354:	2800      	cmp	r0, #0
 8007356:	d1e6      	bne.n	8007326 <__gethex+0x2ca>
 8007358:	ee18 0a10 	vmov	r0, s16
 800735c:	4621      	mov	r1, r4
 800735e:	f000 fa03 	bl	8007768 <_Bfree>
 8007362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007364:	2300      	movs	r3, #0
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	2750      	movs	r7, #80	; 0x50
 800736a:	e70c      	b.n	8007186 <__gethex+0x12a>
 800736c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800736e:	2b00      	cmp	r3, #0
 8007370:	d1f2      	bne.n	8007358 <__gethex+0x2fc>
 8007372:	e7d8      	b.n	8007326 <__gethex+0x2ca>
 8007374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1d5      	bne.n	8007326 <__gethex+0x2ca>
 800737a:	e7ed      	b.n	8007358 <__gethex+0x2fc>
 800737c:	1e6f      	subs	r7, r5, #1
 800737e:	f1ba 0f00 	cmp.w	sl, #0
 8007382:	d131      	bne.n	80073e8 <__gethex+0x38c>
 8007384:	b127      	cbz	r7, 8007390 <__gethex+0x334>
 8007386:	4639      	mov	r1, r7
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fe4d 	bl	8008028 <__any_on>
 800738e:	4682      	mov	sl, r0
 8007390:	117b      	asrs	r3, r7, #5
 8007392:	2101      	movs	r1, #1
 8007394:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007398:	f007 071f 	and.w	r7, r7, #31
 800739c:	fa01 f707 	lsl.w	r7, r1, r7
 80073a0:	421f      	tst	r7, r3
 80073a2:	4629      	mov	r1, r5
 80073a4:	4620      	mov	r0, r4
 80073a6:	bf18      	it	ne
 80073a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80073ac:	1b76      	subs	r6, r6, r5
 80073ae:	f7ff fded 	bl	8006f8c <rshift>
 80073b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80073b6:	2702      	movs	r7, #2
 80073b8:	f1ba 0f00 	cmp.w	sl, #0
 80073bc:	d048      	beq.n	8007450 <__gethex+0x3f4>
 80073be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d015      	beq.n	80073f2 <__gethex+0x396>
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d017      	beq.n	80073fa <__gethex+0x39e>
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d109      	bne.n	80073e2 <__gethex+0x386>
 80073ce:	f01a 0f02 	tst.w	sl, #2
 80073d2:	d006      	beq.n	80073e2 <__gethex+0x386>
 80073d4:	f8d9 0000 	ldr.w	r0, [r9]
 80073d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80073dc:	f01a 0f01 	tst.w	sl, #1
 80073e0:	d10e      	bne.n	8007400 <__gethex+0x3a4>
 80073e2:	f047 0710 	orr.w	r7, r7, #16
 80073e6:	e033      	b.n	8007450 <__gethex+0x3f4>
 80073e8:	f04f 0a01 	mov.w	sl, #1
 80073ec:	e7d0      	b.n	8007390 <__gethex+0x334>
 80073ee:	2701      	movs	r7, #1
 80073f0:	e7e2      	b.n	80073b8 <__gethex+0x35c>
 80073f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073f4:	f1c3 0301 	rsb	r3, r3, #1
 80073f8:	9315      	str	r3, [sp, #84]	; 0x54
 80073fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <__gethex+0x386>
 8007400:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007404:	f104 0314 	add.w	r3, r4, #20
 8007408:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800740c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007410:	f04f 0c00 	mov.w	ip, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f853 2b04 	ldr.w	r2, [r3], #4
 800741a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800741e:	d01c      	beq.n	800745a <__gethex+0x3fe>
 8007420:	3201      	adds	r2, #1
 8007422:	6002      	str	r2, [r0, #0]
 8007424:	2f02      	cmp	r7, #2
 8007426:	f104 0314 	add.w	r3, r4, #20
 800742a:	d13f      	bne.n	80074ac <__gethex+0x450>
 800742c:	f8d8 2000 	ldr.w	r2, [r8]
 8007430:	3a01      	subs	r2, #1
 8007432:	42b2      	cmp	r2, r6
 8007434:	d10a      	bne.n	800744c <__gethex+0x3f0>
 8007436:	1171      	asrs	r1, r6, #5
 8007438:	2201      	movs	r2, #1
 800743a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800743e:	f006 061f 	and.w	r6, r6, #31
 8007442:	fa02 f606 	lsl.w	r6, r2, r6
 8007446:	421e      	tst	r6, r3
 8007448:	bf18      	it	ne
 800744a:	4617      	movne	r7, r2
 800744c:	f047 0720 	orr.w	r7, r7, #32
 8007450:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007452:	601c      	str	r4, [r3, #0]
 8007454:	9b04      	ldr	r3, [sp, #16]
 8007456:	601d      	str	r5, [r3, #0]
 8007458:	e695      	b.n	8007186 <__gethex+0x12a>
 800745a:	4299      	cmp	r1, r3
 800745c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007460:	d8d8      	bhi.n	8007414 <__gethex+0x3b8>
 8007462:	68a3      	ldr	r3, [r4, #8]
 8007464:	459b      	cmp	fp, r3
 8007466:	db19      	blt.n	800749c <__gethex+0x440>
 8007468:	6861      	ldr	r1, [r4, #4]
 800746a:	ee18 0a10 	vmov	r0, s16
 800746e:	3101      	adds	r1, #1
 8007470:	f000 f93a 	bl	80076e8 <_Balloc>
 8007474:	4681      	mov	r9, r0
 8007476:	b918      	cbnz	r0, 8007480 <__gethex+0x424>
 8007478:	4b1a      	ldr	r3, [pc, #104]	; (80074e4 <__gethex+0x488>)
 800747a:	4602      	mov	r2, r0
 800747c:	2184      	movs	r1, #132	; 0x84
 800747e:	e6a8      	b.n	80071d2 <__gethex+0x176>
 8007480:	6922      	ldr	r2, [r4, #16]
 8007482:	3202      	adds	r2, #2
 8007484:	f104 010c 	add.w	r1, r4, #12
 8007488:	0092      	lsls	r2, r2, #2
 800748a:	300c      	adds	r0, #12
 800748c:	f000 f91e 	bl	80076cc <memcpy>
 8007490:	4621      	mov	r1, r4
 8007492:	ee18 0a10 	vmov	r0, s16
 8007496:	f000 f967 	bl	8007768 <_Bfree>
 800749a:	464c      	mov	r4, r9
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074a4:	6122      	str	r2, [r4, #16]
 80074a6:	2201      	movs	r2, #1
 80074a8:	615a      	str	r2, [r3, #20]
 80074aa:	e7bb      	b.n	8007424 <__gethex+0x3c8>
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	455a      	cmp	r2, fp
 80074b0:	dd0b      	ble.n	80074ca <__gethex+0x46e>
 80074b2:	2101      	movs	r1, #1
 80074b4:	4620      	mov	r0, r4
 80074b6:	f7ff fd69 	bl	8006f8c <rshift>
 80074ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074be:	3501      	adds	r5, #1
 80074c0:	42ab      	cmp	r3, r5
 80074c2:	f6ff aed0 	blt.w	8007266 <__gethex+0x20a>
 80074c6:	2701      	movs	r7, #1
 80074c8:	e7c0      	b.n	800744c <__gethex+0x3f0>
 80074ca:	f016 061f 	ands.w	r6, r6, #31
 80074ce:	d0fa      	beq.n	80074c6 <__gethex+0x46a>
 80074d0:	4453      	add	r3, sl
 80074d2:	f1c6 0620 	rsb	r6, r6, #32
 80074d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80074da:	f000 f9f7 	bl	80078cc <__hi0bits>
 80074de:	42b0      	cmp	r0, r6
 80074e0:	dbe7      	blt.n	80074b2 <__gethex+0x456>
 80074e2:	e7f0      	b.n	80074c6 <__gethex+0x46a>
 80074e4:	08009ff8 	.word	0x08009ff8

080074e8 <L_shift>:
 80074e8:	f1c2 0208 	rsb	r2, r2, #8
 80074ec:	0092      	lsls	r2, r2, #2
 80074ee:	b570      	push	{r4, r5, r6, lr}
 80074f0:	f1c2 0620 	rsb	r6, r2, #32
 80074f4:	6843      	ldr	r3, [r0, #4]
 80074f6:	6804      	ldr	r4, [r0, #0]
 80074f8:	fa03 f506 	lsl.w	r5, r3, r6
 80074fc:	432c      	orrs	r4, r5
 80074fe:	40d3      	lsrs	r3, r2
 8007500:	6004      	str	r4, [r0, #0]
 8007502:	f840 3f04 	str.w	r3, [r0, #4]!
 8007506:	4288      	cmp	r0, r1
 8007508:	d3f4      	bcc.n	80074f4 <L_shift+0xc>
 800750a:	bd70      	pop	{r4, r5, r6, pc}

0800750c <__match>:
 800750c:	b530      	push	{r4, r5, lr}
 800750e:	6803      	ldr	r3, [r0, #0]
 8007510:	3301      	adds	r3, #1
 8007512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007516:	b914      	cbnz	r4, 800751e <__match+0x12>
 8007518:	6003      	str	r3, [r0, #0]
 800751a:	2001      	movs	r0, #1
 800751c:	bd30      	pop	{r4, r5, pc}
 800751e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007522:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007526:	2d19      	cmp	r5, #25
 8007528:	bf98      	it	ls
 800752a:	3220      	addls	r2, #32
 800752c:	42a2      	cmp	r2, r4
 800752e:	d0f0      	beq.n	8007512 <__match+0x6>
 8007530:	2000      	movs	r0, #0
 8007532:	e7f3      	b.n	800751c <__match+0x10>

08007534 <__hexnan>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	680b      	ldr	r3, [r1, #0]
 800753a:	115e      	asrs	r6, r3, #5
 800753c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007540:	f013 031f 	ands.w	r3, r3, #31
 8007544:	b087      	sub	sp, #28
 8007546:	bf18      	it	ne
 8007548:	3604      	addne	r6, #4
 800754a:	2500      	movs	r5, #0
 800754c:	1f37      	subs	r7, r6, #4
 800754e:	4690      	mov	r8, r2
 8007550:	6802      	ldr	r2, [r0, #0]
 8007552:	9301      	str	r3, [sp, #4]
 8007554:	4682      	mov	sl, r0
 8007556:	f846 5c04 	str.w	r5, [r6, #-4]
 800755a:	46b9      	mov	r9, r7
 800755c:	463c      	mov	r4, r7
 800755e:	9502      	str	r5, [sp, #8]
 8007560:	46ab      	mov	fp, r5
 8007562:	7851      	ldrb	r1, [r2, #1]
 8007564:	1c53      	adds	r3, r2, #1
 8007566:	9303      	str	r3, [sp, #12]
 8007568:	b341      	cbz	r1, 80075bc <__hexnan+0x88>
 800756a:	4608      	mov	r0, r1
 800756c:	9205      	str	r2, [sp, #20]
 800756e:	9104      	str	r1, [sp, #16]
 8007570:	f7ff fd5e 	bl	8007030 <__hexdig_fun>
 8007574:	2800      	cmp	r0, #0
 8007576:	d14f      	bne.n	8007618 <__hexnan+0xe4>
 8007578:	9904      	ldr	r1, [sp, #16]
 800757a:	9a05      	ldr	r2, [sp, #20]
 800757c:	2920      	cmp	r1, #32
 800757e:	d818      	bhi.n	80075b2 <__hexnan+0x7e>
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	459b      	cmp	fp, r3
 8007584:	dd13      	ble.n	80075ae <__hexnan+0x7a>
 8007586:	454c      	cmp	r4, r9
 8007588:	d206      	bcs.n	8007598 <__hexnan+0x64>
 800758a:	2d07      	cmp	r5, #7
 800758c:	dc04      	bgt.n	8007598 <__hexnan+0x64>
 800758e:	462a      	mov	r2, r5
 8007590:	4649      	mov	r1, r9
 8007592:	4620      	mov	r0, r4
 8007594:	f7ff ffa8 	bl	80074e8 <L_shift>
 8007598:	4544      	cmp	r4, r8
 800759a:	d950      	bls.n	800763e <__hexnan+0x10a>
 800759c:	2300      	movs	r3, #0
 800759e:	f1a4 0904 	sub.w	r9, r4, #4
 80075a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80075a6:	f8cd b008 	str.w	fp, [sp, #8]
 80075aa:	464c      	mov	r4, r9
 80075ac:	461d      	mov	r5, r3
 80075ae:	9a03      	ldr	r2, [sp, #12]
 80075b0:	e7d7      	b.n	8007562 <__hexnan+0x2e>
 80075b2:	2929      	cmp	r1, #41	; 0x29
 80075b4:	d156      	bne.n	8007664 <__hexnan+0x130>
 80075b6:	3202      	adds	r2, #2
 80075b8:	f8ca 2000 	str.w	r2, [sl]
 80075bc:	f1bb 0f00 	cmp.w	fp, #0
 80075c0:	d050      	beq.n	8007664 <__hexnan+0x130>
 80075c2:	454c      	cmp	r4, r9
 80075c4:	d206      	bcs.n	80075d4 <__hexnan+0xa0>
 80075c6:	2d07      	cmp	r5, #7
 80075c8:	dc04      	bgt.n	80075d4 <__hexnan+0xa0>
 80075ca:	462a      	mov	r2, r5
 80075cc:	4649      	mov	r1, r9
 80075ce:	4620      	mov	r0, r4
 80075d0:	f7ff ff8a 	bl	80074e8 <L_shift>
 80075d4:	4544      	cmp	r4, r8
 80075d6:	d934      	bls.n	8007642 <__hexnan+0x10e>
 80075d8:	f1a8 0204 	sub.w	r2, r8, #4
 80075dc:	4623      	mov	r3, r4
 80075de:	f853 1b04 	ldr.w	r1, [r3], #4
 80075e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80075e6:	429f      	cmp	r7, r3
 80075e8:	d2f9      	bcs.n	80075de <__hexnan+0xaa>
 80075ea:	1b3b      	subs	r3, r7, r4
 80075ec:	f023 0303 	bic.w	r3, r3, #3
 80075f0:	3304      	adds	r3, #4
 80075f2:	3401      	adds	r4, #1
 80075f4:	3e03      	subs	r6, #3
 80075f6:	42b4      	cmp	r4, r6
 80075f8:	bf88      	it	hi
 80075fa:	2304      	movhi	r3, #4
 80075fc:	4443      	add	r3, r8
 80075fe:	2200      	movs	r2, #0
 8007600:	f843 2b04 	str.w	r2, [r3], #4
 8007604:	429f      	cmp	r7, r3
 8007606:	d2fb      	bcs.n	8007600 <__hexnan+0xcc>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	b91b      	cbnz	r3, 8007614 <__hexnan+0xe0>
 800760c:	4547      	cmp	r7, r8
 800760e:	d127      	bne.n	8007660 <__hexnan+0x12c>
 8007610:	2301      	movs	r3, #1
 8007612:	603b      	str	r3, [r7, #0]
 8007614:	2005      	movs	r0, #5
 8007616:	e026      	b.n	8007666 <__hexnan+0x132>
 8007618:	3501      	adds	r5, #1
 800761a:	2d08      	cmp	r5, #8
 800761c:	f10b 0b01 	add.w	fp, fp, #1
 8007620:	dd06      	ble.n	8007630 <__hexnan+0xfc>
 8007622:	4544      	cmp	r4, r8
 8007624:	d9c3      	bls.n	80075ae <__hexnan+0x7a>
 8007626:	2300      	movs	r3, #0
 8007628:	f844 3c04 	str.w	r3, [r4, #-4]
 800762c:	2501      	movs	r5, #1
 800762e:	3c04      	subs	r4, #4
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	f000 000f 	and.w	r0, r0, #15
 8007636:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	e7b7      	b.n	80075ae <__hexnan+0x7a>
 800763e:	2508      	movs	r5, #8
 8007640:	e7b5      	b.n	80075ae <__hexnan+0x7a>
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0df      	beq.n	8007608 <__hexnan+0xd4>
 8007648:	f04f 32ff 	mov.w	r2, #4294967295
 800764c:	f1c3 0320 	rsb	r3, r3, #32
 8007650:	fa22 f303 	lsr.w	r3, r2, r3
 8007654:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007658:	401a      	ands	r2, r3
 800765a:	f846 2c04 	str.w	r2, [r6, #-4]
 800765e:	e7d3      	b.n	8007608 <__hexnan+0xd4>
 8007660:	3f04      	subs	r7, #4
 8007662:	e7d1      	b.n	8007608 <__hexnan+0xd4>
 8007664:	2004      	movs	r0, #4
 8007666:	b007      	add	sp, #28
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800766c <_localeconv_r>:
 800766c:	4800      	ldr	r0, [pc, #0]	; (8007670 <_localeconv_r+0x4>)
 800766e:	4770      	bx	lr
 8007670:	2000016c 	.word	0x2000016c

08007674 <_lseek_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d07      	ldr	r5, [pc, #28]	; (8007694 <_lseek_r+0x20>)
 8007678:	4604      	mov	r4, r0
 800767a:	4608      	mov	r0, r1
 800767c:	4611      	mov	r1, r2
 800767e:	2200      	movs	r2, #0
 8007680:	602a      	str	r2, [r5, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	f7fa fc0d 	bl	8001ea2 <_lseek>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_lseek_r+0x1e>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_lseek_r+0x1e>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	20000c2c 	.word	0x20000c2c

08007698 <malloc>:
 8007698:	4b02      	ldr	r3, [pc, #8]	; (80076a4 <malloc+0xc>)
 800769a:	4601      	mov	r1, r0
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	f000 bd67 	b.w	8008170 <_malloc_r>
 80076a2:	bf00      	nop
 80076a4:	20000014 	.word	0x20000014

080076a8 <__ascii_mbtowc>:
 80076a8:	b082      	sub	sp, #8
 80076aa:	b901      	cbnz	r1, 80076ae <__ascii_mbtowc+0x6>
 80076ac:	a901      	add	r1, sp, #4
 80076ae:	b142      	cbz	r2, 80076c2 <__ascii_mbtowc+0x1a>
 80076b0:	b14b      	cbz	r3, 80076c6 <__ascii_mbtowc+0x1e>
 80076b2:	7813      	ldrb	r3, [r2, #0]
 80076b4:	600b      	str	r3, [r1, #0]
 80076b6:	7812      	ldrb	r2, [r2, #0]
 80076b8:	1e10      	subs	r0, r2, #0
 80076ba:	bf18      	it	ne
 80076bc:	2001      	movne	r0, #1
 80076be:	b002      	add	sp, #8
 80076c0:	4770      	bx	lr
 80076c2:	4610      	mov	r0, r2
 80076c4:	e7fb      	b.n	80076be <__ascii_mbtowc+0x16>
 80076c6:	f06f 0001 	mvn.w	r0, #1
 80076ca:	e7f8      	b.n	80076be <__ascii_mbtowc+0x16>

080076cc <memcpy>:
 80076cc:	440a      	add	r2, r1
 80076ce:	4291      	cmp	r1, r2
 80076d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076d4:	d100      	bne.n	80076d8 <memcpy+0xc>
 80076d6:	4770      	bx	lr
 80076d8:	b510      	push	{r4, lr}
 80076da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e2:	4291      	cmp	r1, r2
 80076e4:	d1f9      	bne.n	80076da <memcpy+0xe>
 80076e6:	bd10      	pop	{r4, pc}

080076e8 <_Balloc>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	b976      	cbnz	r6, 8007710 <_Balloc+0x28>
 80076f2:	2010      	movs	r0, #16
 80076f4:	f7ff ffd0 	bl	8007698 <malloc>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6260      	str	r0, [r4, #36]	; 0x24
 80076fc:	b920      	cbnz	r0, 8007708 <_Balloc+0x20>
 80076fe:	4b18      	ldr	r3, [pc, #96]	; (8007760 <_Balloc+0x78>)
 8007700:	4818      	ldr	r0, [pc, #96]	; (8007764 <_Balloc+0x7c>)
 8007702:	2166      	movs	r1, #102	; 0x66
 8007704:	f001 fb5c 	bl	8008dc0 <__assert_func>
 8007708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800770c:	6006      	str	r6, [r0, #0]
 800770e:	60c6      	str	r6, [r0, #12]
 8007710:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007712:	68f3      	ldr	r3, [r6, #12]
 8007714:	b183      	cbz	r3, 8007738 <_Balloc+0x50>
 8007716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800771e:	b9b8      	cbnz	r0, 8007750 <_Balloc+0x68>
 8007720:	2101      	movs	r1, #1
 8007722:	fa01 f605 	lsl.w	r6, r1, r5
 8007726:	1d72      	adds	r2, r6, #5
 8007728:	0092      	lsls	r2, r2, #2
 800772a:	4620      	mov	r0, r4
 800772c:	f000 fc9d 	bl	800806a <_calloc_r>
 8007730:	b160      	cbz	r0, 800774c <_Balloc+0x64>
 8007732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007736:	e00e      	b.n	8007756 <_Balloc+0x6e>
 8007738:	2221      	movs	r2, #33	; 0x21
 800773a:	2104      	movs	r1, #4
 800773c:	4620      	mov	r0, r4
 800773e:	f000 fc94 	bl	800806a <_calloc_r>
 8007742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007744:	60f0      	str	r0, [r6, #12]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e4      	bne.n	8007716 <_Balloc+0x2e>
 800774c:	2000      	movs	r0, #0
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	6802      	ldr	r2, [r0, #0]
 8007752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007756:	2300      	movs	r3, #0
 8007758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800775c:	e7f7      	b.n	800774e <_Balloc+0x66>
 800775e:	bf00      	nop
 8007760:	08009f86 	.word	0x08009f86
 8007764:	0800a084 	.word	0x0800a084

08007768 <_Bfree>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	b976      	cbnz	r6, 8007790 <_Bfree+0x28>
 8007772:	2010      	movs	r0, #16
 8007774:	f7ff ff90 	bl	8007698 <malloc>
 8007778:	4602      	mov	r2, r0
 800777a:	6268      	str	r0, [r5, #36]	; 0x24
 800777c:	b920      	cbnz	r0, 8007788 <_Bfree+0x20>
 800777e:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <_Bfree+0x3c>)
 8007780:	4809      	ldr	r0, [pc, #36]	; (80077a8 <_Bfree+0x40>)
 8007782:	218a      	movs	r1, #138	; 0x8a
 8007784:	f001 fb1c 	bl	8008dc0 <__assert_func>
 8007788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800778c:	6006      	str	r6, [r0, #0]
 800778e:	60c6      	str	r6, [r0, #12]
 8007790:	b13c      	cbz	r4, 80077a2 <_Bfree+0x3a>
 8007792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007794:	6862      	ldr	r2, [r4, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800779c:	6021      	str	r1, [r4, #0]
 800779e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	08009f86 	.word	0x08009f86
 80077a8:	0800a084 	.word	0x0800a084

080077ac <__multadd>:
 80077ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b0:	690d      	ldr	r5, [r1, #16]
 80077b2:	4607      	mov	r7, r0
 80077b4:	460c      	mov	r4, r1
 80077b6:	461e      	mov	r6, r3
 80077b8:	f101 0c14 	add.w	ip, r1, #20
 80077bc:	2000      	movs	r0, #0
 80077be:	f8dc 3000 	ldr.w	r3, [ip]
 80077c2:	b299      	uxth	r1, r3
 80077c4:	fb02 6101 	mla	r1, r2, r1, r6
 80077c8:	0c1e      	lsrs	r6, r3, #16
 80077ca:	0c0b      	lsrs	r3, r1, #16
 80077cc:	fb02 3306 	mla	r3, r2, r6, r3
 80077d0:	b289      	uxth	r1, r1
 80077d2:	3001      	adds	r0, #1
 80077d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077d8:	4285      	cmp	r5, r0
 80077da:	f84c 1b04 	str.w	r1, [ip], #4
 80077de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077e2:	dcec      	bgt.n	80077be <__multadd+0x12>
 80077e4:	b30e      	cbz	r6, 800782a <__multadd+0x7e>
 80077e6:	68a3      	ldr	r3, [r4, #8]
 80077e8:	42ab      	cmp	r3, r5
 80077ea:	dc19      	bgt.n	8007820 <__multadd+0x74>
 80077ec:	6861      	ldr	r1, [r4, #4]
 80077ee:	4638      	mov	r0, r7
 80077f0:	3101      	adds	r1, #1
 80077f2:	f7ff ff79 	bl	80076e8 <_Balloc>
 80077f6:	4680      	mov	r8, r0
 80077f8:	b928      	cbnz	r0, 8007806 <__multadd+0x5a>
 80077fa:	4602      	mov	r2, r0
 80077fc:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <__multadd+0x84>)
 80077fe:	480d      	ldr	r0, [pc, #52]	; (8007834 <__multadd+0x88>)
 8007800:	21b5      	movs	r1, #181	; 0xb5
 8007802:	f001 fadd 	bl	8008dc0 <__assert_func>
 8007806:	6922      	ldr	r2, [r4, #16]
 8007808:	3202      	adds	r2, #2
 800780a:	f104 010c 	add.w	r1, r4, #12
 800780e:	0092      	lsls	r2, r2, #2
 8007810:	300c      	adds	r0, #12
 8007812:	f7ff ff5b 	bl	80076cc <memcpy>
 8007816:	4621      	mov	r1, r4
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff ffa5 	bl	8007768 <_Bfree>
 800781e:	4644      	mov	r4, r8
 8007820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007824:	3501      	adds	r5, #1
 8007826:	615e      	str	r6, [r3, #20]
 8007828:	6125      	str	r5, [r4, #16]
 800782a:	4620      	mov	r0, r4
 800782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007830:	08009ff8 	.word	0x08009ff8
 8007834:	0800a084 	.word	0x0800a084

08007838 <__s2b>:
 8007838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800783c:	460c      	mov	r4, r1
 800783e:	4615      	mov	r5, r2
 8007840:	461f      	mov	r7, r3
 8007842:	2209      	movs	r2, #9
 8007844:	3308      	adds	r3, #8
 8007846:	4606      	mov	r6, r0
 8007848:	fb93 f3f2 	sdiv	r3, r3, r2
 800784c:	2100      	movs	r1, #0
 800784e:	2201      	movs	r2, #1
 8007850:	429a      	cmp	r2, r3
 8007852:	db09      	blt.n	8007868 <__s2b+0x30>
 8007854:	4630      	mov	r0, r6
 8007856:	f7ff ff47 	bl	80076e8 <_Balloc>
 800785a:	b940      	cbnz	r0, 800786e <__s2b+0x36>
 800785c:	4602      	mov	r2, r0
 800785e:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <__s2b+0x8c>)
 8007860:	4819      	ldr	r0, [pc, #100]	; (80078c8 <__s2b+0x90>)
 8007862:	21ce      	movs	r1, #206	; 0xce
 8007864:	f001 faac 	bl	8008dc0 <__assert_func>
 8007868:	0052      	lsls	r2, r2, #1
 800786a:	3101      	adds	r1, #1
 800786c:	e7f0      	b.n	8007850 <__s2b+0x18>
 800786e:	9b08      	ldr	r3, [sp, #32]
 8007870:	6143      	str	r3, [r0, #20]
 8007872:	2d09      	cmp	r5, #9
 8007874:	f04f 0301 	mov.w	r3, #1
 8007878:	6103      	str	r3, [r0, #16]
 800787a:	dd16      	ble.n	80078aa <__s2b+0x72>
 800787c:	f104 0909 	add.w	r9, r4, #9
 8007880:	46c8      	mov	r8, r9
 8007882:	442c      	add	r4, r5
 8007884:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007888:	4601      	mov	r1, r0
 800788a:	3b30      	subs	r3, #48	; 0x30
 800788c:	220a      	movs	r2, #10
 800788e:	4630      	mov	r0, r6
 8007890:	f7ff ff8c 	bl	80077ac <__multadd>
 8007894:	45a0      	cmp	r8, r4
 8007896:	d1f5      	bne.n	8007884 <__s2b+0x4c>
 8007898:	f1a5 0408 	sub.w	r4, r5, #8
 800789c:	444c      	add	r4, r9
 800789e:	1b2d      	subs	r5, r5, r4
 80078a0:	1963      	adds	r3, r4, r5
 80078a2:	42bb      	cmp	r3, r7
 80078a4:	db04      	blt.n	80078b0 <__s2b+0x78>
 80078a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078aa:	340a      	adds	r4, #10
 80078ac:	2509      	movs	r5, #9
 80078ae:	e7f6      	b.n	800789e <__s2b+0x66>
 80078b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80078b4:	4601      	mov	r1, r0
 80078b6:	3b30      	subs	r3, #48	; 0x30
 80078b8:	220a      	movs	r2, #10
 80078ba:	4630      	mov	r0, r6
 80078bc:	f7ff ff76 	bl	80077ac <__multadd>
 80078c0:	e7ee      	b.n	80078a0 <__s2b+0x68>
 80078c2:	bf00      	nop
 80078c4:	08009ff8 	.word	0x08009ff8
 80078c8:	0800a084 	.word	0x0800a084

080078cc <__hi0bits>:
 80078cc:	0c03      	lsrs	r3, r0, #16
 80078ce:	041b      	lsls	r3, r3, #16
 80078d0:	b9d3      	cbnz	r3, 8007908 <__hi0bits+0x3c>
 80078d2:	0400      	lsls	r0, r0, #16
 80078d4:	2310      	movs	r3, #16
 80078d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078da:	bf04      	itt	eq
 80078dc:	0200      	lsleq	r0, r0, #8
 80078de:	3308      	addeq	r3, #8
 80078e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078e4:	bf04      	itt	eq
 80078e6:	0100      	lsleq	r0, r0, #4
 80078e8:	3304      	addeq	r3, #4
 80078ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078ee:	bf04      	itt	eq
 80078f0:	0080      	lsleq	r0, r0, #2
 80078f2:	3302      	addeq	r3, #2
 80078f4:	2800      	cmp	r0, #0
 80078f6:	db05      	blt.n	8007904 <__hi0bits+0x38>
 80078f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078fc:	f103 0301 	add.w	r3, r3, #1
 8007900:	bf08      	it	eq
 8007902:	2320      	moveq	r3, #32
 8007904:	4618      	mov	r0, r3
 8007906:	4770      	bx	lr
 8007908:	2300      	movs	r3, #0
 800790a:	e7e4      	b.n	80078d6 <__hi0bits+0xa>

0800790c <__lo0bits>:
 800790c:	6803      	ldr	r3, [r0, #0]
 800790e:	f013 0207 	ands.w	r2, r3, #7
 8007912:	4601      	mov	r1, r0
 8007914:	d00b      	beq.n	800792e <__lo0bits+0x22>
 8007916:	07da      	lsls	r2, r3, #31
 8007918:	d423      	bmi.n	8007962 <__lo0bits+0x56>
 800791a:	0798      	lsls	r0, r3, #30
 800791c:	bf49      	itett	mi
 800791e:	085b      	lsrmi	r3, r3, #1
 8007920:	089b      	lsrpl	r3, r3, #2
 8007922:	2001      	movmi	r0, #1
 8007924:	600b      	strmi	r3, [r1, #0]
 8007926:	bf5c      	itt	pl
 8007928:	600b      	strpl	r3, [r1, #0]
 800792a:	2002      	movpl	r0, #2
 800792c:	4770      	bx	lr
 800792e:	b298      	uxth	r0, r3
 8007930:	b9a8      	cbnz	r0, 800795e <__lo0bits+0x52>
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	2010      	movs	r0, #16
 8007936:	b2da      	uxtb	r2, r3
 8007938:	b90a      	cbnz	r2, 800793e <__lo0bits+0x32>
 800793a:	3008      	adds	r0, #8
 800793c:	0a1b      	lsrs	r3, r3, #8
 800793e:	071a      	lsls	r2, r3, #28
 8007940:	bf04      	itt	eq
 8007942:	091b      	lsreq	r3, r3, #4
 8007944:	3004      	addeq	r0, #4
 8007946:	079a      	lsls	r2, r3, #30
 8007948:	bf04      	itt	eq
 800794a:	089b      	lsreq	r3, r3, #2
 800794c:	3002      	addeq	r0, #2
 800794e:	07da      	lsls	r2, r3, #31
 8007950:	d403      	bmi.n	800795a <__lo0bits+0x4e>
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	f100 0001 	add.w	r0, r0, #1
 8007958:	d005      	beq.n	8007966 <__lo0bits+0x5a>
 800795a:	600b      	str	r3, [r1, #0]
 800795c:	4770      	bx	lr
 800795e:	4610      	mov	r0, r2
 8007960:	e7e9      	b.n	8007936 <__lo0bits+0x2a>
 8007962:	2000      	movs	r0, #0
 8007964:	4770      	bx	lr
 8007966:	2020      	movs	r0, #32
 8007968:	4770      	bx	lr
	...

0800796c <__i2b>:
 800796c:	b510      	push	{r4, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	2101      	movs	r1, #1
 8007972:	f7ff feb9 	bl	80076e8 <_Balloc>
 8007976:	4602      	mov	r2, r0
 8007978:	b928      	cbnz	r0, 8007986 <__i2b+0x1a>
 800797a:	4b05      	ldr	r3, [pc, #20]	; (8007990 <__i2b+0x24>)
 800797c:	4805      	ldr	r0, [pc, #20]	; (8007994 <__i2b+0x28>)
 800797e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007982:	f001 fa1d 	bl	8008dc0 <__assert_func>
 8007986:	2301      	movs	r3, #1
 8007988:	6144      	str	r4, [r0, #20]
 800798a:	6103      	str	r3, [r0, #16]
 800798c:	bd10      	pop	{r4, pc}
 800798e:	bf00      	nop
 8007990:	08009ff8 	.word	0x08009ff8
 8007994:	0800a084 	.word	0x0800a084

08007998 <__multiply>:
 8007998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799c:	4691      	mov	r9, r2
 800799e:	690a      	ldr	r2, [r1, #16]
 80079a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	bfb8      	it	lt
 80079a8:	460b      	movlt	r3, r1
 80079aa:	460c      	mov	r4, r1
 80079ac:	bfbc      	itt	lt
 80079ae:	464c      	movlt	r4, r9
 80079b0:	4699      	movlt	r9, r3
 80079b2:	6927      	ldr	r7, [r4, #16]
 80079b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079b8:	68a3      	ldr	r3, [r4, #8]
 80079ba:	6861      	ldr	r1, [r4, #4]
 80079bc:	eb07 060a 	add.w	r6, r7, sl
 80079c0:	42b3      	cmp	r3, r6
 80079c2:	b085      	sub	sp, #20
 80079c4:	bfb8      	it	lt
 80079c6:	3101      	addlt	r1, #1
 80079c8:	f7ff fe8e 	bl	80076e8 <_Balloc>
 80079cc:	b930      	cbnz	r0, 80079dc <__multiply+0x44>
 80079ce:	4602      	mov	r2, r0
 80079d0:	4b44      	ldr	r3, [pc, #272]	; (8007ae4 <__multiply+0x14c>)
 80079d2:	4845      	ldr	r0, [pc, #276]	; (8007ae8 <__multiply+0x150>)
 80079d4:	f240 115d 	movw	r1, #349	; 0x15d
 80079d8:	f001 f9f2 	bl	8008dc0 <__assert_func>
 80079dc:	f100 0514 	add.w	r5, r0, #20
 80079e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079e4:	462b      	mov	r3, r5
 80079e6:	2200      	movs	r2, #0
 80079e8:	4543      	cmp	r3, r8
 80079ea:	d321      	bcc.n	8007a30 <__multiply+0x98>
 80079ec:	f104 0314 	add.w	r3, r4, #20
 80079f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079f4:	f109 0314 	add.w	r3, r9, #20
 80079f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079fc:	9202      	str	r2, [sp, #8]
 80079fe:	1b3a      	subs	r2, r7, r4
 8007a00:	3a15      	subs	r2, #21
 8007a02:	f022 0203 	bic.w	r2, r2, #3
 8007a06:	3204      	adds	r2, #4
 8007a08:	f104 0115 	add.w	r1, r4, #21
 8007a0c:	428f      	cmp	r7, r1
 8007a0e:	bf38      	it	cc
 8007a10:	2204      	movcc	r2, #4
 8007a12:	9201      	str	r2, [sp, #4]
 8007a14:	9a02      	ldr	r2, [sp, #8]
 8007a16:	9303      	str	r3, [sp, #12]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d80c      	bhi.n	8007a36 <__multiply+0x9e>
 8007a1c:	2e00      	cmp	r6, #0
 8007a1e:	dd03      	ble.n	8007a28 <__multiply+0x90>
 8007a20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d05a      	beq.n	8007ade <__multiply+0x146>
 8007a28:	6106      	str	r6, [r0, #16]
 8007a2a:	b005      	add	sp, #20
 8007a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a30:	f843 2b04 	str.w	r2, [r3], #4
 8007a34:	e7d8      	b.n	80079e8 <__multiply+0x50>
 8007a36:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a3a:	f1ba 0f00 	cmp.w	sl, #0
 8007a3e:	d024      	beq.n	8007a8a <__multiply+0xf2>
 8007a40:	f104 0e14 	add.w	lr, r4, #20
 8007a44:	46a9      	mov	r9, r5
 8007a46:	f04f 0c00 	mov.w	ip, #0
 8007a4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a4e:	f8d9 1000 	ldr.w	r1, [r9]
 8007a52:	fa1f fb82 	uxth.w	fp, r2
 8007a56:	b289      	uxth	r1, r1
 8007a58:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a60:	f8d9 2000 	ldr.w	r2, [r9]
 8007a64:	4461      	add	r1, ip
 8007a66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a72:	b289      	uxth	r1, r1
 8007a74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a78:	4577      	cmp	r7, lr
 8007a7a:	f849 1b04 	str.w	r1, [r9], #4
 8007a7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a82:	d8e2      	bhi.n	8007a4a <__multiply+0xb2>
 8007a84:	9a01      	ldr	r2, [sp, #4]
 8007a86:	f845 c002 	str.w	ip, [r5, r2]
 8007a8a:	9a03      	ldr	r2, [sp, #12]
 8007a8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a90:	3304      	adds	r3, #4
 8007a92:	f1b9 0f00 	cmp.w	r9, #0
 8007a96:	d020      	beq.n	8007ada <__multiply+0x142>
 8007a98:	6829      	ldr	r1, [r5, #0]
 8007a9a:	f104 0c14 	add.w	ip, r4, #20
 8007a9e:	46ae      	mov	lr, r5
 8007aa0:	f04f 0a00 	mov.w	sl, #0
 8007aa4:	f8bc b000 	ldrh.w	fp, [ip]
 8007aa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007aac:	fb09 220b 	mla	r2, r9, fp, r2
 8007ab0:	4492      	add	sl, r2
 8007ab2:	b289      	uxth	r1, r1
 8007ab4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ab8:	f84e 1b04 	str.w	r1, [lr], #4
 8007abc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007ac0:	f8be 1000 	ldrh.w	r1, [lr]
 8007ac4:	0c12      	lsrs	r2, r2, #16
 8007ac6:	fb09 1102 	mla	r1, r9, r2, r1
 8007aca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ace:	4567      	cmp	r7, ip
 8007ad0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ad4:	d8e6      	bhi.n	8007aa4 <__multiply+0x10c>
 8007ad6:	9a01      	ldr	r2, [sp, #4]
 8007ad8:	50a9      	str	r1, [r5, r2]
 8007ada:	3504      	adds	r5, #4
 8007adc:	e79a      	b.n	8007a14 <__multiply+0x7c>
 8007ade:	3e01      	subs	r6, #1
 8007ae0:	e79c      	b.n	8007a1c <__multiply+0x84>
 8007ae2:	bf00      	nop
 8007ae4:	08009ff8 	.word	0x08009ff8
 8007ae8:	0800a084 	.word	0x0800a084

08007aec <__pow5mult>:
 8007aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007af0:	4615      	mov	r5, r2
 8007af2:	f012 0203 	ands.w	r2, r2, #3
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	d007      	beq.n	8007b0c <__pow5mult+0x20>
 8007afc:	4c25      	ldr	r4, [pc, #148]	; (8007b94 <__pow5mult+0xa8>)
 8007afe:	3a01      	subs	r2, #1
 8007b00:	2300      	movs	r3, #0
 8007b02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b06:	f7ff fe51 	bl	80077ac <__multadd>
 8007b0a:	4607      	mov	r7, r0
 8007b0c:	10ad      	asrs	r5, r5, #2
 8007b0e:	d03d      	beq.n	8007b8c <__pow5mult+0xa0>
 8007b10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b12:	b97c      	cbnz	r4, 8007b34 <__pow5mult+0x48>
 8007b14:	2010      	movs	r0, #16
 8007b16:	f7ff fdbf 	bl	8007698 <malloc>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	6270      	str	r0, [r6, #36]	; 0x24
 8007b1e:	b928      	cbnz	r0, 8007b2c <__pow5mult+0x40>
 8007b20:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <__pow5mult+0xac>)
 8007b22:	481e      	ldr	r0, [pc, #120]	; (8007b9c <__pow5mult+0xb0>)
 8007b24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b28:	f001 f94a 	bl	8008dc0 <__assert_func>
 8007b2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b30:	6004      	str	r4, [r0, #0]
 8007b32:	60c4      	str	r4, [r0, #12]
 8007b34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b3c:	b94c      	cbnz	r4, 8007b52 <__pow5mult+0x66>
 8007b3e:	f240 2171 	movw	r1, #625	; 0x271
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7ff ff12 	bl	800796c <__i2b>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b4e:	4604      	mov	r4, r0
 8007b50:	6003      	str	r3, [r0, #0]
 8007b52:	f04f 0900 	mov.w	r9, #0
 8007b56:	07eb      	lsls	r3, r5, #31
 8007b58:	d50a      	bpl.n	8007b70 <__pow5mult+0x84>
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	4622      	mov	r2, r4
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f7ff ff1a 	bl	8007998 <__multiply>
 8007b64:	4639      	mov	r1, r7
 8007b66:	4680      	mov	r8, r0
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff fdfd 	bl	8007768 <_Bfree>
 8007b6e:	4647      	mov	r7, r8
 8007b70:	106d      	asrs	r5, r5, #1
 8007b72:	d00b      	beq.n	8007b8c <__pow5mult+0xa0>
 8007b74:	6820      	ldr	r0, [r4, #0]
 8007b76:	b938      	cbnz	r0, 8007b88 <__pow5mult+0x9c>
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7ff ff0b 	bl	8007998 <__multiply>
 8007b82:	6020      	str	r0, [r4, #0]
 8007b84:	f8c0 9000 	str.w	r9, [r0]
 8007b88:	4604      	mov	r4, r0
 8007b8a:	e7e4      	b.n	8007b56 <__pow5mult+0x6a>
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b92:	bf00      	nop
 8007b94:	0800a1d0 	.word	0x0800a1d0
 8007b98:	08009f86 	.word	0x08009f86
 8007b9c:	0800a084 	.word	0x0800a084

08007ba0 <__lshift>:
 8007ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	6849      	ldr	r1, [r1, #4]
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	4691      	mov	r9, r2
 8007bb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007bb8:	f108 0601 	add.w	r6, r8, #1
 8007bbc:	42b3      	cmp	r3, r6
 8007bbe:	db0b      	blt.n	8007bd8 <__lshift+0x38>
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f7ff fd91 	bl	80076e8 <_Balloc>
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b948      	cbnz	r0, 8007bde <__lshift+0x3e>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	4b2a      	ldr	r3, [pc, #168]	; (8007c78 <__lshift+0xd8>)
 8007bce:	482b      	ldr	r0, [pc, #172]	; (8007c7c <__lshift+0xdc>)
 8007bd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bd4:	f001 f8f4 	bl	8008dc0 <__assert_func>
 8007bd8:	3101      	adds	r1, #1
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	e7ee      	b.n	8007bbc <__lshift+0x1c>
 8007bde:	2300      	movs	r3, #0
 8007be0:	f100 0114 	add.w	r1, r0, #20
 8007be4:	f100 0210 	add.w	r2, r0, #16
 8007be8:	4618      	mov	r0, r3
 8007bea:	4553      	cmp	r3, sl
 8007bec:	db37      	blt.n	8007c5e <__lshift+0xbe>
 8007bee:	6920      	ldr	r0, [r4, #16]
 8007bf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bf4:	f104 0314 	add.w	r3, r4, #20
 8007bf8:	f019 091f 	ands.w	r9, r9, #31
 8007bfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007c04:	d02f      	beq.n	8007c66 <__lshift+0xc6>
 8007c06:	f1c9 0e20 	rsb	lr, r9, #32
 8007c0a:	468a      	mov	sl, r1
 8007c0c:	f04f 0c00 	mov.w	ip, #0
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	fa02 f209 	lsl.w	r2, r2, r9
 8007c16:	ea42 020c 	orr.w	r2, r2, ip
 8007c1a:	f84a 2b04 	str.w	r2, [sl], #4
 8007c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c22:	4298      	cmp	r0, r3
 8007c24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c28:	d8f2      	bhi.n	8007c10 <__lshift+0x70>
 8007c2a:	1b03      	subs	r3, r0, r4
 8007c2c:	3b15      	subs	r3, #21
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	3304      	adds	r3, #4
 8007c34:	f104 0215 	add.w	r2, r4, #21
 8007c38:	4290      	cmp	r0, r2
 8007c3a:	bf38      	it	cc
 8007c3c:	2304      	movcc	r3, #4
 8007c3e:	f841 c003 	str.w	ip, [r1, r3]
 8007c42:	f1bc 0f00 	cmp.w	ip, #0
 8007c46:	d001      	beq.n	8007c4c <__lshift+0xac>
 8007c48:	f108 0602 	add.w	r6, r8, #2
 8007c4c:	3e01      	subs	r6, #1
 8007c4e:	4638      	mov	r0, r7
 8007c50:	612e      	str	r6, [r5, #16]
 8007c52:	4621      	mov	r1, r4
 8007c54:	f7ff fd88 	bl	8007768 <_Bfree>
 8007c58:	4628      	mov	r0, r5
 8007c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c62:	3301      	adds	r3, #1
 8007c64:	e7c1      	b.n	8007bea <__lshift+0x4a>
 8007c66:	3904      	subs	r1, #4
 8007c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c70:	4298      	cmp	r0, r3
 8007c72:	d8f9      	bhi.n	8007c68 <__lshift+0xc8>
 8007c74:	e7ea      	b.n	8007c4c <__lshift+0xac>
 8007c76:	bf00      	nop
 8007c78:	08009ff8 	.word	0x08009ff8
 8007c7c:	0800a084 	.word	0x0800a084

08007c80 <__mcmp>:
 8007c80:	b530      	push	{r4, r5, lr}
 8007c82:	6902      	ldr	r2, [r0, #16]
 8007c84:	690c      	ldr	r4, [r1, #16]
 8007c86:	1b12      	subs	r2, r2, r4
 8007c88:	d10e      	bne.n	8007ca8 <__mcmp+0x28>
 8007c8a:	f100 0314 	add.w	r3, r0, #20
 8007c8e:	3114      	adds	r1, #20
 8007c90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ca0:	42a5      	cmp	r5, r4
 8007ca2:	d003      	beq.n	8007cac <__mcmp+0x2c>
 8007ca4:	d305      	bcc.n	8007cb2 <__mcmp+0x32>
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	4610      	mov	r0, r2
 8007caa:	bd30      	pop	{r4, r5, pc}
 8007cac:	4283      	cmp	r3, r0
 8007cae:	d3f3      	bcc.n	8007c98 <__mcmp+0x18>
 8007cb0:	e7fa      	b.n	8007ca8 <__mcmp+0x28>
 8007cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb6:	e7f7      	b.n	8007ca8 <__mcmp+0x28>

08007cb8 <__mdiff>:
 8007cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	460c      	mov	r4, r1
 8007cbe:	4606      	mov	r6, r0
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	4690      	mov	r8, r2
 8007cc6:	f7ff ffdb 	bl	8007c80 <__mcmp>
 8007cca:	1e05      	subs	r5, r0, #0
 8007ccc:	d110      	bne.n	8007cf0 <__mdiff+0x38>
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff fd09 	bl	80076e8 <_Balloc>
 8007cd6:	b930      	cbnz	r0, 8007ce6 <__mdiff+0x2e>
 8007cd8:	4b3a      	ldr	r3, [pc, #232]	; (8007dc4 <__mdiff+0x10c>)
 8007cda:	4602      	mov	r2, r0
 8007cdc:	f240 2132 	movw	r1, #562	; 0x232
 8007ce0:	4839      	ldr	r0, [pc, #228]	; (8007dc8 <__mdiff+0x110>)
 8007ce2:	f001 f86d 	bl	8008dc0 <__assert_func>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf0:	bfa4      	itt	ge
 8007cf2:	4643      	movge	r3, r8
 8007cf4:	46a0      	movge	r8, r4
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007cfc:	bfa6      	itte	ge
 8007cfe:	461c      	movge	r4, r3
 8007d00:	2500      	movge	r5, #0
 8007d02:	2501      	movlt	r5, #1
 8007d04:	f7ff fcf0 	bl	80076e8 <_Balloc>
 8007d08:	b920      	cbnz	r0, 8007d14 <__mdiff+0x5c>
 8007d0a:	4b2e      	ldr	r3, [pc, #184]	; (8007dc4 <__mdiff+0x10c>)
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007d12:	e7e5      	b.n	8007ce0 <__mdiff+0x28>
 8007d14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d18:	6926      	ldr	r6, [r4, #16]
 8007d1a:	60c5      	str	r5, [r0, #12]
 8007d1c:	f104 0914 	add.w	r9, r4, #20
 8007d20:	f108 0514 	add.w	r5, r8, #20
 8007d24:	f100 0e14 	add.w	lr, r0, #20
 8007d28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d30:	f108 0210 	add.w	r2, r8, #16
 8007d34:	46f2      	mov	sl, lr
 8007d36:	2100      	movs	r1, #0
 8007d38:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d40:	fa1f f883 	uxth.w	r8, r3
 8007d44:	fa11 f18b 	uxtah	r1, r1, fp
 8007d48:	0c1b      	lsrs	r3, r3, #16
 8007d4a:	eba1 0808 	sub.w	r8, r1, r8
 8007d4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d56:	fa1f f888 	uxth.w	r8, r8
 8007d5a:	1419      	asrs	r1, r3, #16
 8007d5c:	454e      	cmp	r6, r9
 8007d5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d62:	f84a 3b04 	str.w	r3, [sl], #4
 8007d66:	d8e7      	bhi.n	8007d38 <__mdiff+0x80>
 8007d68:	1b33      	subs	r3, r6, r4
 8007d6a:	3b15      	subs	r3, #21
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	3304      	adds	r3, #4
 8007d72:	3415      	adds	r4, #21
 8007d74:	42a6      	cmp	r6, r4
 8007d76:	bf38      	it	cc
 8007d78:	2304      	movcc	r3, #4
 8007d7a:	441d      	add	r5, r3
 8007d7c:	4473      	add	r3, lr
 8007d7e:	469e      	mov	lr, r3
 8007d80:	462e      	mov	r6, r5
 8007d82:	4566      	cmp	r6, ip
 8007d84:	d30e      	bcc.n	8007da4 <__mdiff+0xec>
 8007d86:	f10c 0203 	add.w	r2, ip, #3
 8007d8a:	1b52      	subs	r2, r2, r5
 8007d8c:	f022 0203 	bic.w	r2, r2, #3
 8007d90:	3d03      	subs	r5, #3
 8007d92:	45ac      	cmp	ip, r5
 8007d94:	bf38      	it	cc
 8007d96:	2200      	movcc	r2, #0
 8007d98:	441a      	add	r2, r3
 8007d9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d9e:	b17b      	cbz	r3, 8007dc0 <__mdiff+0x108>
 8007da0:	6107      	str	r7, [r0, #16]
 8007da2:	e7a3      	b.n	8007cec <__mdiff+0x34>
 8007da4:	f856 8b04 	ldr.w	r8, [r6], #4
 8007da8:	fa11 f288 	uxtah	r2, r1, r8
 8007dac:	1414      	asrs	r4, r2, #16
 8007dae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007db2:	b292      	uxth	r2, r2
 8007db4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007db8:	f84e 2b04 	str.w	r2, [lr], #4
 8007dbc:	1421      	asrs	r1, r4, #16
 8007dbe:	e7e0      	b.n	8007d82 <__mdiff+0xca>
 8007dc0:	3f01      	subs	r7, #1
 8007dc2:	e7ea      	b.n	8007d9a <__mdiff+0xe2>
 8007dc4:	08009ff8 	.word	0x08009ff8
 8007dc8:	0800a084 	.word	0x0800a084

08007dcc <__ulp>:
 8007dcc:	b082      	sub	sp, #8
 8007dce:	ed8d 0b00 	vstr	d0, [sp]
 8007dd2:	9b01      	ldr	r3, [sp, #4]
 8007dd4:	4912      	ldr	r1, [pc, #72]	; (8007e20 <__ulp+0x54>)
 8007dd6:	4019      	ands	r1, r3
 8007dd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007ddc:	2900      	cmp	r1, #0
 8007dde:	dd05      	ble.n	8007dec <__ulp+0x20>
 8007de0:	2200      	movs	r2, #0
 8007de2:	460b      	mov	r3, r1
 8007de4:	ec43 2b10 	vmov	d0, r2, r3
 8007de8:	b002      	add	sp, #8
 8007dea:	4770      	bx	lr
 8007dec:	4249      	negs	r1, r1
 8007dee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007df2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007df6:	f04f 0200 	mov.w	r2, #0
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	da04      	bge.n	8007e0a <__ulp+0x3e>
 8007e00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007e04:	fa41 f300 	asr.w	r3, r1, r0
 8007e08:	e7ec      	b.n	8007de4 <__ulp+0x18>
 8007e0a:	f1a0 0114 	sub.w	r1, r0, #20
 8007e0e:	291e      	cmp	r1, #30
 8007e10:	bfda      	itte	le
 8007e12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007e16:	fa20 f101 	lsrle.w	r1, r0, r1
 8007e1a:	2101      	movgt	r1, #1
 8007e1c:	460a      	mov	r2, r1
 8007e1e:	e7e1      	b.n	8007de4 <__ulp+0x18>
 8007e20:	7ff00000 	.word	0x7ff00000

08007e24 <__b2d>:
 8007e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e26:	6905      	ldr	r5, [r0, #16]
 8007e28:	f100 0714 	add.w	r7, r0, #20
 8007e2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007e30:	1f2e      	subs	r6, r5, #4
 8007e32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007e36:	4620      	mov	r0, r4
 8007e38:	f7ff fd48 	bl	80078cc <__hi0bits>
 8007e3c:	f1c0 0320 	rsb	r3, r0, #32
 8007e40:	280a      	cmp	r0, #10
 8007e42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007ec0 <__b2d+0x9c>
 8007e46:	600b      	str	r3, [r1, #0]
 8007e48:	dc14      	bgt.n	8007e74 <__b2d+0x50>
 8007e4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007e4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007e52:	42b7      	cmp	r7, r6
 8007e54:	ea41 030c 	orr.w	r3, r1, ip
 8007e58:	bf34      	ite	cc
 8007e5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e5e:	2100      	movcs	r1, #0
 8007e60:	3015      	adds	r0, #21
 8007e62:	fa04 f000 	lsl.w	r0, r4, r0
 8007e66:	fa21 f10e 	lsr.w	r1, r1, lr
 8007e6a:	ea40 0201 	orr.w	r2, r0, r1
 8007e6e:	ec43 2b10 	vmov	d0, r2, r3
 8007e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e74:	42b7      	cmp	r7, r6
 8007e76:	bf3a      	itte	cc
 8007e78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007e7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007e80:	2100      	movcs	r1, #0
 8007e82:	380b      	subs	r0, #11
 8007e84:	d017      	beq.n	8007eb6 <__b2d+0x92>
 8007e86:	f1c0 0c20 	rsb	ip, r0, #32
 8007e8a:	fa04 f500 	lsl.w	r5, r4, r0
 8007e8e:	42be      	cmp	r6, r7
 8007e90:	fa21 f40c 	lsr.w	r4, r1, ip
 8007e94:	ea45 0504 	orr.w	r5, r5, r4
 8007e98:	bf8c      	ite	hi
 8007e9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007e9e:	2400      	movls	r4, #0
 8007ea0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007ea4:	fa01 f000 	lsl.w	r0, r1, r0
 8007ea8:	fa24 f40c 	lsr.w	r4, r4, ip
 8007eac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007eb0:	ea40 0204 	orr.w	r2, r0, r4
 8007eb4:	e7db      	b.n	8007e6e <__b2d+0x4a>
 8007eb6:	ea44 030c 	orr.w	r3, r4, ip
 8007eba:	460a      	mov	r2, r1
 8007ebc:	e7d7      	b.n	8007e6e <__b2d+0x4a>
 8007ebe:	bf00      	nop
 8007ec0:	3ff00000 	.word	0x3ff00000

08007ec4 <__d2b>:
 8007ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ec8:	4689      	mov	r9, r1
 8007eca:	2101      	movs	r1, #1
 8007ecc:	ec57 6b10 	vmov	r6, r7, d0
 8007ed0:	4690      	mov	r8, r2
 8007ed2:	f7ff fc09 	bl	80076e8 <_Balloc>
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	b930      	cbnz	r0, 8007ee8 <__d2b+0x24>
 8007eda:	4602      	mov	r2, r0
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <__d2b+0xb0>)
 8007ede:	4826      	ldr	r0, [pc, #152]	; (8007f78 <__d2b+0xb4>)
 8007ee0:	f240 310a 	movw	r1, #778	; 0x30a
 8007ee4:	f000 ff6c 	bl	8008dc0 <__assert_func>
 8007ee8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007eec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ef0:	bb35      	cbnz	r5, 8007f40 <__d2b+0x7c>
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	d028      	beq.n	8007f4a <__d2b+0x86>
 8007ef8:	4668      	mov	r0, sp
 8007efa:	9600      	str	r6, [sp, #0]
 8007efc:	f7ff fd06 	bl	800790c <__lo0bits>
 8007f00:	9900      	ldr	r1, [sp, #0]
 8007f02:	b300      	cbz	r0, 8007f46 <__d2b+0x82>
 8007f04:	9a01      	ldr	r2, [sp, #4]
 8007f06:	f1c0 0320 	rsb	r3, r0, #32
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	430b      	orrs	r3, r1
 8007f10:	40c2      	lsrs	r2, r0
 8007f12:	6163      	str	r3, [r4, #20]
 8007f14:	9201      	str	r2, [sp, #4]
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	61a3      	str	r3, [r4, #24]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	bf14      	ite	ne
 8007f1e:	2202      	movne	r2, #2
 8007f20:	2201      	moveq	r2, #1
 8007f22:	6122      	str	r2, [r4, #16]
 8007f24:	b1d5      	cbz	r5, 8007f5c <__d2b+0x98>
 8007f26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007f2a:	4405      	add	r5, r0
 8007f2c:	f8c9 5000 	str.w	r5, [r9]
 8007f30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f34:	f8c8 0000 	str.w	r0, [r8]
 8007f38:	4620      	mov	r0, r4
 8007f3a:	b003      	add	sp, #12
 8007f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f44:	e7d5      	b.n	8007ef2 <__d2b+0x2e>
 8007f46:	6161      	str	r1, [r4, #20]
 8007f48:	e7e5      	b.n	8007f16 <__d2b+0x52>
 8007f4a:	a801      	add	r0, sp, #4
 8007f4c:	f7ff fcde 	bl	800790c <__lo0bits>
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	6163      	str	r3, [r4, #20]
 8007f54:	2201      	movs	r2, #1
 8007f56:	6122      	str	r2, [r4, #16]
 8007f58:	3020      	adds	r0, #32
 8007f5a:	e7e3      	b.n	8007f24 <__d2b+0x60>
 8007f5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f64:	f8c9 0000 	str.w	r0, [r9]
 8007f68:	6918      	ldr	r0, [r3, #16]
 8007f6a:	f7ff fcaf 	bl	80078cc <__hi0bits>
 8007f6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f72:	e7df      	b.n	8007f34 <__d2b+0x70>
 8007f74:	08009ff8 	.word	0x08009ff8
 8007f78:	0800a084 	.word	0x0800a084

08007f7c <__ratio>:
 8007f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	4688      	mov	r8, r1
 8007f82:	4669      	mov	r1, sp
 8007f84:	4681      	mov	r9, r0
 8007f86:	f7ff ff4d 	bl	8007e24 <__b2d>
 8007f8a:	a901      	add	r1, sp, #4
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	ec55 4b10 	vmov	r4, r5, d0
 8007f92:	f7ff ff47 	bl	8007e24 <__b2d>
 8007f96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f9e:	eba3 0c02 	sub.w	ip, r3, r2
 8007fa2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007fa6:	1a9b      	subs	r3, r3, r2
 8007fa8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007fac:	ec51 0b10 	vmov	r0, r1, d0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	bfd6      	itet	le
 8007fb4:	460a      	movle	r2, r1
 8007fb6:	462a      	movgt	r2, r5
 8007fb8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007fbc:	468b      	mov	fp, r1
 8007fbe:	462f      	mov	r7, r5
 8007fc0:	bfd4      	ite	le
 8007fc2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007fc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007fca:	4620      	mov	r0, r4
 8007fcc:	ee10 2a10 	vmov	r2, s0
 8007fd0:	465b      	mov	r3, fp
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 fc52 	bl	800087c <__aeabi_ddiv>
 8007fd8:	ec41 0b10 	vmov	d0, r0, r1
 8007fdc:	b003      	add	sp, #12
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fe2 <__copybits>:
 8007fe2:	3901      	subs	r1, #1
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	1149      	asrs	r1, r1, #5
 8007fe8:	6914      	ldr	r4, [r2, #16]
 8007fea:	3101      	adds	r1, #1
 8007fec:	f102 0314 	add.w	r3, r2, #20
 8007ff0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ff4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007ff8:	1f05      	subs	r5, r0, #4
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	d30c      	bcc.n	8008018 <__copybits+0x36>
 8007ffe:	1aa3      	subs	r3, r4, r2
 8008000:	3b11      	subs	r3, #17
 8008002:	f023 0303 	bic.w	r3, r3, #3
 8008006:	3211      	adds	r2, #17
 8008008:	42a2      	cmp	r2, r4
 800800a:	bf88      	it	hi
 800800c:	2300      	movhi	r3, #0
 800800e:	4418      	add	r0, r3
 8008010:	2300      	movs	r3, #0
 8008012:	4288      	cmp	r0, r1
 8008014:	d305      	bcc.n	8008022 <__copybits+0x40>
 8008016:	bd70      	pop	{r4, r5, r6, pc}
 8008018:	f853 6b04 	ldr.w	r6, [r3], #4
 800801c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008020:	e7eb      	b.n	8007ffa <__copybits+0x18>
 8008022:	f840 3b04 	str.w	r3, [r0], #4
 8008026:	e7f4      	b.n	8008012 <__copybits+0x30>

08008028 <__any_on>:
 8008028:	f100 0214 	add.w	r2, r0, #20
 800802c:	6900      	ldr	r0, [r0, #16]
 800802e:	114b      	asrs	r3, r1, #5
 8008030:	4298      	cmp	r0, r3
 8008032:	b510      	push	{r4, lr}
 8008034:	db11      	blt.n	800805a <__any_on+0x32>
 8008036:	dd0a      	ble.n	800804e <__any_on+0x26>
 8008038:	f011 011f 	ands.w	r1, r1, #31
 800803c:	d007      	beq.n	800804e <__any_on+0x26>
 800803e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008042:	fa24 f001 	lsr.w	r0, r4, r1
 8008046:	fa00 f101 	lsl.w	r1, r0, r1
 800804a:	428c      	cmp	r4, r1
 800804c:	d10b      	bne.n	8008066 <__any_on+0x3e>
 800804e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008052:	4293      	cmp	r3, r2
 8008054:	d803      	bhi.n	800805e <__any_on+0x36>
 8008056:	2000      	movs	r0, #0
 8008058:	bd10      	pop	{r4, pc}
 800805a:	4603      	mov	r3, r0
 800805c:	e7f7      	b.n	800804e <__any_on+0x26>
 800805e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008062:	2900      	cmp	r1, #0
 8008064:	d0f5      	beq.n	8008052 <__any_on+0x2a>
 8008066:	2001      	movs	r0, #1
 8008068:	e7f6      	b.n	8008058 <__any_on+0x30>

0800806a <_calloc_r>:
 800806a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800806c:	fba1 2402 	umull	r2, r4, r1, r2
 8008070:	b94c      	cbnz	r4, 8008086 <_calloc_r+0x1c>
 8008072:	4611      	mov	r1, r2
 8008074:	9201      	str	r2, [sp, #4]
 8008076:	f000 f87b 	bl	8008170 <_malloc_r>
 800807a:	9a01      	ldr	r2, [sp, #4]
 800807c:	4605      	mov	r5, r0
 800807e:	b930      	cbnz	r0, 800808e <_calloc_r+0x24>
 8008080:	4628      	mov	r0, r5
 8008082:	b003      	add	sp, #12
 8008084:	bd30      	pop	{r4, r5, pc}
 8008086:	220c      	movs	r2, #12
 8008088:	6002      	str	r2, [r0, #0]
 800808a:	2500      	movs	r5, #0
 800808c:	e7f8      	b.n	8008080 <_calloc_r+0x16>
 800808e:	4621      	mov	r1, r4
 8008090:	f7fc fb18 	bl	80046c4 <memset>
 8008094:	e7f4      	b.n	8008080 <_calloc_r+0x16>
	...

08008098 <_free_r>:
 8008098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800809a:	2900      	cmp	r1, #0
 800809c:	d044      	beq.n	8008128 <_free_r+0x90>
 800809e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a2:	9001      	str	r0, [sp, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f1a1 0404 	sub.w	r4, r1, #4
 80080aa:	bfb8      	it	lt
 80080ac:	18e4      	addlt	r4, r4, r3
 80080ae:	f001 f88b 	bl	80091c8 <__malloc_lock>
 80080b2:	4a1e      	ldr	r2, [pc, #120]	; (800812c <_free_r+0x94>)
 80080b4:	9801      	ldr	r0, [sp, #4]
 80080b6:	6813      	ldr	r3, [r2, #0]
 80080b8:	b933      	cbnz	r3, 80080c8 <_free_r+0x30>
 80080ba:	6063      	str	r3, [r4, #4]
 80080bc:	6014      	str	r4, [r2, #0]
 80080be:	b003      	add	sp, #12
 80080c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080c4:	f001 b886 	b.w	80091d4 <__malloc_unlock>
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	d908      	bls.n	80080de <_free_r+0x46>
 80080cc:	6825      	ldr	r5, [r4, #0]
 80080ce:	1961      	adds	r1, r4, r5
 80080d0:	428b      	cmp	r3, r1
 80080d2:	bf01      	itttt	eq
 80080d4:	6819      	ldreq	r1, [r3, #0]
 80080d6:	685b      	ldreq	r3, [r3, #4]
 80080d8:	1949      	addeq	r1, r1, r5
 80080da:	6021      	streq	r1, [r4, #0]
 80080dc:	e7ed      	b.n	80080ba <_free_r+0x22>
 80080de:	461a      	mov	r2, r3
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	b10b      	cbz	r3, 80080e8 <_free_r+0x50>
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	d9fa      	bls.n	80080de <_free_r+0x46>
 80080e8:	6811      	ldr	r1, [r2, #0]
 80080ea:	1855      	adds	r5, r2, r1
 80080ec:	42a5      	cmp	r5, r4
 80080ee:	d10b      	bne.n	8008108 <_free_r+0x70>
 80080f0:	6824      	ldr	r4, [r4, #0]
 80080f2:	4421      	add	r1, r4
 80080f4:	1854      	adds	r4, r2, r1
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	6011      	str	r1, [r2, #0]
 80080fa:	d1e0      	bne.n	80080be <_free_r+0x26>
 80080fc:	681c      	ldr	r4, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	6053      	str	r3, [r2, #4]
 8008102:	4421      	add	r1, r4
 8008104:	6011      	str	r1, [r2, #0]
 8008106:	e7da      	b.n	80080be <_free_r+0x26>
 8008108:	d902      	bls.n	8008110 <_free_r+0x78>
 800810a:	230c      	movs	r3, #12
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	e7d6      	b.n	80080be <_free_r+0x26>
 8008110:	6825      	ldr	r5, [r4, #0]
 8008112:	1961      	adds	r1, r4, r5
 8008114:	428b      	cmp	r3, r1
 8008116:	bf04      	itt	eq
 8008118:	6819      	ldreq	r1, [r3, #0]
 800811a:	685b      	ldreq	r3, [r3, #4]
 800811c:	6063      	str	r3, [r4, #4]
 800811e:	bf04      	itt	eq
 8008120:	1949      	addeq	r1, r1, r5
 8008122:	6021      	streq	r1, [r4, #0]
 8008124:	6054      	str	r4, [r2, #4]
 8008126:	e7ca      	b.n	80080be <_free_r+0x26>
 8008128:	b003      	add	sp, #12
 800812a:	bd30      	pop	{r4, r5, pc}
 800812c:	20000c24 	.word	0x20000c24

08008130 <sbrk_aligned>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	4e0e      	ldr	r6, [pc, #56]	; (800816c <sbrk_aligned+0x3c>)
 8008134:	460c      	mov	r4, r1
 8008136:	6831      	ldr	r1, [r6, #0]
 8008138:	4605      	mov	r5, r0
 800813a:	b911      	cbnz	r1, 8008142 <sbrk_aligned+0x12>
 800813c:	f000 fd28 	bl	8008b90 <_sbrk_r>
 8008140:	6030      	str	r0, [r6, #0]
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	f000 fd23 	bl	8008b90 <_sbrk_r>
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	d00a      	beq.n	8008164 <sbrk_aligned+0x34>
 800814e:	1cc4      	adds	r4, r0, #3
 8008150:	f024 0403 	bic.w	r4, r4, #3
 8008154:	42a0      	cmp	r0, r4
 8008156:	d007      	beq.n	8008168 <sbrk_aligned+0x38>
 8008158:	1a21      	subs	r1, r4, r0
 800815a:	4628      	mov	r0, r5
 800815c:	f000 fd18 	bl	8008b90 <_sbrk_r>
 8008160:	3001      	adds	r0, #1
 8008162:	d101      	bne.n	8008168 <sbrk_aligned+0x38>
 8008164:	f04f 34ff 	mov.w	r4, #4294967295
 8008168:	4620      	mov	r0, r4
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	20000c28 	.word	0x20000c28

08008170 <_malloc_r>:
 8008170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008174:	1ccd      	adds	r5, r1, #3
 8008176:	f025 0503 	bic.w	r5, r5, #3
 800817a:	3508      	adds	r5, #8
 800817c:	2d0c      	cmp	r5, #12
 800817e:	bf38      	it	cc
 8008180:	250c      	movcc	r5, #12
 8008182:	2d00      	cmp	r5, #0
 8008184:	4607      	mov	r7, r0
 8008186:	db01      	blt.n	800818c <_malloc_r+0x1c>
 8008188:	42a9      	cmp	r1, r5
 800818a:	d905      	bls.n	8008198 <_malloc_r+0x28>
 800818c:	230c      	movs	r3, #12
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	2600      	movs	r6, #0
 8008192:	4630      	mov	r0, r6
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008198:	4e2e      	ldr	r6, [pc, #184]	; (8008254 <_malloc_r+0xe4>)
 800819a:	f001 f815 	bl	80091c8 <__malloc_lock>
 800819e:	6833      	ldr	r3, [r6, #0]
 80081a0:	461c      	mov	r4, r3
 80081a2:	bb34      	cbnz	r4, 80081f2 <_malloc_r+0x82>
 80081a4:	4629      	mov	r1, r5
 80081a6:	4638      	mov	r0, r7
 80081a8:	f7ff ffc2 	bl	8008130 <sbrk_aligned>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	4604      	mov	r4, r0
 80081b0:	d14d      	bne.n	800824e <_malloc_r+0xde>
 80081b2:	6834      	ldr	r4, [r6, #0]
 80081b4:	4626      	mov	r6, r4
 80081b6:	2e00      	cmp	r6, #0
 80081b8:	d140      	bne.n	800823c <_malloc_r+0xcc>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	4631      	mov	r1, r6
 80081be:	4638      	mov	r0, r7
 80081c0:	eb04 0803 	add.w	r8, r4, r3
 80081c4:	f000 fce4 	bl	8008b90 <_sbrk_r>
 80081c8:	4580      	cmp	r8, r0
 80081ca:	d13a      	bne.n	8008242 <_malloc_r+0xd2>
 80081cc:	6821      	ldr	r1, [r4, #0]
 80081ce:	3503      	adds	r5, #3
 80081d0:	1a6d      	subs	r5, r5, r1
 80081d2:	f025 0503 	bic.w	r5, r5, #3
 80081d6:	3508      	adds	r5, #8
 80081d8:	2d0c      	cmp	r5, #12
 80081da:	bf38      	it	cc
 80081dc:	250c      	movcc	r5, #12
 80081de:	4629      	mov	r1, r5
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7ff ffa5 	bl	8008130 <sbrk_aligned>
 80081e6:	3001      	adds	r0, #1
 80081e8:	d02b      	beq.n	8008242 <_malloc_r+0xd2>
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	442b      	add	r3, r5
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	e00e      	b.n	8008210 <_malloc_r+0xa0>
 80081f2:	6822      	ldr	r2, [r4, #0]
 80081f4:	1b52      	subs	r2, r2, r5
 80081f6:	d41e      	bmi.n	8008236 <_malloc_r+0xc6>
 80081f8:	2a0b      	cmp	r2, #11
 80081fa:	d916      	bls.n	800822a <_malloc_r+0xba>
 80081fc:	1961      	adds	r1, r4, r5
 80081fe:	42a3      	cmp	r3, r4
 8008200:	6025      	str	r5, [r4, #0]
 8008202:	bf18      	it	ne
 8008204:	6059      	strne	r1, [r3, #4]
 8008206:	6863      	ldr	r3, [r4, #4]
 8008208:	bf08      	it	eq
 800820a:	6031      	streq	r1, [r6, #0]
 800820c:	5162      	str	r2, [r4, r5]
 800820e:	604b      	str	r3, [r1, #4]
 8008210:	4638      	mov	r0, r7
 8008212:	f104 060b 	add.w	r6, r4, #11
 8008216:	f000 ffdd 	bl	80091d4 <__malloc_unlock>
 800821a:	f026 0607 	bic.w	r6, r6, #7
 800821e:	1d23      	adds	r3, r4, #4
 8008220:	1af2      	subs	r2, r6, r3
 8008222:	d0b6      	beq.n	8008192 <_malloc_r+0x22>
 8008224:	1b9b      	subs	r3, r3, r6
 8008226:	50a3      	str	r3, [r4, r2]
 8008228:	e7b3      	b.n	8008192 <_malloc_r+0x22>
 800822a:	6862      	ldr	r2, [r4, #4]
 800822c:	42a3      	cmp	r3, r4
 800822e:	bf0c      	ite	eq
 8008230:	6032      	streq	r2, [r6, #0]
 8008232:	605a      	strne	r2, [r3, #4]
 8008234:	e7ec      	b.n	8008210 <_malloc_r+0xa0>
 8008236:	4623      	mov	r3, r4
 8008238:	6864      	ldr	r4, [r4, #4]
 800823a:	e7b2      	b.n	80081a2 <_malloc_r+0x32>
 800823c:	4634      	mov	r4, r6
 800823e:	6876      	ldr	r6, [r6, #4]
 8008240:	e7b9      	b.n	80081b6 <_malloc_r+0x46>
 8008242:	230c      	movs	r3, #12
 8008244:	603b      	str	r3, [r7, #0]
 8008246:	4638      	mov	r0, r7
 8008248:	f000 ffc4 	bl	80091d4 <__malloc_unlock>
 800824c:	e7a1      	b.n	8008192 <_malloc_r+0x22>
 800824e:	6025      	str	r5, [r4, #0]
 8008250:	e7de      	b.n	8008210 <_malloc_r+0xa0>
 8008252:	bf00      	nop
 8008254:	20000c24 	.word	0x20000c24

08008258 <__ssputs_r>:
 8008258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	688e      	ldr	r6, [r1, #8]
 800825e:	429e      	cmp	r6, r3
 8008260:	4682      	mov	sl, r0
 8008262:	460c      	mov	r4, r1
 8008264:	4690      	mov	r8, r2
 8008266:	461f      	mov	r7, r3
 8008268:	d838      	bhi.n	80082dc <__ssputs_r+0x84>
 800826a:	898a      	ldrh	r2, [r1, #12]
 800826c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008270:	d032      	beq.n	80082d8 <__ssputs_r+0x80>
 8008272:	6825      	ldr	r5, [r4, #0]
 8008274:	6909      	ldr	r1, [r1, #16]
 8008276:	eba5 0901 	sub.w	r9, r5, r1
 800827a:	6965      	ldr	r5, [r4, #20]
 800827c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008284:	3301      	adds	r3, #1
 8008286:	444b      	add	r3, r9
 8008288:	106d      	asrs	r5, r5, #1
 800828a:	429d      	cmp	r5, r3
 800828c:	bf38      	it	cc
 800828e:	461d      	movcc	r5, r3
 8008290:	0553      	lsls	r3, r2, #21
 8008292:	d531      	bpl.n	80082f8 <__ssputs_r+0xa0>
 8008294:	4629      	mov	r1, r5
 8008296:	f7ff ff6b 	bl	8008170 <_malloc_r>
 800829a:	4606      	mov	r6, r0
 800829c:	b950      	cbnz	r0, 80082b4 <__ssputs_r+0x5c>
 800829e:	230c      	movs	r3, #12
 80082a0:	f8ca 3000 	str.w	r3, [sl]
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	f04f 30ff 	mov.w	r0, #4294967295
 80082b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b4:	6921      	ldr	r1, [r4, #16]
 80082b6:	464a      	mov	r2, r9
 80082b8:	f7ff fa08 	bl	80076cc <memcpy>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	6126      	str	r6, [r4, #16]
 80082ca:	6165      	str	r5, [r4, #20]
 80082cc:	444e      	add	r6, r9
 80082ce:	eba5 0509 	sub.w	r5, r5, r9
 80082d2:	6026      	str	r6, [r4, #0]
 80082d4:	60a5      	str	r5, [r4, #8]
 80082d6:	463e      	mov	r6, r7
 80082d8:	42be      	cmp	r6, r7
 80082da:	d900      	bls.n	80082de <__ssputs_r+0x86>
 80082dc:	463e      	mov	r6, r7
 80082de:	6820      	ldr	r0, [r4, #0]
 80082e0:	4632      	mov	r2, r6
 80082e2:	4641      	mov	r1, r8
 80082e4:	f000 ff56 	bl	8009194 <memmove>
 80082e8:	68a3      	ldr	r3, [r4, #8]
 80082ea:	1b9b      	subs	r3, r3, r6
 80082ec:	60a3      	str	r3, [r4, #8]
 80082ee:	6823      	ldr	r3, [r4, #0]
 80082f0:	4433      	add	r3, r6
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	2000      	movs	r0, #0
 80082f6:	e7db      	b.n	80082b0 <__ssputs_r+0x58>
 80082f8:	462a      	mov	r2, r5
 80082fa:	f000 ff71 	bl	80091e0 <_realloc_r>
 80082fe:	4606      	mov	r6, r0
 8008300:	2800      	cmp	r0, #0
 8008302:	d1e1      	bne.n	80082c8 <__ssputs_r+0x70>
 8008304:	6921      	ldr	r1, [r4, #16]
 8008306:	4650      	mov	r0, sl
 8008308:	f7ff fec6 	bl	8008098 <_free_r>
 800830c:	e7c7      	b.n	800829e <__ssputs_r+0x46>
	...

08008310 <_svfiprintf_r>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	4698      	mov	r8, r3
 8008316:	898b      	ldrh	r3, [r1, #12]
 8008318:	061b      	lsls	r3, r3, #24
 800831a:	b09d      	sub	sp, #116	; 0x74
 800831c:	4607      	mov	r7, r0
 800831e:	460d      	mov	r5, r1
 8008320:	4614      	mov	r4, r2
 8008322:	d50e      	bpl.n	8008342 <_svfiprintf_r+0x32>
 8008324:	690b      	ldr	r3, [r1, #16]
 8008326:	b963      	cbnz	r3, 8008342 <_svfiprintf_r+0x32>
 8008328:	2140      	movs	r1, #64	; 0x40
 800832a:	f7ff ff21 	bl	8008170 <_malloc_r>
 800832e:	6028      	str	r0, [r5, #0]
 8008330:	6128      	str	r0, [r5, #16]
 8008332:	b920      	cbnz	r0, 800833e <_svfiprintf_r+0x2e>
 8008334:	230c      	movs	r3, #12
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	e0d1      	b.n	80084e2 <_svfiprintf_r+0x1d2>
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	616b      	str	r3, [r5, #20]
 8008342:	2300      	movs	r3, #0
 8008344:	9309      	str	r3, [sp, #36]	; 0x24
 8008346:	2320      	movs	r3, #32
 8008348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800834c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008350:	2330      	movs	r3, #48	; 0x30
 8008352:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084fc <_svfiprintf_r+0x1ec>
 8008356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800835a:	f04f 0901 	mov.w	r9, #1
 800835e:	4623      	mov	r3, r4
 8008360:	469a      	mov	sl, r3
 8008362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008366:	b10a      	cbz	r2, 800836c <_svfiprintf_r+0x5c>
 8008368:	2a25      	cmp	r2, #37	; 0x25
 800836a:	d1f9      	bne.n	8008360 <_svfiprintf_r+0x50>
 800836c:	ebba 0b04 	subs.w	fp, sl, r4
 8008370:	d00b      	beq.n	800838a <_svfiprintf_r+0x7a>
 8008372:	465b      	mov	r3, fp
 8008374:	4622      	mov	r2, r4
 8008376:	4629      	mov	r1, r5
 8008378:	4638      	mov	r0, r7
 800837a:	f7ff ff6d 	bl	8008258 <__ssputs_r>
 800837e:	3001      	adds	r0, #1
 8008380:	f000 80aa 	beq.w	80084d8 <_svfiprintf_r+0x1c8>
 8008384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008386:	445a      	add	r2, fp
 8008388:	9209      	str	r2, [sp, #36]	; 0x24
 800838a:	f89a 3000 	ldrb.w	r3, [sl]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 80a2 	beq.w	80084d8 <_svfiprintf_r+0x1c8>
 8008394:	2300      	movs	r3, #0
 8008396:	f04f 32ff 	mov.w	r2, #4294967295
 800839a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800839e:	f10a 0a01 	add.w	sl, sl, #1
 80083a2:	9304      	str	r3, [sp, #16]
 80083a4:	9307      	str	r3, [sp, #28]
 80083a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083aa:	931a      	str	r3, [sp, #104]	; 0x68
 80083ac:	4654      	mov	r4, sl
 80083ae:	2205      	movs	r2, #5
 80083b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b4:	4851      	ldr	r0, [pc, #324]	; (80084fc <_svfiprintf_r+0x1ec>)
 80083b6:	f7f7 ff2b 	bl	8000210 <memchr>
 80083ba:	9a04      	ldr	r2, [sp, #16]
 80083bc:	b9d8      	cbnz	r0, 80083f6 <_svfiprintf_r+0xe6>
 80083be:	06d0      	lsls	r0, r2, #27
 80083c0:	bf44      	itt	mi
 80083c2:	2320      	movmi	r3, #32
 80083c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c8:	0711      	lsls	r1, r2, #28
 80083ca:	bf44      	itt	mi
 80083cc:	232b      	movmi	r3, #43	; 0x2b
 80083ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d2:	f89a 3000 	ldrb.w	r3, [sl]
 80083d6:	2b2a      	cmp	r3, #42	; 0x2a
 80083d8:	d015      	beq.n	8008406 <_svfiprintf_r+0xf6>
 80083da:	9a07      	ldr	r2, [sp, #28]
 80083dc:	4654      	mov	r4, sl
 80083de:	2000      	movs	r0, #0
 80083e0:	f04f 0c0a 	mov.w	ip, #10
 80083e4:	4621      	mov	r1, r4
 80083e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ea:	3b30      	subs	r3, #48	; 0x30
 80083ec:	2b09      	cmp	r3, #9
 80083ee:	d94e      	bls.n	800848e <_svfiprintf_r+0x17e>
 80083f0:	b1b0      	cbz	r0, 8008420 <_svfiprintf_r+0x110>
 80083f2:	9207      	str	r2, [sp, #28]
 80083f4:	e014      	b.n	8008420 <_svfiprintf_r+0x110>
 80083f6:	eba0 0308 	sub.w	r3, r0, r8
 80083fa:	fa09 f303 	lsl.w	r3, r9, r3
 80083fe:	4313      	orrs	r3, r2
 8008400:	9304      	str	r3, [sp, #16]
 8008402:	46a2      	mov	sl, r4
 8008404:	e7d2      	b.n	80083ac <_svfiprintf_r+0x9c>
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	1d19      	adds	r1, r3, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	9103      	str	r1, [sp, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfbb      	ittet	lt
 8008412:	425b      	neglt	r3, r3
 8008414:	f042 0202 	orrlt.w	r2, r2, #2
 8008418:	9307      	strge	r3, [sp, #28]
 800841a:	9307      	strlt	r3, [sp, #28]
 800841c:	bfb8      	it	lt
 800841e:	9204      	strlt	r2, [sp, #16]
 8008420:	7823      	ldrb	r3, [r4, #0]
 8008422:	2b2e      	cmp	r3, #46	; 0x2e
 8008424:	d10c      	bne.n	8008440 <_svfiprintf_r+0x130>
 8008426:	7863      	ldrb	r3, [r4, #1]
 8008428:	2b2a      	cmp	r3, #42	; 0x2a
 800842a:	d135      	bne.n	8008498 <_svfiprintf_r+0x188>
 800842c:	9b03      	ldr	r3, [sp, #12]
 800842e:	1d1a      	adds	r2, r3, #4
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	9203      	str	r2, [sp, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	bfb8      	it	lt
 8008438:	f04f 33ff 	movlt.w	r3, #4294967295
 800843c:	3402      	adds	r4, #2
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800850c <_svfiprintf_r+0x1fc>
 8008444:	7821      	ldrb	r1, [r4, #0]
 8008446:	2203      	movs	r2, #3
 8008448:	4650      	mov	r0, sl
 800844a:	f7f7 fee1 	bl	8000210 <memchr>
 800844e:	b140      	cbz	r0, 8008462 <_svfiprintf_r+0x152>
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	eba0 000a 	sub.w	r0, r0, sl
 8008456:	fa03 f000 	lsl.w	r0, r3, r0
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	4303      	orrs	r3, r0
 800845e:	3401      	adds	r4, #1
 8008460:	9304      	str	r3, [sp, #16]
 8008462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008466:	4826      	ldr	r0, [pc, #152]	; (8008500 <_svfiprintf_r+0x1f0>)
 8008468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800846c:	2206      	movs	r2, #6
 800846e:	f7f7 fecf 	bl	8000210 <memchr>
 8008472:	2800      	cmp	r0, #0
 8008474:	d038      	beq.n	80084e8 <_svfiprintf_r+0x1d8>
 8008476:	4b23      	ldr	r3, [pc, #140]	; (8008504 <_svfiprintf_r+0x1f4>)
 8008478:	bb1b      	cbnz	r3, 80084c2 <_svfiprintf_r+0x1b2>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	3307      	adds	r3, #7
 800847e:	f023 0307 	bic.w	r3, r3, #7
 8008482:	3308      	adds	r3, #8
 8008484:	9303      	str	r3, [sp, #12]
 8008486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008488:	4433      	add	r3, r6
 800848a:	9309      	str	r3, [sp, #36]	; 0x24
 800848c:	e767      	b.n	800835e <_svfiprintf_r+0x4e>
 800848e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008492:	460c      	mov	r4, r1
 8008494:	2001      	movs	r0, #1
 8008496:	e7a5      	b.n	80083e4 <_svfiprintf_r+0xd4>
 8008498:	2300      	movs	r3, #0
 800849a:	3401      	adds	r4, #1
 800849c:	9305      	str	r3, [sp, #20]
 800849e:	4619      	mov	r1, r3
 80084a0:	f04f 0c0a 	mov.w	ip, #10
 80084a4:	4620      	mov	r0, r4
 80084a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084aa:	3a30      	subs	r2, #48	; 0x30
 80084ac:	2a09      	cmp	r2, #9
 80084ae:	d903      	bls.n	80084b8 <_svfiprintf_r+0x1a8>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0c5      	beq.n	8008440 <_svfiprintf_r+0x130>
 80084b4:	9105      	str	r1, [sp, #20]
 80084b6:	e7c3      	b.n	8008440 <_svfiprintf_r+0x130>
 80084b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084bc:	4604      	mov	r4, r0
 80084be:	2301      	movs	r3, #1
 80084c0:	e7f0      	b.n	80084a4 <_svfiprintf_r+0x194>
 80084c2:	ab03      	add	r3, sp, #12
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	462a      	mov	r2, r5
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <_svfiprintf_r+0x1f8>)
 80084ca:	a904      	add	r1, sp, #16
 80084cc:	4638      	mov	r0, r7
 80084ce:	f7fc f9a1 	bl	8004814 <_printf_float>
 80084d2:	1c42      	adds	r2, r0, #1
 80084d4:	4606      	mov	r6, r0
 80084d6:	d1d6      	bne.n	8008486 <_svfiprintf_r+0x176>
 80084d8:	89ab      	ldrh	r3, [r5, #12]
 80084da:	065b      	lsls	r3, r3, #25
 80084dc:	f53f af2c 	bmi.w	8008338 <_svfiprintf_r+0x28>
 80084e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084e2:	b01d      	add	sp, #116	; 0x74
 80084e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e8:	ab03      	add	r3, sp, #12
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	462a      	mov	r2, r5
 80084ee:	4b06      	ldr	r3, [pc, #24]	; (8008508 <_svfiprintf_r+0x1f8>)
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	4638      	mov	r0, r7
 80084f4:	f7fc fc32 	bl	8004d5c <_printf_i>
 80084f8:	e7eb      	b.n	80084d2 <_svfiprintf_r+0x1c2>
 80084fa:	bf00      	nop
 80084fc:	0800a1dc 	.word	0x0800a1dc
 8008500:	0800a1e6 	.word	0x0800a1e6
 8008504:	08004815 	.word	0x08004815
 8008508:	08008259 	.word	0x08008259
 800850c:	0800a1e2 	.word	0x0800a1e2

08008510 <_sungetc_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	1c4b      	adds	r3, r1, #1
 8008514:	4614      	mov	r4, r2
 8008516:	d103      	bne.n	8008520 <_sungetc_r+0x10>
 8008518:	f04f 35ff 	mov.w	r5, #4294967295
 800851c:	4628      	mov	r0, r5
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	8993      	ldrh	r3, [r2, #12]
 8008522:	f023 0320 	bic.w	r3, r3, #32
 8008526:	8193      	strh	r3, [r2, #12]
 8008528:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800852a:	6852      	ldr	r2, [r2, #4]
 800852c:	b2cd      	uxtb	r5, r1
 800852e:	b18b      	cbz	r3, 8008554 <_sungetc_r+0x44>
 8008530:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008532:	4293      	cmp	r3, r2
 8008534:	dd08      	ble.n	8008548 <_sungetc_r+0x38>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	1e5a      	subs	r2, r3, #1
 800853a:	6022      	str	r2, [r4, #0]
 800853c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	3301      	adds	r3, #1
 8008544:	6063      	str	r3, [r4, #4]
 8008546:	e7e9      	b.n	800851c <_sungetc_r+0xc>
 8008548:	4621      	mov	r1, r4
 800854a:	f000 fbf1 	bl	8008d30 <__submore>
 800854e:	2800      	cmp	r0, #0
 8008550:	d0f1      	beq.n	8008536 <_sungetc_r+0x26>
 8008552:	e7e1      	b.n	8008518 <_sungetc_r+0x8>
 8008554:	6921      	ldr	r1, [r4, #16]
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	b151      	cbz	r1, 8008570 <_sungetc_r+0x60>
 800855a:	4299      	cmp	r1, r3
 800855c:	d208      	bcs.n	8008570 <_sungetc_r+0x60>
 800855e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008562:	42a9      	cmp	r1, r5
 8008564:	d104      	bne.n	8008570 <_sungetc_r+0x60>
 8008566:	3b01      	subs	r3, #1
 8008568:	3201      	adds	r2, #1
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	6062      	str	r2, [r4, #4]
 800856e:	e7d5      	b.n	800851c <_sungetc_r+0xc>
 8008570:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008578:	6363      	str	r3, [r4, #52]	; 0x34
 800857a:	2303      	movs	r3, #3
 800857c:	63a3      	str	r3, [r4, #56]	; 0x38
 800857e:	4623      	mov	r3, r4
 8008580:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	2301      	movs	r3, #1
 8008588:	e7dc      	b.n	8008544 <_sungetc_r+0x34>

0800858a <__ssrefill_r>:
 800858a:	b510      	push	{r4, lr}
 800858c:	460c      	mov	r4, r1
 800858e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008590:	b169      	cbz	r1, 80085ae <__ssrefill_r+0x24>
 8008592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008596:	4299      	cmp	r1, r3
 8008598:	d001      	beq.n	800859e <__ssrefill_r+0x14>
 800859a:	f7ff fd7d 	bl	8008098 <_free_r>
 800859e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085a0:	6063      	str	r3, [r4, #4]
 80085a2:	2000      	movs	r0, #0
 80085a4:	6360      	str	r0, [r4, #52]	; 0x34
 80085a6:	b113      	cbz	r3, 80085ae <__ssrefill_r+0x24>
 80085a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	6923      	ldr	r3, [r4, #16]
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	2300      	movs	r3, #0
 80085b4:	6063      	str	r3, [r4, #4]
 80085b6:	89a3      	ldrh	r3, [r4, #12]
 80085b8:	f043 0320 	orr.w	r3, r3, #32
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	e7f3      	b.n	80085ac <__ssrefill_r+0x22>

080085c4 <__ssvfiscanf_r>:
 80085c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	460c      	mov	r4, r1
 80085ca:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80085ce:	2100      	movs	r1, #0
 80085d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80085d4:	49a6      	ldr	r1, [pc, #664]	; (8008870 <__ssvfiscanf_r+0x2ac>)
 80085d6:	91a0      	str	r1, [sp, #640]	; 0x280
 80085d8:	f10d 0804 	add.w	r8, sp, #4
 80085dc:	49a5      	ldr	r1, [pc, #660]	; (8008874 <__ssvfiscanf_r+0x2b0>)
 80085de:	4fa6      	ldr	r7, [pc, #664]	; (8008878 <__ssvfiscanf_r+0x2b4>)
 80085e0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800887c <__ssvfiscanf_r+0x2b8>
 80085e4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80085e8:	4606      	mov	r6, r0
 80085ea:	91a1      	str	r1, [sp, #644]	; 0x284
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	7813      	ldrb	r3, [r2, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 815a 	beq.w	80088aa <__ssvfiscanf_r+0x2e6>
 80085f6:	5dd9      	ldrb	r1, [r3, r7]
 80085f8:	f011 0108 	ands.w	r1, r1, #8
 80085fc:	f102 0501 	add.w	r5, r2, #1
 8008600:	d019      	beq.n	8008636 <__ssvfiscanf_r+0x72>
 8008602:	6863      	ldr	r3, [r4, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	dd0f      	ble.n	8008628 <__ssvfiscanf_r+0x64>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	781a      	ldrb	r2, [r3, #0]
 800860c:	5cba      	ldrb	r2, [r7, r2]
 800860e:	0712      	lsls	r2, r2, #28
 8008610:	d401      	bmi.n	8008616 <__ssvfiscanf_r+0x52>
 8008612:	462a      	mov	r2, r5
 8008614:	e7eb      	b.n	80085ee <__ssvfiscanf_r+0x2a>
 8008616:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008618:	3201      	adds	r2, #1
 800861a:	9245      	str	r2, [sp, #276]	; 0x114
 800861c:	6862      	ldr	r2, [r4, #4]
 800861e:	3301      	adds	r3, #1
 8008620:	3a01      	subs	r2, #1
 8008622:	6062      	str	r2, [r4, #4]
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	e7ec      	b.n	8008602 <__ssvfiscanf_r+0x3e>
 8008628:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800862a:	4621      	mov	r1, r4
 800862c:	4630      	mov	r0, r6
 800862e:	4798      	blx	r3
 8008630:	2800      	cmp	r0, #0
 8008632:	d0e9      	beq.n	8008608 <__ssvfiscanf_r+0x44>
 8008634:	e7ed      	b.n	8008612 <__ssvfiscanf_r+0x4e>
 8008636:	2b25      	cmp	r3, #37	; 0x25
 8008638:	d012      	beq.n	8008660 <__ssvfiscanf_r+0x9c>
 800863a:	469a      	mov	sl, r3
 800863c:	6863      	ldr	r3, [r4, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f340 8091 	ble.w	8008766 <__ssvfiscanf_r+0x1a2>
 8008644:	6822      	ldr	r2, [r4, #0]
 8008646:	7813      	ldrb	r3, [r2, #0]
 8008648:	4553      	cmp	r3, sl
 800864a:	f040 812e 	bne.w	80088aa <__ssvfiscanf_r+0x2e6>
 800864e:	6863      	ldr	r3, [r4, #4]
 8008650:	3b01      	subs	r3, #1
 8008652:	6063      	str	r3, [r4, #4]
 8008654:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008656:	3201      	adds	r2, #1
 8008658:	3301      	adds	r3, #1
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	9345      	str	r3, [sp, #276]	; 0x114
 800865e:	e7d8      	b.n	8008612 <__ssvfiscanf_r+0x4e>
 8008660:	9141      	str	r1, [sp, #260]	; 0x104
 8008662:	9143      	str	r1, [sp, #268]	; 0x10c
 8008664:	7853      	ldrb	r3, [r2, #1]
 8008666:	2b2a      	cmp	r3, #42	; 0x2a
 8008668:	bf02      	ittt	eq
 800866a:	2310      	moveq	r3, #16
 800866c:	1c95      	addeq	r5, r2, #2
 800866e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008670:	220a      	movs	r2, #10
 8008672:	46aa      	mov	sl, r5
 8008674:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008678:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800867c:	2b09      	cmp	r3, #9
 800867e:	d91d      	bls.n	80086bc <__ssvfiscanf_r+0xf8>
 8008680:	487e      	ldr	r0, [pc, #504]	; (800887c <__ssvfiscanf_r+0x2b8>)
 8008682:	2203      	movs	r2, #3
 8008684:	f7f7 fdc4 	bl	8000210 <memchr>
 8008688:	b140      	cbz	r0, 800869c <__ssvfiscanf_r+0xd8>
 800868a:	2301      	movs	r3, #1
 800868c:	eba0 0009 	sub.w	r0, r0, r9
 8008690:	fa03 f000 	lsl.w	r0, r3, r0
 8008694:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008696:	4318      	orrs	r0, r3
 8008698:	9041      	str	r0, [sp, #260]	; 0x104
 800869a:	4655      	mov	r5, sl
 800869c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086a0:	2b78      	cmp	r3, #120	; 0x78
 80086a2:	d806      	bhi.n	80086b2 <__ssvfiscanf_r+0xee>
 80086a4:	2b57      	cmp	r3, #87	; 0x57
 80086a6:	d810      	bhi.n	80086ca <__ssvfiscanf_r+0x106>
 80086a8:	2b25      	cmp	r3, #37	; 0x25
 80086aa:	d0c6      	beq.n	800863a <__ssvfiscanf_r+0x76>
 80086ac:	d856      	bhi.n	800875c <__ssvfiscanf_r+0x198>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d064      	beq.n	800877c <__ssvfiscanf_r+0x1b8>
 80086b2:	2303      	movs	r3, #3
 80086b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80086b6:	230a      	movs	r3, #10
 80086b8:	9342      	str	r3, [sp, #264]	; 0x108
 80086ba:	e071      	b.n	80087a0 <__ssvfiscanf_r+0x1dc>
 80086bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80086be:	fb02 1103 	mla	r1, r2, r3, r1
 80086c2:	3930      	subs	r1, #48	; 0x30
 80086c4:	9143      	str	r1, [sp, #268]	; 0x10c
 80086c6:	4655      	mov	r5, sl
 80086c8:	e7d3      	b.n	8008672 <__ssvfiscanf_r+0xae>
 80086ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80086ce:	2a20      	cmp	r2, #32
 80086d0:	d8ef      	bhi.n	80086b2 <__ssvfiscanf_r+0xee>
 80086d2:	a101      	add	r1, pc, #4	; (adr r1, 80086d8 <__ssvfiscanf_r+0x114>)
 80086d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086d8:	0800878b 	.word	0x0800878b
 80086dc:	080086b3 	.word	0x080086b3
 80086e0:	080086b3 	.word	0x080086b3
 80086e4:	080087e9 	.word	0x080087e9
 80086e8:	080086b3 	.word	0x080086b3
 80086ec:	080086b3 	.word	0x080086b3
 80086f0:	080086b3 	.word	0x080086b3
 80086f4:	080086b3 	.word	0x080086b3
 80086f8:	080086b3 	.word	0x080086b3
 80086fc:	080086b3 	.word	0x080086b3
 8008700:	080086b3 	.word	0x080086b3
 8008704:	080087ff 	.word	0x080087ff
 8008708:	080087d5 	.word	0x080087d5
 800870c:	08008763 	.word	0x08008763
 8008710:	08008763 	.word	0x08008763
 8008714:	08008763 	.word	0x08008763
 8008718:	080086b3 	.word	0x080086b3
 800871c:	080087d9 	.word	0x080087d9
 8008720:	080086b3 	.word	0x080086b3
 8008724:	080086b3 	.word	0x080086b3
 8008728:	080086b3 	.word	0x080086b3
 800872c:	080086b3 	.word	0x080086b3
 8008730:	0800880f 	.word	0x0800880f
 8008734:	080087e1 	.word	0x080087e1
 8008738:	08008783 	.word	0x08008783
 800873c:	080086b3 	.word	0x080086b3
 8008740:	080086b3 	.word	0x080086b3
 8008744:	0800880b 	.word	0x0800880b
 8008748:	080086b3 	.word	0x080086b3
 800874c:	080087d5 	.word	0x080087d5
 8008750:	080086b3 	.word	0x080086b3
 8008754:	080086b3 	.word	0x080086b3
 8008758:	0800878b 	.word	0x0800878b
 800875c:	3b45      	subs	r3, #69	; 0x45
 800875e:	2b02      	cmp	r3, #2
 8008760:	d8a7      	bhi.n	80086b2 <__ssvfiscanf_r+0xee>
 8008762:	2305      	movs	r3, #5
 8008764:	e01b      	b.n	800879e <__ssvfiscanf_r+0x1da>
 8008766:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008768:	4621      	mov	r1, r4
 800876a:	4630      	mov	r0, r6
 800876c:	4798      	blx	r3
 800876e:	2800      	cmp	r0, #0
 8008770:	f43f af68 	beq.w	8008644 <__ssvfiscanf_r+0x80>
 8008774:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008776:	2800      	cmp	r0, #0
 8008778:	f040 808d 	bne.w	8008896 <__ssvfiscanf_r+0x2d2>
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	e08f      	b.n	80088a2 <__ssvfiscanf_r+0x2de>
 8008782:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008784:	f042 0220 	orr.w	r2, r2, #32
 8008788:	9241      	str	r2, [sp, #260]	; 0x104
 800878a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800878c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008790:	9241      	str	r2, [sp, #260]	; 0x104
 8008792:	2210      	movs	r2, #16
 8008794:	2b6f      	cmp	r3, #111	; 0x6f
 8008796:	9242      	str	r2, [sp, #264]	; 0x108
 8008798:	bf34      	ite	cc
 800879a:	2303      	movcc	r3, #3
 800879c:	2304      	movcs	r3, #4
 800879e:	9347      	str	r3, [sp, #284]	; 0x11c
 80087a0:	6863      	ldr	r3, [r4, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dd42      	ble.n	800882c <__ssvfiscanf_r+0x268>
 80087a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087a8:	0659      	lsls	r1, r3, #25
 80087aa:	d404      	bmi.n	80087b6 <__ssvfiscanf_r+0x1f2>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	5cba      	ldrb	r2, [r7, r2]
 80087b2:	0712      	lsls	r2, r2, #28
 80087b4:	d441      	bmi.n	800883a <__ssvfiscanf_r+0x276>
 80087b6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	dc50      	bgt.n	800885e <__ssvfiscanf_r+0x29a>
 80087bc:	466b      	mov	r3, sp
 80087be:	4622      	mov	r2, r4
 80087c0:	a941      	add	r1, sp, #260	; 0x104
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f876 	bl	80088b4 <_scanf_chars>
 80087c8:	2801      	cmp	r0, #1
 80087ca:	d06e      	beq.n	80088aa <__ssvfiscanf_r+0x2e6>
 80087cc:	2802      	cmp	r0, #2
 80087ce:	f47f af20 	bne.w	8008612 <__ssvfiscanf_r+0x4e>
 80087d2:	e7cf      	b.n	8008774 <__ssvfiscanf_r+0x1b0>
 80087d4:	220a      	movs	r2, #10
 80087d6:	e7dd      	b.n	8008794 <__ssvfiscanf_r+0x1d0>
 80087d8:	2300      	movs	r3, #0
 80087da:	9342      	str	r3, [sp, #264]	; 0x108
 80087dc:	2303      	movs	r3, #3
 80087de:	e7de      	b.n	800879e <__ssvfiscanf_r+0x1da>
 80087e0:	2308      	movs	r3, #8
 80087e2:	9342      	str	r3, [sp, #264]	; 0x108
 80087e4:	2304      	movs	r3, #4
 80087e6:	e7da      	b.n	800879e <__ssvfiscanf_r+0x1da>
 80087e8:	4629      	mov	r1, r5
 80087ea:	4640      	mov	r0, r8
 80087ec:	f000 f9e0 	bl	8008bb0 <__sccl>
 80087f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f6:	9341      	str	r3, [sp, #260]	; 0x104
 80087f8:	4605      	mov	r5, r0
 80087fa:	2301      	movs	r3, #1
 80087fc:	e7cf      	b.n	800879e <__ssvfiscanf_r+0x1da>
 80087fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008804:	9341      	str	r3, [sp, #260]	; 0x104
 8008806:	2300      	movs	r3, #0
 8008808:	e7c9      	b.n	800879e <__ssvfiscanf_r+0x1da>
 800880a:	2302      	movs	r3, #2
 800880c:	e7c7      	b.n	800879e <__ssvfiscanf_r+0x1da>
 800880e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008810:	06c3      	lsls	r3, r0, #27
 8008812:	f53f aefe 	bmi.w	8008612 <__ssvfiscanf_r+0x4e>
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800881a:	1d19      	adds	r1, r3, #4
 800881c:	9100      	str	r1, [sp, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f010 0f01 	tst.w	r0, #1
 8008824:	bf14      	ite	ne
 8008826:	801a      	strhne	r2, [r3, #0]
 8008828:	601a      	streq	r2, [r3, #0]
 800882a:	e6f2      	b.n	8008612 <__ssvfiscanf_r+0x4e>
 800882c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800882e:	4621      	mov	r1, r4
 8008830:	4630      	mov	r0, r6
 8008832:	4798      	blx	r3
 8008834:	2800      	cmp	r0, #0
 8008836:	d0b6      	beq.n	80087a6 <__ssvfiscanf_r+0x1e2>
 8008838:	e79c      	b.n	8008774 <__ssvfiscanf_r+0x1b0>
 800883a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800883c:	3201      	adds	r2, #1
 800883e:	9245      	str	r2, [sp, #276]	; 0x114
 8008840:	6862      	ldr	r2, [r4, #4]
 8008842:	3a01      	subs	r2, #1
 8008844:	2a00      	cmp	r2, #0
 8008846:	6062      	str	r2, [r4, #4]
 8008848:	dd02      	ble.n	8008850 <__ssvfiscanf_r+0x28c>
 800884a:	3301      	adds	r3, #1
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	e7ad      	b.n	80087ac <__ssvfiscanf_r+0x1e8>
 8008850:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008852:	4621      	mov	r1, r4
 8008854:	4630      	mov	r0, r6
 8008856:	4798      	blx	r3
 8008858:	2800      	cmp	r0, #0
 800885a:	d0a7      	beq.n	80087ac <__ssvfiscanf_r+0x1e8>
 800885c:	e78a      	b.n	8008774 <__ssvfiscanf_r+0x1b0>
 800885e:	2b04      	cmp	r3, #4
 8008860:	dc0e      	bgt.n	8008880 <__ssvfiscanf_r+0x2bc>
 8008862:	466b      	mov	r3, sp
 8008864:	4622      	mov	r2, r4
 8008866:	a941      	add	r1, sp, #260	; 0x104
 8008868:	4630      	mov	r0, r6
 800886a:	f000 f87d 	bl	8008968 <_scanf_i>
 800886e:	e7ab      	b.n	80087c8 <__ssvfiscanf_r+0x204>
 8008870:	08008511 	.word	0x08008511
 8008874:	0800858b 	.word	0x0800858b
 8008878:	08009e79 	.word	0x08009e79
 800887c:	0800a1e2 	.word	0x0800a1e2
 8008880:	4b0b      	ldr	r3, [pc, #44]	; (80088b0 <__ssvfiscanf_r+0x2ec>)
 8008882:	2b00      	cmp	r3, #0
 8008884:	f43f aec5 	beq.w	8008612 <__ssvfiscanf_r+0x4e>
 8008888:	466b      	mov	r3, sp
 800888a:	4622      	mov	r2, r4
 800888c:	a941      	add	r1, sp, #260	; 0x104
 800888e:	4630      	mov	r0, r6
 8008890:	f7fc fb8a 	bl	8004fa8 <_scanf_float>
 8008894:	e798      	b.n	80087c8 <__ssvfiscanf_r+0x204>
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	f013 0f40 	tst.w	r3, #64	; 0x40
 800889c:	bf18      	it	ne
 800889e:	f04f 30ff 	movne.w	r0, #4294967295
 80088a2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80088ac:	e7f9      	b.n	80088a2 <__ssvfiscanf_r+0x2de>
 80088ae:	bf00      	nop
 80088b0:	08004fa9 	.word	0x08004fa9

080088b4 <_scanf_chars>:
 80088b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b8:	4615      	mov	r5, r2
 80088ba:	688a      	ldr	r2, [r1, #8]
 80088bc:	4680      	mov	r8, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	b932      	cbnz	r2, 80088d0 <_scanf_chars+0x1c>
 80088c2:	698a      	ldr	r2, [r1, #24]
 80088c4:	2a00      	cmp	r2, #0
 80088c6:	bf0c      	ite	eq
 80088c8:	2201      	moveq	r2, #1
 80088ca:	f04f 32ff 	movne.w	r2, #4294967295
 80088ce:	608a      	str	r2, [r1, #8]
 80088d0:	6822      	ldr	r2, [r4, #0]
 80088d2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008964 <_scanf_chars+0xb0>
 80088d6:	06d1      	lsls	r1, r2, #27
 80088d8:	bf5f      	itttt	pl
 80088da:	681a      	ldrpl	r2, [r3, #0]
 80088dc:	1d11      	addpl	r1, r2, #4
 80088de:	6019      	strpl	r1, [r3, #0]
 80088e0:	6816      	ldrpl	r6, [r2, #0]
 80088e2:	2700      	movs	r7, #0
 80088e4:	69a0      	ldr	r0, [r4, #24]
 80088e6:	b188      	cbz	r0, 800890c <_scanf_chars+0x58>
 80088e8:	2801      	cmp	r0, #1
 80088ea:	d107      	bne.n	80088fc <_scanf_chars+0x48>
 80088ec:	682a      	ldr	r2, [r5, #0]
 80088ee:	7811      	ldrb	r1, [r2, #0]
 80088f0:	6962      	ldr	r2, [r4, #20]
 80088f2:	5c52      	ldrb	r2, [r2, r1]
 80088f4:	b952      	cbnz	r2, 800890c <_scanf_chars+0x58>
 80088f6:	2f00      	cmp	r7, #0
 80088f8:	d031      	beq.n	800895e <_scanf_chars+0xaa>
 80088fa:	e022      	b.n	8008942 <_scanf_chars+0x8e>
 80088fc:	2802      	cmp	r0, #2
 80088fe:	d120      	bne.n	8008942 <_scanf_chars+0x8e>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008908:	071b      	lsls	r3, r3, #28
 800890a:	d41a      	bmi.n	8008942 <_scanf_chars+0x8e>
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	06da      	lsls	r2, r3, #27
 8008910:	bf5e      	ittt	pl
 8008912:	682b      	ldrpl	r3, [r5, #0]
 8008914:	781b      	ldrbpl	r3, [r3, #0]
 8008916:	f806 3b01 	strbpl.w	r3, [r6], #1
 800891a:	682a      	ldr	r2, [r5, #0]
 800891c:	686b      	ldr	r3, [r5, #4]
 800891e:	3201      	adds	r2, #1
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	68a2      	ldr	r2, [r4, #8]
 8008924:	3b01      	subs	r3, #1
 8008926:	3a01      	subs	r2, #1
 8008928:	606b      	str	r3, [r5, #4]
 800892a:	3701      	adds	r7, #1
 800892c:	60a2      	str	r2, [r4, #8]
 800892e:	b142      	cbz	r2, 8008942 <_scanf_chars+0x8e>
 8008930:	2b00      	cmp	r3, #0
 8008932:	dcd7      	bgt.n	80088e4 <_scanf_chars+0x30>
 8008934:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008938:	4629      	mov	r1, r5
 800893a:	4640      	mov	r0, r8
 800893c:	4798      	blx	r3
 800893e:	2800      	cmp	r0, #0
 8008940:	d0d0      	beq.n	80088e4 <_scanf_chars+0x30>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	f013 0310 	ands.w	r3, r3, #16
 8008948:	d105      	bne.n	8008956 <_scanf_chars+0xa2>
 800894a:	68e2      	ldr	r2, [r4, #12]
 800894c:	3201      	adds	r2, #1
 800894e:	60e2      	str	r2, [r4, #12]
 8008950:	69a2      	ldr	r2, [r4, #24]
 8008952:	b102      	cbz	r2, 8008956 <_scanf_chars+0xa2>
 8008954:	7033      	strb	r3, [r6, #0]
 8008956:	6923      	ldr	r3, [r4, #16]
 8008958:	443b      	add	r3, r7
 800895a:	6123      	str	r3, [r4, #16]
 800895c:	2000      	movs	r0, #0
 800895e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008962:	bf00      	nop
 8008964:	08009e79 	.word	0x08009e79

08008968 <_scanf_i>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	4698      	mov	r8, r3
 800896e:	4b76      	ldr	r3, [pc, #472]	; (8008b48 <_scanf_i+0x1e0>)
 8008970:	460c      	mov	r4, r1
 8008972:	4682      	mov	sl, r0
 8008974:	4616      	mov	r6, r2
 8008976:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800897a:	b087      	sub	sp, #28
 800897c:	ab03      	add	r3, sp, #12
 800897e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008982:	4b72      	ldr	r3, [pc, #456]	; (8008b4c <_scanf_i+0x1e4>)
 8008984:	69a1      	ldr	r1, [r4, #24]
 8008986:	4a72      	ldr	r2, [pc, #456]	; (8008b50 <_scanf_i+0x1e8>)
 8008988:	2903      	cmp	r1, #3
 800898a:	bf18      	it	ne
 800898c:	461a      	movne	r2, r3
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	9201      	str	r2, [sp, #4]
 8008992:	1e5a      	subs	r2, r3, #1
 8008994:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008998:	bf88      	it	hi
 800899a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800899e:	4627      	mov	r7, r4
 80089a0:	bf82      	ittt	hi
 80089a2:	eb03 0905 	addhi.w	r9, r3, r5
 80089a6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089aa:	60a3      	strhi	r3, [r4, #8]
 80089ac:	f857 3b1c 	ldr.w	r3, [r7], #28
 80089b0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80089b4:	bf98      	it	ls
 80089b6:	f04f 0900 	movls.w	r9, #0
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	463d      	mov	r5, r7
 80089be:	f04f 0b00 	mov.w	fp, #0
 80089c2:	6831      	ldr	r1, [r6, #0]
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	7809      	ldrb	r1, [r1, #0]
 80089c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80089cc:	2202      	movs	r2, #2
 80089ce:	f7f7 fc1f 	bl	8000210 <memchr>
 80089d2:	b328      	cbz	r0, 8008a20 <_scanf_i+0xb8>
 80089d4:	f1bb 0f01 	cmp.w	fp, #1
 80089d8:	d159      	bne.n	8008a8e <_scanf_i+0x126>
 80089da:	6862      	ldr	r2, [r4, #4]
 80089dc:	b92a      	cbnz	r2, 80089ea <_scanf_i+0x82>
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	2308      	movs	r3, #8
 80089e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089e6:	6063      	str	r3, [r4, #4]
 80089e8:	6022      	str	r2, [r4, #0]
 80089ea:	6822      	ldr	r2, [r4, #0]
 80089ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	68a2      	ldr	r2, [r4, #8]
 80089f4:	1e51      	subs	r1, r2, #1
 80089f6:	60a1      	str	r1, [r4, #8]
 80089f8:	b192      	cbz	r2, 8008a20 <_scanf_i+0xb8>
 80089fa:	6832      	ldr	r2, [r6, #0]
 80089fc:	1c51      	adds	r1, r2, #1
 80089fe:	6031      	str	r1, [r6, #0]
 8008a00:	7812      	ldrb	r2, [r2, #0]
 8008a02:	f805 2b01 	strb.w	r2, [r5], #1
 8008a06:	6872      	ldr	r2, [r6, #4]
 8008a08:	3a01      	subs	r2, #1
 8008a0a:	2a00      	cmp	r2, #0
 8008a0c:	6072      	str	r2, [r6, #4]
 8008a0e:	dc07      	bgt.n	8008a20 <_scanf_i+0xb8>
 8008a10:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008a14:	4631      	mov	r1, r6
 8008a16:	4650      	mov	r0, sl
 8008a18:	4790      	blx	r2
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	f040 8085 	bne.w	8008b2a <_scanf_i+0x1c2>
 8008a20:	f10b 0b01 	add.w	fp, fp, #1
 8008a24:	f1bb 0f03 	cmp.w	fp, #3
 8008a28:	d1cb      	bne.n	80089c2 <_scanf_i+0x5a>
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	b90b      	cbnz	r3, 8008a32 <_scanf_i+0xca>
 8008a2e:	230a      	movs	r3, #10
 8008a30:	6063      	str	r3, [r4, #4]
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	4947      	ldr	r1, [pc, #284]	; (8008b54 <_scanf_i+0x1ec>)
 8008a36:	6960      	ldr	r0, [r4, #20]
 8008a38:	1ac9      	subs	r1, r1, r3
 8008a3a:	f000 f8b9 	bl	8008bb0 <__sccl>
 8008a3e:	f04f 0b00 	mov.w	fp, #0
 8008a42:	68a3      	ldr	r3, [r4, #8]
 8008a44:	6822      	ldr	r2, [r4, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d03d      	beq.n	8008ac6 <_scanf_i+0x15e>
 8008a4a:	6831      	ldr	r1, [r6, #0]
 8008a4c:	6960      	ldr	r0, [r4, #20]
 8008a4e:	f891 c000 	ldrb.w	ip, [r1]
 8008a52:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d035      	beq.n	8008ac6 <_scanf_i+0x15e>
 8008a5a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008a5e:	d124      	bne.n	8008aaa <_scanf_i+0x142>
 8008a60:	0510      	lsls	r0, r2, #20
 8008a62:	d522      	bpl.n	8008aaa <_scanf_i+0x142>
 8008a64:	f10b 0b01 	add.w	fp, fp, #1
 8008a68:	f1b9 0f00 	cmp.w	r9, #0
 8008a6c:	d003      	beq.n	8008a76 <_scanf_i+0x10e>
 8008a6e:	3301      	adds	r3, #1
 8008a70:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a74:	60a3      	str	r3, [r4, #8]
 8008a76:	6873      	ldr	r3, [r6, #4]
 8008a78:	3b01      	subs	r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	6073      	str	r3, [r6, #4]
 8008a7e:	dd1b      	ble.n	8008ab8 <_scanf_i+0x150>
 8008a80:	6833      	ldr	r3, [r6, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	6033      	str	r3, [r6, #0]
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	60a3      	str	r3, [r4, #8]
 8008a8c:	e7d9      	b.n	8008a42 <_scanf_i+0xda>
 8008a8e:	f1bb 0f02 	cmp.w	fp, #2
 8008a92:	d1ae      	bne.n	80089f2 <_scanf_i+0x8a>
 8008a94:	6822      	ldr	r2, [r4, #0]
 8008a96:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008a9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008a9e:	d1bf      	bne.n	8008a20 <_scanf_i+0xb8>
 8008aa0:	2310      	movs	r3, #16
 8008aa2:	6063      	str	r3, [r4, #4]
 8008aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aa8:	e7a2      	b.n	80089f0 <_scanf_i+0x88>
 8008aaa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008aae:	6022      	str	r2, [r4, #0]
 8008ab0:	780b      	ldrb	r3, [r1, #0]
 8008ab2:	f805 3b01 	strb.w	r3, [r5], #1
 8008ab6:	e7de      	b.n	8008a76 <_scanf_i+0x10e>
 8008ab8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008abc:	4631      	mov	r1, r6
 8008abe:	4650      	mov	r0, sl
 8008ac0:	4798      	blx	r3
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d0df      	beq.n	8008a86 <_scanf_i+0x11e>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	05db      	lsls	r3, r3, #23
 8008aca:	d50d      	bpl.n	8008ae8 <_scanf_i+0x180>
 8008acc:	42bd      	cmp	r5, r7
 8008ace:	d909      	bls.n	8008ae4 <_scanf_i+0x17c>
 8008ad0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ad8:	4632      	mov	r2, r6
 8008ada:	4650      	mov	r0, sl
 8008adc:	4798      	blx	r3
 8008ade:	f105 39ff 	add.w	r9, r5, #4294967295
 8008ae2:	464d      	mov	r5, r9
 8008ae4:	42bd      	cmp	r5, r7
 8008ae6:	d02d      	beq.n	8008b44 <_scanf_i+0x1dc>
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	f012 0210 	ands.w	r2, r2, #16
 8008aee:	d113      	bne.n	8008b18 <_scanf_i+0x1b0>
 8008af0:	702a      	strb	r2, [r5, #0]
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	9e01      	ldr	r6, [sp, #4]
 8008af6:	4639      	mov	r1, r7
 8008af8:	4650      	mov	r0, sl
 8008afa:	47b0      	blx	r6
 8008afc:	6821      	ldr	r1, [r4, #0]
 8008afe:	f8d8 3000 	ldr.w	r3, [r8]
 8008b02:	f011 0f20 	tst.w	r1, #32
 8008b06:	d013      	beq.n	8008b30 <_scanf_i+0x1c8>
 8008b08:	1d1a      	adds	r2, r3, #4
 8008b0a:	f8c8 2000 	str.w	r2, [r8]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6018      	str	r0, [r3, #0]
 8008b12:	68e3      	ldr	r3, [r4, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	60e3      	str	r3, [r4, #12]
 8008b18:	1bed      	subs	r5, r5, r7
 8008b1a:	44ab      	add	fp, r5
 8008b1c:	6925      	ldr	r5, [r4, #16]
 8008b1e:	445d      	add	r5, fp
 8008b20:	6125      	str	r5, [r4, #16]
 8008b22:	2000      	movs	r0, #0
 8008b24:	b007      	add	sp, #28
 8008b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2a:	f04f 0b00 	mov.w	fp, #0
 8008b2e:	e7ca      	b.n	8008ac6 <_scanf_i+0x15e>
 8008b30:	1d1a      	adds	r2, r3, #4
 8008b32:	f8c8 2000 	str.w	r2, [r8]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f011 0f01 	tst.w	r1, #1
 8008b3c:	bf14      	ite	ne
 8008b3e:	8018      	strhne	r0, [r3, #0]
 8008b40:	6018      	streq	r0, [r3, #0]
 8008b42:	e7e6      	b.n	8008b12 <_scanf_i+0x1aa>
 8008b44:	2001      	movs	r0, #1
 8008b46:	e7ed      	b.n	8008b24 <_scanf_i+0x1bc>
 8008b48:	08009ddc 	.word	0x08009ddc
 8008b4c:	08008d2d 	.word	0x08008d2d
 8008b50:	0800624d 	.word	0x0800624d
 8008b54:	0800a206 	.word	0x0800a206

08008b58 <_read_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	; (8008b78 <_read_r+0x20>)
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4611      	mov	r1, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7f9 f93b 	bl	8001de2 <_read>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_read_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_read_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20000c2c 	.word	0x20000c2c
 8008b7c:	00000000 	.word	0x00000000

08008b80 <nan>:
 8008b80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b88 <nan+0x8>
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	00000000 	.word	0x00000000
 8008b8c:	7ff80000 	.word	0x7ff80000

08008b90 <_sbrk_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	4d06      	ldr	r5, [pc, #24]	; (8008bac <_sbrk_r+0x1c>)
 8008b94:	2300      	movs	r3, #0
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	f7f9 f98e 	bl	8001ebc <_sbrk>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	d102      	bne.n	8008baa <_sbrk_r+0x1a>
 8008ba4:	682b      	ldr	r3, [r5, #0]
 8008ba6:	b103      	cbz	r3, 8008baa <_sbrk_r+0x1a>
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
 8008bac:	20000c2c 	.word	0x20000c2c

08008bb0 <__sccl>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	780b      	ldrb	r3, [r1, #0]
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	2b5e      	cmp	r3, #94	; 0x5e
 8008bb8:	bf0b      	itete	eq
 8008bba:	784b      	ldrbeq	r3, [r1, #1]
 8008bbc:	1c48      	addne	r0, r1, #1
 8008bbe:	1c88      	addeq	r0, r1, #2
 8008bc0:	2200      	movne	r2, #0
 8008bc2:	bf08      	it	eq
 8008bc4:	2201      	moveq	r2, #1
 8008bc6:	1e61      	subs	r1, r4, #1
 8008bc8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008bcc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008bd0:	42a9      	cmp	r1, r5
 8008bd2:	d1fb      	bne.n	8008bcc <__sccl+0x1c>
 8008bd4:	b90b      	cbnz	r3, 8008bda <__sccl+0x2a>
 8008bd6:	3801      	subs	r0, #1
 8008bd8:	bd70      	pop	{r4, r5, r6, pc}
 8008bda:	f082 0201 	eor.w	r2, r2, #1
 8008bde:	54e2      	strb	r2, [r4, r3]
 8008be0:	4605      	mov	r5, r0
 8008be2:	4628      	mov	r0, r5
 8008be4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008be8:	292d      	cmp	r1, #45	; 0x2d
 8008bea:	d006      	beq.n	8008bfa <__sccl+0x4a>
 8008bec:	295d      	cmp	r1, #93	; 0x5d
 8008bee:	d0f3      	beq.n	8008bd8 <__sccl+0x28>
 8008bf0:	b909      	cbnz	r1, 8008bf6 <__sccl+0x46>
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	e7f0      	b.n	8008bd8 <__sccl+0x28>
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	e7f1      	b.n	8008bde <__sccl+0x2e>
 8008bfa:	786e      	ldrb	r6, [r5, #1]
 8008bfc:	2e5d      	cmp	r6, #93	; 0x5d
 8008bfe:	d0fa      	beq.n	8008bf6 <__sccl+0x46>
 8008c00:	42b3      	cmp	r3, r6
 8008c02:	dcf8      	bgt.n	8008bf6 <__sccl+0x46>
 8008c04:	3502      	adds	r5, #2
 8008c06:	4619      	mov	r1, r3
 8008c08:	3101      	adds	r1, #1
 8008c0a:	428e      	cmp	r6, r1
 8008c0c:	5462      	strb	r2, [r4, r1]
 8008c0e:	dcfb      	bgt.n	8008c08 <__sccl+0x58>
 8008c10:	1af1      	subs	r1, r6, r3
 8008c12:	3901      	subs	r1, #1
 8008c14:	1c58      	adds	r0, r3, #1
 8008c16:	42b3      	cmp	r3, r6
 8008c18:	bfa8      	it	ge
 8008c1a:	2100      	movge	r1, #0
 8008c1c:	1843      	adds	r3, r0, r1
 8008c1e:	e7e0      	b.n	8008be2 <__sccl+0x32>

08008c20 <strncmp>:
 8008c20:	b510      	push	{r4, lr}
 8008c22:	b17a      	cbz	r2, 8008c44 <strncmp+0x24>
 8008c24:	4603      	mov	r3, r0
 8008c26:	3901      	subs	r1, #1
 8008c28:	1884      	adds	r4, r0, r2
 8008c2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c32:	4290      	cmp	r0, r2
 8008c34:	d101      	bne.n	8008c3a <strncmp+0x1a>
 8008c36:	42a3      	cmp	r3, r4
 8008c38:	d101      	bne.n	8008c3e <strncmp+0x1e>
 8008c3a:	1a80      	subs	r0, r0, r2
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d1f3      	bne.n	8008c2a <strncmp+0xa>
 8008c42:	e7fa      	b.n	8008c3a <strncmp+0x1a>
 8008c44:	4610      	mov	r0, r2
 8008c46:	e7f9      	b.n	8008c3c <strncmp+0x1c>

08008c48 <_strtoul_l.constprop.0>:
 8008c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c4c:	4f36      	ldr	r7, [pc, #216]	; (8008d28 <_strtoul_l.constprop.0+0xe0>)
 8008c4e:	4686      	mov	lr, r0
 8008c50:	460d      	mov	r5, r1
 8008c52:	4628      	mov	r0, r5
 8008c54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c58:	5de6      	ldrb	r6, [r4, r7]
 8008c5a:	f016 0608 	ands.w	r6, r6, #8
 8008c5e:	d1f8      	bne.n	8008c52 <_strtoul_l.constprop.0+0xa>
 8008c60:	2c2d      	cmp	r4, #45	; 0x2d
 8008c62:	d12f      	bne.n	8008cc4 <_strtoul_l.constprop.0+0x7c>
 8008c64:	782c      	ldrb	r4, [r5, #0]
 8008c66:	2601      	movs	r6, #1
 8008c68:	1c85      	adds	r5, r0, #2
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d057      	beq.n	8008d1e <_strtoul_l.constprop.0+0xd6>
 8008c6e:	2b10      	cmp	r3, #16
 8008c70:	d109      	bne.n	8008c86 <_strtoul_l.constprop.0+0x3e>
 8008c72:	2c30      	cmp	r4, #48	; 0x30
 8008c74:	d107      	bne.n	8008c86 <_strtoul_l.constprop.0+0x3e>
 8008c76:	7828      	ldrb	r0, [r5, #0]
 8008c78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008c7c:	2858      	cmp	r0, #88	; 0x58
 8008c7e:	d149      	bne.n	8008d14 <_strtoul_l.constprop.0+0xcc>
 8008c80:	786c      	ldrb	r4, [r5, #1]
 8008c82:	2310      	movs	r3, #16
 8008c84:	3502      	adds	r5, #2
 8008c86:	f04f 38ff 	mov.w	r8, #4294967295
 8008c8a:	2700      	movs	r7, #0
 8008c8c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008c90:	fb03 f908 	mul.w	r9, r3, r8
 8008c94:	ea6f 0909 	mvn.w	r9, r9
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008c9e:	f1bc 0f09 	cmp.w	ip, #9
 8008ca2:	d814      	bhi.n	8008cce <_strtoul_l.constprop.0+0x86>
 8008ca4:	4664      	mov	r4, ip
 8008ca6:	42a3      	cmp	r3, r4
 8008ca8:	dd22      	ble.n	8008cf0 <_strtoul_l.constprop.0+0xa8>
 8008caa:	2f00      	cmp	r7, #0
 8008cac:	db1d      	blt.n	8008cea <_strtoul_l.constprop.0+0xa2>
 8008cae:	4580      	cmp	r8, r0
 8008cb0:	d31b      	bcc.n	8008cea <_strtoul_l.constprop.0+0xa2>
 8008cb2:	d101      	bne.n	8008cb8 <_strtoul_l.constprop.0+0x70>
 8008cb4:	45a1      	cmp	r9, r4
 8008cb6:	db18      	blt.n	8008cea <_strtoul_l.constprop.0+0xa2>
 8008cb8:	fb00 4003 	mla	r0, r0, r3, r4
 8008cbc:	2701      	movs	r7, #1
 8008cbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cc2:	e7ea      	b.n	8008c9a <_strtoul_l.constprop.0+0x52>
 8008cc4:	2c2b      	cmp	r4, #43	; 0x2b
 8008cc6:	bf04      	itt	eq
 8008cc8:	782c      	ldrbeq	r4, [r5, #0]
 8008cca:	1c85      	addeq	r5, r0, #2
 8008ccc:	e7cd      	b.n	8008c6a <_strtoul_l.constprop.0+0x22>
 8008cce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008cd2:	f1bc 0f19 	cmp.w	ip, #25
 8008cd6:	d801      	bhi.n	8008cdc <_strtoul_l.constprop.0+0x94>
 8008cd8:	3c37      	subs	r4, #55	; 0x37
 8008cda:	e7e4      	b.n	8008ca6 <_strtoul_l.constprop.0+0x5e>
 8008cdc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ce0:	f1bc 0f19 	cmp.w	ip, #25
 8008ce4:	d804      	bhi.n	8008cf0 <_strtoul_l.constprop.0+0xa8>
 8008ce6:	3c57      	subs	r4, #87	; 0x57
 8008ce8:	e7dd      	b.n	8008ca6 <_strtoul_l.constprop.0+0x5e>
 8008cea:	f04f 37ff 	mov.w	r7, #4294967295
 8008cee:	e7e6      	b.n	8008cbe <_strtoul_l.constprop.0+0x76>
 8008cf0:	2f00      	cmp	r7, #0
 8008cf2:	da07      	bge.n	8008d04 <_strtoul_l.constprop.0+0xbc>
 8008cf4:	2322      	movs	r3, #34	; 0x22
 8008cf6:	f8ce 3000 	str.w	r3, [lr]
 8008cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfe:	b932      	cbnz	r2, 8008d0e <_strtoul_l.constprop.0+0xc6>
 8008d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d04:	b106      	cbz	r6, 8008d08 <_strtoul_l.constprop.0+0xc0>
 8008d06:	4240      	negs	r0, r0
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	d0f9      	beq.n	8008d00 <_strtoul_l.constprop.0+0xb8>
 8008d0c:	b107      	cbz	r7, 8008d10 <_strtoul_l.constprop.0+0xc8>
 8008d0e:	1e69      	subs	r1, r5, #1
 8008d10:	6011      	str	r1, [r2, #0]
 8008d12:	e7f5      	b.n	8008d00 <_strtoul_l.constprop.0+0xb8>
 8008d14:	2430      	movs	r4, #48	; 0x30
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d1b5      	bne.n	8008c86 <_strtoul_l.constprop.0+0x3e>
 8008d1a:	2308      	movs	r3, #8
 8008d1c:	e7b3      	b.n	8008c86 <_strtoul_l.constprop.0+0x3e>
 8008d1e:	2c30      	cmp	r4, #48	; 0x30
 8008d20:	d0a9      	beq.n	8008c76 <_strtoul_l.constprop.0+0x2e>
 8008d22:	230a      	movs	r3, #10
 8008d24:	e7af      	b.n	8008c86 <_strtoul_l.constprop.0+0x3e>
 8008d26:	bf00      	nop
 8008d28:	08009e79 	.word	0x08009e79

08008d2c <_strtoul_r>:
 8008d2c:	f7ff bf8c 	b.w	8008c48 <_strtoul_l.constprop.0>

08008d30 <__submore>:
 8008d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	460c      	mov	r4, r1
 8008d36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d3c:	4299      	cmp	r1, r3
 8008d3e:	d11d      	bne.n	8008d7c <__submore+0x4c>
 8008d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008d44:	f7ff fa14 	bl	8008170 <_malloc_r>
 8008d48:	b918      	cbnz	r0, 8008d52 <__submore+0x22>
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d56:	63a3      	str	r3, [r4, #56]	; 0x38
 8008d58:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d5e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008d62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008d66:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008d6a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d6e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008d72:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008d76:	6020      	str	r0, [r4, #0]
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e7e8      	b.n	8008d4e <__submore+0x1e>
 8008d7c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008d7e:	0077      	lsls	r7, r6, #1
 8008d80:	463a      	mov	r2, r7
 8008d82:	f000 fa2d 	bl	80091e0 <_realloc_r>
 8008d86:	4605      	mov	r5, r0
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d0de      	beq.n	8008d4a <__submore+0x1a>
 8008d8c:	eb00 0806 	add.w	r8, r0, r6
 8008d90:	4601      	mov	r1, r0
 8008d92:	4632      	mov	r2, r6
 8008d94:	4640      	mov	r0, r8
 8008d96:	f7fe fc99 	bl	80076cc <memcpy>
 8008d9a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008d9e:	f8c4 8000 	str.w	r8, [r4]
 8008da2:	e7e9      	b.n	8008d78 <__submore+0x48>

08008da4 <__ascii_wctomb>:
 8008da4:	b149      	cbz	r1, 8008dba <__ascii_wctomb+0x16>
 8008da6:	2aff      	cmp	r2, #255	; 0xff
 8008da8:	bf85      	ittet	hi
 8008daa:	238a      	movhi	r3, #138	; 0x8a
 8008dac:	6003      	strhi	r3, [r0, #0]
 8008dae:	700a      	strbls	r2, [r1, #0]
 8008db0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008db4:	bf98      	it	ls
 8008db6:	2001      	movls	r0, #1
 8008db8:	4770      	bx	lr
 8008dba:	4608      	mov	r0, r1
 8008dbc:	4770      	bx	lr
	...

08008dc0 <__assert_func>:
 8008dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dc2:	4614      	mov	r4, r2
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <__assert_func+0x2c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4605      	mov	r5, r0
 8008dcc:	68d8      	ldr	r0, [r3, #12]
 8008dce:	b14c      	cbz	r4, 8008de4 <__assert_func+0x24>
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <__assert_func+0x30>)
 8008dd2:	9100      	str	r1, [sp, #0]
 8008dd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dd8:	4906      	ldr	r1, [pc, #24]	; (8008df4 <__assert_func+0x34>)
 8008dda:	462b      	mov	r3, r5
 8008ddc:	f000 f9a6 	bl	800912c <fiprintf>
 8008de0:	f000 fc46 	bl	8009670 <abort>
 8008de4:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <__assert_func+0x38>)
 8008de6:	461c      	mov	r4, r3
 8008de8:	e7f3      	b.n	8008dd2 <__assert_func+0x12>
 8008dea:	bf00      	nop
 8008dec:	20000014 	.word	0x20000014
 8008df0:	0800a208 	.word	0x0800a208
 8008df4:	0800a215 	.word	0x0800a215
 8008df8:	0800a243 	.word	0x0800a243

08008dfc <__sflush_r>:
 8008dfc:	898a      	ldrh	r2, [r1, #12]
 8008dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e02:	4605      	mov	r5, r0
 8008e04:	0710      	lsls	r0, r2, #28
 8008e06:	460c      	mov	r4, r1
 8008e08:	d458      	bmi.n	8008ebc <__sflush_r+0xc0>
 8008e0a:	684b      	ldr	r3, [r1, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	dc05      	bgt.n	8008e1c <__sflush_r+0x20>
 8008e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dc02      	bgt.n	8008e1c <__sflush_r+0x20>
 8008e16:	2000      	movs	r0, #0
 8008e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	d0f9      	beq.n	8008e16 <__sflush_r+0x1a>
 8008e22:	2300      	movs	r3, #0
 8008e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e28:	682f      	ldr	r7, [r5, #0]
 8008e2a:	602b      	str	r3, [r5, #0]
 8008e2c:	d032      	beq.n	8008e94 <__sflush_r+0x98>
 8008e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e30:	89a3      	ldrh	r3, [r4, #12]
 8008e32:	075a      	lsls	r2, r3, #29
 8008e34:	d505      	bpl.n	8008e42 <__sflush_r+0x46>
 8008e36:	6863      	ldr	r3, [r4, #4]
 8008e38:	1ac0      	subs	r0, r0, r3
 8008e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e3c:	b10b      	cbz	r3, 8008e42 <__sflush_r+0x46>
 8008e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e40:	1ac0      	subs	r0, r0, r3
 8008e42:	2300      	movs	r3, #0
 8008e44:	4602      	mov	r2, r0
 8008e46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e48:	6a21      	ldr	r1, [r4, #32]
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b0      	blx	r6
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	d106      	bne.n	8008e62 <__sflush_r+0x66>
 8008e54:	6829      	ldr	r1, [r5, #0]
 8008e56:	291d      	cmp	r1, #29
 8008e58:	d82c      	bhi.n	8008eb4 <__sflush_r+0xb8>
 8008e5a:	4a2a      	ldr	r2, [pc, #168]	; (8008f04 <__sflush_r+0x108>)
 8008e5c:	40ca      	lsrs	r2, r1
 8008e5e:	07d6      	lsls	r6, r2, #31
 8008e60:	d528      	bpl.n	8008eb4 <__sflush_r+0xb8>
 8008e62:	2200      	movs	r2, #0
 8008e64:	6062      	str	r2, [r4, #4]
 8008e66:	04d9      	lsls	r1, r3, #19
 8008e68:	6922      	ldr	r2, [r4, #16]
 8008e6a:	6022      	str	r2, [r4, #0]
 8008e6c:	d504      	bpl.n	8008e78 <__sflush_r+0x7c>
 8008e6e:	1c42      	adds	r2, r0, #1
 8008e70:	d101      	bne.n	8008e76 <__sflush_r+0x7a>
 8008e72:	682b      	ldr	r3, [r5, #0]
 8008e74:	b903      	cbnz	r3, 8008e78 <__sflush_r+0x7c>
 8008e76:	6560      	str	r0, [r4, #84]	; 0x54
 8008e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e7a:	602f      	str	r7, [r5, #0]
 8008e7c:	2900      	cmp	r1, #0
 8008e7e:	d0ca      	beq.n	8008e16 <__sflush_r+0x1a>
 8008e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e84:	4299      	cmp	r1, r3
 8008e86:	d002      	beq.n	8008e8e <__sflush_r+0x92>
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f7ff f905 	bl	8008098 <_free_r>
 8008e8e:	2000      	movs	r0, #0
 8008e90:	6360      	str	r0, [r4, #52]	; 0x34
 8008e92:	e7c1      	b.n	8008e18 <__sflush_r+0x1c>
 8008e94:	6a21      	ldr	r1, [r4, #32]
 8008e96:	2301      	movs	r3, #1
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b0      	blx	r6
 8008e9c:	1c41      	adds	r1, r0, #1
 8008e9e:	d1c7      	bne.n	8008e30 <__sflush_r+0x34>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0c4      	beq.n	8008e30 <__sflush_r+0x34>
 8008ea6:	2b1d      	cmp	r3, #29
 8008ea8:	d001      	beq.n	8008eae <__sflush_r+0xb2>
 8008eaa:	2b16      	cmp	r3, #22
 8008eac:	d101      	bne.n	8008eb2 <__sflush_r+0xb6>
 8008eae:	602f      	str	r7, [r5, #0]
 8008eb0:	e7b1      	b.n	8008e16 <__sflush_r+0x1a>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	e7ad      	b.n	8008e18 <__sflush_r+0x1c>
 8008ebc:	690f      	ldr	r7, [r1, #16]
 8008ebe:	2f00      	cmp	r7, #0
 8008ec0:	d0a9      	beq.n	8008e16 <__sflush_r+0x1a>
 8008ec2:	0793      	lsls	r3, r2, #30
 8008ec4:	680e      	ldr	r6, [r1, #0]
 8008ec6:	bf08      	it	eq
 8008ec8:	694b      	ldreq	r3, [r1, #20]
 8008eca:	600f      	str	r7, [r1, #0]
 8008ecc:	bf18      	it	ne
 8008ece:	2300      	movne	r3, #0
 8008ed0:	eba6 0807 	sub.w	r8, r6, r7
 8008ed4:	608b      	str	r3, [r1, #8]
 8008ed6:	f1b8 0f00 	cmp.w	r8, #0
 8008eda:	dd9c      	ble.n	8008e16 <__sflush_r+0x1a>
 8008edc:	6a21      	ldr	r1, [r4, #32]
 8008ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ee0:	4643      	mov	r3, r8
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b0      	blx	r6
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	dc06      	bgt.n	8008efa <__sflush_r+0xfe>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	e78e      	b.n	8008e18 <__sflush_r+0x1c>
 8008efa:	4407      	add	r7, r0
 8008efc:	eba8 0800 	sub.w	r8, r8, r0
 8008f00:	e7e9      	b.n	8008ed6 <__sflush_r+0xda>
 8008f02:	bf00      	nop
 8008f04:	20400001 	.word	0x20400001

08008f08 <_fflush_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	690b      	ldr	r3, [r1, #16]
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	b913      	cbnz	r3, 8008f18 <_fflush_r+0x10>
 8008f12:	2500      	movs	r5, #0
 8008f14:	4628      	mov	r0, r5
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	b118      	cbz	r0, 8008f22 <_fflush_r+0x1a>
 8008f1a:	6983      	ldr	r3, [r0, #24]
 8008f1c:	b90b      	cbnz	r3, 8008f22 <_fflush_r+0x1a>
 8008f1e:	f000 f887 	bl	8009030 <__sinit>
 8008f22:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <_fflush_r+0x6c>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	d11b      	bne.n	8008f60 <_fflush_r+0x58>
 8008f28:	686c      	ldr	r4, [r5, #4]
 8008f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0ef      	beq.n	8008f12 <_fflush_r+0xa>
 8008f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f34:	07d0      	lsls	r0, r2, #31
 8008f36:	d404      	bmi.n	8008f42 <_fflush_r+0x3a>
 8008f38:	0599      	lsls	r1, r3, #22
 8008f3a:	d402      	bmi.n	8008f42 <_fflush_r+0x3a>
 8008f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f3e:	f000 f927 	bl	8009190 <__retarget_lock_acquire_recursive>
 8008f42:	4628      	mov	r0, r5
 8008f44:	4621      	mov	r1, r4
 8008f46:	f7ff ff59 	bl	8008dfc <__sflush_r>
 8008f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f4c:	07da      	lsls	r2, r3, #31
 8008f4e:	4605      	mov	r5, r0
 8008f50:	d4e0      	bmi.n	8008f14 <_fflush_r+0xc>
 8008f52:	89a3      	ldrh	r3, [r4, #12]
 8008f54:	059b      	lsls	r3, r3, #22
 8008f56:	d4dd      	bmi.n	8008f14 <_fflush_r+0xc>
 8008f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f5a:	f000 f91a 	bl	8009192 <__retarget_lock_release_recursive>
 8008f5e:	e7d9      	b.n	8008f14 <_fflush_r+0xc>
 8008f60:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <_fflush_r+0x70>)
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d101      	bne.n	8008f6a <_fflush_r+0x62>
 8008f66:	68ac      	ldr	r4, [r5, #8]
 8008f68:	e7df      	b.n	8008f2a <_fflush_r+0x22>
 8008f6a:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <_fflush_r+0x74>)
 8008f6c:	429c      	cmp	r4, r3
 8008f6e:	bf08      	it	eq
 8008f70:	68ec      	ldreq	r4, [r5, #12]
 8008f72:	e7da      	b.n	8008f2a <_fflush_r+0x22>
 8008f74:	0800a264 	.word	0x0800a264
 8008f78:	0800a284 	.word	0x0800a284
 8008f7c:	0800a244 	.word	0x0800a244

08008f80 <std>:
 8008f80:	2300      	movs	r3, #0
 8008f82:	b510      	push	{r4, lr}
 8008f84:	4604      	mov	r4, r0
 8008f86:	e9c0 3300 	strd	r3, r3, [r0]
 8008f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f8e:	6083      	str	r3, [r0, #8]
 8008f90:	8181      	strh	r1, [r0, #12]
 8008f92:	6643      	str	r3, [r0, #100]	; 0x64
 8008f94:	81c2      	strh	r2, [r0, #14]
 8008f96:	6183      	str	r3, [r0, #24]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	305c      	adds	r0, #92	; 0x5c
 8008f9e:	f7fb fb91 	bl	80046c4 <memset>
 8008fa2:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <std+0x38>)
 8008fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8008fa6:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <std+0x3c>)
 8008fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <std+0x40>)
 8008fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fae:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <std+0x44>)
 8008fb0:	6224      	str	r4, [r4, #32]
 8008fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8008fb4:	bd10      	pop	{r4, pc}
 8008fb6:	bf00      	nop
 8008fb8:	0800546d 	.word	0x0800546d
 8008fbc:	08005493 	.word	0x08005493
 8008fc0:	080054cb 	.word	0x080054cb
 8008fc4:	080054ef 	.word	0x080054ef

08008fc8 <_cleanup_r>:
 8008fc8:	4901      	ldr	r1, [pc, #4]	; (8008fd0 <_cleanup_r+0x8>)
 8008fca:	f000 b8c1 	b.w	8009150 <_fwalk_reent>
 8008fce:	bf00      	nop
 8008fd0:	08008f09 	.word	0x08008f09

08008fd4 <__sfmoreglue>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	2268      	movs	r2, #104	; 0x68
 8008fd8:	1e4d      	subs	r5, r1, #1
 8008fda:	4355      	muls	r5, r2
 8008fdc:	460e      	mov	r6, r1
 8008fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008fe2:	f7ff f8c5 	bl	8008170 <_malloc_r>
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	b140      	cbz	r0, 8008ffc <__sfmoreglue+0x28>
 8008fea:	2100      	movs	r1, #0
 8008fec:	e9c0 1600 	strd	r1, r6, [r0]
 8008ff0:	300c      	adds	r0, #12
 8008ff2:	60a0      	str	r0, [r4, #8]
 8008ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ff8:	f7fb fb64 	bl	80046c4 <memset>
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}

08009000 <__sfp_lock_acquire>:
 8009000:	4801      	ldr	r0, [pc, #4]	; (8009008 <__sfp_lock_acquire+0x8>)
 8009002:	f000 b8c5 	b.w	8009190 <__retarget_lock_acquire_recursive>
 8009006:	bf00      	nop
 8009008:	20000c31 	.word	0x20000c31

0800900c <__sfp_lock_release>:
 800900c:	4801      	ldr	r0, [pc, #4]	; (8009014 <__sfp_lock_release+0x8>)
 800900e:	f000 b8c0 	b.w	8009192 <__retarget_lock_release_recursive>
 8009012:	bf00      	nop
 8009014:	20000c31 	.word	0x20000c31

08009018 <__sinit_lock_acquire>:
 8009018:	4801      	ldr	r0, [pc, #4]	; (8009020 <__sinit_lock_acquire+0x8>)
 800901a:	f000 b8b9 	b.w	8009190 <__retarget_lock_acquire_recursive>
 800901e:	bf00      	nop
 8009020:	20000c32 	.word	0x20000c32

08009024 <__sinit_lock_release>:
 8009024:	4801      	ldr	r0, [pc, #4]	; (800902c <__sinit_lock_release+0x8>)
 8009026:	f000 b8b4 	b.w	8009192 <__retarget_lock_release_recursive>
 800902a:	bf00      	nop
 800902c:	20000c32 	.word	0x20000c32

08009030 <__sinit>:
 8009030:	b510      	push	{r4, lr}
 8009032:	4604      	mov	r4, r0
 8009034:	f7ff fff0 	bl	8009018 <__sinit_lock_acquire>
 8009038:	69a3      	ldr	r3, [r4, #24]
 800903a:	b11b      	cbz	r3, 8009044 <__sinit+0x14>
 800903c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009040:	f7ff bff0 	b.w	8009024 <__sinit_lock_release>
 8009044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009048:	6523      	str	r3, [r4, #80]	; 0x50
 800904a:	4b13      	ldr	r3, [pc, #76]	; (8009098 <__sinit+0x68>)
 800904c:	4a13      	ldr	r2, [pc, #76]	; (800909c <__sinit+0x6c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	62a2      	str	r2, [r4, #40]	; 0x28
 8009052:	42a3      	cmp	r3, r4
 8009054:	bf04      	itt	eq
 8009056:	2301      	moveq	r3, #1
 8009058:	61a3      	streq	r3, [r4, #24]
 800905a:	4620      	mov	r0, r4
 800905c:	f000 f820 	bl	80090a0 <__sfp>
 8009060:	6060      	str	r0, [r4, #4]
 8009062:	4620      	mov	r0, r4
 8009064:	f000 f81c 	bl	80090a0 <__sfp>
 8009068:	60a0      	str	r0, [r4, #8]
 800906a:	4620      	mov	r0, r4
 800906c:	f000 f818 	bl	80090a0 <__sfp>
 8009070:	2200      	movs	r2, #0
 8009072:	60e0      	str	r0, [r4, #12]
 8009074:	2104      	movs	r1, #4
 8009076:	6860      	ldr	r0, [r4, #4]
 8009078:	f7ff ff82 	bl	8008f80 <std>
 800907c:	68a0      	ldr	r0, [r4, #8]
 800907e:	2201      	movs	r2, #1
 8009080:	2109      	movs	r1, #9
 8009082:	f7ff ff7d 	bl	8008f80 <std>
 8009086:	68e0      	ldr	r0, [r4, #12]
 8009088:	2202      	movs	r2, #2
 800908a:	2112      	movs	r1, #18
 800908c:	f7ff ff78 	bl	8008f80 <std>
 8009090:	2301      	movs	r3, #1
 8009092:	61a3      	str	r3, [r4, #24]
 8009094:	e7d2      	b.n	800903c <__sinit+0xc>
 8009096:	bf00      	nop
 8009098:	08009de8 	.word	0x08009de8
 800909c:	08008fc9 	.word	0x08008fc9

080090a0 <__sfp>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	4607      	mov	r7, r0
 80090a4:	f7ff ffac 	bl	8009000 <__sfp_lock_acquire>
 80090a8:	4b1e      	ldr	r3, [pc, #120]	; (8009124 <__sfp+0x84>)
 80090aa:	681e      	ldr	r6, [r3, #0]
 80090ac:	69b3      	ldr	r3, [r6, #24]
 80090ae:	b913      	cbnz	r3, 80090b6 <__sfp+0x16>
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7ff ffbd 	bl	8009030 <__sinit>
 80090b6:	3648      	adds	r6, #72	; 0x48
 80090b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090bc:	3b01      	subs	r3, #1
 80090be:	d503      	bpl.n	80090c8 <__sfp+0x28>
 80090c0:	6833      	ldr	r3, [r6, #0]
 80090c2:	b30b      	cbz	r3, 8009108 <__sfp+0x68>
 80090c4:	6836      	ldr	r6, [r6, #0]
 80090c6:	e7f7      	b.n	80090b8 <__sfp+0x18>
 80090c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090cc:	b9d5      	cbnz	r5, 8009104 <__sfp+0x64>
 80090ce:	4b16      	ldr	r3, [pc, #88]	; (8009128 <__sfp+0x88>)
 80090d0:	60e3      	str	r3, [r4, #12]
 80090d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090d6:	6665      	str	r5, [r4, #100]	; 0x64
 80090d8:	f000 f859 	bl	800918e <__retarget_lock_init_recursive>
 80090dc:	f7ff ff96 	bl	800900c <__sfp_lock_release>
 80090e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80090e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80090e8:	6025      	str	r5, [r4, #0]
 80090ea:	61a5      	str	r5, [r4, #24]
 80090ec:	2208      	movs	r2, #8
 80090ee:	4629      	mov	r1, r5
 80090f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80090f4:	f7fb fae6 	bl	80046c4 <memset>
 80090f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80090fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009100:	4620      	mov	r0, r4
 8009102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009104:	3468      	adds	r4, #104	; 0x68
 8009106:	e7d9      	b.n	80090bc <__sfp+0x1c>
 8009108:	2104      	movs	r1, #4
 800910a:	4638      	mov	r0, r7
 800910c:	f7ff ff62 	bl	8008fd4 <__sfmoreglue>
 8009110:	4604      	mov	r4, r0
 8009112:	6030      	str	r0, [r6, #0]
 8009114:	2800      	cmp	r0, #0
 8009116:	d1d5      	bne.n	80090c4 <__sfp+0x24>
 8009118:	f7ff ff78 	bl	800900c <__sfp_lock_release>
 800911c:	230c      	movs	r3, #12
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	e7ee      	b.n	8009100 <__sfp+0x60>
 8009122:	bf00      	nop
 8009124:	08009de8 	.word	0x08009de8
 8009128:	ffff0001 	.word	0xffff0001

0800912c <fiprintf>:
 800912c:	b40e      	push	{r1, r2, r3}
 800912e:	b503      	push	{r0, r1, lr}
 8009130:	4601      	mov	r1, r0
 8009132:	ab03      	add	r3, sp, #12
 8009134:	4805      	ldr	r0, [pc, #20]	; (800914c <fiprintf+0x20>)
 8009136:	f853 2b04 	ldr.w	r2, [r3], #4
 800913a:	6800      	ldr	r0, [r0, #0]
 800913c:	9301      	str	r3, [sp, #4]
 800913e:	f000 f8a7 	bl	8009290 <_vfiprintf_r>
 8009142:	b002      	add	sp, #8
 8009144:	f85d eb04 	ldr.w	lr, [sp], #4
 8009148:	b003      	add	sp, #12
 800914a:	4770      	bx	lr
 800914c:	20000014 	.word	0x20000014

08009150 <_fwalk_reent>:
 8009150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009154:	4606      	mov	r6, r0
 8009156:	4688      	mov	r8, r1
 8009158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800915c:	2700      	movs	r7, #0
 800915e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009162:	f1b9 0901 	subs.w	r9, r9, #1
 8009166:	d505      	bpl.n	8009174 <_fwalk_reent+0x24>
 8009168:	6824      	ldr	r4, [r4, #0]
 800916a:	2c00      	cmp	r4, #0
 800916c:	d1f7      	bne.n	800915e <_fwalk_reent+0xe>
 800916e:	4638      	mov	r0, r7
 8009170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009174:	89ab      	ldrh	r3, [r5, #12]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d907      	bls.n	800918a <_fwalk_reent+0x3a>
 800917a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800917e:	3301      	adds	r3, #1
 8009180:	d003      	beq.n	800918a <_fwalk_reent+0x3a>
 8009182:	4629      	mov	r1, r5
 8009184:	4630      	mov	r0, r6
 8009186:	47c0      	blx	r8
 8009188:	4307      	orrs	r7, r0
 800918a:	3568      	adds	r5, #104	; 0x68
 800918c:	e7e9      	b.n	8009162 <_fwalk_reent+0x12>

0800918e <__retarget_lock_init_recursive>:
 800918e:	4770      	bx	lr

08009190 <__retarget_lock_acquire_recursive>:
 8009190:	4770      	bx	lr

08009192 <__retarget_lock_release_recursive>:
 8009192:	4770      	bx	lr

08009194 <memmove>:
 8009194:	4288      	cmp	r0, r1
 8009196:	b510      	push	{r4, lr}
 8009198:	eb01 0402 	add.w	r4, r1, r2
 800919c:	d902      	bls.n	80091a4 <memmove+0x10>
 800919e:	4284      	cmp	r4, r0
 80091a0:	4623      	mov	r3, r4
 80091a2:	d807      	bhi.n	80091b4 <memmove+0x20>
 80091a4:	1e43      	subs	r3, r0, #1
 80091a6:	42a1      	cmp	r1, r4
 80091a8:	d008      	beq.n	80091bc <memmove+0x28>
 80091aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091b2:	e7f8      	b.n	80091a6 <memmove+0x12>
 80091b4:	4402      	add	r2, r0
 80091b6:	4601      	mov	r1, r0
 80091b8:	428a      	cmp	r2, r1
 80091ba:	d100      	bne.n	80091be <memmove+0x2a>
 80091bc:	bd10      	pop	{r4, pc}
 80091be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091c6:	e7f7      	b.n	80091b8 <memmove+0x24>

080091c8 <__malloc_lock>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__malloc_lock+0x8>)
 80091ca:	f7ff bfe1 	b.w	8009190 <__retarget_lock_acquire_recursive>
 80091ce:	bf00      	nop
 80091d0:	20000c30 	.word	0x20000c30

080091d4 <__malloc_unlock>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__malloc_unlock+0x8>)
 80091d6:	f7ff bfdc 	b.w	8009192 <__retarget_lock_release_recursive>
 80091da:	bf00      	nop
 80091dc:	20000c30 	.word	0x20000c30

080091e0 <_realloc_r>:
 80091e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e4:	4680      	mov	r8, r0
 80091e6:	4614      	mov	r4, r2
 80091e8:	460e      	mov	r6, r1
 80091ea:	b921      	cbnz	r1, 80091f6 <_realloc_r+0x16>
 80091ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091f0:	4611      	mov	r1, r2
 80091f2:	f7fe bfbd 	b.w	8008170 <_malloc_r>
 80091f6:	b92a      	cbnz	r2, 8009204 <_realloc_r+0x24>
 80091f8:	f7fe ff4e 	bl	8008098 <_free_r>
 80091fc:	4625      	mov	r5, r4
 80091fe:	4628      	mov	r0, r5
 8009200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009204:	f000 faa0 	bl	8009748 <_malloc_usable_size_r>
 8009208:	4284      	cmp	r4, r0
 800920a:	4607      	mov	r7, r0
 800920c:	d802      	bhi.n	8009214 <_realloc_r+0x34>
 800920e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009212:	d812      	bhi.n	800923a <_realloc_r+0x5a>
 8009214:	4621      	mov	r1, r4
 8009216:	4640      	mov	r0, r8
 8009218:	f7fe ffaa 	bl	8008170 <_malloc_r>
 800921c:	4605      	mov	r5, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	d0ed      	beq.n	80091fe <_realloc_r+0x1e>
 8009222:	42bc      	cmp	r4, r7
 8009224:	4622      	mov	r2, r4
 8009226:	4631      	mov	r1, r6
 8009228:	bf28      	it	cs
 800922a:	463a      	movcs	r2, r7
 800922c:	f7fe fa4e 	bl	80076cc <memcpy>
 8009230:	4631      	mov	r1, r6
 8009232:	4640      	mov	r0, r8
 8009234:	f7fe ff30 	bl	8008098 <_free_r>
 8009238:	e7e1      	b.n	80091fe <_realloc_r+0x1e>
 800923a:	4635      	mov	r5, r6
 800923c:	e7df      	b.n	80091fe <_realloc_r+0x1e>

0800923e <__sfputc_r>:
 800923e:	6893      	ldr	r3, [r2, #8]
 8009240:	3b01      	subs	r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	b410      	push	{r4}
 8009246:	6093      	str	r3, [r2, #8]
 8009248:	da08      	bge.n	800925c <__sfputc_r+0x1e>
 800924a:	6994      	ldr	r4, [r2, #24]
 800924c:	42a3      	cmp	r3, r4
 800924e:	db01      	blt.n	8009254 <__sfputc_r+0x16>
 8009250:	290a      	cmp	r1, #10
 8009252:	d103      	bne.n	800925c <__sfputc_r+0x1e>
 8009254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009258:	f000 b94a 	b.w	80094f0 <__swbuf_r>
 800925c:	6813      	ldr	r3, [r2, #0]
 800925e:	1c58      	adds	r0, r3, #1
 8009260:	6010      	str	r0, [r2, #0]
 8009262:	7019      	strb	r1, [r3, #0]
 8009264:	4608      	mov	r0, r1
 8009266:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926a:	4770      	bx	lr

0800926c <__sfputs_r>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	4606      	mov	r6, r0
 8009270:	460f      	mov	r7, r1
 8009272:	4614      	mov	r4, r2
 8009274:	18d5      	adds	r5, r2, r3
 8009276:	42ac      	cmp	r4, r5
 8009278:	d101      	bne.n	800927e <__sfputs_r+0x12>
 800927a:	2000      	movs	r0, #0
 800927c:	e007      	b.n	800928e <__sfputs_r+0x22>
 800927e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009282:	463a      	mov	r2, r7
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff ffda 	bl	800923e <__sfputc_r>
 800928a:	1c43      	adds	r3, r0, #1
 800928c:	d1f3      	bne.n	8009276 <__sfputs_r+0xa>
 800928e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009290 <_vfiprintf_r>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	460d      	mov	r5, r1
 8009296:	b09d      	sub	sp, #116	; 0x74
 8009298:	4614      	mov	r4, r2
 800929a:	4698      	mov	r8, r3
 800929c:	4606      	mov	r6, r0
 800929e:	b118      	cbz	r0, 80092a8 <_vfiprintf_r+0x18>
 80092a0:	6983      	ldr	r3, [r0, #24]
 80092a2:	b90b      	cbnz	r3, 80092a8 <_vfiprintf_r+0x18>
 80092a4:	f7ff fec4 	bl	8009030 <__sinit>
 80092a8:	4b89      	ldr	r3, [pc, #548]	; (80094d0 <_vfiprintf_r+0x240>)
 80092aa:	429d      	cmp	r5, r3
 80092ac:	d11b      	bne.n	80092e6 <_vfiprintf_r+0x56>
 80092ae:	6875      	ldr	r5, [r6, #4]
 80092b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b2:	07d9      	lsls	r1, r3, #31
 80092b4:	d405      	bmi.n	80092c2 <_vfiprintf_r+0x32>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	059a      	lsls	r2, r3, #22
 80092ba:	d402      	bmi.n	80092c2 <_vfiprintf_r+0x32>
 80092bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092be:	f7ff ff67 	bl	8009190 <__retarget_lock_acquire_recursive>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	071b      	lsls	r3, r3, #28
 80092c6:	d501      	bpl.n	80092cc <_vfiprintf_r+0x3c>
 80092c8:	692b      	ldr	r3, [r5, #16]
 80092ca:	b9eb      	cbnz	r3, 8009308 <_vfiprintf_r+0x78>
 80092cc:	4629      	mov	r1, r5
 80092ce:	4630      	mov	r0, r6
 80092d0:	f000 f960 	bl	8009594 <__swsetup_r>
 80092d4:	b1c0      	cbz	r0, 8009308 <_vfiprintf_r+0x78>
 80092d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d8:	07dc      	lsls	r4, r3, #31
 80092da:	d50e      	bpl.n	80092fa <_vfiprintf_r+0x6a>
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	b01d      	add	sp, #116	; 0x74
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	4b7b      	ldr	r3, [pc, #492]	; (80094d4 <_vfiprintf_r+0x244>)
 80092e8:	429d      	cmp	r5, r3
 80092ea:	d101      	bne.n	80092f0 <_vfiprintf_r+0x60>
 80092ec:	68b5      	ldr	r5, [r6, #8]
 80092ee:	e7df      	b.n	80092b0 <_vfiprintf_r+0x20>
 80092f0:	4b79      	ldr	r3, [pc, #484]	; (80094d8 <_vfiprintf_r+0x248>)
 80092f2:	429d      	cmp	r5, r3
 80092f4:	bf08      	it	eq
 80092f6:	68f5      	ldreq	r5, [r6, #12]
 80092f8:	e7da      	b.n	80092b0 <_vfiprintf_r+0x20>
 80092fa:	89ab      	ldrh	r3, [r5, #12]
 80092fc:	0598      	lsls	r0, r3, #22
 80092fe:	d4ed      	bmi.n	80092dc <_vfiprintf_r+0x4c>
 8009300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009302:	f7ff ff46 	bl	8009192 <__retarget_lock_release_recursive>
 8009306:	e7e9      	b.n	80092dc <_vfiprintf_r+0x4c>
 8009308:	2300      	movs	r3, #0
 800930a:	9309      	str	r3, [sp, #36]	; 0x24
 800930c:	2320      	movs	r3, #32
 800930e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009312:	f8cd 800c 	str.w	r8, [sp, #12]
 8009316:	2330      	movs	r3, #48	; 0x30
 8009318:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094dc <_vfiprintf_r+0x24c>
 800931c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009320:	f04f 0901 	mov.w	r9, #1
 8009324:	4623      	mov	r3, r4
 8009326:	469a      	mov	sl, r3
 8009328:	f813 2b01 	ldrb.w	r2, [r3], #1
 800932c:	b10a      	cbz	r2, 8009332 <_vfiprintf_r+0xa2>
 800932e:	2a25      	cmp	r2, #37	; 0x25
 8009330:	d1f9      	bne.n	8009326 <_vfiprintf_r+0x96>
 8009332:	ebba 0b04 	subs.w	fp, sl, r4
 8009336:	d00b      	beq.n	8009350 <_vfiprintf_r+0xc0>
 8009338:	465b      	mov	r3, fp
 800933a:	4622      	mov	r2, r4
 800933c:	4629      	mov	r1, r5
 800933e:	4630      	mov	r0, r6
 8009340:	f7ff ff94 	bl	800926c <__sfputs_r>
 8009344:	3001      	adds	r0, #1
 8009346:	f000 80aa 	beq.w	800949e <_vfiprintf_r+0x20e>
 800934a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800934c:	445a      	add	r2, fp
 800934e:	9209      	str	r2, [sp, #36]	; 0x24
 8009350:	f89a 3000 	ldrb.w	r3, [sl]
 8009354:	2b00      	cmp	r3, #0
 8009356:	f000 80a2 	beq.w	800949e <_vfiprintf_r+0x20e>
 800935a:	2300      	movs	r3, #0
 800935c:	f04f 32ff 	mov.w	r2, #4294967295
 8009360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009364:	f10a 0a01 	add.w	sl, sl, #1
 8009368:	9304      	str	r3, [sp, #16]
 800936a:	9307      	str	r3, [sp, #28]
 800936c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009370:	931a      	str	r3, [sp, #104]	; 0x68
 8009372:	4654      	mov	r4, sl
 8009374:	2205      	movs	r2, #5
 8009376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937a:	4858      	ldr	r0, [pc, #352]	; (80094dc <_vfiprintf_r+0x24c>)
 800937c:	f7f6 ff48 	bl	8000210 <memchr>
 8009380:	9a04      	ldr	r2, [sp, #16]
 8009382:	b9d8      	cbnz	r0, 80093bc <_vfiprintf_r+0x12c>
 8009384:	06d1      	lsls	r1, r2, #27
 8009386:	bf44      	itt	mi
 8009388:	2320      	movmi	r3, #32
 800938a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800938e:	0713      	lsls	r3, r2, #28
 8009390:	bf44      	itt	mi
 8009392:	232b      	movmi	r3, #43	; 0x2b
 8009394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009398:	f89a 3000 	ldrb.w	r3, [sl]
 800939c:	2b2a      	cmp	r3, #42	; 0x2a
 800939e:	d015      	beq.n	80093cc <_vfiprintf_r+0x13c>
 80093a0:	9a07      	ldr	r2, [sp, #28]
 80093a2:	4654      	mov	r4, sl
 80093a4:	2000      	movs	r0, #0
 80093a6:	f04f 0c0a 	mov.w	ip, #10
 80093aa:	4621      	mov	r1, r4
 80093ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093b0:	3b30      	subs	r3, #48	; 0x30
 80093b2:	2b09      	cmp	r3, #9
 80093b4:	d94e      	bls.n	8009454 <_vfiprintf_r+0x1c4>
 80093b6:	b1b0      	cbz	r0, 80093e6 <_vfiprintf_r+0x156>
 80093b8:	9207      	str	r2, [sp, #28]
 80093ba:	e014      	b.n	80093e6 <_vfiprintf_r+0x156>
 80093bc:	eba0 0308 	sub.w	r3, r0, r8
 80093c0:	fa09 f303 	lsl.w	r3, r9, r3
 80093c4:	4313      	orrs	r3, r2
 80093c6:	9304      	str	r3, [sp, #16]
 80093c8:	46a2      	mov	sl, r4
 80093ca:	e7d2      	b.n	8009372 <_vfiprintf_r+0xe2>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	1d19      	adds	r1, r3, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	9103      	str	r1, [sp, #12]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	bfbb      	ittet	lt
 80093d8:	425b      	neglt	r3, r3
 80093da:	f042 0202 	orrlt.w	r2, r2, #2
 80093de:	9307      	strge	r3, [sp, #28]
 80093e0:	9307      	strlt	r3, [sp, #28]
 80093e2:	bfb8      	it	lt
 80093e4:	9204      	strlt	r2, [sp, #16]
 80093e6:	7823      	ldrb	r3, [r4, #0]
 80093e8:	2b2e      	cmp	r3, #46	; 0x2e
 80093ea:	d10c      	bne.n	8009406 <_vfiprintf_r+0x176>
 80093ec:	7863      	ldrb	r3, [r4, #1]
 80093ee:	2b2a      	cmp	r3, #42	; 0x2a
 80093f0:	d135      	bne.n	800945e <_vfiprintf_r+0x1ce>
 80093f2:	9b03      	ldr	r3, [sp, #12]
 80093f4:	1d1a      	adds	r2, r3, #4
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	9203      	str	r2, [sp, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	bfb8      	it	lt
 80093fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8009402:	3402      	adds	r4, #2
 8009404:	9305      	str	r3, [sp, #20]
 8009406:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094ec <_vfiprintf_r+0x25c>
 800940a:	7821      	ldrb	r1, [r4, #0]
 800940c:	2203      	movs	r2, #3
 800940e:	4650      	mov	r0, sl
 8009410:	f7f6 fefe 	bl	8000210 <memchr>
 8009414:	b140      	cbz	r0, 8009428 <_vfiprintf_r+0x198>
 8009416:	2340      	movs	r3, #64	; 0x40
 8009418:	eba0 000a 	sub.w	r0, r0, sl
 800941c:	fa03 f000 	lsl.w	r0, r3, r0
 8009420:	9b04      	ldr	r3, [sp, #16]
 8009422:	4303      	orrs	r3, r0
 8009424:	3401      	adds	r4, #1
 8009426:	9304      	str	r3, [sp, #16]
 8009428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800942c:	482c      	ldr	r0, [pc, #176]	; (80094e0 <_vfiprintf_r+0x250>)
 800942e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009432:	2206      	movs	r2, #6
 8009434:	f7f6 feec 	bl	8000210 <memchr>
 8009438:	2800      	cmp	r0, #0
 800943a:	d03f      	beq.n	80094bc <_vfiprintf_r+0x22c>
 800943c:	4b29      	ldr	r3, [pc, #164]	; (80094e4 <_vfiprintf_r+0x254>)
 800943e:	bb1b      	cbnz	r3, 8009488 <_vfiprintf_r+0x1f8>
 8009440:	9b03      	ldr	r3, [sp, #12]
 8009442:	3307      	adds	r3, #7
 8009444:	f023 0307 	bic.w	r3, r3, #7
 8009448:	3308      	adds	r3, #8
 800944a:	9303      	str	r3, [sp, #12]
 800944c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944e:	443b      	add	r3, r7
 8009450:	9309      	str	r3, [sp, #36]	; 0x24
 8009452:	e767      	b.n	8009324 <_vfiprintf_r+0x94>
 8009454:	fb0c 3202 	mla	r2, ip, r2, r3
 8009458:	460c      	mov	r4, r1
 800945a:	2001      	movs	r0, #1
 800945c:	e7a5      	b.n	80093aa <_vfiprintf_r+0x11a>
 800945e:	2300      	movs	r3, #0
 8009460:	3401      	adds	r4, #1
 8009462:	9305      	str	r3, [sp, #20]
 8009464:	4619      	mov	r1, r3
 8009466:	f04f 0c0a 	mov.w	ip, #10
 800946a:	4620      	mov	r0, r4
 800946c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009470:	3a30      	subs	r2, #48	; 0x30
 8009472:	2a09      	cmp	r2, #9
 8009474:	d903      	bls.n	800947e <_vfiprintf_r+0x1ee>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d0c5      	beq.n	8009406 <_vfiprintf_r+0x176>
 800947a:	9105      	str	r1, [sp, #20]
 800947c:	e7c3      	b.n	8009406 <_vfiprintf_r+0x176>
 800947e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009482:	4604      	mov	r4, r0
 8009484:	2301      	movs	r3, #1
 8009486:	e7f0      	b.n	800946a <_vfiprintf_r+0x1da>
 8009488:	ab03      	add	r3, sp, #12
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	462a      	mov	r2, r5
 800948e:	4b16      	ldr	r3, [pc, #88]	; (80094e8 <_vfiprintf_r+0x258>)
 8009490:	a904      	add	r1, sp, #16
 8009492:	4630      	mov	r0, r6
 8009494:	f7fb f9be 	bl	8004814 <_printf_float>
 8009498:	4607      	mov	r7, r0
 800949a:	1c78      	adds	r0, r7, #1
 800949c:	d1d6      	bne.n	800944c <_vfiprintf_r+0x1bc>
 800949e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094a0:	07d9      	lsls	r1, r3, #31
 80094a2:	d405      	bmi.n	80094b0 <_vfiprintf_r+0x220>
 80094a4:	89ab      	ldrh	r3, [r5, #12]
 80094a6:	059a      	lsls	r2, r3, #22
 80094a8:	d402      	bmi.n	80094b0 <_vfiprintf_r+0x220>
 80094aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ac:	f7ff fe71 	bl	8009192 <__retarget_lock_release_recursive>
 80094b0:	89ab      	ldrh	r3, [r5, #12]
 80094b2:	065b      	lsls	r3, r3, #25
 80094b4:	f53f af12 	bmi.w	80092dc <_vfiprintf_r+0x4c>
 80094b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ba:	e711      	b.n	80092e0 <_vfiprintf_r+0x50>
 80094bc:	ab03      	add	r3, sp, #12
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	462a      	mov	r2, r5
 80094c2:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <_vfiprintf_r+0x258>)
 80094c4:	a904      	add	r1, sp, #16
 80094c6:	4630      	mov	r0, r6
 80094c8:	f7fb fc48 	bl	8004d5c <_printf_i>
 80094cc:	e7e4      	b.n	8009498 <_vfiprintf_r+0x208>
 80094ce:	bf00      	nop
 80094d0:	0800a264 	.word	0x0800a264
 80094d4:	0800a284 	.word	0x0800a284
 80094d8:	0800a244 	.word	0x0800a244
 80094dc:	0800a1dc 	.word	0x0800a1dc
 80094e0:	0800a1e6 	.word	0x0800a1e6
 80094e4:	08004815 	.word	0x08004815
 80094e8:	0800926d 	.word	0x0800926d
 80094ec:	0800a1e2 	.word	0x0800a1e2

080094f0 <__swbuf_r>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	460e      	mov	r6, r1
 80094f4:	4614      	mov	r4, r2
 80094f6:	4605      	mov	r5, r0
 80094f8:	b118      	cbz	r0, 8009502 <__swbuf_r+0x12>
 80094fa:	6983      	ldr	r3, [r0, #24]
 80094fc:	b90b      	cbnz	r3, 8009502 <__swbuf_r+0x12>
 80094fe:	f7ff fd97 	bl	8009030 <__sinit>
 8009502:	4b21      	ldr	r3, [pc, #132]	; (8009588 <__swbuf_r+0x98>)
 8009504:	429c      	cmp	r4, r3
 8009506:	d12b      	bne.n	8009560 <__swbuf_r+0x70>
 8009508:	686c      	ldr	r4, [r5, #4]
 800950a:	69a3      	ldr	r3, [r4, #24]
 800950c:	60a3      	str	r3, [r4, #8]
 800950e:	89a3      	ldrh	r3, [r4, #12]
 8009510:	071a      	lsls	r2, r3, #28
 8009512:	d52f      	bpl.n	8009574 <__swbuf_r+0x84>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	b36b      	cbz	r3, 8009574 <__swbuf_r+0x84>
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	6820      	ldr	r0, [r4, #0]
 800951c:	1ac0      	subs	r0, r0, r3
 800951e:	6963      	ldr	r3, [r4, #20]
 8009520:	b2f6      	uxtb	r6, r6
 8009522:	4283      	cmp	r3, r0
 8009524:	4637      	mov	r7, r6
 8009526:	dc04      	bgt.n	8009532 <__swbuf_r+0x42>
 8009528:	4621      	mov	r1, r4
 800952a:	4628      	mov	r0, r5
 800952c:	f7ff fcec 	bl	8008f08 <_fflush_r>
 8009530:	bb30      	cbnz	r0, 8009580 <__swbuf_r+0x90>
 8009532:	68a3      	ldr	r3, [r4, #8]
 8009534:	3b01      	subs	r3, #1
 8009536:	60a3      	str	r3, [r4, #8]
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	6022      	str	r2, [r4, #0]
 800953e:	701e      	strb	r6, [r3, #0]
 8009540:	6963      	ldr	r3, [r4, #20]
 8009542:	3001      	adds	r0, #1
 8009544:	4283      	cmp	r3, r0
 8009546:	d004      	beq.n	8009552 <__swbuf_r+0x62>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	07db      	lsls	r3, r3, #31
 800954c:	d506      	bpl.n	800955c <__swbuf_r+0x6c>
 800954e:	2e0a      	cmp	r6, #10
 8009550:	d104      	bne.n	800955c <__swbuf_r+0x6c>
 8009552:	4621      	mov	r1, r4
 8009554:	4628      	mov	r0, r5
 8009556:	f7ff fcd7 	bl	8008f08 <_fflush_r>
 800955a:	b988      	cbnz	r0, 8009580 <__swbuf_r+0x90>
 800955c:	4638      	mov	r0, r7
 800955e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009560:	4b0a      	ldr	r3, [pc, #40]	; (800958c <__swbuf_r+0x9c>)
 8009562:	429c      	cmp	r4, r3
 8009564:	d101      	bne.n	800956a <__swbuf_r+0x7a>
 8009566:	68ac      	ldr	r4, [r5, #8]
 8009568:	e7cf      	b.n	800950a <__swbuf_r+0x1a>
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <__swbuf_r+0xa0>)
 800956c:	429c      	cmp	r4, r3
 800956e:	bf08      	it	eq
 8009570:	68ec      	ldreq	r4, [r5, #12]
 8009572:	e7ca      	b.n	800950a <__swbuf_r+0x1a>
 8009574:	4621      	mov	r1, r4
 8009576:	4628      	mov	r0, r5
 8009578:	f000 f80c 	bl	8009594 <__swsetup_r>
 800957c:	2800      	cmp	r0, #0
 800957e:	d0cb      	beq.n	8009518 <__swbuf_r+0x28>
 8009580:	f04f 37ff 	mov.w	r7, #4294967295
 8009584:	e7ea      	b.n	800955c <__swbuf_r+0x6c>
 8009586:	bf00      	nop
 8009588:	0800a264 	.word	0x0800a264
 800958c:	0800a284 	.word	0x0800a284
 8009590:	0800a244 	.word	0x0800a244

08009594 <__swsetup_r>:
 8009594:	4b32      	ldr	r3, [pc, #200]	; (8009660 <__swsetup_r+0xcc>)
 8009596:	b570      	push	{r4, r5, r6, lr}
 8009598:	681d      	ldr	r5, [r3, #0]
 800959a:	4606      	mov	r6, r0
 800959c:	460c      	mov	r4, r1
 800959e:	b125      	cbz	r5, 80095aa <__swsetup_r+0x16>
 80095a0:	69ab      	ldr	r3, [r5, #24]
 80095a2:	b913      	cbnz	r3, 80095aa <__swsetup_r+0x16>
 80095a4:	4628      	mov	r0, r5
 80095a6:	f7ff fd43 	bl	8009030 <__sinit>
 80095aa:	4b2e      	ldr	r3, [pc, #184]	; (8009664 <__swsetup_r+0xd0>)
 80095ac:	429c      	cmp	r4, r3
 80095ae:	d10f      	bne.n	80095d0 <__swsetup_r+0x3c>
 80095b0:	686c      	ldr	r4, [r5, #4]
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095b8:	0719      	lsls	r1, r3, #28
 80095ba:	d42c      	bmi.n	8009616 <__swsetup_r+0x82>
 80095bc:	06dd      	lsls	r5, r3, #27
 80095be:	d411      	bmi.n	80095e4 <__swsetup_r+0x50>
 80095c0:	2309      	movs	r3, #9
 80095c2:	6033      	str	r3, [r6, #0]
 80095c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095c8:	81a3      	strh	r3, [r4, #12]
 80095ca:	f04f 30ff 	mov.w	r0, #4294967295
 80095ce:	e03e      	b.n	800964e <__swsetup_r+0xba>
 80095d0:	4b25      	ldr	r3, [pc, #148]	; (8009668 <__swsetup_r+0xd4>)
 80095d2:	429c      	cmp	r4, r3
 80095d4:	d101      	bne.n	80095da <__swsetup_r+0x46>
 80095d6:	68ac      	ldr	r4, [r5, #8]
 80095d8:	e7eb      	b.n	80095b2 <__swsetup_r+0x1e>
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <__swsetup_r+0xd8>)
 80095dc:	429c      	cmp	r4, r3
 80095de:	bf08      	it	eq
 80095e0:	68ec      	ldreq	r4, [r5, #12]
 80095e2:	e7e6      	b.n	80095b2 <__swsetup_r+0x1e>
 80095e4:	0758      	lsls	r0, r3, #29
 80095e6:	d512      	bpl.n	800960e <__swsetup_r+0x7a>
 80095e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ea:	b141      	cbz	r1, 80095fe <__swsetup_r+0x6a>
 80095ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f0:	4299      	cmp	r1, r3
 80095f2:	d002      	beq.n	80095fa <__swsetup_r+0x66>
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7fe fd4f 	bl	8008098 <_free_r>
 80095fa:	2300      	movs	r3, #0
 80095fc:	6363      	str	r3, [r4, #52]	; 0x34
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	2300      	movs	r3, #0
 8009608:	6063      	str	r3, [r4, #4]
 800960a:	6923      	ldr	r3, [r4, #16]
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f043 0308 	orr.w	r3, r3, #8
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	b94b      	cbnz	r3, 800962e <__swsetup_r+0x9a>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009624:	d003      	beq.n	800962e <__swsetup_r+0x9a>
 8009626:	4621      	mov	r1, r4
 8009628:	4630      	mov	r0, r6
 800962a:	f000 f84d 	bl	80096c8 <__smakebuf_r>
 800962e:	89a0      	ldrh	r0, [r4, #12]
 8009630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009634:	f010 0301 	ands.w	r3, r0, #1
 8009638:	d00a      	beq.n	8009650 <__swsetup_r+0xbc>
 800963a:	2300      	movs	r3, #0
 800963c:	60a3      	str	r3, [r4, #8]
 800963e:	6963      	ldr	r3, [r4, #20]
 8009640:	425b      	negs	r3, r3
 8009642:	61a3      	str	r3, [r4, #24]
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	b943      	cbnz	r3, 800965a <__swsetup_r+0xc6>
 8009648:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800964c:	d1ba      	bne.n	80095c4 <__swsetup_r+0x30>
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	0781      	lsls	r1, r0, #30
 8009652:	bf58      	it	pl
 8009654:	6963      	ldrpl	r3, [r4, #20]
 8009656:	60a3      	str	r3, [r4, #8]
 8009658:	e7f4      	b.n	8009644 <__swsetup_r+0xb0>
 800965a:	2000      	movs	r0, #0
 800965c:	e7f7      	b.n	800964e <__swsetup_r+0xba>
 800965e:	bf00      	nop
 8009660:	20000014 	.word	0x20000014
 8009664:	0800a264 	.word	0x0800a264
 8009668:	0800a284 	.word	0x0800a284
 800966c:	0800a244 	.word	0x0800a244

08009670 <abort>:
 8009670:	b508      	push	{r3, lr}
 8009672:	2006      	movs	r0, #6
 8009674:	f000 f898 	bl	80097a8 <raise>
 8009678:	2001      	movs	r0, #1
 800967a:	f7f8 fba8 	bl	8001dce <_exit>

0800967e <__swhatbuf_r>:
 800967e:	b570      	push	{r4, r5, r6, lr}
 8009680:	460e      	mov	r6, r1
 8009682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009686:	2900      	cmp	r1, #0
 8009688:	b096      	sub	sp, #88	; 0x58
 800968a:	4614      	mov	r4, r2
 800968c:	461d      	mov	r5, r3
 800968e:	da08      	bge.n	80096a2 <__swhatbuf_r+0x24>
 8009690:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	602a      	str	r2, [r5, #0]
 8009698:	061a      	lsls	r2, r3, #24
 800969a:	d410      	bmi.n	80096be <__swhatbuf_r+0x40>
 800969c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096a0:	e00e      	b.n	80096c0 <__swhatbuf_r+0x42>
 80096a2:	466a      	mov	r2, sp
 80096a4:	f000 f89c 	bl	80097e0 <_fstat_r>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	dbf1      	blt.n	8009690 <__swhatbuf_r+0x12>
 80096ac:	9a01      	ldr	r2, [sp, #4]
 80096ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096b6:	425a      	negs	r2, r3
 80096b8:	415a      	adcs	r2, r3
 80096ba:	602a      	str	r2, [r5, #0]
 80096bc:	e7ee      	b.n	800969c <__swhatbuf_r+0x1e>
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	2000      	movs	r0, #0
 80096c2:	6023      	str	r3, [r4, #0]
 80096c4:	b016      	add	sp, #88	; 0x58
 80096c6:	bd70      	pop	{r4, r5, r6, pc}

080096c8 <__smakebuf_r>:
 80096c8:	898b      	ldrh	r3, [r1, #12]
 80096ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096cc:	079d      	lsls	r5, r3, #30
 80096ce:	4606      	mov	r6, r0
 80096d0:	460c      	mov	r4, r1
 80096d2:	d507      	bpl.n	80096e4 <__smakebuf_r+0x1c>
 80096d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	6123      	str	r3, [r4, #16]
 80096dc:	2301      	movs	r3, #1
 80096de:	6163      	str	r3, [r4, #20]
 80096e0:	b002      	add	sp, #8
 80096e2:	bd70      	pop	{r4, r5, r6, pc}
 80096e4:	ab01      	add	r3, sp, #4
 80096e6:	466a      	mov	r2, sp
 80096e8:	f7ff ffc9 	bl	800967e <__swhatbuf_r>
 80096ec:	9900      	ldr	r1, [sp, #0]
 80096ee:	4605      	mov	r5, r0
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7fe fd3d 	bl	8008170 <_malloc_r>
 80096f6:	b948      	cbnz	r0, 800970c <__smakebuf_r+0x44>
 80096f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fc:	059a      	lsls	r2, r3, #22
 80096fe:	d4ef      	bmi.n	80096e0 <__smakebuf_r+0x18>
 8009700:	f023 0303 	bic.w	r3, r3, #3
 8009704:	f043 0302 	orr.w	r3, r3, #2
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	e7e3      	b.n	80096d4 <__smakebuf_r+0xc>
 800970c:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <__smakebuf_r+0x7c>)
 800970e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	6020      	str	r0, [r4, #0]
 8009714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009718:	81a3      	strh	r3, [r4, #12]
 800971a:	9b00      	ldr	r3, [sp, #0]
 800971c:	6163      	str	r3, [r4, #20]
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	6120      	str	r0, [r4, #16]
 8009722:	b15b      	cbz	r3, 800973c <__smakebuf_r+0x74>
 8009724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009728:	4630      	mov	r0, r6
 800972a:	f000 f86b 	bl	8009804 <_isatty_r>
 800972e:	b128      	cbz	r0, 800973c <__smakebuf_r+0x74>
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	f023 0303 	bic.w	r3, r3, #3
 8009736:	f043 0301 	orr.w	r3, r3, #1
 800973a:	81a3      	strh	r3, [r4, #12]
 800973c:	89a0      	ldrh	r0, [r4, #12]
 800973e:	4305      	orrs	r5, r0
 8009740:	81a5      	strh	r5, [r4, #12]
 8009742:	e7cd      	b.n	80096e0 <__smakebuf_r+0x18>
 8009744:	08008fc9 	.word	0x08008fc9

08009748 <_malloc_usable_size_r>:
 8009748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800974c:	1f18      	subs	r0, r3, #4
 800974e:	2b00      	cmp	r3, #0
 8009750:	bfbc      	itt	lt
 8009752:	580b      	ldrlt	r3, [r1, r0]
 8009754:	18c0      	addlt	r0, r0, r3
 8009756:	4770      	bx	lr

08009758 <_raise_r>:
 8009758:	291f      	cmp	r1, #31
 800975a:	b538      	push	{r3, r4, r5, lr}
 800975c:	4604      	mov	r4, r0
 800975e:	460d      	mov	r5, r1
 8009760:	d904      	bls.n	800976c <_raise_r+0x14>
 8009762:	2316      	movs	r3, #22
 8009764:	6003      	str	r3, [r0, #0]
 8009766:	f04f 30ff 	mov.w	r0, #4294967295
 800976a:	bd38      	pop	{r3, r4, r5, pc}
 800976c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800976e:	b112      	cbz	r2, 8009776 <_raise_r+0x1e>
 8009770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009774:	b94b      	cbnz	r3, 800978a <_raise_r+0x32>
 8009776:	4620      	mov	r0, r4
 8009778:	f000 f830 	bl	80097dc <_getpid_r>
 800977c:	462a      	mov	r2, r5
 800977e:	4601      	mov	r1, r0
 8009780:	4620      	mov	r0, r4
 8009782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009786:	f000 b817 	b.w	80097b8 <_kill_r>
 800978a:	2b01      	cmp	r3, #1
 800978c:	d00a      	beq.n	80097a4 <_raise_r+0x4c>
 800978e:	1c59      	adds	r1, r3, #1
 8009790:	d103      	bne.n	800979a <_raise_r+0x42>
 8009792:	2316      	movs	r3, #22
 8009794:	6003      	str	r3, [r0, #0]
 8009796:	2001      	movs	r0, #1
 8009798:	e7e7      	b.n	800976a <_raise_r+0x12>
 800979a:	2400      	movs	r4, #0
 800979c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097a0:	4628      	mov	r0, r5
 80097a2:	4798      	blx	r3
 80097a4:	2000      	movs	r0, #0
 80097a6:	e7e0      	b.n	800976a <_raise_r+0x12>

080097a8 <raise>:
 80097a8:	4b02      	ldr	r3, [pc, #8]	; (80097b4 <raise+0xc>)
 80097aa:	4601      	mov	r1, r0
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	f7ff bfd3 	b.w	8009758 <_raise_r>
 80097b2:	bf00      	nop
 80097b4:	20000014 	.word	0x20000014

080097b8 <_kill_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4d07      	ldr	r5, [pc, #28]	; (80097d8 <_kill_r+0x20>)
 80097bc:	2300      	movs	r3, #0
 80097be:	4604      	mov	r4, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	4611      	mov	r1, r2
 80097c4:	602b      	str	r3, [r5, #0]
 80097c6:	f7f8 faf2 	bl	8001dae <_kill>
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	d102      	bne.n	80097d4 <_kill_r+0x1c>
 80097ce:	682b      	ldr	r3, [r5, #0]
 80097d0:	b103      	cbz	r3, 80097d4 <_kill_r+0x1c>
 80097d2:	6023      	str	r3, [r4, #0]
 80097d4:	bd38      	pop	{r3, r4, r5, pc}
 80097d6:	bf00      	nop
 80097d8:	20000c2c 	.word	0x20000c2c

080097dc <_getpid_r>:
 80097dc:	f7f8 badf 	b.w	8001d9e <_getpid>

080097e0 <_fstat_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d07      	ldr	r5, [pc, #28]	; (8009800 <_fstat_r+0x20>)
 80097e4:	2300      	movs	r3, #0
 80097e6:	4604      	mov	r4, r0
 80097e8:	4608      	mov	r0, r1
 80097ea:	4611      	mov	r1, r2
 80097ec:	602b      	str	r3, [r5, #0]
 80097ee:	f7f8 fb3d 	bl	8001e6c <_fstat>
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d102      	bne.n	80097fc <_fstat_r+0x1c>
 80097f6:	682b      	ldr	r3, [r5, #0]
 80097f8:	b103      	cbz	r3, 80097fc <_fstat_r+0x1c>
 80097fa:	6023      	str	r3, [r4, #0]
 80097fc:	bd38      	pop	{r3, r4, r5, pc}
 80097fe:	bf00      	nop
 8009800:	20000c2c 	.word	0x20000c2c

08009804 <_isatty_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d06      	ldr	r5, [pc, #24]	; (8009820 <_isatty_r+0x1c>)
 8009808:	2300      	movs	r3, #0
 800980a:	4604      	mov	r4, r0
 800980c:	4608      	mov	r0, r1
 800980e:	602b      	str	r3, [r5, #0]
 8009810:	f7f8 fb3c 	bl	8001e8c <_isatty>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_isatty_r+0x1a>
 8009818:	682b      	ldr	r3, [r5, #0]
 800981a:	b103      	cbz	r3, 800981e <_isatty_r+0x1a>
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	20000c2c 	.word	0x20000c2c

08009824 <_init>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	bf00      	nop
 8009828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982a:	bc08      	pop	{r3}
 800982c:	469e      	mov	lr, r3
 800982e:	4770      	bx	lr

08009830 <_fini>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	bf00      	nop
 8009834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009836:	bc08      	pop	{r3}
 8009838:	469e      	mov	lr, r3
 800983a:	4770      	bx	lr
