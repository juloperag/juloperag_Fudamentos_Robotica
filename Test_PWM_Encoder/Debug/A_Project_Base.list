
A_Project_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009050  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  080091f0  080091f0  000191f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b4  080097b4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  080097b4  080097b4  000197b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097bc  080097bc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097bc  080097bc  000197bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c0  080097c0  000197c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080097c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  200001f0  080099b0  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  080099b0  00020bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006179  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001699  00000000  00000000  00026395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000558  00000000  00000000  00027a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000480  00000000  00000000  00027f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011234  00000000  00000000  00028408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b74  00000000  00000000  0003963c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005912f  00000000  00000000  000411b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009a2df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  0009a330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091d8 	.word	0x080091d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	080091d8 	.word	0x080091d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9dd 	b.w	8001074 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f86b 	bl	8000da4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f85e 	bl	8000da4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f84d 	bl	8000da4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f83f 	bl	8000da4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fed3 	bl	8000aec <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc49 	bl	8000608 <__aeabi_dmul>
 8000d76:	f7ff ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbca 	bl	8000514 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc40 	bl	8000608 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa82 	bl	8000298 <__aeabi_dsub>
 8000d94:	f7ff ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	468e      	mov	lr, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14d      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db2:	428a      	cmp	r2, r1
 8000db4:	4694      	mov	ip, r2
 8000db6:	d969      	bls.n	8000e8c <__udivmoddi4+0xe8>
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b152      	cbz	r2, 8000dd4 <__udivmoddi4+0x30>
 8000dbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc2:	f1c2 0120 	rsb	r1, r2, #32
 8000dc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dce:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd2:	4094      	lsls	r4, r2
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	0c21      	lsrs	r1, r4, #16
 8000dda:	fbbe f6f8 	udiv	r6, lr, r8
 8000dde:	fa1f f78c 	uxth.w	r7, ip
 8000de2:	fb08 e316 	mls	r3, r8, r6, lr
 8000de6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dea:	fb06 f107 	mul.w	r1, r6, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfa:	f080 811f 	bcs.w	800103c <__udivmoddi4+0x298>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 811c 	bls.w	800103c <__udivmoddi4+0x298>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb00 f707 	mul.w	r7, r0, r7
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x92>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	f080 810a 	bcs.w	8001040 <__udivmoddi4+0x29c>
 8000e2c:	42a7      	cmp	r7, r4
 8000e2e:	f240 8107 	bls.w	8001040 <__udivmoddi4+0x29c>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	1be4      	subs	r4, r4, r7
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	b11d      	cbz	r5, 8000e48 <__udivmoddi4+0xa4>
 8000e40:	40d4      	lsrs	r4, r2
 8000e42:	2300      	movs	r3, #0
 8000e44:	e9c5 4300 	strd	r4, r3, [r5]
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0xc2>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80ef 	beq.w	8001036 <__udivmoddi4+0x292>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x160>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xd4>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80f9 	bhi.w	800106a <__udivmoddi4+0x2c6>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	469e      	mov	lr, r3
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0e0      	beq.n	8000e48 <__udivmoddi4+0xa4>
 8000e86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8a:	e7dd      	b.n	8000e48 <__udivmoddi4+0xa4>
 8000e8c:	b902      	cbnz	r2, 8000e90 <__udivmoddi4+0xec>
 8000e8e:	deff      	udf	#255	; 0xff
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f040 8092 	bne.w	8000fbe <__udivmoddi4+0x21a>
 8000e9a:	eba1 010c 	sub.w	r1, r1, ip
 8000e9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	0c20      	lsrs	r0, r4, #16
 8000eaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eae:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb6:	fb0e f003 	mul.w	r0, lr, r3
 8000eba:	4288      	cmp	r0, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x12c>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x12a>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f200 80cb 	bhi.w	8001064 <__udivmoddi4+0x2c0>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1110 	mls	r1, r7, r0, r1
 8000edc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee4:	45a6      	cmp	lr, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x156>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef0:	d202      	bcs.n	8000ef8 <__udivmoddi4+0x154>
 8000ef2:	45a6      	cmp	lr, r4
 8000ef4:	f200 80bb 	bhi.w	800106e <__udivmoddi4+0x2ca>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f02:	e79c      	b.n	8000e3e <__udivmoddi4+0x9a>
 8000f04:	f1c6 0720 	rsb	r7, r6, #32
 8000f08:	40b3      	lsls	r3, r6
 8000f0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f12:	fa20 f407 	lsr.w	r4, r0, r7
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	40f9      	lsrs	r1, r7
 8000f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f22:	fa00 f306 	lsl.w	r3, r0, r6
 8000f26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2a:	0c20      	lsrs	r0, r4, #16
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	fb09 1118 	mls	r1, r9, r8, r1
 8000f34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f38:	fb08 f00e 	mul.w	r0, r8, lr
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f42:	d90b      	bls.n	8000f5c <__udivmoddi4+0x1b8>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f4c:	f080 8088 	bcs.w	8001060 <__udivmoddi4+0x2bc>
 8000f50:	4288      	cmp	r0, r1
 8000f52:	f240 8085 	bls.w	8001060 <__udivmoddi4+0x2bc>
 8000f56:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	1a09      	subs	r1, r1, r0
 8000f5e:	b2a4      	uxth	r4, r4
 8000f60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f64:	fb09 1110 	mls	r1, r9, r0, r1
 8000f68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f70:	458e      	cmp	lr, r1
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1e2>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7c:	d26c      	bcs.n	8001058 <__udivmoddi4+0x2b4>
 8000f7e:	458e      	cmp	lr, r1
 8000f80:	d96a      	bls.n	8001058 <__udivmoddi4+0x2b4>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4461      	add	r1, ip
 8000f86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f8e:	eba1 010e 	sub.w	r1, r1, lr
 8000f92:	42a1      	cmp	r1, r4
 8000f94:	46c8      	mov	r8, r9
 8000f96:	46a6      	mov	lr, r4
 8000f98:	d356      	bcc.n	8001048 <__udivmoddi4+0x2a4>
 8000f9a:	d053      	beq.n	8001044 <__udivmoddi4+0x2a0>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x212>
 8000f9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000faa:	fa22 f306 	lsr.w	r3, r2, r6
 8000fae:	40f1      	lsrs	r1, r6
 8000fb0:	431f      	orrs	r7, r3
 8000fb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	4631      	mov	r1, r6
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1c2 0320 	rsb	r3, r2, #32
 8000fc2:	40d8      	lsrs	r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	4301      	orrs	r1, r0
 8000fd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd4:	fa1f fe8c 	uxth.w	lr, ip
 8000fd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe0:	0c0b      	lsrs	r3, r1, #16
 8000fe2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fe6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fea:	429e      	cmp	r6, r3
 8000fec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x260>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffa:	d22f      	bcs.n	800105c <__udivmoddi4+0x2b8>
 8000ffc:	429e      	cmp	r6, r3
 8000ffe:	d92d      	bls.n	800105c <__udivmoddi4+0x2b8>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	b289      	uxth	r1, r1
 8001008:	fbb3 f6f7 	udiv	r6, r3, r7
 800100c:	fb07 3316 	mls	r3, r7, r6, r3
 8001010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001014:	fb06 f30e 	mul.w	r3, r6, lr
 8001018:	428b      	cmp	r3, r1
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x28a>
 800101c:	eb1c 0101 	adds.w	r1, ip, r1
 8001020:	f106 38ff 	add.w	r8, r6, #4294967295
 8001024:	d216      	bcs.n	8001054 <__udivmoddi4+0x2b0>
 8001026:	428b      	cmp	r3, r1
 8001028:	d914      	bls.n	8001054 <__udivmoddi4+0x2b0>
 800102a:	3e02      	subs	r6, #2
 800102c:	4461      	add	r1, ip
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001034:	e738      	b.n	8000ea8 <__udivmoddi4+0x104>
 8001036:	462e      	mov	r6, r5
 8001038:	4628      	mov	r0, r5
 800103a:	e705      	b.n	8000e48 <__udivmoddi4+0xa4>
 800103c:	4606      	mov	r6, r0
 800103e:	e6e3      	b.n	8000e08 <__udivmoddi4+0x64>
 8001040:	4618      	mov	r0, r3
 8001042:	e6f8      	b.n	8000e36 <__udivmoddi4+0x92>
 8001044:	454b      	cmp	r3, r9
 8001046:	d2a9      	bcs.n	8000f9c <__udivmoddi4+0x1f8>
 8001048:	ebb9 0802 	subs.w	r8, r9, r2
 800104c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001050:	3801      	subs	r0, #1
 8001052:	e7a3      	b.n	8000f9c <__udivmoddi4+0x1f8>
 8001054:	4646      	mov	r6, r8
 8001056:	e7ea      	b.n	800102e <__udivmoddi4+0x28a>
 8001058:	4620      	mov	r0, r4
 800105a:	e794      	b.n	8000f86 <__udivmoddi4+0x1e2>
 800105c:	4640      	mov	r0, r8
 800105e:	e7d1      	b.n	8001004 <__udivmoddi4+0x260>
 8001060:	46d0      	mov	r8, sl
 8001062:	e77b      	b.n	8000f5c <__udivmoddi4+0x1b8>
 8001064:	3b02      	subs	r3, #2
 8001066:	4461      	add	r1, ip
 8001068:	e732      	b.n	8000ed0 <__udivmoddi4+0x12c>
 800106a:	4630      	mov	r0, r6
 800106c:	e709      	b.n	8000e82 <__udivmoddi4+0xde>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	e742      	b.n	8000efa <__udivmoddi4+0x156>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <main>:
#define WHO_AM_I    117                            //Registro para verificar la identidad del equipo

void acelerometro_I2C(void);                       //Cabecera para la comunicacion I2C

int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af02      	add	r7, sp, #8
	//Realizamos la configuracuion inicial
	int_Hardware();
 800107e:	f000 f88f 	bl	80011a0 <int_Hardware>
	//Activamos el SysTick
	config_SysTick_ms();
 8001082:	f002 ff11 	bl	8003ea8 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 8001086:	4b39      	ldr	r3, [pc, #228]	; (800116c <main+0xf4>)
 8001088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108c:	4a37      	ldr	r2, [pc, #220]	; (800116c <main+0xf4>)
 800108e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001092:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos para el PIN un 1 logico,
	GPIO_writePin (&handler_BlinkyPin, SET);
 8001096:	2101      	movs	r1, #1
 8001098:	4835      	ldr	r0, [pc, #212]	; (8001170 <main+0xf8>)
 800109a:	f002 f9a1 	bl	80033e0 <GPIO_writePin>

	while(1)
	{
		if(charRead != '\0')
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <main+0xfc>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d050      	beq.n	8001148 <main+0xd0>
		{
			if(charRead == '1')
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <main+0xfc>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b31      	cmp	r3, #49	; 0x31
 80010ac:	d149      	bne.n	8001142 <main+0xca>
			{
				//------------------------------Implementacion USART-Systick--------------------------------
				//Definimos el tiempo que a pasado desde que el programa empezo a ejecutarse
				uint32_t tiempo = (uint32_t) getTicksMs();
 80010ae:	f002 ff35 	bl	8003f1c <getTicksMs>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4613      	mov	r3, r2
 80010b8:	617b      	str	r3, [r7, #20]
				//ese tiempo lo volvemos un string
				sprintf(bufferMsg,"Tiempo Transcurrido: %lu ms \n",tiempo);
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	492e      	ldr	r1, [pc, #184]	; (8001178 <main+0x100>)
 80010be:	482f      	ldr	r0, [pc, #188]	; (800117c <main+0x104>)
 80010c0:	f004 fa98 	bl	80055f4 <siprintf>
				//Enviamos por puerto serial dicho string
				writeMsg(&handler_USART_USB, bufferMsg);
 80010c4:	492d      	ldr	r1, [pc, #180]	; (800117c <main+0x104>)
 80010c6:	482e      	ldr	r0, [pc, #184]	; (8001180 <main+0x108>)
 80010c8:	f003 f9f9 	bl	80044be <writeMsg>

				//-----------------------------Implementacion USART-Librerias Externas--------------------------------
				//Definimos un arreglo que contiene numeros decimales
				float32_t value[2] = {-12.12, 2.14};
 80010cc:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <main+0x10c>)
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d6:	e883 0003 	stmia.w	r3, {r0, r1}
				float32_t valueAbs[2] = {0.0,0.0};
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
				//Aplicamos la funcion que se importo de la librerias CMSIS
				arm_abs_f32(value,valueAbs,2);
 80010e6:	1d39      	adds	r1, r7, #4
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2202      	movs	r2, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fbbe 	bl	8001870 <arm_abs_f32>
				//Enviamos un mensaje por el puerto Serial
				sprintf(bufferMsg,"El valor abs de %#.2f = %#.2f \n", value[0], valueAbs[0]);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa2e 	bl	8000558 <__aeabi_f2d>
 80010fc:	4604      	mov	r4, r0
 80010fe:	460d      	mov	r5, r1
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa28 	bl	8000558 <__aeabi_f2d>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9cd 2300 	strd	r2, r3, [sp]
 8001110:	4622      	mov	r2, r4
 8001112:	462b      	mov	r3, r5
 8001114:	491c      	ldr	r1, [pc, #112]	; (8001188 <main+0x110>)
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <main+0x104>)
 8001118:	f004 fa6c 	bl	80055f4 <siprintf>
				//Enviamos por puerto serial dicho string
				writeMsg(&handler_USART_USB, bufferMsg);
 800111c:	4917      	ldr	r1, [pc, #92]	; (800117c <main+0x104>)
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <main+0x108>)
 8001120:	f003 f9cd 	bl	80044be <writeMsg>

				//-----------------------------Implementacion USART-ADC--------------------------------
				sprintf(bufferMsg, "Data Canal 1: %u \n", adcData);
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <main+0x114>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4919      	ldr	r1, [pc, #100]	; (8001190 <main+0x118>)
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <main+0x104>)
 800112e:	f004 fa61 	bl	80055f4 <siprintf>
				writeMsg(&handler_USART_USB, bufferMsg);
 8001132:	4912      	ldr	r1, [pc, #72]	; (800117c <main+0x104>)
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <main+0x108>)
 8001136:	f003 f9c2 	bl	80044be <writeMsg>

				//reniciamos
				charRead = '\0';
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <main+0xfc>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e7ad      	b.n	800109e <main+0x26>
			}
			else
			{
				acelerometro_I2C();
 8001142:	f000 f997 	bl	8001474 <acelerometro_I2C>
 8001146:	e7aa      	b.n	800109e <main+0x26>
			}
		}
		else if(estado==1)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <main+0x11c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10a      	bne.n	8001166 <main+0xee>
		{
			//Cambiamos el porcentaje del dutty
			updateDuttyCycle(&handler_PWM, duttyporc);
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <main+0x120>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	4810      	ldr	r0, [pc, #64]	; (800119c <main+0x124>)
 800115a:	f002 fe77 	bl	8003e4c <updateDuttyCycle>
			estado = 0;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <main+0x11c>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e79b      	b.n	800109e <main+0x26>
			//Leemos la coordenada en x del Giroscopio;
		}
		else
		{
			__NOP();
 8001166:	bf00      	nop
		if(charRead != '\0')
 8001168:	e799      	b.n	800109e <main+0x26>
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00
 8001170:	2000020c 	.word	0x2000020c
 8001174:	20000000 	.word	0x20000000
 8001178:	080091f0 	.word	0x080091f0
 800117c:	20000260 	.word	0x20000260
 8001180:	20000254 	.word	0x20000254
 8001184:	08009244 	.word	0x08009244
 8001188:	08009210 	.word	0x08009210
 800118c:	20000306 	.word	0x20000306
 8001190:	08009230 	.word	0x08009230
 8001194:	200002c8 	.word	0x200002c8
 8001198:	20000017 	.word	0x20000017
 800119c:	200002bc 	.word	0x200002bc

080011a0 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80011a6:	4b7d      	ldr	r3, [pc, #500]	; (800139c <int_Hardware+0x1fc>)
 80011a8:	4a7d      	ldr	r2, [pc, #500]	; (80013a0 <int_Hardware+0x200>)
 80011aa:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80011ac:	4b7b      	ldr	r3, [pc, #492]	; (800139c <int_Hardware+0x1fc>)
 80011ae:	2205      	movs	r2, #5
 80011b0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011b2:	2300      	movs	r3, #0
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2200      	movs	r2, #0
 80011be:	2101      	movs	r1, #1
 80011c0:	4876      	ldr	r0, [pc, #472]	; (800139c <int_Hardware+0x1fc>)
 80011c2:	f001 ffc1 	bl	8003148 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 80011c6:	4875      	ldr	r0, [pc, #468]	; (800139c <int_Hardware+0x1fc>)
 80011c8:	f001 ffe0 	bl	800318c <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 80011cc:	4b75      	ldr	r3, [pc, #468]	; (80013a4 <int_Hardware+0x204>)
 80011ce:	4a74      	ldr	r2, [pc, #464]	; (80013a0 <int_Hardware+0x200>)
 80011d0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80011d2:	4b74      	ldr	r3, [pc, #464]	; (80013a4 <int_Hardware+0x204>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80011d8:	2307      	movs	r3, #7
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	486f      	ldr	r0, [pc, #444]	; (80013a4 <int_Hardware+0x204>)
 80011e8:	f001 ffae 	bl	8003148 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 80011ec:	486d      	ldr	r0, [pc, #436]	; (80013a4 <int_Hardware+0x204>)
 80011ee:	f001 ffcd 	bl	800318c <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 80011f2:	4b6d      	ldr	r3, [pc, #436]	; (80013a8 <int_Hardware+0x208>)
 80011f4:	4a6a      	ldr	r2, [pc, #424]	; (80013a0 <int_Hardware+0x200>)
 80011f6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 80011f8:	4b6b      	ldr	r3, [pc, #428]	; (80013a8 <int_Hardware+0x208>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80011fe:	2307      	movs	r3, #7
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	2300      	movs	r3, #0
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	2200      	movs	r2, #0
 800120a:	2102      	movs	r1, #2
 800120c:	4866      	ldr	r0, [pc, #408]	; (80013a8 <int_Hardware+0x208>)
 800120e:	f001 ff9b 	bl	8003148 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001212:	4865      	ldr	r0, [pc, #404]	; (80013a8 <int_Hardware+0x208>)
 8001214:	f001 ffba 	bl	800318c <GPIO_Config>

	//---------------------------PWM--------------------------------
	//---------------PIN: PB6----------------
	//------------AF2: TIM4_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_PWM.pGPIOx = GPIOB;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <int_Hardware+0x20c>)
 800121a:	4a65      	ldr	r2, [pc, #404]	; (80013b0 <int_Hardware+0x210>)
 800121c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_PWM.GPIO_PinConfig.GPIO_PinNumber = PIN_6; 						//PIN_x, 0-15
 800121e:	4b63      	ldr	r3, [pc, #396]	; (80013ac <int_Hardware+0x20c>)
 8001220:	2206      	movs	r2, #6
 8001222:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_PWM, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001224:	2302      	movs	r3, #2
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2300      	movs	r3, #0
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	2200      	movs	r2, #0
 8001230:	2102      	movs	r1, #2
 8001232:	485e      	ldr	r0, [pc, #376]	; (80013ac <int_Hardware+0x20c>)
 8001234:	f001 ff88 	bl	8003148 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_PWM);
 8001238:	485c      	ldr	r0, [pc, #368]	; (80013ac <int_Hardware+0x20c>)
 800123a:	f001 ffa7 	bl	800318c <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_Acelerometro.pGPIOx = GPIOB;
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <int_Hardware+0x214>)
 8001240:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <int_Hardware+0x210>)
 8001242:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_Acelerometro.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8001244:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <int_Hardware+0x214>)
 8001246:	2208      	movs	r2, #8
 8001248:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_Acelerometro, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 800124a:	2304      	movs	r3, #4
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	2300      	movs	r3, #0
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2302      	movs	r3, #2
 8001254:	2201      	movs	r2, #1
 8001256:	2102      	movs	r1, #2
 8001258:	4856      	ldr	r0, [pc, #344]	; (80013b4 <int_Hardware+0x214>)
 800125a:	f001 ff75 	bl	8003148 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_Acelerometro);
 800125e:	4855      	ldr	r0, [pc, #340]	; (80013b4 <int_Hardware+0x214>)
 8001260:	f001 ff94 	bl	800318c <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_Acelerometro.pGPIOx = GPIOB;
 8001264:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <int_Hardware+0x218>)
 8001266:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <int_Hardware+0x210>)
 8001268:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_Acelerometro.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <int_Hardware+0x218>)
 800126c:	2209      	movs	r2, #9
 800126e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_Acelerometro, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8001270:	2304      	movs	r3, #4
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2302      	movs	r3, #2
 800127a:	2201      	movs	r2, #1
 800127c:	2102      	movs	r1, #2
 800127e:	484e      	ldr	r0, [pc, #312]	; (80013b8 <int_Hardware+0x218>)
 8001280:	f001 ff62 	bl	8003148 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_Acelerometro);
 8001284:	484c      	ldr	r0, [pc, #304]	; (80013b8 <int_Hardware+0x218>)
 8001286:	f001 ff81 	bl	800318c <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 800128a:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <int_Hardware+0x21c>)
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <int_Hardware+0x220>)
 800128e:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8001290:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <int_Hardware+0x21c>)
 8001292:	2202      	movs	r2, #2
 8001294:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_9600;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <int_Hardware+0x21c>)
 8001298:	2200      	movs	r2, #0
 800129a:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 800129c:	4b47      	ldr	r3, [pc, #284]	; (80013bc <int_Hardware+0x21c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 80012a2:	4b46      	ldr	r3, [pc, #280]	; (80013bc <int_Hardware+0x21c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 80012a8:	4b44      	ldr	r3, [pc, #272]	; (80013bc <int_Hardware+0x21c>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <int_Hardware+0x21c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 80012b4:	4841      	ldr	r0, [pc, #260]	; (80013bc <int_Hardware+0x21c>)
 80012b6:	f002 fe7d 	bl	8003fb4 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 80012ba:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <int_Hardware+0x224>)
 80012bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c0:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <int_Hardware+0x224>)
 80012c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c8:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <int_Hardware+0x224>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <int_Hardware+0x224>)
 80012d2:	22fa      	movs	r2, #250	; 0xfa
 80012d4:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <int_Hardware+0x224>)
 80012d8:	2201      	movs	r2, #1
 80012da:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80012dc:	4839      	ldr	r0, [pc, #228]	; (80013c4 <int_Hardware+0x224>)
 80012de:	f000 fd53 	bl	8001d88 <BasicTimer_Config>

	//---------------TIM4----------------
	//Definimos el TIMx a usar
	handler_TIMER_PWM.ptrTIMx = TIM4;
 80012e2:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <int_Hardware+0x228>)
 80012e4:	4a39      	ldr	r2, [pc, #228]	; (80013cc <int_Hardware+0x22c>)
 80012e6:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_PWM.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80012e8:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <int_Hardware+0x228>)
 80012ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ee:	805a      	strh	r2, [r3, #2]
	handler_TIMER_PWM.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <int_Hardware+0x228>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
	handler_TIMER_PWM.TIMx_Config.TIMX_period = 20;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <int_Hardware+0x228>)
 80012f8:	2214      	movs	r2, #20
 80012fa:	605a      	str	r2, [r3, #4]
	handler_TIMER_PWM.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <int_Hardware+0x228>)
 80012fe:	2200      	movs	r2, #0
 8001300:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_PWM);
 8001302:	4831      	ldr	r0, [pc, #196]	; (80013c8 <int_Hardware+0x228>)
 8001304:	f000 fd40 	bl	8001d88 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC13----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_Button.pGPIOx = GPIOC;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <int_Hardware+0x230>)
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <int_Hardware+0x234>)
 800130c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_Button.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <int_Hardware+0x230>)
 8001310:	220d      	movs	r2, #13
 8001312:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	handler_EXTI_Button.pGPIOHandler = &handler_GPIO_Button;
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <int_Hardware+0x238>)
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <int_Hardware+0x230>)
 8001318:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	handler_EXTI_Button.edgeType = EXTERNAL_INTERRUPP_FALLING_EDGE;
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <int_Hardware+0x238>)
 800131c:	2200      	movs	r2, #0
 800131e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(&handler_EXTI_Button);
 8001320:	482d      	ldr	r0, [pc, #180]	; (80013d8 <int_Hardware+0x238>)
 8001322:	f000 fe99 	bl	8002058 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM4_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM.ptrTIMx = TIM4;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <int_Hardware+0x23c>)
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <int_Hardware+0x22c>)
 800132a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <int_Hardware+0x23c>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	handler_PWM.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <int_Hardware+0x23c>)
 8001334:	220a      	movs	r2, #10
 8001336:	805a      	strh	r2, [r3, #2]
	handler_PWM.config.polarity = POLARITY_HIGH;    //POLARITY_x x-> HIGH, LOW
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <int_Hardware+0x23c>)
 800133a:	2200      	movs	r2, #0
 800133c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM);
 800133e:	4827      	ldr	r0, [pc, #156]	; (80013dc <int_Hardware+0x23c>)
 8001340:	f002 facc 	bl	80038dc <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM, CHANNEL_ENABLE);
 8001344:	2101      	movs	r1, #1
 8001346:	4825      	ldr	r0, [pc, #148]	; (80013dc <int_Hardware+0x23c>)
 8001348:	f002 fc28 	bl	8003b9c <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_Acelerometro.prtI2Cx = I2C1;
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <int_Hardware+0x240>)
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <int_Hardware+0x244>)
 8001350:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_Acelerometro.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <int_Hardware+0x240>)
 8001354:	2201      	movs	r2, #1
 8001356:	715a      	strb	r2, [r3, #5]
	handler_I2C_Acelerometro.slaveAddress = ACCEL_ADDRESSS;       //Direccion del Sclave
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <int_Hardware+0x240>)
 800135a:	2269      	movs	r2, #105	; 0x69
 800135c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_Acelerometro);
 800135e:	4820      	ldr	r0, [pc, #128]	; (80013e0 <int_Hardware+0x240>)
 8001360:	f002 f880 	bl	8003464 <i2c_Config>
	//---------------------Fin de Configuracion I2Cx----------------------

	//-------------------Inicio configuracion ADC-----------------------

	//---------------Channel_0----------------
	 handler_ADC_Channel0.conversion.channelSequence_0 =  ADC_CHANNEL_0;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <int_Hardware+0x248>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	 handler_ADC_Channel0.sampling.samplingPeriodChannel_0 = ADC_SAMPLING_PERIOD_84_CYCLES;      //ADC_SAMPLING_PERIOD_x_CYCLES  x-> 3, 15, 28, 56, 84, 112, 144, 480
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <int_Hardware+0x248>)
 800136c:	2204      	movs	r2, #4
 800136e:	825a      	strh	r2, [r3, #18]
	 handler_ADC_Channel0.resolution = ADC_RESOLUTION_12_BIT;                                    //ADC_RESOLUTION_x_BIT          x-> 8,6,10,12
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <int_Hardware+0x248>)
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 handler_ADC_Channel0.dataAlignment =  ADC_ALIGNMENT_RIGHT;                                  //ADC_ALIGNMENT_x               x-> RIGHT, LEFT
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <int_Hardware+0x248>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	 handler_ADC_Channel0.externalEvent = ADC_EXTERNAL_EVENT_DISABLE;                            //ADC_EXTERNAL_EVENT_x          x-> DISABLE, RISING, FALLING, BOTH
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <int_Hardware+0x248>)
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	 handler_ADC_Channel0.typeEXTEvent =  ADC_EVENT_TIMER_1_CC1;                                 //ADC_EVENT_TIMER_x_y           x-> 1, 2, 3, 4, 5 | y-> Depende
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <int_Hardware+0x248>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 adc_Config(&handler_ADC_Channel0);
 8001390:	4815      	ldr	r0, [pc, #84]	; (80013e8 <int_Hardware+0x248>)
 8001392:	f000 fad7 	bl	8001944 <adc_Config>

	//-------------------Fin configuracion ADC-----------------------

}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000020c 	.word	0x2000020c
 80013a0:	40020000 	.word	0x40020000
 80013a4:	2000023c 	.word	0x2000023c
 80013a8:	20000248 	.word	0x20000248
 80013ac:	200002a0 	.word	0x200002a0
 80013b0:	40020400 	.word	0x40020400
 80013b4:	20000308 	.word	0x20000308
 80013b8:	20000314 	.word	0x20000314
 80013bc:	20000254 	.word	0x20000254
 80013c0:	40004400 	.word	0x40004400
 80013c4:	20000218 	.word	0x20000218
 80013c8:	200002ac 	.word	0x200002ac
 80013cc:	40000800 	.word	0x40000800
 80013d0:	20000228 	.word	0x20000228
 80013d4:	40020800 	.word	0x40020800
 80013d8:	20000234 	.word	0x20000234
 80013dc:	200002bc 	.word	0x200002bc
 80013e0:	20000320 	.word	0x20000320
 80013e4:	40005400 	.word	0x40005400
 80013e8:	200002cc 	.word	0x200002cc

080013ec <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <BasicTimer2_Callback+0x14>)
 80013f2:	f002 f820 	bl	8003436 <GPIOxTooglePin>
	startSingleADC();
 80013f6:	f000 fbbf 	bl	8001b78 <startSingleADC>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000020c 	.word	0x2000020c

08001404 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	charRead = getRxData();
 8001408:	f003 f878 	bl	80044fc <getRxData>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <BasicUSART2_Callback+0x14>)
 8001412:	701a      	strb	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000

0800141c <adcComplete_Callback>:

//-------------------------ADC--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el ADC
void adcComplete_Callback(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	adcData = getADC();
 8001420:	f000 fbc0 	bl	8001ba4 <getADC>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <adcComplete_Callback+0x14>)
 800142a:	801a      	strh	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000306 	.word	0x20000306

08001434 <callback_extInt13>:

//-------------------------UserButton--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13
void callback_extInt13(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	writeMsg(&handler_USART_USB, sendMg);
 8001438:	490a      	ldr	r1, [pc, #40]	; (8001464 <callback_extInt13+0x30>)
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <callback_extInt13+0x34>)
 800143c:	f003 f83f 	bl	80044be <writeMsg>
	if(duttyporc<100)
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <callback_extInt13+0x38>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b63      	cmp	r3, #99	; 0x63
 8001446:	d806      	bhi.n	8001456 <callback_extInt13+0x22>
	{
		duttyporc++;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <callback_extInt13+0x38>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <callback_extInt13+0x38>)
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e000      	b.n	8001458 <callback_extInt13+0x24>
	}
	else
	{
		__NOP();
 8001456:	bf00      	nop
	}
	estado = 1;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <callback_extInt13+0x3c>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000004 	.word	0x20000004
 8001468:	20000254 	.word	0x20000254
 800146c:	20000017 	.word	0x20000017
 8001470:	200002c8 	.word	0x200002c8

08001474 <acelerometro_I2C>:
//----------------------------Fin de la definicion de las funciones ISR----------------------------------------

//----------------------------Inicio de la definicion de las funciones-----------------------------------------

void acelerometro_I2C(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
	uint8_t i2cBuffer = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]

	switch(charRead)
 800147e:	4b77      	ldr	r3, [pc, #476]	; (800165c <acelerometro_I2C+0x1e8>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3b70      	subs	r3, #112	; 0x70
 8001484:	2b0a      	cmp	r3, #10
 8001486:	f200 80e0 	bhi.w	800164a <acelerometro_I2C+0x1d6>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <acelerometro_I2C+0x1c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014f5 	.word	0x080014f5
 8001494:	0800164b 	.word	0x0800164b
 8001498:	0800152d 	.word	0x0800152d
 800149c:	0800164b 	.word	0x0800164b
 80014a0:	0800164b 	.word	0x0800164b
 80014a4:	0800164b 	.word	0x0800164b
 80014a8:	0800164b 	.word	0x0800164b
 80014ac:	080014bd 	.word	0x080014bd
 80014b0:	0800154f 	.word	0x0800154f
 80014b4:	080015a3 	.word	0x080015a3
 80014b8:	080015f7 	.word	0x080015f7
	{
	case 'w':
	{
		//Definimos un string
		sprintf(bufferMsg,"WHO AM I (r)?\n");
 80014bc:	4968      	ldr	r1, [pc, #416]	; (8001660 <acelerometro_I2C+0x1ec>)
 80014be:	4869      	ldr	r0, [pc, #420]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014c0:	f004 f898 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80014c4:	4967      	ldr	r1, [pc, #412]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014c6:	4868      	ldr	r0, [pc, #416]	; (8001668 <acelerometro_I2C+0x1f4>)
 80014c8:	f002 fff9 	bl	80044be <writeMsg>
		//Leemos el registro deseado del Sclave
		i2cBuffer = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, WHO_AM_I);
 80014cc:	2175      	movs	r1, #117	; 0x75
 80014ce:	4867      	ldr	r0, [pc, #412]	; (800166c <acelerometro_I2C+0x1f8>)
 80014d0:	f002 f97c 	bl	80037cc <i2c_ReadSingleRegister>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
		//Definimos un string
		sprintf(bufferMsg,"dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	461a      	mov	r2, r3
 80014dc:	4964      	ldr	r1, [pc, #400]	; (8001670 <acelerometro_I2C+0x1fc>)
 80014de:	4861      	ldr	r0, [pc, #388]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014e0:	f004 f888 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80014e4:	495f      	ldr	r1, [pc, #380]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014e6:	4860      	ldr	r0, [pc, #384]	; (8001668 <acelerometro_I2C+0x1f4>)
 80014e8:	f002 ffe9 	bl	80044be <writeMsg>
		charRead = '\0';
 80014ec:	4b5b      	ldr	r3, [pc, #364]	; (800165c <acelerometro_I2C+0x1e8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		break;
 80014f2:	e0ae      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'p':
	{
		//Definimos un string
		sprintf(bufferMsg,"PWR_MGMT_l state (r)\n");
 80014f4:	495f      	ldr	r1, [pc, #380]	; (8001674 <acelerometro_I2C+0x200>)
 80014f6:	485b      	ldr	r0, [pc, #364]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014f8:	f004 f87c 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80014fc:	4959      	ldr	r1, [pc, #356]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014fe:	485a      	ldr	r0, [pc, #360]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001500:	f002 ffdd 	bl	80044be <writeMsg>
		//Leemos el registro deseado del Sclave
		i2cBuffer = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, PWR_MGMT_l);
 8001504:	216b      	movs	r1, #107	; 0x6b
 8001506:	4859      	ldr	r0, [pc, #356]	; (800166c <acelerometro_I2C+0x1f8>)
 8001508:	f002 f960 	bl	80037cc <i2c_ReadSingleRegister>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
		//Definimos un string
		sprintf(bufferMsg,"dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	461a      	mov	r2, r3
 8001514:	4956      	ldr	r1, [pc, #344]	; (8001670 <acelerometro_I2C+0x1fc>)
 8001516:	4853      	ldr	r0, [pc, #332]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001518:	f004 f86c 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 800151c:	4951      	ldr	r1, [pc, #324]	; (8001664 <acelerometro_I2C+0x1f0>)
 800151e:	4852      	ldr	r0, [pc, #328]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001520:	f002 ffcd 	bl	80044be <writeMsg>
		charRead = '\0';
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <acelerometro_I2C+0x1e8>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		break;
 800152a:	e092      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'r':
	{
		//Definimos un string
		sprintf(bufferMsg,"PWR_MGMT_l reset (r)\n");
 800152c:	4952      	ldr	r1, [pc, #328]	; (8001678 <acelerometro_I2C+0x204>)
 800152e:	484d      	ldr	r0, [pc, #308]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001530:	f004 f860 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 8001534:	494b      	ldr	r1, [pc, #300]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001536:	484c      	ldr	r0, [pc, #304]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001538:	f002 ffc1 	bl	80044be <writeMsg>
		//Escribimos en el registro deseado del Sclave
		i2c_WriteSingleRegister(&handler_I2C_Acelerometro, PWR_MGMT_l, 0x00);
 800153c:	2200      	movs	r2, #0
 800153e:	216b      	movs	r1, #107	; 0x6b
 8001540:	484a      	ldr	r0, [pc, #296]	; (800166c <acelerometro_I2C+0x1f8>)
 8001542:	f002 f974 	bl	800382e <i2c_WriteSingleRegister>

		charRead = '\0';
 8001546:	4b45      	ldr	r3, [pc, #276]	; (800165c <acelerometro_I2C+0x1e8>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
		break;
 800154c:	e081      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'x':
	{
		//Definimos un string
		sprintf(bufferMsg,"Axis X data (r)\n");
 800154e:	494b      	ldr	r1, [pc, #300]	; (800167c <acelerometro_I2C+0x208>)
 8001550:	4844      	ldr	r0, [pc, #272]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001552:	f004 f84f 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 8001556:	4943      	ldr	r1, [pc, #268]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001558:	4843      	ldr	r0, [pc, #268]	; (8001668 <acelerometro_I2C+0x1f4>)
 800155a:	f002 ffb0 	bl	80044be <writeMsg>
		//Leemos el registro correspondiente a la poscicion en X del acelerometro
		uint8_t AccelX_low = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_XOUT_L);
 800155e:	213c      	movs	r1, #60	; 0x3c
 8001560:	4842      	ldr	r0, [pc, #264]	; (800166c <acelerometro_I2C+0x1f8>)
 8001562:	f002 f933 	bl	80037cc <i2c_ReadSingleRegister>
 8001566:	4603      	mov	r3, r0
 8001568:	717b      	strb	r3, [r7, #5]
		uint8_t AccelX_high = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_XOUT_H);
 800156a:	213b      	movs	r1, #59	; 0x3b
 800156c:	483f      	ldr	r0, [pc, #252]	; (800166c <acelerometro_I2C+0x1f8>)
 800156e:	f002 f92d 	bl	80037cc <i2c_ReadSingleRegister>
 8001572:	4603      	mov	r3, r0
 8001574:	713b      	strb	r3, [r7, #4]
		uint16_t AccelX = AccelX_high<<8 | AccelX_low;
 8001576:	793b      	ldrb	r3, [r7, #4]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	797b      	ldrb	r3, [r7, #5]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	807b      	strh	r3, [r7, #2]
		//Definimos un string
		sprintf(bufferMsg,"AccelX = %d \n", (int) AccelX );
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	493d      	ldr	r1, [pc, #244]	; (8001680 <acelerometro_I2C+0x20c>)
 800158c:	4835      	ldr	r0, [pc, #212]	; (8001664 <acelerometro_I2C+0x1f0>)
 800158e:	f004 f831 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 8001592:	4934      	ldr	r1, [pc, #208]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001594:	4834      	ldr	r0, [pc, #208]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001596:	f002 ff92 	bl	80044be <writeMsg>

		charRead = '\0';
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <acelerometro_I2C+0x1e8>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
		break;
 80015a0:	e057      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'y':
	{
		//Definimos un string
		sprintf(bufferMsg,"Axis Y data (r)\n");
 80015a2:	4938      	ldr	r1, [pc, #224]	; (8001684 <acelerometro_I2C+0x210>)
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015a6:	f004 f825 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80015aa:	492e      	ldr	r1, [pc, #184]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015ac:	482e      	ldr	r0, [pc, #184]	; (8001668 <acelerometro_I2C+0x1f4>)
 80015ae:	f002 ff86 	bl	80044be <writeMsg>
		//Leemos el registro correspondiente a la poscicion en X del acelerometro
		uint8_t AccelY_low = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_YOUT_L);
 80015b2:	213e      	movs	r1, #62	; 0x3e
 80015b4:	482d      	ldr	r0, [pc, #180]	; (800166c <acelerometro_I2C+0x1f8>)
 80015b6:	f002 f909 	bl	80037cc <i2c_ReadSingleRegister>
 80015ba:	4603      	mov	r3, r0
 80015bc:	727b      	strb	r3, [r7, #9]
		uint8_t AccelY_high = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_YOUT_H);
 80015be:	213d      	movs	r1, #61	; 0x3d
 80015c0:	482a      	ldr	r0, [pc, #168]	; (800166c <acelerometro_I2C+0x1f8>)
 80015c2:	f002 f903 	bl	80037cc <i2c_ReadSingleRegister>
 80015c6:	4603      	mov	r3, r0
 80015c8:	723b      	strb	r3, [r7, #8]
		uint16_t AccelY = AccelY_high<<8 | AccelY_low;
 80015ca:	7a3b      	ldrb	r3, [r7, #8]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7a7b      	ldrb	r3, [r7, #9]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	80fb      	strh	r3, [r7, #6]
		//Definimos un string
		sprintf(bufferMsg,"AccelY = %d \n", (int) AccelY);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	461a      	mov	r2, r3
 80015de:	492a      	ldr	r1, [pc, #168]	; (8001688 <acelerometro_I2C+0x214>)
 80015e0:	4820      	ldr	r0, [pc, #128]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015e2:	f004 f807 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80015e6:	491f      	ldr	r1, [pc, #124]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015e8:	481f      	ldr	r0, [pc, #124]	; (8001668 <acelerometro_I2C+0x1f4>)
 80015ea:	f002 ff68 	bl	80044be <writeMsg>

		charRead = '\0';
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <acelerometro_I2C+0x1e8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
		break;
 80015f4:	e02d      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'z':
	{
		//Definimos un string
		sprintf(bufferMsg,"Axis Z data (r)\n");
 80015f6:	4925      	ldr	r1, [pc, #148]	; (800168c <acelerometro_I2C+0x218>)
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015fa:	f003 fffb 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80015fe:	4919      	ldr	r1, [pc, #100]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001600:	4819      	ldr	r0, [pc, #100]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001602:	f002 ff5c 	bl	80044be <writeMsg>
		//Leemos el registro correspondiente a la poscicion en X del acelerometro
		uint8_t AccelZ_low = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_ZOUT_L);
 8001606:	2140      	movs	r1, #64	; 0x40
 8001608:	4818      	ldr	r0, [pc, #96]	; (800166c <acelerometro_I2C+0x1f8>)
 800160a:	f002 f8df 	bl	80037cc <i2c_ReadSingleRegister>
 800160e:	4603      	mov	r3, r0
 8001610:	73bb      	strb	r3, [r7, #14]
		uint8_t AccelZ_high = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_ZOUT_H);
 8001612:	213f      	movs	r1, #63	; 0x3f
 8001614:	4815      	ldr	r0, [pc, #84]	; (800166c <acelerometro_I2C+0x1f8>)
 8001616:	f002 f8d9 	bl	80037cc <i2c_ReadSingleRegister>
 800161a:	4603      	mov	r3, r0
 800161c:	737b      	strb	r3, [r7, #13]
		uint16_t AccelZ = AccelZ_high<<8 | AccelZ_low;
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	817b      	strh	r3, [r7, #10]
		//Definimos un string
		sprintf(bufferMsg,"AccelZ = %d \n", (int) AccelZ );
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	461a      	mov	r2, r3
 8001632:	4917      	ldr	r1, [pc, #92]	; (8001690 <acelerometro_I2C+0x21c>)
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001636:	f003 ffdd 	bl	80055f4 <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 800163a:	490a      	ldr	r1, [pc, #40]	; (8001664 <acelerometro_I2C+0x1f0>)
 800163c:	480a      	ldr	r0, [pc, #40]	; (8001668 <acelerometro_I2C+0x1f4>)
 800163e:	f002 ff3e 	bl	80044be <writeMsg>

		charRead = '\0';
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <acelerometro_I2C+0x1e8>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		break;
 8001648:	e003      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	default:
	{
		charRead = '\0';
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <acelerometro_I2C+0x1e8>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
		break;
 8001650:	bf00      	nop
	}
	}
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000
 8001660:	0800924c 	.word	0x0800924c
 8001664:	20000260 	.word	0x20000260
 8001668:	20000254 	.word	0x20000254
 800166c:	20000320 	.word	0x20000320
 8001670:	0800925c 	.word	0x0800925c
 8001674:	08009270 	.word	0x08009270
 8001678:	08009288 	.word	0x08009288
 800167c:	080092a0 	.word	0x080092a0
 8001680:	080092b4 	.word	0x080092b4
 8001684:	080092c4 	.word	0x080092c4
 8001688:	080092d8 	.word	0x080092d8
 800168c:	080092e8 	.word	0x080092e8
 8001690:	080092fc 	.word	0x080092fc

08001694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001698:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	; (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	; (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016c2:	f003 f8eb 	bl	800489c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7ff fcd7 	bl	8001078 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80016d8:	080097c4 	.word	0x080097c4
  ldr r2, =_sbss
 80016dc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80016e0:	20000bb0 	.word	0x20000bb0

080016e4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <BusFault_Handler>

080016e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
	return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_kill>:

int _kill(int pid, int sig)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001700:	f003 f8c6 	bl	8004890 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	2216      	movs	r2, #22
 8001708:	601a      	str	r2, [r3, #0]
	return -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_exit>:

void _exit (int status)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800171e:	f04f 31ff 	mov.w	r1, #4294967295
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffe7 	bl	80016f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001728:	e7fe      	b.n	8001728 <_exit+0x12>

0800172a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e00a      	b.n	8001752 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800173c:	f3af 8000 	nop.w
 8001740:	4601      	mov	r1, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	60ba      	str	r2, [r7, #8]
 8001748:	b2ca      	uxtb	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	dbf0      	blt.n	800173c <_read+0x12>
	}

return len;
 800175a:	687b      	ldr	r3, [r7, #4]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e009      	b.n	800178a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	60ba      	str	r2, [r7, #8]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	dbf1      	blt.n	8001776 <_write+0x12>
	}
	return len;
 8001792:	687b      	ldr	r3, [r7, #4]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_close>:

int _close(int file)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c4:	605a      	str	r2, [r3, #4]
	return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_isatty>:

int _isatty(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f003 f82c 	bl	8004890 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20020000 	.word	0x20020000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000328 	.word	0x20000328
 800186c:	20000bb0 	.word	0x20000bb0

08001870 <arm_abs_f32>:
#else
void arm_abs_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8001880:	e00e      	b.n	80018a0 <arm_abs_f32+0x30>
  {
    /* C = |A| */

    /* Calculate absolute and store result in destination buffer. */
    *pDst++ = fabsf(*pSrc++);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1d1a      	adds	r2, r3, #4
 8001886:	60fa      	str	r2, [r7, #12]
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	eef0 7ae7 	vabs.f32	s15, s15
 8001896:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3b01      	subs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ed      	bne.n	8001882 <arm_abs_f32+0x12>
  }

}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <adc_Config>:
uint8_t channelSequence = 0;          //Definimos una variable para guardar el canal
uint16_t samplingPeriodChannel = 0;   //Definimos una variable para almacenar el tiempo de muestre
uint16_t	adcRawData = 0;           //Creamos una variable auxiliar

void adc_Config(ADC_Config_t *adcConfig)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Configuracion del Pin analogo------------------------------------------

	configAnalogPin(adcConfig->conversion.channelSequence_0);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f94b 	bl	8001bec <configAnalogPin>

	//---------------------------------2) Activamos la señal de reloj------------------------------------------
	//Registro: APB2ENR

	RCC->APB2ENR &= ~RCC_APB2ENR_ADC1EN;
 8001956:	4b85      	ldr	r3, [pc, #532]	; (8001b6c <adc_Config+0x228>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a84      	ldr	r2, [pc, #528]	; (8001b6c <adc_Config+0x228>)
 800195c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <adc_Config+0x228>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a81      	ldr	r2, [pc, #516]	; (8001b6c <adc_Config+0x228>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6453      	str	r3, [r2, #68]	; 0x44

	//---------------------------------3) Limpiamos los registros------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ADC1->CR1 = 0;
 800196e:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <adc_Config+0x22c>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8001974:	4b7e      	ldr	r3, [pc, #504]	; (8001b70 <adc_Config+0x22c>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]

	//----------------------------------4) Resolucion del ADC-----------------------------------------
	//Registro: CR1

	//Verificamos la resolucion escogida
	switch(adcConfig->resolution)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001980:	2b03      	cmp	r3, #3
 8001982:	d83d      	bhi.n	8001a00 <adc_Config+0xbc>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <adc_Config+0x48>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019b3 	.word	0x080019b3
 8001994:	080019cd 	.word	0x080019cd
 8001998:	080019e7 	.word	0x080019e7
	{
		case ADC_RESOLUTION_12_BIT:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 800199c:	4b74      	ldr	r3, [pc, #464]	; (8001b70 <adc_Config+0x22c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a73      	ldr	r2, [pc, #460]	; (8001b70 <adc_Config+0x22c>)
 80019a2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019a6:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b00<<ADC_CR1_RES_Pos;
 80019a8:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <adc_Config+0x22c>)
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <adc_Config+0x22c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	6053      	str	r3, [r2, #4]

			break;
 80019b0:	e031      	b.n	8001a16 <adc_Config+0xd2>
		}

		case ADC_RESOLUTION_10_BIT:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <adc_Config+0x22c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <adc_Config+0x22c>)
 80019b8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019bc:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b01<<ADC_CR1_RES_Pos;
 80019be:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <adc_Config+0x22c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a6b      	ldr	r2, [pc, #428]	; (8001b70 <adc_Config+0x22c>)
 80019c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c8:	6053      	str	r3, [r2, #4]
			break;
 80019ca:	e024      	b.n	8001a16 <adc_Config+0xd2>
		}

		case ADC_RESOLUTION_8_BIT:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <adc_Config+0x22c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <adc_Config+0x22c>)
 80019d2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019d6:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b10<<ADC_CR1_RES_Pos;
 80019d8:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <adc_Config+0x22c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a64      	ldr	r2, [pc, #400]	; (8001b70 <adc_Config+0x22c>)
 80019de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e2:	6053      	str	r3, [r2, #4]

			break;
 80019e4:	e017      	b.n	8001a16 <adc_Config+0xd2>
		}

		case ADC_RESOLUTION_6_BIT:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <adc_Config+0x22c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a61      	ldr	r2, [pc, #388]	; (8001b70 <adc_Config+0x22c>)
 80019ec:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019f0:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b11<<ADC_CR1_RES_Pos;
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <adc_Config+0x22c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a5e      	ldr	r2, [pc, #376]	; (8001b70 <adc_Config+0x22c>)
 80019f8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80019fc:	6053      	str	r3, [r2, #4]
			break;
 80019fe:	e00a      	b.n	8001a16 <adc_Config+0xd2>
		}

		default:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <adc_Config+0x22c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a5a      	ldr	r2, [pc, #360]	; (8001b70 <adc_Config+0x22c>)
 8001a06:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a0a:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b00<<ADC_CR1_RES_Pos;
 8001a0c:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <adc_Config+0x22c>)
 8001a0e:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <adc_Config+0x22c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	6053      	str	r3, [r2, #4]
			break;
 8001a14:	bf00      	nop
	}

	//---------------------------------5) Desactivamos el modo Scan -----------------------------------------
	//Registro: CR1

	ADC1->CR1 &= ~ADC_CR1_SCAN;
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <adc_Config+0x22c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a55      	ldr	r2, [pc, #340]	; (8001b70 <adc_Config+0x22c>)
 8001a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a20:	6053      	str	r3, [r2, #4]

	//---------------------------------6) Alineacion de los datos----------------------------------------
	//Registro: CR2

	//Verificamos la alineacion escogida
	if(adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d106      	bne.n	8001a3a <adc_Config+0xf6>
	{
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <adc_Config+0x22c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <adc_Config+0x22c>)
 8001a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a36:	6093      	str	r3, [r2, #8]
 8001a38:	e00b      	b.n	8001a52 <adc_Config+0x10e>

	}
	else
	{
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <adc_Config+0x22c>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <adc_Config+0x22c>)
 8001a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a44:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= ADC_CR2_ALIGN;
 8001a46:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <adc_Config+0x22c>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <adc_Config+0x22c>)
 8001a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a50:	6093      	str	r3, [r2, #8]
	}

	//---------------------------------7) Desactivamos el modo continuo---------------------------------------
	//Registro: CR2

	ADC1->CR2 &= ~ADC_CR2_CONT;
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <adc_Config+0x22c>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <adc_Config+0x22c>)
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	6093      	str	r3, [r2, #8]

	//---------------------------------8) Definimos el Sampling---------------------------------------
	//Registro: SMPR2
	//Registro: SMPR1

	if(adcConfig->conversion.channelSequence_0<=ADC_CHANNEL_9)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	d810      	bhi.n	8001a88 <adc_Config+0x144>
	{
		ADC1->SMPR2 |= (adcConfig->sampling.samplingPeriodChannel_0<<(3*(adcConfig->conversion.channelSequence_0)));
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <adc_Config+0x22c>)
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	8a5b      	ldrh	r3, [r3, #18]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	460b      	mov	r3, r1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	440b      	add	r3, r1
 8001a7c:	fa00 f303 	lsl.w	r3, r0, r3
 8001a80:	493b      	ldr	r1, [pc, #236]	; (8001b70 <adc_Config+0x22c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	610b      	str	r3, [r1, #16]
 8001a86:	e010      	b.n	8001aaa <adc_Config+0x166>
	}
	else
	{
		ADC1->SMPR1 |= (adcConfig->sampling.samplingPeriodChannel_0<<(3*(adcConfig->conversion.channelSequence_0-10)));
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <adc_Config+0x22c>)
 8001a8a:	68d9      	ldr	r1, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	8a5b      	ldrh	r3, [r3, #18]
 8001a90:	4618      	mov	r0, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f1a3 020a 	sub.w	r2, r3, #10
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	fa00 f303 	lsl.w	r3, r0, r3
 8001aa4:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <adc_Config+0x22c>)
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	60d3      	str	r3, [r2, #12]

	//---------------------------------9) Configuracion elementos en la secuencias---------------------------------------
	//Registro: SQR1
	//Registro: SQR3

	ADC1->SQR1 = 0; //Definimos un solo elemento en la secuancia, impricitamente se especifica un solo elemento L
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <adc_Config+0x22c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 |= (adcConfig->conversion.channelSequence_0 << 0); //Definimos que el canal seleccionado sea la primera conversion
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <adc_Config+0x22c>)
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <adc_Config+0x22c>)
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6353      	str	r3, [r2, #52]	; 0x34

	//---------------------------------10) Configuramos el preescaler del ADC---------------------------------------
	//Registro: CCR

	uint8_t clocKAPB2 = getConfigPLL();
 8001ac0:	f001 fed8 	bl	8003874 <getConfigPLL>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]

	//Verificamos que la señal de reloj entrante al ADC no supere los 36MHz
	if(clocKAPB2/2<=36)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b49      	cmp	r3, #73	; 0x49
 8001acc:	d806      	bhi.n	8001adc <adc_Config+0x198>
	{
		ADC->CCR &= ~(0b11<<ADC_CCR_ADCPRE_Pos);   //Preescaler	de 2
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <adc_Config+0x230>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <adc_Config+0x230>)
 8001ad4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ad8:	6053      	str	r3, [r2, #4]
 8001ada:	e00b      	b.n	8001af4 <adc_Config+0x1b0>
	}
	else
	{
		ADC->CCR &= ~(0b11<<ADC_CCR_ADCPRE_Pos);
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <adc_Config+0x230>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <adc_Config+0x230>)
 8001ae2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ae6:	6053      	str	r3, [r2, #4]
		ADC->CCR |= (0b01<<ADC_CCR_ADCPRE_Pos);   //Preescaler	de 4
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <adc_Config+0x230>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <adc_Config+0x230>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6053      	str	r3, [r2, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Activamos la interupcion debido a finalizar una conversion
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <adc_Config+0x22c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <adc_Config+0x22c>)
 8001afe:	f043 0320 	orr.w	r3, r3, #32
 8001b02:	6053      	str	r3, [r2, #4]

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(ADC_IRQn);
 8001b04:	2012      	movs	r0, #18
 8001b06:	f7ff fed5 	bl	80018b4 <__NVIC_EnableIRQ>

	//Configuramos la prioridad para la interrupción ADC
	NVIC_SetPriority(ADC_IRQn, 4);
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	2012      	movs	r0, #18
 8001b0e:	f7ff feef 	bl	80018f0 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b12:	b662      	cpsie	i
}
 8001b14:	bf00      	nop

	//---------------------------------14) Configuracion de eventos externos---------------------------------------
	//Registro: CR2

	//Seleccionamos el tipo de evento externo
	ADC1->CR2 &= ~(0b1111<<ADC_CR2_EXTSEL_Pos);
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <adc_Config+0x22c>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <adc_Config+0x22c>)
 8001b1c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001b20:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (adcConfig->typeEXTEvent<<ADC_CR2_EXTSEL_Pos);
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <adc_Config+0x22c>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001b2c:	0612      	lsls	r2, r2, #24
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <adc_Config+0x22c>)
 8001b32:	430b      	orrs	r3, r1
 8001b34:	6093      	str	r3, [r2, #8]

	//definimos como sera el evento externo
	ADC1->CR2 &= ~(0b11<<ADC_CR2_EXTEN_Pos);
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <adc_Config+0x22c>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <adc_Config+0x22c>)
 8001b3c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001b40:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (adcConfig->externalEvent<<ADC_CR2_EXTEN_Pos);
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <adc_Config+0x22c>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8001b4c:	0712      	lsls	r2, r2, #28
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <adc_Config+0x22c>)
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6093      	str	r3, [r2, #8]

	//---------------------------------13) Activamos el modulo ADC---------------------------------------
	//Registro: CR2

	ADC1->CR2 |= ADC_CR2_ADON;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <adc_Config+0x22c>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <adc_Config+0x22c>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6093      	str	r3, [r2, #8]
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40012000 	.word	0x40012000
 8001b74:	40012300 	.word	0x40012300

08001b78 <startSingleADC>:
}


//Funcion para realizar solo una conversion ADC, El dato es leido en el Callback empleando getADC()
void startSingleADC(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
	//Limpiamos el bit del overrun
	ADC1->CR1 &= ~ADC_CR1_OVRIE;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <startSingleADC+0x28>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <startSingleADC+0x28>)
 8001b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b86:	6053      	str	r3, [r2, #4]
	// Iniciamos un ciclo de conversión ADC
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <startSingleADC+0x28>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <startSingleADC+0x28>)
 8001b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b92:	6093      	str	r3, [r2, #8]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40012000 	.word	0x40012000

08001ba4 <getADC>:


//Funcion que retorna el ultimo dato arquirido por el ADC
uint16_t getADC(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	//Retorna el ultimo valor del ADC
	return adcRawData;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <getADC+0x14>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000338 	.word	0x20000338

08001bbc <ADC_IRQHandler>:
	__NOP();
}

//ISR de la interrupción por conversión ADC
void ADC_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	if(ADC1->SR & ADC_SR_EOC)
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <ADC_IRQHandler+0x28>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <ADC_IRQHandler+0x20>
	{
		// Evaluamos que se dio la interrupción por conversión ADC
		adcRawData = ADC1->DR;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <ADC_IRQHandler+0x28>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <ADC_IRQHandler+0x2c>)
 8001bd4:	801a      	strh	r2, [r3, #0]
		//llamamos la funcion de la interupcion
		adcComplete_Callback();
 8001bd6:	f7ff fc21 	bl	800141c <adcComplete_Callback>
	}
	else
	{
		__NOP();
	}
}
 8001bda:	e000      	b.n	8001bde <ADC_IRQHandler+0x22>
		__NOP();
 8001bdc:	bf00      	nop
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40012000 	.word	0x40012000
 8001be8:	20000338 	.word	0x20000338

08001bec <configAnalogPin>:


//--------------------------------Funciones especificas para el uso del ADC -------------------

//Función que configura que pin deseamos que funcione como canal ADC
void configAnalogPin(uint8_t adcChannel) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]

	// Seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	f200 8093 	bhi.w	8001d24 <configAnalogPin+0x138>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <configAnalogPin+0x18>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c45 	.word	0x08001c45
 8001c08:	08001c53 	.word	0x08001c53
 8001c0c:	08001c61 	.word	0x08001c61
 8001c10:	08001c6f 	.word	0x08001c6f
 8001c14:	08001c7d 	.word	0x08001c7d
 8001c18:	08001c8b 	.word	0x08001c8b
 8001c1c:	08001c99 	.word	0x08001c99
 8001c20:	08001ca7 	.word	0x08001ca7
 8001c24:	08001cb5 	.word	0x08001cb5
 8001c28:	08001cc3 	.word	0x08001cc3
 8001c2c:	08001cd1 	.word	0x08001cd1
 8001c30:	08001cdf 	.word	0x08001cdf
 8001c34:	08001ced 	.word	0x08001ced
 8001c38:	08001cfb 	.word	0x08001cfb
 8001c3c:	08001d09 	.word	0x08001d09
 8001c40:	08001d17 	.word	0x08001d17

	case ADC_CHANNEL_0: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <configAnalogPin+0x150>)
 8001c46:	4a3e      	ldr	r2, [pc, #248]	; (8001d40 <configAnalogPin+0x154>)
 8001c48:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <configAnalogPin+0x150>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]

		break;
 8001c50:	e069      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_1: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <configAnalogPin+0x150>)
 8001c54:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <configAnalogPin+0x154>)
 8001c56:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <configAnalogPin+0x150>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]

		break;
 8001c5e:	e062      	b.n	8001d26 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <configAnalogPin+0x150>)
 8001c62:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <configAnalogPin+0x154>)
 8001c64:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <configAnalogPin+0x150>)
 8001c68:	2202      	movs	r2, #2
 8001c6a:	701a      	strb	r2, [r3, #0]
		break;
 8001c6c:	e05b      	b.n	8001d26 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <configAnalogPin+0x150>)
 8001c70:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <configAnalogPin+0x154>)
 8001c72:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <configAnalogPin+0x150>)
 8001c76:	2203      	movs	r2, #3
 8001c78:	701a      	strb	r2, [r3, #0]
		break;
 8001c7a:	e054      	b.n	8001d26 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <configAnalogPin+0x150>)
 8001c7e:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <configAnalogPin+0x154>)
 8001c80:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <configAnalogPin+0x150>)
 8001c84:	2204      	movs	r2, #4
 8001c86:	701a      	strb	r2, [r3, #0]
		break;
 8001c88:	e04d      	b.n	8001d26 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <configAnalogPin+0x150>)
 8001c8c:	4a2c      	ldr	r2, [pc, #176]	; (8001d40 <configAnalogPin+0x154>)
 8001c8e:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <configAnalogPin+0x150>)
 8001c92:	2205      	movs	r2, #5
 8001c94:	701a      	strb	r2, [r3, #0]
		break;
 8001c96:	e046      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <configAnalogPin+0x150>)
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <configAnalogPin+0x154>)
 8001c9c:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <configAnalogPin+0x150>)
 8001ca0:	2206      	movs	r2, #6
 8001ca2:	701a      	strb	r2, [r3, #0]
		break;
 8001ca4:	e03f      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <configAnalogPin+0x150>)
 8001ca8:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <configAnalogPin+0x154>)
 8001caa:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <configAnalogPin+0x150>)
 8001cae:	2207      	movs	r2, #7
 8001cb0:	701a      	strb	r2, [r3, #0]
		break;
 8001cb2:	e038      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {

		handlerAdcPin.pGPIOx 						= GPIOB;
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <configAnalogPin+0x150>)
 8001cb6:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <configAnalogPin+0x158>)
 8001cb8:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <configAnalogPin+0x150>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
		break;
 8001cc0:	e031      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {

		handlerAdcPin.pGPIOx 						= GPIOB;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <configAnalogPin+0x150>)
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <configAnalogPin+0x158>)
 8001cc6:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <configAnalogPin+0x150>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
		break;
 8001cce:	e02a      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {

		handlerAdcPin.pGPIOx 						= GPIOC;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <configAnalogPin+0x150>)
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <configAnalogPin+0x15c>)
 8001cd4:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <configAnalogPin+0x150>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
		break;
 8001cdc:	e023      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		handlerAdcPin.pGPIOx 						= GPIOC;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <configAnalogPin+0x150>)
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <configAnalogPin+0x15c>)
 8001ce2:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <configAnalogPin+0x150>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
		break;
 8001cea:	e01c      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <configAnalogPin+0x150>)
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <configAnalogPin+0x154>)
 8001cf0:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <configAnalogPin+0x150>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	701a      	strb	r2, [r3, #0]
		break;
 8001cf8:	e015      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {

		handlerAdcPin.pGPIOx 						= GPIOC;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <configAnalogPin+0x150>)
 8001cfc:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <configAnalogPin+0x15c>)
 8001cfe:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <configAnalogPin+0x150>)
 8001d02:	2203      	movs	r2, #3
 8001d04:	701a      	strb	r2, [r3, #0]
		break;
 8001d06:	e00e      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {

		handlerAdcPin.pGPIOx 						= GPIOC;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <configAnalogPin+0x150>)
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <configAnalogPin+0x15c>)
 8001d0c:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <configAnalogPin+0x150>)
 8001d10:	2204      	movs	r2, #4
 8001d12:	701a      	strb	r2, [r3, #0]
		break;
 8001d14:	e007      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {

		handlerAdcPin.pGPIOx 						= GPIOC;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <configAnalogPin+0x150>)
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <configAnalogPin+0x15c>)
 8001d1a:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <configAnalogPin+0x150>)
 8001d1e:	2205      	movs	r2, #5
 8001d20:	701a      	strb	r2, [r3, #0]
		break;
 8001d22:	e000      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	default: {
		break;
 8001d24:	bf00      	nop
	}
	}

	//Definimos el modo analogo para el pin definido
	handlerAdcPin.GPIO_PinConfig.GPIO_PinModer = GPIO_MODE_ANALOG;
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <configAnalogPin+0x150>)
 8001d28:	2203      	movs	r2, #3
 8001d2a:	705a      	strb	r2, [r3, #1]
	GPIO_Config(&handlerAdcPin);
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <configAnalogPin+0x150>)
 8001d2e:	f001 fa2d 	bl	800318c <GPIO_Config>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000032c 	.word	0x2000032c
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800

08001d4c <__NVIC_EnableIRQ>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d98:	d10a      	bne.n	8001db0 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001d9a:	4b5c      	ldr	r3, [pc, #368]	; (8001f0c <BasicTimer_Config+0x184>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a5b      	ldr	r2, [pc, #364]	; (8001f0c <BasicTimer_Config+0x184>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4a59      	ldr	r2, [pc, #356]	; (8001f10 <BasicTimer_Config+0x188>)
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e02e      	b.n	8001e0e <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a57      	ldr	r2, [pc, #348]	; (8001f14 <BasicTimer_Config+0x18c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10a      	bne.n	8001dd0 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <BasicTimer_Config+0x184>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a53      	ldr	r2, [pc, #332]	; (8001f0c <BasicTimer_Config+0x184>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a53      	ldr	r2, [pc, #332]	; (8001f18 <BasicTimer_Config+0x190>)
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01e      	b.n	8001e0e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4a51      	ldr	r2, [pc, #324]	; (8001f1c <BasicTimer_Config+0x194>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10a      	bne.n	8001df0 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001dda:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <BasicTimer_Config+0x184>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <BasicTimer_Config+0x184>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <BasicTimer_Config+0x198>)
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00e      	b.n	8001e0e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a4b      	ldr	r2, [pc, #300]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d109      	bne.n	8001e0e <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001dfa:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <BasicTimer_Config+0x184>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a43      	ldr	r2, [pc, #268]	; (8001f0c <BasicTimer_Config+0x184>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a47      	ldr	r2, [pc, #284]	; (8001f28 <BasicTimer_Config+0x1a0>)
 8001e0c:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001e0e:	f001 fd4d 	bl	80038ac <getClockAPB1>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73fb      	strb	r3, [r7, #15]

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	8852      	ldrh	r2, [r2, #2]
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d112      	bne.n	8001e56 <BasicTimer_Config+0xce>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f022 0210 	bic.w	r2, r2, #16
 8001e3e:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	3201      	adds	r2, #1
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24
 8001e54:	e018      	b.n	8001e88 <BasicTimer_Config+0x100>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f022 0210 	bic.w	r2, r2, #16
 8001e64:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f042 0210 	orr.w	r2, r2, #16
 8001e74:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6852      	ldr	r2, [r2, #4]
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e88:	b672      	cpsid	i
}
 8001e8a:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d103      	bne.n	8001e9e <BasicTimer_Config+0x116>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001e96:	201c      	movs	r0, #28
 8001e98:	f7ff ff58 	bl	8001d4c <__NVIC_EnableIRQ>
 8001e9c:	e019      	b.n	8001ed2 <BasicTimer_Config+0x14a>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <BasicTimer_Config+0x18c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <BasicTimer_Config+0x128>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001ea8:	201d      	movs	r0, #29
 8001eaa:	f7ff ff4f 	bl	8001d4c <__NVIC_EnableIRQ>
 8001eae:	e010      	b.n	8001ed2 <BasicTimer_Config+0x14a>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <BasicTimer_Config+0x194>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d103      	bne.n	8001ec2 <BasicTimer_Config+0x13a>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001eba:	201e      	movs	r0, #30
 8001ebc:	f7ff ff46 	bl	8001d4c <__NVIC_EnableIRQ>
 8001ec0:	e007      	b.n	8001ed2 <BasicTimer_Config+0x14a>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <BasicTimer_Config+0x14a>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001ecc:	2032      	movs	r0, #50	; 0x32
 8001ece:	f7ff ff3d 	bl	8001d4c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ed2:	b662      	cpsie	i
}
 8001ed4:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7a1b      	ldrb	r3, [r3, #8]
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f87d 	bl	8001fdc <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	2000033c 	.word	0x2000033c
 8001f14:	40000400 	.word	0x40000400
 8001f18:	20000340 	.word	0x20000340
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	20000344 	.word	0x20000344
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	20000348 	.word	0x20000348

08001f2c <BasicTimer3_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	__NOP();
 8001f30:	bf00      	nop
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
	__NOP();
 8001f40:	bf00      	nop
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	__NOP();
 8001f50:	bf00      	nop
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <TIM2_IRQHandler+0x1c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <TIM2_IRQHandler+0x1c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8001f70:	f7ff fa3c 	bl	80013ec <BasicTimer2_Callback>

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000033c 	.word	0x2000033c

08001f7c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <TIM3_IRQHandler+0x1c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <TIM3_IRQHandler+0x1c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8001f90:	f7ff ffcc 	bl	8001f2c <BasicTimer3_Callback>

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000340 	.word	0x20000340

08001f9c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <TIM4_IRQHandler+0x1c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <TIM4_IRQHandler+0x1c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8001fb0:	f7ff ffc4 	bl	8001f3c <BasicTimer4_Callback>

}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000344 	.word	0x20000344

08001fbc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <TIM5_IRQHandler+0x1c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <TIM5_IRQHandler+0x1c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8001fd0:	f7ff ffbc 	bl	8001f4c <BasicTimer5_Callback>

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000348 	.word	0x20000348

08001fdc <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8001ffe:	e007      	b.n	8002010 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <__NVIC_EnableIRQ>:
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	; (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af02      	add	r7, sp, #8
 800205e:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	2300      	movs	r3, #0
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	2300      	movs	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2301      	movs	r3, #1
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	f001 f869 	bl	8003148 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f001 f886 	bl	800318c <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002080:	4b97      	ldr	r3, [pc, #604]	; (80022e0 <extInt_Config+0x288>)
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	4a96      	ldr	r2, [pc, #600]	; (80022e0 <extInt_Config+0x288>)
 8002086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800208a:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b0f      	cmp	r3, #15
 8002094:	f200 85cf 	bhi.w	8002c36 <extInt_Config+0xbde>
 8002098:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <extInt_Config+0x48>)
 800209a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209e:	bf00      	nop
 80020a0:	080020e1 	.word	0x080020e1
 80020a4:	08002197 	.word	0x08002197
 80020a8:	0800224d 	.word	0x0800224d
 80020ac:	08002323 	.word	0x08002323
 80020b0:	080023d9 	.word	0x080023d9
 80020b4:	08002487 	.word	0x08002487
 80020b8:	0800254d 	.word	0x0800254d
 80020bc:	080025f5 	.word	0x080025f5
 80020c0:	0800269d 	.word	0x0800269d
 80020c4:	08002745 	.word	0x08002745
 80020c8:	0800280b 	.word	0x0800280b
 80020cc:	080028b3 	.word	0x080028b3
 80020d0:	0800295b 	.word	0x0800295b
 80020d4:	08002a21 	.word	0x08002a21
 80020d8:	08002ac9 	.word	0x08002ac9
 80020dc:	08002b71 	.word	0x08002b71
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80020e0:	4b80      	ldr	r3, [pc, #512]	; (80022e4 <extInt_Config+0x28c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	4a7f      	ldr	r2, [pc, #508]	; (80022e4 <extInt_Config+0x28c>)
 80020e6:	f023 030f 	bic.w	r3, r3, #15
 80020ea:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	4a7d      	ldr	r2, [pc, #500]	; (80022e8 <extInt_Config+0x290>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d105      	bne.n	8002104 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80020f8:	4b7a      	ldr	r3, [pc, #488]	; (80022e4 <extInt_Config+0x28c>)
 80020fa:	4a7a      	ldr	r2, [pc, #488]	; (80022e4 <extInt_Config+0x28c>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002100:	f000 bd9b 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4a78      	ldr	r2, [pc, #480]	; (80022ec <extInt_Config+0x294>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d107      	bne.n	8002120 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002110:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <extInt_Config+0x28c>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <extInt_Config+0x28c>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6093      	str	r3, [r2, #8]
		break;
 800211c:	f000 bd8d 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <extInt_Config+0x298>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d107      	bne.n	800213c <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800212c:	4b6d      	ldr	r3, [pc, #436]	; (80022e4 <extInt_Config+0x28c>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4a6c      	ldr	r2, [pc, #432]	; (80022e4 <extInt_Config+0x28c>)
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	6093      	str	r3, [r2, #8]
		break;
 8002138:	f000 bd7f 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4a6c      	ldr	r2, [pc, #432]	; (80022f4 <extInt_Config+0x29c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d107      	bne.n	8002158 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002148:	4b66      	ldr	r3, [pc, #408]	; (80022e4 <extInt_Config+0x28c>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a65      	ldr	r2, [pc, #404]	; (80022e4 <extInt_Config+0x28c>)
 800214e:	f043 0303 	orr.w	r3, r3, #3
 8002152:	6093      	str	r3, [r2, #8]
		break;
 8002154:	f000 bd71 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	4a66      	ldr	r2, [pc, #408]	; (80022f8 <extInt_Config+0x2a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d107      	bne.n	8002174 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002164:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <extInt_Config+0x28c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a5e      	ldr	r2, [pc, #376]	; (80022e4 <extInt_Config+0x28c>)
 800216a:	f043 0304 	orr.w	r3, r3, #4
 800216e:	6093      	str	r3, [r2, #8]
		break;
 8002170:	f000 bd63 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	4a60      	ldr	r2, [pc, #384]	; (80022fc <extInt_Config+0x2a4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d107      	bne.n	8002190 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002180:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <extInt_Config+0x28c>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4a57      	ldr	r2, [pc, #348]	; (80022e4 <extInt_Config+0x28c>)
 8002186:	f043 0307 	orr.w	r3, r3, #7
 800218a:	6093      	str	r3, [r2, #8]
		break;
 800218c:	f000 bd55 	b.w	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002190:	bf00      	nop
		break;
 8002192:	f000 bd52 	b.w	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8002196:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <extInt_Config+0x28c>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <extInt_Config+0x28c>)
 800219c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a0:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a4f      	ldr	r2, [pc, #316]	; (80022e8 <extInt_Config+0x290>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d105      	bne.n	80021ba <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80021ae:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <extInt_Config+0x28c>)
 80021b0:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <extInt_Config+0x28c>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80021b6:	f000 bd40 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <extInt_Config+0x294>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d107      	bne.n	80021d6 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <extInt_Config+0x28c>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4a46      	ldr	r2, [pc, #280]	; (80022e4 <extInt_Config+0x28c>)
 80021cc:	f043 0310 	orr.w	r3, r3, #16
 80021d0:	6093      	str	r3, [r2, #8]
		break;
 80021d2:	f000 bd32 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a44      	ldr	r2, [pc, #272]	; (80022f0 <extInt_Config+0x298>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d107      	bne.n	80021f2 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80021e2:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <extInt_Config+0x28c>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4a3f      	ldr	r2, [pc, #252]	; (80022e4 <extInt_Config+0x28c>)
 80021e8:	f043 0320 	orr.w	r3, r3, #32
 80021ec:	6093      	str	r3, [r2, #8]
		break;
 80021ee:	f000 bd24 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a3e      	ldr	r2, [pc, #248]	; (80022f4 <extInt_Config+0x29c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d107      	bne.n	800220e <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <extInt_Config+0x28c>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4a38      	ldr	r2, [pc, #224]	; (80022e4 <extInt_Config+0x28c>)
 8002204:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002208:	6093      	str	r3, [r2, #8]
		break;
 800220a:	f000 bd16 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <extInt_Config+0x2a0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d107      	bne.n	800222a <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <extInt_Config+0x28c>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <extInt_Config+0x28c>)
 8002220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002224:	6093      	str	r3, [r2, #8]
		break;
 8002226:	f000 bd08 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	4a32      	ldr	r2, [pc, #200]	; (80022fc <extInt_Config+0x2a4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d107      	bne.n	8002246 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <extInt_Config+0x28c>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4a2a      	ldr	r2, [pc, #168]	; (80022e4 <extInt_Config+0x28c>)
 800223c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002240:	6093      	str	r3, [r2, #8]
		break;
 8002242:	f000 bcfa 	b.w	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002246:	bf00      	nop
		break;
 8002248:	f000 bcf7 	b.w	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <extInt_Config+0x28c>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <extInt_Config+0x28c>)
 8002252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002256:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <extInt_Config+0x290>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d105      	bne.n	8002270 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <extInt_Config+0x28c>)
 8002266:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <extInt_Config+0x28c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800226c:	f000 bce5 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <extInt_Config+0x294>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d107      	bne.n	800228c <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <extInt_Config+0x28c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <extInt_Config+0x28c>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	6093      	str	r3, [r2, #8]
		break;
 8002288:	f000 bcd7 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <extInt_Config+0x298>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d107      	bne.n	80022a8 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <extInt_Config+0x28c>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <extInt_Config+0x28c>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6093      	str	r3, [r2, #8]
		break;
 80022a4:	f000 bcc9 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4a11      	ldr	r2, [pc, #68]	; (80022f4 <extInt_Config+0x29c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d107      	bne.n	80022c4 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <extInt_Config+0x28c>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <extInt_Config+0x28c>)
 80022ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022be:	6093      	str	r3, [r2, #8]
		break;
 80022c0:	f000 bcbb 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <extInt_Config+0x2a0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d117      	bne.n	8002300 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <extInt_Config+0x28c>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <extInt_Config+0x28c>)
 80022d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022da:	6093      	str	r3, [r2, #8]
		break;
 80022dc:	f000 bcad 	b.w	8002c3a <extInt_Config+0xbe2>
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4a8a      	ldr	r2, [pc, #552]	; (8002530 <extInt_Config+0x4d8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d107      	bne.n	800231c <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 800230c:	4b89      	ldr	r3, [pc, #548]	; (8002534 <extInt_Config+0x4dc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a88      	ldr	r2, [pc, #544]	; (8002534 <extInt_Config+0x4dc>)
 8002312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002316:	6093      	str	r3, [r2, #8]
		break;
 8002318:	f000 bc8f 	b.w	8002c3a <extInt_Config+0xbe2>
			__NOP();
 800231c:	bf00      	nop
		break;
 800231e:	f000 bc8c 	b.w	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8002322:	4b84      	ldr	r3, [pc, #528]	; (8002534 <extInt_Config+0x4dc>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4a83      	ldr	r2, [pc, #524]	; (8002534 <extInt_Config+0x4dc>)
 8002328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800232c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a80      	ldr	r2, [pc, #512]	; (8002538 <extInt_Config+0x4e0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d105      	bne.n	8002346 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800233a:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <extInt_Config+0x4dc>)
 800233c:	4a7d      	ldr	r2, [pc, #500]	; (8002534 <extInt_Config+0x4dc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002342:	f000 bc7a 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a7b      	ldr	r2, [pc, #492]	; (800253c <extInt_Config+0x4e4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d107      	bne.n	8002362 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002352:	4b78      	ldr	r3, [pc, #480]	; (8002534 <extInt_Config+0x4dc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4a77      	ldr	r2, [pc, #476]	; (8002534 <extInt_Config+0x4dc>)
 8002358:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800235c:	6093      	str	r3, [r2, #8]
		break;
 800235e:	f000 bc6c 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a75      	ldr	r2, [pc, #468]	; (8002540 <extInt_Config+0x4e8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d107      	bne.n	800237e <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800236e:	4b71      	ldr	r3, [pc, #452]	; (8002534 <extInt_Config+0x4dc>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4a70      	ldr	r2, [pc, #448]	; (8002534 <extInt_Config+0x4dc>)
 8002374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002378:	6093      	str	r3, [r2, #8]
		break;
 800237a:	f000 bc5e 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a6f      	ldr	r2, [pc, #444]	; (8002544 <extInt_Config+0x4ec>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d107      	bne.n	800239a <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800238a:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <extInt_Config+0x4dc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4a69      	ldr	r2, [pc, #420]	; (8002534 <extInt_Config+0x4dc>)
 8002390:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002394:	6093      	str	r3, [r2, #8]
		break;
 8002396:	f000 bc50 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a69      	ldr	r2, [pc, #420]	; (8002548 <extInt_Config+0x4f0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d107      	bne.n	80023b6 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <extInt_Config+0x4dc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4a62      	ldr	r2, [pc, #392]	; (8002534 <extInt_Config+0x4dc>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b0:	6093      	str	r3, [r2, #8]
		break;
 80023b2:	f000 bc42 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <extInt_Config+0x4d8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d107      	bne.n	80023d2 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80023c2:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <extInt_Config+0x4dc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a5b      	ldr	r2, [pc, #364]	; (8002534 <extInt_Config+0x4dc>)
 80023c8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80023cc:	6093      	str	r3, [r2, #8]
		break;
 80023ce:	f000 bc34 	b.w	8002c3a <extInt_Config+0xbe2>
			__NOP();
 80023d2:	bf00      	nop
		break;
 80023d4:	f000 bc31 	b.w	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80023d8:	4b56      	ldr	r3, [pc, #344]	; (8002534 <extInt_Config+0x4dc>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a55      	ldr	r2, [pc, #340]	; (8002534 <extInt_Config+0x4dc>)
 80023de:	f023 030f 	bic.w	r3, r3, #15
 80023e2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4a53      	ldr	r2, [pc, #332]	; (8002538 <extInt_Config+0x4e0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d105      	bne.n	80023fc <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80023f0:	4b50      	ldr	r3, [pc, #320]	; (8002534 <extInt_Config+0x4dc>)
 80023f2:	4a50      	ldr	r2, [pc, #320]	; (8002534 <extInt_Config+0x4dc>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80023f8:	f000 bc1f 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4a4e      	ldr	r2, [pc, #312]	; (800253c <extInt_Config+0x4e4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d107      	bne.n	8002418 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8002408:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <extInt_Config+0x4dc>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a49      	ldr	r2, [pc, #292]	; (8002534 <extInt_Config+0x4dc>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	60d3      	str	r3, [r2, #12]
		break;
 8002414:	f000 bc11 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	4a48      	ldr	r2, [pc, #288]	; (8002540 <extInt_Config+0x4e8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d107      	bne.n	8002434 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <extInt_Config+0x4dc>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a42      	ldr	r2, [pc, #264]	; (8002534 <extInt_Config+0x4dc>)
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	60d3      	str	r3, [r2, #12]
		break;
 8002430:	f000 bc03 	b.w	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4a42      	ldr	r2, [pc, #264]	; (8002544 <extInt_Config+0x4ec>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d106      	bne.n	800244e <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002440:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <extInt_Config+0x4dc>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a3b      	ldr	r2, [pc, #236]	; (8002534 <extInt_Config+0x4dc>)
 8002446:	f043 0303 	orr.w	r3, r3, #3
 800244a:	60d3      	str	r3, [r2, #12]
		break;
 800244c:	e3f5      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a3c      	ldr	r2, [pc, #240]	; (8002548 <extInt_Config+0x4f0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d106      	bne.n	8002468 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800245a:	4b36      	ldr	r3, [pc, #216]	; (8002534 <extInt_Config+0x4dc>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4a35      	ldr	r2, [pc, #212]	; (8002534 <extInt_Config+0x4dc>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	60d3      	str	r3, [r2, #12]
		break;
 8002466:	e3e8      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4a30      	ldr	r2, [pc, #192]	; (8002530 <extInt_Config+0x4d8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d106      	bne.n	8002482 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <extInt_Config+0x4dc>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <extInt_Config+0x4dc>)
 800247a:	f043 0307 	orr.w	r3, r3, #7
 800247e:	60d3      	str	r3, [r2, #12]
		break;
 8002480:	e3db      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002482:	bf00      	nop
		break;
 8002484:	e3d9      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <extInt_Config+0x4dc>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4a2a      	ldr	r2, [pc, #168]	; (8002534 <extInt_Config+0x4dc>)
 800248c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002490:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a27      	ldr	r2, [pc, #156]	; (8002538 <extInt_Config+0x4e0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d104      	bne.n	80024a8 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800249e:	4b25      	ldr	r3, [pc, #148]	; (8002534 <extInt_Config+0x4dc>)
 80024a0:	4a24      	ldr	r2, [pc, #144]	; (8002534 <extInt_Config+0x4dc>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80024a6:	e3c8      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4a23      	ldr	r2, [pc, #140]	; (800253c <extInt_Config+0x4e4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d106      	bne.n	80024c2 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <extInt_Config+0x4dc>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <extInt_Config+0x4dc>)
 80024ba:	f043 0310 	orr.w	r3, r3, #16
 80024be:	60d3      	str	r3, [r2, #12]
		break;
 80024c0:	e3bb      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <extInt_Config+0x4e8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d106      	bne.n	80024dc <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <extInt_Config+0x4dc>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <extInt_Config+0x4dc>)
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	60d3      	str	r3, [r2, #12]
		break;
 80024da:	e3ae      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	4a18      	ldr	r2, [pc, #96]	; (8002544 <extInt_Config+0x4ec>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d106      	bne.n	80024f6 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <extInt_Config+0x4dc>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a11      	ldr	r2, [pc, #68]	; (8002534 <extInt_Config+0x4dc>)
 80024ee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80024f2:	60d3      	str	r3, [r2, #12]
		break;
 80024f4:	e3a1      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <extInt_Config+0x4f0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d106      	bne.n	8002510 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <extInt_Config+0x4dc>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4a0b      	ldr	r2, [pc, #44]	; (8002534 <extInt_Config+0x4dc>)
 8002508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250c:	60d3      	str	r3, [r2, #12]
		break;
 800250e:	e394      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4a06      	ldr	r2, [pc, #24]	; (8002530 <extInt_Config+0x4d8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d106      	bne.n	800252a <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <extInt_Config+0x4dc>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <extInt_Config+0x4dc>)
 8002522:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002526:	60d3      	str	r3, [r2, #12]
		break;
 8002528:	e387      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 800252a:	bf00      	nop
		break;
 800252c:	e385      	b.n	8002c3a <extInt_Config+0xbe2>
 800252e:	bf00      	nop
 8002530:	40021c00 	.word	0x40021c00
 8002534:	40013800 	.word	0x40013800
 8002538:	40020000 	.word	0x40020000
 800253c:	40020400 	.word	0x40020400
 8002540:	40020800 	.word	0x40020800
 8002544:	40020c00 	.word	0x40020c00
 8002548:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 800254c:	4b86      	ldr	r3, [pc, #536]	; (8002768 <extInt_Config+0x710>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a85      	ldr	r2, [pc, #532]	; (8002768 <extInt_Config+0x710>)
 8002552:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002556:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4a83      	ldr	r2, [pc, #524]	; (800276c <extInt_Config+0x714>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d104      	bne.n	800256e <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002564:	4b80      	ldr	r3, [pc, #512]	; (8002768 <extInt_Config+0x710>)
 8002566:	4a80      	ldr	r2, [pc, #512]	; (8002768 <extInt_Config+0x710>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800256c:	e365      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a7e      	ldr	r2, [pc, #504]	; (8002770 <extInt_Config+0x718>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d106      	bne.n	8002588 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800257a:	4b7b      	ldr	r3, [pc, #492]	; (8002768 <extInt_Config+0x710>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4a7a      	ldr	r2, [pc, #488]	; (8002768 <extInt_Config+0x710>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	60d3      	str	r3, [r2, #12]
		break;
 8002586:	e358      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4a79      	ldr	r2, [pc, #484]	; (8002774 <extInt_Config+0x71c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d106      	bne.n	80025a2 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002594:	4b74      	ldr	r3, [pc, #464]	; (8002768 <extInt_Config+0x710>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a73      	ldr	r2, [pc, #460]	; (8002768 <extInt_Config+0x710>)
 800259a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259e:	60d3      	str	r3, [r2, #12]
		break;
 80025a0:	e34b      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a73      	ldr	r2, [pc, #460]	; (8002778 <extInt_Config+0x720>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d106      	bne.n	80025bc <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 80025ae:	4b6e      	ldr	r3, [pc, #440]	; (8002768 <extInt_Config+0x710>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a6d      	ldr	r2, [pc, #436]	; (8002768 <extInt_Config+0x710>)
 80025b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025b8:	60d3      	str	r3, [r2, #12]
		break;
 80025ba:	e33e      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4a6e      	ldr	r2, [pc, #440]	; (800277c <extInt_Config+0x724>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d106      	bne.n	80025d6 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80025c8:	4b67      	ldr	r3, [pc, #412]	; (8002768 <extInt_Config+0x710>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a66      	ldr	r2, [pc, #408]	; (8002768 <extInt_Config+0x710>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d2:	60d3      	str	r3, [r2, #12]
		break;
 80025d4:	e331      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a68      	ldr	r2, [pc, #416]	; (8002780 <extInt_Config+0x728>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d106      	bne.n	80025f0 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80025e2:	4b61      	ldr	r3, [pc, #388]	; (8002768 <extInt_Config+0x710>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	4a60      	ldr	r2, [pc, #384]	; (8002768 <extInt_Config+0x710>)
 80025e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ec:	60d3      	str	r3, [r2, #12]
		break;
 80025ee:	e324      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 80025f0:	bf00      	nop
		break;
 80025f2:	e322      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 80025f4:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <extInt_Config+0x710>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <extInt_Config+0x710>)
 80025fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025fe:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	4a59      	ldr	r2, [pc, #356]	; (800276c <extInt_Config+0x714>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d104      	bne.n	8002616 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800260c:	4b56      	ldr	r3, [pc, #344]	; (8002768 <extInt_Config+0x710>)
 800260e:	4a56      	ldr	r2, [pc, #344]	; (8002768 <extInt_Config+0x710>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002614:	e311      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a54      	ldr	r2, [pc, #336]	; (8002770 <extInt_Config+0x718>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d106      	bne.n	8002630 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002622:	4b51      	ldr	r3, [pc, #324]	; (8002768 <extInt_Config+0x710>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4a50      	ldr	r2, [pc, #320]	; (8002768 <extInt_Config+0x710>)
 8002628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800262c:	60d3      	str	r3, [r2, #12]
		break;
 800262e:	e304      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4a4f      	ldr	r2, [pc, #316]	; (8002774 <extInt_Config+0x71c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d106      	bne.n	800264a <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800263c:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <extInt_Config+0x710>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4a49      	ldr	r2, [pc, #292]	; (8002768 <extInt_Config+0x710>)
 8002642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002646:	60d3      	str	r3, [r2, #12]
		break;
 8002648:	e2f7      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a49      	ldr	r2, [pc, #292]	; (8002778 <extInt_Config+0x720>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d106      	bne.n	8002664 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8002656:	4b44      	ldr	r3, [pc, #272]	; (8002768 <extInt_Config+0x710>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a43      	ldr	r2, [pc, #268]	; (8002768 <extInt_Config+0x710>)
 800265c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002660:	60d3      	str	r3, [r2, #12]
		break;
 8002662:	e2ea      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	4a44      	ldr	r2, [pc, #272]	; (800277c <extInt_Config+0x724>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d106      	bne.n	800267e <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <extInt_Config+0x710>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <extInt_Config+0x710>)
 8002676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267a:	60d3      	str	r3, [r2, #12]
		break;
 800267c:	e2dd      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a3e      	ldr	r2, [pc, #248]	; (8002780 <extInt_Config+0x728>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d106      	bne.n	8002698 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800268a:	4b37      	ldr	r3, [pc, #220]	; (8002768 <extInt_Config+0x710>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	4a36      	ldr	r2, [pc, #216]	; (8002768 <extInt_Config+0x710>)
 8002690:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002694:	60d3      	str	r3, [r2, #12]
		break;
 8002696:	e2d0      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002698:	bf00      	nop
		break;
 800269a:	e2ce      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 800269c:	4b32      	ldr	r3, [pc, #200]	; (8002768 <extInt_Config+0x710>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	4a31      	ldr	r2, [pc, #196]	; (8002768 <extInt_Config+0x710>)
 80026a2:	f023 030f 	bic.w	r3, r3, #15
 80026a6:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4a2f      	ldr	r2, [pc, #188]	; (800276c <extInt_Config+0x714>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d104      	bne.n	80026be <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80026b4:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <extInt_Config+0x710>)
 80026b6:	4a2c      	ldr	r2, [pc, #176]	; (8002768 <extInt_Config+0x710>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80026bc:	e2bd      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a2a      	ldr	r2, [pc, #168]	; (8002770 <extInt_Config+0x718>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d106      	bne.n	80026d8 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80026ca:	4b27      	ldr	r3, [pc, #156]	; (8002768 <extInt_Config+0x710>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	4a26      	ldr	r2, [pc, #152]	; (8002768 <extInt_Config+0x710>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6113      	str	r3, [r2, #16]
		break;
 80026d6:	e2b0      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4a25      	ldr	r2, [pc, #148]	; (8002774 <extInt_Config+0x71c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d106      	bne.n	80026f2 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <extInt_Config+0x710>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <extInt_Config+0x710>)
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	6113      	str	r3, [r2, #16]
		break;
 80026f0:	e2a3      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <extInt_Config+0x720>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d106      	bne.n	800270c <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <extInt_Config+0x710>)
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	4a19      	ldr	r2, [pc, #100]	; (8002768 <extInt_Config+0x710>)
 8002704:	f043 0303 	orr.w	r3, r3, #3
 8002708:	6113      	str	r3, [r2, #16]
		break;
 800270a:	e296      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	4a1a      	ldr	r2, [pc, #104]	; (800277c <extInt_Config+0x724>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d106      	bne.n	8002726 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <extInt_Config+0x710>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	4a12      	ldr	r2, [pc, #72]	; (8002768 <extInt_Config+0x710>)
 800271e:	f043 0304 	orr.w	r3, r3, #4
 8002722:	6113      	str	r3, [r2, #16]
		break;
 8002724:	e289      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <extInt_Config+0x728>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d106      	bne.n	8002740 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <extInt_Config+0x710>)
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <extInt_Config+0x710>)
 8002738:	f043 0307 	orr.w	r3, r3, #7
 800273c:	6113      	str	r3, [r2, #16]
		break;
 800273e:	e27c      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002740:	bf00      	nop
		break;
 8002742:	e27a      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <extInt_Config+0x710>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <extInt_Config+0x710>)
 800274a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800274e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <extInt_Config+0x714>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d113      	bne.n	8002784 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800275c:	4b02      	ldr	r3, [pc, #8]	; (8002768 <extInt_Config+0x710>)
 800275e:	4a02      	ldr	r2, [pc, #8]	; (8002768 <extInt_Config+0x710>)
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002764:	e269      	b.n	8002c3a <extInt_Config+0xbe2>
 8002766:	bf00      	nop
 8002768:	40013800 	.word	0x40013800
 800276c:	40020000 	.word	0x40020000
 8002770:	40020400 	.word	0x40020400
 8002774:	40020800 	.word	0x40020800
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40021000 	.word	0x40021000
 8002780:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4a83      	ldr	r2, [pc, #524]	; (8002998 <extInt_Config+0x940>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d106      	bne.n	800279e <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002790:	4b82      	ldr	r3, [pc, #520]	; (800299c <extInt_Config+0x944>)
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	4a81      	ldr	r2, [pc, #516]	; (800299c <extInt_Config+0x944>)
 8002796:	f043 0310 	orr.w	r3, r3, #16
 800279a:	6113      	str	r3, [r2, #16]
		break;
 800279c:	e24d      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a7e      	ldr	r2, [pc, #504]	; (80029a0 <extInt_Config+0x948>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d106      	bne.n	80027b8 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <extInt_Config+0x944>)
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	4a7b      	ldr	r2, [pc, #492]	; (800299c <extInt_Config+0x944>)
 80027b0:	f043 0320 	orr.w	r3, r3, #32
 80027b4:	6113      	str	r3, [r2, #16]
		break;
 80027b6:	e240      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4a79      	ldr	r2, [pc, #484]	; (80029a4 <extInt_Config+0x94c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d106      	bne.n	80027d2 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80027c4:	4b75      	ldr	r3, [pc, #468]	; (800299c <extInt_Config+0x944>)
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	4a74      	ldr	r2, [pc, #464]	; (800299c <extInt_Config+0x944>)
 80027ca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80027ce:	6113      	str	r3, [r2, #16]
		break;
 80027d0:	e233      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4a73      	ldr	r2, [pc, #460]	; (80029a8 <extInt_Config+0x950>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d106      	bne.n	80027ec <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80027de:	4b6f      	ldr	r3, [pc, #444]	; (800299c <extInt_Config+0x944>)
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4a6e      	ldr	r2, [pc, #440]	; (800299c <extInt_Config+0x944>)
 80027e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e8:	6113      	str	r3, [r2, #16]
		break;
 80027ea:	e226      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4a6e      	ldr	r2, [pc, #440]	; (80029ac <extInt_Config+0x954>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d106      	bne.n	8002806 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80027f8:	4b68      	ldr	r3, [pc, #416]	; (800299c <extInt_Config+0x944>)
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	4a67      	ldr	r2, [pc, #412]	; (800299c <extInt_Config+0x944>)
 80027fe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002802:	6113      	str	r3, [r2, #16]
		break;
 8002804:	e219      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002806:	bf00      	nop
		break;
 8002808:	e217      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 800280a:	4b64      	ldr	r3, [pc, #400]	; (800299c <extInt_Config+0x944>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	4a63      	ldr	r2, [pc, #396]	; (800299c <extInt_Config+0x944>)
 8002810:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002814:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a64      	ldr	r2, [pc, #400]	; (80029b0 <extInt_Config+0x958>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d104      	bne.n	800282c <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002822:	4b5e      	ldr	r3, [pc, #376]	; (800299c <extInt_Config+0x944>)
 8002824:	4a5d      	ldr	r2, [pc, #372]	; (800299c <extInt_Config+0x944>)
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800282a:	e206      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4a59      	ldr	r2, [pc, #356]	; (8002998 <extInt_Config+0x940>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d106      	bne.n	8002846 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <extInt_Config+0x944>)
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	4a57      	ldr	r2, [pc, #348]	; (800299c <extInt_Config+0x944>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	6113      	str	r3, [r2, #16]
		break;
 8002844:	e1f9      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a54      	ldr	r2, [pc, #336]	; (80029a0 <extInt_Config+0x948>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d106      	bne.n	8002860 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002852:	4b52      	ldr	r3, [pc, #328]	; (800299c <extInt_Config+0x944>)
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	4a51      	ldr	r2, [pc, #324]	; (800299c <extInt_Config+0x944>)
 8002858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285c:	6113      	str	r3, [r2, #16]
		break;
 800285e:	e1ec      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <extInt_Config+0x94c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d106      	bne.n	800287a <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800286c:	4b4b      	ldr	r3, [pc, #300]	; (800299c <extInt_Config+0x944>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	4a4a      	ldr	r2, [pc, #296]	; (800299c <extInt_Config+0x944>)
 8002872:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002876:	6113      	str	r3, [r2, #16]
		break;
 8002878:	e1df      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a49      	ldr	r2, [pc, #292]	; (80029a8 <extInt_Config+0x950>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d106      	bne.n	8002894 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8002886:	4b45      	ldr	r3, [pc, #276]	; (800299c <extInt_Config+0x944>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	4a44      	ldr	r2, [pc, #272]	; (800299c <extInt_Config+0x944>)
 800288c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002890:	6113      	str	r3, [r2, #16]
		break;
 8002892:	e1d2      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4a44      	ldr	r2, [pc, #272]	; (80029ac <extInt_Config+0x954>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d106      	bne.n	80028ae <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 80028a0:	4b3e      	ldr	r3, [pc, #248]	; (800299c <extInt_Config+0x944>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	4a3d      	ldr	r2, [pc, #244]	; (800299c <extInt_Config+0x944>)
 80028a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028aa:	6113      	str	r3, [r2, #16]
		break;
 80028ac:	e1c5      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 80028ae:	bf00      	nop
		break;
 80028b0:	e1c3      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 80028b2:	4b3a      	ldr	r3, [pc, #232]	; (800299c <extInt_Config+0x944>)
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	4a39      	ldr	r2, [pc, #228]	; (800299c <extInt_Config+0x944>)
 80028b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028bc:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <extInt_Config+0x958>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d104      	bne.n	80028d4 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80028ca:	4b34      	ldr	r3, [pc, #208]	; (800299c <extInt_Config+0x944>)
 80028cc:	4a33      	ldr	r2, [pc, #204]	; (800299c <extInt_Config+0x944>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80028d2:	e1b2      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a2f      	ldr	r2, [pc, #188]	; (8002998 <extInt_Config+0x940>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d106      	bne.n	80028ee <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80028e0:	4b2e      	ldr	r3, [pc, #184]	; (800299c <extInt_Config+0x944>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	4a2d      	ldr	r2, [pc, #180]	; (800299c <extInt_Config+0x944>)
 80028e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ea:	6113      	str	r3, [r2, #16]
		break;
 80028ec:	e1a5      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <extInt_Config+0x948>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d106      	bne.n	8002908 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80028fa:	4b28      	ldr	r3, [pc, #160]	; (800299c <extInt_Config+0x944>)
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	4a27      	ldr	r2, [pc, #156]	; (800299c <extInt_Config+0x944>)
 8002900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002904:	6113      	str	r3, [r2, #16]
		break;
 8002906:	e198      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <extInt_Config+0x94c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d106      	bne.n	8002922 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <extInt_Config+0x944>)
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <extInt_Config+0x944>)
 800291a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800291e:	6113      	str	r3, [r2, #16]
		break;
 8002920:	e18b      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <extInt_Config+0x950>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d106      	bne.n	800293c <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <extInt_Config+0x944>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <extInt_Config+0x944>)
 8002934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002938:	6113      	str	r3, [r2, #16]
		break;
 800293a:	e17e      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4a1a      	ldr	r2, [pc, #104]	; (80029ac <extInt_Config+0x954>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d106      	bne.n	8002956 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <extInt_Config+0x944>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <extInt_Config+0x944>)
 800294e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002952:	6113      	str	r3, [r2, #16]
		break;
 8002954:	e171      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002956:	bf00      	nop
		break;
 8002958:	e16f      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <extInt_Config+0x944>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	4a0f      	ldr	r2, [pc, #60]	; (800299c <extInt_Config+0x944>)
 8002960:	f023 030f 	bic.w	r3, r3, #15
 8002964:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <extInt_Config+0x958>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d104      	bne.n	800297c <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <extInt_Config+0x944>)
 8002974:	4a09      	ldr	r2, [pc, #36]	; (800299c <extInt_Config+0x944>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800297a:	e15e      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4a05      	ldr	r2, [pc, #20]	; (8002998 <extInt_Config+0x940>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d115      	bne.n	80029b4 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8002988:	4b04      	ldr	r3, [pc, #16]	; (800299c <extInt_Config+0x944>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	4a03      	ldr	r2, [pc, #12]	; (800299c <extInt_Config+0x944>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6153      	str	r3, [r2, #20]
		break;
 8002994:	e151      	b.n	8002c3a <extInt_Config+0xbe2>
 8002996:	bf00      	nop
 8002998:	40020400 	.word	0x40020400
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020800 	.word	0x40020800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40021c00 	.word	0x40021c00
 80029b0:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	4a83      	ldr	r2, [pc, #524]	; (8002bc8 <extInt_Config+0xb70>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d106      	bne.n	80029ce <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80029c0:	4b82      	ldr	r3, [pc, #520]	; (8002bcc <extInt_Config+0xb74>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4a81      	ldr	r2, [pc, #516]	; (8002bcc <extInt_Config+0xb74>)
 80029c6:	f043 0302 	orr.w	r3, r3, #2
 80029ca:	6153      	str	r3, [r2, #20]
		break;
 80029cc:	e135      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a7e      	ldr	r2, [pc, #504]	; (8002bd0 <extInt_Config+0xb78>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d106      	bne.n	80029e8 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80029da:	4b7c      	ldr	r3, [pc, #496]	; (8002bcc <extInt_Config+0xb74>)
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	4a7b      	ldr	r2, [pc, #492]	; (8002bcc <extInt_Config+0xb74>)
 80029e0:	f043 0303 	orr.w	r3, r3, #3
 80029e4:	6153      	str	r3, [r2, #20]
		break;
 80029e6:	e128      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	4a79      	ldr	r2, [pc, #484]	; (8002bd4 <extInt_Config+0xb7c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d106      	bne.n	8002a02 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80029f4:	4b75      	ldr	r3, [pc, #468]	; (8002bcc <extInt_Config+0xb74>)
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	4a74      	ldr	r2, [pc, #464]	; (8002bcc <extInt_Config+0xb74>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	6153      	str	r3, [r2, #20]
		break;
 8002a00:	e11b      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4a73      	ldr	r2, [pc, #460]	; (8002bd8 <extInt_Config+0xb80>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d106      	bne.n	8002a1c <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002a0e:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <extInt_Config+0xb74>)
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4a6e      	ldr	r2, [pc, #440]	; (8002bcc <extInt_Config+0xb74>)
 8002a14:	f043 0307 	orr.w	r3, r3, #7
 8002a18:	6153      	str	r3, [r2, #20]
		break;
 8002a1a:	e10e      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002a1c:	bf00      	nop
		break;
 8002a1e:	e10c      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <extInt_Config+0xb74>)
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4a69      	ldr	r2, [pc, #420]	; (8002bcc <extInt_Config+0xb74>)
 8002a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4a6a      	ldr	r2, [pc, #424]	; (8002bdc <extInt_Config+0xb84>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d104      	bne.n	8002a42 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002a38:	4b64      	ldr	r3, [pc, #400]	; (8002bcc <extInt_Config+0xb74>)
 8002a3a:	4a64      	ldr	r2, [pc, #400]	; (8002bcc <extInt_Config+0xb74>)
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002a40:	e0fb      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a65      	ldr	r2, [pc, #404]	; (8002be0 <extInt_Config+0xb88>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d106      	bne.n	8002a5c <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <extInt_Config+0xb74>)
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	4a5e      	ldr	r2, [pc, #376]	; (8002bcc <extInt_Config+0xb74>)
 8002a54:	f043 0310 	orr.w	r3, r3, #16
 8002a58:	6153      	str	r3, [r2, #20]
		break;
 8002a5a:	e0ee      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4a59      	ldr	r2, [pc, #356]	; (8002bc8 <extInt_Config+0xb70>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d106      	bne.n	8002a76 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002a68:	4b58      	ldr	r3, [pc, #352]	; (8002bcc <extInt_Config+0xb74>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	4a57      	ldr	r2, [pc, #348]	; (8002bcc <extInt_Config+0xb74>)
 8002a6e:	f043 0320 	orr.w	r3, r3, #32
 8002a72:	6153      	str	r3, [r2, #20]
		break;
 8002a74:	e0e1      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a54      	ldr	r2, [pc, #336]	; (8002bd0 <extInt_Config+0xb78>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d106      	bne.n	8002a90 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002a82:	4b52      	ldr	r3, [pc, #328]	; (8002bcc <extInt_Config+0xb74>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	4a51      	ldr	r2, [pc, #324]	; (8002bcc <extInt_Config+0xb74>)
 8002a88:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a8c:	6153      	str	r3, [r2, #20]
		break;
 8002a8e:	e0d4      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4a4f      	ldr	r2, [pc, #316]	; (8002bd4 <extInt_Config+0xb7c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d106      	bne.n	8002aaa <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002a9c:	4b4b      	ldr	r3, [pc, #300]	; (8002bcc <extInt_Config+0xb74>)
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <extInt_Config+0xb74>)
 8002aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa6:	6153      	str	r3, [r2, #20]
		break;
 8002aa8:	e0c7      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a49      	ldr	r2, [pc, #292]	; (8002bd8 <extInt_Config+0xb80>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d106      	bne.n	8002ac4 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002ab6:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <extInt_Config+0xb74>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	4a44      	ldr	r2, [pc, #272]	; (8002bcc <extInt_Config+0xb74>)
 8002abc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ac0:	6153      	str	r3, [r2, #20]
		break;
 8002ac2:	e0ba      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002ac4:	bf00      	nop
		break;
 8002ac6:	e0b8      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8002ac8:	4b40      	ldr	r3, [pc, #256]	; (8002bcc <extInt_Config+0xb74>)
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	4a3f      	ldr	r2, [pc, #252]	; (8002bcc <extInt_Config+0xb74>)
 8002ace:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ad2:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <extInt_Config+0xb84>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d104      	bne.n	8002aea <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002ae0:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <extInt_Config+0xb74>)
 8002ae2:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <extInt_Config+0xb74>)
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002ae8:	e0a7      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a3b      	ldr	r2, [pc, #236]	; (8002be0 <extInt_Config+0xb88>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d106      	bne.n	8002b04 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002af6:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <extInt_Config+0xb74>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <extInt_Config+0xb74>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6153      	str	r3, [r2, #20]
		break;
 8002b02:	e09a      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <extInt_Config+0xb70>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d106      	bne.n	8002b1e <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002b10:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <extInt_Config+0xb74>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4a2d      	ldr	r2, [pc, #180]	; (8002bcc <extInt_Config+0xb74>)
 8002b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1a:	6153      	str	r3, [r2, #20]
		break;
 8002b1c:	e08d      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <extInt_Config+0xb78>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d106      	bne.n	8002b38 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002b2a:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <extInt_Config+0xb74>)
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <extInt_Config+0xb74>)
 8002b30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b34:	6153      	str	r3, [r2, #20]
		break;
 8002b36:	e080      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <extInt_Config+0xb7c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d106      	bne.n	8002b52 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002b44:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <extInt_Config+0xb74>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <extInt_Config+0xb74>)
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4e:	6153      	str	r3, [r2, #20]
		break;
 8002b50:	e073      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <extInt_Config+0xb80>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d106      	bne.n	8002b6c <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <extInt_Config+0xb74>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4a1a      	ldr	r2, [pc, #104]	; (8002bcc <extInt_Config+0xb74>)
 8002b64:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b68:	6153      	str	r3, [r2, #20]
		break;
 8002b6a:	e066      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002b6c:	bf00      	nop
		break;
 8002b6e:	e064      	b.n	8002c3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <extInt_Config+0xb74>)
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <extInt_Config+0xb74>)
 8002b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b7a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <extInt_Config+0xb84>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d104      	bne.n	8002b92 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <extInt_Config+0xb74>)
 8002b8a:	4a10      	ldr	r2, [pc, #64]	; (8002bcc <extInt_Config+0xb74>)
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002b90:	e053      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a11      	ldr	r2, [pc, #68]	; (8002be0 <extInt_Config+0xb88>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d106      	bne.n	8002bac <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <extInt_Config+0xb74>)
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <extInt_Config+0xb74>)
 8002ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba8:	6153      	str	r3, [r2, #20]
		break;
 8002baa:	e046      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <extInt_Config+0xb70>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d115      	bne.n	8002be4 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <extInt_Config+0xb74>)
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <extInt_Config+0xb74>)
 8002bbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bc2:	6153      	str	r3, [r2, #20]
		break;
 8002bc4:	e039      	b.n	8002c3a <extInt_Config+0xbe2>
 8002bc6:	bf00      	nop
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	40020c00 	.word	0x40020c00
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40021c00 	.word	0x40021c00
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4a85      	ldr	r2, [pc, #532]	; (8002e00 <extInt_Config+0xda8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d106      	bne.n	8002bfe <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002bf0:	4b84      	ldr	r3, [pc, #528]	; (8002e04 <extInt_Config+0xdac>)
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	4a83      	ldr	r2, [pc, #524]	; (8002e04 <extInt_Config+0xdac>)
 8002bf6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002bfa:	6153      	str	r3, [r2, #20]
		break;
 8002bfc:	e01d      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a80      	ldr	r2, [pc, #512]	; (8002e08 <extInt_Config+0xdb0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d106      	bne.n	8002c18 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002c0a:	4b7e      	ldr	r3, [pc, #504]	; (8002e04 <extInt_Config+0xdac>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	4a7d      	ldr	r2, [pc, #500]	; (8002e04 <extInt_Config+0xdac>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6153      	str	r3, [r2, #20]
		break;
 8002c16:	e010      	b.n	8002c3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4a7b      	ldr	r2, [pc, #492]	; (8002e0c <extInt_Config+0xdb4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d106      	bne.n	8002c32 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002c24:	4b77      	ldr	r3, [pc, #476]	; (8002e04 <extInt_Config+0xdac>)
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	4a76      	ldr	r2, [pc, #472]	; (8002e04 <extInt_Config+0xdac>)
 8002c2a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002c2e:	6153      	str	r3, [r2, #20]
		break;
 8002c30:	e003      	b.n	8002c3a <extInt_Config+0xbe2>
			__NOP();
 8002c32:	bf00      	nop
		break;
 8002c34:	e001      	b.n	8002c3a <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8002c36:	bf00      	nop
		break;
 8002c38:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d126      	bne.n	8002c90 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c42:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <extInt_Config+0xdb8>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	2201      	movs	r2, #1
 8002c50:	408a      	lsls	r2, r1
 8002c52:	43d2      	mvns	r2, r2
 8002c54:	4611      	mov	r1, r2
 8002c56:	4a6e      	ldr	r2, [pc, #440]	; (8002e10 <extInt_Config+0xdb8>)
 8002c58:	400b      	ands	r3, r1
 8002c5a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c5c:	4b6c      	ldr	r3, [pc, #432]	; (8002e10 <extInt_Config+0xdb8>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6812      	ldr	r2, [r2, #0]
 8002c64:	7812      	ldrb	r2, [r2, #0]
 8002c66:	4611      	mov	r1, r2
 8002c68:	2201      	movs	r2, #1
 8002c6a:	408a      	lsls	r2, r1
 8002c6c:	43d2      	mvns	r2, r2
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4a67      	ldr	r2, [pc, #412]	; (8002e10 <extInt_Config+0xdb8>)
 8002c72:	400b      	ands	r3, r1
 8002c74:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c76:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <extInt_Config+0xdb8>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	7812      	ldrb	r2, [r2, #0]
 8002c80:	4611      	mov	r1, r2
 8002c82:	2201      	movs	r2, #1
 8002c84:	408a      	lsls	r2, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	4a61      	ldr	r2, [pc, #388]	; (8002e10 <extInt_Config+0xdb8>)
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	6093      	str	r3, [r2, #8]
 8002c8e:	e02b      	b.n	8002ce8 <extInt_Config+0xc90>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	791b      	ldrb	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d126      	bne.n	8002ce6 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c98:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <extInt_Config+0xdb8>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	408a      	lsls	r2, r1
 8002ca8:	43d2      	mvns	r2, r2
 8002caa:	4611      	mov	r1, r2
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <extInt_Config+0xdb8>)
 8002cae:	400b      	ands	r3, r1
 8002cb0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002cb2:	4b57      	ldr	r3, [pc, #348]	; (8002e10 <extInt_Config+0xdb8>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	408a      	lsls	r2, r1
 8002cc2:	43d2      	mvns	r2, r2
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <extInt_Config+0xdb8>)
 8002cc8:	400b      	ands	r3, r1
 8002cca:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <extInt_Config+0xdb8>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	7812      	ldrb	r2, [r2, #0]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	2201      	movs	r2, #1
 8002cda:	408a      	lsls	r2, r1
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4a4c      	ldr	r2, [pc, #304]	; (8002e10 <extInt_Config+0xdb8>)
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	60d3      	str	r3, [r2, #12]
 8002ce4:	e000      	b.n	8002ce8 <extInt_Config+0xc90>

	}
	else
	{
		__NOP();
 8002ce6:	bf00      	nop
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ce8:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <extInt_Config+0xdb8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	7812      	ldrb	r2, [r2, #0]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	408a      	lsls	r2, r1
 8002cf8:	43d2      	mvns	r2, r2
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4a44      	ldr	r2, [pc, #272]	; (8002e10 <extInt_Config+0xdb8>)
 8002cfe:	400b      	ands	r3, r1
 8002d00:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002d02:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <extInt_Config+0xdb8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	2201      	movs	r2, #1
 8002d10:	408a      	lsls	r2, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	4a3e      	ldr	r2, [pc, #248]	; (8002e10 <extInt_Config+0xdb8>)
 8002d16:	430b      	orrs	r3, r1
 8002d18:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1a:	b672      	cpsid	i
}
 8002d1c:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	d863      	bhi.n	8002df0 <extInt_Config+0xd98>
 8002d28:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <extInt_Config+0xcd8>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d71 	.word	0x08002d71
 8002d34:	08002d79 	.word	0x08002d79
 8002d38:	08002d81 	.word	0x08002d81
 8002d3c:	08002d89 	.word	0x08002d89
 8002d40:	08002d91 	.word	0x08002d91
 8002d44:	08002d99 	.word	0x08002d99
 8002d48:	08002da1 	.word	0x08002da1
 8002d4c:	08002da9 	.word	0x08002da9
 8002d50:	08002db1 	.word	0x08002db1
 8002d54:	08002db9 	.word	0x08002db9
 8002d58:	08002dc1 	.word	0x08002dc1
 8002d5c:	08002dc9 	.word	0x08002dc9
 8002d60:	08002dd1 	.word	0x08002dd1
 8002d64:	08002dd9 	.word	0x08002dd9
 8002d68:	08002de1 	.word	0x08002de1
 8002d6c:	08002de9 	.word	0x08002de9
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8002d70:	2006      	movs	r0, #6
 8002d72:	f7ff f953 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002d76:	e03c      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8002d78:	2007      	movs	r0, #7
 8002d7a:	f7ff f94f 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002d7e:	e038      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8002d80:	2008      	movs	r0, #8
 8002d82:	f7ff f94b 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002d86:	e034      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8002d88:	2009      	movs	r0, #9
 8002d8a:	f7ff f947 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002d8e:	e030      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8002d90:	200a      	movs	r0, #10
 8002d92:	f7ff f943 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002d96:	e02c      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d98:	2017      	movs	r0, #23
 8002d9a:	f7ff f93f 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002d9e:	e028      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002da0:	2017      	movs	r0, #23
 8002da2:	f7ff f93b 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002da6:	e024      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002da8:	2017      	movs	r0, #23
 8002daa:	f7ff f937 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002dae:	e020      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002db0:	2017      	movs	r0, #23
 8002db2:	f7ff f933 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002db6:	e01c      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002db8:	2017      	movs	r0, #23
 8002dba:	f7ff f92f 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002dbe:	e018      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dc0:	2028      	movs	r0, #40	; 0x28
 8002dc2:	f7ff f92b 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002dc6:	e014      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dc8:	2028      	movs	r0, #40	; 0x28
 8002dca:	f7ff f927 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002dce:	e010      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dd0:	2028      	movs	r0, #40	; 0x28
 8002dd2:	f7ff f923 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002dd6:	e00c      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dd8:	2028      	movs	r0, #40	; 0x28
 8002dda:	f7ff f91f 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002dde:	e008      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002de0:	2028      	movs	r0, #40	; 0x28
 8002de2:	f7ff f91b 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002de6:	e004      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002de8:	2028      	movs	r0, #40	; 0x28
 8002dea:	f7ff f917 	bl	800201c <__NVIC_EnableIRQ>
		break;
 8002dee:	e000      	b.n	8002df2 <extInt_Config+0xd9a>
	}

	default: {
		break;
 8002df0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002df2:	b662      	cpsie	i
}
 8002df4:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40013800 	.word	0x40013800
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40021c00 	.word	0x40021c00
 8002e10:	40013c00 	.word	0x40013c00

08002e14 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
	__NOP();
 8002e18:	bf00      	nop
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <callback_extInt1>:

__attribute__ ((weak)) void callback_extInt1(void){
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	__NOP();
 8002e28:	bf00      	nop
}
 8002e2a:	bf00      	nop
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt2(void){
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
	__NOP();
 8002e38:	bf00      	nop
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <callback_extInt3>:

__attribute__ ((weak)) void callback_extInt3(void){
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
	__NOP();
 8002e48:	bf00      	nop
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt4(void){
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	__NOP();
 8002e58:	bf00      	nop
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
	__NOP();
 8002e68:	bf00      	nop
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
	__NOP();
 8002e78:	bf00      	nop
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
	__NOP();
 8002e88:	bf00      	nop
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
	__NOP();
 8002e98:	bf00      	nop
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
	__NOP();
 8002ea8:	bf00      	nop
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
	__NOP();
 8002eb8:	bf00      	nop
}
 8002eba:	bf00      	nop
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
	__NOP();
 8002ec8:	bf00      	nop
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
	__NOP();
 8002ed8:	bf00      	nop
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt13(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt14(void){
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
	__NOP();
 8002ee8:	bf00      	nop
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
	__NOP();
 8002ef8:	bf00      	nop
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <EXTI0_IRQHandler+0x28>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <EXTI0_IRQHandler+0x28>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <EXTI0_IRQHandler+0x28>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8002f20:	f7ff ff78 	bl	8002e14 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8002f24:	e000      	b.n	8002f28 <EXTI0_IRQHandler+0x24>
		__NOP();
 8002f26:	bf00      	nop
}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013c00 	.word	0x40013c00

08002f30 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <EXTI1_IRQHandler+0x28>)
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <EXTI1_IRQHandler+0x28>)
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <EXTI1_IRQHandler+0x28>)
 8002f46:	f043 0302 	orr.w	r3, r3, #2
 8002f4a:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8002f4c:	f7ff ff6a 	bl	8002e24 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8002f50:	e000      	b.n	8002f54 <EXTI1_IRQHandler+0x24>
		__NOP();
 8002f52:	bf00      	nop
}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40013c00 	.word	0x40013c00

08002f5c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <EXTI2_IRQHandler+0x28>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <EXTI2_IRQHandler+0x28>)
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <EXTI2_IRQHandler+0x28>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8002f78:	f7ff ff5c 	bl	8002e34 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8002f7c:	e000      	b.n	8002f80 <EXTI2_IRQHandler+0x24>
		__NOP();
 8002f7e:	bf00      	nop
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40013c00 	.word	0x40013c00

08002f88 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <EXTI3_IRQHandler+0x28>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <EXTI3_IRQHandler+0x28>)
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <EXTI3_IRQHandler+0x28>)
 8002f9e:	f043 0308 	orr.w	r3, r3, #8
 8002fa2:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8002fa4:	f7ff ff4e 	bl	8002e44 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8002fa8:	e000      	b.n	8002fac <EXTI3_IRQHandler+0x24>
		__NOP();
 8002faa:	bf00      	nop
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40013c00 	.word	0x40013c00

08002fb4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <EXTI4_IRQHandler+0x28>)
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <EXTI4_IRQHandler+0x28>)
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <EXTI4_IRQHandler+0x28>)
 8002fca:	f043 0310 	orr.w	r3, r3, #16
 8002fce:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8002fd0:	f7ff ff40 	bl	8002e54 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8002fd4:	e000      	b.n	8002fd8 <EXTI4_IRQHandler+0x24>
		__NOP();
 8002fd6:	bf00      	nop
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8002fe4:	4b26      	ldr	r3, [pc, #152]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	4a22      	ldr	r2, [pc, #136]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8002ff6:	f043 0320 	orr.w	r3, r3, #32
 8002ffa:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8002ffc:	f7ff ff32 	bl	8002e64 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8003000:	e03c      	b.n	800307c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8003002:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8003014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003018:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800301a:	f7ff ff2b 	bl	8002e74 <callback_extInt6>
}
 800301e:	e02d      	b.n	800307c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8003032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003036:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8003038:	f7ff ff24 	bl	8002e84 <callback_extInt7>
}
 800303c:	e01e      	b.n	800307c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d008      	beq.n	800305c <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003054:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8003056:	f7ff ff1d 	bl	8002e94 <callback_extInt8>
}
 800305a:	e00f      	b.n	800307c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <EXTI9_5_IRQHandler+0xa0>)
 800306e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003072:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8003074:	f7ff ff16 	bl	8002ea4 <callback_extInt9>
}
 8003078:	e000      	b.n	800307c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800307a:	bf00      	nop
}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40013c00 	.word	0x40013c00

08003084 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8003088:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 800309a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309e:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80030a0:	f7ff ff08 	bl	8002eb4 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80030a4:	e04b      	b.n	800313e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80030b2:	4b24      	ldr	r3, [pc, #144]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4a23      	ldr	r2, [pc, #140]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030bc:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80030be:	f7ff ff01 	bl	8002ec4 <callback_extInt11>
}
 80030c2:	e03c      	b.n	800313e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030da:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 80030dc:	f7ff fefa 	bl	8002ed4 <callback_extInt12>
}
 80030e0:	e02d      	b.n	800313e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 80030e2:	4b18      	ldr	r3, [pc, #96]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	4a14      	ldr	r2, [pc, #80]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 80030f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030f8:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 80030fa:	f7fe f99b 	bl	8001434 <callback_extInt13>
}
 80030fe:	e01e      	b.n	800313e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 800310c:	4b0d      	ldr	r3, [pc, #52]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 8003112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003116:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8003118:	f7ff fee4 	bl	8002ee4 <callback_extInt14>
}
 800311c:	e00f      	b.n	800313e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <EXTI15_10_IRQHandler+0xc0>)
 8003130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003134:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8003136:	f7ff fedd 	bl	8002ef4 <callback_extInt15>
}
 800313a:	e000      	b.n	800313e <EXTI15_10_IRQHandler+0xba>
		__NOP();
 800313c:	bf00      	nop
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40013c00 	.word	0x40013c00

08003148 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	4608      	mov	r0, r1
 8003152:	4611      	mov	r1, r2
 8003154:	461a      	mov	r2, r3
 8003156:	4603      	mov	r3, r0
 8003158:	70fb      	strb	r3, [r7, #3]
 800315a:	460b      	mov	r3, r1
 800315c:	70bb      	strb	r3, [r7, #2]
 800315e:	4613      	mov	r3, r2
 8003160:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	78ba      	ldrb	r2, [r7, #2]
 800316c:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	787a      	ldrb	r2, [r7, #1]
 8003172:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7c3a      	ldrb	r2, [r7, #16]
 8003178:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7d3a      	ldrb	r2, [r7, #20]
 800317e:	715a      	strb	r2, [r3, #5]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a88      	ldr	r2, [pc, #544]	; (80033c4 <GPIO_Config+0x238>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d106      	bne.n	80031b4 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <GPIO_Config+0x23c>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	4a87      	ldr	r2, [pc, #540]	; (80033c8 <GPIO_Config+0x23c>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6313      	str	r3, [r2, #48]	; 0x30
 80031b2:	e03a      	b.n	800322a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a84      	ldr	r2, [pc, #528]	; (80033cc <GPIO_Config+0x240>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d106      	bne.n	80031cc <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 80031be:	4b82      	ldr	r3, [pc, #520]	; (80033c8 <GPIO_Config+0x23c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a81      	ldr	r2, [pc, #516]	; (80033c8 <GPIO_Config+0x23c>)
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	e02e      	b.n	800322a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a7f      	ldr	r2, [pc, #508]	; (80033d0 <GPIO_Config+0x244>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d106      	bne.n	80031e4 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 80031d6:	4b7c      	ldr	r3, [pc, #496]	; (80033c8 <GPIO_Config+0x23c>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a7b      	ldr	r2, [pc, #492]	; (80033c8 <GPIO_Config+0x23c>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	e022      	b.n	800322a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a7a      	ldr	r2, [pc, #488]	; (80033d4 <GPIO_Config+0x248>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d106      	bne.n	80031fc <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <GPIO_Config+0x23c>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a75      	ldr	r2, [pc, #468]	; (80033c8 <GPIO_Config+0x23c>)
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	e016      	b.n	800322a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a75      	ldr	r2, [pc, #468]	; (80033d8 <GPIO_Config+0x24c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d106      	bne.n	8003214 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8003206:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <GPIO_Config+0x23c>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a6f      	ldr	r2, [pc, #444]	; (80033c8 <GPIO_Config+0x23c>)
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	e00a      	b.n	800322a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a70      	ldr	r2, [pc, #448]	; (80033dc <GPIO_Config+0x250>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d105      	bne.n	800322a <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 800321e:	4b6a      	ldr	r3, [pc, #424]	; (80033c8 <GPIO_Config+0x23c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <GPIO_Config+0x23c>)
 8003224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003228:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2103      	movs	r1, #3
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	4619      	mov	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	400a      	ands	r2, r1
 8003258:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	789b      	ldrb	r3, [r3, #2]
 800326e:	461a      	mov	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	4619      	mov	r1, r3
 8003286:	2301      	movs	r3, #1
 8003288:	408b      	lsls	r3, r1
 800328a:	43db      	mvns	r3, r3
 800328c:	4619      	mov	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	400a      	ands	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	78db      	ldrb	r3, [r3, #3]
 80032aa:	461a      	mov	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	2103      	movs	r1, #3
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	400a      	ands	r2, r1
 80032d4:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	6899      	ldr	r1, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	791b      	ldrb	r3, [r3, #4]
 80032ea:	461a      	mov	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	2103      	movs	r1, #3
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	4619      	mov	r1, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	400a      	ands	r2, r1
 8003314:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	68d9      	ldr	r1, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	430a      	orrs	r2, r1
 8003324:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	785b      	ldrb	r3, [r3, #1]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d143      	bne.n	80033b6 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b07      	cmp	r3, #7
 8003334:	d81f      	bhi.n	8003376 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	210f      	movs	r1, #15
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	4619      	mov	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	400a      	ands	r2, r1
 8003356:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	795b      	ldrb	r3, [r3, #5]
 8003362:	4619      	mov	r1, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	4619      	mov	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	430a      	orrs	r2, r1
 8003372:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8003374:	e01f      	b.n	80033b6 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	3b08      	subs	r3, #8
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003386:	210f      	movs	r1, #15
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	4619      	mov	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	400a      	ands	r2, r1
 8003398:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	795b      	ldrb	r3, [r3, #5]
 80033a4:	4619      	mov	r1, r3
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40020000 	.word	0x40020000
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021c00 	.word	0x40021c00

080033e0 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10d      	bne.n	800340e <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4619      	mov	r1, r3
 80033fe:	2301      	movs	r3, #1
 8003400:	408b      	lsls	r3, r1
 8003402:	4619      	mov	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	430a      	orrs	r2, r1
 800340a:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 800340c:	e00d      	b.n	800342a <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	3310      	adds	r3, #16
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	4619      	mov	r1, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	430a      	orrs	r2, r1
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	695a      	ldr	r2, [r3, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	4619      	mov	r1, r3
 800344a:	2301      	movs	r3, #1
 800344c:	408b      	lsls	r3, r1
 800344e:	4619      	mov	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	404a      	eors	r2, r1
 8003456:	615a      	str	r2, [r3, #20]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 800346c:	f000 fa1e 	bl	80038ac <getClockAPB1>
 8003470:	4603      	mov	r3, r0
 8003472:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a60      	ldr	r2, [pc, #384]	; (80035fc <i2c_Config+0x198>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d106      	bne.n	800348c <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800347e:	4b60      	ldr	r3, [pc, #384]	; (8003600 <i2c_Config+0x19c>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a5f      	ldr	r2, [pc, #380]	; (8003600 <i2c_Config+0x19c>)
 8003484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	e016      	b.n	80034ba <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a5c      	ldr	r2, [pc, #368]	; (8003604 <i2c_Config+0x1a0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d106      	bne.n	80034a4 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8003496:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <i2c_Config+0x19c>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	4a59      	ldr	r2, [pc, #356]	; (8003600 <i2c_Config+0x19c>)
 800349c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034a0:	6413      	str	r3, [r2, #64]	; 0x40
 80034a2:	e00a      	b.n	80034ba <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a57      	ldr	r2, [pc, #348]	; (8003608 <i2c_Config+0x1a4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d105      	bne.n	80034ba <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80034ae:	4b54      	ldr	r3, [pc, #336]	; (8003600 <i2c_Config+0x19c>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a53      	ldr	r2, [pc, #332]	; (8003600 <i2c_Config+0x19c>)
 80034b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034c8:	601a      	str	r2, [r3, #0]
	__NOP();
 80034ca:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034da:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80034ea:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2200      	movs	r2, #0
 8003512:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	795b      	ldrb	r3, [r3, #5]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d121      	bne.n	8003560 <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800352a:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	b29b      	uxth	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	0092      	lsls	r2, r2, #2
 8003534:	4413      	add	r3, r2
 8003536:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69d9      	ldr	r1, [r3, #28]
 800353e:	89ba      	ldrh	r2, [r7, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	3301      	adds	r3, #1
 800354c:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a19      	ldr	r1, [r3, #32]
 8003554:	7afa      	ldrb	r2, [r7, #11]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	621a      	str	r2, [r3, #32]
 800355e:	e039      	b.n	80035d4 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800356e:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357e:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	4a20      	ldr	r2, [pc, #128]	; (800360c <i2c_Config+0x1a8>)
 800358c:	fb82 1203 	smull	r1, r2, r2, r3
 8003590:	1192      	asrs	r2, r2, #6
 8003592:	17db      	asrs	r3, r3, #31
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	69d9      	ldr	r1, [r3, #28]
 800359e:	89ba      	ldrh	r2, [r7, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4a17      	ldr	r2, [pc, #92]	; (8003610 <i2c_Config+0x1ac>)
 80035b4:	fb82 1203 	smull	r1, r2, r2, r3
 80035b8:	1192      	asrs	r2, r2, #6
 80035ba:	17db      	asrs	r3, r3, #31
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a19      	ldr	r1, [r3, #32]
 80035ca:	7afa      	ldrb	r2, [r7, #11]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
}
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40005400 	.word	0x40005400
 8003600:	40023800 	.word	0x40023800
 8003604:	40005800 	.word	0x40005800
 8003608:	40005c00 	.word	0x40005c00
 800360c:	057619f1 	.word	0x057619f1
 8003610:	10624dd3 	.word	0x10624dd3

08003614 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 800361c:	e000      	b.n	8003620 <i2c_StartTrasaction+0xc>
	{
		__NOP();
 800361e:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f7      	bne.n	800361e <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363c:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800363e:	e000      	b.n	8003642 <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8003640:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f7      	beq.n	8003640 <i2c_StartTrasaction+0x2c>
	}
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003674:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8003676:	e000      	b.n	800367a <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 8003678:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f7      	beq.n	8003678 <i2c_ReStartTrasaction+0x1a>
	}
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	460b      	mov	r3, r1
 80036a0:	70fb      	strb	r3, [r7, #3]
 80036a2:	4613      	mov	r3, r2
 80036a4:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	005a      	lsls	r2, r3, #1
 80036ae:	78bb      	ldrb	r3, [r7, #2]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 80036b8:	e000      	b.n	80036bc <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 80036ba:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f7      	beq.n	80036ba <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	73fb      	strb	r3, [r7, #15]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 80036fa:	e000      	b.n	80036fe <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 80036fc:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f7      	beq.n	80036fc <i2c_SendMemoryAddress+0x16>
	}
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	460b      	mov	r3, r1
 8003724:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 800372e:	e000      	b.n	8003732 <i2c_SendDataByte+0x18>
	{
		__NOP();
 8003730:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f7      	beq.n	8003730 <i2c_SendDataByte+0x16>
	}
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8003756:	e000      	b.n	800375a <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8003758:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f7      	beq.n	8003758 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	799b      	ldrb	r3, [r3, #6]
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379a:	601a      	str	r2, [r3, #0]

}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff ff19 	bl	8003614 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	791b      	ldrb	r3, [r3, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff53 	bl	8003696 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff76 	bl	80036e6 <i2c_SendMemoryAddress>

	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff ff2f 	bl	800365e <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	791b      	ldrb	r3, [r3, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff44 	bl	8003696 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff9d 	bl	800374e <i2c_ReadDataByte>
 8003814:	4603      	mov	r3, r0
 8003816:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffb3 	bl	8003784 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffc2 	bl	80037a8 <i2c_StopTrasaction>

	return auxRead;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	70fb      	strb	r3, [r7, #3]
 800383a:	4613      	mov	r3, r2
 800383c:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff fee8 	bl	8003614 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	791b      	ldrb	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff22 	bl	8003696 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ff45 	bl	80036e6 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 800385c:	78bb      	ldrb	r3, [r7, #2]
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff5a 	bl	800371a <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ff9e 	bl	80037a8 <i2c_StopTrasaction>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <getConfigPLL+0x30>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d103      	bne.n	8003892 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <getConfigPLL+0x34>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	71fb      	strb	r3, [r7, #7]
 8003890:	e001      	b.n	8003896 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8003892:	2310      	movs	r3, #16
 8003894:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8003896:	79fb      	ldrb	r3, [r7, #7]
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40023800 	.word	0x40023800
 80038a8:	2000034c 	.word	0x2000034c

080038ac <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80038b2:	f7ff ffdf 	bl	8003874 <getConfigPLL>
 80038b6:	4603      	mov	r3, r0
 80038b8:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80038ba:	2300      	movs	r3, #0
 80038bc:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 80038be:	79bb      	ldrb	r3, [r7, #6]
 80038c0:	2b31      	cmp	r3, #49	; 0x31
 80038c2:	d802      	bhi.n	80038ca <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 80038c4:	79bb      	ldrb	r3, [r7, #6]
 80038c6:	71fb      	strb	r3, [r7, #7]
 80038c8:	e002      	b.n	80038d0 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	089b      	lsrs	r3, r3, #2
 80038ce:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 80038d0:	79fb      	ldrb	r3, [r7, #7]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ec:	d106      	bne.n	80038fc <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80038ee:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <pwm_Config+0x218>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	4a80      	ldr	r2, [pc, #512]	; (8003af4 <pwm_Config+0x218>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	e024      	b.n	8003946 <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a7d      	ldr	r2, [pc, #500]	; (8003af8 <pwm_Config+0x21c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d106      	bne.n	8003914 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003906:	4b7b      	ldr	r3, [pc, #492]	; (8003af4 <pwm_Config+0x218>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a7a      	ldr	r2, [pc, #488]	; (8003af4 <pwm_Config+0x218>)
 800390c:	f043 0302 	orr.w	r3, r3, #2
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	e018      	b.n	8003946 <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a78      	ldr	r2, [pc, #480]	; (8003afc <pwm_Config+0x220>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d106      	bne.n	800392c <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800391e:	4b75      	ldr	r3, [pc, #468]	; (8003af4 <pwm_Config+0x218>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a74      	ldr	r2, [pc, #464]	; (8003af4 <pwm_Config+0x218>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	e00c      	b.n	8003946 <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a73      	ldr	r2, [pc, #460]	; (8003b00 <pwm_Config+0x224>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d106      	bne.n	8003944 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003936:	4b6f      	ldr	r3, [pc, #444]	; (8003af4 <pwm_Config+0x218>)
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	4a6e      	ldr	r2, [pc, #440]	; (8003af4 <pwm_Config+0x218>)
 800393c:	f043 0308 	orr.w	r3, r3, #8
 8003940:	6413      	str	r3, [r2, #64]	; 0x40
 8003942:	e000      	b.n	8003946 <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8003944:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa4c 	bl	8003de4 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	f200 8118 	bhi.w	8003b86 <pwm_Config+0x2aa>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <pwm_Config+0x80>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	0800396d 	.word	0x0800396d
 8003960:	080039ef 	.word	0x080039ef
 8003964:	08003a71 	.word	0x08003a71
 8003968:	08003b05 	.word	0x08003b05
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f022 0203 	bic.w	r2, r2, #3
 800397a:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800398a:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800399a:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f022 0208 	bic.w	r2, r2, #8
 80039aa:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f022 0204 	bic.w	r2, r2, #4
 80039ca:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f042 0204 	orr.w	r2, r2, #4
 80039da:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ea:	619a      	str	r2, [r3, #24]

		break;
 80039ec:	e0cc      	b.n	8003b88 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f022 0203 	bic.w	r2, r2, #3
 80039fc:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	699a      	ldr	r2, [r3, #24]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a0c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003a1c:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a3c:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	699a      	ldr	r2, [r3, #24]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a5c:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6c:	619a      	str	r2, [r3, #24]

		break;
 8003a6e:	e08b      	b.n	8003b88 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f022 0203 	bic.w	r2, r2, #3
 8003a7e:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a8e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003a9e:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f022 0208 	bic.w	r2, r2, #8
 8003aae:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f042 0208 	orr.w	r2, r2, #8
 8003abe:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f022 0204 	bic.w	r2, r2, #4
 8003ace:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f042 0204 	orr.w	r2, r2, #4
 8003ade:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aee:	61da      	str	r2, [r3, #28]

		break;
 8003af0:	e04a      	b.n	8003b88 <pwm_Config+0x2ac>
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800
 8003b00:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b12:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b22:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003b32:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b42:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b52:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b62:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b72:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b82:	61da      	str	r2, [r3, #28]

		break;
 8003b84:	e000      	b.n	8003b88 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8003b86:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f896 	bl	8003cc0 <statusPolarityPWM>

}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d87f      	bhi.n	8003cb0 <statusInOutPWM+0x114>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <statusInOutPWM+0x1c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003c03 	.word	0x08003c03
 8003bc0:	08003c3d 	.word	0x08003c3d
 8003bc4:	08003c77 	.word	0x08003c77
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d110      	bne.n	8003bf0 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8003bee:	e060      	b.n	8003cb2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	6a1a      	ldr	r2, [r3, #32]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	621a      	str	r2, [r3, #32]
		break;
 8003c00:	e057      	b.n	8003cb2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d110      	bne.n	8003c2a <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	6a1a      	ldr	r2, [r3, #32]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f022 0210 	bic.w	r2, r2, #16
 8003c16:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f042 0210 	orr.w	r2, r2, #16
 8003c26:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8003c28:	e043      	b.n	8003cb2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	6a1a      	ldr	r2, [r3, #32]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f022 0210 	bic.w	r2, r2, #16
 8003c38:	621a      	str	r2, [r3, #32]
		break;
 8003c3a:	e03a      	b.n	8003cb2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d110      	bne.n	8003c64 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c50:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c60:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8003c62:	e026      	b.n	8003cb2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	6a1a      	ldr	r2, [r3, #32]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c72:	621a      	str	r2, [r3, #32]
		break;
 8003c74:	e01d      	b.n	8003cb2 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d110      	bne.n	8003c9e <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c8a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	6a1a      	ldr	r2, [r3, #32]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c9a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8003c9c:	e009      	b.n	8003cb2 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cac:	621a      	str	r2, [r3, #32]
		break;
 8003cae:	e000      	b.n	8003cb2 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8003cb0:	bf00      	nop
	}
	}
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop

08003cc0 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d87f      	bhi.n	8003dd4 <statusPolarityPWM+0x114>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <statusPolarityPWM+0x1c>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003d27 	.word	0x08003d27
 8003ce4:	08003d61 	.word	0x08003d61
 8003ce8:	08003d9b 	.word	0x08003d9b
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d110      	bne.n	8003d14 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f022 0202 	bic.w	r2, r2, #2
 8003d00:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f042 0202 	orr.w	r2, r2, #2
 8003d10:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8003d12:	e060      	b.n	8003dd6 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f022 0202 	bic.w	r2, r2, #2
 8003d22:	621a      	str	r2, [r3, #32]
		break;
 8003d24:	e057      	b.n	8003dd6 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d110      	bne.n	8003d4e <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	6a1a      	ldr	r2, [r3, #32]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f022 0220 	bic.w	r2, r2, #32
 8003d3a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8003d4c:	e043      	b.n	8003dd6 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	6a1a      	ldr	r2, [r3, #32]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f022 0220 	bic.w	r2, r2, #32
 8003d5c:	621a      	str	r2, [r3, #32]
		break;
 8003d5e:	e03a      	b.n	8003dd6 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d110      	bne.n	8003d88 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	6a1a      	ldr	r2, [r3, #32]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d74:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d84:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8003d86:	e026      	b.n	8003dd6 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d96:	621a      	str	r2, [r3, #32]
		break;
 8003d98:	e01d      	b.n	8003dd6 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d110      	bne.n	8003dc2 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dae:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	6a1a      	ldr	r2, [r3, #32]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dbe:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8003dc0:	e009      	b.n	8003dd6 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	6a1a      	ldr	r2, [r3, #32]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd0:	621a      	str	r2, [r3, #32]
		break;
 8003dd2:	e000      	b.n	8003dd6 <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8003dd4:	bf00      	nop
	}
	}

}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop

08003de4 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d823      	bhi.n	8003e3c <setDuttyCycle+0x58>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <setDuttyCycle+0x18>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e19 	.word	0x08003e19
 8003e04:	08003e25 	.word	0x08003e25
 8003e08:	08003e31 	.word	0x08003e31
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	885a      	ldrh	r2, [r3, #2]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003e16:	e012      	b.n	8003e3e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	885a      	ldrh	r2, [r3, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003e22:	e00c      	b.n	8003e3e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	885a      	ldrh	r2, [r3, #2]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003e2e:	e006      	b.n	8003e3e <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	885a      	ldrh	r2, [r3, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003e3a:	e000      	b.n	8003e3e <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8003e3c:	bf00      	nop
	}
	}

}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop

08003e4c <updateDuttyCycle>:


//Actualizacion del Dutty sin porcentaje
void updateDuttyCycle(PWM_Handler_t *prtPwmHandler, uint16_t newDutty)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = newDutty;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff ffc0 	bl	8003de4 <setDuttyCycle>
}
 8003e64:	bf00      	nop
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <__NVIC_EnableIRQ>:
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	db0b      	blt.n	8003e96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	f003 021f 	and.w	r2, r3, #31
 8003e84:	4907      	ldr	r1, [pc, #28]	; (8003ea4 <__NVIC_EnableIRQ+0x38>)
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000e100 	.word	0xe000e100

08003ea8 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 8003eae:	4919      	ldr	r1, [pc, #100]	; (8003f14 <config_SysTick_ms+0x6c>)
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003ebc:	f7ff fcda 	bl	8003874 <getConfigPLL>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eca:	fb03 f202 	mul.w	r2, r3, r2
 8003ece:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <config_SysTick_ms+0x70>)
 8003ed0:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 8003ed2:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <config_SysTick_ms+0x70>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <config_SysTick_ms+0x70>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0e      	ldr	r2, [pc, #56]	; (8003f18 <config_SysTick_ms+0x70>)
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee4:	b672      	cpsid	i
}
 8003ee6:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	f7ff ffbe 	bl	8003e6c <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8003ef0:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <config_SysTick_ms+0x70>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <config_SysTick_ms+0x70>)
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <config_SysTick_ms+0x70>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <config_SysTick_ms+0x70>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f08:	b662      	cpsie	i
}
 8003f0a:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000350 	.word	0x20000350
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <getTicksMs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksMs(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
	return ticks;
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <getTicksMs+0x18>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000350 	.word	0x20000350

08003f38 <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <SysTick_Handler+0x38>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <SysTick_Handler+0x38>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <SysTick_Handler+0x38>)
 8003f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f52:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8003f54:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <SysTick_Handler+0x3c>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	1c50      	adds	r0, r2, #1
 8003f5c:	f143 0100 	adc.w	r1, r3, #0
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <SysTick_Handler+0x3c>)
 8003f62:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8003f66:	bf00      	nop
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000e010 	.word	0xe000e010
 8003f74:	20000350 	.word	0x20000350

08003f78 <__NVIC_EnableIRQ>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	db0b      	blt.n	8003fa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	f003 021f 	and.w	r2, r3, #31
 8003f90:	4907      	ldr	r1, [pc, #28]	; (8003fb0 <__NVIC_EnableIRQ+0x38>)
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	2001      	movs	r0, #1
 8003f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	e000e100 	.word	0xe000e100

08003fb4 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a8f      	ldr	r2, [pc, #572]	; (8004200 <USART_Config+0x24c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d107      	bne.n	8003fd6 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8003fc6:	4b8f      	ldr	r3, [pc, #572]	; (8004204 <USART_Config+0x250>)
 8003fc8:	2210      	movs	r2, #16
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a8d      	ldr	r2, [pc, #564]	; (8004208 <USART_Config+0x254>)
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e019      	b.n	800400a <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4a8c      	ldr	r2, [pc, #560]	; (800420c <USART_Config+0x258>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d108      	bne.n	8003ff2 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8003fe0:	4b88      	ldr	r3, [pc, #544]	; (8004204 <USART_Config+0x250>)
 8003fe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a88      	ldr	r2, [pc, #544]	; (8004210 <USART_Config+0x25c>)
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	e00b      	b.n	800400a <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	4a87      	ldr	r2, [pc, #540]	; (8004214 <USART_Config+0x260>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d106      	bne.n	800400a <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8003ffc:	4b81      	ldr	r3, [pc, #516]	; (8004204 <USART_Config+0x250>)
 8003ffe:	2220      	movs	r2, #32
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	4a84      	ldr	r2, [pc, #528]	; (8004218 <USART_Config+0x264>)
 8004008:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2200      	movs	r2, #0
 8004018:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	789b      	ldrb	r3, [r3, #2]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d03d      	beq.n	800409e <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004040:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004050:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004060:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	789b      	ldrb	r3, [r3, #2]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d110      	bne.n	800408c <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004078:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e018      	b.n	80040be <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	e00f      	b.n	80040be <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040bc:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	78db      	ldrb	r3, [r3, #3]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d84c      	bhi.n	8004160 <USART_Config+0x1ac>
 80040c6:	a201      	add	r2, pc, #4	; (adr r2, 80040cc <USART_Config+0x118>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	0800411d 	.word	0x0800411d
 80040d8:	0800413f 	.word	0x0800413f
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80040ea:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	6912      	ldr	r2, [r2, #16]
 80040f6:	611a      	str	r2, [r3, #16]
		break;
 80040f8:	e041      	b.n	800417e <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004108:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004118:	611a      	str	r2, [r3, #16]
		break;
 800411a:	e030      	b.n	800417e <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800412a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800413a:	611a      	str	r2, [r3, #16]
		break;
 800413c:	e01f      	b.n	800417e <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800414c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800415c:	611a      	str	r2, [r3, #16]
		break;
 800415e:	e00e      	b.n	800417e <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800416e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	6912      	ldr	r2, [r2, #16]
 800417a:	611a      	str	r2, [r3, #16]
		break;
 800417c:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <USART_Config+0x258>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d104      	bne.n	8004196 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 800418c:	f7ff fb8e 	bl	80038ac <getClockAPB1>
 8004190:	4603      	mov	r3, r0
 8004192:	73fb      	strb	r3, [r7, #15]
 8004194:	e003      	b.n	800419e <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8004196:	f7ff fb6d 	bl	8003874 <getConfigPLL>
 800419a:	4603      	mov	r3, r0
 800419c:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	785b      	ldrb	r3, [r3, #1]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f91f 	bl	80043f0 <getValueBaudRate>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	e02f      	b.n	800421e <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d10b      	bne.n	80041de <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f90f 	bl	80043f0 <getValueBaudRate>
 80041d2:	4603      	mov	r3, r0
 80041d4:	461a      	mov	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	e01f      	b.n	800421e <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d11a      	bne.n	800421c <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f8ff 	bl	80043f0 <getValueBaudRate>
 80041f2:	4603      	mov	r3, r0
 80041f4:	461a      	mov	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	e00f      	b.n	800421e <USART_Config+0x26a>
 80041fe:	bf00      	nop
 8004200:	40011000 	.word	0x40011000
 8004204:	40023800 	.word	0x40023800
 8004208:	20000358 	.word	0x20000358
 800420c:	40004400 	.word	0x40004400
 8004210:	2000035c 	.word	0x2000035c
 8004214:	40011400 	.word	0x40011400
 8004218:	20000360 	.word	0x20000360
	}
	else
	{
		__NOP();
 800421c:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d866      	bhi.n	80042f4 <USART_Config+0x340>
 8004226:	a201      	add	r2, pc, #4	; (adr r2, 800422c <USART_Config+0x278>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800423d 	.word	0x0800423d
 8004230:	0800425f 	.word	0x0800425f
 8004234:	08004281 	.word	0x08004281
 8004238:	080042c3 	.word	0x080042c3
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f022 0208 	bic.w	r2, r2, #8
 800424a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f042 0208 	orr.w	r2, r2, #8
 800425a:	60da      	str	r2, [r3, #12]

		break;
 800425c:	e063      	b.n	8004326 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f022 0204 	bic.w	r2, r2, #4
 800426c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f042 0204 	orr.w	r2, r2, #4
 800427c:	60da      	str	r2, [r3, #12]

		break;
 800427e:	e052      	b.n	8004326 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f022 0208 	bic.w	r2, r2, #8
 800428e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f042 0208 	orr.w	r2, r2, #8
 800429e:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f042 0204 	orr.w	r2, r2, #4
 80042be:	60da      	str	r2, [r3, #12]


		break;
 80042c0:	e031      	b.n	8004326 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f022 0208 	bic.w	r2, r2, #8
 80042e0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f022 0204 	bic.w	r2, r2, #4
 80042f0:	60da      	str	r2, [r3, #12]
		break;
 80042f2:	e018      	b.n	8004326 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004302:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f022 0208 	bic.w	r2, r2, #8
 8004312:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	60da      	str	r2, [r3, #12]
		break;
 8004324:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8004326:	b672      	cpsid	i
}
 8004328:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	791b      	ldrb	r3, [r3, #4]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d110      	bne.n	8004354 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f022 0220 	bic.w	r2, r2, #32
 8004340:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f042 0220 	orr.w	r2, r2, #32
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	e007      	b.n	8004364 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f022 0220 	bic.w	r2, r2, #32
 8004362:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	791b      	ldrb	r3, [r3, #4]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d003      	beq.n	8004374 <USART_Config+0x3c0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	795b      	ldrb	r3, [r3, #5]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d11a      	bne.n	80043aa <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <USART_Config+0x430>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d103      	bne.n	8004386 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 800437e:	2025      	movs	r0, #37	; 0x25
 8004380:	f7ff fdfa 	bl	8003f78 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004384:	e013      	b.n	80043ae <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	4a17      	ldr	r2, [pc, #92]	; (80043e8 <USART_Config+0x434>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004390:	2026      	movs	r0, #38	; 0x26
 8004392:	f7ff fdf1 	bl	8003f78 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004396:	e00a      	b.n	80043ae <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <USART_Config+0x438>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d105      	bne.n	80043ae <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80043a2:	2047      	movs	r0, #71	; 0x47
 80043a4:	f7ff fde8 	bl	8003f78 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80043a8:	e001      	b.n	80043ae <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80043aa:	bf00      	nop
 80043ac:	e000      	b.n	80043b0 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80043ae:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80043b0:	b662      	cpsie	i
}
 80043b2:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d00f      	beq.n	80043dc <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ca:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043da:	60da      	str	r2, [r3, #12]
	}
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40011000 	.word	0x40011000
 80043e8:	40004400 	.word	0x40004400
 80043ec:	40011400 	.word	0x40011400

080043f0 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 80043f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80043f4:	b086      	sub	sp, #24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	4601      	mov	r1, r0
 80043fc:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 80043fe:	79f9      	ldrb	r1, [r7, #7]
 8004400:	2000      	movs	r0, #0
 8004402:	460a      	mov	r2, r1
 8004404:	4603      	mov	r3, r0
 8004406:	491f      	ldr	r1, [pc, #124]	; (8004484 <getValueBaudRate+0x94>)
 8004408:	fb01 f003 	mul.w	r0, r1, r3
 800440c:	2102      	movs	r1, #2
 800440e:	fb02 f101 	mul.w	r1, r2, r1
 8004412:	4401      	add	r1, r0
 8004414:	481b      	ldr	r0, [pc, #108]	; (8004484 <getValueBaudRate+0x94>)
 8004416:	fba2 4500 	umull	r4, r5, r2, r0
 800441a:	194b      	adds	r3, r1, r5
 800441c:	461d      	mov	r5, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	2200      	movs	r2, #0
 8004424:	4698      	mov	r8, r3
 8004426:	4691      	mov	r9, r2
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	4620      	mov	r0, r4
 800442e:	4629      	mov	r1, r5
 8004430:	f7fc fc32 	bl	8000c98 <__aeabi_ldivmod>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4613      	mov	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4a12      	ldr	r2, [pc, #72]	; (8004488 <getValueBaudRate+0x98>)
 8004440:	fba2 2303 	umull	r2, r3, r2, r3
 8004444:	0b5b      	lsrs	r3, r3, #13
 8004446:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f242 7210 	movw	r2, #10000	; 0x2710
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <getValueBaudRate+0x98>)
 8004460:	fba2 2303 	umull	r2, r3, r2, r3
 8004464:	0a5b      	lsrs	r3, r3, #9
 8004466:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	b29b      	uxth	r3, r3
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	b29a      	uxth	r2, r3
 8004470:	7afb      	ldrb	r3, [r7, #11]
 8004472:	b29b      	uxth	r3, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	813b      	strh	r3, [r7, #8]

    return value;
 8004478:	893b      	ldrh	r3, [r7, #8]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004484:	540be400 	.word	0x540be400
 8004488:	d1b71759 	.word	0xd1b71759

0800448c <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004498:	e000      	b.n	800449c <writeChar+0x10>
	{
		__NOP();
 800449a:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f7      	beq.n	800449a <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	605a      	str	r2, [r3, #4]

}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 80044cc:	e00a      	b.n	80044e4 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff ffd7 	bl	800448c <writeChar>
		i++;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	3301      	adds	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ee      	bne.n	80044ce <writeMsg+0x10>
	}
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
	return auxRxData;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <getRxData+0x14>)
 8004502:	781b      	ldrb	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000364 	.word	0x20000364

08004514 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10c      	bne.n	8004540 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800453e:	e005      	b.n	800454c <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
	__NOP();
 800455c:	bf00      	nop
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
	__NOP();
 800456c:	bf00      	nop
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 800457c:	4b37      	ldr	r3, [pc, #220]	; (800465c <USART1_IRQHandler+0xe4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800458a:	4b34      	ldr	r3, [pc, #208]	; (800465c <USART1_IRQHandler+0xe4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4b33      	ldr	r3, [pc, #204]	; (8004660 <USART1_IRQHandler+0xe8>)
 8004594:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8004596:	f7ff ffdf 	bl	8004558 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 800459a:	e05d      	b.n	8004658 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 800459c:	4b2f      	ldr	r3, [pc, #188]	; (800465c <USART1_IRQHandler+0xe4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d055      	beq.n	8004656 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80045aa:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <USART1_IRQHandler+0xec>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 80045b2:	4b2d      	ldr	r3, [pc, #180]	; (8004668 <USART1_IRQHandler+0xf0>)
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	4b29      	ldr	r3, [pc, #164]	; (800465c <USART1_IRQHandler+0xe4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80045bc:	4b27      	ldr	r3, [pc, #156]	; (800465c <USART1_IRQHandler+0xe4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ffa6 	bl	8004514 <interruptionTX>
}
 80045c8:	e046      	b.n	8004658 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <USART1_IRQHandler+0xec>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d142      	bne.n	8004658 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <USART1_IRQHandler+0xf4>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <USART1_IRQHandler+0xf8>)
 80045da:	5c9b      	ldrb	r3, [r3, r2]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 80045e0:	4b22      	ldr	r3, [pc, #136]	; (800466c <USART1_IRQHandler+0xf4>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	4b22      	ldr	r3, [pc, #136]	; (8004670 <USART1_IRQHandler+0xf8>)
 80045e8:	5c9a      	ldrb	r2, [r3, r2]
 80045ea:	4b1c      	ldr	r3, [pc, #112]	; (800465c <USART1_IRQHandler+0xe4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	605a      	str	r2, [r3, #4]
				posChar++;
 80045f0:	4b1e      	ldr	r3, [pc, #120]	; (800466c <USART1_IRQHandler+0xf4>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	4b1c      	ldr	r3, [pc, #112]	; (800466c <USART1_IRQHandler+0xf4>)
 80045fa:	701a      	strb	r2, [r3, #0]
}
 80045fc:	e02c      	b.n	8004658 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <USART1_IRQHandler+0xfc>)
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <USART1_IRQHandler+0x100>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d215      	bcs.n	8004636 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800460a:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <USART1_IRQHandler+0xfc>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	2364      	movs	r3, #100	; 0x64
 8004612:	fb02 f303 	mul.w	r3, r2, r3
 8004616:	4a19      	ldr	r2, [pc, #100]	; (800467c <USART1_IRQHandler+0x104>)
 8004618:	4413      	add	r3, r2
 800461a:	4619      	mov	r1, r3
 800461c:	4814      	ldr	r0, [pc, #80]	; (8004670 <USART1_IRQHandler+0xf8>)
 800461e:	f000 ffe9 	bl	80055f4 <siprintf>
					posChar = 0;
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <USART1_IRQHandler+0xf4>)
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <USART1_IRQHandler+0xfc>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	b2da      	uxtb	r2, r3
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <USART1_IRQHandler+0xfc>)
 8004632:	701a      	strb	r2, [r3, #0]
}
 8004634:	e010      	b.n	8004658 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <USART1_IRQHandler+0xe4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2100      	movs	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff ff69 	bl	8004514 <interruptionTX>
					posChar = 0;
 8004642:	4b0a      	ldr	r3, [pc, #40]	; (800466c <USART1_IRQHandler+0xf4>)
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <USART1_IRQHandler+0xfc>)
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800464e:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <USART1_IRQHandler+0x100>)
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
}
 8004654:	e000      	b.n	8004658 <USART1_IRQHandler+0xe0>
		__NOP();
 8004656:	bf00      	nop
}
 8004658:	bf00      	nop
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000358 	.word	0x20000358
 8004660:	20000364 	.word	0x20000364
 8004664:	20000b9f 	.word	0x20000b9f
 8004668:	20000365 	.word	0x20000365
 800466c:	20000b9e 	.word	0x20000b9e
 8004670:	20000368 	.word	0x20000368
 8004674:	20000b9d 	.word	0x20000b9d
 8004678:	20000b9c 	.word	0x20000b9c
 800467c:	200003cc 	.word	0x200003cc

08004680 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8004684:	4b37      	ldr	r3, [pc, #220]	; (8004764 <USART2_IRQHandler+0xe4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8004692:	4b34      	ldr	r3, [pc, #208]	; (8004764 <USART2_IRQHandler+0xe4>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	4b33      	ldr	r3, [pc, #204]	; (8004768 <USART2_IRQHandler+0xe8>)
 800469c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 800469e:	f7fc feb1 	bl	8001404 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 80046a2:	e05d      	b.n	8004760 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 80046a4:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <USART2_IRQHandler+0xe4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d055      	beq.n	800475e <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <USART2_IRQHandler+0xec>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <USART2_IRQHandler+0xf0>)
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <USART2_IRQHandler+0xe4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <USART2_IRQHandler+0xe4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff ff22 	bl	8004514 <interruptionTX>
}
 80046d0:	e046      	b.n	8004760 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80046d2:	4b26      	ldr	r3, [pc, #152]	; (800476c <USART2_IRQHandler+0xec>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d142      	bne.n	8004760 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80046da:	4b26      	ldr	r3, [pc, #152]	; (8004774 <USART2_IRQHandler+0xf4>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <USART2_IRQHandler+0xf8>)
 80046e2:	5c9b      	ldrb	r3, [r3, r2]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 80046e8:	4b22      	ldr	r3, [pc, #136]	; (8004774 <USART2_IRQHandler+0xf4>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	461a      	mov	r2, r3
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <USART2_IRQHandler+0xf8>)
 80046f0:	5c9a      	ldrb	r2, [r3, r2]
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <USART2_IRQHandler+0xe4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]
				posChar++;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <USART2_IRQHandler+0xf4>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <USART2_IRQHandler+0xf4>)
 8004702:	701a      	strb	r2, [r3, #0]
}
 8004704:	e02c      	b.n	8004760 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <USART2_IRQHandler+0xfc>)
 8004708:	781a      	ldrb	r2, [r3, #0]
 800470a:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <USART2_IRQHandler+0x100>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d215      	bcs.n	800473e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <USART2_IRQHandler+0xfc>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	2364      	movs	r3, #100	; 0x64
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	4a19      	ldr	r2, [pc, #100]	; (8004784 <USART2_IRQHandler+0x104>)
 8004720:	4413      	add	r3, r2
 8004722:	4619      	mov	r1, r3
 8004724:	4814      	ldr	r0, [pc, #80]	; (8004778 <USART2_IRQHandler+0xf8>)
 8004726:	f000 ff65 	bl	80055f4 <siprintf>
					posChar = 0;
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <USART2_IRQHandler+0xf4>)
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004730:	4b12      	ldr	r3, [pc, #72]	; (800477c <USART2_IRQHandler+0xfc>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <USART2_IRQHandler+0xfc>)
 800473a:	701a      	strb	r2, [r3, #0]
}
 800473c:	e010      	b.n	8004760 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <USART2_IRQHandler+0xe4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fee5 	bl	8004514 <interruptionTX>
					posChar = 0;
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <USART2_IRQHandler+0xf4>)
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <USART2_IRQHandler+0xfc>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <USART2_IRQHandler+0x100>)
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
}
 800475c:	e000      	b.n	8004760 <USART2_IRQHandler+0xe0>
		__NOP();
 800475e:	bf00      	nop
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}
 8004764:	2000035c 	.word	0x2000035c
 8004768:	20000364 	.word	0x20000364
 800476c:	20000b9f 	.word	0x20000b9f
 8004770:	20000365 	.word	0x20000365
 8004774:	20000b9e 	.word	0x20000b9e
 8004778:	20000368 	.word	0x20000368
 800477c:	20000b9d 	.word	0x20000b9d
 8004780:	20000b9c 	.word	0x20000b9c
 8004784:	200003cc 	.word	0x200003cc

08004788 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800478c:	4b37      	ldr	r3, [pc, #220]	; (800486c <USART6_IRQHandler+0xe4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800479a:	4b34      	ldr	r3, [pc, #208]	; (800486c <USART6_IRQHandler+0xe4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	4b33      	ldr	r3, [pc, #204]	; (8004870 <USART6_IRQHandler+0xe8>)
 80047a4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 80047a6:	f7ff fedf 	bl	8004568 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 80047aa:	e05d      	b.n	8004868 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 80047ac:	4b2f      	ldr	r3, [pc, #188]	; (800486c <USART6_IRQHandler+0xe4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d055      	beq.n	8004866 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <USART6_IRQHandler+0xec>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 80047c2:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <USART6_IRQHandler+0xf0>)
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <USART6_IRQHandler+0xe4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80047cc:	4b27      	ldr	r3, [pc, #156]	; (800486c <USART6_IRQHandler+0xe4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fe9e 	bl	8004514 <interruptionTX>
}
 80047d8:	e046      	b.n	8004868 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80047da:	4b26      	ldr	r3, [pc, #152]	; (8004874 <USART6_IRQHandler+0xec>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d142      	bne.n	8004868 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80047e2:	4b26      	ldr	r3, [pc, #152]	; (800487c <USART6_IRQHandler+0xf4>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <USART6_IRQHandler+0xf8>)
 80047ea:	5c9b      	ldrb	r3, [r3, r2]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00e      	beq.n	800480e <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 80047f0:	4b22      	ldr	r3, [pc, #136]	; (800487c <USART6_IRQHandler+0xf4>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <USART6_IRQHandler+0xf8>)
 80047f8:	5c9a      	ldrb	r2, [r3, r2]
 80047fa:	4b1c      	ldr	r3, [pc, #112]	; (800486c <USART6_IRQHandler+0xe4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	605a      	str	r2, [r3, #4]
				posChar++;
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <USART6_IRQHandler+0xf4>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	b2da      	uxtb	r2, r3
 8004808:	4b1c      	ldr	r3, [pc, #112]	; (800487c <USART6_IRQHandler+0xf4>)
 800480a:	701a      	strb	r2, [r3, #0]
}
 800480c:	e02c      	b.n	8004868 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <USART6_IRQHandler+0xfc>)
 8004810:	781a      	ldrb	r2, [r3, #0]
 8004812:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <USART6_IRQHandler+0x100>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d215      	bcs.n	8004846 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800481a:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <USART6_IRQHandler+0xfc>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	2364      	movs	r3, #100	; 0x64
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	4a19      	ldr	r2, [pc, #100]	; (800488c <USART6_IRQHandler+0x104>)
 8004828:	4413      	add	r3, r2
 800482a:	4619      	mov	r1, r3
 800482c:	4814      	ldr	r0, [pc, #80]	; (8004880 <USART6_IRQHandler+0xf8>)
 800482e:	f000 fee1 	bl	80055f4 <siprintf>
					posChar = 0;
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <USART6_IRQHandler+0xf4>)
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <USART6_IRQHandler+0xfc>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	b2da      	uxtb	r2, r3
 8004840:	4b10      	ldr	r3, [pc, #64]	; (8004884 <USART6_IRQHandler+0xfc>)
 8004842:	701a      	strb	r2, [r3, #0]
}
 8004844:	e010      	b.n	8004868 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <USART6_IRQHandler+0xe4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff fe61 	bl	8004514 <interruptionTX>
					posChar = 0;
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <USART6_IRQHandler+0xf4>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004858:	4b0a      	ldr	r3, [pc, #40]	; (8004884 <USART6_IRQHandler+0xfc>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <USART6_IRQHandler+0x100>)
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
}
 8004864:	e000      	b.n	8004868 <USART6_IRQHandler+0xe0>
		__NOP();
 8004866:	bf00      	nop
}
 8004868:	bf00      	nop
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000360 	.word	0x20000360
 8004870:	20000364 	.word	0x20000364
 8004874:	20000b9f 	.word	0x20000b9f
 8004878:	20000365 	.word	0x20000365
 800487c:	20000b9e 	.word	0x20000b9e
 8004880:	20000368 	.word	0x20000368
 8004884:	20000b9d 	.word	0x20000b9d
 8004888:	20000b9c 	.word	0x20000b9c
 800488c:	200003cc 	.word	0x200003cc

08004890 <__errno>:
 8004890:	4b01      	ldr	r3, [pc, #4]	; (8004898 <__errno+0x8>)
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000018 	.word	0x20000018

0800489c <__libc_init_array>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	4d0d      	ldr	r5, [pc, #52]	; (80048d4 <__libc_init_array+0x38>)
 80048a0:	4c0d      	ldr	r4, [pc, #52]	; (80048d8 <__libc_init_array+0x3c>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	2600      	movs	r6, #0
 80048a8:	42a6      	cmp	r6, r4
 80048aa:	d109      	bne.n	80048c0 <__libc_init_array+0x24>
 80048ac:	4d0b      	ldr	r5, [pc, #44]	; (80048dc <__libc_init_array+0x40>)
 80048ae:	4c0c      	ldr	r4, [pc, #48]	; (80048e0 <__libc_init_array+0x44>)
 80048b0:	f004 fc92 	bl	80091d8 <_init>
 80048b4:	1b64      	subs	r4, r4, r5
 80048b6:	10a4      	asrs	r4, r4, #2
 80048b8:	2600      	movs	r6, #0
 80048ba:	42a6      	cmp	r6, r4
 80048bc:	d105      	bne.n	80048ca <__libc_init_array+0x2e>
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c4:	4798      	blx	r3
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7ee      	b.n	80048a8 <__libc_init_array+0xc>
 80048ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ce:	4798      	blx	r3
 80048d0:	3601      	adds	r6, #1
 80048d2:	e7f2      	b.n	80048ba <__libc_init_array+0x1e>
 80048d4:	080097bc 	.word	0x080097bc
 80048d8:	080097bc 	.word	0x080097bc
 80048dc:	080097bc 	.word	0x080097bc
 80048e0:	080097c0 	.word	0x080097c0

080048e4 <memset>:
 80048e4:	4402      	add	r2, r0
 80048e6:	4603      	mov	r3, r0
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d100      	bne.n	80048ee <memset+0xa>
 80048ec:	4770      	bx	lr
 80048ee:	f803 1b01 	strb.w	r1, [r3], #1
 80048f2:	e7f9      	b.n	80048e8 <memset+0x4>

080048f4 <__cvt>:
 80048f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	ec55 4b10 	vmov	r4, r5, d0
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	460e      	mov	r6, r1
 8004900:	4619      	mov	r1, r3
 8004902:	462b      	mov	r3, r5
 8004904:	bfbb      	ittet	lt
 8004906:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800490a:	461d      	movlt	r5, r3
 800490c:	2300      	movge	r3, #0
 800490e:	232d      	movlt	r3, #45	; 0x2d
 8004910:	700b      	strb	r3, [r1, #0]
 8004912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004914:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004918:	4691      	mov	r9, r2
 800491a:	f023 0820 	bic.w	r8, r3, #32
 800491e:	bfbc      	itt	lt
 8004920:	4622      	movlt	r2, r4
 8004922:	4614      	movlt	r4, r2
 8004924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004928:	d005      	beq.n	8004936 <__cvt+0x42>
 800492a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800492e:	d100      	bne.n	8004932 <__cvt+0x3e>
 8004930:	3601      	adds	r6, #1
 8004932:	2102      	movs	r1, #2
 8004934:	e000      	b.n	8004938 <__cvt+0x44>
 8004936:	2103      	movs	r1, #3
 8004938:	ab03      	add	r3, sp, #12
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	ab02      	add	r3, sp, #8
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	ec45 4b10 	vmov	d0, r4, r5
 8004944:	4653      	mov	r3, sl
 8004946:	4632      	mov	r2, r6
 8004948:	f001 fdae 	bl	80064a8 <_dtoa_r>
 800494c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004950:	4607      	mov	r7, r0
 8004952:	d102      	bne.n	800495a <__cvt+0x66>
 8004954:	f019 0f01 	tst.w	r9, #1
 8004958:	d022      	beq.n	80049a0 <__cvt+0xac>
 800495a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800495e:	eb07 0906 	add.w	r9, r7, r6
 8004962:	d110      	bne.n	8004986 <__cvt+0x92>
 8004964:	783b      	ldrb	r3, [r7, #0]
 8004966:	2b30      	cmp	r3, #48	; 0x30
 8004968:	d10a      	bne.n	8004980 <__cvt+0x8c>
 800496a:	2200      	movs	r2, #0
 800496c:	2300      	movs	r3, #0
 800496e:	4620      	mov	r0, r4
 8004970:	4629      	mov	r1, r5
 8004972:	f7fc f8b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004976:	b918      	cbnz	r0, 8004980 <__cvt+0x8c>
 8004978:	f1c6 0601 	rsb	r6, r6, #1
 800497c:	f8ca 6000 	str.w	r6, [sl]
 8004980:	f8da 3000 	ldr.w	r3, [sl]
 8004984:	4499      	add	r9, r3
 8004986:	2200      	movs	r2, #0
 8004988:	2300      	movs	r3, #0
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	f7fc f8a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004992:	b108      	cbz	r0, 8004998 <__cvt+0xa4>
 8004994:	f8cd 900c 	str.w	r9, [sp, #12]
 8004998:	2230      	movs	r2, #48	; 0x30
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	454b      	cmp	r3, r9
 800499e:	d307      	bcc.n	80049b0 <__cvt+0xbc>
 80049a0:	9b03      	ldr	r3, [sp, #12]
 80049a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049a4:	1bdb      	subs	r3, r3, r7
 80049a6:	4638      	mov	r0, r7
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	b004      	add	sp, #16
 80049ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b0:	1c59      	adds	r1, r3, #1
 80049b2:	9103      	str	r1, [sp, #12]
 80049b4:	701a      	strb	r2, [r3, #0]
 80049b6:	e7f0      	b.n	800499a <__cvt+0xa6>

080049b8 <__exponent>:
 80049b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ba:	4603      	mov	r3, r0
 80049bc:	2900      	cmp	r1, #0
 80049be:	bfb8      	it	lt
 80049c0:	4249      	neglt	r1, r1
 80049c2:	f803 2b02 	strb.w	r2, [r3], #2
 80049c6:	bfb4      	ite	lt
 80049c8:	222d      	movlt	r2, #45	; 0x2d
 80049ca:	222b      	movge	r2, #43	; 0x2b
 80049cc:	2909      	cmp	r1, #9
 80049ce:	7042      	strb	r2, [r0, #1]
 80049d0:	dd2a      	ble.n	8004a28 <__exponent+0x70>
 80049d2:	f10d 0407 	add.w	r4, sp, #7
 80049d6:	46a4      	mov	ip, r4
 80049d8:	270a      	movs	r7, #10
 80049da:	46a6      	mov	lr, r4
 80049dc:	460a      	mov	r2, r1
 80049de:	fb91 f6f7 	sdiv	r6, r1, r7
 80049e2:	fb07 1516 	mls	r5, r7, r6, r1
 80049e6:	3530      	adds	r5, #48	; 0x30
 80049e8:	2a63      	cmp	r2, #99	; 0x63
 80049ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80049ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049f2:	4631      	mov	r1, r6
 80049f4:	dcf1      	bgt.n	80049da <__exponent+0x22>
 80049f6:	3130      	adds	r1, #48	; 0x30
 80049f8:	f1ae 0502 	sub.w	r5, lr, #2
 80049fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a00:	1c44      	adds	r4, r0, #1
 8004a02:	4629      	mov	r1, r5
 8004a04:	4561      	cmp	r1, ip
 8004a06:	d30a      	bcc.n	8004a1e <__exponent+0x66>
 8004a08:	f10d 0209 	add.w	r2, sp, #9
 8004a0c:	eba2 020e 	sub.w	r2, r2, lr
 8004a10:	4565      	cmp	r5, ip
 8004a12:	bf88      	it	hi
 8004a14:	2200      	movhi	r2, #0
 8004a16:	4413      	add	r3, r2
 8004a18:	1a18      	subs	r0, r3, r0
 8004a1a:	b003      	add	sp, #12
 8004a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a26:	e7ed      	b.n	8004a04 <__exponent+0x4c>
 8004a28:	2330      	movs	r3, #48	; 0x30
 8004a2a:	3130      	adds	r1, #48	; 0x30
 8004a2c:	7083      	strb	r3, [r0, #2]
 8004a2e:	70c1      	strb	r1, [r0, #3]
 8004a30:	1d03      	adds	r3, r0, #4
 8004a32:	e7f1      	b.n	8004a18 <__exponent+0x60>

08004a34 <_printf_float>:
 8004a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a38:	ed2d 8b02 	vpush	{d8}
 8004a3c:	b08d      	sub	sp, #52	; 0x34
 8004a3e:	460c      	mov	r4, r1
 8004a40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a44:	4616      	mov	r6, r2
 8004a46:	461f      	mov	r7, r3
 8004a48:	4605      	mov	r5, r0
 8004a4a:	f002 fe8b 	bl	8007764 <_localeconv_r>
 8004a4e:	f8d0 a000 	ldr.w	sl, [r0]
 8004a52:	4650      	mov	r0, sl
 8004a54:	f7fb fbc4 	bl	80001e0 <strlen>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	9305      	str	r3, [sp, #20]
 8004a60:	f8d8 3000 	ldr.w	r3, [r8]
 8004a64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a68:	3307      	adds	r3, #7
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	f103 0208 	add.w	r2, r3, #8
 8004a72:	f8c8 2000 	str.w	r2, [r8]
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a86:	9307      	str	r3, [sp, #28]
 8004a88:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a8c:	ee08 0a10 	vmov	s16, r0
 8004a90:	4b9f      	ldr	r3, [pc, #636]	; (8004d10 <_printf_float+0x2dc>)
 8004a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a96:	f04f 32ff 	mov.w	r2, #4294967295
 8004a9a:	f7fc f84f 	bl	8000b3c <__aeabi_dcmpun>
 8004a9e:	bb88      	cbnz	r0, 8004b04 <_printf_float+0xd0>
 8004aa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa4:	4b9a      	ldr	r3, [pc, #616]	; (8004d10 <_printf_float+0x2dc>)
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aaa:	f7fc f829 	bl	8000b00 <__aeabi_dcmple>
 8004aae:	bb48      	cbnz	r0, 8004b04 <_printf_float+0xd0>
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	f7fc f818 	bl	8000aec <__aeabi_dcmplt>
 8004abc:	b110      	cbz	r0, 8004ac4 <_printf_float+0x90>
 8004abe:	232d      	movs	r3, #45	; 0x2d
 8004ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac4:	4b93      	ldr	r3, [pc, #588]	; (8004d14 <_printf_float+0x2e0>)
 8004ac6:	4894      	ldr	r0, [pc, #592]	; (8004d18 <_printf_float+0x2e4>)
 8004ac8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004acc:	bf94      	ite	ls
 8004ace:	4698      	movls	r8, r3
 8004ad0:	4680      	movhi	r8, r0
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	6123      	str	r3, [r4, #16]
 8004ad6:	9b05      	ldr	r3, [sp, #20]
 8004ad8:	f023 0204 	bic.w	r2, r3, #4
 8004adc:	6022      	str	r2, [r4, #0]
 8004ade:	f04f 0900 	mov.w	r9, #0
 8004ae2:	9700      	str	r7, [sp, #0]
 8004ae4:	4633      	mov	r3, r6
 8004ae6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 f9d8 	bl	8004ea0 <_printf_common>
 8004af0:	3001      	adds	r0, #1
 8004af2:	f040 8090 	bne.w	8004c16 <_printf_float+0x1e2>
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	b00d      	add	sp, #52	; 0x34
 8004afc:	ecbd 8b02 	vpop	{d8}
 8004b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	4640      	mov	r0, r8
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	f7fc f816 	bl	8000b3c <__aeabi_dcmpun>
 8004b10:	b140      	cbz	r0, 8004b24 <_printf_float+0xf0>
 8004b12:	464b      	mov	r3, r9
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bfbc      	itt	lt
 8004b18:	232d      	movlt	r3, #45	; 0x2d
 8004b1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b1e:	487f      	ldr	r0, [pc, #508]	; (8004d1c <_printf_float+0x2e8>)
 8004b20:	4b7f      	ldr	r3, [pc, #508]	; (8004d20 <_printf_float+0x2ec>)
 8004b22:	e7d1      	b.n	8004ac8 <_printf_float+0x94>
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b2a:	9206      	str	r2, [sp, #24]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	d13f      	bne.n	8004bb0 <_printf_float+0x17c>
 8004b30:	2306      	movs	r3, #6
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	9b05      	ldr	r3, [sp, #20]
 8004b36:	6861      	ldr	r1, [r4, #4]
 8004b38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9303      	str	r3, [sp, #12]
 8004b40:	ab0a      	add	r3, sp, #40	; 0x28
 8004b42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b46:	ab09      	add	r3, sp, #36	; 0x24
 8004b48:	ec49 8b10 	vmov	d0, r8, r9
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b54:	4628      	mov	r0, r5
 8004b56:	f7ff fecd 	bl	80048f4 <__cvt>
 8004b5a:	9b06      	ldr	r3, [sp, #24]
 8004b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b5e:	2b47      	cmp	r3, #71	; 0x47
 8004b60:	4680      	mov	r8, r0
 8004b62:	d108      	bne.n	8004b76 <_printf_float+0x142>
 8004b64:	1cc8      	adds	r0, r1, #3
 8004b66:	db02      	blt.n	8004b6e <_printf_float+0x13a>
 8004b68:	6863      	ldr	r3, [r4, #4]
 8004b6a:	4299      	cmp	r1, r3
 8004b6c:	dd41      	ble.n	8004bf2 <_printf_float+0x1be>
 8004b6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b72:	fa5f fb8b 	uxtb.w	fp, fp
 8004b76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b7a:	d820      	bhi.n	8004bbe <_printf_float+0x18a>
 8004b7c:	3901      	subs	r1, #1
 8004b7e:	465a      	mov	r2, fp
 8004b80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b84:	9109      	str	r1, [sp, #36]	; 0x24
 8004b86:	f7ff ff17 	bl	80049b8 <__exponent>
 8004b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b8c:	1813      	adds	r3, r2, r0
 8004b8e:	2a01      	cmp	r2, #1
 8004b90:	4681      	mov	r9, r0
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	dc02      	bgt.n	8004b9c <_printf_float+0x168>
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	07d2      	lsls	r2, r2, #31
 8004b9a:	d501      	bpl.n	8004ba0 <_printf_float+0x16c>
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d09c      	beq.n	8004ae2 <_printf_float+0xae>
 8004ba8:	232d      	movs	r3, #45	; 0x2d
 8004baa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bae:	e798      	b.n	8004ae2 <_printf_float+0xae>
 8004bb0:	9a06      	ldr	r2, [sp, #24]
 8004bb2:	2a47      	cmp	r2, #71	; 0x47
 8004bb4:	d1be      	bne.n	8004b34 <_printf_float+0x100>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1bc      	bne.n	8004b34 <_printf_float+0x100>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e7b9      	b.n	8004b32 <_printf_float+0xfe>
 8004bbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004bc2:	d118      	bne.n	8004bf6 <_printf_float+0x1c2>
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	6863      	ldr	r3, [r4, #4]
 8004bc8:	dd0b      	ble.n	8004be2 <_printf_float+0x1ae>
 8004bca:	6121      	str	r1, [r4, #16]
 8004bcc:	b913      	cbnz	r3, 8004bd4 <_printf_float+0x1a0>
 8004bce:	6822      	ldr	r2, [r4, #0]
 8004bd0:	07d0      	lsls	r0, r2, #31
 8004bd2:	d502      	bpl.n	8004bda <_printf_float+0x1a6>
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	440b      	add	r3, r1
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bdc:	f04f 0900 	mov.w	r9, #0
 8004be0:	e7de      	b.n	8004ba0 <_printf_float+0x16c>
 8004be2:	b913      	cbnz	r3, 8004bea <_printf_float+0x1b6>
 8004be4:	6822      	ldr	r2, [r4, #0]
 8004be6:	07d2      	lsls	r2, r2, #31
 8004be8:	d501      	bpl.n	8004bee <_printf_float+0x1ba>
 8004bea:	3302      	adds	r3, #2
 8004bec:	e7f4      	b.n	8004bd8 <_printf_float+0x1a4>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e7f2      	b.n	8004bd8 <_printf_float+0x1a4>
 8004bf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf8:	4299      	cmp	r1, r3
 8004bfa:	db05      	blt.n	8004c08 <_printf_float+0x1d4>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	6121      	str	r1, [r4, #16]
 8004c00:	07d8      	lsls	r0, r3, #31
 8004c02:	d5ea      	bpl.n	8004bda <_printf_float+0x1a6>
 8004c04:	1c4b      	adds	r3, r1, #1
 8004c06:	e7e7      	b.n	8004bd8 <_printf_float+0x1a4>
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	bfd4      	ite	le
 8004c0c:	f1c1 0202 	rsble	r2, r1, #2
 8004c10:	2201      	movgt	r2, #1
 8004c12:	4413      	add	r3, r2
 8004c14:	e7e0      	b.n	8004bd8 <_printf_float+0x1a4>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	055a      	lsls	r2, r3, #21
 8004c1a:	d407      	bmi.n	8004c2c <_printf_float+0x1f8>
 8004c1c:	6923      	ldr	r3, [r4, #16]
 8004c1e:	4642      	mov	r2, r8
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	d12c      	bne.n	8004c84 <_printf_float+0x250>
 8004c2a:	e764      	b.n	8004af6 <_printf_float+0xc2>
 8004c2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c30:	f240 80e0 	bls.w	8004df4 <_printf_float+0x3c0>
 8004c34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f7fb ff4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d034      	beq.n	8004cae <_printf_float+0x27a>
 8004c44:	4a37      	ldr	r2, [pc, #220]	; (8004d24 <_printf_float+0x2f0>)
 8004c46:	2301      	movs	r3, #1
 8004c48:	4631      	mov	r1, r6
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	47b8      	blx	r7
 8004c4e:	3001      	adds	r0, #1
 8004c50:	f43f af51 	beq.w	8004af6 <_printf_float+0xc2>
 8004c54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	db02      	blt.n	8004c62 <_printf_float+0x22e>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	07d8      	lsls	r0, r3, #31
 8004c60:	d510      	bpl.n	8004c84 <_printf_float+0x250>
 8004c62:	ee18 3a10 	vmov	r3, s16
 8004c66:	4652      	mov	r2, sl
 8004c68:	4631      	mov	r1, r6
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	47b8      	blx	r7
 8004c6e:	3001      	adds	r0, #1
 8004c70:	f43f af41 	beq.w	8004af6 <_printf_float+0xc2>
 8004c74:	f04f 0800 	mov.w	r8, #0
 8004c78:	f104 091a 	add.w	r9, r4, #26
 8004c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	4543      	cmp	r3, r8
 8004c82:	dc09      	bgt.n	8004c98 <_printf_float+0x264>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	079b      	lsls	r3, r3, #30
 8004c88:	f100 8105 	bmi.w	8004e96 <_printf_float+0x462>
 8004c8c:	68e0      	ldr	r0, [r4, #12]
 8004c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c90:	4298      	cmp	r0, r3
 8004c92:	bfb8      	it	lt
 8004c94:	4618      	movlt	r0, r3
 8004c96:	e730      	b.n	8004afa <_printf_float+0xc6>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	464a      	mov	r2, r9
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f af27 	beq.w	8004af6 <_printf_float+0xc2>
 8004ca8:	f108 0801 	add.w	r8, r8, #1
 8004cac:	e7e6      	b.n	8004c7c <_printf_float+0x248>
 8004cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	dc39      	bgt.n	8004d28 <_printf_float+0x2f4>
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <_printf_float+0x2f0>)
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4628      	mov	r0, r5
 8004cbc:	47b8      	blx	r7
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	f43f af19 	beq.w	8004af6 <_printf_float+0xc2>
 8004cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	d102      	bne.n	8004cd2 <_printf_float+0x29e>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	07d9      	lsls	r1, r3, #31
 8004cd0:	d5d8      	bpl.n	8004c84 <_printf_float+0x250>
 8004cd2:	ee18 3a10 	vmov	r3, s16
 8004cd6:	4652      	mov	r2, sl
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4628      	mov	r0, r5
 8004cdc:	47b8      	blx	r7
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f43f af09 	beq.w	8004af6 <_printf_float+0xc2>
 8004ce4:	f04f 0900 	mov.w	r9, #0
 8004ce8:	f104 0a1a 	add.w	sl, r4, #26
 8004cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cee:	425b      	negs	r3, r3
 8004cf0:	454b      	cmp	r3, r9
 8004cf2:	dc01      	bgt.n	8004cf8 <_printf_float+0x2c4>
 8004cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf6:	e792      	b.n	8004c1e <_printf_float+0x1ea>
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	4652      	mov	r2, sl
 8004cfc:	4631      	mov	r1, r6
 8004cfe:	4628      	mov	r0, r5
 8004d00:	47b8      	blx	r7
 8004d02:	3001      	adds	r0, #1
 8004d04:	f43f aef7 	beq.w	8004af6 <_printf_float+0xc2>
 8004d08:	f109 0901 	add.w	r9, r9, #1
 8004d0c:	e7ee      	b.n	8004cec <_printf_float+0x2b8>
 8004d0e:	bf00      	nop
 8004d10:	7fefffff 	.word	0x7fefffff
 8004d14:	08009310 	.word	0x08009310
 8004d18:	08009314 	.word	0x08009314
 8004d1c:	0800931c 	.word	0x0800931c
 8004d20:	08009318 	.word	0x08009318
 8004d24:	08009320 	.word	0x08009320
 8004d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bfa8      	it	ge
 8004d30:	461a      	movge	r2, r3
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	4691      	mov	r9, r2
 8004d36:	dc37      	bgt.n	8004da8 <_printf_float+0x374>
 8004d38:	f04f 0b00 	mov.w	fp, #0
 8004d3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d40:	f104 021a 	add.w	r2, r4, #26
 8004d44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d46:	9305      	str	r3, [sp, #20]
 8004d48:	eba3 0309 	sub.w	r3, r3, r9
 8004d4c:	455b      	cmp	r3, fp
 8004d4e:	dc33      	bgt.n	8004db8 <_printf_float+0x384>
 8004d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d54:	429a      	cmp	r2, r3
 8004d56:	db3b      	blt.n	8004dd0 <_printf_float+0x39c>
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	07da      	lsls	r2, r3, #31
 8004d5c:	d438      	bmi.n	8004dd0 <_printf_float+0x39c>
 8004d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d60:	9a05      	ldr	r2, [sp, #20]
 8004d62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d64:	1a9a      	subs	r2, r3, r2
 8004d66:	eba3 0901 	sub.w	r9, r3, r1
 8004d6a:	4591      	cmp	r9, r2
 8004d6c:	bfa8      	it	ge
 8004d6e:	4691      	movge	r9, r2
 8004d70:	f1b9 0f00 	cmp.w	r9, #0
 8004d74:	dc35      	bgt.n	8004de2 <_printf_float+0x3ae>
 8004d76:	f04f 0800 	mov.w	r8, #0
 8004d7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d7e:	f104 0a1a 	add.w	sl, r4, #26
 8004d82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	eba3 0309 	sub.w	r3, r3, r9
 8004d8c:	4543      	cmp	r3, r8
 8004d8e:	f77f af79 	ble.w	8004c84 <_printf_float+0x250>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4652      	mov	r2, sl
 8004d96:	4631      	mov	r1, r6
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b8      	blx	r7
 8004d9c:	3001      	adds	r0, #1
 8004d9e:	f43f aeaa 	beq.w	8004af6 <_printf_float+0xc2>
 8004da2:	f108 0801 	add.w	r8, r8, #1
 8004da6:	e7ec      	b.n	8004d82 <_printf_float+0x34e>
 8004da8:	4613      	mov	r3, r2
 8004daa:	4631      	mov	r1, r6
 8004dac:	4642      	mov	r2, r8
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1c0      	bne.n	8004d38 <_printf_float+0x304>
 8004db6:	e69e      	b.n	8004af6 <_printf_float+0xc2>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	9205      	str	r2, [sp, #20]
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f ae97 	beq.w	8004af6 <_printf_float+0xc2>
 8004dc8:	9a05      	ldr	r2, [sp, #20]
 8004dca:	f10b 0b01 	add.w	fp, fp, #1
 8004dce:	e7b9      	b.n	8004d44 <_printf_float+0x310>
 8004dd0:	ee18 3a10 	vmov	r3, s16
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d1be      	bne.n	8004d5e <_printf_float+0x32a>
 8004de0:	e689      	b.n	8004af6 <_printf_float+0xc2>
 8004de2:	9a05      	ldr	r2, [sp, #20]
 8004de4:	464b      	mov	r3, r9
 8004de6:	4442      	add	r2, r8
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	d1c1      	bne.n	8004d76 <_printf_float+0x342>
 8004df2:	e680      	b.n	8004af6 <_printf_float+0xc2>
 8004df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004df6:	2a01      	cmp	r2, #1
 8004df8:	dc01      	bgt.n	8004dfe <_printf_float+0x3ca>
 8004dfa:	07db      	lsls	r3, r3, #31
 8004dfc:	d538      	bpl.n	8004e70 <_printf_float+0x43c>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	4642      	mov	r2, r8
 8004e02:	4631      	mov	r1, r6
 8004e04:	4628      	mov	r0, r5
 8004e06:	47b8      	blx	r7
 8004e08:	3001      	adds	r0, #1
 8004e0a:	f43f ae74 	beq.w	8004af6 <_printf_float+0xc2>
 8004e0e:	ee18 3a10 	vmov	r3, s16
 8004e12:	4652      	mov	r2, sl
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f ae6b 	beq.w	8004af6 <_printf_float+0xc2>
 8004e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e24:	2200      	movs	r2, #0
 8004e26:	2300      	movs	r3, #0
 8004e28:	f7fb fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e2c:	b9d8      	cbnz	r0, 8004e66 <_printf_float+0x432>
 8004e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e30:	f108 0201 	add.w	r2, r8, #1
 8004e34:	3b01      	subs	r3, #1
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d10e      	bne.n	8004e5e <_printf_float+0x42a>
 8004e40:	e659      	b.n	8004af6 <_printf_float+0xc2>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4652      	mov	r2, sl
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	f43f ae52 	beq.w	8004af6 <_printf_float+0xc2>
 8004e52:	f108 0801 	add.w	r8, r8, #1
 8004e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4543      	cmp	r3, r8
 8004e5c:	dcf1      	bgt.n	8004e42 <_printf_float+0x40e>
 8004e5e:	464b      	mov	r3, r9
 8004e60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e64:	e6dc      	b.n	8004c20 <_printf_float+0x1ec>
 8004e66:	f04f 0800 	mov.w	r8, #0
 8004e6a:	f104 0a1a 	add.w	sl, r4, #26
 8004e6e:	e7f2      	b.n	8004e56 <_printf_float+0x422>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4642      	mov	r2, r8
 8004e74:	e7df      	b.n	8004e36 <_printf_float+0x402>
 8004e76:	2301      	movs	r3, #1
 8004e78:	464a      	mov	r2, r9
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f ae38 	beq.w	8004af6 <_printf_float+0xc2>
 8004e86:	f108 0801 	add.w	r8, r8, #1
 8004e8a:	68e3      	ldr	r3, [r4, #12]
 8004e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e8e:	1a5b      	subs	r3, r3, r1
 8004e90:	4543      	cmp	r3, r8
 8004e92:	dcf0      	bgt.n	8004e76 <_printf_float+0x442>
 8004e94:	e6fa      	b.n	8004c8c <_printf_float+0x258>
 8004e96:	f04f 0800 	mov.w	r8, #0
 8004e9a:	f104 0919 	add.w	r9, r4, #25
 8004e9e:	e7f4      	b.n	8004e8a <_printf_float+0x456>

08004ea0 <_printf_common>:
 8004ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	4699      	mov	r9, r3
 8004ea8:	688a      	ldr	r2, [r1, #8]
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	bfb8      	it	lt
 8004eb4:	4613      	movlt	r3, r2
 8004eb6:	6033      	str	r3, [r6, #0]
 8004eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	b10a      	cbz	r2, 8004ec6 <_printf_common+0x26>
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	0699      	lsls	r1, r3, #26
 8004eca:	bf42      	ittt	mi
 8004ecc:	6833      	ldrmi	r3, [r6, #0]
 8004ece:	3302      	addmi	r3, #2
 8004ed0:	6033      	strmi	r3, [r6, #0]
 8004ed2:	6825      	ldr	r5, [r4, #0]
 8004ed4:	f015 0506 	ands.w	r5, r5, #6
 8004ed8:	d106      	bne.n	8004ee8 <_printf_common+0x48>
 8004eda:	f104 0a19 	add.w	sl, r4, #25
 8004ede:	68e3      	ldr	r3, [r4, #12]
 8004ee0:	6832      	ldr	r2, [r6, #0]
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	42ab      	cmp	r3, r5
 8004ee6:	dc26      	bgt.n	8004f36 <_printf_common+0x96>
 8004ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eec:	1e13      	subs	r3, r2, #0
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	0692      	lsls	r2, r2, #26
 8004ef6:	d42b      	bmi.n	8004f50 <_printf_common+0xb0>
 8004ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004efc:	4649      	mov	r1, r9
 8004efe:	4638      	mov	r0, r7
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d01e      	beq.n	8004f44 <_printf_common+0xa4>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	68e5      	ldr	r5, [r4, #12]
 8004f0a:	6832      	ldr	r2, [r6, #0]
 8004f0c:	f003 0306 	and.w	r3, r3, #6
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	bf08      	it	eq
 8004f14:	1aad      	subeq	r5, r5, r2
 8004f16:	68a3      	ldr	r3, [r4, #8]
 8004f18:	6922      	ldr	r2, [r4, #16]
 8004f1a:	bf0c      	ite	eq
 8004f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f20:	2500      	movne	r5, #0
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bfc4      	itt	gt
 8004f26:	1a9b      	subgt	r3, r3, r2
 8004f28:	18ed      	addgt	r5, r5, r3
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	341a      	adds	r4, #26
 8004f2e:	42b5      	cmp	r5, r6
 8004f30:	d11a      	bne.n	8004f68 <_printf_common+0xc8>
 8004f32:	2000      	movs	r0, #0
 8004f34:	e008      	b.n	8004f48 <_printf_common+0xa8>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4652      	mov	r2, sl
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	47c0      	blx	r8
 8004f40:	3001      	adds	r0, #1
 8004f42:	d103      	bne.n	8004f4c <_printf_common+0xac>
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	e7c6      	b.n	8004ede <_printf_common+0x3e>
 8004f50:	18e1      	adds	r1, r4, r3
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	2030      	movs	r0, #48	; 0x30
 8004f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f5a:	4422      	add	r2, r4
 8004f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f64:	3302      	adds	r3, #2
 8004f66:	e7c7      	b.n	8004ef8 <_printf_common+0x58>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d0e6      	beq.n	8004f44 <_printf_common+0xa4>
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7d9      	b.n	8004f2e <_printf_common+0x8e>
	...

08004f7c <_printf_i>:
 8004f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f80:	7e0f      	ldrb	r7, [r1, #24]
 8004f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f84:	2f78      	cmp	r7, #120	; 0x78
 8004f86:	4691      	mov	r9, r2
 8004f88:	4680      	mov	r8, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	469a      	mov	sl, r3
 8004f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f92:	d807      	bhi.n	8004fa4 <_printf_i+0x28>
 8004f94:	2f62      	cmp	r7, #98	; 0x62
 8004f96:	d80a      	bhi.n	8004fae <_printf_i+0x32>
 8004f98:	2f00      	cmp	r7, #0
 8004f9a:	f000 80d8 	beq.w	800514e <_printf_i+0x1d2>
 8004f9e:	2f58      	cmp	r7, #88	; 0x58
 8004fa0:	f000 80a3 	beq.w	80050ea <_printf_i+0x16e>
 8004fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fac:	e03a      	b.n	8005024 <_printf_i+0xa8>
 8004fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fb2:	2b15      	cmp	r3, #21
 8004fb4:	d8f6      	bhi.n	8004fa4 <_printf_i+0x28>
 8004fb6:	a101      	add	r1, pc, #4	; (adr r1, 8004fbc <_printf_i+0x40>)
 8004fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fbc:	08005015 	.word	0x08005015
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	08004fa5 	.word	0x08004fa5
 8004fc8:	08004fa5 	.word	0x08004fa5
 8004fcc:	08004fa5 	.word	0x08004fa5
 8004fd0:	08004fa5 	.word	0x08004fa5
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08004fa5 	.word	0x08004fa5
 8004fdc:	08004fa5 	.word	0x08004fa5
 8004fe0:	08004fa5 	.word	0x08004fa5
 8004fe4:	08004fa5 	.word	0x08004fa5
 8004fe8:	08005135 	.word	0x08005135
 8004fec:	08005059 	.word	0x08005059
 8004ff0:	08005117 	.word	0x08005117
 8004ff4:	08004fa5 	.word	0x08004fa5
 8004ff8:	08004fa5 	.word	0x08004fa5
 8004ffc:	08005157 	.word	0x08005157
 8005000:	08004fa5 	.word	0x08004fa5
 8005004:	08005059 	.word	0x08005059
 8005008:	08004fa5 	.word	0x08004fa5
 800500c:	08004fa5 	.word	0x08004fa5
 8005010:	0800511f 	.word	0x0800511f
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	1d1a      	adds	r2, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005024:	2301      	movs	r3, #1
 8005026:	e0a3      	b.n	8005170 <_printf_i+0x1f4>
 8005028:	6820      	ldr	r0, [r4, #0]
 800502a:	6829      	ldr	r1, [r5, #0]
 800502c:	0606      	lsls	r6, r0, #24
 800502e:	f101 0304 	add.w	r3, r1, #4
 8005032:	d50a      	bpl.n	800504a <_printf_i+0xce>
 8005034:	680e      	ldr	r6, [r1, #0]
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	2e00      	cmp	r6, #0
 800503a:	da03      	bge.n	8005044 <_printf_i+0xc8>
 800503c:	232d      	movs	r3, #45	; 0x2d
 800503e:	4276      	negs	r6, r6
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005044:	485e      	ldr	r0, [pc, #376]	; (80051c0 <_printf_i+0x244>)
 8005046:	230a      	movs	r3, #10
 8005048:	e019      	b.n	800507e <_printf_i+0x102>
 800504a:	680e      	ldr	r6, [r1, #0]
 800504c:	602b      	str	r3, [r5, #0]
 800504e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005052:	bf18      	it	ne
 8005054:	b236      	sxthne	r6, r6
 8005056:	e7ef      	b.n	8005038 <_printf_i+0xbc>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	6820      	ldr	r0, [r4, #0]
 800505c:	1d19      	adds	r1, r3, #4
 800505e:	6029      	str	r1, [r5, #0]
 8005060:	0601      	lsls	r1, r0, #24
 8005062:	d501      	bpl.n	8005068 <_printf_i+0xec>
 8005064:	681e      	ldr	r6, [r3, #0]
 8005066:	e002      	b.n	800506e <_printf_i+0xf2>
 8005068:	0646      	lsls	r6, r0, #25
 800506a:	d5fb      	bpl.n	8005064 <_printf_i+0xe8>
 800506c:	881e      	ldrh	r6, [r3, #0]
 800506e:	4854      	ldr	r0, [pc, #336]	; (80051c0 <_printf_i+0x244>)
 8005070:	2f6f      	cmp	r7, #111	; 0x6f
 8005072:	bf0c      	ite	eq
 8005074:	2308      	moveq	r3, #8
 8005076:	230a      	movne	r3, #10
 8005078:	2100      	movs	r1, #0
 800507a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800507e:	6865      	ldr	r5, [r4, #4]
 8005080:	60a5      	str	r5, [r4, #8]
 8005082:	2d00      	cmp	r5, #0
 8005084:	bfa2      	ittt	ge
 8005086:	6821      	ldrge	r1, [r4, #0]
 8005088:	f021 0104 	bicge.w	r1, r1, #4
 800508c:	6021      	strge	r1, [r4, #0]
 800508e:	b90e      	cbnz	r6, 8005094 <_printf_i+0x118>
 8005090:	2d00      	cmp	r5, #0
 8005092:	d04d      	beq.n	8005130 <_printf_i+0x1b4>
 8005094:	4615      	mov	r5, r2
 8005096:	fbb6 f1f3 	udiv	r1, r6, r3
 800509a:	fb03 6711 	mls	r7, r3, r1, r6
 800509e:	5dc7      	ldrb	r7, [r0, r7]
 80050a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050a4:	4637      	mov	r7, r6
 80050a6:	42bb      	cmp	r3, r7
 80050a8:	460e      	mov	r6, r1
 80050aa:	d9f4      	bls.n	8005096 <_printf_i+0x11a>
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d10b      	bne.n	80050c8 <_printf_i+0x14c>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	07de      	lsls	r6, r3, #31
 80050b4:	d508      	bpl.n	80050c8 <_printf_i+0x14c>
 80050b6:	6923      	ldr	r3, [r4, #16]
 80050b8:	6861      	ldr	r1, [r4, #4]
 80050ba:	4299      	cmp	r1, r3
 80050bc:	bfde      	ittt	le
 80050be:	2330      	movle	r3, #48	; 0x30
 80050c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050c8:	1b52      	subs	r2, r2, r5
 80050ca:	6122      	str	r2, [r4, #16]
 80050cc:	f8cd a000 	str.w	sl, [sp]
 80050d0:	464b      	mov	r3, r9
 80050d2:	aa03      	add	r2, sp, #12
 80050d4:	4621      	mov	r1, r4
 80050d6:	4640      	mov	r0, r8
 80050d8:	f7ff fee2 	bl	8004ea0 <_printf_common>
 80050dc:	3001      	adds	r0, #1
 80050de:	d14c      	bne.n	800517a <_printf_i+0x1fe>
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	b004      	add	sp, #16
 80050e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ea:	4835      	ldr	r0, [pc, #212]	; (80051c0 <_printf_i+0x244>)
 80050ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050f0:	6829      	ldr	r1, [r5, #0]
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050f8:	6029      	str	r1, [r5, #0]
 80050fa:	061d      	lsls	r5, r3, #24
 80050fc:	d514      	bpl.n	8005128 <_printf_i+0x1ac>
 80050fe:	07df      	lsls	r7, r3, #31
 8005100:	bf44      	itt	mi
 8005102:	f043 0320 	orrmi.w	r3, r3, #32
 8005106:	6023      	strmi	r3, [r4, #0]
 8005108:	b91e      	cbnz	r6, 8005112 <_printf_i+0x196>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	f023 0320 	bic.w	r3, r3, #32
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	2310      	movs	r3, #16
 8005114:	e7b0      	b.n	8005078 <_printf_i+0xfc>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	f043 0320 	orr.w	r3, r3, #32
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	2378      	movs	r3, #120	; 0x78
 8005120:	4828      	ldr	r0, [pc, #160]	; (80051c4 <_printf_i+0x248>)
 8005122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005126:	e7e3      	b.n	80050f0 <_printf_i+0x174>
 8005128:	0659      	lsls	r1, r3, #25
 800512a:	bf48      	it	mi
 800512c:	b2b6      	uxthmi	r6, r6
 800512e:	e7e6      	b.n	80050fe <_printf_i+0x182>
 8005130:	4615      	mov	r5, r2
 8005132:	e7bb      	b.n	80050ac <_printf_i+0x130>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	6826      	ldr	r6, [r4, #0]
 8005138:	6961      	ldr	r1, [r4, #20]
 800513a:	1d18      	adds	r0, r3, #4
 800513c:	6028      	str	r0, [r5, #0]
 800513e:	0635      	lsls	r5, r6, #24
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	d501      	bpl.n	8005148 <_printf_i+0x1cc>
 8005144:	6019      	str	r1, [r3, #0]
 8005146:	e002      	b.n	800514e <_printf_i+0x1d2>
 8005148:	0670      	lsls	r0, r6, #25
 800514a:	d5fb      	bpl.n	8005144 <_printf_i+0x1c8>
 800514c:	8019      	strh	r1, [r3, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	6123      	str	r3, [r4, #16]
 8005152:	4615      	mov	r5, r2
 8005154:	e7ba      	b.n	80050cc <_printf_i+0x150>
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	1d1a      	adds	r2, r3, #4
 800515a:	602a      	str	r2, [r5, #0]
 800515c:	681d      	ldr	r5, [r3, #0]
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	2100      	movs	r1, #0
 8005162:	4628      	mov	r0, r5
 8005164:	f7fb f844 	bl	80001f0 <memchr>
 8005168:	b108      	cbz	r0, 800516e <_printf_i+0x1f2>
 800516a:	1b40      	subs	r0, r0, r5
 800516c:	6060      	str	r0, [r4, #4]
 800516e:	6863      	ldr	r3, [r4, #4]
 8005170:	6123      	str	r3, [r4, #16]
 8005172:	2300      	movs	r3, #0
 8005174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005178:	e7a8      	b.n	80050cc <_printf_i+0x150>
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	462a      	mov	r2, r5
 800517e:	4649      	mov	r1, r9
 8005180:	4640      	mov	r0, r8
 8005182:	47d0      	blx	sl
 8005184:	3001      	adds	r0, #1
 8005186:	d0ab      	beq.n	80050e0 <_printf_i+0x164>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	079b      	lsls	r3, r3, #30
 800518c:	d413      	bmi.n	80051b6 <_printf_i+0x23a>
 800518e:	68e0      	ldr	r0, [r4, #12]
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	4298      	cmp	r0, r3
 8005194:	bfb8      	it	lt
 8005196:	4618      	movlt	r0, r3
 8005198:	e7a4      	b.n	80050e4 <_printf_i+0x168>
 800519a:	2301      	movs	r3, #1
 800519c:	4632      	mov	r2, r6
 800519e:	4649      	mov	r1, r9
 80051a0:	4640      	mov	r0, r8
 80051a2:	47d0      	blx	sl
 80051a4:	3001      	adds	r0, #1
 80051a6:	d09b      	beq.n	80050e0 <_printf_i+0x164>
 80051a8:	3501      	adds	r5, #1
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	9903      	ldr	r1, [sp, #12]
 80051ae:	1a5b      	subs	r3, r3, r1
 80051b0:	42ab      	cmp	r3, r5
 80051b2:	dcf2      	bgt.n	800519a <_printf_i+0x21e>
 80051b4:	e7eb      	b.n	800518e <_printf_i+0x212>
 80051b6:	2500      	movs	r5, #0
 80051b8:	f104 0619 	add.w	r6, r4, #25
 80051bc:	e7f5      	b.n	80051aa <_printf_i+0x22e>
 80051be:	bf00      	nop
 80051c0:	08009322 	.word	0x08009322
 80051c4:	08009333 	.word	0x08009333

080051c8 <_scanf_float>:
 80051c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051cc:	b087      	sub	sp, #28
 80051ce:	4617      	mov	r7, r2
 80051d0:	9303      	str	r3, [sp, #12]
 80051d2:	688b      	ldr	r3, [r1, #8]
 80051d4:	1e5a      	subs	r2, r3, #1
 80051d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80051da:	bf83      	ittte	hi
 80051dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80051e0:	195b      	addhi	r3, r3, r5
 80051e2:	9302      	strhi	r3, [sp, #8]
 80051e4:	2300      	movls	r3, #0
 80051e6:	bf86      	itte	hi
 80051e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051ec:	608b      	strhi	r3, [r1, #8]
 80051ee:	9302      	strls	r3, [sp, #8]
 80051f0:	680b      	ldr	r3, [r1, #0]
 80051f2:	468b      	mov	fp, r1
 80051f4:	2500      	movs	r5, #0
 80051f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80051fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005202:	4680      	mov	r8, r0
 8005204:	460c      	mov	r4, r1
 8005206:	465e      	mov	r6, fp
 8005208:	46aa      	mov	sl, r5
 800520a:	46a9      	mov	r9, r5
 800520c:	9501      	str	r5, [sp, #4]
 800520e:	68a2      	ldr	r2, [r4, #8]
 8005210:	b152      	cbz	r2, 8005228 <_scanf_float+0x60>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b4e      	cmp	r3, #78	; 0x4e
 8005218:	d864      	bhi.n	80052e4 <_scanf_float+0x11c>
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d83c      	bhi.n	8005298 <_scanf_float+0xd0>
 800521e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005222:	b2c8      	uxtb	r0, r1
 8005224:	280e      	cmp	r0, #14
 8005226:	d93a      	bls.n	800529e <_scanf_float+0xd6>
 8005228:	f1b9 0f00 	cmp.w	r9, #0
 800522c:	d003      	beq.n	8005236 <_scanf_float+0x6e>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800523a:	f1ba 0f01 	cmp.w	sl, #1
 800523e:	f200 8113 	bhi.w	8005468 <_scanf_float+0x2a0>
 8005242:	455e      	cmp	r6, fp
 8005244:	f200 8105 	bhi.w	8005452 <_scanf_float+0x28a>
 8005248:	2501      	movs	r5, #1
 800524a:	4628      	mov	r0, r5
 800524c:	b007      	add	sp, #28
 800524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005252:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005256:	2a0d      	cmp	r2, #13
 8005258:	d8e6      	bhi.n	8005228 <_scanf_float+0x60>
 800525a:	a101      	add	r1, pc, #4	; (adr r1, 8005260 <_scanf_float+0x98>)
 800525c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005260:	0800539f 	.word	0x0800539f
 8005264:	08005229 	.word	0x08005229
 8005268:	08005229 	.word	0x08005229
 800526c:	08005229 	.word	0x08005229
 8005270:	080053ff 	.word	0x080053ff
 8005274:	080053d7 	.word	0x080053d7
 8005278:	08005229 	.word	0x08005229
 800527c:	08005229 	.word	0x08005229
 8005280:	080053ad 	.word	0x080053ad
 8005284:	08005229 	.word	0x08005229
 8005288:	08005229 	.word	0x08005229
 800528c:	08005229 	.word	0x08005229
 8005290:	08005229 	.word	0x08005229
 8005294:	08005365 	.word	0x08005365
 8005298:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800529c:	e7db      	b.n	8005256 <_scanf_float+0x8e>
 800529e:	290e      	cmp	r1, #14
 80052a0:	d8c2      	bhi.n	8005228 <_scanf_float+0x60>
 80052a2:	a001      	add	r0, pc, #4	; (adr r0, 80052a8 <_scanf_float+0xe0>)
 80052a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80052a8:	08005357 	.word	0x08005357
 80052ac:	08005229 	.word	0x08005229
 80052b0:	08005357 	.word	0x08005357
 80052b4:	080053eb 	.word	0x080053eb
 80052b8:	08005229 	.word	0x08005229
 80052bc:	08005305 	.word	0x08005305
 80052c0:	08005341 	.word	0x08005341
 80052c4:	08005341 	.word	0x08005341
 80052c8:	08005341 	.word	0x08005341
 80052cc:	08005341 	.word	0x08005341
 80052d0:	08005341 	.word	0x08005341
 80052d4:	08005341 	.word	0x08005341
 80052d8:	08005341 	.word	0x08005341
 80052dc:	08005341 	.word	0x08005341
 80052e0:	08005341 	.word	0x08005341
 80052e4:	2b6e      	cmp	r3, #110	; 0x6e
 80052e6:	d809      	bhi.n	80052fc <_scanf_float+0x134>
 80052e8:	2b60      	cmp	r3, #96	; 0x60
 80052ea:	d8b2      	bhi.n	8005252 <_scanf_float+0x8a>
 80052ec:	2b54      	cmp	r3, #84	; 0x54
 80052ee:	d077      	beq.n	80053e0 <_scanf_float+0x218>
 80052f0:	2b59      	cmp	r3, #89	; 0x59
 80052f2:	d199      	bne.n	8005228 <_scanf_float+0x60>
 80052f4:	2d07      	cmp	r5, #7
 80052f6:	d197      	bne.n	8005228 <_scanf_float+0x60>
 80052f8:	2508      	movs	r5, #8
 80052fa:	e029      	b.n	8005350 <_scanf_float+0x188>
 80052fc:	2b74      	cmp	r3, #116	; 0x74
 80052fe:	d06f      	beq.n	80053e0 <_scanf_float+0x218>
 8005300:	2b79      	cmp	r3, #121	; 0x79
 8005302:	e7f6      	b.n	80052f2 <_scanf_float+0x12a>
 8005304:	6821      	ldr	r1, [r4, #0]
 8005306:	05c8      	lsls	r0, r1, #23
 8005308:	d51a      	bpl.n	8005340 <_scanf_float+0x178>
 800530a:	9b02      	ldr	r3, [sp, #8]
 800530c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005310:	6021      	str	r1, [r4, #0]
 8005312:	f109 0901 	add.w	r9, r9, #1
 8005316:	b11b      	cbz	r3, 8005320 <_scanf_float+0x158>
 8005318:	3b01      	subs	r3, #1
 800531a:	3201      	adds	r2, #1
 800531c:	9302      	str	r3, [sp, #8]
 800531e:	60a2      	str	r2, [r4, #8]
 8005320:	68a3      	ldr	r3, [r4, #8]
 8005322:	3b01      	subs	r3, #1
 8005324:	60a3      	str	r3, [r4, #8]
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	3301      	adds	r3, #1
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3b01      	subs	r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	f340 8084 	ble.w	8005440 <_scanf_float+0x278>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	3301      	adds	r3, #1
 800533c:	603b      	str	r3, [r7, #0]
 800533e:	e766      	b.n	800520e <_scanf_float+0x46>
 8005340:	eb1a 0f05 	cmn.w	sl, r5
 8005344:	f47f af70 	bne.w	8005228 <_scanf_float+0x60>
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800534e:	6022      	str	r2, [r4, #0]
 8005350:	f806 3b01 	strb.w	r3, [r6], #1
 8005354:	e7e4      	b.n	8005320 <_scanf_float+0x158>
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	0610      	lsls	r0, r2, #24
 800535a:	f57f af65 	bpl.w	8005228 <_scanf_float+0x60>
 800535e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005362:	e7f4      	b.n	800534e <_scanf_float+0x186>
 8005364:	f1ba 0f00 	cmp.w	sl, #0
 8005368:	d10e      	bne.n	8005388 <_scanf_float+0x1c0>
 800536a:	f1b9 0f00 	cmp.w	r9, #0
 800536e:	d10e      	bne.n	800538e <_scanf_float+0x1c6>
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005376:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800537a:	d108      	bne.n	800538e <_scanf_float+0x1c6>
 800537c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	f04f 0a01 	mov.w	sl, #1
 8005386:	e7e3      	b.n	8005350 <_scanf_float+0x188>
 8005388:	f1ba 0f02 	cmp.w	sl, #2
 800538c:	d055      	beq.n	800543a <_scanf_float+0x272>
 800538e:	2d01      	cmp	r5, #1
 8005390:	d002      	beq.n	8005398 <_scanf_float+0x1d0>
 8005392:	2d04      	cmp	r5, #4
 8005394:	f47f af48 	bne.w	8005228 <_scanf_float+0x60>
 8005398:	3501      	adds	r5, #1
 800539a:	b2ed      	uxtb	r5, r5
 800539c:	e7d8      	b.n	8005350 <_scanf_float+0x188>
 800539e:	f1ba 0f01 	cmp.w	sl, #1
 80053a2:	f47f af41 	bne.w	8005228 <_scanf_float+0x60>
 80053a6:	f04f 0a02 	mov.w	sl, #2
 80053aa:	e7d1      	b.n	8005350 <_scanf_float+0x188>
 80053ac:	b97d      	cbnz	r5, 80053ce <_scanf_float+0x206>
 80053ae:	f1b9 0f00 	cmp.w	r9, #0
 80053b2:	f47f af3c 	bne.w	800522e <_scanf_float+0x66>
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80053bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80053c0:	f47f af39 	bne.w	8005236 <_scanf_float+0x6e>
 80053c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053c8:	6022      	str	r2, [r4, #0]
 80053ca:	2501      	movs	r5, #1
 80053cc:	e7c0      	b.n	8005350 <_scanf_float+0x188>
 80053ce:	2d03      	cmp	r5, #3
 80053d0:	d0e2      	beq.n	8005398 <_scanf_float+0x1d0>
 80053d2:	2d05      	cmp	r5, #5
 80053d4:	e7de      	b.n	8005394 <_scanf_float+0x1cc>
 80053d6:	2d02      	cmp	r5, #2
 80053d8:	f47f af26 	bne.w	8005228 <_scanf_float+0x60>
 80053dc:	2503      	movs	r5, #3
 80053de:	e7b7      	b.n	8005350 <_scanf_float+0x188>
 80053e0:	2d06      	cmp	r5, #6
 80053e2:	f47f af21 	bne.w	8005228 <_scanf_float+0x60>
 80053e6:	2507      	movs	r5, #7
 80053e8:	e7b2      	b.n	8005350 <_scanf_float+0x188>
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	0591      	lsls	r1, r2, #22
 80053ee:	f57f af1b 	bpl.w	8005228 <_scanf_float+0x60>
 80053f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80053f6:	6022      	str	r2, [r4, #0]
 80053f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80053fc:	e7a8      	b.n	8005350 <_scanf_float+0x188>
 80053fe:	6822      	ldr	r2, [r4, #0]
 8005400:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005404:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005408:	d006      	beq.n	8005418 <_scanf_float+0x250>
 800540a:	0550      	lsls	r0, r2, #21
 800540c:	f57f af0c 	bpl.w	8005228 <_scanf_float+0x60>
 8005410:	f1b9 0f00 	cmp.w	r9, #0
 8005414:	f43f af0f 	beq.w	8005236 <_scanf_float+0x6e>
 8005418:	0591      	lsls	r1, r2, #22
 800541a:	bf58      	it	pl
 800541c:	9901      	ldrpl	r1, [sp, #4]
 800541e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005422:	bf58      	it	pl
 8005424:	eba9 0101 	subpl.w	r1, r9, r1
 8005428:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800542c:	bf58      	it	pl
 800542e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005432:	6022      	str	r2, [r4, #0]
 8005434:	f04f 0900 	mov.w	r9, #0
 8005438:	e78a      	b.n	8005350 <_scanf_float+0x188>
 800543a:	f04f 0a03 	mov.w	sl, #3
 800543e:	e787      	b.n	8005350 <_scanf_float+0x188>
 8005440:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005444:	4639      	mov	r1, r7
 8005446:	4640      	mov	r0, r8
 8005448:	4798      	blx	r3
 800544a:	2800      	cmp	r0, #0
 800544c:	f43f aedf 	beq.w	800520e <_scanf_float+0x46>
 8005450:	e6ea      	b.n	8005228 <_scanf_float+0x60>
 8005452:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005456:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800545a:	463a      	mov	r2, r7
 800545c:	4640      	mov	r0, r8
 800545e:	4798      	blx	r3
 8005460:	6923      	ldr	r3, [r4, #16]
 8005462:	3b01      	subs	r3, #1
 8005464:	6123      	str	r3, [r4, #16]
 8005466:	e6ec      	b.n	8005242 <_scanf_float+0x7a>
 8005468:	1e6b      	subs	r3, r5, #1
 800546a:	2b06      	cmp	r3, #6
 800546c:	d825      	bhi.n	80054ba <_scanf_float+0x2f2>
 800546e:	2d02      	cmp	r5, #2
 8005470:	d836      	bhi.n	80054e0 <_scanf_float+0x318>
 8005472:	455e      	cmp	r6, fp
 8005474:	f67f aee8 	bls.w	8005248 <_scanf_float+0x80>
 8005478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800547c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005480:	463a      	mov	r2, r7
 8005482:	4640      	mov	r0, r8
 8005484:	4798      	blx	r3
 8005486:	6923      	ldr	r3, [r4, #16]
 8005488:	3b01      	subs	r3, #1
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	e7f1      	b.n	8005472 <_scanf_float+0x2aa>
 800548e:	9802      	ldr	r0, [sp, #8]
 8005490:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005494:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005498:	9002      	str	r0, [sp, #8]
 800549a:	463a      	mov	r2, r7
 800549c:	4640      	mov	r0, r8
 800549e:	4798      	blx	r3
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054aa:	fa5f fa8a 	uxtb.w	sl, sl
 80054ae:	f1ba 0f02 	cmp.w	sl, #2
 80054b2:	d1ec      	bne.n	800548e <_scanf_float+0x2c6>
 80054b4:	3d03      	subs	r5, #3
 80054b6:	b2ed      	uxtb	r5, r5
 80054b8:	1b76      	subs	r6, r6, r5
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	05da      	lsls	r2, r3, #23
 80054be:	d52f      	bpl.n	8005520 <_scanf_float+0x358>
 80054c0:	055b      	lsls	r3, r3, #21
 80054c2:	d510      	bpl.n	80054e6 <_scanf_float+0x31e>
 80054c4:	455e      	cmp	r6, fp
 80054c6:	f67f aebf 	bls.w	8005248 <_scanf_float+0x80>
 80054ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054d2:	463a      	mov	r2, r7
 80054d4:	4640      	mov	r0, r8
 80054d6:	4798      	blx	r3
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	3b01      	subs	r3, #1
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	e7f1      	b.n	80054c4 <_scanf_float+0x2fc>
 80054e0:	46aa      	mov	sl, r5
 80054e2:	9602      	str	r6, [sp, #8]
 80054e4:	e7df      	b.n	80054a6 <_scanf_float+0x2de>
 80054e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	2965      	cmp	r1, #101	; 0x65
 80054ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80054f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	d00c      	beq.n	8005514 <_scanf_float+0x34c>
 80054fa:	2945      	cmp	r1, #69	; 0x45
 80054fc:	d00a      	beq.n	8005514 <_scanf_float+0x34c>
 80054fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005502:	463a      	mov	r2, r7
 8005504:	4640      	mov	r0, r8
 8005506:	4798      	blx	r3
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800550e:	3b01      	subs	r3, #1
 8005510:	1eb5      	subs	r5, r6, #2
 8005512:	6123      	str	r3, [r4, #16]
 8005514:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005518:	463a      	mov	r2, r7
 800551a:	4640      	mov	r0, r8
 800551c:	4798      	blx	r3
 800551e:	462e      	mov	r6, r5
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	f015 0510 	ands.w	r5, r5, #16
 8005526:	d159      	bne.n	80055dc <_scanf_float+0x414>
 8005528:	7035      	strb	r5, [r6, #0]
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005534:	d11b      	bne.n	800556e <_scanf_float+0x3a6>
 8005536:	9b01      	ldr	r3, [sp, #4]
 8005538:	454b      	cmp	r3, r9
 800553a:	eba3 0209 	sub.w	r2, r3, r9
 800553e:	d123      	bne.n	8005588 <_scanf_float+0x3c0>
 8005540:	2200      	movs	r2, #0
 8005542:	4659      	mov	r1, fp
 8005544:	4640      	mov	r0, r8
 8005546:	f000 fe99 	bl	800627c <_strtod_r>
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	f012 0f02 	tst.w	r2, #2
 8005552:	ec57 6b10 	vmov	r6, r7, d0
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	d021      	beq.n	800559e <_scanf_float+0x3d6>
 800555a:	9903      	ldr	r1, [sp, #12]
 800555c:	1d1a      	adds	r2, r3, #4
 800555e:	600a      	str	r2, [r1, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	e9c3 6700 	strd	r6, r7, [r3]
 8005566:	68e3      	ldr	r3, [r4, #12]
 8005568:	3301      	adds	r3, #1
 800556a:	60e3      	str	r3, [r4, #12]
 800556c:	e66d      	b.n	800524a <_scanf_float+0x82>
 800556e:	9b04      	ldr	r3, [sp, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0e5      	beq.n	8005540 <_scanf_float+0x378>
 8005574:	9905      	ldr	r1, [sp, #20]
 8005576:	230a      	movs	r3, #10
 8005578:	462a      	mov	r2, r5
 800557a:	3101      	adds	r1, #1
 800557c:	4640      	mov	r0, r8
 800557e:	f000 ff05 	bl	800638c <_strtol_r>
 8005582:	9b04      	ldr	r3, [sp, #16]
 8005584:	9e05      	ldr	r6, [sp, #20]
 8005586:	1ac2      	subs	r2, r0, r3
 8005588:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800558c:	429e      	cmp	r6, r3
 800558e:	bf28      	it	cs
 8005590:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005594:	4912      	ldr	r1, [pc, #72]	; (80055e0 <_scanf_float+0x418>)
 8005596:	4630      	mov	r0, r6
 8005598:	f000 f82c 	bl	80055f4 <siprintf>
 800559c:	e7d0      	b.n	8005540 <_scanf_float+0x378>
 800559e:	9903      	ldr	r1, [sp, #12]
 80055a0:	f012 0f04 	tst.w	r2, #4
 80055a4:	f103 0204 	add.w	r2, r3, #4
 80055a8:	600a      	str	r2, [r1, #0]
 80055aa:	d1d9      	bne.n	8005560 <_scanf_float+0x398>
 80055ac:	f8d3 8000 	ldr.w	r8, [r3]
 80055b0:	ee10 2a10 	vmov	r2, s0
 80055b4:	ee10 0a10 	vmov	r0, s0
 80055b8:	463b      	mov	r3, r7
 80055ba:	4639      	mov	r1, r7
 80055bc:	f7fb fabe 	bl	8000b3c <__aeabi_dcmpun>
 80055c0:	b128      	cbz	r0, 80055ce <_scanf_float+0x406>
 80055c2:	4808      	ldr	r0, [pc, #32]	; (80055e4 <_scanf_float+0x41c>)
 80055c4:	f000 f810 	bl	80055e8 <nanf>
 80055c8:	ed88 0a00 	vstr	s0, [r8]
 80055cc:	e7cb      	b.n	8005566 <_scanf_float+0x39e>
 80055ce:	4630      	mov	r0, r6
 80055d0:	4639      	mov	r1, r7
 80055d2:	f7fb fb11 	bl	8000bf8 <__aeabi_d2f>
 80055d6:	f8c8 0000 	str.w	r0, [r8]
 80055da:	e7c4      	b.n	8005566 <_scanf_float+0x39e>
 80055dc:	2500      	movs	r5, #0
 80055de:	e634      	b.n	800524a <_scanf_float+0x82>
 80055e0:	08009344 	.word	0x08009344
 80055e4:	08009750 	.word	0x08009750

080055e8 <nanf>:
 80055e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80055f0 <nanf+0x8>
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	7fc00000 	.word	0x7fc00000

080055f4 <siprintf>:
 80055f4:	b40e      	push	{r1, r2, r3}
 80055f6:	b500      	push	{lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	ab1d      	add	r3, sp, #116	; 0x74
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005604:	4809      	ldr	r0, [pc, #36]	; (800562c <siprintf+0x38>)
 8005606:	9107      	str	r1, [sp, #28]
 8005608:	9104      	str	r1, [sp, #16]
 800560a:	4909      	ldr	r1, [pc, #36]	; (8005630 <siprintf+0x3c>)
 800560c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	a902      	add	r1, sp, #8
 8005618:	f002 fee4 	bl	80083e4 <_svfiprintf_r>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	b01c      	add	sp, #112	; 0x70
 8005624:	f85d eb04 	ldr.w	lr, [sp], #4
 8005628:	b003      	add	sp, #12
 800562a:	4770      	bx	lr
 800562c:	20000018 	.word	0x20000018
 8005630:	ffff0208 	.word	0xffff0208

08005634 <sulp>:
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	4604      	mov	r4, r0
 8005638:	460d      	mov	r5, r1
 800563a:	ec45 4b10 	vmov	d0, r4, r5
 800563e:	4616      	mov	r6, r2
 8005640:	f002 fc2e 	bl	8007ea0 <__ulp>
 8005644:	ec51 0b10 	vmov	r0, r1, d0
 8005648:	b17e      	cbz	r6, 800566a <sulp+0x36>
 800564a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800564e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005652:	2b00      	cmp	r3, #0
 8005654:	dd09      	ble.n	800566a <sulp+0x36>
 8005656:	051b      	lsls	r3, r3, #20
 8005658:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800565c:	2400      	movs	r4, #0
 800565e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005662:	4622      	mov	r2, r4
 8005664:	462b      	mov	r3, r5
 8005666:	f7fa ffcf 	bl	8000608 <__aeabi_dmul>
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	0000      	movs	r0, r0
	...

08005670 <_strtod_l>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	ed2d 8b02 	vpush	{d8}
 8005678:	b09d      	sub	sp, #116	; 0x74
 800567a:	461f      	mov	r7, r3
 800567c:	2300      	movs	r3, #0
 800567e:	9318      	str	r3, [sp, #96]	; 0x60
 8005680:	4ba2      	ldr	r3, [pc, #648]	; (800590c <_strtod_l+0x29c>)
 8005682:	9213      	str	r2, [sp, #76]	; 0x4c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	4604      	mov	r4, r0
 800568a:	4618      	mov	r0, r3
 800568c:	4688      	mov	r8, r1
 800568e:	f7fa fda7 	bl	80001e0 <strlen>
 8005692:	f04f 0a00 	mov.w	sl, #0
 8005696:	4605      	mov	r5, r0
 8005698:	f04f 0b00 	mov.w	fp, #0
 800569c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80056a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	2a2b      	cmp	r2, #43	; 0x2b
 80056a6:	d04e      	beq.n	8005746 <_strtod_l+0xd6>
 80056a8:	d83b      	bhi.n	8005722 <_strtod_l+0xb2>
 80056aa:	2a0d      	cmp	r2, #13
 80056ac:	d834      	bhi.n	8005718 <_strtod_l+0xa8>
 80056ae:	2a08      	cmp	r2, #8
 80056b0:	d834      	bhi.n	800571c <_strtod_l+0xac>
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	d03e      	beq.n	8005734 <_strtod_l+0xc4>
 80056b6:	2300      	movs	r3, #0
 80056b8:	930a      	str	r3, [sp, #40]	; 0x28
 80056ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80056bc:	7833      	ldrb	r3, [r6, #0]
 80056be:	2b30      	cmp	r3, #48	; 0x30
 80056c0:	f040 80b0 	bne.w	8005824 <_strtod_l+0x1b4>
 80056c4:	7873      	ldrb	r3, [r6, #1]
 80056c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80056ca:	2b58      	cmp	r3, #88	; 0x58
 80056cc:	d168      	bne.n	80057a0 <_strtod_l+0x130>
 80056ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	ab18      	add	r3, sp, #96	; 0x60
 80056d4:	9702      	str	r7, [sp, #8]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	4a8d      	ldr	r2, [pc, #564]	; (8005910 <_strtod_l+0x2a0>)
 80056da:	ab19      	add	r3, sp, #100	; 0x64
 80056dc:	a917      	add	r1, sp, #92	; 0x5c
 80056de:	4620      	mov	r0, r4
 80056e0:	f001 fd38 	bl	8007154 <__gethex>
 80056e4:	f010 0707 	ands.w	r7, r0, #7
 80056e8:	4605      	mov	r5, r0
 80056ea:	d005      	beq.n	80056f8 <_strtod_l+0x88>
 80056ec:	2f06      	cmp	r7, #6
 80056ee:	d12c      	bne.n	800574a <_strtod_l+0xda>
 80056f0:	3601      	adds	r6, #1
 80056f2:	2300      	movs	r3, #0
 80056f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80056f6:	930a      	str	r3, [sp, #40]	; 0x28
 80056f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f040 8590 	bne.w	8006220 <_strtod_l+0xbb0>
 8005700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005702:	b1eb      	cbz	r3, 8005740 <_strtod_l+0xd0>
 8005704:	4652      	mov	r2, sl
 8005706:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800570a:	ec43 2b10 	vmov	d0, r2, r3
 800570e:	b01d      	add	sp, #116	; 0x74
 8005710:	ecbd 8b02 	vpop	{d8}
 8005714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005718:	2a20      	cmp	r2, #32
 800571a:	d1cc      	bne.n	80056b6 <_strtod_l+0x46>
 800571c:	3301      	adds	r3, #1
 800571e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005720:	e7be      	b.n	80056a0 <_strtod_l+0x30>
 8005722:	2a2d      	cmp	r2, #45	; 0x2d
 8005724:	d1c7      	bne.n	80056b6 <_strtod_l+0x46>
 8005726:	2201      	movs	r2, #1
 8005728:	920a      	str	r2, [sp, #40]	; 0x28
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	9217      	str	r2, [sp, #92]	; 0x5c
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1c2      	bne.n	80056ba <_strtod_l+0x4a>
 8005734:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005736:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800573a:	2b00      	cmp	r3, #0
 800573c:	f040 856e 	bne.w	800621c <_strtod_l+0xbac>
 8005740:	4652      	mov	r2, sl
 8005742:	465b      	mov	r3, fp
 8005744:	e7e1      	b.n	800570a <_strtod_l+0x9a>
 8005746:	2200      	movs	r2, #0
 8005748:	e7ee      	b.n	8005728 <_strtod_l+0xb8>
 800574a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800574c:	b13a      	cbz	r2, 800575e <_strtod_l+0xee>
 800574e:	2135      	movs	r1, #53	; 0x35
 8005750:	a81a      	add	r0, sp, #104	; 0x68
 8005752:	f002 fcb0 	bl	80080b6 <__copybits>
 8005756:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005758:	4620      	mov	r0, r4
 800575a:	f002 f86f 	bl	800783c <_Bfree>
 800575e:	3f01      	subs	r7, #1
 8005760:	2f04      	cmp	r7, #4
 8005762:	d806      	bhi.n	8005772 <_strtod_l+0x102>
 8005764:	e8df f007 	tbb	[pc, r7]
 8005768:	1714030a 	.word	0x1714030a
 800576c:	0a          	.byte	0x0a
 800576d:	00          	.byte	0x00
 800576e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005772:	0728      	lsls	r0, r5, #28
 8005774:	d5c0      	bpl.n	80056f8 <_strtod_l+0x88>
 8005776:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800577a:	e7bd      	b.n	80056f8 <_strtod_l+0x88>
 800577c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005780:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005782:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005786:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800578a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800578e:	e7f0      	b.n	8005772 <_strtod_l+0x102>
 8005790:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005914 <_strtod_l+0x2a4>
 8005794:	e7ed      	b.n	8005772 <_strtod_l+0x102>
 8005796:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800579a:	f04f 3aff 	mov.w	sl, #4294967295
 800579e:	e7e8      	b.n	8005772 <_strtod_l+0x102>
 80057a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2b30      	cmp	r3, #48	; 0x30
 80057aa:	d0f9      	beq.n	80057a0 <_strtod_l+0x130>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0a3      	beq.n	80056f8 <_strtod_l+0x88>
 80057b0:	2301      	movs	r3, #1
 80057b2:	f04f 0900 	mov.w	r9, #0
 80057b6:	9304      	str	r3, [sp, #16]
 80057b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057ba:	9308      	str	r3, [sp, #32]
 80057bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80057c0:	464f      	mov	r7, r9
 80057c2:	220a      	movs	r2, #10
 80057c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80057c6:	7806      	ldrb	r6, [r0, #0]
 80057c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80057cc:	b2d9      	uxtb	r1, r3
 80057ce:	2909      	cmp	r1, #9
 80057d0:	d92a      	bls.n	8005828 <_strtod_l+0x1b8>
 80057d2:	9905      	ldr	r1, [sp, #20]
 80057d4:	462a      	mov	r2, r5
 80057d6:	f002 ff1f 	bl	8008618 <strncmp>
 80057da:	b398      	cbz	r0, 8005844 <_strtod_l+0x1d4>
 80057dc:	2000      	movs	r0, #0
 80057de:	4632      	mov	r2, r6
 80057e0:	463d      	mov	r5, r7
 80057e2:	9005      	str	r0, [sp, #20]
 80057e4:	4603      	mov	r3, r0
 80057e6:	2a65      	cmp	r2, #101	; 0x65
 80057e8:	d001      	beq.n	80057ee <_strtod_l+0x17e>
 80057ea:	2a45      	cmp	r2, #69	; 0x45
 80057ec:	d118      	bne.n	8005820 <_strtod_l+0x1b0>
 80057ee:	b91d      	cbnz	r5, 80057f8 <_strtod_l+0x188>
 80057f0:	9a04      	ldr	r2, [sp, #16]
 80057f2:	4302      	orrs	r2, r0
 80057f4:	d09e      	beq.n	8005734 <_strtod_l+0xc4>
 80057f6:	2500      	movs	r5, #0
 80057f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80057fc:	f108 0201 	add.w	r2, r8, #1
 8005800:	9217      	str	r2, [sp, #92]	; 0x5c
 8005802:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005806:	2a2b      	cmp	r2, #43	; 0x2b
 8005808:	d075      	beq.n	80058f6 <_strtod_l+0x286>
 800580a:	2a2d      	cmp	r2, #45	; 0x2d
 800580c:	d07b      	beq.n	8005906 <_strtod_l+0x296>
 800580e:	f04f 0c00 	mov.w	ip, #0
 8005812:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005816:	2909      	cmp	r1, #9
 8005818:	f240 8082 	bls.w	8005920 <_strtod_l+0x2b0>
 800581c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005820:	2600      	movs	r6, #0
 8005822:	e09d      	b.n	8005960 <_strtod_l+0x2f0>
 8005824:	2300      	movs	r3, #0
 8005826:	e7c4      	b.n	80057b2 <_strtod_l+0x142>
 8005828:	2f08      	cmp	r7, #8
 800582a:	bfd8      	it	le
 800582c:	9907      	ldrle	r1, [sp, #28]
 800582e:	f100 0001 	add.w	r0, r0, #1
 8005832:	bfda      	itte	le
 8005834:	fb02 3301 	mlale	r3, r2, r1, r3
 8005838:	9307      	strle	r3, [sp, #28]
 800583a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800583e:	3701      	adds	r7, #1
 8005840:	9017      	str	r0, [sp, #92]	; 0x5c
 8005842:	e7bf      	b.n	80057c4 <_strtod_l+0x154>
 8005844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005846:	195a      	adds	r2, r3, r5
 8005848:	9217      	str	r2, [sp, #92]	; 0x5c
 800584a:	5d5a      	ldrb	r2, [r3, r5]
 800584c:	2f00      	cmp	r7, #0
 800584e:	d037      	beq.n	80058c0 <_strtod_l+0x250>
 8005850:	9005      	str	r0, [sp, #20]
 8005852:	463d      	mov	r5, r7
 8005854:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005858:	2b09      	cmp	r3, #9
 800585a:	d912      	bls.n	8005882 <_strtod_l+0x212>
 800585c:	2301      	movs	r3, #1
 800585e:	e7c2      	b.n	80057e6 <_strtod_l+0x176>
 8005860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	9217      	str	r2, [sp, #92]	; 0x5c
 8005866:	785a      	ldrb	r2, [r3, #1]
 8005868:	3001      	adds	r0, #1
 800586a:	2a30      	cmp	r2, #48	; 0x30
 800586c:	d0f8      	beq.n	8005860 <_strtod_l+0x1f0>
 800586e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005872:	2b08      	cmp	r3, #8
 8005874:	f200 84d9 	bhi.w	800622a <_strtod_l+0xbba>
 8005878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800587a:	9005      	str	r0, [sp, #20]
 800587c:	2000      	movs	r0, #0
 800587e:	9308      	str	r3, [sp, #32]
 8005880:	4605      	mov	r5, r0
 8005882:	3a30      	subs	r2, #48	; 0x30
 8005884:	f100 0301 	add.w	r3, r0, #1
 8005888:	d014      	beq.n	80058b4 <_strtod_l+0x244>
 800588a:	9905      	ldr	r1, [sp, #20]
 800588c:	4419      	add	r1, r3
 800588e:	9105      	str	r1, [sp, #20]
 8005890:	462b      	mov	r3, r5
 8005892:	eb00 0e05 	add.w	lr, r0, r5
 8005896:	210a      	movs	r1, #10
 8005898:	4573      	cmp	r3, lr
 800589a:	d113      	bne.n	80058c4 <_strtod_l+0x254>
 800589c:	182b      	adds	r3, r5, r0
 800589e:	2b08      	cmp	r3, #8
 80058a0:	f105 0501 	add.w	r5, r5, #1
 80058a4:	4405      	add	r5, r0
 80058a6:	dc1c      	bgt.n	80058e2 <_strtod_l+0x272>
 80058a8:	9907      	ldr	r1, [sp, #28]
 80058aa:	230a      	movs	r3, #10
 80058ac:	fb03 2301 	mla	r3, r3, r1, r2
 80058b0:	9307      	str	r3, [sp, #28]
 80058b2:	2300      	movs	r3, #0
 80058b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80058b6:	1c51      	adds	r1, r2, #1
 80058b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80058ba:	7852      	ldrb	r2, [r2, #1]
 80058bc:	4618      	mov	r0, r3
 80058be:	e7c9      	b.n	8005854 <_strtod_l+0x1e4>
 80058c0:	4638      	mov	r0, r7
 80058c2:	e7d2      	b.n	800586a <_strtod_l+0x1fa>
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	dc04      	bgt.n	80058d2 <_strtod_l+0x262>
 80058c8:	9e07      	ldr	r6, [sp, #28]
 80058ca:	434e      	muls	r6, r1
 80058cc:	9607      	str	r6, [sp, #28]
 80058ce:	3301      	adds	r3, #1
 80058d0:	e7e2      	b.n	8005898 <_strtod_l+0x228>
 80058d2:	f103 0c01 	add.w	ip, r3, #1
 80058d6:	f1bc 0f10 	cmp.w	ip, #16
 80058da:	bfd8      	it	le
 80058dc:	fb01 f909 	mulle.w	r9, r1, r9
 80058e0:	e7f5      	b.n	80058ce <_strtod_l+0x25e>
 80058e2:	2d10      	cmp	r5, #16
 80058e4:	bfdc      	itt	le
 80058e6:	230a      	movle	r3, #10
 80058e8:	fb03 2909 	mlale	r9, r3, r9, r2
 80058ec:	e7e1      	b.n	80058b2 <_strtod_l+0x242>
 80058ee:	2300      	movs	r3, #0
 80058f0:	9305      	str	r3, [sp, #20]
 80058f2:	2301      	movs	r3, #1
 80058f4:	e77c      	b.n	80057f0 <_strtod_l+0x180>
 80058f6:	f04f 0c00 	mov.w	ip, #0
 80058fa:	f108 0202 	add.w	r2, r8, #2
 80058fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8005900:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005904:	e785      	b.n	8005812 <_strtod_l+0x1a2>
 8005906:	f04f 0c01 	mov.w	ip, #1
 800590a:	e7f6      	b.n	80058fa <_strtod_l+0x28a>
 800590c:	08009598 	.word	0x08009598
 8005910:	0800934c 	.word	0x0800934c
 8005914:	7ff00000 	.word	0x7ff00000
 8005918:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800591a:	1c51      	adds	r1, r2, #1
 800591c:	9117      	str	r1, [sp, #92]	; 0x5c
 800591e:	7852      	ldrb	r2, [r2, #1]
 8005920:	2a30      	cmp	r2, #48	; 0x30
 8005922:	d0f9      	beq.n	8005918 <_strtod_l+0x2a8>
 8005924:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005928:	2908      	cmp	r1, #8
 800592a:	f63f af79 	bhi.w	8005820 <_strtod_l+0x1b0>
 800592e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005932:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005934:	9206      	str	r2, [sp, #24]
 8005936:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005938:	1c51      	adds	r1, r2, #1
 800593a:	9117      	str	r1, [sp, #92]	; 0x5c
 800593c:	7852      	ldrb	r2, [r2, #1]
 800593e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005942:	2e09      	cmp	r6, #9
 8005944:	d937      	bls.n	80059b6 <_strtod_l+0x346>
 8005946:	9e06      	ldr	r6, [sp, #24]
 8005948:	1b89      	subs	r1, r1, r6
 800594a:	2908      	cmp	r1, #8
 800594c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005950:	dc02      	bgt.n	8005958 <_strtod_l+0x2e8>
 8005952:	4576      	cmp	r6, lr
 8005954:	bfa8      	it	ge
 8005956:	4676      	movge	r6, lr
 8005958:	f1bc 0f00 	cmp.w	ip, #0
 800595c:	d000      	beq.n	8005960 <_strtod_l+0x2f0>
 800595e:	4276      	negs	r6, r6
 8005960:	2d00      	cmp	r5, #0
 8005962:	d14d      	bne.n	8005a00 <_strtod_l+0x390>
 8005964:	9904      	ldr	r1, [sp, #16]
 8005966:	4301      	orrs	r1, r0
 8005968:	f47f aec6 	bne.w	80056f8 <_strtod_l+0x88>
 800596c:	2b00      	cmp	r3, #0
 800596e:	f47f aee1 	bne.w	8005734 <_strtod_l+0xc4>
 8005972:	2a69      	cmp	r2, #105	; 0x69
 8005974:	d027      	beq.n	80059c6 <_strtod_l+0x356>
 8005976:	dc24      	bgt.n	80059c2 <_strtod_l+0x352>
 8005978:	2a49      	cmp	r2, #73	; 0x49
 800597a:	d024      	beq.n	80059c6 <_strtod_l+0x356>
 800597c:	2a4e      	cmp	r2, #78	; 0x4e
 800597e:	f47f aed9 	bne.w	8005734 <_strtod_l+0xc4>
 8005982:	499f      	ldr	r1, [pc, #636]	; (8005c00 <_strtod_l+0x590>)
 8005984:	a817      	add	r0, sp, #92	; 0x5c
 8005986:	f001 fe3d 	bl	8007604 <__match>
 800598a:	2800      	cmp	r0, #0
 800598c:	f43f aed2 	beq.w	8005734 <_strtod_l+0xc4>
 8005990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b28      	cmp	r3, #40	; 0x28
 8005996:	d12d      	bne.n	80059f4 <_strtod_l+0x384>
 8005998:	499a      	ldr	r1, [pc, #616]	; (8005c04 <_strtod_l+0x594>)
 800599a:	aa1a      	add	r2, sp, #104	; 0x68
 800599c:	a817      	add	r0, sp, #92	; 0x5c
 800599e:	f001 fe45 	bl	800762c <__hexnan>
 80059a2:	2805      	cmp	r0, #5
 80059a4:	d126      	bne.n	80059f4 <_strtod_l+0x384>
 80059a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80059ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80059b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80059b4:	e6a0      	b.n	80056f8 <_strtod_l+0x88>
 80059b6:	210a      	movs	r1, #10
 80059b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80059bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80059c0:	e7b9      	b.n	8005936 <_strtod_l+0x2c6>
 80059c2:	2a6e      	cmp	r2, #110	; 0x6e
 80059c4:	e7db      	b.n	800597e <_strtod_l+0x30e>
 80059c6:	4990      	ldr	r1, [pc, #576]	; (8005c08 <_strtod_l+0x598>)
 80059c8:	a817      	add	r0, sp, #92	; 0x5c
 80059ca:	f001 fe1b 	bl	8007604 <__match>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	f43f aeb0 	beq.w	8005734 <_strtod_l+0xc4>
 80059d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059d6:	498d      	ldr	r1, [pc, #564]	; (8005c0c <_strtod_l+0x59c>)
 80059d8:	3b01      	subs	r3, #1
 80059da:	a817      	add	r0, sp, #92	; 0x5c
 80059dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80059de:	f001 fe11 	bl	8007604 <__match>
 80059e2:	b910      	cbnz	r0, 80059ea <_strtod_l+0x37a>
 80059e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059e6:	3301      	adds	r3, #1
 80059e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80059ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005c1c <_strtod_l+0x5ac>
 80059ee:	f04f 0a00 	mov.w	sl, #0
 80059f2:	e681      	b.n	80056f8 <_strtod_l+0x88>
 80059f4:	4886      	ldr	r0, [pc, #536]	; (8005c10 <_strtod_l+0x5a0>)
 80059f6:	f002 fdf7 	bl	80085e8 <nan>
 80059fa:	ec5b ab10 	vmov	sl, fp, d0
 80059fe:	e67b      	b.n	80056f8 <_strtod_l+0x88>
 8005a00:	9b05      	ldr	r3, [sp, #20]
 8005a02:	9807      	ldr	r0, [sp, #28]
 8005a04:	1af3      	subs	r3, r6, r3
 8005a06:	2f00      	cmp	r7, #0
 8005a08:	bf08      	it	eq
 8005a0a:	462f      	moveq	r7, r5
 8005a0c:	2d10      	cmp	r5, #16
 8005a0e:	9306      	str	r3, [sp, #24]
 8005a10:	46a8      	mov	r8, r5
 8005a12:	bfa8      	it	ge
 8005a14:	f04f 0810 	movge.w	r8, #16
 8005a18:	f7fa fd7c 	bl	8000514 <__aeabi_ui2d>
 8005a1c:	2d09      	cmp	r5, #9
 8005a1e:	4682      	mov	sl, r0
 8005a20:	468b      	mov	fp, r1
 8005a22:	dd13      	ble.n	8005a4c <_strtod_l+0x3dc>
 8005a24:	4b7b      	ldr	r3, [pc, #492]	; (8005c14 <_strtod_l+0x5a4>)
 8005a26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005a2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005a2e:	f7fa fdeb 	bl	8000608 <__aeabi_dmul>
 8005a32:	4682      	mov	sl, r0
 8005a34:	4648      	mov	r0, r9
 8005a36:	468b      	mov	fp, r1
 8005a38:	f7fa fd6c 	bl	8000514 <__aeabi_ui2d>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4650      	mov	r0, sl
 8005a42:	4659      	mov	r1, fp
 8005a44:	f7fa fc2a 	bl	800029c <__adddf3>
 8005a48:	4682      	mov	sl, r0
 8005a4a:	468b      	mov	fp, r1
 8005a4c:	2d0f      	cmp	r5, #15
 8005a4e:	dc38      	bgt.n	8005ac2 <_strtod_l+0x452>
 8005a50:	9b06      	ldr	r3, [sp, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f43f ae50 	beq.w	80056f8 <_strtod_l+0x88>
 8005a58:	dd24      	ble.n	8005aa4 <_strtod_l+0x434>
 8005a5a:	2b16      	cmp	r3, #22
 8005a5c:	dc0b      	bgt.n	8005a76 <_strtod_l+0x406>
 8005a5e:	496d      	ldr	r1, [pc, #436]	; (8005c14 <_strtod_l+0x5a4>)
 8005a60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a68:	4652      	mov	r2, sl
 8005a6a:	465b      	mov	r3, fp
 8005a6c:	f7fa fdcc 	bl	8000608 <__aeabi_dmul>
 8005a70:	4682      	mov	sl, r0
 8005a72:	468b      	mov	fp, r1
 8005a74:	e640      	b.n	80056f8 <_strtod_l+0x88>
 8005a76:	9a06      	ldr	r2, [sp, #24]
 8005a78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	db20      	blt.n	8005ac2 <_strtod_l+0x452>
 8005a80:	4c64      	ldr	r4, [pc, #400]	; (8005c14 <_strtod_l+0x5a4>)
 8005a82:	f1c5 050f 	rsb	r5, r5, #15
 8005a86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005a8a:	4652      	mov	r2, sl
 8005a8c:	465b      	mov	r3, fp
 8005a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a92:	f7fa fdb9 	bl	8000608 <__aeabi_dmul>
 8005a96:	9b06      	ldr	r3, [sp, #24]
 8005a98:	1b5d      	subs	r5, r3, r5
 8005a9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005a9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005aa2:	e7e3      	b.n	8005a6c <_strtod_l+0x3fc>
 8005aa4:	9b06      	ldr	r3, [sp, #24]
 8005aa6:	3316      	adds	r3, #22
 8005aa8:	db0b      	blt.n	8005ac2 <_strtod_l+0x452>
 8005aaa:	9b05      	ldr	r3, [sp, #20]
 8005aac:	1b9e      	subs	r6, r3, r6
 8005aae:	4b59      	ldr	r3, [pc, #356]	; (8005c14 <_strtod_l+0x5a4>)
 8005ab0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005ab4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ab8:	4650      	mov	r0, sl
 8005aba:	4659      	mov	r1, fp
 8005abc:	f7fa fece 	bl	800085c <__aeabi_ddiv>
 8005ac0:	e7d6      	b.n	8005a70 <_strtod_l+0x400>
 8005ac2:	9b06      	ldr	r3, [sp, #24]
 8005ac4:	eba5 0808 	sub.w	r8, r5, r8
 8005ac8:	4498      	add	r8, r3
 8005aca:	f1b8 0f00 	cmp.w	r8, #0
 8005ace:	dd74      	ble.n	8005bba <_strtod_l+0x54a>
 8005ad0:	f018 030f 	ands.w	r3, r8, #15
 8005ad4:	d00a      	beq.n	8005aec <_strtod_l+0x47c>
 8005ad6:	494f      	ldr	r1, [pc, #316]	; (8005c14 <_strtod_l+0x5a4>)
 8005ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005adc:	4652      	mov	r2, sl
 8005ade:	465b      	mov	r3, fp
 8005ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ae4:	f7fa fd90 	bl	8000608 <__aeabi_dmul>
 8005ae8:	4682      	mov	sl, r0
 8005aea:	468b      	mov	fp, r1
 8005aec:	f038 080f 	bics.w	r8, r8, #15
 8005af0:	d04f      	beq.n	8005b92 <_strtod_l+0x522>
 8005af2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005af6:	dd22      	ble.n	8005b3e <_strtod_l+0x4ce>
 8005af8:	2500      	movs	r5, #0
 8005afa:	462e      	mov	r6, r5
 8005afc:	9507      	str	r5, [sp, #28]
 8005afe:	9505      	str	r5, [sp, #20]
 8005b00:	2322      	movs	r3, #34	; 0x22
 8005b02:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005c1c <_strtod_l+0x5ac>
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	f04f 0a00 	mov.w	sl, #0
 8005b0c:	9b07      	ldr	r3, [sp, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f43f adf2 	beq.w	80056f8 <_strtod_l+0x88>
 8005b14:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b16:	4620      	mov	r0, r4
 8005b18:	f001 fe90 	bl	800783c <_Bfree>
 8005b1c:	9905      	ldr	r1, [sp, #20]
 8005b1e:	4620      	mov	r0, r4
 8005b20:	f001 fe8c 	bl	800783c <_Bfree>
 8005b24:	4631      	mov	r1, r6
 8005b26:	4620      	mov	r0, r4
 8005b28:	f001 fe88 	bl	800783c <_Bfree>
 8005b2c:	9907      	ldr	r1, [sp, #28]
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f001 fe84 	bl	800783c <_Bfree>
 8005b34:	4629      	mov	r1, r5
 8005b36:	4620      	mov	r0, r4
 8005b38:	f001 fe80 	bl	800783c <_Bfree>
 8005b3c:	e5dc      	b.n	80056f8 <_strtod_l+0x88>
 8005b3e:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <_strtod_l+0x5a8>)
 8005b40:	9304      	str	r3, [sp, #16]
 8005b42:	2300      	movs	r3, #0
 8005b44:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005b48:	4650      	mov	r0, sl
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	4699      	mov	r9, r3
 8005b4e:	f1b8 0f01 	cmp.w	r8, #1
 8005b52:	dc21      	bgt.n	8005b98 <_strtod_l+0x528>
 8005b54:	b10b      	cbz	r3, 8005b5a <_strtod_l+0x4ea>
 8005b56:	4682      	mov	sl, r0
 8005b58:	468b      	mov	fp, r1
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	; (8005c18 <_strtod_l+0x5a8>)
 8005b5c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005b60:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005b64:	4652      	mov	r2, sl
 8005b66:	465b      	mov	r3, fp
 8005b68:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005b6c:	f7fa fd4c 	bl	8000608 <__aeabi_dmul>
 8005b70:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <_strtod_l+0x5ac>)
 8005b72:	460a      	mov	r2, r1
 8005b74:	400b      	ands	r3, r1
 8005b76:	492a      	ldr	r1, [pc, #168]	; (8005c20 <_strtod_l+0x5b0>)
 8005b78:	428b      	cmp	r3, r1
 8005b7a:	4682      	mov	sl, r0
 8005b7c:	d8bc      	bhi.n	8005af8 <_strtod_l+0x488>
 8005b7e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b82:	428b      	cmp	r3, r1
 8005b84:	bf86      	itte	hi
 8005b86:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005c24 <_strtod_l+0x5b4>
 8005b8a:	f04f 3aff 	movhi.w	sl, #4294967295
 8005b8e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005b92:	2300      	movs	r3, #0
 8005b94:	9304      	str	r3, [sp, #16]
 8005b96:	e084      	b.n	8005ca2 <_strtod_l+0x632>
 8005b98:	f018 0f01 	tst.w	r8, #1
 8005b9c:	d005      	beq.n	8005baa <_strtod_l+0x53a>
 8005b9e:	9b04      	ldr	r3, [sp, #16]
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f7fa fd30 	bl	8000608 <__aeabi_dmul>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	9a04      	ldr	r2, [sp, #16]
 8005bac:	3208      	adds	r2, #8
 8005bae:	f109 0901 	add.w	r9, r9, #1
 8005bb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005bb6:	9204      	str	r2, [sp, #16]
 8005bb8:	e7c9      	b.n	8005b4e <_strtod_l+0x4de>
 8005bba:	d0ea      	beq.n	8005b92 <_strtod_l+0x522>
 8005bbc:	f1c8 0800 	rsb	r8, r8, #0
 8005bc0:	f018 020f 	ands.w	r2, r8, #15
 8005bc4:	d00a      	beq.n	8005bdc <_strtod_l+0x56c>
 8005bc6:	4b13      	ldr	r3, [pc, #76]	; (8005c14 <_strtod_l+0x5a4>)
 8005bc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bcc:	4650      	mov	r0, sl
 8005bce:	4659      	mov	r1, fp
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fe42 	bl	800085c <__aeabi_ddiv>
 8005bd8:	4682      	mov	sl, r0
 8005bda:	468b      	mov	fp, r1
 8005bdc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005be0:	d0d7      	beq.n	8005b92 <_strtod_l+0x522>
 8005be2:	f1b8 0f1f 	cmp.w	r8, #31
 8005be6:	dd1f      	ble.n	8005c28 <_strtod_l+0x5b8>
 8005be8:	2500      	movs	r5, #0
 8005bea:	462e      	mov	r6, r5
 8005bec:	9507      	str	r5, [sp, #28]
 8005bee:	9505      	str	r5, [sp, #20]
 8005bf0:	2322      	movs	r3, #34	; 0x22
 8005bf2:	f04f 0a00 	mov.w	sl, #0
 8005bf6:	f04f 0b00 	mov.w	fp, #0
 8005bfa:	6023      	str	r3, [r4, #0]
 8005bfc:	e786      	b.n	8005b0c <_strtod_l+0x49c>
 8005bfe:	bf00      	nop
 8005c00:	0800931d 	.word	0x0800931d
 8005c04:	08009360 	.word	0x08009360
 8005c08:	08009315 	.word	0x08009315
 8005c0c:	080094a4 	.word	0x080094a4
 8005c10:	08009750 	.word	0x08009750
 8005c14:	08009630 	.word	0x08009630
 8005c18:	08009608 	.word	0x08009608
 8005c1c:	7ff00000 	.word	0x7ff00000
 8005c20:	7ca00000 	.word	0x7ca00000
 8005c24:	7fefffff 	.word	0x7fefffff
 8005c28:	f018 0310 	ands.w	r3, r8, #16
 8005c2c:	bf18      	it	ne
 8005c2e:	236a      	movne	r3, #106	; 0x6a
 8005c30:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005fe0 <_strtod_l+0x970>
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	4650      	mov	r0, sl
 8005c38:	4659      	mov	r1, fp
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f018 0f01 	tst.w	r8, #1
 8005c40:	d004      	beq.n	8005c4c <_strtod_l+0x5dc>
 8005c42:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005c46:	f7fa fcdf 	bl	8000608 <__aeabi_dmul>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005c50:	f109 0908 	add.w	r9, r9, #8
 8005c54:	d1f2      	bne.n	8005c3c <_strtod_l+0x5cc>
 8005c56:	b10b      	cbz	r3, 8005c5c <_strtod_l+0x5ec>
 8005c58:	4682      	mov	sl, r0
 8005c5a:	468b      	mov	fp, r1
 8005c5c:	9b04      	ldr	r3, [sp, #16]
 8005c5e:	b1c3      	cbz	r3, 8005c92 <_strtod_l+0x622>
 8005c60:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005c64:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	4659      	mov	r1, fp
 8005c6c:	dd11      	ble.n	8005c92 <_strtod_l+0x622>
 8005c6e:	2b1f      	cmp	r3, #31
 8005c70:	f340 8124 	ble.w	8005ebc <_strtod_l+0x84c>
 8005c74:	2b34      	cmp	r3, #52	; 0x34
 8005c76:	bfde      	ittt	le
 8005c78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005c7c:	f04f 33ff 	movle.w	r3, #4294967295
 8005c80:	fa03 f202 	lslle.w	r2, r3, r2
 8005c84:	f04f 0a00 	mov.w	sl, #0
 8005c88:	bfcc      	ite	gt
 8005c8a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005c8e:	ea02 0b01 	andle.w	fp, r2, r1
 8005c92:	2200      	movs	r2, #0
 8005c94:	2300      	movs	r3, #0
 8005c96:	4650      	mov	r0, sl
 8005c98:	4659      	mov	r1, fp
 8005c9a:	f7fa ff1d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d1a2      	bne.n	8005be8 <_strtod_l+0x578>
 8005ca2:	9b07      	ldr	r3, [sp, #28]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	9908      	ldr	r1, [sp, #32]
 8005ca8:	462b      	mov	r3, r5
 8005caa:	463a      	mov	r2, r7
 8005cac:	4620      	mov	r0, r4
 8005cae:	f001 fe2d 	bl	800790c <__s2b>
 8005cb2:	9007      	str	r0, [sp, #28]
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	f43f af1f 	beq.w	8005af8 <_strtod_l+0x488>
 8005cba:	9b05      	ldr	r3, [sp, #20]
 8005cbc:	1b9e      	subs	r6, r3, r6
 8005cbe:	9b06      	ldr	r3, [sp, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bfb4      	ite	lt
 8005cc4:	4633      	movlt	r3, r6
 8005cc6:	2300      	movge	r3, #0
 8005cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8005cca:	9b06      	ldr	r3, [sp, #24]
 8005ccc:	2500      	movs	r5, #0
 8005cce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cd2:	9312      	str	r3, [sp, #72]	; 0x48
 8005cd4:	462e      	mov	r6, r5
 8005cd6:	9b07      	ldr	r3, [sp, #28]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	f001 fd6e 	bl	80077bc <_Balloc>
 8005ce0:	9005      	str	r0, [sp, #20]
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	f43f af0c 	beq.w	8005b00 <_strtod_l+0x490>
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	3202      	adds	r2, #2
 8005cee:	f103 010c 	add.w	r1, r3, #12
 8005cf2:	0092      	lsls	r2, r2, #2
 8005cf4:	300c      	adds	r0, #12
 8005cf6:	f001 fd53 	bl	80077a0 <memcpy>
 8005cfa:	ec4b ab10 	vmov	d0, sl, fp
 8005cfe:	aa1a      	add	r2, sp, #104	; 0x68
 8005d00:	a919      	add	r1, sp, #100	; 0x64
 8005d02:	4620      	mov	r0, r4
 8005d04:	f002 f948 	bl	8007f98 <__d2b>
 8005d08:	ec4b ab18 	vmov	d8, sl, fp
 8005d0c:	9018      	str	r0, [sp, #96]	; 0x60
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f43f aef6 	beq.w	8005b00 <_strtod_l+0x490>
 8005d14:	2101      	movs	r1, #1
 8005d16:	4620      	mov	r0, r4
 8005d18:	f001 fe92 	bl	8007a40 <__i2b>
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f43f aeee 	beq.w	8005b00 <_strtod_l+0x490>
 8005d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d26:	9904      	ldr	r1, [sp, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bfab      	itete	ge
 8005d2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005d2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005d30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005d32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005d36:	bfac      	ite	ge
 8005d38:	eb03 0902 	addge.w	r9, r3, r2
 8005d3c:	1ad7      	sublt	r7, r2, r3
 8005d3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005d40:	eba3 0801 	sub.w	r8, r3, r1
 8005d44:	4490      	add	r8, r2
 8005d46:	4ba1      	ldr	r3, [pc, #644]	; (8005fcc <_strtod_l+0x95c>)
 8005d48:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d4c:	4598      	cmp	r8, r3
 8005d4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d52:	f280 80c7 	bge.w	8005ee4 <_strtod_l+0x874>
 8005d56:	eba3 0308 	sub.w	r3, r3, r8
 8005d5a:	2b1f      	cmp	r3, #31
 8005d5c:	eba2 0203 	sub.w	r2, r2, r3
 8005d60:	f04f 0101 	mov.w	r1, #1
 8005d64:	f300 80b1 	bgt.w	8005eca <_strtod_l+0x85a>
 8005d68:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6c:	930d      	str	r3, [sp, #52]	; 0x34
 8005d6e:	2300      	movs	r3, #0
 8005d70:	9308      	str	r3, [sp, #32]
 8005d72:	eb09 0802 	add.w	r8, r9, r2
 8005d76:	9b04      	ldr	r3, [sp, #16]
 8005d78:	45c1      	cmp	r9, r8
 8005d7a:	4417      	add	r7, r2
 8005d7c:	441f      	add	r7, r3
 8005d7e:	464b      	mov	r3, r9
 8005d80:	bfa8      	it	ge
 8005d82:	4643      	movge	r3, r8
 8005d84:	42bb      	cmp	r3, r7
 8005d86:	bfa8      	it	ge
 8005d88:	463b      	movge	r3, r7
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bfc2      	ittt	gt
 8005d8e:	eba8 0803 	subgt.w	r8, r8, r3
 8005d92:	1aff      	subgt	r7, r7, r3
 8005d94:	eba9 0903 	subgt.w	r9, r9, r3
 8005d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	dd17      	ble.n	8005dce <_strtod_l+0x75e>
 8005d9e:	4631      	mov	r1, r6
 8005da0:	461a      	mov	r2, r3
 8005da2:	4620      	mov	r0, r4
 8005da4:	f001 ff0c 	bl	8007bc0 <__pow5mult>
 8005da8:	4606      	mov	r6, r0
 8005daa:	2800      	cmp	r0, #0
 8005dac:	f43f aea8 	beq.w	8005b00 <_strtod_l+0x490>
 8005db0:	4601      	mov	r1, r0
 8005db2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005db4:	4620      	mov	r0, r4
 8005db6:	f001 fe59 	bl	8007a6c <__multiply>
 8005dba:	900b      	str	r0, [sp, #44]	; 0x2c
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	f43f ae9f 	beq.w	8005b00 <_strtod_l+0x490>
 8005dc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f001 fd39 	bl	800783c <_Bfree>
 8005dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dcc:	9318      	str	r3, [sp, #96]	; 0x60
 8005dce:	f1b8 0f00 	cmp.w	r8, #0
 8005dd2:	f300 808c 	bgt.w	8005eee <_strtod_l+0x87e>
 8005dd6:	9b06      	ldr	r3, [sp, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dd08      	ble.n	8005dee <_strtod_l+0x77e>
 8005ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dde:	9905      	ldr	r1, [sp, #20]
 8005de0:	4620      	mov	r0, r4
 8005de2:	f001 feed 	bl	8007bc0 <__pow5mult>
 8005de6:	9005      	str	r0, [sp, #20]
 8005de8:	2800      	cmp	r0, #0
 8005dea:	f43f ae89 	beq.w	8005b00 <_strtod_l+0x490>
 8005dee:	2f00      	cmp	r7, #0
 8005df0:	dd08      	ble.n	8005e04 <_strtod_l+0x794>
 8005df2:	9905      	ldr	r1, [sp, #20]
 8005df4:	463a      	mov	r2, r7
 8005df6:	4620      	mov	r0, r4
 8005df8:	f001 ff3c 	bl	8007c74 <__lshift>
 8005dfc:	9005      	str	r0, [sp, #20]
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	f43f ae7e 	beq.w	8005b00 <_strtod_l+0x490>
 8005e04:	f1b9 0f00 	cmp.w	r9, #0
 8005e08:	dd08      	ble.n	8005e1c <_strtod_l+0x7ac>
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	464a      	mov	r2, r9
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f001 ff30 	bl	8007c74 <__lshift>
 8005e14:	4606      	mov	r6, r0
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f ae72 	beq.w	8005b00 <_strtod_l+0x490>
 8005e1c:	9a05      	ldr	r2, [sp, #20]
 8005e1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e20:	4620      	mov	r0, r4
 8005e22:	f001 ffb3 	bl	8007d8c <__mdiff>
 8005e26:	4605      	mov	r5, r0
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	f43f ae69 	beq.w	8005b00 <_strtod_l+0x490>
 8005e2e:	68c3      	ldr	r3, [r0, #12]
 8005e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e32:	2300      	movs	r3, #0
 8005e34:	60c3      	str	r3, [r0, #12]
 8005e36:	4631      	mov	r1, r6
 8005e38:	f001 ff8c 	bl	8007d54 <__mcmp>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	da60      	bge.n	8005f02 <_strtod_l+0x892>
 8005e40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e42:	ea53 030a 	orrs.w	r3, r3, sl
 8005e46:	f040 8082 	bne.w	8005f4e <_strtod_l+0x8de>
 8005e4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d17d      	bne.n	8005f4e <_strtod_l+0x8de>
 8005e52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e56:	0d1b      	lsrs	r3, r3, #20
 8005e58:	051b      	lsls	r3, r3, #20
 8005e5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e5e:	d976      	bls.n	8005f4e <_strtod_l+0x8de>
 8005e60:	696b      	ldr	r3, [r5, #20]
 8005e62:	b913      	cbnz	r3, 8005e6a <_strtod_l+0x7fa>
 8005e64:	692b      	ldr	r3, [r5, #16]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	dd71      	ble.n	8005f4e <_strtod_l+0x8de>
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f001 ff00 	bl	8007c74 <__lshift>
 8005e74:	4631      	mov	r1, r6
 8005e76:	4605      	mov	r5, r0
 8005e78:	f001 ff6c 	bl	8007d54 <__mcmp>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	dd66      	ble.n	8005f4e <_strtod_l+0x8de>
 8005e80:	9904      	ldr	r1, [sp, #16]
 8005e82:	4a53      	ldr	r2, [pc, #332]	; (8005fd0 <_strtod_l+0x960>)
 8005e84:	465b      	mov	r3, fp
 8005e86:	2900      	cmp	r1, #0
 8005e88:	f000 8081 	beq.w	8005f8e <_strtod_l+0x91e>
 8005e8c:	ea02 010b 	and.w	r1, r2, fp
 8005e90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e94:	dc7b      	bgt.n	8005f8e <_strtod_l+0x91e>
 8005e96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005e9a:	f77f aea9 	ble.w	8005bf0 <_strtod_l+0x580>
 8005e9e:	4b4d      	ldr	r3, [pc, #308]	; (8005fd4 <_strtod_l+0x964>)
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	4659      	mov	r1, fp
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f7fa fbaf 	bl	8000608 <__aeabi_dmul>
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4303      	orrs	r3, r0
 8005eae:	bf08      	it	eq
 8005eb0:	2322      	moveq	r3, #34	; 0x22
 8005eb2:	4682      	mov	sl, r0
 8005eb4:	468b      	mov	fp, r1
 8005eb6:	bf08      	it	eq
 8005eb8:	6023      	streq	r3, [r4, #0]
 8005eba:	e62b      	b.n	8005b14 <_strtod_l+0x4a4>
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	ea03 0a0a 	and.w	sl, r3, sl
 8005ec8:	e6e3      	b.n	8005c92 <_strtod_l+0x622>
 8005eca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005ece:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005ed2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005ed6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005eda:	fa01 f308 	lsl.w	r3, r1, r8
 8005ede:	9308      	str	r3, [sp, #32]
 8005ee0:	910d      	str	r1, [sp, #52]	; 0x34
 8005ee2:	e746      	b.n	8005d72 <_strtod_l+0x702>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9308      	str	r3, [sp, #32]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	930d      	str	r3, [sp, #52]	; 0x34
 8005eec:	e741      	b.n	8005d72 <_strtod_l+0x702>
 8005eee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f001 febe 	bl	8007c74 <__lshift>
 8005ef8:	9018      	str	r0, [sp, #96]	; 0x60
 8005efa:	2800      	cmp	r0, #0
 8005efc:	f47f af6b 	bne.w	8005dd6 <_strtod_l+0x766>
 8005f00:	e5fe      	b.n	8005b00 <_strtod_l+0x490>
 8005f02:	465f      	mov	r7, fp
 8005f04:	d16e      	bne.n	8005fe4 <_strtod_l+0x974>
 8005f06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f0c:	b342      	cbz	r2, 8005f60 <_strtod_l+0x8f0>
 8005f0e:	4a32      	ldr	r2, [pc, #200]	; (8005fd8 <_strtod_l+0x968>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d128      	bne.n	8005f66 <_strtod_l+0x8f6>
 8005f14:	9b04      	ldr	r3, [sp, #16]
 8005f16:	4651      	mov	r1, sl
 8005f18:	b1eb      	cbz	r3, 8005f56 <_strtod_l+0x8e6>
 8005f1a:	4b2d      	ldr	r3, [pc, #180]	; (8005fd0 <_strtod_l+0x960>)
 8005f1c:	403b      	ands	r3, r7
 8005f1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	d819      	bhi.n	8005f5c <_strtod_l+0x8ec>
 8005f28:	0d1b      	lsrs	r3, r3, #20
 8005f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	4299      	cmp	r1, r3
 8005f34:	d117      	bne.n	8005f66 <_strtod_l+0x8f6>
 8005f36:	4b29      	ldr	r3, [pc, #164]	; (8005fdc <_strtod_l+0x96c>)
 8005f38:	429f      	cmp	r7, r3
 8005f3a:	d102      	bne.n	8005f42 <_strtod_l+0x8d2>
 8005f3c:	3101      	adds	r1, #1
 8005f3e:	f43f addf 	beq.w	8005b00 <_strtod_l+0x490>
 8005f42:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <_strtod_l+0x960>)
 8005f44:	403b      	ands	r3, r7
 8005f46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005f4a:	f04f 0a00 	mov.w	sl, #0
 8005f4e:	9b04      	ldr	r3, [sp, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1a4      	bne.n	8005e9e <_strtod_l+0x82e>
 8005f54:	e5de      	b.n	8005b14 <_strtod_l+0x4a4>
 8005f56:	f04f 33ff 	mov.w	r3, #4294967295
 8005f5a:	e7ea      	b.n	8005f32 <_strtod_l+0x8c2>
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	e7e8      	b.n	8005f32 <_strtod_l+0x8c2>
 8005f60:	ea53 030a 	orrs.w	r3, r3, sl
 8005f64:	d08c      	beq.n	8005e80 <_strtod_l+0x810>
 8005f66:	9b08      	ldr	r3, [sp, #32]
 8005f68:	b1db      	cbz	r3, 8005fa2 <_strtod_l+0x932>
 8005f6a:	423b      	tst	r3, r7
 8005f6c:	d0ef      	beq.n	8005f4e <_strtod_l+0x8de>
 8005f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f70:	9a04      	ldr	r2, [sp, #16]
 8005f72:	4650      	mov	r0, sl
 8005f74:	4659      	mov	r1, fp
 8005f76:	b1c3      	cbz	r3, 8005faa <_strtod_l+0x93a>
 8005f78:	f7ff fb5c 	bl	8005634 <sulp>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	ec51 0b18 	vmov	r0, r1, d8
 8005f84:	f7fa f98a 	bl	800029c <__adddf3>
 8005f88:	4682      	mov	sl, r0
 8005f8a:	468b      	mov	fp, r1
 8005f8c:	e7df      	b.n	8005f4e <_strtod_l+0x8de>
 8005f8e:	4013      	ands	r3, r2
 8005f90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005f94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005f98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005f9c:	f04f 3aff 	mov.w	sl, #4294967295
 8005fa0:	e7d5      	b.n	8005f4e <_strtod_l+0x8de>
 8005fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa4:	ea13 0f0a 	tst.w	r3, sl
 8005fa8:	e7e0      	b.n	8005f6c <_strtod_l+0x8fc>
 8005faa:	f7ff fb43 	bl	8005634 <sulp>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	ec51 0b18 	vmov	r0, r1, d8
 8005fb6:	f7fa f96f 	bl	8000298 <__aeabi_dsub>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4682      	mov	sl, r0
 8005fc0:	468b      	mov	fp, r1
 8005fc2:	f7fa fd89 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d0c1      	beq.n	8005f4e <_strtod_l+0x8de>
 8005fca:	e611      	b.n	8005bf0 <_strtod_l+0x580>
 8005fcc:	fffffc02 	.word	0xfffffc02
 8005fd0:	7ff00000 	.word	0x7ff00000
 8005fd4:	39500000 	.word	0x39500000
 8005fd8:	000fffff 	.word	0x000fffff
 8005fdc:	7fefffff 	.word	0x7fefffff
 8005fe0:	08009378 	.word	0x08009378
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	f002 f832 	bl	8008050 <__ratio>
 8005fec:	ec59 8b10 	vmov	r8, r9, d0
 8005ff0:	ee10 0a10 	vmov	r0, s0
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa fd80 	bl	8000b00 <__aeabi_dcmple>
 8006000:	2800      	cmp	r0, #0
 8006002:	d07a      	beq.n	80060fa <_strtod_l+0xa8a>
 8006004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d04a      	beq.n	80060a0 <_strtod_l+0xa30>
 800600a:	4b95      	ldr	r3, [pc, #596]	; (8006260 <_strtod_l+0xbf0>)
 800600c:	2200      	movs	r2, #0
 800600e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006012:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006260 <_strtod_l+0xbf0>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	4b92      	ldr	r3, [pc, #584]	; (8006264 <_strtod_l+0xbf4>)
 800601c:	403b      	ands	r3, r7
 800601e:	930d      	str	r3, [sp, #52]	; 0x34
 8006020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006022:	4b91      	ldr	r3, [pc, #580]	; (8006268 <_strtod_l+0xbf8>)
 8006024:	429a      	cmp	r2, r3
 8006026:	f040 80b0 	bne.w	800618a <_strtod_l+0xb1a>
 800602a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800602e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006032:	ec4b ab10 	vmov	d0, sl, fp
 8006036:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800603a:	f001 ff31 	bl	8007ea0 <__ulp>
 800603e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006042:	ec53 2b10 	vmov	r2, r3, d0
 8006046:	f7fa fadf 	bl	8000608 <__aeabi_dmul>
 800604a:	4652      	mov	r2, sl
 800604c:	465b      	mov	r3, fp
 800604e:	f7fa f925 	bl	800029c <__adddf3>
 8006052:	460b      	mov	r3, r1
 8006054:	4983      	ldr	r1, [pc, #524]	; (8006264 <_strtod_l+0xbf4>)
 8006056:	4a85      	ldr	r2, [pc, #532]	; (800626c <_strtod_l+0xbfc>)
 8006058:	4019      	ands	r1, r3
 800605a:	4291      	cmp	r1, r2
 800605c:	4682      	mov	sl, r0
 800605e:	d960      	bls.n	8006122 <_strtod_l+0xab2>
 8006060:	ee18 3a90 	vmov	r3, s17
 8006064:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006068:	4293      	cmp	r3, r2
 800606a:	d104      	bne.n	8006076 <_strtod_l+0xa06>
 800606c:	ee18 3a10 	vmov	r3, s16
 8006070:	3301      	adds	r3, #1
 8006072:	f43f ad45 	beq.w	8005b00 <_strtod_l+0x490>
 8006076:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006278 <_strtod_l+0xc08>
 800607a:	f04f 3aff 	mov.w	sl, #4294967295
 800607e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006080:	4620      	mov	r0, r4
 8006082:	f001 fbdb 	bl	800783c <_Bfree>
 8006086:	9905      	ldr	r1, [sp, #20]
 8006088:	4620      	mov	r0, r4
 800608a:	f001 fbd7 	bl	800783c <_Bfree>
 800608e:	4631      	mov	r1, r6
 8006090:	4620      	mov	r0, r4
 8006092:	f001 fbd3 	bl	800783c <_Bfree>
 8006096:	4629      	mov	r1, r5
 8006098:	4620      	mov	r0, r4
 800609a:	f001 fbcf 	bl	800783c <_Bfree>
 800609e:	e61a      	b.n	8005cd6 <_strtod_l+0x666>
 80060a0:	f1ba 0f00 	cmp.w	sl, #0
 80060a4:	d11b      	bne.n	80060de <_strtod_l+0xa6e>
 80060a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060aa:	b9f3      	cbnz	r3, 80060ea <_strtod_l+0xa7a>
 80060ac:	4b6c      	ldr	r3, [pc, #432]	; (8006260 <_strtod_l+0xbf0>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	f7fa fd1a 	bl	8000aec <__aeabi_dcmplt>
 80060b8:	b9d0      	cbnz	r0, 80060f0 <_strtod_l+0xa80>
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	4b6c      	ldr	r3, [pc, #432]	; (8006270 <_strtod_l+0xc00>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	f7fa faa1 	bl	8000608 <__aeabi_dmul>
 80060c6:	4680      	mov	r8, r0
 80060c8:	4689      	mov	r9, r1
 80060ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80060ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80060d2:	9315      	str	r3, [sp, #84]	; 0x54
 80060d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80060d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060dc:	e79d      	b.n	800601a <_strtod_l+0x9aa>
 80060de:	f1ba 0f01 	cmp.w	sl, #1
 80060e2:	d102      	bne.n	80060ea <_strtod_l+0xa7a>
 80060e4:	2f00      	cmp	r7, #0
 80060e6:	f43f ad83 	beq.w	8005bf0 <_strtod_l+0x580>
 80060ea:	4b62      	ldr	r3, [pc, #392]	; (8006274 <_strtod_l+0xc04>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	e78e      	b.n	800600e <_strtod_l+0x99e>
 80060f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006270 <_strtod_l+0xc00>
 80060f4:	f04f 0800 	mov.w	r8, #0
 80060f8:	e7e7      	b.n	80060ca <_strtod_l+0xa5a>
 80060fa:	4b5d      	ldr	r3, [pc, #372]	; (8006270 <_strtod_l+0xc00>)
 80060fc:	4640      	mov	r0, r8
 80060fe:	4649      	mov	r1, r9
 8006100:	2200      	movs	r2, #0
 8006102:	f7fa fa81 	bl	8000608 <__aeabi_dmul>
 8006106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006108:	4680      	mov	r8, r0
 800610a:	4689      	mov	r9, r1
 800610c:	b933      	cbnz	r3, 800611c <_strtod_l+0xaac>
 800610e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006112:	900e      	str	r0, [sp, #56]	; 0x38
 8006114:	930f      	str	r3, [sp, #60]	; 0x3c
 8006116:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800611a:	e7dd      	b.n	80060d8 <_strtod_l+0xa68>
 800611c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006120:	e7f9      	b.n	8006116 <_strtod_l+0xaa6>
 8006122:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1a8      	bne.n	800607e <_strtod_l+0xa0e>
 800612c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006132:	0d1b      	lsrs	r3, r3, #20
 8006134:	051b      	lsls	r3, r3, #20
 8006136:	429a      	cmp	r2, r3
 8006138:	d1a1      	bne.n	800607e <_strtod_l+0xa0e>
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f7fa fdfb 	bl	8000d38 <__aeabi_d2lz>
 8006142:	f7fa fa33 	bl	80005ac <__aeabi_l2d>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4640      	mov	r0, r8
 800614c:	4649      	mov	r1, r9
 800614e:	f7fa f8a3 	bl	8000298 <__aeabi_dsub>
 8006152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006154:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006158:	ea43 030a 	orr.w	r3, r3, sl
 800615c:	4313      	orrs	r3, r2
 800615e:	4680      	mov	r8, r0
 8006160:	4689      	mov	r9, r1
 8006162:	d055      	beq.n	8006210 <_strtod_l+0xba0>
 8006164:	a336      	add	r3, pc, #216	; (adr r3, 8006240 <_strtod_l+0xbd0>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa fcbf 	bl	8000aec <__aeabi_dcmplt>
 800616e:	2800      	cmp	r0, #0
 8006170:	f47f acd0 	bne.w	8005b14 <_strtod_l+0x4a4>
 8006174:	a334      	add	r3, pc, #208	; (adr r3, 8006248 <_strtod_l+0xbd8>)
 8006176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	f7fa fcd3 	bl	8000b28 <__aeabi_dcmpgt>
 8006182:	2800      	cmp	r0, #0
 8006184:	f43f af7b 	beq.w	800607e <_strtod_l+0xa0e>
 8006188:	e4c4      	b.n	8005b14 <_strtod_l+0x4a4>
 800618a:	9b04      	ldr	r3, [sp, #16]
 800618c:	b333      	cbz	r3, 80061dc <_strtod_l+0xb6c>
 800618e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006190:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006194:	d822      	bhi.n	80061dc <_strtod_l+0xb6c>
 8006196:	a32e      	add	r3, pc, #184	; (adr r3, 8006250 <_strtod_l+0xbe0>)
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	4640      	mov	r0, r8
 800619e:	4649      	mov	r1, r9
 80061a0:	f7fa fcae 	bl	8000b00 <__aeabi_dcmple>
 80061a4:	b1a0      	cbz	r0, 80061d0 <_strtod_l+0xb60>
 80061a6:	4649      	mov	r1, r9
 80061a8:	4640      	mov	r0, r8
 80061aa:	f7fa fd05 	bl	8000bb8 <__aeabi_d2uiz>
 80061ae:	2801      	cmp	r0, #1
 80061b0:	bf38      	it	cc
 80061b2:	2001      	movcc	r0, #1
 80061b4:	f7fa f9ae 	bl	8000514 <__aeabi_ui2d>
 80061b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061ba:	4680      	mov	r8, r0
 80061bc:	4689      	mov	r9, r1
 80061be:	bb23      	cbnz	r3, 800620a <_strtod_l+0xb9a>
 80061c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061c4:	9010      	str	r0, [sp, #64]	; 0x40
 80061c6:	9311      	str	r3, [sp, #68]	; 0x44
 80061c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	9309      	str	r3, [sp, #36]	; 0x24
 80061dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061e0:	eeb0 0a48 	vmov.f32	s0, s16
 80061e4:	eef0 0a68 	vmov.f32	s1, s17
 80061e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80061ec:	f001 fe58 	bl	8007ea0 <__ulp>
 80061f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061f4:	ec53 2b10 	vmov	r2, r3, d0
 80061f8:	f7fa fa06 	bl	8000608 <__aeabi_dmul>
 80061fc:	ec53 2b18 	vmov	r2, r3, d8
 8006200:	f7fa f84c 	bl	800029c <__adddf3>
 8006204:	4682      	mov	sl, r0
 8006206:	468b      	mov	fp, r1
 8006208:	e78d      	b.n	8006126 <_strtod_l+0xab6>
 800620a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800620e:	e7db      	b.n	80061c8 <_strtod_l+0xb58>
 8006210:	a311      	add	r3, pc, #68	; (adr r3, 8006258 <_strtod_l+0xbe8>)
 8006212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006216:	f7fa fc69 	bl	8000aec <__aeabi_dcmplt>
 800621a:	e7b2      	b.n	8006182 <_strtod_l+0xb12>
 800621c:	2300      	movs	r3, #0
 800621e:	930a      	str	r3, [sp, #40]	; 0x28
 8006220:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006222:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	f7ff ba6b 	b.w	8005700 <_strtod_l+0x90>
 800622a:	2a65      	cmp	r2, #101	; 0x65
 800622c:	f43f ab5f 	beq.w	80058ee <_strtod_l+0x27e>
 8006230:	2a45      	cmp	r2, #69	; 0x45
 8006232:	f43f ab5c 	beq.w	80058ee <_strtod_l+0x27e>
 8006236:	2301      	movs	r3, #1
 8006238:	f7ff bb94 	b.w	8005964 <_strtod_l+0x2f4>
 800623c:	f3af 8000 	nop.w
 8006240:	94a03595 	.word	0x94a03595
 8006244:	3fdfffff 	.word	0x3fdfffff
 8006248:	35afe535 	.word	0x35afe535
 800624c:	3fe00000 	.word	0x3fe00000
 8006250:	ffc00000 	.word	0xffc00000
 8006254:	41dfffff 	.word	0x41dfffff
 8006258:	94a03595 	.word	0x94a03595
 800625c:	3fcfffff 	.word	0x3fcfffff
 8006260:	3ff00000 	.word	0x3ff00000
 8006264:	7ff00000 	.word	0x7ff00000
 8006268:	7fe00000 	.word	0x7fe00000
 800626c:	7c9fffff 	.word	0x7c9fffff
 8006270:	3fe00000 	.word	0x3fe00000
 8006274:	bff00000 	.word	0xbff00000
 8006278:	7fefffff 	.word	0x7fefffff

0800627c <_strtod_r>:
 800627c:	4b01      	ldr	r3, [pc, #4]	; (8006284 <_strtod_r+0x8>)
 800627e:	f7ff b9f7 	b.w	8005670 <_strtod_l>
 8006282:	bf00      	nop
 8006284:	20000080 	.word	0x20000080

08006288 <_strtol_l.constprop.0>:
 8006288:	2b01      	cmp	r3, #1
 800628a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628e:	d001      	beq.n	8006294 <_strtol_l.constprop.0+0xc>
 8006290:	2b24      	cmp	r3, #36	; 0x24
 8006292:	d906      	bls.n	80062a2 <_strtol_l.constprop.0+0x1a>
 8006294:	f7fe fafc 	bl	8004890 <__errno>
 8006298:	2316      	movs	r3, #22
 800629a:	6003      	str	r3, [r0, #0]
 800629c:	2000      	movs	r0, #0
 800629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006388 <_strtol_l.constprop.0+0x100>
 80062a6:	460d      	mov	r5, r1
 80062a8:	462e      	mov	r6, r5
 80062aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80062b2:	f017 0708 	ands.w	r7, r7, #8
 80062b6:	d1f7      	bne.n	80062a8 <_strtol_l.constprop.0+0x20>
 80062b8:	2c2d      	cmp	r4, #45	; 0x2d
 80062ba:	d132      	bne.n	8006322 <_strtol_l.constprop.0+0x9a>
 80062bc:	782c      	ldrb	r4, [r5, #0]
 80062be:	2701      	movs	r7, #1
 80062c0:	1cb5      	adds	r5, r6, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d05b      	beq.n	800637e <_strtol_l.constprop.0+0xf6>
 80062c6:	2b10      	cmp	r3, #16
 80062c8:	d109      	bne.n	80062de <_strtol_l.constprop.0+0x56>
 80062ca:	2c30      	cmp	r4, #48	; 0x30
 80062cc:	d107      	bne.n	80062de <_strtol_l.constprop.0+0x56>
 80062ce:	782c      	ldrb	r4, [r5, #0]
 80062d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062d4:	2c58      	cmp	r4, #88	; 0x58
 80062d6:	d14d      	bne.n	8006374 <_strtol_l.constprop.0+0xec>
 80062d8:	786c      	ldrb	r4, [r5, #1]
 80062da:	2310      	movs	r3, #16
 80062dc:	3502      	adds	r5, #2
 80062de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80062e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80062e6:	f04f 0c00 	mov.w	ip, #0
 80062ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80062ee:	4666      	mov	r6, ip
 80062f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80062f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80062f8:	f1be 0f09 	cmp.w	lr, #9
 80062fc:	d816      	bhi.n	800632c <_strtol_l.constprop.0+0xa4>
 80062fe:	4674      	mov	r4, lr
 8006300:	42a3      	cmp	r3, r4
 8006302:	dd24      	ble.n	800634e <_strtol_l.constprop.0+0xc6>
 8006304:	f1bc 0f00 	cmp.w	ip, #0
 8006308:	db1e      	blt.n	8006348 <_strtol_l.constprop.0+0xc0>
 800630a:	45b1      	cmp	r9, r6
 800630c:	d31c      	bcc.n	8006348 <_strtol_l.constprop.0+0xc0>
 800630e:	d101      	bne.n	8006314 <_strtol_l.constprop.0+0x8c>
 8006310:	45a2      	cmp	sl, r4
 8006312:	db19      	blt.n	8006348 <_strtol_l.constprop.0+0xc0>
 8006314:	fb06 4603 	mla	r6, r6, r3, r4
 8006318:	f04f 0c01 	mov.w	ip, #1
 800631c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006320:	e7e8      	b.n	80062f4 <_strtol_l.constprop.0+0x6c>
 8006322:	2c2b      	cmp	r4, #43	; 0x2b
 8006324:	bf04      	itt	eq
 8006326:	782c      	ldrbeq	r4, [r5, #0]
 8006328:	1cb5      	addeq	r5, r6, #2
 800632a:	e7ca      	b.n	80062c2 <_strtol_l.constprop.0+0x3a>
 800632c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006330:	f1be 0f19 	cmp.w	lr, #25
 8006334:	d801      	bhi.n	800633a <_strtol_l.constprop.0+0xb2>
 8006336:	3c37      	subs	r4, #55	; 0x37
 8006338:	e7e2      	b.n	8006300 <_strtol_l.constprop.0+0x78>
 800633a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800633e:	f1be 0f19 	cmp.w	lr, #25
 8006342:	d804      	bhi.n	800634e <_strtol_l.constprop.0+0xc6>
 8006344:	3c57      	subs	r4, #87	; 0x57
 8006346:	e7db      	b.n	8006300 <_strtol_l.constprop.0+0x78>
 8006348:	f04f 3cff 	mov.w	ip, #4294967295
 800634c:	e7e6      	b.n	800631c <_strtol_l.constprop.0+0x94>
 800634e:	f1bc 0f00 	cmp.w	ip, #0
 8006352:	da05      	bge.n	8006360 <_strtol_l.constprop.0+0xd8>
 8006354:	2322      	movs	r3, #34	; 0x22
 8006356:	6003      	str	r3, [r0, #0]
 8006358:	4646      	mov	r6, r8
 800635a:	b942      	cbnz	r2, 800636e <_strtol_l.constprop.0+0xe6>
 800635c:	4630      	mov	r0, r6
 800635e:	e79e      	b.n	800629e <_strtol_l.constprop.0+0x16>
 8006360:	b107      	cbz	r7, 8006364 <_strtol_l.constprop.0+0xdc>
 8006362:	4276      	negs	r6, r6
 8006364:	2a00      	cmp	r2, #0
 8006366:	d0f9      	beq.n	800635c <_strtol_l.constprop.0+0xd4>
 8006368:	f1bc 0f00 	cmp.w	ip, #0
 800636c:	d000      	beq.n	8006370 <_strtol_l.constprop.0+0xe8>
 800636e:	1e69      	subs	r1, r5, #1
 8006370:	6011      	str	r1, [r2, #0]
 8006372:	e7f3      	b.n	800635c <_strtol_l.constprop.0+0xd4>
 8006374:	2430      	movs	r4, #48	; 0x30
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1b1      	bne.n	80062de <_strtol_l.constprop.0+0x56>
 800637a:	2308      	movs	r3, #8
 800637c:	e7af      	b.n	80062de <_strtol_l.constprop.0+0x56>
 800637e:	2c30      	cmp	r4, #48	; 0x30
 8006380:	d0a5      	beq.n	80062ce <_strtol_l.constprop.0+0x46>
 8006382:	230a      	movs	r3, #10
 8006384:	e7ab      	b.n	80062de <_strtol_l.constprop.0+0x56>
 8006386:	bf00      	nop
 8006388:	080093a1 	.word	0x080093a1

0800638c <_strtol_r>:
 800638c:	f7ff bf7c 	b.w	8006288 <_strtol_l.constprop.0>

08006390 <quorem>:
 8006390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	6903      	ldr	r3, [r0, #16]
 8006396:	690c      	ldr	r4, [r1, #16]
 8006398:	42a3      	cmp	r3, r4
 800639a:	4607      	mov	r7, r0
 800639c:	f2c0 8081 	blt.w	80064a2 <quorem+0x112>
 80063a0:	3c01      	subs	r4, #1
 80063a2:	f101 0814 	add.w	r8, r1, #20
 80063a6:	f100 0514 	add.w	r5, r0, #20
 80063aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ae:	9301      	str	r3, [sp, #4]
 80063b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063b8:	3301      	adds	r3, #1
 80063ba:	429a      	cmp	r2, r3
 80063bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80063c8:	d331      	bcc.n	800642e <quorem+0x9e>
 80063ca:	f04f 0e00 	mov.w	lr, #0
 80063ce:	4640      	mov	r0, r8
 80063d0:	46ac      	mov	ip, r5
 80063d2:	46f2      	mov	sl, lr
 80063d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80063d8:	b293      	uxth	r3, r2
 80063da:	fb06 e303 	mla	r3, r6, r3, lr
 80063de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ebaa 0303 	sub.w	r3, sl, r3
 80063e8:	f8dc a000 	ldr.w	sl, [ip]
 80063ec:	0c12      	lsrs	r2, r2, #16
 80063ee:	fa13 f38a 	uxtah	r3, r3, sl
 80063f2:	fb06 e202 	mla	r2, r6, r2, lr
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	9b00      	ldr	r3, [sp, #0]
 80063fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063fe:	b292      	uxth	r2, r2
 8006400:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006404:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006408:	f8bd 3000 	ldrh.w	r3, [sp]
 800640c:	4581      	cmp	r9, r0
 800640e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006412:	f84c 3b04 	str.w	r3, [ip], #4
 8006416:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800641a:	d2db      	bcs.n	80063d4 <quorem+0x44>
 800641c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006420:	b92b      	cbnz	r3, 800642e <quorem+0x9e>
 8006422:	9b01      	ldr	r3, [sp, #4]
 8006424:	3b04      	subs	r3, #4
 8006426:	429d      	cmp	r5, r3
 8006428:	461a      	mov	r2, r3
 800642a:	d32e      	bcc.n	800648a <quorem+0xfa>
 800642c:	613c      	str	r4, [r7, #16]
 800642e:	4638      	mov	r0, r7
 8006430:	f001 fc90 	bl	8007d54 <__mcmp>
 8006434:	2800      	cmp	r0, #0
 8006436:	db24      	blt.n	8006482 <quorem+0xf2>
 8006438:	3601      	adds	r6, #1
 800643a:	4628      	mov	r0, r5
 800643c:	f04f 0c00 	mov.w	ip, #0
 8006440:	f858 2b04 	ldr.w	r2, [r8], #4
 8006444:	f8d0 e000 	ldr.w	lr, [r0]
 8006448:	b293      	uxth	r3, r2
 800644a:	ebac 0303 	sub.w	r3, ip, r3
 800644e:	0c12      	lsrs	r2, r2, #16
 8006450:	fa13 f38e 	uxtah	r3, r3, lr
 8006454:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800645c:	b29b      	uxth	r3, r3
 800645e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006462:	45c1      	cmp	r9, r8
 8006464:	f840 3b04 	str.w	r3, [r0], #4
 8006468:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800646c:	d2e8      	bcs.n	8006440 <quorem+0xb0>
 800646e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006476:	b922      	cbnz	r2, 8006482 <quorem+0xf2>
 8006478:	3b04      	subs	r3, #4
 800647a:	429d      	cmp	r5, r3
 800647c:	461a      	mov	r2, r3
 800647e:	d30a      	bcc.n	8006496 <quorem+0x106>
 8006480:	613c      	str	r4, [r7, #16]
 8006482:	4630      	mov	r0, r6
 8006484:	b003      	add	sp, #12
 8006486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	3b04      	subs	r3, #4
 800648e:	2a00      	cmp	r2, #0
 8006490:	d1cc      	bne.n	800642c <quorem+0x9c>
 8006492:	3c01      	subs	r4, #1
 8006494:	e7c7      	b.n	8006426 <quorem+0x96>
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	3b04      	subs	r3, #4
 800649a:	2a00      	cmp	r2, #0
 800649c:	d1f0      	bne.n	8006480 <quorem+0xf0>
 800649e:	3c01      	subs	r4, #1
 80064a0:	e7eb      	b.n	800647a <quorem+0xea>
 80064a2:	2000      	movs	r0, #0
 80064a4:	e7ee      	b.n	8006484 <quorem+0xf4>
	...

080064a8 <_dtoa_r>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ed2d 8b04 	vpush	{d8-d9}
 80064b0:	ec57 6b10 	vmov	r6, r7, d0
 80064b4:	b093      	sub	sp, #76	; 0x4c
 80064b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064bc:	9106      	str	r1, [sp, #24]
 80064be:	ee10 aa10 	vmov	sl, s0
 80064c2:	4604      	mov	r4, r0
 80064c4:	9209      	str	r2, [sp, #36]	; 0x24
 80064c6:	930c      	str	r3, [sp, #48]	; 0x30
 80064c8:	46bb      	mov	fp, r7
 80064ca:	b975      	cbnz	r5, 80064ea <_dtoa_r+0x42>
 80064cc:	2010      	movs	r0, #16
 80064ce:	f001 f94d 	bl	800776c <malloc>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6260      	str	r0, [r4, #36]	; 0x24
 80064d6:	b920      	cbnz	r0, 80064e2 <_dtoa_r+0x3a>
 80064d8:	4ba7      	ldr	r3, [pc, #668]	; (8006778 <_dtoa_r+0x2d0>)
 80064da:	21ea      	movs	r1, #234	; 0xea
 80064dc:	48a7      	ldr	r0, [pc, #668]	; (800677c <_dtoa_r+0x2d4>)
 80064de:	f002 f8bd 	bl	800865c <__assert_func>
 80064e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064e6:	6005      	str	r5, [r0, #0]
 80064e8:	60c5      	str	r5, [r0, #12]
 80064ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ec:	6819      	ldr	r1, [r3, #0]
 80064ee:	b151      	cbz	r1, 8006506 <_dtoa_r+0x5e>
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	604a      	str	r2, [r1, #4]
 80064f4:	2301      	movs	r3, #1
 80064f6:	4093      	lsls	r3, r2
 80064f8:	608b      	str	r3, [r1, #8]
 80064fa:	4620      	mov	r0, r4
 80064fc:	f001 f99e 	bl	800783c <_Bfree>
 8006500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	1e3b      	subs	r3, r7, #0
 8006508:	bfaa      	itet	ge
 800650a:	2300      	movge	r3, #0
 800650c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006510:	f8c8 3000 	strge.w	r3, [r8]
 8006514:	4b9a      	ldr	r3, [pc, #616]	; (8006780 <_dtoa_r+0x2d8>)
 8006516:	bfbc      	itt	lt
 8006518:	2201      	movlt	r2, #1
 800651a:	f8c8 2000 	strlt.w	r2, [r8]
 800651e:	ea33 030b 	bics.w	r3, r3, fp
 8006522:	d11b      	bne.n	800655c <_dtoa_r+0xb4>
 8006524:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006526:	f242 730f 	movw	r3, #9999	; 0x270f
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006530:	4333      	orrs	r3, r6
 8006532:	f000 8592 	beq.w	800705a <_dtoa_r+0xbb2>
 8006536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006538:	b963      	cbnz	r3, 8006554 <_dtoa_r+0xac>
 800653a:	4b92      	ldr	r3, [pc, #584]	; (8006784 <_dtoa_r+0x2dc>)
 800653c:	e022      	b.n	8006584 <_dtoa_r+0xdc>
 800653e:	4b92      	ldr	r3, [pc, #584]	; (8006788 <_dtoa_r+0x2e0>)
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	3308      	adds	r3, #8
 8006544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	9801      	ldr	r0, [sp, #4]
 800654a:	b013      	add	sp, #76	; 0x4c
 800654c:	ecbd 8b04 	vpop	{d8-d9}
 8006550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006554:	4b8b      	ldr	r3, [pc, #556]	; (8006784 <_dtoa_r+0x2dc>)
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	3303      	adds	r3, #3
 800655a:	e7f3      	b.n	8006544 <_dtoa_r+0x9c>
 800655c:	2200      	movs	r2, #0
 800655e:	2300      	movs	r3, #0
 8006560:	4650      	mov	r0, sl
 8006562:	4659      	mov	r1, fp
 8006564:	f7fa fab8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006568:	ec4b ab19 	vmov	d9, sl, fp
 800656c:	4680      	mov	r8, r0
 800656e:	b158      	cbz	r0, 8006588 <_dtoa_r+0xe0>
 8006570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006572:	2301      	movs	r3, #1
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 856b 	beq.w	8007054 <_dtoa_r+0xbac>
 800657e:	4883      	ldr	r0, [pc, #524]	; (800678c <_dtoa_r+0x2e4>)
 8006580:	6018      	str	r0, [r3, #0]
 8006582:	1e43      	subs	r3, r0, #1
 8006584:	9301      	str	r3, [sp, #4]
 8006586:	e7df      	b.n	8006548 <_dtoa_r+0xa0>
 8006588:	ec4b ab10 	vmov	d0, sl, fp
 800658c:	aa10      	add	r2, sp, #64	; 0x40
 800658e:	a911      	add	r1, sp, #68	; 0x44
 8006590:	4620      	mov	r0, r4
 8006592:	f001 fd01 	bl	8007f98 <__d2b>
 8006596:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800659a:	ee08 0a10 	vmov	s16, r0
 800659e:	2d00      	cmp	r5, #0
 80065a0:	f000 8084 	beq.w	80066ac <_dtoa_r+0x204>
 80065a4:	ee19 3a90 	vmov	r3, s19
 80065a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065b0:	4656      	mov	r6, sl
 80065b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80065be:	4b74      	ldr	r3, [pc, #464]	; (8006790 <_dtoa_r+0x2e8>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	4630      	mov	r0, r6
 80065c4:	4639      	mov	r1, r7
 80065c6:	f7f9 fe67 	bl	8000298 <__aeabi_dsub>
 80065ca:	a365      	add	r3, pc, #404	; (adr r3, 8006760 <_dtoa_r+0x2b8>)
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f7fa f81a 	bl	8000608 <__aeabi_dmul>
 80065d4:	a364      	add	r3, pc, #400	; (adr r3, 8006768 <_dtoa_r+0x2c0>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7f9 fe5f 	bl	800029c <__adddf3>
 80065de:	4606      	mov	r6, r0
 80065e0:	4628      	mov	r0, r5
 80065e2:	460f      	mov	r7, r1
 80065e4:	f7f9 ffa6 	bl	8000534 <__aeabi_i2d>
 80065e8:	a361      	add	r3, pc, #388	; (adr r3, 8006770 <_dtoa_r+0x2c8>)
 80065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ee:	f7fa f80b 	bl	8000608 <__aeabi_dmul>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7f9 fe4f 	bl	800029c <__adddf3>
 80065fe:	4606      	mov	r6, r0
 8006600:	460f      	mov	r7, r1
 8006602:	f7fa fab1 	bl	8000b68 <__aeabi_d2iz>
 8006606:	2200      	movs	r2, #0
 8006608:	9000      	str	r0, [sp, #0]
 800660a:	2300      	movs	r3, #0
 800660c:	4630      	mov	r0, r6
 800660e:	4639      	mov	r1, r7
 8006610:	f7fa fa6c 	bl	8000aec <__aeabi_dcmplt>
 8006614:	b150      	cbz	r0, 800662c <_dtoa_r+0x184>
 8006616:	9800      	ldr	r0, [sp, #0]
 8006618:	f7f9 ff8c 	bl	8000534 <__aeabi_i2d>
 800661c:	4632      	mov	r2, r6
 800661e:	463b      	mov	r3, r7
 8006620:	f7fa fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006624:	b910      	cbnz	r0, 800662c <_dtoa_r+0x184>
 8006626:	9b00      	ldr	r3, [sp, #0]
 8006628:	3b01      	subs	r3, #1
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	9b00      	ldr	r3, [sp, #0]
 800662e:	2b16      	cmp	r3, #22
 8006630:	d85a      	bhi.n	80066e8 <_dtoa_r+0x240>
 8006632:	9a00      	ldr	r2, [sp, #0]
 8006634:	4b57      	ldr	r3, [pc, #348]	; (8006794 <_dtoa_r+0x2ec>)
 8006636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	ec51 0b19 	vmov	r0, r1, d9
 8006642:	f7fa fa53 	bl	8000aec <__aeabi_dcmplt>
 8006646:	2800      	cmp	r0, #0
 8006648:	d050      	beq.n	80066ec <_dtoa_r+0x244>
 800664a:	9b00      	ldr	r3, [sp, #0]
 800664c:	3b01      	subs	r3, #1
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	930b      	str	r3, [sp, #44]	; 0x2c
 8006654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006656:	1b5d      	subs	r5, r3, r5
 8006658:	1e6b      	subs	r3, r5, #1
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	bf45      	ittet	mi
 800665e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006662:	9304      	strmi	r3, [sp, #16]
 8006664:	2300      	movpl	r3, #0
 8006666:	2300      	movmi	r3, #0
 8006668:	bf4c      	ite	mi
 800666a:	9305      	strmi	r3, [sp, #20]
 800666c:	9304      	strpl	r3, [sp, #16]
 800666e:	9b00      	ldr	r3, [sp, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	db3d      	blt.n	80066f0 <_dtoa_r+0x248>
 8006674:	9b05      	ldr	r3, [sp, #20]
 8006676:	9a00      	ldr	r2, [sp, #0]
 8006678:	920a      	str	r2, [sp, #40]	; 0x28
 800667a:	4413      	add	r3, r2
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	2300      	movs	r3, #0
 8006680:	9307      	str	r3, [sp, #28]
 8006682:	9b06      	ldr	r3, [sp, #24]
 8006684:	2b09      	cmp	r3, #9
 8006686:	f200 8089 	bhi.w	800679c <_dtoa_r+0x2f4>
 800668a:	2b05      	cmp	r3, #5
 800668c:	bfc4      	itt	gt
 800668e:	3b04      	subgt	r3, #4
 8006690:	9306      	strgt	r3, [sp, #24]
 8006692:	9b06      	ldr	r3, [sp, #24]
 8006694:	f1a3 0302 	sub.w	r3, r3, #2
 8006698:	bfcc      	ite	gt
 800669a:	2500      	movgt	r5, #0
 800669c:	2501      	movle	r5, #1
 800669e:	2b03      	cmp	r3, #3
 80066a0:	f200 8087 	bhi.w	80067b2 <_dtoa_r+0x30a>
 80066a4:	e8df f003 	tbb	[pc, r3]
 80066a8:	59383a2d 	.word	0x59383a2d
 80066ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80066b0:	441d      	add	r5, r3
 80066b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	bfc1      	itttt	gt
 80066ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80066c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066ca:	bfda      	itte	le
 80066cc:	f1c3 0320 	rsble	r3, r3, #32
 80066d0:	fa06 f003 	lslle.w	r0, r6, r3
 80066d4:	4318      	orrgt	r0, r3
 80066d6:	f7f9 ff1d 	bl	8000514 <__aeabi_ui2d>
 80066da:	2301      	movs	r3, #1
 80066dc:	4606      	mov	r6, r0
 80066de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066e2:	3d01      	subs	r5, #1
 80066e4:	930e      	str	r3, [sp, #56]	; 0x38
 80066e6:	e76a      	b.n	80065be <_dtoa_r+0x116>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e7b2      	b.n	8006652 <_dtoa_r+0x1aa>
 80066ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80066ee:	e7b1      	b.n	8006654 <_dtoa_r+0x1ac>
 80066f0:	9b04      	ldr	r3, [sp, #16]
 80066f2:	9a00      	ldr	r2, [sp, #0]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	4253      	negs	r3, r2
 80066fa:	9307      	str	r3, [sp, #28]
 80066fc:	2300      	movs	r3, #0
 80066fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006700:	e7bf      	b.n	8006682 <_dtoa_r+0x1da>
 8006702:	2300      	movs	r3, #0
 8006704:	9308      	str	r3, [sp, #32]
 8006706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	dc55      	bgt.n	80067b8 <_dtoa_r+0x310>
 800670c:	2301      	movs	r3, #1
 800670e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006712:	461a      	mov	r2, r3
 8006714:	9209      	str	r2, [sp, #36]	; 0x24
 8006716:	e00c      	b.n	8006732 <_dtoa_r+0x28a>
 8006718:	2301      	movs	r3, #1
 800671a:	e7f3      	b.n	8006704 <_dtoa_r+0x25c>
 800671c:	2300      	movs	r3, #0
 800671e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	9b00      	ldr	r3, [sp, #0]
 8006724:	4413      	add	r3, r2
 8006726:	9302      	str	r3, [sp, #8]
 8006728:	3301      	adds	r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	9303      	str	r3, [sp, #12]
 800672e:	bfb8      	it	lt
 8006730:	2301      	movlt	r3, #1
 8006732:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006734:	2200      	movs	r2, #0
 8006736:	6042      	str	r2, [r0, #4]
 8006738:	2204      	movs	r2, #4
 800673a:	f102 0614 	add.w	r6, r2, #20
 800673e:	429e      	cmp	r6, r3
 8006740:	6841      	ldr	r1, [r0, #4]
 8006742:	d93d      	bls.n	80067c0 <_dtoa_r+0x318>
 8006744:	4620      	mov	r0, r4
 8006746:	f001 f839 	bl	80077bc <_Balloc>
 800674a:	9001      	str	r0, [sp, #4]
 800674c:	2800      	cmp	r0, #0
 800674e:	d13b      	bne.n	80067c8 <_dtoa_r+0x320>
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <_dtoa_r+0x2f0>)
 8006752:	4602      	mov	r2, r0
 8006754:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006758:	e6c0      	b.n	80064dc <_dtoa_r+0x34>
 800675a:	2301      	movs	r3, #1
 800675c:	e7df      	b.n	800671e <_dtoa_r+0x276>
 800675e:	bf00      	nop
 8006760:	636f4361 	.word	0x636f4361
 8006764:	3fd287a7 	.word	0x3fd287a7
 8006768:	8b60c8b3 	.word	0x8b60c8b3
 800676c:	3fc68a28 	.word	0x3fc68a28
 8006770:	509f79fb 	.word	0x509f79fb
 8006774:	3fd34413 	.word	0x3fd34413
 8006778:	080094ae 	.word	0x080094ae
 800677c:	080094c5 	.word	0x080094c5
 8006780:	7ff00000 	.word	0x7ff00000
 8006784:	080094aa 	.word	0x080094aa
 8006788:	080094a1 	.word	0x080094a1
 800678c:	08009321 	.word	0x08009321
 8006790:	3ff80000 	.word	0x3ff80000
 8006794:	08009630 	.word	0x08009630
 8006798:	08009520 	.word	0x08009520
 800679c:	2501      	movs	r5, #1
 800679e:	2300      	movs	r3, #0
 80067a0:	9306      	str	r3, [sp, #24]
 80067a2:	9508      	str	r5, [sp, #32]
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067ac:	2200      	movs	r2, #0
 80067ae:	2312      	movs	r3, #18
 80067b0:	e7b0      	b.n	8006714 <_dtoa_r+0x26c>
 80067b2:	2301      	movs	r3, #1
 80067b4:	9308      	str	r3, [sp, #32]
 80067b6:	e7f5      	b.n	80067a4 <_dtoa_r+0x2fc>
 80067b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067be:	e7b8      	b.n	8006732 <_dtoa_r+0x28a>
 80067c0:	3101      	adds	r1, #1
 80067c2:	6041      	str	r1, [r0, #4]
 80067c4:	0052      	lsls	r2, r2, #1
 80067c6:	e7b8      	b.n	800673a <_dtoa_r+0x292>
 80067c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ca:	9a01      	ldr	r2, [sp, #4]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	2b0e      	cmp	r3, #14
 80067d2:	f200 809d 	bhi.w	8006910 <_dtoa_r+0x468>
 80067d6:	2d00      	cmp	r5, #0
 80067d8:	f000 809a 	beq.w	8006910 <_dtoa_r+0x468>
 80067dc:	9b00      	ldr	r3, [sp, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dd32      	ble.n	8006848 <_dtoa_r+0x3a0>
 80067e2:	4ab7      	ldr	r2, [pc, #732]	; (8006ac0 <_dtoa_r+0x618>)
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067f0:	9b00      	ldr	r3, [sp, #0]
 80067f2:	05d8      	lsls	r0, r3, #23
 80067f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067f8:	d516      	bpl.n	8006828 <_dtoa_r+0x380>
 80067fa:	4bb2      	ldr	r3, [pc, #712]	; (8006ac4 <_dtoa_r+0x61c>)
 80067fc:	ec51 0b19 	vmov	r0, r1, d9
 8006800:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006804:	f7fa f82a 	bl	800085c <__aeabi_ddiv>
 8006808:	f007 070f 	and.w	r7, r7, #15
 800680c:	4682      	mov	sl, r0
 800680e:	468b      	mov	fp, r1
 8006810:	2503      	movs	r5, #3
 8006812:	4eac      	ldr	r6, [pc, #688]	; (8006ac4 <_dtoa_r+0x61c>)
 8006814:	b957      	cbnz	r7, 800682c <_dtoa_r+0x384>
 8006816:	4642      	mov	r2, r8
 8006818:	464b      	mov	r3, r9
 800681a:	4650      	mov	r0, sl
 800681c:	4659      	mov	r1, fp
 800681e:	f7fa f81d 	bl	800085c <__aeabi_ddiv>
 8006822:	4682      	mov	sl, r0
 8006824:	468b      	mov	fp, r1
 8006826:	e028      	b.n	800687a <_dtoa_r+0x3d2>
 8006828:	2502      	movs	r5, #2
 800682a:	e7f2      	b.n	8006812 <_dtoa_r+0x36a>
 800682c:	07f9      	lsls	r1, r7, #31
 800682e:	d508      	bpl.n	8006842 <_dtoa_r+0x39a>
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006838:	f7f9 fee6 	bl	8000608 <__aeabi_dmul>
 800683c:	3501      	adds	r5, #1
 800683e:	4680      	mov	r8, r0
 8006840:	4689      	mov	r9, r1
 8006842:	107f      	asrs	r7, r7, #1
 8006844:	3608      	adds	r6, #8
 8006846:	e7e5      	b.n	8006814 <_dtoa_r+0x36c>
 8006848:	f000 809b 	beq.w	8006982 <_dtoa_r+0x4da>
 800684c:	9b00      	ldr	r3, [sp, #0]
 800684e:	4f9d      	ldr	r7, [pc, #628]	; (8006ac4 <_dtoa_r+0x61c>)
 8006850:	425e      	negs	r6, r3
 8006852:	4b9b      	ldr	r3, [pc, #620]	; (8006ac0 <_dtoa_r+0x618>)
 8006854:	f006 020f 	and.w	r2, r6, #15
 8006858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	ec51 0b19 	vmov	r0, r1, d9
 8006864:	f7f9 fed0 	bl	8000608 <__aeabi_dmul>
 8006868:	1136      	asrs	r6, r6, #4
 800686a:	4682      	mov	sl, r0
 800686c:	468b      	mov	fp, r1
 800686e:	2300      	movs	r3, #0
 8006870:	2502      	movs	r5, #2
 8006872:	2e00      	cmp	r6, #0
 8006874:	d17a      	bne.n	800696c <_dtoa_r+0x4c4>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1d3      	bne.n	8006822 <_dtoa_r+0x37a>
 800687a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8082 	beq.w	8006986 <_dtoa_r+0x4de>
 8006882:	4b91      	ldr	r3, [pc, #580]	; (8006ac8 <_dtoa_r+0x620>)
 8006884:	2200      	movs	r2, #0
 8006886:	4650      	mov	r0, sl
 8006888:	4659      	mov	r1, fp
 800688a:	f7fa f92f 	bl	8000aec <__aeabi_dcmplt>
 800688e:	2800      	cmp	r0, #0
 8006890:	d079      	beq.n	8006986 <_dtoa_r+0x4de>
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d076      	beq.n	8006986 <_dtoa_r+0x4de>
 8006898:	9b02      	ldr	r3, [sp, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	dd36      	ble.n	800690c <_dtoa_r+0x464>
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	4650      	mov	r0, sl
 80068a2:	4659      	mov	r1, fp
 80068a4:	1e5f      	subs	r7, r3, #1
 80068a6:	2200      	movs	r2, #0
 80068a8:	4b88      	ldr	r3, [pc, #544]	; (8006acc <_dtoa_r+0x624>)
 80068aa:	f7f9 fead 	bl	8000608 <__aeabi_dmul>
 80068ae:	9e02      	ldr	r6, [sp, #8]
 80068b0:	4682      	mov	sl, r0
 80068b2:	468b      	mov	fp, r1
 80068b4:	3501      	adds	r5, #1
 80068b6:	4628      	mov	r0, r5
 80068b8:	f7f9 fe3c 	bl	8000534 <__aeabi_i2d>
 80068bc:	4652      	mov	r2, sl
 80068be:	465b      	mov	r3, fp
 80068c0:	f7f9 fea2 	bl	8000608 <__aeabi_dmul>
 80068c4:	4b82      	ldr	r3, [pc, #520]	; (8006ad0 <_dtoa_r+0x628>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	f7f9 fce8 	bl	800029c <__adddf3>
 80068cc:	46d0      	mov	r8, sl
 80068ce:	46d9      	mov	r9, fp
 80068d0:	4682      	mov	sl, r0
 80068d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	d158      	bne.n	800698c <_dtoa_r+0x4e4>
 80068da:	4b7e      	ldr	r3, [pc, #504]	; (8006ad4 <_dtoa_r+0x62c>)
 80068dc:	2200      	movs	r2, #0
 80068de:	4640      	mov	r0, r8
 80068e0:	4649      	mov	r1, r9
 80068e2:	f7f9 fcd9 	bl	8000298 <__aeabi_dsub>
 80068e6:	4652      	mov	r2, sl
 80068e8:	465b      	mov	r3, fp
 80068ea:	4680      	mov	r8, r0
 80068ec:	4689      	mov	r9, r1
 80068ee:	f7fa f91b 	bl	8000b28 <__aeabi_dcmpgt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f040 8295 	bne.w	8006e22 <_dtoa_r+0x97a>
 80068f8:	4652      	mov	r2, sl
 80068fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f7fa f8f3 	bl	8000aec <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	f040 8289 	bne.w	8006e1e <_dtoa_r+0x976>
 800690c:	ec5b ab19 	vmov	sl, fp, d9
 8006910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006912:	2b00      	cmp	r3, #0
 8006914:	f2c0 8148 	blt.w	8006ba8 <_dtoa_r+0x700>
 8006918:	9a00      	ldr	r2, [sp, #0]
 800691a:	2a0e      	cmp	r2, #14
 800691c:	f300 8144 	bgt.w	8006ba8 <_dtoa_r+0x700>
 8006920:	4b67      	ldr	r3, [pc, #412]	; (8006ac0 <_dtoa_r+0x618>)
 8006922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006926:	e9d3 8900 	ldrd	r8, r9, [r3]
 800692a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800692c:	2b00      	cmp	r3, #0
 800692e:	f280 80d5 	bge.w	8006adc <_dtoa_r+0x634>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	f300 80d1 	bgt.w	8006adc <_dtoa_r+0x634>
 800693a:	f040 826f 	bne.w	8006e1c <_dtoa_r+0x974>
 800693e:	4b65      	ldr	r3, [pc, #404]	; (8006ad4 <_dtoa_r+0x62c>)
 8006940:	2200      	movs	r2, #0
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7f9 fe5f 	bl	8000608 <__aeabi_dmul>
 800694a:	4652      	mov	r2, sl
 800694c:	465b      	mov	r3, fp
 800694e:	f7fa f8e1 	bl	8000b14 <__aeabi_dcmpge>
 8006952:	9e03      	ldr	r6, [sp, #12]
 8006954:	4637      	mov	r7, r6
 8006956:	2800      	cmp	r0, #0
 8006958:	f040 8245 	bne.w	8006de6 <_dtoa_r+0x93e>
 800695c:	9d01      	ldr	r5, [sp, #4]
 800695e:	2331      	movs	r3, #49	; 0x31
 8006960:	f805 3b01 	strb.w	r3, [r5], #1
 8006964:	9b00      	ldr	r3, [sp, #0]
 8006966:	3301      	adds	r3, #1
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	e240      	b.n	8006dee <_dtoa_r+0x946>
 800696c:	07f2      	lsls	r2, r6, #31
 800696e:	d505      	bpl.n	800697c <_dtoa_r+0x4d4>
 8006970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006974:	f7f9 fe48 	bl	8000608 <__aeabi_dmul>
 8006978:	3501      	adds	r5, #1
 800697a:	2301      	movs	r3, #1
 800697c:	1076      	asrs	r6, r6, #1
 800697e:	3708      	adds	r7, #8
 8006980:	e777      	b.n	8006872 <_dtoa_r+0x3ca>
 8006982:	2502      	movs	r5, #2
 8006984:	e779      	b.n	800687a <_dtoa_r+0x3d2>
 8006986:	9f00      	ldr	r7, [sp, #0]
 8006988:	9e03      	ldr	r6, [sp, #12]
 800698a:	e794      	b.n	80068b6 <_dtoa_r+0x40e>
 800698c:	9901      	ldr	r1, [sp, #4]
 800698e:	4b4c      	ldr	r3, [pc, #304]	; (8006ac0 <_dtoa_r+0x618>)
 8006990:	4431      	add	r1, r6
 8006992:	910d      	str	r1, [sp, #52]	; 0x34
 8006994:	9908      	ldr	r1, [sp, #32]
 8006996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800699a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800699e:	2900      	cmp	r1, #0
 80069a0:	d043      	beq.n	8006a2a <_dtoa_r+0x582>
 80069a2:	494d      	ldr	r1, [pc, #308]	; (8006ad8 <_dtoa_r+0x630>)
 80069a4:	2000      	movs	r0, #0
 80069a6:	f7f9 ff59 	bl	800085c <__aeabi_ddiv>
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	f7f9 fc73 	bl	8000298 <__aeabi_dsub>
 80069b2:	9d01      	ldr	r5, [sp, #4]
 80069b4:	4682      	mov	sl, r0
 80069b6:	468b      	mov	fp, r1
 80069b8:	4649      	mov	r1, r9
 80069ba:	4640      	mov	r0, r8
 80069bc:	f7fa f8d4 	bl	8000b68 <__aeabi_d2iz>
 80069c0:	4606      	mov	r6, r0
 80069c2:	f7f9 fdb7 	bl	8000534 <__aeabi_i2d>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4640      	mov	r0, r8
 80069cc:	4649      	mov	r1, r9
 80069ce:	f7f9 fc63 	bl	8000298 <__aeabi_dsub>
 80069d2:	3630      	adds	r6, #48	; 0x30
 80069d4:	f805 6b01 	strb.w	r6, [r5], #1
 80069d8:	4652      	mov	r2, sl
 80069da:	465b      	mov	r3, fp
 80069dc:	4680      	mov	r8, r0
 80069de:	4689      	mov	r9, r1
 80069e0:	f7fa f884 	bl	8000aec <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d163      	bne.n	8006ab0 <_dtoa_r+0x608>
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	4936      	ldr	r1, [pc, #216]	; (8006ac8 <_dtoa_r+0x620>)
 80069ee:	2000      	movs	r0, #0
 80069f0:	f7f9 fc52 	bl	8000298 <__aeabi_dsub>
 80069f4:	4652      	mov	r2, sl
 80069f6:	465b      	mov	r3, fp
 80069f8:	f7fa f878 	bl	8000aec <__aeabi_dcmplt>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	f040 80b5 	bne.w	8006b6c <_dtoa_r+0x6c4>
 8006a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a04:	429d      	cmp	r5, r3
 8006a06:	d081      	beq.n	800690c <_dtoa_r+0x464>
 8006a08:	4b30      	ldr	r3, [pc, #192]	; (8006acc <_dtoa_r+0x624>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4650      	mov	r0, sl
 8006a0e:	4659      	mov	r1, fp
 8006a10:	f7f9 fdfa 	bl	8000608 <__aeabi_dmul>
 8006a14:	4b2d      	ldr	r3, [pc, #180]	; (8006acc <_dtoa_r+0x624>)
 8006a16:	4682      	mov	sl, r0
 8006a18:	468b      	mov	fp, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f7f9 fdf2 	bl	8000608 <__aeabi_dmul>
 8006a24:	4680      	mov	r8, r0
 8006a26:	4689      	mov	r9, r1
 8006a28:	e7c6      	b.n	80069b8 <_dtoa_r+0x510>
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	f7f9 fdeb 	bl	8000608 <__aeabi_dmul>
 8006a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a34:	9d01      	ldr	r5, [sp, #4]
 8006a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a38:	4682      	mov	sl, r0
 8006a3a:	468b      	mov	fp, r1
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4640      	mov	r0, r8
 8006a40:	f7fa f892 	bl	8000b68 <__aeabi_d2iz>
 8006a44:	4606      	mov	r6, r0
 8006a46:	f7f9 fd75 	bl	8000534 <__aeabi_i2d>
 8006a4a:	3630      	adds	r6, #48	; 0x30
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4640      	mov	r0, r8
 8006a52:	4649      	mov	r1, r9
 8006a54:	f7f9 fc20 	bl	8000298 <__aeabi_dsub>
 8006a58:	f805 6b01 	strb.w	r6, [r5], #1
 8006a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a5e:	429d      	cmp	r5, r3
 8006a60:	4680      	mov	r8, r0
 8006a62:	4689      	mov	r9, r1
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	d124      	bne.n	8006ab4 <_dtoa_r+0x60c>
 8006a6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <_dtoa_r+0x630>)
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	4659      	mov	r1, fp
 8006a70:	f7f9 fc14 	bl	800029c <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7fa f854 	bl	8000b28 <__aeabi_dcmpgt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d173      	bne.n	8006b6c <_dtoa_r+0x6c4>
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	4913      	ldr	r1, [pc, #76]	; (8006ad8 <_dtoa_r+0x630>)
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7f9 fc04 	bl	8000298 <__aeabi_dsub>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4640      	mov	r0, r8
 8006a96:	4649      	mov	r1, r9
 8006a98:	f7fa f828 	bl	8000aec <__aeabi_dcmplt>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	f43f af35 	beq.w	800690c <_dtoa_r+0x464>
 8006aa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006aa4:	1e6b      	subs	r3, r5, #1
 8006aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006aa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006aac:	2b30      	cmp	r3, #48	; 0x30
 8006aae:	d0f8      	beq.n	8006aa2 <_dtoa_r+0x5fa>
 8006ab0:	9700      	str	r7, [sp, #0]
 8006ab2:	e049      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <_dtoa_r+0x624>)
 8006ab6:	f7f9 fda7 	bl	8000608 <__aeabi_dmul>
 8006aba:	4680      	mov	r8, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	e7bd      	b.n	8006a3c <_dtoa_r+0x594>
 8006ac0:	08009630 	.word	0x08009630
 8006ac4:	08009608 	.word	0x08009608
 8006ac8:	3ff00000 	.word	0x3ff00000
 8006acc:	40240000 	.word	0x40240000
 8006ad0:	401c0000 	.word	0x401c0000
 8006ad4:	40140000 	.word	0x40140000
 8006ad8:	3fe00000 	.word	0x3fe00000
 8006adc:	9d01      	ldr	r5, [sp, #4]
 8006ade:	4656      	mov	r6, sl
 8006ae0:	465f      	mov	r7, fp
 8006ae2:	4642      	mov	r2, r8
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7f9 feb7 	bl	800085c <__aeabi_ddiv>
 8006aee:	f7fa f83b 	bl	8000b68 <__aeabi_d2iz>
 8006af2:	4682      	mov	sl, r0
 8006af4:	f7f9 fd1e 	bl	8000534 <__aeabi_i2d>
 8006af8:	4642      	mov	r2, r8
 8006afa:	464b      	mov	r3, r9
 8006afc:	f7f9 fd84 	bl	8000608 <__aeabi_dmul>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b0c:	f7f9 fbc4 	bl	8000298 <__aeabi_dsub>
 8006b10:	f805 6b01 	strb.w	r6, [r5], #1
 8006b14:	9e01      	ldr	r6, [sp, #4]
 8006b16:	9f03      	ldr	r7, [sp, #12]
 8006b18:	1bae      	subs	r6, r5, r6
 8006b1a:	42b7      	cmp	r7, r6
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	d135      	bne.n	8006b8e <_dtoa_r+0x6e6>
 8006b22:	f7f9 fbbb 	bl	800029c <__adddf3>
 8006b26:	4642      	mov	r2, r8
 8006b28:	464b      	mov	r3, r9
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	f7f9 fffb 	bl	8000b28 <__aeabi_dcmpgt>
 8006b32:	b9d0      	cbnz	r0, 8006b6a <_dtoa_r+0x6c2>
 8006b34:	4642      	mov	r2, r8
 8006b36:	464b      	mov	r3, r9
 8006b38:	4630      	mov	r0, r6
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	f7f9 ffcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b40:	b110      	cbz	r0, 8006b48 <_dtoa_r+0x6a0>
 8006b42:	f01a 0f01 	tst.w	sl, #1
 8006b46:	d110      	bne.n	8006b6a <_dtoa_r+0x6c2>
 8006b48:	4620      	mov	r0, r4
 8006b4a:	ee18 1a10 	vmov	r1, s16
 8006b4e:	f000 fe75 	bl	800783c <_Bfree>
 8006b52:	2300      	movs	r3, #0
 8006b54:	9800      	ldr	r0, [sp, #0]
 8006b56:	702b      	strb	r3, [r5, #0]
 8006b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	6018      	str	r0, [r3, #0]
 8006b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f43f acf1 	beq.w	8006548 <_dtoa_r+0xa0>
 8006b66:	601d      	str	r5, [r3, #0]
 8006b68:	e4ee      	b.n	8006548 <_dtoa_r+0xa0>
 8006b6a:	9f00      	ldr	r7, [sp, #0]
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	461d      	mov	r5, r3
 8006b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b74:	2a39      	cmp	r2, #57	; 0x39
 8006b76:	d106      	bne.n	8006b86 <_dtoa_r+0x6de>
 8006b78:	9a01      	ldr	r2, [sp, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d1f7      	bne.n	8006b6e <_dtoa_r+0x6c6>
 8006b7e:	9901      	ldr	r1, [sp, #4]
 8006b80:	2230      	movs	r2, #48	; 0x30
 8006b82:	3701      	adds	r7, #1
 8006b84:	700a      	strb	r2, [r1, #0]
 8006b86:	781a      	ldrb	r2, [r3, #0]
 8006b88:	3201      	adds	r2, #1
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e790      	b.n	8006ab0 <_dtoa_r+0x608>
 8006b8e:	4ba6      	ldr	r3, [pc, #664]	; (8006e28 <_dtoa_r+0x980>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	f7f9 fd39 	bl	8000608 <__aeabi_dmul>
 8006b96:	2200      	movs	r2, #0
 8006b98:	2300      	movs	r3, #0
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	f7f9 ff9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d09d      	beq.n	8006ae2 <_dtoa_r+0x63a>
 8006ba6:	e7cf      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006ba8:	9a08      	ldr	r2, [sp, #32]
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	f000 80d7 	beq.w	8006d5e <_dtoa_r+0x8b6>
 8006bb0:	9a06      	ldr	r2, [sp, #24]
 8006bb2:	2a01      	cmp	r2, #1
 8006bb4:	f300 80ba 	bgt.w	8006d2c <_dtoa_r+0x884>
 8006bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	f000 80b2 	beq.w	8006d24 <_dtoa_r+0x87c>
 8006bc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bc4:	9e07      	ldr	r6, [sp, #28]
 8006bc6:	9d04      	ldr	r5, [sp, #16]
 8006bc8:	9a04      	ldr	r2, [sp, #16]
 8006bca:	441a      	add	r2, r3
 8006bcc:	9204      	str	r2, [sp, #16]
 8006bce:	9a05      	ldr	r2, [sp, #20]
 8006bd0:	2101      	movs	r1, #1
 8006bd2:	441a      	add	r2, r3
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	9205      	str	r2, [sp, #20]
 8006bd8:	f000 ff32 	bl	8007a40 <__i2b>
 8006bdc:	4607      	mov	r7, r0
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	dd0c      	ble.n	8006bfc <_dtoa_r+0x754>
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd09      	ble.n	8006bfc <_dtoa_r+0x754>
 8006be8:	42ab      	cmp	r3, r5
 8006bea:	9a04      	ldr	r2, [sp, #16]
 8006bec:	bfa8      	it	ge
 8006bee:	462b      	movge	r3, r5
 8006bf0:	1ad2      	subs	r2, r2, r3
 8006bf2:	9204      	str	r2, [sp, #16]
 8006bf4:	9a05      	ldr	r2, [sp, #20]
 8006bf6:	1aed      	subs	r5, r5, r3
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	9305      	str	r3, [sp, #20]
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	b31b      	cbz	r3, 8006c48 <_dtoa_r+0x7a0>
 8006c00:	9b08      	ldr	r3, [sp, #32]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80af 	beq.w	8006d66 <_dtoa_r+0x8be>
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	dd13      	ble.n	8006c34 <_dtoa_r+0x78c>
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	4632      	mov	r2, r6
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 ffd5 	bl	8007bc0 <__pow5mult>
 8006c16:	ee18 2a10 	vmov	r2, s16
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 ff24 	bl	8007a6c <__multiply>
 8006c24:	ee18 1a10 	vmov	r1, s16
 8006c28:	4680      	mov	r8, r0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fe06 	bl	800783c <_Bfree>
 8006c30:	ee08 8a10 	vmov	s16, r8
 8006c34:	9b07      	ldr	r3, [sp, #28]
 8006c36:	1b9a      	subs	r2, r3, r6
 8006c38:	d006      	beq.n	8006c48 <_dtoa_r+0x7a0>
 8006c3a:	ee18 1a10 	vmov	r1, s16
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 ffbe 	bl	8007bc0 <__pow5mult>
 8006c44:	ee08 0a10 	vmov	s16, r0
 8006c48:	2101      	movs	r1, #1
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fef8 	bl	8007a40 <__i2b>
 8006c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	4606      	mov	r6, r0
 8006c56:	f340 8088 	ble.w	8006d6a <_dtoa_r+0x8c2>
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 ffae 	bl	8007bc0 <__pow5mult>
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	4606      	mov	r6, r0
 8006c6a:	f340 8081 	ble.w	8006d70 <_dtoa_r+0x8c8>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	6933      	ldr	r3, [r6, #16]
 8006c74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c78:	6918      	ldr	r0, [r3, #16]
 8006c7a:	f000 fe91 	bl	80079a0 <__hi0bits>
 8006c7e:	f1c0 0020 	rsb	r0, r0, #32
 8006c82:	9b05      	ldr	r3, [sp, #20]
 8006c84:	4418      	add	r0, r3
 8006c86:	f010 001f 	ands.w	r0, r0, #31
 8006c8a:	f000 8092 	beq.w	8006db2 <_dtoa_r+0x90a>
 8006c8e:	f1c0 0320 	rsb	r3, r0, #32
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	f340 808a 	ble.w	8006dac <_dtoa_r+0x904>
 8006c98:	f1c0 001c 	rsb	r0, r0, #28
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	4403      	add	r3, r0
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	4403      	add	r3, r0
 8006ca6:	4405      	add	r5, r0
 8006ca8:	9305      	str	r3, [sp, #20]
 8006caa:	9b04      	ldr	r3, [sp, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd07      	ble.n	8006cc0 <_dtoa_r+0x818>
 8006cb0:	ee18 1a10 	vmov	r1, s16
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 ffdc 	bl	8007c74 <__lshift>
 8006cbc:	ee08 0a10 	vmov	s16, r0
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	dd05      	ble.n	8006cd2 <_dtoa_r+0x82a>
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 ffd2 	bl	8007c74 <__lshift>
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d06e      	beq.n	8006db6 <_dtoa_r+0x90e>
 8006cd8:	ee18 0a10 	vmov	r0, s16
 8006cdc:	4631      	mov	r1, r6
 8006cde:	f001 f839 	bl	8007d54 <__mcmp>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	da67      	bge.n	8006db6 <_dtoa_r+0x90e>
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	ee18 1a10 	vmov	r1, s16
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	220a      	movs	r2, #10
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 fdc3 	bl	8007880 <__multadd>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	ee08 0a10 	vmov	s16, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 81b1 	beq.w	8007068 <_dtoa_r+0xbc0>
 8006d06:	2300      	movs	r3, #0
 8006d08:	4639      	mov	r1, r7
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fdb7 	bl	8007880 <__multadd>
 8006d12:	9b02      	ldr	r3, [sp, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	4607      	mov	r7, r0
 8006d18:	f300 808e 	bgt.w	8006e38 <_dtoa_r+0x990>
 8006d1c:	9b06      	ldr	r3, [sp, #24]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	dc51      	bgt.n	8006dc6 <_dtoa_r+0x91e>
 8006d22:	e089      	b.n	8006e38 <_dtoa_r+0x990>
 8006d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d2a:	e74b      	b.n	8006bc4 <_dtoa_r+0x71c>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	1e5e      	subs	r6, r3, #1
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	42b3      	cmp	r3, r6
 8006d34:	bfbf      	itttt	lt
 8006d36:	9b07      	ldrlt	r3, [sp, #28]
 8006d38:	9607      	strlt	r6, [sp, #28]
 8006d3a:	1af2      	sublt	r2, r6, r3
 8006d3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d3e:	bfb6      	itet	lt
 8006d40:	189b      	addlt	r3, r3, r2
 8006d42:	1b9e      	subge	r6, r3, r6
 8006d44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	bfb8      	it	lt
 8006d4a:	2600      	movlt	r6, #0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bfb7      	itett	lt
 8006d50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d58:	1a9d      	sublt	r5, r3, r2
 8006d5a:	2300      	movlt	r3, #0
 8006d5c:	e734      	b.n	8006bc8 <_dtoa_r+0x720>
 8006d5e:	9e07      	ldr	r6, [sp, #28]
 8006d60:	9d04      	ldr	r5, [sp, #16]
 8006d62:	9f08      	ldr	r7, [sp, #32]
 8006d64:	e73b      	b.n	8006bde <_dtoa_r+0x736>
 8006d66:	9a07      	ldr	r2, [sp, #28]
 8006d68:	e767      	b.n	8006c3a <_dtoa_r+0x792>
 8006d6a:	9b06      	ldr	r3, [sp, #24]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	dc18      	bgt.n	8006da2 <_dtoa_r+0x8fa>
 8006d70:	f1ba 0f00 	cmp.w	sl, #0
 8006d74:	d115      	bne.n	8006da2 <_dtoa_r+0x8fa>
 8006d76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d7a:	b993      	cbnz	r3, 8006da2 <_dtoa_r+0x8fa>
 8006d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	051b      	lsls	r3, r3, #20
 8006d84:	b183      	cbz	r3, 8006da8 <_dtoa_r+0x900>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	9b05      	ldr	r3, [sp, #20]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	f04f 0801 	mov.w	r8, #1
 8006d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f47f af6a 	bne.w	8006c72 <_dtoa_r+0x7ca>
 8006d9e:	2001      	movs	r0, #1
 8006da0:	e76f      	b.n	8006c82 <_dtoa_r+0x7da>
 8006da2:	f04f 0800 	mov.w	r8, #0
 8006da6:	e7f6      	b.n	8006d96 <_dtoa_r+0x8ee>
 8006da8:	4698      	mov	r8, r3
 8006daa:	e7f4      	b.n	8006d96 <_dtoa_r+0x8ee>
 8006dac:	f43f af7d 	beq.w	8006caa <_dtoa_r+0x802>
 8006db0:	4618      	mov	r0, r3
 8006db2:	301c      	adds	r0, #28
 8006db4:	e772      	b.n	8006c9c <_dtoa_r+0x7f4>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dc37      	bgt.n	8006e2c <_dtoa_r+0x984>
 8006dbc:	9b06      	ldr	r3, [sp, #24]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	dd34      	ble.n	8006e2c <_dtoa_r+0x984>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	9302      	str	r3, [sp, #8]
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	b96b      	cbnz	r3, 8006de6 <_dtoa_r+0x93e>
 8006dca:	4631      	mov	r1, r6
 8006dcc:	2205      	movs	r2, #5
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 fd56 	bl	8007880 <__multadd>
 8006dd4:	4601      	mov	r1, r0
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	ee18 0a10 	vmov	r0, s16
 8006ddc:	f000 ffba 	bl	8007d54 <__mcmp>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f73f adbb 	bgt.w	800695c <_dtoa_r+0x4b4>
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	9d01      	ldr	r5, [sp, #4]
 8006dea:	43db      	mvns	r3, r3
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	f04f 0800 	mov.w	r8, #0
 8006df2:	4631      	mov	r1, r6
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fd21 	bl	800783c <_Bfree>
 8006dfa:	2f00      	cmp	r7, #0
 8006dfc:	f43f aea4 	beq.w	8006b48 <_dtoa_r+0x6a0>
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d005      	beq.n	8006e12 <_dtoa_r+0x96a>
 8006e06:	45b8      	cmp	r8, r7
 8006e08:	d003      	beq.n	8006e12 <_dtoa_r+0x96a>
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 fd15 	bl	800783c <_Bfree>
 8006e12:	4639      	mov	r1, r7
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 fd11 	bl	800783c <_Bfree>
 8006e1a:	e695      	b.n	8006b48 <_dtoa_r+0x6a0>
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	4637      	mov	r7, r6
 8006e20:	e7e1      	b.n	8006de6 <_dtoa_r+0x93e>
 8006e22:	9700      	str	r7, [sp, #0]
 8006e24:	4637      	mov	r7, r6
 8006e26:	e599      	b.n	800695c <_dtoa_r+0x4b4>
 8006e28:	40240000 	.word	0x40240000
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80ca 	beq.w	8006fc8 <_dtoa_r+0xb20>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	9302      	str	r3, [sp, #8]
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	dd05      	ble.n	8006e48 <_dtoa_r+0x9a0>
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	462a      	mov	r2, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 ff17 	bl	8007c74 <__lshift>
 8006e46:	4607      	mov	r7, r0
 8006e48:	f1b8 0f00 	cmp.w	r8, #0
 8006e4c:	d05b      	beq.n	8006f06 <_dtoa_r+0xa5e>
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fcb3 	bl	80077bc <_Balloc>
 8006e56:	4605      	mov	r5, r0
 8006e58:	b928      	cbnz	r0, 8006e66 <_dtoa_r+0x9be>
 8006e5a:	4b87      	ldr	r3, [pc, #540]	; (8007078 <_dtoa_r+0xbd0>)
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e62:	f7ff bb3b 	b.w	80064dc <_dtoa_r+0x34>
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	3202      	adds	r2, #2
 8006e6a:	0092      	lsls	r2, r2, #2
 8006e6c:	f107 010c 	add.w	r1, r7, #12
 8006e70:	300c      	adds	r0, #12
 8006e72:	f000 fc95 	bl	80077a0 <memcpy>
 8006e76:	2201      	movs	r2, #1
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 fefa 	bl	8007c74 <__lshift>
 8006e80:	9b01      	ldr	r3, [sp, #4]
 8006e82:	f103 0901 	add.w	r9, r3, #1
 8006e86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	f00a 0301 	and.w	r3, sl, #1
 8006e92:	46b8      	mov	r8, r7
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	4607      	mov	r7, r0
 8006e98:	4631      	mov	r1, r6
 8006e9a:	ee18 0a10 	vmov	r0, s16
 8006e9e:	f7ff fa77 	bl	8006390 <quorem>
 8006ea2:	4641      	mov	r1, r8
 8006ea4:	9002      	str	r0, [sp, #8]
 8006ea6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eaa:	ee18 0a10 	vmov	r0, s16
 8006eae:	f000 ff51 	bl	8007d54 <__mcmp>
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	9003      	str	r0, [sp, #12]
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 ff67 	bl	8007d8c <__mdiff>
 8006ebe:	68c2      	ldr	r2, [r0, #12]
 8006ec0:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	bb02      	cbnz	r2, 8006f0a <_dtoa_r+0xa62>
 8006ec8:	4601      	mov	r1, r0
 8006eca:	ee18 0a10 	vmov	r0, s16
 8006ece:	f000 ff41 	bl	8007d54 <__mcmp>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	9207      	str	r2, [sp, #28]
 8006eda:	f000 fcaf 	bl	800783c <_Bfree>
 8006ede:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006ee2:	ea43 0102 	orr.w	r1, r3, r2
 8006ee6:	9b04      	ldr	r3, [sp, #16]
 8006ee8:	430b      	orrs	r3, r1
 8006eea:	464d      	mov	r5, r9
 8006eec:	d10f      	bne.n	8006f0e <_dtoa_r+0xa66>
 8006eee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ef2:	d02a      	beq.n	8006f4a <_dtoa_r+0xaa2>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dd02      	ble.n	8006f00 <_dtoa_r+0xa58>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f00:	f88b a000 	strb.w	sl, [fp]
 8006f04:	e775      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f06:	4638      	mov	r0, r7
 8006f08:	e7ba      	b.n	8006e80 <_dtoa_r+0x9d8>
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	e7e2      	b.n	8006ed4 <_dtoa_r+0xa2c>
 8006f0e:	9b03      	ldr	r3, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	db04      	blt.n	8006f1e <_dtoa_r+0xa76>
 8006f14:	9906      	ldr	r1, [sp, #24]
 8006f16:	430b      	orrs	r3, r1
 8006f18:	9904      	ldr	r1, [sp, #16]
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	d122      	bne.n	8006f64 <_dtoa_r+0xabc>
 8006f1e:	2a00      	cmp	r2, #0
 8006f20:	ddee      	ble.n	8006f00 <_dtoa_r+0xa58>
 8006f22:	ee18 1a10 	vmov	r1, s16
 8006f26:	2201      	movs	r2, #1
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 fea3 	bl	8007c74 <__lshift>
 8006f2e:	4631      	mov	r1, r6
 8006f30:	ee08 0a10 	vmov	s16, r0
 8006f34:	f000 ff0e 	bl	8007d54 <__mcmp>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	dc03      	bgt.n	8006f44 <_dtoa_r+0xa9c>
 8006f3c:	d1e0      	bne.n	8006f00 <_dtoa_r+0xa58>
 8006f3e:	f01a 0f01 	tst.w	sl, #1
 8006f42:	d0dd      	beq.n	8006f00 <_dtoa_r+0xa58>
 8006f44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f48:	d1d7      	bne.n	8006efa <_dtoa_r+0xa52>
 8006f4a:	2339      	movs	r3, #57	; 0x39
 8006f4c:	f88b 3000 	strb.w	r3, [fp]
 8006f50:	462b      	mov	r3, r5
 8006f52:	461d      	mov	r5, r3
 8006f54:	3b01      	subs	r3, #1
 8006f56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f5a:	2a39      	cmp	r2, #57	; 0x39
 8006f5c:	d071      	beq.n	8007042 <_dtoa_r+0xb9a>
 8006f5e:	3201      	adds	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	e746      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	dd07      	ble.n	8006f78 <_dtoa_r+0xad0>
 8006f68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f6c:	d0ed      	beq.n	8006f4a <_dtoa_r+0xaa2>
 8006f6e:	f10a 0301 	add.w	r3, sl, #1
 8006f72:	f88b 3000 	strb.w	r3, [fp]
 8006f76:	e73c      	b.n	8006df2 <_dtoa_r+0x94a>
 8006f78:	9b05      	ldr	r3, [sp, #20]
 8006f7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f7e:	4599      	cmp	r9, r3
 8006f80:	d047      	beq.n	8007012 <_dtoa_r+0xb6a>
 8006f82:	ee18 1a10 	vmov	r1, s16
 8006f86:	2300      	movs	r3, #0
 8006f88:	220a      	movs	r2, #10
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 fc78 	bl	8007880 <__multadd>
 8006f90:	45b8      	cmp	r8, r7
 8006f92:	ee08 0a10 	vmov	s16, r0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	f04f 020a 	mov.w	r2, #10
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	d106      	bne.n	8006fb2 <_dtoa_r+0xb0a>
 8006fa4:	f000 fc6c 	bl	8007880 <__multadd>
 8006fa8:	4680      	mov	r8, r0
 8006faa:	4607      	mov	r7, r0
 8006fac:	f109 0901 	add.w	r9, r9, #1
 8006fb0:	e772      	b.n	8006e98 <_dtoa_r+0x9f0>
 8006fb2:	f000 fc65 	bl	8007880 <__multadd>
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4680      	mov	r8, r0
 8006fba:	2300      	movs	r3, #0
 8006fbc:	220a      	movs	r2, #10
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 fc5e 	bl	8007880 <__multadd>
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	e7f1      	b.n	8006fac <_dtoa_r+0xb04>
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	9d01      	ldr	r5, [sp, #4]
 8006fce:	ee18 0a10 	vmov	r0, s16
 8006fd2:	4631      	mov	r1, r6
 8006fd4:	f7ff f9dc 	bl	8006390 <quorem>
 8006fd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	f805 ab01 	strb.w	sl, [r5], #1
 8006fe2:	1aea      	subs	r2, r5, r3
 8006fe4:	9b02      	ldr	r3, [sp, #8]
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	dd09      	ble.n	8006ffe <_dtoa_r+0xb56>
 8006fea:	ee18 1a10 	vmov	r1, s16
 8006fee:	2300      	movs	r3, #0
 8006ff0:	220a      	movs	r2, #10
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	f000 fc44 	bl	8007880 <__multadd>
 8006ff8:	ee08 0a10 	vmov	s16, r0
 8006ffc:	e7e7      	b.n	8006fce <_dtoa_r+0xb26>
 8006ffe:	9b02      	ldr	r3, [sp, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	bfc8      	it	gt
 8007004:	461d      	movgt	r5, r3
 8007006:	9b01      	ldr	r3, [sp, #4]
 8007008:	bfd8      	it	le
 800700a:	2501      	movle	r5, #1
 800700c:	441d      	add	r5, r3
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	ee18 1a10 	vmov	r1, s16
 8007016:	2201      	movs	r2, #1
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fe2b 	bl	8007c74 <__lshift>
 800701e:	4631      	mov	r1, r6
 8007020:	ee08 0a10 	vmov	s16, r0
 8007024:	f000 fe96 	bl	8007d54 <__mcmp>
 8007028:	2800      	cmp	r0, #0
 800702a:	dc91      	bgt.n	8006f50 <_dtoa_r+0xaa8>
 800702c:	d102      	bne.n	8007034 <_dtoa_r+0xb8c>
 800702e:	f01a 0f01 	tst.w	sl, #1
 8007032:	d18d      	bne.n	8006f50 <_dtoa_r+0xaa8>
 8007034:	462b      	mov	r3, r5
 8007036:	461d      	mov	r5, r3
 8007038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800703c:	2a30      	cmp	r2, #48	; 0x30
 800703e:	d0fa      	beq.n	8007036 <_dtoa_r+0xb8e>
 8007040:	e6d7      	b.n	8006df2 <_dtoa_r+0x94a>
 8007042:	9a01      	ldr	r2, [sp, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d184      	bne.n	8006f52 <_dtoa_r+0xaaa>
 8007048:	9b00      	ldr	r3, [sp, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2331      	movs	r3, #49	; 0x31
 8007050:	7013      	strb	r3, [r2, #0]
 8007052:	e6ce      	b.n	8006df2 <_dtoa_r+0x94a>
 8007054:	4b09      	ldr	r3, [pc, #36]	; (800707c <_dtoa_r+0xbd4>)
 8007056:	f7ff ba95 	b.w	8006584 <_dtoa_r+0xdc>
 800705a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800705c:	2b00      	cmp	r3, #0
 800705e:	f47f aa6e 	bne.w	800653e <_dtoa_r+0x96>
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <_dtoa_r+0xbd8>)
 8007064:	f7ff ba8e 	b.w	8006584 <_dtoa_r+0xdc>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	dcae      	bgt.n	8006fcc <_dtoa_r+0xb24>
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	2b02      	cmp	r3, #2
 8007072:	f73f aea8 	bgt.w	8006dc6 <_dtoa_r+0x91e>
 8007076:	e7a9      	b.n	8006fcc <_dtoa_r+0xb24>
 8007078:	08009520 	.word	0x08009520
 800707c:	08009320 	.word	0x08009320
 8007080:	080094a1 	.word	0x080094a1

08007084 <rshift>:
 8007084:	6903      	ldr	r3, [r0, #16]
 8007086:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800708a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800708e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007092:	f100 0414 	add.w	r4, r0, #20
 8007096:	dd45      	ble.n	8007124 <rshift+0xa0>
 8007098:	f011 011f 	ands.w	r1, r1, #31
 800709c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070a4:	d10c      	bne.n	80070c0 <rshift+0x3c>
 80070a6:	f100 0710 	add.w	r7, r0, #16
 80070aa:	4629      	mov	r1, r5
 80070ac:	42b1      	cmp	r1, r6
 80070ae:	d334      	bcc.n	800711a <rshift+0x96>
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	1eea      	subs	r2, r5, #3
 80070b6:	4296      	cmp	r6, r2
 80070b8:	bf38      	it	cc
 80070ba:	2300      	movcc	r3, #0
 80070bc:	4423      	add	r3, r4
 80070be:	e015      	b.n	80070ec <rshift+0x68>
 80070c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80070c4:	f1c1 0820 	rsb	r8, r1, #32
 80070c8:	40cf      	lsrs	r7, r1
 80070ca:	f105 0e04 	add.w	lr, r5, #4
 80070ce:	46a1      	mov	r9, r4
 80070d0:	4576      	cmp	r6, lr
 80070d2:	46f4      	mov	ip, lr
 80070d4:	d815      	bhi.n	8007102 <rshift+0x7e>
 80070d6:	1a9a      	subs	r2, r3, r2
 80070d8:	0092      	lsls	r2, r2, #2
 80070da:	3a04      	subs	r2, #4
 80070dc:	3501      	adds	r5, #1
 80070de:	42ae      	cmp	r6, r5
 80070e0:	bf38      	it	cc
 80070e2:	2200      	movcc	r2, #0
 80070e4:	18a3      	adds	r3, r4, r2
 80070e6:	50a7      	str	r7, [r4, r2]
 80070e8:	b107      	cbz	r7, 80070ec <rshift+0x68>
 80070ea:	3304      	adds	r3, #4
 80070ec:	1b1a      	subs	r2, r3, r4
 80070ee:	42a3      	cmp	r3, r4
 80070f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80070f4:	bf08      	it	eq
 80070f6:	2300      	moveq	r3, #0
 80070f8:	6102      	str	r2, [r0, #16]
 80070fa:	bf08      	it	eq
 80070fc:	6143      	streq	r3, [r0, #20]
 80070fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007102:	f8dc c000 	ldr.w	ip, [ip]
 8007106:	fa0c fc08 	lsl.w	ip, ip, r8
 800710a:	ea4c 0707 	orr.w	r7, ip, r7
 800710e:	f849 7b04 	str.w	r7, [r9], #4
 8007112:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007116:	40cf      	lsrs	r7, r1
 8007118:	e7da      	b.n	80070d0 <rshift+0x4c>
 800711a:	f851 cb04 	ldr.w	ip, [r1], #4
 800711e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007122:	e7c3      	b.n	80070ac <rshift+0x28>
 8007124:	4623      	mov	r3, r4
 8007126:	e7e1      	b.n	80070ec <rshift+0x68>

08007128 <__hexdig_fun>:
 8007128:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800712c:	2b09      	cmp	r3, #9
 800712e:	d802      	bhi.n	8007136 <__hexdig_fun+0xe>
 8007130:	3820      	subs	r0, #32
 8007132:	b2c0      	uxtb	r0, r0
 8007134:	4770      	bx	lr
 8007136:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800713a:	2b05      	cmp	r3, #5
 800713c:	d801      	bhi.n	8007142 <__hexdig_fun+0x1a>
 800713e:	3847      	subs	r0, #71	; 0x47
 8007140:	e7f7      	b.n	8007132 <__hexdig_fun+0xa>
 8007142:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007146:	2b05      	cmp	r3, #5
 8007148:	d801      	bhi.n	800714e <__hexdig_fun+0x26>
 800714a:	3827      	subs	r0, #39	; 0x27
 800714c:	e7f1      	b.n	8007132 <__hexdig_fun+0xa>
 800714e:	2000      	movs	r0, #0
 8007150:	4770      	bx	lr
	...

08007154 <__gethex>:
 8007154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	ed2d 8b02 	vpush	{d8}
 800715c:	b089      	sub	sp, #36	; 0x24
 800715e:	ee08 0a10 	vmov	s16, r0
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	4bb4      	ldr	r3, [pc, #720]	; (8007438 <__gethex+0x2e4>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	4618      	mov	r0, r3
 800716c:	468b      	mov	fp, r1
 800716e:	4690      	mov	r8, r2
 8007170:	f7f9 f836 	bl	80001e0 <strlen>
 8007174:	9b01      	ldr	r3, [sp, #4]
 8007176:	f8db 2000 	ldr.w	r2, [fp]
 800717a:	4403      	add	r3, r0
 800717c:	4682      	mov	sl, r0
 800717e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	1c93      	adds	r3, r2, #2
 8007186:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800718a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800718e:	32fe      	adds	r2, #254	; 0xfe
 8007190:	18d1      	adds	r1, r2, r3
 8007192:	461f      	mov	r7, r3
 8007194:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007198:	9100      	str	r1, [sp, #0]
 800719a:	2830      	cmp	r0, #48	; 0x30
 800719c:	d0f8      	beq.n	8007190 <__gethex+0x3c>
 800719e:	f7ff ffc3 	bl	8007128 <__hexdig_fun>
 80071a2:	4604      	mov	r4, r0
 80071a4:	2800      	cmp	r0, #0
 80071a6:	d13a      	bne.n	800721e <__gethex+0xca>
 80071a8:	9901      	ldr	r1, [sp, #4]
 80071aa:	4652      	mov	r2, sl
 80071ac:	4638      	mov	r0, r7
 80071ae:	f001 fa33 	bl	8008618 <strncmp>
 80071b2:	4605      	mov	r5, r0
 80071b4:	2800      	cmp	r0, #0
 80071b6:	d168      	bne.n	800728a <__gethex+0x136>
 80071b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80071bc:	eb07 060a 	add.w	r6, r7, sl
 80071c0:	f7ff ffb2 	bl	8007128 <__hexdig_fun>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d062      	beq.n	800728e <__gethex+0x13a>
 80071c8:	4633      	mov	r3, r6
 80071ca:	7818      	ldrb	r0, [r3, #0]
 80071cc:	2830      	cmp	r0, #48	; 0x30
 80071ce:	461f      	mov	r7, r3
 80071d0:	f103 0301 	add.w	r3, r3, #1
 80071d4:	d0f9      	beq.n	80071ca <__gethex+0x76>
 80071d6:	f7ff ffa7 	bl	8007128 <__hexdig_fun>
 80071da:	2301      	movs	r3, #1
 80071dc:	fab0 f480 	clz	r4, r0
 80071e0:	0964      	lsrs	r4, r4, #5
 80071e2:	4635      	mov	r5, r6
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	463a      	mov	r2, r7
 80071e8:	4616      	mov	r6, r2
 80071ea:	3201      	adds	r2, #1
 80071ec:	7830      	ldrb	r0, [r6, #0]
 80071ee:	f7ff ff9b 	bl	8007128 <__hexdig_fun>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d1f8      	bne.n	80071e8 <__gethex+0x94>
 80071f6:	9901      	ldr	r1, [sp, #4]
 80071f8:	4652      	mov	r2, sl
 80071fa:	4630      	mov	r0, r6
 80071fc:	f001 fa0c 	bl	8008618 <strncmp>
 8007200:	b980      	cbnz	r0, 8007224 <__gethex+0xd0>
 8007202:	b94d      	cbnz	r5, 8007218 <__gethex+0xc4>
 8007204:	eb06 050a 	add.w	r5, r6, sl
 8007208:	462a      	mov	r2, r5
 800720a:	4616      	mov	r6, r2
 800720c:	3201      	adds	r2, #1
 800720e:	7830      	ldrb	r0, [r6, #0]
 8007210:	f7ff ff8a 	bl	8007128 <__hexdig_fun>
 8007214:	2800      	cmp	r0, #0
 8007216:	d1f8      	bne.n	800720a <__gethex+0xb6>
 8007218:	1bad      	subs	r5, r5, r6
 800721a:	00ad      	lsls	r5, r5, #2
 800721c:	e004      	b.n	8007228 <__gethex+0xd4>
 800721e:	2400      	movs	r4, #0
 8007220:	4625      	mov	r5, r4
 8007222:	e7e0      	b.n	80071e6 <__gethex+0x92>
 8007224:	2d00      	cmp	r5, #0
 8007226:	d1f7      	bne.n	8007218 <__gethex+0xc4>
 8007228:	7833      	ldrb	r3, [r6, #0]
 800722a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800722e:	2b50      	cmp	r3, #80	; 0x50
 8007230:	d13b      	bne.n	80072aa <__gethex+0x156>
 8007232:	7873      	ldrb	r3, [r6, #1]
 8007234:	2b2b      	cmp	r3, #43	; 0x2b
 8007236:	d02c      	beq.n	8007292 <__gethex+0x13e>
 8007238:	2b2d      	cmp	r3, #45	; 0x2d
 800723a:	d02e      	beq.n	800729a <__gethex+0x146>
 800723c:	1c71      	adds	r1, r6, #1
 800723e:	f04f 0900 	mov.w	r9, #0
 8007242:	7808      	ldrb	r0, [r1, #0]
 8007244:	f7ff ff70 	bl	8007128 <__hexdig_fun>
 8007248:	1e43      	subs	r3, r0, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b18      	cmp	r3, #24
 800724e:	d82c      	bhi.n	80072aa <__gethex+0x156>
 8007250:	f1a0 0210 	sub.w	r2, r0, #16
 8007254:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007258:	f7ff ff66 	bl	8007128 <__hexdig_fun>
 800725c:	1e43      	subs	r3, r0, #1
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b18      	cmp	r3, #24
 8007262:	d91d      	bls.n	80072a0 <__gethex+0x14c>
 8007264:	f1b9 0f00 	cmp.w	r9, #0
 8007268:	d000      	beq.n	800726c <__gethex+0x118>
 800726a:	4252      	negs	r2, r2
 800726c:	4415      	add	r5, r2
 800726e:	f8cb 1000 	str.w	r1, [fp]
 8007272:	b1e4      	cbz	r4, 80072ae <__gethex+0x15a>
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bf14      	ite	ne
 800727a:	2700      	movne	r7, #0
 800727c:	2706      	moveq	r7, #6
 800727e:	4638      	mov	r0, r7
 8007280:	b009      	add	sp, #36	; 0x24
 8007282:	ecbd 8b02 	vpop	{d8}
 8007286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728a:	463e      	mov	r6, r7
 800728c:	4625      	mov	r5, r4
 800728e:	2401      	movs	r4, #1
 8007290:	e7ca      	b.n	8007228 <__gethex+0xd4>
 8007292:	f04f 0900 	mov.w	r9, #0
 8007296:	1cb1      	adds	r1, r6, #2
 8007298:	e7d3      	b.n	8007242 <__gethex+0xee>
 800729a:	f04f 0901 	mov.w	r9, #1
 800729e:	e7fa      	b.n	8007296 <__gethex+0x142>
 80072a0:	230a      	movs	r3, #10
 80072a2:	fb03 0202 	mla	r2, r3, r2, r0
 80072a6:	3a10      	subs	r2, #16
 80072a8:	e7d4      	b.n	8007254 <__gethex+0x100>
 80072aa:	4631      	mov	r1, r6
 80072ac:	e7df      	b.n	800726e <__gethex+0x11a>
 80072ae:	1bf3      	subs	r3, r6, r7
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4621      	mov	r1, r4
 80072b4:	2b07      	cmp	r3, #7
 80072b6:	dc0b      	bgt.n	80072d0 <__gethex+0x17c>
 80072b8:	ee18 0a10 	vmov	r0, s16
 80072bc:	f000 fa7e 	bl	80077bc <_Balloc>
 80072c0:	4604      	mov	r4, r0
 80072c2:	b940      	cbnz	r0, 80072d6 <__gethex+0x182>
 80072c4:	4b5d      	ldr	r3, [pc, #372]	; (800743c <__gethex+0x2e8>)
 80072c6:	4602      	mov	r2, r0
 80072c8:	21de      	movs	r1, #222	; 0xde
 80072ca:	485d      	ldr	r0, [pc, #372]	; (8007440 <__gethex+0x2ec>)
 80072cc:	f001 f9c6 	bl	800865c <__assert_func>
 80072d0:	3101      	adds	r1, #1
 80072d2:	105b      	asrs	r3, r3, #1
 80072d4:	e7ee      	b.n	80072b4 <__gethex+0x160>
 80072d6:	f100 0914 	add.w	r9, r0, #20
 80072da:	f04f 0b00 	mov.w	fp, #0
 80072de:	f1ca 0301 	rsb	r3, sl, #1
 80072e2:	f8cd 9008 	str.w	r9, [sp, #8]
 80072e6:	f8cd b000 	str.w	fp, [sp]
 80072ea:	9306      	str	r3, [sp, #24]
 80072ec:	42b7      	cmp	r7, r6
 80072ee:	d340      	bcc.n	8007372 <__gethex+0x21e>
 80072f0:	9802      	ldr	r0, [sp, #8]
 80072f2:	9b00      	ldr	r3, [sp, #0]
 80072f4:	f840 3b04 	str.w	r3, [r0], #4
 80072f8:	eba0 0009 	sub.w	r0, r0, r9
 80072fc:	1080      	asrs	r0, r0, #2
 80072fe:	0146      	lsls	r6, r0, #5
 8007300:	6120      	str	r0, [r4, #16]
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fb4c 	bl	80079a0 <__hi0bits>
 8007308:	1a30      	subs	r0, r6, r0
 800730a:	f8d8 6000 	ldr.w	r6, [r8]
 800730e:	42b0      	cmp	r0, r6
 8007310:	dd63      	ble.n	80073da <__gethex+0x286>
 8007312:	1b87      	subs	r7, r0, r6
 8007314:	4639      	mov	r1, r7
 8007316:	4620      	mov	r0, r4
 8007318:	f000 fef0 	bl	80080fc <__any_on>
 800731c:	4682      	mov	sl, r0
 800731e:	b1a8      	cbz	r0, 800734c <__gethex+0x1f8>
 8007320:	1e7b      	subs	r3, r7, #1
 8007322:	1159      	asrs	r1, r3, #5
 8007324:	f003 021f 	and.w	r2, r3, #31
 8007328:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800732c:	f04f 0a01 	mov.w	sl, #1
 8007330:	fa0a f202 	lsl.w	r2, sl, r2
 8007334:	420a      	tst	r2, r1
 8007336:	d009      	beq.n	800734c <__gethex+0x1f8>
 8007338:	4553      	cmp	r3, sl
 800733a:	dd05      	ble.n	8007348 <__gethex+0x1f4>
 800733c:	1eb9      	subs	r1, r7, #2
 800733e:	4620      	mov	r0, r4
 8007340:	f000 fedc 	bl	80080fc <__any_on>
 8007344:	2800      	cmp	r0, #0
 8007346:	d145      	bne.n	80073d4 <__gethex+0x280>
 8007348:	f04f 0a02 	mov.w	sl, #2
 800734c:	4639      	mov	r1, r7
 800734e:	4620      	mov	r0, r4
 8007350:	f7ff fe98 	bl	8007084 <rshift>
 8007354:	443d      	add	r5, r7
 8007356:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800735a:	42ab      	cmp	r3, r5
 800735c:	da4c      	bge.n	80073f8 <__gethex+0x2a4>
 800735e:	ee18 0a10 	vmov	r0, s16
 8007362:	4621      	mov	r1, r4
 8007364:	f000 fa6a 	bl	800783c <_Bfree>
 8007368:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800736a:	2300      	movs	r3, #0
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	27a3      	movs	r7, #163	; 0xa3
 8007370:	e785      	b.n	800727e <__gethex+0x12a>
 8007372:	1e73      	subs	r3, r6, #1
 8007374:	9a05      	ldr	r2, [sp, #20]
 8007376:	9303      	str	r3, [sp, #12]
 8007378:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800737c:	4293      	cmp	r3, r2
 800737e:	d019      	beq.n	80073b4 <__gethex+0x260>
 8007380:	f1bb 0f20 	cmp.w	fp, #32
 8007384:	d107      	bne.n	8007396 <__gethex+0x242>
 8007386:	9b02      	ldr	r3, [sp, #8]
 8007388:	9a00      	ldr	r2, [sp, #0]
 800738a:	f843 2b04 	str.w	r2, [r3], #4
 800738e:	9302      	str	r3, [sp, #8]
 8007390:	2300      	movs	r3, #0
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	469b      	mov	fp, r3
 8007396:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800739a:	f7ff fec5 	bl	8007128 <__hexdig_fun>
 800739e:	9b00      	ldr	r3, [sp, #0]
 80073a0:	f000 000f 	and.w	r0, r0, #15
 80073a4:	fa00 f00b 	lsl.w	r0, r0, fp
 80073a8:	4303      	orrs	r3, r0
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	f10b 0b04 	add.w	fp, fp, #4
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	e00d      	b.n	80073d0 <__gethex+0x27c>
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	9a06      	ldr	r2, [sp, #24]
 80073b8:	4413      	add	r3, r2
 80073ba:	42bb      	cmp	r3, r7
 80073bc:	d3e0      	bcc.n	8007380 <__gethex+0x22c>
 80073be:	4618      	mov	r0, r3
 80073c0:	9901      	ldr	r1, [sp, #4]
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	4652      	mov	r2, sl
 80073c6:	f001 f927 	bl	8008618 <strncmp>
 80073ca:	9b07      	ldr	r3, [sp, #28]
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d1d7      	bne.n	8007380 <__gethex+0x22c>
 80073d0:	461e      	mov	r6, r3
 80073d2:	e78b      	b.n	80072ec <__gethex+0x198>
 80073d4:	f04f 0a03 	mov.w	sl, #3
 80073d8:	e7b8      	b.n	800734c <__gethex+0x1f8>
 80073da:	da0a      	bge.n	80073f2 <__gethex+0x29e>
 80073dc:	1a37      	subs	r7, r6, r0
 80073de:	4621      	mov	r1, r4
 80073e0:	ee18 0a10 	vmov	r0, s16
 80073e4:	463a      	mov	r2, r7
 80073e6:	f000 fc45 	bl	8007c74 <__lshift>
 80073ea:	1bed      	subs	r5, r5, r7
 80073ec:	4604      	mov	r4, r0
 80073ee:	f100 0914 	add.w	r9, r0, #20
 80073f2:	f04f 0a00 	mov.w	sl, #0
 80073f6:	e7ae      	b.n	8007356 <__gethex+0x202>
 80073f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80073fc:	42a8      	cmp	r0, r5
 80073fe:	dd72      	ble.n	80074e6 <__gethex+0x392>
 8007400:	1b45      	subs	r5, r0, r5
 8007402:	42ae      	cmp	r6, r5
 8007404:	dc36      	bgt.n	8007474 <__gethex+0x320>
 8007406:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d02a      	beq.n	8007464 <__gethex+0x310>
 800740e:	2b03      	cmp	r3, #3
 8007410:	d02c      	beq.n	800746c <__gethex+0x318>
 8007412:	2b01      	cmp	r3, #1
 8007414:	d11c      	bne.n	8007450 <__gethex+0x2fc>
 8007416:	42ae      	cmp	r6, r5
 8007418:	d11a      	bne.n	8007450 <__gethex+0x2fc>
 800741a:	2e01      	cmp	r6, #1
 800741c:	d112      	bne.n	8007444 <__gethex+0x2f0>
 800741e:	9a04      	ldr	r2, [sp, #16]
 8007420:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	2301      	movs	r3, #1
 8007428:	6123      	str	r3, [r4, #16]
 800742a:	f8c9 3000 	str.w	r3, [r9]
 800742e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007430:	2762      	movs	r7, #98	; 0x62
 8007432:	601c      	str	r4, [r3, #0]
 8007434:	e723      	b.n	800727e <__gethex+0x12a>
 8007436:	bf00      	nop
 8007438:	08009598 	.word	0x08009598
 800743c:	08009520 	.word	0x08009520
 8007440:	08009531 	.word	0x08009531
 8007444:	1e71      	subs	r1, r6, #1
 8007446:	4620      	mov	r0, r4
 8007448:	f000 fe58 	bl	80080fc <__any_on>
 800744c:	2800      	cmp	r0, #0
 800744e:	d1e6      	bne.n	800741e <__gethex+0x2ca>
 8007450:	ee18 0a10 	vmov	r0, s16
 8007454:	4621      	mov	r1, r4
 8007456:	f000 f9f1 	bl	800783c <_Bfree>
 800745a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800745c:	2300      	movs	r3, #0
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	2750      	movs	r7, #80	; 0x50
 8007462:	e70c      	b.n	800727e <__gethex+0x12a>
 8007464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1f2      	bne.n	8007450 <__gethex+0x2fc>
 800746a:	e7d8      	b.n	800741e <__gethex+0x2ca>
 800746c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1d5      	bne.n	800741e <__gethex+0x2ca>
 8007472:	e7ed      	b.n	8007450 <__gethex+0x2fc>
 8007474:	1e6f      	subs	r7, r5, #1
 8007476:	f1ba 0f00 	cmp.w	sl, #0
 800747a:	d131      	bne.n	80074e0 <__gethex+0x38c>
 800747c:	b127      	cbz	r7, 8007488 <__gethex+0x334>
 800747e:	4639      	mov	r1, r7
 8007480:	4620      	mov	r0, r4
 8007482:	f000 fe3b 	bl	80080fc <__any_on>
 8007486:	4682      	mov	sl, r0
 8007488:	117b      	asrs	r3, r7, #5
 800748a:	2101      	movs	r1, #1
 800748c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007490:	f007 071f 	and.w	r7, r7, #31
 8007494:	fa01 f707 	lsl.w	r7, r1, r7
 8007498:	421f      	tst	r7, r3
 800749a:	4629      	mov	r1, r5
 800749c:	4620      	mov	r0, r4
 800749e:	bf18      	it	ne
 80074a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80074a4:	1b76      	subs	r6, r6, r5
 80074a6:	f7ff fded 	bl	8007084 <rshift>
 80074aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80074ae:	2702      	movs	r7, #2
 80074b0:	f1ba 0f00 	cmp.w	sl, #0
 80074b4:	d048      	beq.n	8007548 <__gethex+0x3f4>
 80074b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d015      	beq.n	80074ea <__gethex+0x396>
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d017      	beq.n	80074f2 <__gethex+0x39e>
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d109      	bne.n	80074da <__gethex+0x386>
 80074c6:	f01a 0f02 	tst.w	sl, #2
 80074ca:	d006      	beq.n	80074da <__gethex+0x386>
 80074cc:	f8d9 0000 	ldr.w	r0, [r9]
 80074d0:	ea4a 0a00 	orr.w	sl, sl, r0
 80074d4:	f01a 0f01 	tst.w	sl, #1
 80074d8:	d10e      	bne.n	80074f8 <__gethex+0x3a4>
 80074da:	f047 0710 	orr.w	r7, r7, #16
 80074de:	e033      	b.n	8007548 <__gethex+0x3f4>
 80074e0:	f04f 0a01 	mov.w	sl, #1
 80074e4:	e7d0      	b.n	8007488 <__gethex+0x334>
 80074e6:	2701      	movs	r7, #1
 80074e8:	e7e2      	b.n	80074b0 <__gethex+0x35c>
 80074ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074ec:	f1c3 0301 	rsb	r3, r3, #1
 80074f0:	9315      	str	r3, [sp, #84]	; 0x54
 80074f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0f0      	beq.n	80074da <__gethex+0x386>
 80074f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80074fc:	f104 0314 	add.w	r3, r4, #20
 8007500:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007504:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007508:	f04f 0c00 	mov.w	ip, #0
 800750c:	4618      	mov	r0, r3
 800750e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007512:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007516:	d01c      	beq.n	8007552 <__gethex+0x3fe>
 8007518:	3201      	adds	r2, #1
 800751a:	6002      	str	r2, [r0, #0]
 800751c:	2f02      	cmp	r7, #2
 800751e:	f104 0314 	add.w	r3, r4, #20
 8007522:	d13f      	bne.n	80075a4 <__gethex+0x450>
 8007524:	f8d8 2000 	ldr.w	r2, [r8]
 8007528:	3a01      	subs	r2, #1
 800752a:	42b2      	cmp	r2, r6
 800752c:	d10a      	bne.n	8007544 <__gethex+0x3f0>
 800752e:	1171      	asrs	r1, r6, #5
 8007530:	2201      	movs	r2, #1
 8007532:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007536:	f006 061f 	and.w	r6, r6, #31
 800753a:	fa02 f606 	lsl.w	r6, r2, r6
 800753e:	421e      	tst	r6, r3
 8007540:	bf18      	it	ne
 8007542:	4617      	movne	r7, r2
 8007544:	f047 0720 	orr.w	r7, r7, #32
 8007548:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800754a:	601c      	str	r4, [r3, #0]
 800754c:	9b04      	ldr	r3, [sp, #16]
 800754e:	601d      	str	r5, [r3, #0]
 8007550:	e695      	b.n	800727e <__gethex+0x12a>
 8007552:	4299      	cmp	r1, r3
 8007554:	f843 cc04 	str.w	ip, [r3, #-4]
 8007558:	d8d8      	bhi.n	800750c <__gethex+0x3b8>
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	459b      	cmp	fp, r3
 800755e:	db19      	blt.n	8007594 <__gethex+0x440>
 8007560:	6861      	ldr	r1, [r4, #4]
 8007562:	ee18 0a10 	vmov	r0, s16
 8007566:	3101      	adds	r1, #1
 8007568:	f000 f928 	bl	80077bc <_Balloc>
 800756c:	4681      	mov	r9, r0
 800756e:	b918      	cbnz	r0, 8007578 <__gethex+0x424>
 8007570:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <__gethex+0x488>)
 8007572:	4602      	mov	r2, r0
 8007574:	2184      	movs	r1, #132	; 0x84
 8007576:	e6a8      	b.n	80072ca <__gethex+0x176>
 8007578:	6922      	ldr	r2, [r4, #16]
 800757a:	3202      	adds	r2, #2
 800757c:	f104 010c 	add.w	r1, r4, #12
 8007580:	0092      	lsls	r2, r2, #2
 8007582:	300c      	adds	r0, #12
 8007584:	f000 f90c 	bl	80077a0 <memcpy>
 8007588:	4621      	mov	r1, r4
 800758a:	ee18 0a10 	vmov	r0, s16
 800758e:	f000 f955 	bl	800783c <_Bfree>
 8007592:	464c      	mov	r4, r9
 8007594:	6923      	ldr	r3, [r4, #16]
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800759c:	6122      	str	r2, [r4, #16]
 800759e:	2201      	movs	r2, #1
 80075a0:	615a      	str	r2, [r3, #20]
 80075a2:	e7bb      	b.n	800751c <__gethex+0x3c8>
 80075a4:	6922      	ldr	r2, [r4, #16]
 80075a6:	455a      	cmp	r2, fp
 80075a8:	dd0b      	ble.n	80075c2 <__gethex+0x46e>
 80075aa:	2101      	movs	r1, #1
 80075ac:	4620      	mov	r0, r4
 80075ae:	f7ff fd69 	bl	8007084 <rshift>
 80075b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075b6:	3501      	adds	r5, #1
 80075b8:	42ab      	cmp	r3, r5
 80075ba:	f6ff aed0 	blt.w	800735e <__gethex+0x20a>
 80075be:	2701      	movs	r7, #1
 80075c0:	e7c0      	b.n	8007544 <__gethex+0x3f0>
 80075c2:	f016 061f 	ands.w	r6, r6, #31
 80075c6:	d0fa      	beq.n	80075be <__gethex+0x46a>
 80075c8:	4453      	add	r3, sl
 80075ca:	f1c6 0620 	rsb	r6, r6, #32
 80075ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80075d2:	f000 f9e5 	bl	80079a0 <__hi0bits>
 80075d6:	42b0      	cmp	r0, r6
 80075d8:	dbe7      	blt.n	80075aa <__gethex+0x456>
 80075da:	e7f0      	b.n	80075be <__gethex+0x46a>
 80075dc:	08009520 	.word	0x08009520

080075e0 <L_shift>:
 80075e0:	f1c2 0208 	rsb	r2, r2, #8
 80075e4:	0092      	lsls	r2, r2, #2
 80075e6:	b570      	push	{r4, r5, r6, lr}
 80075e8:	f1c2 0620 	rsb	r6, r2, #32
 80075ec:	6843      	ldr	r3, [r0, #4]
 80075ee:	6804      	ldr	r4, [r0, #0]
 80075f0:	fa03 f506 	lsl.w	r5, r3, r6
 80075f4:	432c      	orrs	r4, r5
 80075f6:	40d3      	lsrs	r3, r2
 80075f8:	6004      	str	r4, [r0, #0]
 80075fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80075fe:	4288      	cmp	r0, r1
 8007600:	d3f4      	bcc.n	80075ec <L_shift+0xc>
 8007602:	bd70      	pop	{r4, r5, r6, pc}

08007604 <__match>:
 8007604:	b530      	push	{r4, r5, lr}
 8007606:	6803      	ldr	r3, [r0, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800760e:	b914      	cbnz	r4, 8007616 <__match+0x12>
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	2001      	movs	r0, #1
 8007614:	bd30      	pop	{r4, r5, pc}
 8007616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800761a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800761e:	2d19      	cmp	r5, #25
 8007620:	bf98      	it	ls
 8007622:	3220      	addls	r2, #32
 8007624:	42a2      	cmp	r2, r4
 8007626:	d0f0      	beq.n	800760a <__match+0x6>
 8007628:	2000      	movs	r0, #0
 800762a:	e7f3      	b.n	8007614 <__match+0x10>

0800762c <__hexnan>:
 800762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007630:	680b      	ldr	r3, [r1, #0]
 8007632:	115e      	asrs	r6, r3, #5
 8007634:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007638:	f013 031f 	ands.w	r3, r3, #31
 800763c:	b087      	sub	sp, #28
 800763e:	bf18      	it	ne
 8007640:	3604      	addne	r6, #4
 8007642:	2500      	movs	r5, #0
 8007644:	1f37      	subs	r7, r6, #4
 8007646:	4690      	mov	r8, r2
 8007648:	6802      	ldr	r2, [r0, #0]
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	4682      	mov	sl, r0
 800764e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007652:	46b9      	mov	r9, r7
 8007654:	463c      	mov	r4, r7
 8007656:	9502      	str	r5, [sp, #8]
 8007658:	46ab      	mov	fp, r5
 800765a:	7851      	ldrb	r1, [r2, #1]
 800765c:	1c53      	adds	r3, r2, #1
 800765e:	9303      	str	r3, [sp, #12]
 8007660:	b341      	cbz	r1, 80076b4 <__hexnan+0x88>
 8007662:	4608      	mov	r0, r1
 8007664:	9205      	str	r2, [sp, #20]
 8007666:	9104      	str	r1, [sp, #16]
 8007668:	f7ff fd5e 	bl	8007128 <__hexdig_fun>
 800766c:	2800      	cmp	r0, #0
 800766e:	d14f      	bne.n	8007710 <__hexnan+0xe4>
 8007670:	9904      	ldr	r1, [sp, #16]
 8007672:	9a05      	ldr	r2, [sp, #20]
 8007674:	2920      	cmp	r1, #32
 8007676:	d818      	bhi.n	80076aa <__hexnan+0x7e>
 8007678:	9b02      	ldr	r3, [sp, #8]
 800767a:	459b      	cmp	fp, r3
 800767c:	dd13      	ble.n	80076a6 <__hexnan+0x7a>
 800767e:	454c      	cmp	r4, r9
 8007680:	d206      	bcs.n	8007690 <__hexnan+0x64>
 8007682:	2d07      	cmp	r5, #7
 8007684:	dc04      	bgt.n	8007690 <__hexnan+0x64>
 8007686:	462a      	mov	r2, r5
 8007688:	4649      	mov	r1, r9
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff ffa8 	bl	80075e0 <L_shift>
 8007690:	4544      	cmp	r4, r8
 8007692:	d950      	bls.n	8007736 <__hexnan+0x10a>
 8007694:	2300      	movs	r3, #0
 8007696:	f1a4 0904 	sub.w	r9, r4, #4
 800769a:	f844 3c04 	str.w	r3, [r4, #-4]
 800769e:	f8cd b008 	str.w	fp, [sp, #8]
 80076a2:	464c      	mov	r4, r9
 80076a4:	461d      	mov	r5, r3
 80076a6:	9a03      	ldr	r2, [sp, #12]
 80076a8:	e7d7      	b.n	800765a <__hexnan+0x2e>
 80076aa:	2929      	cmp	r1, #41	; 0x29
 80076ac:	d156      	bne.n	800775c <__hexnan+0x130>
 80076ae:	3202      	adds	r2, #2
 80076b0:	f8ca 2000 	str.w	r2, [sl]
 80076b4:	f1bb 0f00 	cmp.w	fp, #0
 80076b8:	d050      	beq.n	800775c <__hexnan+0x130>
 80076ba:	454c      	cmp	r4, r9
 80076bc:	d206      	bcs.n	80076cc <__hexnan+0xa0>
 80076be:	2d07      	cmp	r5, #7
 80076c0:	dc04      	bgt.n	80076cc <__hexnan+0xa0>
 80076c2:	462a      	mov	r2, r5
 80076c4:	4649      	mov	r1, r9
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7ff ff8a 	bl	80075e0 <L_shift>
 80076cc:	4544      	cmp	r4, r8
 80076ce:	d934      	bls.n	800773a <__hexnan+0x10e>
 80076d0:	f1a8 0204 	sub.w	r2, r8, #4
 80076d4:	4623      	mov	r3, r4
 80076d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80076da:	f842 1f04 	str.w	r1, [r2, #4]!
 80076de:	429f      	cmp	r7, r3
 80076e0:	d2f9      	bcs.n	80076d6 <__hexnan+0xaa>
 80076e2:	1b3b      	subs	r3, r7, r4
 80076e4:	f023 0303 	bic.w	r3, r3, #3
 80076e8:	3304      	adds	r3, #4
 80076ea:	3401      	adds	r4, #1
 80076ec:	3e03      	subs	r6, #3
 80076ee:	42b4      	cmp	r4, r6
 80076f0:	bf88      	it	hi
 80076f2:	2304      	movhi	r3, #4
 80076f4:	4443      	add	r3, r8
 80076f6:	2200      	movs	r2, #0
 80076f8:	f843 2b04 	str.w	r2, [r3], #4
 80076fc:	429f      	cmp	r7, r3
 80076fe:	d2fb      	bcs.n	80076f8 <__hexnan+0xcc>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	b91b      	cbnz	r3, 800770c <__hexnan+0xe0>
 8007704:	4547      	cmp	r7, r8
 8007706:	d127      	bne.n	8007758 <__hexnan+0x12c>
 8007708:	2301      	movs	r3, #1
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	2005      	movs	r0, #5
 800770e:	e026      	b.n	800775e <__hexnan+0x132>
 8007710:	3501      	adds	r5, #1
 8007712:	2d08      	cmp	r5, #8
 8007714:	f10b 0b01 	add.w	fp, fp, #1
 8007718:	dd06      	ble.n	8007728 <__hexnan+0xfc>
 800771a:	4544      	cmp	r4, r8
 800771c:	d9c3      	bls.n	80076a6 <__hexnan+0x7a>
 800771e:	2300      	movs	r3, #0
 8007720:	f844 3c04 	str.w	r3, [r4, #-4]
 8007724:	2501      	movs	r5, #1
 8007726:	3c04      	subs	r4, #4
 8007728:	6822      	ldr	r2, [r4, #0]
 800772a:	f000 000f 	and.w	r0, r0, #15
 800772e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	e7b7      	b.n	80076a6 <__hexnan+0x7a>
 8007736:	2508      	movs	r5, #8
 8007738:	e7b5      	b.n	80076a6 <__hexnan+0x7a>
 800773a:	9b01      	ldr	r3, [sp, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d0df      	beq.n	8007700 <__hexnan+0xd4>
 8007740:	f04f 32ff 	mov.w	r2, #4294967295
 8007744:	f1c3 0320 	rsb	r3, r3, #32
 8007748:	fa22 f303 	lsr.w	r3, r2, r3
 800774c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007750:	401a      	ands	r2, r3
 8007752:	f846 2c04 	str.w	r2, [r6, #-4]
 8007756:	e7d3      	b.n	8007700 <__hexnan+0xd4>
 8007758:	3f04      	subs	r7, #4
 800775a:	e7d1      	b.n	8007700 <__hexnan+0xd4>
 800775c:	2004      	movs	r0, #4
 800775e:	b007      	add	sp, #28
 8007760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007764 <_localeconv_r>:
 8007764:	4800      	ldr	r0, [pc, #0]	; (8007768 <_localeconv_r+0x4>)
 8007766:	4770      	bx	lr
 8007768:	20000170 	.word	0x20000170

0800776c <malloc>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <malloc+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f000 bd67 	b.w	8008244 <_malloc_r>
 8007776:	bf00      	nop
 8007778:	20000018 	.word	0x20000018

0800777c <__ascii_mbtowc>:
 800777c:	b082      	sub	sp, #8
 800777e:	b901      	cbnz	r1, 8007782 <__ascii_mbtowc+0x6>
 8007780:	a901      	add	r1, sp, #4
 8007782:	b142      	cbz	r2, 8007796 <__ascii_mbtowc+0x1a>
 8007784:	b14b      	cbz	r3, 800779a <__ascii_mbtowc+0x1e>
 8007786:	7813      	ldrb	r3, [r2, #0]
 8007788:	600b      	str	r3, [r1, #0]
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	1e10      	subs	r0, r2, #0
 800778e:	bf18      	it	ne
 8007790:	2001      	movne	r0, #1
 8007792:	b002      	add	sp, #8
 8007794:	4770      	bx	lr
 8007796:	4610      	mov	r0, r2
 8007798:	e7fb      	b.n	8007792 <__ascii_mbtowc+0x16>
 800779a:	f06f 0001 	mvn.w	r0, #1
 800779e:	e7f8      	b.n	8007792 <__ascii_mbtowc+0x16>

080077a0 <memcpy>:
 80077a0:	440a      	add	r2, r1
 80077a2:	4291      	cmp	r1, r2
 80077a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80077a8:	d100      	bne.n	80077ac <memcpy+0xc>
 80077aa:	4770      	bx	lr
 80077ac:	b510      	push	{r4, lr}
 80077ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077b6:	4291      	cmp	r1, r2
 80077b8:	d1f9      	bne.n	80077ae <memcpy+0xe>
 80077ba:	bd10      	pop	{r4, pc}

080077bc <_Balloc>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	b976      	cbnz	r6, 80077e4 <_Balloc+0x28>
 80077c6:	2010      	movs	r0, #16
 80077c8:	f7ff ffd0 	bl	800776c <malloc>
 80077cc:	4602      	mov	r2, r0
 80077ce:	6260      	str	r0, [r4, #36]	; 0x24
 80077d0:	b920      	cbnz	r0, 80077dc <_Balloc+0x20>
 80077d2:	4b18      	ldr	r3, [pc, #96]	; (8007834 <_Balloc+0x78>)
 80077d4:	4818      	ldr	r0, [pc, #96]	; (8007838 <_Balloc+0x7c>)
 80077d6:	2166      	movs	r1, #102	; 0x66
 80077d8:	f000 ff40 	bl	800865c <__assert_func>
 80077dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e0:	6006      	str	r6, [r0, #0]
 80077e2:	60c6      	str	r6, [r0, #12]
 80077e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077e6:	68f3      	ldr	r3, [r6, #12]
 80077e8:	b183      	cbz	r3, 800780c <_Balloc+0x50>
 80077ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077f2:	b9b8      	cbnz	r0, 8007824 <_Balloc+0x68>
 80077f4:	2101      	movs	r1, #1
 80077f6:	fa01 f605 	lsl.w	r6, r1, r5
 80077fa:	1d72      	adds	r2, r6, #5
 80077fc:	0092      	lsls	r2, r2, #2
 80077fe:	4620      	mov	r0, r4
 8007800:	f000 fc9d 	bl	800813e <_calloc_r>
 8007804:	b160      	cbz	r0, 8007820 <_Balloc+0x64>
 8007806:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800780a:	e00e      	b.n	800782a <_Balloc+0x6e>
 800780c:	2221      	movs	r2, #33	; 0x21
 800780e:	2104      	movs	r1, #4
 8007810:	4620      	mov	r0, r4
 8007812:	f000 fc94 	bl	800813e <_calloc_r>
 8007816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007818:	60f0      	str	r0, [r6, #12]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e4      	bne.n	80077ea <_Balloc+0x2e>
 8007820:	2000      	movs	r0, #0
 8007822:	bd70      	pop	{r4, r5, r6, pc}
 8007824:	6802      	ldr	r2, [r0, #0]
 8007826:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800782a:	2300      	movs	r3, #0
 800782c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007830:	e7f7      	b.n	8007822 <_Balloc+0x66>
 8007832:	bf00      	nop
 8007834:	080094ae 	.word	0x080094ae
 8007838:	080095ac 	.word	0x080095ac

0800783c <_Bfree>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007840:	4605      	mov	r5, r0
 8007842:	460c      	mov	r4, r1
 8007844:	b976      	cbnz	r6, 8007864 <_Bfree+0x28>
 8007846:	2010      	movs	r0, #16
 8007848:	f7ff ff90 	bl	800776c <malloc>
 800784c:	4602      	mov	r2, r0
 800784e:	6268      	str	r0, [r5, #36]	; 0x24
 8007850:	b920      	cbnz	r0, 800785c <_Bfree+0x20>
 8007852:	4b09      	ldr	r3, [pc, #36]	; (8007878 <_Bfree+0x3c>)
 8007854:	4809      	ldr	r0, [pc, #36]	; (800787c <_Bfree+0x40>)
 8007856:	218a      	movs	r1, #138	; 0x8a
 8007858:	f000 ff00 	bl	800865c <__assert_func>
 800785c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007860:	6006      	str	r6, [r0, #0]
 8007862:	60c6      	str	r6, [r0, #12]
 8007864:	b13c      	cbz	r4, 8007876 <_Bfree+0x3a>
 8007866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007868:	6862      	ldr	r2, [r4, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007870:	6021      	str	r1, [r4, #0]
 8007872:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	080094ae 	.word	0x080094ae
 800787c:	080095ac 	.word	0x080095ac

08007880 <__multadd>:
 8007880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007884:	690d      	ldr	r5, [r1, #16]
 8007886:	4607      	mov	r7, r0
 8007888:	460c      	mov	r4, r1
 800788a:	461e      	mov	r6, r3
 800788c:	f101 0c14 	add.w	ip, r1, #20
 8007890:	2000      	movs	r0, #0
 8007892:	f8dc 3000 	ldr.w	r3, [ip]
 8007896:	b299      	uxth	r1, r3
 8007898:	fb02 6101 	mla	r1, r2, r1, r6
 800789c:	0c1e      	lsrs	r6, r3, #16
 800789e:	0c0b      	lsrs	r3, r1, #16
 80078a0:	fb02 3306 	mla	r3, r2, r6, r3
 80078a4:	b289      	uxth	r1, r1
 80078a6:	3001      	adds	r0, #1
 80078a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078ac:	4285      	cmp	r5, r0
 80078ae:	f84c 1b04 	str.w	r1, [ip], #4
 80078b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078b6:	dcec      	bgt.n	8007892 <__multadd+0x12>
 80078b8:	b30e      	cbz	r6, 80078fe <__multadd+0x7e>
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	42ab      	cmp	r3, r5
 80078be:	dc19      	bgt.n	80078f4 <__multadd+0x74>
 80078c0:	6861      	ldr	r1, [r4, #4]
 80078c2:	4638      	mov	r0, r7
 80078c4:	3101      	adds	r1, #1
 80078c6:	f7ff ff79 	bl	80077bc <_Balloc>
 80078ca:	4680      	mov	r8, r0
 80078cc:	b928      	cbnz	r0, 80078da <__multadd+0x5a>
 80078ce:	4602      	mov	r2, r0
 80078d0:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <__multadd+0x84>)
 80078d2:	480d      	ldr	r0, [pc, #52]	; (8007908 <__multadd+0x88>)
 80078d4:	21b5      	movs	r1, #181	; 0xb5
 80078d6:	f000 fec1 	bl	800865c <__assert_func>
 80078da:	6922      	ldr	r2, [r4, #16]
 80078dc:	3202      	adds	r2, #2
 80078de:	f104 010c 	add.w	r1, r4, #12
 80078e2:	0092      	lsls	r2, r2, #2
 80078e4:	300c      	adds	r0, #12
 80078e6:	f7ff ff5b 	bl	80077a0 <memcpy>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4638      	mov	r0, r7
 80078ee:	f7ff ffa5 	bl	800783c <_Bfree>
 80078f2:	4644      	mov	r4, r8
 80078f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078f8:	3501      	adds	r5, #1
 80078fa:	615e      	str	r6, [r3, #20]
 80078fc:	6125      	str	r5, [r4, #16]
 80078fe:	4620      	mov	r0, r4
 8007900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007904:	08009520 	.word	0x08009520
 8007908:	080095ac 	.word	0x080095ac

0800790c <__s2b>:
 800790c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007910:	460c      	mov	r4, r1
 8007912:	4615      	mov	r5, r2
 8007914:	461f      	mov	r7, r3
 8007916:	2209      	movs	r2, #9
 8007918:	3308      	adds	r3, #8
 800791a:	4606      	mov	r6, r0
 800791c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007920:	2100      	movs	r1, #0
 8007922:	2201      	movs	r2, #1
 8007924:	429a      	cmp	r2, r3
 8007926:	db09      	blt.n	800793c <__s2b+0x30>
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff ff47 	bl	80077bc <_Balloc>
 800792e:	b940      	cbnz	r0, 8007942 <__s2b+0x36>
 8007930:	4602      	mov	r2, r0
 8007932:	4b19      	ldr	r3, [pc, #100]	; (8007998 <__s2b+0x8c>)
 8007934:	4819      	ldr	r0, [pc, #100]	; (800799c <__s2b+0x90>)
 8007936:	21ce      	movs	r1, #206	; 0xce
 8007938:	f000 fe90 	bl	800865c <__assert_func>
 800793c:	0052      	lsls	r2, r2, #1
 800793e:	3101      	adds	r1, #1
 8007940:	e7f0      	b.n	8007924 <__s2b+0x18>
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	6143      	str	r3, [r0, #20]
 8007946:	2d09      	cmp	r5, #9
 8007948:	f04f 0301 	mov.w	r3, #1
 800794c:	6103      	str	r3, [r0, #16]
 800794e:	dd16      	ble.n	800797e <__s2b+0x72>
 8007950:	f104 0909 	add.w	r9, r4, #9
 8007954:	46c8      	mov	r8, r9
 8007956:	442c      	add	r4, r5
 8007958:	f818 3b01 	ldrb.w	r3, [r8], #1
 800795c:	4601      	mov	r1, r0
 800795e:	3b30      	subs	r3, #48	; 0x30
 8007960:	220a      	movs	r2, #10
 8007962:	4630      	mov	r0, r6
 8007964:	f7ff ff8c 	bl	8007880 <__multadd>
 8007968:	45a0      	cmp	r8, r4
 800796a:	d1f5      	bne.n	8007958 <__s2b+0x4c>
 800796c:	f1a5 0408 	sub.w	r4, r5, #8
 8007970:	444c      	add	r4, r9
 8007972:	1b2d      	subs	r5, r5, r4
 8007974:	1963      	adds	r3, r4, r5
 8007976:	42bb      	cmp	r3, r7
 8007978:	db04      	blt.n	8007984 <__s2b+0x78>
 800797a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797e:	340a      	adds	r4, #10
 8007980:	2509      	movs	r5, #9
 8007982:	e7f6      	b.n	8007972 <__s2b+0x66>
 8007984:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007988:	4601      	mov	r1, r0
 800798a:	3b30      	subs	r3, #48	; 0x30
 800798c:	220a      	movs	r2, #10
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff ff76 	bl	8007880 <__multadd>
 8007994:	e7ee      	b.n	8007974 <__s2b+0x68>
 8007996:	bf00      	nop
 8007998:	08009520 	.word	0x08009520
 800799c:	080095ac 	.word	0x080095ac

080079a0 <__hi0bits>:
 80079a0:	0c03      	lsrs	r3, r0, #16
 80079a2:	041b      	lsls	r3, r3, #16
 80079a4:	b9d3      	cbnz	r3, 80079dc <__hi0bits+0x3c>
 80079a6:	0400      	lsls	r0, r0, #16
 80079a8:	2310      	movs	r3, #16
 80079aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079ae:	bf04      	itt	eq
 80079b0:	0200      	lsleq	r0, r0, #8
 80079b2:	3308      	addeq	r3, #8
 80079b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079b8:	bf04      	itt	eq
 80079ba:	0100      	lsleq	r0, r0, #4
 80079bc:	3304      	addeq	r3, #4
 80079be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079c2:	bf04      	itt	eq
 80079c4:	0080      	lsleq	r0, r0, #2
 80079c6:	3302      	addeq	r3, #2
 80079c8:	2800      	cmp	r0, #0
 80079ca:	db05      	blt.n	80079d8 <__hi0bits+0x38>
 80079cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079d0:	f103 0301 	add.w	r3, r3, #1
 80079d4:	bf08      	it	eq
 80079d6:	2320      	moveq	r3, #32
 80079d8:	4618      	mov	r0, r3
 80079da:	4770      	bx	lr
 80079dc:	2300      	movs	r3, #0
 80079de:	e7e4      	b.n	80079aa <__hi0bits+0xa>

080079e0 <__lo0bits>:
 80079e0:	6803      	ldr	r3, [r0, #0]
 80079e2:	f013 0207 	ands.w	r2, r3, #7
 80079e6:	4601      	mov	r1, r0
 80079e8:	d00b      	beq.n	8007a02 <__lo0bits+0x22>
 80079ea:	07da      	lsls	r2, r3, #31
 80079ec:	d423      	bmi.n	8007a36 <__lo0bits+0x56>
 80079ee:	0798      	lsls	r0, r3, #30
 80079f0:	bf49      	itett	mi
 80079f2:	085b      	lsrmi	r3, r3, #1
 80079f4:	089b      	lsrpl	r3, r3, #2
 80079f6:	2001      	movmi	r0, #1
 80079f8:	600b      	strmi	r3, [r1, #0]
 80079fa:	bf5c      	itt	pl
 80079fc:	600b      	strpl	r3, [r1, #0]
 80079fe:	2002      	movpl	r0, #2
 8007a00:	4770      	bx	lr
 8007a02:	b298      	uxth	r0, r3
 8007a04:	b9a8      	cbnz	r0, 8007a32 <__lo0bits+0x52>
 8007a06:	0c1b      	lsrs	r3, r3, #16
 8007a08:	2010      	movs	r0, #16
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	b90a      	cbnz	r2, 8007a12 <__lo0bits+0x32>
 8007a0e:	3008      	adds	r0, #8
 8007a10:	0a1b      	lsrs	r3, r3, #8
 8007a12:	071a      	lsls	r2, r3, #28
 8007a14:	bf04      	itt	eq
 8007a16:	091b      	lsreq	r3, r3, #4
 8007a18:	3004      	addeq	r0, #4
 8007a1a:	079a      	lsls	r2, r3, #30
 8007a1c:	bf04      	itt	eq
 8007a1e:	089b      	lsreq	r3, r3, #2
 8007a20:	3002      	addeq	r0, #2
 8007a22:	07da      	lsls	r2, r3, #31
 8007a24:	d403      	bmi.n	8007a2e <__lo0bits+0x4e>
 8007a26:	085b      	lsrs	r3, r3, #1
 8007a28:	f100 0001 	add.w	r0, r0, #1
 8007a2c:	d005      	beq.n	8007a3a <__lo0bits+0x5a>
 8007a2e:	600b      	str	r3, [r1, #0]
 8007a30:	4770      	bx	lr
 8007a32:	4610      	mov	r0, r2
 8007a34:	e7e9      	b.n	8007a0a <__lo0bits+0x2a>
 8007a36:	2000      	movs	r0, #0
 8007a38:	4770      	bx	lr
 8007a3a:	2020      	movs	r0, #32
 8007a3c:	4770      	bx	lr
	...

08007a40 <__i2b>:
 8007a40:	b510      	push	{r4, lr}
 8007a42:	460c      	mov	r4, r1
 8007a44:	2101      	movs	r1, #1
 8007a46:	f7ff feb9 	bl	80077bc <_Balloc>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	b928      	cbnz	r0, 8007a5a <__i2b+0x1a>
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <__i2b+0x24>)
 8007a50:	4805      	ldr	r0, [pc, #20]	; (8007a68 <__i2b+0x28>)
 8007a52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a56:	f000 fe01 	bl	800865c <__assert_func>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	6144      	str	r4, [r0, #20]
 8007a5e:	6103      	str	r3, [r0, #16]
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	bf00      	nop
 8007a64:	08009520 	.word	0x08009520
 8007a68:	080095ac 	.word	0x080095ac

08007a6c <__multiply>:
 8007a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a70:	4691      	mov	r9, r2
 8007a72:	690a      	ldr	r2, [r1, #16]
 8007a74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	bfb8      	it	lt
 8007a7c:	460b      	movlt	r3, r1
 8007a7e:	460c      	mov	r4, r1
 8007a80:	bfbc      	itt	lt
 8007a82:	464c      	movlt	r4, r9
 8007a84:	4699      	movlt	r9, r3
 8007a86:	6927      	ldr	r7, [r4, #16]
 8007a88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a8c:	68a3      	ldr	r3, [r4, #8]
 8007a8e:	6861      	ldr	r1, [r4, #4]
 8007a90:	eb07 060a 	add.w	r6, r7, sl
 8007a94:	42b3      	cmp	r3, r6
 8007a96:	b085      	sub	sp, #20
 8007a98:	bfb8      	it	lt
 8007a9a:	3101      	addlt	r1, #1
 8007a9c:	f7ff fe8e 	bl	80077bc <_Balloc>
 8007aa0:	b930      	cbnz	r0, 8007ab0 <__multiply+0x44>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	4b44      	ldr	r3, [pc, #272]	; (8007bb8 <__multiply+0x14c>)
 8007aa6:	4845      	ldr	r0, [pc, #276]	; (8007bbc <__multiply+0x150>)
 8007aa8:	f240 115d 	movw	r1, #349	; 0x15d
 8007aac:	f000 fdd6 	bl	800865c <__assert_func>
 8007ab0:	f100 0514 	add.w	r5, r0, #20
 8007ab4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ab8:	462b      	mov	r3, r5
 8007aba:	2200      	movs	r2, #0
 8007abc:	4543      	cmp	r3, r8
 8007abe:	d321      	bcc.n	8007b04 <__multiply+0x98>
 8007ac0:	f104 0314 	add.w	r3, r4, #20
 8007ac4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ac8:	f109 0314 	add.w	r3, r9, #20
 8007acc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ad0:	9202      	str	r2, [sp, #8]
 8007ad2:	1b3a      	subs	r2, r7, r4
 8007ad4:	3a15      	subs	r2, #21
 8007ad6:	f022 0203 	bic.w	r2, r2, #3
 8007ada:	3204      	adds	r2, #4
 8007adc:	f104 0115 	add.w	r1, r4, #21
 8007ae0:	428f      	cmp	r7, r1
 8007ae2:	bf38      	it	cc
 8007ae4:	2204      	movcc	r2, #4
 8007ae6:	9201      	str	r2, [sp, #4]
 8007ae8:	9a02      	ldr	r2, [sp, #8]
 8007aea:	9303      	str	r3, [sp, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d80c      	bhi.n	8007b0a <__multiply+0x9e>
 8007af0:	2e00      	cmp	r6, #0
 8007af2:	dd03      	ble.n	8007afc <__multiply+0x90>
 8007af4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d05a      	beq.n	8007bb2 <__multiply+0x146>
 8007afc:	6106      	str	r6, [r0, #16]
 8007afe:	b005      	add	sp, #20
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	f843 2b04 	str.w	r2, [r3], #4
 8007b08:	e7d8      	b.n	8007abc <__multiply+0x50>
 8007b0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b0e:	f1ba 0f00 	cmp.w	sl, #0
 8007b12:	d024      	beq.n	8007b5e <__multiply+0xf2>
 8007b14:	f104 0e14 	add.w	lr, r4, #20
 8007b18:	46a9      	mov	r9, r5
 8007b1a:	f04f 0c00 	mov.w	ip, #0
 8007b1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b22:	f8d9 1000 	ldr.w	r1, [r9]
 8007b26:	fa1f fb82 	uxth.w	fp, r2
 8007b2a:	b289      	uxth	r1, r1
 8007b2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b34:	f8d9 2000 	ldr.w	r2, [r9]
 8007b38:	4461      	add	r1, ip
 8007b3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b46:	b289      	uxth	r1, r1
 8007b48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b4c:	4577      	cmp	r7, lr
 8007b4e:	f849 1b04 	str.w	r1, [r9], #4
 8007b52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b56:	d8e2      	bhi.n	8007b1e <__multiply+0xb2>
 8007b58:	9a01      	ldr	r2, [sp, #4]
 8007b5a:	f845 c002 	str.w	ip, [r5, r2]
 8007b5e:	9a03      	ldr	r2, [sp, #12]
 8007b60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b64:	3304      	adds	r3, #4
 8007b66:	f1b9 0f00 	cmp.w	r9, #0
 8007b6a:	d020      	beq.n	8007bae <__multiply+0x142>
 8007b6c:	6829      	ldr	r1, [r5, #0]
 8007b6e:	f104 0c14 	add.w	ip, r4, #20
 8007b72:	46ae      	mov	lr, r5
 8007b74:	f04f 0a00 	mov.w	sl, #0
 8007b78:	f8bc b000 	ldrh.w	fp, [ip]
 8007b7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b80:	fb09 220b 	mla	r2, r9, fp, r2
 8007b84:	4492      	add	sl, r2
 8007b86:	b289      	uxth	r1, r1
 8007b88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b8c:	f84e 1b04 	str.w	r1, [lr], #4
 8007b90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b94:	f8be 1000 	ldrh.w	r1, [lr]
 8007b98:	0c12      	lsrs	r2, r2, #16
 8007b9a:	fb09 1102 	mla	r1, r9, r2, r1
 8007b9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007ba2:	4567      	cmp	r7, ip
 8007ba4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ba8:	d8e6      	bhi.n	8007b78 <__multiply+0x10c>
 8007baa:	9a01      	ldr	r2, [sp, #4]
 8007bac:	50a9      	str	r1, [r5, r2]
 8007bae:	3504      	adds	r5, #4
 8007bb0:	e79a      	b.n	8007ae8 <__multiply+0x7c>
 8007bb2:	3e01      	subs	r6, #1
 8007bb4:	e79c      	b.n	8007af0 <__multiply+0x84>
 8007bb6:	bf00      	nop
 8007bb8:	08009520 	.word	0x08009520
 8007bbc:	080095ac 	.word	0x080095ac

08007bc0 <__pow5mult>:
 8007bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc4:	4615      	mov	r5, r2
 8007bc6:	f012 0203 	ands.w	r2, r2, #3
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	d007      	beq.n	8007be0 <__pow5mult+0x20>
 8007bd0:	4c25      	ldr	r4, [pc, #148]	; (8007c68 <__pow5mult+0xa8>)
 8007bd2:	3a01      	subs	r2, #1
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bda:	f7ff fe51 	bl	8007880 <__multadd>
 8007bde:	4607      	mov	r7, r0
 8007be0:	10ad      	asrs	r5, r5, #2
 8007be2:	d03d      	beq.n	8007c60 <__pow5mult+0xa0>
 8007be4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007be6:	b97c      	cbnz	r4, 8007c08 <__pow5mult+0x48>
 8007be8:	2010      	movs	r0, #16
 8007bea:	f7ff fdbf 	bl	800776c <malloc>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	6270      	str	r0, [r6, #36]	; 0x24
 8007bf2:	b928      	cbnz	r0, 8007c00 <__pow5mult+0x40>
 8007bf4:	4b1d      	ldr	r3, [pc, #116]	; (8007c6c <__pow5mult+0xac>)
 8007bf6:	481e      	ldr	r0, [pc, #120]	; (8007c70 <__pow5mult+0xb0>)
 8007bf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007bfc:	f000 fd2e 	bl	800865c <__assert_func>
 8007c00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c04:	6004      	str	r4, [r0, #0]
 8007c06:	60c4      	str	r4, [r0, #12]
 8007c08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c10:	b94c      	cbnz	r4, 8007c26 <__pow5mult+0x66>
 8007c12:	f240 2171 	movw	r1, #625	; 0x271
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff ff12 	bl	8007a40 <__i2b>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c22:	4604      	mov	r4, r0
 8007c24:	6003      	str	r3, [r0, #0]
 8007c26:	f04f 0900 	mov.w	r9, #0
 8007c2a:	07eb      	lsls	r3, r5, #31
 8007c2c:	d50a      	bpl.n	8007c44 <__pow5mult+0x84>
 8007c2e:	4639      	mov	r1, r7
 8007c30:	4622      	mov	r2, r4
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ff1a 	bl	8007a6c <__multiply>
 8007c38:	4639      	mov	r1, r7
 8007c3a:	4680      	mov	r8, r0
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff fdfd 	bl	800783c <_Bfree>
 8007c42:	4647      	mov	r7, r8
 8007c44:	106d      	asrs	r5, r5, #1
 8007c46:	d00b      	beq.n	8007c60 <__pow5mult+0xa0>
 8007c48:	6820      	ldr	r0, [r4, #0]
 8007c4a:	b938      	cbnz	r0, 8007c5c <__pow5mult+0x9c>
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4621      	mov	r1, r4
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7ff ff0b 	bl	8007a6c <__multiply>
 8007c56:	6020      	str	r0, [r4, #0]
 8007c58:	f8c0 9000 	str.w	r9, [r0]
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	e7e4      	b.n	8007c2a <__pow5mult+0x6a>
 8007c60:	4638      	mov	r0, r7
 8007c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c66:	bf00      	nop
 8007c68:	080096f8 	.word	0x080096f8
 8007c6c:	080094ae 	.word	0x080094ae
 8007c70:	080095ac 	.word	0x080095ac

08007c74 <__lshift>:
 8007c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	460c      	mov	r4, r1
 8007c7a:	6849      	ldr	r1, [r1, #4]
 8007c7c:	6923      	ldr	r3, [r4, #16]
 8007c7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c82:	68a3      	ldr	r3, [r4, #8]
 8007c84:	4607      	mov	r7, r0
 8007c86:	4691      	mov	r9, r2
 8007c88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c8c:	f108 0601 	add.w	r6, r8, #1
 8007c90:	42b3      	cmp	r3, r6
 8007c92:	db0b      	blt.n	8007cac <__lshift+0x38>
 8007c94:	4638      	mov	r0, r7
 8007c96:	f7ff fd91 	bl	80077bc <_Balloc>
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	b948      	cbnz	r0, 8007cb2 <__lshift+0x3e>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <__lshift+0xd8>)
 8007ca2:	482b      	ldr	r0, [pc, #172]	; (8007d50 <__lshift+0xdc>)
 8007ca4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ca8:	f000 fcd8 	bl	800865c <__assert_func>
 8007cac:	3101      	adds	r1, #1
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	e7ee      	b.n	8007c90 <__lshift+0x1c>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f100 0114 	add.w	r1, r0, #20
 8007cb8:	f100 0210 	add.w	r2, r0, #16
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	4553      	cmp	r3, sl
 8007cc0:	db37      	blt.n	8007d32 <__lshift+0xbe>
 8007cc2:	6920      	ldr	r0, [r4, #16]
 8007cc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cc8:	f104 0314 	add.w	r3, r4, #20
 8007ccc:	f019 091f 	ands.w	r9, r9, #31
 8007cd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007cd8:	d02f      	beq.n	8007d3a <__lshift+0xc6>
 8007cda:	f1c9 0e20 	rsb	lr, r9, #32
 8007cde:	468a      	mov	sl, r1
 8007ce0:	f04f 0c00 	mov.w	ip, #0
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	fa02 f209 	lsl.w	r2, r2, r9
 8007cea:	ea42 020c 	orr.w	r2, r2, ip
 8007cee:	f84a 2b04 	str.w	r2, [sl], #4
 8007cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cf6:	4298      	cmp	r0, r3
 8007cf8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007cfc:	d8f2      	bhi.n	8007ce4 <__lshift+0x70>
 8007cfe:	1b03      	subs	r3, r0, r4
 8007d00:	3b15      	subs	r3, #21
 8007d02:	f023 0303 	bic.w	r3, r3, #3
 8007d06:	3304      	adds	r3, #4
 8007d08:	f104 0215 	add.w	r2, r4, #21
 8007d0c:	4290      	cmp	r0, r2
 8007d0e:	bf38      	it	cc
 8007d10:	2304      	movcc	r3, #4
 8007d12:	f841 c003 	str.w	ip, [r1, r3]
 8007d16:	f1bc 0f00 	cmp.w	ip, #0
 8007d1a:	d001      	beq.n	8007d20 <__lshift+0xac>
 8007d1c:	f108 0602 	add.w	r6, r8, #2
 8007d20:	3e01      	subs	r6, #1
 8007d22:	4638      	mov	r0, r7
 8007d24:	612e      	str	r6, [r5, #16]
 8007d26:	4621      	mov	r1, r4
 8007d28:	f7ff fd88 	bl	800783c <_Bfree>
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d36:	3301      	adds	r3, #1
 8007d38:	e7c1      	b.n	8007cbe <__lshift+0x4a>
 8007d3a:	3904      	subs	r1, #4
 8007d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d44:	4298      	cmp	r0, r3
 8007d46:	d8f9      	bhi.n	8007d3c <__lshift+0xc8>
 8007d48:	e7ea      	b.n	8007d20 <__lshift+0xac>
 8007d4a:	bf00      	nop
 8007d4c:	08009520 	.word	0x08009520
 8007d50:	080095ac 	.word	0x080095ac

08007d54 <__mcmp>:
 8007d54:	b530      	push	{r4, r5, lr}
 8007d56:	6902      	ldr	r2, [r0, #16]
 8007d58:	690c      	ldr	r4, [r1, #16]
 8007d5a:	1b12      	subs	r2, r2, r4
 8007d5c:	d10e      	bne.n	8007d7c <__mcmp+0x28>
 8007d5e:	f100 0314 	add.w	r3, r0, #20
 8007d62:	3114      	adds	r1, #20
 8007d64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d74:	42a5      	cmp	r5, r4
 8007d76:	d003      	beq.n	8007d80 <__mcmp+0x2c>
 8007d78:	d305      	bcc.n	8007d86 <__mcmp+0x32>
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	4610      	mov	r0, r2
 8007d7e:	bd30      	pop	{r4, r5, pc}
 8007d80:	4283      	cmp	r3, r0
 8007d82:	d3f3      	bcc.n	8007d6c <__mcmp+0x18>
 8007d84:	e7fa      	b.n	8007d7c <__mcmp+0x28>
 8007d86:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8a:	e7f7      	b.n	8007d7c <__mcmp+0x28>

08007d8c <__mdiff>:
 8007d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	4606      	mov	r6, r0
 8007d94:	4611      	mov	r1, r2
 8007d96:	4620      	mov	r0, r4
 8007d98:	4690      	mov	r8, r2
 8007d9a:	f7ff ffdb 	bl	8007d54 <__mcmp>
 8007d9e:	1e05      	subs	r5, r0, #0
 8007da0:	d110      	bne.n	8007dc4 <__mdiff+0x38>
 8007da2:	4629      	mov	r1, r5
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff fd09 	bl	80077bc <_Balloc>
 8007daa:	b930      	cbnz	r0, 8007dba <__mdiff+0x2e>
 8007dac:	4b3a      	ldr	r3, [pc, #232]	; (8007e98 <__mdiff+0x10c>)
 8007dae:	4602      	mov	r2, r0
 8007db0:	f240 2132 	movw	r1, #562	; 0x232
 8007db4:	4839      	ldr	r0, [pc, #228]	; (8007e9c <__mdiff+0x110>)
 8007db6:	f000 fc51 	bl	800865c <__assert_func>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc4:	bfa4      	itt	ge
 8007dc6:	4643      	movge	r3, r8
 8007dc8:	46a0      	movge	r8, r4
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dd0:	bfa6      	itte	ge
 8007dd2:	461c      	movge	r4, r3
 8007dd4:	2500      	movge	r5, #0
 8007dd6:	2501      	movlt	r5, #1
 8007dd8:	f7ff fcf0 	bl	80077bc <_Balloc>
 8007ddc:	b920      	cbnz	r0, 8007de8 <__mdiff+0x5c>
 8007dde:	4b2e      	ldr	r3, [pc, #184]	; (8007e98 <__mdiff+0x10c>)
 8007de0:	4602      	mov	r2, r0
 8007de2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007de6:	e7e5      	b.n	8007db4 <__mdiff+0x28>
 8007de8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007dec:	6926      	ldr	r6, [r4, #16]
 8007dee:	60c5      	str	r5, [r0, #12]
 8007df0:	f104 0914 	add.w	r9, r4, #20
 8007df4:	f108 0514 	add.w	r5, r8, #20
 8007df8:	f100 0e14 	add.w	lr, r0, #20
 8007dfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e04:	f108 0210 	add.w	r2, r8, #16
 8007e08:	46f2      	mov	sl, lr
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e14:	fa1f f883 	uxth.w	r8, r3
 8007e18:	fa11 f18b 	uxtah	r1, r1, fp
 8007e1c:	0c1b      	lsrs	r3, r3, #16
 8007e1e:	eba1 0808 	sub.w	r8, r1, r8
 8007e22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e2a:	fa1f f888 	uxth.w	r8, r8
 8007e2e:	1419      	asrs	r1, r3, #16
 8007e30:	454e      	cmp	r6, r9
 8007e32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e36:	f84a 3b04 	str.w	r3, [sl], #4
 8007e3a:	d8e7      	bhi.n	8007e0c <__mdiff+0x80>
 8007e3c:	1b33      	subs	r3, r6, r4
 8007e3e:	3b15      	subs	r3, #21
 8007e40:	f023 0303 	bic.w	r3, r3, #3
 8007e44:	3304      	adds	r3, #4
 8007e46:	3415      	adds	r4, #21
 8007e48:	42a6      	cmp	r6, r4
 8007e4a:	bf38      	it	cc
 8007e4c:	2304      	movcc	r3, #4
 8007e4e:	441d      	add	r5, r3
 8007e50:	4473      	add	r3, lr
 8007e52:	469e      	mov	lr, r3
 8007e54:	462e      	mov	r6, r5
 8007e56:	4566      	cmp	r6, ip
 8007e58:	d30e      	bcc.n	8007e78 <__mdiff+0xec>
 8007e5a:	f10c 0203 	add.w	r2, ip, #3
 8007e5e:	1b52      	subs	r2, r2, r5
 8007e60:	f022 0203 	bic.w	r2, r2, #3
 8007e64:	3d03      	subs	r5, #3
 8007e66:	45ac      	cmp	ip, r5
 8007e68:	bf38      	it	cc
 8007e6a:	2200      	movcc	r2, #0
 8007e6c:	441a      	add	r2, r3
 8007e6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007e72:	b17b      	cbz	r3, 8007e94 <__mdiff+0x108>
 8007e74:	6107      	str	r7, [r0, #16]
 8007e76:	e7a3      	b.n	8007dc0 <__mdiff+0x34>
 8007e78:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e7c:	fa11 f288 	uxtah	r2, r1, r8
 8007e80:	1414      	asrs	r4, r2, #16
 8007e82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e86:	b292      	uxth	r2, r2
 8007e88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e8c:	f84e 2b04 	str.w	r2, [lr], #4
 8007e90:	1421      	asrs	r1, r4, #16
 8007e92:	e7e0      	b.n	8007e56 <__mdiff+0xca>
 8007e94:	3f01      	subs	r7, #1
 8007e96:	e7ea      	b.n	8007e6e <__mdiff+0xe2>
 8007e98:	08009520 	.word	0x08009520
 8007e9c:	080095ac 	.word	0x080095ac

08007ea0 <__ulp>:
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	ed8d 0b00 	vstr	d0, [sp]
 8007ea6:	9b01      	ldr	r3, [sp, #4]
 8007ea8:	4912      	ldr	r1, [pc, #72]	; (8007ef4 <__ulp+0x54>)
 8007eaa:	4019      	ands	r1, r3
 8007eac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	dd05      	ble.n	8007ec0 <__ulp+0x20>
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	ec43 2b10 	vmov	d0, r2, r3
 8007ebc:	b002      	add	sp, #8
 8007ebe:	4770      	bx	lr
 8007ec0:	4249      	negs	r1, r1
 8007ec2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007ec6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	da04      	bge.n	8007ede <__ulp+0x3e>
 8007ed4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007ed8:	fa41 f300 	asr.w	r3, r1, r0
 8007edc:	e7ec      	b.n	8007eb8 <__ulp+0x18>
 8007ede:	f1a0 0114 	sub.w	r1, r0, #20
 8007ee2:	291e      	cmp	r1, #30
 8007ee4:	bfda      	itte	le
 8007ee6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007eea:	fa20 f101 	lsrle.w	r1, r0, r1
 8007eee:	2101      	movgt	r1, #1
 8007ef0:	460a      	mov	r2, r1
 8007ef2:	e7e1      	b.n	8007eb8 <__ulp+0x18>
 8007ef4:	7ff00000 	.word	0x7ff00000

08007ef8 <__b2d>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	6905      	ldr	r5, [r0, #16]
 8007efc:	f100 0714 	add.w	r7, r0, #20
 8007f00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007f04:	1f2e      	subs	r6, r5, #4
 8007f06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f7ff fd48 	bl	80079a0 <__hi0bits>
 8007f10:	f1c0 0320 	rsb	r3, r0, #32
 8007f14:	280a      	cmp	r0, #10
 8007f16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007f94 <__b2d+0x9c>
 8007f1a:	600b      	str	r3, [r1, #0]
 8007f1c:	dc14      	bgt.n	8007f48 <__b2d+0x50>
 8007f1e:	f1c0 0e0b 	rsb	lr, r0, #11
 8007f22:	fa24 f10e 	lsr.w	r1, r4, lr
 8007f26:	42b7      	cmp	r7, r6
 8007f28:	ea41 030c 	orr.w	r3, r1, ip
 8007f2c:	bf34      	ite	cc
 8007f2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f32:	2100      	movcs	r1, #0
 8007f34:	3015      	adds	r0, #21
 8007f36:	fa04 f000 	lsl.w	r0, r4, r0
 8007f3a:	fa21 f10e 	lsr.w	r1, r1, lr
 8007f3e:	ea40 0201 	orr.w	r2, r0, r1
 8007f42:	ec43 2b10 	vmov	d0, r2, r3
 8007f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f48:	42b7      	cmp	r7, r6
 8007f4a:	bf3a      	itte	cc
 8007f4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007f50:	f1a5 0608 	subcc.w	r6, r5, #8
 8007f54:	2100      	movcs	r1, #0
 8007f56:	380b      	subs	r0, #11
 8007f58:	d017      	beq.n	8007f8a <__b2d+0x92>
 8007f5a:	f1c0 0c20 	rsb	ip, r0, #32
 8007f5e:	fa04 f500 	lsl.w	r5, r4, r0
 8007f62:	42be      	cmp	r6, r7
 8007f64:	fa21 f40c 	lsr.w	r4, r1, ip
 8007f68:	ea45 0504 	orr.w	r5, r5, r4
 8007f6c:	bf8c      	ite	hi
 8007f6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007f72:	2400      	movls	r4, #0
 8007f74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007f78:	fa01 f000 	lsl.w	r0, r1, r0
 8007f7c:	fa24 f40c 	lsr.w	r4, r4, ip
 8007f80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f84:	ea40 0204 	orr.w	r2, r0, r4
 8007f88:	e7db      	b.n	8007f42 <__b2d+0x4a>
 8007f8a:	ea44 030c 	orr.w	r3, r4, ip
 8007f8e:	460a      	mov	r2, r1
 8007f90:	e7d7      	b.n	8007f42 <__b2d+0x4a>
 8007f92:	bf00      	nop
 8007f94:	3ff00000 	.word	0x3ff00000

08007f98 <__d2b>:
 8007f98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	ec57 6b10 	vmov	r6, r7, d0
 8007fa4:	4690      	mov	r8, r2
 8007fa6:	f7ff fc09 	bl	80077bc <_Balloc>
 8007faa:	4604      	mov	r4, r0
 8007fac:	b930      	cbnz	r0, 8007fbc <__d2b+0x24>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b25      	ldr	r3, [pc, #148]	; (8008048 <__d2b+0xb0>)
 8007fb2:	4826      	ldr	r0, [pc, #152]	; (800804c <__d2b+0xb4>)
 8007fb4:	f240 310a 	movw	r1, #778	; 0x30a
 8007fb8:	f000 fb50 	bl	800865c <__assert_func>
 8007fbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007fc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fc4:	bb35      	cbnz	r5, 8008014 <__d2b+0x7c>
 8007fc6:	2e00      	cmp	r6, #0
 8007fc8:	9301      	str	r3, [sp, #4]
 8007fca:	d028      	beq.n	800801e <__d2b+0x86>
 8007fcc:	4668      	mov	r0, sp
 8007fce:	9600      	str	r6, [sp, #0]
 8007fd0:	f7ff fd06 	bl	80079e0 <__lo0bits>
 8007fd4:	9900      	ldr	r1, [sp, #0]
 8007fd6:	b300      	cbz	r0, 800801a <__d2b+0x82>
 8007fd8:	9a01      	ldr	r2, [sp, #4]
 8007fda:	f1c0 0320 	rsb	r3, r0, #32
 8007fde:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	40c2      	lsrs	r2, r0
 8007fe6:	6163      	str	r3, [r4, #20]
 8007fe8:	9201      	str	r2, [sp, #4]
 8007fea:	9b01      	ldr	r3, [sp, #4]
 8007fec:	61a3      	str	r3, [r4, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf14      	ite	ne
 8007ff2:	2202      	movne	r2, #2
 8007ff4:	2201      	moveq	r2, #1
 8007ff6:	6122      	str	r2, [r4, #16]
 8007ff8:	b1d5      	cbz	r5, 8008030 <__d2b+0x98>
 8007ffa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ffe:	4405      	add	r5, r0
 8008000:	f8c9 5000 	str.w	r5, [r9]
 8008004:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008008:	f8c8 0000 	str.w	r0, [r8]
 800800c:	4620      	mov	r0, r4
 800800e:	b003      	add	sp, #12
 8008010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008018:	e7d5      	b.n	8007fc6 <__d2b+0x2e>
 800801a:	6161      	str	r1, [r4, #20]
 800801c:	e7e5      	b.n	8007fea <__d2b+0x52>
 800801e:	a801      	add	r0, sp, #4
 8008020:	f7ff fcde 	bl	80079e0 <__lo0bits>
 8008024:	9b01      	ldr	r3, [sp, #4]
 8008026:	6163      	str	r3, [r4, #20]
 8008028:	2201      	movs	r2, #1
 800802a:	6122      	str	r2, [r4, #16]
 800802c:	3020      	adds	r0, #32
 800802e:	e7e3      	b.n	8007ff8 <__d2b+0x60>
 8008030:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008034:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008038:	f8c9 0000 	str.w	r0, [r9]
 800803c:	6918      	ldr	r0, [r3, #16]
 800803e:	f7ff fcaf 	bl	80079a0 <__hi0bits>
 8008042:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008046:	e7df      	b.n	8008008 <__d2b+0x70>
 8008048:	08009520 	.word	0x08009520
 800804c:	080095ac 	.word	0x080095ac

08008050 <__ratio>:
 8008050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	4688      	mov	r8, r1
 8008056:	4669      	mov	r1, sp
 8008058:	4681      	mov	r9, r0
 800805a:	f7ff ff4d 	bl	8007ef8 <__b2d>
 800805e:	a901      	add	r1, sp, #4
 8008060:	4640      	mov	r0, r8
 8008062:	ec55 4b10 	vmov	r4, r5, d0
 8008066:	f7ff ff47 	bl	8007ef8 <__b2d>
 800806a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800806e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008072:	eba3 0c02 	sub.w	ip, r3, r2
 8008076:	e9dd 3200 	ldrd	r3, r2, [sp]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008080:	ec51 0b10 	vmov	r0, r1, d0
 8008084:	2b00      	cmp	r3, #0
 8008086:	bfd6      	itet	le
 8008088:	460a      	movle	r2, r1
 800808a:	462a      	movgt	r2, r5
 800808c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008090:	468b      	mov	fp, r1
 8008092:	462f      	mov	r7, r5
 8008094:	bfd4      	ite	le
 8008096:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800809a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800809e:	4620      	mov	r0, r4
 80080a0:	ee10 2a10 	vmov	r2, s0
 80080a4:	465b      	mov	r3, fp
 80080a6:	4639      	mov	r1, r7
 80080a8:	f7f8 fbd8 	bl	800085c <__aeabi_ddiv>
 80080ac:	ec41 0b10 	vmov	d0, r0, r1
 80080b0:	b003      	add	sp, #12
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080b6 <__copybits>:
 80080b6:	3901      	subs	r1, #1
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	1149      	asrs	r1, r1, #5
 80080bc:	6914      	ldr	r4, [r2, #16]
 80080be:	3101      	adds	r1, #1
 80080c0:	f102 0314 	add.w	r3, r2, #20
 80080c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080cc:	1f05      	subs	r5, r0, #4
 80080ce:	42a3      	cmp	r3, r4
 80080d0:	d30c      	bcc.n	80080ec <__copybits+0x36>
 80080d2:	1aa3      	subs	r3, r4, r2
 80080d4:	3b11      	subs	r3, #17
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	3211      	adds	r2, #17
 80080dc:	42a2      	cmp	r2, r4
 80080de:	bf88      	it	hi
 80080e0:	2300      	movhi	r3, #0
 80080e2:	4418      	add	r0, r3
 80080e4:	2300      	movs	r3, #0
 80080e6:	4288      	cmp	r0, r1
 80080e8:	d305      	bcc.n	80080f6 <__copybits+0x40>
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80080f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80080f4:	e7eb      	b.n	80080ce <__copybits+0x18>
 80080f6:	f840 3b04 	str.w	r3, [r0], #4
 80080fa:	e7f4      	b.n	80080e6 <__copybits+0x30>

080080fc <__any_on>:
 80080fc:	f100 0214 	add.w	r2, r0, #20
 8008100:	6900      	ldr	r0, [r0, #16]
 8008102:	114b      	asrs	r3, r1, #5
 8008104:	4298      	cmp	r0, r3
 8008106:	b510      	push	{r4, lr}
 8008108:	db11      	blt.n	800812e <__any_on+0x32>
 800810a:	dd0a      	ble.n	8008122 <__any_on+0x26>
 800810c:	f011 011f 	ands.w	r1, r1, #31
 8008110:	d007      	beq.n	8008122 <__any_on+0x26>
 8008112:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008116:	fa24 f001 	lsr.w	r0, r4, r1
 800811a:	fa00 f101 	lsl.w	r1, r0, r1
 800811e:	428c      	cmp	r4, r1
 8008120:	d10b      	bne.n	800813a <__any_on+0x3e>
 8008122:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008126:	4293      	cmp	r3, r2
 8008128:	d803      	bhi.n	8008132 <__any_on+0x36>
 800812a:	2000      	movs	r0, #0
 800812c:	bd10      	pop	{r4, pc}
 800812e:	4603      	mov	r3, r0
 8008130:	e7f7      	b.n	8008122 <__any_on+0x26>
 8008132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008136:	2900      	cmp	r1, #0
 8008138:	d0f5      	beq.n	8008126 <__any_on+0x2a>
 800813a:	2001      	movs	r0, #1
 800813c:	e7f6      	b.n	800812c <__any_on+0x30>

0800813e <_calloc_r>:
 800813e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008140:	fba1 2402 	umull	r2, r4, r1, r2
 8008144:	b94c      	cbnz	r4, 800815a <_calloc_r+0x1c>
 8008146:	4611      	mov	r1, r2
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	f000 f87b 	bl	8008244 <_malloc_r>
 800814e:	9a01      	ldr	r2, [sp, #4]
 8008150:	4605      	mov	r5, r0
 8008152:	b930      	cbnz	r0, 8008162 <_calloc_r+0x24>
 8008154:	4628      	mov	r0, r5
 8008156:	b003      	add	sp, #12
 8008158:	bd30      	pop	{r4, r5, pc}
 800815a:	220c      	movs	r2, #12
 800815c:	6002      	str	r2, [r0, #0]
 800815e:	2500      	movs	r5, #0
 8008160:	e7f8      	b.n	8008154 <_calloc_r+0x16>
 8008162:	4621      	mov	r1, r4
 8008164:	f7fc fbbe 	bl	80048e4 <memset>
 8008168:	e7f4      	b.n	8008154 <_calloc_r+0x16>
	...

0800816c <_free_r>:
 800816c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800816e:	2900      	cmp	r1, #0
 8008170:	d044      	beq.n	80081fc <_free_r+0x90>
 8008172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008176:	9001      	str	r0, [sp, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	f1a1 0404 	sub.w	r4, r1, #4
 800817e:	bfb8      	it	lt
 8008180:	18e4      	addlt	r4, r4, r3
 8008182:	f000 fab5 	bl	80086f0 <__malloc_lock>
 8008186:	4a1e      	ldr	r2, [pc, #120]	; (8008200 <_free_r+0x94>)
 8008188:	9801      	ldr	r0, [sp, #4]
 800818a:	6813      	ldr	r3, [r2, #0]
 800818c:	b933      	cbnz	r3, 800819c <_free_r+0x30>
 800818e:	6063      	str	r3, [r4, #4]
 8008190:	6014      	str	r4, [r2, #0]
 8008192:	b003      	add	sp, #12
 8008194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008198:	f000 bab0 	b.w	80086fc <__malloc_unlock>
 800819c:	42a3      	cmp	r3, r4
 800819e:	d908      	bls.n	80081b2 <_free_r+0x46>
 80081a0:	6825      	ldr	r5, [r4, #0]
 80081a2:	1961      	adds	r1, r4, r5
 80081a4:	428b      	cmp	r3, r1
 80081a6:	bf01      	itttt	eq
 80081a8:	6819      	ldreq	r1, [r3, #0]
 80081aa:	685b      	ldreq	r3, [r3, #4]
 80081ac:	1949      	addeq	r1, r1, r5
 80081ae:	6021      	streq	r1, [r4, #0]
 80081b0:	e7ed      	b.n	800818e <_free_r+0x22>
 80081b2:	461a      	mov	r2, r3
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	b10b      	cbz	r3, 80081bc <_free_r+0x50>
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d9fa      	bls.n	80081b2 <_free_r+0x46>
 80081bc:	6811      	ldr	r1, [r2, #0]
 80081be:	1855      	adds	r5, r2, r1
 80081c0:	42a5      	cmp	r5, r4
 80081c2:	d10b      	bne.n	80081dc <_free_r+0x70>
 80081c4:	6824      	ldr	r4, [r4, #0]
 80081c6:	4421      	add	r1, r4
 80081c8:	1854      	adds	r4, r2, r1
 80081ca:	42a3      	cmp	r3, r4
 80081cc:	6011      	str	r1, [r2, #0]
 80081ce:	d1e0      	bne.n	8008192 <_free_r+0x26>
 80081d0:	681c      	ldr	r4, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	6053      	str	r3, [r2, #4]
 80081d6:	4421      	add	r1, r4
 80081d8:	6011      	str	r1, [r2, #0]
 80081da:	e7da      	b.n	8008192 <_free_r+0x26>
 80081dc:	d902      	bls.n	80081e4 <_free_r+0x78>
 80081de:	230c      	movs	r3, #12
 80081e0:	6003      	str	r3, [r0, #0]
 80081e2:	e7d6      	b.n	8008192 <_free_r+0x26>
 80081e4:	6825      	ldr	r5, [r4, #0]
 80081e6:	1961      	adds	r1, r4, r5
 80081e8:	428b      	cmp	r3, r1
 80081ea:	bf04      	itt	eq
 80081ec:	6819      	ldreq	r1, [r3, #0]
 80081ee:	685b      	ldreq	r3, [r3, #4]
 80081f0:	6063      	str	r3, [r4, #4]
 80081f2:	bf04      	itt	eq
 80081f4:	1949      	addeq	r1, r1, r5
 80081f6:	6021      	streq	r1, [r4, #0]
 80081f8:	6054      	str	r4, [r2, #4]
 80081fa:	e7ca      	b.n	8008192 <_free_r+0x26>
 80081fc:	b003      	add	sp, #12
 80081fe:	bd30      	pop	{r4, r5, pc}
 8008200:	20000ba0 	.word	0x20000ba0

08008204 <sbrk_aligned>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	4e0e      	ldr	r6, [pc, #56]	; (8008240 <sbrk_aligned+0x3c>)
 8008208:	460c      	mov	r4, r1
 800820a:	6831      	ldr	r1, [r6, #0]
 800820c:	4605      	mov	r5, r0
 800820e:	b911      	cbnz	r1, 8008216 <sbrk_aligned+0x12>
 8008210:	f000 f9f2 	bl	80085f8 <_sbrk_r>
 8008214:	6030      	str	r0, [r6, #0]
 8008216:	4621      	mov	r1, r4
 8008218:	4628      	mov	r0, r5
 800821a:	f000 f9ed 	bl	80085f8 <_sbrk_r>
 800821e:	1c43      	adds	r3, r0, #1
 8008220:	d00a      	beq.n	8008238 <sbrk_aligned+0x34>
 8008222:	1cc4      	adds	r4, r0, #3
 8008224:	f024 0403 	bic.w	r4, r4, #3
 8008228:	42a0      	cmp	r0, r4
 800822a:	d007      	beq.n	800823c <sbrk_aligned+0x38>
 800822c:	1a21      	subs	r1, r4, r0
 800822e:	4628      	mov	r0, r5
 8008230:	f000 f9e2 	bl	80085f8 <_sbrk_r>
 8008234:	3001      	adds	r0, #1
 8008236:	d101      	bne.n	800823c <sbrk_aligned+0x38>
 8008238:	f04f 34ff 	mov.w	r4, #4294967295
 800823c:	4620      	mov	r0, r4
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	20000ba4 	.word	0x20000ba4

08008244 <_malloc_r>:
 8008244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008248:	1ccd      	adds	r5, r1, #3
 800824a:	f025 0503 	bic.w	r5, r5, #3
 800824e:	3508      	adds	r5, #8
 8008250:	2d0c      	cmp	r5, #12
 8008252:	bf38      	it	cc
 8008254:	250c      	movcc	r5, #12
 8008256:	2d00      	cmp	r5, #0
 8008258:	4607      	mov	r7, r0
 800825a:	db01      	blt.n	8008260 <_malloc_r+0x1c>
 800825c:	42a9      	cmp	r1, r5
 800825e:	d905      	bls.n	800826c <_malloc_r+0x28>
 8008260:	230c      	movs	r3, #12
 8008262:	603b      	str	r3, [r7, #0]
 8008264:	2600      	movs	r6, #0
 8008266:	4630      	mov	r0, r6
 8008268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826c:	4e2e      	ldr	r6, [pc, #184]	; (8008328 <_malloc_r+0xe4>)
 800826e:	f000 fa3f 	bl	80086f0 <__malloc_lock>
 8008272:	6833      	ldr	r3, [r6, #0]
 8008274:	461c      	mov	r4, r3
 8008276:	bb34      	cbnz	r4, 80082c6 <_malloc_r+0x82>
 8008278:	4629      	mov	r1, r5
 800827a:	4638      	mov	r0, r7
 800827c:	f7ff ffc2 	bl	8008204 <sbrk_aligned>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	4604      	mov	r4, r0
 8008284:	d14d      	bne.n	8008322 <_malloc_r+0xde>
 8008286:	6834      	ldr	r4, [r6, #0]
 8008288:	4626      	mov	r6, r4
 800828a:	2e00      	cmp	r6, #0
 800828c:	d140      	bne.n	8008310 <_malloc_r+0xcc>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	4631      	mov	r1, r6
 8008292:	4638      	mov	r0, r7
 8008294:	eb04 0803 	add.w	r8, r4, r3
 8008298:	f000 f9ae 	bl	80085f8 <_sbrk_r>
 800829c:	4580      	cmp	r8, r0
 800829e:	d13a      	bne.n	8008316 <_malloc_r+0xd2>
 80082a0:	6821      	ldr	r1, [r4, #0]
 80082a2:	3503      	adds	r5, #3
 80082a4:	1a6d      	subs	r5, r5, r1
 80082a6:	f025 0503 	bic.w	r5, r5, #3
 80082aa:	3508      	adds	r5, #8
 80082ac:	2d0c      	cmp	r5, #12
 80082ae:	bf38      	it	cc
 80082b0:	250c      	movcc	r5, #12
 80082b2:	4629      	mov	r1, r5
 80082b4:	4638      	mov	r0, r7
 80082b6:	f7ff ffa5 	bl	8008204 <sbrk_aligned>
 80082ba:	3001      	adds	r0, #1
 80082bc:	d02b      	beq.n	8008316 <_malloc_r+0xd2>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	442b      	add	r3, r5
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	e00e      	b.n	80082e4 <_malloc_r+0xa0>
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	1b52      	subs	r2, r2, r5
 80082ca:	d41e      	bmi.n	800830a <_malloc_r+0xc6>
 80082cc:	2a0b      	cmp	r2, #11
 80082ce:	d916      	bls.n	80082fe <_malloc_r+0xba>
 80082d0:	1961      	adds	r1, r4, r5
 80082d2:	42a3      	cmp	r3, r4
 80082d4:	6025      	str	r5, [r4, #0]
 80082d6:	bf18      	it	ne
 80082d8:	6059      	strne	r1, [r3, #4]
 80082da:	6863      	ldr	r3, [r4, #4]
 80082dc:	bf08      	it	eq
 80082de:	6031      	streq	r1, [r6, #0]
 80082e0:	5162      	str	r2, [r4, r5]
 80082e2:	604b      	str	r3, [r1, #4]
 80082e4:	4638      	mov	r0, r7
 80082e6:	f104 060b 	add.w	r6, r4, #11
 80082ea:	f000 fa07 	bl	80086fc <__malloc_unlock>
 80082ee:	f026 0607 	bic.w	r6, r6, #7
 80082f2:	1d23      	adds	r3, r4, #4
 80082f4:	1af2      	subs	r2, r6, r3
 80082f6:	d0b6      	beq.n	8008266 <_malloc_r+0x22>
 80082f8:	1b9b      	subs	r3, r3, r6
 80082fa:	50a3      	str	r3, [r4, r2]
 80082fc:	e7b3      	b.n	8008266 <_malloc_r+0x22>
 80082fe:	6862      	ldr	r2, [r4, #4]
 8008300:	42a3      	cmp	r3, r4
 8008302:	bf0c      	ite	eq
 8008304:	6032      	streq	r2, [r6, #0]
 8008306:	605a      	strne	r2, [r3, #4]
 8008308:	e7ec      	b.n	80082e4 <_malloc_r+0xa0>
 800830a:	4623      	mov	r3, r4
 800830c:	6864      	ldr	r4, [r4, #4]
 800830e:	e7b2      	b.n	8008276 <_malloc_r+0x32>
 8008310:	4634      	mov	r4, r6
 8008312:	6876      	ldr	r6, [r6, #4]
 8008314:	e7b9      	b.n	800828a <_malloc_r+0x46>
 8008316:	230c      	movs	r3, #12
 8008318:	603b      	str	r3, [r7, #0]
 800831a:	4638      	mov	r0, r7
 800831c:	f000 f9ee 	bl	80086fc <__malloc_unlock>
 8008320:	e7a1      	b.n	8008266 <_malloc_r+0x22>
 8008322:	6025      	str	r5, [r4, #0]
 8008324:	e7de      	b.n	80082e4 <_malloc_r+0xa0>
 8008326:	bf00      	nop
 8008328:	20000ba0 	.word	0x20000ba0

0800832c <__ssputs_r>:
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	688e      	ldr	r6, [r1, #8]
 8008332:	429e      	cmp	r6, r3
 8008334:	4682      	mov	sl, r0
 8008336:	460c      	mov	r4, r1
 8008338:	4690      	mov	r8, r2
 800833a:	461f      	mov	r7, r3
 800833c:	d838      	bhi.n	80083b0 <__ssputs_r+0x84>
 800833e:	898a      	ldrh	r2, [r1, #12]
 8008340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008344:	d032      	beq.n	80083ac <__ssputs_r+0x80>
 8008346:	6825      	ldr	r5, [r4, #0]
 8008348:	6909      	ldr	r1, [r1, #16]
 800834a:	eba5 0901 	sub.w	r9, r5, r1
 800834e:	6965      	ldr	r5, [r4, #20]
 8008350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008358:	3301      	adds	r3, #1
 800835a:	444b      	add	r3, r9
 800835c:	106d      	asrs	r5, r5, #1
 800835e:	429d      	cmp	r5, r3
 8008360:	bf38      	it	cc
 8008362:	461d      	movcc	r5, r3
 8008364:	0553      	lsls	r3, r2, #21
 8008366:	d531      	bpl.n	80083cc <__ssputs_r+0xa0>
 8008368:	4629      	mov	r1, r5
 800836a:	f7ff ff6b 	bl	8008244 <_malloc_r>
 800836e:	4606      	mov	r6, r0
 8008370:	b950      	cbnz	r0, 8008388 <__ssputs_r+0x5c>
 8008372:	230c      	movs	r3, #12
 8008374:	f8ca 3000 	str.w	r3, [sl]
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008388:	6921      	ldr	r1, [r4, #16]
 800838a:	464a      	mov	r2, r9
 800838c:	f7ff fa08 	bl	80077a0 <memcpy>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	6126      	str	r6, [r4, #16]
 800839e:	6165      	str	r5, [r4, #20]
 80083a0:	444e      	add	r6, r9
 80083a2:	eba5 0509 	sub.w	r5, r5, r9
 80083a6:	6026      	str	r6, [r4, #0]
 80083a8:	60a5      	str	r5, [r4, #8]
 80083aa:	463e      	mov	r6, r7
 80083ac:	42be      	cmp	r6, r7
 80083ae:	d900      	bls.n	80083b2 <__ssputs_r+0x86>
 80083b0:	463e      	mov	r6, r7
 80083b2:	6820      	ldr	r0, [r4, #0]
 80083b4:	4632      	mov	r2, r6
 80083b6:	4641      	mov	r1, r8
 80083b8:	f000 f980 	bl	80086bc <memmove>
 80083bc:	68a3      	ldr	r3, [r4, #8]
 80083be:	1b9b      	subs	r3, r3, r6
 80083c0:	60a3      	str	r3, [r4, #8]
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	4433      	add	r3, r6
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	2000      	movs	r0, #0
 80083ca:	e7db      	b.n	8008384 <__ssputs_r+0x58>
 80083cc:	462a      	mov	r2, r5
 80083ce:	f000 f99b 	bl	8008708 <_realloc_r>
 80083d2:	4606      	mov	r6, r0
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d1e1      	bne.n	800839c <__ssputs_r+0x70>
 80083d8:	6921      	ldr	r1, [r4, #16]
 80083da:	4650      	mov	r0, sl
 80083dc:	f7ff fec6 	bl	800816c <_free_r>
 80083e0:	e7c7      	b.n	8008372 <__ssputs_r+0x46>
	...

080083e4 <_svfiprintf_r>:
 80083e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	4698      	mov	r8, r3
 80083ea:	898b      	ldrh	r3, [r1, #12]
 80083ec:	061b      	lsls	r3, r3, #24
 80083ee:	b09d      	sub	sp, #116	; 0x74
 80083f0:	4607      	mov	r7, r0
 80083f2:	460d      	mov	r5, r1
 80083f4:	4614      	mov	r4, r2
 80083f6:	d50e      	bpl.n	8008416 <_svfiprintf_r+0x32>
 80083f8:	690b      	ldr	r3, [r1, #16]
 80083fa:	b963      	cbnz	r3, 8008416 <_svfiprintf_r+0x32>
 80083fc:	2140      	movs	r1, #64	; 0x40
 80083fe:	f7ff ff21 	bl	8008244 <_malloc_r>
 8008402:	6028      	str	r0, [r5, #0]
 8008404:	6128      	str	r0, [r5, #16]
 8008406:	b920      	cbnz	r0, 8008412 <_svfiprintf_r+0x2e>
 8008408:	230c      	movs	r3, #12
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e0d1      	b.n	80085b6 <_svfiprintf_r+0x1d2>
 8008412:	2340      	movs	r3, #64	; 0x40
 8008414:	616b      	str	r3, [r5, #20]
 8008416:	2300      	movs	r3, #0
 8008418:	9309      	str	r3, [sp, #36]	; 0x24
 800841a:	2320      	movs	r3, #32
 800841c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008420:	f8cd 800c 	str.w	r8, [sp, #12]
 8008424:	2330      	movs	r3, #48	; 0x30
 8008426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085d0 <_svfiprintf_r+0x1ec>
 800842a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800842e:	f04f 0901 	mov.w	r9, #1
 8008432:	4623      	mov	r3, r4
 8008434:	469a      	mov	sl, r3
 8008436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800843a:	b10a      	cbz	r2, 8008440 <_svfiprintf_r+0x5c>
 800843c:	2a25      	cmp	r2, #37	; 0x25
 800843e:	d1f9      	bne.n	8008434 <_svfiprintf_r+0x50>
 8008440:	ebba 0b04 	subs.w	fp, sl, r4
 8008444:	d00b      	beq.n	800845e <_svfiprintf_r+0x7a>
 8008446:	465b      	mov	r3, fp
 8008448:	4622      	mov	r2, r4
 800844a:	4629      	mov	r1, r5
 800844c:	4638      	mov	r0, r7
 800844e:	f7ff ff6d 	bl	800832c <__ssputs_r>
 8008452:	3001      	adds	r0, #1
 8008454:	f000 80aa 	beq.w	80085ac <_svfiprintf_r+0x1c8>
 8008458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800845a:	445a      	add	r2, fp
 800845c:	9209      	str	r2, [sp, #36]	; 0x24
 800845e:	f89a 3000 	ldrb.w	r3, [sl]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 80a2 	beq.w	80085ac <_svfiprintf_r+0x1c8>
 8008468:	2300      	movs	r3, #0
 800846a:	f04f 32ff 	mov.w	r2, #4294967295
 800846e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008472:	f10a 0a01 	add.w	sl, sl, #1
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	9307      	str	r3, [sp, #28]
 800847a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800847e:	931a      	str	r3, [sp, #104]	; 0x68
 8008480:	4654      	mov	r4, sl
 8008482:	2205      	movs	r2, #5
 8008484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008488:	4851      	ldr	r0, [pc, #324]	; (80085d0 <_svfiprintf_r+0x1ec>)
 800848a:	f7f7 feb1 	bl	80001f0 <memchr>
 800848e:	9a04      	ldr	r2, [sp, #16]
 8008490:	b9d8      	cbnz	r0, 80084ca <_svfiprintf_r+0xe6>
 8008492:	06d0      	lsls	r0, r2, #27
 8008494:	bf44      	itt	mi
 8008496:	2320      	movmi	r3, #32
 8008498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800849c:	0711      	lsls	r1, r2, #28
 800849e:	bf44      	itt	mi
 80084a0:	232b      	movmi	r3, #43	; 0x2b
 80084a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a6:	f89a 3000 	ldrb.w	r3, [sl]
 80084aa:	2b2a      	cmp	r3, #42	; 0x2a
 80084ac:	d015      	beq.n	80084da <_svfiprintf_r+0xf6>
 80084ae:	9a07      	ldr	r2, [sp, #28]
 80084b0:	4654      	mov	r4, sl
 80084b2:	2000      	movs	r0, #0
 80084b4:	f04f 0c0a 	mov.w	ip, #10
 80084b8:	4621      	mov	r1, r4
 80084ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084be:	3b30      	subs	r3, #48	; 0x30
 80084c0:	2b09      	cmp	r3, #9
 80084c2:	d94e      	bls.n	8008562 <_svfiprintf_r+0x17e>
 80084c4:	b1b0      	cbz	r0, 80084f4 <_svfiprintf_r+0x110>
 80084c6:	9207      	str	r2, [sp, #28]
 80084c8:	e014      	b.n	80084f4 <_svfiprintf_r+0x110>
 80084ca:	eba0 0308 	sub.w	r3, r0, r8
 80084ce:	fa09 f303 	lsl.w	r3, r9, r3
 80084d2:	4313      	orrs	r3, r2
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	46a2      	mov	sl, r4
 80084d8:	e7d2      	b.n	8008480 <_svfiprintf_r+0x9c>
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	1d19      	adds	r1, r3, #4
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	9103      	str	r1, [sp, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bfbb      	ittet	lt
 80084e6:	425b      	neglt	r3, r3
 80084e8:	f042 0202 	orrlt.w	r2, r2, #2
 80084ec:	9307      	strge	r3, [sp, #28]
 80084ee:	9307      	strlt	r3, [sp, #28]
 80084f0:	bfb8      	it	lt
 80084f2:	9204      	strlt	r2, [sp, #16]
 80084f4:	7823      	ldrb	r3, [r4, #0]
 80084f6:	2b2e      	cmp	r3, #46	; 0x2e
 80084f8:	d10c      	bne.n	8008514 <_svfiprintf_r+0x130>
 80084fa:	7863      	ldrb	r3, [r4, #1]
 80084fc:	2b2a      	cmp	r3, #42	; 0x2a
 80084fe:	d135      	bne.n	800856c <_svfiprintf_r+0x188>
 8008500:	9b03      	ldr	r3, [sp, #12]
 8008502:	1d1a      	adds	r2, r3, #4
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	9203      	str	r2, [sp, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	bfb8      	it	lt
 800850c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008510:	3402      	adds	r4, #2
 8008512:	9305      	str	r3, [sp, #20]
 8008514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085e0 <_svfiprintf_r+0x1fc>
 8008518:	7821      	ldrb	r1, [r4, #0]
 800851a:	2203      	movs	r2, #3
 800851c:	4650      	mov	r0, sl
 800851e:	f7f7 fe67 	bl	80001f0 <memchr>
 8008522:	b140      	cbz	r0, 8008536 <_svfiprintf_r+0x152>
 8008524:	2340      	movs	r3, #64	; 0x40
 8008526:	eba0 000a 	sub.w	r0, r0, sl
 800852a:	fa03 f000 	lsl.w	r0, r3, r0
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	4303      	orrs	r3, r0
 8008532:	3401      	adds	r4, #1
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853a:	4826      	ldr	r0, [pc, #152]	; (80085d4 <_svfiprintf_r+0x1f0>)
 800853c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008540:	2206      	movs	r2, #6
 8008542:	f7f7 fe55 	bl	80001f0 <memchr>
 8008546:	2800      	cmp	r0, #0
 8008548:	d038      	beq.n	80085bc <_svfiprintf_r+0x1d8>
 800854a:	4b23      	ldr	r3, [pc, #140]	; (80085d8 <_svfiprintf_r+0x1f4>)
 800854c:	bb1b      	cbnz	r3, 8008596 <_svfiprintf_r+0x1b2>
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	3307      	adds	r3, #7
 8008552:	f023 0307 	bic.w	r3, r3, #7
 8008556:	3308      	adds	r3, #8
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855c:	4433      	add	r3, r6
 800855e:	9309      	str	r3, [sp, #36]	; 0x24
 8008560:	e767      	b.n	8008432 <_svfiprintf_r+0x4e>
 8008562:	fb0c 3202 	mla	r2, ip, r2, r3
 8008566:	460c      	mov	r4, r1
 8008568:	2001      	movs	r0, #1
 800856a:	e7a5      	b.n	80084b8 <_svfiprintf_r+0xd4>
 800856c:	2300      	movs	r3, #0
 800856e:	3401      	adds	r4, #1
 8008570:	9305      	str	r3, [sp, #20]
 8008572:	4619      	mov	r1, r3
 8008574:	f04f 0c0a 	mov.w	ip, #10
 8008578:	4620      	mov	r0, r4
 800857a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800857e:	3a30      	subs	r2, #48	; 0x30
 8008580:	2a09      	cmp	r2, #9
 8008582:	d903      	bls.n	800858c <_svfiprintf_r+0x1a8>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0c5      	beq.n	8008514 <_svfiprintf_r+0x130>
 8008588:	9105      	str	r1, [sp, #20]
 800858a:	e7c3      	b.n	8008514 <_svfiprintf_r+0x130>
 800858c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008590:	4604      	mov	r4, r0
 8008592:	2301      	movs	r3, #1
 8008594:	e7f0      	b.n	8008578 <_svfiprintf_r+0x194>
 8008596:	ab03      	add	r3, sp, #12
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	462a      	mov	r2, r5
 800859c:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <_svfiprintf_r+0x1f8>)
 800859e:	a904      	add	r1, sp, #16
 80085a0:	4638      	mov	r0, r7
 80085a2:	f7fc fa47 	bl	8004a34 <_printf_float>
 80085a6:	1c42      	adds	r2, r0, #1
 80085a8:	4606      	mov	r6, r0
 80085aa:	d1d6      	bne.n	800855a <_svfiprintf_r+0x176>
 80085ac:	89ab      	ldrh	r3, [r5, #12]
 80085ae:	065b      	lsls	r3, r3, #25
 80085b0:	f53f af2c 	bmi.w	800840c <_svfiprintf_r+0x28>
 80085b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b6:	b01d      	add	sp, #116	; 0x74
 80085b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085bc:	ab03      	add	r3, sp, #12
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	462a      	mov	r2, r5
 80085c2:	4b06      	ldr	r3, [pc, #24]	; (80085dc <_svfiprintf_r+0x1f8>)
 80085c4:	a904      	add	r1, sp, #16
 80085c6:	4638      	mov	r0, r7
 80085c8:	f7fc fcd8 	bl	8004f7c <_printf_i>
 80085cc:	e7eb      	b.n	80085a6 <_svfiprintf_r+0x1c2>
 80085ce:	bf00      	nop
 80085d0:	08009704 	.word	0x08009704
 80085d4:	0800970e 	.word	0x0800970e
 80085d8:	08004a35 	.word	0x08004a35
 80085dc:	0800832d 	.word	0x0800832d
 80085e0:	0800970a 	.word	0x0800970a
 80085e4:	00000000 	.word	0x00000000

080085e8 <nan>:
 80085e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80085f0 <nan+0x8>
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	00000000 	.word	0x00000000
 80085f4:	7ff80000 	.word	0x7ff80000

080085f8 <_sbrk_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	4d06      	ldr	r5, [pc, #24]	; (8008614 <_sbrk_r+0x1c>)
 80085fc:	2300      	movs	r3, #0
 80085fe:	4604      	mov	r4, r0
 8008600:	4608      	mov	r0, r1
 8008602:	602b      	str	r3, [r5, #0]
 8008604:	f7f9 f8fe 	bl	8001804 <_sbrk>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_sbrk_r+0x1a>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_sbrk_r+0x1a>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	20000ba8 	.word	0x20000ba8

08008618 <strncmp>:
 8008618:	b510      	push	{r4, lr}
 800861a:	b17a      	cbz	r2, 800863c <strncmp+0x24>
 800861c:	4603      	mov	r3, r0
 800861e:	3901      	subs	r1, #1
 8008620:	1884      	adds	r4, r0, r2
 8008622:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008626:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800862a:	4290      	cmp	r0, r2
 800862c:	d101      	bne.n	8008632 <strncmp+0x1a>
 800862e:	42a3      	cmp	r3, r4
 8008630:	d101      	bne.n	8008636 <strncmp+0x1e>
 8008632:	1a80      	subs	r0, r0, r2
 8008634:	bd10      	pop	{r4, pc}
 8008636:	2800      	cmp	r0, #0
 8008638:	d1f3      	bne.n	8008622 <strncmp+0xa>
 800863a:	e7fa      	b.n	8008632 <strncmp+0x1a>
 800863c:	4610      	mov	r0, r2
 800863e:	e7f9      	b.n	8008634 <strncmp+0x1c>

08008640 <__ascii_wctomb>:
 8008640:	b149      	cbz	r1, 8008656 <__ascii_wctomb+0x16>
 8008642:	2aff      	cmp	r2, #255	; 0xff
 8008644:	bf85      	ittet	hi
 8008646:	238a      	movhi	r3, #138	; 0x8a
 8008648:	6003      	strhi	r3, [r0, #0]
 800864a:	700a      	strbls	r2, [r1, #0]
 800864c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008650:	bf98      	it	ls
 8008652:	2001      	movls	r0, #1
 8008654:	4770      	bx	lr
 8008656:	4608      	mov	r0, r1
 8008658:	4770      	bx	lr
	...

0800865c <__assert_func>:
 800865c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800865e:	4614      	mov	r4, r2
 8008660:	461a      	mov	r2, r3
 8008662:	4b09      	ldr	r3, [pc, #36]	; (8008688 <__assert_func+0x2c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4605      	mov	r5, r0
 8008668:	68d8      	ldr	r0, [r3, #12]
 800866a:	b14c      	cbz	r4, 8008680 <__assert_func+0x24>
 800866c:	4b07      	ldr	r3, [pc, #28]	; (800868c <__assert_func+0x30>)
 800866e:	9100      	str	r1, [sp, #0]
 8008670:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008674:	4906      	ldr	r1, [pc, #24]	; (8008690 <__assert_func+0x34>)
 8008676:	462b      	mov	r3, r5
 8008678:	f000 f80e 	bl	8008698 <fiprintf>
 800867c:	f000 fa8c 	bl	8008b98 <abort>
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <__assert_func+0x38>)
 8008682:	461c      	mov	r4, r3
 8008684:	e7f3      	b.n	800866e <__assert_func+0x12>
 8008686:	bf00      	nop
 8008688:	20000018 	.word	0x20000018
 800868c:	08009715 	.word	0x08009715
 8008690:	08009722 	.word	0x08009722
 8008694:	08009750 	.word	0x08009750

08008698 <fiprintf>:
 8008698:	b40e      	push	{r1, r2, r3}
 800869a:	b503      	push	{r0, r1, lr}
 800869c:	4601      	mov	r1, r0
 800869e:	ab03      	add	r3, sp, #12
 80086a0:	4805      	ldr	r0, [pc, #20]	; (80086b8 <fiprintf+0x20>)
 80086a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a6:	6800      	ldr	r0, [r0, #0]
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	f000 f885 	bl	80087b8 <_vfiprintf_r>
 80086ae:	b002      	add	sp, #8
 80086b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086b4:	b003      	add	sp, #12
 80086b6:	4770      	bx	lr
 80086b8:	20000018 	.word	0x20000018

080086bc <memmove>:
 80086bc:	4288      	cmp	r0, r1
 80086be:	b510      	push	{r4, lr}
 80086c0:	eb01 0402 	add.w	r4, r1, r2
 80086c4:	d902      	bls.n	80086cc <memmove+0x10>
 80086c6:	4284      	cmp	r4, r0
 80086c8:	4623      	mov	r3, r4
 80086ca:	d807      	bhi.n	80086dc <memmove+0x20>
 80086cc:	1e43      	subs	r3, r0, #1
 80086ce:	42a1      	cmp	r1, r4
 80086d0:	d008      	beq.n	80086e4 <memmove+0x28>
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086da:	e7f8      	b.n	80086ce <memmove+0x12>
 80086dc:	4402      	add	r2, r0
 80086de:	4601      	mov	r1, r0
 80086e0:	428a      	cmp	r2, r1
 80086e2:	d100      	bne.n	80086e6 <memmove+0x2a>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ee:	e7f7      	b.n	80086e0 <memmove+0x24>

080086f0 <__malloc_lock>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__malloc_lock+0x8>)
 80086f2:	f000 bc11 	b.w	8008f18 <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	20000bac 	.word	0x20000bac

080086fc <__malloc_unlock>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__malloc_unlock+0x8>)
 80086fe:	f000 bc0c 	b.w	8008f1a <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	20000bac 	.word	0x20000bac

08008708 <_realloc_r>:
 8008708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800870c:	4680      	mov	r8, r0
 800870e:	4614      	mov	r4, r2
 8008710:	460e      	mov	r6, r1
 8008712:	b921      	cbnz	r1, 800871e <_realloc_r+0x16>
 8008714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008718:	4611      	mov	r1, r2
 800871a:	f7ff bd93 	b.w	8008244 <_malloc_r>
 800871e:	b92a      	cbnz	r2, 800872c <_realloc_r+0x24>
 8008720:	f7ff fd24 	bl	800816c <_free_r>
 8008724:	4625      	mov	r5, r4
 8008726:	4628      	mov	r0, r5
 8008728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800872c:	f000 fc5c 	bl	8008fe8 <_malloc_usable_size_r>
 8008730:	4284      	cmp	r4, r0
 8008732:	4607      	mov	r7, r0
 8008734:	d802      	bhi.n	800873c <_realloc_r+0x34>
 8008736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800873a:	d812      	bhi.n	8008762 <_realloc_r+0x5a>
 800873c:	4621      	mov	r1, r4
 800873e:	4640      	mov	r0, r8
 8008740:	f7ff fd80 	bl	8008244 <_malloc_r>
 8008744:	4605      	mov	r5, r0
 8008746:	2800      	cmp	r0, #0
 8008748:	d0ed      	beq.n	8008726 <_realloc_r+0x1e>
 800874a:	42bc      	cmp	r4, r7
 800874c:	4622      	mov	r2, r4
 800874e:	4631      	mov	r1, r6
 8008750:	bf28      	it	cs
 8008752:	463a      	movcs	r2, r7
 8008754:	f7ff f824 	bl	80077a0 <memcpy>
 8008758:	4631      	mov	r1, r6
 800875a:	4640      	mov	r0, r8
 800875c:	f7ff fd06 	bl	800816c <_free_r>
 8008760:	e7e1      	b.n	8008726 <_realloc_r+0x1e>
 8008762:	4635      	mov	r5, r6
 8008764:	e7df      	b.n	8008726 <_realloc_r+0x1e>

08008766 <__sfputc_r>:
 8008766:	6893      	ldr	r3, [r2, #8]
 8008768:	3b01      	subs	r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	b410      	push	{r4}
 800876e:	6093      	str	r3, [r2, #8]
 8008770:	da08      	bge.n	8008784 <__sfputc_r+0x1e>
 8008772:	6994      	ldr	r4, [r2, #24]
 8008774:	42a3      	cmp	r3, r4
 8008776:	db01      	blt.n	800877c <__sfputc_r+0x16>
 8008778:	290a      	cmp	r1, #10
 800877a:	d103      	bne.n	8008784 <__sfputc_r+0x1e>
 800877c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008780:	f000 b94a 	b.w	8008a18 <__swbuf_r>
 8008784:	6813      	ldr	r3, [r2, #0]
 8008786:	1c58      	adds	r0, r3, #1
 8008788:	6010      	str	r0, [r2, #0]
 800878a:	7019      	strb	r1, [r3, #0]
 800878c:	4608      	mov	r0, r1
 800878e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008792:	4770      	bx	lr

08008794 <__sfputs_r>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	4606      	mov	r6, r0
 8008798:	460f      	mov	r7, r1
 800879a:	4614      	mov	r4, r2
 800879c:	18d5      	adds	r5, r2, r3
 800879e:	42ac      	cmp	r4, r5
 80087a0:	d101      	bne.n	80087a6 <__sfputs_r+0x12>
 80087a2:	2000      	movs	r0, #0
 80087a4:	e007      	b.n	80087b6 <__sfputs_r+0x22>
 80087a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087aa:	463a      	mov	r2, r7
 80087ac:	4630      	mov	r0, r6
 80087ae:	f7ff ffda 	bl	8008766 <__sfputc_r>
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	d1f3      	bne.n	800879e <__sfputs_r+0xa>
 80087b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080087b8 <_vfiprintf_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	460d      	mov	r5, r1
 80087be:	b09d      	sub	sp, #116	; 0x74
 80087c0:	4614      	mov	r4, r2
 80087c2:	4698      	mov	r8, r3
 80087c4:	4606      	mov	r6, r0
 80087c6:	b118      	cbz	r0, 80087d0 <_vfiprintf_r+0x18>
 80087c8:	6983      	ldr	r3, [r0, #24]
 80087ca:	b90b      	cbnz	r3, 80087d0 <_vfiprintf_r+0x18>
 80087cc:	f000 fb06 	bl	8008ddc <__sinit>
 80087d0:	4b89      	ldr	r3, [pc, #548]	; (80089f8 <_vfiprintf_r+0x240>)
 80087d2:	429d      	cmp	r5, r3
 80087d4:	d11b      	bne.n	800880e <_vfiprintf_r+0x56>
 80087d6:	6875      	ldr	r5, [r6, #4]
 80087d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087da:	07d9      	lsls	r1, r3, #31
 80087dc:	d405      	bmi.n	80087ea <_vfiprintf_r+0x32>
 80087de:	89ab      	ldrh	r3, [r5, #12]
 80087e0:	059a      	lsls	r2, r3, #22
 80087e2:	d402      	bmi.n	80087ea <_vfiprintf_r+0x32>
 80087e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087e6:	f000 fb97 	bl	8008f18 <__retarget_lock_acquire_recursive>
 80087ea:	89ab      	ldrh	r3, [r5, #12]
 80087ec:	071b      	lsls	r3, r3, #28
 80087ee:	d501      	bpl.n	80087f4 <_vfiprintf_r+0x3c>
 80087f0:	692b      	ldr	r3, [r5, #16]
 80087f2:	b9eb      	cbnz	r3, 8008830 <_vfiprintf_r+0x78>
 80087f4:	4629      	mov	r1, r5
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 f960 	bl	8008abc <__swsetup_r>
 80087fc:	b1c0      	cbz	r0, 8008830 <_vfiprintf_r+0x78>
 80087fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008800:	07dc      	lsls	r4, r3, #31
 8008802:	d50e      	bpl.n	8008822 <_vfiprintf_r+0x6a>
 8008804:	f04f 30ff 	mov.w	r0, #4294967295
 8008808:	b01d      	add	sp, #116	; 0x74
 800880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880e:	4b7b      	ldr	r3, [pc, #492]	; (80089fc <_vfiprintf_r+0x244>)
 8008810:	429d      	cmp	r5, r3
 8008812:	d101      	bne.n	8008818 <_vfiprintf_r+0x60>
 8008814:	68b5      	ldr	r5, [r6, #8]
 8008816:	e7df      	b.n	80087d8 <_vfiprintf_r+0x20>
 8008818:	4b79      	ldr	r3, [pc, #484]	; (8008a00 <_vfiprintf_r+0x248>)
 800881a:	429d      	cmp	r5, r3
 800881c:	bf08      	it	eq
 800881e:	68f5      	ldreq	r5, [r6, #12]
 8008820:	e7da      	b.n	80087d8 <_vfiprintf_r+0x20>
 8008822:	89ab      	ldrh	r3, [r5, #12]
 8008824:	0598      	lsls	r0, r3, #22
 8008826:	d4ed      	bmi.n	8008804 <_vfiprintf_r+0x4c>
 8008828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800882a:	f000 fb76 	bl	8008f1a <__retarget_lock_release_recursive>
 800882e:	e7e9      	b.n	8008804 <_vfiprintf_r+0x4c>
 8008830:	2300      	movs	r3, #0
 8008832:	9309      	str	r3, [sp, #36]	; 0x24
 8008834:	2320      	movs	r3, #32
 8008836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800883a:	f8cd 800c 	str.w	r8, [sp, #12]
 800883e:	2330      	movs	r3, #48	; 0x30
 8008840:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a04 <_vfiprintf_r+0x24c>
 8008844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008848:	f04f 0901 	mov.w	r9, #1
 800884c:	4623      	mov	r3, r4
 800884e:	469a      	mov	sl, r3
 8008850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008854:	b10a      	cbz	r2, 800885a <_vfiprintf_r+0xa2>
 8008856:	2a25      	cmp	r2, #37	; 0x25
 8008858:	d1f9      	bne.n	800884e <_vfiprintf_r+0x96>
 800885a:	ebba 0b04 	subs.w	fp, sl, r4
 800885e:	d00b      	beq.n	8008878 <_vfiprintf_r+0xc0>
 8008860:	465b      	mov	r3, fp
 8008862:	4622      	mov	r2, r4
 8008864:	4629      	mov	r1, r5
 8008866:	4630      	mov	r0, r6
 8008868:	f7ff ff94 	bl	8008794 <__sfputs_r>
 800886c:	3001      	adds	r0, #1
 800886e:	f000 80aa 	beq.w	80089c6 <_vfiprintf_r+0x20e>
 8008872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008874:	445a      	add	r2, fp
 8008876:	9209      	str	r2, [sp, #36]	; 0x24
 8008878:	f89a 3000 	ldrb.w	r3, [sl]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80a2 	beq.w	80089c6 <_vfiprintf_r+0x20e>
 8008882:	2300      	movs	r3, #0
 8008884:	f04f 32ff 	mov.w	r2, #4294967295
 8008888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888c:	f10a 0a01 	add.w	sl, sl, #1
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	9307      	str	r3, [sp, #28]
 8008894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008898:	931a      	str	r3, [sp, #104]	; 0x68
 800889a:	4654      	mov	r4, sl
 800889c:	2205      	movs	r2, #5
 800889e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a2:	4858      	ldr	r0, [pc, #352]	; (8008a04 <_vfiprintf_r+0x24c>)
 80088a4:	f7f7 fca4 	bl	80001f0 <memchr>
 80088a8:	9a04      	ldr	r2, [sp, #16]
 80088aa:	b9d8      	cbnz	r0, 80088e4 <_vfiprintf_r+0x12c>
 80088ac:	06d1      	lsls	r1, r2, #27
 80088ae:	bf44      	itt	mi
 80088b0:	2320      	movmi	r3, #32
 80088b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b6:	0713      	lsls	r3, r2, #28
 80088b8:	bf44      	itt	mi
 80088ba:	232b      	movmi	r3, #43	; 0x2b
 80088bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c0:	f89a 3000 	ldrb.w	r3, [sl]
 80088c4:	2b2a      	cmp	r3, #42	; 0x2a
 80088c6:	d015      	beq.n	80088f4 <_vfiprintf_r+0x13c>
 80088c8:	9a07      	ldr	r2, [sp, #28]
 80088ca:	4654      	mov	r4, sl
 80088cc:	2000      	movs	r0, #0
 80088ce:	f04f 0c0a 	mov.w	ip, #10
 80088d2:	4621      	mov	r1, r4
 80088d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d8:	3b30      	subs	r3, #48	; 0x30
 80088da:	2b09      	cmp	r3, #9
 80088dc:	d94e      	bls.n	800897c <_vfiprintf_r+0x1c4>
 80088de:	b1b0      	cbz	r0, 800890e <_vfiprintf_r+0x156>
 80088e0:	9207      	str	r2, [sp, #28]
 80088e2:	e014      	b.n	800890e <_vfiprintf_r+0x156>
 80088e4:	eba0 0308 	sub.w	r3, r0, r8
 80088e8:	fa09 f303 	lsl.w	r3, r9, r3
 80088ec:	4313      	orrs	r3, r2
 80088ee:	9304      	str	r3, [sp, #16]
 80088f0:	46a2      	mov	sl, r4
 80088f2:	e7d2      	b.n	800889a <_vfiprintf_r+0xe2>
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	1d19      	adds	r1, r3, #4
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	9103      	str	r1, [sp, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bfbb      	ittet	lt
 8008900:	425b      	neglt	r3, r3
 8008902:	f042 0202 	orrlt.w	r2, r2, #2
 8008906:	9307      	strge	r3, [sp, #28]
 8008908:	9307      	strlt	r3, [sp, #28]
 800890a:	bfb8      	it	lt
 800890c:	9204      	strlt	r2, [sp, #16]
 800890e:	7823      	ldrb	r3, [r4, #0]
 8008910:	2b2e      	cmp	r3, #46	; 0x2e
 8008912:	d10c      	bne.n	800892e <_vfiprintf_r+0x176>
 8008914:	7863      	ldrb	r3, [r4, #1]
 8008916:	2b2a      	cmp	r3, #42	; 0x2a
 8008918:	d135      	bne.n	8008986 <_vfiprintf_r+0x1ce>
 800891a:	9b03      	ldr	r3, [sp, #12]
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	9203      	str	r2, [sp, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	bfb8      	it	lt
 8008926:	f04f 33ff 	movlt.w	r3, #4294967295
 800892a:	3402      	adds	r4, #2
 800892c:	9305      	str	r3, [sp, #20]
 800892e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a14 <_vfiprintf_r+0x25c>
 8008932:	7821      	ldrb	r1, [r4, #0]
 8008934:	2203      	movs	r2, #3
 8008936:	4650      	mov	r0, sl
 8008938:	f7f7 fc5a 	bl	80001f0 <memchr>
 800893c:	b140      	cbz	r0, 8008950 <_vfiprintf_r+0x198>
 800893e:	2340      	movs	r3, #64	; 0x40
 8008940:	eba0 000a 	sub.w	r0, r0, sl
 8008944:	fa03 f000 	lsl.w	r0, r3, r0
 8008948:	9b04      	ldr	r3, [sp, #16]
 800894a:	4303      	orrs	r3, r0
 800894c:	3401      	adds	r4, #1
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008954:	482c      	ldr	r0, [pc, #176]	; (8008a08 <_vfiprintf_r+0x250>)
 8008956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800895a:	2206      	movs	r2, #6
 800895c:	f7f7 fc48 	bl	80001f0 <memchr>
 8008960:	2800      	cmp	r0, #0
 8008962:	d03f      	beq.n	80089e4 <_vfiprintf_r+0x22c>
 8008964:	4b29      	ldr	r3, [pc, #164]	; (8008a0c <_vfiprintf_r+0x254>)
 8008966:	bb1b      	cbnz	r3, 80089b0 <_vfiprintf_r+0x1f8>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	3307      	adds	r3, #7
 800896c:	f023 0307 	bic.w	r3, r3, #7
 8008970:	3308      	adds	r3, #8
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008976:	443b      	add	r3, r7
 8008978:	9309      	str	r3, [sp, #36]	; 0x24
 800897a:	e767      	b.n	800884c <_vfiprintf_r+0x94>
 800897c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008980:	460c      	mov	r4, r1
 8008982:	2001      	movs	r0, #1
 8008984:	e7a5      	b.n	80088d2 <_vfiprintf_r+0x11a>
 8008986:	2300      	movs	r3, #0
 8008988:	3401      	adds	r4, #1
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	4619      	mov	r1, r3
 800898e:	f04f 0c0a 	mov.w	ip, #10
 8008992:	4620      	mov	r0, r4
 8008994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008998:	3a30      	subs	r2, #48	; 0x30
 800899a:	2a09      	cmp	r2, #9
 800899c:	d903      	bls.n	80089a6 <_vfiprintf_r+0x1ee>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c5      	beq.n	800892e <_vfiprintf_r+0x176>
 80089a2:	9105      	str	r1, [sp, #20]
 80089a4:	e7c3      	b.n	800892e <_vfiprintf_r+0x176>
 80089a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089aa:	4604      	mov	r4, r0
 80089ac:	2301      	movs	r3, #1
 80089ae:	e7f0      	b.n	8008992 <_vfiprintf_r+0x1da>
 80089b0:	ab03      	add	r3, sp, #12
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	462a      	mov	r2, r5
 80089b6:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <_vfiprintf_r+0x258>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7fc f83a 	bl	8004a34 <_printf_float>
 80089c0:	4607      	mov	r7, r0
 80089c2:	1c78      	adds	r0, r7, #1
 80089c4:	d1d6      	bne.n	8008974 <_vfiprintf_r+0x1bc>
 80089c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089c8:	07d9      	lsls	r1, r3, #31
 80089ca:	d405      	bmi.n	80089d8 <_vfiprintf_r+0x220>
 80089cc:	89ab      	ldrh	r3, [r5, #12]
 80089ce:	059a      	lsls	r2, r3, #22
 80089d0:	d402      	bmi.n	80089d8 <_vfiprintf_r+0x220>
 80089d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089d4:	f000 faa1 	bl	8008f1a <__retarget_lock_release_recursive>
 80089d8:	89ab      	ldrh	r3, [r5, #12]
 80089da:	065b      	lsls	r3, r3, #25
 80089dc:	f53f af12 	bmi.w	8008804 <_vfiprintf_r+0x4c>
 80089e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089e2:	e711      	b.n	8008808 <_vfiprintf_r+0x50>
 80089e4:	ab03      	add	r3, sp, #12
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	462a      	mov	r2, r5
 80089ea:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <_vfiprintf_r+0x258>)
 80089ec:	a904      	add	r1, sp, #16
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7fc fac4 	bl	8004f7c <_printf_i>
 80089f4:	e7e4      	b.n	80089c0 <_vfiprintf_r+0x208>
 80089f6:	bf00      	nop
 80089f8:	08009774 	.word	0x08009774
 80089fc:	08009794 	.word	0x08009794
 8008a00:	08009754 	.word	0x08009754
 8008a04:	08009704 	.word	0x08009704
 8008a08:	0800970e 	.word	0x0800970e
 8008a0c:	08004a35 	.word	0x08004a35
 8008a10:	08008795 	.word	0x08008795
 8008a14:	0800970a 	.word	0x0800970a

08008a18 <__swbuf_r>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	460e      	mov	r6, r1
 8008a1c:	4614      	mov	r4, r2
 8008a1e:	4605      	mov	r5, r0
 8008a20:	b118      	cbz	r0, 8008a2a <__swbuf_r+0x12>
 8008a22:	6983      	ldr	r3, [r0, #24]
 8008a24:	b90b      	cbnz	r3, 8008a2a <__swbuf_r+0x12>
 8008a26:	f000 f9d9 	bl	8008ddc <__sinit>
 8008a2a:	4b21      	ldr	r3, [pc, #132]	; (8008ab0 <__swbuf_r+0x98>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	d12b      	bne.n	8008a88 <__swbuf_r+0x70>
 8008a30:	686c      	ldr	r4, [r5, #4]
 8008a32:	69a3      	ldr	r3, [r4, #24]
 8008a34:	60a3      	str	r3, [r4, #8]
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	071a      	lsls	r2, r3, #28
 8008a3a:	d52f      	bpl.n	8008a9c <__swbuf_r+0x84>
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	b36b      	cbz	r3, 8008a9c <__swbuf_r+0x84>
 8008a40:	6923      	ldr	r3, [r4, #16]
 8008a42:	6820      	ldr	r0, [r4, #0]
 8008a44:	1ac0      	subs	r0, r0, r3
 8008a46:	6963      	ldr	r3, [r4, #20]
 8008a48:	b2f6      	uxtb	r6, r6
 8008a4a:	4283      	cmp	r3, r0
 8008a4c:	4637      	mov	r7, r6
 8008a4e:	dc04      	bgt.n	8008a5a <__swbuf_r+0x42>
 8008a50:	4621      	mov	r1, r4
 8008a52:	4628      	mov	r0, r5
 8008a54:	f000 f92e 	bl	8008cb4 <_fflush_r>
 8008a58:	bb30      	cbnz	r0, 8008aa8 <__swbuf_r+0x90>
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	60a3      	str	r3, [r4, #8]
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	6022      	str	r2, [r4, #0]
 8008a66:	701e      	strb	r6, [r3, #0]
 8008a68:	6963      	ldr	r3, [r4, #20]
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	4283      	cmp	r3, r0
 8008a6e:	d004      	beq.n	8008a7a <__swbuf_r+0x62>
 8008a70:	89a3      	ldrh	r3, [r4, #12]
 8008a72:	07db      	lsls	r3, r3, #31
 8008a74:	d506      	bpl.n	8008a84 <__swbuf_r+0x6c>
 8008a76:	2e0a      	cmp	r6, #10
 8008a78:	d104      	bne.n	8008a84 <__swbuf_r+0x6c>
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	f000 f919 	bl	8008cb4 <_fflush_r>
 8008a82:	b988      	cbnz	r0, 8008aa8 <__swbuf_r+0x90>
 8008a84:	4638      	mov	r0, r7
 8008a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <__swbuf_r+0x9c>)
 8008a8a:	429c      	cmp	r4, r3
 8008a8c:	d101      	bne.n	8008a92 <__swbuf_r+0x7a>
 8008a8e:	68ac      	ldr	r4, [r5, #8]
 8008a90:	e7cf      	b.n	8008a32 <__swbuf_r+0x1a>
 8008a92:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <__swbuf_r+0xa0>)
 8008a94:	429c      	cmp	r4, r3
 8008a96:	bf08      	it	eq
 8008a98:	68ec      	ldreq	r4, [r5, #12]
 8008a9a:	e7ca      	b.n	8008a32 <__swbuf_r+0x1a>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	f000 f80c 	bl	8008abc <__swsetup_r>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d0cb      	beq.n	8008a40 <__swbuf_r+0x28>
 8008aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8008aac:	e7ea      	b.n	8008a84 <__swbuf_r+0x6c>
 8008aae:	bf00      	nop
 8008ab0:	08009774 	.word	0x08009774
 8008ab4:	08009794 	.word	0x08009794
 8008ab8:	08009754 	.word	0x08009754

08008abc <__swsetup_r>:
 8008abc:	4b32      	ldr	r3, [pc, #200]	; (8008b88 <__swsetup_r+0xcc>)
 8008abe:	b570      	push	{r4, r5, r6, lr}
 8008ac0:	681d      	ldr	r5, [r3, #0]
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460c      	mov	r4, r1
 8008ac6:	b125      	cbz	r5, 8008ad2 <__swsetup_r+0x16>
 8008ac8:	69ab      	ldr	r3, [r5, #24]
 8008aca:	b913      	cbnz	r3, 8008ad2 <__swsetup_r+0x16>
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 f985 	bl	8008ddc <__sinit>
 8008ad2:	4b2e      	ldr	r3, [pc, #184]	; (8008b8c <__swsetup_r+0xd0>)
 8008ad4:	429c      	cmp	r4, r3
 8008ad6:	d10f      	bne.n	8008af8 <__swsetup_r+0x3c>
 8008ad8:	686c      	ldr	r4, [r5, #4]
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae0:	0719      	lsls	r1, r3, #28
 8008ae2:	d42c      	bmi.n	8008b3e <__swsetup_r+0x82>
 8008ae4:	06dd      	lsls	r5, r3, #27
 8008ae6:	d411      	bmi.n	8008b0c <__swsetup_r+0x50>
 8008ae8:	2309      	movs	r3, #9
 8008aea:	6033      	str	r3, [r6, #0]
 8008aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008af0:	81a3      	strh	r3, [r4, #12]
 8008af2:	f04f 30ff 	mov.w	r0, #4294967295
 8008af6:	e03e      	b.n	8008b76 <__swsetup_r+0xba>
 8008af8:	4b25      	ldr	r3, [pc, #148]	; (8008b90 <__swsetup_r+0xd4>)
 8008afa:	429c      	cmp	r4, r3
 8008afc:	d101      	bne.n	8008b02 <__swsetup_r+0x46>
 8008afe:	68ac      	ldr	r4, [r5, #8]
 8008b00:	e7eb      	b.n	8008ada <__swsetup_r+0x1e>
 8008b02:	4b24      	ldr	r3, [pc, #144]	; (8008b94 <__swsetup_r+0xd8>)
 8008b04:	429c      	cmp	r4, r3
 8008b06:	bf08      	it	eq
 8008b08:	68ec      	ldreq	r4, [r5, #12]
 8008b0a:	e7e6      	b.n	8008ada <__swsetup_r+0x1e>
 8008b0c:	0758      	lsls	r0, r3, #29
 8008b0e:	d512      	bpl.n	8008b36 <__swsetup_r+0x7a>
 8008b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b12:	b141      	cbz	r1, 8008b26 <__swsetup_r+0x6a>
 8008b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b18:	4299      	cmp	r1, r3
 8008b1a:	d002      	beq.n	8008b22 <__swsetup_r+0x66>
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f7ff fb25 	bl	800816c <_free_r>
 8008b22:	2300      	movs	r3, #0
 8008b24:	6363      	str	r3, [r4, #52]	; 0x34
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b2c:	81a3      	strh	r3, [r4, #12]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	6063      	str	r3, [r4, #4]
 8008b32:	6923      	ldr	r3, [r4, #16]
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f043 0308 	orr.w	r3, r3, #8
 8008b3c:	81a3      	strh	r3, [r4, #12]
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	b94b      	cbnz	r3, 8008b56 <__swsetup_r+0x9a>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b4c:	d003      	beq.n	8008b56 <__swsetup_r+0x9a>
 8008b4e:	4621      	mov	r1, r4
 8008b50:	4630      	mov	r0, r6
 8008b52:	f000 fa09 	bl	8008f68 <__smakebuf_r>
 8008b56:	89a0      	ldrh	r0, [r4, #12]
 8008b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b5c:	f010 0301 	ands.w	r3, r0, #1
 8008b60:	d00a      	beq.n	8008b78 <__swsetup_r+0xbc>
 8008b62:	2300      	movs	r3, #0
 8008b64:	60a3      	str	r3, [r4, #8]
 8008b66:	6963      	ldr	r3, [r4, #20]
 8008b68:	425b      	negs	r3, r3
 8008b6a:	61a3      	str	r3, [r4, #24]
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	b943      	cbnz	r3, 8008b82 <__swsetup_r+0xc6>
 8008b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b74:	d1ba      	bne.n	8008aec <__swsetup_r+0x30>
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	0781      	lsls	r1, r0, #30
 8008b7a:	bf58      	it	pl
 8008b7c:	6963      	ldrpl	r3, [r4, #20]
 8008b7e:	60a3      	str	r3, [r4, #8]
 8008b80:	e7f4      	b.n	8008b6c <__swsetup_r+0xb0>
 8008b82:	2000      	movs	r0, #0
 8008b84:	e7f7      	b.n	8008b76 <__swsetup_r+0xba>
 8008b86:	bf00      	nop
 8008b88:	20000018 	.word	0x20000018
 8008b8c:	08009774 	.word	0x08009774
 8008b90:	08009794 	.word	0x08009794
 8008b94:	08009754 	.word	0x08009754

08008b98 <abort>:
 8008b98:	b508      	push	{r3, lr}
 8008b9a:	2006      	movs	r0, #6
 8008b9c:	f000 fa54 	bl	8009048 <raise>
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	f7f8 fdb8 	bl	8001716 <_exit>
	...

08008ba8 <__sflush_r>:
 8008ba8:	898a      	ldrh	r2, [r1, #12]
 8008baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bae:	4605      	mov	r5, r0
 8008bb0:	0710      	lsls	r0, r2, #28
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	d458      	bmi.n	8008c68 <__sflush_r+0xc0>
 8008bb6:	684b      	ldr	r3, [r1, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	dc05      	bgt.n	8008bc8 <__sflush_r+0x20>
 8008bbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dc02      	bgt.n	8008bc8 <__sflush_r+0x20>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bca:	2e00      	cmp	r6, #0
 8008bcc:	d0f9      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bd4:	682f      	ldr	r7, [r5, #0]
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	d032      	beq.n	8008c40 <__sflush_r+0x98>
 8008bda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	075a      	lsls	r2, r3, #29
 8008be0:	d505      	bpl.n	8008bee <__sflush_r+0x46>
 8008be2:	6863      	ldr	r3, [r4, #4]
 8008be4:	1ac0      	subs	r0, r0, r3
 8008be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008be8:	b10b      	cbz	r3, 8008bee <__sflush_r+0x46>
 8008bea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bec:	1ac0      	subs	r0, r0, r3
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bf4:	6a21      	ldr	r1, [r4, #32]
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b0      	blx	r6
 8008bfa:	1c43      	adds	r3, r0, #1
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	d106      	bne.n	8008c0e <__sflush_r+0x66>
 8008c00:	6829      	ldr	r1, [r5, #0]
 8008c02:	291d      	cmp	r1, #29
 8008c04:	d82c      	bhi.n	8008c60 <__sflush_r+0xb8>
 8008c06:	4a2a      	ldr	r2, [pc, #168]	; (8008cb0 <__sflush_r+0x108>)
 8008c08:	40ca      	lsrs	r2, r1
 8008c0a:	07d6      	lsls	r6, r2, #31
 8008c0c:	d528      	bpl.n	8008c60 <__sflush_r+0xb8>
 8008c0e:	2200      	movs	r2, #0
 8008c10:	6062      	str	r2, [r4, #4]
 8008c12:	04d9      	lsls	r1, r3, #19
 8008c14:	6922      	ldr	r2, [r4, #16]
 8008c16:	6022      	str	r2, [r4, #0]
 8008c18:	d504      	bpl.n	8008c24 <__sflush_r+0x7c>
 8008c1a:	1c42      	adds	r2, r0, #1
 8008c1c:	d101      	bne.n	8008c22 <__sflush_r+0x7a>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	b903      	cbnz	r3, 8008c24 <__sflush_r+0x7c>
 8008c22:	6560      	str	r0, [r4, #84]	; 0x54
 8008c24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c26:	602f      	str	r7, [r5, #0]
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d0ca      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c30:	4299      	cmp	r1, r3
 8008c32:	d002      	beq.n	8008c3a <__sflush_r+0x92>
 8008c34:	4628      	mov	r0, r5
 8008c36:	f7ff fa99 	bl	800816c <_free_r>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	6360      	str	r0, [r4, #52]	; 0x34
 8008c3e:	e7c1      	b.n	8008bc4 <__sflush_r+0x1c>
 8008c40:	6a21      	ldr	r1, [r4, #32]
 8008c42:	2301      	movs	r3, #1
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b0      	blx	r6
 8008c48:	1c41      	adds	r1, r0, #1
 8008c4a:	d1c7      	bne.n	8008bdc <__sflush_r+0x34>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d0c4      	beq.n	8008bdc <__sflush_r+0x34>
 8008c52:	2b1d      	cmp	r3, #29
 8008c54:	d001      	beq.n	8008c5a <__sflush_r+0xb2>
 8008c56:	2b16      	cmp	r3, #22
 8008c58:	d101      	bne.n	8008c5e <__sflush_r+0xb6>
 8008c5a:	602f      	str	r7, [r5, #0]
 8008c5c:	e7b1      	b.n	8008bc2 <__sflush_r+0x1a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	e7ad      	b.n	8008bc4 <__sflush_r+0x1c>
 8008c68:	690f      	ldr	r7, [r1, #16]
 8008c6a:	2f00      	cmp	r7, #0
 8008c6c:	d0a9      	beq.n	8008bc2 <__sflush_r+0x1a>
 8008c6e:	0793      	lsls	r3, r2, #30
 8008c70:	680e      	ldr	r6, [r1, #0]
 8008c72:	bf08      	it	eq
 8008c74:	694b      	ldreq	r3, [r1, #20]
 8008c76:	600f      	str	r7, [r1, #0]
 8008c78:	bf18      	it	ne
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	eba6 0807 	sub.w	r8, r6, r7
 8008c80:	608b      	str	r3, [r1, #8]
 8008c82:	f1b8 0f00 	cmp.w	r8, #0
 8008c86:	dd9c      	ble.n	8008bc2 <__sflush_r+0x1a>
 8008c88:	6a21      	ldr	r1, [r4, #32]
 8008c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c8c:	4643      	mov	r3, r8
 8008c8e:	463a      	mov	r2, r7
 8008c90:	4628      	mov	r0, r5
 8008c92:	47b0      	blx	r6
 8008c94:	2800      	cmp	r0, #0
 8008c96:	dc06      	bgt.n	8008ca6 <__sflush_r+0xfe>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	e78e      	b.n	8008bc4 <__sflush_r+0x1c>
 8008ca6:	4407      	add	r7, r0
 8008ca8:	eba8 0800 	sub.w	r8, r8, r0
 8008cac:	e7e9      	b.n	8008c82 <__sflush_r+0xda>
 8008cae:	bf00      	nop
 8008cb0:	20400001 	.word	0x20400001

08008cb4 <_fflush_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	690b      	ldr	r3, [r1, #16]
 8008cb8:	4605      	mov	r5, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	b913      	cbnz	r3, 8008cc4 <_fflush_r+0x10>
 8008cbe:	2500      	movs	r5, #0
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	b118      	cbz	r0, 8008cce <_fflush_r+0x1a>
 8008cc6:	6983      	ldr	r3, [r0, #24]
 8008cc8:	b90b      	cbnz	r3, 8008cce <_fflush_r+0x1a>
 8008cca:	f000 f887 	bl	8008ddc <__sinit>
 8008cce:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <_fflush_r+0x6c>)
 8008cd0:	429c      	cmp	r4, r3
 8008cd2:	d11b      	bne.n	8008d0c <_fflush_r+0x58>
 8008cd4:	686c      	ldr	r4, [r5, #4]
 8008cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0ef      	beq.n	8008cbe <_fflush_r+0xa>
 8008cde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ce0:	07d0      	lsls	r0, r2, #31
 8008ce2:	d404      	bmi.n	8008cee <_fflush_r+0x3a>
 8008ce4:	0599      	lsls	r1, r3, #22
 8008ce6:	d402      	bmi.n	8008cee <_fflush_r+0x3a>
 8008ce8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cea:	f000 f915 	bl	8008f18 <__retarget_lock_acquire_recursive>
 8008cee:	4628      	mov	r0, r5
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	f7ff ff59 	bl	8008ba8 <__sflush_r>
 8008cf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cf8:	07da      	lsls	r2, r3, #31
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	d4e0      	bmi.n	8008cc0 <_fflush_r+0xc>
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	059b      	lsls	r3, r3, #22
 8008d02:	d4dd      	bmi.n	8008cc0 <_fflush_r+0xc>
 8008d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d06:	f000 f908 	bl	8008f1a <__retarget_lock_release_recursive>
 8008d0a:	e7d9      	b.n	8008cc0 <_fflush_r+0xc>
 8008d0c:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <_fflush_r+0x70>)
 8008d0e:	429c      	cmp	r4, r3
 8008d10:	d101      	bne.n	8008d16 <_fflush_r+0x62>
 8008d12:	68ac      	ldr	r4, [r5, #8]
 8008d14:	e7df      	b.n	8008cd6 <_fflush_r+0x22>
 8008d16:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <_fflush_r+0x74>)
 8008d18:	429c      	cmp	r4, r3
 8008d1a:	bf08      	it	eq
 8008d1c:	68ec      	ldreq	r4, [r5, #12]
 8008d1e:	e7da      	b.n	8008cd6 <_fflush_r+0x22>
 8008d20:	08009774 	.word	0x08009774
 8008d24:	08009794 	.word	0x08009794
 8008d28:	08009754 	.word	0x08009754

08008d2c <std>:
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	b510      	push	{r4, lr}
 8008d30:	4604      	mov	r4, r0
 8008d32:	e9c0 3300 	strd	r3, r3, [r0]
 8008d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d3a:	6083      	str	r3, [r0, #8]
 8008d3c:	8181      	strh	r1, [r0, #12]
 8008d3e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d40:	81c2      	strh	r2, [r0, #14]
 8008d42:	6183      	str	r3, [r0, #24]
 8008d44:	4619      	mov	r1, r3
 8008d46:	2208      	movs	r2, #8
 8008d48:	305c      	adds	r0, #92	; 0x5c
 8008d4a:	f7fb fdcb 	bl	80048e4 <memset>
 8008d4e:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <std+0x38>)
 8008d50:	6263      	str	r3, [r4, #36]	; 0x24
 8008d52:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <std+0x3c>)
 8008d54:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <std+0x40>)
 8008d58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d5a:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <std+0x44>)
 8008d5c:	6224      	str	r4, [r4, #32]
 8008d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	bf00      	nop
 8008d64:	08009081 	.word	0x08009081
 8008d68:	080090a3 	.word	0x080090a3
 8008d6c:	080090db 	.word	0x080090db
 8008d70:	080090ff 	.word	0x080090ff

08008d74 <_cleanup_r>:
 8008d74:	4901      	ldr	r1, [pc, #4]	; (8008d7c <_cleanup_r+0x8>)
 8008d76:	f000 b8af 	b.w	8008ed8 <_fwalk_reent>
 8008d7a:	bf00      	nop
 8008d7c:	08008cb5 	.word	0x08008cb5

08008d80 <__sfmoreglue>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	2268      	movs	r2, #104	; 0x68
 8008d84:	1e4d      	subs	r5, r1, #1
 8008d86:	4355      	muls	r5, r2
 8008d88:	460e      	mov	r6, r1
 8008d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d8e:	f7ff fa59 	bl	8008244 <_malloc_r>
 8008d92:	4604      	mov	r4, r0
 8008d94:	b140      	cbz	r0, 8008da8 <__sfmoreglue+0x28>
 8008d96:	2100      	movs	r1, #0
 8008d98:	e9c0 1600 	strd	r1, r6, [r0]
 8008d9c:	300c      	adds	r0, #12
 8008d9e:	60a0      	str	r0, [r4, #8]
 8008da0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008da4:	f7fb fd9e 	bl	80048e4 <memset>
 8008da8:	4620      	mov	r0, r4
 8008daa:	bd70      	pop	{r4, r5, r6, pc}

08008dac <__sfp_lock_acquire>:
 8008dac:	4801      	ldr	r0, [pc, #4]	; (8008db4 <__sfp_lock_acquire+0x8>)
 8008dae:	f000 b8b3 	b.w	8008f18 <__retarget_lock_acquire_recursive>
 8008db2:	bf00      	nop
 8008db4:	20000bad 	.word	0x20000bad

08008db8 <__sfp_lock_release>:
 8008db8:	4801      	ldr	r0, [pc, #4]	; (8008dc0 <__sfp_lock_release+0x8>)
 8008dba:	f000 b8ae 	b.w	8008f1a <__retarget_lock_release_recursive>
 8008dbe:	bf00      	nop
 8008dc0:	20000bad 	.word	0x20000bad

08008dc4 <__sinit_lock_acquire>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	; (8008dcc <__sinit_lock_acquire+0x8>)
 8008dc6:	f000 b8a7 	b.w	8008f18 <__retarget_lock_acquire_recursive>
 8008dca:	bf00      	nop
 8008dcc:	20000bae 	.word	0x20000bae

08008dd0 <__sinit_lock_release>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	; (8008dd8 <__sinit_lock_release+0x8>)
 8008dd2:	f000 b8a2 	b.w	8008f1a <__retarget_lock_release_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	20000bae 	.word	0x20000bae

08008ddc <__sinit>:
 8008ddc:	b510      	push	{r4, lr}
 8008dde:	4604      	mov	r4, r0
 8008de0:	f7ff fff0 	bl	8008dc4 <__sinit_lock_acquire>
 8008de4:	69a3      	ldr	r3, [r4, #24]
 8008de6:	b11b      	cbz	r3, 8008df0 <__sinit+0x14>
 8008de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dec:	f7ff bff0 	b.w	8008dd0 <__sinit_lock_release>
 8008df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008df4:	6523      	str	r3, [r4, #80]	; 0x50
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <__sinit+0x68>)
 8008df8:	4a13      	ldr	r2, [pc, #76]	; (8008e48 <__sinit+0x6c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	bf04      	itt	eq
 8008e02:	2301      	moveq	r3, #1
 8008e04:	61a3      	streq	r3, [r4, #24]
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 f820 	bl	8008e4c <__sfp>
 8008e0c:	6060      	str	r0, [r4, #4]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f81c 	bl	8008e4c <__sfp>
 8008e14:	60a0      	str	r0, [r4, #8]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 f818 	bl	8008e4c <__sfp>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	60e0      	str	r0, [r4, #12]
 8008e20:	2104      	movs	r1, #4
 8008e22:	6860      	ldr	r0, [r4, #4]
 8008e24:	f7ff ff82 	bl	8008d2c <std>
 8008e28:	68a0      	ldr	r0, [r4, #8]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	2109      	movs	r1, #9
 8008e2e:	f7ff ff7d 	bl	8008d2c <std>
 8008e32:	68e0      	ldr	r0, [r4, #12]
 8008e34:	2202      	movs	r2, #2
 8008e36:	2112      	movs	r1, #18
 8008e38:	f7ff ff78 	bl	8008d2c <std>
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	61a3      	str	r3, [r4, #24]
 8008e40:	e7d2      	b.n	8008de8 <__sinit+0xc>
 8008e42:	bf00      	nop
 8008e44:	0800930c 	.word	0x0800930c
 8008e48:	08008d75 	.word	0x08008d75

08008e4c <__sfp>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	4607      	mov	r7, r0
 8008e50:	f7ff ffac 	bl	8008dac <__sfp_lock_acquire>
 8008e54:	4b1e      	ldr	r3, [pc, #120]	; (8008ed0 <__sfp+0x84>)
 8008e56:	681e      	ldr	r6, [r3, #0]
 8008e58:	69b3      	ldr	r3, [r6, #24]
 8008e5a:	b913      	cbnz	r3, 8008e62 <__sfp+0x16>
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f7ff ffbd 	bl	8008ddc <__sinit>
 8008e62:	3648      	adds	r6, #72	; 0x48
 8008e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	d503      	bpl.n	8008e74 <__sfp+0x28>
 8008e6c:	6833      	ldr	r3, [r6, #0]
 8008e6e:	b30b      	cbz	r3, 8008eb4 <__sfp+0x68>
 8008e70:	6836      	ldr	r6, [r6, #0]
 8008e72:	e7f7      	b.n	8008e64 <__sfp+0x18>
 8008e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e78:	b9d5      	cbnz	r5, 8008eb0 <__sfp+0x64>
 8008e7a:	4b16      	ldr	r3, [pc, #88]	; (8008ed4 <__sfp+0x88>)
 8008e7c:	60e3      	str	r3, [r4, #12]
 8008e7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e82:	6665      	str	r5, [r4, #100]	; 0x64
 8008e84:	f000 f847 	bl	8008f16 <__retarget_lock_init_recursive>
 8008e88:	f7ff ff96 	bl	8008db8 <__sfp_lock_release>
 8008e8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e94:	6025      	str	r5, [r4, #0]
 8008e96:	61a5      	str	r5, [r4, #24]
 8008e98:	2208      	movs	r2, #8
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ea0:	f7fb fd20 	bl	80048e4 <memset>
 8008ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008eac:	4620      	mov	r0, r4
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb0:	3468      	adds	r4, #104	; 0x68
 8008eb2:	e7d9      	b.n	8008e68 <__sfp+0x1c>
 8008eb4:	2104      	movs	r1, #4
 8008eb6:	4638      	mov	r0, r7
 8008eb8:	f7ff ff62 	bl	8008d80 <__sfmoreglue>
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	6030      	str	r0, [r6, #0]
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1d5      	bne.n	8008e70 <__sfp+0x24>
 8008ec4:	f7ff ff78 	bl	8008db8 <__sfp_lock_release>
 8008ec8:	230c      	movs	r3, #12
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	e7ee      	b.n	8008eac <__sfp+0x60>
 8008ece:	bf00      	nop
 8008ed0:	0800930c 	.word	0x0800930c
 8008ed4:	ffff0001 	.word	0xffff0001

08008ed8 <_fwalk_reent>:
 8008ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008edc:	4606      	mov	r6, r0
 8008ede:	4688      	mov	r8, r1
 8008ee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ee4:	2700      	movs	r7, #0
 8008ee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008eea:	f1b9 0901 	subs.w	r9, r9, #1
 8008eee:	d505      	bpl.n	8008efc <_fwalk_reent+0x24>
 8008ef0:	6824      	ldr	r4, [r4, #0]
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	d1f7      	bne.n	8008ee6 <_fwalk_reent+0xe>
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008efc:	89ab      	ldrh	r3, [r5, #12]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d907      	bls.n	8008f12 <_fwalk_reent+0x3a>
 8008f02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f06:	3301      	adds	r3, #1
 8008f08:	d003      	beq.n	8008f12 <_fwalk_reent+0x3a>
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	47c0      	blx	r8
 8008f10:	4307      	orrs	r7, r0
 8008f12:	3568      	adds	r5, #104	; 0x68
 8008f14:	e7e9      	b.n	8008eea <_fwalk_reent+0x12>

08008f16 <__retarget_lock_init_recursive>:
 8008f16:	4770      	bx	lr

08008f18 <__retarget_lock_acquire_recursive>:
 8008f18:	4770      	bx	lr

08008f1a <__retarget_lock_release_recursive>:
 8008f1a:	4770      	bx	lr

08008f1c <__swhatbuf_r>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	460e      	mov	r6, r1
 8008f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f24:	2900      	cmp	r1, #0
 8008f26:	b096      	sub	sp, #88	; 0x58
 8008f28:	4614      	mov	r4, r2
 8008f2a:	461d      	mov	r5, r3
 8008f2c:	da08      	bge.n	8008f40 <__swhatbuf_r+0x24>
 8008f2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	602a      	str	r2, [r5, #0]
 8008f36:	061a      	lsls	r2, r3, #24
 8008f38:	d410      	bmi.n	8008f5c <__swhatbuf_r+0x40>
 8008f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f3e:	e00e      	b.n	8008f5e <__swhatbuf_r+0x42>
 8008f40:	466a      	mov	r2, sp
 8008f42:	f000 f903 	bl	800914c <_fstat_r>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	dbf1      	blt.n	8008f2e <__swhatbuf_r+0x12>
 8008f4a:	9a01      	ldr	r2, [sp, #4]
 8008f4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f54:	425a      	negs	r2, r3
 8008f56:	415a      	adcs	r2, r3
 8008f58:	602a      	str	r2, [r5, #0]
 8008f5a:	e7ee      	b.n	8008f3a <__swhatbuf_r+0x1e>
 8008f5c:	2340      	movs	r3, #64	; 0x40
 8008f5e:	2000      	movs	r0, #0
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	b016      	add	sp, #88	; 0x58
 8008f64:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f68 <__smakebuf_r>:
 8008f68:	898b      	ldrh	r3, [r1, #12]
 8008f6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f6c:	079d      	lsls	r5, r3, #30
 8008f6e:	4606      	mov	r6, r0
 8008f70:	460c      	mov	r4, r1
 8008f72:	d507      	bpl.n	8008f84 <__smakebuf_r+0x1c>
 8008f74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	6123      	str	r3, [r4, #16]
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	6163      	str	r3, [r4, #20]
 8008f80:	b002      	add	sp, #8
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	ab01      	add	r3, sp, #4
 8008f86:	466a      	mov	r2, sp
 8008f88:	f7ff ffc8 	bl	8008f1c <__swhatbuf_r>
 8008f8c:	9900      	ldr	r1, [sp, #0]
 8008f8e:	4605      	mov	r5, r0
 8008f90:	4630      	mov	r0, r6
 8008f92:	f7ff f957 	bl	8008244 <_malloc_r>
 8008f96:	b948      	cbnz	r0, 8008fac <__smakebuf_r+0x44>
 8008f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f9c:	059a      	lsls	r2, r3, #22
 8008f9e:	d4ef      	bmi.n	8008f80 <__smakebuf_r+0x18>
 8008fa0:	f023 0303 	bic.w	r3, r3, #3
 8008fa4:	f043 0302 	orr.w	r3, r3, #2
 8008fa8:	81a3      	strh	r3, [r4, #12]
 8008faa:	e7e3      	b.n	8008f74 <__smakebuf_r+0xc>
 8008fac:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <__smakebuf_r+0x7c>)
 8008fae:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	6020      	str	r0, [r4, #0]
 8008fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	6163      	str	r3, [r4, #20]
 8008fbe:	9b01      	ldr	r3, [sp, #4]
 8008fc0:	6120      	str	r0, [r4, #16]
 8008fc2:	b15b      	cbz	r3, 8008fdc <__smakebuf_r+0x74>
 8008fc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 f8d1 	bl	8009170 <_isatty_r>
 8008fce:	b128      	cbz	r0, 8008fdc <__smakebuf_r+0x74>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	f023 0303 	bic.w	r3, r3, #3
 8008fd6:	f043 0301 	orr.w	r3, r3, #1
 8008fda:	81a3      	strh	r3, [r4, #12]
 8008fdc:	89a0      	ldrh	r0, [r4, #12]
 8008fde:	4305      	orrs	r5, r0
 8008fe0:	81a5      	strh	r5, [r4, #12]
 8008fe2:	e7cd      	b.n	8008f80 <__smakebuf_r+0x18>
 8008fe4:	08008d75 	.word	0x08008d75

08008fe8 <_malloc_usable_size_r>:
 8008fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fec:	1f18      	subs	r0, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	bfbc      	itt	lt
 8008ff2:	580b      	ldrlt	r3, [r1, r0]
 8008ff4:	18c0      	addlt	r0, r0, r3
 8008ff6:	4770      	bx	lr

08008ff8 <_raise_r>:
 8008ff8:	291f      	cmp	r1, #31
 8008ffa:	b538      	push	{r3, r4, r5, lr}
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	460d      	mov	r5, r1
 8009000:	d904      	bls.n	800900c <_raise_r+0x14>
 8009002:	2316      	movs	r3, #22
 8009004:	6003      	str	r3, [r0, #0]
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800900e:	b112      	cbz	r2, 8009016 <_raise_r+0x1e>
 8009010:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009014:	b94b      	cbnz	r3, 800902a <_raise_r+0x32>
 8009016:	4620      	mov	r0, r4
 8009018:	f000 f830 	bl	800907c <_getpid_r>
 800901c:	462a      	mov	r2, r5
 800901e:	4601      	mov	r1, r0
 8009020:	4620      	mov	r0, r4
 8009022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009026:	f000 b817 	b.w	8009058 <_kill_r>
 800902a:	2b01      	cmp	r3, #1
 800902c:	d00a      	beq.n	8009044 <_raise_r+0x4c>
 800902e:	1c59      	adds	r1, r3, #1
 8009030:	d103      	bne.n	800903a <_raise_r+0x42>
 8009032:	2316      	movs	r3, #22
 8009034:	6003      	str	r3, [r0, #0]
 8009036:	2001      	movs	r0, #1
 8009038:	e7e7      	b.n	800900a <_raise_r+0x12>
 800903a:	2400      	movs	r4, #0
 800903c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009040:	4628      	mov	r0, r5
 8009042:	4798      	blx	r3
 8009044:	2000      	movs	r0, #0
 8009046:	e7e0      	b.n	800900a <_raise_r+0x12>

08009048 <raise>:
 8009048:	4b02      	ldr	r3, [pc, #8]	; (8009054 <raise+0xc>)
 800904a:	4601      	mov	r1, r0
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	f7ff bfd3 	b.w	8008ff8 <_raise_r>
 8009052:	bf00      	nop
 8009054:	20000018 	.word	0x20000018

08009058 <_kill_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4d07      	ldr	r5, [pc, #28]	; (8009078 <_kill_r+0x20>)
 800905c:	2300      	movs	r3, #0
 800905e:	4604      	mov	r4, r0
 8009060:	4608      	mov	r0, r1
 8009062:	4611      	mov	r1, r2
 8009064:	602b      	str	r3, [r5, #0]
 8009066:	f7f8 fb46 	bl	80016f6 <_kill>
 800906a:	1c43      	adds	r3, r0, #1
 800906c:	d102      	bne.n	8009074 <_kill_r+0x1c>
 800906e:	682b      	ldr	r3, [r5, #0]
 8009070:	b103      	cbz	r3, 8009074 <_kill_r+0x1c>
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	bd38      	pop	{r3, r4, r5, pc}
 8009076:	bf00      	nop
 8009078:	20000ba8 	.word	0x20000ba8

0800907c <_getpid_r>:
 800907c:	f7f8 bb33 	b.w	80016e6 <_getpid>

08009080 <__sread>:
 8009080:	b510      	push	{r4, lr}
 8009082:	460c      	mov	r4, r1
 8009084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009088:	f000 f894 	bl	80091b4 <_read_r>
 800908c:	2800      	cmp	r0, #0
 800908e:	bfab      	itete	ge
 8009090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009092:	89a3      	ldrhlt	r3, [r4, #12]
 8009094:	181b      	addge	r3, r3, r0
 8009096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800909a:	bfac      	ite	ge
 800909c:	6563      	strge	r3, [r4, #84]	; 0x54
 800909e:	81a3      	strhlt	r3, [r4, #12]
 80090a0:	bd10      	pop	{r4, pc}

080090a2 <__swrite>:
 80090a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a6:	461f      	mov	r7, r3
 80090a8:	898b      	ldrh	r3, [r1, #12]
 80090aa:	05db      	lsls	r3, r3, #23
 80090ac:	4605      	mov	r5, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	4616      	mov	r6, r2
 80090b2:	d505      	bpl.n	80090c0 <__swrite+0x1e>
 80090b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b8:	2302      	movs	r3, #2
 80090ba:	2200      	movs	r2, #0
 80090bc:	f000 f868 	bl	8009190 <_lseek_r>
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	4632      	mov	r2, r6
 80090ce:	463b      	mov	r3, r7
 80090d0:	4628      	mov	r0, r5
 80090d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090d6:	f000 b817 	b.w	8009108 <_write_r>

080090da <__sseek>:
 80090da:	b510      	push	{r4, lr}
 80090dc:	460c      	mov	r4, r1
 80090de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090e2:	f000 f855 	bl	8009190 <_lseek_r>
 80090e6:	1c43      	adds	r3, r0, #1
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	bf15      	itete	ne
 80090ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80090ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090f6:	81a3      	strheq	r3, [r4, #12]
 80090f8:	bf18      	it	ne
 80090fa:	81a3      	strhne	r3, [r4, #12]
 80090fc:	bd10      	pop	{r4, pc}

080090fe <__sclose>:
 80090fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009102:	f000 b813 	b.w	800912c <_close_r>
	...

08009108 <_write_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d07      	ldr	r5, [pc, #28]	; (8009128 <_write_r+0x20>)
 800910c:	4604      	mov	r4, r0
 800910e:	4608      	mov	r0, r1
 8009110:	4611      	mov	r1, r2
 8009112:	2200      	movs	r2, #0
 8009114:	602a      	str	r2, [r5, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	f7f8 fb24 	bl	8001764 <_write>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_write_r+0x1e>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b103      	cbz	r3, 8009126 <_write_r+0x1e>
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	20000ba8 	.word	0x20000ba8

0800912c <_close_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d06      	ldr	r5, [pc, #24]	; (8009148 <_close_r+0x1c>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7f8 fb30 	bl	800179c <_close>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_close_r+0x1a>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_close_r+0x1a>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	20000ba8 	.word	0x20000ba8

0800914c <_fstat_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	4d07      	ldr	r5, [pc, #28]	; (800916c <_fstat_r+0x20>)
 8009150:	2300      	movs	r3, #0
 8009152:	4604      	mov	r4, r0
 8009154:	4608      	mov	r0, r1
 8009156:	4611      	mov	r1, r2
 8009158:	602b      	str	r3, [r5, #0]
 800915a:	f7f8 fb2b 	bl	80017b4 <_fstat>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	d102      	bne.n	8009168 <_fstat_r+0x1c>
 8009162:	682b      	ldr	r3, [r5, #0]
 8009164:	b103      	cbz	r3, 8009168 <_fstat_r+0x1c>
 8009166:	6023      	str	r3, [r4, #0]
 8009168:	bd38      	pop	{r3, r4, r5, pc}
 800916a:	bf00      	nop
 800916c:	20000ba8 	.word	0x20000ba8

08009170 <_isatty_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4d06      	ldr	r5, [pc, #24]	; (800918c <_isatty_r+0x1c>)
 8009174:	2300      	movs	r3, #0
 8009176:	4604      	mov	r4, r0
 8009178:	4608      	mov	r0, r1
 800917a:	602b      	str	r3, [r5, #0]
 800917c:	f7f8 fb2a 	bl	80017d4 <_isatty>
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	d102      	bne.n	800918a <_isatty_r+0x1a>
 8009184:	682b      	ldr	r3, [r5, #0]
 8009186:	b103      	cbz	r3, 800918a <_isatty_r+0x1a>
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	bd38      	pop	{r3, r4, r5, pc}
 800918c:	20000ba8 	.word	0x20000ba8

08009190 <_lseek_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4d07      	ldr	r5, [pc, #28]	; (80091b0 <_lseek_r+0x20>)
 8009194:	4604      	mov	r4, r0
 8009196:	4608      	mov	r0, r1
 8009198:	4611      	mov	r1, r2
 800919a:	2200      	movs	r2, #0
 800919c:	602a      	str	r2, [r5, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	f7f8 fb23 	bl	80017ea <_lseek>
 80091a4:	1c43      	adds	r3, r0, #1
 80091a6:	d102      	bne.n	80091ae <_lseek_r+0x1e>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	b103      	cbz	r3, 80091ae <_lseek_r+0x1e>
 80091ac:	6023      	str	r3, [r4, #0]
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	20000ba8 	.word	0x20000ba8

080091b4 <_read_r>:
 80091b4:	b538      	push	{r3, r4, r5, lr}
 80091b6:	4d07      	ldr	r5, [pc, #28]	; (80091d4 <_read_r+0x20>)
 80091b8:	4604      	mov	r4, r0
 80091ba:	4608      	mov	r0, r1
 80091bc:	4611      	mov	r1, r2
 80091be:	2200      	movs	r2, #0
 80091c0:	602a      	str	r2, [r5, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f7f8 fab1 	bl	800172a <_read>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_read_r+0x1e>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_read_r+0x1e>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	20000ba8 	.word	0x20000ba8

080091d8 <_init>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr

080091e4 <_fini>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	bf00      	nop
 80091e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ea:	bc08      	pop	{r3}
 80091ec:	469e      	mov	lr, r3
 80091ee:	4770      	bx	lr
