
Control_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  08009998  08009998  00019998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a084  0800a084  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a084  0800a084  0001a084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a08c  0800a08c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  200001e0  0800a274  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c30  0800a274  00020c30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004aba  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000114c  00000000  00000000  00024cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  00025e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00026288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f74  00000000  00000000  00026650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066db  00000000  00000000  000375c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000585f5  00000000  00000000  0003dc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00096294  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000281c  00000000  00000000  000962e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800997c 	.word	0x0800997c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800997c 	.word	0x0800997c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	605a      	str	r2, [r3, #4]
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f002 fe95 	bl	8003de8 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateFrequencyMotor>:


void updateFrequencyMotor(Motor_Handler_t *ptrMotorHandler, BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newValue)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	4613      	mov	r3, r2
 80010d2:	80fb      	strh	r3, [r7, #6]
		//Guardar valor del dutty
		*(ptrMotorHandler->configMotor.frecuency) = newValue;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	88fa      	ldrh	r2, [r7, #6]
 80010da:	801a      	strh	r2, [r3, #0]
		//Actualizamos el valor del frecuencia y dutty
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	f001 f835 	bl	8002154 <updateFrequencyTimer>
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010f4:	eeb0 0a67 	vmov.f32	s0, s15
 80010f8:	4610      	mov	r0, r2
 80010fa:	f002 fe75 	bl	8003de8 <updateDuttyCyclePercentageFloat>
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <updateDirMotor>:

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7a1b      	ldrb	r3, [r3, #8]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf0c      	ite	eq
 800111a:	2301      	moveq	r3, #1
 800111c:	2300      	movne	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	721a      	strb	r2, [r3, #8]
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68da      	ldr	r2, [r3, #12]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7a1b      	ldrb	r3, [r3, #8]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f002 fa2e 	bl	8003598 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	7a1b      	ldrb	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	4610      	mov	r0, r2
 800114e:	f002 fd85 	bl	8003c5c <statusPolarityPWM>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f002 fa57 	bl	800361c <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 800116e:	f000 f841 	bl	80011f4 <int_Hardware>
	//Definimos la configuracion inicail del MCO1
	 int_MCO2();
 8001172:	f000 f9cd 	bl	8001510 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	int_Config_Motor();
 8001176:	f000 f9d5 	bl	8001524 <int_Config_Motor>
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800117a:	2101      	movs	r1, #1
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <main+0x6c>)
 800117e:	f002 fa0b 	bl	8003598 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001182:	2101      	movs	r1, #1
 8001184:	4811      	ldr	r0, [pc, #68]	; (80011cc <main+0x70>)
 8001186:	f002 fa07 	bl	8003598 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800118a:	2101      	movs	r1, #1
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <main+0x74>)
 800118e:	f002 fa03 	bl	8003598 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001192:	2101      	movs	r1, #1
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <main+0x78>)
 8001196:	f002 f9ff 	bl	8003598 <GPIO_writePin>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <main+0x7c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <main+0x80>)
 800119e:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = (3.1416*(DL/100))/Ce;  //[mm/cuentas]
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <main+0x84>)
 80011a2:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <main+0x88>)
 80011a4:	601a      	str	r2, [r3, #0]
	cm_R = (3.1416*(DR/100))/Ce;  //[mm/cuentas]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <main+0x8c>)
 80011a8:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <main+0x88>)
 80011aa:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <main+0x90>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d106      	bne.n	80011c2 <main+0x66>
		{
			runCommand(bufferRecepcion);
 80011b4:	480e      	ldr	r0, [pc, #56]	; (80011f0 <main+0x94>)
 80011b6:	f000 fb33 	bl	8001820 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <main+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	e7f4      	b.n	80011ac <main+0x50>
		}
		else
		{
			__NOP();
 80011c2:	bf00      	nop
		if(commandComplete==1)
 80011c4:	e7f2      	b.n	80011ac <main+0x50>
 80011c6:	bf00      	nop
 80011c8:	200002bc 	.word	0x200002bc
 80011cc:	20000304 	.word	0x20000304
 80011d0:	200002c8 	.word	0x200002c8
 80011d4:	20000310 	.word	0x20000310
 80011d8:	20000360 	.word	0x20000360
 80011dc:	200002e0 	.word	0x200002e0
 80011e0:	20000374 	.word	0x20000374
 80011e4:	400e6b51 	.word	0x400e6b51
 80011e8:	20000378 	.word	0x20000378
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000380 	.word	0x20000380

080011f4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80011fa:	4bab      	ldr	r3, [pc, #684]	; (80014a8 <int_Hardware+0x2b4>)
 80011fc:	4aab      	ldr	r2, [pc, #684]	; (80014ac <int_Hardware+0x2b8>)
 80011fe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8001200:	4ba9      	ldr	r3, [pc, #676]	; (80014a8 <int_Hardware+0x2b4>)
 8001202:	2209      	movs	r2, #9
 8001204:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001206:	2300      	movs	r3, #0
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	2300      	movs	r3, #0
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	2200      	movs	r2, #0
 8001212:	2102      	movs	r1, #2
 8001214:	48a4      	ldr	r0, [pc, #656]	; (80014a8 <int_Hardware+0x2b4>)
 8001216:	f002 f873 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 800121a:	48a3      	ldr	r0, [pc, #652]	; (80014a8 <int_Hardware+0x2b4>)
 800121c:	f002 f892 	bl	8003344 <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001220:	4ba3      	ldr	r3, [pc, #652]	; (80014b0 <int_Hardware+0x2bc>)
 8001222:	4aa4      	ldr	r2, [pc, #656]	; (80014b4 <int_Hardware+0x2c0>)
 8001224:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001226:	4ba2      	ldr	r3, [pc, #648]	; (80014b0 <int_Hardware+0x2bc>)
 8001228:	2205      	movs	r2, #5
 800122a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800122c:	2300      	movs	r3, #0
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	2300      	movs	r3, #0
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	2200      	movs	r2, #0
 8001238:	2101      	movs	r1, #1
 800123a:	489d      	ldr	r0, [pc, #628]	; (80014b0 <int_Hardware+0x2bc>)
 800123c:	f002 f860 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001240:	489b      	ldr	r0, [pc, #620]	; (80014b0 <int_Hardware+0x2bc>)
 8001242:	f002 f87f 	bl	8003344 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001246:	4b9c      	ldr	r3, [pc, #624]	; (80014b8 <int_Hardware+0x2c4>)
 8001248:	4a9a      	ldr	r2, [pc, #616]	; (80014b4 <int_Hardware+0x2c0>)
 800124a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800124c:	4b9a      	ldr	r3, [pc, #616]	; (80014b8 <int_Hardware+0x2c4>)
 800124e:	2202      	movs	r2, #2
 8001250:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001252:	2307      	movs	r3, #7
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	2300      	movs	r3, #0
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	4895      	ldr	r0, [pc, #596]	; (80014b8 <int_Hardware+0x2c4>)
 8001262:	f002 f84d 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001266:	4894      	ldr	r0, [pc, #592]	; (80014b8 <int_Hardware+0x2c4>)
 8001268:	f002 f86c 	bl	8003344 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800126c:	4b93      	ldr	r3, [pc, #588]	; (80014bc <int_Hardware+0x2c8>)
 800126e:	4a91      	ldr	r2, [pc, #580]	; (80014b4 <int_Hardware+0x2c0>)
 8001270:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8001272:	4b92      	ldr	r3, [pc, #584]	; (80014bc <int_Hardware+0x2c8>)
 8001274:	2203      	movs	r2, #3
 8001276:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001278:	2307      	movs	r3, #7
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	2200      	movs	r2, #0
 8001284:	2102      	movs	r1, #2
 8001286:	488d      	ldr	r0, [pc, #564]	; (80014bc <int_Hardware+0x2c8>)
 8001288:	f002 f83a 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800128c:	488b      	ldr	r0, [pc, #556]	; (80014bc <int_Hardware+0x2c8>)
 800128e:	f002 f859 	bl	8003344 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <int_Hardware+0x2cc>)
 8001294:	4a87      	ldr	r2, [pc, #540]	; (80014b4 <int_Hardware+0x2c0>)
 8001296:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001298:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <int_Hardware+0x2cc>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800129e:	2302      	movs	r3, #2
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	2300      	movs	r3, #0
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	2200      	movs	r2, #0
 80012aa:	2102      	movs	r1, #2
 80012ac:	4884      	ldr	r0, [pc, #528]	; (80014c0 <int_Hardware+0x2cc>)
 80012ae:	f002 f827 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 80012b2:	4883      	ldr	r0, [pc, #524]	; (80014c0 <int_Hardware+0x2cc>)
 80012b4:	f002 f846 	bl	8003344 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 80012b8:	4b82      	ldr	r3, [pc, #520]	; (80014c4 <int_Hardware+0x2d0>)
 80012ba:	4a7c      	ldr	r2, [pc, #496]	; (80014ac <int_Hardware+0x2b8>)
 80012bc:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <int_Hardware+0x2d0>)
 80012c0:	220c      	movs	r2, #12
 80012c2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012c4:	2300      	movs	r3, #0
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	2200      	movs	r2, #0
 80012d0:	2101      	movs	r1, #1
 80012d2:	487c      	ldr	r0, [pc, #496]	; (80014c4 <int_Hardware+0x2d0>)
 80012d4:	f002 f814 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80012d8:	487a      	ldr	r0, [pc, #488]	; (80014c4 <int_Hardware+0x2d0>)
 80012da:	f002 f833 	bl	8003344 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80012de:	4b7a      	ldr	r3, [pc, #488]	; (80014c8 <int_Hardware+0x2d4>)
 80012e0:	4a72      	ldr	r2, [pc, #456]	; (80014ac <int_Hardware+0x2b8>)
 80012e2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012e4:	4b78      	ldr	r3, [pc, #480]	; (80014c8 <int_Hardware+0x2d4>)
 80012e6:	220a      	movs	r2, #10
 80012e8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012ea:	2300      	movs	r3, #0
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	2300      	movs	r3, #0
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2200      	movs	r2, #0
 80012f6:	2101      	movs	r1, #1
 80012f8:	4873      	ldr	r0, [pc, #460]	; (80014c8 <int_Hardware+0x2d4>)
 80012fa:	f002 f801 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80012fe:	4872      	ldr	r0, [pc, #456]	; (80014c8 <int_Hardware+0x2d4>)
 8001300:	f002 f820 	bl	8003344 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8001304:	4b71      	ldr	r3, [pc, #452]	; (80014cc <int_Hardware+0x2d8>)
 8001306:	4a6b      	ldr	r2, [pc, #428]	; (80014b4 <int_Hardware+0x2c0>)
 8001308:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 800130a:	4b70      	ldr	r3, [pc, #448]	; (80014cc <int_Hardware+0x2d8>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001310:	2302      	movs	r3, #2
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	486b      	ldr	r0, [pc, #428]	; (80014cc <int_Hardware+0x2d8>)
 8001320:	f001 ffee 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001324:	4869      	ldr	r0, [pc, #420]	; (80014cc <int_Hardware+0x2d8>)
 8001326:	f002 f80d 	bl	8003344 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 800132a:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <int_Hardware+0x2dc>)
 800132c:	4a69      	ldr	r2, [pc, #420]	; (80014d4 <int_Hardware+0x2e0>)
 800132e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001330:	4b67      	ldr	r3, [pc, #412]	; (80014d0 <int_Hardware+0x2dc>)
 8001332:	2202      	movs	r2, #2
 8001334:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001336:	2300      	movs	r3, #0
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2300      	movs	r3, #0
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	2200      	movs	r2, #0
 8001342:	2101      	movs	r1, #1
 8001344:	4862      	ldr	r0, [pc, #392]	; (80014d0 <int_Hardware+0x2dc>)
 8001346:	f001 ffdb 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800134a:	4861      	ldr	r0, [pc, #388]	; (80014d0 <int_Hardware+0x2dc>)
 800134c:	f001 fffa 	bl	8003344 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <int_Hardware+0x2e4>)
 8001352:	4a56      	ldr	r2, [pc, #344]	; (80014ac <int_Hardware+0x2b8>)
 8001354:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <int_Hardware+0x2e4>)
 8001358:	220b      	movs	r2, #11
 800135a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800135c:	2300      	movs	r3, #0
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	2300      	movs	r3, #0
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2200      	movs	r2, #0
 8001368:	2101      	movs	r1, #1
 800136a:	485b      	ldr	r0, [pc, #364]	; (80014d8 <int_Hardware+0x2e4>)
 800136c:	f001 ffc8 	bl	8003300 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001370:	4859      	ldr	r0, [pc, #356]	; (80014d8 <int_Hardware+0x2e4>)
 8001372:	f001 ffe7 	bl	8003344 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8001376:	4b59      	ldr	r3, [pc, #356]	; (80014dc <int_Hardware+0x2e8>)
 8001378:	4a59      	ldr	r2, [pc, #356]	; (80014e0 <int_Hardware+0x2ec>)
 800137a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800137c:	4b57      	ldr	r3, [pc, #348]	; (80014dc <int_Hardware+0x2e8>)
 800137e:	2202      	movs	r2, #2
 8001380:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <int_Hardware+0x2e8>)
 8001384:	2201      	movs	r2, #1
 8001386:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001388:	4b54      	ldr	r3, [pc, #336]	; (80014dc <int_Hardware+0x2e8>)
 800138a:	2200      	movs	r2, #0
 800138c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <int_Hardware+0x2e8>)
 8001390:	2200      	movs	r2, #0
 8001392:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001394:	4b51      	ldr	r3, [pc, #324]	; (80014dc <int_Hardware+0x2e8>)
 8001396:	2201      	movs	r2, #1
 8001398:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800139a:	4b50      	ldr	r3, [pc, #320]	; (80014dc <int_Hardware+0x2e8>)
 800139c:	2201      	movs	r2, #1
 800139e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 80013a0:	484e      	ldr	r0, [pc, #312]	; (80014dc <int_Hardware+0x2e8>)
 80013a2:	f002 fd65 	bl	8003e70 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 80013a6:	4b4f      	ldr	r3, [pc, #316]	; (80014e4 <int_Hardware+0x2f0>)
 80013a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ac:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013ae:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <int_Hardware+0x2f0>)
 80013b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b4:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013b6:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <int_Hardware+0x2f0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <int_Hardware+0x2f0>)
 80013be:	22fa      	movs	r2, #250	; 0xfa
 80013c0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013c2:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <int_Hardware+0x2f0>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80013c8:	4846      	ldr	r0, [pc, #280]	; (80014e4 <int_Hardware+0x2f0>)
 80013ca:	f000 fd75 	bl	8001eb8 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 80013ce:	4b46      	ldr	r3, [pc, #280]	; (80014e8 <int_Hardware+0x2f4>)
 80013d0:	4a46      	ldr	r2, [pc, #280]	; (80014ec <int_Hardware+0x2f8>)
 80013d2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <int_Hardware+0x2f4>)
 80013d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013da:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013dc:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <int_Hardware+0x2f4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <int_Hardware+0x2f4>)
 80013e4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013e8:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <int_Hardware+0x2f4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 80013f0:	483d      	ldr	r0, [pc, #244]	; (80014e8 <int_Hardware+0x2f4>)
 80013f2:	f000 fd61 	bl	8001eb8 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <int_Hardware+0x2fc>)
 80013f8:	4a3e      	ldr	r2, [pc, #248]	; (80014f4 <int_Hardware+0x300>)
 80013fa:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013fc:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <int_Hardware+0x2fc>)
 80013fe:	220a      	movs	r2, #10
 8001400:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <int_Hardware+0x2fc>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <int_Hardware+0x2fc>)
 800140a:	2264      	movs	r2, #100	; 0x64
 800140c:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <int_Hardware+0x2fc>)
 8001410:	2200      	movs	r2, #0
 8001412:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8001414:	4836      	ldr	r0, [pc, #216]	; (80014f0 <int_Hardware+0x2fc>)
 8001416:	f000 fd4f 	bl	8001eb8 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <int_Hardware+0x304>)
 800141c:	4a23      	ldr	r2, [pc, #140]	; (80014ac <int_Hardware+0x2b8>)
 800141e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <int_Hardware+0x304>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001426:	4b35      	ldr	r3, [pc, #212]	; (80014fc <int_Hardware+0x308>)
 8001428:	4a33      	ldr	r2, [pc, #204]	; (80014f8 <int_Hardware+0x304>)
 800142a:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800142c:	4b33      	ldr	r3, [pc, #204]	; (80014fc <int_Hardware+0x308>)
 800142e:	2202      	movs	r2, #2
 8001430:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001432:	4832      	ldr	r0, [pc, #200]	; (80014fc <int_Hardware+0x308>)
 8001434:	f000 fec4 	bl	80021c0 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <int_Hardware+0x30c>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <int_Hardware+0x2b8>)
 800143c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <int_Hardware+0x30c>)
 8001440:	2203      	movs	r2, #3
 8001442:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001444:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <int_Hardware+0x310>)
 8001446:	4a2e      	ldr	r2, [pc, #184]	; (8001500 <int_Hardware+0x30c>)
 8001448:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <int_Hardware+0x310>)
 800144c:	2202      	movs	r2, #2
 800144e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8001450:	482c      	ldr	r0, [pc, #176]	; (8001504 <int_Hardware+0x310>)
 8001452:	f000 feb5 	bl	80021c0 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001456:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <int_Hardware+0x314>)
 8001458:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <int_Hardware+0x300>)
 800145a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800145c:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <int_Hardware+0x314>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <int_Hardware+0x314>)
 8001464:	220a      	movs	r2, #10
 8001466:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <int_Hardware+0x314>)
 800146a:	2201      	movs	r2, #1
 800146c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800146e:	4826      	ldr	r0, [pc, #152]	; (8001508 <int_Hardware+0x314>)
 8001470:	f002 fa02 	bl	8003878 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001474:	2101      	movs	r1, #1
 8001476:	4824      	ldr	r0, [pc, #144]	; (8001508 <int_Hardware+0x314>)
 8001478:	f002 fb5e 	bl	8003b38 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <int_Hardware+0x318>)
 800147e:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <int_Hardware+0x300>)
 8001480:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <int_Hardware+0x318>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <int_Hardware+0x318>)
 800148a:	220a      	movs	r2, #10
 800148c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <int_Hardware+0x318>)
 8001490:	2201      	movs	r2, #1
 8001492:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001494:	481d      	ldr	r0, [pc, #116]	; (800150c <int_Hardware+0x318>)
 8001496:	f002 f9ef 	bl	8003878 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 800149a:	2101      	movs	r1, #1
 800149c:	481b      	ldr	r0, [pc, #108]	; (800150c <int_Hardware+0x318>)
 800149e:	f002 fb4b 	bl	8003b38 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000218 	.word	0x20000218
 80014ac:	40020800 	.word	0x40020800
 80014b0:	200001fc 	.word	0x200001fc
 80014b4:	40020000 	.word	0x40020000
 80014b8:	2000024c 	.word	0x2000024c
 80014bc:	20000258 	.word	0x20000258
 80014c0:	200002b0 	.word	0x200002b0
 80014c4:	200002bc 	.word	0x200002bc
 80014c8:	200002c8 	.word	0x200002c8
 80014cc:	200002f8 	.word	0x200002f8
 80014d0:	20000304 	.word	0x20000304
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	20000310 	.word	0x20000310
 80014dc:	20000264 	.word	0x20000264
 80014e0:	40004400 	.word	0x40004400
 80014e4:	20000208 	.word	0x20000208
 80014e8:	20000350 	.word	0x20000350
 80014ec:	40000400 	.word	0x40000400
 80014f0:	20000340 	.word	0x20000340
 80014f4:	40000c00 	.word	0x40000c00
 80014f8:	20000224 	.word	0x20000224
 80014fc:	20000230 	.word	0x20000230
 8001500:	20000238 	.word	0x20000238
 8001504:	20000244 	.word	0x20000244
 8001508:	200002d4 	.word	0x200002d4
 800150c:	2000031c 	.word	0x2000031c

08001510 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 8001514:	2000      	movs	r0, #0
 8001516:	f002 f933 	bl	8003780 <configMCO2>
	configMCO2PRE(4);
 800151a:	2004      	movs	r0, #4
 800151c:	f002 f94c 	bl	80037b8 <configMCO2PRE>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <int_Config_Motor+0x58>)
 800152a:	4a15      	ldr	r2, [pc, #84]	; (8001580 <int_Config_Motor+0x5c>)
 800152c:	605a      	str	r2, [r3, #4]
	handler_Motor_R.configMotor.frecuency = &value_period;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <int_Config_Motor+0x58>)
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <int_Config_Motor+0x60>)
 8001532:	601a      	str	r2, [r3, #0]
	handler_Motor_R.configMotor.dir = SET;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <int_Config_Motor+0x58>)
 8001536:	2201      	movs	r2, #1
 8001538:	721a      	strb	r2, [r3, #8]
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <int_Config_Motor+0x58>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <int_Config_Motor+0x64>)
 800153e:	611a      	str	r2, [r3, #16]
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <int_Config_Motor+0x58>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <int_Config_Motor+0x68>)
 8001544:	60da      	str	r2, [r3, #12]
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <int_Config_Motor+0x58>)
 8001548:	4a11      	ldr	r2, [pc, #68]	; (8001590 <int_Config_Motor+0x6c>)
 800154a:	615a      	str	r2, [r3, #20]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <int_Config_Motor+0x70>)
 800154e:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <int_Config_Motor+0x5c>)
 8001550:	605a      	str	r2, [r3, #4]
	handler_Motor_L.configMotor.frecuency = &value_period;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <int_Config_Motor+0x70>)
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <int_Config_Motor+0x60>)
 8001556:	601a      	str	r2, [r3, #0]
	handler_Motor_L.configMotor.dir = SET;
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <int_Config_Motor+0x70>)
 800155a:	2201      	movs	r2, #1
 800155c:	721a      	strb	r2, [r3, #8]
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <int_Config_Motor+0x70>)
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <int_Config_Motor+0x74>)
 8001562:	611a      	str	r2, [r3, #16]
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <int_Config_Motor+0x70>)
 8001566:	4a0d      	ldr	r2, [pc, #52]	; (800159c <int_Config_Motor+0x78>)
 8001568:	60da      	str	r2, [r3, #12]
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <int_Config_Motor+0x70>)
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <int_Config_Motor+0x7c>)
 800156e:	615a      	str	r2, [r3, #20]

};
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200002e0 	.word	0x200002e0
 8001580:	41a00000 	.word	0x41a00000
 8001584:	20000002 	.word	0x20000002
 8001588:	200002c8 	.word	0x200002c8
 800158c:	200002bc 	.word	0x200002bc
 8001590:	200002d4 	.word	0x200002d4
 8001594:	20000328 	.word	0x20000328
 8001598:	20000310 	.word	0x20000310
 800159c:	20000304 	.word	0x20000304
 80015a0:	2000031c 	.word	0x2000031c

080015a4 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <BasicTimer2_Callback+0x10>)
 80015aa:	f002 f820 	bl	80035ee <GPIOxTooglePin>
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200001fc 	.word	0x200001fc

080015b8 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af04      	add	r7, sp, #16
	if(flag_motor==2)
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <BasicTimer3_Callback+0x10c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d11e      	bne.n	8001604 <BasicTimer3_Callback+0x4c>
	{
		//Aumentamos el contador de tiempo
		count_time++;
 80015c6:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <BasicTimer3_Callback+0x110>)
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <BasicTimer3_Callback+0x110>)
 80015d0:	801a      	strh	r2, [r3, #0]
		//Convertimos el valor y imprimemos
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.configMotor.count), (handler_Motor_L.configMotor.count));
 80015d2:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <BasicTimer3_Callback+0x110>)
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <BasicTimer3_Callback+0x114>)
 80015da:	895b      	ldrh	r3, [r3, #10]
 80015dc:	4619      	mov	r1, r3
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <BasicTimer3_Callback+0x118>)
 80015e0:	895b      	ldrh	r3, [r3, #10]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	460b      	mov	r3, r1
 80015e6:	493b      	ldr	r1, [pc, #236]	; (80016d4 <BasicTimer3_Callback+0x11c>)
 80015e8:	483b      	ldr	r0, [pc, #236]	; (80016d8 <BasicTimer3_Callback+0x120>)
 80015ea:	f003 ff9f 	bl	800552c <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80015ee:	493a      	ldr	r1, [pc, #232]	; (80016d8 <BasicTimer3_Callback+0x120>)
 80015f0:	483a      	ldr	r0, [pc, #232]	; (80016dc <BasicTimer3_Callback+0x124>)
 80015f2:	f002 fee1 	bl	80043b8 <writeMsgForTXE>
		//Reiniciamos el numero de conteos
		handler_Motor_R.configMotor.count = 0;
 80015f6:	4b35      	ldr	r3, [pc, #212]	; (80016cc <BasicTimer3_Callback+0x114>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	815a      	strh	r2, [r3, #10]
		handler_Motor_L.configMotor.count = 0;
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <BasicTimer3_Callback+0x118>)
 80015fe:	2200      	movs	r2, #0
 8001600:	815a      	strh	r2, [r3, #10]
		//Reiniciamos el numero de conteos
		handler_Motor_R.configMotor.count = 0;
		handler_Motor_L.configMotor.count = 0;
	}

}
 8001602:	e05b      	b.n	80016bc <BasicTimer3_Callback+0x104>
	else if(flag_motor==3)
 8001604:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <BasicTimer3_Callback+0x10c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d157      	bne.n	80016bc <BasicTimer3_Callback+0x104>
		velocity_L = (cm_L*(handler_Motor_L.configMotor.count))/periodo_TIMER_Count;   //[m/s]
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <BasicTimer3_Callback+0x118>)
 800160e:	895b      	ldrh	r3, [r3, #10]
 8001610:	ee07 3a90 	vmov	s15, r3
 8001614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001618:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <BasicTimer3_Callback+0x128>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001622:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <BasicTimer3_Callback+0x12c>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	ee07 3a90 	vmov	s15, r3
 800162a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <BasicTimer3_Callback+0x130>)
 8001634:	edc3 7a00 	vstr	s15, [r3]
		velocity_R = (cm_R*(handler_Motor_L.configMotor.count))/periodo_TIMER_Count;   //[m/s]
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <BasicTimer3_Callback+0x118>)
 800163a:	895b      	ldrh	r3, [r3, #10]
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <BasicTimer3_Callback+0x134>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <BasicTimer3_Callback+0x12c>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165e:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <BasicTimer3_Callback+0x138>)
 8001660:	edc3 7a00 	vstr	s15, [r3]
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <BasicTimer3_Callback+0x110>)
 8001666:	881a      	ldrh	r2, [r3, #0]
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <BasicTimer3_Callback+0x12c>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	4413      	add	r3, r2
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <BasicTimer3_Callback+0x110>)
 8001672:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.2f\t%#.2f\n", count_time, velocity_L , velocity_R);
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <BasicTimer3_Callback+0x110>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	461e      	mov	r6, r3
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <BasicTimer3_Callback+0x130>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff7a 	bl	8000578 <__aeabi_f2d>
 8001684:	4604      	mov	r4, r0
 8001686:	460d      	mov	r5, r1
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <BasicTimer3_Callback+0x138>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff73 	bl	8000578 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800169a:	e9cd 4500 	strd	r4, r5, [sp]
 800169e:	4632      	mov	r2, r6
 80016a0:	4914      	ldr	r1, [pc, #80]	; (80016f4 <BasicTimer3_Callback+0x13c>)
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <BasicTimer3_Callback+0x120>)
 80016a4:	f003 ff42 	bl	800552c <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80016a8:	490b      	ldr	r1, [pc, #44]	; (80016d8 <BasicTimer3_Callback+0x120>)
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <BasicTimer3_Callback+0x124>)
 80016ac:	f002 fe84 	bl	80043b8 <writeMsgForTXE>
		handler_Motor_R.configMotor.count = 0;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <BasicTimer3_Callback+0x114>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	815a      	strh	r2, [r3, #10]
		handler_Motor_L.configMotor.count = 0;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <BasicTimer3_Callback+0x118>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	815a      	strh	r2, [r3, #10]
}
 80016bc:	bf00      	nop
 80016be:	3704      	adds	r7, #4
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c4:	20000364 	.word	0x20000364
 80016c8:	20000366 	.word	0x20000366
 80016cc:	200002e0 	.word	0x200002e0
 80016d0:	20000328 	.word	0x20000328
 80016d4:	08009998 	.word	0x08009998
 80016d8:	20000270 	.word	0x20000270
 80016dc:	20000264 	.word	0x20000264
 80016e0:	20000374 	.word	0x20000374
 80016e4:	20000004 	.word	0x20000004
 80016e8:	2000036c 	.word	0x2000036c
 80016ec:	20000378 	.word	0x20000378
 80016f0:	20000370 	.word	0x20000370
 80016f4:	080099a4 	.word	0x080099a4

080016f8 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 80016fc:	f002 fe9a 	bl	8004434 <getRxData>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <BasicUSART2_Callback+0x18>)
 8001706:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001708:	f000 f85c 	bl	80017c4 <recepcionCommand>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000000 	.word	0x20000000

08001714 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	handler_Motor_R.configMotor.count++;
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <callback_extInt1+0x44>)
 800171a:	895b      	ldrh	r3, [r3, #10]
 800171c:	3301      	adds	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <callback_extInt1+0x44>)
 8001722:	815a      	strh	r2, [r3, #10]
	//Verificamos que la bandera este arriba
	if(flag_motor==1 && flag_turn==1 && (limit_count_turn-2)<(handler_Motor_R.configMotor.count))
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <callback_extInt1+0x48>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d112      	bne.n	8001752 <callback_extInt1+0x3e>
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <callback_extInt1+0x4c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10e      	bne.n	8001752 <callback_extInt1+0x3e>
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <callback_extInt1+0x50>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	3b01      	subs	r3, #1
 800173a:	4a07      	ldr	r2, [pc, #28]	; (8001758 <callback_extInt1+0x44>)
 800173c:	8952      	ldrh	r2, [r2, #10]
 800173e:	4293      	cmp	r3, r2
 8001740:	dc07      	bgt.n	8001752 <callback_extInt1+0x3e>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 f9e8 	bl	8001b18 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <callback_extInt1+0x54>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fcda 	bl	8001106 <updateDirMotor>
	}

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002e0 	.word	0x200002e0
 800175c:	20000364 	.word	0x20000364
 8001760:	20000365 	.word	0x20000365
 8001764:	20000368 	.word	0x20000368
 8001768:	20000360 	.word	0x20000360

0800176c <callback_extInt3>:
void callback_extInt3(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	handler_Motor_L.configMotor.count++;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <callback_extInt3+0x44>)
 8001772:	895b      	ldrh	r3, [r3, #10]
 8001774:	3301      	adds	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <callback_extInt3+0x44>)
 800177a:	815a      	strh	r2, [r3, #10]
	//Verificamos que la bandera este arriba
	if(flag_motor==1 && flag_turn==2 && (limit_count_turn-2)<(handler_Motor_L.configMotor.count))
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <callback_extInt3+0x48>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d112      	bne.n	80017aa <callback_extInt3+0x3e>
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <callback_extInt3+0x4c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d10e      	bne.n	80017aa <callback_extInt3+0x3e>
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <callback_extInt3+0x50>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	3b01      	subs	r3, #1
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <callback_extInt3+0x44>)
 8001794:	8952      	ldrh	r2, [r2, #10]
 8001796:	4293      	cmp	r3, r2
 8001798:	dc07      	bgt.n	80017aa <callback_extInt3+0x3e>
	{
		//Desactivamos los motores
		status_motor(RESET);
 800179a:	2000      	movs	r0, #0
 800179c:	f000 f9bc 	bl	8001b18 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <callback_extInt3+0x54>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fcae 	bl	8001106 <updateDirMotor>
	}
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000328 	.word	0x20000328
 80017b4:	20000364 	.word	0x20000364
 80017b8:	20000365 	.word	0x20000365
 80017bc:	20000368 	.word	0x20000368
 80017c0:	20000360 	.word	0x20000360

080017c4 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	if(charRead == '@')
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <recepcionCommand+0x4c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b40      	cmp	r3, #64	; 0x40
 80017ce:	d10c      	bne.n	80017ea <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <recepcionCommand+0x50>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <recepcionCommand+0x54>)
 80017d8:	2100      	movs	r1, #0
 80017da:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <recepcionCommand+0x58>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <recepcionCommand+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 80017e8:	e00c      	b.n	8001804 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <recepcionCommand+0x50>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <recepcionCommand+0x4c>)
 80017f2:	7819      	ldrb	r1, [r3, #0]
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <recepcionCommand+0x54>)
 80017f6:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <recepcionCommand+0x50>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <recepcionCommand+0x50>)
 8001802:	701a      	strb	r2, [r3, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000000 	.word	0x20000000
 8001814:	2000037c 	.word	0x2000037c
 8001818:	20000380 	.word	0x20000380
 800181c:	20000008 	.word	0x20000008

08001820 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b09a      	sub	sp, #104	; 0x68
 8001824:	af04      	add	r7, sp, #16
 8001826:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8001828:	2300      	movs	r3, #0
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	223c      	movs	r2, #60	; 0x3c
 8001832:	2100      	movs	r1, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fff1 	bl	800481c <memset>
	int firtsParameter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 800184a:	f107 0114 	add.w	r1, r7, #20
 800184e:	f107 0218 	add.w	r2, r7, #24
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	9302      	str	r3, [sp, #8]
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	f107 0310 	add.w	r3, r7, #16
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	460b      	mov	r3, r1
 8001866:	4990      	ldr	r1, [pc, #576]	; (8001aa8 <runCommand+0x288>)
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f003 fe7f 	bl	800556c <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	498e      	ldr	r1, [pc, #568]	; (8001aac <runCommand+0x28c>)
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fcb3 	bl	80001e0 <strcmp>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d118      	bne.n	80018b2 <runCommand+0x92>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8001880:	498b      	ldr	r1, [pc, #556]	; (8001ab0 <runCommand+0x290>)
 8001882:	488c      	ldr	r0, [pc, #560]	; (8001ab4 <runCommand+0x294>)
 8001884:	f002 fd98 	bl	80043b8 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001888:	498b      	ldr	r1, [pc, #556]	; (8001ab8 <runCommand+0x298>)
 800188a:	488a      	ldr	r0, [pc, #552]	; (8001ab4 <runCommand+0x294>)
 800188c:	f002 fd94 	bl	80043b8 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "8) frequency # --- cambiar el valor de la frecuenciea en la prueba estatica en HZ \n");
 8001890:	498a      	ldr	r1, [pc, #552]	; (8001abc <runCommand+0x29c>)
 8001892:	4888      	ldr	r0, [pc, #544]	; (8001ab4 <runCommand+0x294>)
 8001894:	f002 fd90 	bl	80043b8 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "11) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_L #:dutty_R \n");
 8001898:	4989      	ldr	r1, [pc, #548]	; (8001ac0 <runCommand+0x2a0>)
 800189a:	4886      	ldr	r0, [pc, #536]	; (8001ab4 <runCommand+0x294>)
 800189c:	f002 fd8c 	bl	80043b8 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "13) startvel # # # # ---Inicia el estudio de velocidad, #: dutty_L #dutty_R  #: freq. \n");
 80018a0:	4988      	ldr	r1, [pc, #544]	; (8001ac4 <runCommand+0x2a4>)
 80018a2:	4884      	ldr	r0, [pc, #528]	; (8001ab4 <runCommand+0x294>)
 80018a4:	f002 fd88 	bl	80043b8 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "14) stop ---Para el estudio en medio de la ejecucion \n");
 80018a8:	4987      	ldr	r1, [pc, #540]	; (8001ac8 <runCommand+0x2a8>)
 80018aa:	4882      	ldr	r0, [pc, #520]	; (8001ab4 <runCommand+0x294>)
 80018ac:	f002 fd84 	bl	80043b8 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 80018b0:	e0f5      	b.n	8001a9e <runCommand+0x27e>
	else if (strcmp(cmd, "frequency") == 0)
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	4985      	ldr	r1, [pc, #532]	; (8001acc <runCommand+0x2ac>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fc91 	bl	80001e0 <strcmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <runCommand+0xb4>
		frequency_PWM_Motor = 100000/firtsParameter;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4a82      	ldr	r2, [pc, #520]	; (8001ad0 <runCommand+0x2b0>)
 80018c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b81      	ldr	r3, [pc, #516]	; (8001ad4 <runCommand+0x2b4>)
 80018d0:	801a      	strh	r2, [r3, #0]
}
 80018d2:	e0e4      	b.n	8001a9e <runCommand+0x27e>
	else if (strcmp(cmd, "line") == 0)
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	497f      	ldr	r1, [pc, #508]	; (8001ad8 <runCommand+0x2b8>)
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fc80 	bl	80001e0 <strcmp>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80db 	beq.w	8001a9e <runCommand+0x27e>
	else if (strcmp(cmd, "turn") == 0)
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	497b      	ldr	r1, [pc, #492]	; (8001adc <runCommand+0x2bc>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fc76 	bl	80001e0 <strcmp>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d154      	bne.n	80019a4 <runCommand+0x184>
		flag_turn = secondParameter;
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b78      	ldr	r3, [pc, #480]	; (8001ae0 <runCommand+0x2c0>)
 8001900:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 8001902:	4b77      	ldr	r3, [pc, #476]	; (8001ae0 <runCommand+0x2c0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d114      	bne.n	8001934 <runCommand+0x114>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	4a75      	ldr	r2, [pc, #468]	; (8001ae4 <runCommand+0x2c4>)
 800190e:	fb82 1203 	smull	r1, r2, r2, r3
 8001912:	1052      	asrs	r2, r2, #1
 8001914:	17db      	asrs	r3, r3, #31
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	b29b      	uxth	r3, r3
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	4b72      	ldr	r3, [pc, #456]	; (8001ae8 <runCommand+0x2c8>)
 8001920:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 8001922:	4b72      	ldr	r3, [pc, #456]	; (8001aec <runCommand+0x2cc>)
 8001924:	4a72      	ldr	r2, [pc, #456]	; (8001af0 <runCommand+0x2d0>)
 8001926:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001928:	4b70      	ldr	r3, [pc, #448]	; (8001aec <runCommand+0x2cc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fbea 	bl	8001106 <updateDirMotor>
 8001932:	e013      	b.n	800195c <runCommand+0x13c>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	4a6b      	ldr	r2, [pc, #428]	; (8001ae4 <runCommand+0x2c4>)
 8001938:	fb82 1203 	smull	r1, r2, r2, r3
 800193c:	1052      	asrs	r2, r2, #1
 800193e:	17db      	asrs	r3, r3, #31
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b29b      	uxth	r3, r3
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <runCommand+0x2c8>)
 800194a:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 800194c:	4b67      	ldr	r3, [pc, #412]	; (8001aec <runCommand+0x2cc>)
 800194e:	4a69      	ldr	r2, [pc, #420]	; (8001af4 <runCommand+0x2d4>)
 8001950:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <runCommand+0x2cc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fbd5 	bl	8001106 <updateDirMotor>
		config_motor(1, periodo_TIMER_Count, (thirdParameter/100), (forthParameter/100), frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 800195c:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <runCommand+0x2d8>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4a65      	ldr	r2, [pc, #404]	; (8001afc <runCommand+0x2dc>)
 8001966:	fb82 0203 	smull	r0, r2, r2, r3
 800196a:	1152      	asrs	r2, r2, #5
 800196c:	17db      	asrs	r3, r3, #31
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4a60      	ldr	r2, [pc, #384]	; (8001afc <runCommand+0x2dc>)
 800197c:	fb82 0203 	smull	r0, r2, r2, r3
 8001980:	1152      	asrs	r2, r2, #5
 8001982:	17db      	asrs	r3, r3, #31
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	ee07 3a10 	vmov	s14, r3
 800198a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800198e:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <runCommand+0x2b4>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	eef0 0a47 	vmov.f32	s1, s14
 8001998:	eeb0 0a67 	vmov.f32	s0, s15
 800199c:	2001      	movs	r0, #1
 800199e:	f000 f93d 	bl	8001c1c <config_motor>
}
 80019a2:	e07c      	b.n	8001a9e <runCommand+0x27e>
	else if (strcmp(cmd, "start") == 0)
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4955      	ldr	r1, [pc, #340]	; (8001b00 <runCommand+0x2e0>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc18 	bl	80001e0 <strcmp>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d12a      	bne.n	8001a0c <runCommand+0x1ec>
		periodo_TIMER_Count = firtsParameter;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <runCommand+0x2d8>)
 80019bc:	801a      	strh	r2, [r3, #0]
		config_motor(2, periodo_TIMER_Count, (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 80019be:	4b4e      	ldr	r3, [pc, #312]	; (8001af8 <runCommand+0x2d8>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4a4d      	ldr	r2, [pc, #308]	; (8001afc <runCommand+0x2dc>)
 80019c8:	fb82 0203 	smull	r0, r2, r2, r3
 80019cc:	1152      	asrs	r2, r2, #5
 80019ce:	17db      	asrs	r3, r3, #31
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4a47      	ldr	r2, [pc, #284]	; (8001afc <runCommand+0x2dc>)
 80019de:	fb82 0203 	smull	r0, r2, r2, r3
 80019e2:	1152      	asrs	r2, r2, #5
 80019e4:	17db      	asrs	r3, r3, #31
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	ee07 3a10 	vmov	s14, r3
 80019ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	461a      	mov	r2, r3
 80019f4:	eef0 0a47 	vmov.f32	s1, s14
 80019f8:	eeb0 0a67 	vmov.f32	s0, s15
 80019fc:	2002      	movs	r0, #2
 80019fe:	f000 f90d 	bl	8001c1c <config_motor>
		writeMsg(&handler_USART_USB, "Inicio conteo... \n");
 8001a02:	4940      	ldr	r1, [pc, #256]	; (8001b04 <runCommand+0x2e4>)
 8001a04:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <runCommand+0x294>)
 8001a06:	f002 fcb8 	bl	800437a <writeMsg>
}
 8001a0a:	e048      	b.n	8001a9e <runCommand+0x27e>
	else if (strcmp(cmd, "reaction") == 0)
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	493d      	ldr	r1, [pc, #244]	; (8001b08 <runCommand+0x2e8>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fbe4 	bl	80001e0 <strcmp>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d12a      	bne.n	8001a74 <runCommand+0x254>
		periodo_TIMER_Count = firtsParameter;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <runCommand+0x2d8>)
 8001a24:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <runCommand+0x2d8>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4a33      	ldr	r2, [pc, #204]	; (8001afc <runCommand+0x2dc>)
 8001a30:	fb82 0203 	smull	r0, r2, r2, r3
 8001a34:	1152      	asrs	r2, r2, #5
 8001a36:	17db      	asrs	r3, r3, #31
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <runCommand+0x2dc>)
 8001a46:	fb82 0203 	smull	r0, r2, r2, r3
 8001a4a:	1152      	asrs	r2, r2, #5
 8001a4c:	17db      	asrs	r3, r3, #31
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	ee07 3a10 	vmov	s14, r3
 8001a54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	eef0 0a47 	vmov.f32	s1, s14
 8001a60:	eeb0 0a67 	vmov.f32	s0, s15
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 f8d9 	bl	8001c1c <config_motor>
		writeMsg(&handler_USART_USB, "Inicio conteo... \n");
 8001a6a:	4926      	ldr	r1, [pc, #152]	; (8001b04 <runCommand+0x2e4>)
 8001a6c:	4811      	ldr	r0, [pc, #68]	; (8001ab4 <runCommand+0x294>)
 8001a6e:	f002 fc84 	bl	800437a <writeMsg>
}
 8001a72:	e014      	b.n	8001a9e <runCommand+0x27e>
	else if (strcmp(cmd, "stop") == 0)
 8001a74:	f107 0318 	add.w	r3, r7, #24
 8001a78:	4924      	ldr	r1, [pc, #144]	; (8001b0c <runCommand+0x2ec>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fbb0 	bl	80001e0 <strcmp>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d107      	bne.n	8001a96 <runCommand+0x276>
		status_motor(RESET);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f000 f846 	bl	8001b18 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 8001a8c:	4920      	ldr	r1, [pc, #128]	; (8001b10 <runCommand+0x2f0>)
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <runCommand+0x294>)
 8001a90:	f002 fc92 	bl	80043b8 <writeMsgForTXE>
}
 8001a94:	e003      	b.n	8001a9e <runCommand+0x27e>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8001a96:	491f      	ldr	r1, [pc, #124]	; (8001b14 <runCommand+0x2f4>)
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <runCommand+0x294>)
 8001a9a:	f002 fc8d 	bl	80043b8 <writeMsgForTXE>
}
 8001a9e:	bf00      	nop
 8001aa0:	3758      	adds	r7, #88	; 0x58
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	080099b4 	.word	0x080099b4
 8001aac:	080099c4 	.word	0x080099c4
 8001ab0:	080099cc 	.word	0x080099cc
 8001ab4:	20000264 	.word	0x20000264
 8001ab8:	080099dc 	.word	0x080099dc
 8001abc:	08009a08 	.word	0x08009a08
 8001ac0:	08009a5c 	.word	0x08009a5c
 8001ac4:	08009ab0 	.word	0x08009ab0
 8001ac8:	08009b08 	.word	0x08009b08
 8001acc:	08009b40 	.word	0x08009b40
 8001ad0:	000186a0 	.word	0x000186a0
 8001ad4:	20000006 	.word	0x20000006
 8001ad8:	08009b4c 	.word	0x08009b4c
 8001adc:	08009b54 	.word	0x08009b54
 8001ae0:	20000365 	.word	0x20000365
 8001ae4:	66666667 	.word	0x66666667
 8001ae8:	20000368 	.word	0x20000368
 8001aec:	20000360 	.word	0x20000360
 8001af0:	200002e0 	.word	0x200002e0
 8001af4:	20000328 	.word	0x20000328
 8001af8:	20000004 	.word	0x20000004
 8001afc:	51eb851f 	.word	0x51eb851f
 8001b00:	08009b5c 	.word	0x08009b5c
 8001b04:	08009b64 	.word	0x08009b64
 8001b08:	08009b78 	.word	0x08009b78
 8001b0c:	08009b84 	.word	0x08009b84
 8001b10:	08009b8c 	.word	0x08009b8c
 8001b14:	08009ba4 	.word	0x08009ba4

08001b18 <status_motor>:
     //Actualizamoe el valor del dutty
     updateDuttyMotor(ptrMotorHandler, u);
}

void status_motor(uint8_t status)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d13a      	bne.n	8001b9e <status_motor+0x86>
	{
		//Activamos la interrupcion
		if(flag_motor==2 || flag_motor==3)
 8001b28:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <status_motor+0xf4>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d003      	beq.n	8001b38 <status_motor+0x20>
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <status_motor+0xf4>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d103      	bne.n	8001b40 <status_motor+0x28>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4835      	ldr	r0, [pc, #212]	; (8001c10 <status_motor+0xf8>)
 8001b3c:	f000 faea 	bl	8002114 <statusiInterruptionTimer>
		}
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8001b40:	4b34      	ldr	r3, [pc, #208]	; (8001c14 <status_motor+0xfc>)
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	2101      	movs	r1, #1
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 fff6 	bl	8003b38 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8001b4c:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <status_motor+0x100>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	2101      	movs	r1, #1
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 fff0 	bl	8003b38 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <status_motor+0xfc>)
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <status_motor+0xfc>)
 8001b5e:	7a1b      	ldrb	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f001 fd15 	bl	8003598 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <status_motor+0x100>)
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	4b29      	ldr	r3, [pc, #164]	; (8001c18 <status_motor+0x100>)
 8001b74:	7a1b      	ldrb	r3, [r3, #8]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f001 fd0a 	bl	8003598 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <status_motor+0xfc>)
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fd04 	bl	8003598 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <status_motor+0x100>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 fcfe 	bl	8003598 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 8001b9c:	e032      	b.n	8001c04 <status_motor+0xec>
		if(flag_motor==2 || flag_motor==3)
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <status_motor+0xf4>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d003      	beq.n	8001bae <status_motor+0x96>
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <status_motor+0xf4>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d103      	bne.n	8001bb6 <status_motor+0x9e>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4817      	ldr	r0, [pc, #92]	; (8001c10 <status_motor+0xf8>)
 8001bb2:	f000 faaf 	bl	8002114 <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <status_motor+0xfc>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 ffbb 	bl	8003b38 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <status_motor+0x100>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f001 ffb5 	bl	8003b38 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <status_motor+0xfc>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f001 fcdf 	bl	8003598 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <status_motor+0x100>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f001 fcd9 	bl	8003598 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <status_motor+0xfc>)
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 fcd3 	bl	8003598 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <status_motor+0x100>)
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fccd 	bl	8003598 <GPIO_writePin>
		flag_motor = 0;
 8001bfe:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <status_motor+0xf4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000364 	.word	0x20000364
 8001c10:	20000350 	.word	0x20000350
 8001c14:	20000328 	.word	0x20000328
 8001c18:	200002e0 	.word	0x200002e0

08001c1c <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6139      	str	r1, [r7, #16]
 8001c26:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	4813      	ldr	r0, [pc, #76]	; (8001c88 <config_motor+0x6c>)
 8001c3a:	f000 fa8b 	bl	8002154 <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.configMotor.count=0;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <config_motor+0x70>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	815a      	strh	r2, [r3, #10]
	handler_Motor_L.configMotor.count=0;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <config_motor+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	815a      	strh	r2, [r3, #10]
	//Actualizamos el valor del dutty y frecuencia
	updateDuttyMotor(&handler_Motor_R, third);
 8001c4a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <config_motor+0x70>)
 8001c50:	f7ff fa22 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8001c54:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c58:	480d      	ldr	r0, [pc, #52]	; (8001c90 <config_motor+0x74>)
 8001c5a:	f7ff fa1d 	bl	8001098 <updateDuttyMotor>
	updateFrequencyMotor(&handler_Motor_R, &handler_TIMER_Motor, 100000/forth);
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <config_motor+0x78>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	490b      	ldr	r1, [pc, #44]	; (8001c98 <config_motor+0x7c>)
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <config_motor+0x70>)
 8001c6e:	f7ff fa2a 	bl	80010c6 <updateFrequencyMotor>
	//Cambio valor bandera
	flag_motor=status;
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <config_motor+0x80>)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff ff4d 	bl	8001b18 <status_motor>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000350 	.word	0x20000350
 8001c8c:	200002e0 	.word	0x200002e0
 8001c90:	20000328 	.word	0x20000328
 8001c94:	000186a0 	.word	0x000186a0
 8001c98:	20000340 	.word	0x20000340
 8001c9c:	20000364 	.word	0x20000364

08001ca0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ca2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ca4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	; (8001ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <LoopForever+0xe>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	; (8001cec <LoopForever+0x16>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cce:	f002 fd81 	bl	80047d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd2:	f7ff fa43 	bl	800115c <main>

08001cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cd6:	e7fe      	b.n	8001cd6 <LoopForever>
  ldr   r0, =_estack
 8001cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ce4:	0800a094 	.word	0x0800a094
  ldr r2, =_sbss
 8001ce8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cec:	20000c30 	.word	0x20000c30

08001cf0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC_IRQHandler>

08001cf2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
	return 1;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_kill>:

int _kill(int pid, int sig)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d0c:	f002 fd5c 	bl	80047c8 <__errno>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2216      	movs	r2, #22
 8001d14:	601a      	str	r2, [r3, #0]
	return -1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_exit>:

void _exit (int status)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffe7 	bl	8001d02 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d34:	e7fe      	b.n	8001d34 <_exit+0x12>

08001d36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e00a      	b.n	8001d5e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d48:	f3af 8000 	nop.w
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	60ba      	str	r2, [r7, #8]
 8001d54:	b2ca      	uxtb	r2, r1
 8001d56:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbf0      	blt.n	8001d48 <_read+0x12>
	}

return len;
 8001d66:	687b      	ldr	r3, [r7, #4]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e009      	b.n	8001d96 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dbf1      	blt.n	8001d82 <_write+0x12>
	}
	return len;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_close>:

int _close(int file)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	return -1;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd0:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_isatty>:

int _isatty(int file)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
	return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <_sbrk+0x5c>)
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <_sbrk+0x60>)
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <_sbrk+0x64>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <_sbrk+0x64>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <_sbrk+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d207      	bcs.n	8001e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e40:	f002 fcc2 	bl	80047c8 <__errno>
 8001e44:	4603      	mov	r3, r0
 8001e46:	220c      	movs	r2, #12
 8001e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e009      	b.n	8001e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <_sbrk+0x64>)
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <_sbrk+0x64>)
 8001e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e62:	68fb      	ldr	r3, [r7, #12]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20020000 	.word	0x20020000
 8001e70:	00000400 	.word	0x00000400
 8001e74:	200003c0 	.word	0x200003c0
 8001e78:	20000c30 	.word	0x20000c30

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d10a      	bne.n	8001ee0 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <BasicTimer_Config+0x19c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a61      	ldr	r2, [pc, #388]	; (8002054 <BasicTimer_Config+0x19c>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <BasicTimer_Config+0x1a0>)
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	e02e      	b.n	8001f3e <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a5d      	ldr	r2, [pc, #372]	; (800205c <BasicTimer_Config+0x1a4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10a      	bne.n	8001f00 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <BasicTimer_Config+0x19c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a59      	ldr	r2, [pc, #356]	; (8002054 <BasicTimer_Config+0x19c>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	4a59      	ldr	r2, [pc, #356]	; (8002060 <BasicTimer_Config+0x1a8>)
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e01e      	b.n	8001f3e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a57      	ldr	r2, [pc, #348]	; (8002064 <BasicTimer_Config+0x1ac>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10a      	bne.n	8001f20 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001f0a:	4b52      	ldr	r3, [pc, #328]	; (8002054 <BasicTimer_Config+0x19c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a51      	ldr	r2, [pc, #324]	; (8002054 <BasicTimer_Config+0x19c>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	4a53      	ldr	r2, [pc, #332]	; (8002068 <BasicTimer_Config+0x1b0>)
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e00e      	b.n	8001f3e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	4a51      	ldr	r2, [pc, #324]	; (800206c <BasicTimer_Config+0x1b4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d109      	bne.n	8001f3e <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001f2a:	4b4a      	ldr	r3, [pc, #296]	; (8002054 <BasicTimer_Config+0x19c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a49      	ldr	r2, [pc, #292]	; (8002054 <BasicTimer_Config+0x19c>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4a4d      	ldr	r2, [pc, #308]	; (8002070 <BasicTimer_Config+0x1b8>)
 8001f3c:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001f3e:	f001 fbeb 	bl	8003718 <getConfigPLL>
 8001f42:	4603      	mov	r3, r0
 8001f44:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001f46:	f001 fc03 	bl	8003750 <getClockAPB1>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8001f4e:	7bbb      	ldrb	r3, [r7, #14]
 8001f50:	2b31      	cmp	r3, #49	; 0x31
 8001f52:	d903      	bls.n	8001f5c <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
 8001f5a:	e000      	b.n	8001f5e <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8001f5c:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	8852      	ldrh	r2, [r2, #2]
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d112      	bne.n	8001f9e <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f022 0210 	bic.w	r2, r2, #16
 8001f86:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	3201      	adds	r2, #1
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f9c:	e018      	b.n	8001fd0 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f022 0210 	bic.w	r2, r2, #16
 8001fac:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f042 0210 	orr.w	r2, r2, #16
 8001fbc:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6852      	ldr	r2, [r2, #4]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
}
 8001fd2:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d103      	bne.n	8001fe6 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001fde:	201c      	movs	r0, #28
 8001fe0:	f7ff ff4c 	bl	8001e7c <__NVIC_EnableIRQ>
 8001fe4:	e019      	b.n	800201a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <BasicTimer_Config+0x1a4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d103      	bne.n	8001ff8 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001ff0:	201d      	movs	r0, #29
 8001ff2:	f7ff ff43 	bl	8001e7c <__NVIC_EnableIRQ>
 8001ff6:	e010      	b.n	800201a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	; (8002064 <BasicTimer_Config+0x1ac>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d103      	bne.n	800200a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002002:	201e      	movs	r0, #30
 8002004:	f7ff ff3a 	bl	8001e7c <__NVIC_EnableIRQ>
 8002008:	e007      	b.n	800201a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <BasicTimer_Config+0x1b4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d102      	bne.n	800201a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002014:	2032      	movs	r0, #50	; 0x32
 8002016:	f7ff ff31 	bl	8001e7c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800201a:	b662      	cpsie	i
}
 800201c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7a1b      	ldrb	r3, [r3, #8]
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f875 	bl	8002114 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	200003c4 	.word	0x200003c4
 800205c:	40000400 	.word	0x40000400
 8002060:	200003c8 	.word	0x200003c8
 8002064:	40000800 	.word	0x40000800
 8002068:	200003cc 	.word	0x200003cc
 800206c:	40000c00 	.word	0x40000c00
 8002070:	200003d0 	.word	0x200003d0

08002074 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	__NOP();
 8002078:	bf00      	nop
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
	__NOP();
 8002088:	bf00      	nop
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <TIM2_IRQHandler+0x1c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <TIM2_IRQHandler+0x1c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 80020a8:	f7ff fa7c 	bl	80015a4 <BasicTimer2_Callback>

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200003c4 	.word	0x200003c4

080020b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <TIM3_IRQHandler+0x1c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <TIM3_IRQHandler+0x1c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 80020c8:	f7ff fa76 	bl	80015b8 <BasicTimer3_Callback>

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200003c8 	.word	0x200003c8

080020d4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <TIM4_IRQHandler+0x1c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <TIM4_IRQHandler+0x1c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 80020e8:	f7ff ffc4 	bl	8002074 <BasicTimer4_Callback>

}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	200003cc 	.word	0x200003cc

080020f4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <TIM5_IRQHandler+0x1c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <TIM5_IRQHandler+0x1c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002108:	f7ff ffbc 	bl	8002084 <BasicTimer5_Callback>

}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200003d0 	.word	0x200003d0

08002114 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d108      	bne.n	8002138 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002136:	e007      	b.n	8002148 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	60da      	str	r2, [r3, #12]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6852      	ldr	r2, [r2, #4]
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <__NVIC_EnableIRQ>:
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	db0b      	blt.n	80021ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	4907      	ldr	r1, [pc, #28]	; (80021bc <__NVIC_EnableIRQ+0x38>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	2001      	movs	r0, #1
 80021a6:	fa00 f202 	lsl.w	r2, r0, r2
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e100 	.word	0xe000e100

080021c0 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	2300      	movs	r3, #0
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	2300      	movs	r3, #0
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	f001 f891 	bl	8003300 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 f8ae 	bl	8003344 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80021e8:	4b97      	ldr	r3, [pc, #604]	; (8002448 <extInt_Config+0x288>)
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	4a96      	ldr	r2, [pc, #600]	; (8002448 <extInt_Config+0x288>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f2:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	f200 85cf 	bhi.w	8002d9e <extInt_Config+0xbde>
 8002200:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <extInt_Config+0x48>)
 8002202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002206:	bf00      	nop
 8002208:	08002249 	.word	0x08002249
 800220c:	080022ff 	.word	0x080022ff
 8002210:	080023b5 	.word	0x080023b5
 8002214:	0800248b 	.word	0x0800248b
 8002218:	08002541 	.word	0x08002541
 800221c:	080025ef 	.word	0x080025ef
 8002220:	080026b5 	.word	0x080026b5
 8002224:	0800275d 	.word	0x0800275d
 8002228:	08002805 	.word	0x08002805
 800222c:	080028ad 	.word	0x080028ad
 8002230:	08002973 	.word	0x08002973
 8002234:	08002a1b 	.word	0x08002a1b
 8002238:	08002ac3 	.word	0x08002ac3
 800223c:	08002b89 	.word	0x08002b89
 8002240:	08002c31 	.word	0x08002c31
 8002244:	08002cd9 	.word	0x08002cd9
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8002248:	4b80      	ldr	r3, [pc, #512]	; (800244c <extInt_Config+0x28c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a7f      	ldr	r2, [pc, #508]	; (800244c <extInt_Config+0x28c>)
 800224e:	f023 030f 	bic.w	r3, r3, #15
 8002252:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	4a7d      	ldr	r2, [pc, #500]	; (8002450 <extInt_Config+0x290>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d105      	bne.n	800226c <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002260:	4b7a      	ldr	r3, [pc, #488]	; (800244c <extInt_Config+0x28c>)
 8002262:	4a7a      	ldr	r2, [pc, #488]	; (800244c <extInt_Config+0x28c>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002268:	f000 bd9b 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	4a78      	ldr	r2, [pc, #480]	; (8002454 <extInt_Config+0x294>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d107      	bne.n	8002288 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002278:	4b74      	ldr	r3, [pc, #464]	; (800244c <extInt_Config+0x28c>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a73      	ldr	r2, [pc, #460]	; (800244c <extInt_Config+0x28c>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6093      	str	r3, [r2, #8]
		break;
 8002284:	f000 bd8d 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4a72      	ldr	r2, [pc, #456]	; (8002458 <extInt_Config+0x298>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d107      	bne.n	80022a4 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002294:	4b6d      	ldr	r3, [pc, #436]	; (800244c <extInt_Config+0x28c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a6c      	ldr	r2, [pc, #432]	; (800244c <extInt_Config+0x28c>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	6093      	str	r3, [r2, #8]
		break;
 80022a0:	f000 bd7f 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4a6c      	ldr	r2, [pc, #432]	; (800245c <extInt_Config+0x29c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d107      	bne.n	80022c0 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 80022b0:	4b66      	ldr	r3, [pc, #408]	; (800244c <extInt_Config+0x28c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a65      	ldr	r2, [pc, #404]	; (800244c <extInt_Config+0x28c>)
 80022b6:	f043 0303 	orr.w	r3, r3, #3
 80022ba:	6093      	str	r3, [r2, #8]
		break;
 80022bc:	f000 bd71 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4a66      	ldr	r2, [pc, #408]	; (8002460 <extInt_Config+0x2a0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d107      	bne.n	80022dc <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80022cc:	4b5f      	ldr	r3, [pc, #380]	; (800244c <extInt_Config+0x28c>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a5e      	ldr	r2, [pc, #376]	; (800244c <extInt_Config+0x28c>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	6093      	str	r3, [r2, #8]
		break;
 80022d8:	f000 bd63 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4a60      	ldr	r2, [pc, #384]	; (8002464 <extInt_Config+0x2a4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d107      	bne.n	80022f8 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80022e8:	4b58      	ldr	r3, [pc, #352]	; (800244c <extInt_Config+0x28c>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a57      	ldr	r2, [pc, #348]	; (800244c <extInt_Config+0x28c>)
 80022ee:	f043 0307 	orr.w	r3, r3, #7
 80022f2:	6093      	str	r3, [r2, #8]
		break;
 80022f4:	f000 bd55 	b.w	8002da2 <extInt_Config+0xbe2>
			__NOP();
 80022f8:	bf00      	nop
		break;
 80022fa:	f000 bd52 	b.w	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 80022fe:	4b53      	ldr	r3, [pc, #332]	; (800244c <extInt_Config+0x28c>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4a52      	ldr	r2, [pc, #328]	; (800244c <extInt_Config+0x28c>)
 8002304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002308:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a4f      	ldr	r2, [pc, #316]	; (8002450 <extInt_Config+0x290>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d105      	bne.n	8002322 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002316:	4b4d      	ldr	r3, [pc, #308]	; (800244c <extInt_Config+0x28c>)
 8002318:	4a4c      	ldr	r2, [pc, #304]	; (800244c <extInt_Config+0x28c>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800231e:	f000 bd40 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a4a      	ldr	r2, [pc, #296]	; (8002454 <extInt_Config+0x294>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d107      	bne.n	800233e <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <extInt_Config+0x28c>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4a46      	ldr	r2, [pc, #280]	; (800244c <extInt_Config+0x28c>)
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	6093      	str	r3, [r2, #8]
		break;
 800233a:	f000 bd32 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a44      	ldr	r2, [pc, #272]	; (8002458 <extInt_Config+0x298>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d107      	bne.n	800235a <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 800234a:	4b40      	ldr	r3, [pc, #256]	; (800244c <extInt_Config+0x28c>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4a3f      	ldr	r2, [pc, #252]	; (800244c <extInt_Config+0x28c>)
 8002350:	f043 0320 	orr.w	r3, r3, #32
 8002354:	6093      	str	r3, [r2, #8]
		break;
 8002356:	f000 bd24 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	4a3e      	ldr	r2, [pc, #248]	; (800245c <extInt_Config+0x29c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d107      	bne.n	8002376 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <extInt_Config+0x28c>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4a38      	ldr	r2, [pc, #224]	; (800244c <extInt_Config+0x28c>)
 800236c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002370:	6093      	str	r3, [r2, #8]
		break;
 8002372:	f000 bd16 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a38      	ldr	r2, [pc, #224]	; (8002460 <extInt_Config+0x2a0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d107      	bne.n	8002392 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002382:	4b32      	ldr	r3, [pc, #200]	; (800244c <extInt_Config+0x28c>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4a31      	ldr	r2, [pc, #196]	; (800244c <extInt_Config+0x28c>)
 8002388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800238c:	6093      	str	r3, [r2, #8]
		break;
 800238e:	f000 bd08 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a32      	ldr	r2, [pc, #200]	; (8002464 <extInt_Config+0x2a4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d107      	bne.n	80023ae <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <extInt_Config+0x28c>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4a2a      	ldr	r2, [pc, #168]	; (800244c <extInt_Config+0x28c>)
 80023a4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80023a8:	6093      	str	r3, [r2, #8]
		break;
 80023aa:	f000 bcfa 	b.w	8002da2 <extInt_Config+0xbe2>
			__NOP();
 80023ae:	bf00      	nop
		break;
 80023b0:	f000 bcf7 	b.w	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <extInt_Config+0x28c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a24      	ldr	r2, [pc, #144]	; (800244c <extInt_Config+0x28c>)
 80023ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023be:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <extInt_Config+0x290>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d105      	bne.n	80023d8 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <extInt_Config+0x28c>)
 80023ce:	4a1f      	ldr	r2, [pc, #124]	; (800244c <extInt_Config+0x28c>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80023d4:	f000 bce5 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <extInt_Config+0x294>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d107      	bne.n	80023f4 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <extInt_Config+0x28c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a18      	ldr	r2, [pc, #96]	; (800244c <extInt_Config+0x28c>)
 80023ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ee:	6093      	str	r3, [r2, #8]
		break;
 80023f0:	f000 bcd7 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	4a17      	ldr	r2, [pc, #92]	; (8002458 <extInt_Config+0x298>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d107      	bne.n	8002410 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <extInt_Config+0x28c>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <extInt_Config+0x28c>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6093      	str	r3, [r2, #8]
		break;
 800240c:	f000 bcc9 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4a11      	ldr	r2, [pc, #68]	; (800245c <extInt_Config+0x29c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d107      	bne.n	800242c <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <extInt_Config+0x28c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <extInt_Config+0x28c>)
 8002422:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002426:	6093      	str	r3, [r2, #8]
		break;
 8002428:	f000 bcbb 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <extInt_Config+0x2a0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d117      	bne.n	8002468 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <extInt_Config+0x28c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a03      	ldr	r2, [pc, #12]	; (800244c <extInt_Config+0x28c>)
 800243e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002442:	6093      	str	r3, [r2, #8]
		break;
 8002444:	f000 bcad 	b.w	8002da2 <extInt_Config+0xbe2>
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4a8a      	ldr	r2, [pc, #552]	; (8002698 <extInt_Config+0x4d8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d107      	bne.n	8002484 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002474:	4b89      	ldr	r3, [pc, #548]	; (800269c <extInt_Config+0x4dc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a88      	ldr	r2, [pc, #544]	; (800269c <extInt_Config+0x4dc>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800247e:	6093      	str	r3, [r2, #8]
		break;
 8002480:	f000 bc8f 	b.w	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002484:	bf00      	nop
		break;
 8002486:	f000 bc8c 	b.w	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 800248a:	4b84      	ldr	r3, [pc, #528]	; (800269c <extInt_Config+0x4dc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a83      	ldr	r2, [pc, #524]	; (800269c <extInt_Config+0x4dc>)
 8002490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002494:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a80      	ldr	r2, [pc, #512]	; (80026a0 <extInt_Config+0x4e0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d105      	bne.n	80024ae <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80024a2:	4b7e      	ldr	r3, [pc, #504]	; (800269c <extInt_Config+0x4dc>)
 80024a4:	4a7d      	ldr	r2, [pc, #500]	; (800269c <extInt_Config+0x4dc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80024aa:	f000 bc7a 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	4a7b      	ldr	r2, [pc, #492]	; (80026a4 <extInt_Config+0x4e4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d107      	bne.n	80024ca <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 80024ba:	4b78      	ldr	r3, [pc, #480]	; (800269c <extInt_Config+0x4dc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	4a77      	ldr	r2, [pc, #476]	; (800269c <extInt_Config+0x4dc>)
 80024c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024c4:	6093      	str	r3, [r2, #8]
		break;
 80024c6:	f000 bc6c 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a75      	ldr	r2, [pc, #468]	; (80026a8 <extInt_Config+0x4e8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d107      	bne.n	80024e6 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80024d6:	4b71      	ldr	r3, [pc, #452]	; (800269c <extInt_Config+0x4dc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4a70      	ldr	r2, [pc, #448]	; (800269c <extInt_Config+0x4dc>)
 80024dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024e0:	6093      	str	r3, [r2, #8]
		break;
 80024e2:	f000 bc5e 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a6f      	ldr	r2, [pc, #444]	; (80026ac <extInt_Config+0x4ec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d107      	bne.n	8002502 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80024f2:	4b6a      	ldr	r3, [pc, #424]	; (800269c <extInt_Config+0x4dc>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4a69      	ldr	r2, [pc, #420]	; (800269c <extInt_Config+0x4dc>)
 80024f8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80024fc:	6093      	str	r3, [r2, #8]
		break;
 80024fe:	f000 bc50 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <extInt_Config+0x4f0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d107      	bne.n	800251e <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800250e:	4b63      	ldr	r3, [pc, #396]	; (800269c <extInt_Config+0x4dc>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	4a62      	ldr	r2, [pc, #392]	; (800269c <extInt_Config+0x4dc>)
 8002514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002518:	6093      	str	r3, [r2, #8]
		break;
 800251a:	f000 bc42 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a5c      	ldr	r2, [pc, #368]	; (8002698 <extInt_Config+0x4d8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d107      	bne.n	800253a <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 800252a:	4b5c      	ldr	r3, [pc, #368]	; (800269c <extInt_Config+0x4dc>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4a5b      	ldr	r2, [pc, #364]	; (800269c <extInt_Config+0x4dc>)
 8002530:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002534:	6093      	str	r3, [r2, #8]
		break;
 8002536:	f000 bc34 	b.w	8002da2 <extInt_Config+0xbe2>
			__NOP();
 800253a:	bf00      	nop
		break;
 800253c:	f000 bc31 	b.w	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8002540:	4b56      	ldr	r3, [pc, #344]	; (800269c <extInt_Config+0x4dc>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4a55      	ldr	r2, [pc, #340]	; (800269c <extInt_Config+0x4dc>)
 8002546:	f023 030f 	bic.w	r3, r3, #15
 800254a:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4a53      	ldr	r2, [pc, #332]	; (80026a0 <extInt_Config+0x4e0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d105      	bne.n	8002564 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <extInt_Config+0x4dc>)
 800255a:	4a50      	ldr	r2, [pc, #320]	; (800269c <extInt_Config+0x4dc>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002560:	f000 bc1f 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4a4e      	ldr	r2, [pc, #312]	; (80026a4 <extInt_Config+0x4e4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d107      	bne.n	8002580 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8002570:	4b4a      	ldr	r3, [pc, #296]	; (800269c <extInt_Config+0x4dc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a49      	ldr	r2, [pc, #292]	; (800269c <extInt_Config+0x4dc>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	60d3      	str	r3, [r2, #12]
		break;
 800257c:	f000 bc11 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4a48      	ldr	r2, [pc, #288]	; (80026a8 <extInt_Config+0x4e8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d107      	bne.n	800259c <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 800258c:	4b43      	ldr	r3, [pc, #268]	; (800269c <extInt_Config+0x4dc>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a42      	ldr	r2, [pc, #264]	; (800269c <extInt_Config+0x4dc>)
 8002592:	f043 0302 	orr.w	r3, r3, #2
 8002596:	60d3      	str	r3, [r2, #12]
		break;
 8002598:	f000 bc03 	b.w	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4a42      	ldr	r2, [pc, #264]	; (80026ac <extInt_Config+0x4ec>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d106      	bne.n	80025b6 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <extInt_Config+0x4dc>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a3b      	ldr	r2, [pc, #236]	; (800269c <extInt_Config+0x4dc>)
 80025ae:	f043 0303 	orr.w	r3, r3, #3
 80025b2:	60d3      	str	r3, [r2, #12]
		break;
 80025b4:	e3f5      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	4a3c      	ldr	r2, [pc, #240]	; (80026b0 <extInt_Config+0x4f0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d106      	bne.n	80025d0 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 80025c2:	4b36      	ldr	r3, [pc, #216]	; (800269c <extInt_Config+0x4dc>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a35      	ldr	r2, [pc, #212]	; (800269c <extInt_Config+0x4dc>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	60d3      	str	r3, [r2, #12]
		break;
 80025ce:	e3e8      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4a30      	ldr	r2, [pc, #192]	; (8002698 <extInt_Config+0x4d8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d106      	bne.n	80025ea <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80025dc:	4b2f      	ldr	r3, [pc, #188]	; (800269c <extInt_Config+0x4dc>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a2e      	ldr	r2, [pc, #184]	; (800269c <extInt_Config+0x4dc>)
 80025e2:	f043 0307 	orr.w	r3, r3, #7
 80025e6:	60d3      	str	r3, [r2, #12]
		break;
 80025e8:	e3db      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 80025ea:	bf00      	nop
		break;
 80025ec:	e3d9      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 80025ee:	4b2b      	ldr	r3, [pc, #172]	; (800269c <extInt_Config+0x4dc>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	4a2a      	ldr	r2, [pc, #168]	; (800269c <extInt_Config+0x4dc>)
 80025f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f8:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <extInt_Config+0x4e0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d104      	bne.n	8002610 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <extInt_Config+0x4dc>)
 8002608:	4a24      	ldr	r2, [pc, #144]	; (800269c <extInt_Config+0x4dc>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800260e:	e3c8      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <extInt_Config+0x4e4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d106      	bne.n	800262a <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <extInt_Config+0x4dc>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a1e      	ldr	r2, [pc, #120]	; (800269c <extInt_Config+0x4dc>)
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	60d3      	str	r3, [r2, #12]
		break;
 8002628:	e3bb      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <extInt_Config+0x4e8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d106      	bne.n	8002644 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8002636:	4b19      	ldr	r3, [pc, #100]	; (800269c <extInt_Config+0x4dc>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	4a18      	ldr	r2, [pc, #96]	; (800269c <extInt_Config+0x4dc>)
 800263c:	f043 0320 	orr.w	r3, r3, #32
 8002640:	60d3      	str	r3, [r2, #12]
		break;
 8002642:	e3ae      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4a18      	ldr	r2, [pc, #96]	; (80026ac <extInt_Config+0x4ec>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d106      	bne.n	800265e <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <extInt_Config+0x4dc>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <extInt_Config+0x4dc>)
 8002656:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800265a:	60d3      	str	r3, [r2, #12]
		break;
 800265c:	e3a1      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <extInt_Config+0x4f0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d106      	bne.n	8002678 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <extInt_Config+0x4dc>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	4a0b      	ldr	r2, [pc, #44]	; (800269c <extInt_Config+0x4dc>)
 8002670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002674:	60d3      	str	r3, [r2, #12]
		break;
 8002676:	e394      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4a06      	ldr	r2, [pc, #24]	; (8002698 <extInt_Config+0x4d8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d106      	bne.n	8002692 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <extInt_Config+0x4dc>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <extInt_Config+0x4dc>)
 800268a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800268e:	60d3      	str	r3, [r2, #12]
		break;
 8002690:	e387      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002692:	bf00      	nop
		break;
 8002694:	e385      	b.n	8002da2 <extInt_Config+0xbe2>
 8002696:	bf00      	nop
 8002698:	40021c00 	.word	0x40021c00
 800269c:	40013800 	.word	0x40013800
 80026a0:	40020000 	.word	0x40020000
 80026a4:	40020400 	.word	0x40020400
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020c00 	.word	0x40020c00
 80026b0:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 80026b4:	4b86      	ldr	r3, [pc, #536]	; (80028d0 <extInt_Config+0x710>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a85      	ldr	r2, [pc, #532]	; (80028d0 <extInt_Config+0x710>)
 80026ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026be:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a83      	ldr	r2, [pc, #524]	; (80028d4 <extInt_Config+0x714>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d104      	bne.n	80026d6 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80026cc:	4b80      	ldr	r3, [pc, #512]	; (80028d0 <extInt_Config+0x710>)
 80026ce:	4a80      	ldr	r2, [pc, #512]	; (80028d0 <extInt_Config+0x710>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80026d4:	e365      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a7e      	ldr	r2, [pc, #504]	; (80028d8 <extInt_Config+0x718>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d106      	bne.n	80026f0 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80026e2:	4b7b      	ldr	r3, [pc, #492]	; (80028d0 <extInt_Config+0x710>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	4a7a      	ldr	r2, [pc, #488]	; (80028d0 <extInt_Config+0x710>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	60d3      	str	r3, [r2, #12]
		break;
 80026ee:	e358      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4a79      	ldr	r2, [pc, #484]	; (80028dc <extInt_Config+0x71c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d106      	bne.n	800270a <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80026fc:	4b74      	ldr	r3, [pc, #464]	; (80028d0 <extInt_Config+0x710>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a73      	ldr	r2, [pc, #460]	; (80028d0 <extInt_Config+0x710>)
 8002702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002706:	60d3      	str	r3, [r2, #12]
		break;
 8002708:	e34b      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a73      	ldr	r2, [pc, #460]	; (80028e0 <extInt_Config+0x720>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d106      	bne.n	8002724 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002716:	4b6e      	ldr	r3, [pc, #440]	; (80028d0 <extInt_Config+0x710>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	4a6d      	ldr	r2, [pc, #436]	; (80028d0 <extInt_Config+0x710>)
 800271c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002720:	60d3      	str	r3, [r2, #12]
		break;
 8002722:	e33e      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4a6e      	ldr	r2, [pc, #440]	; (80028e4 <extInt_Config+0x724>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d106      	bne.n	800273e <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002730:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <extInt_Config+0x710>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a66      	ldr	r2, [pc, #408]	; (80028d0 <extInt_Config+0x710>)
 8002736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273a:	60d3      	str	r3, [r2, #12]
		break;
 800273c:	e331      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a68      	ldr	r2, [pc, #416]	; (80028e8 <extInt_Config+0x728>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d106      	bne.n	8002758 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 800274a:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <extInt_Config+0x710>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4a60      	ldr	r2, [pc, #384]	; (80028d0 <extInt_Config+0x710>)
 8002750:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002754:	60d3      	str	r3, [r2, #12]
		break;
 8002756:	e324      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002758:	bf00      	nop
		break;
 800275a:	e322      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 800275c:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <extInt_Config+0x710>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a5b      	ldr	r2, [pc, #364]	; (80028d0 <extInt_Config+0x710>)
 8002762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002766:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4a59      	ldr	r2, [pc, #356]	; (80028d4 <extInt_Config+0x714>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d104      	bne.n	800277e <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8002774:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <extInt_Config+0x710>)
 8002776:	4a56      	ldr	r2, [pc, #344]	; (80028d0 <extInt_Config+0x710>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800277c:	e311      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a54      	ldr	r2, [pc, #336]	; (80028d8 <extInt_Config+0x718>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d106      	bne.n	8002798 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 800278a:	4b51      	ldr	r3, [pc, #324]	; (80028d0 <extInt_Config+0x710>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a50      	ldr	r2, [pc, #320]	; (80028d0 <extInt_Config+0x710>)
 8002790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002794:	60d3      	str	r3, [r2, #12]
		break;
 8002796:	e304      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <extInt_Config+0x71c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d106      	bne.n	80027b2 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 80027a4:	4b4a      	ldr	r3, [pc, #296]	; (80028d0 <extInt_Config+0x710>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a49      	ldr	r2, [pc, #292]	; (80028d0 <extInt_Config+0x710>)
 80027aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027ae:	60d3      	str	r3, [r2, #12]
		break;
 80027b0:	e2f7      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a49      	ldr	r2, [pc, #292]	; (80028e0 <extInt_Config+0x720>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d106      	bne.n	80027cc <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 80027be:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <extInt_Config+0x710>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	4a43      	ldr	r2, [pc, #268]	; (80028d0 <extInt_Config+0x710>)
 80027c4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80027c8:	60d3      	str	r3, [r2, #12]
		break;
 80027ca:	e2ea      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	4a44      	ldr	r2, [pc, #272]	; (80028e4 <extInt_Config+0x724>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d106      	bne.n	80027e6 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <extInt_Config+0x710>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <extInt_Config+0x710>)
 80027de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e2:	60d3      	str	r3, [r2, #12]
		break;
 80027e4:	e2dd      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <extInt_Config+0x728>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d106      	bne.n	8002800 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80027f2:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <extInt_Config+0x710>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a36      	ldr	r2, [pc, #216]	; (80028d0 <extInt_Config+0x710>)
 80027f8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80027fc:	60d3      	str	r3, [r2, #12]
		break;
 80027fe:	e2d0      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002800:	bf00      	nop
		break;
 8002802:	e2ce      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <extInt_Config+0x710>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <extInt_Config+0x710>)
 800280a:	f023 030f 	bic.w	r3, r3, #15
 800280e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <extInt_Config+0x714>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d104      	bne.n	8002826 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 800281c:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <extInt_Config+0x710>)
 800281e:	4a2c      	ldr	r2, [pc, #176]	; (80028d0 <extInt_Config+0x710>)
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002824:	e2bd      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a2a      	ldr	r2, [pc, #168]	; (80028d8 <extInt_Config+0x718>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d106      	bne.n	8002840 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <extInt_Config+0x710>)
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	4a26      	ldr	r2, [pc, #152]	; (80028d0 <extInt_Config+0x710>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6113      	str	r3, [r2, #16]
		break;
 800283e:	e2b0      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	4a25      	ldr	r2, [pc, #148]	; (80028dc <extInt_Config+0x71c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d106      	bne.n	800285a <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 800284c:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <extInt_Config+0x710>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <extInt_Config+0x710>)
 8002852:	f043 0302 	orr.w	r3, r3, #2
 8002856:	6113      	str	r3, [r2, #16]
		break;
 8002858:	e2a3      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <extInt_Config+0x720>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d106      	bne.n	8002874 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <extInt_Config+0x710>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <extInt_Config+0x710>)
 800286c:	f043 0303 	orr.w	r3, r3, #3
 8002870:	6113      	str	r3, [r2, #16]
		break;
 8002872:	e296      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4a1a      	ldr	r2, [pc, #104]	; (80028e4 <extInt_Config+0x724>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d106      	bne.n	800288e <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <extInt_Config+0x710>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <extInt_Config+0x710>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6113      	str	r3, [r2, #16]
		break;
 800288c:	e289      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <extInt_Config+0x728>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d106      	bne.n	80028a8 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <extInt_Config+0x710>)
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <extInt_Config+0x710>)
 80028a0:	f043 0307 	orr.w	r3, r3, #7
 80028a4:	6113      	str	r3, [r2, #16]
		break;
 80028a6:	e27c      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 80028a8:	bf00      	nop
		break;
 80028aa:	e27a      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <extInt_Config+0x710>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <extInt_Config+0x710>)
 80028b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028b6:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a05      	ldr	r2, [pc, #20]	; (80028d4 <extInt_Config+0x714>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d113      	bne.n	80028ec <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <extInt_Config+0x710>)
 80028c6:	4a02      	ldr	r2, [pc, #8]	; (80028d0 <extInt_Config+0x710>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80028cc:	e269      	b.n	8002da2 <extInt_Config+0xbe2>
 80028ce:	bf00      	nop
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a83      	ldr	r2, [pc, #524]	; (8002b00 <extInt_Config+0x940>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d106      	bne.n	8002906 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80028f8:	4b82      	ldr	r3, [pc, #520]	; (8002b04 <extInt_Config+0x944>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	4a81      	ldr	r2, [pc, #516]	; (8002b04 <extInt_Config+0x944>)
 80028fe:	f043 0310 	orr.w	r3, r3, #16
 8002902:	6113      	str	r3, [r2, #16]
		break;
 8002904:	e24d      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a7e      	ldr	r2, [pc, #504]	; (8002b08 <extInt_Config+0x948>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d106      	bne.n	8002920 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002912:	4b7c      	ldr	r3, [pc, #496]	; (8002b04 <extInt_Config+0x944>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	4a7b      	ldr	r2, [pc, #492]	; (8002b04 <extInt_Config+0x944>)
 8002918:	f043 0320 	orr.w	r3, r3, #32
 800291c:	6113      	str	r3, [r2, #16]
		break;
 800291e:	e240      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4a79      	ldr	r2, [pc, #484]	; (8002b0c <extInt_Config+0x94c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d106      	bne.n	800293a <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 800292c:	4b75      	ldr	r3, [pc, #468]	; (8002b04 <extInt_Config+0x944>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a74      	ldr	r2, [pc, #464]	; (8002b04 <extInt_Config+0x944>)
 8002932:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002936:	6113      	str	r3, [r2, #16]
		break;
 8002938:	e233      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a73      	ldr	r2, [pc, #460]	; (8002b10 <extInt_Config+0x950>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d106      	bne.n	8002954 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002946:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <extInt_Config+0x944>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4a6e      	ldr	r2, [pc, #440]	; (8002b04 <extInt_Config+0x944>)
 800294c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002950:	6113      	str	r3, [r2, #16]
		break;
 8002952:	e226      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	4a6e      	ldr	r2, [pc, #440]	; (8002b14 <extInt_Config+0x954>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d106      	bne.n	800296e <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002960:	4b68      	ldr	r3, [pc, #416]	; (8002b04 <extInt_Config+0x944>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4a67      	ldr	r2, [pc, #412]	; (8002b04 <extInt_Config+0x944>)
 8002966:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800296a:	6113      	str	r3, [r2, #16]
		break;
 800296c:	e219      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 800296e:	bf00      	nop
		break;
 8002970:	e217      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 8002972:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <extInt_Config+0x944>)
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	4a63      	ldr	r2, [pc, #396]	; (8002b04 <extInt_Config+0x944>)
 8002978:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800297c:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a64      	ldr	r2, [pc, #400]	; (8002b18 <extInt_Config+0x958>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d104      	bne.n	8002994 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <extInt_Config+0x944>)
 800298c:	4a5d      	ldr	r2, [pc, #372]	; (8002b04 <extInt_Config+0x944>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002992:	e206      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4a59      	ldr	r2, [pc, #356]	; (8002b00 <extInt_Config+0x940>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d106      	bne.n	80029ae <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80029a0:	4b58      	ldr	r3, [pc, #352]	; (8002b04 <extInt_Config+0x944>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	4a57      	ldr	r2, [pc, #348]	; (8002b04 <extInt_Config+0x944>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029aa:	6113      	str	r3, [r2, #16]
		break;
 80029ac:	e1f9      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a54      	ldr	r2, [pc, #336]	; (8002b08 <extInt_Config+0x948>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d106      	bne.n	80029c8 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80029ba:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <extInt_Config+0x944>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	4a51      	ldr	r2, [pc, #324]	; (8002b04 <extInt_Config+0x944>)
 80029c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c4:	6113      	str	r3, [r2, #16]
		break;
 80029c6:	e1ec      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4a4f      	ldr	r2, [pc, #316]	; (8002b0c <extInt_Config+0x94c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d106      	bne.n	80029e2 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 80029d4:	4b4b      	ldr	r3, [pc, #300]	; (8002b04 <extInt_Config+0x944>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4a4a      	ldr	r2, [pc, #296]	; (8002b04 <extInt_Config+0x944>)
 80029da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029de:	6113      	str	r3, [r2, #16]
		break;
 80029e0:	e1df      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <extInt_Config+0x950>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d106      	bne.n	80029fc <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 80029ee:	4b45      	ldr	r3, [pc, #276]	; (8002b04 <extInt_Config+0x944>)
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	4a44      	ldr	r2, [pc, #272]	; (8002b04 <extInt_Config+0x944>)
 80029f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f8:	6113      	str	r3, [r2, #16]
		break;
 80029fa:	e1d2      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4a44      	ldr	r2, [pc, #272]	; (8002b14 <extInt_Config+0x954>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d106      	bne.n	8002a16 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002a08:	4b3e      	ldr	r3, [pc, #248]	; (8002b04 <extInt_Config+0x944>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	4a3d      	ldr	r2, [pc, #244]	; (8002b04 <extInt_Config+0x944>)
 8002a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a12:	6113      	str	r3, [r2, #16]
		break;
 8002a14:	e1c5      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002a16:	bf00      	nop
		break;
 8002a18:	e1c3      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <extInt_Config+0x944>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <extInt_Config+0x944>)
 8002a20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a24:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <extInt_Config+0x958>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d104      	bne.n	8002a3c <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8002a32:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <extInt_Config+0x944>)
 8002a34:	4a33      	ldr	r2, [pc, #204]	; (8002b04 <extInt_Config+0x944>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002a3a:	e1b2      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4a2f      	ldr	r2, [pc, #188]	; (8002b00 <extInt_Config+0x940>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d106      	bne.n	8002a56 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002a48:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <extInt_Config+0x944>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	4a2d      	ldr	r2, [pc, #180]	; (8002b04 <extInt_Config+0x944>)
 8002a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a52:	6113      	str	r3, [r2, #16]
		break;
 8002a54:	e1a5      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <extInt_Config+0x948>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d106      	bne.n	8002a70 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <extInt_Config+0x944>)
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <extInt_Config+0x944>)
 8002a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a6c:	6113      	str	r3, [r2, #16]
		break;
 8002a6e:	e198      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <extInt_Config+0x94c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d106      	bne.n	8002a8a <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002a7c:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <extInt_Config+0x944>)
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <extInt_Config+0x944>)
 8002a82:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002a86:	6113      	str	r3, [r2, #16]
		break;
 8002a88:	e18b      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <extInt_Config+0x950>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d106      	bne.n	8002aa4 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <extInt_Config+0x944>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <extInt_Config+0x944>)
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa0:	6113      	str	r3, [r2, #16]
		break;
 8002aa2:	e17e      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <extInt_Config+0x954>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d106      	bne.n	8002abe <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <extInt_Config+0x944>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <extInt_Config+0x944>)
 8002ab6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002aba:	6113      	str	r3, [r2, #16]
		break;
 8002abc:	e171      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002abe:	bf00      	nop
		break;
 8002ac0:	e16f      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <extInt_Config+0x944>)
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <extInt_Config+0x944>)
 8002ac8:	f023 030f 	bic.w	r3, r3, #15
 8002acc:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <extInt_Config+0x958>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d104      	bne.n	8002ae4 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <extInt_Config+0x944>)
 8002adc:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <extInt_Config+0x944>)
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002ae2:	e15e      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <extInt_Config+0x940>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d115      	bne.n	8002b1c <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <extInt_Config+0x944>)
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	4a03      	ldr	r2, [pc, #12]	; (8002b04 <extInt_Config+0x944>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6153      	str	r3, [r2, #20]
		break;
 8002afc:	e151      	b.n	8002da2 <extInt_Config+0xbe2>
 8002afe:	bf00      	nop
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40020800 	.word	0x40020800
 8002b0c:	40020c00 	.word	0x40020c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40021c00 	.word	0x40021c00
 8002b18:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4a83      	ldr	r2, [pc, #524]	; (8002d30 <extInt_Config+0xb70>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d106      	bne.n	8002b36 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002b28:	4b82      	ldr	r3, [pc, #520]	; (8002d34 <extInt_Config+0xb74>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	4a81      	ldr	r2, [pc, #516]	; (8002d34 <extInt_Config+0xb74>)
 8002b2e:	f043 0302 	orr.w	r3, r3, #2
 8002b32:	6153      	str	r3, [r2, #20]
		break;
 8002b34:	e135      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a7e      	ldr	r2, [pc, #504]	; (8002d38 <extInt_Config+0xb78>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d106      	bne.n	8002b50 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8002b42:	4b7c      	ldr	r3, [pc, #496]	; (8002d34 <extInt_Config+0xb74>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4a7b      	ldr	r2, [pc, #492]	; (8002d34 <extInt_Config+0xb74>)
 8002b48:	f043 0303 	orr.w	r3, r3, #3
 8002b4c:	6153      	str	r3, [r2, #20]
		break;
 8002b4e:	e128      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4a79      	ldr	r2, [pc, #484]	; (8002d3c <extInt_Config+0xb7c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d106      	bne.n	8002b6a <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002b5c:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <extInt_Config+0xb74>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	4a74      	ldr	r2, [pc, #464]	; (8002d34 <extInt_Config+0xb74>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6153      	str	r3, [r2, #20]
		break;
 8002b68:	e11b      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a73      	ldr	r2, [pc, #460]	; (8002d40 <extInt_Config+0xb80>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d106      	bne.n	8002b84 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002b76:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <extInt_Config+0xb74>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4a6e      	ldr	r2, [pc, #440]	; (8002d34 <extInt_Config+0xb74>)
 8002b7c:	f043 0307 	orr.w	r3, r3, #7
 8002b80:	6153      	str	r3, [r2, #20]
		break;
 8002b82:	e10e      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002b84:	bf00      	nop
		break;
 8002b86:	e10c      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8002b88:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <extInt_Config+0xb74>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <extInt_Config+0xb74>)
 8002b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b92:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a6a      	ldr	r2, [pc, #424]	; (8002d44 <extInt_Config+0xb84>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d104      	bne.n	8002baa <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002ba0:	4b64      	ldr	r3, [pc, #400]	; (8002d34 <extInt_Config+0xb74>)
 8002ba2:	4a64      	ldr	r2, [pc, #400]	; (8002d34 <extInt_Config+0xb74>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002ba8:	e0fb      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a65      	ldr	r2, [pc, #404]	; (8002d48 <extInt_Config+0xb88>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d106      	bne.n	8002bc4 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002bb6:	4b5f      	ldr	r3, [pc, #380]	; (8002d34 <extInt_Config+0xb74>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4a5e      	ldr	r2, [pc, #376]	; (8002d34 <extInt_Config+0xb74>)
 8002bbc:	f043 0310 	orr.w	r3, r3, #16
 8002bc0:	6153      	str	r3, [r2, #20]
		break;
 8002bc2:	e0ee      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4a59      	ldr	r2, [pc, #356]	; (8002d30 <extInt_Config+0xb70>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d106      	bne.n	8002bde <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002bd0:	4b58      	ldr	r3, [pc, #352]	; (8002d34 <extInt_Config+0xb74>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <extInt_Config+0xb74>)
 8002bd6:	f043 0320 	orr.w	r3, r3, #32
 8002bda:	6153      	str	r3, [r2, #20]
		break;
 8002bdc:	e0e1      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a54      	ldr	r2, [pc, #336]	; (8002d38 <extInt_Config+0xb78>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d106      	bne.n	8002bf8 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002bea:	4b52      	ldr	r3, [pc, #328]	; (8002d34 <extInt_Config+0xb74>)
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4a51      	ldr	r2, [pc, #324]	; (8002d34 <extInt_Config+0xb74>)
 8002bf0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002bf4:	6153      	str	r3, [r2, #20]
		break;
 8002bf6:	e0d4      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4a4f      	ldr	r2, [pc, #316]	; (8002d3c <extInt_Config+0xb7c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d106      	bne.n	8002c12 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <extInt_Config+0xb74>)
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <extInt_Config+0xb74>)
 8002c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0e:	6153      	str	r3, [r2, #20]
		break;
 8002c10:	e0c7      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a49      	ldr	r2, [pc, #292]	; (8002d40 <extInt_Config+0xb80>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d106      	bne.n	8002c2c <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002c1e:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <extInt_Config+0xb74>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4a44      	ldr	r2, [pc, #272]	; (8002d34 <extInt_Config+0xb74>)
 8002c24:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002c28:	6153      	str	r3, [r2, #20]
		break;
 8002c2a:	e0ba      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002c2c:	bf00      	nop
		break;
 8002c2e:	e0b8      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8002c30:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <extInt_Config+0xb74>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	4a3f      	ldr	r2, [pc, #252]	; (8002d34 <extInt_Config+0xb74>)
 8002c36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c3a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <extInt_Config+0xb84>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d104      	bne.n	8002c52 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002c48:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <extInt_Config+0xb74>)
 8002c4a:	4a3a      	ldr	r2, [pc, #232]	; (8002d34 <extInt_Config+0xb74>)
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002c50:	e0a7      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <extInt_Config+0xb88>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d106      	bne.n	8002c6c <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002c5e:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <extInt_Config+0xb74>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <extInt_Config+0xb74>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6153      	str	r3, [r2, #20]
		break;
 8002c6a:	e09a      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4a2f      	ldr	r2, [pc, #188]	; (8002d30 <extInt_Config+0xb70>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d106      	bne.n	8002c86 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002c78:	4b2e      	ldr	r3, [pc, #184]	; (8002d34 <extInt_Config+0xb74>)
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	4a2d      	ldr	r2, [pc, #180]	; (8002d34 <extInt_Config+0xb74>)
 8002c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c82:	6153      	str	r3, [r2, #20]
		break;
 8002c84:	e08d      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <extInt_Config+0xb78>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d106      	bne.n	8002ca0 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <extInt_Config+0xb74>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4a27      	ldr	r2, [pc, #156]	; (8002d34 <extInt_Config+0xb74>)
 8002c98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c9c:	6153      	str	r3, [r2, #20]
		break;
 8002c9e:	e080      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <extInt_Config+0xb7c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d106      	bne.n	8002cba <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <extInt_Config+0xb74>)
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	4a20      	ldr	r2, [pc, #128]	; (8002d34 <extInt_Config+0xb74>)
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb6:	6153      	str	r3, [r2, #20]
		break;
 8002cb8:	e073      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <extInt_Config+0xb80>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d106      	bne.n	8002cd4 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <extInt_Config+0xb74>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <extInt_Config+0xb74>)
 8002ccc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cd0:	6153      	str	r3, [r2, #20]
		break;
 8002cd2:	e066      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002cd4:	bf00      	nop
		break;
 8002cd6:	e064      	b.n	8002da2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <extInt_Config+0xb74>)
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <extInt_Config+0xb74>)
 8002cde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ce2:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <extInt_Config+0xb84>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d104      	bne.n	8002cfa <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002cf0:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <extInt_Config+0xb74>)
 8002cf2:	4a10      	ldr	r2, [pc, #64]	; (8002d34 <extInt_Config+0xb74>)
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002cf8:	e053      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <extInt_Config+0xb88>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d106      	bne.n	8002d14 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <extInt_Config+0xb74>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <extInt_Config+0xb74>)
 8002d0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d10:	6153      	str	r3, [r2, #20]
		break;
 8002d12:	e046      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <extInt_Config+0xb70>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d115      	bne.n	8002d4c <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <extInt_Config+0xb74>)
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <extInt_Config+0xb74>)
 8002d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d2a:	6153      	str	r3, [r2, #20]
		break;
 8002d2c:	e039      	b.n	8002da2 <extInt_Config+0xbe2>
 8002d2e:	bf00      	nop
 8002d30:	40020800 	.word	0x40020800
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021c00 	.word	0x40021c00
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	4a9d      	ldr	r2, [pc, #628]	; (8002fc8 <extInt_Config+0xe08>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d106      	bne.n	8002d66 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002d58:	4b9c      	ldr	r3, [pc, #624]	; (8002fcc <extInt_Config+0xe0c>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	4a9b      	ldr	r2, [pc, #620]	; (8002fcc <extInt_Config+0xe0c>)
 8002d5e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002d62:	6153      	str	r3, [r2, #20]
		break;
 8002d64:	e01d      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a98      	ldr	r2, [pc, #608]	; (8002fd0 <extInt_Config+0xe10>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d106      	bne.n	8002d80 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002d72:	4b96      	ldr	r3, [pc, #600]	; (8002fcc <extInt_Config+0xe0c>)
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	4a95      	ldr	r2, [pc, #596]	; (8002fcc <extInt_Config+0xe0c>)
 8002d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d7c:	6153      	str	r3, [r2, #20]
		break;
 8002d7e:	e010      	b.n	8002da2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4a93      	ldr	r2, [pc, #588]	; (8002fd4 <extInt_Config+0xe14>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d106      	bne.n	8002d9a <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002d8c:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <extInt_Config+0xe0c>)
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	4a8e      	ldr	r2, [pc, #568]	; (8002fcc <extInt_Config+0xe0c>)
 8002d92:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002d96:	6153      	str	r3, [r2, #20]
		break;
 8002d98:	e003      	b.n	8002da2 <extInt_Config+0xbe2>
			__NOP();
 8002d9a:	bf00      	nop
		break;
 8002d9c:	e001      	b.n	8002da2 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8002d9e:	bf00      	nop
		break;
 8002da0:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	791b      	ldrb	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d126      	bne.n	8002df8 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002daa:	4b8b      	ldr	r3, [pc, #556]	; (8002fd8 <extInt_Config+0xe18>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	4611      	mov	r1, r2
 8002db6:	2201      	movs	r2, #1
 8002db8:	408a      	lsls	r2, r1
 8002dba:	43d2      	mvns	r2, r2
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4a86      	ldr	r2, [pc, #536]	; (8002fd8 <extInt_Config+0xe18>)
 8002dc0:	400b      	ands	r3, r1
 8002dc2:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002dc4:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <extInt_Config+0xe18>)
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	408a      	lsls	r2, r1
 8002dd4:	43d2      	mvns	r2, r2
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4a7f      	ldr	r2, [pc, #508]	; (8002fd8 <extInt_Config+0xe18>)
 8002dda:	400b      	ands	r3, r1
 8002ddc:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002dde:	4b7e      	ldr	r3, [pc, #504]	; (8002fd8 <extInt_Config+0xe18>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	4611      	mov	r1, r2
 8002dea:	2201      	movs	r2, #1
 8002dec:	408a      	lsls	r2, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	4a79      	ldr	r2, [pc, #484]	; (8002fd8 <extInt_Config+0xe18>)
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6093      	str	r3, [r2, #8]
 8002df6:	e05c      	b.n	8002eb2 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	791b      	ldrb	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d126      	bne.n	8002e4e <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e00:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <extInt_Config+0xe18>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	408a      	lsls	r2, r1
 8002e10:	43d2      	mvns	r2, r2
 8002e12:	4611      	mov	r1, r2
 8002e14:	4a70      	ldr	r2, [pc, #448]	; (8002fd8 <extInt_Config+0xe18>)
 8002e16:	400b      	ands	r3, r1
 8002e18:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e1a:	4b6f      	ldr	r3, [pc, #444]	; (8002fd8 <extInt_Config+0xe18>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	7812      	ldrb	r2, [r2, #0]
 8002e24:	4611      	mov	r1, r2
 8002e26:	2201      	movs	r2, #1
 8002e28:	408a      	lsls	r2, r1
 8002e2a:	43d2      	mvns	r2, r2
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4a6a      	ldr	r2, [pc, #424]	; (8002fd8 <extInt_Config+0xe18>)
 8002e30:	400b      	ands	r3, r1
 8002e32:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e34:	4b68      	ldr	r3, [pc, #416]	; (8002fd8 <extInt_Config+0xe18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	2201      	movs	r2, #1
 8002e42:	408a      	lsls	r2, r1
 8002e44:	4611      	mov	r1, r2
 8002e46:	4a64      	ldr	r2, [pc, #400]	; (8002fd8 <extInt_Config+0xe18>)
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	60d3      	str	r3, [r2, #12]
 8002e4c:	e031      	b.n	8002eb2 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e4e:	4b62      	ldr	r3, [pc, #392]	; (8002fd8 <extInt_Config+0xe18>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6812      	ldr	r2, [r2, #0]
 8002e56:	7812      	ldrb	r2, [r2, #0]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	408a      	lsls	r2, r1
 8002e5e:	43d2      	mvns	r2, r2
 8002e60:	4611      	mov	r1, r2
 8002e62:	4a5d      	ldr	r2, [pc, #372]	; (8002fd8 <extInt_Config+0xe18>)
 8002e64:	400b      	ands	r3, r1
 8002e66:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e68:	4b5b      	ldr	r3, [pc, #364]	; (8002fd8 <extInt_Config+0xe18>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	4611      	mov	r1, r2
 8002e74:	2201      	movs	r2, #1
 8002e76:	408a      	lsls	r2, r1
 8002e78:	43d2      	mvns	r2, r2
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4a56      	ldr	r2, [pc, #344]	; (8002fd8 <extInt_Config+0xe18>)
 8002e7e:	400b      	ands	r3, r1
 8002e80:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e82:	4b55      	ldr	r3, [pc, #340]	; (8002fd8 <extInt_Config+0xe18>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	7812      	ldrb	r2, [r2, #0]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	2201      	movs	r2, #1
 8002e90:	408a      	lsls	r2, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	4a50      	ldr	r2, [pc, #320]	; (8002fd8 <extInt_Config+0xe18>)
 8002e96:	430b      	orrs	r3, r1
 8002e98:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002e9a:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <extInt_Config+0xe18>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	7812      	ldrb	r2, [r2, #0]
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	408a      	lsls	r2, r1
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <extInt_Config+0xe18>)
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002eb2:	4b49      	ldr	r3, [pc, #292]	; (8002fd8 <extInt_Config+0xe18>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	408a      	lsls	r2, r1
 8002ec2:	43d2      	mvns	r2, r2
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4a44      	ldr	r2, [pc, #272]	; (8002fd8 <extInt_Config+0xe18>)
 8002ec8:	400b      	ands	r3, r1
 8002eca:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <extInt_Config+0xe18>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	2201      	movs	r2, #1
 8002eda:	408a      	lsls	r2, r1
 8002edc:	4611      	mov	r1, r2
 8002ede:	4a3e      	ldr	r2, [pc, #248]	; (8002fd8 <extInt_Config+0xe18>)
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee4:	b672      	cpsid	i
}
 8002ee6:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	d862      	bhi.n	8002fb8 <extInt_Config+0xdf8>
 8002ef2:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <extInt_Config+0xd38>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f39 	.word	0x08002f39
 8002efc:	08002f41 	.word	0x08002f41
 8002f00:	08002f49 	.word	0x08002f49
 8002f04:	08002f51 	.word	0x08002f51
 8002f08:	08002f59 	.word	0x08002f59
 8002f0c:	08002f61 	.word	0x08002f61
 8002f10:	08002f69 	.word	0x08002f69
 8002f14:	08002f71 	.word	0x08002f71
 8002f18:	08002f79 	.word	0x08002f79
 8002f1c:	08002f81 	.word	0x08002f81
 8002f20:	08002f89 	.word	0x08002f89
 8002f24:	08002f91 	.word	0x08002f91
 8002f28:	08002f99 	.word	0x08002f99
 8002f2c:	08002fa1 	.word	0x08002fa1
 8002f30:	08002fa9 	.word	0x08002fa9
 8002f34:	08002fb1 	.word	0x08002fb1
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8002f38:	2006      	movs	r0, #6
 8002f3a:	f7ff f923 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f3e:	e03c      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8002f40:	2007      	movs	r0, #7
 8002f42:	f7ff f91f 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f46:	e038      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8002f48:	2008      	movs	r0, #8
 8002f4a:	f7ff f91b 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f4e:	e034      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8002f50:	2009      	movs	r0, #9
 8002f52:	f7ff f917 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f56:	e030      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8002f58:	200a      	movs	r0, #10
 8002f5a:	f7ff f913 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f5e:	e02c      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f60:	2017      	movs	r0, #23
 8002f62:	f7ff f90f 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f66:	e028      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f68:	2017      	movs	r0, #23
 8002f6a:	f7ff f90b 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f6e:	e024      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f70:	2017      	movs	r0, #23
 8002f72:	f7ff f907 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f76:	e020      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f78:	2017      	movs	r0, #23
 8002f7a:	f7ff f903 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f7e:	e01c      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f80:	2017      	movs	r0, #23
 8002f82:	f7ff f8ff 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f86:	e018      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f88:	2028      	movs	r0, #40	; 0x28
 8002f8a:	f7ff f8fb 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f8e:	e014      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f90:	2028      	movs	r0, #40	; 0x28
 8002f92:	f7ff f8f7 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f96:	e010      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f98:	2028      	movs	r0, #40	; 0x28
 8002f9a:	f7ff f8f3 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002f9e:	e00c      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fa0:	2028      	movs	r0, #40	; 0x28
 8002fa2:	f7ff f8ef 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002fa6:	e008      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fa8:	2028      	movs	r0, #40	; 0x28
 8002faa:	f7ff f8eb 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002fae:	e004      	b.n	8002fba <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002fb0:	2028      	movs	r0, #40	; 0x28
 8002fb2:	f7ff f8e7 	bl	8002184 <__NVIC_EnableIRQ>
		break;
 8002fb6:	e000      	b.n	8002fba <extInt_Config+0xdfa>
	}

	default: {
		break;
 8002fb8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002fba:	b662      	cpsie	i
}
 8002fbc:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40021c00 	.word	0x40021c00
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
	__NOP();
 8002fe0:	bf00      	nop
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
	__NOP();
 8002ff0:	bf00      	nop
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
	__NOP();
 8003000:	bf00      	nop
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
	__NOP();
 8003010:	bf00      	nop
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
	__NOP();
 8003020:	bf00      	nop
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
	__NOP();
 8003030:	bf00      	nop
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
	__NOP();
 8003040:	bf00      	nop
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
	__NOP();
 8003050:	bf00      	nop
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
	__NOP();
 8003060:	bf00      	nop
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
	__NOP();
 8003070:	bf00      	nop
}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
	__NOP();
 8003080:	bf00      	nop
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
	__NOP();
 8003090:	bf00      	nop
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
	__NOP();
 80030a0:	bf00      	nop
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
	__NOP();
 80030b0:	bf00      	nop
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <EXTI0_IRQHandler+0x28>)
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <EXTI0_IRQHandler+0x28>)
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <EXTI0_IRQHandler+0x28>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 80030d8:	f7ff ff80 	bl	8002fdc <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 80030dc:	e000      	b.n	80030e0 <EXTI0_IRQHandler+0x24>
		__NOP();
 80030de:	bf00      	nop
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <EXTI1_IRQHandler+0x28>)
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 80030f8:	4b05      	ldr	r3, [pc, #20]	; (8003110 <EXTI1_IRQHandler+0x28>)
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <EXTI1_IRQHandler+0x28>)
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8003104:	f7fe fb06 	bl	8001714 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8003108:	e000      	b.n	800310c <EXTI1_IRQHandler+0x24>
		__NOP();
 800310a:	bf00      	nop
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40013c00 	.word	0x40013c00

08003114 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <EXTI2_IRQHandler+0x28>)
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <EXTI2_IRQHandler+0x28>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <EXTI2_IRQHandler+0x28>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8003130:	f7ff ff5c 	bl	8002fec <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8003134:	e000      	b.n	8003138 <EXTI2_IRQHandler+0x24>
		__NOP();
 8003136:	bf00      	nop
}
 8003138:	bf00      	nop
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40013c00 	.word	0x40013c00

08003140 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <EXTI3_IRQHandler+0x28>)
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <EXTI3_IRQHandler+0x28>)
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	4a04      	ldr	r2, [pc, #16]	; (8003168 <EXTI3_IRQHandler+0x28>)
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 800315c:	f7fe fb06 	bl	800176c <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8003160:	e000      	b.n	8003164 <EXTI3_IRQHandler+0x24>
		__NOP();
 8003162:	bf00      	nop
}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40013c00 	.word	0x40013c00

0800316c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <EXTI4_IRQHandler+0x28>)
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <EXTI4_IRQHandler+0x28>)
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	4a04      	ldr	r2, [pc, #16]	; (8003194 <EXTI4_IRQHandler+0x28>)
 8003182:	f043 0310 	orr.w	r3, r3, #16
 8003186:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8003188:	f7ff ff38 	bl	8002ffc <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 800318c:	e000      	b.n	8003190 <EXTI4_IRQHandler+0x24>
		__NOP();
 800318e:	bf00      	nop
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40013c00 	.word	0x40013c00

08003198 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	4a22      	ldr	r2, [pc, #136]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031ae:	f043 0320 	orr.w	r3, r3, #32
 80031b2:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 80031b4:	f7ff ff2a 	bl	800300c <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 80031b8:	e03c      	b.n	8003234 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d0:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 80031d2:	f7ff ff23 	bl	800301c <callback_extInt6>
}
 80031d6:	e02d      	b.n	8003234 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 80031f0:	f7ff ff1c 	bl	800302c <callback_extInt7>
}
 80031f4:	e01e      	b.n	8003234 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 800320e:	f7ff ff15 	bl	800303c <callback_extInt8>
}
 8003212:	e00f      	b.n	8003234 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	4a04      	ldr	r2, [pc, #16]	; (8003238 <EXTI9_5_IRQHandler+0xa0>)
 8003226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322a:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 800322c:	f7ff ff0e 	bl	800304c <callback_extInt9>
}
 8003230:	e000      	b.n	8003234 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8003232:	bf00      	nop
}
 8003234:	bf00      	nop
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40013c00 	.word	0x40013c00

0800323c <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8003240:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 8003252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003256:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8003258:	f7ff ff00 	bl	800305c <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 800325c:	e04b      	b.n	80032f6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 800325e:	4b27      	ldr	r3, [pc, #156]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003266:	2b00      	cmp	r3, #0
 8003268:	d008      	beq.n	800327c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4a23      	ldr	r2, [pc, #140]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 8003270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003274:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8003276:	f7ff fef9 	bl	800306c <callback_extInt11>
}
 800327a:	e03c      	b.n	80032f6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8003288:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 800328e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003292:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8003294:	f7ff fef2 	bl	800307c <callback_extInt12>
}
 8003298:	e02d      	b.n	80032f6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	4a14      	ldr	r2, [pc, #80]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 80032ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032b0:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 80032b2:	f7ff feeb 	bl	800308c <callback_extInt13>
}
 80032b6:	e01e      	b.n	80032f6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 80032ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ce:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 80032d0:	f7ff fee4 	bl	800309c <callback_extInt14>
}
 80032d4:	e00f      	b.n	80032f6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4a05      	ldr	r2, [pc, #20]	; (80032fc <EXTI15_10_IRQHandler+0xc0>)
 80032e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ec:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 80032ee:	f7ff fedd 	bl	80030ac <callback_extInt15>
}
 80032f2:	e000      	b.n	80032f6 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 80032f4:	bf00      	nop
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40013c00 	.word	0x40013c00

08003300 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	4608      	mov	r0, r1
 800330a:	4611      	mov	r1, r2
 800330c:	461a      	mov	r2, r3
 800330e:	4603      	mov	r3, r0
 8003310:	70fb      	strb	r3, [r7, #3]
 8003312:	460b      	mov	r3, r1
 8003314:	70bb      	strb	r3, [r7, #2]
 8003316:	4613      	mov	r3, r2
 8003318:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	78ba      	ldrb	r2, [r7, #2]
 8003324:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	787a      	ldrb	r2, [r7, #1]
 800332a:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7c3a      	ldrb	r2, [r7, #16]
 8003330:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	7d3a      	ldrb	r2, [r7, #20]
 8003336:	715a      	strb	r2, [r3, #5]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a88      	ldr	r2, [pc, #544]	; (800357c <GPIO_Config+0x238>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d106      	bne.n	800336c <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <GPIO_Config+0x23c>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a87      	ldr	r2, [pc, #540]	; (8003580 <GPIO_Config+0x23c>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	e03a      	b.n	80033e2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a84      	ldr	r2, [pc, #528]	; (8003584 <GPIO_Config+0x240>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d106      	bne.n	8003384 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003376:	4b82      	ldr	r3, [pc, #520]	; (8003580 <GPIO_Config+0x23c>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a81      	ldr	r2, [pc, #516]	; (8003580 <GPIO_Config+0x23c>)
 800337c:	f043 0302 	orr.w	r3, r3, #2
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	e02e      	b.n	80033e2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a7f      	ldr	r2, [pc, #508]	; (8003588 <GPIO_Config+0x244>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d106      	bne.n	800339c <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800338e:	4b7c      	ldr	r3, [pc, #496]	; (8003580 <GPIO_Config+0x23c>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a7b      	ldr	r2, [pc, #492]	; (8003580 <GPIO_Config+0x23c>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	e022      	b.n	80033e2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a7a      	ldr	r2, [pc, #488]	; (800358c <GPIO_Config+0x248>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d106      	bne.n	80033b4 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 80033a6:	4b76      	ldr	r3, [pc, #472]	; (8003580 <GPIO_Config+0x23c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a75      	ldr	r2, [pc, #468]	; (8003580 <GPIO_Config+0x23c>)
 80033ac:	f043 0308 	orr.w	r3, r3, #8
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	e016      	b.n	80033e2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a75      	ldr	r2, [pc, #468]	; (8003590 <GPIO_Config+0x24c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d106      	bne.n	80033cc <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 80033be:	4b70      	ldr	r3, [pc, #448]	; (8003580 <GPIO_Config+0x23c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a6f      	ldr	r2, [pc, #444]	; (8003580 <GPIO_Config+0x23c>)
 80033c4:	f043 0310 	orr.w	r3, r3, #16
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	e00a      	b.n	80033e2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	4a70      	ldr	r2, [pc, #448]	; (8003594 <GPIO_Config+0x250>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d105      	bne.n	80033e2 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 80033d6:	4b6a      	ldr	r3, [pc, #424]	; (8003580 <GPIO_Config+0x23c>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a69      	ldr	r2, [pc, #420]	; (8003580 <GPIO_Config+0x23c>)
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2103      	movs	r1, #3
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	400a      	ands	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	6819      	ldr	r1, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	430a      	orrs	r2, r1
 8003420:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	789b      	ldrb	r3, [r3, #2]
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4619      	mov	r1, r3
 800343e:	2301      	movs	r3, #1
 8003440:	408b      	lsls	r3, r1
 8003442:	43db      	mvns	r3, r3
 8003444:	4619      	mov	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	400a      	ands	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	430a      	orrs	r2, r1
 800345c:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	78db      	ldrb	r3, [r3, #3]
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2103      	movs	r1, #3
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	400a      	ands	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	791b      	ldrb	r3, [r3, #4]
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2103      	movs	r1, #3
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	4619      	mov	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	400a      	ands	r2, r1
 80034cc:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	68d9      	ldr	r1, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	430a      	orrs	r2, r1
 80034dc:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d143      	bne.n	800356e <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b07      	cmp	r3, #7
 80034ec:	d81f      	bhi.n	800352e <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	6a1a      	ldr	r2, [r3, #32]
 80034fc:	210f      	movs	r1, #15
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	fa01 f303 	lsl.w	r3, r1, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	4619      	mov	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	400a      	ands	r2, r1
 800350e:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	795b      	ldrb	r3, [r3, #5]
 800351a:	4619      	mov	r1, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	4619      	mov	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	430a      	orrs	r2, r1
 800352a:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 800352c:	e01f      	b.n	800356e <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	3b08      	subs	r3, #8
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800353e:	210f      	movs	r1, #15
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	4619      	mov	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	400a      	ands	r2, r1
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	795b      	ldrb	r3, [r3, #5]
 800355c:	4619      	mov	r1, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	4619      	mov	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	430a      	orrs	r2, r1
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40020000 	.word	0x40020000
 8003580:	40023800 	.word	0x40023800
 8003584:	40020400 	.word	0x40020400
 8003588:	40020800 	.word	0x40020800
 800358c:	40020c00 	.word	0x40020c00
 8003590:	40021000 	.word	0x40021000
 8003594:	40021c00 	.word	0x40021c00

08003598 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10d      	bne.n	80035c6 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	2301      	movs	r3, #1
 80035b8:	408b      	lsls	r3, r1
 80035ba:	4619      	mov	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 80035c4:	e00d      	b.n	80035e2 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	3310      	adds	r3, #16
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	430a      	orrs	r2, r1
 80035e0:	619a      	str	r2, [r3, #24]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4619      	mov	r1, r3
 8003602:	2301      	movs	r3, #1
 8003604:	408b      	lsls	r3, r1
 8003606:	4619      	mov	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	404a      	eors	r2, r1
 800360e:	615a      	str	r2, [r3, #20]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8003626:	4a39      	ldr	r2, [pc, #228]	; (800370c <configPLL+0xf0>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 800362c:	79fb      	ldrb	r3, [r7, #7]
 800362e:	2b31      	cmp	r3, #49	; 0x31
 8003630:	d804      	bhi.n	800363c <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <configPLL+0xf4>)
 8003634:	4a36      	ldr	r2, [pc, #216]	; (8003710 <configPLL+0xf4>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	6093      	str	r3, [r2, #8]
 800363a:	e005      	b.n	8003648 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800363c:	4b34      	ldr	r3, [pc, #208]	; (8003710 <configPLL+0xf4>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a33      	ldr	r2, [pc, #204]	; (8003710 <configPLL+0xf4>)
 8003642:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003646:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8003648:	4b31      	ldr	r3, [pc, #196]	; (8003710 <configPLL+0xf4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a30      	ldr	r2, [pc, #192]	; (8003710 <configPLL+0xf4>)
 800364e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003652:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8003654:	4b2e      	ldr	r3, [pc, #184]	; (8003710 <configPLL+0xf4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <configPLL+0xf4>)
 800365a:	f043 0312 	orr.w	r3, r3, #18
 800365e:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8003660:	4b2b      	ldr	r3, [pc, #172]	; (8003710 <configPLL+0xf4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	79fa      	ldrb	r2, [r7, #7]
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	3a0e      	subs	r2, #14
 800366a:	0192      	lsls	r2, r2, #6
 800366c:	4611      	mov	r1, r2
 800366e:	4a28      	ldr	r2, [pc, #160]	; (8003710 <configPLL+0xf4>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <configPLL+0xf4>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <configPLL+0xf4>)
 800367a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367e:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <configPLL+0xf4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a22      	ldr	r2, [pc, #136]	; (8003710 <configPLL+0xf4>)
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368a:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 800368c:	e000      	b.n	8003690 <configPLL+0x74>
	{
		__NOP();
 800368e:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8003690:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <configPLL+0xf4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f8      	beq.n	800368e <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	2b5a      	cmp	r3, #90	; 0x5a
 80036a0:	d909      	bls.n	80036b6 <configPLL+0x9a>
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	2b64      	cmp	r3, #100	; 0x64
 80036a6:	d806      	bhi.n	80036b6 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 80036a8:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <configPLL+0xf8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <configPLL+0xf8>)
 80036ae:	f043 0303 	orr.w	r3, r3, #3
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e01d      	b.n	80036f2 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d909      	bls.n	80036d0 <configPLL+0xb4>
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	2b5a      	cmp	r3, #90	; 0x5a
 80036c0:	d806      	bhi.n	80036d0 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <configPLL+0xf8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a13      	ldr	r2, [pc, #76]	; (8003714 <configPLL+0xf8>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e010      	b.n	80036f2 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	2b1e      	cmp	r3, #30
 80036d4:	d909      	bls.n	80036ea <configPLL+0xce>
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b40      	cmp	r3, #64	; 0x40
 80036da:	d806      	bhi.n	80036ea <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80036dc:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <configPLL+0xf8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <configPLL+0xf8>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e003      	b.n	80036f2 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <configPLL+0xf8>)
 80036ec:	4a09      	ldr	r2, [pc, #36]	; (8003714 <configPLL+0xf8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <configPLL+0xf4>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <configPLL+0xf4>)
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	6093      	str	r3, [r2, #8]

}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	200003d4 	.word	0x200003d4
 8003710:	40023800 	.word	0x40023800
 8003714:	40023c00 	.word	0x40023c00

08003718 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <getConfigPLL+0x30>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d103      	bne.n	8003736 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <getConfigPLL+0x34>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	71fb      	strb	r3, [r7, #7]
 8003734:	e001      	b.n	800373a <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8003736:	2310      	movs	r3, #16
 8003738:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 800373a:	79fb      	ldrb	r3, [r7, #7]
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40023800 	.word	0x40023800
 800374c:	200003d4 	.word	0x200003d4

08003750 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003756:	f7ff ffdf 	bl	8003718 <getConfigPLL>
 800375a:	4603      	mov	r3, r0
 800375c:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 800375e:	2300      	movs	r3, #0
 8003760:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8003762:	79bb      	ldrb	r3, [r7, #6]
 8003764:	2b31      	cmp	r3, #49	; 0x31
 8003766:	d802      	bhi.n	800376e <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8003768:	79bb      	ldrb	r3, [r7, #6]
 800376a:	71fb      	strb	r3, [r7, #7]
 800376c:	e002      	b.n	8003774 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 800376e:	79bb      	ldrb	r3, [r7, #6]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8003774:	79fb      	ldrb	r3, [r7, #7]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <configMCO2+0x34>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <configMCO2+0x34>)
 8003790:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003794:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <configMCO2+0x34>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	79fa      	ldrb	r2, [r7, #7]
 800379c:	0792      	lsls	r2, r2, #30
 800379e:	4611      	mov	r1, r2
 80037a0:	4a04      	ldr	r2, [pc, #16]	; (80037b4 <configMCO2+0x34>)
 80037a2:	430b      	orrs	r3, r1
 80037a4:	6093      	str	r3, [r2, #8]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800

080037b8 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d84b      	bhi.n	8003862 <configMCO2PRE+0xaa>
 80037ca:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <configMCO2PRE+0x18>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e5 	.word	0x080037e5
 80037d4:	080037fb 	.word	0x080037fb
 80037d8:	08003815 	.word	0x08003815
 80037dc:	0800382f 	.word	0x0800382f
 80037e0:	08003849 	.word	0x08003849
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80037e4:	4b23      	ldr	r3, [pc, #140]	; (8003874 <configMCO2PRE+0xbc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a22      	ldr	r2, [pc, #136]	; (8003874 <configMCO2PRE+0xbc>)
 80037ea:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80037ee:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <configMCO2PRE+0xbc>)
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <configMCO2PRE+0xbc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	6093      	str	r3, [r2, #8]
			break;
 80037f8:	e035      	b.n	8003866 <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80037fa:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <configMCO2PRE+0xbc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4a1d      	ldr	r2, [pc, #116]	; (8003874 <configMCO2PRE+0xbc>)
 8003800:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003804:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8003806:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <configMCO2PRE+0xbc>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <configMCO2PRE+0xbc>)
 800380c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003810:	6093      	str	r3, [r2, #8]
			break;
 8003812:	e028      	b.n	8003866 <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003814:	4b17      	ldr	r3, [pc, #92]	; (8003874 <configMCO2PRE+0xbc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a16      	ldr	r2, [pc, #88]	; (8003874 <configMCO2PRE+0xbc>)
 800381a:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800381e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <configMCO2PRE+0xbc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <configMCO2PRE+0xbc>)
 8003826:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 800382a:	6093      	str	r3, [r2, #8]
			break;
 800382c:	e01b      	b.n	8003866 <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <configMCO2PRE+0xbc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4a10      	ldr	r2, [pc, #64]	; (8003874 <configMCO2PRE+0xbc>)
 8003834:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003838:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <configMCO2PRE+0xbc>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <configMCO2PRE+0xbc>)
 8003840:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8003844:	6093      	str	r3, [r2, #8]
			break;
 8003846:	e00e      	b.n	8003866 <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <configMCO2PRE+0xbc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <configMCO2PRE+0xbc>)
 800384e:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003852:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003854:	4b07      	ldr	r3, [pc, #28]	; (8003874 <configMCO2PRE+0xbc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4a06      	ldr	r2, [pc, #24]	; (8003874 <configMCO2PRE+0xbc>)
 800385a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800385e:	6093      	str	r3, [r2, #8]
			break;
 8003860:	e001      	b.n	8003866 <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8003862:	bf00      	nop
			break;
 8003864:	bf00      	nop
		}
	}

}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800

08003878 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d106      	bne.n	8003898 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800388a:	4b81      	ldr	r3, [pc, #516]	; (8003a90 <pwm_Config+0x218>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a80      	ldr	r2, [pc, #512]	; (8003a90 <pwm_Config+0x218>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	e024      	b.n	80038e2 <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a7d      	ldr	r2, [pc, #500]	; (8003a94 <pwm_Config+0x21c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d106      	bne.n	80038b0 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80038a2:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <pwm_Config+0x218>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a7a      	ldr	r2, [pc, #488]	; (8003a90 <pwm_Config+0x218>)
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
 80038ae:	e018      	b.n	80038e2 <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a78      	ldr	r2, [pc, #480]	; (8003a98 <pwm_Config+0x220>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d106      	bne.n	80038c8 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80038ba:	4b75      	ldr	r3, [pc, #468]	; (8003a90 <pwm_Config+0x218>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4a74      	ldr	r2, [pc, #464]	; (8003a90 <pwm_Config+0x218>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40
 80038c6:	e00c      	b.n	80038e2 <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a73      	ldr	r2, [pc, #460]	; (8003a9c <pwm_Config+0x224>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d106      	bne.n	80038e0 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80038d2:	4b6f      	ldr	r3, [pc, #444]	; (8003a90 <pwm_Config+0x218>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a6e      	ldr	r2, [pc, #440]	; (8003a90 <pwm_Config+0x218>)
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	6413      	str	r3, [r2, #64]	; 0x40
 80038de:	e000      	b.n	80038e2 <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 80038e0:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fa4c 	bl	8003d80 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	f200 8118 	bhi.w	8003b22 <pwm_Config+0x2aa>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <pwm_Config+0x80>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	08003909 	.word	0x08003909
 80038fc:	0800398b 	.word	0x0800398b
 8003900:	08003a0d 	.word	0x08003a0d
 8003904:	08003aa1 	.word	0x08003aa1
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	699a      	ldr	r2, [r3, #24]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f022 0203 	bic.w	r2, r2, #3
 8003916:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003926:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003936:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f022 0208 	bic.w	r2, r2, #8
 8003946:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f042 0208 	orr.w	r2, r2, #8
 8003956:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f022 0204 	bic.w	r2, r2, #4
 8003966:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f042 0204 	orr.w	r2, r2, #4
 8003976:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	699a      	ldr	r2, [r3, #24]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003986:	619a      	str	r2, [r3, #24]

		break;
 8003988:	e0cc      	b.n	8003b24 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f022 0203 	bic.w	r2, r2, #3
 8003998:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039a8:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	699a      	ldr	r2, [r3, #24]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80039b8:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c8:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d8:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e8:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039f8:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a08:	619a      	str	r2, [r3, #24]

		break;
 8003a0a:	e08b      	b.n	8003b24 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	69da      	ldr	r2, [r3, #28]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f022 0203 	bic.w	r2, r2, #3
 8003a1a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a2a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003a3a:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f022 0208 	bic.w	r2, r2, #8
 8003a4a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	69da      	ldr	r2, [r3, #28]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f042 0208 	orr.w	r2, r2, #8
 8003a5a:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	69da      	ldr	r2, [r3, #28]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f022 0204 	bic.w	r2, r2, #4
 8003a6a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f042 0204 	orr.w	r2, r2, #4
 8003a7a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	69da      	ldr	r2, [r3, #28]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a8a:	61da      	str	r2, [r3, #28]

		break;
 8003a8c:	e04a      	b.n	8003b24 <pwm_Config+0x2ac>
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003aae:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003abe:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003ace:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ade:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aee:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b0e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1e:	61da      	str	r2, [r3, #28]

		break;
 8003b20:	e000      	b.n	8003b24 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8003b22:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	791b      	ldrb	r3, [r3, #4]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f896 	bl	8003c5c <statusPolarityPWM>

}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d87f      	bhi.n	8003c4c <statusInOutPWM+0x114>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <statusInOutPWM+0x1c>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b65 	.word	0x08003b65
 8003b58:	08003b9f 	.word	0x08003b9f
 8003b5c:	08003bd9 	.word	0x08003bd9
 8003b60:	08003c13 	.word	0x08003c13
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d110      	bne.n	8003b8c <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	6a1a      	ldr	r2, [r3, #32]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	6a1a      	ldr	r2, [r3, #32]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8003b8a:	e060      	b.n	8003c4e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	6a1a      	ldr	r2, [r3, #32]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f022 0201 	bic.w	r2, r2, #1
 8003b9a:	621a      	str	r2, [r3, #32]
		break;
 8003b9c:	e057      	b.n	8003c4e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d110      	bne.n	8003bc6 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f022 0210 	bic.w	r2, r2, #16
 8003bb2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f042 0210 	orr.w	r2, r2, #16
 8003bc2:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8003bc4:	e043      	b.n	8003c4e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f022 0210 	bic.w	r2, r2, #16
 8003bd4:	621a      	str	r2, [r3, #32]
		break;
 8003bd6:	e03a      	b.n	8003c4e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d110      	bne.n	8003c00 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bec:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bfc:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8003bfe:	e026      	b.n	8003c4e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c0e:	621a      	str	r2, [r3, #32]
		break;
 8003c10:	e01d      	b.n	8003c4e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d110      	bne.n	8003c3a <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c26:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	6a1a      	ldr	r2, [r3, #32]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c36:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8003c38:	e009      	b.n	8003c4e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	6a1a      	ldr	r2, [r3, #32]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c48:	621a      	str	r2, [r3, #32]
		break;
 8003c4a:	e000      	b.n	8003c4e <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8003c4c:	bf00      	nop
	}
	}
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop

08003c5c <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d87f      	bhi.n	8003d70 <statusPolarityPWM+0x114>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <statusPolarityPWM+0x1c>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003cc3 	.word	0x08003cc3
 8003c80:	08003cfd 	.word	0x08003cfd
 8003c84:	08003d37 	.word	0x08003d37
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d110      	bne.n	8003cb0 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f022 0202 	bic.w	r2, r2, #2
 8003c9c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	6a1a      	ldr	r2, [r3, #32]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f042 0202 	orr.w	r2, r2, #2
 8003cac:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8003cae:	e060      	b.n	8003d72 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f022 0202 	bic.w	r2, r2, #2
 8003cbe:	621a      	str	r2, [r3, #32]
		break;
 8003cc0:	e057      	b.n	8003d72 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d110      	bne.n	8003cea <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f022 0220 	bic.w	r2, r2, #32
 8003cd6:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f042 0220 	orr.w	r2, r2, #32
 8003ce6:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8003ce8:	e043      	b.n	8003d72 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f022 0220 	bic.w	r2, r2, #32
 8003cf8:	621a      	str	r2, [r3, #32]
		break;
 8003cfa:	e03a      	b.n	8003d72 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8003cfc:	78fb      	ldrb	r3, [r7, #3]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d110      	bne.n	8003d24 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	6a1a      	ldr	r2, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d10:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	6a1a      	ldr	r2, [r3, #32]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8003d22:	e026      	b.n	8003d72 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d32:	621a      	str	r2, [r3, #32]
		break;
 8003d34:	e01d      	b.n	8003d72 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d110      	bne.n	8003d5e <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d4a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d5a:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8003d5c:	e009      	b.n	8003d72 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	6a1a      	ldr	r2, [r3, #32]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6c:	621a      	str	r2, [r3, #32]
		break;
 8003d6e:	e000      	b.n	8003d72 <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8003d70:	bf00      	nop
	}
	}

}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop

08003d80 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d823      	bhi.n	8003dd8 <setDuttyCycle+0x58>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <setDuttyCycle+0x18>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003db5 	.word	0x08003db5
 8003da0:	08003dc1 	.word	0x08003dc1
 8003da4:	08003dcd 	.word	0x08003dcd
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	885a      	ldrh	r2, [r3, #2]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003db2:	e012      	b.n	8003dda <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	885a      	ldrh	r2, [r3, #2]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003dbe:	e00c      	b.n	8003dda <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	885a      	ldrh	r2, [r3, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003dca:	e006      	b.n	8003dda <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	885a      	ldrh	r2, [r3, #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003dd6:	e000      	b.n	8003dda <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8003dd8:	bf00      	nop
	}
	}

}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop

08003de8 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	4a0d      	ldr	r2, [pc, #52]	; (8003e30 <updateDuttyCyclePercentageFloat+0x48>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e0c:	edd7 7a00 	vldr	s15, [r7]
 8003e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e18:	ee17 3a90 	vmov	r3, s15
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff ffac 	bl	8003d80 <setDuttyCycle>
}
 8003e28:	bf00      	nop
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	51eb851f 	.word	0x51eb851f

08003e34 <__NVIC_EnableIRQ>:
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	db0b      	blt.n	8003e5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	f003 021f 	and.w	r2, r3, #31
 8003e4c:	4907      	ldr	r1, [pc, #28]	; (8003e6c <__NVIC_EnableIRQ+0x38>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	2001      	movs	r0, #1
 8003e56:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000e100 	.word	0xe000e100

08003e70 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a8f      	ldr	r2, [pc, #572]	; (80040bc <USART_Config+0x24c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d107      	bne.n	8003e92 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8003e82:	4b8f      	ldr	r3, [pc, #572]	; (80040c0 <USART_Config+0x250>)
 8003e84:	2210      	movs	r2, #16
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a8d      	ldr	r2, [pc, #564]	; (80040c4 <USART_Config+0x254>)
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e019      	b.n	8003ec6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4a8c      	ldr	r2, [pc, #560]	; (80040c8 <USART_Config+0x258>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8003e9c:	4b88      	ldr	r3, [pc, #544]	; (80040c0 <USART_Config+0x250>)
 8003e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a88      	ldr	r2, [pc, #544]	; (80040cc <USART_Config+0x25c>)
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	e00b      	b.n	8003ec6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4a87      	ldr	r2, [pc, #540]	; (80040d0 <USART_Config+0x260>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d106      	bne.n	8003ec6 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8003eb8:	4b81      	ldr	r3, [pc, #516]	; (80040c0 <USART_Config+0x250>)
 8003eba:	2220      	movs	r2, #32
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	4a84      	ldr	r2, [pc, #528]	; (80040d4 <USART_Config+0x264>)
 8003ec4:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	789b      	ldrb	r3, [r3, #2]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d03d      	beq.n	8003f5a <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eec:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003efc:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f0c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f1c:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	789b      	ldrb	r3, [r3, #2]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d110      	bne.n	8003f48 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f34:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	e018      	b.n	8003f7a <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	e00f      	b.n	8003f7a <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f68:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f78:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	78db      	ldrb	r3, [r3, #3]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d84c      	bhi.n	800401c <USART_Config+0x1ac>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <USART_Config+0x118>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003f99 	.word	0x08003f99
 8003f8c:	08003fb7 	.word	0x08003fb7
 8003f90:	08003fd9 	.word	0x08003fd9
 8003f94:	08003ffb 	.word	0x08003ffb
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003fa6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	6912      	ldr	r2, [r2, #16]
 8003fb2:	611a      	str	r2, [r3, #16]
		break;
 8003fb4:	e041      	b.n	800403a <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003fc4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fd4:	611a      	str	r2, [r3, #16]
		break;
 8003fd6:	e030      	b.n	800403a <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003fe6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff6:	611a      	str	r2, [r3, #16]
		break;
 8003ff8:	e01f      	b.n	800403a <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004008:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004018:	611a      	str	r2, [r3, #16]
		break;
 800401a:	e00e      	b.n	800403a <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800402a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	6912      	ldr	r2, [r2, #16]
 8004036:	611a      	str	r2, [r3, #16]
		break;
 8004038:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4a21      	ldr	r2, [pc, #132]	; (80040c8 <USART_Config+0x258>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d104      	bne.n	8004052 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004048:	f7ff fb82 	bl	8003750 <getClockAPB1>
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e003      	b.n	800405a <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8004052:	f7ff fb61 	bl	8003718 <getConfigPLL>
 8004056:	4603      	mov	r3, r0
 8004058:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004068:	4618      	mov	r0, r3
 800406a:	f000 f91f 	bl	80042ac <getValueBaudRate>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	e02f      	b.n	80040da <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	785b      	ldrb	r3, [r3, #1]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10b      	bne.n	800409a <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8004088:	4618      	mov	r0, r3
 800408a:	f000 f90f 	bl	80042ac <getValueBaudRate>
 800408e:	4603      	mov	r3, r0
 8004090:	461a      	mov	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	e01f      	b.n	80040da <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	785b      	ldrb	r3, [r3, #1]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d11a      	bne.n	80040d8 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 f8ff 	bl	80042ac <getValueBaudRate>
 80040ae:	4603      	mov	r3, r0
 80040b0:	461a      	mov	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	e00f      	b.n	80040da <USART_Config+0x26a>
 80040ba:	bf00      	nop
 80040bc:	40011000 	.word	0x40011000
 80040c0:	40023800 	.word	0x40023800
 80040c4:	200003d8 	.word	0x200003d8
 80040c8:	40004400 	.word	0x40004400
 80040cc:	200003dc 	.word	0x200003dc
 80040d0:	40011400 	.word	0x40011400
 80040d4:	200003e0 	.word	0x200003e0
	}
	else
	{
		__NOP();
 80040d8:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d866      	bhi.n	80041b0 <USART_Config+0x340>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <USART_Config+0x278>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	0800411b 	.word	0x0800411b
 80040f0:	0800413d 	.word	0x0800413d
 80040f4:	0800417f 	.word	0x0800417f
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f022 0208 	bic.w	r2, r2, #8
 8004106:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f042 0208 	orr.w	r2, r2, #8
 8004116:	60da      	str	r2, [r3, #12]

		break;
 8004118:	e063      	b.n	80041e2 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f022 0204 	bic.w	r2, r2, #4
 8004128:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f042 0204 	orr.w	r2, r2, #4
 8004138:	60da      	str	r2, [r3, #12]

		break;
 800413a:	e052      	b.n	80041e2 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f022 0208 	bic.w	r2, r2, #8
 800414a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f022 0204 	bic.w	r2, r2, #4
 800416a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f042 0204 	orr.w	r2, r2, #4
 800417a:	60da      	str	r2, [r3, #12]


		break;
 800417c:	e031      	b.n	80041e2 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800418c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f022 0208 	bic.w	r2, r2, #8
 800419c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f022 0204 	bic.w	r2, r2, #4
 80041ac:	60da      	str	r2, [r3, #12]
		break;
 80041ae:	e018      	b.n	80041e2 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041be:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f022 0208 	bic.w	r2, r2, #8
 80041ce:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	60da      	str	r2, [r3, #12]
		break;
 80041e0:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80041e2:	b672      	cpsid	i
}
 80041e4:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	791b      	ldrb	r3, [r3, #4]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d110      	bne.n	8004210 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f022 0220 	bic.w	r2, r2, #32
 80041fc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f042 0220 	orr.w	r2, r2, #32
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	e007      	b.n	8004220 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f022 0220 	bic.w	r2, r2, #32
 800421e:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	791b      	ldrb	r3, [r3, #4]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d003      	beq.n	8004230 <USART_Config+0x3c0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	795b      	ldrb	r3, [r3, #5]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d11a      	bne.n	8004266 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a1a      	ldr	r2, [pc, #104]	; (80042a0 <USART_Config+0x430>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d103      	bne.n	8004242 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 800423a:	2025      	movs	r0, #37	; 0x25
 800423c:	f7ff fdfa 	bl	8003e34 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004240:	e013      	b.n	800426a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <USART_Config+0x434>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 800424c:	2026      	movs	r0, #38	; 0x26
 800424e:	f7ff fdf1 	bl	8003e34 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004252:	e00a      	b.n	800426a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <USART_Config+0x438>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d105      	bne.n	800426a <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800425e:	2047      	movs	r0, #71	; 0x47
 8004260:	f7ff fde8 	bl	8003e34 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004264:	e001      	b.n	800426a <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800426a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800426c:	b662      	cpsie	i
}
 800426e:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d00f      	beq.n	8004298 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004286:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004296:	60da      	str	r2, [r3, #12]
	}
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40011000 	.word	0x40011000
 80042a4:	40004400 	.word	0x40004400
 80042a8:	40011400 	.word	0x40011400

080042ac <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 80042ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	4601      	mov	r1, r0
 80042b8:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 80042ba:	79f9      	ldrb	r1, [r7, #7]
 80042bc:	2000      	movs	r0, #0
 80042be:	460a      	mov	r2, r1
 80042c0:	4603      	mov	r3, r0
 80042c2:	491f      	ldr	r1, [pc, #124]	; (8004340 <getValueBaudRate+0x94>)
 80042c4:	fb01 f003 	mul.w	r0, r1, r3
 80042c8:	2102      	movs	r1, #2
 80042ca:	fb02 f101 	mul.w	r1, r2, r1
 80042ce:	4401      	add	r1, r0
 80042d0:	481b      	ldr	r0, [pc, #108]	; (8004340 <getValueBaudRate+0x94>)
 80042d2:	fba2 4500 	umull	r4, r5, r2, r0
 80042d6:	194b      	adds	r3, r1, r5
 80042d8:	461d      	mov	r5, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	2200      	movs	r2, #0
 80042e0:	4698      	mov	r8, r3
 80042e2:	4691      	mov	r9, r2
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	4620      	mov	r0, r4
 80042ea:	4629      	mov	r1, r5
 80042ec:	f7fc fce4 	bl	8000cb8 <__aeabi_ldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4613      	mov	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <getValueBaudRate+0x98>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	0b5b      	lsrs	r3, r3, #13
 8004302:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f242 7210 	movw	r2, #10000	; 0x2710
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <getValueBaudRate+0x98>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	0a5b      	lsrs	r3, r3, #9
 8004322:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	b29b      	uxth	r3, r3
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	b29a      	uxth	r2, r3
 800432c:	7afb      	ldrb	r3, [r7, #11]
 800432e:	b29b      	uxth	r3, r3
 8004330:	4313      	orrs	r3, r2
 8004332:	813b      	strh	r3, [r7, #8]

    return value;
 8004334:	893b      	ldrh	r3, [r7, #8]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004340:	540be400 	.word	0x540be400
 8004344:	d1b71759 	.word	0xd1b71759

08004348 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004354:	e000      	b.n	8004358 <writeChar+0x10>
	{
		__NOP();
 8004356:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f7      	beq.n	8004356 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	605a      	str	r2, [r3, #4]

}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8004388:	e00a      	b.n	80043a0 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	4413      	add	r3, r2
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ffd7 	bl	8004348 <writeChar>
		i++;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	3301      	adds	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ee      	bne.n	800438a <writeMsg+0x10>
	}
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 80043c2:	4b16      	ldr	r3, [pc, #88]	; (800441c <writeMsgForTXE+0x64>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d111      	bne.n	80043ee <writeMsgForTXE+0x36>
 80043ca:	4b15      	ldr	r3, [pc, #84]	; (8004420 <writeMsgForTXE+0x68>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 80043d2:	6839      	ldr	r1, [r7, #0]
 80043d4:	4813      	ldr	r0, [pc, #76]	; (8004424 <writeMsgForTXE+0x6c>)
 80043d6:	f001 f8a9 	bl	800552c <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <writeMsgForTXE+0x70>)
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f830 	bl	800444c <interruptionTX>
 80043ec:	e012      	b.n	8004414 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 80043ee:	4b0f      	ldr	r3, [pc, #60]	; (800442c <writeMsgForTXE+0x74>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	2364      	movs	r3, #100	; 0x64
 80043f6:	fb02 f303 	mul.w	r3, r2, r3
 80043fa:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <writeMsgForTXE+0x78>)
 80043fc:	4413      	add	r3, r2
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f001 f893 	bl	800552c <siprintf>
		inLine++;
 8004406:	4b09      	ldr	r3, [pc, #36]	; (800442c <writeMsgForTXE+0x74>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	3301      	adds	r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <writeMsgForTXE+0x74>)
 8004410:	701a      	strb	r2, [r3, #0]
	}
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000c1e 	.word	0x20000c1e
 8004420:	20000c1d 	.word	0x20000c1d
 8004424:	200003e8 	.word	0x200003e8
 8004428:	20000c1f 	.word	0x20000c1f
 800442c:	20000c1c 	.word	0x20000c1c
 8004430:	2000044c 	.word	0x2000044c

08004434 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
	return auxRxData;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <getRxData+0x14>)
 800443a:	781b      	ldrb	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	200003e4 	.word	0x200003e4

0800444c <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d10c      	bne.n	8004478 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8004476:	e005      	b.n	8004484 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60da      	str	r2, [r3, #12]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
	__NOP();
 8004494:	bf00      	nop
}
 8004496:	bf00      	nop
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
	__NOP();
 80044a4:	bf00      	nop
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80044b4:	4b37      	ldr	r3, [pc, #220]	; (8004594 <USART1_IRQHandler+0xe4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80044c2:	4b34      	ldr	r3, [pc, #208]	; (8004594 <USART1_IRQHandler+0xe4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4b33      	ldr	r3, [pc, #204]	; (8004598 <USART1_IRQHandler+0xe8>)
 80044cc:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80044ce:	f7ff ffdf 	bl	8004490 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80044d2:	e05d      	b.n	8004590 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <USART1_IRQHandler+0xe4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d055      	beq.n	800458e <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <USART1_IRQHandler+0xec>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 80044ea:	4b2d      	ldr	r3, [pc, #180]	; (80045a0 <USART1_IRQHandler+0xf0>)
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <USART1_IRQHandler+0xe4>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <USART1_IRQHandler+0xe4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff ffa6 	bl	800444c <interruptionTX>
}
 8004500:	e046      	b.n	8004590 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004502:	4b26      	ldr	r3, [pc, #152]	; (800459c <USART1_IRQHandler+0xec>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d142      	bne.n	8004590 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800450a:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <USART1_IRQHandler+0xf4>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <USART1_IRQHandler+0xf8>)
 8004512:	5c9b      	ldrb	r3, [r3, r2]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00e      	beq.n	8004536 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8004518:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <USART1_IRQHandler+0xf4>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	4b22      	ldr	r3, [pc, #136]	; (80045a8 <USART1_IRQHandler+0xf8>)
 8004520:	5c9a      	ldrb	r2, [r3, r2]
 8004522:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <USART1_IRQHandler+0xe4>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
				posChar++;
 8004528:	4b1e      	ldr	r3, [pc, #120]	; (80045a4 <USART1_IRQHandler+0xf4>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <USART1_IRQHandler+0xf4>)
 8004532:	701a      	strb	r2, [r3, #0]
}
 8004534:	e02c      	b.n	8004590 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <USART1_IRQHandler+0xfc>)
 8004538:	781a      	ldrb	r2, [r3, #0]
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <USART1_IRQHandler+0x100>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	429a      	cmp	r2, r3
 8004540:	d215      	bcs.n	800456e <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <USART1_IRQHandler+0xfc>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	2364      	movs	r3, #100	; 0x64
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <USART1_IRQHandler+0x104>)
 8004550:	4413      	add	r3, r2
 8004552:	4619      	mov	r1, r3
 8004554:	4814      	ldr	r0, [pc, #80]	; (80045a8 <USART1_IRQHandler+0xf8>)
 8004556:	f000 ffe9 	bl	800552c <siprintf>
					posChar = 0;
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <USART1_IRQHandler+0xf4>)
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004560:	4b12      	ldr	r3, [pc, #72]	; (80045ac <USART1_IRQHandler+0xfc>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	b2da      	uxtb	r2, r3
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <USART1_IRQHandler+0xfc>)
 800456a:	701a      	strb	r2, [r3, #0]
}
 800456c:	e010      	b.n	8004590 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <USART1_IRQHandler+0xe4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff ff69 	bl	800444c <interruptionTX>
					posChar = 0;
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <USART1_IRQHandler+0xf4>)
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <USART1_IRQHandler+0xfc>)
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <USART1_IRQHandler+0x100>)
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
}
 800458c:	e000      	b.n	8004590 <USART1_IRQHandler+0xe0>
		__NOP();
 800458e:	bf00      	nop
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200003d8 	.word	0x200003d8
 8004598:	200003e4 	.word	0x200003e4
 800459c:	20000c1f 	.word	0x20000c1f
 80045a0:	200003e5 	.word	0x200003e5
 80045a4:	20000c1e 	.word	0x20000c1e
 80045a8:	200003e8 	.word	0x200003e8
 80045ac:	20000c1d 	.word	0x20000c1d
 80045b0:	20000c1c 	.word	0x20000c1c
 80045b4:	2000044c 	.word	0x2000044c

080045b8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 80045bc:	4b37      	ldr	r3, [pc, #220]	; (800469c <USART2_IRQHandler+0xe4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 80045ca:	4b34      	ldr	r3, [pc, #208]	; (800469c <USART2_IRQHandler+0xe4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <USART2_IRQHandler+0xe8>)
 80045d4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 80045d6:	f7fd f88f 	bl	80016f8 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 80045da:	e05d      	b.n	8004698 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 80045dc:	4b2f      	ldr	r3, [pc, #188]	; (800469c <USART2_IRQHandler+0xe4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d055      	beq.n	8004696 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80045ea:	4b2e      	ldr	r3, [pc, #184]	; (80046a4 <USART2_IRQHandler+0xec>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 80045f2:	4b2d      	ldr	r3, [pc, #180]	; (80046a8 <USART2_IRQHandler+0xf0>)
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	4b29      	ldr	r3, [pc, #164]	; (800469c <USART2_IRQHandler+0xe4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80045fc:	4b27      	ldr	r3, [pc, #156]	; (800469c <USART2_IRQHandler+0xe4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff ff22 	bl	800444c <interruptionTX>
}
 8004608:	e046      	b.n	8004698 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800460a:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <USART2_IRQHandler+0xec>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d142      	bne.n	8004698 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <USART2_IRQHandler+0xf4>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <USART2_IRQHandler+0xf8>)
 800461a:	5c9b      	ldrb	r3, [r3, r2]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00e      	beq.n	800463e <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8004620:	4b22      	ldr	r3, [pc, #136]	; (80046ac <USART2_IRQHandler+0xf4>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	4b22      	ldr	r3, [pc, #136]	; (80046b0 <USART2_IRQHandler+0xf8>)
 8004628:	5c9a      	ldrb	r2, [r3, r2]
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <USART2_IRQHandler+0xe4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	605a      	str	r2, [r3, #4]
				posChar++;
 8004630:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <USART2_IRQHandler+0xf4>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <USART2_IRQHandler+0xf4>)
 800463a:	701a      	strb	r2, [r3, #0]
}
 800463c:	e02c      	b.n	8004698 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <USART2_IRQHandler+0xfc>)
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <USART2_IRQHandler+0x100>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d215      	bcs.n	8004676 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800464a:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <USART2_IRQHandler+0xfc>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	2364      	movs	r3, #100	; 0x64
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <USART2_IRQHandler+0x104>)
 8004658:	4413      	add	r3, r2
 800465a:	4619      	mov	r1, r3
 800465c:	4814      	ldr	r0, [pc, #80]	; (80046b0 <USART2_IRQHandler+0xf8>)
 800465e:	f000 ff65 	bl	800552c <siprintf>
					posChar = 0;
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <USART2_IRQHandler+0xf4>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <USART2_IRQHandler+0xfc>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	b2da      	uxtb	r2, r3
 8004670:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <USART2_IRQHandler+0xfc>)
 8004672:	701a      	strb	r2, [r3, #0]
}
 8004674:	e010      	b.n	8004698 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <USART2_IRQHandler+0xe4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2100      	movs	r1, #0
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fee5 	bl	800444c <interruptionTX>
					posChar = 0;
 8004682:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <USART2_IRQHandler+0xf4>)
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <USART2_IRQHandler+0xfc>)
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800468e:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <USART2_IRQHandler+0x100>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
}
 8004694:	e000      	b.n	8004698 <USART2_IRQHandler+0xe0>
		__NOP();
 8004696:	bf00      	nop
}
 8004698:	bf00      	nop
 800469a:	bd80      	pop	{r7, pc}
 800469c:	200003dc 	.word	0x200003dc
 80046a0:	200003e4 	.word	0x200003e4
 80046a4:	20000c1f 	.word	0x20000c1f
 80046a8:	200003e5 	.word	0x200003e5
 80046ac:	20000c1e 	.word	0x20000c1e
 80046b0:	200003e8 	.word	0x200003e8
 80046b4:	20000c1d 	.word	0x20000c1d
 80046b8:	20000c1c 	.word	0x20000c1c
 80046bc:	2000044c 	.word	0x2000044c

080046c0 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 80046c4:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <USART6_IRQHandler+0xe4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 80046d2:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <USART6_IRQHandler+0xe4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	4b33      	ldr	r3, [pc, #204]	; (80047a8 <USART6_IRQHandler+0xe8>)
 80046dc:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 80046de:	f7ff fedf 	bl	80044a0 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 80046e2:	e05d      	b.n	80047a0 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 80046e4:	4b2f      	ldr	r3, [pc, #188]	; (80047a4 <USART6_IRQHandler+0xe4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d055      	beq.n	800479e <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <USART6_IRQHandler+0xec>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 80046fa:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <USART6_IRQHandler+0xf0>)
 80046fc:	781a      	ldrb	r2, [r3, #0]
 80046fe:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <USART6_IRQHandler+0xe4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004704:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <USART6_IRQHandler+0xe4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fe9e 	bl	800444c <interruptionTX>
}
 8004710:	e046      	b.n	80047a0 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004712:	4b26      	ldr	r3, [pc, #152]	; (80047ac <USART6_IRQHandler+0xec>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d142      	bne.n	80047a0 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800471a:	4b26      	ldr	r3, [pc, #152]	; (80047b4 <USART6_IRQHandler+0xf4>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <USART6_IRQHandler+0xf8>)
 8004722:	5c9b      	ldrb	r3, [r3, r2]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00e      	beq.n	8004746 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8004728:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <USART6_IRQHandler+0xf4>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <USART6_IRQHandler+0xf8>)
 8004730:	5c9a      	ldrb	r2, [r3, r2]
 8004732:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <USART6_IRQHandler+0xe4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	605a      	str	r2, [r3, #4]
				posChar++;
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <USART6_IRQHandler+0xf4>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	b2da      	uxtb	r2, r3
 8004740:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <USART6_IRQHandler+0xf4>)
 8004742:	701a      	strb	r2, [r3, #0]
}
 8004744:	e02c      	b.n	80047a0 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <USART6_IRQHandler+0xfc>)
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <USART6_IRQHandler+0x100>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d215      	bcs.n	800477e <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <USART6_IRQHandler+0xfc>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	2364      	movs	r3, #100	; 0x64
 800475a:	fb02 f303 	mul.w	r3, r2, r3
 800475e:	4a19      	ldr	r2, [pc, #100]	; (80047c4 <USART6_IRQHandler+0x104>)
 8004760:	4413      	add	r3, r2
 8004762:	4619      	mov	r1, r3
 8004764:	4814      	ldr	r0, [pc, #80]	; (80047b8 <USART6_IRQHandler+0xf8>)
 8004766:	f000 fee1 	bl	800552c <siprintf>
					posChar = 0;
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <USART6_IRQHandler+0xf4>)
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004770:	4b12      	ldr	r3, [pc, #72]	; (80047bc <USART6_IRQHandler+0xfc>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	3301      	adds	r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	4b10      	ldr	r3, [pc, #64]	; (80047bc <USART6_IRQHandler+0xfc>)
 800477a:	701a      	strb	r2, [r3, #0]
}
 800477c:	e010      	b.n	80047a0 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <USART6_IRQHandler+0xe4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fe61 	bl	800444c <interruptionTX>
					posChar = 0;
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <USART6_IRQHandler+0xf4>)
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <USART6_IRQHandler+0xfc>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <USART6_IRQHandler+0x100>)
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
}
 800479c:	e000      	b.n	80047a0 <USART6_IRQHandler+0xe0>
		__NOP();
 800479e:	bf00      	nop
}
 80047a0:	bf00      	nop
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	200003e0 	.word	0x200003e0
 80047a8:	200003e4 	.word	0x200003e4
 80047ac:	20000c1f 	.word	0x20000c1f
 80047b0:	200003e5 	.word	0x200003e5
 80047b4:	20000c1e 	.word	0x20000c1e
 80047b8:	200003e8 	.word	0x200003e8
 80047bc:	20000c1d 	.word	0x20000c1d
 80047c0:	20000c1c 	.word	0x20000c1c
 80047c4:	2000044c 	.word	0x2000044c

080047c8 <__errno>:
 80047c8:	4b01      	ldr	r3, [pc, #4]	; (80047d0 <__errno+0x8>)
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	2000000c 	.word	0x2000000c

080047d4 <__libc_init_array>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4d0d      	ldr	r5, [pc, #52]	; (800480c <__libc_init_array+0x38>)
 80047d8:	4c0d      	ldr	r4, [pc, #52]	; (8004810 <__libc_init_array+0x3c>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	2600      	movs	r6, #0
 80047e0:	42a6      	cmp	r6, r4
 80047e2:	d109      	bne.n	80047f8 <__libc_init_array+0x24>
 80047e4:	4d0b      	ldr	r5, [pc, #44]	; (8004814 <__libc_init_array+0x40>)
 80047e6:	4c0c      	ldr	r4, [pc, #48]	; (8004818 <__libc_init_array+0x44>)
 80047e8:	f005 f8c8 	bl	800997c <_init>
 80047ec:	1b64      	subs	r4, r4, r5
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	2600      	movs	r6, #0
 80047f2:	42a6      	cmp	r6, r4
 80047f4:	d105      	bne.n	8004802 <__libc_init_array+0x2e>
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fc:	4798      	blx	r3
 80047fe:	3601      	adds	r6, #1
 8004800:	e7ee      	b.n	80047e0 <__libc_init_array+0xc>
 8004802:	f855 3b04 	ldr.w	r3, [r5], #4
 8004806:	4798      	blx	r3
 8004808:	3601      	adds	r6, #1
 800480a:	e7f2      	b.n	80047f2 <__libc_init_array+0x1e>
 800480c:	0800a08c 	.word	0x0800a08c
 8004810:	0800a08c 	.word	0x0800a08c
 8004814:	0800a08c 	.word	0x0800a08c
 8004818:	0800a090 	.word	0x0800a090

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <__cvt>:
 800482c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	ec55 4b10 	vmov	r4, r5, d0
 8004834:	2d00      	cmp	r5, #0
 8004836:	460e      	mov	r6, r1
 8004838:	4619      	mov	r1, r3
 800483a:	462b      	mov	r3, r5
 800483c:	bfbb      	ittet	lt
 800483e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004842:	461d      	movlt	r5, r3
 8004844:	2300      	movge	r3, #0
 8004846:	232d      	movlt	r3, #45	; 0x2d
 8004848:	700b      	strb	r3, [r1, #0]
 800484a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800484c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004850:	4691      	mov	r9, r2
 8004852:	f023 0820 	bic.w	r8, r3, #32
 8004856:	bfbc      	itt	lt
 8004858:	4622      	movlt	r2, r4
 800485a:	4614      	movlt	r4, r2
 800485c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004860:	d005      	beq.n	800486e <__cvt+0x42>
 8004862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004866:	d100      	bne.n	800486a <__cvt+0x3e>
 8004868:	3601      	adds	r6, #1
 800486a:	2102      	movs	r1, #2
 800486c:	e000      	b.n	8004870 <__cvt+0x44>
 800486e:	2103      	movs	r1, #3
 8004870:	ab03      	add	r3, sp, #12
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	ab02      	add	r3, sp, #8
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	ec45 4b10 	vmov	d0, r4, r5
 800487c:	4653      	mov	r3, sl
 800487e:	4632      	mov	r2, r6
 8004880:	f001 fe42 	bl	8006508 <_dtoa_r>
 8004884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004888:	4607      	mov	r7, r0
 800488a:	d102      	bne.n	8004892 <__cvt+0x66>
 800488c:	f019 0f01 	tst.w	r9, #1
 8004890:	d022      	beq.n	80048d8 <__cvt+0xac>
 8004892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004896:	eb07 0906 	add.w	r9, r7, r6
 800489a:	d110      	bne.n	80048be <__cvt+0x92>
 800489c:	783b      	ldrb	r3, [r7, #0]
 800489e:	2b30      	cmp	r3, #48	; 0x30
 80048a0:	d10a      	bne.n	80048b8 <__cvt+0x8c>
 80048a2:	2200      	movs	r2, #0
 80048a4:	2300      	movs	r3, #0
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f7fc f925 	bl	8000af8 <__aeabi_dcmpeq>
 80048ae:	b918      	cbnz	r0, 80048b8 <__cvt+0x8c>
 80048b0:	f1c6 0601 	rsb	r6, r6, #1
 80048b4:	f8ca 6000 	str.w	r6, [sl]
 80048b8:	f8da 3000 	ldr.w	r3, [sl]
 80048bc:	4499      	add	r9, r3
 80048be:	2200      	movs	r2, #0
 80048c0:	2300      	movs	r3, #0
 80048c2:	4620      	mov	r0, r4
 80048c4:	4629      	mov	r1, r5
 80048c6:	f7fc f917 	bl	8000af8 <__aeabi_dcmpeq>
 80048ca:	b108      	cbz	r0, 80048d0 <__cvt+0xa4>
 80048cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80048d0:	2230      	movs	r2, #48	; 0x30
 80048d2:	9b03      	ldr	r3, [sp, #12]
 80048d4:	454b      	cmp	r3, r9
 80048d6:	d307      	bcc.n	80048e8 <__cvt+0xbc>
 80048d8:	9b03      	ldr	r3, [sp, #12]
 80048da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048dc:	1bdb      	subs	r3, r3, r7
 80048de:	4638      	mov	r0, r7
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	b004      	add	sp, #16
 80048e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e8:	1c59      	adds	r1, r3, #1
 80048ea:	9103      	str	r1, [sp, #12]
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e7f0      	b.n	80048d2 <__cvt+0xa6>

080048f0 <__exponent>:
 80048f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048f2:	4603      	mov	r3, r0
 80048f4:	2900      	cmp	r1, #0
 80048f6:	bfb8      	it	lt
 80048f8:	4249      	neglt	r1, r1
 80048fa:	f803 2b02 	strb.w	r2, [r3], #2
 80048fe:	bfb4      	ite	lt
 8004900:	222d      	movlt	r2, #45	; 0x2d
 8004902:	222b      	movge	r2, #43	; 0x2b
 8004904:	2909      	cmp	r1, #9
 8004906:	7042      	strb	r2, [r0, #1]
 8004908:	dd2a      	ble.n	8004960 <__exponent+0x70>
 800490a:	f10d 0407 	add.w	r4, sp, #7
 800490e:	46a4      	mov	ip, r4
 8004910:	270a      	movs	r7, #10
 8004912:	46a6      	mov	lr, r4
 8004914:	460a      	mov	r2, r1
 8004916:	fb91 f6f7 	sdiv	r6, r1, r7
 800491a:	fb07 1516 	mls	r5, r7, r6, r1
 800491e:	3530      	adds	r5, #48	; 0x30
 8004920:	2a63      	cmp	r2, #99	; 0x63
 8004922:	f104 34ff 	add.w	r4, r4, #4294967295
 8004926:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800492a:	4631      	mov	r1, r6
 800492c:	dcf1      	bgt.n	8004912 <__exponent+0x22>
 800492e:	3130      	adds	r1, #48	; 0x30
 8004930:	f1ae 0502 	sub.w	r5, lr, #2
 8004934:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004938:	1c44      	adds	r4, r0, #1
 800493a:	4629      	mov	r1, r5
 800493c:	4561      	cmp	r1, ip
 800493e:	d30a      	bcc.n	8004956 <__exponent+0x66>
 8004940:	f10d 0209 	add.w	r2, sp, #9
 8004944:	eba2 020e 	sub.w	r2, r2, lr
 8004948:	4565      	cmp	r5, ip
 800494a:	bf88      	it	hi
 800494c:	2200      	movhi	r2, #0
 800494e:	4413      	add	r3, r2
 8004950:	1a18      	subs	r0, r3, r0
 8004952:	b003      	add	sp, #12
 8004954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800495a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800495e:	e7ed      	b.n	800493c <__exponent+0x4c>
 8004960:	2330      	movs	r3, #48	; 0x30
 8004962:	3130      	adds	r1, #48	; 0x30
 8004964:	7083      	strb	r3, [r0, #2]
 8004966:	70c1      	strb	r1, [r0, #3]
 8004968:	1d03      	adds	r3, r0, #4
 800496a:	e7f1      	b.n	8004950 <__exponent+0x60>

0800496c <_printf_float>:
 800496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004970:	ed2d 8b02 	vpush	{d8}
 8004974:	b08d      	sub	sp, #52	; 0x34
 8004976:	460c      	mov	r4, r1
 8004978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800497c:	4616      	mov	r6, r2
 800497e:	461f      	mov	r7, r3
 8004980:	4605      	mov	r5, r0
 8004982:	f002 ff1f 	bl	80077c4 <_localeconv_r>
 8004986:	f8d0 a000 	ldr.w	sl, [r0]
 800498a:	4650      	mov	r0, sl
 800498c:	f7fb fc32 	bl	80001f4 <strlen>
 8004990:	2300      	movs	r3, #0
 8004992:	930a      	str	r3, [sp, #40]	; 0x28
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	9305      	str	r3, [sp, #20]
 8004998:	f8d8 3000 	ldr.w	r3, [r8]
 800499c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80049a0:	3307      	adds	r3, #7
 80049a2:	f023 0307 	bic.w	r3, r3, #7
 80049a6:	f103 0208 	add.w	r2, r3, #8
 80049aa:	f8c8 2000 	str.w	r2, [r8]
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049be:	9307      	str	r3, [sp, #28]
 80049c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80049c4:	ee08 0a10 	vmov	s16, r0
 80049c8:	4b9f      	ldr	r3, [pc, #636]	; (8004c48 <_printf_float+0x2dc>)
 80049ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ce:	f04f 32ff 	mov.w	r2, #4294967295
 80049d2:	f7fc f8c3 	bl	8000b5c <__aeabi_dcmpun>
 80049d6:	bb88      	cbnz	r0, 8004a3c <_printf_float+0xd0>
 80049d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049dc:	4b9a      	ldr	r3, [pc, #616]	; (8004c48 <_printf_float+0x2dc>)
 80049de:	f04f 32ff 	mov.w	r2, #4294967295
 80049e2:	f7fc f89d 	bl	8000b20 <__aeabi_dcmple>
 80049e6:	bb48      	cbnz	r0, 8004a3c <_printf_float+0xd0>
 80049e8:	2200      	movs	r2, #0
 80049ea:	2300      	movs	r3, #0
 80049ec:	4640      	mov	r0, r8
 80049ee:	4649      	mov	r1, r9
 80049f0:	f7fc f88c 	bl	8000b0c <__aeabi_dcmplt>
 80049f4:	b110      	cbz	r0, 80049fc <_printf_float+0x90>
 80049f6:	232d      	movs	r3, #45	; 0x2d
 80049f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fc:	4b93      	ldr	r3, [pc, #588]	; (8004c4c <_printf_float+0x2e0>)
 80049fe:	4894      	ldr	r0, [pc, #592]	; (8004c50 <_printf_float+0x2e4>)
 8004a00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a04:	bf94      	ite	ls
 8004a06:	4698      	movls	r8, r3
 8004a08:	4680      	movhi	r8, r0
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	6123      	str	r3, [r4, #16]
 8004a0e:	9b05      	ldr	r3, [sp, #20]
 8004a10:	f023 0204 	bic.w	r2, r3, #4
 8004a14:	6022      	str	r2, [r4, #0]
 8004a16:	f04f 0900 	mov.w	r9, #0
 8004a1a:	9700      	str	r7, [sp, #0]
 8004a1c:	4633      	mov	r3, r6
 8004a1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a20:	4621      	mov	r1, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	f000 f9d8 	bl	8004dd8 <_printf_common>
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f040 8090 	bne.w	8004b4e <_printf_float+0x1e2>
 8004a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a32:	b00d      	add	sp, #52	; 0x34
 8004a34:	ecbd 8b02 	vpop	{d8}
 8004a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	4640      	mov	r0, r8
 8004a42:	4649      	mov	r1, r9
 8004a44:	f7fc f88a 	bl	8000b5c <__aeabi_dcmpun>
 8004a48:	b140      	cbz	r0, 8004a5c <_printf_float+0xf0>
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bfbc      	itt	lt
 8004a50:	232d      	movlt	r3, #45	; 0x2d
 8004a52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a56:	487f      	ldr	r0, [pc, #508]	; (8004c54 <_printf_float+0x2e8>)
 8004a58:	4b7f      	ldr	r3, [pc, #508]	; (8004c58 <_printf_float+0x2ec>)
 8004a5a:	e7d1      	b.n	8004a00 <_printf_float+0x94>
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a62:	9206      	str	r2, [sp, #24]
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	d13f      	bne.n	8004ae8 <_printf_float+0x17c>
 8004a68:	2306      	movs	r3, #6
 8004a6a:	6063      	str	r3, [r4, #4]
 8004a6c:	9b05      	ldr	r3, [sp, #20]
 8004a6e:	6861      	ldr	r1, [r4, #4]
 8004a70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a74:	2300      	movs	r3, #0
 8004a76:	9303      	str	r3, [sp, #12]
 8004a78:	ab0a      	add	r3, sp, #40	; 0x28
 8004a7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a7e:	ab09      	add	r3, sp, #36	; 0x24
 8004a80:	ec49 8b10 	vmov	d0, r8, r9
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	f7ff fecd 	bl	800482c <__cvt>
 8004a92:	9b06      	ldr	r3, [sp, #24]
 8004a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a96:	2b47      	cmp	r3, #71	; 0x47
 8004a98:	4680      	mov	r8, r0
 8004a9a:	d108      	bne.n	8004aae <_printf_float+0x142>
 8004a9c:	1cc8      	adds	r0, r1, #3
 8004a9e:	db02      	blt.n	8004aa6 <_printf_float+0x13a>
 8004aa0:	6863      	ldr	r3, [r4, #4]
 8004aa2:	4299      	cmp	r1, r3
 8004aa4:	dd41      	ble.n	8004b2a <_printf_float+0x1be>
 8004aa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8004aaa:	fa5f fb8b 	uxtb.w	fp, fp
 8004aae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ab2:	d820      	bhi.n	8004af6 <_printf_float+0x18a>
 8004ab4:	3901      	subs	r1, #1
 8004ab6:	465a      	mov	r2, fp
 8004ab8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004abc:	9109      	str	r1, [sp, #36]	; 0x24
 8004abe:	f7ff ff17 	bl	80048f0 <__exponent>
 8004ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ac4:	1813      	adds	r3, r2, r0
 8004ac6:	2a01      	cmp	r2, #1
 8004ac8:	4681      	mov	r9, r0
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	dc02      	bgt.n	8004ad4 <_printf_float+0x168>
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	07d2      	lsls	r2, r2, #31
 8004ad2:	d501      	bpl.n	8004ad8 <_printf_float+0x16c>
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d09c      	beq.n	8004a1a <_printf_float+0xae>
 8004ae0:	232d      	movs	r3, #45	; 0x2d
 8004ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae6:	e798      	b.n	8004a1a <_printf_float+0xae>
 8004ae8:	9a06      	ldr	r2, [sp, #24]
 8004aea:	2a47      	cmp	r2, #71	; 0x47
 8004aec:	d1be      	bne.n	8004a6c <_printf_float+0x100>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1bc      	bne.n	8004a6c <_printf_float+0x100>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e7b9      	b.n	8004a6a <_printf_float+0xfe>
 8004af6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004afa:	d118      	bne.n	8004b2e <_printf_float+0x1c2>
 8004afc:	2900      	cmp	r1, #0
 8004afe:	6863      	ldr	r3, [r4, #4]
 8004b00:	dd0b      	ble.n	8004b1a <_printf_float+0x1ae>
 8004b02:	6121      	str	r1, [r4, #16]
 8004b04:	b913      	cbnz	r3, 8004b0c <_printf_float+0x1a0>
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	07d0      	lsls	r0, r2, #31
 8004b0a:	d502      	bpl.n	8004b12 <_printf_float+0x1a6>
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	440b      	add	r3, r1
 8004b10:	6123      	str	r3, [r4, #16]
 8004b12:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b14:	f04f 0900 	mov.w	r9, #0
 8004b18:	e7de      	b.n	8004ad8 <_printf_float+0x16c>
 8004b1a:	b913      	cbnz	r3, 8004b22 <_printf_float+0x1b6>
 8004b1c:	6822      	ldr	r2, [r4, #0]
 8004b1e:	07d2      	lsls	r2, r2, #31
 8004b20:	d501      	bpl.n	8004b26 <_printf_float+0x1ba>
 8004b22:	3302      	adds	r3, #2
 8004b24:	e7f4      	b.n	8004b10 <_printf_float+0x1a4>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e7f2      	b.n	8004b10 <_printf_float+0x1a4>
 8004b2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b30:	4299      	cmp	r1, r3
 8004b32:	db05      	blt.n	8004b40 <_printf_float+0x1d4>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	6121      	str	r1, [r4, #16]
 8004b38:	07d8      	lsls	r0, r3, #31
 8004b3a:	d5ea      	bpl.n	8004b12 <_printf_float+0x1a6>
 8004b3c:	1c4b      	adds	r3, r1, #1
 8004b3e:	e7e7      	b.n	8004b10 <_printf_float+0x1a4>
 8004b40:	2900      	cmp	r1, #0
 8004b42:	bfd4      	ite	le
 8004b44:	f1c1 0202 	rsble	r2, r1, #2
 8004b48:	2201      	movgt	r2, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	e7e0      	b.n	8004b10 <_printf_float+0x1a4>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	055a      	lsls	r2, r3, #21
 8004b52:	d407      	bmi.n	8004b64 <_printf_float+0x1f8>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	4642      	mov	r2, r8
 8004b58:	4631      	mov	r1, r6
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	47b8      	blx	r7
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d12c      	bne.n	8004bbc <_printf_float+0x250>
 8004b62:	e764      	b.n	8004a2e <_printf_float+0xc2>
 8004b64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b68:	f240 80e0 	bls.w	8004d2c <_printf_float+0x3c0>
 8004b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b70:	2200      	movs	r2, #0
 8004b72:	2300      	movs	r3, #0
 8004b74:	f7fb ffc0 	bl	8000af8 <__aeabi_dcmpeq>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d034      	beq.n	8004be6 <_printf_float+0x27a>
 8004b7c:	4a37      	ldr	r2, [pc, #220]	; (8004c5c <_printf_float+0x2f0>)
 8004b7e:	2301      	movs	r3, #1
 8004b80:	4631      	mov	r1, r6
 8004b82:	4628      	mov	r0, r5
 8004b84:	47b8      	blx	r7
 8004b86:	3001      	adds	r0, #1
 8004b88:	f43f af51 	beq.w	8004a2e <_printf_float+0xc2>
 8004b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b90:	429a      	cmp	r2, r3
 8004b92:	db02      	blt.n	8004b9a <_printf_float+0x22e>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	07d8      	lsls	r0, r3, #31
 8004b98:	d510      	bpl.n	8004bbc <_printf_float+0x250>
 8004b9a:	ee18 3a10 	vmov	r3, s16
 8004b9e:	4652      	mov	r2, sl
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	f43f af41 	beq.w	8004a2e <_printf_float+0xc2>
 8004bac:	f04f 0800 	mov.w	r8, #0
 8004bb0:	f104 091a 	add.w	r9, r4, #26
 8004bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	4543      	cmp	r3, r8
 8004bba:	dc09      	bgt.n	8004bd0 <_printf_float+0x264>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	079b      	lsls	r3, r3, #30
 8004bc0:	f100 8105 	bmi.w	8004dce <_printf_float+0x462>
 8004bc4:	68e0      	ldr	r0, [r4, #12]
 8004bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bc8:	4298      	cmp	r0, r3
 8004bca:	bfb8      	it	lt
 8004bcc:	4618      	movlt	r0, r3
 8004bce:	e730      	b.n	8004a32 <_printf_float+0xc6>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	464a      	mov	r2, r9
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f af27 	beq.w	8004a2e <_printf_float+0xc2>
 8004be0:	f108 0801 	add.w	r8, r8, #1
 8004be4:	e7e6      	b.n	8004bb4 <_printf_float+0x248>
 8004be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	dc39      	bgt.n	8004c60 <_printf_float+0x2f4>
 8004bec:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <_printf_float+0x2f0>)
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4631      	mov	r1, r6
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	47b8      	blx	r7
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	f43f af19 	beq.w	8004a2e <_printf_float+0xc2>
 8004bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c00:	4313      	orrs	r3, r2
 8004c02:	d102      	bne.n	8004c0a <_printf_float+0x29e>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	07d9      	lsls	r1, r3, #31
 8004c08:	d5d8      	bpl.n	8004bbc <_printf_float+0x250>
 8004c0a:	ee18 3a10 	vmov	r3, s16
 8004c0e:	4652      	mov	r2, sl
 8004c10:	4631      	mov	r1, r6
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	f43f af09 	beq.w	8004a2e <_printf_float+0xc2>
 8004c1c:	f04f 0900 	mov.w	r9, #0
 8004c20:	f104 0a1a 	add.w	sl, r4, #26
 8004c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c26:	425b      	negs	r3, r3
 8004c28:	454b      	cmp	r3, r9
 8004c2a:	dc01      	bgt.n	8004c30 <_printf_float+0x2c4>
 8004c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c2e:	e792      	b.n	8004b56 <_printf_float+0x1ea>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4652      	mov	r2, sl
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	f43f aef7 	beq.w	8004a2e <_printf_float+0xc2>
 8004c40:	f109 0901 	add.w	r9, r9, #1
 8004c44:	e7ee      	b.n	8004c24 <_printf_float+0x2b8>
 8004c46:	bf00      	nop
 8004c48:	7fefffff 	.word	0x7fefffff
 8004c4c:	08009bcc 	.word	0x08009bcc
 8004c50:	08009bd0 	.word	0x08009bd0
 8004c54:	08009bd8 	.word	0x08009bd8
 8004c58:	08009bd4 	.word	0x08009bd4
 8004c5c:	08009fd1 	.word	0x08009fd1
 8004c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c64:	429a      	cmp	r2, r3
 8004c66:	bfa8      	it	ge
 8004c68:	461a      	movge	r2, r3
 8004c6a:	2a00      	cmp	r2, #0
 8004c6c:	4691      	mov	r9, r2
 8004c6e:	dc37      	bgt.n	8004ce0 <_printf_float+0x374>
 8004c70:	f04f 0b00 	mov.w	fp, #0
 8004c74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c78:	f104 021a 	add.w	r2, r4, #26
 8004c7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	eba3 0309 	sub.w	r3, r3, r9
 8004c84:	455b      	cmp	r3, fp
 8004c86:	dc33      	bgt.n	8004cf0 <_printf_float+0x384>
 8004c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	db3b      	blt.n	8004d08 <_printf_float+0x39c>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07da      	lsls	r2, r3, #31
 8004c94:	d438      	bmi.n	8004d08 <_printf_float+0x39c>
 8004c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c98:	9a05      	ldr	r2, [sp, #20]
 8004c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c9c:	1a9a      	subs	r2, r3, r2
 8004c9e:	eba3 0901 	sub.w	r9, r3, r1
 8004ca2:	4591      	cmp	r9, r2
 8004ca4:	bfa8      	it	ge
 8004ca6:	4691      	movge	r9, r2
 8004ca8:	f1b9 0f00 	cmp.w	r9, #0
 8004cac:	dc35      	bgt.n	8004d1a <_printf_float+0x3ae>
 8004cae:	f04f 0800 	mov.w	r8, #0
 8004cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cb6:	f104 0a1a 	add.w	sl, r4, #26
 8004cba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	eba3 0309 	sub.w	r3, r3, r9
 8004cc4:	4543      	cmp	r3, r8
 8004cc6:	f77f af79 	ble.w	8004bbc <_printf_float+0x250>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4652      	mov	r2, sl
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f aeaa 	beq.w	8004a2e <_printf_float+0xc2>
 8004cda:	f108 0801 	add.w	r8, r8, #1
 8004cde:	e7ec      	b.n	8004cba <_printf_float+0x34e>
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	47b8      	blx	r7
 8004cea:	3001      	adds	r0, #1
 8004cec:	d1c0      	bne.n	8004c70 <_printf_float+0x304>
 8004cee:	e69e      	b.n	8004a2e <_printf_float+0xc2>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	9205      	str	r2, [sp, #20]
 8004cf8:	47b8      	blx	r7
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f ae97 	beq.w	8004a2e <_printf_float+0xc2>
 8004d00:	9a05      	ldr	r2, [sp, #20]
 8004d02:	f10b 0b01 	add.w	fp, fp, #1
 8004d06:	e7b9      	b.n	8004c7c <_printf_float+0x310>
 8004d08:	ee18 3a10 	vmov	r3, s16
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	d1be      	bne.n	8004c96 <_printf_float+0x32a>
 8004d18:	e689      	b.n	8004a2e <_printf_float+0xc2>
 8004d1a:	9a05      	ldr	r2, [sp, #20]
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	4442      	add	r2, r8
 8004d20:	4631      	mov	r1, r6
 8004d22:	4628      	mov	r0, r5
 8004d24:	47b8      	blx	r7
 8004d26:	3001      	adds	r0, #1
 8004d28:	d1c1      	bne.n	8004cae <_printf_float+0x342>
 8004d2a:	e680      	b.n	8004a2e <_printf_float+0xc2>
 8004d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d2e:	2a01      	cmp	r2, #1
 8004d30:	dc01      	bgt.n	8004d36 <_printf_float+0x3ca>
 8004d32:	07db      	lsls	r3, r3, #31
 8004d34:	d538      	bpl.n	8004da8 <_printf_float+0x43c>
 8004d36:	2301      	movs	r3, #1
 8004d38:	4642      	mov	r2, r8
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b8      	blx	r7
 8004d40:	3001      	adds	r0, #1
 8004d42:	f43f ae74 	beq.w	8004a2e <_printf_float+0xc2>
 8004d46:	ee18 3a10 	vmov	r3, s16
 8004d4a:	4652      	mov	r2, sl
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47b8      	blx	r7
 8004d52:	3001      	adds	r0, #1
 8004d54:	f43f ae6b 	beq.w	8004a2e <_printf_float+0xc2>
 8004d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2300      	movs	r3, #0
 8004d60:	f7fb feca 	bl	8000af8 <__aeabi_dcmpeq>
 8004d64:	b9d8      	cbnz	r0, 8004d9e <_printf_float+0x432>
 8004d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d68:	f108 0201 	add.w	r2, r8, #1
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b8      	blx	r7
 8004d74:	3001      	adds	r0, #1
 8004d76:	d10e      	bne.n	8004d96 <_printf_float+0x42a>
 8004d78:	e659      	b.n	8004a2e <_printf_float+0xc2>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	4652      	mov	r2, sl
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4628      	mov	r0, r5
 8004d82:	47b8      	blx	r7
 8004d84:	3001      	adds	r0, #1
 8004d86:	f43f ae52 	beq.w	8004a2e <_printf_float+0xc2>
 8004d8a:	f108 0801 	add.w	r8, r8, #1
 8004d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d90:	3b01      	subs	r3, #1
 8004d92:	4543      	cmp	r3, r8
 8004d94:	dcf1      	bgt.n	8004d7a <_printf_float+0x40e>
 8004d96:	464b      	mov	r3, r9
 8004d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d9c:	e6dc      	b.n	8004b58 <_printf_float+0x1ec>
 8004d9e:	f04f 0800 	mov.w	r8, #0
 8004da2:	f104 0a1a 	add.w	sl, r4, #26
 8004da6:	e7f2      	b.n	8004d8e <_printf_float+0x422>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4642      	mov	r2, r8
 8004dac:	e7df      	b.n	8004d6e <_printf_float+0x402>
 8004dae:	2301      	movs	r3, #1
 8004db0:	464a      	mov	r2, r9
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	f43f ae38 	beq.w	8004a2e <_printf_float+0xc2>
 8004dbe:	f108 0801 	add.w	r8, r8, #1
 8004dc2:	68e3      	ldr	r3, [r4, #12]
 8004dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dc6:	1a5b      	subs	r3, r3, r1
 8004dc8:	4543      	cmp	r3, r8
 8004dca:	dcf0      	bgt.n	8004dae <_printf_float+0x442>
 8004dcc:	e6fa      	b.n	8004bc4 <_printf_float+0x258>
 8004dce:	f04f 0800 	mov.w	r8, #0
 8004dd2:	f104 0919 	add.w	r9, r4, #25
 8004dd6:	e7f4      	b.n	8004dc2 <_printf_float+0x456>

08004dd8 <_printf_common>:
 8004dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	4616      	mov	r6, r2
 8004dde:	4699      	mov	r9, r3
 8004de0:	688a      	ldr	r2, [r1, #8]
 8004de2:	690b      	ldr	r3, [r1, #16]
 8004de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bfb8      	it	lt
 8004dec:	4613      	movlt	r3, r2
 8004dee:	6033      	str	r3, [r6, #0]
 8004df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004df4:	4607      	mov	r7, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	b10a      	cbz	r2, 8004dfe <_printf_common+0x26>
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	0699      	lsls	r1, r3, #26
 8004e02:	bf42      	ittt	mi
 8004e04:	6833      	ldrmi	r3, [r6, #0]
 8004e06:	3302      	addmi	r3, #2
 8004e08:	6033      	strmi	r3, [r6, #0]
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	f015 0506 	ands.w	r5, r5, #6
 8004e10:	d106      	bne.n	8004e20 <_printf_common+0x48>
 8004e12:	f104 0a19 	add.w	sl, r4, #25
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	6832      	ldr	r2, [r6, #0]
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	42ab      	cmp	r3, r5
 8004e1e:	dc26      	bgt.n	8004e6e <_printf_common+0x96>
 8004e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e24:	1e13      	subs	r3, r2, #0
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	bf18      	it	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	0692      	lsls	r2, r2, #26
 8004e2e:	d42b      	bmi.n	8004e88 <_printf_common+0xb0>
 8004e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e34:	4649      	mov	r1, r9
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c0      	blx	r8
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d01e      	beq.n	8004e7c <_printf_common+0xa4>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	68e5      	ldr	r5, [r4, #12]
 8004e42:	6832      	ldr	r2, [r6, #0]
 8004e44:	f003 0306 	and.w	r3, r3, #6
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	bf08      	it	eq
 8004e4c:	1aad      	subeq	r5, r5, r2
 8004e4e:	68a3      	ldr	r3, [r4, #8]
 8004e50:	6922      	ldr	r2, [r4, #16]
 8004e52:	bf0c      	ite	eq
 8004e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e58:	2500      	movne	r5, #0
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	bfc4      	itt	gt
 8004e5e:	1a9b      	subgt	r3, r3, r2
 8004e60:	18ed      	addgt	r5, r5, r3
 8004e62:	2600      	movs	r6, #0
 8004e64:	341a      	adds	r4, #26
 8004e66:	42b5      	cmp	r5, r6
 8004e68:	d11a      	bne.n	8004ea0 <_printf_common+0xc8>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e008      	b.n	8004e80 <_printf_common+0xa8>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4652      	mov	r2, sl
 8004e72:	4649      	mov	r1, r9
 8004e74:	4638      	mov	r0, r7
 8004e76:	47c0      	blx	r8
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d103      	bne.n	8004e84 <_printf_common+0xac>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	3501      	adds	r5, #1
 8004e86:	e7c6      	b.n	8004e16 <_printf_common+0x3e>
 8004e88:	18e1      	adds	r1, r4, r3
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	2030      	movs	r0, #48	; 0x30
 8004e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e92:	4422      	add	r2, r4
 8004e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	e7c7      	b.n	8004e30 <_printf_common+0x58>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c0      	blx	r8
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d0e6      	beq.n	8004e7c <_printf_common+0xa4>
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7d9      	b.n	8004e66 <_printf_common+0x8e>
	...

08004eb4 <_printf_i>:
 8004eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	7e0f      	ldrb	r7, [r1, #24]
 8004eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ebc:	2f78      	cmp	r7, #120	; 0x78
 8004ebe:	4691      	mov	r9, r2
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	469a      	mov	sl, r3
 8004ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004eca:	d807      	bhi.n	8004edc <_printf_i+0x28>
 8004ecc:	2f62      	cmp	r7, #98	; 0x62
 8004ece:	d80a      	bhi.n	8004ee6 <_printf_i+0x32>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	f000 80d8 	beq.w	8005086 <_printf_i+0x1d2>
 8004ed6:	2f58      	cmp	r7, #88	; 0x58
 8004ed8:	f000 80a3 	beq.w	8005022 <_printf_i+0x16e>
 8004edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ee4:	e03a      	b.n	8004f5c <_printf_i+0xa8>
 8004ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eea:	2b15      	cmp	r3, #21
 8004eec:	d8f6      	bhi.n	8004edc <_printf_i+0x28>
 8004eee:	a101      	add	r1, pc, #4	; (adr r1, 8004ef4 <_printf_i+0x40>)
 8004ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f61 	.word	0x08004f61
 8004efc:	08004edd 	.word	0x08004edd
 8004f00:	08004edd 	.word	0x08004edd
 8004f04:	08004edd 	.word	0x08004edd
 8004f08:	08004edd 	.word	0x08004edd
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004edd 	.word	0x08004edd
 8004f14:	08004edd 	.word	0x08004edd
 8004f18:	08004edd 	.word	0x08004edd
 8004f1c:	08004edd 	.word	0x08004edd
 8004f20:	0800506d 	.word	0x0800506d
 8004f24:	08004f91 	.word	0x08004f91
 8004f28:	0800504f 	.word	0x0800504f
 8004f2c:	08004edd 	.word	0x08004edd
 8004f30:	08004edd 	.word	0x08004edd
 8004f34:	0800508f 	.word	0x0800508f
 8004f38:	08004edd 	.word	0x08004edd
 8004f3c:	08004f91 	.word	0x08004f91
 8004f40:	08004edd 	.word	0x08004edd
 8004f44:	08004edd 	.word	0x08004edd
 8004f48:	08005057 	.word	0x08005057
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	1d1a      	adds	r2, r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	602a      	str	r2, [r5, #0]
 8004f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0a3      	b.n	80050a8 <_printf_i+0x1f4>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	6829      	ldr	r1, [r5, #0]
 8004f64:	0606      	lsls	r6, r0, #24
 8004f66:	f101 0304 	add.w	r3, r1, #4
 8004f6a:	d50a      	bpl.n	8004f82 <_printf_i+0xce>
 8004f6c:	680e      	ldr	r6, [r1, #0]
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	2e00      	cmp	r6, #0
 8004f72:	da03      	bge.n	8004f7c <_printf_i+0xc8>
 8004f74:	232d      	movs	r3, #45	; 0x2d
 8004f76:	4276      	negs	r6, r6
 8004f78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f7c:	485e      	ldr	r0, [pc, #376]	; (80050f8 <_printf_i+0x244>)
 8004f7e:	230a      	movs	r3, #10
 8004f80:	e019      	b.n	8004fb6 <_printf_i+0x102>
 8004f82:	680e      	ldr	r6, [r1, #0]
 8004f84:	602b      	str	r3, [r5, #0]
 8004f86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f8a:	bf18      	it	ne
 8004f8c:	b236      	sxthne	r6, r6
 8004f8e:	e7ef      	b.n	8004f70 <_printf_i+0xbc>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	1d19      	adds	r1, r3, #4
 8004f96:	6029      	str	r1, [r5, #0]
 8004f98:	0601      	lsls	r1, r0, #24
 8004f9a:	d501      	bpl.n	8004fa0 <_printf_i+0xec>
 8004f9c:	681e      	ldr	r6, [r3, #0]
 8004f9e:	e002      	b.n	8004fa6 <_printf_i+0xf2>
 8004fa0:	0646      	lsls	r6, r0, #25
 8004fa2:	d5fb      	bpl.n	8004f9c <_printf_i+0xe8>
 8004fa4:	881e      	ldrh	r6, [r3, #0]
 8004fa6:	4854      	ldr	r0, [pc, #336]	; (80050f8 <_printf_i+0x244>)
 8004fa8:	2f6f      	cmp	r7, #111	; 0x6f
 8004faa:	bf0c      	ite	eq
 8004fac:	2308      	moveq	r3, #8
 8004fae:	230a      	movne	r3, #10
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fb6:	6865      	ldr	r5, [r4, #4]
 8004fb8:	60a5      	str	r5, [r4, #8]
 8004fba:	2d00      	cmp	r5, #0
 8004fbc:	bfa2      	ittt	ge
 8004fbe:	6821      	ldrge	r1, [r4, #0]
 8004fc0:	f021 0104 	bicge.w	r1, r1, #4
 8004fc4:	6021      	strge	r1, [r4, #0]
 8004fc6:	b90e      	cbnz	r6, 8004fcc <_printf_i+0x118>
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	d04d      	beq.n	8005068 <_printf_i+0x1b4>
 8004fcc:	4615      	mov	r5, r2
 8004fce:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fd2:	fb03 6711 	mls	r7, r3, r1, r6
 8004fd6:	5dc7      	ldrb	r7, [r0, r7]
 8004fd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fdc:	4637      	mov	r7, r6
 8004fde:	42bb      	cmp	r3, r7
 8004fe0:	460e      	mov	r6, r1
 8004fe2:	d9f4      	bls.n	8004fce <_printf_i+0x11a>
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d10b      	bne.n	8005000 <_printf_i+0x14c>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	07de      	lsls	r6, r3, #31
 8004fec:	d508      	bpl.n	8005000 <_printf_i+0x14c>
 8004fee:	6923      	ldr	r3, [r4, #16]
 8004ff0:	6861      	ldr	r1, [r4, #4]
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	bfde      	ittt	le
 8004ff6:	2330      	movle	r3, #48	; 0x30
 8004ff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005000:	1b52      	subs	r2, r2, r5
 8005002:	6122      	str	r2, [r4, #16]
 8005004:	f8cd a000 	str.w	sl, [sp]
 8005008:	464b      	mov	r3, r9
 800500a:	aa03      	add	r2, sp, #12
 800500c:	4621      	mov	r1, r4
 800500e:	4640      	mov	r0, r8
 8005010:	f7ff fee2 	bl	8004dd8 <_printf_common>
 8005014:	3001      	adds	r0, #1
 8005016:	d14c      	bne.n	80050b2 <_printf_i+0x1fe>
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	b004      	add	sp, #16
 800501e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005022:	4835      	ldr	r0, [pc, #212]	; (80050f8 <_printf_i+0x244>)
 8005024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005028:	6829      	ldr	r1, [r5, #0]
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005030:	6029      	str	r1, [r5, #0]
 8005032:	061d      	lsls	r5, r3, #24
 8005034:	d514      	bpl.n	8005060 <_printf_i+0x1ac>
 8005036:	07df      	lsls	r7, r3, #31
 8005038:	bf44      	itt	mi
 800503a:	f043 0320 	orrmi.w	r3, r3, #32
 800503e:	6023      	strmi	r3, [r4, #0]
 8005040:	b91e      	cbnz	r6, 800504a <_printf_i+0x196>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	f023 0320 	bic.w	r3, r3, #32
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	2310      	movs	r3, #16
 800504c:	e7b0      	b.n	8004fb0 <_printf_i+0xfc>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	f043 0320 	orr.w	r3, r3, #32
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	2378      	movs	r3, #120	; 0x78
 8005058:	4828      	ldr	r0, [pc, #160]	; (80050fc <_printf_i+0x248>)
 800505a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800505e:	e7e3      	b.n	8005028 <_printf_i+0x174>
 8005060:	0659      	lsls	r1, r3, #25
 8005062:	bf48      	it	mi
 8005064:	b2b6      	uxthmi	r6, r6
 8005066:	e7e6      	b.n	8005036 <_printf_i+0x182>
 8005068:	4615      	mov	r5, r2
 800506a:	e7bb      	b.n	8004fe4 <_printf_i+0x130>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	6826      	ldr	r6, [r4, #0]
 8005070:	6961      	ldr	r1, [r4, #20]
 8005072:	1d18      	adds	r0, r3, #4
 8005074:	6028      	str	r0, [r5, #0]
 8005076:	0635      	lsls	r5, r6, #24
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	d501      	bpl.n	8005080 <_printf_i+0x1cc>
 800507c:	6019      	str	r1, [r3, #0]
 800507e:	e002      	b.n	8005086 <_printf_i+0x1d2>
 8005080:	0670      	lsls	r0, r6, #25
 8005082:	d5fb      	bpl.n	800507c <_printf_i+0x1c8>
 8005084:	8019      	strh	r1, [r3, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	4615      	mov	r5, r2
 800508c:	e7ba      	b.n	8005004 <_printf_i+0x150>
 800508e:	682b      	ldr	r3, [r5, #0]
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	602a      	str	r2, [r5, #0]
 8005094:	681d      	ldr	r5, [r3, #0]
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	2100      	movs	r1, #0
 800509a:	4628      	mov	r0, r5
 800509c:	f7fb f8b8 	bl	8000210 <memchr>
 80050a0:	b108      	cbz	r0, 80050a6 <_printf_i+0x1f2>
 80050a2:	1b40      	subs	r0, r0, r5
 80050a4:	6060      	str	r0, [r4, #4]
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	2300      	movs	r3, #0
 80050ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b0:	e7a8      	b.n	8005004 <_printf_i+0x150>
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	462a      	mov	r2, r5
 80050b6:	4649      	mov	r1, r9
 80050b8:	4640      	mov	r0, r8
 80050ba:	47d0      	blx	sl
 80050bc:	3001      	adds	r0, #1
 80050be:	d0ab      	beq.n	8005018 <_printf_i+0x164>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	079b      	lsls	r3, r3, #30
 80050c4:	d413      	bmi.n	80050ee <_printf_i+0x23a>
 80050c6:	68e0      	ldr	r0, [r4, #12]
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	4298      	cmp	r0, r3
 80050cc:	bfb8      	it	lt
 80050ce:	4618      	movlt	r0, r3
 80050d0:	e7a4      	b.n	800501c <_printf_i+0x168>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4632      	mov	r2, r6
 80050d6:	4649      	mov	r1, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	47d0      	blx	sl
 80050dc:	3001      	adds	r0, #1
 80050de:	d09b      	beq.n	8005018 <_printf_i+0x164>
 80050e0:	3501      	adds	r5, #1
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	9903      	ldr	r1, [sp, #12]
 80050e6:	1a5b      	subs	r3, r3, r1
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	dcf2      	bgt.n	80050d2 <_printf_i+0x21e>
 80050ec:	e7eb      	b.n	80050c6 <_printf_i+0x212>
 80050ee:	2500      	movs	r5, #0
 80050f0:	f104 0619 	add.w	r6, r4, #25
 80050f4:	e7f5      	b.n	80050e2 <_printf_i+0x22e>
 80050f6:	bf00      	nop
 80050f8:	08009bdc 	.word	0x08009bdc
 80050fc:	08009bed 	.word	0x08009bed

08005100 <_scanf_float>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	b087      	sub	sp, #28
 8005106:	4617      	mov	r7, r2
 8005108:	9303      	str	r3, [sp, #12]
 800510a:	688b      	ldr	r3, [r1, #8]
 800510c:	1e5a      	subs	r2, r3, #1
 800510e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005112:	bf83      	ittte	hi
 8005114:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005118:	195b      	addhi	r3, r3, r5
 800511a:	9302      	strhi	r3, [sp, #8]
 800511c:	2300      	movls	r3, #0
 800511e:	bf86      	itte	hi
 8005120:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005124:	608b      	strhi	r3, [r1, #8]
 8005126:	9302      	strls	r3, [sp, #8]
 8005128:	680b      	ldr	r3, [r1, #0]
 800512a:	468b      	mov	fp, r1
 800512c:	2500      	movs	r5, #0
 800512e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005132:	f84b 3b1c 	str.w	r3, [fp], #28
 8005136:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800513a:	4680      	mov	r8, r0
 800513c:	460c      	mov	r4, r1
 800513e:	465e      	mov	r6, fp
 8005140:	46aa      	mov	sl, r5
 8005142:	46a9      	mov	r9, r5
 8005144:	9501      	str	r5, [sp, #4]
 8005146:	68a2      	ldr	r2, [r4, #8]
 8005148:	b152      	cbz	r2, 8005160 <_scanf_float+0x60>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b4e      	cmp	r3, #78	; 0x4e
 8005150:	d864      	bhi.n	800521c <_scanf_float+0x11c>
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d83c      	bhi.n	80051d0 <_scanf_float+0xd0>
 8005156:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800515a:	b2c8      	uxtb	r0, r1
 800515c:	280e      	cmp	r0, #14
 800515e:	d93a      	bls.n	80051d6 <_scanf_float+0xd6>
 8005160:	f1b9 0f00 	cmp.w	r9, #0
 8005164:	d003      	beq.n	800516e <_scanf_float+0x6e>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005172:	f1ba 0f01 	cmp.w	sl, #1
 8005176:	f200 8113 	bhi.w	80053a0 <_scanf_float+0x2a0>
 800517a:	455e      	cmp	r6, fp
 800517c:	f200 8105 	bhi.w	800538a <_scanf_float+0x28a>
 8005180:	2501      	movs	r5, #1
 8005182:	4628      	mov	r0, r5
 8005184:	b007      	add	sp, #28
 8005186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800518a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800518e:	2a0d      	cmp	r2, #13
 8005190:	d8e6      	bhi.n	8005160 <_scanf_float+0x60>
 8005192:	a101      	add	r1, pc, #4	; (adr r1, 8005198 <_scanf_float+0x98>)
 8005194:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005198:	080052d7 	.word	0x080052d7
 800519c:	08005161 	.word	0x08005161
 80051a0:	08005161 	.word	0x08005161
 80051a4:	08005161 	.word	0x08005161
 80051a8:	08005337 	.word	0x08005337
 80051ac:	0800530f 	.word	0x0800530f
 80051b0:	08005161 	.word	0x08005161
 80051b4:	08005161 	.word	0x08005161
 80051b8:	080052e5 	.word	0x080052e5
 80051bc:	08005161 	.word	0x08005161
 80051c0:	08005161 	.word	0x08005161
 80051c4:	08005161 	.word	0x08005161
 80051c8:	08005161 	.word	0x08005161
 80051cc:	0800529d 	.word	0x0800529d
 80051d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80051d4:	e7db      	b.n	800518e <_scanf_float+0x8e>
 80051d6:	290e      	cmp	r1, #14
 80051d8:	d8c2      	bhi.n	8005160 <_scanf_float+0x60>
 80051da:	a001      	add	r0, pc, #4	; (adr r0, 80051e0 <_scanf_float+0xe0>)
 80051dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80051e0:	0800528f 	.word	0x0800528f
 80051e4:	08005161 	.word	0x08005161
 80051e8:	0800528f 	.word	0x0800528f
 80051ec:	08005323 	.word	0x08005323
 80051f0:	08005161 	.word	0x08005161
 80051f4:	0800523d 	.word	0x0800523d
 80051f8:	08005279 	.word	0x08005279
 80051fc:	08005279 	.word	0x08005279
 8005200:	08005279 	.word	0x08005279
 8005204:	08005279 	.word	0x08005279
 8005208:	08005279 	.word	0x08005279
 800520c:	08005279 	.word	0x08005279
 8005210:	08005279 	.word	0x08005279
 8005214:	08005279 	.word	0x08005279
 8005218:	08005279 	.word	0x08005279
 800521c:	2b6e      	cmp	r3, #110	; 0x6e
 800521e:	d809      	bhi.n	8005234 <_scanf_float+0x134>
 8005220:	2b60      	cmp	r3, #96	; 0x60
 8005222:	d8b2      	bhi.n	800518a <_scanf_float+0x8a>
 8005224:	2b54      	cmp	r3, #84	; 0x54
 8005226:	d077      	beq.n	8005318 <_scanf_float+0x218>
 8005228:	2b59      	cmp	r3, #89	; 0x59
 800522a:	d199      	bne.n	8005160 <_scanf_float+0x60>
 800522c:	2d07      	cmp	r5, #7
 800522e:	d197      	bne.n	8005160 <_scanf_float+0x60>
 8005230:	2508      	movs	r5, #8
 8005232:	e029      	b.n	8005288 <_scanf_float+0x188>
 8005234:	2b74      	cmp	r3, #116	; 0x74
 8005236:	d06f      	beq.n	8005318 <_scanf_float+0x218>
 8005238:	2b79      	cmp	r3, #121	; 0x79
 800523a:	e7f6      	b.n	800522a <_scanf_float+0x12a>
 800523c:	6821      	ldr	r1, [r4, #0]
 800523e:	05c8      	lsls	r0, r1, #23
 8005240:	d51a      	bpl.n	8005278 <_scanf_float+0x178>
 8005242:	9b02      	ldr	r3, [sp, #8]
 8005244:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005248:	6021      	str	r1, [r4, #0]
 800524a:	f109 0901 	add.w	r9, r9, #1
 800524e:	b11b      	cbz	r3, 8005258 <_scanf_float+0x158>
 8005250:	3b01      	subs	r3, #1
 8005252:	3201      	adds	r2, #1
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	60a2      	str	r2, [r4, #8]
 8005258:	68a3      	ldr	r3, [r4, #8]
 800525a:	3b01      	subs	r3, #1
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	3301      	adds	r3, #1
 8005262:	6123      	str	r3, [r4, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3b01      	subs	r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	f340 8084 	ble.w	8005378 <_scanf_float+0x278>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	603b      	str	r3, [r7, #0]
 8005276:	e766      	b.n	8005146 <_scanf_float+0x46>
 8005278:	eb1a 0f05 	cmn.w	sl, r5
 800527c:	f47f af70 	bne.w	8005160 <_scanf_float+0x60>
 8005280:	6822      	ldr	r2, [r4, #0]
 8005282:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005286:	6022      	str	r2, [r4, #0]
 8005288:	f806 3b01 	strb.w	r3, [r6], #1
 800528c:	e7e4      	b.n	8005258 <_scanf_float+0x158>
 800528e:	6822      	ldr	r2, [r4, #0]
 8005290:	0610      	lsls	r0, r2, #24
 8005292:	f57f af65 	bpl.w	8005160 <_scanf_float+0x60>
 8005296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529a:	e7f4      	b.n	8005286 <_scanf_float+0x186>
 800529c:	f1ba 0f00 	cmp.w	sl, #0
 80052a0:	d10e      	bne.n	80052c0 <_scanf_float+0x1c0>
 80052a2:	f1b9 0f00 	cmp.w	r9, #0
 80052a6:	d10e      	bne.n	80052c6 <_scanf_float+0x1c6>
 80052a8:	6822      	ldr	r2, [r4, #0]
 80052aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80052ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052b2:	d108      	bne.n	80052c6 <_scanf_float+0x1c6>
 80052b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052b8:	6022      	str	r2, [r4, #0]
 80052ba:	f04f 0a01 	mov.w	sl, #1
 80052be:	e7e3      	b.n	8005288 <_scanf_float+0x188>
 80052c0:	f1ba 0f02 	cmp.w	sl, #2
 80052c4:	d055      	beq.n	8005372 <_scanf_float+0x272>
 80052c6:	2d01      	cmp	r5, #1
 80052c8:	d002      	beq.n	80052d0 <_scanf_float+0x1d0>
 80052ca:	2d04      	cmp	r5, #4
 80052cc:	f47f af48 	bne.w	8005160 <_scanf_float+0x60>
 80052d0:	3501      	adds	r5, #1
 80052d2:	b2ed      	uxtb	r5, r5
 80052d4:	e7d8      	b.n	8005288 <_scanf_float+0x188>
 80052d6:	f1ba 0f01 	cmp.w	sl, #1
 80052da:	f47f af41 	bne.w	8005160 <_scanf_float+0x60>
 80052de:	f04f 0a02 	mov.w	sl, #2
 80052e2:	e7d1      	b.n	8005288 <_scanf_float+0x188>
 80052e4:	b97d      	cbnz	r5, 8005306 <_scanf_float+0x206>
 80052e6:	f1b9 0f00 	cmp.w	r9, #0
 80052ea:	f47f af3c 	bne.w	8005166 <_scanf_float+0x66>
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80052f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052f8:	f47f af39 	bne.w	800516e <_scanf_float+0x6e>
 80052fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005300:	6022      	str	r2, [r4, #0]
 8005302:	2501      	movs	r5, #1
 8005304:	e7c0      	b.n	8005288 <_scanf_float+0x188>
 8005306:	2d03      	cmp	r5, #3
 8005308:	d0e2      	beq.n	80052d0 <_scanf_float+0x1d0>
 800530a:	2d05      	cmp	r5, #5
 800530c:	e7de      	b.n	80052cc <_scanf_float+0x1cc>
 800530e:	2d02      	cmp	r5, #2
 8005310:	f47f af26 	bne.w	8005160 <_scanf_float+0x60>
 8005314:	2503      	movs	r5, #3
 8005316:	e7b7      	b.n	8005288 <_scanf_float+0x188>
 8005318:	2d06      	cmp	r5, #6
 800531a:	f47f af21 	bne.w	8005160 <_scanf_float+0x60>
 800531e:	2507      	movs	r5, #7
 8005320:	e7b2      	b.n	8005288 <_scanf_float+0x188>
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	0591      	lsls	r1, r2, #22
 8005326:	f57f af1b 	bpl.w	8005160 <_scanf_float+0x60>
 800532a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800532e:	6022      	str	r2, [r4, #0]
 8005330:	f8cd 9004 	str.w	r9, [sp, #4]
 8005334:	e7a8      	b.n	8005288 <_scanf_float+0x188>
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800533c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005340:	d006      	beq.n	8005350 <_scanf_float+0x250>
 8005342:	0550      	lsls	r0, r2, #21
 8005344:	f57f af0c 	bpl.w	8005160 <_scanf_float+0x60>
 8005348:	f1b9 0f00 	cmp.w	r9, #0
 800534c:	f43f af0f 	beq.w	800516e <_scanf_float+0x6e>
 8005350:	0591      	lsls	r1, r2, #22
 8005352:	bf58      	it	pl
 8005354:	9901      	ldrpl	r1, [sp, #4]
 8005356:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800535a:	bf58      	it	pl
 800535c:	eba9 0101 	subpl.w	r1, r9, r1
 8005360:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005364:	bf58      	it	pl
 8005366:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800536a:	6022      	str	r2, [r4, #0]
 800536c:	f04f 0900 	mov.w	r9, #0
 8005370:	e78a      	b.n	8005288 <_scanf_float+0x188>
 8005372:	f04f 0a03 	mov.w	sl, #3
 8005376:	e787      	b.n	8005288 <_scanf_float+0x188>
 8005378:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800537c:	4639      	mov	r1, r7
 800537e:	4640      	mov	r0, r8
 8005380:	4798      	blx	r3
 8005382:	2800      	cmp	r0, #0
 8005384:	f43f aedf 	beq.w	8005146 <_scanf_float+0x46>
 8005388:	e6ea      	b.n	8005160 <_scanf_float+0x60>
 800538a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800538e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005392:	463a      	mov	r2, r7
 8005394:	4640      	mov	r0, r8
 8005396:	4798      	blx	r3
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	3b01      	subs	r3, #1
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	e6ec      	b.n	800517a <_scanf_float+0x7a>
 80053a0:	1e6b      	subs	r3, r5, #1
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d825      	bhi.n	80053f2 <_scanf_float+0x2f2>
 80053a6:	2d02      	cmp	r5, #2
 80053a8:	d836      	bhi.n	8005418 <_scanf_float+0x318>
 80053aa:	455e      	cmp	r6, fp
 80053ac:	f67f aee8 	bls.w	8005180 <_scanf_float+0x80>
 80053b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053b8:	463a      	mov	r2, r7
 80053ba:	4640      	mov	r0, r8
 80053bc:	4798      	blx	r3
 80053be:	6923      	ldr	r3, [r4, #16]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	6123      	str	r3, [r4, #16]
 80053c4:	e7f1      	b.n	80053aa <_scanf_float+0x2aa>
 80053c6:	9802      	ldr	r0, [sp, #8]
 80053c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80053d0:	9002      	str	r0, [sp, #8]
 80053d2:	463a      	mov	r2, r7
 80053d4:	4640      	mov	r0, r8
 80053d6:	4798      	blx	r3
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	3b01      	subs	r3, #1
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053e2:	fa5f fa8a 	uxtb.w	sl, sl
 80053e6:	f1ba 0f02 	cmp.w	sl, #2
 80053ea:	d1ec      	bne.n	80053c6 <_scanf_float+0x2c6>
 80053ec:	3d03      	subs	r5, #3
 80053ee:	b2ed      	uxtb	r5, r5
 80053f0:	1b76      	subs	r6, r6, r5
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	05da      	lsls	r2, r3, #23
 80053f6:	d52f      	bpl.n	8005458 <_scanf_float+0x358>
 80053f8:	055b      	lsls	r3, r3, #21
 80053fa:	d510      	bpl.n	800541e <_scanf_float+0x31e>
 80053fc:	455e      	cmp	r6, fp
 80053fe:	f67f aebf 	bls.w	8005180 <_scanf_float+0x80>
 8005402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800540a:	463a      	mov	r2, r7
 800540c:	4640      	mov	r0, r8
 800540e:	4798      	blx	r3
 8005410:	6923      	ldr	r3, [r4, #16]
 8005412:	3b01      	subs	r3, #1
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	e7f1      	b.n	80053fc <_scanf_float+0x2fc>
 8005418:	46aa      	mov	sl, r5
 800541a:	9602      	str	r6, [sp, #8]
 800541c:	e7df      	b.n	80053de <_scanf_float+0x2de>
 800541e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	2965      	cmp	r1, #101	; 0x65
 8005426:	f103 33ff 	add.w	r3, r3, #4294967295
 800542a:	f106 35ff 	add.w	r5, r6, #4294967295
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	d00c      	beq.n	800544c <_scanf_float+0x34c>
 8005432:	2945      	cmp	r1, #69	; 0x45
 8005434:	d00a      	beq.n	800544c <_scanf_float+0x34c>
 8005436:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800543a:	463a      	mov	r2, r7
 800543c:	4640      	mov	r0, r8
 800543e:	4798      	blx	r3
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005446:	3b01      	subs	r3, #1
 8005448:	1eb5      	subs	r5, r6, #2
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005450:	463a      	mov	r2, r7
 8005452:	4640      	mov	r0, r8
 8005454:	4798      	blx	r3
 8005456:	462e      	mov	r6, r5
 8005458:	6825      	ldr	r5, [r4, #0]
 800545a:	f015 0510 	ands.w	r5, r5, #16
 800545e:	d159      	bne.n	8005514 <_scanf_float+0x414>
 8005460:	7035      	strb	r5, [r6, #0]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546c:	d11b      	bne.n	80054a6 <_scanf_float+0x3a6>
 800546e:	9b01      	ldr	r3, [sp, #4]
 8005470:	454b      	cmp	r3, r9
 8005472:	eba3 0209 	sub.w	r2, r3, r9
 8005476:	d123      	bne.n	80054c0 <_scanf_float+0x3c0>
 8005478:	2200      	movs	r2, #0
 800547a:	4659      	mov	r1, fp
 800547c:	4640      	mov	r0, r8
 800547e:	f000 ff09 	bl	8006294 <_strtod_r>
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	9b03      	ldr	r3, [sp, #12]
 8005486:	f012 0f02 	tst.w	r2, #2
 800548a:	ec57 6b10 	vmov	r6, r7, d0
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	d021      	beq.n	80054d6 <_scanf_float+0x3d6>
 8005492:	9903      	ldr	r1, [sp, #12]
 8005494:	1d1a      	adds	r2, r3, #4
 8005496:	600a      	str	r2, [r1, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	e9c3 6700 	strd	r6, r7, [r3]
 800549e:	68e3      	ldr	r3, [r4, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	60e3      	str	r3, [r4, #12]
 80054a4:	e66d      	b.n	8005182 <_scanf_float+0x82>
 80054a6:	9b04      	ldr	r3, [sp, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0e5      	beq.n	8005478 <_scanf_float+0x378>
 80054ac:	9905      	ldr	r1, [sp, #20]
 80054ae:	230a      	movs	r3, #10
 80054b0:	462a      	mov	r2, r5
 80054b2:	3101      	adds	r1, #1
 80054b4:	4640      	mov	r0, r8
 80054b6:	f000 ff75 	bl	80063a4 <_strtol_r>
 80054ba:	9b04      	ldr	r3, [sp, #16]
 80054bc:	9e05      	ldr	r6, [sp, #20]
 80054be:	1ac2      	subs	r2, r0, r3
 80054c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80054c4:	429e      	cmp	r6, r3
 80054c6:	bf28      	it	cs
 80054c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80054cc:	4912      	ldr	r1, [pc, #72]	; (8005518 <_scanf_float+0x418>)
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f82c 	bl	800552c <siprintf>
 80054d4:	e7d0      	b.n	8005478 <_scanf_float+0x378>
 80054d6:	9903      	ldr	r1, [sp, #12]
 80054d8:	f012 0f04 	tst.w	r2, #4
 80054dc:	f103 0204 	add.w	r2, r3, #4
 80054e0:	600a      	str	r2, [r1, #0]
 80054e2:	d1d9      	bne.n	8005498 <_scanf_float+0x398>
 80054e4:	f8d3 8000 	ldr.w	r8, [r3]
 80054e8:	ee10 2a10 	vmov	r2, s0
 80054ec:	ee10 0a10 	vmov	r0, s0
 80054f0:	463b      	mov	r3, r7
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fb fb32 	bl	8000b5c <__aeabi_dcmpun>
 80054f8:	b128      	cbz	r0, 8005506 <_scanf_float+0x406>
 80054fa:	4808      	ldr	r0, [pc, #32]	; (800551c <_scanf_float+0x41c>)
 80054fc:	f000 f810 	bl	8005520 <nanf>
 8005500:	ed88 0a00 	vstr	s0, [r8]
 8005504:	e7cb      	b.n	800549e <_scanf_float+0x39e>
 8005506:	4630      	mov	r0, r6
 8005508:	4639      	mov	r1, r7
 800550a:	f7fb fb85 	bl	8000c18 <__aeabi_d2f>
 800550e:	f8c8 0000 	str.w	r0, [r8]
 8005512:	e7c4      	b.n	800549e <_scanf_float+0x39e>
 8005514:	2500      	movs	r5, #0
 8005516:	e634      	b.n	8005182 <_scanf_float+0x82>
 8005518:	08009bfe 	.word	0x08009bfe
 800551c:	0800a023 	.word	0x0800a023

08005520 <nanf>:
 8005520:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005528 <nanf+0x8>
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	7fc00000 	.word	0x7fc00000

0800552c <siprintf>:
 800552c:	b40e      	push	{r1, r2, r3}
 800552e:	b500      	push	{lr}
 8005530:	b09c      	sub	sp, #112	; 0x70
 8005532:	ab1d      	add	r3, sp, #116	; 0x74
 8005534:	9002      	str	r0, [sp, #8]
 8005536:	9006      	str	r0, [sp, #24]
 8005538:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800553c:	4809      	ldr	r0, [pc, #36]	; (8005564 <siprintf+0x38>)
 800553e:	9107      	str	r1, [sp, #28]
 8005540:	9104      	str	r1, [sp, #16]
 8005542:	4909      	ldr	r1, [pc, #36]	; (8005568 <siprintf+0x3c>)
 8005544:	f853 2b04 	ldr.w	r2, [r3], #4
 8005548:	9105      	str	r1, [sp, #20]
 800554a:	6800      	ldr	r0, [r0, #0]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	a902      	add	r1, sp, #8
 8005550:	f002 ff8a 	bl	8008468 <_svfiprintf_r>
 8005554:	9b02      	ldr	r3, [sp, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	b01c      	add	sp, #112	; 0x70
 800555c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005560:	b003      	add	sp, #12
 8005562:	4770      	bx	lr
 8005564:	2000000c 	.word	0x2000000c
 8005568:	ffff0208 	.word	0xffff0208

0800556c <siscanf>:
 800556c:	b40e      	push	{r1, r2, r3}
 800556e:	b510      	push	{r4, lr}
 8005570:	b09f      	sub	sp, #124	; 0x7c
 8005572:	ac21      	add	r4, sp, #132	; 0x84
 8005574:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005578:	f854 2b04 	ldr.w	r2, [r4], #4
 800557c:	9201      	str	r2, [sp, #4]
 800557e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005582:	9004      	str	r0, [sp, #16]
 8005584:	9008      	str	r0, [sp, #32]
 8005586:	f7fa fe35 	bl	80001f4 <strlen>
 800558a:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <siscanf+0x50>)
 800558c:	9005      	str	r0, [sp, #20]
 800558e:	9009      	str	r0, [sp, #36]	; 0x24
 8005590:	930d      	str	r3, [sp, #52]	; 0x34
 8005592:	480b      	ldr	r0, [pc, #44]	; (80055c0 <siscanf+0x54>)
 8005594:	9a01      	ldr	r2, [sp, #4]
 8005596:	6800      	ldr	r0, [r0, #0]
 8005598:	9403      	str	r4, [sp, #12]
 800559a:	2300      	movs	r3, #0
 800559c:	9311      	str	r3, [sp, #68]	; 0x44
 800559e:	9316      	str	r3, [sp, #88]	; 0x58
 80055a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80055a8:	a904      	add	r1, sp, #16
 80055aa:	4623      	mov	r3, r4
 80055ac:	f003 f8b6 	bl	800871c <__ssvfiscanf_r>
 80055b0:	b01f      	add	sp, #124	; 0x7c
 80055b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b6:	b003      	add	sp, #12
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	080055e7 	.word	0x080055e7
 80055c0:	2000000c 	.word	0x2000000c

080055c4 <__sread>:
 80055c4:	b510      	push	{r4, lr}
 80055c6:	460c      	mov	r4, r1
 80055c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055cc:	f003 fb70 	bl	8008cb0 <_read_r>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	bfab      	itete	ge
 80055d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055d6:	89a3      	ldrhlt	r3, [r4, #12]
 80055d8:	181b      	addge	r3, r3, r0
 80055da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055de:	bfac      	ite	ge
 80055e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80055e2:	81a3      	strhlt	r3, [r4, #12]
 80055e4:	bd10      	pop	{r4, pc}

080055e6 <__seofread>:
 80055e6:	2000      	movs	r0, #0
 80055e8:	4770      	bx	lr

080055ea <__swrite>:
 80055ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ee:	461f      	mov	r7, r3
 80055f0:	898b      	ldrh	r3, [r1, #12]
 80055f2:	05db      	lsls	r3, r3, #23
 80055f4:	4605      	mov	r5, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	4616      	mov	r6, r2
 80055fa:	d505      	bpl.n	8005608 <__swrite+0x1e>
 80055fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005600:	2302      	movs	r3, #2
 8005602:	2200      	movs	r2, #0
 8005604:	f002 f8e2 	bl	80077cc <_lseek_r>
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800560e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	4628      	mov	r0, r5
 800561a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	f000 bec3 	b.w	80063a8 <_write_r>

08005622 <__sseek>:
 8005622:	b510      	push	{r4, lr}
 8005624:	460c      	mov	r4, r1
 8005626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562a:	f002 f8cf 	bl	80077cc <_lseek_r>
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	bf15      	itete	ne
 8005634:	6560      	strne	r0, [r4, #84]	; 0x54
 8005636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800563a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800563e:	81a3      	strheq	r3, [r4, #12]
 8005640:	bf18      	it	ne
 8005642:	81a3      	strhne	r3, [r4, #12]
 8005644:	bd10      	pop	{r4, pc}

08005646 <__sclose>:
 8005646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564a:	f000 bebf 	b.w	80063cc <_close_r>

0800564e <sulp>:
 800564e:	b570      	push	{r4, r5, r6, lr}
 8005650:	4604      	mov	r4, r0
 8005652:	460d      	mov	r5, r1
 8005654:	ec45 4b10 	vmov	d0, r4, r5
 8005658:	4616      	mov	r6, r2
 800565a:	f002 fc63 	bl	8007f24 <__ulp>
 800565e:	ec51 0b10 	vmov	r0, r1, d0
 8005662:	b17e      	cbz	r6, 8005684 <sulp+0x36>
 8005664:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005668:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800566c:	2b00      	cmp	r3, #0
 800566e:	dd09      	ble.n	8005684 <sulp+0x36>
 8005670:	051b      	lsls	r3, r3, #20
 8005672:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005676:	2400      	movs	r4, #0
 8005678:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800567c:	4622      	mov	r2, r4
 800567e:	462b      	mov	r3, r5
 8005680:	f7fa ffd2 	bl	8000628 <__aeabi_dmul>
 8005684:	bd70      	pop	{r4, r5, r6, pc}
	...

08005688 <_strtod_l>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	ed2d 8b02 	vpush	{d8}
 8005690:	b09d      	sub	sp, #116	; 0x74
 8005692:	461f      	mov	r7, r3
 8005694:	2300      	movs	r3, #0
 8005696:	9318      	str	r3, [sp, #96]	; 0x60
 8005698:	4ba2      	ldr	r3, [pc, #648]	; (8005924 <_strtod_l+0x29c>)
 800569a:	9213      	str	r2, [sp, #76]	; 0x4c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	9305      	str	r3, [sp, #20]
 80056a0:	4604      	mov	r4, r0
 80056a2:	4618      	mov	r0, r3
 80056a4:	4688      	mov	r8, r1
 80056a6:	f7fa fda5 	bl	80001f4 <strlen>
 80056aa:	f04f 0a00 	mov.w	sl, #0
 80056ae:	4605      	mov	r5, r0
 80056b0:	f04f 0b00 	mov.w	fp, #0
 80056b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80056b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056ba:	781a      	ldrb	r2, [r3, #0]
 80056bc:	2a2b      	cmp	r2, #43	; 0x2b
 80056be:	d04e      	beq.n	800575e <_strtod_l+0xd6>
 80056c0:	d83b      	bhi.n	800573a <_strtod_l+0xb2>
 80056c2:	2a0d      	cmp	r2, #13
 80056c4:	d834      	bhi.n	8005730 <_strtod_l+0xa8>
 80056c6:	2a08      	cmp	r2, #8
 80056c8:	d834      	bhi.n	8005734 <_strtod_l+0xac>
 80056ca:	2a00      	cmp	r2, #0
 80056cc:	d03e      	beq.n	800574c <_strtod_l+0xc4>
 80056ce:	2300      	movs	r3, #0
 80056d0:	930a      	str	r3, [sp, #40]	; 0x28
 80056d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80056d4:	7833      	ldrb	r3, [r6, #0]
 80056d6:	2b30      	cmp	r3, #48	; 0x30
 80056d8:	f040 80b0 	bne.w	800583c <_strtod_l+0x1b4>
 80056dc:	7873      	ldrb	r3, [r6, #1]
 80056de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80056e2:	2b58      	cmp	r3, #88	; 0x58
 80056e4:	d168      	bne.n	80057b8 <_strtod_l+0x130>
 80056e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	ab18      	add	r3, sp, #96	; 0x60
 80056ec:	9702      	str	r7, [sp, #8]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	4a8d      	ldr	r2, [pc, #564]	; (8005928 <_strtod_l+0x2a0>)
 80056f2:	ab19      	add	r3, sp, #100	; 0x64
 80056f4:	a917      	add	r1, sp, #92	; 0x5c
 80056f6:	4620      	mov	r0, r4
 80056f8:	f001 fd5c 	bl	80071b4 <__gethex>
 80056fc:	f010 0707 	ands.w	r7, r0, #7
 8005700:	4605      	mov	r5, r0
 8005702:	d005      	beq.n	8005710 <_strtod_l+0x88>
 8005704:	2f06      	cmp	r7, #6
 8005706:	d12c      	bne.n	8005762 <_strtod_l+0xda>
 8005708:	3601      	adds	r6, #1
 800570a:	2300      	movs	r3, #0
 800570c:	9617      	str	r6, [sp, #92]	; 0x5c
 800570e:	930a      	str	r3, [sp, #40]	; 0x28
 8005710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005712:	2b00      	cmp	r3, #0
 8005714:	f040 8590 	bne.w	8006238 <_strtod_l+0xbb0>
 8005718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571a:	b1eb      	cbz	r3, 8005758 <_strtod_l+0xd0>
 800571c:	4652      	mov	r2, sl
 800571e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005722:	ec43 2b10 	vmov	d0, r2, r3
 8005726:	b01d      	add	sp, #116	; 0x74
 8005728:	ecbd 8b02 	vpop	{d8}
 800572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005730:	2a20      	cmp	r2, #32
 8005732:	d1cc      	bne.n	80056ce <_strtod_l+0x46>
 8005734:	3301      	adds	r3, #1
 8005736:	9317      	str	r3, [sp, #92]	; 0x5c
 8005738:	e7be      	b.n	80056b8 <_strtod_l+0x30>
 800573a:	2a2d      	cmp	r2, #45	; 0x2d
 800573c:	d1c7      	bne.n	80056ce <_strtod_l+0x46>
 800573e:	2201      	movs	r2, #1
 8005740:	920a      	str	r2, [sp, #40]	; 0x28
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	9217      	str	r2, [sp, #92]	; 0x5c
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1c2      	bne.n	80056d2 <_strtod_l+0x4a>
 800574c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800574e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 856e 	bne.w	8006234 <_strtod_l+0xbac>
 8005758:	4652      	mov	r2, sl
 800575a:	465b      	mov	r3, fp
 800575c:	e7e1      	b.n	8005722 <_strtod_l+0x9a>
 800575e:	2200      	movs	r2, #0
 8005760:	e7ee      	b.n	8005740 <_strtod_l+0xb8>
 8005762:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005764:	b13a      	cbz	r2, 8005776 <_strtod_l+0xee>
 8005766:	2135      	movs	r1, #53	; 0x35
 8005768:	a81a      	add	r0, sp, #104	; 0x68
 800576a:	f002 fce6 	bl	800813a <__copybits>
 800576e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005770:	4620      	mov	r0, r4
 8005772:	f002 f8a5 	bl	80078c0 <_Bfree>
 8005776:	3f01      	subs	r7, #1
 8005778:	2f04      	cmp	r7, #4
 800577a:	d806      	bhi.n	800578a <_strtod_l+0x102>
 800577c:	e8df f007 	tbb	[pc, r7]
 8005780:	1714030a 	.word	0x1714030a
 8005784:	0a          	.byte	0x0a
 8005785:	00          	.byte	0x00
 8005786:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800578a:	0728      	lsls	r0, r5, #28
 800578c:	d5c0      	bpl.n	8005710 <_strtod_l+0x88>
 800578e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005792:	e7bd      	b.n	8005710 <_strtod_l+0x88>
 8005794:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005798:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800579a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800579e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80057a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80057a6:	e7f0      	b.n	800578a <_strtod_l+0x102>
 80057a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800592c <_strtod_l+0x2a4>
 80057ac:	e7ed      	b.n	800578a <_strtod_l+0x102>
 80057ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80057b2:	f04f 3aff 	mov.w	sl, #4294967295
 80057b6:	e7e8      	b.n	800578a <_strtod_l+0x102>
 80057b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b30      	cmp	r3, #48	; 0x30
 80057c2:	d0f9      	beq.n	80057b8 <_strtod_l+0x130>
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0a3      	beq.n	8005710 <_strtod_l+0x88>
 80057c8:	2301      	movs	r3, #1
 80057ca:	f04f 0900 	mov.w	r9, #0
 80057ce:	9304      	str	r3, [sp, #16]
 80057d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057d2:	9308      	str	r3, [sp, #32]
 80057d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80057d8:	464f      	mov	r7, r9
 80057da:	220a      	movs	r2, #10
 80057dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80057de:	7806      	ldrb	r6, [r0, #0]
 80057e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80057e4:	b2d9      	uxtb	r1, r3
 80057e6:	2909      	cmp	r1, #9
 80057e8:	d92a      	bls.n	8005840 <_strtod_l+0x1b8>
 80057ea:	9905      	ldr	r1, [sp, #20]
 80057ec:	462a      	mov	r2, r5
 80057ee:	f003 fac3 	bl	8008d78 <strncmp>
 80057f2:	b398      	cbz	r0, 800585c <_strtod_l+0x1d4>
 80057f4:	2000      	movs	r0, #0
 80057f6:	4632      	mov	r2, r6
 80057f8:	463d      	mov	r5, r7
 80057fa:	9005      	str	r0, [sp, #20]
 80057fc:	4603      	mov	r3, r0
 80057fe:	2a65      	cmp	r2, #101	; 0x65
 8005800:	d001      	beq.n	8005806 <_strtod_l+0x17e>
 8005802:	2a45      	cmp	r2, #69	; 0x45
 8005804:	d118      	bne.n	8005838 <_strtod_l+0x1b0>
 8005806:	b91d      	cbnz	r5, 8005810 <_strtod_l+0x188>
 8005808:	9a04      	ldr	r2, [sp, #16]
 800580a:	4302      	orrs	r2, r0
 800580c:	d09e      	beq.n	800574c <_strtod_l+0xc4>
 800580e:	2500      	movs	r5, #0
 8005810:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005814:	f108 0201 	add.w	r2, r8, #1
 8005818:	9217      	str	r2, [sp, #92]	; 0x5c
 800581a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800581e:	2a2b      	cmp	r2, #43	; 0x2b
 8005820:	d075      	beq.n	800590e <_strtod_l+0x286>
 8005822:	2a2d      	cmp	r2, #45	; 0x2d
 8005824:	d07b      	beq.n	800591e <_strtod_l+0x296>
 8005826:	f04f 0c00 	mov.w	ip, #0
 800582a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800582e:	2909      	cmp	r1, #9
 8005830:	f240 8082 	bls.w	8005938 <_strtod_l+0x2b0>
 8005834:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005838:	2600      	movs	r6, #0
 800583a:	e09d      	b.n	8005978 <_strtod_l+0x2f0>
 800583c:	2300      	movs	r3, #0
 800583e:	e7c4      	b.n	80057ca <_strtod_l+0x142>
 8005840:	2f08      	cmp	r7, #8
 8005842:	bfd8      	it	le
 8005844:	9907      	ldrle	r1, [sp, #28]
 8005846:	f100 0001 	add.w	r0, r0, #1
 800584a:	bfda      	itte	le
 800584c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005850:	9307      	strle	r3, [sp, #28]
 8005852:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005856:	3701      	adds	r7, #1
 8005858:	9017      	str	r0, [sp, #92]	; 0x5c
 800585a:	e7bf      	b.n	80057dc <_strtod_l+0x154>
 800585c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800585e:	195a      	adds	r2, r3, r5
 8005860:	9217      	str	r2, [sp, #92]	; 0x5c
 8005862:	5d5a      	ldrb	r2, [r3, r5]
 8005864:	2f00      	cmp	r7, #0
 8005866:	d037      	beq.n	80058d8 <_strtod_l+0x250>
 8005868:	9005      	str	r0, [sp, #20]
 800586a:	463d      	mov	r5, r7
 800586c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005870:	2b09      	cmp	r3, #9
 8005872:	d912      	bls.n	800589a <_strtod_l+0x212>
 8005874:	2301      	movs	r3, #1
 8005876:	e7c2      	b.n	80057fe <_strtod_l+0x176>
 8005878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	9217      	str	r2, [sp, #92]	; 0x5c
 800587e:	785a      	ldrb	r2, [r3, #1]
 8005880:	3001      	adds	r0, #1
 8005882:	2a30      	cmp	r2, #48	; 0x30
 8005884:	d0f8      	beq.n	8005878 <_strtod_l+0x1f0>
 8005886:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800588a:	2b08      	cmp	r3, #8
 800588c:	f200 84d9 	bhi.w	8006242 <_strtod_l+0xbba>
 8005890:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005892:	9005      	str	r0, [sp, #20]
 8005894:	2000      	movs	r0, #0
 8005896:	9308      	str	r3, [sp, #32]
 8005898:	4605      	mov	r5, r0
 800589a:	3a30      	subs	r2, #48	; 0x30
 800589c:	f100 0301 	add.w	r3, r0, #1
 80058a0:	d014      	beq.n	80058cc <_strtod_l+0x244>
 80058a2:	9905      	ldr	r1, [sp, #20]
 80058a4:	4419      	add	r1, r3
 80058a6:	9105      	str	r1, [sp, #20]
 80058a8:	462b      	mov	r3, r5
 80058aa:	eb00 0e05 	add.w	lr, r0, r5
 80058ae:	210a      	movs	r1, #10
 80058b0:	4573      	cmp	r3, lr
 80058b2:	d113      	bne.n	80058dc <_strtod_l+0x254>
 80058b4:	182b      	adds	r3, r5, r0
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	f105 0501 	add.w	r5, r5, #1
 80058bc:	4405      	add	r5, r0
 80058be:	dc1c      	bgt.n	80058fa <_strtod_l+0x272>
 80058c0:	9907      	ldr	r1, [sp, #28]
 80058c2:	230a      	movs	r3, #10
 80058c4:	fb03 2301 	mla	r3, r3, r1, r2
 80058c8:	9307      	str	r3, [sp, #28]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80058ce:	1c51      	adds	r1, r2, #1
 80058d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80058d2:	7852      	ldrb	r2, [r2, #1]
 80058d4:	4618      	mov	r0, r3
 80058d6:	e7c9      	b.n	800586c <_strtod_l+0x1e4>
 80058d8:	4638      	mov	r0, r7
 80058da:	e7d2      	b.n	8005882 <_strtod_l+0x1fa>
 80058dc:	2b08      	cmp	r3, #8
 80058de:	dc04      	bgt.n	80058ea <_strtod_l+0x262>
 80058e0:	9e07      	ldr	r6, [sp, #28]
 80058e2:	434e      	muls	r6, r1
 80058e4:	9607      	str	r6, [sp, #28]
 80058e6:	3301      	adds	r3, #1
 80058e8:	e7e2      	b.n	80058b0 <_strtod_l+0x228>
 80058ea:	f103 0c01 	add.w	ip, r3, #1
 80058ee:	f1bc 0f10 	cmp.w	ip, #16
 80058f2:	bfd8      	it	le
 80058f4:	fb01 f909 	mulle.w	r9, r1, r9
 80058f8:	e7f5      	b.n	80058e6 <_strtod_l+0x25e>
 80058fa:	2d10      	cmp	r5, #16
 80058fc:	bfdc      	itt	le
 80058fe:	230a      	movle	r3, #10
 8005900:	fb03 2909 	mlale	r9, r3, r9, r2
 8005904:	e7e1      	b.n	80058ca <_strtod_l+0x242>
 8005906:	2300      	movs	r3, #0
 8005908:	9305      	str	r3, [sp, #20]
 800590a:	2301      	movs	r3, #1
 800590c:	e77c      	b.n	8005808 <_strtod_l+0x180>
 800590e:	f04f 0c00 	mov.w	ip, #0
 8005912:	f108 0202 	add.w	r2, r8, #2
 8005916:	9217      	str	r2, [sp, #92]	; 0x5c
 8005918:	f898 2002 	ldrb.w	r2, [r8, #2]
 800591c:	e785      	b.n	800582a <_strtod_l+0x1a2>
 800591e:	f04f 0c01 	mov.w	ip, #1
 8005922:	e7f6      	b.n	8005912 <_strtod_l+0x28a>
 8005924:	08009e50 	.word	0x08009e50
 8005928:	08009c04 	.word	0x08009c04
 800592c:	7ff00000 	.word	0x7ff00000
 8005930:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005932:	1c51      	adds	r1, r2, #1
 8005934:	9117      	str	r1, [sp, #92]	; 0x5c
 8005936:	7852      	ldrb	r2, [r2, #1]
 8005938:	2a30      	cmp	r2, #48	; 0x30
 800593a:	d0f9      	beq.n	8005930 <_strtod_l+0x2a8>
 800593c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005940:	2908      	cmp	r1, #8
 8005942:	f63f af79 	bhi.w	8005838 <_strtod_l+0x1b0>
 8005946:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800594a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800594c:	9206      	str	r2, [sp, #24]
 800594e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005950:	1c51      	adds	r1, r2, #1
 8005952:	9117      	str	r1, [sp, #92]	; 0x5c
 8005954:	7852      	ldrb	r2, [r2, #1]
 8005956:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800595a:	2e09      	cmp	r6, #9
 800595c:	d937      	bls.n	80059ce <_strtod_l+0x346>
 800595e:	9e06      	ldr	r6, [sp, #24]
 8005960:	1b89      	subs	r1, r1, r6
 8005962:	2908      	cmp	r1, #8
 8005964:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005968:	dc02      	bgt.n	8005970 <_strtod_l+0x2e8>
 800596a:	4576      	cmp	r6, lr
 800596c:	bfa8      	it	ge
 800596e:	4676      	movge	r6, lr
 8005970:	f1bc 0f00 	cmp.w	ip, #0
 8005974:	d000      	beq.n	8005978 <_strtod_l+0x2f0>
 8005976:	4276      	negs	r6, r6
 8005978:	2d00      	cmp	r5, #0
 800597a:	d14d      	bne.n	8005a18 <_strtod_l+0x390>
 800597c:	9904      	ldr	r1, [sp, #16]
 800597e:	4301      	orrs	r1, r0
 8005980:	f47f aec6 	bne.w	8005710 <_strtod_l+0x88>
 8005984:	2b00      	cmp	r3, #0
 8005986:	f47f aee1 	bne.w	800574c <_strtod_l+0xc4>
 800598a:	2a69      	cmp	r2, #105	; 0x69
 800598c:	d027      	beq.n	80059de <_strtod_l+0x356>
 800598e:	dc24      	bgt.n	80059da <_strtod_l+0x352>
 8005990:	2a49      	cmp	r2, #73	; 0x49
 8005992:	d024      	beq.n	80059de <_strtod_l+0x356>
 8005994:	2a4e      	cmp	r2, #78	; 0x4e
 8005996:	f47f aed9 	bne.w	800574c <_strtod_l+0xc4>
 800599a:	499f      	ldr	r1, [pc, #636]	; (8005c18 <_strtod_l+0x590>)
 800599c:	a817      	add	r0, sp, #92	; 0x5c
 800599e:	f001 fe61 	bl	8007664 <__match>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	f43f aed2 	beq.w	800574c <_strtod_l+0xc4>
 80059a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b28      	cmp	r3, #40	; 0x28
 80059ae:	d12d      	bne.n	8005a0c <_strtod_l+0x384>
 80059b0:	499a      	ldr	r1, [pc, #616]	; (8005c1c <_strtod_l+0x594>)
 80059b2:	aa1a      	add	r2, sp, #104	; 0x68
 80059b4:	a817      	add	r0, sp, #92	; 0x5c
 80059b6:	f001 fe69 	bl	800768c <__hexnan>
 80059ba:	2805      	cmp	r0, #5
 80059bc:	d126      	bne.n	8005a0c <_strtod_l+0x384>
 80059be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80059c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80059c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80059cc:	e6a0      	b.n	8005710 <_strtod_l+0x88>
 80059ce:	210a      	movs	r1, #10
 80059d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80059d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80059d8:	e7b9      	b.n	800594e <_strtod_l+0x2c6>
 80059da:	2a6e      	cmp	r2, #110	; 0x6e
 80059dc:	e7db      	b.n	8005996 <_strtod_l+0x30e>
 80059de:	4990      	ldr	r1, [pc, #576]	; (8005c20 <_strtod_l+0x598>)
 80059e0:	a817      	add	r0, sp, #92	; 0x5c
 80059e2:	f001 fe3f 	bl	8007664 <__match>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	f43f aeb0 	beq.w	800574c <_strtod_l+0xc4>
 80059ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059ee:	498d      	ldr	r1, [pc, #564]	; (8005c24 <_strtod_l+0x59c>)
 80059f0:	3b01      	subs	r3, #1
 80059f2:	a817      	add	r0, sp, #92	; 0x5c
 80059f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80059f6:	f001 fe35 	bl	8007664 <__match>
 80059fa:	b910      	cbnz	r0, 8005a02 <_strtod_l+0x37a>
 80059fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059fe:	3301      	adds	r3, #1
 8005a00:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a02:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005c34 <_strtod_l+0x5ac>
 8005a06:	f04f 0a00 	mov.w	sl, #0
 8005a0a:	e681      	b.n	8005710 <_strtod_l+0x88>
 8005a0c:	4886      	ldr	r0, [pc, #536]	; (8005c28 <_strtod_l+0x5a0>)
 8005a0e:	f003 f963 	bl	8008cd8 <nan>
 8005a12:	ec5b ab10 	vmov	sl, fp, d0
 8005a16:	e67b      	b.n	8005710 <_strtod_l+0x88>
 8005a18:	9b05      	ldr	r3, [sp, #20]
 8005a1a:	9807      	ldr	r0, [sp, #28]
 8005a1c:	1af3      	subs	r3, r6, r3
 8005a1e:	2f00      	cmp	r7, #0
 8005a20:	bf08      	it	eq
 8005a22:	462f      	moveq	r7, r5
 8005a24:	2d10      	cmp	r5, #16
 8005a26:	9306      	str	r3, [sp, #24]
 8005a28:	46a8      	mov	r8, r5
 8005a2a:	bfa8      	it	ge
 8005a2c:	f04f 0810 	movge.w	r8, #16
 8005a30:	f7fa fd80 	bl	8000534 <__aeabi_ui2d>
 8005a34:	2d09      	cmp	r5, #9
 8005a36:	4682      	mov	sl, r0
 8005a38:	468b      	mov	fp, r1
 8005a3a:	dd13      	ble.n	8005a64 <_strtod_l+0x3dc>
 8005a3c:	4b7b      	ldr	r3, [pc, #492]	; (8005c2c <_strtod_l+0x5a4>)
 8005a3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005a42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005a46:	f7fa fdef 	bl	8000628 <__aeabi_dmul>
 8005a4a:	4682      	mov	sl, r0
 8005a4c:	4648      	mov	r0, r9
 8005a4e:	468b      	mov	fp, r1
 8005a50:	f7fa fd70 	bl	8000534 <__aeabi_ui2d>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4650      	mov	r0, sl
 8005a5a:	4659      	mov	r1, fp
 8005a5c:	f7fa fc2e 	bl	80002bc <__adddf3>
 8005a60:	4682      	mov	sl, r0
 8005a62:	468b      	mov	fp, r1
 8005a64:	2d0f      	cmp	r5, #15
 8005a66:	dc38      	bgt.n	8005ada <_strtod_l+0x452>
 8005a68:	9b06      	ldr	r3, [sp, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f43f ae50 	beq.w	8005710 <_strtod_l+0x88>
 8005a70:	dd24      	ble.n	8005abc <_strtod_l+0x434>
 8005a72:	2b16      	cmp	r3, #22
 8005a74:	dc0b      	bgt.n	8005a8e <_strtod_l+0x406>
 8005a76:	496d      	ldr	r1, [pc, #436]	; (8005c2c <_strtod_l+0x5a4>)
 8005a78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a80:	4652      	mov	r2, sl
 8005a82:	465b      	mov	r3, fp
 8005a84:	f7fa fdd0 	bl	8000628 <__aeabi_dmul>
 8005a88:	4682      	mov	sl, r0
 8005a8a:	468b      	mov	fp, r1
 8005a8c:	e640      	b.n	8005710 <_strtod_l+0x88>
 8005a8e:	9a06      	ldr	r2, [sp, #24]
 8005a90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005a94:	4293      	cmp	r3, r2
 8005a96:	db20      	blt.n	8005ada <_strtod_l+0x452>
 8005a98:	4c64      	ldr	r4, [pc, #400]	; (8005c2c <_strtod_l+0x5a4>)
 8005a9a:	f1c5 050f 	rsb	r5, r5, #15
 8005a9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005aa2:	4652      	mov	r2, sl
 8005aa4:	465b      	mov	r3, fp
 8005aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aaa:	f7fa fdbd 	bl	8000628 <__aeabi_dmul>
 8005aae:	9b06      	ldr	r3, [sp, #24]
 8005ab0:	1b5d      	subs	r5, r3, r5
 8005ab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005aba:	e7e3      	b.n	8005a84 <_strtod_l+0x3fc>
 8005abc:	9b06      	ldr	r3, [sp, #24]
 8005abe:	3316      	adds	r3, #22
 8005ac0:	db0b      	blt.n	8005ada <_strtod_l+0x452>
 8005ac2:	9b05      	ldr	r3, [sp, #20]
 8005ac4:	1b9e      	subs	r6, r3, r6
 8005ac6:	4b59      	ldr	r3, [pc, #356]	; (8005c2c <_strtod_l+0x5a4>)
 8005ac8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005acc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ad0:	4650      	mov	r0, sl
 8005ad2:	4659      	mov	r1, fp
 8005ad4:	f7fa fed2 	bl	800087c <__aeabi_ddiv>
 8005ad8:	e7d6      	b.n	8005a88 <_strtod_l+0x400>
 8005ada:	9b06      	ldr	r3, [sp, #24]
 8005adc:	eba5 0808 	sub.w	r8, r5, r8
 8005ae0:	4498      	add	r8, r3
 8005ae2:	f1b8 0f00 	cmp.w	r8, #0
 8005ae6:	dd74      	ble.n	8005bd2 <_strtod_l+0x54a>
 8005ae8:	f018 030f 	ands.w	r3, r8, #15
 8005aec:	d00a      	beq.n	8005b04 <_strtod_l+0x47c>
 8005aee:	494f      	ldr	r1, [pc, #316]	; (8005c2c <_strtod_l+0x5a4>)
 8005af0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005af4:	4652      	mov	r2, sl
 8005af6:	465b      	mov	r3, fp
 8005af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005afc:	f7fa fd94 	bl	8000628 <__aeabi_dmul>
 8005b00:	4682      	mov	sl, r0
 8005b02:	468b      	mov	fp, r1
 8005b04:	f038 080f 	bics.w	r8, r8, #15
 8005b08:	d04f      	beq.n	8005baa <_strtod_l+0x522>
 8005b0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b0e:	dd22      	ble.n	8005b56 <_strtod_l+0x4ce>
 8005b10:	2500      	movs	r5, #0
 8005b12:	462e      	mov	r6, r5
 8005b14:	9507      	str	r5, [sp, #28]
 8005b16:	9505      	str	r5, [sp, #20]
 8005b18:	2322      	movs	r3, #34	; 0x22
 8005b1a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005c34 <_strtod_l+0x5ac>
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	f04f 0a00 	mov.w	sl, #0
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f43f adf2 	beq.w	8005710 <_strtod_l+0x88>
 8005b2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f001 fec6 	bl	80078c0 <_Bfree>
 8005b34:	9905      	ldr	r1, [sp, #20]
 8005b36:	4620      	mov	r0, r4
 8005b38:	f001 fec2 	bl	80078c0 <_Bfree>
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f001 febe 	bl	80078c0 <_Bfree>
 8005b44:	9907      	ldr	r1, [sp, #28]
 8005b46:	4620      	mov	r0, r4
 8005b48:	f001 feba 	bl	80078c0 <_Bfree>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f001 feb6 	bl	80078c0 <_Bfree>
 8005b54:	e5dc      	b.n	8005710 <_strtod_l+0x88>
 8005b56:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <_strtod_l+0x5a8>)
 8005b58:	9304      	str	r3, [sp, #16]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005b60:	4650      	mov	r0, sl
 8005b62:	4659      	mov	r1, fp
 8005b64:	4699      	mov	r9, r3
 8005b66:	f1b8 0f01 	cmp.w	r8, #1
 8005b6a:	dc21      	bgt.n	8005bb0 <_strtod_l+0x528>
 8005b6c:	b10b      	cbz	r3, 8005b72 <_strtod_l+0x4ea>
 8005b6e:	4682      	mov	sl, r0
 8005b70:	468b      	mov	fp, r1
 8005b72:	4b2f      	ldr	r3, [pc, #188]	; (8005c30 <_strtod_l+0x5a8>)
 8005b74:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005b78:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005b7c:	4652      	mov	r2, sl
 8005b7e:	465b      	mov	r3, fp
 8005b80:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005b84:	f7fa fd50 	bl	8000628 <__aeabi_dmul>
 8005b88:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <_strtod_l+0x5ac>)
 8005b8a:	460a      	mov	r2, r1
 8005b8c:	400b      	ands	r3, r1
 8005b8e:	492a      	ldr	r1, [pc, #168]	; (8005c38 <_strtod_l+0x5b0>)
 8005b90:	428b      	cmp	r3, r1
 8005b92:	4682      	mov	sl, r0
 8005b94:	d8bc      	bhi.n	8005b10 <_strtod_l+0x488>
 8005b96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b9a:	428b      	cmp	r3, r1
 8005b9c:	bf86      	itte	hi
 8005b9e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005c3c <_strtod_l+0x5b4>
 8005ba2:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ba6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005baa:	2300      	movs	r3, #0
 8005bac:	9304      	str	r3, [sp, #16]
 8005bae:	e084      	b.n	8005cba <_strtod_l+0x632>
 8005bb0:	f018 0f01 	tst.w	r8, #1
 8005bb4:	d005      	beq.n	8005bc2 <_strtod_l+0x53a>
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f7fa fd34 	bl	8000628 <__aeabi_dmul>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	9a04      	ldr	r2, [sp, #16]
 8005bc4:	3208      	adds	r2, #8
 8005bc6:	f109 0901 	add.w	r9, r9, #1
 8005bca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005bce:	9204      	str	r2, [sp, #16]
 8005bd0:	e7c9      	b.n	8005b66 <_strtod_l+0x4de>
 8005bd2:	d0ea      	beq.n	8005baa <_strtod_l+0x522>
 8005bd4:	f1c8 0800 	rsb	r8, r8, #0
 8005bd8:	f018 020f 	ands.w	r2, r8, #15
 8005bdc:	d00a      	beq.n	8005bf4 <_strtod_l+0x56c>
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <_strtod_l+0x5a4>)
 8005be0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005be4:	4650      	mov	r0, sl
 8005be6:	4659      	mov	r1, fp
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fe46 	bl	800087c <__aeabi_ddiv>
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	468b      	mov	fp, r1
 8005bf4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005bf8:	d0d7      	beq.n	8005baa <_strtod_l+0x522>
 8005bfa:	f1b8 0f1f 	cmp.w	r8, #31
 8005bfe:	dd1f      	ble.n	8005c40 <_strtod_l+0x5b8>
 8005c00:	2500      	movs	r5, #0
 8005c02:	462e      	mov	r6, r5
 8005c04:	9507      	str	r5, [sp, #28]
 8005c06:	9505      	str	r5, [sp, #20]
 8005c08:	2322      	movs	r3, #34	; 0x22
 8005c0a:	f04f 0a00 	mov.w	sl, #0
 8005c0e:	f04f 0b00 	mov.w	fp, #0
 8005c12:	6023      	str	r3, [r4, #0]
 8005c14:	e786      	b.n	8005b24 <_strtod_l+0x49c>
 8005c16:	bf00      	nop
 8005c18:	08009bd9 	.word	0x08009bd9
 8005c1c:	08009c18 	.word	0x08009c18
 8005c20:	08009bd1 	.word	0x08009bd1
 8005c24:	08009d5c 	.word	0x08009d5c
 8005c28:	0800a023 	.word	0x0800a023
 8005c2c:	08009ee8 	.word	0x08009ee8
 8005c30:	08009ec0 	.word	0x08009ec0
 8005c34:	7ff00000 	.word	0x7ff00000
 8005c38:	7ca00000 	.word	0x7ca00000
 8005c3c:	7fefffff 	.word	0x7fefffff
 8005c40:	f018 0310 	ands.w	r3, r8, #16
 8005c44:	bf18      	it	ne
 8005c46:	236a      	movne	r3, #106	; 0x6a
 8005c48:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005ff8 <_strtod_l+0x970>
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	4650      	mov	r0, sl
 8005c50:	4659      	mov	r1, fp
 8005c52:	2300      	movs	r3, #0
 8005c54:	f018 0f01 	tst.w	r8, #1
 8005c58:	d004      	beq.n	8005c64 <_strtod_l+0x5dc>
 8005c5a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005c5e:	f7fa fce3 	bl	8000628 <__aeabi_dmul>
 8005c62:	2301      	movs	r3, #1
 8005c64:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005c68:	f109 0908 	add.w	r9, r9, #8
 8005c6c:	d1f2      	bne.n	8005c54 <_strtod_l+0x5cc>
 8005c6e:	b10b      	cbz	r3, 8005c74 <_strtod_l+0x5ec>
 8005c70:	4682      	mov	sl, r0
 8005c72:	468b      	mov	fp, r1
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	b1c3      	cbz	r3, 8005caa <_strtod_l+0x622>
 8005c78:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005c7c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	4659      	mov	r1, fp
 8005c84:	dd11      	ble.n	8005caa <_strtod_l+0x622>
 8005c86:	2b1f      	cmp	r3, #31
 8005c88:	f340 8124 	ble.w	8005ed4 <_strtod_l+0x84c>
 8005c8c:	2b34      	cmp	r3, #52	; 0x34
 8005c8e:	bfde      	ittt	le
 8005c90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005c94:	f04f 33ff 	movle.w	r3, #4294967295
 8005c98:	fa03 f202 	lslle.w	r2, r3, r2
 8005c9c:	f04f 0a00 	mov.w	sl, #0
 8005ca0:	bfcc      	ite	gt
 8005ca2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005ca6:	ea02 0b01 	andle.w	fp, r2, r1
 8005caa:	2200      	movs	r2, #0
 8005cac:	2300      	movs	r3, #0
 8005cae:	4650      	mov	r0, sl
 8005cb0:	4659      	mov	r1, fp
 8005cb2:	f7fa ff21 	bl	8000af8 <__aeabi_dcmpeq>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d1a2      	bne.n	8005c00 <_strtod_l+0x578>
 8005cba:	9b07      	ldr	r3, [sp, #28]
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	9908      	ldr	r1, [sp, #32]
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	463a      	mov	r2, r7
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f001 fe63 	bl	8007990 <__s2b>
 8005cca:	9007      	str	r0, [sp, #28]
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	f43f af1f 	beq.w	8005b10 <_strtod_l+0x488>
 8005cd2:	9b05      	ldr	r3, [sp, #20]
 8005cd4:	1b9e      	subs	r6, r3, r6
 8005cd6:	9b06      	ldr	r3, [sp, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bfb4      	ite	lt
 8005cdc:	4633      	movlt	r3, r6
 8005cde:	2300      	movge	r3, #0
 8005ce0:	930c      	str	r3, [sp, #48]	; 0x30
 8005ce2:	9b06      	ldr	r3, [sp, #24]
 8005ce4:	2500      	movs	r5, #0
 8005ce6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005cea:	9312      	str	r3, [sp, #72]	; 0x48
 8005cec:	462e      	mov	r6, r5
 8005cee:	9b07      	ldr	r3, [sp, #28]
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	f001 fda4 	bl	8007840 <_Balloc>
 8005cf8:	9005      	str	r0, [sp, #20]
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	f43f af0c 	beq.w	8005b18 <_strtod_l+0x490>
 8005d00:	9b07      	ldr	r3, [sp, #28]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	3202      	adds	r2, #2
 8005d06:	f103 010c 	add.w	r1, r3, #12
 8005d0a:	0092      	lsls	r2, r2, #2
 8005d0c:	300c      	adds	r0, #12
 8005d0e:	f001 fd89 	bl	8007824 <memcpy>
 8005d12:	ec4b ab10 	vmov	d0, sl, fp
 8005d16:	aa1a      	add	r2, sp, #104	; 0x68
 8005d18:	a919      	add	r1, sp, #100	; 0x64
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f002 f97e 	bl	800801c <__d2b>
 8005d20:	ec4b ab18 	vmov	d8, sl, fp
 8005d24:	9018      	str	r0, [sp, #96]	; 0x60
 8005d26:	2800      	cmp	r0, #0
 8005d28:	f43f aef6 	beq.w	8005b18 <_strtod_l+0x490>
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f001 fec8 	bl	8007ac4 <__i2b>
 8005d34:	4606      	mov	r6, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	f43f aeee 	beq.w	8005b18 <_strtod_l+0x490>
 8005d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d3e:	9904      	ldr	r1, [sp, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	bfab      	itete	ge
 8005d44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005d46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005d48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005d4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005d4e:	bfac      	ite	ge
 8005d50:	eb03 0902 	addge.w	r9, r3, r2
 8005d54:	1ad7      	sublt	r7, r2, r3
 8005d56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005d58:	eba3 0801 	sub.w	r8, r3, r1
 8005d5c:	4490      	add	r8, r2
 8005d5e:	4ba1      	ldr	r3, [pc, #644]	; (8005fe4 <_strtod_l+0x95c>)
 8005d60:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d64:	4598      	cmp	r8, r3
 8005d66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005d6a:	f280 80c7 	bge.w	8005efc <_strtod_l+0x874>
 8005d6e:	eba3 0308 	sub.w	r3, r3, r8
 8005d72:	2b1f      	cmp	r3, #31
 8005d74:	eba2 0203 	sub.w	r2, r2, r3
 8005d78:	f04f 0101 	mov.w	r1, #1
 8005d7c:	f300 80b1 	bgt.w	8005ee2 <_strtod_l+0x85a>
 8005d80:	fa01 f303 	lsl.w	r3, r1, r3
 8005d84:	930d      	str	r3, [sp, #52]	; 0x34
 8005d86:	2300      	movs	r3, #0
 8005d88:	9308      	str	r3, [sp, #32]
 8005d8a:	eb09 0802 	add.w	r8, r9, r2
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	45c1      	cmp	r9, r8
 8005d92:	4417      	add	r7, r2
 8005d94:	441f      	add	r7, r3
 8005d96:	464b      	mov	r3, r9
 8005d98:	bfa8      	it	ge
 8005d9a:	4643      	movge	r3, r8
 8005d9c:	42bb      	cmp	r3, r7
 8005d9e:	bfa8      	it	ge
 8005da0:	463b      	movge	r3, r7
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	bfc2      	ittt	gt
 8005da6:	eba8 0803 	subgt.w	r8, r8, r3
 8005daa:	1aff      	subgt	r7, r7, r3
 8005dac:	eba9 0903 	subgt.w	r9, r9, r3
 8005db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	dd17      	ble.n	8005de6 <_strtod_l+0x75e>
 8005db6:	4631      	mov	r1, r6
 8005db8:	461a      	mov	r2, r3
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f001 ff42 	bl	8007c44 <__pow5mult>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	f43f aea8 	beq.w	8005b18 <_strtod_l+0x490>
 8005dc8:	4601      	mov	r1, r0
 8005dca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f001 fe8f 	bl	8007af0 <__multiply>
 8005dd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	f43f ae9f 	beq.w	8005b18 <_strtod_l+0x490>
 8005dda:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f001 fd6f 	bl	80078c0 <_Bfree>
 8005de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de4:	9318      	str	r3, [sp, #96]	; 0x60
 8005de6:	f1b8 0f00 	cmp.w	r8, #0
 8005dea:	f300 808c 	bgt.w	8005f06 <_strtod_l+0x87e>
 8005dee:	9b06      	ldr	r3, [sp, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dd08      	ble.n	8005e06 <_strtod_l+0x77e>
 8005df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005df6:	9905      	ldr	r1, [sp, #20]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f001 ff23 	bl	8007c44 <__pow5mult>
 8005dfe:	9005      	str	r0, [sp, #20]
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f43f ae89 	beq.w	8005b18 <_strtod_l+0x490>
 8005e06:	2f00      	cmp	r7, #0
 8005e08:	dd08      	ble.n	8005e1c <_strtod_l+0x794>
 8005e0a:	9905      	ldr	r1, [sp, #20]
 8005e0c:	463a      	mov	r2, r7
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f001 ff72 	bl	8007cf8 <__lshift>
 8005e14:	9005      	str	r0, [sp, #20]
 8005e16:	2800      	cmp	r0, #0
 8005e18:	f43f ae7e 	beq.w	8005b18 <_strtod_l+0x490>
 8005e1c:	f1b9 0f00 	cmp.w	r9, #0
 8005e20:	dd08      	ble.n	8005e34 <_strtod_l+0x7ac>
 8005e22:	4631      	mov	r1, r6
 8005e24:	464a      	mov	r2, r9
 8005e26:	4620      	mov	r0, r4
 8005e28:	f001 ff66 	bl	8007cf8 <__lshift>
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f43f ae72 	beq.w	8005b18 <_strtod_l+0x490>
 8005e34:	9a05      	ldr	r2, [sp, #20]
 8005e36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f001 ffe9 	bl	8007e10 <__mdiff>
 8005e3e:	4605      	mov	r5, r0
 8005e40:	2800      	cmp	r0, #0
 8005e42:	f43f ae69 	beq.w	8005b18 <_strtod_l+0x490>
 8005e46:	68c3      	ldr	r3, [r0, #12]
 8005e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60c3      	str	r3, [r0, #12]
 8005e4e:	4631      	mov	r1, r6
 8005e50:	f001 ffc2 	bl	8007dd8 <__mcmp>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	da60      	bge.n	8005f1a <_strtod_l+0x892>
 8005e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e5a:	ea53 030a 	orrs.w	r3, r3, sl
 8005e5e:	f040 8082 	bne.w	8005f66 <_strtod_l+0x8de>
 8005e62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d17d      	bne.n	8005f66 <_strtod_l+0x8de>
 8005e6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e6e:	0d1b      	lsrs	r3, r3, #20
 8005e70:	051b      	lsls	r3, r3, #20
 8005e72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005e76:	d976      	bls.n	8005f66 <_strtod_l+0x8de>
 8005e78:	696b      	ldr	r3, [r5, #20]
 8005e7a:	b913      	cbnz	r3, 8005e82 <_strtod_l+0x7fa>
 8005e7c:	692b      	ldr	r3, [r5, #16]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	dd71      	ble.n	8005f66 <_strtod_l+0x8de>
 8005e82:	4629      	mov	r1, r5
 8005e84:	2201      	movs	r2, #1
 8005e86:	4620      	mov	r0, r4
 8005e88:	f001 ff36 	bl	8007cf8 <__lshift>
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4605      	mov	r5, r0
 8005e90:	f001 ffa2 	bl	8007dd8 <__mcmp>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	dd66      	ble.n	8005f66 <_strtod_l+0x8de>
 8005e98:	9904      	ldr	r1, [sp, #16]
 8005e9a:	4a53      	ldr	r2, [pc, #332]	; (8005fe8 <_strtod_l+0x960>)
 8005e9c:	465b      	mov	r3, fp
 8005e9e:	2900      	cmp	r1, #0
 8005ea0:	f000 8081 	beq.w	8005fa6 <_strtod_l+0x91e>
 8005ea4:	ea02 010b 	and.w	r1, r2, fp
 8005ea8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005eac:	dc7b      	bgt.n	8005fa6 <_strtod_l+0x91e>
 8005eae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005eb2:	f77f aea9 	ble.w	8005c08 <_strtod_l+0x580>
 8005eb6:	4b4d      	ldr	r3, [pc, #308]	; (8005fec <_strtod_l+0x964>)
 8005eb8:	4650      	mov	r0, sl
 8005eba:	4659      	mov	r1, fp
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f7fa fbb3 	bl	8000628 <__aeabi_dmul>
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4303      	orrs	r3, r0
 8005ec6:	bf08      	it	eq
 8005ec8:	2322      	moveq	r3, #34	; 0x22
 8005eca:	4682      	mov	sl, r0
 8005ecc:	468b      	mov	fp, r1
 8005ece:	bf08      	it	eq
 8005ed0:	6023      	streq	r3, [r4, #0]
 8005ed2:	e62b      	b.n	8005b2c <_strtod_l+0x4a4>
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	ea03 0a0a 	and.w	sl, r3, sl
 8005ee0:	e6e3      	b.n	8005caa <_strtod_l+0x622>
 8005ee2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005ee6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005eea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005eee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005ef2:	fa01 f308 	lsl.w	r3, r1, r8
 8005ef6:	9308      	str	r3, [sp, #32]
 8005ef8:	910d      	str	r1, [sp, #52]	; 0x34
 8005efa:	e746      	b.n	8005d8a <_strtod_l+0x702>
 8005efc:	2300      	movs	r3, #0
 8005efe:	9308      	str	r3, [sp, #32]
 8005f00:	2301      	movs	r3, #1
 8005f02:	930d      	str	r3, [sp, #52]	; 0x34
 8005f04:	e741      	b.n	8005d8a <_strtod_l+0x702>
 8005f06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f08:	4642      	mov	r2, r8
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f001 fef4 	bl	8007cf8 <__lshift>
 8005f10:	9018      	str	r0, [sp, #96]	; 0x60
 8005f12:	2800      	cmp	r0, #0
 8005f14:	f47f af6b 	bne.w	8005dee <_strtod_l+0x766>
 8005f18:	e5fe      	b.n	8005b18 <_strtod_l+0x490>
 8005f1a:	465f      	mov	r7, fp
 8005f1c:	d16e      	bne.n	8005ffc <_strtod_l+0x974>
 8005f1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f24:	b342      	cbz	r2, 8005f78 <_strtod_l+0x8f0>
 8005f26:	4a32      	ldr	r2, [pc, #200]	; (8005ff0 <_strtod_l+0x968>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d128      	bne.n	8005f7e <_strtod_l+0x8f6>
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	4651      	mov	r1, sl
 8005f30:	b1eb      	cbz	r3, 8005f6e <_strtod_l+0x8e6>
 8005f32:	4b2d      	ldr	r3, [pc, #180]	; (8005fe8 <_strtod_l+0x960>)
 8005f34:	403b      	ands	r3, r7
 8005f36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3e:	d819      	bhi.n	8005f74 <_strtod_l+0x8ec>
 8005f40:	0d1b      	lsrs	r3, r3, #20
 8005f42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	4299      	cmp	r1, r3
 8005f4c:	d117      	bne.n	8005f7e <_strtod_l+0x8f6>
 8005f4e:	4b29      	ldr	r3, [pc, #164]	; (8005ff4 <_strtod_l+0x96c>)
 8005f50:	429f      	cmp	r7, r3
 8005f52:	d102      	bne.n	8005f5a <_strtod_l+0x8d2>
 8005f54:	3101      	adds	r1, #1
 8005f56:	f43f addf 	beq.w	8005b18 <_strtod_l+0x490>
 8005f5a:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <_strtod_l+0x960>)
 8005f5c:	403b      	ands	r3, r7
 8005f5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005f62:	f04f 0a00 	mov.w	sl, #0
 8005f66:	9b04      	ldr	r3, [sp, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1a4      	bne.n	8005eb6 <_strtod_l+0x82e>
 8005f6c:	e5de      	b.n	8005b2c <_strtod_l+0x4a4>
 8005f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f72:	e7ea      	b.n	8005f4a <_strtod_l+0x8c2>
 8005f74:	4613      	mov	r3, r2
 8005f76:	e7e8      	b.n	8005f4a <_strtod_l+0x8c2>
 8005f78:	ea53 030a 	orrs.w	r3, r3, sl
 8005f7c:	d08c      	beq.n	8005e98 <_strtod_l+0x810>
 8005f7e:	9b08      	ldr	r3, [sp, #32]
 8005f80:	b1db      	cbz	r3, 8005fba <_strtod_l+0x932>
 8005f82:	423b      	tst	r3, r7
 8005f84:	d0ef      	beq.n	8005f66 <_strtod_l+0x8de>
 8005f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f88:	9a04      	ldr	r2, [sp, #16]
 8005f8a:	4650      	mov	r0, sl
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	b1c3      	cbz	r3, 8005fc2 <_strtod_l+0x93a>
 8005f90:	f7ff fb5d 	bl	800564e <sulp>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	ec51 0b18 	vmov	r0, r1, d8
 8005f9c:	f7fa f98e 	bl	80002bc <__adddf3>
 8005fa0:	4682      	mov	sl, r0
 8005fa2:	468b      	mov	fp, r1
 8005fa4:	e7df      	b.n	8005f66 <_strtod_l+0x8de>
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005fac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005fb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005fb4:	f04f 3aff 	mov.w	sl, #4294967295
 8005fb8:	e7d5      	b.n	8005f66 <_strtod_l+0x8de>
 8005fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fbc:	ea13 0f0a 	tst.w	r3, sl
 8005fc0:	e7e0      	b.n	8005f84 <_strtod_l+0x8fc>
 8005fc2:	f7ff fb44 	bl	800564e <sulp>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	ec51 0b18 	vmov	r0, r1, d8
 8005fce:	f7fa f973 	bl	80002b8 <__aeabi_dsub>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4682      	mov	sl, r0
 8005fd8:	468b      	mov	fp, r1
 8005fda:	f7fa fd8d 	bl	8000af8 <__aeabi_dcmpeq>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d0c1      	beq.n	8005f66 <_strtod_l+0x8de>
 8005fe2:	e611      	b.n	8005c08 <_strtod_l+0x580>
 8005fe4:	fffffc02 	.word	0xfffffc02
 8005fe8:	7ff00000 	.word	0x7ff00000
 8005fec:	39500000 	.word	0x39500000
 8005ff0:	000fffff 	.word	0x000fffff
 8005ff4:	7fefffff 	.word	0x7fefffff
 8005ff8:	08009c30 	.word	0x08009c30
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	f002 f868 	bl	80080d4 <__ratio>
 8006004:	ec59 8b10 	vmov	r8, r9, d0
 8006008:	ee10 0a10 	vmov	r0, s0
 800600c:	2200      	movs	r2, #0
 800600e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fd84 	bl	8000b20 <__aeabi_dcmple>
 8006018:	2800      	cmp	r0, #0
 800601a:	d07a      	beq.n	8006112 <_strtod_l+0xa8a>
 800601c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d04a      	beq.n	80060b8 <_strtod_l+0xa30>
 8006022:	4b95      	ldr	r3, [pc, #596]	; (8006278 <_strtod_l+0xbf0>)
 8006024:	2200      	movs	r2, #0
 8006026:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800602a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006278 <_strtod_l+0xbf0>
 800602e:	f04f 0800 	mov.w	r8, #0
 8006032:	4b92      	ldr	r3, [pc, #584]	; (800627c <_strtod_l+0xbf4>)
 8006034:	403b      	ands	r3, r7
 8006036:	930d      	str	r3, [sp, #52]	; 0x34
 8006038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800603a:	4b91      	ldr	r3, [pc, #580]	; (8006280 <_strtod_l+0xbf8>)
 800603c:	429a      	cmp	r2, r3
 800603e:	f040 80b0 	bne.w	80061a2 <_strtod_l+0xb1a>
 8006042:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006046:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800604a:	ec4b ab10 	vmov	d0, sl, fp
 800604e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006052:	f001 ff67 	bl	8007f24 <__ulp>
 8006056:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800605a:	ec53 2b10 	vmov	r2, r3, d0
 800605e:	f7fa fae3 	bl	8000628 <__aeabi_dmul>
 8006062:	4652      	mov	r2, sl
 8006064:	465b      	mov	r3, fp
 8006066:	f7fa f929 	bl	80002bc <__adddf3>
 800606a:	460b      	mov	r3, r1
 800606c:	4983      	ldr	r1, [pc, #524]	; (800627c <_strtod_l+0xbf4>)
 800606e:	4a85      	ldr	r2, [pc, #532]	; (8006284 <_strtod_l+0xbfc>)
 8006070:	4019      	ands	r1, r3
 8006072:	4291      	cmp	r1, r2
 8006074:	4682      	mov	sl, r0
 8006076:	d960      	bls.n	800613a <_strtod_l+0xab2>
 8006078:	ee18 3a90 	vmov	r3, s17
 800607c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006080:	4293      	cmp	r3, r2
 8006082:	d104      	bne.n	800608e <_strtod_l+0xa06>
 8006084:	ee18 3a10 	vmov	r3, s16
 8006088:	3301      	adds	r3, #1
 800608a:	f43f ad45 	beq.w	8005b18 <_strtod_l+0x490>
 800608e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006290 <_strtod_l+0xc08>
 8006092:	f04f 3aff 	mov.w	sl, #4294967295
 8006096:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006098:	4620      	mov	r0, r4
 800609a:	f001 fc11 	bl	80078c0 <_Bfree>
 800609e:	9905      	ldr	r1, [sp, #20]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f001 fc0d 	bl	80078c0 <_Bfree>
 80060a6:	4631      	mov	r1, r6
 80060a8:	4620      	mov	r0, r4
 80060aa:	f001 fc09 	bl	80078c0 <_Bfree>
 80060ae:	4629      	mov	r1, r5
 80060b0:	4620      	mov	r0, r4
 80060b2:	f001 fc05 	bl	80078c0 <_Bfree>
 80060b6:	e61a      	b.n	8005cee <_strtod_l+0x666>
 80060b8:	f1ba 0f00 	cmp.w	sl, #0
 80060bc:	d11b      	bne.n	80060f6 <_strtod_l+0xa6e>
 80060be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060c2:	b9f3      	cbnz	r3, 8006102 <_strtod_l+0xa7a>
 80060c4:	4b6c      	ldr	r3, [pc, #432]	; (8006278 <_strtod_l+0xbf0>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	f7fa fd1e 	bl	8000b0c <__aeabi_dcmplt>
 80060d0:	b9d0      	cbnz	r0, 8006108 <_strtod_l+0xa80>
 80060d2:	4640      	mov	r0, r8
 80060d4:	4649      	mov	r1, r9
 80060d6:	4b6c      	ldr	r3, [pc, #432]	; (8006288 <_strtod_l+0xc00>)
 80060d8:	2200      	movs	r2, #0
 80060da:	f7fa faa5 	bl	8000628 <__aeabi_dmul>
 80060de:	4680      	mov	r8, r0
 80060e0:	4689      	mov	r9, r1
 80060e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80060e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80060ea:	9315      	str	r3, [sp, #84]	; 0x54
 80060ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80060f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80060f4:	e79d      	b.n	8006032 <_strtod_l+0x9aa>
 80060f6:	f1ba 0f01 	cmp.w	sl, #1
 80060fa:	d102      	bne.n	8006102 <_strtod_l+0xa7a>
 80060fc:	2f00      	cmp	r7, #0
 80060fe:	f43f ad83 	beq.w	8005c08 <_strtod_l+0x580>
 8006102:	4b62      	ldr	r3, [pc, #392]	; (800628c <_strtod_l+0xc04>)
 8006104:	2200      	movs	r2, #0
 8006106:	e78e      	b.n	8006026 <_strtod_l+0x99e>
 8006108:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006288 <_strtod_l+0xc00>
 800610c:	f04f 0800 	mov.w	r8, #0
 8006110:	e7e7      	b.n	80060e2 <_strtod_l+0xa5a>
 8006112:	4b5d      	ldr	r3, [pc, #372]	; (8006288 <_strtod_l+0xc00>)
 8006114:	4640      	mov	r0, r8
 8006116:	4649      	mov	r1, r9
 8006118:	2200      	movs	r2, #0
 800611a:	f7fa fa85 	bl	8000628 <__aeabi_dmul>
 800611e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006120:	4680      	mov	r8, r0
 8006122:	4689      	mov	r9, r1
 8006124:	b933      	cbnz	r3, 8006134 <_strtod_l+0xaac>
 8006126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800612a:	900e      	str	r0, [sp, #56]	; 0x38
 800612c:	930f      	str	r3, [sp, #60]	; 0x3c
 800612e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006132:	e7dd      	b.n	80060f0 <_strtod_l+0xa68>
 8006134:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006138:	e7f9      	b.n	800612e <_strtod_l+0xaa6>
 800613a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800613e:	9b04      	ldr	r3, [sp, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1a8      	bne.n	8006096 <_strtod_l+0xa0e>
 8006144:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006148:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800614a:	0d1b      	lsrs	r3, r3, #20
 800614c:	051b      	lsls	r3, r3, #20
 800614e:	429a      	cmp	r2, r3
 8006150:	d1a1      	bne.n	8006096 <_strtod_l+0xa0e>
 8006152:	4640      	mov	r0, r8
 8006154:	4649      	mov	r1, r9
 8006156:	f7fa fdff 	bl	8000d58 <__aeabi_d2lz>
 800615a:	f7fa fa37 	bl	80005cc <__aeabi_l2d>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4640      	mov	r0, r8
 8006164:	4649      	mov	r1, r9
 8006166:	f7fa f8a7 	bl	80002b8 <__aeabi_dsub>
 800616a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800616c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006170:	ea43 030a 	orr.w	r3, r3, sl
 8006174:	4313      	orrs	r3, r2
 8006176:	4680      	mov	r8, r0
 8006178:	4689      	mov	r9, r1
 800617a:	d055      	beq.n	8006228 <_strtod_l+0xba0>
 800617c:	a336      	add	r3, pc, #216	; (adr r3, 8006258 <_strtod_l+0xbd0>)
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f7fa fcc3 	bl	8000b0c <__aeabi_dcmplt>
 8006186:	2800      	cmp	r0, #0
 8006188:	f47f acd0 	bne.w	8005b2c <_strtod_l+0x4a4>
 800618c:	a334      	add	r3, pc, #208	; (adr r3, 8006260 <_strtod_l+0xbd8>)
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	f7fa fcd7 	bl	8000b48 <__aeabi_dcmpgt>
 800619a:	2800      	cmp	r0, #0
 800619c:	f43f af7b 	beq.w	8006096 <_strtod_l+0xa0e>
 80061a0:	e4c4      	b.n	8005b2c <_strtod_l+0x4a4>
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	b333      	cbz	r3, 80061f4 <_strtod_l+0xb6c>
 80061a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80061ac:	d822      	bhi.n	80061f4 <_strtod_l+0xb6c>
 80061ae:	a32e      	add	r3, pc, #184	; (adr r3, 8006268 <_strtod_l+0xbe0>)
 80061b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b4:	4640      	mov	r0, r8
 80061b6:	4649      	mov	r1, r9
 80061b8:	f7fa fcb2 	bl	8000b20 <__aeabi_dcmple>
 80061bc:	b1a0      	cbz	r0, 80061e8 <_strtod_l+0xb60>
 80061be:	4649      	mov	r1, r9
 80061c0:	4640      	mov	r0, r8
 80061c2:	f7fa fd09 	bl	8000bd8 <__aeabi_d2uiz>
 80061c6:	2801      	cmp	r0, #1
 80061c8:	bf38      	it	cc
 80061ca:	2001      	movcc	r0, #1
 80061cc:	f7fa f9b2 	bl	8000534 <__aeabi_ui2d>
 80061d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d2:	4680      	mov	r8, r0
 80061d4:	4689      	mov	r9, r1
 80061d6:	bb23      	cbnz	r3, 8006222 <_strtod_l+0xb9a>
 80061d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061dc:	9010      	str	r0, [sp, #64]	; 0x40
 80061de:	9311      	str	r3, [sp, #68]	; 0x44
 80061e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80061f0:	1a9b      	subs	r3, r3, r2
 80061f2:	9309      	str	r3, [sp, #36]	; 0x24
 80061f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061f8:	eeb0 0a48 	vmov.f32	s0, s16
 80061fc:	eef0 0a68 	vmov.f32	s1, s17
 8006200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006204:	f001 fe8e 	bl	8007f24 <__ulp>
 8006208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800620c:	ec53 2b10 	vmov	r2, r3, d0
 8006210:	f7fa fa0a 	bl	8000628 <__aeabi_dmul>
 8006214:	ec53 2b18 	vmov	r2, r3, d8
 8006218:	f7fa f850 	bl	80002bc <__adddf3>
 800621c:	4682      	mov	sl, r0
 800621e:	468b      	mov	fp, r1
 8006220:	e78d      	b.n	800613e <_strtod_l+0xab6>
 8006222:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006226:	e7db      	b.n	80061e0 <_strtod_l+0xb58>
 8006228:	a311      	add	r3, pc, #68	; (adr r3, 8006270 <_strtod_l+0xbe8>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7fa fc6d 	bl	8000b0c <__aeabi_dcmplt>
 8006232:	e7b2      	b.n	800619a <_strtod_l+0xb12>
 8006234:	2300      	movs	r3, #0
 8006236:	930a      	str	r3, [sp, #40]	; 0x28
 8006238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800623a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	f7ff ba6b 	b.w	8005718 <_strtod_l+0x90>
 8006242:	2a65      	cmp	r2, #101	; 0x65
 8006244:	f43f ab5f 	beq.w	8005906 <_strtod_l+0x27e>
 8006248:	2a45      	cmp	r2, #69	; 0x45
 800624a:	f43f ab5c 	beq.w	8005906 <_strtod_l+0x27e>
 800624e:	2301      	movs	r3, #1
 8006250:	f7ff bb94 	b.w	800597c <_strtod_l+0x2f4>
 8006254:	f3af 8000 	nop.w
 8006258:	94a03595 	.word	0x94a03595
 800625c:	3fdfffff 	.word	0x3fdfffff
 8006260:	35afe535 	.word	0x35afe535
 8006264:	3fe00000 	.word	0x3fe00000
 8006268:	ffc00000 	.word	0xffc00000
 800626c:	41dfffff 	.word	0x41dfffff
 8006270:	94a03595 	.word	0x94a03595
 8006274:	3fcfffff 	.word	0x3fcfffff
 8006278:	3ff00000 	.word	0x3ff00000
 800627c:	7ff00000 	.word	0x7ff00000
 8006280:	7fe00000 	.word	0x7fe00000
 8006284:	7c9fffff 	.word	0x7c9fffff
 8006288:	3fe00000 	.word	0x3fe00000
 800628c:	bff00000 	.word	0xbff00000
 8006290:	7fefffff 	.word	0x7fefffff

08006294 <_strtod_r>:
 8006294:	4b01      	ldr	r3, [pc, #4]	; (800629c <_strtod_r+0x8>)
 8006296:	f7ff b9f7 	b.w	8005688 <_strtod_l>
 800629a:	bf00      	nop
 800629c:	20000074 	.word	0x20000074

080062a0 <_strtol_l.constprop.0>:
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062a6:	d001      	beq.n	80062ac <_strtol_l.constprop.0+0xc>
 80062a8:	2b24      	cmp	r3, #36	; 0x24
 80062aa:	d906      	bls.n	80062ba <_strtol_l.constprop.0+0x1a>
 80062ac:	f7fe fa8c 	bl	80047c8 <__errno>
 80062b0:	2316      	movs	r3, #22
 80062b2:	6003      	str	r3, [r0, #0]
 80062b4:	2000      	movs	r0, #0
 80062b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80063a0 <_strtol_l.constprop.0+0x100>
 80062be:	460d      	mov	r5, r1
 80062c0:	462e      	mov	r6, r5
 80062c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062c6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80062ca:	f017 0708 	ands.w	r7, r7, #8
 80062ce:	d1f7      	bne.n	80062c0 <_strtol_l.constprop.0+0x20>
 80062d0:	2c2d      	cmp	r4, #45	; 0x2d
 80062d2:	d132      	bne.n	800633a <_strtol_l.constprop.0+0x9a>
 80062d4:	782c      	ldrb	r4, [r5, #0]
 80062d6:	2701      	movs	r7, #1
 80062d8:	1cb5      	adds	r5, r6, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d05b      	beq.n	8006396 <_strtol_l.constprop.0+0xf6>
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d109      	bne.n	80062f6 <_strtol_l.constprop.0+0x56>
 80062e2:	2c30      	cmp	r4, #48	; 0x30
 80062e4:	d107      	bne.n	80062f6 <_strtol_l.constprop.0+0x56>
 80062e6:	782c      	ldrb	r4, [r5, #0]
 80062e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80062ec:	2c58      	cmp	r4, #88	; 0x58
 80062ee:	d14d      	bne.n	800638c <_strtol_l.constprop.0+0xec>
 80062f0:	786c      	ldrb	r4, [r5, #1]
 80062f2:	2310      	movs	r3, #16
 80062f4:	3502      	adds	r5, #2
 80062f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80062fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80062fe:	f04f 0c00 	mov.w	ip, #0
 8006302:	fbb8 f9f3 	udiv	r9, r8, r3
 8006306:	4666      	mov	r6, ip
 8006308:	fb03 8a19 	mls	sl, r3, r9, r8
 800630c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006310:	f1be 0f09 	cmp.w	lr, #9
 8006314:	d816      	bhi.n	8006344 <_strtol_l.constprop.0+0xa4>
 8006316:	4674      	mov	r4, lr
 8006318:	42a3      	cmp	r3, r4
 800631a:	dd24      	ble.n	8006366 <_strtol_l.constprop.0+0xc6>
 800631c:	f1bc 0f00 	cmp.w	ip, #0
 8006320:	db1e      	blt.n	8006360 <_strtol_l.constprop.0+0xc0>
 8006322:	45b1      	cmp	r9, r6
 8006324:	d31c      	bcc.n	8006360 <_strtol_l.constprop.0+0xc0>
 8006326:	d101      	bne.n	800632c <_strtol_l.constprop.0+0x8c>
 8006328:	45a2      	cmp	sl, r4
 800632a:	db19      	blt.n	8006360 <_strtol_l.constprop.0+0xc0>
 800632c:	fb06 4603 	mla	r6, r6, r3, r4
 8006330:	f04f 0c01 	mov.w	ip, #1
 8006334:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006338:	e7e8      	b.n	800630c <_strtol_l.constprop.0+0x6c>
 800633a:	2c2b      	cmp	r4, #43	; 0x2b
 800633c:	bf04      	itt	eq
 800633e:	782c      	ldrbeq	r4, [r5, #0]
 8006340:	1cb5      	addeq	r5, r6, #2
 8006342:	e7ca      	b.n	80062da <_strtol_l.constprop.0+0x3a>
 8006344:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006348:	f1be 0f19 	cmp.w	lr, #25
 800634c:	d801      	bhi.n	8006352 <_strtol_l.constprop.0+0xb2>
 800634e:	3c37      	subs	r4, #55	; 0x37
 8006350:	e7e2      	b.n	8006318 <_strtol_l.constprop.0+0x78>
 8006352:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006356:	f1be 0f19 	cmp.w	lr, #25
 800635a:	d804      	bhi.n	8006366 <_strtol_l.constprop.0+0xc6>
 800635c:	3c57      	subs	r4, #87	; 0x57
 800635e:	e7db      	b.n	8006318 <_strtol_l.constprop.0+0x78>
 8006360:	f04f 3cff 	mov.w	ip, #4294967295
 8006364:	e7e6      	b.n	8006334 <_strtol_l.constprop.0+0x94>
 8006366:	f1bc 0f00 	cmp.w	ip, #0
 800636a:	da05      	bge.n	8006378 <_strtol_l.constprop.0+0xd8>
 800636c:	2322      	movs	r3, #34	; 0x22
 800636e:	6003      	str	r3, [r0, #0]
 8006370:	4646      	mov	r6, r8
 8006372:	b942      	cbnz	r2, 8006386 <_strtol_l.constprop.0+0xe6>
 8006374:	4630      	mov	r0, r6
 8006376:	e79e      	b.n	80062b6 <_strtol_l.constprop.0+0x16>
 8006378:	b107      	cbz	r7, 800637c <_strtol_l.constprop.0+0xdc>
 800637a:	4276      	negs	r6, r6
 800637c:	2a00      	cmp	r2, #0
 800637e:	d0f9      	beq.n	8006374 <_strtol_l.constprop.0+0xd4>
 8006380:	f1bc 0f00 	cmp.w	ip, #0
 8006384:	d000      	beq.n	8006388 <_strtol_l.constprop.0+0xe8>
 8006386:	1e69      	subs	r1, r5, #1
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	e7f3      	b.n	8006374 <_strtol_l.constprop.0+0xd4>
 800638c:	2430      	movs	r4, #48	; 0x30
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1b1      	bne.n	80062f6 <_strtol_l.constprop.0+0x56>
 8006392:	2308      	movs	r3, #8
 8006394:	e7af      	b.n	80062f6 <_strtol_l.constprop.0+0x56>
 8006396:	2c30      	cmp	r4, #48	; 0x30
 8006398:	d0a5      	beq.n	80062e6 <_strtol_l.constprop.0+0x46>
 800639a:	230a      	movs	r3, #10
 800639c:	e7ab      	b.n	80062f6 <_strtol_l.constprop.0+0x56>
 800639e:	bf00      	nop
 80063a0:	08009c59 	.word	0x08009c59

080063a4 <_strtol_r>:
 80063a4:	f7ff bf7c 	b.w	80062a0 <_strtol_l.constprop.0>

080063a8 <_write_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	; (80063c8 <_write_r+0x20>)
 80063ac:	4604      	mov	r4, r0
 80063ae:	4608      	mov	r0, r1
 80063b0:	4611      	mov	r1, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	602a      	str	r2, [r5, #0]
 80063b6:	461a      	mov	r2, r3
 80063b8:	f7fb fcda 	bl	8001d70 <_write>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_write_r+0x1e>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_write_r+0x1e>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	20000c28 	.word	0x20000c28

080063cc <_close_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4d06      	ldr	r5, [pc, #24]	; (80063e8 <_close_r+0x1c>)
 80063d0:	2300      	movs	r3, #0
 80063d2:	4604      	mov	r4, r0
 80063d4:	4608      	mov	r0, r1
 80063d6:	602b      	str	r3, [r5, #0]
 80063d8:	f7fb fce6 	bl	8001da8 <_close>
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d102      	bne.n	80063e6 <_close_r+0x1a>
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	b103      	cbz	r3, 80063e6 <_close_r+0x1a>
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	bd38      	pop	{r3, r4, r5, pc}
 80063e8:	20000c28 	.word	0x20000c28

080063ec <quorem>:
 80063ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f0:	6903      	ldr	r3, [r0, #16]
 80063f2:	690c      	ldr	r4, [r1, #16]
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	4607      	mov	r7, r0
 80063f8:	f2c0 8081 	blt.w	80064fe <quorem+0x112>
 80063fc:	3c01      	subs	r4, #1
 80063fe:	f101 0814 	add.w	r8, r1, #20
 8006402:	f100 0514 	add.w	r5, r0, #20
 8006406:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006410:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006414:	3301      	adds	r3, #1
 8006416:	429a      	cmp	r2, r3
 8006418:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800641c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006420:	fbb2 f6f3 	udiv	r6, r2, r3
 8006424:	d331      	bcc.n	800648a <quorem+0x9e>
 8006426:	f04f 0e00 	mov.w	lr, #0
 800642a:	4640      	mov	r0, r8
 800642c:	46ac      	mov	ip, r5
 800642e:	46f2      	mov	sl, lr
 8006430:	f850 2b04 	ldr.w	r2, [r0], #4
 8006434:	b293      	uxth	r3, r2
 8006436:	fb06 e303 	mla	r3, r6, r3, lr
 800643a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800643e:	b29b      	uxth	r3, r3
 8006440:	ebaa 0303 	sub.w	r3, sl, r3
 8006444:	f8dc a000 	ldr.w	sl, [ip]
 8006448:	0c12      	lsrs	r2, r2, #16
 800644a:	fa13 f38a 	uxtah	r3, r3, sl
 800644e:	fb06 e202 	mla	r2, r6, r2, lr
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	9b00      	ldr	r3, [sp, #0]
 8006456:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800645a:	b292      	uxth	r2, r2
 800645c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006460:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006464:	f8bd 3000 	ldrh.w	r3, [sp]
 8006468:	4581      	cmp	r9, r0
 800646a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800646e:	f84c 3b04 	str.w	r3, [ip], #4
 8006472:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006476:	d2db      	bcs.n	8006430 <quorem+0x44>
 8006478:	f855 300b 	ldr.w	r3, [r5, fp]
 800647c:	b92b      	cbnz	r3, 800648a <quorem+0x9e>
 800647e:	9b01      	ldr	r3, [sp, #4]
 8006480:	3b04      	subs	r3, #4
 8006482:	429d      	cmp	r5, r3
 8006484:	461a      	mov	r2, r3
 8006486:	d32e      	bcc.n	80064e6 <quorem+0xfa>
 8006488:	613c      	str	r4, [r7, #16]
 800648a:	4638      	mov	r0, r7
 800648c:	f001 fca4 	bl	8007dd8 <__mcmp>
 8006490:	2800      	cmp	r0, #0
 8006492:	db24      	blt.n	80064de <quorem+0xf2>
 8006494:	3601      	adds	r6, #1
 8006496:	4628      	mov	r0, r5
 8006498:	f04f 0c00 	mov.w	ip, #0
 800649c:	f858 2b04 	ldr.w	r2, [r8], #4
 80064a0:	f8d0 e000 	ldr.w	lr, [r0]
 80064a4:	b293      	uxth	r3, r2
 80064a6:	ebac 0303 	sub.w	r3, ip, r3
 80064aa:	0c12      	lsrs	r2, r2, #16
 80064ac:	fa13 f38e 	uxtah	r3, r3, lr
 80064b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064be:	45c1      	cmp	r9, r8
 80064c0:	f840 3b04 	str.w	r3, [r0], #4
 80064c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064c8:	d2e8      	bcs.n	800649c <quorem+0xb0>
 80064ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064d2:	b922      	cbnz	r2, 80064de <quorem+0xf2>
 80064d4:	3b04      	subs	r3, #4
 80064d6:	429d      	cmp	r5, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	d30a      	bcc.n	80064f2 <quorem+0x106>
 80064dc:	613c      	str	r4, [r7, #16]
 80064de:	4630      	mov	r0, r6
 80064e0:	b003      	add	sp, #12
 80064e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e6:	6812      	ldr	r2, [r2, #0]
 80064e8:	3b04      	subs	r3, #4
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d1cc      	bne.n	8006488 <quorem+0x9c>
 80064ee:	3c01      	subs	r4, #1
 80064f0:	e7c7      	b.n	8006482 <quorem+0x96>
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	d1f0      	bne.n	80064dc <quorem+0xf0>
 80064fa:	3c01      	subs	r4, #1
 80064fc:	e7eb      	b.n	80064d6 <quorem+0xea>
 80064fe:	2000      	movs	r0, #0
 8006500:	e7ee      	b.n	80064e0 <quorem+0xf4>
 8006502:	0000      	movs	r0, r0
 8006504:	0000      	movs	r0, r0
	...

08006508 <_dtoa_r>:
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	ed2d 8b04 	vpush	{d8-d9}
 8006510:	ec57 6b10 	vmov	r6, r7, d0
 8006514:	b093      	sub	sp, #76	; 0x4c
 8006516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006518:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800651c:	9106      	str	r1, [sp, #24]
 800651e:	ee10 aa10 	vmov	sl, s0
 8006522:	4604      	mov	r4, r0
 8006524:	9209      	str	r2, [sp, #36]	; 0x24
 8006526:	930c      	str	r3, [sp, #48]	; 0x30
 8006528:	46bb      	mov	fp, r7
 800652a:	b975      	cbnz	r5, 800654a <_dtoa_r+0x42>
 800652c:	2010      	movs	r0, #16
 800652e:	f001 f95f 	bl	80077f0 <malloc>
 8006532:	4602      	mov	r2, r0
 8006534:	6260      	str	r0, [r4, #36]	; 0x24
 8006536:	b920      	cbnz	r0, 8006542 <_dtoa_r+0x3a>
 8006538:	4ba7      	ldr	r3, [pc, #668]	; (80067d8 <_dtoa_r+0x2d0>)
 800653a:	21ea      	movs	r1, #234	; 0xea
 800653c:	48a7      	ldr	r0, [pc, #668]	; (80067dc <_dtoa_r+0x2d4>)
 800653e:	f002 fceb 	bl	8008f18 <__assert_func>
 8006542:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006546:	6005      	str	r5, [r0, #0]
 8006548:	60c5      	str	r5, [r0, #12]
 800654a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654c:	6819      	ldr	r1, [r3, #0]
 800654e:	b151      	cbz	r1, 8006566 <_dtoa_r+0x5e>
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	604a      	str	r2, [r1, #4]
 8006554:	2301      	movs	r3, #1
 8006556:	4093      	lsls	r3, r2
 8006558:	608b      	str	r3, [r1, #8]
 800655a:	4620      	mov	r0, r4
 800655c:	f001 f9b0 	bl	80078c0 <_Bfree>
 8006560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	1e3b      	subs	r3, r7, #0
 8006568:	bfaa      	itet	ge
 800656a:	2300      	movge	r3, #0
 800656c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006570:	f8c8 3000 	strge.w	r3, [r8]
 8006574:	4b9a      	ldr	r3, [pc, #616]	; (80067e0 <_dtoa_r+0x2d8>)
 8006576:	bfbc      	itt	lt
 8006578:	2201      	movlt	r2, #1
 800657a:	f8c8 2000 	strlt.w	r2, [r8]
 800657e:	ea33 030b 	bics.w	r3, r3, fp
 8006582:	d11b      	bne.n	80065bc <_dtoa_r+0xb4>
 8006584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006586:	f242 730f 	movw	r3, #9999	; 0x270f
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006590:	4333      	orrs	r3, r6
 8006592:	f000 8592 	beq.w	80070ba <_dtoa_r+0xbb2>
 8006596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006598:	b963      	cbnz	r3, 80065b4 <_dtoa_r+0xac>
 800659a:	4b92      	ldr	r3, [pc, #584]	; (80067e4 <_dtoa_r+0x2dc>)
 800659c:	e022      	b.n	80065e4 <_dtoa_r+0xdc>
 800659e:	4b92      	ldr	r3, [pc, #584]	; (80067e8 <_dtoa_r+0x2e0>)
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	3308      	adds	r3, #8
 80065a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	b013      	add	sp, #76	; 0x4c
 80065ac:	ecbd 8b04 	vpop	{d8-d9}
 80065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b4:	4b8b      	ldr	r3, [pc, #556]	; (80067e4 <_dtoa_r+0x2dc>)
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	3303      	adds	r3, #3
 80065ba:	e7f3      	b.n	80065a4 <_dtoa_r+0x9c>
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	4650      	mov	r0, sl
 80065c2:	4659      	mov	r1, fp
 80065c4:	f7fa fa98 	bl	8000af8 <__aeabi_dcmpeq>
 80065c8:	ec4b ab19 	vmov	d9, sl, fp
 80065cc:	4680      	mov	r8, r0
 80065ce:	b158      	cbz	r0, 80065e8 <_dtoa_r+0xe0>
 80065d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065d2:	2301      	movs	r3, #1
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 856b 	beq.w	80070b4 <_dtoa_r+0xbac>
 80065de:	4883      	ldr	r0, [pc, #524]	; (80067ec <_dtoa_r+0x2e4>)
 80065e0:	6018      	str	r0, [r3, #0]
 80065e2:	1e43      	subs	r3, r0, #1
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	e7df      	b.n	80065a8 <_dtoa_r+0xa0>
 80065e8:	ec4b ab10 	vmov	d0, sl, fp
 80065ec:	aa10      	add	r2, sp, #64	; 0x40
 80065ee:	a911      	add	r1, sp, #68	; 0x44
 80065f0:	4620      	mov	r0, r4
 80065f2:	f001 fd13 	bl	800801c <__d2b>
 80065f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065fa:	ee08 0a10 	vmov	s16, r0
 80065fe:	2d00      	cmp	r5, #0
 8006600:	f000 8084 	beq.w	800670c <_dtoa_r+0x204>
 8006604:	ee19 3a90 	vmov	r3, s19
 8006608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800660c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006610:	4656      	mov	r6, sl
 8006612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800661a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800661e:	4b74      	ldr	r3, [pc, #464]	; (80067f0 <_dtoa_r+0x2e8>)
 8006620:	2200      	movs	r2, #0
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	f7f9 fe47 	bl	80002b8 <__aeabi_dsub>
 800662a:	a365      	add	r3, pc, #404	; (adr r3, 80067c0 <_dtoa_r+0x2b8>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7f9 fffa 	bl	8000628 <__aeabi_dmul>
 8006634:	a364      	add	r3, pc, #400	; (adr r3, 80067c8 <_dtoa_r+0x2c0>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 fe3f 	bl	80002bc <__adddf3>
 800663e:	4606      	mov	r6, r0
 8006640:	4628      	mov	r0, r5
 8006642:	460f      	mov	r7, r1
 8006644:	f7f9 ff86 	bl	8000554 <__aeabi_i2d>
 8006648:	a361      	add	r3, pc, #388	; (adr r3, 80067d0 <_dtoa_r+0x2c8>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 ffeb 	bl	8000628 <__aeabi_dmul>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4630      	mov	r0, r6
 8006658:	4639      	mov	r1, r7
 800665a:	f7f9 fe2f 	bl	80002bc <__adddf3>
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	f7fa fa91 	bl	8000b88 <__aeabi_d2iz>
 8006666:	2200      	movs	r2, #0
 8006668:	9000      	str	r0, [sp, #0]
 800666a:	2300      	movs	r3, #0
 800666c:	4630      	mov	r0, r6
 800666e:	4639      	mov	r1, r7
 8006670:	f7fa fa4c 	bl	8000b0c <__aeabi_dcmplt>
 8006674:	b150      	cbz	r0, 800668c <_dtoa_r+0x184>
 8006676:	9800      	ldr	r0, [sp, #0]
 8006678:	f7f9 ff6c 	bl	8000554 <__aeabi_i2d>
 800667c:	4632      	mov	r2, r6
 800667e:	463b      	mov	r3, r7
 8006680:	f7fa fa3a 	bl	8000af8 <__aeabi_dcmpeq>
 8006684:	b910      	cbnz	r0, 800668c <_dtoa_r+0x184>
 8006686:	9b00      	ldr	r3, [sp, #0]
 8006688:	3b01      	subs	r3, #1
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	9b00      	ldr	r3, [sp, #0]
 800668e:	2b16      	cmp	r3, #22
 8006690:	d85a      	bhi.n	8006748 <_dtoa_r+0x240>
 8006692:	9a00      	ldr	r2, [sp, #0]
 8006694:	4b57      	ldr	r3, [pc, #348]	; (80067f4 <_dtoa_r+0x2ec>)
 8006696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	ec51 0b19 	vmov	r0, r1, d9
 80066a2:	f7fa fa33 	bl	8000b0c <__aeabi_dcmplt>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	d050      	beq.n	800674c <_dtoa_r+0x244>
 80066aa:	9b00      	ldr	r3, [sp, #0]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	2300      	movs	r3, #0
 80066b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066b6:	1b5d      	subs	r5, r3, r5
 80066b8:	1e6b      	subs	r3, r5, #1
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	bf45      	ittet	mi
 80066be:	f1c5 0301 	rsbmi	r3, r5, #1
 80066c2:	9304      	strmi	r3, [sp, #16]
 80066c4:	2300      	movpl	r3, #0
 80066c6:	2300      	movmi	r3, #0
 80066c8:	bf4c      	ite	mi
 80066ca:	9305      	strmi	r3, [sp, #20]
 80066cc:	9304      	strpl	r3, [sp, #16]
 80066ce:	9b00      	ldr	r3, [sp, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	db3d      	blt.n	8006750 <_dtoa_r+0x248>
 80066d4:	9b05      	ldr	r3, [sp, #20]
 80066d6:	9a00      	ldr	r2, [sp, #0]
 80066d8:	920a      	str	r2, [sp, #40]	; 0x28
 80066da:	4413      	add	r3, r2
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	2300      	movs	r3, #0
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	9b06      	ldr	r3, [sp, #24]
 80066e4:	2b09      	cmp	r3, #9
 80066e6:	f200 8089 	bhi.w	80067fc <_dtoa_r+0x2f4>
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	bfc4      	itt	gt
 80066ee:	3b04      	subgt	r3, #4
 80066f0:	9306      	strgt	r3, [sp, #24]
 80066f2:	9b06      	ldr	r3, [sp, #24]
 80066f4:	f1a3 0302 	sub.w	r3, r3, #2
 80066f8:	bfcc      	ite	gt
 80066fa:	2500      	movgt	r5, #0
 80066fc:	2501      	movle	r5, #1
 80066fe:	2b03      	cmp	r3, #3
 8006700:	f200 8087 	bhi.w	8006812 <_dtoa_r+0x30a>
 8006704:	e8df f003 	tbb	[pc, r3]
 8006708:	59383a2d 	.word	0x59383a2d
 800670c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006710:	441d      	add	r5, r3
 8006712:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006716:	2b20      	cmp	r3, #32
 8006718:	bfc1      	itttt	gt
 800671a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800671e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006722:	fa0b f303 	lslgt.w	r3, fp, r3
 8006726:	fa26 f000 	lsrgt.w	r0, r6, r0
 800672a:	bfda      	itte	le
 800672c:	f1c3 0320 	rsble	r3, r3, #32
 8006730:	fa06 f003 	lslle.w	r0, r6, r3
 8006734:	4318      	orrgt	r0, r3
 8006736:	f7f9 fefd 	bl	8000534 <__aeabi_ui2d>
 800673a:	2301      	movs	r3, #1
 800673c:	4606      	mov	r6, r0
 800673e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006742:	3d01      	subs	r5, #1
 8006744:	930e      	str	r3, [sp, #56]	; 0x38
 8006746:	e76a      	b.n	800661e <_dtoa_r+0x116>
 8006748:	2301      	movs	r3, #1
 800674a:	e7b2      	b.n	80066b2 <_dtoa_r+0x1aa>
 800674c:	900b      	str	r0, [sp, #44]	; 0x2c
 800674e:	e7b1      	b.n	80066b4 <_dtoa_r+0x1ac>
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	9a00      	ldr	r2, [sp, #0]
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	9304      	str	r3, [sp, #16]
 8006758:	4253      	negs	r3, r2
 800675a:	9307      	str	r3, [sp, #28]
 800675c:	2300      	movs	r3, #0
 800675e:	930a      	str	r3, [sp, #40]	; 0x28
 8006760:	e7bf      	b.n	80066e2 <_dtoa_r+0x1da>
 8006762:	2300      	movs	r3, #0
 8006764:	9308      	str	r3, [sp, #32]
 8006766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	dc55      	bgt.n	8006818 <_dtoa_r+0x310>
 800676c:	2301      	movs	r3, #1
 800676e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006772:	461a      	mov	r2, r3
 8006774:	9209      	str	r2, [sp, #36]	; 0x24
 8006776:	e00c      	b.n	8006792 <_dtoa_r+0x28a>
 8006778:	2301      	movs	r3, #1
 800677a:	e7f3      	b.n	8006764 <_dtoa_r+0x25c>
 800677c:	2300      	movs	r3, #0
 800677e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006780:	9308      	str	r3, [sp, #32]
 8006782:	9b00      	ldr	r3, [sp, #0]
 8006784:	4413      	add	r3, r2
 8006786:	9302      	str	r3, [sp, #8]
 8006788:	3301      	adds	r3, #1
 800678a:	2b01      	cmp	r3, #1
 800678c:	9303      	str	r3, [sp, #12]
 800678e:	bfb8      	it	lt
 8006790:	2301      	movlt	r3, #1
 8006792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006794:	2200      	movs	r2, #0
 8006796:	6042      	str	r2, [r0, #4]
 8006798:	2204      	movs	r2, #4
 800679a:	f102 0614 	add.w	r6, r2, #20
 800679e:	429e      	cmp	r6, r3
 80067a0:	6841      	ldr	r1, [r0, #4]
 80067a2:	d93d      	bls.n	8006820 <_dtoa_r+0x318>
 80067a4:	4620      	mov	r0, r4
 80067a6:	f001 f84b 	bl	8007840 <_Balloc>
 80067aa:	9001      	str	r0, [sp, #4]
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d13b      	bne.n	8006828 <_dtoa_r+0x320>
 80067b0:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <_dtoa_r+0x2f0>)
 80067b2:	4602      	mov	r2, r0
 80067b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067b8:	e6c0      	b.n	800653c <_dtoa_r+0x34>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e7df      	b.n	800677e <_dtoa_r+0x276>
 80067be:	bf00      	nop
 80067c0:	636f4361 	.word	0x636f4361
 80067c4:	3fd287a7 	.word	0x3fd287a7
 80067c8:	8b60c8b3 	.word	0x8b60c8b3
 80067cc:	3fc68a28 	.word	0x3fc68a28
 80067d0:	509f79fb 	.word	0x509f79fb
 80067d4:	3fd34413 	.word	0x3fd34413
 80067d8:	08009d66 	.word	0x08009d66
 80067dc:	08009d7d 	.word	0x08009d7d
 80067e0:	7ff00000 	.word	0x7ff00000
 80067e4:	08009d62 	.word	0x08009d62
 80067e8:	08009d59 	.word	0x08009d59
 80067ec:	08009fd2 	.word	0x08009fd2
 80067f0:	3ff80000 	.word	0x3ff80000
 80067f4:	08009ee8 	.word	0x08009ee8
 80067f8:	08009dd8 	.word	0x08009dd8
 80067fc:	2501      	movs	r5, #1
 80067fe:	2300      	movs	r3, #0
 8006800:	9306      	str	r3, [sp, #24]
 8006802:	9508      	str	r5, [sp, #32]
 8006804:	f04f 33ff 	mov.w	r3, #4294967295
 8006808:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	2312      	movs	r3, #18
 8006810:	e7b0      	b.n	8006774 <_dtoa_r+0x26c>
 8006812:	2301      	movs	r3, #1
 8006814:	9308      	str	r3, [sp, #32]
 8006816:	e7f5      	b.n	8006804 <_dtoa_r+0x2fc>
 8006818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800681e:	e7b8      	b.n	8006792 <_dtoa_r+0x28a>
 8006820:	3101      	adds	r1, #1
 8006822:	6041      	str	r1, [r0, #4]
 8006824:	0052      	lsls	r2, r2, #1
 8006826:	e7b8      	b.n	800679a <_dtoa_r+0x292>
 8006828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800682a:	9a01      	ldr	r2, [sp, #4]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	2b0e      	cmp	r3, #14
 8006832:	f200 809d 	bhi.w	8006970 <_dtoa_r+0x468>
 8006836:	2d00      	cmp	r5, #0
 8006838:	f000 809a 	beq.w	8006970 <_dtoa_r+0x468>
 800683c:	9b00      	ldr	r3, [sp, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dd32      	ble.n	80068a8 <_dtoa_r+0x3a0>
 8006842:	4ab7      	ldr	r2, [pc, #732]	; (8006b20 <_dtoa_r+0x618>)
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800684c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006850:	9b00      	ldr	r3, [sp, #0]
 8006852:	05d8      	lsls	r0, r3, #23
 8006854:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006858:	d516      	bpl.n	8006888 <_dtoa_r+0x380>
 800685a:	4bb2      	ldr	r3, [pc, #712]	; (8006b24 <_dtoa_r+0x61c>)
 800685c:	ec51 0b19 	vmov	r0, r1, d9
 8006860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006864:	f7fa f80a 	bl	800087c <__aeabi_ddiv>
 8006868:	f007 070f 	and.w	r7, r7, #15
 800686c:	4682      	mov	sl, r0
 800686e:	468b      	mov	fp, r1
 8006870:	2503      	movs	r5, #3
 8006872:	4eac      	ldr	r6, [pc, #688]	; (8006b24 <_dtoa_r+0x61c>)
 8006874:	b957      	cbnz	r7, 800688c <_dtoa_r+0x384>
 8006876:	4642      	mov	r2, r8
 8006878:	464b      	mov	r3, r9
 800687a:	4650      	mov	r0, sl
 800687c:	4659      	mov	r1, fp
 800687e:	f7f9 fffd 	bl	800087c <__aeabi_ddiv>
 8006882:	4682      	mov	sl, r0
 8006884:	468b      	mov	fp, r1
 8006886:	e028      	b.n	80068da <_dtoa_r+0x3d2>
 8006888:	2502      	movs	r5, #2
 800688a:	e7f2      	b.n	8006872 <_dtoa_r+0x36a>
 800688c:	07f9      	lsls	r1, r7, #31
 800688e:	d508      	bpl.n	80068a2 <_dtoa_r+0x39a>
 8006890:	4640      	mov	r0, r8
 8006892:	4649      	mov	r1, r9
 8006894:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006898:	f7f9 fec6 	bl	8000628 <__aeabi_dmul>
 800689c:	3501      	adds	r5, #1
 800689e:	4680      	mov	r8, r0
 80068a0:	4689      	mov	r9, r1
 80068a2:	107f      	asrs	r7, r7, #1
 80068a4:	3608      	adds	r6, #8
 80068a6:	e7e5      	b.n	8006874 <_dtoa_r+0x36c>
 80068a8:	f000 809b 	beq.w	80069e2 <_dtoa_r+0x4da>
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	4f9d      	ldr	r7, [pc, #628]	; (8006b24 <_dtoa_r+0x61c>)
 80068b0:	425e      	negs	r6, r3
 80068b2:	4b9b      	ldr	r3, [pc, #620]	; (8006b20 <_dtoa_r+0x618>)
 80068b4:	f006 020f 	and.w	r2, r6, #15
 80068b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	ec51 0b19 	vmov	r0, r1, d9
 80068c4:	f7f9 feb0 	bl	8000628 <__aeabi_dmul>
 80068c8:	1136      	asrs	r6, r6, #4
 80068ca:	4682      	mov	sl, r0
 80068cc:	468b      	mov	fp, r1
 80068ce:	2300      	movs	r3, #0
 80068d0:	2502      	movs	r5, #2
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	d17a      	bne.n	80069cc <_dtoa_r+0x4c4>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1d3      	bne.n	8006882 <_dtoa_r+0x37a>
 80068da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8082 	beq.w	80069e6 <_dtoa_r+0x4de>
 80068e2:	4b91      	ldr	r3, [pc, #580]	; (8006b28 <_dtoa_r+0x620>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	4650      	mov	r0, sl
 80068e8:	4659      	mov	r1, fp
 80068ea:	f7fa f90f 	bl	8000b0c <__aeabi_dcmplt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d079      	beq.n	80069e6 <_dtoa_r+0x4de>
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d076      	beq.n	80069e6 <_dtoa_r+0x4de>
 80068f8:	9b02      	ldr	r3, [sp, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dd36      	ble.n	800696c <_dtoa_r+0x464>
 80068fe:	9b00      	ldr	r3, [sp, #0]
 8006900:	4650      	mov	r0, sl
 8006902:	4659      	mov	r1, fp
 8006904:	1e5f      	subs	r7, r3, #1
 8006906:	2200      	movs	r2, #0
 8006908:	4b88      	ldr	r3, [pc, #544]	; (8006b2c <_dtoa_r+0x624>)
 800690a:	f7f9 fe8d 	bl	8000628 <__aeabi_dmul>
 800690e:	9e02      	ldr	r6, [sp, #8]
 8006910:	4682      	mov	sl, r0
 8006912:	468b      	mov	fp, r1
 8006914:	3501      	adds	r5, #1
 8006916:	4628      	mov	r0, r5
 8006918:	f7f9 fe1c 	bl	8000554 <__aeabi_i2d>
 800691c:	4652      	mov	r2, sl
 800691e:	465b      	mov	r3, fp
 8006920:	f7f9 fe82 	bl	8000628 <__aeabi_dmul>
 8006924:	4b82      	ldr	r3, [pc, #520]	; (8006b30 <_dtoa_r+0x628>)
 8006926:	2200      	movs	r2, #0
 8006928:	f7f9 fcc8 	bl	80002bc <__adddf3>
 800692c:	46d0      	mov	r8, sl
 800692e:	46d9      	mov	r9, fp
 8006930:	4682      	mov	sl, r0
 8006932:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006936:	2e00      	cmp	r6, #0
 8006938:	d158      	bne.n	80069ec <_dtoa_r+0x4e4>
 800693a:	4b7e      	ldr	r3, [pc, #504]	; (8006b34 <_dtoa_r+0x62c>)
 800693c:	2200      	movs	r2, #0
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7f9 fcb9 	bl	80002b8 <__aeabi_dsub>
 8006946:	4652      	mov	r2, sl
 8006948:	465b      	mov	r3, fp
 800694a:	4680      	mov	r8, r0
 800694c:	4689      	mov	r9, r1
 800694e:	f7fa f8fb 	bl	8000b48 <__aeabi_dcmpgt>
 8006952:	2800      	cmp	r0, #0
 8006954:	f040 8295 	bne.w	8006e82 <_dtoa_r+0x97a>
 8006958:	4652      	mov	r2, sl
 800695a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f8d3 	bl	8000b0c <__aeabi_dcmplt>
 8006966:	2800      	cmp	r0, #0
 8006968:	f040 8289 	bne.w	8006e7e <_dtoa_r+0x976>
 800696c:	ec5b ab19 	vmov	sl, fp, d9
 8006970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006972:	2b00      	cmp	r3, #0
 8006974:	f2c0 8148 	blt.w	8006c08 <_dtoa_r+0x700>
 8006978:	9a00      	ldr	r2, [sp, #0]
 800697a:	2a0e      	cmp	r2, #14
 800697c:	f300 8144 	bgt.w	8006c08 <_dtoa_r+0x700>
 8006980:	4b67      	ldr	r3, [pc, #412]	; (8006b20 <_dtoa_r+0x618>)
 8006982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006986:	e9d3 8900 	ldrd	r8, r9, [r3]
 800698a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	f280 80d5 	bge.w	8006b3c <_dtoa_r+0x634>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f300 80d1 	bgt.w	8006b3c <_dtoa_r+0x634>
 800699a:	f040 826f 	bne.w	8006e7c <_dtoa_r+0x974>
 800699e:	4b65      	ldr	r3, [pc, #404]	; (8006b34 <_dtoa_r+0x62c>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	4640      	mov	r0, r8
 80069a4:	4649      	mov	r1, r9
 80069a6:	f7f9 fe3f 	bl	8000628 <__aeabi_dmul>
 80069aa:	4652      	mov	r2, sl
 80069ac:	465b      	mov	r3, fp
 80069ae:	f7fa f8c1 	bl	8000b34 <__aeabi_dcmpge>
 80069b2:	9e03      	ldr	r6, [sp, #12]
 80069b4:	4637      	mov	r7, r6
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f040 8245 	bne.w	8006e46 <_dtoa_r+0x93e>
 80069bc:	9d01      	ldr	r5, [sp, #4]
 80069be:	2331      	movs	r3, #49	; 0x31
 80069c0:	f805 3b01 	strb.w	r3, [r5], #1
 80069c4:	9b00      	ldr	r3, [sp, #0]
 80069c6:	3301      	adds	r3, #1
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	e240      	b.n	8006e4e <_dtoa_r+0x946>
 80069cc:	07f2      	lsls	r2, r6, #31
 80069ce:	d505      	bpl.n	80069dc <_dtoa_r+0x4d4>
 80069d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d4:	f7f9 fe28 	bl	8000628 <__aeabi_dmul>
 80069d8:	3501      	adds	r5, #1
 80069da:	2301      	movs	r3, #1
 80069dc:	1076      	asrs	r6, r6, #1
 80069de:	3708      	adds	r7, #8
 80069e0:	e777      	b.n	80068d2 <_dtoa_r+0x3ca>
 80069e2:	2502      	movs	r5, #2
 80069e4:	e779      	b.n	80068da <_dtoa_r+0x3d2>
 80069e6:	9f00      	ldr	r7, [sp, #0]
 80069e8:	9e03      	ldr	r6, [sp, #12]
 80069ea:	e794      	b.n	8006916 <_dtoa_r+0x40e>
 80069ec:	9901      	ldr	r1, [sp, #4]
 80069ee:	4b4c      	ldr	r3, [pc, #304]	; (8006b20 <_dtoa_r+0x618>)
 80069f0:	4431      	add	r1, r6
 80069f2:	910d      	str	r1, [sp, #52]	; 0x34
 80069f4:	9908      	ldr	r1, [sp, #32]
 80069f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069fe:	2900      	cmp	r1, #0
 8006a00:	d043      	beq.n	8006a8a <_dtoa_r+0x582>
 8006a02:	494d      	ldr	r1, [pc, #308]	; (8006b38 <_dtoa_r+0x630>)
 8006a04:	2000      	movs	r0, #0
 8006a06:	f7f9 ff39 	bl	800087c <__aeabi_ddiv>
 8006a0a:	4652      	mov	r2, sl
 8006a0c:	465b      	mov	r3, fp
 8006a0e:	f7f9 fc53 	bl	80002b8 <__aeabi_dsub>
 8006a12:	9d01      	ldr	r5, [sp, #4]
 8006a14:	4682      	mov	sl, r0
 8006a16:	468b      	mov	fp, r1
 8006a18:	4649      	mov	r1, r9
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	f7fa f8b4 	bl	8000b88 <__aeabi_d2iz>
 8006a20:	4606      	mov	r6, r0
 8006a22:	f7f9 fd97 	bl	8000554 <__aeabi_i2d>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fc43 	bl	80002b8 <__aeabi_dsub>
 8006a32:	3630      	adds	r6, #48	; 0x30
 8006a34:	f805 6b01 	strb.w	r6, [r5], #1
 8006a38:	4652      	mov	r2, sl
 8006a3a:	465b      	mov	r3, fp
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4689      	mov	r9, r1
 8006a40:	f7fa f864 	bl	8000b0c <__aeabi_dcmplt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d163      	bne.n	8006b10 <_dtoa_r+0x608>
 8006a48:	4642      	mov	r2, r8
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	4936      	ldr	r1, [pc, #216]	; (8006b28 <_dtoa_r+0x620>)
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f7f9 fc32 	bl	80002b8 <__aeabi_dsub>
 8006a54:	4652      	mov	r2, sl
 8006a56:	465b      	mov	r3, fp
 8006a58:	f7fa f858 	bl	8000b0c <__aeabi_dcmplt>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	f040 80b5 	bne.w	8006bcc <_dtoa_r+0x6c4>
 8006a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a64:	429d      	cmp	r5, r3
 8006a66:	d081      	beq.n	800696c <_dtoa_r+0x464>
 8006a68:	4b30      	ldr	r3, [pc, #192]	; (8006b2c <_dtoa_r+0x624>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	4659      	mov	r1, fp
 8006a70:	f7f9 fdda 	bl	8000628 <__aeabi_dmul>
 8006a74:	4b2d      	ldr	r3, [pc, #180]	; (8006b2c <_dtoa_r+0x624>)
 8006a76:	4682      	mov	sl, r0
 8006a78:	468b      	mov	fp, r1
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f7f9 fdd2 	bl	8000628 <__aeabi_dmul>
 8006a84:	4680      	mov	r8, r0
 8006a86:	4689      	mov	r9, r1
 8006a88:	e7c6      	b.n	8006a18 <_dtoa_r+0x510>
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	f7f9 fdcb 	bl	8000628 <__aeabi_dmul>
 8006a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a94:	9d01      	ldr	r5, [sp, #4]
 8006a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a98:	4682      	mov	sl, r0
 8006a9a:	468b      	mov	fp, r1
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f7fa f872 	bl	8000b88 <__aeabi_d2iz>
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	f7f9 fd55 	bl	8000554 <__aeabi_i2d>
 8006aaa:	3630      	adds	r6, #48	; 0x30
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4640      	mov	r0, r8
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	f7f9 fc00 	bl	80002b8 <__aeabi_dsub>
 8006ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8006abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	4689      	mov	r9, r1
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	d124      	bne.n	8006b14 <_dtoa_r+0x60c>
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <_dtoa_r+0x630>)
 8006acc:	4650      	mov	r0, sl
 8006ace:	4659      	mov	r1, fp
 8006ad0:	f7f9 fbf4 	bl	80002bc <__adddf3>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4640      	mov	r0, r8
 8006ada:	4649      	mov	r1, r9
 8006adc:	f7fa f834 	bl	8000b48 <__aeabi_dcmpgt>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d173      	bne.n	8006bcc <_dtoa_r+0x6c4>
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	4913      	ldr	r1, [pc, #76]	; (8006b38 <_dtoa_r+0x630>)
 8006aea:	2000      	movs	r0, #0
 8006aec:	f7f9 fbe4 	bl	80002b8 <__aeabi_dsub>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4640      	mov	r0, r8
 8006af6:	4649      	mov	r1, r9
 8006af8:	f7fa f808 	bl	8000b0c <__aeabi_dcmplt>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	f43f af35 	beq.w	800696c <_dtoa_r+0x464>
 8006b02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b04:	1e6b      	subs	r3, r5, #1
 8006b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b0c:	2b30      	cmp	r3, #48	; 0x30
 8006b0e:	d0f8      	beq.n	8006b02 <_dtoa_r+0x5fa>
 8006b10:	9700      	str	r7, [sp, #0]
 8006b12:	e049      	b.n	8006ba8 <_dtoa_r+0x6a0>
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <_dtoa_r+0x624>)
 8006b16:	f7f9 fd87 	bl	8000628 <__aeabi_dmul>
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	4689      	mov	r9, r1
 8006b1e:	e7bd      	b.n	8006a9c <_dtoa_r+0x594>
 8006b20:	08009ee8 	.word	0x08009ee8
 8006b24:	08009ec0 	.word	0x08009ec0
 8006b28:	3ff00000 	.word	0x3ff00000
 8006b2c:	40240000 	.word	0x40240000
 8006b30:	401c0000 	.word	0x401c0000
 8006b34:	40140000 	.word	0x40140000
 8006b38:	3fe00000 	.word	0x3fe00000
 8006b3c:	9d01      	ldr	r5, [sp, #4]
 8006b3e:	4656      	mov	r6, sl
 8006b40:	465f      	mov	r7, fp
 8006b42:	4642      	mov	r2, r8
 8006b44:	464b      	mov	r3, r9
 8006b46:	4630      	mov	r0, r6
 8006b48:	4639      	mov	r1, r7
 8006b4a:	f7f9 fe97 	bl	800087c <__aeabi_ddiv>
 8006b4e:	f7fa f81b 	bl	8000b88 <__aeabi_d2iz>
 8006b52:	4682      	mov	sl, r0
 8006b54:	f7f9 fcfe 	bl	8000554 <__aeabi_i2d>
 8006b58:	4642      	mov	r2, r8
 8006b5a:	464b      	mov	r3, r9
 8006b5c:	f7f9 fd64 	bl	8000628 <__aeabi_dmul>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4630      	mov	r0, r6
 8006b66:	4639      	mov	r1, r7
 8006b68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b6c:	f7f9 fba4 	bl	80002b8 <__aeabi_dsub>
 8006b70:	f805 6b01 	strb.w	r6, [r5], #1
 8006b74:	9e01      	ldr	r6, [sp, #4]
 8006b76:	9f03      	ldr	r7, [sp, #12]
 8006b78:	1bae      	subs	r6, r5, r6
 8006b7a:	42b7      	cmp	r7, r6
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	d135      	bne.n	8006bee <_dtoa_r+0x6e6>
 8006b82:	f7f9 fb9b 	bl	80002bc <__adddf3>
 8006b86:	4642      	mov	r2, r8
 8006b88:	464b      	mov	r3, r9
 8006b8a:	4606      	mov	r6, r0
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	f7f9 ffdb 	bl	8000b48 <__aeabi_dcmpgt>
 8006b92:	b9d0      	cbnz	r0, 8006bca <_dtoa_r+0x6c2>
 8006b94:	4642      	mov	r2, r8
 8006b96:	464b      	mov	r3, r9
 8006b98:	4630      	mov	r0, r6
 8006b9a:	4639      	mov	r1, r7
 8006b9c:	f7f9 ffac 	bl	8000af8 <__aeabi_dcmpeq>
 8006ba0:	b110      	cbz	r0, 8006ba8 <_dtoa_r+0x6a0>
 8006ba2:	f01a 0f01 	tst.w	sl, #1
 8006ba6:	d110      	bne.n	8006bca <_dtoa_r+0x6c2>
 8006ba8:	4620      	mov	r0, r4
 8006baa:	ee18 1a10 	vmov	r1, s16
 8006bae:	f000 fe87 	bl	80078c0 <_Bfree>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9800      	ldr	r0, [sp, #0]
 8006bb6:	702b      	strb	r3, [r5, #0]
 8006bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bba:	3001      	adds	r0, #1
 8006bbc:	6018      	str	r0, [r3, #0]
 8006bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f43f acf1 	beq.w	80065a8 <_dtoa_r+0xa0>
 8006bc6:	601d      	str	r5, [r3, #0]
 8006bc8:	e4ee      	b.n	80065a8 <_dtoa_r+0xa0>
 8006bca:	9f00      	ldr	r7, [sp, #0]
 8006bcc:	462b      	mov	r3, r5
 8006bce:	461d      	mov	r5, r3
 8006bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bd4:	2a39      	cmp	r2, #57	; 0x39
 8006bd6:	d106      	bne.n	8006be6 <_dtoa_r+0x6de>
 8006bd8:	9a01      	ldr	r2, [sp, #4]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d1f7      	bne.n	8006bce <_dtoa_r+0x6c6>
 8006bde:	9901      	ldr	r1, [sp, #4]
 8006be0:	2230      	movs	r2, #48	; 0x30
 8006be2:	3701      	adds	r7, #1
 8006be4:	700a      	strb	r2, [r1, #0]
 8006be6:	781a      	ldrb	r2, [r3, #0]
 8006be8:	3201      	adds	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e790      	b.n	8006b10 <_dtoa_r+0x608>
 8006bee:	4ba6      	ldr	r3, [pc, #664]	; (8006e88 <_dtoa_r+0x980>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f7f9 fd19 	bl	8000628 <__aeabi_dmul>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	f7f9 ff7b 	bl	8000af8 <__aeabi_dcmpeq>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d09d      	beq.n	8006b42 <_dtoa_r+0x63a>
 8006c06:	e7cf      	b.n	8006ba8 <_dtoa_r+0x6a0>
 8006c08:	9a08      	ldr	r2, [sp, #32]
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	f000 80d7 	beq.w	8006dbe <_dtoa_r+0x8b6>
 8006c10:	9a06      	ldr	r2, [sp, #24]
 8006c12:	2a01      	cmp	r2, #1
 8006c14:	f300 80ba 	bgt.w	8006d8c <_dtoa_r+0x884>
 8006c18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c1a:	2a00      	cmp	r2, #0
 8006c1c:	f000 80b2 	beq.w	8006d84 <_dtoa_r+0x87c>
 8006c20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c24:	9e07      	ldr	r6, [sp, #28]
 8006c26:	9d04      	ldr	r5, [sp, #16]
 8006c28:	9a04      	ldr	r2, [sp, #16]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	9204      	str	r2, [sp, #16]
 8006c2e:	9a05      	ldr	r2, [sp, #20]
 8006c30:	2101      	movs	r1, #1
 8006c32:	441a      	add	r2, r3
 8006c34:	4620      	mov	r0, r4
 8006c36:	9205      	str	r2, [sp, #20]
 8006c38:	f000 ff44 	bl	8007ac4 <__i2b>
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	dd0c      	ble.n	8006c5c <_dtoa_r+0x754>
 8006c42:	9b05      	ldr	r3, [sp, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dd09      	ble.n	8006c5c <_dtoa_r+0x754>
 8006c48:	42ab      	cmp	r3, r5
 8006c4a:	9a04      	ldr	r2, [sp, #16]
 8006c4c:	bfa8      	it	ge
 8006c4e:	462b      	movge	r3, r5
 8006c50:	1ad2      	subs	r2, r2, r3
 8006c52:	9204      	str	r2, [sp, #16]
 8006c54:	9a05      	ldr	r2, [sp, #20]
 8006c56:	1aed      	subs	r5, r5, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	9305      	str	r3, [sp, #20]
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	b31b      	cbz	r3, 8006ca8 <_dtoa_r+0x7a0>
 8006c60:	9b08      	ldr	r3, [sp, #32]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80af 	beq.w	8006dc6 <_dtoa_r+0x8be>
 8006c68:	2e00      	cmp	r6, #0
 8006c6a:	dd13      	ble.n	8006c94 <_dtoa_r+0x78c>
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	4632      	mov	r2, r6
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 ffe7 	bl	8007c44 <__pow5mult>
 8006c76:	ee18 2a10 	vmov	r2, s16
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 ff36 	bl	8007af0 <__multiply>
 8006c84:	ee18 1a10 	vmov	r1, s16
 8006c88:	4680      	mov	r8, r0
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fe18 	bl	80078c0 <_Bfree>
 8006c90:	ee08 8a10 	vmov	s16, r8
 8006c94:	9b07      	ldr	r3, [sp, #28]
 8006c96:	1b9a      	subs	r2, r3, r6
 8006c98:	d006      	beq.n	8006ca8 <_dtoa_r+0x7a0>
 8006c9a:	ee18 1a10 	vmov	r1, s16
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f000 ffd0 	bl	8007c44 <__pow5mult>
 8006ca4:	ee08 0a10 	vmov	s16, r0
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 ff0a 	bl	8007ac4 <__i2b>
 8006cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	f340 8088 	ble.w	8006dca <_dtoa_r+0x8c2>
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4601      	mov	r1, r0
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f000 ffc0 	bl	8007c44 <__pow5mult>
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	4606      	mov	r6, r0
 8006cca:	f340 8081 	ble.w	8006dd0 <_dtoa_r+0x8c8>
 8006cce:	f04f 0800 	mov.w	r8, #0
 8006cd2:	6933      	ldr	r3, [r6, #16]
 8006cd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cd8:	6918      	ldr	r0, [r3, #16]
 8006cda:	f000 fea3 	bl	8007a24 <__hi0bits>
 8006cde:	f1c0 0020 	rsb	r0, r0, #32
 8006ce2:	9b05      	ldr	r3, [sp, #20]
 8006ce4:	4418      	add	r0, r3
 8006ce6:	f010 001f 	ands.w	r0, r0, #31
 8006cea:	f000 8092 	beq.w	8006e12 <_dtoa_r+0x90a>
 8006cee:	f1c0 0320 	rsb	r3, r0, #32
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	f340 808a 	ble.w	8006e0c <_dtoa_r+0x904>
 8006cf8:	f1c0 001c 	rsb	r0, r0, #28
 8006cfc:	9b04      	ldr	r3, [sp, #16]
 8006cfe:	4403      	add	r3, r0
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	9b05      	ldr	r3, [sp, #20]
 8006d04:	4403      	add	r3, r0
 8006d06:	4405      	add	r5, r0
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	dd07      	ble.n	8006d20 <_dtoa_r+0x818>
 8006d10:	ee18 1a10 	vmov	r1, s16
 8006d14:	461a      	mov	r2, r3
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 ffee 	bl	8007cf8 <__lshift>
 8006d1c:	ee08 0a10 	vmov	s16, r0
 8006d20:	9b05      	ldr	r3, [sp, #20]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dd05      	ble.n	8006d32 <_dtoa_r+0x82a>
 8006d26:	4631      	mov	r1, r6
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	f000 ffe4 	bl	8007cf8 <__lshift>
 8006d30:	4606      	mov	r6, r0
 8006d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d06e      	beq.n	8006e16 <_dtoa_r+0x90e>
 8006d38:	ee18 0a10 	vmov	r0, s16
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	f001 f84b 	bl	8007dd8 <__mcmp>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	da67      	bge.n	8006e16 <_dtoa_r+0x90e>
 8006d46:	9b00      	ldr	r3, [sp, #0]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	ee18 1a10 	vmov	r1, s16
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	220a      	movs	r2, #10
 8006d52:	2300      	movs	r3, #0
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 fdd5 	bl	8007904 <__multadd>
 8006d5a:	9b08      	ldr	r3, [sp, #32]
 8006d5c:	ee08 0a10 	vmov	s16, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 81b1 	beq.w	80070c8 <_dtoa_r+0xbc0>
 8006d66:	2300      	movs	r3, #0
 8006d68:	4639      	mov	r1, r7
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 fdc9 	bl	8007904 <__multadd>
 8006d72:	9b02      	ldr	r3, [sp, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	4607      	mov	r7, r0
 8006d78:	f300 808e 	bgt.w	8006e98 <_dtoa_r+0x990>
 8006d7c:	9b06      	ldr	r3, [sp, #24]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	dc51      	bgt.n	8006e26 <_dtoa_r+0x91e>
 8006d82:	e089      	b.n	8006e98 <_dtoa_r+0x990>
 8006d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d8a:	e74b      	b.n	8006c24 <_dtoa_r+0x71c>
 8006d8c:	9b03      	ldr	r3, [sp, #12]
 8006d8e:	1e5e      	subs	r6, r3, #1
 8006d90:	9b07      	ldr	r3, [sp, #28]
 8006d92:	42b3      	cmp	r3, r6
 8006d94:	bfbf      	itttt	lt
 8006d96:	9b07      	ldrlt	r3, [sp, #28]
 8006d98:	9607      	strlt	r6, [sp, #28]
 8006d9a:	1af2      	sublt	r2, r6, r3
 8006d9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d9e:	bfb6      	itet	lt
 8006da0:	189b      	addlt	r3, r3, r2
 8006da2:	1b9e      	subge	r6, r3, r6
 8006da4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006da6:	9b03      	ldr	r3, [sp, #12]
 8006da8:	bfb8      	it	lt
 8006daa:	2600      	movlt	r6, #0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bfb7      	itett	lt
 8006db0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006db4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006db8:	1a9d      	sublt	r5, r3, r2
 8006dba:	2300      	movlt	r3, #0
 8006dbc:	e734      	b.n	8006c28 <_dtoa_r+0x720>
 8006dbe:	9e07      	ldr	r6, [sp, #28]
 8006dc0:	9d04      	ldr	r5, [sp, #16]
 8006dc2:	9f08      	ldr	r7, [sp, #32]
 8006dc4:	e73b      	b.n	8006c3e <_dtoa_r+0x736>
 8006dc6:	9a07      	ldr	r2, [sp, #28]
 8006dc8:	e767      	b.n	8006c9a <_dtoa_r+0x792>
 8006dca:	9b06      	ldr	r3, [sp, #24]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	dc18      	bgt.n	8006e02 <_dtoa_r+0x8fa>
 8006dd0:	f1ba 0f00 	cmp.w	sl, #0
 8006dd4:	d115      	bne.n	8006e02 <_dtoa_r+0x8fa>
 8006dd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dda:	b993      	cbnz	r3, 8006e02 <_dtoa_r+0x8fa>
 8006ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006de0:	0d1b      	lsrs	r3, r3, #20
 8006de2:	051b      	lsls	r3, r3, #20
 8006de4:	b183      	cbz	r3, 8006e08 <_dtoa_r+0x900>
 8006de6:	9b04      	ldr	r3, [sp, #16]
 8006de8:	3301      	adds	r3, #1
 8006dea:	9304      	str	r3, [sp, #16]
 8006dec:	9b05      	ldr	r3, [sp, #20]
 8006dee:	3301      	adds	r3, #1
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	f04f 0801 	mov.w	r8, #1
 8006df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f47f af6a 	bne.w	8006cd2 <_dtoa_r+0x7ca>
 8006dfe:	2001      	movs	r0, #1
 8006e00:	e76f      	b.n	8006ce2 <_dtoa_r+0x7da>
 8006e02:	f04f 0800 	mov.w	r8, #0
 8006e06:	e7f6      	b.n	8006df6 <_dtoa_r+0x8ee>
 8006e08:	4698      	mov	r8, r3
 8006e0a:	e7f4      	b.n	8006df6 <_dtoa_r+0x8ee>
 8006e0c:	f43f af7d 	beq.w	8006d0a <_dtoa_r+0x802>
 8006e10:	4618      	mov	r0, r3
 8006e12:	301c      	adds	r0, #28
 8006e14:	e772      	b.n	8006cfc <_dtoa_r+0x7f4>
 8006e16:	9b03      	ldr	r3, [sp, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dc37      	bgt.n	8006e8c <_dtoa_r+0x984>
 8006e1c:	9b06      	ldr	r3, [sp, #24]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	dd34      	ble.n	8006e8c <_dtoa_r+0x984>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	9b02      	ldr	r3, [sp, #8]
 8006e28:	b96b      	cbnz	r3, 8006e46 <_dtoa_r+0x93e>
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	2205      	movs	r2, #5
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 fd68 	bl	8007904 <__multadd>
 8006e34:	4601      	mov	r1, r0
 8006e36:	4606      	mov	r6, r0
 8006e38:	ee18 0a10 	vmov	r0, s16
 8006e3c:	f000 ffcc 	bl	8007dd8 <__mcmp>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	f73f adbb 	bgt.w	80069bc <_dtoa_r+0x4b4>
 8006e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e48:	9d01      	ldr	r5, [sp, #4]
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	f04f 0800 	mov.w	r8, #0
 8006e52:	4631      	mov	r1, r6
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 fd33 	bl	80078c0 <_Bfree>
 8006e5a:	2f00      	cmp	r7, #0
 8006e5c:	f43f aea4 	beq.w	8006ba8 <_dtoa_r+0x6a0>
 8006e60:	f1b8 0f00 	cmp.w	r8, #0
 8006e64:	d005      	beq.n	8006e72 <_dtoa_r+0x96a>
 8006e66:	45b8      	cmp	r8, r7
 8006e68:	d003      	beq.n	8006e72 <_dtoa_r+0x96a>
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f000 fd27 	bl	80078c0 <_Bfree>
 8006e72:	4639      	mov	r1, r7
 8006e74:	4620      	mov	r0, r4
 8006e76:	f000 fd23 	bl	80078c0 <_Bfree>
 8006e7a:	e695      	b.n	8006ba8 <_dtoa_r+0x6a0>
 8006e7c:	2600      	movs	r6, #0
 8006e7e:	4637      	mov	r7, r6
 8006e80:	e7e1      	b.n	8006e46 <_dtoa_r+0x93e>
 8006e82:	9700      	str	r7, [sp, #0]
 8006e84:	4637      	mov	r7, r6
 8006e86:	e599      	b.n	80069bc <_dtoa_r+0x4b4>
 8006e88:	40240000 	.word	0x40240000
 8006e8c:	9b08      	ldr	r3, [sp, #32]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80ca 	beq.w	8007028 <_dtoa_r+0xb20>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	9302      	str	r3, [sp, #8]
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	dd05      	ble.n	8006ea8 <_dtoa_r+0x9a0>
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	462a      	mov	r2, r5
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 ff29 	bl	8007cf8 <__lshift>
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	f1b8 0f00 	cmp.w	r8, #0
 8006eac:	d05b      	beq.n	8006f66 <_dtoa_r+0xa5e>
 8006eae:	6879      	ldr	r1, [r7, #4]
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f000 fcc5 	bl	8007840 <_Balloc>
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	b928      	cbnz	r0, 8006ec6 <_dtoa_r+0x9be>
 8006eba:	4b87      	ldr	r3, [pc, #540]	; (80070d8 <_dtoa_r+0xbd0>)
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ec2:	f7ff bb3b 	b.w	800653c <_dtoa_r+0x34>
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	3202      	adds	r2, #2
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	f107 010c 	add.w	r1, r7, #12
 8006ed0:	300c      	adds	r0, #12
 8006ed2:	f000 fca7 	bl	8007824 <memcpy>
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 ff0c 	bl	8007cf8 <__lshift>
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	f103 0901 	add.w	r9, r3, #1
 8006ee6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	9305      	str	r3, [sp, #20]
 8006eee:	f00a 0301 	and.w	r3, sl, #1
 8006ef2:	46b8      	mov	r8, r7
 8006ef4:	9304      	str	r3, [sp, #16]
 8006ef6:	4607      	mov	r7, r0
 8006ef8:	4631      	mov	r1, r6
 8006efa:	ee18 0a10 	vmov	r0, s16
 8006efe:	f7ff fa75 	bl	80063ec <quorem>
 8006f02:	4641      	mov	r1, r8
 8006f04:	9002      	str	r0, [sp, #8]
 8006f06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f0a:	ee18 0a10 	vmov	r0, s16
 8006f0e:	f000 ff63 	bl	8007dd8 <__mcmp>
 8006f12:	463a      	mov	r2, r7
 8006f14:	9003      	str	r0, [sp, #12]
 8006f16:	4631      	mov	r1, r6
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 ff79 	bl	8007e10 <__mdiff>
 8006f1e:	68c2      	ldr	r2, [r0, #12]
 8006f20:	f109 3bff 	add.w	fp, r9, #4294967295
 8006f24:	4605      	mov	r5, r0
 8006f26:	bb02      	cbnz	r2, 8006f6a <_dtoa_r+0xa62>
 8006f28:	4601      	mov	r1, r0
 8006f2a:	ee18 0a10 	vmov	r0, s16
 8006f2e:	f000 ff53 	bl	8007dd8 <__mcmp>
 8006f32:	4602      	mov	r2, r0
 8006f34:	4629      	mov	r1, r5
 8006f36:	4620      	mov	r0, r4
 8006f38:	9207      	str	r2, [sp, #28]
 8006f3a:	f000 fcc1 	bl	80078c0 <_Bfree>
 8006f3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f42:	ea43 0102 	orr.w	r1, r3, r2
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	464d      	mov	r5, r9
 8006f4c:	d10f      	bne.n	8006f6e <_dtoa_r+0xa66>
 8006f4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f52:	d02a      	beq.n	8006faa <_dtoa_r+0xaa2>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dd02      	ble.n	8006f60 <_dtoa_r+0xa58>
 8006f5a:	9b02      	ldr	r3, [sp, #8]
 8006f5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f60:	f88b a000 	strb.w	sl, [fp]
 8006f64:	e775      	b.n	8006e52 <_dtoa_r+0x94a>
 8006f66:	4638      	mov	r0, r7
 8006f68:	e7ba      	b.n	8006ee0 <_dtoa_r+0x9d8>
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	e7e2      	b.n	8006f34 <_dtoa_r+0xa2c>
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	db04      	blt.n	8006f7e <_dtoa_r+0xa76>
 8006f74:	9906      	ldr	r1, [sp, #24]
 8006f76:	430b      	orrs	r3, r1
 8006f78:	9904      	ldr	r1, [sp, #16]
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	d122      	bne.n	8006fc4 <_dtoa_r+0xabc>
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	ddee      	ble.n	8006f60 <_dtoa_r+0xa58>
 8006f82:	ee18 1a10 	vmov	r1, s16
 8006f86:	2201      	movs	r2, #1
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f000 feb5 	bl	8007cf8 <__lshift>
 8006f8e:	4631      	mov	r1, r6
 8006f90:	ee08 0a10 	vmov	s16, r0
 8006f94:	f000 ff20 	bl	8007dd8 <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	dc03      	bgt.n	8006fa4 <_dtoa_r+0xa9c>
 8006f9c:	d1e0      	bne.n	8006f60 <_dtoa_r+0xa58>
 8006f9e:	f01a 0f01 	tst.w	sl, #1
 8006fa2:	d0dd      	beq.n	8006f60 <_dtoa_r+0xa58>
 8006fa4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fa8:	d1d7      	bne.n	8006f5a <_dtoa_r+0xa52>
 8006faa:	2339      	movs	r3, #57	; 0x39
 8006fac:	f88b 3000 	strb.w	r3, [fp]
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fba:	2a39      	cmp	r2, #57	; 0x39
 8006fbc:	d071      	beq.n	80070a2 <_dtoa_r+0xb9a>
 8006fbe:	3201      	adds	r2, #1
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	e746      	b.n	8006e52 <_dtoa_r+0x94a>
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	dd07      	ble.n	8006fd8 <_dtoa_r+0xad0>
 8006fc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fcc:	d0ed      	beq.n	8006faa <_dtoa_r+0xaa2>
 8006fce:	f10a 0301 	add.w	r3, sl, #1
 8006fd2:	f88b 3000 	strb.w	r3, [fp]
 8006fd6:	e73c      	b.n	8006e52 <_dtoa_r+0x94a>
 8006fd8:	9b05      	ldr	r3, [sp, #20]
 8006fda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006fde:	4599      	cmp	r9, r3
 8006fe0:	d047      	beq.n	8007072 <_dtoa_r+0xb6a>
 8006fe2:	ee18 1a10 	vmov	r1, s16
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	220a      	movs	r2, #10
 8006fea:	4620      	mov	r0, r4
 8006fec:	f000 fc8a 	bl	8007904 <__multadd>
 8006ff0:	45b8      	cmp	r8, r7
 8006ff2:	ee08 0a10 	vmov	s16, r0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	f04f 020a 	mov.w	r2, #10
 8006ffe:	4641      	mov	r1, r8
 8007000:	4620      	mov	r0, r4
 8007002:	d106      	bne.n	8007012 <_dtoa_r+0xb0a>
 8007004:	f000 fc7e 	bl	8007904 <__multadd>
 8007008:	4680      	mov	r8, r0
 800700a:	4607      	mov	r7, r0
 800700c:	f109 0901 	add.w	r9, r9, #1
 8007010:	e772      	b.n	8006ef8 <_dtoa_r+0x9f0>
 8007012:	f000 fc77 	bl	8007904 <__multadd>
 8007016:	4639      	mov	r1, r7
 8007018:	4680      	mov	r8, r0
 800701a:	2300      	movs	r3, #0
 800701c:	220a      	movs	r2, #10
 800701e:	4620      	mov	r0, r4
 8007020:	f000 fc70 	bl	8007904 <__multadd>
 8007024:	4607      	mov	r7, r0
 8007026:	e7f1      	b.n	800700c <_dtoa_r+0xb04>
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	9d01      	ldr	r5, [sp, #4]
 800702e:	ee18 0a10 	vmov	r0, s16
 8007032:	4631      	mov	r1, r6
 8007034:	f7ff f9da 	bl	80063ec <quorem>
 8007038:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800703c:	9b01      	ldr	r3, [sp, #4]
 800703e:	f805 ab01 	strb.w	sl, [r5], #1
 8007042:	1aea      	subs	r2, r5, r3
 8007044:	9b02      	ldr	r3, [sp, #8]
 8007046:	4293      	cmp	r3, r2
 8007048:	dd09      	ble.n	800705e <_dtoa_r+0xb56>
 800704a:	ee18 1a10 	vmov	r1, s16
 800704e:	2300      	movs	r3, #0
 8007050:	220a      	movs	r2, #10
 8007052:	4620      	mov	r0, r4
 8007054:	f000 fc56 	bl	8007904 <__multadd>
 8007058:	ee08 0a10 	vmov	s16, r0
 800705c:	e7e7      	b.n	800702e <_dtoa_r+0xb26>
 800705e:	9b02      	ldr	r3, [sp, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	bfc8      	it	gt
 8007064:	461d      	movgt	r5, r3
 8007066:	9b01      	ldr	r3, [sp, #4]
 8007068:	bfd8      	it	le
 800706a:	2501      	movle	r5, #1
 800706c:	441d      	add	r5, r3
 800706e:	f04f 0800 	mov.w	r8, #0
 8007072:	ee18 1a10 	vmov	r1, s16
 8007076:	2201      	movs	r2, #1
 8007078:	4620      	mov	r0, r4
 800707a:	f000 fe3d 	bl	8007cf8 <__lshift>
 800707e:	4631      	mov	r1, r6
 8007080:	ee08 0a10 	vmov	s16, r0
 8007084:	f000 fea8 	bl	8007dd8 <__mcmp>
 8007088:	2800      	cmp	r0, #0
 800708a:	dc91      	bgt.n	8006fb0 <_dtoa_r+0xaa8>
 800708c:	d102      	bne.n	8007094 <_dtoa_r+0xb8c>
 800708e:	f01a 0f01 	tst.w	sl, #1
 8007092:	d18d      	bne.n	8006fb0 <_dtoa_r+0xaa8>
 8007094:	462b      	mov	r3, r5
 8007096:	461d      	mov	r5, r3
 8007098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800709c:	2a30      	cmp	r2, #48	; 0x30
 800709e:	d0fa      	beq.n	8007096 <_dtoa_r+0xb8e>
 80070a0:	e6d7      	b.n	8006e52 <_dtoa_r+0x94a>
 80070a2:	9a01      	ldr	r2, [sp, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d184      	bne.n	8006fb2 <_dtoa_r+0xaaa>
 80070a8:	9b00      	ldr	r3, [sp, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2331      	movs	r3, #49	; 0x31
 80070b0:	7013      	strb	r3, [r2, #0]
 80070b2:	e6ce      	b.n	8006e52 <_dtoa_r+0x94a>
 80070b4:	4b09      	ldr	r3, [pc, #36]	; (80070dc <_dtoa_r+0xbd4>)
 80070b6:	f7ff ba95 	b.w	80065e4 <_dtoa_r+0xdc>
 80070ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f47f aa6e 	bne.w	800659e <_dtoa_r+0x96>
 80070c2:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <_dtoa_r+0xbd8>)
 80070c4:	f7ff ba8e 	b.w	80065e4 <_dtoa_r+0xdc>
 80070c8:	9b02      	ldr	r3, [sp, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dcae      	bgt.n	800702c <_dtoa_r+0xb24>
 80070ce:	9b06      	ldr	r3, [sp, #24]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	f73f aea8 	bgt.w	8006e26 <_dtoa_r+0x91e>
 80070d6:	e7a9      	b.n	800702c <_dtoa_r+0xb24>
 80070d8:	08009dd8 	.word	0x08009dd8
 80070dc:	08009fd1 	.word	0x08009fd1
 80070e0:	08009d59 	.word	0x08009d59

080070e4 <rshift>:
 80070e4:	6903      	ldr	r3, [r0, #16]
 80070e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80070ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070f2:	f100 0414 	add.w	r4, r0, #20
 80070f6:	dd45      	ble.n	8007184 <rshift+0xa0>
 80070f8:	f011 011f 	ands.w	r1, r1, #31
 80070fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007100:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007104:	d10c      	bne.n	8007120 <rshift+0x3c>
 8007106:	f100 0710 	add.w	r7, r0, #16
 800710a:	4629      	mov	r1, r5
 800710c:	42b1      	cmp	r1, r6
 800710e:	d334      	bcc.n	800717a <rshift+0x96>
 8007110:	1a9b      	subs	r3, r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	1eea      	subs	r2, r5, #3
 8007116:	4296      	cmp	r6, r2
 8007118:	bf38      	it	cc
 800711a:	2300      	movcc	r3, #0
 800711c:	4423      	add	r3, r4
 800711e:	e015      	b.n	800714c <rshift+0x68>
 8007120:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007124:	f1c1 0820 	rsb	r8, r1, #32
 8007128:	40cf      	lsrs	r7, r1
 800712a:	f105 0e04 	add.w	lr, r5, #4
 800712e:	46a1      	mov	r9, r4
 8007130:	4576      	cmp	r6, lr
 8007132:	46f4      	mov	ip, lr
 8007134:	d815      	bhi.n	8007162 <rshift+0x7e>
 8007136:	1a9a      	subs	r2, r3, r2
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	3a04      	subs	r2, #4
 800713c:	3501      	adds	r5, #1
 800713e:	42ae      	cmp	r6, r5
 8007140:	bf38      	it	cc
 8007142:	2200      	movcc	r2, #0
 8007144:	18a3      	adds	r3, r4, r2
 8007146:	50a7      	str	r7, [r4, r2]
 8007148:	b107      	cbz	r7, 800714c <rshift+0x68>
 800714a:	3304      	adds	r3, #4
 800714c:	1b1a      	subs	r2, r3, r4
 800714e:	42a3      	cmp	r3, r4
 8007150:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007154:	bf08      	it	eq
 8007156:	2300      	moveq	r3, #0
 8007158:	6102      	str	r2, [r0, #16]
 800715a:	bf08      	it	eq
 800715c:	6143      	streq	r3, [r0, #20]
 800715e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007162:	f8dc c000 	ldr.w	ip, [ip]
 8007166:	fa0c fc08 	lsl.w	ip, ip, r8
 800716a:	ea4c 0707 	orr.w	r7, ip, r7
 800716e:	f849 7b04 	str.w	r7, [r9], #4
 8007172:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007176:	40cf      	lsrs	r7, r1
 8007178:	e7da      	b.n	8007130 <rshift+0x4c>
 800717a:	f851 cb04 	ldr.w	ip, [r1], #4
 800717e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007182:	e7c3      	b.n	800710c <rshift+0x28>
 8007184:	4623      	mov	r3, r4
 8007186:	e7e1      	b.n	800714c <rshift+0x68>

08007188 <__hexdig_fun>:
 8007188:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800718c:	2b09      	cmp	r3, #9
 800718e:	d802      	bhi.n	8007196 <__hexdig_fun+0xe>
 8007190:	3820      	subs	r0, #32
 8007192:	b2c0      	uxtb	r0, r0
 8007194:	4770      	bx	lr
 8007196:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800719a:	2b05      	cmp	r3, #5
 800719c:	d801      	bhi.n	80071a2 <__hexdig_fun+0x1a>
 800719e:	3847      	subs	r0, #71	; 0x47
 80071a0:	e7f7      	b.n	8007192 <__hexdig_fun+0xa>
 80071a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80071a6:	2b05      	cmp	r3, #5
 80071a8:	d801      	bhi.n	80071ae <__hexdig_fun+0x26>
 80071aa:	3827      	subs	r0, #39	; 0x27
 80071ac:	e7f1      	b.n	8007192 <__hexdig_fun+0xa>
 80071ae:	2000      	movs	r0, #0
 80071b0:	4770      	bx	lr
	...

080071b4 <__gethex>:
 80071b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b8:	ed2d 8b02 	vpush	{d8}
 80071bc:	b089      	sub	sp, #36	; 0x24
 80071be:	ee08 0a10 	vmov	s16, r0
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	4bb4      	ldr	r3, [pc, #720]	; (8007498 <__gethex+0x2e4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	4618      	mov	r0, r3
 80071cc:	468b      	mov	fp, r1
 80071ce:	4690      	mov	r8, r2
 80071d0:	f7f9 f810 	bl	80001f4 <strlen>
 80071d4:	9b01      	ldr	r3, [sp, #4]
 80071d6:	f8db 2000 	ldr.w	r2, [fp]
 80071da:	4403      	add	r3, r0
 80071dc:	4682      	mov	sl, r0
 80071de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80071e2:	9305      	str	r3, [sp, #20]
 80071e4:	1c93      	adds	r3, r2, #2
 80071e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80071ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80071ee:	32fe      	adds	r2, #254	; 0xfe
 80071f0:	18d1      	adds	r1, r2, r3
 80071f2:	461f      	mov	r7, r3
 80071f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071f8:	9100      	str	r1, [sp, #0]
 80071fa:	2830      	cmp	r0, #48	; 0x30
 80071fc:	d0f8      	beq.n	80071f0 <__gethex+0x3c>
 80071fe:	f7ff ffc3 	bl	8007188 <__hexdig_fun>
 8007202:	4604      	mov	r4, r0
 8007204:	2800      	cmp	r0, #0
 8007206:	d13a      	bne.n	800727e <__gethex+0xca>
 8007208:	9901      	ldr	r1, [sp, #4]
 800720a:	4652      	mov	r2, sl
 800720c:	4638      	mov	r0, r7
 800720e:	f001 fdb3 	bl	8008d78 <strncmp>
 8007212:	4605      	mov	r5, r0
 8007214:	2800      	cmp	r0, #0
 8007216:	d168      	bne.n	80072ea <__gethex+0x136>
 8007218:	f817 000a 	ldrb.w	r0, [r7, sl]
 800721c:	eb07 060a 	add.w	r6, r7, sl
 8007220:	f7ff ffb2 	bl	8007188 <__hexdig_fun>
 8007224:	2800      	cmp	r0, #0
 8007226:	d062      	beq.n	80072ee <__gethex+0x13a>
 8007228:	4633      	mov	r3, r6
 800722a:	7818      	ldrb	r0, [r3, #0]
 800722c:	2830      	cmp	r0, #48	; 0x30
 800722e:	461f      	mov	r7, r3
 8007230:	f103 0301 	add.w	r3, r3, #1
 8007234:	d0f9      	beq.n	800722a <__gethex+0x76>
 8007236:	f7ff ffa7 	bl	8007188 <__hexdig_fun>
 800723a:	2301      	movs	r3, #1
 800723c:	fab0 f480 	clz	r4, r0
 8007240:	0964      	lsrs	r4, r4, #5
 8007242:	4635      	mov	r5, r6
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	463a      	mov	r2, r7
 8007248:	4616      	mov	r6, r2
 800724a:	3201      	adds	r2, #1
 800724c:	7830      	ldrb	r0, [r6, #0]
 800724e:	f7ff ff9b 	bl	8007188 <__hexdig_fun>
 8007252:	2800      	cmp	r0, #0
 8007254:	d1f8      	bne.n	8007248 <__gethex+0x94>
 8007256:	9901      	ldr	r1, [sp, #4]
 8007258:	4652      	mov	r2, sl
 800725a:	4630      	mov	r0, r6
 800725c:	f001 fd8c 	bl	8008d78 <strncmp>
 8007260:	b980      	cbnz	r0, 8007284 <__gethex+0xd0>
 8007262:	b94d      	cbnz	r5, 8007278 <__gethex+0xc4>
 8007264:	eb06 050a 	add.w	r5, r6, sl
 8007268:	462a      	mov	r2, r5
 800726a:	4616      	mov	r6, r2
 800726c:	3201      	adds	r2, #1
 800726e:	7830      	ldrb	r0, [r6, #0]
 8007270:	f7ff ff8a 	bl	8007188 <__hexdig_fun>
 8007274:	2800      	cmp	r0, #0
 8007276:	d1f8      	bne.n	800726a <__gethex+0xb6>
 8007278:	1bad      	subs	r5, r5, r6
 800727a:	00ad      	lsls	r5, r5, #2
 800727c:	e004      	b.n	8007288 <__gethex+0xd4>
 800727e:	2400      	movs	r4, #0
 8007280:	4625      	mov	r5, r4
 8007282:	e7e0      	b.n	8007246 <__gethex+0x92>
 8007284:	2d00      	cmp	r5, #0
 8007286:	d1f7      	bne.n	8007278 <__gethex+0xc4>
 8007288:	7833      	ldrb	r3, [r6, #0]
 800728a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800728e:	2b50      	cmp	r3, #80	; 0x50
 8007290:	d13b      	bne.n	800730a <__gethex+0x156>
 8007292:	7873      	ldrb	r3, [r6, #1]
 8007294:	2b2b      	cmp	r3, #43	; 0x2b
 8007296:	d02c      	beq.n	80072f2 <__gethex+0x13e>
 8007298:	2b2d      	cmp	r3, #45	; 0x2d
 800729a:	d02e      	beq.n	80072fa <__gethex+0x146>
 800729c:	1c71      	adds	r1, r6, #1
 800729e:	f04f 0900 	mov.w	r9, #0
 80072a2:	7808      	ldrb	r0, [r1, #0]
 80072a4:	f7ff ff70 	bl	8007188 <__hexdig_fun>
 80072a8:	1e43      	subs	r3, r0, #1
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b18      	cmp	r3, #24
 80072ae:	d82c      	bhi.n	800730a <__gethex+0x156>
 80072b0:	f1a0 0210 	sub.w	r2, r0, #16
 80072b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80072b8:	f7ff ff66 	bl	8007188 <__hexdig_fun>
 80072bc:	1e43      	subs	r3, r0, #1
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b18      	cmp	r3, #24
 80072c2:	d91d      	bls.n	8007300 <__gethex+0x14c>
 80072c4:	f1b9 0f00 	cmp.w	r9, #0
 80072c8:	d000      	beq.n	80072cc <__gethex+0x118>
 80072ca:	4252      	negs	r2, r2
 80072cc:	4415      	add	r5, r2
 80072ce:	f8cb 1000 	str.w	r1, [fp]
 80072d2:	b1e4      	cbz	r4, 800730e <__gethex+0x15a>
 80072d4:	9b00      	ldr	r3, [sp, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bf14      	ite	ne
 80072da:	2700      	movne	r7, #0
 80072dc:	2706      	moveq	r7, #6
 80072de:	4638      	mov	r0, r7
 80072e0:	b009      	add	sp, #36	; 0x24
 80072e2:	ecbd 8b02 	vpop	{d8}
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	463e      	mov	r6, r7
 80072ec:	4625      	mov	r5, r4
 80072ee:	2401      	movs	r4, #1
 80072f0:	e7ca      	b.n	8007288 <__gethex+0xd4>
 80072f2:	f04f 0900 	mov.w	r9, #0
 80072f6:	1cb1      	adds	r1, r6, #2
 80072f8:	e7d3      	b.n	80072a2 <__gethex+0xee>
 80072fa:	f04f 0901 	mov.w	r9, #1
 80072fe:	e7fa      	b.n	80072f6 <__gethex+0x142>
 8007300:	230a      	movs	r3, #10
 8007302:	fb03 0202 	mla	r2, r3, r2, r0
 8007306:	3a10      	subs	r2, #16
 8007308:	e7d4      	b.n	80072b4 <__gethex+0x100>
 800730a:	4631      	mov	r1, r6
 800730c:	e7df      	b.n	80072ce <__gethex+0x11a>
 800730e:	1bf3      	subs	r3, r6, r7
 8007310:	3b01      	subs	r3, #1
 8007312:	4621      	mov	r1, r4
 8007314:	2b07      	cmp	r3, #7
 8007316:	dc0b      	bgt.n	8007330 <__gethex+0x17c>
 8007318:	ee18 0a10 	vmov	r0, s16
 800731c:	f000 fa90 	bl	8007840 <_Balloc>
 8007320:	4604      	mov	r4, r0
 8007322:	b940      	cbnz	r0, 8007336 <__gethex+0x182>
 8007324:	4b5d      	ldr	r3, [pc, #372]	; (800749c <__gethex+0x2e8>)
 8007326:	4602      	mov	r2, r0
 8007328:	21de      	movs	r1, #222	; 0xde
 800732a:	485d      	ldr	r0, [pc, #372]	; (80074a0 <__gethex+0x2ec>)
 800732c:	f001 fdf4 	bl	8008f18 <__assert_func>
 8007330:	3101      	adds	r1, #1
 8007332:	105b      	asrs	r3, r3, #1
 8007334:	e7ee      	b.n	8007314 <__gethex+0x160>
 8007336:	f100 0914 	add.w	r9, r0, #20
 800733a:	f04f 0b00 	mov.w	fp, #0
 800733e:	f1ca 0301 	rsb	r3, sl, #1
 8007342:	f8cd 9008 	str.w	r9, [sp, #8]
 8007346:	f8cd b000 	str.w	fp, [sp]
 800734a:	9306      	str	r3, [sp, #24]
 800734c:	42b7      	cmp	r7, r6
 800734e:	d340      	bcc.n	80073d2 <__gethex+0x21e>
 8007350:	9802      	ldr	r0, [sp, #8]
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	f840 3b04 	str.w	r3, [r0], #4
 8007358:	eba0 0009 	sub.w	r0, r0, r9
 800735c:	1080      	asrs	r0, r0, #2
 800735e:	0146      	lsls	r6, r0, #5
 8007360:	6120      	str	r0, [r4, #16]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fb5e 	bl	8007a24 <__hi0bits>
 8007368:	1a30      	subs	r0, r6, r0
 800736a:	f8d8 6000 	ldr.w	r6, [r8]
 800736e:	42b0      	cmp	r0, r6
 8007370:	dd63      	ble.n	800743a <__gethex+0x286>
 8007372:	1b87      	subs	r7, r0, r6
 8007374:	4639      	mov	r1, r7
 8007376:	4620      	mov	r0, r4
 8007378:	f000 ff02 	bl	8008180 <__any_on>
 800737c:	4682      	mov	sl, r0
 800737e:	b1a8      	cbz	r0, 80073ac <__gethex+0x1f8>
 8007380:	1e7b      	subs	r3, r7, #1
 8007382:	1159      	asrs	r1, r3, #5
 8007384:	f003 021f 	and.w	r2, r3, #31
 8007388:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800738c:	f04f 0a01 	mov.w	sl, #1
 8007390:	fa0a f202 	lsl.w	r2, sl, r2
 8007394:	420a      	tst	r2, r1
 8007396:	d009      	beq.n	80073ac <__gethex+0x1f8>
 8007398:	4553      	cmp	r3, sl
 800739a:	dd05      	ble.n	80073a8 <__gethex+0x1f4>
 800739c:	1eb9      	subs	r1, r7, #2
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 feee 	bl	8008180 <__any_on>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d145      	bne.n	8007434 <__gethex+0x280>
 80073a8:	f04f 0a02 	mov.w	sl, #2
 80073ac:	4639      	mov	r1, r7
 80073ae:	4620      	mov	r0, r4
 80073b0:	f7ff fe98 	bl	80070e4 <rshift>
 80073b4:	443d      	add	r5, r7
 80073b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073ba:	42ab      	cmp	r3, r5
 80073bc:	da4c      	bge.n	8007458 <__gethex+0x2a4>
 80073be:	ee18 0a10 	vmov	r0, s16
 80073c2:	4621      	mov	r1, r4
 80073c4:	f000 fa7c 	bl	80078c0 <_Bfree>
 80073c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073ca:	2300      	movs	r3, #0
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	27a3      	movs	r7, #163	; 0xa3
 80073d0:	e785      	b.n	80072de <__gethex+0x12a>
 80073d2:	1e73      	subs	r3, r6, #1
 80073d4:	9a05      	ldr	r2, [sp, #20]
 80073d6:	9303      	str	r3, [sp, #12]
 80073d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073dc:	4293      	cmp	r3, r2
 80073de:	d019      	beq.n	8007414 <__gethex+0x260>
 80073e0:	f1bb 0f20 	cmp.w	fp, #32
 80073e4:	d107      	bne.n	80073f6 <__gethex+0x242>
 80073e6:	9b02      	ldr	r3, [sp, #8]
 80073e8:	9a00      	ldr	r2, [sp, #0]
 80073ea:	f843 2b04 	str.w	r2, [r3], #4
 80073ee:	9302      	str	r3, [sp, #8]
 80073f0:	2300      	movs	r3, #0
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	469b      	mov	fp, r3
 80073f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80073fa:	f7ff fec5 	bl	8007188 <__hexdig_fun>
 80073fe:	9b00      	ldr	r3, [sp, #0]
 8007400:	f000 000f 	and.w	r0, r0, #15
 8007404:	fa00 f00b 	lsl.w	r0, r0, fp
 8007408:	4303      	orrs	r3, r0
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	f10b 0b04 	add.w	fp, fp, #4
 8007410:	9b03      	ldr	r3, [sp, #12]
 8007412:	e00d      	b.n	8007430 <__gethex+0x27c>
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	9a06      	ldr	r2, [sp, #24]
 8007418:	4413      	add	r3, r2
 800741a:	42bb      	cmp	r3, r7
 800741c:	d3e0      	bcc.n	80073e0 <__gethex+0x22c>
 800741e:	4618      	mov	r0, r3
 8007420:	9901      	ldr	r1, [sp, #4]
 8007422:	9307      	str	r3, [sp, #28]
 8007424:	4652      	mov	r2, sl
 8007426:	f001 fca7 	bl	8008d78 <strncmp>
 800742a:	9b07      	ldr	r3, [sp, #28]
 800742c:	2800      	cmp	r0, #0
 800742e:	d1d7      	bne.n	80073e0 <__gethex+0x22c>
 8007430:	461e      	mov	r6, r3
 8007432:	e78b      	b.n	800734c <__gethex+0x198>
 8007434:	f04f 0a03 	mov.w	sl, #3
 8007438:	e7b8      	b.n	80073ac <__gethex+0x1f8>
 800743a:	da0a      	bge.n	8007452 <__gethex+0x29e>
 800743c:	1a37      	subs	r7, r6, r0
 800743e:	4621      	mov	r1, r4
 8007440:	ee18 0a10 	vmov	r0, s16
 8007444:	463a      	mov	r2, r7
 8007446:	f000 fc57 	bl	8007cf8 <__lshift>
 800744a:	1bed      	subs	r5, r5, r7
 800744c:	4604      	mov	r4, r0
 800744e:	f100 0914 	add.w	r9, r0, #20
 8007452:	f04f 0a00 	mov.w	sl, #0
 8007456:	e7ae      	b.n	80073b6 <__gethex+0x202>
 8007458:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800745c:	42a8      	cmp	r0, r5
 800745e:	dd72      	ble.n	8007546 <__gethex+0x392>
 8007460:	1b45      	subs	r5, r0, r5
 8007462:	42ae      	cmp	r6, r5
 8007464:	dc36      	bgt.n	80074d4 <__gethex+0x320>
 8007466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d02a      	beq.n	80074c4 <__gethex+0x310>
 800746e:	2b03      	cmp	r3, #3
 8007470:	d02c      	beq.n	80074cc <__gethex+0x318>
 8007472:	2b01      	cmp	r3, #1
 8007474:	d11c      	bne.n	80074b0 <__gethex+0x2fc>
 8007476:	42ae      	cmp	r6, r5
 8007478:	d11a      	bne.n	80074b0 <__gethex+0x2fc>
 800747a:	2e01      	cmp	r6, #1
 800747c:	d112      	bne.n	80074a4 <__gethex+0x2f0>
 800747e:	9a04      	ldr	r2, [sp, #16]
 8007480:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	2301      	movs	r3, #1
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	f8c9 3000 	str.w	r3, [r9]
 800748e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007490:	2762      	movs	r7, #98	; 0x62
 8007492:	601c      	str	r4, [r3, #0]
 8007494:	e723      	b.n	80072de <__gethex+0x12a>
 8007496:	bf00      	nop
 8007498:	08009e50 	.word	0x08009e50
 800749c:	08009dd8 	.word	0x08009dd8
 80074a0:	08009de9 	.word	0x08009de9
 80074a4:	1e71      	subs	r1, r6, #1
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 fe6a 	bl	8008180 <__any_on>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d1e6      	bne.n	800747e <__gethex+0x2ca>
 80074b0:	ee18 0a10 	vmov	r0, s16
 80074b4:	4621      	mov	r1, r4
 80074b6:	f000 fa03 	bl	80078c0 <_Bfree>
 80074ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074bc:	2300      	movs	r3, #0
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	2750      	movs	r7, #80	; 0x50
 80074c2:	e70c      	b.n	80072de <__gethex+0x12a>
 80074c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f2      	bne.n	80074b0 <__gethex+0x2fc>
 80074ca:	e7d8      	b.n	800747e <__gethex+0x2ca>
 80074cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1d5      	bne.n	800747e <__gethex+0x2ca>
 80074d2:	e7ed      	b.n	80074b0 <__gethex+0x2fc>
 80074d4:	1e6f      	subs	r7, r5, #1
 80074d6:	f1ba 0f00 	cmp.w	sl, #0
 80074da:	d131      	bne.n	8007540 <__gethex+0x38c>
 80074dc:	b127      	cbz	r7, 80074e8 <__gethex+0x334>
 80074de:	4639      	mov	r1, r7
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fe4d 	bl	8008180 <__any_on>
 80074e6:	4682      	mov	sl, r0
 80074e8:	117b      	asrs	r3, r7, #5
 80074ea:	2101      	movs	r1, #1
 80074ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80074f0:	f007 071f 	and.w	r7, r7, #31
 80074f4:	fa01 f707 	lsl.w	r7, r1, r7
 80074f8:	421f      	tst	r7, r3
 80074fa:	4629      	mov	r1, r5
 80074fc:	4620      	mov	r0, r4
 80074fe:	bf18      	it	ne
 8007500:	f04a 0a02 	orrne.w	sl, sl, #2
 8007504:	1b76      	subs	r6, r6, r5
 8007506:	f7ff fded 	bl	80070e4 <rshift>
 800750a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800750e:	2702      	movs	r7, #2
 8007510:	f1ba 0f00 	cmp.w	sl, #0
 8007514:	d048      	beq.n	80075a8 <__gethex+0x3f4>
 8007516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d015      	beq.n	800754a <__gethex+0x396>
 800751e:	2b03      	cmp	r3, #3
 8007520:	d017      	beq.n	8007552 <__gethex+0x39e>
 8007522:	2b01      	cmp	r3, #1
 8007524:	d109      	bne.n	800753a <__gethex+0x386>
 8007526:	f01a 0f02 	tst.w	sl, #2
 800752a:	d006      	beq.n	800753a <__gethex+0x386>
 800752c:	f8d9 0000 	ldr.w	r0, [r9]
 8007530:	ea4a 0a00 	orr.w	sl, sl, r0
 8007534:	f01a 0f01 	tst.w	sl, #1
 8007538:	d10e      	bne.n	8007558 <__gethex+0x3a4>
 800753a:	f047 0710 	orr.w	r7, r7, #16
 800753e:	e033      	b.n	80075a8 <__gethex+0x3f4>
 8007540:	f04f 0a01 	mov.w	sl, #1
 8007544:	e7d0      	b.n	80074e8 <__gethex+0x334>
 8007546:	2701      	movs	r7, #1
 8007548:	e7e2      	b.n	8007510 <__gethex+0x35c>
 800754a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800754c:	f1c3 0301 	rsb	r3, r3, #1
 8007550:	9315      	str	r3, [sp, #84]	; 0x54
 8007552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0f0      	beq.n	800753a <__gethex+0x386>
 8007558:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800755c:	f104 0314 	add.w	r3, r4, #20
 8007560:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007564:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007568:	f04f 0c00 	mov.w	ip, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007572:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007576:	d01c      	beq.n	80075b2 <__gethex+0x3fe>
 8007578:	3201      	adds	r2, #1
 800757a:	6002      	str	r2, [r0, #0]
 800757c:	2f02      	cmp	r7, #2
 800757e:	f104 0314 	add.w	r3, r4, #20
 8007582:	d13f      	bne.n	8007604 <__gethex+0x450>
 8007584:	f8d8 2000 	ldr.w	r2, [r8]
 8007588:	3a01      	subs	r2, #1
 800758a:	42b2      	cmp	r2, r6
 800758c:	d10a      	bne.n	80075a4 <__gethex+0x3f0>
 800758e:	1171      	asrs	r1, r6, #5
 8007590:	2201      	movs	r2, #1
 8007592:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007596:	f006 061f 	and.w	r6, r6, #31
 800759a:	fa02 f606 	lsl.w	r6, r2, r6
 800759e:	421e      	tst	r6, r3
 80075a0:	bf18      	it	ne
 80075a2:	4617      	movne	r7, r2
 80075a4:	f047 0720 	orr.w	r7, r7, #32
 80075a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075aa:	601c      	str	r4, [r3, #0]
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	601d      	str	r5, [r3, #0]
 80075b0:	e695      	b.n	80072de <__gethex+0x12a>
 80075b2:	4299      	cmp	r1, r3
 80075b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80075b8:	d8d8      	bhi.n	800756c <__gethex+0x3b8>
 80075ba:	68a3      	ldr	r3, [r4, #8]
 80075bc:	459b      	cmp	fp, r3
 80075be:	db19      	blt.n	80075f4 <__gethex+0x440>
 80075c0:	6861      	ldr	r1, [r4, #4]
 80075c2:	ee18 0a10 	vmov	r0, s16
 80075c6:	3101      	adds	r1, #1
 80075c8:	f000 f93a 	bl	8007840 <_Balloc>
 80075cc:	4681      	mov	r9, r0
 80075ce:	b918      	cbnz	r0, 80075d8 <__gethex+0x424>
 80075d0:	4b1a      	ldr	r3, [pc, #104]	; (800763c <__gethex+0x488>)
 80075d2:	4602      	mov	r2, r0
 80075d4:	2184      	movs	r1, #132	; 0x84
 80075d6:	e6a8      	b.n	800732a <__gethex+0x176>
 80075d8:	6922      	ldr	r2, [r4, #16]
 80075da:	3202      	adds	r2, #2
 80075dc:	f104 010c 	add.w	r1, r4, #12
 80075e0:	0092      	lsls	r2, r2, #2
 80075e2:	300c      	adds	r0, #12
 80075e4:	f000 f91e 	bl	8007824 <memcpy>
 80075e8:	4621      	mov	r1, r4
 80075ea:	ee18 0a10 	vmov	r0, s16
 80075ee:	f000 f967 	bl	80078c0 <_Bfree>
 80075f2:	464c      	mov	r4, r9
 80075f4:	6923      	ldr	r3, [r4, #16]
 80075f6:	1c5a      	adds	r2, r3, #1
 80075f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075fc:	6122      	str	r2, [r4, #16]
 80075fe:	2201      	movs	r2, #1
 8007600:	615a      	str	r2, [r3, #20]
 8007602:	e7bb      	b.n	800757c <__gethex+0x3c8>
 8007604:	6922      	ldr	r2, [r4, #16]
 8007606:	455a      	cmp	r2, fp
 8007608:	dd0b      	ble.n	8007622 <__gethex+0x46e>
 800760a:	2101      	movs	r1, #1
 800760c:	4620      	mov	r0, r4
 800760e:	f7ff fd69 	bl	80070e4 <rshift>
 8007612:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007616:	3501      	adds	r5, #1
 8007618:	42ab      	cmp	r3, r5
 800761a:	f6ff aed0 	blt.w	80073be <__gethex+0x20a>
 800761e:	2701      	movs	r7, #1
 8007620:	e7c0      	b.n	80075a4 <__gethex+0x3f0>
 8007622:	f016 061f 	ands.w	r6, r6, #31
 8007626:	d0fa      	beq.n	800761e <__gethex+0x46a>
 8007628:	4453      	add	r3, sl
 800762a:	f1c6 0620 	rsb	r6, r6, #32
 800762e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007632:	f000 f9f7 	bl	8007a24 <__hi0bits>
 8007636:	42b0      	cmp	r0, r6
 8007638:	dbe7      	blt.n	800760a <__gethex+0x456>
 800763a:	e7f0      	b.n	800761e <__gethex+0x46a>
 800763c:	08009dd8 	.word	0x08009dd8

08007640 <L_shift>:
 8007640:	f1c2 0208 	rsb	r2, r2, #8
 8007644:	0092      	lsls	r2, r2, #2
 8007646:	b570      	push	{r4, r5, r6, lr}
 8007648:	f1c2 0620 	rsb	r6, r2, #32
 800764c:	6843      	ldr	r3, [r0, #4]
 800764e:	6804      	ldr	r4, [r0, #0]
 8007650:	fa03 f506 	lsl.w	r5, r3, r6
 8007654:	432c      	orrs	r4, r5
 8007656:	40d3      	lsrs	r3, r2
 8007658:	6004      	str	r4, [r0, #0]
 800765a:	f840 3f04 	str.w	r3, [r0, #4]!
 800765e:	4288      	cmp	r0, r1
 8007660:	d3f4      	bcc.n	800764c <L_shift+0xc>
 8007662:	bd70      	pop	{r4, r5, r6, pc}

08007664 <__match>:
 8007664:	b530      	push	{r4, r5, lr}
 8007666:	6803      	ldr	r3, [r0, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800766e:	b914      	cbnz	r4, 8007676 <__match+0x12>
 8007670:	6003      	str	r3, [r0, #0]
 8007672:	2001      	movs	r0, #1
 8007674:	bd30      	pop	{r4, r5, pc}
 8007676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800767a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800767e:	2d19      	cmp	r5, #25
 8007680:	bf98      	it	ls
 8007682:	3220      	addls	r2, #32
 8007684:	42a2      	cmp	r2, r4
 8007686:	d0f0      	beq.n	800766a <__match+0x6>
 8007688:	2000      	movs	r0, #0
 800768a:	e7f3      	b.n	8007674 <__match+0x10>

0800768c <__hexnan>:
 800768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007690:	680b      	ldr	r3, [r1, #0]
 8007692:	115e      	asrs	r6, r3, #5
 8007694:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007698:	f013 031f 	ands.w	r3, r3, #31
 800769c:	b087      	sub	sp, #28
 800769e:	bf18      	it	ne
 80076a0:	3604      	addne	r6, #4
 80076a2:	2500      	movs	r5, #0
 80076a4:	1f37      	subs	r7, r6, #4
 80076a6:	4690      	mov	r8, r2
 80076a8:	6802      	ldr	r2, [r0, #0]
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	4682      	mov	sl, r0
 80076ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80076b2:	46b9      	mov	r9, r7
 80076b4:	463c      	mov	r4, r7
 80076b6:	9502      	str	r5, [sp, #8]
 80076b8:	46ab      	mov	fp, r5
 80076ba:	7851      	ldrb	r1, [r2, #1]
 80076bc:	1c53      	adds	r3, r2, #1
 80076be:	9303      	str	r3, [sp, #12]
 80076c0:	b341      	cbz	r1, 8007714 <__hexnan+0x88>
 80076c2:	4608      	mov	r0, r1
 80076c4:	9205      	str	r2, [sp, #20]
 80076c6:	9104      	str	r1, [sp, #16]
 80076c8:	f7ff fd5e 	bl	8007188 <__hexdig_fun>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d14f      	bne.n	8007770 <__hexnan+0xe4>
 80076d0:	9904      	ldr	r1, [sp, #16]
 80076d2:	9a05      	ldr	r2, [sp, #20]
 80076d4:	2920      	cmp	r1, #32
 80076d6:	d818      	bhi.n	800770a <__hexnan+0x7e>
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	459b      	cmp	fp, r3
 80076dc:	dd13      	ble.n	8007706 <__hexnan+0x7a>
 80076de:	454c      	cmp	r4, r9
 80076e0:	d206      	bcs.n	80076f0 <__hexnan+0x64>
 80076e2:	2d07      	cmp	r5, #7
 80076e4:	dc04      	bgt.n	80076f0 <__hexnan+0x64>
 80076e6:	462a      	mov	r2, r5
 80076e8:	4649      	mov	r1, r9
 80076ea:	4620      	mov	r0, r4
 80076ec:	f7ff ffa8 	bl	8007640 <L_shift>
 80076f0:	4544      	cmp	r4, r8
 80076f2:	d950      	bls.n	8007796 <__hexnan+0x10a>
 80076f4:	2300      	movs	r3, #0
 80076f6:	f1a4 0904 	sub.w	r9, r4, #4
 80076fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80076fe:	f8cd b008 	str.w	fp, [sp, #8]
 8007702:	464c      	mov	r4, r9
 8007704:	461d      	mov	r5, r3
 8007706:	9a03      	ldr	r2, [sp, #12]
 8007708:	e7d7      	b.n	80076ba <__hexnan+0x2e>
 800770a:	2929      	cmp	r1, #41	; 0x29
 800770c:	d156      	bne.n	80077bc <__hexnan+0x130>
 800770e:	3202      	adds	r2, #2
 8007710:	f8ca 2000 	str.w	r2, [sl]
 8007714:	f1bb 0f00 	cmp.w	fp, #0
 8007718:	d050      	beq.n	80077bc <__hexnan+0x130>
 800771a:	454c      	cmp	r4, r9
 800771c:	d206      	bcs.n	800772c <__hexnan+0xa0>
 800771e:	2d07      	cmp	r5, #7
 8007720:	dc04      	bgt.n	800772c <__hexnan+0xa0>
 8007722:	462a      	mov	r2, r5
 8007724:	4649      	mov	r1, r9
 8007726:	4620      	mov	r0, r4
 8007728:	f7ff ff8a 	bl	8007640 <L_shift>
 800772c:	4544      	cmp	r4, r8
 800772e:	d934      	bls.n	800779a <__hexnan+0x10e>
 8007730:	f1a8 0204 	sub.w	r2, r8, #4
 8007734:	4623      	mov	r3, r4
 8007736:	f853 1b04 	ldr.w	r1, [r3], #4
 800773a:	f842 1f04 	str.w	r1, [r2, #4]!
 800773e:	429f      	cmp	r7, r3
 8007740:	d2f9      	bcs.n	8007736 <__hexnan+0xaa>
 8007742:	1b3b      	subs	r3, r7, r4
 8007744:	f023 0303 	bic.w	r3, r3, #3
 8007748:	3304      	adds	r3, #4
 800774a:	3401      	adds	r4, #1
 800774c:	3e03      	subs	r6, #3
 800774e:	42b4      	cmp	r4, r6
 8007750:	bf88      	it	hi
 8007752:	2304      	movhi	r3, #4
 8007754:	4443      	add	r3, r8
 8007756:	2200      	movs	r2, #0
 8007758:	f843 2b04 	str.w	r2, [r3], #4
 800775c:	429f      	cmp	r7, r3
 800775e:	d2fb      	bcs.n	8007758 <__hexnan+0xcc>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	b91b      	cbnz	r3, 800776c <__hexnan+0xe0>
 8007764:	4547      	cmp	r7, r8
 8007766:	d127      	bne.n	80077b8 <__hexnan+0x12c>
 8007768:	2301      	movs	r3, #1
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	2005      	movs	r0, #5
 800776e:	e026      	b.n	80077be <__hexnan+0x132>
 8007770:	3501      	adds	r5, #1
 8007772:	2d08      	cmp	r5, #8
 8007774:	f10b 0b01 	add.w	fp, fp, #1
 8007778:	dd06      	ble.n	8007788 <__hexnan+0xfc>
 800777a:	4544      	cmp	r4, r8
 800777c:	d9c3      	bls.n	8007706 <__hexnan+0x7a>
 800777e:	2300      	movs	r3, #0
 8007780:	f844 3c04 	str.w	r3, [r4, #-4]
 8007784:	2501      	movs	r5, #1
 8007786:	3c04      	subs	r4, #4
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	f000 000f 	and.w	r0, r0, #15
 800778e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007792:	6022      	str	r2, [r4, #0]
 8007794:	e7b7      	b.n	8007706 <__hexnan+0x7a>
 8007796:	2508      	movs	r5, #8
 8007798:	e7b5      	b.n	8007706 <__hexnan+0x7a>
 800779a:	9b01      	ldr	r3, [sp, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0df      	beq.n	8007760 <__hexnan+0xd4>
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295
 80077a4:	f1c3 0320 	rsb	r3, r3, #32
 80077a8:	fa22 f303 	lsr.w	r3, r2, r3
 80077ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80077b0:	401a      	ands	r2, r3
 80077b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80077b6:	e7d3      	b.n	8007760 <__hexnan+0xd4>
 80077b8:	3f04      	subs	r7, #4
 80077ba:	e7d1      	b.n	8007760 <__hexnan+0xd4>
 80077bc:	2004      	movs	r0, #4
 80077be:	b007      	add	sp, #28
 80077c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077c4 <_localeconv_r>:
 80077c4:	4800      	ldr	r0, [pc, #0]	; (80077c8 <_localeconv_r+0x4>)
 80077c6:	4770      	bx	lr
 80077c8:	20000164 	.word	0x20000164

080077cc <_lseek_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d07      	ldr	r5, [pc, #28]	; (80077ec <_lseek_r+0x20>)
 80077d0:	4604      	mov	r4, r0
 80077d2:	4608      	mov	r0, r1
 80077d4:	4611      	mov	r1, r2
 80077d6:	2200      	movs	r2, #0
 80077d8:	602a      	str	r2, [r5, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	f7fa fb0b 	bl	8001df6 <_lseek>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_lseek_r+0x1e>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_lseek_r+0x1e>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	20000c28 	.word	0x20000c28

080077f0 <malloc>:
 80077f0:	4b02      	ldr	r3, [pc, #8]	; (80077fc <malloc+0xc>)
 80077f2:	4601      	mov	r1, r0
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	f000 bd67 	b.w	80082c8 <_malloc_r>
 80077fa:	bf00      	nop
 80077fc:	2000000c 	.word	0x2000000c

08007800 <__ascii_mbtowc>:
 8007800:	b082      	sub	sp, #8
 8007802:	b901      	cbnz	r1, 8007806 <__ascii_mbtowc+0x6>
 8007804:	a901      	add	r1, sp, #4
 8007806:	b142      	cbz	r2, 800781a <__ascii_mbtowc+0x1a>
 8007808:	b14b      	cbz	r3, 800781e <__ascii_mbtowc+0x1e>
 800780a:	7813      	ldrb	r3, [r2, #0]
 800780c:	600b      	str	r3, [r1, #0]
 800780e:	7812      	ldrb	r2, [r2, #0]
 8007810:	1e10      	subs	r0, r2, #0
 8007812:	bf18      	it	ne
 8007814:	2001      	movne	r0, #1
 8007816:	b002      	add	sp, #8
 8007818:	4770      	bx	lr
 800781a:	4610      	mov	r0, r2
 800781c:	e7fb      	b.n	8007816 <__ascii_mbtowc+0x16>
 800781e:	f06f 0001 	mvn.w	r0, #1
 8007822:	e7f8      	b.n	8007816 <__ascii_mbtowc+0x16>

08007824 <memcpy>:
 8007824:	440a      	add	r2, r1
 8007826:	4291      	cmp	r1, r2
 8007828:	f100 33ff 	add.w	r3, r0, #4294967295
 800782c:	d100      	bne.n	8007830 <memcpy+0xc>
 800782e:	4770      	bx	lr
 8007830:	b510      	push	{r4, lr}
 8007832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800783a:	4291      	cmp	r1, r2
 800783c:	d1f9      	bne.n	8007832 <memcpy+0xe>
 800783e:	bd10      	pop	{r4, pc}

08007840 <_Balloc>:
 8007840:	b570      	push	{r4, r5, r6, lr}
 8007842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007844:	4604      	mov	r4, r0
 8007846:	460d      	mov	r5, r1
 8007848:	b976      	cbnz	r6, 8007868 <_Balloc+0x28>
 800784a:	2010      	movs	r0, #16
 800784c:	f7ff ffd0 	bl	80077f0 <malloc>
 8007850:	4602      	mov	r2, r0
 8007852:	6260      	str	r0, [r4, #36]	; 0x24
 8007854:	b920      	cbnz	r0, 8007860 <_Balloc+0x20>
 8007856:	4b18      	ldr	r3, [pc, #96]	; (80078b8 <_Balloc+0x78>)
 8007858:	4818      	ldr	r0, [pc, #96]	; (80078bc <_Balloc+0x7c>)
 800785a:	2166      	movs	r1, #102	; 0x66
 800785c:	f001 fb5c 	bl	8008f18 <__assert_func>
 8007860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007864:	6006      	str	r6, [r0, #0]
 8007866:	60c6      	str	r6, [r0, #12]
 8007868:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800786a:	68f3      	ldr	r3, [r6, #12]
 800786c:	b183      	cbz	r3, 8007890 <_Balloc+0x50>
 800786e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007876:	b9b8      	cbnz	r0, 80078a8 <_Balloc+0x68>
 8007878:	2101      	movs	r1, #1
 800787a:	fa01 f605 	lsl.w	r6, r1, r5
 800787e:	1d72      	adds	r2, r6, #5
 8007880:	0092      	lsls	r2, r2, #2
 8007882:	4620      	mov	r0, r4
 8007884:	f000 fc9d 	bl	80081c2 <_calloc_r>
 8007888:	b160      	cbz	r0, 80078a4 <_Balloc+0x64>
 800788a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800788e:	e00e      	b.n	80078ae <_Balloc+0x6e>
 8007890:	2221      	movs	r2, #33	; 0x21
 8007892:	2104      	movs	r1, #4
 8007894:	4620      	mov	r0, r4
 8007896:	f000 fc94 	bl	80081c2 <_calloc_r>
 800789a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789c:	60f0      	str	r0, [r6, #12]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e4      	bne.n	800786e <_Balloc+0x2e>
 80078a4:	2000      	movs	r0, #0
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	6802      	ldr	r2, [r0, #0]
 80078aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078ae:	2300      	movs	r3, #0
 80078b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078b4:	e7f7      	b.n	80078a6 <_Balloc+0x66>
 80078b6:	bf00      	nop
 80078b8:	08009d66 	.word	0x08009d66
 80078bc:	08009e64 	.word	0x08009e64

080078c0 <_Bfree>:
 80078c0:	b570      	push	{r4, r5, r6, lr}
 80078c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078c4:	4605      	mov	r5, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	b976      	cbnz	r6, 80078e8 <_Bfree+0x28>
 80078ca:	2010      	movs	r0, #16
 80078cc:	f7ff ff90 	bl	80077f0 <malloc>
 80078d0:	4602      	mov	r2, r0
 80078d2:	6268      	str	r0, [r5, #36]	; 0x24
 80078d4:	b920      	cbnz	r0, 80078e0 <_Bfree+0x20>
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <_Bfree+0x3c>)
 80078d8:	4809      	ldr	r0, [pc, #36]	; (8007900 <_Bfree+0x40>)
 80078da:	218a      	movs	r1, #138	; 0x8a
 80078dc:	f001 fb1c 	bl	8008f18 <__assert_func>
 80078e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078e4:	6006      	str	r6, [r0, #0]
 80078e6:	60c6      	str	r6, [r0, #12]
 80078e8:	b13c      	cbz	r4, 80078fa <_Bfree+0x3a>
 80078ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078ec:	6862      	ldr	r2, [r4, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078f4:	6021      	str	r1, [r4, #0]
 80078f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	08009d66 	.word	0x08009d66
 8007900:	08009e64 	.word	0x08009e64

08007904 <__multadd>:
 8007904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007908:	690d      	ldr	r5, [r1, #16]
 800790a:	4607      	mov	r7, r0
 800790c:	460c      	mov	r4, r1
 800790e:	461e      	mov	r6, r3
 8007910:	f101 0c14 	add.w	ip, r1, #20
 8007914:	2000      	movs	r0, #0
 8007916:	f8dc 3000 	ldr.w	r3, [ip]
 800791a:	b299      	uxth	r1, r3
 800791c:	fb02 6101 	mla	r1, r2, r1, r6
 8007920:	0c1e      	lsrs	r6, r3, #16
 8007922:	0c0b      	lsrs	r3, r1, #16
 8007924:	fb02 3306 	mla	r3, r2, r6, r3
 8007928:	b289      	uxth	r1, r1
 800792a:	3001      	adds	r0, #1
 800792c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007930:	4285      	cmp	r5, r0
 8007932:	f84c 1b04 	str.w	r1, [ip], #4
 8007936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800793a:	dcec      	bgt.n	8007916 <__multadd+0x12>
 800793c:	b30e      	cbz	r6, 8007982 <__multadd+0x7e>
 800793e:	68a3      	ldr	r3, [r4, #8]
 8007940:	42ab      	cmp	r3, r5
 8007942:	dc19      	bgt.n	8007978 <__multadd+0x74>
 8007944:	6861      	ldr	r1, [r4, #4]
 8007946:	4638      	mov	r0, r7
 8007948:	3101      	adds	r1, #1
 800794a:	f7ff ff79 	bl	8007840 <_Balloc>
 800794e:	4680      	mov	r8, r0
 8007950:	b928      	cbnz	r0, 800795e <__multadd+0x5a>
 8007952:	4602      	mov	r2, r0
 8007954:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <__multadd+0x84>)
 8007956:	480d      	ldr	r0, [pc, #52]	; (800798c <__multadd+0x88>)
 8007958:	21b5      	movs	r1, #181	; 0xb5
 800795a:	f001 fadd 	bl	8008f18 <__assert_func>
 800795e:	6922      	ldr	r2, [r4, #16]
 8007960:	3202      	adds	r2, #2
 8007962:	f104 010c 	add.w	r1, r4, #12
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	300c      	adds	r0, #12
 800796a:	f7ff ff5b 	bl	8007824 <memcpy>
 800796e:	4621      	mov	r1, r4
 8007970:	4638      	mov	r0, r7
 8007972:	f7ff ffa5 	bl	80078c0 <_Bfree>
 8007976:	4644      	mov	r4, r8
 8007978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800797c:	3501      	adds	r5, #1
 800797e:	615e      	str	r6, [r3, #20]
 8007980:	6125      	str	r5, [r4, #16]
 8007982:	4620      	mov	r0, r4
 8007984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007988:	08009dd8 	.word	0x08009dd8
 800798c:	08009e64 	.word	0x08009e64

08007990 <__s2b>:
 8007990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007994:	460c      	mov	r4, r1
 8007996:	4615      	mov	r5, r2
 8007998:	461f      	mov	r7, r3
 800799a:	2209      	movs	r2, #9
 800799c:	3308      	adds	r3, #8
 800799e:	4606      	mov	r6, r0
 80079a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80079a4:	2100      	movs	r1, #0
 80079a6:	2201      	movs	r2, #1
 80079a8:	429a      	cmp	r2, r3
 80079aa:	db09      	blt.n	80079c0 <__s2b+0x30>
 80079ac:	4630      	mov	r0, r6
 80079ae:	f7ff ff47 	bl	8007840 <_Balloc>
 80079b2:	b940      	cbnz	r0, 80079c6 <__s2b+0x36>
 80079b4:	4602      	mov	r2, r0
 80079b6:	4b19      	ldr	r3, [pc, #100]	; (8007a1c <__s2b+0x8c>)
 80079b8:	4819      	ldr	r0, [pc, #100]	; (8007a20 <__s2b+0x90>)
 80079ba:	21ce      	movs	r1, #206	; 0xce
 80079bc:	f001 faac 	bl	8008f18 <__assert_func>
 80079c0:	0052      	lsls	r2, r2, #1
 80079c2:	3101      	adds	r1, #1
 80079c4:	e7f0      	b.n	80079a8 <__s2b+0x18>
 80079c6:	9b08      	ldr	r3, [sp, #32]
 80079c8:	6143      	str	r3, [r0, #20]
 80079ca:	2d09      	cmp	r5, #9
 80079cc:	f04f 0301 	mov.w	r3, #1
 80079d0:	6103      	str	r3, [r0, #16]
 80079d2:	dd16      	ble.n	8007a02 <__s2b+0x72>
 80079d4:	f104 0909 	add.w	r9, r4, #9
 80079d8:	46c8      	mov	r8, r9
 80079da:	442c      	add	r4, r5
 80079dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079e0:	4601      	mov	r1, r0
 80079e2:	3b30      	subs	r3, #48	; 0x30
 80079e4:	220a      	movs	r2, #10
 80079e6:	4630      	mov	r0, r6
 80079e8:	f7ff ff8c 	bl	8007904 <__multadd>
 80079ec:	45a0      	cmp	r8, r4
 80079ee:	d1f5      	bne.n	80079dc <__s2b+0x4c>
 80079f0:	f1a5 0408 	sub.w	r4, r5, #8
 80079f4:	444c      	add	r4, r9
 80079f6:	1b2d      	subs	r5, r5, r4
 80079f8:	1963      	adds	r3, r4, r5
 80079fa:	42bb      	cmp	r3, r7
 80079fc:	db04      	blt.n	8007a08 <__s2b+0x78>
 80079fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a02:	340a      	adds	r4, #10
 8007a04:	2509      	movs	r5, #9
 8007a06:	e7f6      	b.n	80079f6 <__s2b+0x66>
 8007a08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a0c:	4601      	mov	r1, r0
 8007a0e:	3b30      	subs	r3, #48	; 0x30
 8007a10:	220a      	movs	r2, #10
 8007a12:	4630      	mov	r0, r6
 8007a14:	f7ff ff76 	bl	8007904 <__multadd>
 8007a18:	e7ee      	b.n	80079f8 <__s2b+0x68>
 8007a1a:	bf00      	nop
 8007a1c:	08009dd8 	.word	0x08009dd8
 8007a20:	08009e64 	.word	0x08009e64

08007a24 <__hi0bits>:
 8007a24:	0c03      	lsrs	r3, r0, #16
 8007a26:	041b      	lsls	r3, r3, #16
 8007a28:	b9d3      	cbnz	r3, 8007a60 <__hi0bits+0x3c>
 8007a2a:	0400      	lsls	r0, r0, #16
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a32:	bf04      	itt	eq
 8007a34:	0200      	lsleq	r0, r0, #8
 8007a36:	3308      	addeq	r3, #8
 8007a38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a3c:	bf04      	itt	eq
 8007a3e:	0100      	lsleq	r0, r0, #4
 8007a40:	3304      	addeq	r3, #4
 8007a42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a46:	bf04      	itt	eq
 8007a48:	0080      	lsleq	r0, r0, #2
 8007a4a:	3302      	addeq	r3, #2
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	db05      	blt.n	8007a5c <__hi0bits+0x38>
 8007a50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a54:	f103 0301 	add.w	r3, r3, #1
 8007a58:	bf08      	it	eq
 8007a5a:	2320      	moveq	r3, #32
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	4770      	bx	lr
 8007a60:	2300      	movs	r3, #0
 8007a62:	e7e4      	b.n	8007a2e <__hi0bits+0xa>

08007a64 <__lo0bits>:
 8007a64:	6803      	ldr	r3, [r0, #0]
 8007a66:	f013 0207 	ands.w	r2, r3, #7
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	d00b      	beq.n	8007a86 <__lo0bits+0x22>
 8007a6e:	07da      	lsls	r2, r3, #31
 8007a70:	d423      	bmi.n	8007aba <__lo0bits+0x56>
 8007a72:	0798      	lsls	r0, r3, #30
 8007a74:	bf49      	itett	mi
 8007a76:	085b      	lsrmi	r3, r3, #1
 8007a78:	089b      	lsrpl	r3, r3, #2
 8007a7a:	2001      	movmi	r0, #1
 8007a7c:	600b      	strmi	r3, [r1, #0]
 8007a7e:	bf5c      	itt	pl
 8007a80:	600b      	strpl	r3, [r1, #0]
 8007a82:	2002      	movpl	r0, #2
 8007a84:	4770      	bx	lr
 8007a86:	b298      	uxth	r0, r3
 8007a88:	b9a8      	cbnz	r0, 8007ab6 <__lo0bits+0x52>
 8007a8a:	0c1b      	lsrs	r3, r3, #16
 8007a8c:	2010      	movs	r0, #16
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	b90a      	cbnz	r2, 8007a96 <__lo0bits+0x32>
 8007a92:	3008      	adds	r0, #8
 8007a94:	0a1b      	lsrs	r3, r3, #8
 8007a96:	071a      	lsls	r2, r3, #28
 8007a98:	bf04      	itt	eq
 8007a9a:	091b      	lsreq	r3, r3, #4
 8007a9c:	3004      	addeq	r0, #4
 8007a9e:	079a      	lsls	r2, r3, #30
 8007aa0:	bf04      	itt	eq
 8007aa2:	089b      	lsreq	r3, r3, #2
 8007aa4:	3002      	addeq	r0, #2
 8007aa6:	07da      	lsls	r2, r3, #31
 8007aa8:	d403      	bmi.n	8007ab2 <__lo0bits+0x4e>
 8007aaa:	085b      	lsrs	r3, r3, #1
 8007aac:	f100 0001 	add.w	r0, r0, #1
 8007ab0:	d005      	beq.n	8007abe <__lo0bits+0x5a>
 8007ab2:	600b      	str	r3, [r1, #0]
 8007ab4:	4770      	bx	lr
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	e7e9      	b.n	8007a8e <__lo0bits+0x2a>
 8007aba:	2000      	movs	r0, #0
 8007abc:	4770      	bx	lr
 8007abe:	2020      	movs	r0, #32
 8007ac0:	4770      	bx	lr
	...

08007ac4 <__i2b>:
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	2101      	movs	r1, #1
 8007aca:	f7ff feb9 	bl	8007840 <_Balloc>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	b928      	cbnz	r0, 8007ade <__i2b+0x1a>
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <__i2b+0x24>)
 8007ad4:	4805      	ldr	r0, [pc, #20]	; (8007aec <__i2b+0x28>)
 8007ad6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ada:	f001 fa1d 	bl	8008f18 <__assert_func>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	6144      	str	r4, [r0, #20]
 8007ae2:	6103      	str	r3, [r0, #16]
 8007ae4:	bd10      	pop	{r4, pc}
 8007ae6:	bf00      	nop
 8007ae8:	08009dd8 	.word	0x08009dd8
 8007aec:	08009e64 	.word	0x08009e64

08007af0 <__multiply>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	4691      	mov	r9, r2
 8007af6:	690a      	ldr	r2, [r1, #16]
 8007af8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	bfb8      	it	lt
 8007b00:	460b      	movlt	r3, r1
 8007b02:	460c      	mov	r4, r1
 8007b04:	bfbc      	itt	lt
 8007b06:	464c      	movlt	r4, r9
 8007b08:	4699      	movlt	r9, r3
 8007b0a:	6927      	ldr	r7, [r4, #16]
 8007b0c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	6861      	ldr	r1, [r4, #4]
 8007b14:	eb07 060a 	add.w	r6, r7, sl
 8007b18:	42b3      	cmp	r3, r6
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	bfb8      	it	lt
 8007b1e:	3101      	addlt	r1, #1
 8007b20:	f7ff fe8e 	bl	8007840 <_Balloc>
 8007b24:	b930      	cbnz	r0, 8007b34 <__multiply+0x44>
 8007b26:	4602      	mov	r2, r0
 8007b28:	4b44      	ldr	r3, [pc, #272]	; (8007c3c <__multiply+0x14c>)
 8007b2a:	4845      	ldr	r0, [pc, #276]	; (8007c40 <__multiply+0x150>)
 8007b2c:	f240 115d 	movw	r1, #349	; 0x15d
 8007b30:	f001 f9f2 	bl	8008f18 <__assert_func>
 8007b34:	f100 0514 	add.w	r5, r0, #20
 8007b38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	2200      	movs	r2, #0
 8007b40:	4543      	cmp	r3, r8
 8007b42:	d321      	bcc.n	8007b88 <__multiply+0x98>
 8007b44:	f104 0314 	add.w	r3, r4, #20
 8007b48:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b4c:	f109 0314 	add.w	r3, r9, #20
 8007b50:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b54:	9202      	str	r2, [sp, #8]
 8007b56:	1b3a      	subs	r2, r7, r4
 8007b58:	3a15      	subs	r2, #21
 8007b5a:	f022 0203 	bic.w	r2, r2, #3
 8007b5e:	3204      	adds	r2, #4
 8007b60:	f104 0115 	add.w	r1, r4, #21
 8007b64:	428f      	cmp	r7, r1
 8007b66:	bf38      	it	cc
 8007b68:	2204      	movcc	r2, #4
 8007b6a:	9201      	str	r2, [sp, #4]
 8007b6c:	9a02      	ldr	r2, [sp, #8]
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d80c      	bhi.n	8007b8e <__multiply+0x9e>
 8007b74:	2e00      	cmp	r6, #0
 8007b76:	dd03      	ble.n	8007b80 <__multiply+0x90>
 8007b78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d05a      	beq.n	8007c36 <__multiply+0x146>
 8007b80:	6106      	str	r6, [r0, #16]
 8007b82:	b005      	add	sp, #20
 8007b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b88:	f843 2b04 	str.w	r2, [r3], #4
 8007b8c:	e7d8      	b.n	8007b40 <__multiply+0x50>
 8007b8e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b92:	f1ba 0f00 	cmp.w	sl, #0
 8007b96:	d024      	beq.n	8007be2 <__multiply+0xf2>
 8007b98:	f104 0e14 	add.w	lr, r4, #20
 8007b9c:	46a9      	mov	r9, r5
 8007b9e:	f04f 0c00 	mov.w	ip, #0
 8007ba2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ba6:	f8d9 1000 	ldr.w	r1, [r9]
 8007baa:	fa1f fb82 	uxth.w	fp, r2
 8007bae:	b289      	uxth	r1, r1
 8007bb0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007bb4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8007bbc:	4461      	add	r1, ip
 8007bbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bc2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007bc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bca:	b289      	uxth	r1, r1
 8007bcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bd0:	4577      	cmp	r7, lr
 8007bd2:	f849 1b04 	str.w	r1, [r9], #4
 8007bd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bda:	d8e2      	bhi.n	8007ba2 <__multiply+0xb2>
 8007bdc:	9a01      	ldr	r2, [sp, #4]
 8007bde:	f845 c002 	str.w	ip, [r5, r2]
 8007be2:	9a03      	ldr	r2, [sp, #12]
 8007be4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007be8:	3304      	adds	r3, #4
 8007bea:	f1b9 0f00 	cmp.w	r9, #0
 8007bee:	d020      	beq.n	8007c32 <__multiply+0x142>
 8007bf0:	6829      	ldr	r1, [r5, #0]
 8007bf2:	f104 0c14 	add.w	ip, r4, #20
 8007bf6:	46ae      	mov	lr, r5
 8007bf8:	f04f 0a00 	mov.w	sl, #0
 8007bfc:	f8bc b000 	ldrh.w	fp, [ip]
 8007c00:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c04:	fb09 220b 	mla	r2, r9, fp, r2
 8007c08:	4492      	add	sl, r2
 8007c0a:	b289      	uxth	r1, r1
 8007c0c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c10:	f84e 1b04 	str.w	r1, [lr], #4
 8007c14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c18:	f8be 1000 	ldrh.w	r1, [lr]
 8007c1c:	0c12      	lsrs	r2, r2, #16
 8007c1e:	fb09 1102 	mla	r1, r9, r2, r1
 8007c22:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c26:	4567      	cmp	r7, ip
 8007c28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c2c:	d8e6      	bhi.n	8007bfc <__multiply+0x10c>
 8007c2e:	9a01      	ldr	r2, [sp, #4]
 8007c30:	50a9      	str	r1, [r5, r2]
 8007c32:	3504      	adds	r5, #4
 8007c34:	e79a      	b.n	8007b6c <__multiply+0x7c>
 8007c36:	3e01      	subs	r6, #1
 8007c38:	e79c      	b.n	8007b74 <__multiply+0x84>
 8007c3a:	bf00      	nop
 8007c3c:	08009dd8 	.word	0x08009dd8
 8007c40:	08009e64 	.word	0x08009e64

08007c44 <__pow5mult>:
 8007c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c48:	4615      	mov	r5, r2
 8007c4a:	f012 0203 	ands.w	r2, r2, #3
 8007c4e:	4606      	mov	r6, r0
 8007c50:	460f      	mov	r7, r1
 8007c52:	d007      	beq.n	8007c64 <__pow5mult+0x20>
 8007c54:	4c25      	ldr	r4, [pc, #148]	; (8007cec <__pow5mult+0xa8>)
 8007c56:	3a01      	subs	r2, #1
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c5e:	f7ff fe51 	bl	8007904 <__multadd>
 8007c62:	4607      	mov	r7, r0
 8007c64:	10ad      	asrs	r5, r5, #2
 8007c66:	d03d      	beq.n	8007ce4 <__pow5mult+0xa0>
 8007c68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c6a:	b97c      	cbnz	r4, 8007c8c <__pow5mult+0x48>
 8007c6c:	2010      	movs	r0, #16
 8007c6e:	f7ff fdbf 	bl	80077f0 <malloc>
 8007c72:	4602      	mov	r2, r0
 8007c74:	6270      	str	r0, [r6, #36]	; 0x24
 8007c76:	b928      	cbnz	r0, 8007c84 <__pow5mult+0x40>
 8007c78:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <__pow5mult+0xac>)
 8007c7a:	481e      	ldr	r0, [pc, #120]	; (8007cf4 <__pow5mult+0xb0>)
 8007c7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c80:	f001 f94a 	bl	8008f18 <__assert_func>
 8007c84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c88:	6004      	str	r4, [r0, #0]
 8007c8a:	60c4      	str	r4, [r0, #12]
 8007c8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c94:	b94c      	cbnz	r4, 8007caa <__pow5mult+0x66>
 8007c96:	f240 2171 	movw	r1, #625	; 0x271
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7ff ff12 	bl	8007ac4 <__i2b>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	6003      	str	r3, [r0, #0]
 8007caa:	f04f 0900 	mov.w	r9, #0
 8007cae:	07eb      	lsls	r3, r5, #31
 8007cb0:	d50a      	bpl.n	8007cc8 <__pow5mult+0x84>
 8007cb2:	4639      	mov	r1, r7
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f7ff ff1a 	bl	8007af0 <__multiply>
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f7ff fdfd 	bl	80078c0 <_Bfree>
 8007cc6:	4647      	mov	r7, r8
 8007cc8:	106d      	asrs	r5, r5, #1
 8007cca:	d00b      	beq.n	8007ce4 <__pow5mult+0xa0>
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	b938      	cbnz	r0, 8007ce0 <__pow5mult+0x9c>
 8007cd0:	4622      	mov	r2, r4
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f7ff ff0b 	bl	8007af0 <__multiply>
 8007cda:	6020      	str	r0, [r4, #0]
 8007cdc:	f8c0 9000 	str.w	r9, [r0]
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	e7e4      	b.n	8007cae <__pow5mult+0x6a>
 8007ce4:	4638      	mov	r0, r7
 8007ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cea:	bf00      	nop
 8007cec:	08009fb0 	.word	0x08009fb0
 8007cf0:	08009d66 	.word	0x08009d66
 8007cf4:	08009e64 	.word	0x08009e64

08007cf8 <__lshift>:
 8007cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	6849      	ldr	r1, [r1, #4]
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d06:	68a3      	ldr	r3, [r4, #8]
 8007d08:	4607      	mov	r7, r0
 8007d0a:	4691      	mov	r9, r2
 8007d0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d10:	f108 0601 	add.w	r6, r8, #1
 8007d14:	42b3      	cmp	r3, r6
 8007d16:	db0b      	blt.n	8007d30 <__lshift+0x38>
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f7ff fd91 	bl	8007840 <_Balloc>
 8007d1e:	4605      	mov	r5, r0
 8007d20:	b948      	cbnz	r0, 8007d36 <__lshift+0x3e>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4b2a      	ldr	r3, [pc, #168]	; (8007dd0 <__lshift+0xd8>)
 8007d26:	482b      	ldr	r0, [pc, #172]	; (8007dd4 <__lshift+0xdc>)
 8007d28:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d2c:	f001 f8f4 	bl	8008f18 <__assert_func>
 8007d30:	3101      	adds	r1, #1
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	e7ee      	b.n	8007d14 <__lshift+0x1c>
 8007d36:	2300      	movs	r3, #0
 8007d38:	f100 0114 	add.w	r1, r0, #20
 8007d3c:	f100 0210 	add.w	r2, r0, #16
 8007d40:	4618      	mov	r0, r3
 8007d42:	4553      	cmp	r3, sl
 8007d44:	db37      	blt.n	8007db6 <__lshift+0xbe>
 8007d46:	6920      	ldr	r0, [r4, #16]
 8007d48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d4c:	f104 0314 	add.w	r3, r4, #20
 8007d50:	f019 091f 	ands.w	r9, r9, #31
 8007d54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d5c:	d02f      	beq.n	8007dbe <__lshift+0xc6>
 8007d5e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d62:	468a      	mov	sl, r1
 8007d64:	f04f 0c00 	mov.w	ip, #0
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	fa02 f209 	lsl.w	r2, r2, r9
 8007d6e:	ea42 020c 	orr.w	r2, r2, ip
 8007d72:	f84a 2b04 	str.w	r2, [sl], #4
 8007d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7a:	4298      	cmp	r0, r3
 8007d7c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d80:	d8f2      	bhi.n	8007d68 <__lshift+0x70>
 8007d82:	1b03      	subs	r3, r0, r4
 8007d84:	3b15      	subs	r3, #21
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	3304      	adds	r3, #4
 8007d8c:	f104 0215 	add.w	r2, r4, #21
 8007d90:	4290      	cmp	r0, r2
 8007d92:	bf38      	it	cc
 8007d94:	2304      	movcc	r3, #4
 8007d96:	f841 c003 	str.w	ip, [r1, r3]
 8007d9a:	f1bc 0f00 	cmp.w	ip, #0
 8007d9e:	d001      	beq.n	8007da4 <__lshift+0xac>
 8007da0:	f108 0602 	add.w	r6, r8, #2
 8007da4:	3e01      	subs	r6, #1
 8007da6:	4638      	mov	r0, r7
 8007da8:	612e      	str	r6, [r5, #16]
 8007daa:	4621      	mov	r1, r4
 8007dac:	f7ff fd88 	bl	80078c0 <_Bfree>
 8007db0:	4628      	mov	r0, r5
 8007db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dba:	3301      	adds	r3, #1
 8007dbc:	e7c1      	b.n	8007d42 <__lshift+0x4a>
 8007dbe:	3904      	subs	r1, #4
 8007dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dc8:	4298      	cmp	r0, r3
 8007dca:	d8f9      	bhi.n	8007dc0 <__lshift+0xc8>
 8007dcc:	e7ea      	b.n	8007da4 <__lshift+0xac>
 8007dce:	bf00      	nop
 8007dd0:	08009dd8 	.word	0x08009dd8
 8007dd4:	08009e64 	.word	0x08009e64

08007dd8 <__mcmp>:
 8007dd8:	b530      	push	{r4, r5, lr}
 8007dda:	6902      	ldr	r2, [r0, #16]
 8007ddc:	690c      	ldr	r4, [r1, #16]
 8007dde:	1b12      	subs	r2, r2, r4
 8007de0:	d10e      	bne.n	8007e00 <__mcmp+0x28>
 8007de2:	f100 0314 	add.w	r3, r0, #20
 8007de6:	3114      	adds	r1, #20
 8007de8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007dec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007df0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007df4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007df8:	42a5      	cmp	r5, r4
 8007dfa:	d003      	beq.n	8007e04 <__mcmp+0x2c>
 8007dfc:	d305      	bcc.n	8007e0a <__mcmp+0x32>
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4610      	mov	r0, r2
 8007e02:	bd30      	pop	{r4, r5, pc}
 8007e04:	4283      	cmp	r3, r0
 8007e06:	d3f3      	bcc.n	8007df0 <__mcmp+0x18>
 8007e08:	e7fa      	b.n	8007e00 <__mcmp+0x28>
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0e:	e7f7      	b.n	8007e00 <__mcmp+0x28>

08007e10 <__mdiff>:
 8007e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	460c      	mov	r4, r1
 8007e16:	4606      	mov	r6, r0
 8007e18:	4611      	mov	r1, r2
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	4690      	mov	r8, r2
 8007e1e:	f7ff ffdb 	bl	8007dd8 <__mcmp>
 8007e22:	1e05      	subs	r5, r0, #0
 8007e24:	d110      	bne.n	8007e48 <__mdiff+0x38>
 8007e26:	4629      	mov	r1, r5
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff fd09 	bl	8007840 <_Balloc>
 8007e2e:	b930      	cbnz	r0, 8007e3e <__mdiff+0x2e>
 8007e30:	4b3a      	ldr	r3, [pc, #232]	; (8007f1c <__mdiff+0x10c>)
 8007e32:	4602      	mov	r2, r0
 8007e34:	f240 2132 	movw	r1, #562	; 0x232
 8007e38:	4839      	ldr	r0, [pc, #228]	; (8007f20 <__mdiff+0x110>)
 8007e3a:	f001 f86d 	bl	8008f18 <__assert_func>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	bfa4      	itt	ge
 8007e4a:	4643      	movge	r3, r8
 8007e4c:	46a0      	movge	r8, r4
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e54:	bfa6      	itte	ge
 8007e56:	461c      	movge	r4, r3
 8007e58:	2500      	movge	r5, #0
 8007e5a:	2501      	movlt	r5, #1
 8007e5c:	f7ff fcf0 	bl	8007840 <_Balloc>
 8007e60:	b920      	cbnz	r0, 8007e6c <__mdiff+0x5c>
 8007e62:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <__mdiff+0x10c>)
 8007e64:	4602      	mov	r2, r0
 8007e66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e6a:	e7e5      	b.n	8007e38 <__mdiff+0x28>
 8007e6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e70:	6926      	ldr	r6, [r4, #16]
 8007e72:	60c5      	str	r5, [r0, #12]
 8007e74:	f104 0914 	add.w	r9, r4, #20
 8007e78:	f108 0514 	add.w	r5, r8, #20
 8007e7c:	f100 0e14 	add.w	lr, r0, #20
 8007e80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e88:	f108 0210 	add.w	r2, r8, #16
 8007e8c:	46f2      	mov	sl, lr
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e98:	fa1f f883 	uxth.w	r8, r3
 8007e9c:	fa11 f18b 	uxtah	r1, r1, fp
 8007ea0:	0c1b      	lsrs	r3, r3, #16
 8007ea2:	eba1 0808 	sub.w	r8, r1, r8
 8007ea6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007eaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007eae:	fa1f f888 	uxth.w	r8, r8
 8007eb2:	1419      	asrs	r1, r3, #16
 8007eb4:	454e      	cmp	r6, r9
 8007eb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007eba:	f84a 3b04 	str.w	r3, [sl], #4
 8007ebe:	d8e7      	bhi.n	8007e90 <__mdiff+0x80>
 8007ec0:	1b33      	subs	r3, r6, r4
 8007ec2:	3b15      	subs	r3, #21
 8007ec4:	f023 0303 	bic.w	r3, r3, #3
 8007ec8:	3304      	adds	r3, #4
 8007eca:	3415      	adds	r4, #21
 8007ecc:	42a6      	cmp	r6, r4
 8007ece:	bf38      	it	cc
 8007ed0:	2304      	movcc	r3, #4
 8007ed2:	441d      	add	r5, r3
 8007ed4:	4473      	add	r3, lr
 8007ed6:	469e      	mov	lr, r3
 8007ed8:	462e      	mov	r6, r5
 8007eda:	4566      	cmp	r6, ip
 8007edc:	d30e      	bcc.n	8007efc <__mdiff+0xec>
 8007ede:	f10c 0203 	add.w	r2, ip, #3
 8007ee2:	1b52      	subs	r2, r2, r5
 8007ee4:	f022 0203 	bic.w	r2, r2, #3
 8007ee8:	3d03      	subs	r5, #3
 8007eea:	45ac      	cmp	ip, r5
 8007eec:	bf38      	it	cc
 8007eee:	2200      	movcc	r2, #0
 8007ef0:	441a      	add	r2, r3
 8007ef2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ef6:	b17b      	cbz	r3, 8007f18 <__mdiff+0x108>
 8007ef8:	6107      	str	r7, [r0, #16]
 8007efa:	e7a3      	b.n	8007e44 <__mdiff+0x34>
 8007efc:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f00:	fa11 f288 	uxtah	r2, r1, r8
 8007f04:	1414      	asrs	r4, r2, #16
 8007f06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f0a:	b292      	uxth	r2, r2
 8007f0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f10:	f84e 2b04 	str.w	r2, [lr], #4
 8007f14:	1421      	asrs	r1, r4, #16
 8007f16:	e7e0      	b.n	8007eda <__mdiff+0xca>
 8007f18:	3f01      	subs	r7, #1
 8007f1a:	e7ea      	b.n	8007ef2 <__mdiff+0xe2>
 8007f1c:	08009dd8 	.word	0x08009dd8
 8007f20:	08009e64 	.word	0x08009e64

08007f24 <__ulp>:
 8007f24:	b082      	sub	sp, #8
 8007f26:	ed8d 0b00 	vstr	d0, [sp]
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	4912      	ldr	r1, [pc, #72]	; (8007f78 <__ulp+0x54>)
 8007f2e:	4019      	ands	r1, r3
 8007f30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007f34:	2900      	cmp	r1, #0
 8007f36:	dd05      	ble.n	8007f44 <__ulp+0x20>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	ec43 2b10 	vmov	d0, r2, r3
 8007f40:	b002      	add	sp, #8
 8007f42:	4770      	bx	lr
 8007f44:	4249      	negs	r1, r1
 8007f46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007f4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	f04f 0300 	mov.w	r3, #0
 8007f56:	da04      	bge.n	8007f62 <__ulp+0x3e>
 8007f58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007f5c:	fa41 f300 	asr.w	r3, r1, r0
 8007f60:	e7ec      	b.n	8007f3c <__ulp+0x18>
 8007f62:	f1a0 0114 	sub.w	r1, r0, #20
 8007f66:	291e      	cmp	r1, #30
 8007f68:	bfda      	itte	le
 8007f6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007f6e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007f72:	2101      	movgt	r1, #1
 8007f74:	460a      	mov	r2, r1
 8007f76:	e7e1      	b.n	8007f3c <__ulp+0x18>
 8007f78:	7ff00000 	.word	0x7ff00000

08007f7c <__b2d>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	6905      	ldr	r5, [r0, #16]
 8007f80:	f100 0714 	add.w	r7, r0, #20
 8007f84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007f88:	1f2e      	subs	r6, r5, #4
 8007f8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f7ff fd48 	bl	8007a24 <__hi0bits>
 8007f94:	f1c0 0320 	rsb	r3, r0, #32
 8007f98:	280a      	cmp	r0, #10
 8007f9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008018 <__b2d+0x9c>
 8007f9e:	600b      	str	r3, [r1, #0]
 8007fa0:	dc14      	bgt.n	8007fcc <__b2d+0x50>
 8007fa2:	f1c0 0e0b 	rsb	lr, r0, #11
 8007fa6:	fa24 f10e 	lsr.w	r1, r4, lr
 8007faa:	42b7      	cmp	r7, r6
 8007fac:	ea41 030c 	orr.w	r3, r1, ip
 8007fb0:	bf34      	ite	cc
 8007fb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007fb6:	2100      	movcs	r1, #0
 8007fb8:	3015      	adds	r0, #21
 8007fba:	fa04 f000 	lsl.w	r0, r4, r0
 8007fbe:	fa21 f10e 	lsr.w	r1, r1, lr
 8007fc2:	ea40 0201 	orr.w	r2, r0, r1
 8007fc6:	ec43 2b10 	vmov	d0, r2, r3
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fcc:	42b7      	cmp	r7, r6
 8007fce:	bf3a      	itte	cc
 8007fd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007fd4:	f1a5 0608 	subcc.w	r6, r5, #8
 8007fd8:	2100      	movcs	r1, #0
 8007fda:	380b      	subs	r0, #11
 8007fdc:	d017      	beq.n	800800e <__b2d+0x92>
 8007fde:	f1c0 0c20 	rsb	ip, r0, #32
 8007fe2:	fa04 f500 	lsl.w	r5, r4, r0
 8007fe6:	42be      	cmp	r6, r7
 8007fe8:	fa21 f40c 	lsr.w	r4, r1, ip
 8007fec:	ea45 0504 	orr.w	r5, r5, r4
 8007ff0:	bf8c      	ite	hi
 8007ff2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007ff6:	2400      	movls	r4, #0
 8007ff8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007ffc:	fa01 f000 	lsl.w	r0, r1, r0
 8008000:	fa24 f40c 	lsr.w	r4, r4, ip
 8008004:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008008:	ea40 0204 	orr.w	r2, r0, r4
 800800c:	e7db      	b.n	8007fc6 <__b2d+0x4a>
 800800e:	ea44 030c 	orr.w	r3, r4, ip
 8008012:	460a      	mov	r2, r1
 8008014:	e7d7      	b.n	8007fc6 <__b2d+0x4a>
 8008016:	bf00      	nop
 8008018:	3ff00000 	.word	0x3ff00000

0800801c <__d2b>:
 800801c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008020:	4689      	mov	r9, r1
 8008022:	2101      	movs	r1, #1
 8008024:	ec57 6b10 	vmov	r6, r7, d0
 8008028:	4690      	mov	r8, r2
 800802a:	f7ff fc09 	bl	8007840 <_Balloc>
 800802e:	4604      	mov	r4, r0
 8008030:	b930      	cbnz	r0, 8008040 <__d2b+0x24>
 8008032:	4602      	mov	r2, r0
 8008034:	4b25      	ldr	r3, [pc, #148]	; (80080cc <__d2b+0xb0>)
 8008036:	4826      	ldr	r0, [pc, #152]	; (80080d0 <__d2b+0xb4>)
 8008038:	f240 310a 	movw	r1, #778	; 0x30a
 800803c:	f000 ff6c 	bl	8008f18 <__assert_func>
 8008040:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008044:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008048:	bb35      	cbnz	r5, 8008098 <__d2b+0x7c>
 800804a:	2e00      	cmp	r6, #0
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	d028      	beq.n	80080a2 <__d2b+0x86>
 8008050:	4668      	mov	r0, sp
 8008052:	9600      	str	r6, [sp, #0]
 8008054:	f7ff fd06 	bl	8007a64 <__lo0bits>
 8008058:	9900      	ldr	r1, [sp, #0]
 800805a:	b300      	cbz	r0, 800809e <__d2b+0x82>
 800805c:	9a01      	ldr	r2, [sp, #4]
 800805e:	f1c0 0320 	rsb	r3, r0, #32
 8008062:	fa02 f303 	lsl.w	r3, r2, r3
 8008066:	430b      	orrs	r3, r1
 8008068:	40c2      	lsrs	r2, r0
 800806a:	6163      	str	r3, [r4, #20]
 800806c:	9201      	str	r2, [sp, #4]
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	61a3      	str	r3, [r4, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	bf14      	ite	ne
 8008076:	2202      	movne	r2, #2
 8008078:	2201      	moveq	r2, #1
 800807a:	6122      	str	r2, [r4, #16]
 800807c:	b1d5      	cbz	r5, 80080b4 <__d2b+0x98>
 800807e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008082:	4405      	add	r5, r0
 8008084:	f8c9 5000 	str.w	r5, [r9]
 8008088:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800808c:	f8c8 0000 	str.w	r0, [r8]
 8008090:	4620      	mov	r0, r4
 8008092:	b003      	add	sp, #12
 8008094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800809c:	e7d5      	b.n	800804a <__d2b+0x2e>
 800809e:	6161      	str	r1, [r4, #20]
 80080a0:	e7e5      	b.n	800806e <__d2b+0x52>
 80080a2:	a801      	add	r0, sp, #4
 80080a4:	f7ff fcde 	bl	8007a64 <__lo0bits>
 80080a8:	9b01      	ldr	r3, [sp, #4]
 80080aa:	6163      	str	r3, [r4, #20]
 80080ac:	2201      	movs	r2, #1
 80080ae:	6122      	str	r2, [r4, #16]
 80080b0:	3020      	adds	r0, #32
 80080b2:	e7e3      	b.n	800807c <__d2b+0x60>
 80080b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080bc:	f8c9 0000 	str.w	r0, [r9]
 80080c0:	6918      	ldr	r0, [r3, #16]
 80080c2:	f7ff fcaf 	bl	8007a24 <__hi0bits>
 80080c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080ca:	e7df      	b.n	800808c <__d2b+0x70>
 80080cc:	08009dd8 	.word	0x08009dd8
 80080d0:	08009e64 	.word	0x08009e64

080080d4 <__ratio>:
 80080d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	4688      	mov	r8, r1
 80080da:	4669      	mov	r1, sp
 80080dc:	4681      	mov	r9, r0
 80080de:	f7ff ff4d 	bl	8007f7c <__b2d>
 80080e2:	a901      	add	r1, sp, #4
 80080e4:	4640      	mov	r0, r8
 80080e6:	ec55 4b10 	vmov	r4, r5, d0
 80080ea:	f7ff ff47 	bl	8007f7c <__b2d>
 80080ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80080f6:	eba3 0c02 	sub.w	ip, r3, r2
 80080fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008104:	ec51 0b10 	vmov	r0, r1, d0
 8008108:	2b00      	cmp	r3, #0
 800810a:	bfd6      	itet	le
 800810c:	460a      	movle	r2, r1
 800810e:	462a      	movgt	r2, r5
 8008110:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008114:	468b      	mov	fp, r1
 8008116:	462f      	mov	r7, r5
 8008118:	bfd4      	ite	le
 800811a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800811e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008122:	4620      	mov	r0, r4
 8008124:	ee10 2a10 	vmov	r2, s0
 8008128:	465b      	mov	r3, fp
 800812a:	4639      	mov	r1, r7
 800812c:	f7f8 fba6 	bl	800087c <__aeabi_ddiv>
 8008130:	ec41 0b10 	vmov	d0, r0, r1
 8008134:	b003      	add	sp, #12
 8008136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800813a <__copybits>:
 800813a:	3901      	subs	r1, #1
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	1149      	asrs	r1, r1, #5
 8008140:	6914      	ldr	r4, [r2, #16]
 8008142:	3101      	adds	r1, #1
 8008144:	f102 0314 	add.w	r3, r2, #20
 8008148:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800814c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008150:	1f05      	subs	r5, r0, #4
 8008152:	42a3      	cmp	r3, r4
 8008154:	d30c      	bcc.n	8008170 <__copybits+0x36>
 8008156:	1aa3      	subs	r3, r4, r2
 8008158:	3b11      	subs	r3, #17
 800815a:	f023 0303 	bic.w	r3, r3, #3
 800815e:	3211      	adds	r2, #17
 8008160:	42a2      	cmp	r2, r4
 8008162:	bf88      	it	hi
 8008164:	2300      	movhi	r3, #0
 8008166:	4418      	add	r0, r3
 8008168:	2300      	movs	r3, #0
 800816a:	4288      	cmp	r0, r1
 800816c:	d305      	bcc.n	800817a <__copybits+0x40>
 800816e:	bd70      	pop	{r4, r5, r6, pc}
 8008170:	f853 6b04 	ldr.w	r6, [r3], #4
 8008174:	f845 6f04 	str.w	r6, [r5, #4]!
 8008178:	e7eb      	b.n	8008152 <__copybits+0x18>
 800817a:	f840 3b04 	str.w	r3, [r0], #4
 800817e:	e7f4      	b.n	800816a <__copybits+0x30>

08008180 <__any_on>:
 8008180:	f100 0214 	add.w	r2, r0, #20
 8008184:	6900      	ldr	r0, [r0, #16]
 8008186:	114b      	asrs	r3, r1, #5
 8008188:	4298      	cmp	r0, r3
 800818a:	b510      	push	{r4, lr}
 800818c:	db11      	blt.n	80081b2 <__any_on+0x32>
 800818e:	dd0a      	ble.n	80081a6 <__any_on+0x26>
 8008190:	f011 011f 	ands.w	r1, r1, #31
 8008194:	d007      	beq.n	80081a6 <__any_on+0x26>
 8008196:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800819a:	fa24 f001 	lsr.w	r0, r4, r1
 800819e:	fa00 f101 	lsl.w	r1, r0, r1
 80081a2:	428c      	cmp	r4, r1
 80081a4:	d10b      	bne.n	80081be <__any_on+0x3e>
 80081a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d803      	bhi.n	80081b6 <__any_on+0x36>
 80081ae:	2000      	movs	r0, #0
 80081b0:	bd10      	pop	{r4, pc}
 80081b2:	4603      	mov	r3, r0
 80081b4:	e7f7      	b.n	80081a6 <__any_on+0x26>
 80081b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081ba:	2900      	cmp	r1, #0
 80081bc:	d0f5      	beq.n	80081aa <__any_on+0x2a>
 80081be:	2001      	movs	r0, #1
 80081c0:	e7f6      	b.n	80081b0 <__any_on+0x30>

080081c2 <_calloc_r>:
 80081c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081c4:	fba1 2402 	umull	r2, r4, r1, r2
 80081c8:	b94c      	cbnz	r4, 80081de <_calloc_r+0x1c>
 80081ca:	4611      	mov	r1, r2
 80081cc:	9201      	str	r2, [sp, #4]
 80081ce:	f000 f87b 	bl	80082c8 <_malloc_r>
 80081d2:	9a01      	ldr	r2, [sp, #4]
 80081d4:	4605      	mov	r5, r0
 80081d6:	b930      	cbnz	r0, 80081e6 <_calloc_r+0x24>
 80081d8:	4628      	mov	r0, r5
 80081da:	b003      	add	sp, #12
 80081dc:	bd30      	pop	{r4, r5, pc}
 80081de:	220c      	movs	r2, #12
 80081e0:	6002      	str	r2, [r0, #0]
 80081e2:	2500      	movs	r5, #0
 80081e4:	e7f8      	b.n	80081d8 <_calloc_r+0x16>
 80081e6:	4621      	mov	r1, r4
 80081e8:	f7fc fb18 	bl	800481c <memset>
 80081ec:	e7f4      	b.n	80081d8 <_calloc_r+0x16>
	...

080081f0 <_free_r>:
 80081f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081f2:	2900      	cmp	r1, #0
 80081f4:	d044      	beq.n	8008280 <_free_r+0x90>
 80081f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081fa:	9001      	str	r0, [sp, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008202:	bfb8      	it	lt
 8008204:	18e4      	addlt	r4, r4, r3
 8008206:	f001 f88b 	bl	8009320 <__malloc_lock>
 800820a:	4a1e      	ldr	r2, [pc, #120]	; (8008284 <_free_r+0x94>)
 800820c:	9801      	ldr	r0, [sp, #4]
 800820e:	6813      	ldr	r3, [r2, #0]
 8008210:	b933      	cbnz	r3, 8008220 <_free_r+0x30>
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	6014      	str	r4, [r2, #0]
 8008216:	b003      	add	sp, #12
 8008218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800821c:	f001 b886 	b.w	800932c <__malloc_unlock>
 8008220:	42a3      	cmp	r3, r4
 8008222:	d908      	bls.n	8008236 <_free_r+0x46>
 8008224:	6825      	ldr	r5, [r4, #0]
 8008226:	1961      	adds	r1, r4, r5
 8008228:	428b      	cmp	r3, r1
 800822a:	bf01      	itttt	eq
 800822c:	6819      	ldreq	r1, [r3, #0]
 800822e:	685b      	ldreq	r3, [r3, #4]
 8008230:	1949      	addeq	r1, r1, r5
 8008232:	6021      	streq	r1, [r4, #0]
 8008234:	e7ed      	b.n	8008212 <_free_r+0x22>
 8008236:	461a      	mov	r2, r3
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	b10b      	cbz	r3, 8008240 <_free_r+0x50>
 800823c:	42a3      	cmp	r3, r4
 800823e:	d9fa      	bls.n	8008236 <_free_r+0x46>
 8008240:	6811      	ldr	r1, [r2, #0]
 8008242:	1855      	adds	r5, r2, r1
 8008244:	42a5      	cmp	r5, r4
 8008246:	d10b      	bne.n	8008260 <_free_r+0x70>
 8008248:	6824      	ldr	r4, [r4, #0]
 800824a:	4421      	add	r1, r4
 800824c:	1854      	adds	r4, r2, r1
 800824e:	42a3      	cmp	r3, r4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	d1e0      	bne.n	8008216 <_free_r+0x26>
 8008254:	681c      	ldr	r4, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	6053      	str	r3, [r2, #4]
 800825a:	4421      	add	r1, r4
 800825c:	6011      	str	r1, [r2, #0]
 800825e:	e7da      	b.n	8008216 <_free_r+0x26>
 8008260:	d902      	bls.n	8008268 <_free_r+0x78>
 8008262:	230c      	movs	r3, #12
 8008264:	6003      	str	r3, [r0, #0]
 8008266:	e7d6      	b.n	8008216 <_free_r+0x26>
 8008268:	6825      	ldr	r5, [r4, #0]
 800826a:	1961      	adds	r1, r4, r5
 800826c:	428b      	cmp	r3, r1
 800826e:	bf04      	itt	eq
 8008270:	6819      	ldreq	r1, [r3, #0]
 8008272:	685b      	ldreq	r3, [r3, #4]
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	bf04      	itt	eq
 8008278:	1949      	addeq	r1, r1, r5
 800827a:	6021      	streq	r1, [r4, #0]
 800827c:	6054      	str	r4, [r2, #4]
 800827e:	e7ca      	b.n	8008216 <_free_r+0x26>
 8008280:	b003      	add	sp, #12
 8008282:	bd30      	pop	{r4, r5, pc}
 8008284:	20000c20 	.word	0x20000c20

08008288 <sbrk_aligned>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	4e0e      	ldr	r6, [pc, #56]	; (80082c4 <sbrk_aligned+0x3c>)
 800828c:	460c      	mov	r4, r1
 800828e:	6831      	ldr	r1, [r6, #0]
 8008290:	4605      	mov	r5, r0
 8008292:	b911      	cbnz	r1, 800829a <sbrk_aligned+0x12>
 8008294:	f000 fd28 	bl	8008ce8 <_sbrk_r>
 8008298:	6030      	str	r0, [r6, #0]
 800829a:	4621      	mov	r1, r4
 800829c:	4628      	mov	r0, r5
 800829e:	f000 fd23 	bl	8008ce8 <_sbrk_r>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	d00a      	beq.n	80082bc <sbrk_aligned+0x34>
 80082a6:	1cc4      	adds	r4, r0, #3
 80082a8:	f024 0403 	bic.w	r4, r4, #3
 80082ac:	42a0      	cmp	r0, r4
 80082ae:	d007      	beq.n	80082c0 <sbrk_aligned+0x38>
 80082b0:	1a21      	subs	r1, r4, r0
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 fd18 	bl	8008ce8 <_sbrk_r>
 80082b8:	3001      	adds	r0, #1
 80082ba:	d101      	bne.n	80082c0 <sbrk_aligned+0x38>
 80082bc:	f04f 34ff 	mov.w	r4, #4294967295
 80082c0:	4620      	mov	r0, r4
 80082c2:	bd70      	pop	{r4, r5, r6, pc}
 80082c4:	20000c24 	.word	0x20000c24

080082c8 <_malloc_r>:
 80082c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082cc:	1ccd      	adds	r5, r1, #3
 80082ce:	f025 0503 	bic.w	r5, r5, #3
 80082d2:	3508      	adds	r5, #8
 80082d4:	2d0c      	cmp	r5, #12
 80082d6:	bf38      	it	cc
 80082d8:	250c      	movcc	r5, #12
 80082da:	2d00      	cmp	r5, #0
 80082dc:	4607      	mov	r7, r0
 80082de:	db01      	blt.n	80082e4 <_malloc_r+0x1c>
 80082e0:	42a9      	cmp	r1, r5
 80082e2:	d905      	bls.n	80082f0 <_malloc_r+0x28>
 80082e4:	230c      	movs	r3, #12
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	2600      	movs	r6, #0
 80082ea:	4630      	mov	r0, r6
 80082ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f0:	4e2e      	ldr	r6, [pc, #184]	; (80083ac <_malloc_r+0xe4>)
 80082f2:	f001 f815 	bl	8009320 <__malloc_lock>
 80082f6:	6833      	ldr	r3, [r6, #0]
 80082f8:	461c      	mov	r4, r3
 80082fa:	bb34      	cbnz	r4, 800834a <_malloc_r+0x82>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4638      	mov	r0, r7
 8008300:	f7ff ffc2 	bl	8008288 <sbrk_aligned>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	4604      	mov	r4, r0
 8008308:	d14d      	bne.n	80083a6 <_malloc_r+0xde>
 800830a:	6834      	ldr	r4, [r6, #0]
 800830c:	4626      	mov	r6, r4
 800830e:	2e00      	cmp	r6, #0
 8008310:	d140      	bne.n	8008394 <_malloc_r+0xcc>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	4631      	mov	r1, r6
 8008316:	4638      	mov	r0, r7
 8008318:	eb04 0803 	add.w	r8, r4, r3
 800831c:	f000 fce4 	bl	8008ce8 <_sbrk_r>
 8008320:	4580      	cmp	r8, r0
 8008322:	d13a      	bne.n	800839a <_malloc_r+0xd2>
 8008324:	6821      	ldr	r1, [r4, #0]
 8008326:	3503      	adds	r5, #3
 8008328:	1a6d      	subs	r5, r5, r1
 800832a:	f025 0503 	bic.w	r5, r5, #3
 800832e:	3508      	adds	r5, #8
 8008330:	2d0c      	cmp	r5, #12
 8008332:	bf38      	it	cc
 8008334:	250c      	movcc	r5, #12
 8008336:	4629      	mov	r1, r5
 8008338:	4638      	mov	r0, r7
 800833a:	f7ff ffa5 	bl	8008288 <sbrk_aligned>
 800833e:	3001      	adds	r0, #1
 8008340:	d02b      	beq.n	800839a <_malloc_r+0xd2>
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	442b      	add	r3, r5
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	e00e      	b.n	8008368 <_malloc_r+0xa0>
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	1b52      	subs	r2, r2, r5
 800834e:	d41e      	bmi.n	800838e <_malloc_r+0xc6>
 8008350:	2a0b      	cmp	r2, #11
 8008352:	d916      	bls.n	8008382 <_malloc_r+0xba>
 8008354:	1961      	adds	r1, r4, r5
 8008356:	42a3      	cmp	r3, r4
 8008358:	6025      	str	r5, [r4, #0]
 800835a:	bf18      	it	ne
 800835c:	6059      	strne	r1, [r3, #4]
 800835e:	6863      	ldr	r3, [r4, #4]
 8008360:	bf08      	it	eq
 8008362:	6031      	streq	r1, [r6, #0]
 8008364:	5162      	str	r2, [r4, r5]
 8008366:	604b      	str	r3, [r1, #4]
 8008368:	4638      	mov	r0, r7
 800836a:	f104 060b 	add.w	r6, r4, #11
 800836e:	f000 ffdd 	bl	800932c <__malloc_unlock>
 8008372:	f026 0607 	bic.w	r6, r6, #7
 8008376:	1d23      	adds	r3, r4, #4
 8008378:	1af2      	subs	r2, r6, r3
 800837a:	d0b6      	beq.n	80082ea <_malloc_r+0x22>
 800837c:	1b9b      	subs	r3, r3, r6
 800837e:	50a3      	str	r3, [r4, r2]
 8008380:	e7b3      	b.n	80082ea <_malloc_r+0x22>
 8008382:	6862      	ldr	r2, [r4, #4]
 8008384:	42a3      	cmp	r3, r4
 8008386:	bf0c      	ite	eq
 8008388:	6032      	streq	r2, [r6, #0]
 800838a:	605a      	strne	r2, [r3, #4]
 800838c:	e7ec      	b.n	8008368 <_malloc_r+0xa0>
 800838e:	4623      	mov	r3, r4
 8008390:	6864      	ldr	r4, [r4, #4]
 8008392:	e7b2      	b.n	80082fa <_malloc_r+0x32>
 8008394:	4634      	mov	r4, r6
 8008396:	6876      	ldr	r6, [r6, #4]
 8008398:	e7b9      	b.n	800830e <_malloc_r+0x46>
 800839a:	230c      	movs	r3, #12
 800839c:	603b      	str	r3, [r7, #0]
 800839e:	4638      	mov	r0, r7
 80083a0:	f000 ffc4 	bl	800932c <__malloc_unlock>
 80083a4:	e7a1      	b.n	80082ea <_malloc_r+0x22>
 80083a6:	6025      	str	r5, [r4, #0]
 80083a8:	e7de      	b.n	8008368 <_malloc_r+0xa0>
 80083aa:	bf00      	nop
 80083ac:	20000c20 	.word	0x20000c20

080083b0 <__ssputs_r>:
 80083b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	688e      	ldr	r6, [r1, #8]
 80083b6:	429e      	cmp	r6, r3
 80083b8:	4682      	mov	sl, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	4690      	mov	r8, r2
 80083be:	461f      	mov	r7, r3
 80083c0:	d838      	bhi.n	8008434 <__ssputs_r+0x84>
 80083c2:	898a      	ldrh	r2, [r1, #12]
 80083c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083c8:	d032      	beq.n	8008430 <__ssputs_r+0x80>
 80083ca:	6825      	ldr	r5, [r4, #0]
 80083cc:	6909      	ldr	r1, [r1, #16]
 80083ce:	eba5 0901 	sub.w	r9, r5, r1
 80083d2:	6965      	ldr	r5, [r4, #20]
 80083d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083dc:	3301      	adds	r3, #1
 80083de:	444b      	add	r3, r9
 80083e0:	106d      	asrs	r5, r5, #1
 80083e2:	429d      	cmp	r5, r3
 80083e4:	bf38      	it	cc
 80083e6:	461d      	movcc	r5, r3
 80083e8:	0553      	lsls	r3, r2, #21
 80083ea:	d531      	bpl.n	8008450 <__ssputs_r+0xa0>
 80083ec:	4629      	mov	r1, r5
 80083ee:	f7ff ff6b 	bl	80082c8 <_malloc_r>
 80083f2:	4606      	mov	r6, r0
 80083f4:	b950      	cbnz	r0, 800840c <__ssputs_r+0x5c>
 80083f6:	230c      	movs	r3, #12
 80083f8:	f8ca 3000 	str.w	r3, [sl]
 80083fc:	89a3      	ldrh	r3, [r4, #12]
 80083fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840c:	6921      	ldr	r1, [r4, #16]
 800840e:	464a      	mov	r2, r9
 8008410:	f7ff fa08 	bl	8007824 <memcpy>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800841a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800841e:	81a3      	strh	r3, [r4, #12]
 8008420:	6126      	str	r6, [r4, #16]
 8008422:	6165      	str	r5, [r4, #20]
 8008424:	444e      	add	r6, r9
 8008426:	eba5 0509 	sub.w	r5, r5, r9
 800842a:	6026      	str	r6, [r4, #0]
 800842c:	60a5      	str	r5, [r4, #8]
 800842e:	463e      	mov	r6, r7
 8008430:	42be      	cmp	r6, r7
 8008432:	d900      	bls.n	8008436 <__ssputs_r+0x86>
 8008434:	463e      	mov	r6, r7
 8008436:	6820      	ldr	r0, [r4, #0]
 8008438:	4632      	mov	r2, r6
 800843a:	4641      	mov	r1, r8
 800843c:	f000 ff56 	bl	80092ec <memmove>
 8008440:	68a3      	ldr	r3, [r4, #8]
 8008442:	1b9b      	subs	r3, r3, r6
 8008444:	60a3      	str	r3, [r4, #8]
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	4433      	add	r3, r6
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	2000      	movs	r0, #0
 800844e:	e7db      	b.n	8008408 <__ssputs_r+0x58>
 8008450:	462a      	mov	r2, r5
 8008452:	f000 ff71 	bl	8009338 <_realloc_r>
 8008456:	4606      	mov	r6, r0
 8008458:	2800      	cmp	r0, #0
 800845a:	d1e1      	bne.n	8008420 <__ssputs_r+0x70>
 800845c:	6921      	ldr	r1, [r4, #16]
 800845e:	4650      	mov	r0, sl
 8008460:	f7ff fec6 	bl	80081f0 <_free_r>
 8008464:	e7c7      	b.n	80083f6 <__ssputs_r+0x46>
	...

08008468 <_svfiprintf_r>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	4698      	mov	r8, r3
 800846e:	898b      	ldrh	r3, [r1, #12]
 8008470:	061b      	lsls	r3, r3, #24
 8008472:	b09d      	sub	sp, #116	; 0x74
 8008474:	4607      	mov	r7, r0
 8008476:	460d      	mov	r5, r1
 8008478:	4614      	mov	r4, r2
 800847a:	d50e      	bpl.n	800849a <_svfiprintf_r+0x32>
 800847c:	690b      	ldr	r3, [r1, #16]
 800847e:	b963      	cbnz	r3, 800849a <_svfiprintf_r+0x32>
 8008480:	2140      	movs	r1, #64	; 0x40
 8008482:	f7ff ff21 	bl	80082c8 <_malloc_r>
 8008486:	6028      	str	r0, [r5, #0]
 8008488:	6128      	str	r0, [r5, #16]
 800848a:	b920      	cbnz	r0, 8008496 <_svfiprintf_r+0x2e>
 800848c:	230c      	movs	r3, #12
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e0d1      	b.n	800863a <_svfiprintf_r+0x1d2>
 8008496:	2340      	movs	r3, #64	; 0x40
 8008498:	616b      	str	r3, [r5, #20]
 800849a:	2300      	movs	r3, #0
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	2320      	movs	r3, #32
 80084a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084a8:	2330      	movs	r3, #48	; 0x30
 80084aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008654 <_svfiprintf_r+0x1ec>
 80084ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084b2:	f04f 0901 	mov.w	r9, #1
 80084b6:	4623      	mov	r3, r4
 80084b8:	469a      	mov	sl, r3
 80084ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084be:	b10a      	cbz	r2, 80084c4 <_svfiprintf_r+0x5c>
 80084c0:	2a25      	cmp	r2, #37	; 0x25
 80084c2:	d1f9      	bne.n	80084b8 <_svfiprintf_r+0x50>
 80084c4:	ebba 0b04 	subs.w	fp, sl, r4
 80084c8:	d00b      	beq.n	80084e2 <_svfiprintf_r+0x7a>
 80084ca:	465b      	mov	r3, fp
 80084cc:	4622      	mov	r2, r4
 80084ce:	4629      	mov	r1, r5
 80084d0:	4638      	mov	r0, r7
 80084d2:	f7ff ff6d 	bl	80083b0 <__ssputs_r>
 80084d6:	3001      	adds	r0, #1
 80084d8:	f000 80aa 	beq.w	8008630 <_svfiprintf_r+0x1c8>
 80084dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084de:	445a      	add	r2, fp
 80084e0:	9209      	str	r2, [sp, #36]	; 0x24
 80084e2:	f89a 3000 	ldrb.w	r3, [sl]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 80a2 	beq.w	8008630 <_svfiprintf_r+0x1c8>
 80084ec:	2300      	movs	r3, #0
 80084ee:	f04f 32ff 	mov.w	r2, #4294967295
 80084f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084f6:	f10a 0a01 	add.w	sl, sl, #1
 80084fa:	9304      	str	r3, [sp, #16]
 80084fc:	9307      	str	r3, [sp, #28]
 80084fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008502:	931a      	str	r3, [sp, #104]	; 0x68
 8008504:	4654      	mov	r4, sl
 8008506:	2205      	movs	r2, #5
 8008508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800850c:	4851      	ldr	r0, [pc, #324]	; (8008654 <_svfiprintf_r+0x1ec>)
 800850e:	f7f7 fe7f 	bl	8000210 <memchr>
 8008512:	9a04      	ldr	r2, [sp, #16]
 8008514:	b9d8      	cbnz	r0, 800854e <_svfiprintf_r+0xe6>
 8008516:	06d0      	lsls	r0, r2, #27
 8008518:	bf44      	itt	mi
 800851a:	2320      	movmi	r3, #32
 800851c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008520:	0711      	lsls	r1, r2, #28
 8008522:	bf44      	itt	mi
 8008524:	232b      	movmi	r3, #43	; 0x2b
 8008526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800852a:	f89a 3000 	ldrb.w	r3, [sl]
 800852e:	2b2a      	cmp	r3, #42	; 0x2a
 8008530:	d015      	beq.n	800855e <_svfiprintf_r+0xf6>
 8008532:	9a07      	ldr	r2, [sp, #28]
 8008534:	4654      	mov	r4, sl
 8008536:	2000      	movs	r0, #0
 8008538:	f04f 0c0a 	mov.w	ip, #10
 800853c:	4621      	mov	r1, r4
 800853e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008542:	3b30      	subs	r3, #48	; 0x30
 8008544:	2b09      	cmp	r3, #9
 8008546:	d94e      	bls.n	80085e6 <_svfiprintf_r+0x17e>
 8008548:	b1b0      	cbz	r0, 8008578 <_svfiprintf_r+0x110>
 800854a:	9207      	str	r2, [sp, #28]
 800854c:	e014      	b.n	8008578 <_svfiprintf_r+0x110>
 800854e:	eba0 0308 	sub.w	r3, r0, r8
 8008552:	fa09 f303 	lsl.w	r3, r9, r3
 8008556:	4313      	orrs	r3, r2
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	46a2      	mov	sl, r4
 800855c:	e7d2      	b.n	8008504 <_svfiprintf_r+0x9c>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	1d19      	adds	r1, r3, #4
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	9103      	str	r1, [sp, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfbb      	ittet	lt
 800856a:	425b      	neglt	r3, r3
 800856c:	f042 0202 	orrlt.w	r2, r2, #2
 8008570:	9307      	strge	r3, [sp, #28]
 8008572:	9307      	strlt	r3, [sp, #28]
 8008574:	bfb8      	it	lt
 8008576:	9204      	strlt	r2, [sp, #16]
 8008578:	7823      	ldrb	r3, [r4, #0]
 800857a:	2b2e      	cmp	r3, #46	; 0x2e
 800857c:	d10c      	bne.n	8008598 <_svfiprintf_r+0x130>
 800857e:	7863      	ldrb	r3, [r4, #1]
 8008580:	2b2a      	cmp	r3, #42	; 0x2a
 8008582:	d135      	bne.n	80085f0 <_svfiprintf_r+0x188>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	9203      	str	r2, [sp, #12]
 800858c:	2b00      	cmp	r3, #0
 800858e:	bfb8      	it	lt
 8008590:	f04f 33ff 	movlt.w	r3, #4294967295
 8008594:	3402      	adds	r4, #2
 8008596:	9305      	str	r3, [sp, #20]
 8008598:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008664 <_svfiprintf_r+0x1fc>
 800859c:	7821      	ldrb	r1, [r4, #0]
 800859e:	2203      	movs	r2, #3
 80085a0:	4650      	mov	r0, sl
 80085a2:	f7f7 fe35 	bl	8000210 <memchr>
 80085a6:	b140      	cbz	r0, 80085ba <_svfiprintf_r+0x152>
 80085a8:	2340      	movs	r3, #64	; 0x40
 80085aa:	eba0 000a 	sub.w	r0, r0, sl
 80085ae:	fa03 f000 	lsl.w	r0, r3, r0
 80085b2:	9b04      	ldr	r3, [sp, #16]
 80085b4:	4303      	orrs	r3, r0
 80085b6:	3401      	adds	r4, #1
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085be:	4826      	ldr	r0, [pc, #152]	; (8008658 <_svfiprintf_r+0x1f0>)
 80085c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085c4:	2206      	movs	r2, #6
 80085c6:	f7f7 fe23 	bl	8000210 <memchr>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d038      	beq.n	8008640 <_svfiprintf_r+0x1d8>
 80085ce:	4b23      	ldr	r3, [pc, #140]	; (800865c <_svfiprintf_r+0x1f4>)
 80085d0:	bb1b      	cbnz	r3, 800861a <_svfiprintf_r+0x1b2>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	3307      	adds	r3, #7
 80085d6:	f023 0307 	bic.w	r3, r3, #7
 80085da:	3308      	adds	r3, #8
 80085dc:	9303      	str	r3, [sp, #12]
 80085de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e0:	4433      	add	r3, r6
 80085e2:	9309      	str	r3, [sp, #36]	; 0x24
 80085e4:	e767      	b.n	80084b6 <_svfiprintf_r+0x4e>
 80085e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ea:	460c      	mov	r4, r1
 80085ec:	2001      	movs	r0, #1
 80085ee:	e7a5      	b.n	800853c <_svfiprintf_r+0xd4>
 80085f0:	2300      	movs	r3, #0
 80085f2:	3401      	adds	r4, #1
 80085f4:	9305      	str	r3, [sp, #20]
 80085f6:	4619      	mov	r1, r3
 80085f8:	f04f 0c0a 	mov.w	ip, #10
 80085fc:	4620      	mov	r0, r4
 80085fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008602:	3a30      	subs	r2, #48	; 0x30
 8008604:	2a09      	cmp	r2, #9
 8008606:	d903      	bls.n	8008610 <_svfiprintf_r+0x1a8>
 8008608:	2b00      	cmp	r3, #0
 800860a:	d0c5      	beq.n	8008598 <_svfiprintf_r+0x130>
 800860c:	9105      	str	r1, [sp, #20]
 800860e:	e7c3      	b.n	8008598 <_svfiprintf_r+0x130>
 8008610:	fb0c 2101 	mla	r1, ip, r1, r2
 8008614:	4604      	mov	r4, r0
 8008616:	2301      	movs	r3, #1
 8008618:	e7f0      	b.n	80085fc <_svfiprintf_r+0x194>
 800861a:	ab03      	add	r3, sp, #12
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	462a      	mov	r2, r5
 8008620:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <_svfiprintf_r+0x1f8>)
 8008622:	a904      	add	r1, sp, #16
 8008624:	4638      	mov	r0, r7
 8008626:	f7fc f9a1 	bl	800496c <_printf_float>
 800862a:	1c42      	adds	r2, r0, #1
 800862c:	4606      	mov	r6, r0
 800862e:	d1d6      	bne.n	80085de <_svfiprintf_r+0x176>
 8008630:	89ab      	ldrh	r3, [r5, #12]
 8008632:	065b      	lsls	r3, r3, #25
 8008634:	f53f af2c 	bmi.w	8008490 <_svfiprintf_r+0x28>
 8008638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800863a:	b01d      	add	sp, #116	; 0x74
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	ab03      	add	r3, sp, #12
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	462a      	mov	r2, r5
 8008646:	4b06      	ldr	r3, [pc, #24]	; (8008660 <_svfiprintf_r+0x1f8>)
 8008648:	a904      	add	r1, sp, #16
 800864a:	4638      	mov	r0, r7
 800864c:	f7fc fc32 	bl	8004eb4 <_printf_i>
 8008650:	e7eb      	b.n	800862a <_svfiprintf_r+0x1c2>
 8008652:	bf00      	nop
 8008654:	08009fbc 	.word	0x08009fbc
 8008658:	08009fc6 	.word	0x08009fc6
 800865c:	0800496d 	.word	0x0800496d
 8008660:	080083b1 	.word	0x080083b1
 8008664:	08009fc2 	.word	0x08009fc2

08008668 <_sungetc_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	1c4b      	adds	r3, r1, #1
 800866c:	4614      	mov	r4, r2
 800866e:	d103      	bne.n	8008678 <_sungetc_r+0x10>
 8008670:	f04f 35ff 	mov.w	r5, #4294967295
 8008674:	4628      	mov	r0, r5
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	8993      	ldrh	r3, [r2, #12]
 800867a:	f023 0320 	bic.w	r3, r3, #32
 800867e:	8193      	strh	r3, [r2, #12]
 8008680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008682:	6852      	ldr	r2, [r2, #4]
 8008684:	b2cd      	uxtb	r5, r1
 8008686:	b18b      	cbz	r3, 80086ac <_sungetc_r+0x44>
 8008688:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800868a:	4293      	cmp	r3, r2
 800868c:	dd08      	ble.n	80086a0 <_sungetc_r+0x38>
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	1e5a      	subs	r2, r3, #1
 8008692:	6022      	str	r2, [r4, #0]
 8008694:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008698:	6863      	ldr	r3, [r4, #4]
 800869a:	3301      	adds	r3, #1
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	e7e9      	b.n	8008674 <_sungetc_r+0xc>
 80086a0:	4621      	mov	r1, r4
 80086a2:	f000 fbf1 	bl	8008e88 <__submore>
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d0f1      	beq.n	800868e <_sungetc_r+0x26>
 80086aa:	e7e1      	b.n	8008670 <_sungetc_r+0x8>
 80086ac:	6921      	ldr	r1, [r4, #16]
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	b151      	cbz	r1, 80086c8 <_sungetc_r+0x60>
 80086b2:	4299      	cmp	r1, r3
 80086b4:	d208      	bcs.n	80086c8 <_sungetc_r+0x60>
 80086b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80086ba:	42a9      	cmp	r1, r5
 80086bc:	d104      	bne.n	80086c8 <_sungetc_r+0x60>
 80086be:	3b01      	subs	r3, #1
 80086c0:	3201      	adds	r2, #1
 80086c2:	6023      	str	r3, [r4, #0]
 80086c4:	6062      	str	r2, [r4, #4]
 80086c6:	e7d5      	b.n	8008674 <_sungetc_r+0xc>
 80086c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80086cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086d0:	6363      	str	r3, [r4, #52]	; 0x34
 80086d2:	2303      	movs	r3, #3
 80086d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80086d6:	4623      	mov	r3, r4
 80086d8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	2301      	movs	r3, #1
 80086e0:	e7dc      	b.n	800869c <_sungetc_r+0x34>

080086e2 <__ssrefill_r>:
 80086e2:	b510      	push	{r4, lr}
 80086e4:	460c      	mov	r4, r1
 80086e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80086e8:	b169      	cbz	r1, 8008706 <__ssrefill_r+0x24>
 80086ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086ee:	4299      	cmp	r1, r3
 80086f0:	d001      	beq.n	80086f6 <__ssrefill_r+0x14>
 80086f2:	f7ff fd7d 	bl	80081f0 <_free_r>
 80086f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	2000      	movs	r0, #0
 80086fc:	6360      	str	r0, [r4, #52]	; 0x34
 80086fe:	b113      	cbz	r3, 8008706 <__ssrefill_r+0x24>
 8008700:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008702:	6023      	str	r3, [r4, #0]
 8008704:	bd10      	pop	{r4, pc}
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	2300      	movs	r3, #0
 800870c:	6063      	str	r3, [r4, #4]
 800870e:	89a3      	ldrh	r3, [r4, #12]
 8008710:	f043 0320 	orr.w	r3, r3, #32
 8008714:	81a3      	strh	r3, [r4, #12]
 8008716:	f04f 30ff 	mov.w	r0, #4294967295
 800871a:	e7f3      	b.n	8008704 <__ssrefill_r+0x22>

0800871c <__ssvfiscanf_r>:
 800871c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	460c      	mov	r4, r1
 8008722:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008726:	2100      	movs	r1, #0
 8008728:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800872c:	49a6      	ldr	r1, [pc, #664]	; (80089c8 <__ssvfiscanf_r+0x2ac>)
 800872e:	91a0      	str	r1, [sp, #640]	; 0x280
 8008730:	f10d 0804 	add.w	r8, sp, #4
 8008734:	49a5      	ldr	r1, [pc, #660]	; (80089cc <__ssvfiscanf_r+0x2b0>)
 8008736:	4fa6      	ldr	r7, [pc, #664]	; (80089d0 <__ssvfiscanf_r+0x2b4>)
 8008738:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80089d4 <__ssvfiscanf_r+0x2b8>
 800873c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008740:	4606      	mov	r6, r0
 8008742:	91a1      	str	r1, [sp, #644]	; 0x284
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	7813      	ldrb	r3, [r2, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 815a 	beq.w	8008a02 <__ssvfiscanf_r+0x2e6>
 800874e:	5dd9      	ldrb	r1, [r3, r7]
 8008750:	f011 0108 	ands.w	r1, r1, #8
 8008754:	f102 0501 	add.w	r5, r2, #1
 8008758:	d019      	beq.n	800878e <__ssvfiscanf_r+0x72>
 800875a:	6863      	ldr	r3, [r4, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	dd0f      	ble.n	8008780 <__ssvfiscanf_r+0x64>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	5cba      	ldrb	r2, [r7, r2]
 8008766:	0712      	lsls	r2, r2, #28
 8008768:	d401      	bmi.n	800876e <__ssvfiscanf_r+0x52>
 800876a:	462a      	mov	r2, r5
 800876c:	e7eb      	b.n	8008746 <__ssvfiscanf_r+0x2a>
 800876e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008770:	3201      	adds	r2, #1
 8008772:	9245      	str	r2, [sp, #276]	; 0x114
 8008774:	6862      	ldr	r2, [r4, #4]
 8008776:	3301      	adds	r3, #1
 8008778:	3a01      	subs	r2, #1
 800877a:	6062      	str	r2, [r4, #4]
 800877c:	6023      	str	r3, [r4, #0]
 800877e:	e7ec      	b.n	800875a <__ssvfiscanf_r+0x3e>
 8008780:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008782:	4621      	mov	r1, r4
 8008784:	4630      	mov	r0, r6
 8008786:	4798      	blx	r3
 8008788:	2800      	cmp	r0, #0
 800878a:	d0e9      	beq.n	8008760 <__ssvfiscanf_r+0x44>
 800878c:	e7ed      	b.n	800876a <__ssvfiscanf_r+0x4e>
 800878e:	2b25      	cmp	r3, #37	; 0x25
 8008790:	d012      	beq.n	80087b8 <__ssvfiscanf_r+0x9c>
 8008792:	469a      	mov	sl, r3
 8008794:	6863      	ldr	r3, [r4, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f340 8091 	ble.w	80088be <__ssvfiscanf_r+0x1a2>
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	7813      	ldrb	r3, [r2, #0]
 80087a0:	4553      	cmp	r3, sl
 80087a2:	f040 812e 	bne.w	8008a02 <__ssvfiscanf_r+0x2e6>
 80087a6:	6863      	ldr	r3, [r4, #4]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	6063      	str	r3, [r4, #4]
 80087ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80087ae:	3201      	adds	r2, #1
 80087b0:	3301      	adds	r3, #1
 80087b2:	6022      	str	r2, [r4, #0]
 80087b4:	9345      	str	r3, [sp, #276]	; 0x114
 80087b6:	e7d8      	b.n	800876a <__ssvfiscanf_r+0x4e>
 80087b8:	9141      	str	r1, [sp, #260]	; 0x104
 80087ba:	9143      	str	r1, [sp, #268]	; 0x10c
 80087bc:	7853      	ldrb	r3, [r2, #1]
 80087be:	2b2a      	cmp	r3, #42	; 0x2a
 80087c0:	bf02      	ittt	eq
 80087c2:	2310      	moveq	r3, #16
 80087c4:	1c95      	addeq	r5, r2, #2
 80087c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80087c8:	220a      	movs	r2, #10
 80087ca:	46aa      	mov	sl, r5
 80087cc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80087d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d91d      	bls.n	8008814 <__ssvfiscanf_r+0xf8>
 80087d8:	487e      	ldr	r0, [pc, #504]	; (80089d4 <__ssvfiscanf_r+0x2b8>)
 80087da:	2203      	movs	r2, #3
 80087dc:	f7f7 fd18 	bl	8000210 <memchr>
 80087e0:	b140      	cbz	r0, 80087f4 <__ssvfiscanf_r+0xd8>
 80087e2:	2301      	movs	r3, #1
 80087e4:	eba0 0009 	sub.w	r0, r0, r9
 80087e8:	fa03 f000 	lsl.w	r0, r3, r0
 80087ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087ee:	4318      	orrs	r0, r3
 80087f0:	9041      	str	r0, [sp, #260]	; 0x104
 80087f2:	4655      	mov	r5, sl
 80087f4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80087f8:	2b78      	cmp	r3, #120	; 0x78
 80087fa:	d806      	bhi.n	800880a <__ssvfiscanf_r+0xee>
 80087fc:	2b57      	cmp	r3, #87	; 0x57
 80087fe:	d810      	bhi.n	8008822 <__ssvfiscanf_r+0x106>
 8008800:	2b25      	cmp	r3, #37	; 0x25
 8008802:	d0c6      	beq.n	8008792 <__ssvfiscanf_r+0x76>
 8008804:	d856      	bhi.n	80088b4 <__ssvfiscanf_r+0x198>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d064      	beq.n	80088d4 <__ssvfiscanf_r+0x1b8>
 800880a:	2303      	movs	r3, #3
 800880c:	9347      	str	r3, [sp, #284]	; 0x11c
 800880e:	230a      	movs	r3, #10
 8008810:	9342      	str	r3, [sp, #264]	; 0x108
 8008812:	e071      	b.n	80088f8 <__ssvfiscanf_r+0x1dc>
 8008814:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008816:	fb02 1103 	mla	r1, r2, r3, r1
 800881a:	3930      	subs	r1, #48	; 0x30
 800881c:	9143      	str	r1, [sp, #268]	; 0x10c
 800881e:	4655      	mov	r5, sl
 8008820:	e7d3      	b.n	80087ca <__ssvfiscanf_r+0xae>
 8008822:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008826:	2a20      	cmp	r2, #32
 8008828:	d8ef      	bhi.n	800880a <__ssvfiscanf_r+0xee>
 800882a:	a101      	add	r1, pc, #4	; (adr r1, 8008830 <__ssvfiscanf_r+0x114>)
 800882c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008830:	080088e3 	.word	0x080088e3
 8008834:	0800880b 	.word	0x0800880b
 8008838:	0800880b 	.word	0x0800880b
 800883c:	08008941 	.word	0x08008941
 8008840:	0800880b 	.word	0x0800880b
 8008844:	0800880b 	.word	0x0800880b
 8008848:	0800880b 	.word	0x0800880b
 800884c:	0800880b 	.word	0x0800880b
 8008850:	0800880b 	.word	0x0800880b
 8008854:	0800880b 	.word	0x0800880b
 8008858:	0800880b 	.word	0x0800880b
 800885c:	08008957 	.word	0x08008957
 8008860:	0800892d 	.word	0x0800892d
 8008864:	080088bb 	.word	0x080088bb
 8008868:	080088bb 	.word	0x080088bb
 800886c:	080088bb 	.word	0x080088bb
 8008870:	0800880b 	.word	0x0800880b
 8008874:	08008931 	.word	0x08008931
 8008878:	0800880b 	.word	0x0800880b
 800887c:	0800880b 	.word	0x0800880b
 8008880:	0800880b 	.word	0x0800880b
 8008884:	0800880b 	.word	0x0800880b
 8008888:	08008967 	.word	0x08008967
 800888c:	08008939 	.word	0x08008939
 8008890:	080088db 	.word	0x080088db
 8008894:	0800880b 	.word	0x0800880b
 8008898:	0800880b 	.word	0x0800880b
 800889c:	08008963 	.word	0x08008963
 80088a0:	0800880b 	.word	0x0800880b
 80088a4:	0800892d 	.word	0x0800892d
 80088a8:	0800880b 	.word	0x0800880b
 80088ac:	0800880b 	.word	0x0800880b
 80088b0:	080088e3 	.word	0x080088e3
 80088b4:	3b45      	subs	r3, #69	; 0x45
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d8a7      	bhi.n	800880a <__ssvfiscanf_r+0xee>
 80088ba:	2305      	movs	r3, #5
 80088bc:	e01b      	b.n	80088f6 <__ssvfiscanf_r+0x1da>
 80088be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80088c0:	4621      	mov	r1, r4
 80088c2:	4630      	mov	r0, r6
 80088c4:	4798      	blx	r3
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f43f af68 	beq.w	800879c <__ssvfiscanf_r+0x80>
 80088cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f040 808d 	bne.w	80089ee <__ssvfiscanf_r+0x2d2>
 80088d4:	f04f 30ff 	mov.w	r0, #4294967295
 80088d8:	e08f      	b.n	80089fa <__ssvfiscanf_r+0x2de>
 80088da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80088dc:	f042 0220 	orr.w	r2, r2, #32
 80088e0:	9241      	str	r2, [sp, #260]	; 0x104
 80088e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80088e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088e8:	9241      	str	r2, [sp, #260]	; 0x104
 80088ea:	2210      	movs	r2, #16
 80088ec:	2b6f      	cmp	r3, #111	; 0x6f
 80088ee:	9242      	str	r2, [sp, #264]	; 0x108
 80088f0:	bf34      	ite	cc
 80088f2:	2303      	movcc	r3, #3
 80088f4:	2304      	movcs	r3, #4
 80088f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80088f8:	6863      	ldr	r3, [r4, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dd42      	ble.n	8008984 <__ssvfiscanf_r+0x268>
 80088fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008900:	0659      	lsls	r1, r3, #25
 8008902:	d404      	bmi.n	800890e <__ssvfiscanf_r+0x1f2>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	5cba      	ldrb	r2, [r7, r2]
 800890a:	0712      	lsls	r2, r2, #28
 800890c:	d441      	bmi.n	8008992 <__ssvfiscanf_r+0x276>
 800890e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008910:	2b02      	cmp	r3, #2
 8008912:	dc50      	bgt.n	80089b6 <__ssvfiscanf_r+0x29a>
 8008914:	466b      	mov	r3, sp
 8008916:	4622      	mov	r2, r4
 8008918:	a941      	add	r1, sp, #260	; 0x104
 800891a:	4630      	mov	r0, r6
 800891c:	f000 f876 	bl	8008a0c <_scanf_chars>
 8008920:	2801      	cmp	r0, #1
 8008922:	d06e      	beq.n	8008a02 <__ssvfiscanf_r+0x2e6>
 8008924:	2802      	cmp	r0, #2
 8008926:	f47f af20 	bne.w	800876a <__ssvfiscanf_r+0x4e>
 800892a:	e7cf      	b.n	80088cc <__ssvfiscanf_r+0x1b0>
 800892c:	220a      	movs	r2, #10
 800892e:	e7dd      	b.n	80088ec <__ssvfiscanf_r+0x1d0>
 8008930:	2300      	movs	r3, #0
 8008932:	9342      	str	r3, [sp, #264]	; 0x108
 8008934:	2303      	movs	r3, #3
 8008936:	e7de      	b.n	80088f6 <__ssvfiscanf_r+0x1da>
 8008938:	2308      	movs	r3, #8
 800893a:	9342      	str	r3, [sp, #264]	; 0x108
 800893c:	2304      	movs	r3, #4
 800893e:	e7da      	b.n	80088f6 <__ssvfiscanf_r+0x1da>
 8008940:	4629      	mov	r1, r5
 8008942:	4640      	mov	r0, r8
 8008944:	f000 f9e0 	bl	8008d08 <__sccl>
 8008948:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800894a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800894e:	9341      	str	r3, [sp, #260]	; 0x104
 8008950:	4605      	mov	r5, r0
 8008952:	2301      	movs	r3, #1
 8008954:	e7cf      	b.n	80088f6 <__ssvfiscanf_r+0x1da>
 8008956:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895c:	9341      	str	r3, [sp, #260]	; 0x104
 800895e:	2300      	movs	r3, #0
 8008960:	e7c9      	b.n	80088f6 <__ssvfiscanf_r+0x1da>
 8008962:	2302      	movs	r3, #2
 8008964:	e7c7      	b.n	80088f6 <__ssvfiscanf_r+0x1da>
 8008966:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008968:	06c3      	lsls	r3, r0, #27
 800896a:	f53f aefe 	bmi.w	800876a <__ssvfiscanf_r+0x4e>
 800896e:	9b00      	ldr	r3, [sp, #0]
 8008970:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008972:	1d19      	adds	r1, r3, #4
 8008974:	9100      	str	r1, [sp, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f010 0f01 	tst.w	r0, #1
 800897c:	bf14      	ite	ne
 800897e:	801a      	strhne	r2, [r3, #0]
 8008980:	601a      	streq	r2, [r3, #0]
 8008982:	e6f2      	b.n	800876a <__ssvfiscanf_r+0x4e>
 8008984:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008986:	4621      	mov	r1, r4
 8008988:	4630      	mov	r0, r6
 800898a:	4798      	blx	r3
 800898c:	2800      	cmp	r0, #0
 800898e:	d0b6      	beq.n	80088fe <__ssvfiscanf_r+0x1e2>
 8008990:	e79c      	b.n	80088cc <__ssvfiscanf_r+0x1b0>
 8008992:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008994:	3201      	adds	r2, #1
 8008996:	9245      	str	r2, [sp, #276]	; 0x114
 8008998:	6862      	ldr	r2, [r4, #4]
 800899a:	3a01      	subs	r2, #1
 800899c:	2a00      	cmp	r2, #0
 800899e:	6062      	str	r2, [r4, #4]
 80089a0:	dd02      	ble.n	80089a8 <__ssvfiscanf_r+0x28c>
 80089a2:	3301      	adds	r3, #1
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	e7ad      	b.n	8008904 <__ssvfiscanf_r+0x1e8>
 80089a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089aa:	4621      	mov	r1, r4
 80089ac:	4630      	mov	r0, r6
 80089ae:	4798      	blx	r3
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0a7      	beq.n	8008904 <__ssvfiscanf_r+0x1e8>
 80089b4:	e78a      	b.n	80088cc <__ssvfiscanf_r+0x1b0>
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	dc0e      	bgt.n	80089d8 <__ssvfiscanf_r+0x2bc>
 80089ba:	466b      	mov	r3, sp
 80089bc:	4622      	mov	r2, r4
 80089be:	a941      	add	r1, sp, #260	; 0x104
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 f87d 	bl	8008ac0 <_scanf_i>
 80089c6:	e7ab      	b.n	8008920 <__ssvfiscanf_r+0x204>
 80089c8:	08008669 	.word	0x08008669
 80089cc:	080086e3 	.word	0x080086e3
 80089d0:	08009c59 	.word	0x08009c59
 80089d4:	08009fc2 	.word	0x08009fc2
 80089d8:	4b0b      	ldr	r3, [pc, #44]	; (8008a08 <__ssvfiscanf_r+0x2ec>)
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f43f aec5 	beq.w	800876a <__ssvfiscanf_r+0x4e>
 80089e0:	466b      	mov	r3, sp
 80089e2:	4622      	mov	r2, r4
 80089e4:	a941      	add	r1, sp, #260	; 0x104
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7fc fb8a 	bl	8005100 <_scanf_float>
 80089ec:	e798      	b.n	8008920 <__ssvfiscanf_r+0x204>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80089f4:	bf18      	it	ne
 80089f6:	f04f 30ff 	movne.w	r0, #4294967295
 80089fa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80089fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a02:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008a04:	e7f9      	b.n	80089fa <__ssvfiscanf_r+0x2de>
 8008a06:	bf00      	nop
 8008a08:	08005101 	.word	0x08005101

08008a0c <_scanf_chars>:
 8008a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a10:	4615      	mov	r5, r2
 8008a12:	688a      	ldr	r2, [r1, #8]
 8008a14:	4680      	mov	r8, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	b932      	cbnz	r2, 8008a28 <_scanf_chars+0x1c>
 8008a1a:	698a      	ldr	r2, [r1, #24]
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	bf0c      	ite	eq
 8008a20:	2201      	moveq	r2, #1
 8008a22:	f04f 32ff 	movne.w	r2, #4294967295
 8008a26:	608a      	str	r2, [r1, #8]
 8008a28:	6822      	ldr	r2, [r4, #0]
 8008a2a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008abc <_scanf_chars+0xb0>
 8008a2e:	06d1      	lsls	r1, r2, #27
 8008a30:	bf5f      	itttt	pl
 8008a32:	681a      	ldrpl	r2, [r3, #0]
 8008a34:	1d11      	addpl	r1, r2, #4
 8008a36:	6019      	strpl	r1, [r3, #0]
 8008a38:	6816      	ldrpl	r6, [r2, #0]
 8008a3a:	2700      	movs	r7, #0
 8008a3c:	69a0      	ldr	r0, [r4, #24]
 8008a3e:	b188      	cbz	r0, 8008a64 <_scanf_chars+0x58>
 8008a40:	2801      	cmp	r0, #1
 8008a42:	d107      	bne.n	8008a54 <_scanf_chars+0x48>
 8008a44:	682a      	ldr	r2, [r5, #0]
 8008a46:	7811      	ldrb	r1, [r2, #0]
 8008a48:	6962      	ldr	r2, [r4, #20]
 8008a4a:	5c52      	ldrb	r2, [r2, r1]
 8008a4c:	b952      	cbnz	r2, 8008a64 <_scanf_chars+0x58>
 8008a4e:	2f00      	cmp	r7, #0
 8008a50:	d031      	beq.n	8008ab6 <_scanf_chars+0xaa>
 8008a52:	e022      	b.n	8008a9a <_scanf_chars+0x8e>
 8008a54:	2802      	cmp	r0, #2
 8008a56:	d120      	bne.n	8008a9a <_scanf_chars+0x8e>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008a60:	071b      	lsls	r3, r3, #28
 8008a62:	d41a      	bmi.n	8008a9a <_scanf_chars+0x8e>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	06da      	lsls	r2, r3, #27
 8008a68:	bf5e      	ittt	pl
 8008a6a:	682b      	ldrpl	r3, [r5, #0]
 8008a6c:	781b      	ldrbpl	r3, [r3, #0]
 8008a6e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008a72:	682a      	ldr	r2, [r5, #0]
 8008a74:	686b      	ldr	r3, [r5, #4]
 8008a76:	3201      	adds	r2, #1
 8008a78:	602a      	str	r2, [r5, #0]
 8008a7a:	68a2      	ldr	r2, [r4, #8]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	3a01      	subs	r2, #1
 8008a80:	606b      	str	r3, [r5, #4]
 8008a82:	3701      	adds	r7, #1
 8008a84:	60a2      	str	r2, [r4, #8]
 8008a86:	b142      	cbz	r2, 8008a9a <_scanf_chars+0x8e>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	dcd7      	bgt.n	8008a3c <_scanf_chars+0x30>
 8008a8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a90:	4629      	mov	r1, r5
 8008a92:	4640      	mov	r0, r8
 8008a94:	4798      	blx	r3
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d0d0      	beq.n	8008a3c <_scanf_chars+0x30>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	f013 0310 	ands.w	r3, r3, #16
 8008aa0:	d105      	bne.n	8008aae <_scanf_chars+0xa2>
 8008aa2:	68e2      	ldr	r2, [r4, #12]
 8008aa4:	3201      	adds	r2, #1
 8008aa6:	60e2      	str	r2, [r4, #12]
 8008aa8:	69a2      	ldr	r2, [r4, #24]
 8008aaa:	b102      	cbz	r2, 8008aae <_scanf_chars+0xa2>
 8008aac:	7033      	strb	r3, [r6, #0]
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	443b      	add	r3, r7
 8008ab2:	6123      	str	r3, [r4, #16]
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aba:	bf00      	nop
 8008abc:	08009c59 	.word	0x08009c59

08008ac0 <_scanf_i>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	4698      	mov	r8, r3
 8008ac6:	4b76      	ldr	r3, [pc, #472]	; (8008ca0 <_scanf_i+0x1e0>)
 8008ac8:	460c      	mov	r4, r1
 8008aca:	4682      	mov	sl, r0
 8008acc:	4616      	mov	r6, r2
 8008ace:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	ab03      	add	r3, sp, #12
 8008ad6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ada:	4b72      	ldr	r3, [pc, #456]	; (8008ca4 <_scanf_i+0x1e4>)
 8008adc:	69a1      	ldr	r1, [r4, #24]
 8008ade:	4a72      	ldr	r2, [pc, #456]	; (8008ca8 <_scanf_i+0x1e8>)
 8008ae0:	2903      	cmp	r1, #3
 8008ae2:	bf18      	it	ne
 8008ae4:	461a      	movne	r2, r3
 8008ae6:	68a3      	ldr	r3, [r4, #8]
 8008ae8:	9201      	str	r2, [sp, #4]
 8008aea:	1e5a      	subs	r2, r3, #1
 8008aec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008af0:	bf88      	it	hi
 8008af2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008af6:	4627      	mov	r7, r4
 8008af8:	bf82      	ittt	hi
 8008afa:	eb03 0905 	addhi.w	r9, r3, r5
 8008afe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b02:	60a3      	strhi	r3, [r4, #8]
 8008b04:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008b08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008b0c:	bf98      	it	ls
 8008b0e:	f04f 0900 	movls.w	r9, #0
 8008b12:	6023      	str	r3, [r4, #0]
 8008b14:	463d      	mov	r5, r7
 8008b16:	f04f 0b00 	mov.w	fp, #0
 8008b1a:	6831      	ldr	r1, [r6, #0]
 8008b1c:	ab03      	add	r3, sp, #12
 8008b1e:	7809      	ldrb	r1, [r1, #0]
 8008b20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008b24:	2202      	movs	r2, #2
 8008b26:	f7f7 fb73 	bl	8000210 <memchr>
 8008b2a:	b328      	cbz	r0, 8008b78 <_scanf_i+0xb8>
 8008b2c:	f1bb 0f01 	cmp.w	fp, #1
 8008b30:	d159      	bne.n	8008be6 <_scanf_i+0x126>
 8008b32:	6862      	ldr	r2, [r4, #4]
 8008b34:	b92a      	cbnz	r2, 8008b42 <_scanf_i+0x82>
 8008b36:	6822      	ldr	r2, [r4, #0]
 8008b38:	2308      	movs	r3, #8
 8008b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b3e:	6063      	str	r3, [r4, #4]
 8008b40:	6022      	str	r2, [r4, #0]
 8008b42:	6822      	ldr	r2, [r4, #0]
 8008b44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008b48:	6022      	str	r2, [r4, #0]
 8008b4a:	68a2      	ldr	r2, [r4, #8]
 8008b4c:	1e51      	subs	r1, r2, #1
 8008b4e:	60a1      	str	r1, [r4, #8]
 8008b50:	b192      	cbz	r2, 8008b78 <_scanf_i+0xb8>
 8008b52:	6832      	ldr	r2, [r6, #0]
 8008b54:	1c51      	adds	r1, r2, #1
 8008b56:	6031      	str	r1, [r6, #0]
 8008b58:	7812      	ldrb	r2, [r2, #0]
 8008b5a:	f805 2b01 	strb.w	r2, [r5], #1
 8008b5e:	6872      	ldr	r2, [r6, #4]
 8008b60:	3a01      	subs	r2, #1
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	6072      	str	r2, [r6, #4]
 8008b66:	dc07      	bgt.n	8008b78 <_scanf_i+0xb8>
 8008b68:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4650      	mov	r0, sl
 8008b70:	4790      	blx	r2
 8008b72:	2800      	cmp	r0, #0
 8008b74:	f040 8085 	bne.w	8008c82 <_scanf_i+0x1c2>
 8008b78:	f10b 0b01 	add.w	fp, fp, #1
 8008b7c:	f1bb 0f03 	cmp.w	fp, #3
 8008b80:	d1cb      	bne.n	8008b1a <_scanf_i+0x5a>
 8008b82:	6863      	ldr	r3, [r4, #4]
 8008b84:	b90b      	cbnz	r3, 8008b8a <_scanf_i+0xca>
 8008b86:	230a      	movs	r3, #10
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	6863      	ldr	r3, [r4, #4]
 8008b8c:	4947      	ldr	r1, [pc, #284]	; (8008cac <_scanf_i+0x1ec>)
 8008b8e:	6960      	ldr	r0, [r4, #20]
 8008b90:	1ac9      	subs	r1, r1, r3
 8008b92:	f000 f8b9 	bl	8008d08 <__sccl>
 8008b96:	f04f 0b00 	mov.w	fp, #0
 8008b9a:	68a3      	ldr	r3, [r4, #8]
 8008b9c:	6822      	ldr	r2, [r4, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d03d      	beq.n	8008c1e <_scanf_i+0x15e>
 8008ba2:	6831      	ldr	r1, [r6, #0]
 8008ba4:	6960      	ldr	r0, [r4, #20]
 8008ba6:	f891 c000 	ldrb.w	ip, [r1]
 8008baa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	d035      	beq.n	8008c1e <_scanf_i+0x15e>
 8008bb2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008bb6:	d124      	bne.n	8008c02 <_scanf_i+0x142>
 8008bb8:	0510      	lsls	r0, r2, #20
 8008bba:	d522      	bpl.n	8008c02 <_scanf_i+0x142>
 8008bbc:	f10b 0b01 	add.w	fp, fp, #1
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	d003      	beq.n	8008bce <_scanf_i+0x10e>
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8008bcc:	60a3      	str	r3, [r4, #8]
 8008bce:	6873      	ldr	r3, [r6, #4]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	6073      	str	r3, [r6, #4]
 8008bd6:	dd1b      	ble.n	8008c10 <_scanf_i+0x150>
 8008bd8:	6833      	ldr	r3, [r6, #0]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	6033      	str	r3, [r6, #0]
 8008bde:	68a3      	ldr	r3, [r4, #8]
 8008be0:	3b01      	subs	r3, #1
 8008be2:	60a3      	str	r3, [r4, #8]
 8008be4:	e7d9      	b.n	8008b9a <_scanf_i+0xda>
 8008be6:	f1bb 0f02 	cmp.w	fp, #2
 8008bea:	d1ae      	bne.n	8008b4a <_scanf_i+0x8a>
 8008bec:	6822      	ldr	r2, [r4, #0]
 8008bee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008bf2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008bf6:	d1bf      	bne.n	8008b78 <_scanf_i+0xb8>
 8008bf8:	2310      	movs	r3, #16
 8008bfa:	6063      	str	r3, [r4, #4]
 8008bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c00:	e7a2      	b.n	8008b48 <_scanf_i+0x88>
 8008c02:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008c06:	6022      	str	r2, [r4, #0]
 8008c08:	780b      	ldrb	r3, [r1, #0]
 8008c0a:	f805 3b01 	strb.w	r3, [r5], #1
 8008c0e:	e7de      	b.n	8008bce <_scanf_i+0x10e>
 8008c10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c14:	4631      	mov	r1, r6
 8008c16:	4650      	mov	r0, sl
 8008c18:	4798      	blx	r3
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d0df      	beq.n	8008bde <_scanf_i+0x11e>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	05db      	lsls	r3, r3, #23
 8008c22:	d50d      	bpl.n	8008c40 <_scanf_i+0x180>
 8008c24:	42bd      	cmp	r5, r7
 8008c26:	d909      	bls.n	8008c3c <_scanf_i+0x17c>
 8008c28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008c2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c30:	4632      	mov	r2, r6
 8008c32:	4650      	mov	r0, sl
 8008c34:	4798      	blx	r3
 8008c36:	f105 39ff 	add.w	r9, r5, #4294967295
 8008c3a:	464d      	mov	r5, r9
 8008c3c:	42bd      	cmp	r5, r7
 8008c3e:	d02d      	beq.n	8008c9c <_scanf_i+0x1dc>
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	f012 0210 	ands.w	r2, r2, #16
 8008c46:	d113      	bne.n	8008c70 <_scanf_i+0x1b0>
 8008c48:	702a      	strb	r2, [r5, #0]
 8008c4a:	6863      	ldr	r3, [r4, #4]
 8008c4c:	9e01      	ldr	r6, [sp, #4]
 8008c4e:	4639      	mov	r1, r7
 8008c50:	4650      	mov	r0, sl
 8008c52:	47b0      	blx	r6
 8008c54:	6821      	ldr	r1, [r4, #0]
 8008c56:	f8d8 3000 	ldr.w	r3, [r8]
 8008c5a:	f011 0f20 	tst.w	r1, #32
 8008c5e:	d013      	beq.n	8008c88 <_scanf_i+0x1c8>
 8008c60:	1d1a      	adds	r2, r3, #4
 8008c62:	f8c8 2000 	str.w	r2, [r8]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6018      	str	r0, [r3, #0]
 8008c6a:	68e3      	ldr	r3, [r4, #12]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	60e3      	str	r3, [r4, #12]
 8008c70:	1bed      	subs	r5, r5, r7
 8008c72:	44ab      	add	fp, r5
 8008c74:	6925      	ldr	r5, [r4, #16]
 8008c76:	445d      	add	r5, fp
 8008c78:	6125      	str	r5, [r4, #16]
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	b007      	add	sp, #28
 8008c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c82:	f04f 0b00 	mov.w	fp, #0
 8008c86:	e7ca      	b.n	8008c1e <_scanf_i+0x15e>
 8008c88:	1d1a      	adds	r2, r3, #4
 8008c8a:	f8c8 2000 	str.w	r2, [r8]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f011 0f01 	tst.w	r1, #1
 8008c94:	bf14      	ite	ne
 8008c96:	8018      	strhne	r0, [r3, #0]
 8008c98:	6018      	streq	r0, [r3, #0]
 8008c9a:	e7e6      	b.n	8008c6a <_scanf_i+0x1aa>
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	e7ed      	b.n	8008c7c <_scanf_i+0x1bc>
 8008ca0:	08009bbc 	.word	0x08009bbc
 8008ca4:	08008e85 	.word	0x08008e85
 8008ca8:	080063a5 	.word	0x080063a5
 8008cac:	08009fe6 	.word	0x08009fe6

08008cb0 <_read_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d07      	ldr	r5, [pc, #28]	; (8008cd0 <_read_r+0x20>)
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f7f9 f839 	bl	8001d36 <_read>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_read_r+0x1e>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_read_r+0x1e>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	20000c28 	.word	0x20000c28
 8008cd4:	00000000 	.word	0x00000000

08008cd8 <nan>:
 8008cd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ce0 <nan+0x8>
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	00000000 	.word	0x00000000
 8008ce4:	7ff80000 	.word	0x7ff80000

08008ce8 <_sbrk_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	; (8008d04 <_sbrk_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f9 f88c 	bl	8001e10 <_sbrk>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_sbrk_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_sbrk_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	20000c28 	.word	0x20000c28

08008d08 <__sccl>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	780b      	ldrb	r3, [r1, #0]
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	2b5e      	cmp	r3, #94	; 0x5e
 8008d10:	bf0b      	itete	eq
 8008d12:	784b      	ldrbeq	r3, [r1, #1]
 8008d14:	1c48      	addne	r0, r1, #1
 8008d16:	1c88      	addeq	r0, r1, #2
 8008d18:	2200      	movne	r2, #0
 8008d1a:	bf08      	it	eq
 8008d1c:	2201      	moveq	r2, #1
 8008d1e:	1e61      	subs	r1, r4, #1
 8008d20:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008d24:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008d28:	42a9      	cmp	r1, r5
 8008d2a:	d1fb      	bne.n	8008d24 <__sccl+0x1c>
 8008d2c:	b90b      	cbnz	r3, 8008d32 <__sccl+0x2a>
 8008d2e:	3801      	subs	r0, #1
 8008d30:	bd70      	pop	{r4, r5, r6, pc}
 8008d32:	f082 0201 	eor.w	r2, r2, #1
 8008d36:	54e2      	strb	r2, [r4, r3]
 8008d38:	4605      	mov	r5, r0
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008d40:	292d      	cmp	r1, #45	; 0x2d
 8008d42:	d006      	beq.n	8008d52 <__sccl+0x4a>
 8008d44:	295d      	cmp	r1, #93	; 0x5d
 8008d46:	d0f3      	beq.n	8008d30 <__sccl+0x28>
 8008d48:	b909      	cbnz	r1, 8008d4e <__sccl+0x46>
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	e7f0      	b.n	8008d30 <__sccl+0x28>
 8008d4e:	460b      	mov	r3, r1
 8008d50:	e7f1      	b.n	8008d36 <__sccl+0x2e>
 8008d52:	786e      	ldrb	r6, [r5, #1]
 8008d54:	2e5d      	cmp	r6, #93	; 0x5d
 8008d56:	d0fa      	beq.n	8008d4e <__sccl+0x46>
 8008d58:	42b3      	cmp	r3, r6
 8008d5a:	dcf8      	bgt.n	8008d4e <__sccl+0x46>
 8008d5c:	3502      	adds	r5, #2
 8008d5e:	4619      	mov	r1, r3
 8008d60:	3101      	adds	r1, #1
 8008d62:	428e      	cmp	r6, r1
 8008d64:	5462      	strb	r2, [r4, r1]
 8008d66:	dcfb      	bgt.n	8008d60 <__sccl+0x58>
 8008d68:	1af1      	subs	r1, r6, r3
 8008d6a:	3901      	subs	r1, #1
 8008d6c:	1c58      	adds	r0, r3, #1
 8008d6e:	42b3      	cmp	r3, r6
 8008d70:	bfa8      	it	ge
 8008d72:	2100      	movge	r1, #0
 8008d74:	1843      	adds	r3, r0, r1
 8008d76:	e7e0      	b.n	8008d3a <__sccl+0x32>

08008d78 <strncmp>:
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	b17a      	cbz	r2, 8008d9c <strncmp+0x24>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	3901      	subs	r1, #1
 8008d80:	1884      	adds	r4, r0, r2
 8008d82:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008d8a:	4290      	cmp	r0, r2
 8008d8c:	d101      	bne.n	8008d92 <strncmp+0x1a>
 8008d8e:	42a3      	cmp	r3, r4
 8008d90:	d101      	bne.n	8008d96 <strncmp+0x1e>
 8008d92:	1a80      	subs	r0, r0, r2
 8008d94:	bd10      	pop	{r4, pc}
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d1f3      	bne.n	8008d82 <strncmp+0xa>
 8008d9a:	e7fa      	b.n	8008d92 <strncmp+0x1a>
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	e7f9      	b.n	8008d94 <strncmp+0x1c>

08008da0 <_strtoul_l.constprop.0>:
 8008da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008da4:	4f36      	ldr	r7, [pc, #216]	; (8008e80 <_strtoul_l.constprop.0+0xe0>)
 8008da6:	4686      	mov	lr, r0
 8008da8:	460d      	mov	r5, r1
 8008daa:	4628      	mov	r0, r5
 8008dac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008db0:	5de6      	ldrb	r6, [r4, r7]
 8008db2:	f016 0608 	ands.w	r6, r6, #8
 8008db6:	d1f8      	bne.n	8008daa <_strtoul_l.constprop.0+0xa>
 8008db8:	2c2d      	cmp	r4, #45	; 0x2d
 8008dba:	d12f      	bne.n	8008e1c <_strtoul_l.constprop.0+0x7c>
 8008dbc:	782c      	ldrb	r4, [r5, #0]
 8008dbe:	2601      	movs	r6, #1
 8008dc0:	1c85      	adds	r5, r0, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d057      	beq.n	8008e76 <_strtoul_l.constprop.0+0xd6>
 8008dc6:	2b10      	cmp	r3, #16
 8008dc8:	d109      	bne.n	8008dde <_strtoul_l.constprop.0+0x3e>
 8008dca:	2c30      	cmp	r4, #48	; 0x30
 8008dcc:	d107      	bne.n	8008dde <_strtoul_l.constprop.0+0x3e>
 8008dce:	7828      	ldrb	r0, [r5, #0]
 8008dd0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008dd4:	2858      	cmp	r0, #88	; 0x58
 8008dd6:	d149      	bne.n	8008e6c <_strtoul_l.constprop.0+0xcc>
 8008dd8:	786c      	ldrb	r4, [r5, #1]
 8008dda:	2310      	movs	r3, #16
 8008ddc:	3502      	adds	r5, #2
 8008dde:	f04f 38ff 	mov.w	r8, #4294967295
 8008de2:	2700      	movs	r7, #0
 8008de4:	fbb8 f8f3 	udiv	r8, r8, r3
 8008de8:	fb03 f908 	mul.w	r9, r3, r8
 8008dec:	ea6f 0909 	mvn.w	r9, r9
 8008df0:	4638      	mov	r0, r7
 8008df2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008df6:	f1bc 0f09 	cmp.w	ip, #9
 8008dfa:	d814      	bhi.n	8008e26 <_strtoul_l.constprop.0+0x86>
 8008dfc:	4664      	mov	r4, ip
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	dd22      	ble.n	8008e48 <_strtoul_l.constprop.0+0xa8>
 8008e02:	2f00      	cmp	r7, #0
 8008e04:	db1d      	blt.n	8008e42 <_strtoul_l.constprop.0+0xa2>
 8008e06:	4580      	cmp	r8, r0
 8008e08:	d31b      	bcc.n	8008e42 <_strtoul_l.constprop.0+0xa2>
 8008e0a:	d101      	bne.n	8008e10 <_strtoul_l.constprop.0+0x70>
 8008e0c:	45a1      	cmp	r9, r4
 8008e0e:	db18      	blt.n	8008e42 <_strtoul_l.constprop.0+0xa2>
 8008e10:	fb00 4003 	mla	r0, r0, r3, r4
 8008e14:	2701      	movs	r7, #1
 8008e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e1a:	e7ea      	b.n	8008df2 <_strtoul_l.constprop.0+0x52>
 8008e1c:	2c2b      	cmp	r4, #43	; 0x2b
 8008e1e:	bf04      	itt	eq
 8008e20:	782c      	ldrbeq	r4, [r5, #0]
 8008e22:	1c85      	addeq	r5, r0, #2
 8008e24:	e7cd      	b.n	8008dc2 <_strtoul_l.constprop.0+0x22>
 8008e26:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e2a:	f1bc 0f19 	cmp.w	ip, #25
 8008e2e:	d801      	bhi.n	8008e34 <_strtoul_l.constprop.0+0x94>
 8008e30:	3c37      	subs	r4, #55	; 0x37
 8008e32:	e7e4      	b.n	8008dfe <_strtoul_l.constprop.0+0x5e>
 8008e34:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e38:	f1bc 0f19 	cmp.w	ip, #25
 8008e3c:	d804      	bhi.n	8008e48 <_strtoul_l.constprop.0+0xa8>
 8008e3e:	3c57      	subs	r4, #87	; 0x57
 8008e40:	e7dd      	b.n	8008dfe <_strtoul_l.constprop.0+0x5e>
 8008e42:	f04f 37ff 	mov.w	r7, #4294967295
 8008e46:	e7e6      	b.n	8008e16 <_strtoul_l.constprop.0+0x76>
 8008e48:	2f00      	cmp	r7, #0
 8008e4a:	da07      	bge.n	8008e5c <_strtoul_l.constprop.0+0xbc>
 8008e4c:	2322      	movs	r3, #34	; 0x22
 8008e4e:	f8ce 3000 	str.w	r3, [lr]
 8008e52:	f04f 30ff 	mov.w	r0, #4294967295
 8008e56:	b932      	cbnz	r2, 8008e66 <_strtoul_l.constprop.0+0xc6>
 8008e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e5c:	b106      	cbz	r6, 8008e60 <_strtoul_l.constprop.0+0xc0>
 8008e5e:	4240      	negs	r0, r0
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	d0f9      	beq.n	8008e58 <_strtoul_l.constprop.0+0xb8>
 8008e64:	b107      	cbz	r7, 8008e68 <_strtoul_l.constprop.0+0xc8>
 8008e66:	1e69      	subs	r1, r5, #1
 8008e68:	6011      	str	r1, [r2, #0]
 8008e6a:	e7f5      	b.n	8008e58 <_strtoul_l.constprop.0+0xb8>
 8008e6c:	2430      	movs	r4, #48	; 0x30
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1b5      	bne.n	8008dde <_strtoul_l.constprop.0+0x3e>
 8008e72:	2308      	movs	r3, #8
 8008e74:	e7b3      	b.n	8008dde <_strtoul_l.constprop.0+0x3e>
 8008e76:	2c30      	cmp	r4, #48	; 0x30
 8008e78:	d0a9      	beq.n	8008dce <_strtoul_l.constprop.0+0x2e>
 8008e7a:	230a      	movs	r3, #10
 8008e7c:	e7af      	b.n	8008dde <_strtoul_l.constprop.0+0x3e>
 8008e7e:	bf00      	nop
 8008e80:	08009c59 	.word	0x08009c59

08008e84 <_strtoul_r>:
 8008e84:	f7ff bf8c 	b.w	8008da0 <_strtoul_l.constprop.0>

08008e88 <__submore>:
 8008e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e94:	4299      	cmp	r1, r3
 8008e96:	d11d      	bne.n	8008ed4 <__submore+0x4c>
 8008e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e9c:	f7ff fa14 	bl	80082c8 <_malloc_r>
 8008ea0:	b918      	cbnz	r0, 8008eaa <__submore+0x22>
 8008ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eae:	63a3      	str	r3, [r4, #56]	; 0x38
 8008eb0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008eb4:	6360      	str	r0, [r4, #52]	; 0x34
 8008eb6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008eba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008ebe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008ec2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ec6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008eca:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008ece:	6020      	str	r0, [r4, #0]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7e8      	b.n	8008ea6 <__submore+0x1e>
 8008ed4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008ed6:	0077      	lsls	r7, r6, #1
 8008ed8:	463a      	mov	r2, r7
 8008eda:	f000 fa2d 	bl	8009338 <_realloc_r>
 8008ede:	4605      	mov	r5, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d0de      	beq.n	8008ea2 <__submore+0x1a>
 8008ee4:	eb00 0806 	add.w	r8, r0, r6
 8008ee8:	4601      	mov	r1, r0
 8008eea:	4632      	mov	r2, r6
 8008eec:	4640      	mov	r0, r8
 8008eee:	f7fe fc99 	bl	8007824 <memcpy>
 8008ef2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008ef6:	f8c4 8000 	str.w	r8, [r4]
 8008efa:	e7e9      	b.n	8008ed0 <__submore+0x48>

08008efc <__ascii_wctomb>:
 8008efc:	b149      	cbz	r1, 8008f12 <__ascii_wctomb+0x16>
 8008efe:	2aff      	cmp	r2, #255	; 0xff
 8008f00:	bf85      	ittet	hi
 8008f02:	238a      	movhi	r3, #138	; 0x8a
 8008f04:	6003      	strhi	r3, [r0, #0]
 8008f06:	700a      	strbls	r2, [r1, #0]
 8008f08:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f0c:	bf98      	it	ls
 8008f0e:	2001      	movls	r0, #1
 8008f10:	4770      	bx	lr
 8008f12:	4608      	mov	r0, r1
 8008f14:	4770      	bx	lr
	...

08008f18 <__assert_func>:
 8008f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f1a:	4614      	mov	r4, r2
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <__assert_func+0x2c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4605      	mov	r5, r0
 8008f24:	68d8      	ldr	r0, [r3, #12]
 8008f26:	b14c      	cbz	r4, 8008f3c <__assert_func+0x24>
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <__assert_func+0x30>)
 8008f2a:	9100      	str	r1, [sp, #0]
 8008f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f30:	4906      	ldr	r1, [pc, #24]	; (8008f4c <__assert_func+0x34>)
 8008f32:	462b      	mov	r3, r5
 8008f34:	f000 f9a6 	bl	8009284 <fiprintf>
 8008f38:	f000 fc46 	bl	80097c8 <abort>
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <__assert_func+0x38>)
 8008f3e:	461c      	mov	r4, r3
 8008f40:	e7f3      	b.n	8008f2a <__assert_func+0x12>
 8008f42:	bf00      	nop
 8008f44:	2000000c 	.word	0x2000000c
 8008f48:	08009fe8 	.word	0x08009fe8
 8008f4c:	08009ff5 	.word	0x08009ff5
 8008f50:	0800a023 	.word	0x0800a023

08008f54 <__sflush_r>:
 8008f54:	898a      	ldrh	r2, [r1, #12]
 8008f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	0710      	lsls	r0, r2, #28
 8008f5e:	460c      	mov	r4, r1
 8008f60:	d458      	bmi.n	8009014 <__sflush_r+0xc0>
 8008f62:	684b      	ldr	r3, [r1, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dc05      	bgt.n	8008f74 <__sflush_r+0x20>
 8008f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	dc02      	bgt.n	8008f74 <__sflush_r+0x20>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f76:	2e00      	cmp	r6, #0
 8008f78:	d0f9      	beq.n	8008f6e <__sflush_r+0x1a>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f80:	682f      	ldr	r7, [r5, #0]
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	d032      	beq.n	8008fec <__sflush_r+0x98>
 8008f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	075a      	lsls	r2, r3, #29
 8008f8c:	d505      	bpl.n	8008f9a <__sflush_r+0x46>
 8008f8e:	6863      	ldr	r3, [r4, #4]
 8008f90:	1ac0      	subs	r0, r0, r3
 8008f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f94:	b10b      	cbz	r3, 8008f9a <__sflush_r+0x46>
 8008f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f98:	1ac0      	subs	r0, r0, r3
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fa0:	6a21      	ldr	r1, [r4, #32]
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	47b0      	blx	r6
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	d106      	bne.n	8008fba <__sflush_r+0x66>
 8008fac:	6829      	ldr	r1, [r5, #0]
 8008fae:	291d      	cmp	r1, #29
 8008fb0:	d82c      	bhi.n	800900c <__sflush_r+0xb8>
 8008fb2:	4a2a      	ldr	r2, [pc, #168]	; (800905c <__sflush_r+0x108>)
 8008fb4:	40ca      	lsrs	r2, r1
 8008fb6:	07d6      	lsls	r6, r2, #31
 8008fb8:	d528      	bpl.n	800900c <__sflush_r+0xb8>
 8008fba:	2200      	movs	r2, #0
 8008fbc:	6062      	str	r2, [r4, #4]
 8008fbe:	04d9      	lsls	r1, r3, #19
 8008fc0:	6922      	ldr	r2, [r4, #16]
 8008fc2:	6022      	str	r2, [r4, #0]
 8008fc4:	d504      	bpl.n	8008fd0 <__sflush_r+0x7c>
 8008fc6:	1c42      	adds	r2, r0, #1
 8008fc8:	d101      	bne.n	8008fce <__sflush_r+0x7a>
 8008fca:	682b      	ldr	r3, [r5, #0]
 8008fcc:	b903      	cbnz	r3, 8008fd0 <__sflush_r+0x7c>
 8008fce:	6560      	str	r0, [r4, #84]	; 0x54
 8008fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fd2:	602f      	str	r7, [r5, #0]
 8008fd4:	2900      	cmp	r1, #0
 8008fd6:	d0ca      	beq.n	8008f6e <__sflush_r+0x1a>
 8008fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	d002      	beq.n	8008fe6 <__sflush_r+0x92>
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f7ff f905 	bl	80081f0 <_free_r>
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8008fea:	e7c1      	b.n	8008f70 <__sflush_r+0x1c>
 8008fec:	6a21      	ldr	r1, [r4, #32]
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b0      	blx	r6
 8008ff4:	1c41      	adds	r1, r0, #1
 8008ff6:	d1c7      	bne.n	8008f88 <__sflush_r+0x34>
 8008ff8:	682b      	ldr	r3, [r5, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0c4      	beq.n	8008f88 <__sflush_r+0x34>
 8008ffe:	2b1d      	cmp	r3, #29
 8009000:	d001      	beq.n	8009006 <__sflush_r+0xb2>
 8009002:	2b16      	cmp	r3, #22
 8009004:	d101      	bne.n	800900a <__sflush_r+0xb6>
 8009006:	602f      	str	r7, [r5, #0]
 8009008:	e7b1      	b.n	8008f6e <__sflush_r+0x1a>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	e7ad      	b.n	8008f70 <__sflush_r+0x1c>
 8009014:	690f      	ldr	r7, [r1, #16]
 8009016:	2f00      	cmp	r7, #0
 8009018:	d0a9      	beq.n	8008f6e <__sflush_r+0x1a>
 800901a:	0793      	lsls	r3, r2, #30
 800901c:	680e      	ldr	r6, [r1, #0]
 800901e:	bf08      	it	eq
 8009020:	694b      	ldreq	r3, [r1, #20]
 8009022:	600f      	str	r7, [r1, #0]
 8009024:	bf18      	it	ne
 8009026:	2300      	movne	r3, #0
 8009028:	eba6 0807 	sub.w	r8, r6, r7
 800902c:	608b      	str	r3, [r1, #8]
 800902e:	f1b8 0f00 	cmp.w	r8, #0
 8009032:	dd9c      	ble.n	8008f6e <__sflush_r+0x1a>
 8009034:	6a21      	ldr	r1, [r4, #32]
 8009036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009038:	4643      	mov	r3, r8
 800903a:	463a      	mov	r2, r7
 800903c:	4628      	mov	r0, r5
 800903e:	47b0      	blx	r6
 8009040:	2800      	cmp	r0, #0
 8009042:	dc06      	bgt.n	8009052 <__sflush_r+0xfe>
 8009044:	89a3      	ldrh	r3, [r4, #12]
 8009046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904a:	81a3      	strh	r3, [r4, #12]
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	e78e      	b.n	8008f70 <__sflush_r+0x1c>
 8009052:	4407      	add	r7, r0
 8009054:	eba8 0800 	sub.w	r8, r8, r0
 8009058:	e7e9      	b.n	800902e <__sflush_r+0xda>
 800905a:	bf00      	nop
 800905c:	20400001 	.word	0x20400001

08009060 <_fflush_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	690b      	ldr	r3, [r1, #16]
 8009064:	4605      	mov	r5, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b913      	cbnz	r3, 8009070 <_fflush_r+0x10>
 800906a:	2500      	movs	r5, #0
 800906c:	4628      	mov	r0, r5
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	b118      	cbz	r0, 800907a <_fflush_r+0x1a>
 8009072:	6983      	ldr	r3, [r0, #24]
 8009074:	b90b      	cbnz	r3, 800907a <_fflush_r+0x1a>
 8009076:	f000 f887 	bl	8009188 <__sinit>
 800907a:	4b14      	ldr	r3, [pc, #80]	; (80090cc <_fflush_r+0x6c>)
 800907c:	429c      	cmp	r4, r3
 800907e:	d11b      	bne.n	80090b8 <_fflush_r+0x58>
 8009080:	686c      	ldr	r4, [r5, #4]
 8009082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0ef      	beq.n	800906a <_fflush_r+0xa>
 800908a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800908c:	07d0      	lsls	r0, r2, #31
 800908e:	d404      	bmi.n	800909a <_fflush_r+0x3a>
 8009090:	0599      	lsls	r1, r3, #22
 8009092:	d402      	bmi.n	800909a <_fflush_r+0x3a>
 8009094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009096:	f000 f927 	bl	80092e8 <__retarget_lock_acquire_recursive>
 800909a:	4628      	mov	r0, r5
 800909c:	4621      	mov	r1, r4
 800909e:	f7ff ff59 	bl	8008f54 <__sflush_r>
 80090a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090a4:	07da      	lsls	r2, r3, #31
 80090a6:	4605      	mov	r5, r0
 80090a8:	d4e0      	bmi.n	800906c <_fflush_r+0xc>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	059b      	lsls	r3, r3, #22
 80090ae:	d4dd      	bmi.n	800906c <_fflush_r+0xc>
 80090b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b2:	f000 f91a 	bl	80092ea <__retarget_lock_release_recursive>
 80090b6:	e7d9      	b.n	800906c <_fflush_r+0xc>
 80090b8:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <_fflush_r+0x70>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d101      	bne.n	80090c2 <_fflush_r+0x62>
 80090be:	68ac      	ldr	r4, [r5, #8]
 80090c0:	e7df      	b.n	8009082 <_fflush_r+0x22>
 80090c2:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <_fflush_r+0x74>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	bf08      	it	eq
 80090c8:	68ec      	ldreq	r4, [r5, #12]
 80090ca:	e7da      	b.n	8009082 <_fflush_r+0x22>
 80090cc:	0800a044 	.word	0x0800a044
 80090d0:	0800a064 	.word	0x0800a064
 80090d4:	0800a024 	.word	0x0800a024

080090d8 <std>:
 80090d8:	2300      	movs	r3, #0
 80090da:	b510      	push	{r4, lr}
 80090dc:	4604      	mov	r4, r0
 80090de:	e9c0 3300 	strd	r3, r3, [r0]
 80090e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090e6:	6083      	str	r3, [r0, #8]
 80090e8:	8181      	strh	r1, [r0, #12]
 80090ea:	6643      	str	r3, [r0, #100]	; 0x64
 80090ec:	81c2      	strh	r2, [r0, #14]
 80090ee:	6183      	str	r3, [r0, #24]
 80090f0:	4619      	mov	r1, r3
 80090f2:	2208      	movs	r2, #8
 80090f4:	305c      	adds	r0, #92	; 0x5c
 80090f6:	f7fb fb91 	bl	800481c <memset>
 80090fa:	4b05      	ldr	r3, [pc, #20]	; (8009110 <std+0x38>)
 80090fc:	6263      	str	r3, [r4, #36]	; 0x24
 80090fe:	4b05      	ldr	r3, [pc, #20]	; (8009114 <std+0x3c>)
 8009100:	62a3      	str	r3, [r4, #40]	; 0x28
 8009102:	4b05      	ldr	r3, [pc, #20]	; (8009118 <std+0x40>)
 8009104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <std+0x44>)
 8009108:	6224      	str	r4, [r4, #32]
 800910a:	6323      	str	r3, [r4, #48]	; 0x30
 800910c:	bd10      	pop	{r4, pc}
 800910e:	bf00      	nop
 8009110:	080055c5 	.word	0x080055c5
 8009114:	080055eb 	.word	0x080055eb
 8009118:	08005623 	.word	0x08005623
 800911c:	08005647 	.word	0x08005647

08009120 <_cleanup_r>:
 8009120:	4901      	ldr	r1, [pc, #4]	; (8009128 <_cleanup_r+0x8>)
 8009122:	f000 b8c1 	b.w	80092a8 <_fwalk_reent>
 8009126:	bf00      	nop
 8009128:	08009061 	.word	0x08009061

0800912c <__sfmoreglue>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	2268      	movs	r2, #104	; 0x68
 8009130:	1e4d      	subs	r5, r1, #1
 8009132:	4355      	muls	r5, r2
 8009134:	460e      	mov	r6, r1
 8009136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800913a:	f7ff f8c5 	bl	80082c8 <_malloc_r>
 800913e:	4604      	mov	r4, r0
 8009140:	b140      	cbz	r0, 8009154 <__sfmoreglue+0x28>
 8009142:	2100      	movs	r1, #0
 8009144:	e9c0 1600 	strd	r1, r6, [r0]
 8009148:	300c      	adds	r0, #12
 800914a:	60a0      	str	r0, [r4, #8]
 800914c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009150:	f7fb fb64 	bl	800481c <memset>
 8009154:	4620      	mov	r0, r4
 8009156:	bd70      	pop	{r4, r5, r6, pc}

08009158 <__sfp_lock_acquire>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__sfp_lock_acquire+0x8>)
 800915a:	f000 b8c5 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 800915e:	bf00      	nop
 8009160:	20000c2d 	.word	0x20000c2d

08009164 <__sfp_lock_release>:
 8009164:	4801      	ldr	r0, [pc, #4]	; (800916c <__sfp_lock_release+0x8>)
 8009166:	f000 b8c0 	b.w	80092ea <__retarget_lock_release_recursive>
 800916a:	bf00      	nop
 800916c:	20000c2d 	.word	0x20000c2d

08009170 <__sinit_lock_acquire>:
 8009170:	4801      	ldr	r0, [pc, #4]	; (8009178 <__sinit_lock_acquire+0x8>)
 8009172:	f000 b8b9 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 8009176:	bf00      	nop
 8009178:	20000c2e 	.word	0x20000c2e

0800917c <__sinit_lock_release>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__sinit_lock_release+0x8>)
 800917e:	f000 b8b4 	b.w	80092ea <__retarget_lock_release_recursive>
 8009182:	bf00      	nop
 8009184:	20000c2e 	.word	0x20000c2e

08009188 <__sinit>:
 8009188:	b510      	push	{r4, lr}
 800918a:	4604      	mov	r4, r0
 800918c:	f7ff fff0 	bl	8009170 <__sinit_lock_acquire>
 8009190:	69a3      	ldr	r3, [r4, #24]
 8009192:	b11b      	cbz	r3, 800919c <__sinit+0x14>
 8009194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009198:	f7ff bff0 	b.w	800917c <__sinit_lock_release>
 800919c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091a0:	6523      	str	r3, [r4, #80]	; 0x50
 80091a2:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <__sinit+0x68>)
 80091a4:	4a13      	ldr	r2, [pc, #76]	; (80091f4 <__sinit+0x6c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80091aa:	42a3      	cmp	r3, r4
 80091ac:	bf04      	itt	eq
 80091ae:	2301      	moveq	r3, #1
 80091b0:	61a3      	streq	r3, [r4, #24]
 80091b2:	4620      	mov	r0, r4
 80091b4:	f000 f820 	bl	80091f8 <__sfp>
 80091b8:	6060      	str	r0, [r4, #4]
 80091ba:	4620      	mov	r0, r4
 80091bc:	f000 f81c 	bl	80091f8 <__sfp>
 80091c0:	60a0      	str	r0, [r4, #8]
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 f818 	bl	80091f8 <__sfp>
 80091c8:	2200      	movs	r2, #0
 80091ca:	60e0      	str	r0, [r4, #12]
 80091cc:	2104      	movs	r1, #4
 80091ce:	6860      	ldr	r0, [r4, #4]
 80091d0:	f7ff ff82 	bl	80090d8 <std>
 80091d4:	68a0      	ldr	r0, [r4, #8]
 80091d6:	2201      	movs	r2, #1
 80091d8:	2109      	movs	r1, #9
 80091da:	f7ff ff7d 	bl	80090d8 <std>
 80091de:	68e0      	ldr	r0, [r4, #12]
 80091e0:	2202      	movs	r2, #2
 80091e2:	2112      	movs	r1, #18
 80091e4:	f7ff ff78 	bl	80090d8 <std>
 80091e8:	2301      	movs	r3, #1
 80091ea:	61a3      	str	r3, [r4, #24]
 80091ec:	e7d2      	b.n	8009194 <__sinit+0xc>
 80091ee:	bf00      	nop
 80091f0:	08009bc8 	.word	0x08009bc8
 80091f4:	08009121 	.word	0x08009121

080091f8 <__sfp>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	4607      	mov	r7, r0
 80091fc:	f7ff ffac 	bl	8009158 <__sfp_lock_acquire>
 8009200:	4b1e      	ldr	r3, [pc, #120]	; (800927c <__sfp+0x84>)
 8009202:	681e      	ldr	r6, [r3, #0]
 8009204:	69b3      	ldr	r3, [r6, #24]
 8009206:	b913      	cbnz	r3, 800920e <__sfp+0x16>
 8009208:	4630      	mov	r0, r6
 800920a:	f7ff ffbd 	bl	8009188 <__sinit>
 800920e:	3648      	adds	r6, #72	; 0x48
 8009210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009214:	3b01      	subs	r3, #1
 8009216:	d503      	bpl.n	8009220 <__sfp+0x28>
 8009218:	6833      	ldr	r3, [r6, #0]
 800921a:	b30b      	cbz	r3, 8009260 <__sfp+0x68>
 800921c:	6836      	ldr	r6, [r6, #0]
 800921e:	e7f7      	b.n	8009210 <__sfp+0x18>
 8009220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009224:	b9d5      	cbnz	r5, 800925c <__sfp+0x64>
 8009226:	4b16      	ldr	r3, [pc, #88]	; (8009280 <__sfp+0x88>)
 8009228:	60e3      	str	r3, [r4, #12]
 800922a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800922e:	6665      	str	r5, [r4, #100]	; 0x64
 8009230:	f000 f859 	bl	80092e6 <__retarget_lock_init_recursive>
 8009234:	f7ff ff96 	bl	8009164 <__sfp_lock_release>
 8009238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800923c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009240:	6025      	str	r5, [r4, #0]
 8009242:	61a5      	str	r5, [r4, #24]
 8009244:	2208      	movs	r2, #8
 8009246:	4629      	mov	r1, r5
 8009248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800924c:	f7fb fae6 	bl	800481c <memset>
 8009250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009258:	4620      	mov	r0, r4
 800925a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800925c:	3468      	adds	r4, #104	; 0x68
 800925e:	e7d9      	b.n	8009214 <__sfp+0x1c>
 8009260:	2104      	movs	r1, #4
 8009262:	4638      	mov	r0, r7
 8009264:	f7ff ff62 	bl	800912c <__sfmoreglue>
 8009268:	4604      	mov	r4, r0
 800926a:	6030      	str	r0, [r6, #0]
 800926c:	2800      	cmp	r0, #0
 800926e:	d1d5      	bne.n	800921c <__sfp+0x24>
 8009270:	f7ff ff78 	bl	8009164 <__sfp_lock_release>
 8009274:	230c      	movs	r3, #12
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	e7ee      	b.n	8009258 <__sfp+0x60>
 800927a:	bf00      	nop
 800927c:	08009bc8 	.word	0x08009bc8
 8009280:	ffff0001 	.word	0xffff0001

08009284 <fiprintf>:
 8009284:	b40e      	push	{r1, r2, r3}
 8009286:	b503      	push	{r0, r1, lr}
 8009288:	4601      	mov	r1, r0
 800928a:	ab03      	add	r3, sp, #12
 800928c:	4805      	ldr	r0, [pc, #20]	; (80092a4 <fiprintf+0x20>)
 800928e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009292:	6800      	ldr	r0, [r0, #0]
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	f000 f8a7 	bl	80093e8 <_vfiprintf_r>
 800929a:	b002      	add	sp, #8
 800929c:	f85d eb04 	ldr.w	lr, [sp], #4
 80092a0:	b003      	add	sp, #12
 80092a2:	4770      	bx	lr
 80092a4:	2000000c 	.word	0x2000000c

080092a8 <_fwalk_reent>:
 80092a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ac:	4606      	mov	r6, r0
 80092ae:	4688      	mov	r8, r1
 80092b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092b4:	2700      	movs	r7, #0
 80092b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ba:	f1b9 0901 	subs.w	r9, r9, #1
 80092be:	d505      	bpl.n	80092cc <_fwalk_reent+0x24>
 80092c0:	6824      	ldr	r4, [r4, #0]
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	d1f7      	bne.n	80092b6 <_fwalk_reent+0xe>
 80092c6:	4638      	mov	r0, r7
 80092c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092cc:	89ab      	ldrh	r3, [r5, #12]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d907      	bls.n	80092e2 <_fwalk_reent+0x3a>
 80092d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092d6:	3301      	adds	r3, #1
 80092d8:	d003      	beq.n	80092e2 <_fwalk_reent+0x3a>
 80092da:	4629      	mov	r1, r5
 80092dc:	4630      	mov	r0, r6
 80092de:	47c0      	blx	r8
 80092e0:	4307      	orrs	r7, r0
 80092e2:	3568      	adds	r5, #104	; 0x68
 80092e4:	e7e9      	b.n	80092ba <_fwalk_reent+0x12>

080092e6 <__retarget_lock_init_recursive>:
 80092e6:	4770      	bx	lr

080092e8 <__retarget_lock_acquire_recursive>:
 80092e8:	4770      	bx	lr

080092ea <__retarget_lock_release_recursive>:
 80092ea:	4770      	bx	lr

080092ec <memmove>:
 80092ec:	4288      	cmp	r0, r1
 80092ee:	b510      	push	{r4, lr}
 80092f0:	eb01 0402 	add.w	r4, r1, r2
 80092f4:	d902      	bls.n	80092fc <memmove+0x10>
 80092f6:	4284      	cmp	r4, r0
 80092f8:	4623      	mov	r3, r4
 80092fa:	d807      	bhi.n	800930c <memmove+0x20>
 80092fc:	1e43      	subs	r3, r0, #1
 80092fe:	42a1      	cmp	r1, r4
 8009300:	d008      	beq.n	8009314 <memmove+0x28>
 8009302:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800930a:	e7f8      	b.n	80092fe <memmove+0x12>
 800930c:	4402      	add	r2, r0
 800930e:	4601      	mov	r1, r0
 8009310:	428a      	cmp	r2, r1
 8009312:	d100      	bne.n	8009316 <memmove+0x2a>
 8009314:	bd10      	pop	{r4, pc}
 8009316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800931a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800931e:	e7f7      	b.n	8009310 <memmove+0x24>

08009320 <__malloc_lock>:
 8009320:	4801      	ldr	r0, [pc, #4]	; (8009328 <__malloc_lock+0x8>)
 8009322:	f7ff bfe1 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 8009326:	bf00      	nop
 8009328:	20000c2c 	.word	0x20000c2c

0800932c <__malloc_unlock>:
 800932c:	4801      	ldr	r0, [pc, #4]	; (8009334 <__malloc_unlock+0x8>)
 800932e:	f7ff bfdc 	b.w	80092ea <__retarget_lock_release_recursive>
 8009332:	bf00      	nop
 8009334:	20000c2c 	.word	0x20000c2c

08009338 <_realloc_r>:
 8009338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933c:	4680      	mov	r8, r0
 800933e:	4614      	mov	r4, r2
 8009340:	460e      	mov	r6, r1
 8009342:	b921      	cbnz	r1, 800934e <_realloc_r+0x16>
 8009344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009348:	4611      	mov	r1, r2
 800934a:	f7fe bfbd 	b.w	80082c8 <_malloc_r>
 800934e:	b92a      	cbnz	r2, 800935c <_realloc_r+0x24>
 8009350:	f7fe ff4e 	bl	80081f0 <_free_r>
 8009354:	4625      	mov	r5, r4
 8009356:	4628      	mov	r0, r5
 8009358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800935c:	f000 faa0 	bl	80098a0 <_malloc_usable_size_r>
 8009360:	4284      	cmp	r4, r0
 8009362:	4607      	mov	r7, r0
 8009364:	d802      	bhi.n	800936c <_realloc_r+0x34>
 8009366:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800936a:	d812      	bhi.n	8009392 <_realloc_r+0x5a>
 800936c:	4621      	mov	r1, r4
 800936e:	4640      	mov	r0, r8
 8009370:	f7fe ffaa 	bl	80082c8 <_malloc_r>
 8009374:	4605      	mov	r5, r0
 8009376:	2800      	cmp	r0, #0
 8009378:	d0ed      	beq.n	8009356 <_realloc_r+0x1e>
 800937a:	42bc      	cmp	r4, r7
 800937c:	4622      	mov	r2, r4
 800937e:	4631      	mov	r1, r6
 8009380:	bf28      	it	cs
 8009382:	463a      	movcs	r2, r7
 8009384:	f7fe fa4e 	bl	8007824 <memcpy>
 8009388:	4631      	mov	r1, r6
 800938a:	4640      	mov	r0, r8
 800938c:	f7fe ff30 	bl	80081f0 <_free_r>
 8009390:	e7e1      	b.n	8009356 <_realloc_r+0x1e>
 8009392:	4635      	mov	r5, r6
 8009394:	e7df      	b.n	8009356 <_realloc_r+0x1e>

08009396 <__sfputc_r>:
 8009396:	6893      	ldr	r3, [r2, #8]
 8009398:	3b01      	subs	r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	b410      	push	{r4}
 800939e:	6093      	str	r3, [r2, #8]
 80093a0:	da08      	bge.n	80093b4 <__sfputc_r+0x1e>
 80093a2:	6994      	ldr	r4, [r2, #24]
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	db01      	blt.n	80093ac <__sfputc_r+0x16>
 80093a8:	290a      	cmp	r1, #10
 80093aa:	d103      	bne.n	80093b4 <__sfputc_r+0x1e>
 80093ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093b0:	f000 b94a 	b.w	8009648 <__swbuf_r>
 80093b4:	6813      	ldr	r3, [r2, #0]
 80093b6:	1c58      	adds	r0, r3, #1
 80093b8:	6010      	str	r0, [r2, #0]
 80093ba:	7019      	strb	r1, [r3, #0]
 80093bc:	4608      	mov	r0, r1
 80093be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <__sfputs_r>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	4606      	mov	r6, r0
 80093c8:	460f      	mov	r7, r1
 80093ca:	4614      	mov	r4, r2
 80093cc:	18d5      	adds	r5, r2, r3
 80093ce:	42ac      	cmp	r4, r5
 80093d0:	d101      	bne.n	80093d6 <__sfputs_r+0x12>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e007      	b.n	80093e6 <__sfputs_r+0x22>
 80093d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093da:	463a      	mov	r2, r7
 80093dc:	4630      	mov	r0, r6
 80093de:	f7ff ffda 	bl	8009396 <__sfputc_r>
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	d1f3      	bne.n	80093ce <__sfputs_r+0xa>
 80093e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093e8 <_vfiprintf_r>:
 80093e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ec:	460d      	mov	r5, r1
 80093ee:	b09d      	sub	sp, #116	; 0x74
 80093f0:	4614      	mov	r4, r2
 80093f2:	4698      	mov	r8, r3
 80093f4:	4606      	mov	r6, r0
 80093f6:	b118      	cbz	r0, 8009400 <_vfiprintf_r+0x18>
 80093f8:	6983      	ldr	r3, [r0, #24]
 80093fa:	b90b      	cbnz	r3, 8009400 <_vfiprintf_r+0x18>
 80093fc:	f7ff fec4 	bl	8009188 <__sinit>
 8009400:	4b89      	ldr	r3, [pc, #548]	; (8009628 <_vfiprintf_r+0x240>)
 8009402:	429d      	cmp	r5, r3
 8009404:	d11b      	bne.n	800943e <_vfiprintf_r+0x56>
 8009406:	6875      	ldr	r5, [r6, #4]
 8009408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800940a:	07d9      	lsls	r1, r3, #31
 800940c:	d405      	bmi.n	800941a <_vfiprintf_r+0x32>
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	059a      	lsls	r2, r3, #22
 8009412:	d402      	bmi.n	800941a <_vfiprintf_r+0x32>
 8009414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009416:	f7ff ff67 	bl	80092e8 <__retarget_lock_acquire_recursive>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	071b      	lsls	r3, r3, #28
 800941e:	d501      	bpl.n	8009424 <_vfiprintf_r+0x3c>
 8009420:	692b      	ldr	r3, [r5, #16]
 8009422:	b9eb      	cbnz	r3, 8009460 <_vfiprintf_r+0x78>
 8009424:	4629      	mov	r1, r5
 8009426:	4630      	mov	r0, r6
 8009428:	f000 f960 	bl	80096ec <__swsetup_r>
 800942c:	b1c0      	cbz	r0, 8009460 <_vfiprintf_r+0x78>
 800942e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009430:	07dc      	lsls	r4, r3, #31
 8009432:	d50e      	bpl.n	8009452 <_vfiprintf_r+0x6a>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	b01d      	add	sp, #116	; 0x74
 800943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943e:	4b7b      	ldr	r3, [pc, #492]	; (800962c <_vfiprintf_r+0x244>)
 8009440:	429d      	cmp	r5, r3
 8009442:	d101      	bne.n	8009448 <_vfiprintf_r+0x60>
 8009444:	68b5      	ldr	r5, [r6, #8]
 8009446:	e7df      	b.n	8009408 <_vfiprintf_r+0x20>
 8009448:	4b79      	ldr	r3, [pc, #484]	; (8009630 <_vfiprintf_r+0x248>)
 800944a:	429d      	cmp	r5, r3
 800944c:	bf08      	it	eq
 800944e:	68f5      	ldreq	r5, [r6, #12]
 8009450:	e7da      	b.n	8009408 <_vfiprintf_r+0x20>
 8009452:	89ab      	ldrh	r3, [r5, #12]
 8009454:	0598      	lsls	r0, r3, #22
 8009456:	d4ed      	bmi.n	8009434 <_vfiprintf_r+0x4c>
 8009458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800945a:	f7ff ff46 	bl	80092ea <__retarget_lock_release_recursive>
 800945e:	e7e9      	b.n	8009434 <_vfiprintf_r+0x4c>
 8009460:	2300      	movs	r3, #0
 8009462:	9309      	str	r3, [sp, #36]	; 0x24
 8009464:	2320      	movs	r3, #32
 8009466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800946a:	f8cd 800c 	str.w	r8, [sp, #12]
 800946e:	2330      	movs	r3, #48	; 0x30
 8009470:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009634 <_vfiprintf_r+0x24c>
 8009474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009478:	f04f 0901 	mov.w	r9, #1
 800947c:	4623      	mov	r3, r4
 800947e:	469a      	mov	sl, r3
 8009480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009484:	b10a      	cbz	r2, 800948a <_vfiprintf_r+0xa2>
 8009486:	2a25      	cmp	r2, #37	; 0x25
 8009488:	d1f9      	bne.n	800947e <_vfiprintf_r+0x96>
 800948a:	ebba 0b04 	subs.w	fp, sl, r4
 800948e:	d00b      	beq.n	80094a8 <_vfiprintf_r+0xc0>
 8009490:	465b      	mov	r3, fp
 8009492:	4622      	mov	r2, r4
 8009494:	4629      	mov	r1, r5
 8009496:	4630      	mov	r0, r6
 8009498:	f7ff ff94 	bl	80093c4 <__sfputs_r>
 800949c:	3001      	adds	r0, #1
 800949e:	f000 80aa 	beq.w	80095f6 <_vfiprintf_r+0x20e>
 80094a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a4:	445a      	add	r2, fp
 80094a6:	9209      	str	r2, [sp, #36]	; 0x24
 80094a8:	f89a 3000 	ldrb.w	r3, [sl]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 80a2 	beq.w	80095f6 <_vfiprintf_r+0x20e>
 80094b2:	2300      	movs	r3, #0
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
 80094b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094bc:	f10a 0a01 	add.w	sl, sl, #1
 80094c0:	9304      	str	r3, [sp, #16]
 80094c2:	9307      	str	r3, [sp, #28]
 80094c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c8:	931a      	str	r3, [sp, #104]	; 0x68
 80094ca:	4654      	mov	r4, sl
 80094cc:	2205      	movs	r2, #5
 80094ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d2:	4858      	ldr	r0, [pc, #352]	; (8009634 <_vfiprintf_r+0x24c>)
 80094d4:	f7f6 fe9c 	bl	8000210 <memchr>
 80094d8:	9a04      	ldr	r2, [sp, #16]
 80094da:	b9d8      	cbnz	r0, 8009514 <_vfiprintf_r+0x12c>
 80094dc:	06d1      	lsls	r1, r2, #27
 80094de:	bf44      	itt	mi
 80094e0:	2320      	movmi	r3, #32
 80094e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e6:	0713      	lsls	r3, r2, #28
 80094e8:	bf44      	itt	mi
 80094ea:	232b      	movmi	r3, #43	; 0x2b
 80094ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f0:	f89a 3000 	ldrb.w	r3, [sl]
 80094f4:	2b2a      	cmp	r3, #42	; 0x2a
 80094f6:	d015      	beq.n	8009524 <_vfiprintf_r+0x13c>
 80094f8:	9a07      	ldr	r2, [sp, #28]
 80094fa:	4654      	mov	r4, sl
 80094fc:	2000      	movs	r0, #0
 80094fe:	f04f 0c0a 	mov.w	ip, #10
 8009502:	4621      	mov	r1, r4
 8009504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009508:	3b30      	subs	r3, #48	; 0x30
 800950a:	2b09      	cmp	r3, #9
 800950c:	d94e      	bls.n	80095ac <_vfiprintf_r+0x1c4>
 800950e:	b1b0      	cbz	r0, 800953e <_vfiprintf_r+0x156>
 8009510:	9207      	str	r2, [sp, #28]
 8009512:	e014      	b.n	800953e <_vfiprintf_r+0x156>
 8009514:	eba0 0308 	sub.w	r3, r0, r8
 8009518:	fa09 f303 	lsl.w	r3, r9, r3
 800951c:	4313      	orrs	r3, r2
 800951e:	9304      	str	r3, [sp, #16]
 8009520:	46a2      	mov	sl, r4
 8009522:	e7d2      	b.n	80094ca <_vfiprintf_r+0xe2>
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	1d19      	adds	r1, r3, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	9103      	str	r1, [sp, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	bfbb      	ittet	lt
 8009530:	425b      	neglt	r3, r3
 8009532:	f042 0202 	orrlt.w	r2, r2, #2
 8009536:	9307      	strge	r3, [sp, #28]
 8009538:	9307      	strlt	r3, [sp, #28]
 800953a:	bfb8      	it	lt
 800953c:	9204      	strlt	r2, [sp, #16]
 800953e:	7823      	ldrb	r3, [r4, #0]
 8009540:	2b2e      	cmp	r3, #46	; 0x2e
 8009542:	d10c      	bne.n	800955e <_vfiprintf_r+0x176>
 8009544:	7863      	ldrb	r3, [r4, #1]
 8009546:	2b2a      	cmp	r3, #42	; 0x2a
 8009548:	d135      	bne.n	80095b6 <_vfiprintf_r+0x1ce>
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	1d1a      	adds	r2, r3, #4
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	9203      	str	r2, [sp, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	bfb8      	it	lt
 8009556:	f04f 33ff 	movlt.w	r3, #4294967295
 800955a:	3402      	adds	r4, #2
 800955c:	9305      	str	r3, [sp, #20]
 800955e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009644 <_vfiprintf_r+0x25c>
 8009562:	7821      	ldrb	r1, [r4, #0]
 8009564:	2203      	movs	r2, #3
 8009566:	4650      	mov	r0, sl
 8009568:	f7f6 fe52 	bl	8000210 <memchr>
 800956c:	b140      	cbz	r0, 8009580 <_vfiprintf_r+0x198>
 800956e:	2340      	movs	r3, #64	; 0x40
 8009570:	eba0 000a 	sub.w	r0, r0, sl
 8009574:	fa03 f000 	lsl.w	r0, r3, r0
 8009578:	9b04      	ldr	r3, [sp, #16]
 800957a:	4303      	orrs	r3, r0
 800957c:	3401      	adds	r4, #1
 800957e:	9304      	str	r3, [sp, #16]
 8009580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009584:	482c      	ldr	r0, [pc, #176]	; (8009638 <_vfiprintf_r+0x250>)
 8009586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800958a:	2206      	movs	r2, #6
 800958c:	f7f6 fe40 	bl	8000210 <memchr>
 8009590:	2800      	cmp	r0, #0
 8009592:	d03f      	beq.n	8009614 <_vfiprintf_r+0x22c>
 8009594:	4b29      	ldr	r3, [pc, #164]	; (800963c <_vfiprintf_r+0x254>)
 8009596:	bb1b      	cbnz	r3, 80095e0 <_vfiprintf_r+0x1f8>
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	3307      	adds	r3, #7
 800959c:	f023 0307 	bic.w	r3, r3, #7
 80095a0:	3308      	adds	r3, #8
 80095a2:	9303      	str	r3, [sp, #12]
 80095a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a6:	443b      	add	r3, r7
 80095a8:	9309      	str	r3, [sp, #36]	; 0x24
 80095aa:	e767      	b.n	800947c <_vfiprintf_r+0x94>
 80095ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80095b0:	460c      	mov	r4, r1
 80095b2:	2001      	movs	r0, #1
 80095b4:	e7a5      	b.n	8009502 <_vfiprintf_r+0x11a>
 80095b6:	2300      	movs	r3, #0
 80095b8:	3401      	adds	r4, #1
 80095ba:	9305      	str	r3, [sp, #20]
 80095bc:	4619      	mov	r1, r3
 80095be:	f04f 0c0a 	mov.w	ip, #10
 80095c2:	4620      	mov	r0, r4
 80095c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c8:	3a30      	subs	r2, #48	; 0x30
 80095ca:	2a09      	cmp	r2, #9
 80095cc:	d903      	bls.n	80095d6 <_vfiprintf_r+0x1ee>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0c5      	beq.n	800955e <_vfiprintf_r+0x176>
 80095d2:	9105      	str	r1, [sp, #20]
 80095d4:	e7c3      	b.n	800955e <_vfiprintf_r+0x176>
 80095d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095da:	4604      	mov	r4, r0
 80095dc:	2301      	movs	r3, #1
 80095de:	e7f0      	b.n	80095c2 <_vfiprintf_r+0x1da>
 80095e0:	ab03      	add	r3, sp, #12
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	462a      	mov	r2, r5
 80095e6:	4b16      	ldr	r3, [pc, #88]	; (8009640 <_vfiprintf_r+0x258>)
 80095e8:	a904      	add	r1, sp, #16
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7fb f9be 	bl	800496c <_printf_float>
 80095f0:	4607      	mov	r7, r0
 80095f2:	1c78      	adds	r0, r7, #1
 80095f4:	d1d6      	bne.n	80095a4 <_vfiprintf_r+0x1bc>
 80095f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095f8:	07d9      	lsls	r1, r3, #31
 80095fa:	d405      	bmi.n	8009608 <_vfiprintf_r+0x220>
 80095fc:	89ab      	ldrh	r3, [r5, #12]
 80095fe:	059a      	lsls	r2, r3, #22
 8009600:	d402      	bmi.n	8009608 <_vfiprintf_r+0x220>
 8009602:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009604:	f7ff fe71 	bl	80092ea <__retarget_lock_release_recursive>
 8009608:	89ab      	ldrh	r3, [r5, #12]
 800960a:	065b      	lsls	r3, r3, #25
 800960c:	f53f af12 	bmi.w	8009434 <_vfiprintf_r+0x4c>
 8009610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009612:	e711      	b.n	8009438 <_vfiprintf_r+0x50>
 8009614:	ab03      	add	r3, sp, #12
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	462a      	mov	r2, r5
 800961a:	4b09      	ldr	r3, [pc, #36]	; (8009640 <_vfiprintf_r+0x258>)
 800961c:	a904      	add	r1, sp, #16
 800961e:	4630      	mov	r0, r6
 8009620:	f7fb fc48 	bl	8004eb4 <_printf_i>
 8009624:	e7e4      	b.n	80095f0 <_vfiprintf_r+0x208>
 8009626:	bf00      	nop
 8009628:	0800a044 	.word	0x0800a044
 800962c:	0800a064 	.word	0x0800a064
 8009630:	0800a024 	.word	0x0800a024
 8009634:	08009fbc 	.word	0x08009fbc
 8009638:	08009fc6 	.word	0x08009fc6
 800963c:	0800496d 	.word	0x0800496d
 8009640:	080093c5 	.word	0x080093c5
 8009644:	08009fc2 	.word	0x08009fc2

08009648 <__swbuf_r>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	460e      	mov	r6, r1
 800964c:	4614      	mov	r4, r2
 800964e:	4605      	mov	r5, r0
 8009650:	b118      	cbz	r0, 800965a <__swbuf_r+0x12>
 8009652:	6983      	ldr	r3, [r0, #24]
 8009654:	b90b      	cbnz	r3, 800965a <__swbuf_r+0x12>
 8009656:	f7ff fd97 	bl	8009188 <__sinit>
 800965a:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <__swbuf_r+0x98>)
 800965c:	429c      	cmp	r4, r3
 800965e:	d12b      	bne.n	80096b8 <__swbuf_r+0x70>
 8009660:	686c      	ldr	r4, [r5, #4]
 8009662:	69a3      	ldr	r3, [r4, #24]
 8009664:	60a3      	str	r3, [r4, #8]
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	071a      	lsls	r2, r3, #28
 800966a:	d52f      	bpl.n	80096cc <__swbuf_r+0x84>
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	b36b      	cbz	r3, 80096cc <__swbuf_r+0x84>
 8009670:	6923      	ldr	r3, [r4, #16]
 8009672:	6820      	ldr	r0, [r4, #0]
 8009674:	1ac0      	subs	r0, r0, r3
 8009676:	6963      	ldr	r3, [r4, #20]
 8009678:	b2f6      	uxtb	r6, r6
 800967a:	4283      	cmp	r3, r0
 800967c:	4637      	mov	r7, r6
 800967e:	dc04      	bgt.n	800968a <__swbuf_r+0x42>
 8009680:	4621      	mov	r1, r4
 8009682:	4628      	mov	r0, r5
 8009684:	f7ff fcec 	bl	8009060 <_fflush_r>
 8009688:	bb30      	cbnz	r0, 80096d8 <__swbuf_r+0x90>
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	3b01      	subs	r3, #1
 800968e:	60a3      	str	r3, [r4, #8]
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	6022      	str	r2, [r4, #0]
 8009696:	701e      	strb	r6, [r3, #0]
 8009698:	6963      	ldr	r3, [r4, #20]
 800969a:	3001      	adds	r0, #1
 800969c:	4283      	cmp	r3, r0
 800969e:	d004      	beq.n	80096aa <__swbuf_r+0x62>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	07db      	lsls	r3, r3, #31
 80096a4:	d506      	bpl.n	80096b4 <__swbuf_r+0x6c>
 80096a6:	2e0a      	cmp	r6, #10
 80096a8:	d104      	bne.n	80096b4 <__swbuf_r+0x6c>
 80096aa:	4621      	mov	r1, r4
 80096ac:	4628      	mov	r0, r5
 80096ae:	f7ff fcd7 	bl	8009060 <_fflush_r>
 80096b2:	b988      	cbnz	r0, 80096d8 <__swbuf_r+0x90>
 80096b4:	4638      	mov	r0, r7
 80096b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <__swbuf_r+0x9c>)
 80096ba:	429c      	cmp	r4, r3
 80096bc:	d101      	bne.n	80096c2 <__swbuf_r+0x7a>
 80096be:	68ac      	ldr	r4, [r5, #8]
 80096c0:	e7cf      	b.n	8009662 <__swbuf_r+0x1a>
 80096c2:	4b09      	ldr	r3, [pc, #36]	; (80096e8 <__swbuf_r+0xa0>)
 80096c4:	429c      	cmp	r4, r3
 80096c6:	bf08      	it	eq
 80096c8:	68ec      	ldreq	r4, [r5, #12]
 80096ca:	e7ca      	b.n	8009662 <__swbuf_r+0x1a>
 80096cc:	4621      	mov	r1, r4
 80096ce:	4628      	mov	r0, r5
 80096d0:	f000 f80c 	bl	80096ec <__swsetup_r>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d0cb      	beq.n	8009670 <__swbuf_r+0x28>
 80096d8:	f04f 37ff 	mov.w	r7, #4294967295
 80096dc:	e7ea      	b.n	80096b4 <__swbuf_r+0x6c>
 80096de:	bf00      	nop
 80096e0:	0800a044 	.word	0x0800a044
 80096e4:	0800a064 	.word	0x0800a064
 80096e8:	0800a024 	.word	0x0800a024

080096ec <__swsetup_r>:
 80096ec:	4b32      	ldr	r3, [pc, #200]	; (80097b8 <__swsetup_r+0xcc>)
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	681d      	ldr	r5, [r3, #0]
 80096f2:	4606      	mov	r6, r0
 80096f4:	460c      	mov	r4, r1
 80096f6:	b125      	cbz	r5, 8009702 <__swsetup_r+0x16>
 80096f8:	69ab      	ldr	r3, [r5, #24]
 80096fa:	b913      	cbnz	r3, 8009702 <__swsetup_r+0x16>
 80096fc:	4628      	mov	r0, r5
 80096fe:	f7ff fd43 	bl	8009188 <__sinit>
 8009702:	4b2e      	ldr	r3, [pc, #184]	; (80097bc <__swsetup_r+0xd0>)
 8009704:	429c      	cmp	r4, r3
 8009706:	d10f      	bne.n	8009728 <__swsetup_r+0x3c>
 8009708:	686c      	ldr	r4, [r5, #4]
 800970a:	89a3      	ldrh	r3, [r4, #12]
 800970c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009710:	0719      	lsls	r1, r3, #28
 8009712:	d42c      	bmi.n	800976e <__swsetup_r+0x82>
 8009714:	06dd      	lsls	r5, r3, #27
 8009716:	d411      	bmi.n	800973c <__swsetup_r+0x50>
 8009718:	2309      	movs	r3, #9
 800971a:	6033      	str	r3, [r6, #0]
 800971c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	f04f 30ff 	mov.w	r0, #4294967295
 8009726:	e03e      	b.n	80097a6 <__swsetup_r+0xba>
 8009728:	4b25      	ldr	r3, [pc, #148]	; (80097c0 <__swsetup_r+0xd4>)
 800972a:	429c      	cmp	r4, r3
 800972c:	d101      	bne.n	8009732 <__swsetup_r+0x46>
 800972e:	68ac      	ldr	r4, [r5, #8]
 8009730:	e7eb      	b.n	800970a <__swsetup_r+0x1e>
 8009732:	4b24      	ldr	r3, [pc, #144]	; (80097c4 <__swsetup_r+0xd8>)
 8009734:	429c      	cmp	r4, r3
 8009736:	bf08      	it	eq
 8009738:	68ec      	ldreq	r4, [r5, #12]
 800973a:	e7e6      	b.n	800970a <__swsetup_r+0x1e>
 800973c:	0758      	lsls	r0, r3, #29
 800973e:	d512      	bpl.n	8009766 <__swsetup_r+0x7a>
 8009740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009742:	b141      	cbz	r1, 8009756 <__swsetup_r+0x6a>
 8009744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009748:	4299      	cmp	r1, r3
 800974a:	d002      	beq.n	8009752 <__swsetup_r+0x66>
 800974c:	4630      	mov	r0, r6
 800974e:	f7fe fd4f 	bl	80081f0 <_free_r>
 8009752:	2300      	movs	r3, #0
 8009754:	6363      	str	r3, [r4, #52]	; 0x34
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	2300      	movs	r3, #0
 8009760:	6063      	str	r3, [r4, #4]
 8009762:	6923      	ldr	r3, [r4, #16]
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f043 0308 	orr.w	r3, r3, #8
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	6923      	ldr	r3, [r4, #16]
 8009770:	b94b      	cbnz	r3, 8009786 <__swsetup_r+0x9a>
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800977c:	d003      	beq.n	8009786 <__swsetup_r+0x9a>
 800977e:	4621      	mov	r1, r4
 8009780:	4630      	mov	r0, r6
 8009782:	f000 f84d 	bl	8009820 <__smakebuf_r>
 8009786:	89a0      	ldrh	r0, [r4, #12]
 8009788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800978c:	f010 0301 	ands.w	r3, r0, #1
 8009790:	d00a      	beq.n	80097a8 <__swsetup_r+0xbc>
 8009792:	2300      	movs	r3, #0
 8009794:	60a3      	str	r3, [r4, #8]
 8009796:	6963      	ldr	r3, [r4, #20]
 8009798:	425b      	negs	r3, r3
 800979a:	61a3      	str	r3, [r4, #24]
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	b943      	cbnz	r3, 80097b2 <__swsetup_r+0xc6>
 80097a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097a4:	d1ba      	bne.n	800971c <__swsetup_r+0x30>
 80097a6:	bd70      	pop	{r4, r5, r6, pc}
 80097a8:	0781      	lsls	r1, r0, #30
 80097aa:	bf58      	it	pl
 80097ac:	6963      	ldrpl	r3, [r4, #20]
 80097ae:	60a3      	str	r3, [r4, #8]
 80097b0:	e7f4      	b.n	800979c <__swsetup_r+0xb0>
 80097b2:	2000      	movs	r0, #0
 80097b4:	e7f7      	b.n	80097a6 <__swsetup_r+0xba>
 80097b6:	bf00      	nop
 80097b8:	2000000c 	.word	0x2000000c
 80097bc:	0800a044 	.word	0x0800a044
 80097c0:	0800a064 	.word	0x0800a064
 80097c4:	0800a024 	.word	0x0800a024

080097c8 <abort>:
 80097c8:	b508      	push	{r3, lr}
 80097ca:	2006      	movs	r0, #6
 80097cc:	f000 f898 	bl	8009900 <raise>
 80097d0:	2001      	movs	r0, #1
 80097d2:	f7f8 faa6 	bl	8001d22 <_exit>

080097d6 <__swhatbuf_r>:
 80097d6:	b570      	push	{r4, r5, r6, lr}
 80097d8:	460e      	mov	r6, r1
 80097da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097de:	2900      	cmp	r1, #0
 80097e0:	b096      	sub	sp, #88	; 0x58
 80097e2:	4614      	mov	r4, r2
 80097e4:	461d      	mov	r5, r3
 80097e6:	da08      	bge.n	80097fa <__swhatbuf_r+0x24>
 80097e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	061a      	lsls	r2, r3, #24
 80097f2:	d410      	bmi.n	8009816 <__swhatbuf_r+0x40>
 80097f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f8:	e00e      	b.n	8009818 <__swhatbuf_r+0x42>
 80097fa:	466a      	mov	r2, sp
 80097fc:	f000 f89c 	bl	8009938 <_fstat_r>
 8009800:	2800      	cmp	r0, #0
 8009802:	dbf1      	blt.n	80097e8 <__swhatbuf_r+0x12>
 8009804:	9a01      	ldr	r2, [sp, #4]
 8009806:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800980a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800980e:	425a      	negs	r2, r3
 8009810:	415a      	adcs	r2, r3
 8009812:	602a      	str	r2, [r5, #0]
 8009814:	e7ee      	b.n	80097f4 <__swhatbuf_r+0x1e>
 8009816:	2340      	movs	r3, #64	; 0x40
 8009818:	2000      	movs	r0, #0
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	b016      	add	sp, #88	; 0x58
 800981e:	bd70      	pop	{r4, r5, r6, pc}

08009820 <__smakebuf_r>:
 8009820:	898b      	ldrh	r3, [r1, #12]
 8009822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009824:	079d      	lsls	r5, r3, #30
 8009826:	4606      	mov	r6, r0
 8009828:	460c      	mov	r4, r1
 800982a:	d507      	bpl.n	800983c <__smakebuf_r+0x1c>
 800982c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	2301      	movs	r3, #1
 8009836:	6163      	str	r3, [r4, #20]
 8009838:	b002      	add	sp, #8
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	ab01      	add	r3, sp, #4
 800983e:	466a      	mov	r2, sp
 8009840:	f7ff ffc9 	bl	80097d6 <__swhatbuf_r>
 8009844:	9900      	ldr	r1, [sp, #0]
 8009846:	4605      	mov	r5, r0
 8009848:	4630      	mov	r0, r6
 800984a:	f7fe fd3d 	bl	80082c8 <_malloc_r>
 800984e:	b948      	cbnz	r0, 8009864 <__smakebuf_r+0x44>
 8009850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009854:	059a      	lsls	r2, r3, #22
 8009856:	d4ef      	bmi.n	8009838 <__smakebuf_r+0x18>
 8009858:	f023 0303 	bic.w	r3, r3, #3
 800985c:	f043 0302 	orr.w	r3, r3, #2
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	e7e3      	b.n	800982c <__smakebuf_r+0xc>
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <__smakebuf_r+0x7c>)
 8009866:	62b3      	str	r3, [r6, #40]	; 0x28
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	6020      	str	r0, [r4, #0]
 800986c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	9b00      	ldr	r3, [sp, #0]
 8009874:	6163      	str	r3, [r4, #20]
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	6120      	str	r0, [r4, #16]
 800987a:	b15b      	cbz	r3, 8009894 <__smakebuf_r+0x74>
 800987c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009880:	4630      	mov	r0, r6
 8009882:	f000 f86b 	bl	800995c <_isatty_r>
 8009886:	b128      	cbz	r0, 8009894 <__smakebuf_r+0x74>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f023 0303 	bic.w	r3, r3, #3
 800988e:	f043 0301 	orr.w	r3, r3, #1
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	89a0      	ldrh	r0, [r4, #12]
 8009896:	4305      	orrs	r5, r0
 8009898:	81a5      	strh	r5, [r4, #12]
 800989a:	e7cd      	b.n	8009838 <__smakebuf_r+0x18>
 800989c:	08009121 	.word	0x08009121

080098a0 <_malloc_usable_size_r>:
 80098a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098a4:	1f18      	subs	r0, r3, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfbc      	itt	lt
 80098aa:	580b      	ldrlt	r3, [r1, r0]
 80098ac:	18c0      	addlt	r0, r0, r3
 80098ae:	4770      	bx	lr

080098b0 <_raise_r>:
 80098b0:	291f      	cmp	r1, #31
 80098b2:	b538      	push	{r3, r4, r5, lr}
 80098b4:	4604      	mov	r4, r0
 80098b6:	460d      	mov	r5, r1
 80098b8:	d904      	bls.n	80098c4 <_raise_r+0x14>
 80098ba:	2316      	movs	r3, #22
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	f04f 30ff 	mov.w	r0, #4294967295
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098c6:	b112      	cbz	r2, 80098ce <_raise_r+0x1e>
 80098c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098cc:	b94b      	cbnz	r3, 80098e2 <_raise_r+0x32>
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 f830 	bl	8009934 <_getpid_r>
 80098d4:	462a      	mov	r2, r5
 80098d6:	4601      	mov	r1, r0
 80098d8:	4620      	mov	r0, r4
 80098da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098de:	f000 b817 	b.w	8009910 <_kill_r>
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d00a      	beq.n	80098fc <_raise_r+0x4c>
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	d103      	bne.n	80098f2 <_raise_r+0x42>
 80098ea:	2316      	movs	r3, #22
 80098ec:	6003      	str	r3, [r0, #0]
 80098ee:	2001      	movs	r0, #1
 80098f0:	e7e7      	b.n	80098c2 <_raise_r+0x12>
 80098f2:	2400      	movs	r4, #0
 80098f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098f8:	4628      	mov	r0, r5
 80098fa:	4798      	blx	r3
 80098fc:	2000      	movs	r0, #0
 80098fe:	e7e0      	b.n	80098c2 <_raise_r+0x12>

08009900 <raise>:
 8009900:	4b02      	ldr	r3, [pc, #8]	; (800990c <raise+0xc>)
 8009902:	4601      	mov	r1, r0
 8009904:	6818      	ldr	r0, [r3, #0]
 8009906:	f7ff bfd3 	b.w	80098b0 <_raise_r>
 800990a:	bf00      	nop
 800990c:	2000000c 	.word	0x2000000c

08009910 <_kill_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_kill_r+0x20>)
 8009914:	2300      	movs	r3, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	4611      	mov	r1, r2
 800991c:	602b      	str	r3, [r5, #0]
 800991e:	f7f8 f9f0 	bl	8001d02 <_kill>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <_kill_r+0x1c>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	b103      	cbz	r3, 800992c <_kill_r+0x1c>
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	bd38      	pop	{r3, r4, r5, pc}
 800992e:	bf00      	nop
 8009930:	20000c28 	.word	0x20000c28

08009934 <_getpid_r>:
 8009934:	f7f8 b9dd 	b.w	8001cf2 <_getpid>

08009938 <_fstat_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4d07      	ldr	r5, [pc, #28]	; (8009958 <_fstat_r+0x20>)
 800993c:	2300      	movs	r3, #0
 800993e:	4604      	mov	r4, r0
 8009940:	4608      	mov	r0, r1
 8009942:	4611      	mov	r1, r2
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	f7f8 fa3b 	bl	8001dc0 <_fstat>
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	d102      	bne.n	8009954 <_fstat_r+0x1c>
 800994e:	682b      	ldr	r3, [r5, #0]
 8009950:	b103      	cbz	r3, 8009954 <_fstat_r+0x1c>
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	bd38      	pop	{r3, r4, r5, pc}
 8009956:	bf00      	nop
 8009958:	20000c28 	.word	0x20000c28

0800995c <_isatty_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d06      	ldr	r5, [pc, #24]	; (8009978 <_isatty_r+0x1c>)
 8009960:	2300      	movs	r3, #0
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	602b      	str	r3, [r5, #0]
 8009968:	f7f8 fa3a 	bl	8001de0 <_isatty>
 800996c:	1c43      	adds	r3, r0, #1
 800996e:	d102      	bne.n	8009976 <_isatty_r+0x1a>
 8009970:	682b      	ldr	r3, [r5, #0]
 8009972:	b103      	cbz	r3, 8009976 <_isatty_r+0x1a>
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	20000c28 	.word	0x20000c28

0800997c <_init>:
 800997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997e:	bf00      	nop
 8009980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009982:	bc08      	pop	{r3}
 8009984:	469e      	mov	lr, r3
 8009986:	4770      	bx	lr

08009988 <_fini>:
 8009988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998a:	bf00      	nop
 800998c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998e:	bc08      	pop	{r3}
 8009990:	469e      	mov	lr, r3
 8009992:	4770      	bx	lr
