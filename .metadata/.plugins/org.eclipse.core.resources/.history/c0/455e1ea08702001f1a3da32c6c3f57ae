
Control_Robot_v3.5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c08c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800c230  0800c230  0001c230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccf0  0800ccf0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ccf0  0800ccf0  0001ccf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccf8  0800ccf8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccf8  0800ccf8  0001ccf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccfc  0800ccfc  0001ccfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800cd00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  200001ec  0800ceec  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d48  0800ceec  00020d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005108  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117d  00000000  00000000  00025324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  000264a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00026920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f91  00000000  00000000  00026cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b22  00000000  00000000  00037c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000588c0  00000000  00000000  0003e7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00097063  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d30  00000000  00000000  000970b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c214 	.word	0x0800c214

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800c214 	.word	0x0800c214

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f003 fe01 	bl	8004cc0 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f003 f9b7 	bl	8004470 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f003 fd0d 	bl	8004b34 <statusPolarityPWM>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema

	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 f9df 	bl	80044f4 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001136:	f000 f84d 	bl	80011d4 <int_Hardware>
	//Activamos el SysTick
	//config_SysTick_us();
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <main+0x7c>)
 800113c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <main+0x7c>)
 8001142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800114a:	f000 f9d1 	bl	80014f0 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800114e:	2101      	movs	r1, #1
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <main+0x80>)
 8001152:	f003 f98d 	bl	8004470 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001156:	2101      	movs	r1, #1
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <main+0x84>)
 800115a:	f003 f989 	bl	8004470 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800115e:	2101      	movs	r1, #1
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <main+0x88>)
 8001162:	f003 f985 	bl	8004470 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001166:	2101      	movs	r1, #1
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <main+0x8c>)
 800116a:	f003 f981 	bl	8004470 <GPIO_writePin>
	int_Config_Motor();
 800116e:	f000 f9c9 	bl	8001504 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x90>)
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <main+0x94>)
 8001176:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x98>)
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <main+0x9c>)
 800117c:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <main+0xa0>)
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <main+0xa4>)
 8001182:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <main+0xa8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <main+0x76>
		{
			runCommand(bufferRecepcion);
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <main+0xac>)
 800118e:	f000 ff57 	bl	8002040 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <main+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e7f4      	b.n	8001184 <main+0x60>
		}
		else
		{
			__NOP();
 800119a:	bf00      	nop
		if(commandComplete==1)
 800119c:	e7f2      	b.n	8001184 <main+0x60>
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	200002c8 	.word	0x200002c8
 80011a8:	20000344 	.word	0x20000344
 80011ac:	200002d4 	.word	0x200002d4
 80011b0:	20000350 	.word	0x20000350
 80011b4:	20000468 	.word	0x20000468
 80011b8:	200002ec 	.word	0x200002ec
 80011bc:	20000454 	.word	0x20000454
 80011c0:	40105fa7 	.word	0x40105fa7
 80011c4:	20000458 	.word	0x20000458
 80011c8:	400facee 	.word	0x400facee
 80011cc:	20000016 	.word	0x20000016
 80011d0:	20000498 	.word	0x20000498

080011d4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80011da:	4bab      	ldr	r3, [pc, #684]	; (8001488 <int_Hardware+0x2b4>)
 80011dc:	4aab      	ldr	r2, [pc, #684]	; (800148c <int_Hardware+0x2b8>)
 80011de:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80011e0:	4ba9      	ldr	r3, [pc, #676]	; (8001488 <int_Hardware+0x2b4>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	48a4      	ldr	r0, [pc, #656]	; (8001488 <int_Hardware+0x2b4>)
 80011f6:	f002 ffef 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80011fa:	48a3      	ldr	r0, [pc, #652]	; (8001488 <int_Hardware+0x2b4>)
 80011fc:	f003 f80e 	bl	800421c <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <int_Hardware+0x2bc>)
 8001202:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <int_Hardware+0x2c0>)
 8001204:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001206:	4ba2      	ldr	r3, [pc, #648]	; (8001490 <int_Hardware+0x2bc>)
 8001208:	2205      	movs	r2, #5
 800120a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800120c:	2300      	movs	r3, #0
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	489d      	ldr	r0, [pc, #628]	; (8001490 <int_Hardware+0x2bc>)
 800121c:	f002 ffdc 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001220:	489b      	ldr	r0, [pc, #620]	; (8001490 <int_Hardware+0x2bc>)
 8001222:	f002 fffb 	bl	800421c <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001226:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <int_Hardware+0x2c4>)
 8001228:	4a9a      	ldr	r2, [pc, #616]	; (8001494 <int_Hardware+0x2c0>)
 800122a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <int_Hardware+0x2c4>)
 800122e:	2202      	movs	r2, #2
 8001230:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001232:	2307      	movs	r3, #7
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4895      	ldr	r0, [pc, #596]	; (8001498 <int_Hardware+0x2c4>)
 8001242:	f002 ffc9 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001246:	4894      	ldr	r0, [pc, #592]	; (8001498 <int_Hardware+0x2c4>)
 8001248:	f002 ffe8 	bl	800421c <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <int_Hardware+0x2c8>)
 800124e:	4a91      	ldr	r2, [pc, #580]	; (8001494 <int_Hardware+0x2c0>)
 8001250:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <int_Hardware+0x2c8>)
 8001254:	2203      	movs	r2, #3
 8001256:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001258:	2307      	movs	r3, #7
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2300      	movs	r3, #0
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	488d      	ldr	r0, [pc, #564]	; (800149c <int_Hardware+0x2c8>)
 8001268:	f002 ffb6 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800126c:	488b      	ldr	r0, [pc, #556]	; (800149c <int_Hardware+0x2c8>)
 800126e:	f002 ffd5 	bl	800421c <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <int_Hardware+0x2cc>)
 8001274:	4a87      	ldr	r2, [pc, #540]	; (8001494 <int_Hardware+0x2c0>)
 8001276:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <int_Hardware+0x2cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800127e:	2302      	movs	r3, #2
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	4884      	ldr	r0, [pc, #528]	; (80014a0 <int_Hardware+0x2cc>)
 800128e:	f002 ffa3 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001292:	4883      	ldr	r0, [pc, #524]	; (80014a0 <int_Hardware+0x2cc>)
 8001294:	f002 ffc2 	bl	800421c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001298:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <int_Hardware+0x2d0>)
 800129a:	4a7c      	ldr	r2, [pc, #496]	; (800148c <int_Hardware+0x2b8>)
 800129c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <int_Hardware+0x2d0>)
 80012a0:	220c      	movs	r2, #12
 80012a2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	487c      	ldr	r0, [pc, #496]	; (80014a4 <int_Hardware+0x2d0>)
 80012b4:	f002 ff90 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80012b8:	487a      	ldr	r0, [pc, #488]	; (80014a4 <int_Hardware+0x2d0>)
 80012ba:	f002 ffaf 	bl	800421c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <int_Hardware+0x2d4>)
 80012c0:	4a72      	ldr	r2, [pc, #456]	; (800148c <int_Hardware+0x2b8>)
 80012c2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <int_Hardware+0x2d4>)
 80012c6:	220a      	movs	r2, #10
 80012c8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <int_Hardware+0x2d4>)
 80012da:	f002 ff7d 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80012de:	4872      	ldr	r0, [pc, #456]	; (80014a8 <int_Hardware+0x2d4>)
 80012e0:	f002 ff9c 	bl	800421c <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80012e4:	4b71      	ldr	r3, [pc, #452]	; (80014ac <int_Hardware+0x2d8>)
 80012e6:	4a6b      	ldr	r2, [pc, #428]	; (8001494 <int_Hardware+0x2c0>)
 80012e8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80012ea:	4b70      	ldr	r3, [pc, #448]	; (80014ac <int_Hardware+0x2d8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80012f0:	2302      	movs	r3, #2
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	486b      	ldr	r0, [pc, #428]	; (80014ac <int_Hardware+0x2d8>)
 8001300:	f002 ff6a 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001304:	4869      	ldr	r0, [pc, #420]	; (80014ac <int_Hardware+0x2d8>)
 8001306:	f002 ff89 	bl	800421c <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 800130a:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <int_Hardware+0x2dc>)
 800130c:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <int_Hardware+0x2e0>)
 800130e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001310:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <int_Hardware+0x2dc>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001316:	2300      	movs	r3, #0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4862      	ldr	r0, [pc, #392]	; (80014b0 <int_Hardware+0x2dc>)
 8001326:	f002 ff57 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800132a:	4861      	ldr	r0, [pc, #388]	; (80014b0 <int_Hardware+0x2dc>)
 800132c:	f002 ff76 	bl	800421c <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001330:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <int_Hardware+0x2e4>)
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <int_Hardware+0x2b8>)
 8001334:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <int_Hardware+0x2e4>)
 8001338:	220b      	movs	r2, #11
 800133a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	2101      	movs	r1, #1
 800134a:	485b      	ldr	r0, [pc, #364]	; (80014b8 <int_Hardware+0x2e4>)
 800134c:	f002 ff44 	bl	80041d8 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001350:	4859      	ldr	r0, [pc, #356]	; (80014b8 <int_Hardware+0x2e4>)
 8001352:	f002 ff63 	bl	800421c <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <int_Hardware+0x2e8>)
 8001358:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <int_Hardware+0x2ec>)
 800135a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <int_Hardware+0x2e8>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <int_Hardware+0x2e8>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001368:	4b54      	ldr	r3, [pc, #336]	; (80014bc <int_Hardware+0x2e8>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <int_Hardware+0x2e8>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001374:	4b51      	ldr	r3, [pc, #324]	; (80014bc <int_Hardware+0x2e8>)
 8001376:	2201      	movs	r2, #1
 8001378:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800137a:	4b50      	ldr	r3, [pc, #320]	; (80014bc <int_Hardware+0x2e8>)
 800137c:	2201      	movs	r2, #1
 800137e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8001380:	484e      	ldr	r0, [pc, #312]	; (80014bc <int_Hardware+0x2e8>)
 8001382:	f003 fce1 	bl	8004d48 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001386:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <int_Hardware+0x2f0>)
 8001388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138c:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <int_Hardware+0x2f0>)
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <int_Hardware+0x2f0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800139c:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <int_Hardware+0x2f0>)
 800139e:	22fa      	movs	r2, #250	; 0xfa
 80013a0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <int_Hardware+0x2f0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80013a8:	4846      	ldr	r0, [pc, #280]	; (80014c4 <int_Hardware+0x2f0>)
 80013aa:	f001 fcf1 	bl	8002d90 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <int_Hardware+0x2f4>)
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <int_Hardware+0x2f8>)
 80013b2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <int_Hardware+0x2f4>)
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <int_Hardware+0x2f4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <int_Hardware+0x2f4>)
 80013c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c8:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <int_Hardware+0x2f4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 80013d0:	483d      	ldr	r0, [pc, #244]	; (80014c8 <int_Hardware+0x2f4>)
 80013d2:	f001 fcdd 	bl	8002d90 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <int_Hardware+0x2fc>)
 80013d8:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <int_Hardware+0x300>)
 80013da:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <int_Hardware+0x2fc>)
 80013de:	220a      	movs	r2, #10
 80013e0:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <int_Hardware+0x2fc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <int_Hardware+0x2fc>)
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <int_Hardware+0x2fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80013f4:	4836      	ldr	r0, [pc, #216]	; (80014d0 <int_Hardware+0x2fc>)
 80013f6:	f001 fccb 	bl	8002d90 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <int_Hardware+0x304>)
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <int_Hardware+0x2b8>)
 80013fe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <int_Hardware+0x304>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <int_Hardware+0x308>)
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <int_Hardware+0x304>)
 800140a:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <int_Hardware+0x308>)
 800140e:	2202      	movs	r2, #2
 8001410:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <int_Hardware+0x308>)
 8001414:	f001 fe40 	bl	8003098 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <int_Hardware+0x30c>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <int_Hardware+0x2b8>)
 800141c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <int_Hardware+0x30c>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <int_Hardware+0x310>)
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <int_Hardware+0x30c>)
 8001428:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <int_Hardware+0x310>)
 800142c:	2202      	movs	r2, #2
 800142e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <int_Hardware+0x310>)
 8001432:	f001 fe31 	bl	8003098 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <int_Hardware+0x314>)
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <int_Hardware+0x300>)
 800143a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <int_Hardware+0x314>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <int_Hardware+0x314>)
 8001444:	220a      	movs	r2, #10
 8001446:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <int_Hardware+0x314>)
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <int_Hardware+0x314>)
 8001450:	f003 f97e 	bl	8004750 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001454:	2101      	movs	r1, #1
 8001456:	4824      	ldr	r0, [pc, #144]	; (80014e8 <int_Hardware+0x314>)
 8001458:	f003 fada 	bl	8004a10 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <int_Hardware+0x318>)
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <int_Hardware+0x300>)
 8001460:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <int_Hardware+0x318>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <int_Hardware+0x318>)
 800146a:	220a      	movs	r2, #10
 800146c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <int_Hardware+0x318>)
 8001470:	2201      	movs	r2, #1
 8001472:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <int_Hardware+0x318>)
 8001476:	f003 f96b 	bl	8004750 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 800147a:	2101      	movs	r1, #1
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <int_Hardware+0x318>)
 800147e:	f003 fac7 	bl	8004a10 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000224 	.word	0x20000224
 800148c:	40020800 	.word	0x40020800
 8001490:	20000208 	.word	0x20000208
 8001494:	40020000 	.word	0x40020000
 8001498:	20000258 	.word	0x20000258
 800149c:	20000264 	.word	0x20000264
 80014a0:	200002bc 	.word	0x200002bc
 80014a4:	200002c8 	.word	0x200002c8
 80014a8:	200002d4 	.word	0x200002d4
 80014ac:	20000338 	.word	0x20000338
 80014b0:	20000344 	.word	0x20000344
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	20000350 	.word	0x20000350
 80014bc:	20000270 	.word	0x20000270
 80014c0:	40004400 	.word	0x40004400
 80014c4:	20000214 	.word	0x20000214
 80014c8:	200003c4 	.word	0x200003c4
 80014cc:	40000400 	.word	0x40000400
 80014d0:	200003b4 	.word	0x200003b4
 80014d4:	40000c00 	.word	0x40000c00
 80014d8:	20000230 	.word	0x20000230
 80014dc:	2000023c 	.word	0x2000023c
 80014e0:	20000244 	.word	0x20000244
 80014e4:	20000250 	.word	0x20000250
 80014e8:	200002e0 	.word	0x200002e0
 80014ec:	2000035c 	.word	0x2000035c

080014f0 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f003 f8af 	bl	8004658 <configMCO2>
	configMCO2PRE(4);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f003 f8c8 	bl	8004690 <configMCO2PRE>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 800150a:	4b55      	ldr	r3, [pc, #340]	; (8001660 <int_Config_Motor+0x15c>)
 800150c:	4a55      	ldr	r2, [pc, #340]	; (8001664 <int_Config_Motor+0x160>)
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.configMotor.frecuency = &value_period;
 8001510:	4b53      	ldr	r3, [pc, #332]	; (8001660 <int_Config_Motor+0x15c>)
 8001512:	4a55      	ldr	r2, [pc, #340]	; (8001668 <int_Config_Motor+0x164>)
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_R.configMotor.dir = SET;
 8001516:	4b52      	ldr	r3, [pc, #328]	; (8001660 <int_Config_Motor+0x15c>)
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 800151e:	4b50      	ldr	r3, [pc, #320]	; (8001660 <int_Config_Motor+0x15c>)
 8001520:	4a52      	ldr	r2, [pc, #328]	; (800166c <int_Config_Motor+0x168>)
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8001524:	4b4e      	ldr	r3, [pc, #312]	; (8001660 <int_Config_Motor+0x15c>)
 8001526:	4a52      	ldr	r2, [pc, #328]	; (8001670 <int_Config_Motor+0x16c>)
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 800152a:	4b4d      	ldr	r3, [pc, #308]	; (8001660 <int_Config_Motor+0x15c>)
 800152c:	4a51      	ldr	r2, [pc, #324]	; (8001674 <int_Config_Motor+0x170>)
 800152e:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_1 = handler_Motor_R.parametersMotor.parametersPID.e_2 = 0;
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <int_Config_Motor+0x15c>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	4b49      	ldr	r3, [pc, #292]	; (8001660 <int_Config_Motor+0x15c>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a48      	ldr	r2, [pc, #288]	; (8001660 <int_Config_Motor+0x15c>)
 800153e:	60d3      	str	r3, [r2, #12]
 8001540:	4b47      	ldr	r3, [pc, #284]	; (8001660 <int_Config_Motor+0x15c>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a46      	ldr	r2, [pc, #280]	; (8001660 <int_Config_Motor+0x15c>)
 8001546:	6093      	str	r3, [r2, #8]
	handler_Motor_R.parametersMotor.parametersPID.u = handler_Motor_R.parametersMotor.parametersPID.u_1 = 0;
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <int_Config_Motor+0x15c>)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <int_Config_Motor+0x15c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a42      	ldr	r2, [pc, #264]	; (8001660 <int_Config_Motor+0x15c>)
 8001556:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	float theta=2+Ts/2;
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <int_Config_Motor+0x174>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800156a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156e:	edc7 7a01 	vstr	s15, [r7, #4]
	constains_calculator(&handler_Motor_R.parametersMotor.parametersPID, 2, 120, theta);   //k,tau,theta
 8001572:	ed97 1a01 	vldr	s2, [r7, #4]
 8001576:	eddf 0a41 	vldr	s1, [pc, #260]	; 800167c <int_Config_Motor+0x178>
 800157a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800157e:	4838      	ldr	r0, [pc, #224]	; (8001660 <int_Config_Motor+0x15c>)
 8001580:	f001 fa08 	bl	8002994 <constains_calculator>

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8001584:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <int_Config_Motor+0x17c>)
 8001586:	4a37      	ldr	r2, [pc, #220]	; (8001664 <int_Config_Motor+0x160>)
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.configMotor.frecuency = &value_period;
 800158a:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <int_Config_Motor+0x17c>)
 800158c:	4a36      	ldr	r2, [pc, #216]	; (8001668 <int_Config_Motor+0x164>)
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_L.configMotor.dir = SET;
 8001590:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <int_Config_Motor+0x17c>)
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <int_Config_Motor+0x17c>)
 800159a:	4a3a      	ldr	r2, [pc, #232]	; (8001684 <int_Config_Motor+0x180>)
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 800159e:	4b38      	ldr	r3, [pc, #224]	; (8001680 <int_Config_Motor+0x17c>)
 80015a0:	4a39      	ldr	r2, [pc, #228]	; (8001688 <int_Config_Motor+0x184>)
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <int_Config_Motor+0x17c>)
 80015a6:	4a39      	ldr	r2, [pc, #228]	; (800168c <int_Config_Motor+0x188>)
 80015a8:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_1 = handler_Motor_L.parametersMotor.parametersPID.e_2 = 0;
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <int_Config_Motor+0x17c>)
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	4b33      	ldr	r3, [pc, #204]	; (8001680 <int_Config_Motor+0x17c>)
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <int_Config_Motor+0x17c>)
 80015b8:	60d3      	str	r3, [r2, #12]
 80015ba:	4b31      	ldr	r3, [pc, #196]	; (8001680 <int_Config_Motor+0x17c>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a30      	ldr	r2, [pc, #192]	; (8001680 <int_Config_Motor+0x17c>)
 80015c0:	6093      	str	r3, [r2, #8]
	handler_Motor_L.parametersMotor.parametersPID.u = handler_Motor_L.parametersMotor.parametersPID.u_1 = 0;
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <int_Config_Motor+0x17c>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <int_Config_Motor+0x17c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a2c      	ldr	r2, [pc, #176]	; (8001680 <int_Config_Motor+0x17c>)
 80015d0:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&handler_Motor_L.parametersMotor.parametersPID, 2, 120, theta);   //k,tau,theta
 80015d2:	ed97 1a01 	vldr	s2, [r7, #4]
 80015d6:	eddf 0a29 	vldr	s1, [pc, #164]	; 800167c <int_Config_Motor+0x178>
 80015da:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80015de:	4828      	ldr	r0, [pc, #160]	; (8001680 <int_Config_Motor+0x17c>)
 80015e0:	f001 f9d8 	bl	8002994 <constains_calculator>

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_1 = parameter_PID_distace.e_2 = 0;
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <int_Config_Motor+0x18c>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <int_Config_Motor+0x18c>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <int_Config_Motor+0x18c>)
 80015f2:	60d3      	str	r3, [r2, #12]
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <int_Config_Motor+0x18c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a25      	ldr	r2, [pc, #148]	; (8001690 <int_Config_Motor+0x18c>)
 80015fa:	6093      	str	r3, [r2, #8]
	parameter_PID_distace.u = parameter_PID_distace.u_1 = 0;
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <int_Config_Motor+0x18c>)
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <int_Config_Motor+0x18c>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <int_Config_Motor+0x18c>)
 800160a:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&parameter_PID_distace, 2, 150, theta);   //k,tau,theta
 800160c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001610:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001694 <int_Config_Motor+0x190>
 8001614:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <int_Config_Motor+0x18c>)
 800161a:	f001 f9bb 	bl	8002994 <constains_calculator>

	//---------------PID al angulo-----------------
	//definicion de parametros
	parameter_PID_phi.e = parameter_PID_phi.e_1 = parameter_PID_phi.e_2 = 0;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <int_Config_Motor+0x194>)
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <int_Config_Motor+0x194>)
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <int_Config_Motor+0x194>)
 800162c:	60d3      	str	r3, [r2, #12]
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <int_Config_Motor+0x194>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	4a19      	ldr	r2, [pc, #100]	; (8001698 <int_Config_Motor+0x194>)
 8001634:	6093      	str	r3, [r2, #8]
	parameter_PID_phi.u = parameter_PID_phi.u_1 = 0;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <int_Config_Motor+0x194>)
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <int_Config_Motor+0x194>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a15      	ldr	r2, [pc, #84]	; (8001698 <int_Config_Motor+0x194>)
 8001644:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&parameter_PID_phi, 2, 200, theta);   //k,tau,theta
 8001646:	ed97 1a01 	vldr	s2, [r7, #4]
 800164a:	eddf 0a14 	vldr	s1, [pc, #80]	; 800169c <int_Config_Motor+0x198>
 800164e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001652:	4811      	ldr	r0, [pc, #68]	; (8001698 <int_Config_Motor+0x194>)
 8001654:	f001 f99e 	bl	8002994 <constains_calculator>

};
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200002ec 	.word	0x200002ec
 8001664:	41a00000 	.word	0x41a00000
 8001668:	20000002 	.word	0x20000002
 800166c:	200002d4 	.word	0x200002d4
 8001670:	200002c8 	.word	0x200002c8
 8001674:	200002e0 	.word	0x200002e0
 8001678:	20000004 	.word	0x20000004
 800167c:	42f00000 	.word	0x42f00000
 8001680:	20000368 	.word	0x20000368
 8001684:	20000350 	.word	0x20000350
 8001688:	20000344 	.word	0x20000344
 800168c:	2000035c 	.word	0x2000035c
 8001690:	200003f4 	.word	0x200003f4
 8001694:	43160000 	.word	0x43160000
 8001698:	200003d4 	.word	0x200003d4
 800169c:	43480000 	.word	0x43480000

080016a0 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <BasicTimer2_Callback+0x10>)
 80016a6:	f002 ff0e 	bl	80044c6 <GPIOxTooglePin>
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000208 	.word	0x20000208
 80016b4:	00000000 	.word	0x00000000

080016b8 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 80016b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016bc:	ed2d 8b02 	vpush	{d8}
 80016c0:	b089      	sub	sp, #36	; 0x24
 80016c2:	af04      	add	r7, sp, #16
	if(flag_motor==1)
 80016c4:	4bc8      	ldr	r3, [pc, #800]	; (80019e8 <BasicTimer3_Callback+0x330>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 8309 	bne.w	8001ce0 <BasicTimer3_Callback+0x628>
	{
		//Calculamos la velocidad
		handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 80016ce:	4bc7      	ldr	r3, [pc, #796]	; (80019ec <BasicTimer3_Callback+0x334>)
 80016d0:	8c1b      	ldrh	r3, [r3, #32]
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016da:	4bc5      	ldr	r3, [pc, #788]	; (80019f0 <BasicTimer3_Callback+0x338>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e4:	4bc1      	ldr	r3, [pc, #772]	; (80019ec <BasicTimer3_Callback+0x334>)
 80016e6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 80016ea:	4bc2      	ldr	r3, [pc, #776]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 80016ec:	8c1b      	ldrh	r3, [r3, #32]
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f6:	4bc0      	ldr	r3, [pc, #768]	; (80019f8 <BasicTimer3_Callback+0x340>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	4bbc      	ldr	r3, [pc, #752]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001702:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001706:	4bb9      	ldr	r3, [pc, #740]	; (80019ec <BasicTimer3_Callback+0x334>)
 8001708:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800170c:	4bbb      	ldr	r3, [pc, #748]	; (80019fc <BasicTimer3_Callback+0x344>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171c:	4bb3      	ldr	r3, [pc, #716]	; (80019ec <BasicTimer3_Callback+0x334>)
 800171e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001722:	4bb4      	ldr	r3, [pc, #720]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001724:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001728:	4bb4      	ldr	r3, [pc, #720]	; (80019fc <BasicTimer3_Callback+0x344>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001738:	4bae      	ldr	r3, [pc, #696]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 800173a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
 800173e:	4bad      	ldr	r3, [pc, #692]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001740:	2200      	movs	r2, #0
 8001742:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001744:	4ba9      	ldr	r3, [pc, #676]	; (80019ec <BasicTimer3_Callback+0x334>)
 8001746:	2200      	movs	r2, #0
 8001748:	841a      	strh	r2, [r3, #32]
		//Calculo odometria
		distance_c = (handler_Motor_L.parametersMotor.distance+handler_Motor_R.parametersMotor.distance)/2;  	   //[mm]
 800174a:	4ba8      	ldr	r3, [pc, #672]	; (80019ec <BasicTimer3_Callback+0x334>)
 800174c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001750:	4ba8      	ldr	r3, [pc, #672]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001752:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800175a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800175e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001762:	4ba7      	ldr	r3, [pc, #668]	; (8001a00 <BasicTimer3_Callback+0x348>)
 8001764:	edc3 7a00 	vstr	s15, [r3]
		velocity_c = (handler_Motor_R.parametersMotor.velocity+handler_Motor_L.parametersMotor.velocity)/2;        //[m/s]
 8001768:	4ba2      	ldr	r3, [pc, #648]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 800176a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800176e:	4b9f      	ldr	r3, [pc, #636]	; (80019ec <BasicTimer3_Callback+0x334>)
 8001770:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001778:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800177c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001780:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <BasicTimer3_Callback+0x34c>)
 8001782:	edc3 7a00 	vstr	s15, [r3]
		w_angular_c = ((handler_Motor_R.parametersMotor.velocity-handler_Motor_L.parametersMotor.velocity)*100000)/b; //[rad/s]
 8001786:	4b9b      	ldr	r3, [pc, #620]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 8001788:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800178c:	4b97      	ldr	r3, [pc, #604]	; (80019ec <BasicTimer3_Callback+0x334>)
 800178e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001a08 <BasicTimer3_Callback+0x350>
 800179a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800179e:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8001a0c <BasicTimer3_Callback+0x354>
 80017a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a6:	4b9a      	ldr	r3, [pc, #616]	; (8001a10 <BasicTimer3_Callback+0x358>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
		parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.xr_position + (distance_c*(cos(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 80017ac:	4b99      	ldr	r3, [pc, #612]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fee1 	bl	8000578 <__aeabi_f2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	4b91      	ldr	r3, [pc, #580]	; (8001a00 <BasicTimer3_Callback+0x348>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feda 	bl	8000578 <__aeabi_f2d>
 80017c4:	4680      	mov	r8, r0
 80017c6:	4689      	mov	r9, r1
 80017c8:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fed3 	bl	8000578 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	ec43 2b10 	vmov	d0, r2, r3
 80017da:	f009 f805 	bl	800a7e8 <cos>
 80017de:	ec53 2b10 	vmov	r2, r3, d0
 80017e2:	4640      	mov	r0, r8
 80017e4:	4649      	mov	r1, r9
 80017e6:	f7fe ff1f 	bl	8000628 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7fe fd63 	bl	80002bc <__adddf3>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff fa0b 	bl	8000c18 <__aeabi_d2f>
 8001802:	4603      	mov	r3, r0
 8001804:	4a83      	ldr	r2, [pc, #524]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001806:	6053      	str	r3, [r2, #4]
		parameter_Posicion_Robot.yr_position  = parameter_Posicion_Robot.yr_position  + (distance_c*(sin(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 8001808:	4b82      	ldr	r3, [pc, #520]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe feb3 	bl	8000578 <__aeabi_f2d>
 8001812:	4604      	mov	r4, r0
 8001814:	460d      	mov	r5, r1
 8001816:	4b7a      	ldr	r3, [pc, #488]	; (8001a00 <BasicTimer3_Callback+0x348>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe feac 	bl	8000578 <__aeabi_f2d>
 8001820:	4680      	mov	r8, r0
 8001822:	4689      	mov	r9, r1
 8001824:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fea5 	bl	8000578 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	ec43 2b10 	vmov	d0, r2, r3
 8001836:	f009 f82b 	bl	800a890 <sin>
 800183a:	ec53 2b10 	vmov	r2, r3, d0
 800183e:	4640      	mov	r0, r8
 8001840:	4649      	mov	r1, r9
 8001842:	f7fe fef1 	bl	8000628 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4620      	mov	r0, r4
 800184c:	4629      	mov	r1, r5
 800184e:	f7fe fd35 	bl	80002bc <__adddf3>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f9dd 	bl	8000c18 <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4a6c      	ldr	r2, [pc, #432]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001862:	6093      	str	r3, [r2, #8]
		parameter_Posicion_Robot.phi_relativo = parameter_Posicion_Robot.phi_relativo + ((handler_Motor_R.parametersMotor.distance-handler_Motor_L.parametersMotor.distance)*100)/b;   //[rad]
 8001864:	4b6b      	ldr	r3, [pc, #428]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001866:	ed93 7a00 	vldr	s14, [r3]
 800186a:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <BasicTimer3_Callback+0x33c>)
 800186c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <BasicTimer3_Callback+0x334>)
 8001872:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001876:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800187a:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001a18 <BasicTimer3_Callback+0x360>
 800187e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001882:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8001a0c <BasicTimer3_Callback+0x354>
 8001886:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800188a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800188e:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001890:	edc3 7a00 	vstr	s15, [r3]
		parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8001894:	4b5f      	ldr	r3, [pc, #380]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fe6d 	bl	8000578 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	ec43 2b10 	vmov	d0, r2, r3
 80018a6:	f008 fff3 	bl	800a890 <sin>
 80018aa:	eeb0 8a40 	vmov.f32	s16, s0
 80018ae:	eef0 8a60 	vmov.f32	s17, s1
 80018b2:	4b58      	ldr	r3, [pc, #352]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe5e 	bl	8000578 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	ec43 2b10 	vmov	d0, r2, r3
 80018c4:	f008 ff90 	bl	800a7e8 <cos>
 80018c8:	eeb0 7a40 	vmov.f32	s14, s0
 80018cc:	eef0 7a60 	vmov.f32	s15, s1
 80018d0:	eeb0 1a47 	vmov.f32	s2, s14
 80018d4:	eef0 1a67 	vmov.f32	s3, s15
 80018d8:	eeb0 0a48 	vmov.f32	s0, s16
 80018dc:	eef0 0a68 	vmov.f32	s1, s17
 80018e0:	f009 f82e 	bl	800a940 <atan2>
 80018e4:	ec53 2b10 	vmov	r2, r3, d0
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f994 	bl	8000c18 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a48      	ldr	r2, [pc, #288]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80018f4:	6013      	str	r3, [r2, #0]
		//Paso de c.relativa a c.globales
		parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal + parameter_Posicion_Robot.xr_position*sin_cal;
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80018f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80018fc:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80018fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <BasicTimer3_Callback+0x364>)
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001910:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001912:	edd3 6a01 	vldr	s13, [r3, #4]
 8001916:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <BasicTimer3_Callback+0x368>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001924:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001926:	edc3 7a05 	vstr	s15, [r3, #20]
		parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial - parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 800192a:	4b3a      	ldr	r3, [pc, #232]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 800192c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001930:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001932:	edd3 6a01 	vldr	s13, [r3, #4]
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <BasicTimer3_Callback+0x368>)
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001940:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001944:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001946:	edd3 6a02 	vldr	s13, [r3, #8]
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <BasicTimer3_Callback+0x364>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 800195a:	edc3 7a06 	vstr	s15, [r3, #24]
		//Convertimos el valor y imprimemos
		sprintf(bufferMsg,"%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fe08 	bl	8000578 <__aeabi_f2d>
 8001968:	4604      	mov	r4, r0
 800196a:	460d      	mov	r5, r1
 800196c:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fe01 	bl	8000578 <__aeabi_f2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	e9cd 2300 	strd	r2, r3, [sp]
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	4928      	ldr	r1, [pc, #160]	; (8001a24 <BasicTimer3_Callback+0x36c>)
 8001984:	4828      	ldr	r0, [pc, #160]	; (8001a28 <BasicTimer3_Callback+0x370>)
 8001986:	f004 fd05 	bl	8006394 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 800198a:	4927      	ldr	r1, [pc, #156]	; (8001a28 <BasicTimer3_Callback+0x370>)
 800198c:	4827      	ldr	r0, [pc, #156]	; (8001a2c <BasicTimer3_Callback+0x374>)
 800198e:	f003 fc47 	bl	8005220 <writeMsgForTXE>
		//Restablecemos valores
		flag_count_odometry = 0;
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <BasicTimer3_Callback+0x378>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
		delta_distance_L = 0;
 8001998:	4b26      	ldr	r3, [pc, #152]	; (8001a34 <BasicTimer3_Callback+0x37c>)
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
		delta_distance_R = 0;
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <BasicTimer3_Callback+0x380>)
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
		//calculo la distancia de la recta
		distance_punto_recta = (parameter_Posicion_Robot.xr_position - parameter_Posicion_Robot.yr_position)/R2;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80019aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80019ae:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <BasicTimer3_Callback+0x35c>)
 80019b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80019b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b8:	ee17 0a90 	vmov	r0, s15
 80019bc:	f7fe fddc 	bl	8000578 <__aeabi_f2d>
 80019c0:	a307      	add	r3, pc, #28	; (adr r3, 80019e0 <BasicTimer3_Callback+0x328>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe ff59 	bl	800087c <__aeabi_ddiv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f921 	bl	8000c18 <__aeabi_d2f>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <BasicTimer3_Callback+0x384>)
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e030      	b.n	8001a40 <BasicTimer3_Callback+0x388>
 80019de:	bf00      	nop
 80019e0:	667f055a 	.word	0x667f055a
 80019e4:	3ff6a09e 	.word	0x3ff6a09e
 80019e8:	2000046c 	.word	0x2000046c
 80019ec:	20000368 	.word	0x20000368
 80019f0:	20000454 	.word	0x20000454
 80019f4:	200002ec 	.word	0x200002ec
 80019f8:	20000458 	.word	0x20000458
 80019fc:	2000000a 	.word	0x2000000a
 8001a00:	2000045c 	.word	0x2000045c
 8001a04:	20000460 	.word	0x20000460
 8001a08:	47c35000 	.word	0x47c35000
 8001a0c:	4622f800 	.word	0x4622f800
 8001a10:	20000464 	.word	0x20000464
 8001a14:	2000041c 	.word	0x2000041c
 8001a18:	42c80000 	.word	0x42c80000
 8001a1c:	2000043c 	.word	0x2000043c
 8001a20:	20000440 	.word	0x20000440
 8001a24:	0800c230 	.word	0x0800c230
 8001a28:	2000027c 	.word	0x2000027c
 8001a2c:	20000270 	.word	0x20000270
 8001a30:	20000448 	.word	0x20000448
 8001a34:	2000044c 	.word	0x2000044c
 8001a38:	20000450 	.word	0x20000450
 8001a3c:	20000488 	.word	0x20000488

		if(flag_Modo_Control==1)
 8001a40:	4bc1      	ldr	r3, [pc, #772]	; (8001d48 <BasicTimer3_Callback+0x690>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d16f      	bne.n	8001b28 <BasicTimer3_Callback+0x470>
		{
			//Cambio de modo y establecimiento de line center
			if(fabs(distance_punto_recta)>16)
 8001a48:	4bc0      	ldr	r3, [pc, #768]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	eef0 7ae7 	vabs.f32	s15, s15
 8001a52:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	dd0c      	ble.n	8001a7a <BasicTimer3_Callback+0x3c2>
			{
				flag_Modo_Control = 0;
 8001a60:	4bb9      	ldr	r3, [pc, #740]	; (8001d48 <BasicTimer3_Callback+0x690>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
				line_center = distance_punto_recta/2;
 8001a66:	4bb9      	ldr	r3, [pc, #740]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a74:	4bb6      	ldr	r3, [pc, #728]	; (8001d50 <BasicTimer3_Callback+0x698>)
 8001a76:	edc3 7a00 	vstr	s15, [r3]
			}
			//correccion
			correction_dutty_c = 0;
 8001a7a:	4bb6      	ldr	r3, [pc, #728]	; (8001d54 <BasicTimer3_Callback+0x69c>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
			//Convertirmos los valores de velocidad a porcentaje
			porVel_L = 590*(handler_Motor_L.parametersMotor.velocity) - 36.53;
 8001a82:	4bb5      	ldr	r3, [pc, #724]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001a84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a88:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8001d5c <BasicTimer3_Callback+0x6a4>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd70 	bl	8000578 <__aeabi_f2d>
 8001a98:	a3a5      	add	r3, pc, #660	; (adr r3, 8001d30 <BasicTimer3_Callback+0x678>)
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f7fe fc0b 	bl	80002b8 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f8b5 	bl	8000c18 <__aeabi_d2f>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4aab      	ldr	r2, [pc, #684]	; (8001d60 <BasicTimer3_Callback+0x6a8>)
 8001ab2:	6013      	str	r3, [r2, #0]
			porVel_R = 590*(handler_Motor_R.parametersMotor.velocity) - 36.53;
 8001ab4:	4bab      	ldr	r3, [pc, #684]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001ab6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aba:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001d5c <BasicTimer3_Callback+0x6a4>
 8001abe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac2:	ee17 0a90 	vmov	r0, s15
 8001ac6:	f7fe fd57 	bl	8000578 <__aeabi_f2d>
 8001aca:	a399      	add	r3, pc, #612	; (adr r3, 8001d30 <BasicTimer3_Callback+0x678>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7fe fbf2 	bl	80002b8 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f89c 	bl	8000c18 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4aa1      	ldr	r2, [pc, #644]	; (8001d68 <BasicTimer3_Callback+0x6b0>)
 8001ae4:	6013      	str	r3, [r2, #0]
			//Aplicamos el PID
			PID(&handler_Motor_L.parametersMotor.parametersPID,setpoint_dutty,porVel_L);
 8001ae6:	4ba1      	ldr	r3, [pc, #644]	; (8001d6c <BasicTimer3_Callback+0x6b4>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	4b9c      	ldr	r3, [pc, #624]	; (8001d60 <BasicTimer3_Callback+0x6a8>)
 8001aee:	ed93 7a00 	vldr	s14, [r3]
 8001af2:	eef0 0a47 	vmov.f32	s1, s14
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	4897      	ldr	r0, [pc, #604]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001afc:	f000 fda8 	bl	8002650 <PID>
			PID(&handler_Motor_R.parametersMotor.parametersPID,setpoint_dutty,porVel_R);
 8001b00:	4b9a      	ldr	r3, [pc, #616]	; (8001d6c <BasicTimer3_Callback+0x6b4>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	4b98      	ldr	r3, [pc, #608]	; (8001d68 <BasicTimer3_Callback+0x6b0>)
 8001b08:	ed93 7a00 	vldr	s14, [r3]
 8001b0c:	eef0 0a47 	vmov.f32	s1, s14
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	4893      	ldr	r0, [pc, #588]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001b16:	f000 fd9b 	bl	8002650 <PID>
			//Correccion del dutty
			correction(&handler_Motor_L);
 8001b1a:	488f      	ldr	r0, [pc, #572]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001b1c:	f000 fdec 	bl	80026f8 <correction>
			correction(&handler_Motor_R);
 8001b20:	4890      	ldr	r0, [pc, #576]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001b22:	f000 fde9 	bl	80026f8 <correction>
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
		handler_Motor_L.parametersMotor.count = 0;
	}

}
 8001b26:	e18d      	b.n	8001e44 <BasicTimer3_Callback+0x78c>
			flag_line_center++;
 8001b28:	4b91      	ldr	r3, [pc, #580]	; (8001d70 <BasicTimer3_Callback+0x6b8>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	4b8f      	ldr	r3, [pc, #572]	; (8001d70 <BasicTimer3_Callback+0x6b8>)
 8001b32:	801a      	strh	r2, [r3, #0]
			float ang_measure = parameter_Posicion_Robot.phi_relativo-setpoint_phi;
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <BasicTimer3_Callback+0x6bc>)
 8001b36:	ed93 7a00 	vldr	s14, [r3]
 8001b3a:	4b8f      	ldr	r3, [pc, #572]	; (8001d78 <BasicTimer3_Callback+0x6c0>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b44:	edc7 7a02 	vstr	s15, [r7, #8]
			if(ang_measure<(0.05) && ang_measure>(-0.05) && flag_line_center>2)
 8001b48:	68b8      	ldr	r0, [r7, #8]
 8001b4a:	f7fe fd15 	bl	8000578 <__aeabi_f2d>
 8001b4e:	a37a      	add	r3, pc, #488	; (adr r3, 8001d38 <BasicTimer3_Callback+0x680>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe ffda 	bl	8000b0c <__aeabi_dcmplt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01b      	beq.n	8001b96 <BasicTimer3_Callback+0x4de>
 8001b5e:	68b8      	ldr	r0, [r7, #8]
 8001b60:	f7fe fd0a 	bl	8000578 <__aeabi_f2d>
 8001b64:	a376      	add	r3, pc, #472	; (adr r3, 8001d40 <BasicTimer3_Callback+0x688>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	f7fe ffed 	bl	8000b48 <__aeabi_dcmpgt>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d010      	beq.n	8001b96 <BasicTimer3_Callback+0x4de>
 8001b74:	4b7e      	ldr	r3, [pc, #504]	; (8001d70 <BasicTimer3_Callback+0x6b8>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d90c      	bls.n	8001b96 <BasicTimer3_Callback+0x4de>
				line_center = distance_punto_recta/2;
 8001b7c:	4b73      	ldr	r3, [pc, #460]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001b7e:	ed93 7a00 	vldr	s14, [r3]
 8001b82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8a:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <BasicTimer3_Callback+0x698>)
 8001b8c:	edc3 7a00 	vstr	s15, [r3]
				flag_line_center = 0;
 8001b90:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <BasicTimer3_Callback+0x6b8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	801a      	strh	r2, [r3, #0]
			if(distance_punto_recta<(8) && distance_punto_recta>(-8))
 8001b96:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	d51a      	bpl.n	8001be0 <BasicTimer3_Callback+0x528>
 8001baa:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8001bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	dd10      	ble.n	8001be0 <BasicTimer3_Callback+0x528>
				count_equi++;
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001bc8:	701a      	strb	r2, [r3, #0]
				if(count_equi==10)
 8001bca:	4b6c      	ldr	r3, [pc, #432]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b0a      	cmp	r3, #10
 8001bd0:	d109      	bne.n	8001be6 <BasicTimer3_Callback+0x52e>
					flag_Modo_Control = 1;
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <BasicTimer3_Callback+0x690>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	701a      	strb	r2, [r3, #0]
					count_equi = 0;
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
				if(count_equi==10)
 8001bde:	e002      	b.n	8001be6 <BasicTimer3_Callback+0x52e>
				count_equi=0;
 8001be0:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <BasicTimer3_Callback+0x6c4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
			float auxDistance = distance_punto_recta - line_center;
 8001be6:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <BasicTimer3_Callback+0x694>)
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <BasicTimer3_Callback+0x698>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	edc7 7a01 	vstr	s15, [r7, #4]
			float corr = 0;
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
			if (auxDistance>0)
 8001c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	dd2a      	ble.n	8001c64 <BasicTimer3_Callback+0x5ac>
				corr = 50*(1-exp(-auxDistance/10));
 8001c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c12:	eef1 7a67 	vneg.f32	s15, s15
 8001c16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c1e:	ee16 0a90 	vmov	r0, s13
 8001c22:	f7fe fca9 	bl	8000578 <__aeabi_f2d>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	ec43 2b10 	vmov	d0, r2, r3
 8001c2e:	f008 fe8b 	bl	800a948 <exp>
 8001c32:	ec53 2b10 	vmov	r2, r3, d0
 8001c36:	f04f 0000 	mov.w	r0, #0
 8001c3a:	4951      	ldr	r1, [pc, #324]	; (8001d80 <BasicTimer3_Callback+0x6c8>)
 8001c3c:	f7fe fb3c 	bl	80002b8 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <BasicTimer3_Callback+0x6cc>)
 8001c4e:	f7fe fceb 	bl	8000628 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffdd 	bl	8000c18 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	e027      	b.n	8001cb4 <BasicTimer3_Callback+0x5fc>
				corr = -50*(1-exp(auxDistance/10));
 8001c64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c70:	ee16 0a90 	vmov	r0, s13
 8001c74:	f7fe fc80 	bl	8000578 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	ec43 2b10 	vmov	d0, r2, r3
 8001c80:	f008 fe62 	bl	800a948 <exp>
 8001c84:	ec53 2b10 	vmov	r2, r3, d0
 8001c88:	f04f 0000 	mov.w	r0, #0
 8001c8c:	493c      	ldr	r1, [pc, #240]	; (8001d80 <BasicTimer3_Callback+0x6c8>)
 8001c8e:	f7fe fb13 	bl	80002b8 <__aeabi_dsub>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <BasicTimer3_Callback+0x6d0>)
 8001ca0:	f7fe fcc2 	bl	8000628 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ffb4 	bl	8000c18 <__aeabi_d2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60fb      	str	r3, [r7, #12]
			correction_dutty_c = corr*m+bl;
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <BasicTimer3_Callback+0x6d4>)
 8001cb6:	ed93 7a00 	vldr	s14, [r3]
 8001cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc2:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <BasicTimer3_Callback+0x6d8>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <BasicTimer3_Callback+0x69c>)
 8001cce:	edc3 7a00 	vstr	s15, [r3]
			correction(&handler_Motor_L);
 8001cd2:	4821      	ldr	r0, [pc, #132]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001cd4:	f000 fd10 	bl	80026f8 <correction>
			correction(&handler_Motor_R);
 8001cd8:	4822      	ldr	r0, [pc, #136]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001cda:	f000 fd0d 	bl	80026f8 <correction>
}
 8001cde:	e0b1      	b.n	8001e44 <BasicTimer3_Callback+0x78c>
	else if(flag_motor==3)
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <BasicTimer3_Callback+0x6dc>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d161      	bne.n	8001dac <BasicTimer3_Callback+0x6f4>
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <BasicTimer3_Callback+0x6e0>)
 8001cea:	881a      	ldrh	r2, [r3, #0]
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <BasicTimer3_Callback+0x6e4>)
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <BasicTimer3_Callback+0x6e0>)
 8001cf6:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <BasicTimer3_Callback+0x6e0>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001d00:	8c1b      	ldrh	r3, [r3, #32]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001d06:	8c1b      	ldrh	r3, [r3, #32]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4924      	ldr	r1, [pc, #144]	; (8001da0 <BasicTimer3_Callback+0x6e8>)
 8001d0e:	4825      	ldr	r0, [pc, #148]	; (8001da4 <BasicTimer3_Callback+0x6ec>)
 8001d10:	f004 fb40 	bl	8006394 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001d14:	4923      	ldr	r1, [pc, #140]	; (8001da4 <BasicTimer3_Callback+0x6ec>)
 8001d16:	4824      	ldr	r0, [pc, #144]	; (8001da8 <BasicTimer3_Callback+0x6f0>)
 8001d18:	f003 fa82 	bl	8005220 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <BasicTimer3_Callback+0x6ac>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <BasicTimer3_Callback+0x6a0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	841a      	strh	r2, [r3, #32]
}
 8001d28:	e08c      	b.n	8001e44 <BasicTimer3_Callback+0x78c>
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	0a3d70a4 	.word	0x0a3d70a4
 8001d34:	404243d7 	.word	0x404243d7
 8001d38:	9999999a 	.word	0x9999999a
 8001d3c:	3fa99999 	.word	0x3fa99999
 8001d40:	9999999a 	.word	0x9999999a
 8001d44:	bfa99999 	.word	0xbfa99999
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20000488 	.word	0x20000488
 8001d50:	2000048c 	.word	0x2000048c
 8001d54:	20000490 	.word	0x20000490
 8001d58:	20000368 	.word	0x20000368
 8001d5c:	44138000 	.word	0x44138000
 8001d60:	20000478 	.word	0x20000478
 8001d64:	200002ec 	.word	0x200002ec
 8001d68:	2000047c 	.word	0x2000047c
 8001d6c:	20000418 	.word	0x20000418
 8001d70:	20000014 	.word	0x20000014
 8001d74:	2000041c 	.word	0x2000041c
 8001d78:	20000414 	.word	0x20000414
 8001d7c:	20000470 	.word	0x20000470
 8001d80:	3ff00000 	.word	0x3ff00000
 8001d84:	40490000 	.word	0x40490000
 8001d88:	c0490000 	.word	0xc0490000
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	20000484 	.word	0x20000484
 8001d94:	2000046c 	.word	0x2000046c
 8001d98:	2000046e 	.word	0x2000046e
 8001d9c:	2000000a 	.word	0x2000000a
 8001da0:	0800c240 	.word	0x0800c240
 8001da4:	2000027c 	.word	0x2000027c
 8001da8:	20000270 	.word	0x20000270
	else if(flag_motor==4)
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <BasicTimer3_Callback+0x79c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d147      	bne.n	8001e44 <BasicTimer3_Callback+0x78c>
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <BasicTimer3_Callback+0x7a0>)
 8001db6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <BasicTimer3_Callback+0x7a4>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <BasicTimer3_Callback+0x7a0>)
 8001dcc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <BasicTimer3_Callback+0x7a8>)
 8001dd2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <BasicTimer3_Callback+0x7a4>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <BasicTimer3_Callback+0x7a8>)
 8001de8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <BasicTimer3_Callback+0x7ac>)
 8001dee:	881a      	ldrh	r2, [r3, #0]
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <BasicTimer3_Callback+0x7a4>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <BasicTimer3_Callback+0x7ac>)
 8001dfa:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, handler_Motor_L.parametersMotor.velocity , handler_Motor_R.parametersMotor.velocity);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <BasicTimer3_Callback+0x7ac>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	461e      	mov	r6, r3
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <BasicTimer3_Callback+0x7a0>)
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fbb6 	bl	8000578 <__aeabi_f2d>
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	460d      	mov	r5, r1
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <BasicTimer3_Callback+0x7a8>)
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fbaf 	bl	8000578 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e22:	e9cd 4500 	strd	r4, r5, [sp]
 8001e26:	4632      	mov	r2, r6
 8001e28:	490f      	ldr	r1, [pc, #60]	; (8001e68 <BasicTimer3_Callback+0x7b0>)
 8001e2a:	4810      	ldr	r0, [pc, #64]	; (8001e6c <BasicTimer3_Callback+0x7b4>)
 8001e2c:	f004 fab2 	bl	8006394 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <BasicTimer3_Callback+0x7b4>)
 8001e32:	480f      	ldr	r0, [pc, #60]	; (8001e70 <BasicTimer3_Callback+0x7b8>)
 8001e34:	f003 f9f4 	bl	8005220 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <BasicTimer3_Callback+0x7a8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <BasicTimer3_Callback+0x7a0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	841a      	strh	r2, [r3, #32]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	ecbd 8b02 	vpop	{d8}
 8001e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e52:	bf00      	nop
 8001e54:	2000046c 	.word	0x2000046c
 8001e58:	20000368 	.word	0x20000368
 8001e5c:	2000000a 	.word	0x2000000a
 8001e60:	200002ec 	.word	0x200002ec
 8001e64:	2000046e 	.word	0x2000046e
 8001e68:	0800c24c 	.word	0x0800c24c
 8001e6c:	2000027c 	.word	0x2000027c
 8001e70:	20000270 	.word	0x20000270

08001e74 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001e78:	f003 fa10 	bl	800529c <getRxData>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <BasicUSART2_Callback+0x18>)
 8001e82:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001e84:	f000 f8ac 	bl	8001fe0 <recepcionCommand>
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000000 	.word	0x20000000

08001e90 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <callback_extInt1+0x8c>)
 8001e96:	8c1b      	ldrh	r3, [r3, #32]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <callback_extInt1+0x8c>)
 8001e9e:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <callback_extInt1+0x8c>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <callback_extInt1+0x8c>)
 8001ea8:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_R.parametersMotor.timeCount = timeNow-timeBackR;
//	timeBackR = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <callback_extInt1+0x90>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d112      	bne.n	8001ed8 <callback_extInt1+0x48>
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <callback_extInt1+0x94>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10e      	bne.n	8001ed8 <callback_extInt1+0x48>
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <callback_extInt1+0x8c>)
 8001ebc:	8c1a      	ldrh	r2, [r3, #32]
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <callback_extInt1+0x98>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d908      	bls.n	8001ed8 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 fc96 	bl	80027f8 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <callback_extInt1+0x9c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f8f8 	bl	80010c6 <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 8001ed6:	e01e      	b.n	8001f16 <callback_extInt1+0x86>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <callback_extInt1+0x90>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d11a      	bne.n	8001f16 <callback_extInt1+0x86>
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <callback_extInt1+0xa0>)
 8001ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <callback_extInt1+0x8c>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <callback_extInt1+0xa4>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	d400      	bmi.n	8001f10 <callback_extInt1+0x80>
}
 8001f0e:	e002      	b.n	8001f16 <callback_extInt1+0x86>
		status_motor(RESET);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 fc71 	bl	80027f8 <status_motor>
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200002ec 	.word	0x200002ec
 8001f20:	2000046c 	.word	0x2000046c
 8001f24:	2000046d 	.word	0x2000046d
 8001f28:	20000472 	.word	0x20000472
 8001f2c:	20000468 	.word	0x20000468
 8001f30:	20000474 	.word	0x20000474
 8001f34:	20000458 	.word	0x20000458

08001f38 <callback_extInt3>:
void callback_extInt3(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f3e:	8c1b      	ldrh	r3, [r3, #32]
 8001f40:	3301      	adds	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f46:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f50:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_L.parametersMotor.timeCount = timeNow-timeBackL;
//	timeBackL = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <callback_extInt3+0x90>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d112      	bne.n	8001f80 <callback_extInt3+0x48>
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <callback_extInt3+0x94>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d10e      	bne.n	8001f80 <callback_extInt3+0x48>
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f64:	8c1a      	ldrh	r2, [r3, #32]
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <callback_extInt3+0x98>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d908      	bls.n	8001f80 <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 fc42 	bl	80027f8 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <callback_extInt3+0x9c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff f8a4 	bl	80010c6 <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 8001f7e:	e01e      	b.n	8001fbe <callback_extInt3+0x86>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <callback_extInt3+0x90>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d11a      	bne.n	8001fbe <callback_extInt3+0x86>
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <callback_extInt3+0xa0>)
 8001f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <callback_extInt3+0x8c>)
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <callback_extInt3+0xa4>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	d400      	bmi.n	8001fb8 <callback_extInt3+0x80>
}
 8001fb6:	e002      	b.n	8001fbe <callback_extInt3+0x86>
		status_motor(RESET);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 fc1d 	bl	80027f8 <status_motor>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000368 	.word	0x20000368
 8001fc8:	2000046c 	.word	0x2000046c
 8001fcc:	2000046d 	.word	0x2000046d
 8001fd0:	20000472 	.word	0x20000472
 8001fd4:	20000468 	.word	0x20000468
 8001fd8:	20000474 	.word	0x20000474
 8001fdc:	20000454 	.word	0x20000454

08001fe0 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <recepcionCommand+0x4c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d10c      	bne.n	8002006 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <recepcionCommand+0x50>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <recepcionCommand+0x54>)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <recepcionCommand+0x58>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <recepcionCommand+0x50>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8002004:	e00c      	b.n	8002020 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <recepcionCommand+0x50>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <recepcionCommand+0x4c>)
 800200e:	7819      	ldrb	r1, [r3, #0]
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <recepcionCommand+0x54>)
 8002012:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <recepcionCommand+0x50>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <recepcionCommand+0x50>)
 800201e:	701a      	strb	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000
 8002030:	20000494 	.word	0x20000494
 8002034:	20000498 	.word	0x20000498
 8002038:	20000016 	.word	0x20000016
 800203c:	00000000 	.word	0x00000000

08002040 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b09d      	sub	sp, #116	; 0x74
 8002044:	af04      	add	r7, sp, #16
 8002046:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	f107 0320 	add.w	r3, r7, #32
 8002050:	223c      	movs	r2, #60	; 0x3c
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fb15 	bl	8005684 <memset>
	int firtsParameter = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
	int secondParameter = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
	int thirdParameter = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
	int forthParameter = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 800206a:	f107 0118 	add.w	r1, r7, #24
 800206e:	f107 021c 	add.w	r2, r7, #28
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	460b      	mov	r3, r1
 8002086:	49ae      	ldr	r1, [pc, #696]	; (8002340 <runCommand+0x300>)
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f004 f9a3 	bl	80063d4 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	49ac      	ldr	r1, [pc, #688]	; (8002344 <runCommand+0x304>)
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f8a3 	bl	80001e0 <strcmp>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d128      	bne.n	80020f2 <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 80020a0:	49a9      	ldr	r1, [pc, #676]	; (8002348 <runCommand+0x308>)
 80020a2:	48aa      	ldr	r0, [pc, #680]	; (800234c <runCommand+0x30c>)
 80020a4:	f003 f8bc 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 80020a8:	49a9      	ldr	r1, [pc, #676]	; (8002350 <runCommand+0x310>)
 80020aa:	48a8      	ldr	r0, [pc, #672]	; (800234c <runCommand+0x30c>)
 80020ac:	f003 f8b8 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 80020b0:	49a8      	ldr	r1, [pc, #672]	; (8002354 <runCommand+0x314>)
 80020b2:	48a6      	ldr	r0, [pc, #664]	; (800234c <runCommand+0x30c>)
 80020b4:	f003 f8b4 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # #---Inicia Linea recta, #: dist [mm], #: dutty inicial , #: dutty estable \n");
 80020b8:	49a7      	ldr	r1, [pc, #668]	; (8002358 <runCommand+0x318>)
 80020ba:	48a4      	ldr	r0, [pc, #656]	; (800234c <runCommand+0x30c>)
 80020bc:	f003 f8b0 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 80020c0:	49a6      	ldr	r1, [pc, #664]	; (800235c <runCommand+0x31c>)
 80020c2:	48a2      	ldr	r0, [pc, #648]	; (800234c <runCommand+0x30c>)
 80020c4:	f003 f8ac 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) start # # # # ---Inicia movimiento, #: perTC [ms], #: dutty_L, #dutty_R, #: freqTP [Hz] \n");
 80020c8:	49a5      	ldr	r1, [pc, #660]	; (8002360 <runCommand+0x320>)
 80020ca:	48a0      	ldr	r0, [pc, #640]	; (800234c <runCommand+0x30c>)
 80020cc:	f003 f8a8 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) reaction # # # ---Inicia Curva de reaccion,#: perTC [ms], #: dutty_L y dutty_R, #: freqTP [Hz] \n");
 80020d0:	49a4      	ldr	r1, [pc, #656]	; (8002364 <runCommand+0x324>)
 80020d2:	489e      	ldr	r0, [pc, #632]	; (800234c <runCommand+0x30c>)
 80020d4:	f003 f8a4 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 80020d8:	49a3      	ldr	r1, [pc, #652]	; (8002368 <runCommand+0x328>)
 80020da:	489c      	ldr	r0, [pc, #624]	; (800234c <runCommand+0x30c>)
 80020dc:	f003 f8a0 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: L,k,tau \n");
 80020e0:	49a2      	ldr	r1, [pc, #648]	; (800236c <runCommand+0x32c>)
 80020e2:	489a      	ldr	r0, [pc, #616]	; (800234c <runCommand+0x30c>)
 80020e4:	f003 f89c 	bl	8005220 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 80020e8:	49a1      	ldr	r1, [pc, #644]	; (8002370 <runCommand+0x330>)
 80020ea:	4898      	ldr	r0, [pc, #608]	; (800234c <runCommand+0x30c>)
 80020ec:	f003 f898 	bl	8005220 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 80020f0:	e277      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "frequency") == 0)
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	499f      	ldr	r1, [pc, #636]	; (8002374 <runCommand+0x334>)
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe f871 	bl	80001e0 <strcmp>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <runCommand+0xd4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	4a9c      	ldr	r2, [pc, #624]	; (8002378 <runCommand+0x338>)
 8002108:	fb92 f3f3 	sdiv	r3, r2, r3
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b9b      	ldr	r3, [pc, #620]	; (800237c <runCommand+0x33c>)
 8002110:	801a      	strh	r2, [r3, #0]
}
 8002112:	e266      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "line") == 0)
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4999      	ldr	r1, [pc, #612]	; (8002380 <runCommand+0x340>)
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f860 	bl	80001e0 <strcmp>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 80c3 	bne.w	80022ae <runCommand+0x26e>
		parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 8002128:	4b96      	ldr	r3, [pc, #600]	; (8002384 <runCommand+0x344>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	4a95      	ldr	r2, [pc, #596]	; (8002384 <runCommand+0x344>)
 800212e:	60d3      	str	r3, [r2, #12]
		parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8002130:	4b94      	ldr	r3, [pc, #592]	; (8002384 <runCommand+0x344>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a93      	ldr	r2, [pc, #588]	; (8002384 <runCommand+0x344>)
 8002136:	6113      	str	r3, [r2, #16]
		parameter_Posicion_Robot.ang_Giro += turn;
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <runCommand+0x344>)
 800213a:	ed93 7a07 	vldr	s14, [r3, #28]
 800213e:	4b92      	ldr	r3, [pc, #584]	; (8002388 <runCommand+0x348>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	4b8e      	ldr	r3, [pc, #568]	; (8002384 <runCommand+0x344>)
 800214a:	edc3 7a07 	vstr	s15, [r3, #28]
		parameter_Posicion_Robot.xr_position = 0;
 800214e:	4b8d      	ldr	r3, [pc, #564]	; (8002384 <runCommand+0x344>)
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
		parameter_Posicion_Robot.yr_position = 0;
 8002156:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <runCommand+0x344>)
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
		parameter_Posicion_Robot.phi_relativo = (PI/4);
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <runCommand+0x344>)
 8002160:	4a8a      	ldr	r2, [pc, #552]	; (800238c <runCommand+0x34c>)
 8002162:	601a      	str	r2, [r3, #0]
		cos_cal = cos((PI/4)+parameter_Posicion_Robot.ang_Giro);
 8002164:	4b87      	ldr	r3, [pc, #540]	; (8002384 <runCommand+0x344>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fa05 	bl	8000578 <__aeabi_f2d>
 800216e:	a370      	add	r3, pc, #448	; (adr r3, 8002330 <runCommand+0x2f0>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe f8a2 	bl	80002bc <__adddf3>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	ec43 2b17 	vmov	d7, r2, r3
 8002180:	eeb0 0a47 	vmov.f32	s0, s14
 8002184:	eef0 0a67 	vmov.f32	s1, s15
 8002188:	f008 fb2e 	bl	800a7e8 <cos>
 800218c:	ec53 2b10 	vmov	r2, r3, d0
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fd40 	bl	8000c18 <__aeabi_d2f>
 8002198:	4603      	mov	r3, r0
 800219a:	4a7d      	ldr	r2, [pc, #500]	; (8002390 <runCommand+0x350>)
 800219c:	6013      	str	r3, [r2, #0]
		sin_cal = sin((PI/4)+parameter_Posicion_Robot.ang_Giro);
 800219e:	4b79      	ldr	r3, [pc, #484]	; (8002384 <runCommand+0x344>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9e8 	bl	8000578 <__aeabi_f2d>
 80021a8:	a361      	add	r3, pc, #388	; (adr r3, 8002330 <runCommand+0x2f0>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f885 	bl	80002bc <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	ec43 2b17 	vmov	d7, r2, r3
 80021ba:	eeb0 0a47 	vmov.f32	s0, s14
 80021be:	eef0 0a67 	vmov.f32	s1, s15
 80021c2:	f008 fb65 	bl	800a890 <sin>
 80021c6:	ec53 2b10 	vmov	r2, r3, d0
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fd23 	bl	8000c18 <__aeabi_d2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a6f      	ldr	r2, [pc, #444]	; (8002394 <runCommand+0x354>)
 80021d6:	6013      	str	r3, [r2, #0]
		flag_Modo_Control = 1;
 80021d8:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <runCommand+0x358>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
		line_center = -10;
 80021de:	4b6f      	ldr	r3, [pc, #444]	; (800239c <runCommand+0x35c>)
 80021e0:	4a6f      	ldr	r2, [pc, #444]	; (80023a0 <runCommand+0x360>)
 80021e2:	601a      	str	r2, [r3, #0]
		periodo_TIMER_Count = Ts;
 80021e4:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <runCommand+0x364>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ee:	ee17 3a90 	vmov	r3, s15
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b6c      	ldr	r3, [pc, #432]	; (80023a8 <runCommand+0x368>)
 80021f6:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <runCommand+0x36c>)
 80021fe:	801a      	strh	r2, [r3, #0]
		duttyInicial = secondParameter;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	ee07 3a90 	vmov	s15, r3
 8002206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220a:	4b69      	ldr	r3, [pc, #420]	; (80023b0 <runCommand+0x370>)
 800220c:	edc3 7a00 	vstr	s15, [r3]
		setpoint_dutty = thirdParameter;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <runCommand+0x374>)
 800221c:	edc3 7a00 	vstr	s15, [r3]
		setpoint_phi = PI/4;
 8002220:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <runCommand+0x378>)
 8002222:	4a5a      	ldr	r2, [pc, #360]	; (800238c <runCommand+0x34c>)
 8002224:	601a      	str	r2, [r3, #0]
		handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_1 = handler_Motor_L.parametersMotor.parametersPID.e_2 = 0;
 8002226:	4b65      	ldr	r3, [pc, #404]	; (80023bc <runCommand+0x37c>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <runCommand+0x37c>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	4a62      	ldr	r2, [pc, #392]	; (80023bc <runCommand+0x37c>)
 8002234:	60d3      	str	r3, [r2, #12]
 8002236:	4b61      	ldr	r3, [pc, #388]	; (80023bc <runCommand+0x37c>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4a60      	ldr	r2, [pc, #384]	; (80023bc <runCommand+0x37c>)
 800223c:	6093      	str	r3, [r2, #8]
		handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_1 = handler_Motor_R.parametersMotor.parametersPID.e_2 = 0;
 800223e:	4b60      	ldr	r3, [pc, #384]	; (80023c0 <runCommand+0x380>)
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
 8002246:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <runCommand+0x380>)
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	4a5d      	ldr	r2, [pc, #372]	; (80023c0 <runCommand+0x380>)
 800224c:	60d3      	str	r3, [r2, #12]
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <runCommand+0x380>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <runCommand+0x380>)
 8002254:	6093      	str	r3, [r2, #8]
		config_motor(1, periodo_TIMER_Count,  0.9234*(duttyInicial)-3, duttyInicial, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002256:	4b54      	ldr	r3, [pc, #336]	; (80023a8 <runCommand+0x368>)
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	461c      	mov	r4, r3
 800225c:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <runCommand+0x370>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f989 	bl	8000578 <__aeabi_f2d>
 8002266:	a334      	add	r3, pc, #208	; (adr r3, 8002338 <runCommand+0x2f8>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe f9dc 	bl	8000628 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <runCommand+0x384>)
 800227e:	f7fe f81b 	bl	80002b8 <__aeabi_dsub>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fcc5 	bl	8000c18 <__aeabi_d2f>
 800228e:	4601      	mov	r1, r0
 8002290:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <runCommand+0x370>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <runCommand+0x33c>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	eef0 0a67 	vmov.f32	s1, s15
 80022a0:	ee00 1a10 	vmov	s0, r1
 80022a4:	4621      	mov	r1, r4
 80022a6:	2001      	movs	r0, #1
 80022a8:	f000 fb22 	bl	80028f0 <config_motor>
}
 80022ac:	e199      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "const") == 0)
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4945      	ldr	r1, [pc, #276]	; (80023c8 <runCommand+0x388>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fd ff93 	bl	80001e0 <strcmp>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f040 8085 	bne.w	80023cc <runCommand+0x38c>
			float theta=firtsParameter+Ts/2;
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022cc:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <runCommand+0x364>)
 80022ce:	edd3 6a00 	vldr	s13, [r3]
 80022d2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022de:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			constains_calculator(&handler_Motor_L.parametersMotor.parametersPID, secondParameter, thirdParameter, theta);   //k,tau,theta
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	ee07 3a10 	vmov	s14, r3
 80022f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022f6:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 80022fa:	eef0 0a47 	vmov.f32	s1, s14
 80022fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002302:	482e      	ldr	r0, [pc, #184]	; (80023bc <runCommand+0x37c>)
 8002304:	f000 fb46 	bl	8002994 <constains_calculator>
			constains_calculator(&handler_Motor_R.parametersMotor.parametersPID, secondParameter, thirdParameter, theta);   //k,tau,theta
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	ee07 3a10 	vmov	s14, r3
 8002318:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800231c:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 8002320:	eef0 0a47 	vmov.f32	s1, s14
 8002324:	eeb0 0a67 	vmov.f32	s0, s15
 8002328:	4825      	ldr	r0, [pc, #148]	; (80023c0 <runCommand+0x380>)
 800232a:	f000 fb33 	bl	8002994 <constains_calculator>
}
 800232e:	e158      	b.n	80025e2 <runCommand+0x5a2>
 8002330:	54442d18 	.word	0x54442d18
 8002334:	3fe921fb 	.word	0x3fe921fb
 8002338:	28240b78 	.word	0x28240b78
 800233c:	3fed8c7e 	.word	0x3fed8c7e
 8002340:	0800c25c 	.word	0x0800c25c
 8002344:	0800c26c 	.word	0x0800c26c
 8002348:	0800c274 	.word	0x0800c274
 800234c:	20000270 	.word	0x20000270
 8002350:	0800c284 	.word	0x0800c284
 8002354:	0800c2b0 	.word	0x0800c2b0
 8002358:	0800c300 	.word	0x0800c300
 800235c:	0800c358 	.word	0x0800c358
 8002360:	0800c3a0 	.word	0x0800c3a0
 8002364:	0800c400 	.word	0x0800c400
 8002368:	0800c464 	.word	0x0800c464
 800236c:	0800c49c 	.word	0x0800c49c
 8002370:	0800c4d0 	.word	0x0800c4d0
 8002374:	0800c520 	.word	0x0800c520
 8002378:	000186a0 	.word	0x000186a0
 800237c:	2000000c 	.word	0x2000000c
 8002380:	0800c52c 	.word	0x0800c52c
 8002384:	2000041c 	.word	0x2000041c
 8002388:	20000444 	.word	0x20000444
 800238c:	3f490fdb 	.word	0x3f490fdb
 8002390:	2000043c 	.word	0x2000043c
 8002394:	20000440 	.word	0x20000440
 8002398:	20000008 	.word	0x20000008
 800239c:	2000048c 	.word	0x2000048c
 80023a0:	c1200000 	.word	0xc1200000
 80023a4:	20000004 	.word	0x20000004
 80023a8:	2000000a 	.word	0x2000000a
 80023ac:	20000474 	.word	0x20000474
 80023b0:	20000480 	.word	0x20000480
 80023b4:	20000418 	.word	0x20000418
 80023b8:	20000414 	.word	0x20000414
 80023bc:	20000368 	.word	0x20000368
 80023c0:	200002ec 	.word	0x200002ec
 80023c4:	40080000 	.word	0x40080000
 80023c8:	0800c534 	.word	0x0800c534
	else if (strcmp(cmd, "equation") == 0)
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4989      	ldr	r1, [pc, #548]	; (80025f8 <runCommand+0x5b8>)
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fd ff04 	bl	80001e0 <strcmp>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d118      	bne.n	8002410 <runCommand+0x3d0>
			m = ((float) firtsParameter)/100;
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	ee07 3a90 	vmov	s15, r3
 80023e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e8:	eddf 6a84 	vldr	s13, [pc, #528]	; 80025fc <runCommand+0x5bc>
 80023ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f0:	4b83      	ldr	r3, [pc, #524]	; (8002600 <runCommand+0x5c0>)
 80023f2:	edc3 7a00 	vstr	s15, [r3]
			bl = ((float) secondParameter)/100;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002400:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80025fc <runCommand+0x5bc>
 8002404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002408:	4b7e      	ldr	r3, [pc, #504]	; (8002604 <runCommand+0x5c4>)
 800240a:	edc3 7a00 	vstr	s15, [r3]
}
 800240e:	e0e8      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "turn") == 0)
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	497c      	ldr	r1, [pc, #496]	; (8002608 <runCommand+0x5c8>)
 8002416:	4618      	mov	r0, r3
 8002418:	f7fd fee2 	bl	80001e0 <strcmp>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d162      	bne.n	80024e8 <runCommand+0x4a8>
		flag_turn = secondParameter;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b79      	ldr	r3, [pc, #484]	; (800260c <runCommand+0x5cc>)
 8002428:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 800242a:	4b78      	ldr	r3, [pc, #480]	; (800260c <runCommand+0x5cc>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d114      	bne.n	800245c <runCommand+0x41c>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4a76      	ldr	r2, [pc, #472]	; (8002610 <runCommand+0x5d0>)
 8002436:	fb82 1203 	smull	r1, r2, r2, r3
 800243a:	1052      	asrs	r2, r2, #1
 800243c:	17db      	asrs	r3, r3, #31
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b29b      	uxth	r3, r3
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b73      	ldr	r3, [pc, #460]	; (8002614 <runCommand+0x5d4>)
 8002448:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 800244a:	4b73      	ldr	r3, [pc, #460]	; (8002618 <runCommand+0x5d8>)
 800244c:	4a73      	ldr	r2, [pc, #460]	; (800261c <runCommand+0x5dc>)
 800244e:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8002450:	4b71      	ldr	r3, [pc, #452]	; (8002618 <runCommand+0x5d8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fe36 	bl	80010c6 <updateDirMotor>
 800245a:	e013      	b.n	8002484 <runCommand+0x444>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <runCommand+0x5d0>)
 8002460:	fb82 1203 	smull	r1, r2, r2, r3
 8002464:	1052      	asrs	r2, r2, #1
 8002466:	17db      	asrs	r3, r3, #31
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	b29b      	uxth	r3, r3
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b68      	ldr	r3, [pc, #416]	; (8002614 <runCommand+0x5d4>)
 8002472:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <runCommand+0x5d8>)
 8002476:	4a6a      	ldr	r2, [pc, #424]	; (8002620 <runCommand+0x5e0>)
 8002478:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 800247a:	4b67      	ldr	r3, [pc, #412]	; (8002618 <runCommand+0x5d8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fe21 	bl	80010c6 <updateDirMotor>
		config_motor(2, periodo_TIMER_Count, 0.9234*((float) thirdParameter)-3, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002484:	4b67      	ldr	r3, [pc, #412]	; (8002624 <runCommand+0x5e4>)
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	461c      	mov	r4, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002494:	ee17 0a90 	vmov	r0, s15
 8002498:	f7fe f86e 	bl	8000578 <__aeabi_f2d>
 800249c:	a354      	add	r3, pc, #336	; (adr r3, 80025f0 <runCommand+0x5b0>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f8c1 	bl	8000628 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <runCommand+0x5e8>)
 80024b4:	f7fd ff00 	bl	80002b8 <__aeabi_dsub>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fbaa 	bl	8000c18 <__aeabi_d2f>
 80024c4:	4601      	mov	r1, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	4b56      	ldr	r3, [pc, #344]	; (800262c <runCommand+0x5ec>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	eef0 0a67 	vmov.f32	s1, s15
 80024da:	ee00 1a10 	vmov	s0, r1
 80024de:	4621      	mov	r1, r4
 80024e0:	2002      	movs	r0, #2
 80024e2:	f000 fa05 	bl	80028f0 <config_motor>
}
 80024e6:	e07c      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "start") == 0)
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4950      	ldr	r1, [pc, #320]	; (8002630 <runCommand+0x5f0>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd fe76 	bl	80001e0 <strcmp>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d12a      	bne.n	8002550 <runCommand+0x510>
		periodo_TIMER_Count = firtsParameter;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	4b49      	ldr	r3, [pc, #292]	; (8002624 <runCommand+0x5e4>)
 8002500:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count,  (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002502:	4b48      	ldr	r3, [pc, #288]	; (8002624 <runCommand+0x5e4>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	4a4a      	ldr	r2, [pc, #296]	; (8002634 <runCommand+0x5f4>)
 800250c:	fb82 0203 	smull	r0, r2, r2, r3
 8002510:	1152      	asrs	r2, r2, #5
 8002512:	17db      	asrs	r3, r3, #31
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4a44      	ldr	r2, [pc, #272]	; (8002634 <runCommand+0x5f4>)
 8002522:	fb82 0203 	smull	r0, r2, r2, r3
 8002526:	1152      	asrs	r2, r2, #5
 8002528:	17db      	asrs	r3, r3, #31
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	ee07 3a10 	vmov	s14, r3
 8002530:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	eef0 0a47 	vmov.f32	s1, s14
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	2003      	movs	r0, #3
 8002542:	f000 f9d5 	bl	80028f0 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 8002546:	493c      	ldr	r1, [pc, #240]	; (8002638 <runCommand+0x5f8>)
 8002548:	483c      	ldr	r0, [pc, #240]	; (800263c <runCommand+0x5fc>)
 800254a:	f002 fe69 	bl	8005220 <writeMsgForTXE>
}
 800254e:	e048      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "reaction") == 0)
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	493a      	ldr	r1, [pc, #232]	; (8002640 <runCommand+0x600>)
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fe42 	bl	80001e0 <strcmp>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d12a      	bne.n	80025b8 <runCommand+0x578>
		periodo_TIMER_Count = firtsParameter;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	b29a      	uxth	r2, r3
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <runCommand+0x5e4>)
 8002568:	801a      	strh	r2, [r3, #0]
		config_motor(4, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <runCommand+0x5e4>)
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4a30      	ldr	r2, [pc, #192]	; (8002634 <runCommand+0x5f4>)
 8002574:	fb82 0203 	smull	r0, r2, r2, r3
 8002578:	1152      	asrs	r2, r2, #5
 800257a:	17db      	asrs	r3, r3, #31
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4a2a      	ldr	r2, [pc, #168]	; (8002634 <runCommand+0x5f4>)
 800258a:	fb82 0203 	smull	r0, r2, r2, r3
 800258e:	1152      	asrs	r2, r2, #5
 8002590:	17db      	asrs	r3, r3, #31
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	ee07 3a10 	vmov	s14, r3
 8002598:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	461a      	mov	r2, r3
 80025a0:	eef0 0a47 	vmov.f32	s1, s14
 80025a4:	eeb0 0a67 	vmov.f32	s0, s15
 80025a8:	2004      	movs	r0, #4
 80025aa:	f000 f9a1 	bl	80028f0 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <runCommand+0x5f8>)
 80025b0:	4822      	ldr	r0, [pc, #136]	; (800263c <runCommand+0x5fc>)
 80025b2:	f002 fe35 	bl	8005220 <writeMsgForTXE>
}
 80025b6:	e014      	b.n	80025e2 <runCommand+0x5a2>
	else if (strcmp(cmd, "stop") == 0)
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4921      	ldr	r1, [pc, #132]	; (8002644 <runCommand+0x604>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd fe0e 	bl	80001e0 <strcmp>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <runCommand+0x59a>
		status_motor(RESET);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f000 f914 	bl	80027f8 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 80025d0:	491d      	ldr	r1, [pc, #116]	; (8002648 <runCommand+0x608>)
 80025d2:	481a      	ldr	r0, [pc, #104]	; (800263c <runCommand+0x5fc>)
 80025d4:	f002 fe24 	bl	8005220 <writeMsgForTXE>
}
 80025d8:	e003      	b.n	80025e2 <runCommand+0x5a2>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 80025da:	491c      	ldr	r1, [pc, #112]	; (800264c <runCommand+0x60c>)
 80025dc:	4817      	ldr	r0, [pc, #92]	; (800263c <runCommand+0x5fc>)
 80025de:	f002 fe1f 	bl	8005220 <writeMsgForTXE>
}
 80025e2:	bf00      	nop
 80025e4:	3764      	adds	r7, #100	; 0x64
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
 80025ea:	bf00      	nop
 80025ec:	f3af 8000 	nop.w
 80025f0:	28240b78 	.word	0x28240b78
 80025f4:	3fed8c7e 	.word	0x3fed8c7e
 80025f8:	0800c53c 	.word	0x0800c53c
 80025fc:	42c80000 	.word	0x42c80000
 8002600:	20000010 	.word	0x20000010
 8002604:	20000484 	.word	0x20000484
 8002608:	0800c548 	.word	0x0800c548
 800260c:	2000046d 	.word	0x2000046d
 8002610:	66666667 	.word	0x66666667
 8002614:	20000472 	.word	0x20000472
 8002618:	20000468 	.word	0x20000468
 800261c:	200002ec 	.word	0x200002ec
 8002620:	20000368 	.word	0x20000368
 8002624:	2000000a 	.word	0x2000000a
 8002628:	40080000 	.word	0x40080000
 800262c:	2000000c 	.word	0x2000000c
 8002630:	0800c550 	.word	0x0800c550
 8002634:	51eb851f 	.word	0x51eb851f
 8002638:	0800c558 	.word	0x0800c558
 800263c:	20000270 	.word	0x20000270
 8002640:	0800c56c 	.word	0x0800c56c
 8002644:	0800c578 	.word	0x0800c578
 8002648:	0800c580 	.word	0x0800c580
 800264c:	0800c598 	.word	0x0800c598

08002650 <PID>:
//----------------------------Inicio de la definicion de las funciones-----------------------------------------


//--------------------PID----------------------
void PID(Parameters_PID_t *ptrPIDHandler, float setpoint, float measure)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	ed87 0a02 	vstr	s0, [r7, #8]
 800265c:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8002660:	ed97 7a02 	vldr	s14, [r7, #8]
 8002664:	edd7 7a01 	vldr	s15, [r7, #4]
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	edc3 7a02 	vstr	s15, [r3, #8]
    // Controle PID
	float p0 =  ptrPIDHandler->q0*ptrPIDHandler->e;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	ed93 7a05 	vldr	s14, [r3, #20]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	edd3 7a02 	vldr	s15, [r3, #8]
 800267e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002682:	edc7 7a07 	vstr	s15, [r7, #28]
	float p1 =  ptrPIDHandler->q1*ptrPIDHandler->e_1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	ed93 7a06 	vldr	s14, [r3, #24]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002696:	edc7 7a06 	vstr	s15, [r7, #24]
	float p2 =  ptrPIDHandler->q2*ptrPIDHandler->e_2;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	ed93 7a07 	vldr	s14, [r3, #28]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = ptrPIDHandler->u_1 + p0 + p1 + p2;        //Ley del controlador PID discreto
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80026b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80026b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80026c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	edc3 7a00 	vstr	s15, [r3]

     //Retorno a los valores reales
	ptrPIDHandler->e_2 = ptrPIDHandler->e_1;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->e_1 = ptrPIDHandler->e;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	60da      	str	r2, [r3, #12]
	ptrPIDHandler->u_1 = ptrPIDHandler->u;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	605a      	str	r2, [r3, #4]
}
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 80026f8:	b5b0      	push	{r4, r5, r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

	//Definimos variables auxiliares
	float port_dutty = 0;
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
	//Conversion ley de control->velocidad->valor dutty
	if(ptrMotorHandler == &handler_Motor_L)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a35      	ldr	r2, [pc, #212]	; (80027e0 <correction+0xe8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d12a      	bne.n	8002764 <correction+0x6c>
	{
		//Conversion a dutty
		//correction_velocity_c
		port_dutty = (0.9234*(ptrMotorHandler->parametersMotor.parametersPID.u) - 3) - correction_dutty_c;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd ff30 	bl	8000578 <__aeabi_f2d>
 8002718:	a32f      	add	r3, pc, #188	; (adr r3, 80027d8 <correction+0xe0>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd ff83 	bl	8000628 <__aeabi_dmul>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <correction+0xec>)
 8002730:	f7fd fdc2 	bl	80002b8 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4614      	mov	r4, r2
 800273a:	461d      	mov	r5, r3
 800273c:	4b2a      	ldr	r3, [pc, #168]	; (80027e8 <correction+0xf0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd ff19 	bl	8000578 <__aeabi_f2d>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4620      	mov	r0, r4
 800274c:	4629      	mov	r1, r5
 800274e:	f7fd fdb3 	bl	80002b8 <__aeabi_dsub>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f7fe fa5d 	bl	8000c18 <__aeabi_d2f>
 800275e:	4603      	mov	r3, r0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e009      	b.n	8002778 <correction+0x80>
		//port_dutty = ptrMotorHandler->parametersMotor.parametersPID.u;
	}
	else
	{
		//Conversion a dutty
		port_dutty = ptrMotorHandler->parametersMotor.parametersPID.u + correction_dutty_c;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	ed93 7a00 	vldr	s14, [r3]
 800276a:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <correction+0xf0>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	edc7 7a03 	vstr	s15, [r7, #12]
	}

    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 100.0)
 8002778:	edd7 7a03 	vldr	s15, [r7, #12]
 800277c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80027ec <correction+0xf4>
 8002780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	db02      	blt.n	8002790 <correction+0x98>
    {
    	port_dutty = 100.0;
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <correction+0xf8>)
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e018      	b.n	80027c2 <correction+0xca>
    }
    else if(port_dutty <= duttyInicial-5)
 8002790:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <correction+0xfc>)
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800279a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800279e:	ed97 7a03 	vldr	s14, [r7, #12]
 80027a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027aa:	d809      	bhi.n	80027c0 <correction+0xc8>
    {
    	port_dutty = duttyInicial-5;
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <correction+0xfc>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80027b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027ba:	edc7 7a03 	vstr	s15, [r7, #12]
 80027be:	e000      	b.n	80027c2 <correction+0xca>
    }
    else
    {
    	__NOP();
 80027c0:	bf00      	nop
    }

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 80027c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fc66 	bl	8001098 <updateDuttyMotor>
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bdb0      	pop	{r4, r5, r7, pc}
 80027d4:	f3af 8000 	nop.w
 80027d8:	28240b78 	.word	0x28240b78
 80027dc:	3fed8c7e 	.word	0x3fed8c7e
 80027e0:	20000368 	.word	0x20000368
 80027e4:	40080000 	.word	0x40080000
 80027e8:	20000490 	.word	0x20000490
 80027ec:	42c80000 	.word	0x42c80000
 80027f0:	42c80000 	.word	0x42c80000
 80027f4:	20000480 	.word	0x20000480

080027f8 <status_motor>:

void status_motor(uint8_t status)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d138      	bne.n	800287a <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8002808:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <status_motor+0xe8>)
 800280a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f002 f8fe 	bl	8004a10 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8002814:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <status_motor+0xec>)
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	2101      	movs	r1, #1
 800281a:	4618      	mov	r0, r3
 800281c:	f002 f8f8 	bl	8004a10 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <status_motor+0xe8>)
 8002822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002824:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <status_motor+0xe8>)
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f001 fe1c 	bl	8004470 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8002838:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <status_motor+0xec>)
 800283a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <status_motor+0xec>)
 800283e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f001 fe10 	bl	8004470 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8002850:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <status_motor+0xe8>)
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f001 fe0a 	bl	8004470 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <status_motor+0xec>)
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fe04 	bl	8004470 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <status_motor+0xf0>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d033      	beq.n	80028d8 <status_motor+0xe0>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 8002870:	2101      	movs	r1, #1
 8002872:	481e      	ldr	r0, [pc, #120]	; (80028ec <status_motor+0xf4>)
 8002874:	f000 fbba 	bl	8002fec <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 8002878:	e02e      	b.n	80028d8 <status_motor+0xe0>
		if(flag_motor!=2)
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <status_motor+0xf0>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d003      	beq.n	800288a <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 8002882:	2100      	movs	r1, #0
 8002884:	4819      	ldr	r0, [pc, #100]	; (80028ec <status_motor+0xf4>)
 8002886:	f000 fbb1 	bl	8002fec <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <status_motor+0xe8>)
 800288c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f002 f8bd 	bl	8004a10 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <status_motor+0xec>)
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f002 f8b7 	bl	8004a10 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 80028a2:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <status_motor+0xe8>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fde1 	bl	8004470 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <status_motor+0xec>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 fddb 	bl	8004470 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <status_motor+0xe8>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	2101      	movs	r1, #1
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 fdd5 	bl	8004470 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <status_motor+0xec>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	2101      	movs	r1, #1
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 fdcf 	bl	8004470 <GPIO_writePin>
		flag_motor = 0;
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <status_motor+0xf0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000368 	.word	0x20000368
 80028e4:	200002ec 	.word	0x200002ec
 80028e8:	2000046c 	.word	0x2000046c
 80028ec:	200003c4 	.word	0x200003c4

080028f0 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	6139      	str	r1, [r7, #16]
 80028fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80028fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	b29b      	uxth	r3, r3
 800290a:	4619      	mov	r1, r3
 800290c:	4819      	ldr	r0, [pc, #100]	; (8002974 <config_motor+0x84>)
 800290e:	f000 fb8d 	bl	800302c <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <config_motor+0x88>)
 8002914:	2200      	movs	r2, #0
 8002916:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <config_motor+0x8c>)
 800291a:	2200      	movs	r2, #0
 800291c:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <config_motor+0x88>)
 8002920:	2200      	movs	r2, #0
 8002922:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <config_motor+0x8c>)
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <config_motor+0x90>)
 800292c:	2200      	movs	r2, #0
 800292e:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <config_motor+0x94>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	fb92 f3f3 	sdiv	r3, r2, r3
 8002938:	b29a      	uxth	r2, r3
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <config_motor+0x98>)
 800293c:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <config_motor+0x98>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	4811      	ldr	r0, [pc, #68]	; (800298c <config_motor+0x9c>)
 8002946:	f000 fb71 	bl	800302c <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 800294a:	ed97 0a02 	vldr	s0, [r7, #8]
 800294e:	480a      	ldr	r0, [pc, #40]	; (8002978 <config_motor+0x88>)
 8002950:	f7fe fba2 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8002954:	ed97 0a03 	vldr	s0, [r7, #12]
 8002958:	4808      	ldr	r0, [pc, #32]	; (800297c <config_motor+0x8c>)
 800295a:	f7fe fb9d 	bl	8001098 <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <config_motor+0xa0>)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 8002964:	2001      	movs	r0, #1
 8002966:	f7ff ff47 	bl	80027f8 <status_motor>
}
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200003c4 	.word	0x200003c4
 8002978:	200002ec 	.word	0x200002ec
 800297c:	20000368 	.word	0x20000368
 8002980:	2000046e 	.word	0x2000046e
 8002984:	000186a0 	.word	0x000186a0
 8002988:	20000002 	.word	0x20000002
 800298c:	200003b4 	.word	0x200003b4
 8002990:	2000046c 	.word	0x2000046c

08002994 <constains_calculator>:


void constains_calculator(Parameters_PID_t *ptrPIDHandler,float k, float tau, float theta)   //k,tau,theta
{
 8002994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002998:	b088      	sub	sp, #32
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	ed87 0a02 	vstr	s0, [r7, #8]
 80029a2:	edc7 0a01 	vstr	s1, [r7, #4]
 80029a6:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo de constantes de porcentaje, integracion y derivacion por metodo de Ziegler y Nichols
	   float kp=(1.2*tau)/(k*theta);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fd fde4 	bl	8000578 <__aeabi_f2d>
 80029b0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80029b4:	4b6d      	ldr	r3, [pc, #436]	; (8002b6c <constains_calculator+0x1d8>)
 80029b6:	f7fd fe37 	bl	8000628 <__aeabi_dmul>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4614      	mov	r4, r2
 80029c0:	461d      	mov	r5, r3
 80029c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80029c6:	edd7 7a00 	vldr	s15, [r7]
 80029ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ce:	ee17 0a90 	vmov	r0, s15
 80029d2:	f7fd fdd1 	bl	8000578 <__aeabi_f2d>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	f7fd ff4d 	bl	800087c <__aeabi_ddiv>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	f7fe f915 	bl	8000c18 <__aeabi_d2f>
 80029ee:	4603      	mov	r3, r0
 80029f0:	61fb      	str	r3, [r7, #28]
	   float ti=2.0*theta;
 80029f2:	edd7 7a00 	vldr	s15, [r7]
 80029f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029fa:	edc7 7a06 	vstr	s15, [r7, #24]
	   float td=0.5*theta;
 80029fe:	edd7 7a00 	vldr	s15, [r7]
 8002a02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0a:	edc7 7a05 	vstr	s15, [r7, #20]
	   //Calculo do controle PID digital
	   ptrPIDHandler->q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 8002a0e:	69f8      	ldr	r0, [r7, #28]
 8002a10:	f7fd fdb2 	bl	8000578 <__aeabi_f2d>
 8002a14:	4604      	mov	r4, r0
 8002a16:	460d      	mov	r5, r1
 8002a18:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <constains_calculator+0x1dc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fdab 	bl	8000578 <__aeabi_f2d>
 8002a22:	4680      	mov	r8, r0
 8002a24:	4689      	mov	r9, r1
 8002a26:	69b8      	ldr	r0, [r7, #24]
 8002a28:	f7fd fda6 	bl	8000578 <__aeabi_f2d>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	f7fd fc44 	bl	80002bc <__adddf3>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4640      	mov	r0, r8
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	f7fd ff1e 	bl	800087c <__aeabi_ddiv>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <constains_calculator+0x1e0>)
 8002a4e:	f7fd fc35 	bl	80002bc <__adddf3>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4690      	mov	r8, r2
 8002a58:	4699      	mov	r9, r3
 8002a5a:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <constains_calculator+0x1dc>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a68:	ee16 0a90 	vmov	r0, s13
 8002a6c:	f7fd fd84 	bl	8000578 <__aeabi_f2d>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4640      	mov	r0, r8
 8002a76:	4649      	mov	r1, r9
 8002a78:	f7fd fc20 	bl	80002bc <__adddf3>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4620      	mov	r0, r4
 8002a82:	4629      	mov	r1, r5
 8002a84:	f7fd fdd0 	bl	8000628 <__aeabi_dmul>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7fe f8c2 	bl	8000c18 <__aeabi_d2f>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	615a      	str	r2, [r3, #20]
	   ptrPIDHandler->q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 8002a9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a9e:	eef1 7a67 	vneg.f32	s15, s15
 8002aa2:	ee17 3a90 	vmov	r3, s15
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fd66 	bl	8000578 <__aeabi_f2d>
 8002aac:	4604      	mov	r4, r0
 8002aae:	460d      	mov	r5, r1
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <constains_calculator+0x1dc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd5f 	bl	8000578 <__aeabi_f2d>
 8002aba:	4680      	mov	r8, r0
 8002abc:	4689      	mov	r9, r1
 8002abe:	69b8      	ldr	r0, [r7, #24]
 8002ac0:	f7fd fd5a 	bl	8000578 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	f7fd fbf8 	bl	80002bc <__adddf3>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4640      	mov	r0, r8
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	f7fd fed2 	bl	800087c <__aeabi_ddiv>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	f04f 0000 	mov.w	r0, #0
 8002ae0:	4924      	ldr	r1, [pc, #144]	; (8002b74 <constains_calculator+0x1e0>)
 8002ae2:	f7fd fbe9 	bl	80002b8 <__aeabi_dsub>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4690      	mov	r8, r2
 8002aec:	4699      	mov	r9, r3
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7fd fd42 	bl	8000578 <__aeabi_f2d>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	f7fd fbe0 	bl	80002bc <__adddf3>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4692      	mov	sl, r2
 8002b02:	469b      	mov	fp, r3
 8002b04:	4b1a      	ldr	r3, [pc, #104]	; (8002b70 <constains_calculator+0x1dc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fd35 	bl	8000578 <__aeabi_f2d>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4650      	mov	r0, sl
 8002b14:	4659      	mov	r1, fp
 8002b16:	f7fd feb1 	bl	800087c <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4640      	mov	r0, r8
 8002b20:	4649      	mov	r1, r9
 8002b22:	f7fd fbcb 	bl	80002bc <__adddf3>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	f7fd fd7b 	bl	8000628 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f7fe f86d 	bl	8000c18 <__aeabi_d2f>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	619a      	str	r2, [r3, #24]
	   ptrPIDHandler->q2 = (kp*td)/Ts;
 8002b44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b48:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b4c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <constains_calculator+0x1dc>)
 8002b52:	ed93 7a00 	vldr	s14, [r3]
 8002b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002b60:	bf00      	nop
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6a:	bf00      	nop
 8002b6c:	3ff33333 	.word	0x3ff33333
 8002b70:	20000004 	.word	0x20000004
 8002b74:	3ff00000 	.word	0x3ff00000

08002b78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b78:	480d      	ldr	r0, [pc, #52]	; (8002bb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b7a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b7c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b80:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b82:	490d      	ldr	r1, [pc, #52]	; (8002bb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b84:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <LoopForever+0xe>)
  movs r3, #0
 8002b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b88:	e002      	b.n	8002b90 <LoopCopyDataInit>

08002b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8e:	3304      	adds	r3, #4

08002b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b94:	d3f9      	bcc.n	8002b8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b98:	4c0a      	ldr	r4, [pc, #40]	; (8002bc4 <LoopForever+0x16>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b9c:	e001      	b.n	8002ba2 <LoopFillZerobss>

08002b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ba0:	3204      	adds	r2, #4

08002ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba4:	d3fb      	bcc.n	8002b9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ba6:	f002 fd49 	bl	800563c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002baa:	f7fe fabb 	bl	8001124 <main>

08002bae <LoopForever>:

LoopForever:
    b LoopForever
 8002bae:	e7fe      	b.n	8002bae <LoopForever>
  ldr   r0, =_estack
 8002bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002bbc:	0800cd00 	.word	0x0800cd00
  ldr r2, =_sbss
 8002bc0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002bc4:	20000d48 	.word	0x20000d48

08002bc8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bc8:	e7fe      	b.n	8002bc8 <ADC_IRQHandler>

08002bca <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
	return 1;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_kill>:

int _kill(int pid, int sig)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002be4:	f002 fd24 	bl	8005630 <__errno>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2216      	movs	r2, #22
 8002bec:	601a      	str	r2, [r3, #0]
	return -1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <_exit>:

void _exit (int status)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c02:	f04f 31ff 	mov.w	r1, #4294967295
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffe7 	bl	8002bda <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c0c:	e7fe      	b.n	8002c0c <_exit+0x12>

08002c0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e00a      	b.n	8002c36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c20:	f3af 8000 	nop.w
 8002c24:	4601      	mov	r1, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	60ba      	str	r2, [r7, #8]
 8002c2c:	b2ca      	uxtb	r2, r1
 8002c2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3301      	adds	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	dbf0      	blt.n	8002c20 <_read+0x12>
	}

return len;
 8002c3e:	687b      	ldr	r3, [r7, #4]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	e009      	b.n	8002c6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	60ba      	str	r2, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbf1      	blt.n	8002c5a <_write+0x12>
	}
	return len;
 8002c76:	687b      	ldr	r3, [r7, #4]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_close>:

int _close(int file)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	return -1;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca8:	605a      	str	r2, [r3, #4]
	return 0;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_isatty>:

int _isatty(int file)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	return 1;
 8002cc0:	2301      	movs	r3, #1
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
	return 0;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <_sbrk+0x5c>)
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <_sbrk+0x60>)
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <_sbrk+0x64>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <_sbrk+0x64>)
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <_sbrk+0x68>)
 8002d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <_sbrk+0x64>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d207      	bcs.n	8002d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d18:	f002 fc8a 	bl	8005630 <__errno>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	220c      	movs	r2, #12
 8002d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	e009      	b.n	8002d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2e:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	4a05      	ldr	r2, [pc, #20]	; (8002d4c <_sbrk+0x64>)
 8002d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20020000 	.word	0x20020000
 8002d48:	00000400 	.word	0x00000400
 8002d4c:	200004d8 	.word	0x200004d8
 8002d50:	20000d48 	.word	0x20000d48

08002d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db0b      	blt.n	8002d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	4907      	ldr	r1, [pc, #28]	; (8002d8c <__NVIC_EnableIRQ+0x38>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100

08002d90 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d10a      	bne.n	8002db8 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002da2:	4b62      	ldr	r3, [pc, #392]	; (8002f2c <BasicTimer_Config+0x19c>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a61      	ldr	r2, [pc, #388]	; (8002f2c <BasicTimer_Config+0x19c>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4a5f      	ldr	r2, [pc, #380]	; (8002f30 <BasicTimer_Config+0x1a0>)
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e02e      	b.n	8002e16 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <BasicTimer_Config+0x1a4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10a      	bne.n	8002dd8 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002dc2:	4b5a      	ldr	r3, [pc, #360]	; (8002f2c <BasicTimer_Config+0x19c>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a59      	ldr	r2, [pc, #356]	; (8002f2c <BasicTimer_Config+0x19c>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a59      	ldr	r2, [pc, #356]	; (8002f38 <BasicTimer_Config+0x1a8>)
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e01e      	b.n	8002e16 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a57      	ldr	r2, [pc, #348]	; (8002f3c <BasicTimer_Config+0x1ac>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d10a      	bne.n	8002df8 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002de2:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <BasicTimer_Config+0x19c>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <BasicTimer_Config+0x19c>)
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a53      	ldr	r2, [pc, #332]	; (8002f40 <BasicTimer_Config+0x1b0>)
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e00e      	b.n	8002e16 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a51      	ldr	r2, [pc, #324]	; (8002f44 <BasicTimer_Config+0x1b4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d109      	bne.n	8002e16 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002e02:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <BasicTimer_Config+0x19c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a49      	ldr	r2, [pc, #292]	; (8002f2c <BasicTimer_Config+0x19c>)
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <BasicTimer_Config+0x1b8>)
 8002e14:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002e16:	f001 fbeb 	bl	80045f0 <getConfigPLL>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002e1e:	f001 fc03 	bl	8004628 <getClockAPB1>
 8002e22:	4603      	mov	r3, r0
 8002e24:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8002e26:	7bbb      	ldrb	r3, [r7, #14]
 8002e28:	2b31      	cmp	r3, #49	; 0x31
 8002e2a:	d903      	bls.n	8002e34 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e000      	b.n	8002e36 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8002e34:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	8852      	ldrh	r2, [r2, #2]
 8002e3c:	fb02 f303 	mul.w	r3, r2, r3
 8002e40:	1e5a      	subs	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d112      	bne.n	8002e76 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f022 0210 	bic.w	r2, r2, #16
 8002e5e:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	3201      	adds	r2, #1
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24
 8002e74:	e018      	b.n	8002ea8 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f022 0210 	bic.w	r2, r2, #16
 8002e84:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f042 0210 	orr.w	r2, r2, #16
 8002e94:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6852      	ldr	r2, [r2, #4]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea8:	b672      	cpsid	i
}
 8002eaa:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d103      	bne.n	8002ebe <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002eb6:	201c      	movs	r0, #28
 8002eb8:	f7ff ff4c 	bl	8002d54 <__NVIC_EnableIRQ>
 8002ebc:	e019      	b.n	8002ef2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <BasicTimer_Config+0x1a4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002ec8:	201d      	movs	r0, #29
 8002eca:	f7ff ff43 	bl	8002d54 <__NVIC_EnableIRQ>
 8002ece:	e010      	b.n	8002ef2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <BasicTimer_Config+0x1ac>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d103      	bne.n	8002ee2 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002eda:	201e      	movs	r0, #30
 8002edc:	f7ff ff3a 	bl	8002d54 <__NVIC_EnableIRQ>
 8002ee0:	e007      	b.n	8002ef2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <BasicTimer_Config+0x1b4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002eec:	2032      	movs	r0, #50	; 0x32
 8002eee:	f7ff ff31 	bl	8002d54 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ef2:	b662      	cpsie	i
}
 8002ef4:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7a1b      	ldrb	r3, [r3, #8]
 8002efa:	4619      	mov	r1, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f875 	bl	8002fec <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f022 0201 	bic.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	200004dc 	.word	0x200004dc
 8002f34:	40000400 	.word	0x40000400
 8002f38:	200004e0 	.word	0x200004e0
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	200004e4 	.word	0x200004e4
 8002f44:	40000c00 	.word	0x40000c00
 8002f48:	200004e8 	.word	0x200004e8

08002f4c <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	__NOP();
 8002f50:	bf00      	nop
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
	__NOP();
 8002f60:	bf00      	nop
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <TIM2_IRQHandler+0x1c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <TIM2_IRQHandler+0x1c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002f80:	f7fe fb8e 	bl	80016a0 <BasicTimer2_Callback>

}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200004dc 	.word	0x200004dc

08002f8c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <TIM3_IRQHandler+0x1c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <TIM3_IRQHandler+0x1c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002fa0:	f7fe fb8a 	bl	80016b8 <BasicTimer3_Callback>

}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200004e0 	.word	0x200004e0

08002fac <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <TIM4_IRQHandler+0x1c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <TIM4_IRQHandler+0x1c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002fc0:	f7ff ffc4 	bl	8002f4c <BasicTimer4_Callback>

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200004e4 	.word	0x200004e4

08002fcc <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <TIM5_IRQHandler+0x1c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <TIM5_IRQHandler+0x1c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002fe0:	f7ff ffbc 	bl	8002f5c <BasicTimer5_Callback>

}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200004e8 	.word	0x200004e8

08002fec <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d108      	bne.n	8003010 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 800300e:	e007      	b.n	8003020 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	60da      	str	r2, [r3, #12]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8003038:	887a      	ldrh	r2, [r7, #2]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6852      	ldr	r2, [r2, #4]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <__NVIC_EnableIRQ>:
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	2b00      	cmp	r3, #0
 800306c:	db0b      	blt.n	8003086 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	4907      	ldr	r1, [pc, #28]	; (8003094 <__NVIC_EnableIRQ+0x38>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	2001      	movs	r0, #1
 800307e:	fa00 f202 	lsl.w	r2, r0, r2
 8003082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100

08003098 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af02      	add	r7, sp, #8
 800309e:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	2300      	movs	r3, #0
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	2300      	movs	r3, #0
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2301      	movs	r3, #1
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	f001 f891 	bl	80041d8 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 f8ae 	bl	800421c <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80030c0:	4b97      	ldr	r3, [pc, #604]	; (8003320 <extInt_Config+0x288>)
 80030c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c4:	4a96      	ldr	r2, [pc, #600]	; (8003320 <extInt_Config+0x288>)
 80030c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ca:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b0f      	cmp	r3, #15
 80030d4:	f200 85cf 	bhi.w	8003c76 <extInt_Config+0xbde>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <extInt_Config+0x48>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	08003121 	.word	0x08003121
 80030e4:	080031d7 	.word	0x080031d7
 80030e8:	0800328d 	.word	0x0800328d
 80030ec:	08003363 	.word	0x08003363
 80030f0:	08003419 	.word	0x08003419
 80030f4:	080034c7 	.word	0x080034c7
 80030f8:	0800358d 	.word	0x0800358d
 80030fc:	08003635 	.word	0x08003635
 8003100:	080036dd 	.word	0x080036dd
 8003104:	08003785 	.word	0x08003785
 8003108:	0800384b 	.word	0x0800384b
 800310c:	080038f3 	.word	0x080038f3
 8003110:	0800399b 	.word	0x0800399b
 8003114:	08003a61 	.word	0x08003a61
 8003118:	08003b09 	.word	0x08003b09
 800311c:	08003bb1 	.word	0x08003bb1
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8003120:	4b80      	ldr	r3, [pc, #512]	; (8003324 <extInt_Config+0x28c>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a7f      	ldr	r2, [pc, #508]	; (8003324 <extInt_Config+0x28c>)
 8003126:	f023 030f 	bic.w	r3, r3, #15
 800312a:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	4a7d      	ldr	r2, [pc, #500]	; (8003328 <extInt_Config+0x290>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d105      	bne.n	8003144 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8003138:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <extInt_Config+0x28c>)
 800313a:	4a7a      	ldr	r2, [pc, #488]	; (8003324 <extInt_Config+0x28c>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003140:	f000 bd9b 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4a78      	ldr	r2, [pc, #480]	; (800332c <extInt_Config+0x294>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d107      	bne.n	8003160 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8003150:	4b74      	ldr	r3, [pc, #464]	; (8003324 <extInt_Config+0x28c>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4a73      	ldr	r2, [pc, #460]	; (8003324 <extInt_Config+0x28c>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6093      	str	r3, [r2, #8]
		break;
 800315c:	f000 bd8d 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4a72      	ldr	r2, [pc, #456]	; (8003330 <extInt_Config+0x298>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d107      	bne.n	800317c <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800316c:	4b6d      	ldr	r3, [pc, #436]	; (8003324 <extInt_Config+0x28c>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a6c      	ldr	r2, [pc, #432]	; (8003324 <extInt_Config+0x28c>)
 8003172:	f043 0302 	orr.w	r3, r3, #2
 8003176:	6093      	str	r3, [r2, #8]
		break;
 8003178:	f000 bd7f 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4a6c      	ldr	r2, [pc, #432]	; (8003334 <extInt_Config+0x29c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d107      	bne.n	8003198 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8003188:	4b66      	ldr	r3, [pc, #408]	; (8003324 <extInt_Config+0x28c>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a65      	ldr	r2, [pc, #404]	; (8003324 <extInt_Config+0x28c>)
 800318e:	f043 0303 	orr.w	r3, r3, #3
 8003192:	6093      	str	r3, [r2, #8]
		break;
 8003194:	f000 bd71 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	4a66      	ldr	r2, [pc, #408]	; (8003338 <extInt_Config+0x2a0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d107      	bne.n	80031b4 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 80031a4:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <extInt_Config+0x28c>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a5e      	ldr	r2, [pc, #376]	; (8003324 <extInt_Config+0x28c>)
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	6093      	str	r3, [r2, #8]
		break;
 80031b0:	f000 bd63 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a60      	ldr	r2, [pc, #384]	; (800333c <extInt_Config+0x2a4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d107      	bne.n	80031d0 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <extInt_Config+0x28c>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a57      	ldr	r2, [pc, #348]	; (8003324 <extInt_Config+0x28c>)
 80031c6:	f043 0307 	orr.w	r3, r3, #7
 80031ca:	6093      	str	r3, [r2, #8]
		break;
 80031cc:	f000 bd55 	b.w	8003c7a <extInt_Config+0xbe2>
			__NOP();
 80031d0:	bf00      	nop
		break;
 80031d2:	f000 bd52 	b.w	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 80031d6:	4b53      	ldr	r3, [pc, #332]	; (8003324 <extInt_Config+0x28c>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	4a52      	ldr	r2, [pc, #328]	; (8003324 <extInt_Config+0x28c>)
 80031dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031e0:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a4f      	ldr	r2, [pc, #316]	; (8003328 <extInt_Config+0x290>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d105      	bne.n	80031fa <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80031ee:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <extInt_Config+0x28c>)
 80031f0:	4a4c      	ldr	r2, [pc, #304]	; (8003324 <extInt_Config+0x28c>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80031f6:	f000 bd40 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a4a      	ldr	r2, [pc, #296]	; (800332c <extInt_Config+0x294>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d107      	bne.n	8003216 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8003206:	4b47      	ldr	r3, [pc, #284]	; (8003324 <extInt_Config+0x28c>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4a46      	ldr	r2, [pc, #280]	; (8003324 <extInt_Config+0x28c>)
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	6093      	str	r3, [r2, #8]
		break;
 8003212:	f000 bd32 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4a44      	ldr	r2, [pc, #272]	; (8003330 <extInt_Config+0x298>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d107      	bne.n	8003232 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <extInt_Config+0x28c>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	4a3f      	ldr	r2, [pc, #252]	; (8003324 <extInt_Config+0x28c>)
 8003228:	f043 0320 	orr.w	r3, r3, #32
 800322c:	6093      	str	r3, [r2, #8]
		break;
 800322e:	f000 bd24 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a3e      	ldr	r2, [pc, #248]	; (8003334 <extInt_Config+0x29c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d107      	bne.n	800324e <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 800323e:	4b39      	ldr	r3, [pc, #228]	; (8003324 <extInt_Config+0x28c>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4a38      	ldr	r2, [pc, #224]	; (8003324 <extInt_Config+0x28c>)
 8003244:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003248:	6093      	str	r3, [r2, #8]
		break;
 800324a:	f000 bd16 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4a38      	ldr	r2, [pc, #224]	; (8003338 <extInt_Config+0x2a0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d107      	bne.n	800326a <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <extInt_Config+0x28c>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	4a31      	ldr	r2, [pc, #196]	; (8003324 <extInt_Config+0x28c>)
 8003260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003264:	6093      	str	r3, [r2, #8]
		break;
 8003266:	f000 bd08 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a32      	ldr	r2, [pc, #200]	; (800333c <extInt_Config+0x2a4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d107      	bne.n	8003286 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8003276:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <extInt_Config+0x28c>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4a2a      	ldr	r2, [pc, #168]	; (8003324 <extInt_Config+0x28c>)
 800327c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003280:	6093      	str	r3, [r2, #8]
		break;
 8003282:	f000 bcfa 	b.w	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003286:	bf00      	nop
		break;
 8003288:	f000 bcf7 	b.w	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 800328c:	4b25      	ldr	r3, [pc, #148]	; (8003324 <extInt_Config+0x28c>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <extInt_Config+0x28c>)
 8003292:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003296:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4a22      	ldr	r2, [pc, #136]	; (8003328 <extInt_Config+0x290>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d105      	bne.n	80032b0 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <extInt_Config+0x28c>)
 80032a6:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <extInt_Config+0x28c>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80032ac:	f000 bce5 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <extInt_Config+0x294>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d107      	bne.n	80032cc <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <extInt_Config+0x28c>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <extInt_Config+0x28c>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c6:	6093      	str	r3, [r2, #8]
		break;
 80032c8:	f000 bcd7 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	4a17      	ldr	r2, [pc, #92]	; (8003330 <extInt_Config+0x298>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d107      	bne.n	80032e8 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <extInt_Config+0x28c>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <extInt_Config+0x28c>)
 80032de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e2:	6093      	str	r3, [r2, #8]
		break;
 80032e4:	f000 bcc9 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <extInt_Config+0x29c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d107      	bne.n	8003304 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <extInt_Config+0x28c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <extInt_Config+0x28c>)
 80032fa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80032fe:	6093      	str	r3, [r2, #8]
		break;
 8003300:	f000 bcbb 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4a0b      	ldr	r2, [pc, #44]	; (8003338 <extInt_Config+0x2a0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d117      	bne.n	8003340 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <extInt_Config+0x28c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	4a03      	ldr	r2, [pc, #12]	; (8003324 <extInt_Config+0x28c>)
 8003316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800331a:	6093      	str	r3, [r2, #8]
		break;
 800331c:	f000 bcad 	b.w	8003c7a <extInt_Config+0xbe2>
 8003320:	40023800 	.word	0x40023800
 8003324:	40013800 	.word	0x40013800
 8003328:	40020000 	.word	0x40020000
 800332c:	40020400 	.word	0x40020400
 8003330:	40020800 	.word	0x40020800
 8003334:	40020c00 	.word	0x40020c00
 8003338:	40021000 	.word	0x40021000
 800333c:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	4a8a      	ldr	r2, [pc, #552]	; (8003570 <extInt_Config+0x4d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d107      	bne.n	800335c <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 800334c:	4b89      	ldr	r3, [pc, #548]	; (8003574 <extInt_Config+0x4dc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a88      	ldr	r2, [pc, #544]	; (8003574 <extInt_Config+0x4dc>)
 8003352:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003356:	6093      	str	r3, [r2, #8]
		break;
 8003358:	f000 bc8f 	b.w	8003c7a <extInt_Config+0xbe2>
			__NOP();
 800335c:	bf00      	nop
		break;
 800335e:	f000 bc8c 	b.w	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8003362:	4b84      	ldr	r3, [pc, #528]	; (8003574 <extInt_Config+0x4dc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4a83      	ldr	r2, [pc, #524]	; (8003574 <extInt_Config+0x4dc>)
 8003368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800336c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4a80      	ldr	r2, [pc, #512]	; (8003578 <extInt_Config+0x4e0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d105      	bne.n	8003386 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800337a:	4b7e      	ldr	r3, [pc, #504]	; (8003574 <extInt_Config+0x4dc>)
 800337c:	4a7d      	ldr	r2, [pc, #500]	; (8003574 <extInt_Config+0x4dc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003382:	f000 bc7a 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a7b      	ldr	r2, [pc, #492]	; (800357c <extInt_Config+0x4e4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d107      	bne.n	80033a2 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8003392:	4b78      	ldr	r3, [pc, #480]	; (8003574 <extInt_Config+0x4dc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	4a77      	ldr	r2, [pc, #476]	; (8003574 <extInt_Config+0x4dc>)
 8003398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800339c:	6093      	str	r3, [r2, #8]
		break;
 800339e:	f000 bc6c 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	4a75      	ldr	r2, [pc, #468]	; (8003580 <extInt_Config+0x4e8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d107      	bne.n	80033be <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 80033ae:	4b71      	ldr	r3, [pc, #452]	; (8003574 <extInt_Config+0x4dc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4a70      	ldr	r2, [pc, #448]	; (8003574 <extInt_Config+0x4dc>)
 80033b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033b8:	6093      	str	r3, [r2, #8]
		break;
 80033ba:	f000 bc5e 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a6f      	ldr	r2, [pc, #444]	; (8003584 <extInt_Config+0x4ec>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d107      	bne.n	80033da <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80033ca:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <extInt_Config+0x4dc>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4a69      	ldr	r2, [pc, #420]	; (8003574 <extInt_Config+0x4dc>)
 80033d0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80033d4:	6093      	str	r3, [r2, #8]
		break;
 80033d6:	f000 bc50 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a69      	ldr	r2, [pc, #420]	; (8003588 <extInt_Config+0x4f0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d107      	bne.n	80033f6 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <extInt_Config+0x4dc>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4a62      	ldr	r2, [pc, #392]	; (8003574 <extInt_Config+0x4dc>)
 80033ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033f0:	6093      	str	r3, [r2, #8]
		break;
 80033f2:	f000 bc42 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a5c      	ldr	r2, [pc, #368]	; (8003570 <extInt_Config+0x4d8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d107      	bne.n	8003412 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8003402:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <extInt_Config+0x4dc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	4a5b      	ldr	r2, [pc, #364]	; (8003574 <extInt_Config+0x4dc>)
 8003408:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800340c:	6093      	str	r3, [r2, #8]
		break;
 800340e:	f000 bc34 	b.w	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003412:	bf00      	nop
		break;
 8003414:	f000 bc31 	b.w	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8003418:	4b56      	ldr	r3, [pc, #344]	; (8003574 <extInt_Config+0x4dc>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	4a55      	ldr	r2, [pc, #340]	; (8003574 <extInt_Config+0x4dc>)
 800341e:	f023 030f 	bic.w	r3, r3, #15
 8003422:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	4a53      	ldr	r2, [pc, #332]	; (8003578 <extInt_Config+0x4e0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d105      	bne.n	800343c <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8003430:	4b50      	ldr	r3, [pc, #320]	; (8003574 <extInt_Config+0x4dc>)
 8003432:	4a50      	ldr	r2, [pc, #320]	; (8003574 <extInt_Config+0x4dc>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003438:	f000 bc1f 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4a4e      	ldr	r2, [pc, #312]	; (800357c <extInt_Config+0x4e4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d107      	bne.n	8003458 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8003448:	4b4a      	ldr	r3, [pc, #296]	; (8003574 <extInt_Config+0x4dc>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	4a49      	ldr	r2, [pc, #292]	; (8003574 <extInt_Config+0x4dc>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	60d3      	str	r3, [r2, #12]
		break;
 8003454:	f000 bc11 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a48      	ldr	r2, [pc, #288]	; (8003580 <extInt_Config+0x4e8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d107      	bne.n	8003474 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003464:	4b43      	ldr	r3, [pc, #268]	; (8003574 <extInt_Config+0x4dc>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a42      	ldr	r2, [pc, #264]	; (8003574 <extInt_Config+0x4dc>)
 800346a:	f043 0302 	orr.w	r3, r3, #2
 800346e:	60d3      	str	r3, [r2, #12]
		break;
 8003470:	f000 bc03 	b.w	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4a42      	ldr	r2, [pc, #264]	; (8003584 <extInt_Config+0x4ec>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d106      	bne.n	800348e <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003480:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <extInt_Config+0x4dc>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <extInt_Config+0x4dc>)
 8003486:	f043 0303 	orr.w	r3, r3, #3
 800348a:	60d3      	str	r3, [r2, #12]
		break;
 800348c:	e3f5      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a3c      	ldr	r2, [pc, #240]	; (8003588 <extInt_Config+0x4f0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d106      	bne.n	80034a8 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <extInt_Config+0x4dc>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	4a35      	ldr	r2, [pc, #212]	; (8003574 <extInt_Config+0x4dc>)
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	60d3      	str	r3, [r2, #12]
		break;
 80034a6:	e3e8      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	4a30      	ldr	r2, [pc, #192]	; (8003570 <extInt_Config+0x4d8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d106      	bne.n	80034c2 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 80034b4:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <extInt_Config+0x4dc>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a2e      	ldr	r2, [pc, #184]	; (8003574 <extInt_Config+0x4dc>)
 80034ba:	f043 0307 	orr.w	r3, r3, #7
 80034be:	60d3      	str	r3, [r2, #12]
		break;
 80034c0:	e3db      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 80034c2:	bf00      	nop
		break;
 80034c4:	e3d9      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 80034c6:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <extInt_Config+0x4dc>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	4a2a      	ldr	r2, [pc, #168]	; (8003574 <extInt_Config+0x4dc>)
 80034cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d0:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	4a27      	ldr	r2, [pc, #156]	; (8003578 <extInt_Config+0x4e0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d104      	bne.n	80034e8 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80034de:	4b25      	ldr	r3, [pc, #148]	; (8003574 <extInt_Config+0x4dc>)
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <extInt_Config+0x4dc>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80034e6:	e3c8      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4a23      	ldr	r2, [pc, #140]	; (800357c <extInt_Config+0x4e4>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d106      	bne.n	8003502 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80034f4:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <extInt_Config+0x4dc>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <extInt_Config+0x4dc>)
 80034fa:	f043 0310 	orr.w	r3, r3, #16
 80034fe:	60d3      	str	r3, [r2, #12]
		break;
 8003500:	e3bb      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <extInt_Config+0x4e8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d106      	bne.n	800351c <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 800350e:	4b19      	ldr	r3, [pc, #100]	; (8003574 <extInt_Config+0x4dc>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	4a18      	ldr	r2, [pc, #96]	; (8003574 <extInt_Config+0x4dc>)
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	60d3      	str	r3, [r2, #12]
		break;
 800351a:	e3ae      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	4a18      	ldr	r2, [pc, #96]	; (8003584 <extInt_Config+0x4ec>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d106      	bne.n	8003536 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <extInt_Config+0x4dc>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4a11      	ldr	r2, [pc, #68]	; (8003574 <extInt_Config+0x4dc>)
 800352e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003532:	60d3      	str	r3, [r2, #12]
		break;
 8003534:	e3a1      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <extInt_Config+0x4f0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d106      	bne.n	8003550 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <extInt_Config+0x4dc>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4a0b      	ldr	r2, [pc, #44]	; (8003574 <extInt_Config+0x4dc>)
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	60d3      	str	r3, [r2, #12]
		break;
 800354e:	e394      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	4a06      	ldr	r2, [pc, #24]	; (8003570 <extInt_Config+0x4d8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d106      	bne.n	800356a <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <extInt_Config+0x4dc>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <extInt_Config+0x4dc>)
 8003562:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003566:	60d3      	str	r3, [r2, #12]
		break;
 8003568:	e387      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 800356a:	bf00      	nop
		break;
 800356c:	e385      	b.n	8003c7a <extInt_Config+0xbe2>
 800356e:	bf00      	nop
 8003570:	40021c00 	.word	0x40021c00
 8003574:	40013800 	.word	0x40013800
 8003578:	40020000 	.word	0x40020000
 800357c:	40020400 	.word	0x40020400
 8003580:	40020800 	.word	0x40020800
 8003584:	40020c00 	.word	0x40020c00
 8003588:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 800358c:	4b86      	ldr	r3, [pc, #536]	; (80037a8 <extInt_Config+0x710>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a85      	ldr	r2, [pc, #532]	; (80037a8 <extInt_Config+0x710>)
 8003592:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003596:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4a83      	ldr	r2, [pc, #524]	; (80037ac <extInt_Config+0x714>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d104      	bne.n	80035ae <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 80035a4:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <extInt_Config+0x710>)
 80035a6:	4a80      	ldr	r2, [pc, #512]	; (80037a8 <extInt_Config+0x710>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80035ac:	e365      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	4a7e      	ldr	r2, [pc, #504]	; (80037b0 <extInt_Config+0x718>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d106      	bne.n	80035c8 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 80035ba:	4b7b      	ldr	r3, [pc, #492]	; (80037a8 <extInt_Config+0x710>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	4a7a      	ldr	r2, [pc, #488]	; (80037a8 <extInt_Config+0x710>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	60d3      	str	r3, [r2, #12]
		break;
 80035c6:	e358      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	4a79      	ldr	r2, [pc, #484]	; (80037b4 <extInt_Config+0x71c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d106      	bne.n	80035e2 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80035d4:	4b74      	ldr	r3, [pc, #464]	; (80037a8 <extInt_Config+0x710>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a73      	ldr	r2, [pc, #460]	; (80037a8 <extInt_Config+0x710>)
 80035da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035de:	60d3      	str	r3, [r2, #12]
		break;
 80035e0:	e34b      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a73      	ldr	r2, [pc, #460]	; (80037b8 <extInt_Config+0x720>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d106      	bne.n	80035fc <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 80035ee:	4b6e      	ldr	r3, [pc, #440]	; (80037a8 <extInt_Config+0x710>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4a6d      	ldr	r2, [pc, #436]	; (80037a8 <extInt_Config+0x710>)
 80035f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035f8:	60d3      	str	r3, [r2, #12]
		break;
 80035fa:	e33e      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	4a6e      	ldr	r2, [pc, #440]	; (80037bc <extInt_Config+0x724>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d106      	bne.n	8003616 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8003608:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <extInt_Config+0x710>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <extInt_Config+0x710>)
 800360e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003612:	60d3      	str	r3, [r2, #12]
		break;
 8003614:	e331      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	4a68      	ldr	r2, [pc, #416]	; (80037c0 <extInt_Config+0x728>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d106      	bne.n	8003630 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8003622:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <extInt_Config+0x710>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	4a60      	ldr	r2, [pc, #384]	; (80037a8 <extInt_Config+0x710>)
 8003628:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800362c:	60d3      	str	r3, [r2, #12]
		break;
 800362e:	e324      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003630:	bf00      	nop
		break;
 8003632:	e322      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8003634:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <extInt_Config+0x710>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a5b      	ldr	r2, [pc, #364]	; (80037a8 <extInt_Config+0x710>)
 800363a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800363e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4a59      	ldr	r2, [pc, #356]	; (80037ac <extInt_Config+0x714>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d104      	bne.n	8003656 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800364c:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <extInt_Config+0x710>)
 800364e:	4a56      	ldr	r2, [pc, #344]	; (80037a8 <extInt_Config+0x710>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003654:	e311      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a54      	ldr	r2, [pc, #336]	; (80037b0 <extInt_Config+0x718>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d106      	bne.n	8003670 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003662:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <extInt_Config+0x710>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4a50      	ldr	r2, [pc, #320]	; (80037a8 <extInt_Config+0x710>)
 8003668:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800366c:	60d3      	str	r3, [r2, #12]
		break;
 800366e:	e304      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	4a4f      	ldr	r2, [pc, #316]	; (80037b4 <extInt_Config+0x71c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d106      	bne.n	800368a <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800367c:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <extInt_Config+0x710>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a49      	ldr	r2, [pc, #292]	; (80037a8 <extInt_Config+0x710>)
 8003682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003686:	60d3      	str	r3, [r2, #12]
		break;
 8003688:	e2f7      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a49      	ldr	r2, [pc, #292]	; (80037b8 <extInt_Config+0x720>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d106      	bne.n	80036a4 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <extInt_Config+0x710>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4a43      	ldr	r2, [pc, #268]	; (80037a8 <extInt_Config+0x710>)
 800369c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80036a0:	60d3      	str	r3, [r2, #12]
		break;
 80036a2:	e2ea      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a44      	ldr	r2, [pc, #272]	; (80037bc <extInt_Config+0x724>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d106      	bne.n	80036be <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 80036b0:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <extInt_Config+0x710>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a3c      	ldr	r2, [pc, #240]	; (80037a8 <extInt_Config+0x710>)
 80036b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036ba:	60d3      	str	r3, [r2, #12]
		break;
 80036bc:	e2dd      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a3e      	ldr	r2, [pc, #248]	; (80037c0 <extInt_Config+0x728>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d106      	bne.n	80036d8 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <extInt_Config+0x710>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4a36      	ldr	r2, [pc, #216]	; (80037a8 <extInt_Config+0x710>)
 80036d0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80036d4:	60d3      	str	r3, [r2, #12]
		break;
 80036d6:	e2d0      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 80036d8:	bf00      	nop
		break;
 80036da:	e2ce      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <extInt_Config+0x710>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	4a31      	ldr	r2, [pc, #196]	; (80037a8 <extInt_Config+0x710>)
 80036e2:	f023 030f 	bic.w	r3, r3, #15
 80036e6:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4a2f      	ldr	r2, [pc, #188]	; (80037ac <extInt_Config+0x714>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d104      	bne.n	80036fe <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80036f4:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <extInt_Config+0x710>)
 80036f6:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <extInt_Config+0x710>)
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80036fc:	e2bd      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a2a      	ldr	r2, [pc, #168]	; (80037b0 <extInt_Config+0x718>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d106      	bne.n	8003718 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800370a:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <extInt_Config+0x710>)
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	4a26      	ldr	r2, [pc, #152]	; (80037a8 <extInt_Config+0x710>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6113      	str	r3, [r2, #16]
		break;
 8003716:	e2b0      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4a25      	ldr	r2, [pc, #148]	; (80037b4 <extInt_Config+0x71c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d106      	bne.n	8003732 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8003724:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <extInt_Config+0x710>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <extInt_Config+0x710>)
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	6113      	str	r3, [r2, #16]
		break;
 8003730:	e2a3      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <extInt_Config+0x720>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d106      	bne.n	800374c <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <extInt_Config+0x710>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <extInt_Config+0x710>)
 8003744:	f043 0303 	orr.w	r3, r3, #3
 8003748:	6113      	str	r3, [r2, #16]
		break;
 800374a:	e296      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <extInt_Config+0x724>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d106      	bne.n	8003766 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <extInt_Config+0x710>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	4a12      	ldr	r2, [pc, #72]	; (80037a8 <extInt_Config+0x710>)
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	6113      	str	r3, [r2, #16]
		break;
 8003764:	e289      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <extInt_Config+0x728>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d106      	bne.n	8003780 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <extInt_Config+0x710>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <extInt_Config+0x710>)
 8003778:	f043 0307 	orr.w	r3, r3, #7
 800377c:	6113      	str	r3, [r2, #16]
		break;
 800377e:	e27c      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003780:	bf00      	nop
		break;
 8003782:	e27a      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <extInt_Config+0x710>)
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <extInt_Config+0x710>)
 800378a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800378e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	4a05      	ldr	r2, [pc, #20]	; (80037ac <extInt_Config+0x714>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d113      	bne.n	80037c4 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 800379c:	4b02      	ldr	r3, [pc, #8]	; (80037a8 <extInt_Config+0x710>)
 800379e:	4a02      	ldr	r2, [pc, #8]	; (80037a8 <extInt_Config+0x710>)
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80037a4:	e269      	b.n	8003c7a <extInt_Config+0xbe2>
 80037a6:	bf00      	nop
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40020000 	.word	0x40020000
 80037b0:	40020400 	.word	0x40020400
 80037b4:	40020800 	.word	0x40020800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <extInt_Config+0x940>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d106      	bne.n	80037de <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80037d0:	4b82      	ldr	r3, [pc, #520]	; (80039dc <extInt_Config+0x944>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	4a81      	ldr	r2, [pc, #516]	; (80039dc <extInt_Config+0x944>)
 80037d6:	f043 0310 	orr.w	r3, r3, #16
 80037da:	6113      	str	r3, [r2, #16]
		break;
 80037dc:	e24d      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a7e      	ldr	r2, [pc, #504]	; (80039e0 <extInt_Config+0x948>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d106      	bne.n	80037f8 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80037ea:	4b7c      	ldr	r3, [pc, #496]	; (80039dc <extInt_Config+0x944>)
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	4a7b      	ldr	r2, [pc, #492]	; (80039dc <extInt_Config+0x944>)
 80037f0:	f043 0320 	orr.w	r3, r3, #32
 80037f4:	6113      	str	r3, [r2, #16]
		break;
 80037f6:	e240      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	4a79      	ldr	r2, [pc, #484]	; (80039e4 <extInt_Config+0x94c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d106      	bne.n	8003812 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003804:	4b75      	ldr	r3, [pc, #468]	; (80039dc <extInt_Config+0x944>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	4a74      	ldr	r2, [pc, #464]	; (80039dc <extInt_Config+0x944>)
 800380a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800380e:	6113      	str	r3, [r2, #16]
		break;
 8003810:	e233      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a73      	ldr	r2, [pc, #460]	; (80039e8 <extInt_Config+0x950>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d106      	bne.n	800382c <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800381e:	4b6f      	ldr	r3, [pc, #444]	; (80039dc <extInt_Config+0x944>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4a6e      	ldr	r2, [pc, #440]	; (80039dc <extInt_Config+0x944>)
 8003824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003828:	6113      	str	r3, [r2, #16]
		break;
 800382a:	e226      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	4a6e      	ldr	r2, [pc, #440]	; (80039ec <extInt_Config+0x954>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d106      	bne.n	8003846 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8003838:	4b68      	ldr	r3, [pc, #416]	; (80039dc <extInt_Config+0x944>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	4a67      	ldr	r2, [pc, #412]	; (80039dc <extInt_Config+0x944>)
 800383e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003842:	6113      	str	r3, [r2, #16]
		break;
 8003844:	e219      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003846:	bf00      	nop
		break;
 8003848:	e217      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 800384a:	4b64      	ldr	r3, [pc, #400]	; (80039dc <extInt_Config+0x944>)
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	4a63      	ldr	r2, [pc, #396]	; (80039dc <extInt_Config+0x944>)
 8003850:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003854:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a64      	ldr	r2, [pc, #400]	; (80039f0 <extInt_Config+0x958>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d104      	bne.n	800386c <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003862:	4b5e      	ldr	r3, [pc, #376]	; (80039dc <extInt_Config+0x944>)
 8003864:	4a5d      	ldr	r2, [pc, #372]	; (80039dc <extInt_Config+0x944>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800386a:	e206      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <extInt_Config+0x940>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d106      	bne.n	8003886 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003878:	4b58      	ldr	r3, [pc, #352]	; (80039dc <extInt_Config+0x944>)
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	4a57      	ldr	r2, [pc, #348]	; (80039dc <extInt_Config+0x944>)
 800387e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003882:	6113      	str	r3, [r2, #16]
		break;
 8003884:	e1f9      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a54      	ldr	r2, [pc, #336]	; (80039e0 <extInt_Config+0x948>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d106      	bne.n	80038a0 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003892:	4b52      	ldr	r3, [pc, #328]	; (80039dc <extInt_Config+0x944>)
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	4a51      	ldr	r2, [pc, #324]	; (80039dc <extInt_Config+0x944>)
 8003898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389c:	6113      	str	r3, [r2, #16]
		break;
 800389e:	e1ec      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4a4f      	ldr	r2, [pc, #316]	; (80039e4 <extInt_Config+0x94c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d106      	bne.n	80038ba <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 80038ac:	4b4b      	ldr	r3, [pc, #300]	; (80039dc <extInt_Config+0x944>)
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <extInt_Config+0x944>)
 80038b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80038b6:	6113      	str	r3, [r2, #16]
		break;
 80038b8:	e1df      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a49      	ldr	r2, [pc, #292]	; (80039e8 <extInt_Config+0x950>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d106      	bne.n	80038d4 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 80038c6:	4b45      	ldr	r3, [pc, #276]	; (80039dc <extInt_Config+0x944>)
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	4a44      	ldr	r2, [pc, #272]	; (80039dc <extInt_Config+0x944>)
 80038cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d0:	6113      	str	r3, [r2, #16]
		break;
 80038d2:	e1d2      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	4a44      	ldr	r2, [pc, #272]	; (80039ec <extInt_Config+0x954>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d106      	bne.n	80038ee <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 80038e0:	4b3e      	ldr	r3, [pc, #248]	; (80039dc <extInt_Config+0x944>)
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4a3d      	ldr	r2, [pc, #244]	; (80039dc <extInt_Config+0x944>)
 80038e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ea:	6113      	str	r3, [r2, #16]
		break;
 80038ec:	e1c5      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 80038ee:	bf00      	nop
		break;
 80038f0:	e1c3      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 80038f2:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <extInt_Config+0x944>)
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	4a39      	ldr	r2, [pc, #228]	; (80039dc <extInt_Config+0x944>)
 80038f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038fc:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4a3a      	ldr	r2, [pc, #232]	; (80039f0 <extInt_Config+0x958>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d104      	bne.n	8003914 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800390a:	4b34      	ldr	r3, [pc, #208]	; (80039dc <extInt_Config+0x944>)
 800390c:	4a33      	ldr	r2, [pc, #204]	; (80039dc <extInt_Config+0x944>)
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003912:	e1b2      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <extInt_Config+0x940>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d106      	bne.n	800392e <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8003920:	4b2e      	ldr	r3, [pc, #184]	; (80039dc <extInt_Config+0x944>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	4a2d      	ldr	r2, [pc, #180]	; (80039dc <extInt_Config+0x944>)
 8003926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800392a:	6113      	str	r3, [r2, #16]
		break;
 800392c:	e1a5      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a2a      	ldr	r2, [pc, #168]	; (80039e0 <extInt_Config+0x948>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d106      	bne.n	8003948 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 800393a:	4b28      	ldr	r3, [pc, #160]	; (80039dc <extInt_Config+0x944>)
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	4a27      	ldr	r2, [pc, #156]	; (80039dc <extInt_Config+0x944>)
 8003940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003944:	6113      	str	r3, [r2, #16]
		break;
 8003946:	e198      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <extInt_Config+0x94c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d106      	bne.n	8003962 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <extInt_Config+0x944>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4a20      	ldr	r2, [pc, #128]	; (80039dc <extInt_Config+0x944>)
 800395a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800395e:	6113      	str	r3, [r2, #16]
		break;
 8003960:	e18b      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a1f      	ldr	r2, [pc, #124]	; (80039e8 <extInt_Config+0x950>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d106      	bne.n	800397c <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800396e:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <extInt_Config+0x944>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4a1a      	ldr	r2, [pc, #104]	; (80039dc <extInt_Config+0x944>)
 8003974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003978:	6113      	str	r3, [r2, #16]
		break;
 800397a:	e17e      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <extInt_Config+0x954>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d106      	bne.n	8003996 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <extInt_Config+0x944>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	4a13      	ldr	r2, [pc, #76]	; (80039dc <extInt_Config+0x944>)
 800398e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003992:	6113      	str	r3, [r2, #16]
		break;
 8003994:	e171      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003996:	bf00      	nop
		break;
 8003998:	e16f      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <extInt_Config+0x944>)
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	4a0f      	ldr	r2, [pc, #60]	; (80039dc <extInt_Config+0x944>)
 80039a0:	f023 030f 	bic.w	r3, r3, #15
 80039a4:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	4a10      	ldr	r2, [pc, #64]	; (80039f0 <extInt_Config+0x958>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d104      	bne.n	80039bc <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <extInt_Config+0x944>)
 80039b4:	4a09      	ldr	r2, [pc, #36]	; (80039dc <extInt_Config+0x944>)
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80039ba:	e15e      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <extInt_Config+0x940>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d115      	bne.n	80039f4 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <extInt_Config+0x944>)
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	4a03      	ldr	r2, [pc, #12]	; (80039dc <extInt_Config+0x944>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6153      	str	r3, [r2, #20]
		break;
 80039d4:	e151      	b.n	8003c7a <extInt_Config+0xbe2>
 80039d6:	bf00      	nop
 80039d8:	40020400 	.word	0x40020400
 80039dc:	40013800 	.word	0x40013800
 80039e0:	40020800 	.word	0x40020800
 80039e4:	40020c00 	.word	0x40020c00
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40021c00 	.word	0x40021c00
 80039f0:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4a83      	ldr	r2, [pc, #524]	; (8003c08 <extInt_Config+0xb70>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d106      	bne.n	8003a0e <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003a00:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <extInt_Config+0xb74>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	4a81      	ldr	r2, [pc, #516]	; (8003c0c <extInt_Config+0xb74>)
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	6153      	str	r3, [r2, #20]
		break;
 8003a0c:	e135      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a7e      	ldr	r2, [pc, #504]	; (8003c10 <extInt_Config+0xb78>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d106      	bne.n	8003a28 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8003a1a:	4b7c      	ldr	r3, [pc, #496]	; (8003c0c <extInt_Config+0xb74>)
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4a7b      	ldr	r2, [pc, #492]	; (8003c0c <extInt_Config+0xb74>)
 8003a20:	f043 0303 	orr.w	r3, r3, #3
 8003a24:	6153      	str	r3, [r2, #20]
		break;
 8003a26:	e128      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4a79      	ldr	r2, [pc, #484]	; (8003c14 <extInt_Config+0xb7c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d106      	bne.n	8003a42 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8003a34:	4b75      	ldr	r3, [pc, #468]	; (8003c0c <extInt_Config+0xb74>)
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	4a74      	ldr	r2, [pc, #464]	; (8003c0c <extInt_Config+0xb74>)
 8003a3a:	f043 0304 	orr.w	r3, r3, #4
 8003a3e:	6153      	str	r3, [r2, #20]
		break;
 8003a40:	e11b      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a73      	ldr	r2, [pc, #460]	; (8003c18 <extInt_Config+0xb80>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d106      	bne.n	8003a5c <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8003a4e:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <extInt_Config+0xb74>)
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	4a6e      	ldr	r2, [pc, #440]	; (8003c0c <extInt_Config+0xb74>)
 8003a54:	f043 0307 	orr.w	r3, r3, #7
 8003a58:	6153      	str	r3, [r2, #20]
		break;
 8003a5a:	e10e      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003a5c:	bf00      	nop
		break;
 8003a5e:	e10c      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8003a60:	4b6a      	ldr	r3, [pc, #424]	; (8003c0c <extInt_Config+0xb74>)
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	4a69      	ldr	r2, [pc, #420]	; (8003c0c <extInt_Config+0xb74>)
 8003a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a6a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	4a6a      	ldr	r2, [pc, #424]	; (8003c1c <extInt_Config+0xb84>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d104      	bne.n	8003a82 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8003a78:	4b64      	ldr	r3, [pc, #400]	; (8003c0c <extInt_Config+0xb74>)
 8003a7a:	4a64      	ldr	r2, [pc, #400]	; (8003c0c <extInt_Config+0xb74>)
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003a80:	e0fb      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <extInt_Config+0xb88>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d106      	bne.n	8003a9c <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8003a8e:	4b5f      	ldr	r3, [pc, #380]	; (8003c0c <extInt_Config+0xb74>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	4a5e      	ldr	r2, [pc, #376]	; (8003c0c <extInt_Config+0xb74>)
 8003a94:	f043 0310 	orr.w	r3, r3, #16
 8003a98:	6153      	str	r3, [r2, #20]
		break;
 8003a9a:	e0ee      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4a59      	ldr	r2, [pc, #356]	; (8003c08 <extInt_Config+0xb70>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d106      	bne.n	8003ab6 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8003aa8:	4b58      	ldr	r3, [pc, #352]	; (8003c0c <extInt_Config+0xb74>)
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4a57      	ldr	r2, [pc, #348]	; (8003c0c <extInt_Config+0xb74>)
 8003aae:	f043 0320 	orr.w	r3, r3, #32
 8003ab2:	6153      	str	r3, [r2, #20]
		break;
 8003ab4:	e0e1      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4a54      	ldr	r2, [pc, #336]	; (8003c10 <extInt_Config+0xb78>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d106      	bne.n	8003ad0 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <extInt_Config+0xb74>)
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	4a51      	ldr	r2, [pc, #324]	; (8003c0c <extInt_Config+0xb74>)
 8003ac8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003acc:	6153      	str	r3, [r2, #20]
		break;
 8003ace:	e0d4      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <extInt_Config+0xb7c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d106      	bne.n	8003aea <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8003adc:	4b4b      	ldr	r3, [pc, #300]	; (8003c0c <extInt_Config+0xb74>)
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	4a4a      	ldr	r2, [pc, #296]	; (8003c0c <extInt_Config+0xb74>)
 8003ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae6:	6153      	str	r3, [r2, #20]
		break;
 8003ae8:	e0c7      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a49      	ldr	r2, [pc, #292]	; (8003c18 <extInt_Config+0xb80>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d106      	bne.n	8003b04 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8003af6:	4b45      	ldr	r3, [pc, #276]	; (8003c0c <extInt_Config+0xb74>)
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4a44      	ldr	r2, [pc, #272]	; (8003c0c <extInt_Config+0xb74>)
 8003afc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003b00:	6153      	str	r3, [r2, #20]
		break;
 8003b02:	e0ba      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003b04:	bf00      	nop
		break;
 8003b06:	e0b8      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <extInt_Config+0xb74>)
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	4a3f      	ldr	r2, [pc, #252]	; (8003c0c <extInt_Config+0xb74>)
 8003b0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b12:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	4a40      	ldr	r2, [pc, #256]	; (8003c1c <extInt_Config+0xb84>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d104      	bne.n	8003b2a <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <extInt_Config+0xb74>)
 8003b22:	4a3a      	ldr	r2, [pc, #232]	; (8003c0c <extInt_Config+0xb74>)
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003b28:	e0a7      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a3b      	ldr	r2, [pc, #236]	; (8003c20 <extInt_Config+0xb88>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d106      	bne.n	8003b44 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8003b36:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <extInt_Config+0xb74>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <extInt_Config+0xb74>)
 8003b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b40:	6153      	str	r3, [r2, #20]
		break;
 8003b42:	e09a      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	4a2f      	ldr	r2, [pc, #188]	; (8003c08 <extInt_Config+0xb70>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d106      	bne.n	8003b5e <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <extInt_Config+0xb74>)
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	4a2d      	ldr	r2, [pc, #180]	; (8003c0c <extInt_Config+0xb74>)
 8003b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5a:	6153      	str	r3, [r2, #20]
		break;
 8003b5c:	e08d      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a2a      	ldr	r2, [pc, #168]	; (8003c10 <extInt_Config+0xb78>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d106      	bne.n	8003b78 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8003b6a:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <extInt_Config+0xb74>)
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <extInt_Config+0xb74>)
 8003b70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003b74:	6153      	str	r3, [r2, #20]
		break;
 8003b76:	e080      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	4a25      	ldr	r2, [pc, #148]	; (8003c14 <extInt_Config+0xb7c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d106      	bne.n	8003b92 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <extInt_Config+0xb74>)
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <extInt_Config+0xb74>)
 8003b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b8e:	6153      	str	r3, [r2, #20]
		break;
 8003b90:	e073      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <extInt_Config+0xb80>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d106      	bne.n	8003bac <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <extInt_Config+0xb74>)
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <extInt_Config+0xb74>)
 8003ba4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ba8:	6153      	str	r3, [r2, #20]
		break;
 8003baa:	e066      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003bac:	bf00      	nop
		break;
 8003bae:	e064      	b.n	8003c7a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8003bb0:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <extInt_Config+0xb74>)
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <extInt_Config+0xb74>)
 8003bb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bba:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	4a16      	ldr	r2, [pc, #88]	; (8003c1c <extInt_Config+0xb84>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d104      	bne.n	8003bd2 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8003bc8:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <extInt_Config+0xb74>)
 8003bca:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <extInt_Config+0xb74>)
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003bd0:	e053      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4a11      	ldr	r2, [pc, #68]	; (8003c20 <extInt_Config+0xb88>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d106      	bne.n	8003bec <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <extInt_Config+0xb74>)
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <extInt_Config+0xb74>)
 8003be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003be8:	6153      	str	r3, [r2, #20]
		break;
 8003bea:	e046      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <extInt_Config+0xb70>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d115      	bne.n	8003c24 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <extInt_Config+0xb74>)
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	4a03      	ldr	r2, [pc, #12]	; (8003c0c <extInt_Config+0xb74>)
 8003bfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c02:	6153      	str	r3, [r2, #20]
		break;
 8003c04:	e039      	b.n	8003c7a <extInt_Config+0xbe2>
 8003c06:	bf00      	nop
 8003c08:	40020800 	.word	0x40020800
 8003c0c:	40013800 	.word	0x40013800
 8003c10:	40020c00 	.word	0x40020c00
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40021c00 	.word	0x40021c00
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	4a9d      	ldr	r2, [pc, #628]	; (8003ea0 <extInt_Config+0xe08>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d106      	bne.n	8003c3e <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8003c30:	4b9c      	ldr	r3, [pc, #624]	; (8003ea4 <extInt_Config+0xe0c>)
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	4a9b      	ldr	r2, [pc, #620]	; (8003ea4 <extInt_Config+0xe0c>)
 8003c36:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003c3a:	6153      	str	r3, [r2, #20]
		break;
 8003c3c:	e01d      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a98      	ldr	r2, [pc, #608]	; (8003ea8 <extInt_Config+0xe10>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d106      	bne.n	8003c58 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8003c4a:	4b96      	ldr	r3, [pc, #600]	; (8003ea4 <extInt_Config+0xe0c>)
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	4a95      	ldr	r2, [pc, #596]	; (8003ea4 <extInt_Config+0xe0c>)
 8003c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c54:	6153      	str	r3, [r2, #20]
		break;
 8003c56:	e010      	b.n	8003c7a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4a93      	ldr	r2, [pc, #588]	; (8003eac <extInt_Config+0xe14>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d106      	bne.n	8003c72 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003c64:	4b8f      	ldr	r3, [pc, #572]	; (8003ea4 <extInt_Config+0xe0c>)
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	4a8e      	ldr	r2, [pc, #568]	; (8003ea4 <extInt_Config+0xe0c>)
 8003c6a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003c6e:	6153      	str	r3, [r2, #20]
		break;
 8003c70:	e003      	b.n	8003c7a <extInt_Config+0xbe2>
			__NOP();
 8003c72:	bf00      	nop
		break;
 8003c74:	e001      	b.n	8003c7a <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8003c76:	bf00      	nop
		break;
 8003c78:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	791b      	ldrb	r3, [r3, #4]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d126      	bne.n	8003cd0 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c82:	4b8b      	ldr	r3, [pc, #556]	; (8003eb0 <extInt_Config+0xe18>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	7812      	ldrb	r2, [r2, #0]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	2201      	movs	r2, #1
 8003c90:	408a      	lsls	r2, r1
 8003c92:	43d2      	mvns	r2, r2
 8003c94:	4611      	mov	r1, r2
 8003c96:	4a86      	ldr	r2, [pc, #536]	; (8003eb0 <extInt_Config+0xe18>)
 8003c98:	400b      	ands	r3, r1
 8003c9a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c9c:	4b84      	ldr	r3, [pc, #528]	; (8003eb0 <extInt_Config+0xe18>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	2201      	movs	r2, #1
 8003caa:	408a      	lsls	r2, r1
 8003cac:	43d2      	mvns	r2, r2
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4a7f      	ldr	r2, [pc, #508]	; (8003eb0 <extInt_Config+0xe18>)
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003cb6:	4b7e      	ldr	r3, [pc, #504]	; (8003eb0 <extInt_Config+0xe18>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	7812      	ldrb	r2, [r2, #0]
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	408a      	lsls	r2, r1
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4a79      	ldr	r2, [pc, #484]	; (8003eb0 <extInt_Config+0xe18>)
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	6093      	str	r3, [r2, #8]
 8003cce:	e05c      	b.n	8003d8a <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	791b      	ldrb	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d126      	bne.n	8003d26 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003cd8:	4b75      	ldr	r3, [pc, #468]	; (8003eb0 <extInt_Config+0xe18>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	7812      	ldrb	r2, [r2, #0]
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	408a      	lsls	r2, r1
 8003ce8:	43d2      	mvns	r2, r2
 8003cea:	4611      	mov	r1, r2
 8003cec:	4a70      	ldr	r2, [pc, #448]	; (8003eb0 <extInt_Config+0xe18>)
 8003cee:	400b      	ands	r3, r1
 8003cf0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003cf2:	4b6f      	ldr	r3, [pc, #444]	; (8003eb0 <extInt_Config+0xe18>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	7812      	ldrb	r2, [r2, #0]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	2201      	movs	r2, #1
 8003d00:	408a      	lsls	r2, r1
 8003d02:	43d2      	mvns	r2, r2
 8003d04:	4611      	mov	r1, r2
 8003d06:	4a6a      	ldr	r2, [pc, #424]	; (8003eb0 <extInt_Config+0xe18>)
 8003d08:	400b      	ands	r3, r1
 8003d0a:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d0c:	4b68      	ldr	r3, [pc, #416]	; (8003eb0 <extInt_Config+0xe18>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	7812      	ldrb	r2, [r2, #0]
 8003d16:	4611      	mov	r1, r2
 8003d18:	2201      	movs	r2, #1
 8003d1a:	408a      	lsls	r2, r1
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4a64      	ldr	r2, [pc, #400]	; (8003eb0 <extInt_Config+0xe18>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	60d3      	str	r3, [r2, #12]
 8003d24:	e031      	b.n	8003d8a <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d26:	4b62      	ldr	r3, [pc, #392]	; (8003eb0 <extInt_Config+0xe18>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	4611      	mov	r1, r2
 8003d32:	2201      	movs	r2, #1
 8003d34:	408a      	lsls	r2, r1
 8003d36:	43d2      	mvns	r2, r2
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4a5d      	ldr	r2, [pc, #372]	; (8003eb0 <extInt_Config+0xe18>)
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d40:	4b5b      	ldr	r3, [pc, #364]	; (8003eb0 <extInt_Config+0xe18>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	7812      	ldrb	r2, [r2, #0]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	408a      	lsls	r2, r1
 8003d50:	43d2      	mvns	r2, r2
 8003d52:	4611      	mov	r1, r2
 8003d54:	4a56      	ldr	r2, [pc, #344]	; (8003eb0 <extInt_Config+0xe18>)
 8003d56:	400b      	ands	r3, r1
 8003d58:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d5a:	4b55      	ldr	r3, [pc, #340]	; (8003eb0 <extInt_Config+0xe18>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	7812      	ldrb	r2, [r2, #0]
 8003d64:	4611      	mov	r1, r2
 8003d66:	2201      	movs	r2, #1
 8003d68:	408a      	lsls	r2, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4a50      	ldr	r2, [pc, #320]	; (8003eb0 <extInt_Config+0xe18>)
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d72:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <extInt_Config+0xe18>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	7812      	ldrb	r2, [r2, #0]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	2201      	movs	r2, #1
 8003d80:	408a      	lsls	r2, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	4a4a      	ldr	r2, [pc, #296]	; (8003eb0 <extInt_Config+0xe18>)
 8003d86:	430b      	orrs	r3, r1
 8003d88:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003d8a:	4b49      	ldr	r3, [pc, #292]	; (8003eb0 <extInt_Config+0xe18>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	7812      	ldrb	r2, [r2, #0]
 8003d94:	4611      	mov	r1, r2
 8003d96:	2201      	movs	r2, #1
 8003d98:	408a      	lsls	r2, r1
 8003d9a:	43d2      	mvns	r2, r2
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4a44      	ldr	r2, [pc, #272]	; (8003eb0 <extInt_Config+0xe18>)
 8003da0:	400b      	ands	r3, r1
 8003da2:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003da4:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <extInt_Config+0xe18>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	4611      	mov	r1, r2
 8003db0:	2201      	movs	r2, #1
 8003db2:	408a      	lsls	r2, r1
 8003db4:	4611      	mov	r1, r2
 8003db6:	4a3e      	ldr	r2, [pc, #248]	; (8003eb0 <extInt_Config+0xe18>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dbc:	b672      	cpsid	i
}
 8003dbe:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b0f      	cmp	r3, #15
 8003dc8:	d862      	bhi.n	8003e90 <extInt_Config+0xdf8>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <extInt_Config+0xd38>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003e11 	.word	0x08003e11
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e21 	.word	0x08003e21
 8003ddc:	08003e29 	.word	0x08003e29
 8003de0:	08003e31 	.word	0x08003e31
 8003de4:	08003e39 	.word	0x08003e39
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003e49 	.word	0x08003e49
 8003df0:	08003e51 	.word	0x08003e51
 8003df4:	08003e59 	.word	0x08003e59
 8003df8:	08003e61 	.word	0x08003e61
 8003dfc:	08003e69 	.word	0x08003e69
 8003e00:	08003e71 	.word	0x08003e71
 8003e04:	08003e79 	.word	0x08003e79
 8003e08:	08003e81 	.word	0x08003e81
 8003e0c:	08003e89 	.word	0x08003e89
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8003e10:	2006      	movs	r0, #6
 8003e12:	f7ff f923 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e16:	e03c      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8003e18:	2007      	movs	r0, #7
 8003e1a:	f7ff f91f 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e1e:	e038      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8003e20:	2008      	movs	r0, #8
 8003e22:	f7ff f91b 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e26:	e034      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8003e28:	2009      	movs	r0, #9
 8003e2a:	f7ff f917 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e2e:	e030      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003e30:	200a      	movs	r0, #10
 8003e32:	f7ff f913 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e36:	e02c      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e38:	2017      	movs	r0, #23
 8003e3a:	f7ff f90f 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e3e:	e028      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e40:	2017      	movs	r0, #23
 8003e42:	f7ff f90b 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e46:	e024      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e48:	2017      	movs	r0, #23
 8003e4a:	f7ff f907 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e4e:	e020      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e50:	2017      	movs	r0, #23
 8003e52:	f7ff f903 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e56:	e01c      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e58:	2017      	movs	r0, #23
 8003e5a:	f7ff f8ff 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e5e:	e018      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e60:	2028      	movs	r0, #40	; 0x28
 8003e62:	f7ff f8fb 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e66:	e014      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e68:	2028      	movs	r0, #40	; 0x28
 8003e6a:	f7ff f8f7 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e6e:	e010      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e70:	2028      	movs	r0, #40	; 0x28
 8003e72:	f7ff f8f3 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e76:	e00c      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e78:	2028      	movs	r0, #40	; 0x28
 8003e7a:	f7ff f8ef 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e7e:	e008      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e80:	2028      	movs	r0, #40	; 0x28
 8003e82:	f7ff f8eb 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e86:	e004      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e88:	2028      	movs	r0, #40	; 0x28
 8003e8a:	f7ff f8e7 	bl	800305c <__NVIC_EnableIRQ>
		break;
 8003e8e:	e000      	b.n	8003e92 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8003e90:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003e92:	b662      	cpsie	i
}
 8003e94:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40020c00 	.word	0x40020c00
 8003ea4:	40013800 	.word	0x40013800
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40021c00 	.word	0x40021c00
 8003eb0:	40013c00 	.word	0x40013c00

08003eb4 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	__NOP();
 8003eb8:	bf00      	nop
}
 8003eba:	bf00      	nop
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
	__NOP();
 8003ec8:	bf00      	nop
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
	__NOP();
 8003ed8:	bf00      	nop
}
 8003eda:	bf00      	nop
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
	__NOP();
 8003ee8:	bf00      	nop
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
	__NOP();
 8003ef8:	bf00      	nop
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
	__NOP();
 8003f08:	bf00      	nop
}
 8003f0a:	bf00      	nop
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
	__NOP();
 8003f18:	bf00      	nop
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
	__NOP();
 8003f28:	bf00      	nop
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
	__NOP();
 8003f38:	bf00      	nop
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
	__NOP();
 8003f48:	bf00      	nop
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
	__NOP();
 8003f58:	bf00      	nop
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
	__NOP();
 8003f68:	bf00      	nop
}
 8003f6a:	bf00      	nop
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
	__NOP();
 8003f78:	bf00      	nop
}
 8003f7a:	bf00      	nop
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
	__NOP();
 8003f88:	bf00      	nop
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <EXTI0_IRQHandler+0x28>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <EXTI0_IRQHandler+0x28>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <EXTI0_IRQHandler+0x28>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003fb0:	f7ff ff80 	bl	8003eb4 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8003fb4:	e000      	b.n	8003fb8 <EXTI0_IRQHandler+0x24>
		__NOP();
 8003fb6:	bf00      	nop
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40013c00 	.word	0x40013c00

08003fc0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <EXTI1_IRQHandler+0x28>)
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <EXTI1_IRQHandler+0x28>)
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <EXTI1_IRQHandler+0x28>)
 8003fd6:	f043 0302 	orr.w	r3, r3, #2
 8003fda:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8003fdc:	f7fd ff58 	bl	8001e90 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8003fe0:	e000      	b.n	8003fe4 <EXTI1_IRQHandler+0x24>
		__NOP();
 8003fe2:	bf00      	nop
}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40013c00 	.word	0x40013c00

08003fec <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8003ff0:	4b08      	ldr	r3, [pc, #32]	; (8004014 <EXTI2_IRQHandler+0x28>)
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <EXTI2_IRQHandler+0x28>)
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	4a04      	ldr	r2, [pc, #16]	; (8004014 <EXTI2_IRQHandler+0x28>)
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8004008:	f7ff ff5c 	bl	8003ec4 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 800400c:	e000      	b.n	8004010 <EXTI2_IRQHandler+0x24>
		__NOP();
 800400e:	bf00      	nop
}
 8004010:	bf00      	nop
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40013c00 	.word	0x40013c00

08004018 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 800401c:	4b08      	ldr	r3, [pc, #32]	; (8004040 <EXTI3_IRQHandler+0x28>)
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <EXTI3_IRQHandler+0x28>)
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	4a04      	ldr	r2, [pc, #16]	; (8004040 <EXTI3_IRQHandler+0x28>)
 800402e:	f043 0308 	orr.w	r3, r3, #8
 8004032:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8004034:	f7fd ff80 	bl	8001f38 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8004038:	e000      	b.n	800403c <EXTI3_IRQHandler+0x24>
		__NOP();
 800403a:	bf00      	nop
}
 800403c:	bf00      	nop
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40013c00 	.word	0x40013c00

08004044 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8004048:	4b08      	ldr	r3, [pc, #32]	; (800406c <EXTI4_IRQHandler+0x28>)
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <EXTI4_IRQHandler+0x28>)
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4a04      	ldr	r2, [pc, #16]	; (800406c <EXTI4_IRQHandler+0x28>)
 800405a:	f043 0310 	orr.w	r3, r3, #16
 800405e:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8004060:	f7ff ff38 	bl	8003ed4 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8004064:	e000      	b.n	8004068 <EXTI4_IRQHandler+0x24>
		__NOP();
 8004066:	bf00      	nop
}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40013c00 	.word	0x40013c00

08004070 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8004080:	4b23      	ldr	r3, [pc, #140]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 8004086:	f043 0320 	orr.w	r3, r3, #32
 800408a:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 800408c:	f7ff ff2a 	bl	8003ee4 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8004090:	e03c      	b.n	800410c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8004092:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a8:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 80040aa:	f7ff ff23 	bl	8003ef4 <callback_extInt6>
}
 80040ae:	e02d      	b.n	800410c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c6:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 80040c8:	f7ff ff1c 	bl	8003f04 <callback_extInt7>
}
 80040cc:	e01e      	b.n	800410c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 80040ce:	4b10      	ldr	r3, [pc, #64]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 80040e6:	f7ff ff15 	bl	8003f14 <callback_extInt8>
}
 80040ea:	e00f      	b.n	800410c <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 80040ec:	4b08      	ldr	r3, [pc, #32]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <EXTI9_5_IRQHandler+0xa0>)
 80040fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004102:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8004104:	f7ff ff0e 	bl	8003f24 <callback_extInt9>
}
 8004108:	e000      	b.n	800410c <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800410a:	bf00      	nop
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40013c00 	.word	0x40013c00

08004114 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8004118:	4b2e      	ldr	r3, [pc, #184]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8004124:	4b2b      	ldr	r3, [pc, #172]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	4a2a      	ldr	r2, [pc, #168]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 800412a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800412e:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8004130:	f7ff ff00 	bl	8003f34 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8004134:	e04b      	b.n	80041ce <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8004136:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800414c:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 800414e:	f7ff fef9 	bl	8003f44 <callback_extInt11>
}
 8004152:	e03c      	b.n	80041ce <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8004154:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8004160:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800416a:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 800416c:	f7ff fef2 	bl	8003f54 <callback_extInt12>
}
 8004170:	e02d      	b.n	80041ce <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8004172:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004184:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004188:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800418a:	f7ff feeb 	bl	8003f64 <callback_extInt13>
}
 800418e:	e01e      	b.n	80041ce <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 80041a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a6:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 80041a8:	f7ff fee4 	bl	8003f74 <callback_extInt14>
}
 80041ac:	e00f      	b.n	80041ce <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <EXTI15_10_IRQHandler+0xc0>)
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c4:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 80041c6:	f7ff fedd 	bl	8003f84 <callback_extInt15>
}
 80041ca:	e000      	b.n	80041ce <EXTI15_10_IRQHandler+0xba>
		__NOP();
 80041cc:	bf00      	nop
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40013c00 	.word	0x40013c00

080041d8 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	4608      	mov	r0, r1
 80041e2:	4611      	mov	r1, r2
 80041e4:	461a      	mov	r2, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	70fb      	strb	r3, [r7, #3]
 80041ea:	460b      	mov	r3, r1
 80041ec:	70bb      	strb	r3, [r7, #2]
 80041ee:	4613      	mov	r3, r2
 80041f0:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	78ba      	ldrb	r2, [r7, #2]
 80041fc:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	787a      	ldrb	r2, [r7, #1]
 8004202:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7c3a      	ldrb	r2, [r7, #16]
 8004208:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	7d3a      	ldrb	r2, [r7, #20]
 800420e:	715a      	strb	r2, [r3, #5]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a88      	ldr	r2, [pc, #544]	; (8004454 <GPIO_Config+0x238>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d106      	bne.n	8004244 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8004236:	4b88      	ldr	r3, [pc, #544]	; (8004458 <GPIO_Config+0x23c>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	4a87      	ldr	r2, [pc, #540]	; (8004458 <GPIO_Config+0x23c>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6313      	str	r3, [r2, #48]	; 0x30
 8004242:	e03a      	b.n	80042ba <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4a84      	ldr	r2, [pc, #528]	; (800445c <GPIO_Config+0x240>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d106      	bne.n	800425c <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 800424e:	4b82      	ldr	r3, [pc, #520]	; (8004458 <GPIO_Config+0x23c>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4a81      	ldr	r2, [pc, #516]	; (8004458 <GPIO_Config+0x23c>)
 8004254:	f043 0302 	orr.w	r3, r3, #2
 8004258:	6313      	str	r3, [r2, #48]	; 0x30
 800425a:	e02e      	b.n	80042ba <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a7f      	ldr	r2, [pc, #508]	; (8004460 <GPIO_Config+0x244>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d106      	bne.n	8004274 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8004266:	4b7c      	ldr	r3, [pc, #496]	; (8004458 <GPIO_Config+0x23c>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	4a7b      	ldr	r2, [pc, #492]	; (8004458 <GPIO_Config+0x23c>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6313      	str	r3, [r2, #48]	; 0x30
 8004272:	e022      	b.n	80042ba <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a7a      	ldr	r2, [pc, #488]	; (8004464 <GPIO_Config+0x248>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d106      	bne.n	800428c <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 800427e:	4b76      	ldr	r3, [pc, #472]	; (8004458 <GPIO_Config+0x23c>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a75      	ldr	r2, [pc, #468]	; (8004458 <GPIO_Config+0x23c>)
 8004284:	f043 0308 	orr.w	r3, r3, #8
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	e016      	b.n	80042ba <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a75      	ldr	r2, [pc, #468]	; (8004468 <GPIO_Config+0x24c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d106      	bne.n	80042a4 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8004296:	4b70      	ldr	r3, [pc, #448]	; (8004458 <GPIO_Config+0x23c>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a6f      	ldr	r2, [pc, #444]	; (8004458 <GPIO_Config+0x23c>)
 800429c:	f043 0310 	orr.w	r3, r3, #16
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	e00a      	b.n	80042ba <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a70      	ldr	r2, [pc, #448]	; (800446c <GPIO_Config+0x250>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d105      	bne.n	80042ba <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 80042ae:	4b6a      	ldr	r3, [pc, #424]	; (8004458 <GPIO_Config+0x23c>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a69      	ldr	r2, [pc, #420]	; (8004458 <GPIO_Config+0x23c>)
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	461a      	mov	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	2103      	movs	r1, #3
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	400a      	ands	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	789b      	ldrb	r3, [r3, #2]
 80042fe:	461a      	mov	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4619      	mov	r1, r3
 8004316:	2301      	movs	r3, #1
 8004318:	408b      	lsls	r3, r1
 800431a:	43db      	mvns	r3, r3
 800431c:	4619      	mov	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	400a      	ands	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	78db      	ldrb	r3, [r3, #3]
 800433a:	461a      	mov	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2103      	movs	r1, #3
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	4619      	mov	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	400a      	ands	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	6899      	ldr	r1, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	791b      	ldrb	r3, [r3, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	2103      	movs	r1, #3
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	4619      	mov	r1, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	400a      	ands	r2, r1
 80043a4:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	785b      	ldrb	r3, [r3, #1]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d143      	bne.n	8004446 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b07      	cmp	r3, #7
 80043c4:	d81f      	bhi.n	8004406 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	210f      	movs	r1, #15
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	fa01 f303 	lsl.w	r3, r1, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	400a      	ands	r2, r1
 80043e6:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	795b      	ldrb	r3, [r3, #5]
 80043f2:	4619      	mov	r1, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	4619      	mov	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	430a      	orrs	r2, r1
 8004402:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8004404:	e01f      	b.n	8004446 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	3b08      	subs	r3, #8
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004416:	210f      	movs	r1, #15
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	43db      	mvns	r3, r3
 8004420:	4619      	mov	r1, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	400a      	ands	r2, r1
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	795b      	ldrb	r3, [r3, #5]
 8004434:	4619      	mov	r1, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	fa01 f303 	lsl.w	r3, r1, r3
 800443c:	4619      	mov	r1, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	430a      	orrs	r2, r1
 8004444:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40020000 	.word	0x40020000
 8004458:	40023800 	.word	0x40023800
 800445c:	40020400 	.word	0x40020400
 8004460:	40020800 	.word	0x40020800
 8004464:	40020c00 	.word	0x40020c00
 8004468:	40021000 	.word	0x40021000
 800446c:	40021c00 	.word	0x40021c00

08004470 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d10d      	bne.n	800449e <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	4619      	mov	r1, r3
 800448e:	2301      	movs	r3, #1
 8004490:	408b      	lsls	r3, r1
 8004492:	4619      	mov	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	430a      	orrs	r2, r1
 800449a:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 800449c:	e00d      	b.n	80044ba <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	3310      	adds	r3, #16
 80044aa:	2101      	movs	r1, #1
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	4619      	mov	r1, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	619a      	str	r2, [r3, #24]
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	4619      	mov	r1, r3
 80044da:	2301      	movs	r3, #1
 80044dc:	408b      	lsls	r3, r1
 80044de:	4619      	mov	r1, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	404a      	eors	r2, r1
 80044e6:	615a      	str	r2, [r3, #20]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 80044fe:	4a39      	ldr	r2, [pc, #228]	; (80045e4 <configPLL+0xf0>)
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	2b31      	cmp	r3, #49	; 0x31
 8004508:	d804      	bhi.n	8004514 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <configPLL+0xf4>)
 800450c:	4a36      	ldr	r2, [pc, #216]	; (80045e8 <configPLL+0xf4>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	6093      	str	r3, [r2, #8]
 8004512:	e005      	b.n	8004520 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004514:	4b34      	ldr	r3, [pc, #208]	; (80045e8 <configPLL+0xf4>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a33      	ldr	r2, [pc, #204]	; (80045e8 <configPLL+0xf4>)
 800451a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800451e:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8004520:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <configPLL+0xf4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a30      	ldr	r2, [pc, #192]	; (80045e8 <configPLL+0xf4>)
 8004526:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800452a:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 800452c:	4b2e      	ldr	r3, [pc, #184]	; (80045e8 <configPLL+0xf4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <configPLL+0xf4>)
 8004532:	f043 0312 	orr.w	r3, r3, #18
 8004536:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8004538:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <configPLL+0xf4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	79fa      	ldrb	r2, [r7, #7]
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	3a0e      	subs	r2, #14
 8004542:	0192      	lsls	r2, r2, #6
 8004544:	4611      	mov	r1, r2
 8004546:	4a28      	ldr	r2, [pc, #160]	; (80045e8 <configPLL+0xf4>)
 8004548:	430b      	orrs	r3, r1
 800454a:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <configPLL+0xf4>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <configPLL+0xf4>)
 8004552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004556:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8004558:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <configPLL+0xf4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a22      	ldr	r2, [pc, #136]	; (80045e8 <configPLL+0xf4>)
 800455e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004562:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004564:	e000      	b.n	8004568 <configPLL+0x74>
	{
		__NOP();
 8004566:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004568:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <configPLL+0xf4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f8      	beq.n	8004566 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	2b5a      	cmp	r3, #90	; 0x5a
 8004578:	d909      	bls.n	800458e <configPLL+0x9a>
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	2b64      	cmp	r3, #100	; 0x64
 800457e:	d806      	bhi.n	800458e <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8004580:	4b1a      	ldr	r3, [pc, #104]	; (80045ec <configPLL+0xf8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a19      	ldr	r2, [pc, #100]	; (80045ec <configPLL+0xf8>)
 8004586:	f043 0303 	orr.w	r3, r3, #3
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	e01d      	b.n	80045ca <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d909      	bls.n	80045a8 <configPLL+0xb4>
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	2b5a      	cmp	r3, #90	; 0x5a
 8004598:	d806      	bhi.n	80045a8 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800459a:	4b14      	ldr	r3, [pc, #80]	; (80045ec <configPLL+0xf8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a13      	ldr	r2, [pc, #76]	; (80045ec <configPLL+0xf8>)
 80045a0:	f043 0302 	orr.w	r3, r3, #2
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e010      	b.n	80045ca <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	2b1e      	cmp	r3, #30
 80045ac:	d909      	bls.n	80045c2 <configPLL+0xce>
 80045ae:	79fb      	ldrb	r3, [r7, #7]
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d806      	bhi.n	80045c2 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <configPLL+0xf8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <configPLL+0xf8>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	e003      	b.n	80045ca <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 80045c2:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <configPLL+0xf8>)
 80045c4:	4a09      	ldr	r2, [pc, #36]	; (80045ec <configPLL+0xf8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <configPLL+0xf4>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4a06      	ldr	r2, [pc, #24]	; (80045e8 <configPLL+0xf4>)
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	6093      	str	r3, [r2, #8]

}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	200004ec 	.word	0x200004ec
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40023c00 	.word	0x40023c00

080045f0 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <getConfigPLL+0x30>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d103      	bne.n	800460e <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8004606:	4b07      	ldr	r3, [pc, #28]	; (8004624 <getConfigPLL+0x34>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	71fb      	strb	r3, [r7, #7]
 800460c:	e001      	b.n	8004612 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 800460e:	2310      	movs	r3, #16
 8004610:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8004612:	79fb      	ldrb	r3, [r7, #7]
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40023800 	.word	0x40023800
 8004624:	200004ec 	.word	0x200004ec

08004628 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 800462e:	f7ff ffdf 	bl	80045f0 <getConfigPLL>
 8004632:	4603      	mov	r3, r0
 8004634:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8004636:	2300      	movs	r3, #0
 8004638:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 800463a:	79bb      	ldrb	r3, [r7, #6]
 800463c:	2b31      	cmp	r3, #49	; 0x31
 800463e:	d802      	bhi.n	8004646 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8004640:	79bb      	ldrb	r3, [r7, #6]
 8004642:	71fb      	strb	r3, [r7, #7]
 8004644:	e002      	b.n	800464c <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8004646:	79bb      	ldrb	r3, [r7, #6]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 800464c:	79fb      	ldrb	r3, [r7, #7]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <configMCO2+0x34>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4a09      	ldr	r2, [pc, #36]	; (800468c <configMCO2+0x34>)
 8004668:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800466c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 800466e:	4b07      	ldr	r3, [pc, #28]	; (800468c <configMCO2+0x34>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	79fa      	ldrb	r2, [r7, #7]
 8004674:	0792      	lsls	r2, r2, #30
 8004676:	4611      	mov	r1, r2
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <configMCO2+0x34>)
 800467a:	430b      	orrs	r3, r1
 800467c:	6093      	str	r3, [r2, #8]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800

08004690 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	3b01      	subs	r3, #1
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d84b      	bhi.n	800473a <configMCO2PRE+0xaa>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <configMCO2PRE+0x18>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046bd 	.word	0x080046bd
 80046ac:	080046d3 	.word	0x080046d3
 80046b0:	080046ed 	.word	0x080046ed
 80046b4:	08004707 	.word	0x08004707
 80046b8:	08004721 	.word	0x08004721
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80046bc:	4b23      	ldr	r3, [pc, #140]	; (800474c <configMCO2PRE+0xbc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4a22      	ldr	r2, [pc, #136]	; (800474c <configMCO2PRE+0xbc>)
 80046c2:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80046c6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 80046c8:	4b20      	ldr	r3, [pc, #128]	; (800474c <configMCO2PRE+0xbc>)
 80046ca:	4a20      	ldr	r2, [pc, #128]	; (800474c <configMCO2PRE+0xbc>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	6093      	str	r3, [r2, #8]
			break;
 80046d0:	e035      	b.n	800473e <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <configMCO2PRE+0xbc>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	4a1d      	ldr	r2, [pc, #116]	; (800474c <configMCO2PRE+0xbc>)
 80046d8:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80046dc:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <configMCO2PRE+0xbc>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	4a1a      	ldr	r2, [pc, #104]	; (800474c <configMCO2PRE+0xbc>)
 80046e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046e8:	6093      	str	r3, [r2, #8]
			break;
 80046ea:	e028      	b.n	800473e <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <configMCO2PRE+0xbc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a16      	ldr	r2, [pc, #88]	; (800474c <configMCO2PRE+0xbc>)
 80046f2:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80046f6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <configMCO2PRE+0xbc>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <configMCO2PRE+0xbc>)
 80046fe:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8004702:	6093      	str	r3, [r2, #8]
			break;
 8004704:	e01b      	b.n	800473e <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <configMCO2PRE+0xbc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	4a10      	ldr	r2, [pc, #64]	; (800474c <configMCO2PRE+0xbc>)
 800470c:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004710:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <configMCO2PRE+0xbc>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	4a0d      	ldr	r2, [pc, #52]	; (800474c <configMCO2PRE+0xbc>)
 8004718:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800471c:	6093      	str	r3, [r2, #8]
			break;
 800471e:	e00e      	b.n	800473e <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <configMCO2PRE+0xbc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <configMCO2PRE+0xbc>)
 8004726:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800472a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 800472c:	4b07      	ldr	r3, [pc, #28]	; (800474c <configMCO2PRE+0xbc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a06      	ldr	r2, [pc, #24]	; (800474c <configMCO2PRE+0xbc>)
 8004732:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004736:	6093      	str	r3, [r2, #8]
			break;
 8004738:	e001      	b.n	800473e <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 800473a:	bf00      	nop
			break;
 800473c:	bf00      	nop
		}
	}

}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800

08004750 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d106      	bne.n	8004770 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004762:	4b81      	ldr	r3, [pc, #516]	; (8004968 <pwm_Config+0x218>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a80      	ldr	r2, [pc, #512]	; (8004968 <pwm_Config+0x218>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	e024      	b.n	80047ba <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4a7d      	ldr	r2, [pc, #500]	; (800496c <pwm_Config+0x21c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d106      	bne.n	8004788 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800477a:	4b7b      	ldr	r3, [pc, #492]	; (8004968 <pwm_Config+0x218>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a7a      	ldr	r2, [pc, #488]	; (8004968 <pwm_Config+0x218>)
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	e018      	b.n	80047ba <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a78      	ldr	r2, [pc, #480]	; (8004970 <pwm_Config+0x220>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d106      	bne.n	80047a0 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004792:	4b75      	ldr	r3, [pc, #468]	; (8004968 <pwm_Config+0x218>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a74      	ldr	r2, [pc, #464]	; (8004968 <pwm_Config+0x218>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
 800479e:	e00c      	b.n	80047ba <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a73      	ldr	r2, [pc, #460]	; (8004974 <pwm_Config+0x224>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d106      	bne.n	80047b8 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80047aa:	4b6f      	ldr	r3, [pc, #444]	; (8004968 <pwm_Config+0x218>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a6e      	ldr	r2, [pc, #440]	; (8004968 <pwm_Config+0x218>)
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	e000      	b.n	80047ba <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 80047b8:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa4c 	bl	8004c58 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	f200 8118 	bhi.w	80049fa <pwm_Config+0x2aa>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <pwm_Config+0x80>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047e1 	.word	0x080047e1
 80047d4:	08004863 	.word	0x08004863
 80047d8:	080048e5 	.word	0x080048e5
 80047dc:	08004979 	.word	0x08004979
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f022 0203 	bic.w	r2, r2, #3
 80047ee:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80047fe:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800480e:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f022 0208 	bic.w	r2, r2, #8
 800481e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f042 0208 	orr.w	r2, r2, #8
 800482e:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	699a      	ldr	r2, [r3, #24]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f042 0204 	orr.w	r2, r2, #4
 800484e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485e:	619a      	str	r2, [r3, #24]

		break;
 8004860:	e0cc      	b.n	80049fc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f022 0203 	bic.w	r2, r2, #3
 8004870:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004880:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004890:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	699a      	ldr	r2, [r3, #24]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b0:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048d0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048e0:	619a      	str	r2, [r3, #24]

		break;
 80048e2:	e08b      	b.n	80049fc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f022 0203 	bic.w	r2, r2, #3
 80048f2:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004902:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004912:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f022 0208 	bic.w	r2, r2, #8
 8004922:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f042 0208 	orr.w	r2, r2, #8
 8004932:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f022 0204 	bic.w	r2, r2, #4
 8004942:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f042 0204 	orr.w	r2, r2, #4
 8004952:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004962:	61da      	str	r2, [r3, #28]

		break;
 8004964:	e04a      	b.n	80049fc <pwm_Config+0x2ac>
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	69da      	ldr	r2, [r3, #28]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004986:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	69da      	ldr	r2, [r3, #28]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004996:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80049a6:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c6:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	69da      	ldr	r2, [r3, #28]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049e6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	69da      	ldr	r2, [r3, #28]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049f6:	61da      	str	r2, [r3, #28]

		break;
 80049f8:	e000      	b.n	80049fc <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 80049fa:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	791b      	ldrb	r3, [r3, #4]
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f896 	bl	8004b34 <statusPolarityPWM>

}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d87f      	bhi.n	8004b24 <statusInOutPWM+0x114>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <statusInOutPWM+0x1c>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a3d 	.word	0x08004a3d
 8004a30:	08004a77 	.word	0x08004a77
 8004a34:	08004ab1 	.word	0x08004ab1
 8004a38:	08004aeb 	.word	0x08004aeb
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d110      	bne.n	8004a64 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8004a62:	e060      	b.n	8004b26 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	6a1a      	ldr	r2, [r3, #32]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	621a      	str	r2, [r3, #32]
		break;
 8004a74:	e057      	b.n	8004b26 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d110      	bne.n	8004a9e <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	6a1a      	ldr	r2, [r3, #32]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f022 0210 	bic.w	r2, r2, #16
 8004a8a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f042 0210 	orr.w	r2, r2, #16
 8004a9a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8004a9c:	e043      	b.n	8004b26 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	6a1a      	ldr	r2, [r3, #32]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f022 0210 	bic.w	r2, r2, #16
 8004aac:	621a      	str	r2, [r3, #32]
		break;
 8004aae:	e03a      	b.n	8004b26 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d110      	bne.n	8004ad8 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	6a1a      	ldr	r2, [r3, #32]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ac4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad4:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8004ad6:	e026      	b.n	8004b26 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	6a1a      	ldr	r2, [r3, #32]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ae6:	621a      	str	r2, [r3, #32]
		break;
 8004ae8:	e01d      	b.n	8004b26 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d110      	bne.n	8004b12 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004afe:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	6a1a      	ldr	r2, [r3, #32]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b0e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8004b10:	e009      	b.n	8004b26 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	6a1a      	ldr	r2, [r3, #32]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b20:	621a      	str	r2, [r3, #32]
		break;
 8004b22:	e000      	b.n	8004b26 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8004b24:	bf00      	nop
	}
	}
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop

08004b34 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d87f      	bhi.n	8004c48 <statusPolarityPWM+0x114>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <statusPolarityPWM+0x1c>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b9b 	.word	0x08004b9b
 8004b58:	08004bd5 	.word	0x08004bd5
 8004b5c:	08004c0f 	.word	0x08004c0f
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d110      	bne.n	8004b88 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f022 0202 	bic.w	r2, r2, #2
 8004b74:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f042 0202 	orr.w	r2, r2, #2
 8004b84:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8004b86:	e060      	b.n	8004c4a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f022 0202 	bic.w	r2, r2, #2
 8004b96:	621a      	str	r2, [r3, #32]
		break;
 8004b98:	e057      	b.n	8004c4a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d110      	bne.n	8004bc2 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f022 0220 	bic.w	r2, r2, #32
 8004bae:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	6a1a      	ldr	r2, [r3, #32]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f042 0220 	orr.w	r2, r2, #32
 8004bbe:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8004bc0:	e043      	b.n	8004c4a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	6a1a      	ldr	r2, [r3, #32]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f022 0220 	bic.w	r2, r2, #32
 8004bd0:	621a      	str	r2, [r3, #32]
		break;
 8004bd2:	e03a      	b.n	8004c4a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d110      	bne.n	8004bfc <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004be8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf8:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8004bfa:	e026      	b.n	8004c4a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	6a1a      	ldr	r2, [r3, #32]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c0a:	621a      	str	r2, [r3, #32]
		break;
 8004c0c:	e01d      	b.n	8004c4a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d110      	bne.n	8004c36 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c22:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	6a1a      	ldr	r2, [r3, #32]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c32:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8004c34:	e009      	b.n	8004c4a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c44:	621a      	str	r2, [r3, #32]
		break;
 8004c46:	e000      	b.n	8004c4a <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8004c48:	bf00      	nop
	}
	}

}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop

08004c58 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d823      	bhi.n	8004cb0 <setDuttyCycle+0x58>
 8004c68:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <setDuttyCycle+0x18>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c81 	.word	0x08004c81
 8004c74:	08004c8d 	.word	0x08004c8d
 8004c78:	08004c99 	.word	0x08004c99
 8004c7c:	08004ca5 	.word	0x08004ca5
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	885a      	ldrh	r2, [r3, #2]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8004c8a:	e012      	b.n	8004cb2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	885a      	ldrh	r2, [r3, #2]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004c96:	e00c      	b.n	8004cb2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	885a      	ldrh	r2, [r3, #2]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8004ca2:	e006      	b.n	8004cb2 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	885a      	ldrh	r2, [r3, #2]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8004cae:	e000      	b.n	8004cb2 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8004cb0:	bf00      	nop
	}
	}

}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop

08004cc0 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <updateDuttyCyclePercentageFloat+0x48>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ce4:	edd7 7a00 	vldr	s15, [r7]
 8004ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf0:	ee17 3a90 	vmov	r3, s15
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ffac 	bl	8004c58 <setDuttyCycle>
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	51eb851f 	.word	0x51eb851f

08004d0c <__NVIC_EnableIRQ>:
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	db0b      	blt.n	8004d36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	f003 021f 	and.w	r2, r3, #31
 8004d24:	4907      	ldr	r1, [pc, #28]	; (8004d44 <__NVIC_EnableIRQ+0x38>)
 8004d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	e000e100 	.word	0xe000e100

08004d48 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a8f      	ldr	r2, [pc, #572]	; (8004f94 <USART_Config+0x24c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d107      	bne.n	8004d6a <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8004d5a:	4b8f      	ldr	r3, [pc, #572]	; (8004f98 <USART_Config+0x250>)
 8004d5c:	2210      	movs	r2, #16
 8004d5e:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	4a8d      	ldr	r2, [pc, #564]	; (8004f9c <USART_Config+0x254>)
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e019      	b.n	8004d9e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4a8c      	ldr	r2, [pc, #560]	; (8004fa0 <USART_Config+0x258>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d108      	bne.n	8004d86 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8004d74:	4b88      	ldr	r3, [pc, #544]	; (8004f98 <USART_Config+0x250>)
 8004d76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a88      	ldr	r2, [pc, #544]	; (8004fa4 <USART_Config+0x25c>)
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e00b      	b.n	8004d9e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	4a87      	ldr	r2, [pc, #540]	; (8004fa8 <USART_Config+0x260>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d106      	bne.n	8004d9e <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004d90:	4b81      	ldr	r3, [pc, #516]	; (8004f98 <USART_Config+0x250>)
 8004d92:	2220      	movs	r2, #32
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	4a84      	ldr	r2, [pc, #528]	; (8004fac <USART_Config+0x264>)
 8004d9c:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2200      	movs	r2, #0
 8004dac:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	789b      	ldrb	r3, [r3, #2]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d03d      	beq.n	8004e32 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd4:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004de4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004df4:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	789b      	ldrb	r3, [r3, #2]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d110      	bne.n	8004e20 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e0c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	e018      	b.n	8004e52 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	e00f      	b.n	8004e52 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e40:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e50:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	78db      	ldrb	r3, [r3, #3]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d84c      	bhi.n	8004ef4 <USART_Config+0x1ac>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <USART_Config+0x118>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e8f 	.word	0x08004e8f
 8004e68:	08004eb1 	.word	0x08004eb1
 8004e6c:	08004ed3 	.word	0x08004ed3
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004e7e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	6912      	ldr	r2, [r2, #16]
 8004e8a:	611a      	str	r2, [r3, #16]
		break;
 8004e8c:	e041      	b.n	8004f12 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004e9c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eac:	611a      	str	r2, [r3, #16]
		break;
 8004eae:	e030      	b.n	8004f12 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ebe:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ece:	611a      	str	r2, [r3, #16]
		break;
 8004ed0:	e01f      	b.n	8004f12 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ee0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004ef0:	611a      	str	r2, [r3, #16]
		break;
 8004ef2:	e00e      	b.n	8004f12 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004f02:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	6912      	ldr	r2, [r2, #16]
 8004f0e:	611a      	str	r2, [r3, #16]
		break;
 8004f10:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <USART_Config+0x258>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d104      	bne.n	8004f2a <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004f20:	f7ff fb82 	bl	8004628 <getClockAPB1>
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e003      	b.n	8004f32 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8004f2a:	f7ff fb61 	bl	80045f0 <getConfigPLL>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	785b      	ldrb	r3, [r3, #1]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f91f 	bl	8005184 <getValueBaudRate>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	e02f      	b.n	8004fb2 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10b      	bne.n	8004f72 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 f90f 	bl	8005184 <getValueBaudRate>
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	e01f      	b.n	8004fb2 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d11a      	bne.n	8004fb0 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f8ff 	bl	8005184 <getValueBaudRate>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	609a      	str	r2, [r3, #8]
 8004f90:	e00f      	b.n	8004fb2 <USART_Config+0x26a>
 8004f92:	bf00      	nop
 8004f94:	40011000 	.word	0x40011000
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	200004f0 	.word	0x200004f0
 8004fa0:	40004400 	.word	0x40004400
 8004fa4:	200004f4 	.word	0x200004f4
 8004fa8:	40011400 	.word	0x40011400
 8004fac:	200004f8 	.word	0x200004f8
	}
	else
	{
		__NOP();
 8004fb0:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d866      	bhi.n	8005088 <USART_Config+0x340>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <USART_Config+0x278>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004ff3 	.word	0x08004ff3
 8004fc8:	08005015 	.word	0x08005015
 8004fcc:	08005057 	.word	0x08005057
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f022 0208 	bic.w	r2, r2, #8
 8004fde:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f042 0208 	orr.w	r2, r2, #8
 8004fee:	60da      	str	r2, [r3, #12]

		break;
 8004ff0:	e063      	b.n	80050ba <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f022 0204 	bic.w	r2, r2, #4
 8005000:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f042 0204 	orr.w	r2, r2, #4
 8005010:	60da      	str	r2, [r3, #12]

		break;
 8005012:	e052      	b.n	80050ba <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f022 0208 	bic.w	r2, r2, #8
 8005022:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f042 0208 	orr.w	r2, r2, #8
 8005032:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f022 0204 	bic.w	r2, r2, #4
 8005042:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f042 0204 	orr.w	r2, r2, #4
 8005052:	60da      	str	r2, [r3, #12]


		break;
 8005054:	e031      	b.n	80050ba <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005064:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f022 0208 	bic.w	r2, r2, #8
 8005074:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f022 0204 	bic.w	r2, r2, #4
 8005084:	60da      	str	r2, [r3, #12]
		break;
 8005086:	e018      	b.n	80050ba <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005096:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f022 0208 	bic.w	r2, r2, #8
 80050a6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f022 0204 	bic.w	r2, r2, #4
 80050b6:	60da      	str	r2, [r3, #12]
		break;
 80050b8:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80050ba:	b672      	cpsid	i
}
 80050bc:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	791b      	ldrb	r3, [r3, #4]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d110      	bne.n	80050e8 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f022 0220 	bic.w	r2, r2, #32
 80050d4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f042 0220 	orr.w	r2, r2, #32
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	e007      	b.n	80050f8 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f022 0220 	bic.w	r2, r2, #32
 80050f6:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	791b      	ldrb	r3, [r3, #4]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d003      	beq.n	8005108 <USART_Config+0x3c0>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	795b      	ldrb	r3, [r3, #5]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d11a      	bne.n	800513e <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <USART_Config+0x430>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d103      	bne.n	800511a <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8005112:	2025      	movs	r0, #37	; 0x25
 8005114:	f7ff fdfa 	bl	8004d0c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005118:	e013      	b.n	8005142 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4a17      	ldr	r2, [pc, #92]	; (800517c <USART_Config+0x434>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d103      	bne.n	800512c <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8005124:	2026      	movs	r0, #38	; 0x26
 8005126:	f7ff fdf1 	bl	8004d0c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800512a:	e00a      	b.n	8005142 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <USART_Config+0x438>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d105      	bne.n	8005142 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8005136:	2047      	movs	r0, #71	; 0x47
 8005138:	f7ff fde8 	bl	8004d0c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800513c:	e001      	b.n	8005142 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005142:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8005144:	b662      	cpsie	i
}
 8005146:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d00f      	beq.n	8005170 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800515e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800516e:	60da      	str	r2, [r3, #12]
	}
}
 8005170:	bf00      	nop
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40011000 	.word	0x40011000
 800517c:	40004400 	.word	0x40004400
 8005180:	40011400 	.word	0x40011400

08005184 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8005184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	6039      	str	r1, [r7, #0]
 800518e:	4601      	mov	r1, r0
 8005190:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8005192:	79f9      	ldrb	r1, [r7, #7]
 8005194:	2000      	movs	r0, #0
 8005196:	460a      	mov	r2, r1
 8005198:	4603      	mov	r3, r0
 800519a:	491f      	ldr	r1, [pc, #124]	; (8005218 <getValueBaudRate+0x94>)
 800519c:	fb01 f003 	mul.w	r0, r1, r3
 80051a0:	2102      	movs	r1, #2
 80051a2:	fb02 f101 	mul.w	r1, r2, r1
 80051a6:	4401      	add	r1, r0
 80051a8:	481b      	ldr	r0, [pc, #108]	; (8005218 <getValueBaudRate+0x94>)
 80051aa:	fba2 4500 	umull	r4, r5, r2, r0
 80051ae:	194b      	adds	r3, r1, r5
 80051b0:	461d      	mov	r5, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	2200      	movs	r2, #0
 80051b8:	4698      	mov	r8, r3
 80051ba:	4691      	mov	r9, r2
 80051bc:	4642      	mov	r2, r8
 80051be:	464b      	mov	r3, r9
 80051c0:	4620      	mov	r0, r4
 80051c2:	4629      	mov	r1, r5
 80051c4:	f7fb fd78 	bl	8000cb8 <__aeabi_ldivmod>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4613      	mov	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	4a12      	ldr	r2, [pc, #72]	; (800521c <getValueBaudRate+0x98>)
 80051d4:	fba2 2303 	umull	r2, r3, r2, r3
 80051d8:	0b5b      	lsrs	r3, r3, #13
 80051da:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f242 7210 	movw	r2, #10000	; 0x2710
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80051f2:	4a0a      	ldr	r2, [pc, #40]	; (800521c <getValueBaudRate+0x98>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	0a5b      	lsrs	r3, r3, #9
 80051fa:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	b29a      	uxth	r2, r3
 8005204:	7afb      	ldrb	r3, [r7, #11]
 8005206:	b29b      	uxth	r3, r3
 8005208:	4313      	orrs	r3, r2
 800520a:	813b      	strh	r3, [r7, #8]

    return value;
 800520c:	893b      	ldrh	r3, [r7, #8]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005218:	540be400 	.word	0x540be400
 800521c:	d1b71759 	.word	0xd1b71759

08005220 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 800522a:	4b16      	ldr	r3, [pc, #88]	; (8005284 <writeMsgForTXE+0x64>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d111      	bne.n	8005256 <writeMsgForTXE+0x36>
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <writeMsgForTXE+0x68>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10d      	bne.n	8005256 <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	4813      	ldr	r0, [pc, #76]	; (800528c <writeMsgForTXE+0x6c>)
 800523e:	f001 f8a9 	bl	8006394 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <writeMsgForTXE+0x70>)
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2101      	movs	r1, #1
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f830 	bl	80052b4 <interruptionTX>
 8005254:	e012      	b.n	800527c <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8005256:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <writeMsgForTXE+0x74>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	2364      	movs	r3, #100	; 0x64
 800525e:	fb02 f303 	mul.w	r3, r2, r3
 8005262:	4a0d      	ldr	r2, [pc, #52]	; (8005298 <writeMsgForTXE+0x78>)
 8005264:	4413      	add	r3, r2
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	4618      	mov	r0, r3
 800526a:	f001 f893 	bl	8006394 <siprintf>
		inLine++;
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <writeMsgForTXE+0x74>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	3301      	adds	r3, #1
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <writeMsgForTXE+0x74>)
 8005278:	701a      	strb	r2, [r3, #0]
	}
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	20000d36 	.word	0x20000d36
 8005288:	20000d35 	.word	0x20000d35
 800528c:	20000500 	.word	0x20000500
 8005290:	20000d37 	.word	0x20000d37
 8005294:	20000d34 	.word	0x20000d34
 8005298:	20000564 	.word	0x20000564

0800529c <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
	return auxRxData;
 80052a0:	4b03      	ldr	r3, [pc, #12]	; (80052b0 <getRxData+0x14>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	200004fc 	.word	0x200004fc

080052b4 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10c      	bne.n	80052e0 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 80052de:	e005      	b.n	80052ec <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
	__NOP();
 80052fc:	bf00      	nop
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
	__NOP();
 800530c:	bf00      	nop
}
 800530e:	bf00      	nop
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 800531c:	4b37      	ldr	r3, [pc, #220]	; (80053fc <USART1_IRQHandler+0xe4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800532a:	4b34      	ldr	r3, [pc, #208]	; (80053fc <USART1_IRQHandler+0xe4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b33      	ldr	r3, [pc, #204]	; (8005400 <USART1_IRQHandler+0xe8>)
 8005334:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8005336:	f7ff ffdf 	bl	80052f8 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 800533a:	e05d      	b.n	80053f8 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 800533c:	4b2f      	ldr	r3, [pc, #188]	; (80053fc <USART1_IRQHandler+0xe4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d055      	beq.n	80053f6 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800534a:	4b2e      	ldr	r3, [pc, #184]	; (8005404 <USART1_IRQHandler+0xec>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10b      	bne.n	800536a <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8005352:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <USART1_IRQHandler+0xf0>)
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	4b29      	ldr	r3, [pc, #164]	; (80053fc <USART1_IRQHandler+0xe4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800535c:	4b27      	ldr	r3, [pc, #156]	; (80053fc <USART1_IRQHandler+0xe4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff ffa6 	bl	80052b4 <interruptionTX>
}
 8005368:	e046      	b.n	80053f8 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800536a:	4b26      	ldr	r3, [pc, #152]	; (8005404 <USART1_IRQHandler+0xec>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d142      	bne.n	80053f8 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005372:	4b26      	ldr	r3, [pc, #152]	; (800540c <USART1_IRQHandler+0xf4>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	4b25      	ldr	r3, [pc, #148]	; (8005410 <USART1_IRQHandler+0xf8>)
 800537a:	5c9b      	ldrb	r3, [r3, r2]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00e      	beq.n	800539e <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8005380:	4b22      	ldr	r3, [pc, #136]	; (800540c <USART1_IRQHandler+0xf4>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	4b22      	ldr	r3, [pc, #136]	; (8005410 <USART1_IRQHandler+0xf8>)
 8005388:	5c9a      	ldrb	r2, [r3, r2]
 800538a:	4b1c      	ldr	r3, [pc, #112]	; (80053fc <USART1_IRQHandler+0xe4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	605a      	str	r2, [r3, #4]
				posChar++;
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <USART1_IRQHandler+0xf4>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	b2da      	uxtb	r2, r3
 8005398:	4b1c      	ldr	r3, [pc, #112]	; (800540c <USART1_IRQHandler+0xf4>)
 800539a:	701a      	strb	r2, [r3, #0]
}
 800539c:	e02c      	b.n	80053f8 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800539e:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <USART1_IRQHandler+0xfc>)
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <USART1_IRQHandler+0x100>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d215      	bcs.n	80053d6 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80053aa:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <USART1_IRQHandler+0xfc>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	2364      	movs	r3, #100	; 0x64
 80053b2:	fb02 f303 	mul.w	r3, r2, r3
 80053b6:	4a19      	ldr	r2, [pc, #100]	; (800541c <USART1_IRQHandler+0x104>)
 80053b8:	4413      	add	r3, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	4814      	ldr	r0, [pc, #80]	; (8005410 <USART1_IRQHandler+0xf8>)
 80053be:	f000 ffe9 	bl	8006394 <siprintf>
					posChar = 0;
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <USART1_IRQHandler+0xf4>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80053c8:	4b12      	ldr	r3, [pc, #72]	; (8005414 <USART1_IRQHandler+0xfc>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	4b10      	ldr	r3, [pc, #64]	; (8005414 <USART1_IRQHandler+0xfc>)
 80053d2:	701a      	strb	r2, [r3, #0]
}
 80053d4:	e010      	b.n	80053f8 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <USART1_IRQHandler+0xe4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ff69 	bl	80052b4 <interruptionTX>
					posChar = 0;
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <USART1_IRQHandler+0xf4>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <USART1_IRQHandler+0xfc>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <USART1_IRQHandler+0x100>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
}
 80053f4:	e000      	b.n	80053f8 <USART1_IRQHandler+0xe0>
		__NOP();
 80053f6:	bf00      	nop
}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	200004f0 	.word	0x200004f0
 8005400:	200004fc 	.word	0x200004fc
 8005404:	20000d37 	.word	0x20000d37
 8005408:	200004fd 	.word	0x200004fd
 800540c:	20000d36 	.word	0x20000d36
 8005410:	20000500 	.word	0x20000500
 8005414:	20000d35 	.word	0x20000d35
 8005418:	20000d34 	.word	0x20000d34
 800541c:	20000564 	.word	0x20000564

08005420 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8005424:	4b37      	ldr	r3, [pc, #220]	; (8005504 <USART2_IRQHandler+0xe4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8005432:	4b34      	ldr	r3, [pc, #208]	; (8005504 <USART2_IRQHandler+0xe4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	b2da      	uxtb	r2, r3
 800543a:	4b33      	ldr	r3, [pc, #204]	; (8005508 <USART2_IRQHandler+0xe8>)
 800543c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 800543e:	f7fc fd19 	bl	8001e74 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8005442:	e05d      	b.n	8005500 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8005444:	4b2f      	ldr	r3, [pc, #188]	; (8005504 <USART2_IRQHandler+0xe4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d055      	beq.n	80054fe <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005452:	4b2e      	ldr	r3, [pc, #184]	; (800550c <USART2_IRQHandler+0xec>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800545a:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <USART2_IRQHandler+0xf0>)
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	4b29      	ldr	r3, [pc, #164]	; (8005504 <USART2_IRQHandler+0xe4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005464:	4b27      	ldr	r3, [pc, #156]	; (8005504 <USART2_IRQHandler+0xe4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ff22 	bl	80052b4 <interruptionTX>
}
 8005470:	e046      	b.n	8005500 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8005472:	4b26      	ldr	r3, [pc, #152]	; (800550c <USART2_IRQHandler+0xec>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d142      	bne.n	8005500 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800547a:	4b26      	ldr	r3, [pc, #152]	; (8005514 <USART2_IRQHandler+0xf4>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	4b25      	ldr	r3, [pc, #148]	; (8005518 <USART2_IRQHandler+0xf8>)
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00e      	beq.n	80054a6 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <USART2_IRQHandler+0xf4>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	4b22      	ldr	r3, [pc, #136]	; (8005518 <USART2_IRQHandler+0xf8>)
 8005490:	5c9a      	ldrb	r2, [r3, r2]
 8005492:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <USART2_IRQHandler+0xe4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	605a      	str	r2, [r3, #4]
				posChar++;
 8005498:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <USART2_IRQHandler+0xf4>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <USART2_IRQHandler+0xf4>)
 80054a2:	701a      	strb	r2, [r3, #0]
}
 80054a4:	e02c      	b.n	8005500 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80054a6:	4b1d      	ldr	r3, [pc, #116]	; (800551c <USART2_IRQHandler+0xfc>)
 80054a8:	781a      	ldrb	r2, [r3, #0]
 80054aa:	4b1d      	ldr	r3, [pc, #116]	; (8005520 <USART2_IRQHandler+0x100>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d215      	bcs.n	80054de <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80054b2:	4b1a      	ldr	r3, [pc, #104]	; (800551c <USART2_IRQHandler+0xfc>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	2364      	movs	r3, #100	; 0x64
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	4a19      	ldr	r2, [pc, #100]	; (8005524 <USART2_IRQHandler+0x104>)
 80054c0:	4413      	add	r3, r2
 80054c2:	4619      	mov	r1, r3
 80054c4:	4814      	ldr	r0, [pc, #80]	; (8005518 <USART2_IRQHandler+0xf8>)
 80054c6:	f000 ff65 	bl	8006394 <siprintf>
					posChar = 0;
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <USART2_IRQHandler+0xf4>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80054d0:	4b12      	ldr	r3, [pc, #72]	; (800551c <USART2_IRQHandler+0xfc>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	4b10      	ldr	r3, [pc, #64]	; (800551c <USART2_IRQHandler+0xfc>)
 80054da:	701a      	strb	r2, [r3, #0]
}
 80054dc:	e010      	b.n	8005500 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80054de:	4b09      	ldr	r3, [pc, #36]	; (8005504 <USART2_IRQHandler+0xe4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fee5 	bl	80052b4 <interruptionTX>
					posChar = 0;
 80054ea:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <USART2_IRQHandler+0xf4>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <USART2_IRQHandler+0xfc>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <USART2_IRQHandler+0x100>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
}
 80054fc:	e000      	b.n	8005500 <USART2_IRQHandler+0xe0>
		__NOP();
 80054fe:	bf00      	nop
}
 8005500:	bf00      	nop
 8005502:	bd80      	pop	{r7, pc}
 8005504:	200004f4 	.word	0x200004f4
 8005508:	200004fc 	.word	0x200004fc
 800550c:	20000d37 	.word	0x20000d37
 8005510:	200004fd 	.word	0x200004fd
 8005514:	20000d36 	.word	0x20000d36
 8005518:	20000500 	.word	0x20000500
 800551c:	20000d35 	.word	0x20000d35
 8005520:	20000d34 	.word	0x20000d34
 8005524:	20000564 	.word	0x20000564

08005528 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800552c:	4b37      	ldr	r3, [pc, #220]	; (800560c <USART6_IRQHandler+0xe4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800553a:	4b34      	ldr	r3, [pc, #208]	; (800560c <USART6_IRQHandler+0xe4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4b33      	ldr	r3, [pc, #204]	; (8005610 <USART6_IRQHandler+0xe8>)
 8005544:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8005546:	f7ff fedf 	bl	8005308 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800554a:	e05d      	b.n	8005608 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 800554c:	4b2f      	ldr	r3, [pc, #188]	; (800560c <USART6_IRQHandler+0xe4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b00      	cmp	r3, #0
 8005558:	d055      	beq.n	8005606 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800555a:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <USART6_IRQHandler+0xec>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8005562:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <USART6_IRQHandler+0xf0>)
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <USART6_IRQHandler+0xe4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <USART6_IRQHandler+0xe4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2100      	movs	r1, #0
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fe9e 	bl	80052b4 <interruptionTX>
}
 8005578:	e046      	b.n	8005608 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800557a:	4b26      	ldr	r3, [pc, #152]	; (8005614 <USART6_IRQHandler+0xec>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d142      	bne.n	8005608 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005582:	4b26      	ldr	r3, [pc, #152]	; (800561c <USART6_IRQHandler+0xf4>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	4b25      	ldr	r3, [pc, #148]	; (8005620 <USART6_IRQHandler+0xf8>)
 800558a:	5c9b      	ldrb	r3, [r3, r2]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00e      	beq.n	80055ae <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8005590:	4b22      	ldr	r3, [pc, #136]	; (800561c <USART6_IRQHandler+0xf4>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	4b22      	ldr	r3, [pc, #136]	; (8005620 <USART6_IRQHandler+0xf8>)
 8005598:	5c9a      	ldrb	r2, [r3, r2]
 800559a:	4b1c      	ldr	r3, [pc, #112]	; (800560c <USART6_IRQHandler+0xe4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	605a      	str	r2, [r3, #4]
				posChar++;
 80055a0:	4b1e      	ldr	r3, [pc, #120]	; (800561c <USART6_IRQHandler+0xf4>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	4b1c      	ldr	r3, [pc, #112]	; (800561c <USART6_IRQHandler+0xf4>)
 80055aa:	701a      	strb	r2, [r3, #0]
}
 80055ac:	e02c      	b.n	8005608 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80055ae:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <USART6_IRQHandler+0xfc>)
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <USART6_IRQHandler+0x100>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d215      	bcs.n	80055e6 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80055ba:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <USART6_IRQHandler+0xfc>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	2364      	movs	r3, #100	; 0x64
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	4a19      	ldr	r2, [pc, #100]	; (800562c <USART6_IRQHandler+0x104>)
 80055c8:	4413      	add	r3, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	4814      	ldr	r0, [pc, #80]	; (8005620 <USART6_IRQHandler+0xf8>)
 80055ce:	f000 fee1 	bl	8006394 <siprintf>
					posChar = 0;
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <USART6_IRQHandler+0xf4>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80055d8:	4b12      	ldr	r3, [pc, #72]	; (8005624 <USART6_IRQHandler+0xfc>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <USART6_IRQHandler+0xfc>)
 80055e2:	701a      	strb	r2, [r3, #0]
}
 80055e4:	e010      	b.n	8005608 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80055e6:	4b09      	ldr	r3, [pc, #36]	; (800560c <USART6_IRQHandler+0xe4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2100      	movs	r1, #0
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fe61 	bl	80052b4 <interruptionTX>
					posChar = 0;
 80055f2:	4b0a      	ldr	r3, [pc, #40]	; (800561c <USART6_IRQHandler+0xf4>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <USART6_IRQHandler+0xfc>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <USART6_IRQHandler+0x100>)
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
}
 8005604:	e000      	b.n	8005608 <USART6_IRQHandler+0xe0>
		__NOP();
 8005606:	bf00      	nop
}
 8005608:	bf00      	nop
 800560a:	bd80      	pop	{r7, pc}
 800560c:	200004f8 	.word	0x200004f8
 8005610:	200004fc 	.word	0x200004fc
 8005614:	20000d37 	.word	0x20000d37
 8005618:	200004fd 	.word	0x200004fd
 800561c:	20000d36 	.word	0x20000d36
 8005620:	20000500 	.word	0x20000500
 8005624:	20000d35 	.word	0x20000d35
 8005628:	20000d34 	.word	0x20000d34
 800562c:	20000564 	.word	0x20000564

08005630 <__errno>:
 8005630:	4b01      	ldr	r3, [pc, #4]	; (8005638 <__errno+0x8>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000018 	.word	0x20000018

0800563c <__libc_init_array>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4d0d      	ldr	r5, [pc, #52]	; (8005674 <__libc_init_array+0x38>)
 8005640:	4c0d      	ldr	r4, [pc, #52]	; (8005678 <__libc_init_array+0x3c>)
 8005642:	1b64      	subs	r4, r4, r5
 8005644:	10a4      	asrs	r4, r4, #2
 8005646:	2600      	movs	r6, #0
 8005648:	42a6      	cmp	r6, r4
 800564a:	d109      	bne.n	8005660 <__libc_init_array+0x24>
 800564c:	4d0b      	ldr	r5, [pc, #44]	; (800567c <__libc_init_array+0x40>)
 800564e:	4c0c      	ldr	r4, [pc, #48]	; (8005680 <__libc_init_array+0x44>)
 8005650:	f006 fde0 	bl	800c214 <_init>
 8005654:	1b64      	subs	r4, r4, r5
 8005656:	10a4      	asrs	r4, r4, #2
 8005658:	2600      	movs	r6, #0
 800565a:	42a6      	cmp	r6, r4
 800565c:	d105      	bne.n	800566a <__libc_init_array+0x2e>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	f855 3b04 	ldr.w	r3, [r5], #4
 8005664:	4798      	blx	r3
 8005666:	3601      	adds	r6, #1
 8005668:	e7ee      	b.n	8005648 <__libc_init_array+0xc>
 800566a:	f855 3b04 	ldr.w	r3, [r5], #4
 800566e:	4798      	blx	r3
 8005670:	3601      	adds	r6, #1
 8005672:	e7f2      	b.n	800565a <__libc_init_array+0x1e>
 8005674:	0800ccf8 	.word	0x0800ccf8
 8005678:	0800ccf8 	.word	0x0800ccf8
 800567c:	0800ccf8 	.word	0x0800ccf8
 8005680:	0800ccfc 	.word	0x0800ccfc

08005684 <memset>:
 8005684:	4402      	add	r2, r0
 8005686:	4603      	mov	r3, r0
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	f803 1b01 	strb.w	r1, [r3], #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <__cvt>:
 8005694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	ec55 4b10 	vmov	r4, r5, d0
 800569c:	2d00      	cmp	r5, #0
 800569e:	460e      	mov	r6, r1
 80056a0:	4619      	mov	r1, r3
 80056a2:	462b      	mov	r3, r5
 80056a4:	bfbb      	ittet	lt
 80056a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056aa:	461d      	movlt	r5, r3
 80056ac:	2300      	movge	r3, #0
 80056ae:	232d      	movlt	r3, #45	; 0x2d
 80056b0:	700b      	strb	r3, [r1, #0]
 80056b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056b8:	4691      	mov	r9, r2
 80056ba:	f023 0820 	bic.w	r8, r3, #32
 80056be:	bfbc      	itt	lt
 80056c0:	4622      	movlt	r2, r4
 80056c2:	4614      	movlt	r4, r2
 80056c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056c8:	d005      	beq.n	80056d6 <__cvt+0x42>
 80056ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056ce:	d100      	bne.n	80056d2 <__cvt+0x3e>
 80056d0:	3601      	adds	r6, #1
 80056d2:	2102      	movs	r1, #2
 80056d4:	e000      	b.n	80056d8 <__cvt+0x44>
 80056d6:	2103      	movs	r1, #3
 80056d8:	ab03      	add	r3, sp, #12
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	ab02      	add	r3, sp, #8
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	ec45 4b10 	vmov	d0, r4, r5
 80056e4:	4653      	mov	r3, sl
 80056e6:	4632      	mov	r2, r6
 80056e8:	f001 fe42 	bl	8007370 <_dtoa_r>
 80056ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056f0:	4607      	mov	r7, r0
 80056f2:	d102      	bne.n	80056fa <__cvt+0x66>
 80056f4:	f019 0f01 	tst.w	r9, #1
 80056f8:	d022      	beq.n	8005740 <__cvt+0xac>
 80056fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056fe:	eb07 0906 	add.w	r9, r7, r6
 8005702:	d110      	bne.n	8005726 <__cvt+0x92>
 8005704:	783b      	ldrb	r3, [r7, #0]
 8005706:	2b30      	cmp	r3, #48	; 0x30
 8005708:	d10a      	bne.n	8005720 <__cvt+0x8c>
 800570a:	2200      	movs	r2, #0
 800570c:	2300      	movs	r3, #0
 800570e:	4620      	mov	r0, r4
 8005710:	4629      	mov	r1, r5
 8005712:	f7fb f9f1 	bl	8000af8 <__aeabi_dcmpeq>
 8005716:	b918      	cbnz	r0, 8005720 <__cvt+0x8c>
 8005718:	f1c6 0601 	rsb	r6, r6, #1
 800571c:	f8ca 6000 	str.w	r6, [sl]
 8005720:	f8da 3000 	ldr.w	r3, [sl]
 8005724:	4499      	add	r9, r3
 8005726:	2200      	movs	r2, #0
 8005728:	2300      	movs	r3, #0
 800572a:	4620      	mov	r0, r4
 800572c:	4629      	mov	r1, r5
 800572e:	f7fb f9e3 	bl	8000af8 <__aeabi_dcmpeq>
 8005732:	b108      	cbz	r0, 8005738 <__cvt+0xa4>
 8005734:	f8cd 900c 	str.w	r9, [sp, #12]
 8005738:	2230      	movs	r2, #48	; 0x30
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	454b      	cmp	r3, r9
 800573e:	d307      	bcc.n	8005750 <__cvt+0xbc>
 8005740:	9b03      	ldr	r3, [sp, #12]
 8005742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005744:	1bdb      	subs	r3, r3, r7
 8005746:	4638      	mov	r0, r7
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	b004      	add	sp, #16
 800574c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005750:	1c59      	adds	r1, r3, #1
 8005752:	9103      	str	r1, [sp, #12]
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e7f0      	b.n	800573a <__cvt+0xa6>

08005758 <__exponent>:
 8005758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800575a:	4603      	mov	r3, r0
 800575c:	2900      	cmp	r1, #0
 800575e:	bfb8      	it	lt
 8005760:	4249      	neglt	r1, r1
 8005762:	f803 2b02 	strb.w	r2, [r3], #2
 8005766:	bfb4      	ite	lt
 8005768:	222d      	movlt	r2, #45	; 0x2d
 800576a:	222b      	movge	r2, #43	; 0x2b
 800576c:	2909      	cmp	r1, #9
 800576e:	7042      	strb	r2, [r0, #1]
 8005770:	dd2a      	ble.n	80057c8 <__exponent+0x70>
 8005772:	f10d 0407 	add.w	r4, sp, #7
 8005776:	46a4      	mov	ip, r4
 8005778:	270a      	movs	r7, #10
 800577a:	46a6      	mov	lr, r4
 800577c:	460a      	mov	r2, r1
 800577e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005782:	fb07 1516 	mls	r5, r7, r6, r1
 8005786:	3530      	adds	r5, #48	; 0x30
 8005788:	2a63      	cmp	r2, #99	; 0x63
 800578a:	f104 34ff 	add.w	r4, r4, #4294967295
 800578e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005792:	4631      	mov	r1, r6
 8005794:	dcf1      	bgt.n	800577a <__exponent+0x22>
 8005796:	3130      	adds	r1, #48	; 0x30
 8005798:	f1ae 0502 	sub.w	r5, lr, #2
 800579c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057a0:	1c44      	adds	r4, r0, #1
 80057a2:	4629      	mov	r1, r5
 80057a4:	4561      	cmp	r1, ip
 80057a6:	d30a      	bcc.n	80057be <__exponent+0x66>
 80057a8:	f10d 0209 	add.w	r2, sp, #9
 80057ac:	eba2 020e 	sub.w	r2, r2, lr
 80057b0:	4565      	cmp	r5, ip
 80057b2:	bf88      	it	hi
 80057b4:	2200      	movhi	r2, #0
 80057b6:	4413      	add	r3, r2
 80057b8:	1a18      	subs	r0, r3, r0
 80057ba:	b003      	add	sp, #12
 80057bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80057c6:	e7ed      	b.n	80057a4 <__exponent+0x4c>
 80057c8:	2330      	movs	r3, #48	; 0x30
 80057ca:	3130      	adds	r1, #48	; 0x30
 80057cc:	7083      	strb	r3, [r0, #2]
 80057ce:	70c1      	strb	r1, [r0, #3]
 80057d0:	1d03      	adds	r3, r0, #4
 80057d2:	e7f1      	b.n	80057b8 <__exponent+0x60>

080057d4 <_printf_float>:
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	ed2d 8b02 	vpush	{d8}
 80057dc:	b08d      	sub	sp, #52	; 0x34
 80057de:	460c      	mov	r4, r1
 80057e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80057e4:	4616      	mov	r6, r2
 80057e6:	461f      	mov	r7, r3
 80057e8:	4605      	mov	r5, r0
 80057ea:	f002 ff1f 	bl	800862c <_localeconv_r>
 80057ee:	f8d0 a000 	ldr.w	sl, [r0]
 80057f2:	4650      	mov	r0, sl
 80057f4:	f7fa fcfe 	bl	80001f4 <strlen>
 80057f8:	2300      	movs	r3, #0
 80057fa:	930a      	str	r3, [sp, #40]	; 0x28
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	9305      	str	r3, [sp, #20]
 8005800:	f8d8 3000 	ldr.w	r3, [r8]
 8005804:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005808:	3307      	adds	r3, #7
 800580a:	f023 0307 	bic.w	r3, r3, #7
 800580e:	f103 0208 	add.w	r2, r3, #8
 8005812:	f8c8 2000 	str.w	r2, [r8]
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800581e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005826:	9307      	str	r3, [sp, #28]
 8005828:	f8cd 8018 	str.w	r8, [sp, #24]
 800582c:	ee08 0a10 	vmov	s16, r0
 8005830:	4b9f      	ldr	r3, [pc, #636]	; (8005ab0 <_printf_float+0x2dc>)
 8005832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005836:	f04f 32ff 	mov.w	r2, #4294967295
 800583a:	f7fb f98f 	bl	8000b5c <__aeabi_dcmpun>
 800583e:	bb88      	cbnz	r0, 80058a4 <_printf_float+0xd0>
 8005840:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005844:	4b9a      	ldr	r3, [pc, #616]	; (8005ab0 <_printf_float+0x2dc>)
 8005846:	f04f 32ff 	mov.w	r2, #4294967295
 800584a:	f7fb f969 	bl	8000b20 <__aeabi_dcmple>
 800584e:	bb48      	cbnz	r0, 80058a4 <_printf_float+0xd0>
 8005850:	2200      	movs	r2, #0
 8005852:	2300      	movs	r3, #0
 8005854:	4640      	mov	r0, r8
 8005856:	4649      	mov	r1, r9
 8005858:	f7fb f958 	bl	8000b0c <__aeabi_dcmplt>
 800585c:	b110      	cbz	r0, 8005864 <_printf_float+0x90>
 800585e:	232d      	movs	r3, #45	; 0x2d
 8005860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005864:	4b93      	ldr	r3, [pc, #588]	; (8005ab4 <_printf_float+0x2e0>)
 8005866:	4894      	ldr	r0, [pc, #592]	; (8005ab8 <_printf_float+0x2e4>)
 8005868:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800586c:	bf94      	ite	ls
 800586e:	4698      	movls	r8, r3
 8005870:	4680      	movhi	r8, r0
 8005872:	2303      	movs	r3, #3
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	9b05      	ldr	r3, [sp, #20]
 8005878:	f023 0204 	bic.w	r2, r3, #4
 800587c:	6022      	str	r2, [r4, #0]
 800587e:	f04f 0900 	mov.w	r9, #0
 8005882:	9700      	str	r7, [sp, #0]
 8005884:	4633      	mov	r3, r6
 8005886:	aa0b      	add	r2, sp, #44	; 0x2c
 8005888:	4621      	mov	r1, r4
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f9d8 	bl	8005c40 <_printf_common>
 8005890:	3001      	adds	r0, #1
 8005892:	f040 8090 	bne.w	80059b6 <_printf_float+0x1e2>
 8005896:	f04f 30ff 	mov.w	r0, #4294967295
 800589a:	b00d      	add	sp, #52	; 0x34
 800589c:	ecbd 8b02 	vpop	{d8}
 80058a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a4:	4642      	mov	r2, r8
 80058a6:	464b      	mov	r3, r9
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fb f956 	bl	8000b5c <__aeabi_dcmpun>
 80058b0:	b140      	cbz	r0, 80058c4 <_printf_float+0xf0>
 80058b2:	464b      	mov	r3, r9
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bfbc      	itt	lt
 80058b8:	232d      	movlt	r3, #45	; 0x2d
 80058ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058be:	487f      	ldr	r0, [pc, #508]	; (8005abc <_printf_float+0x2e8>)
 80058c0:	4b7f      	ldr	r3, [pc, #508]	; (8005ac0 <_printf_float+0x2ec>)
 80058c2:	e7d1      	b.n	8005868 <_printf_float+0x94>
 80058c4:	6863      	ldr	r3, [r4, #4]
 80058c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80058ca:	9206      	str	r2, [sp, #24]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	d13f      	bne.n	8005950 <_printf_float+0x17c>
 80058d0:	2306      	movs	r3, #6
 80058d2:	6063      	str	r3, [r4, #4]
 80058d4:	9b05      	ldr	r3, [sp, #20]
 80058d6:	6861      	ldr	r1, [r4, #4]
 80058d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058dc:	2300      	movs	r3, #0
 80058de:	9303      	str	r3, [sp, #12]
 80058e0:	ab0a      	add	r3, sp, #40	; 0x28
 80058e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80058e6:	ab09      	add	r3, sp, #36	; 0x24
 80058e8:	ec49 8b10 	vmov	d0, r8, r9
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058f4:	4628      	mov	r0, r5
 80058f6:	f7ff fecd 	bl	8005694 <__cvt>
 80058fa:	9b06      	ldr	r3, [sp, #24]
 80058fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058fe:	2b47      	cmp	r3, #71	; 0x47
 8005900:	4680      	mov	r8, r0
 8005902:	d108      	bne.n	8005916 <_printf_float+0x142>
 8005904:	1cc8      	adds	r0, r1, #3
 8005906:	db02      	blt.n	800590e <_printf_float+0x13a>
 8005908:	6863      	ldr	r3, [r4, #4]
 800590a:	4299      	cmp	r1, r3
 800590c:	dd41      	ble.n	8005992 <_printf_float+0x1be>
 800590e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005912:	fa5f fb8b 	uxtb.w	fp, fp
 8005916:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800591a:	d820      	bhi.n	800595e <_printf_float+0x18a>
 800591c:	3901      	subs	r1, #1
 800591e:	465a      	mov	r2, fp
 8005920:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005924:	9109      	str	r1, [sp, #36]	; 0x24
 8005926:	f7ff ff17 	bl	8005758 <__exponent>
 800592a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800592c:	1813      	adds	r3, r2, r0
 800592e:	2a01      	cmp	r2, #1
 8005930:	4681      	mov	r9, r0
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	dc02      	bgt.n	800593c <_printf_float+0x168>
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	07d2      	lsls	r2, r2, #31
 800593a:	d501      	bpl.n	8005940 <_printf_float+0x16c>
 800593c:	3301      	adds	r3, #1
 800593e:	6123      	str	r3, [r4, #16]
 8005940:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005944:	2b00      	cmp	r3, #0
 8005946:	d09c      	beq.n	8005882 <_printf_float+0xae>
 8005948:	232d      	movs	r3, #45	; 0x2d
 800594a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594e:	e798      	b.n	8005882 <_printf_float+0xae>
 8005950:	9a06      	ldr	r2, [sp, #24]
 8005952:	2a47      	cmp	r2, #71	; 0x47
 8005954:	d1be      	bne.n	80058d4 <_printf_float+0x100>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1bc      	bne.n	80058d4 <_printf_float+0x100>
 800595a:	2301      	movs	r3, #1
 800595c:	e7b9      	b.n	80058d2 <_printf_float+0xfe>
 800595e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005962:	d118      	bne.n	8005996 <_printf_float+0x1c2>
 8005964:	2900      	cmp	r1, #0
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	dd0b      	ble.n	8005982 <_printf_float+0x1ae>
 800596a:	6121      	str	r1, [r4, #16]
 800596c:	b913      	cbnz	r3, 8005974 <_printf_float+0x1a0>
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	07d0      	lsls	r0, r2, #31
 8005972:	d502      	bpl.n	800597a <_printf_float+0x1a6>
 8005974:	3301      	adds	r3, #1
 8005976:	440b      	add	r3, r1
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	65a1      	str	r1, [r4, #88]	; 0x58
 800597c:	f04f 0900 	mov.w	r9, #0
 8005980:	e7de      	b.n	8005940 <_printf_float+0x16c>
 8005982:	b913      	cbnz	r3, 800598a <_printf_float+0x1b6>
 8005984:	6822      	ldr	r2, [r4, #0]
 8005986:	07d2      	lsls	r2, r2, #31
 8005988:	d501      	bpl.n	800598e <_printf_float+0x1ba>
 800598a:	3302      	adds	r3, #2
 800598c:	e7f4      	b.n	8005978 <_printf_float+0x1a4>
 800598e:	2301      	movs	r3, #1
 8005990:	e7f2      	b.n	8005978 <_printf_float+0x1a4>
 8005992:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005998:	4299      	cmp	r1, r3
 800599a:	db05      	blt.n	80059a8 <_printf_float+0x1d4>
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	6121      	str	r1, [r4, #16]
 80059a0:	07d8      	lsls	r0, r3, #31
 80059a2:	d5ea      	bpl.n	800597a <_printf_float+0x1a6>
 80059a4:	1c4b      	adds	r3, r1, #1
 80059a6:	e7e7      	b.n	8005978 <_printf_float+0x1a4>
 80059a8:	2900      	cmp	r1, #0
 80059aa:	bfd4      	ite	le
 80059ac:	f1c1 0202 	rsble	r2, r1, #2
 80059b0:	2201      	movgt	r2, #1
 80059b2:	4413      	add	r3, r2
 80059b4:	e7e0      	b.n	8005978 <_printf_float+0x1a4>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	055a      	lsls	r2, r3, #21
 80059ba:	d407      	bmi.n	80059cc <_printf_float+0x1f8>
 80059bc:	6923      	ldr	r3, [r4, #16]
 80059be:	4642      	mov	r2, r8
 80059c0:	4631      	mov	r1, r6
 80059c2:	4628      	mov	r0, r5
 80059c4:	47b8      	blx	r7
 80059c6:	3001      	adds	r0, #1
 80059c8:	d12c      	bne.n	8005a24 <_printf_float+0x250>
 80059ca:	e764      	b.n	8005896 <_printf_float+0xc2>
 80059cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80059d0:	f240 80e0 	bls.w	8005b94 <_printf_float+0x3c0>
 80059d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059d8:	2200      	movs	r2, #0
 80059da:	2300      	movs	r3, #0
 80059dc:	f7fb f88c 	bl	8000af8 <__aeabi_dcmpeq>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d034      	beq.n	8005a4e <_printf_float+0x27a>
 80059e4:	4a37      	ldr	r2, [pc, #220]	; (8005ac4 <_printf_float+0x2f0>)
 80059e6:	2301      	movs	r3, #1
 80059e8:	4631      	mov	r1, r6
 80059ea:	4628      	mov	r0, r5
 80059ec:	47b8      	blx	r7
 80059ee:	3001      	adds	r0, #1
 80059f0:	f43f af51 	beq.w	8005896 <_printf_float+0xc2>
 80059f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059f8:	429a      	cmp	r2, r3
 80059fa:	db02      	blt.n	8005a02 <_printf_float+0x22e>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	07d8      	lsls	r0, r3, #31
 8005a00:	d510      	bpl.n	8005a24 <_printf_float+0x250>
 8005a02:	ee18 3a10 	vmov	r3, s16
 8005a06:	4652      	mov	r2, sl
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	47b8      	blx	r7
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f af41 	beq.w	8005896 <_printf_float+0xc2>
 8005a14:	f04f 0800 	mov.w	r8, #0
 8005a18:	f104 091a 	add.w	r9, r4, #26
 8005a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	4543      	cmp	r3, r8
 8005a22:	dc09      	bgt.n	8005a38 <_printf_float+0x264>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	079b      	lsls	r3, r3, #30
 8005a28:	f100 8105 	bmi.w	8005c36 <_printf_float+0x462>
 8005a2c:	68e0      	ldr	r0, [r4, #12]
 8005a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a30:	4298      	cmp	r0, r3
 8005a32:	bfb8      	it	lt
 8005a34:	4618      	movlt	r0, r3
 8005a36:	e730      	b.n	800589a <_printf_float+0xc6>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	464a      	mov	r2, r9
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	4628      	mov	r0, r5
 8005a40:	47b8      	blx	r7
 8005a42:	3001      	adds	r0, #1
 8005a44:	f43f af27 	beq.w	8005896 <_printf_float+0xc2>
 8005a48:	f108 0801 	add.w	r8, r8, #1
 8005a4c:	e7e6      	b.n	8005a1c <_printf_float+0x248>
 8005a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	dc39      	bgt.n	8005ac8 <_printf_float+0x2f4>
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <_printf_float+0x2f0>)
 8005a56:	2301      	movs	r3, #1
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	47b8      	blx	r7
 8005a5e:	3001      	adds	r0, #1
 8005a60:	f43f af19 	beq.w	8005896 <_printf_float+0xc2>
 8005a64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d102      	bne.n	8005a72 <_printf_float+0x29e>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	07d9      	lsls	r1, r3, #31
 8005a70:	d5d8      	bpl.n	8005a24 <_printf_float+0x250>
 8005a72:	ee18 3a10 	vmov	r3, s16
 8005a76:	4652      	mov	r2, sl
 8005a78:	4631      	mov	r1, r6
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	f43f af09 	beq.w	8005896 <_printf_float+0xc2>
 8005a84:	f04f 0900 	mov.w	r9, #0
 8005a88:	f104 0a1a 	add.w	sl, r4, #26
 8005a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8e:	425b      	negs	r3, r3
 8005a90:	454b      	cmp	r3, r9
 8005a92:	dc01      	bgt.n	8005a98 <_printf_float+0x2c4>
 8005a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a96:	e792      	b.n	80059be <_printf_float+0x1ea>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	4652      	mov	r2, sl
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	f43f aef7 	beq.w	8005896 <_printf_float+0xc2>
 8005aa8:	f109 0901 	add.w	r9, r9, #1
 8005aac:	e7ee      	b.n	8005a8c <_printf_float+0x2b8>
 8005aae:	bf00      	nop
 8005ab0:	7fefffff 	.word	0x7fefffff
 8005ab4:	0800c5c0 	.word	0x0800c5c0
 8005ab8:	0800c5c4 	.word	0x0800c5c4
 8005abc:	0800c5cc 	.word	0x0800c5cc
 8005ac0:	0800c5c8 	.word	0x0800c5c8
 8005ac4:	0800c9c1 	.word	0x0800c9c1
 8005ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005acc:	429a      	cmp	r2, r3
 8005ace:	bfa8      	it	ge
 8005ad0:	461a      	movge	r2, r3
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	4691      	mov	r9, r2
 8005ad6:	dc37      	bgt.n	8005b48 <_printf_float+0x374>
 8005ad8:	f04f 0b00 	mov.w	fp, #0
 8005adc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ae0:	f104 021a 	add.w	r2, r4, #26
 8005ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ae6:	9305      	str	r3, [sp, #20]
 8005ae8:	eba3 0309 	sub.w	r3, r3, r9
 8005aec:	455b      	cmp	r3, fp
 8005aee:	dc33      	bgt.n	8005b58 <_printf_float+0x384>
 8005af0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005af4:	429a      	cmp	r2, r3
 8005af6:	db3b      	blt.n	8005b70 <_printf_float+0x39c>
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	07da      	lsls	r2, r3, #31
 8005afc:	d438      	bmi.n	8005b70 <_printf_float+0x39c>
 8005afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b00:	9a05      	ldr	r2, [sp, #20]
 8005b02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b04:	1a9a      	subs	r2, r3, r2
 8005b06:	eba3 0901 	sub.w	r9, r3, r1
 8005b0a:	4591      	cmp	r9, r2
 8005b0c:	bfa8      	it	ge
 8005b0e:	4691      	movge	r9, r2
 8005b10:	f1b9 0f00 	cmp.w	r9, #0
 8005b14:	dc35      	bgt.n	8005b82 <_printf_float+0x3ae>
 8005b16:	f04f 0800 	mov.w	r8, #0
 8005b1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b1e:	f104 0a1a 	add.w	sl, r4, #26
 8005b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	eba3 0309 	sub.w	r3, r3, r9
 8005b2c:	4543      	cmp	r3, r8
 8005b2e:	f77f af79 	ble.w	8005a24 <_printf_float+0x250>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4652      	mov	r2, sl
 8005b36:	4631      	mov	r1, r6
 8005b38:	4628      	mov	r0, r5
 8005b3a:	47b8      	blx	r7
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f43f aeaa 	beq.w	8005896 <_printf_float+0xc2>
 8005b42:	f108 0801 	add.w	r8, r8, #1
 8005b46:	e7ec      	b.n	8005b22 <_printf_float+0x34e>
 8005b48:	4613      	mov	r3, r2
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	d1c0      	bne.n	8005ad8 <_printf_float+0x304>
 8005b56:	e69e      	b.n	8005896 <_printf_float+0xc2>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	9205      	str	r2, [sp, #20]
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	f43f ae97 	beq.w	8005896 <_printf_float+0xc2>
 8005b68:	9a05      	ldr	r2, [sp, #20]
 8005b6a:	f10b 0b01 	add.w	fp, fp, #1
 8005b6e:	e7b9      	b.n	8005ae4 <_printf_float+0x310>
 8005b70:	ee18 3a10 	vmov	r3, s16
 8005b74:	4652      	mov	r2, sl
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b8      	blx	r7
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d1be      	bne.n	8005afe <_printf_float+0x32a>
 8005b80:	e689      	b.n	8005896 <_printf_float+0xc2>
 8005b82:	9a05      	ldr	r2, [sp, #20]
 8005b84:	464b      	mov	r3, r9
 8005b86:	4442      	add	r2, r8
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d1c1      	bne.n	8005b16 <_printf_float+0x342>
 8005b92:	e680      	b.n	8005896 <_printf_float+0xc2>
 8005b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b96:	2a01      	cmp	r2, #1
 8005b98:	dc01      	bgt.n	8005b9e <_printf_float+0x3ca>
 8005b9a:	07db      	lsls	r3, r3, #31
 8005b9c:	d538      	bpl.n	8005c10 <_printf_float+0x43c>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	47b8      	blx	r7
 8005ba8:	3001      	adds	r0, #1
 8005baa:	f43f ae74 	beq.w	8005896 <_printf_float+0xc2>
 8005bae:	ee18 3a10 	vmov	r3, s16
 8005bb2:	4652      	mov	r2, sl
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f43f ae6b 	beq.w	8005896 <_printf_float+0xc2>
 8005bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f7fa ff96 	bl	8000af8 <__aeabi_dcmpeq>
 8005bcc:	b9d8      	cbnz	r0, 8005c06 <_printf_float+0x432>
 8005bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd0:	f108 0201 	add.w	r2, r8, #1
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	4628      	mov	r0, r5
 8005bda:	47b8      	blx	r7
 8005bdc:	3001      	adds	r0, #1
 8005bde:	d10e      	bne.n	8005bfe <_printf_float+0x42a>
 8005be0:	e659      	b.n	8005896 <_printf_float+0xc2>
 8005be2:	2301      	movs	r3, #1
 8005be4:	4652      	mov	r2, sl
 8005be6:	4631      	mov	r1, r6
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b8      	blx	r7
 8005bec:	3001      	adds	r0, #1
 8005bee:	f43f ae52 	beq.w	8005896 <_printf_float+0xc2>
 8005bf2:	f108 0801 	add.w	r8, r8, #1
 8005bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	4543      	cmp	r3, r8
 8005bfc:	dcf1      	bgt.n	8005be2 <_printf_float+0x40e>
 8005bfe:	464b      	mov	r3, r9
 8005c00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c04:	e6dc      	b.n	80059c0 <_printf_float+0x1ec>
 8005c06:	f04f 0800 	mov.w	r8, #0
 8005c0a:	f104 0a1a 	add.w	sl, r4, #26
 8005c0e:	e7f2      	b.n	8005bf6 <_printf_float+0x422>
 8005c10:	2301      	movs	r3, #1
 8005c12:	4642      	mov	r2, r8
 8005c14:	e7df      	b.n	8005bd6 <_printf_float+0x402>
 8005c16:	2301      	movs	r3, #1
 8005c18:	464a      	mov	r2, r9
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	47b8      	blx	r7
 8005c20:	3001      	adds	r0, #1
 8005c22:	f43f ae38 	beq.w	8005896 <_printf_float+0xc2>
 8005c26:	f108 0801 	add.w	r8, r8, #1
 8005c2a:	68e3      	ldr	r3, [r4, #12]
 8005c2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c2e:	1a5b      	subs	r3, r3, r1
 8005c30:	4543      	cmp	r3, r8
 8005c32:	dcf0      	bgt.n	8005c16 <_printf_float+0x442>
 8005c34:	e6fa      	b.n	8005a2c <_printf_float+0x258>
 8005c36:	f04f 0800 	mov.w	r8, #0
 8005c3a:	f104 0919 	add.w	r9, r4, #25
 8005c3e:	e7f4      	b.n	8005c2a <_printf_float+0x456>

08005c40 <_printf_common>:
 8005c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	4616      	mov	r6, r2
 8005c46:	4699      	mov	r9, r3
 8005c48:	688a      	ldr	r2, [r1, #8]
 8005c4a:	690b      	ldr	r3, [r1, #16]
 8005c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	bfb8      	it	lt
 8005c54:	4613      	movlt	r3, r2
 8005c56:	6033      	str	r3, [r6, #0]
 8005c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	b10a      	cbz	r2, 8005c66 <_printf_common+0x26>
 8005c62:	3301      	adds	r3, #1
 8005c64:	6033      	str	r3, [r6, #0]
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	0699      	lsls	r1, r3, #26
 8005c6a:	bf42      	ittt	mi
 8005c6c:	6833      	ldrmi	r3, [r6, #0]
 8005c6e:	3302      	addmi	r3, #2
 8005c70:	6033      	strmi	r3, [r6, #0]
 8005c72:	6825      	ldr	r5, [r4, #0]
 8005c74:	f015 0506 	ands.w	r5, r5, #6
 8005c78:	d106      	bne.n	8005c88 <_printf_common+0x48>
 8005c7a:	f104 0a19 	add.w	sl, r4, #25
 8005c7e:	68e3      	ldr	r3, [r4, #12]
 8005c80:	6832      	ldr	r2, [r6, #0]
 8005c82:	1a9b      	subs	r3, r3, r2
 8005c84:	42ab      	cmp	r3, r5
 8005c86:	dc26      	bgt.n	8005cd6 <_printf_common+0x96>
 8005c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c8c:	1e13      	subs	r3, r2, #0
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	bf18      	it	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	0692      	lsls	r2, r2, #26
 8005c96:	d42b      	bmi.n	8005cf0 <_printf_common+0xb0>
 8005c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	47c0      	blx	r8
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d01e      	beq.n	8005ce4 <_printf_common+0xa4>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	68e5      	ldr	r5, [r4, #12]
 8005caa:	6832      	ldr	r2, [r6, #0]
 8005cac:	f003 0306 	and.w	r3, r3, #6
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	bf08      	it	eq
 8005cb4:	1aad      	subeq	r5, r5, r2
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	6922      	ldr	r2, [r4, #16]
 8005cba:	bf0c      	ite	eq
 8005cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc0:	2500      	movne	r5, #0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	bfc4      	itt	gt
 8005cc6:	1a9b      	subgt	r3, r3, r2
 8005cc8:	18ed      	addgt	r5, r5, r3
 8005cca:	2600      	movs	r6, #0
 8005ccc:	341a      	adds	r4, #26
 8005cce:	42b5      	cmp	r5, r6
 8005cd0:	d11a      	bne.n	8005d08 <_printf_common+0xc8>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e008      	b.n	8005ce8 <_printf_common+0xa8>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	4652      	mov	r2, sl
 8005cda:	4649      	mov	r1, r9
 8005cdc:	4638      	mov	r0, r7
 8005cde:	47c0      	blx	r8
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d103      	bne.n	8005cec <_printf_common+0xac>
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cec:	3501      	adds	r5, #1
 8005cee:	e7c6      	b.n	8005c7e <_printf_common+0x3e>
 8005cf0:	18e1      	adds	r1, r4, r3
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	2030      	movs	r0, #48	; 0x30
 8005cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cfa:	4422      	add	r2, r4
 8005cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d04:	3302      	adds	r3, #2
 8005d06:	e7c7      	b.n	8005c98 <_printf_common+0x58>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	4638      	mov	r0, r7
 8005d10:	47c0      	blx	r8
 8005d12:	3001      	adds	r0, #1
 8005d14:	d0e6      	beq.n	8005ce4 <_printf_common+0xa4>
 8005d16:	3601      	adds	r6, #1
 8005d18:	e7d9      	b.n	8005cce <_printf_common+0x8e>
	...

08005d1c <_printf_i>:
 8005d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d20:	7e0f      	ldrb	r7, [r1, #24]
 8005d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d24:	2f78      	cmp	r7, #120	; 0x78
 8005d26:	4691      	mov	r9, r2
 8005d28:	4680      	mov	r8, r0
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	469a      	mov	sl, r3
 8005d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d32:	d807      	bhi.n	8005d44 <_printf_i+0x28>
 8005d34:	2f62      	cmp	r7, #98	; 0x62
 8005d36:	d80a      	bhi.n	8005d4e <_printf_i+0x32>
 8005d38:	2f00      	cmp	r7, #0
 8005d3a:	f000 80d8 	beq.w	8005eee <_printf_i+0x1d2>
 8005d3e:	2f58      	cmp	r7, #88	; 0x58
 8005d40:	f000 80a3 	beq.w	8005e8a <_printf_i+0x16e>
 8005d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d4c:	e03a      	b.n	8005dc4 <_printf_i+0xa8>
 8005d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d52:	2b15      	cmp	r3, #21
 8005d54:	d8f6      	bhi.n	8005d44 <_printf_i+0x28>
 8005d56:	a101      	add	r1, pc, #4	; (adr r1, 8005d5c <_printf_i+0x40>)
 8005d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d5c:	08005db5 	.word	0x08005db5
 8005d60:	08005dc9 	.word	0x08005dc9
 8005d64:	08005d45 	.word	0x08005d45
 8005d68:	08005d45 	.word	0x08005d45
 8005d6c:	08005d45 	.word	0x08005d45
 8005d70:	08005d45 	.word	0x08005d45
 8005d74:	08005dc9 	.word	0x08005dc9
 8005d78:	08005d45 	.word	0x08005d45
 8005d7c:	08005d45 	.word	0x08005d45
 8005d80:	08005d45 	.word	0x08005d45
 8005d84:	08005d45 	.word	0x08005d45
 8005d88:	08005ed5 	.word	0x08005ed5
 8005d8c:	08005df9 	.word	0x08005df9
 8005d90:	08005eb7 	.word	0x08005eb7
 8005d94:	08005d45 	.word	0x08005d45
 8005d98:	08005d45 	.word	0x08005d45
 8005d9c:	08005ef7 	.word	0x08005ef7
 8005da0:	08005d45 	.word	0x08005d45
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005d45 	.word	0x08005d45
 8005dac:	08005d45 	.word	0x08005d45
 8005db0:	08005ebf 	.word	0x08005ebf
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	1d1a      	adds	r2, r3, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	602a      	str	r2, [r5, #0]
 8005dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e0a3      	b.n	8005f10 <_printf_i+0x1f4>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	6829      	ldr	r1, [r5, #0]
 8005dcc:	0606      	lsls	r6, r0, #24
 8005dce:	f101 0304 	add.w	r3, r1, #4
 8005dd2:	d50a      	bpl.n	8005dea <_printf_i+0xce>
 8005dd4:	680e      	ldr	r6, [r1, #0]
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	2e00      	cmp	r6, #0
 8005dda:	da03      	bge.n	8005de4 <_printf_i+0xc8>
 8005ddc:	232d      	movs	r3, #45	; 0x2d
 8005dde:	4276      	negs	r6, r6
 8005de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de4:	485e      	ldr	r0, [pc, #376]	; (8005f60 <_printf_i+0x244>)
 8005de6:	230a      	movs	r3, #10
 8005de8:	e019      	b.n	8005e1e <_printf_i+0x102>
 8005dea:	680e      	ldr	r6, [r1, #0]
 8005dec:	602b      	str	r3, [r5, #0]
 8005dee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005df2:	bf18      	it	ne
 8005df4:	b236      	sxthne	r6, r6
 8005df6:	e7ef      	b.n	8005dd8 <_printf_i+0xbc>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	1d19      	adds	r1, r3, #4
 8005dfe:	6029      	str	r1, [r5, #0]
 8005e00:	0601      	lsls	r1, r0, #24
 8005e02:	d501      	bpl.n	8005e08 <_printf_i+0xec>
 8005e04:	681e      	ldr	r6, [r3, #0]
 8005e06:	e002      	b.n	8005e0e <_printf_i+0xf2>
 8005e08:	0646      	lsls	r6, r0, #25
 8005e0a:	d5fb      	bpl.n	8005e04 <_printf_i+0xe8>
 8005e0c:	881e      	ldrh	r6, [r3, #0]
 8005e0e:	4854      	ldr	r0, [pc, #336]	; (8005f60 <_printf_i+0x244>)
 8005e10:	2f6f      	cmp	r7, #111	; 0x6f
 8005e12:	bf0c      	ite	eq
 8005e14:	2308      	moveq	r3, #8
 8005e16:	230a      	movne	r3, #10
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e1e:	6865      	ldr	r5, [r4, #4]
 8005e20:	60a5      	str	r5, [r4, #8]
 8005e22:	2d00      	cmp	r5, #0
 8005e24:	bfa2      	ittt	ge
 8005e26:	6821      	ldrge	r1, [r4, #0]
 8005e28:	f021 0104 	bicge.w	r1, r1, #4
 8005e2c:	6021      	strge	r1, [r4, #0]
 8005e2e:	b90e      	cbnz	r6, 8005e34 <_printf_i+0x118>
 8005e30:	2d00      	cmp	r5, #0
 8005e32:	d04d      	beq.n	8005ed0 <_printf_i+0x1b4>
 8005e34:	4615      	mov	r5, r2
 8005e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8005e3e:	5dc7      	ldrb	r7, [r0, r7]
 8005e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e44:	4637      	mov	r7, r6
 8005e46:	42bb      	cmp	r3, r7
 8005e48:	460e      	mov	r6, r1
 8005e4a:	d9f4      	bls.n	8005e36 <_printf_i+0x11a>
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d10b      	bne.n	8005e68 <_printf_i+0x14c>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	07de      	lsls	r6, r3, #31
 8005e54:	d508      	bpl.n	8005e68 <_printf_i+0x14c>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	bfde      	ittt	le
 8005e5e:	2330      	movle	r3, #48	; 0x30
 8005e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e68:	1b52      	subs	r2, r2, r5
 8005e6a:	6122      	str	r2, [r4, #16]
 8005e6c:	f8cd a000 	str.w	sl, [sp]
 8005e70:	464b      	mov	r3, r9
 8005e72:	aa03      	add	r2, sp, #12
 8005e74:	4621      	mov	r1, r4
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fee2 	bl	8005c40 <_printf_common>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d14c      	bne.n	8005f1a <_printf_i+0x1fe>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	b004      	add	sp, #16
 8005e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8a:	4835      	ldr	r0, [pc, #212]	; (8005f60 <_printf_i+0x244>)
 8005e8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e90:	6829      	ldr	r1, [r5, #0]
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e98:	6029      	str	r1, [r5, #0]
 8005e9a:	061d      	lsls	r5, r3, #24
 8005e9c:	d514      	bpl.n	8005ec8 <_printf_i+0x1ac>
 8005e9e:	07df      	lsls	r7, r3, #31
 8005ea0:	bf44      	itt	mi
 8005ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ea6:	6023      	strmi	r3, [r4, #0]
 8005ea8:	b91e      	cbnz	r6, 8005eb2 <_printf_i+0x196>
 8005eaa:	6823      	ldr	r3, [r4, #0]
 8005eac:	f023 0320 	bic.w	r3, r3, #32
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	2310      	movs	r3, #16
 8005eb4:	e7b0      	b.n	8005e18 <_printf_i+0xfc>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	f043 0320 	orr.w	r3, r3, #32
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	2378      	movs	r3, #120	; 0x78
 8005ec0:	4828      	ldr	r0, [pc, #160]	; (8005f64 <_printf_i+0x248>)
 8005ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ec6:	e7e3      	b.n	8005e90 <_printf_i+0x174>
 8005ec8:	0659      	lsls	r1, r3, #25
 8005eca:	bf48      	it	mi
 8005ecc:	b2b6      	uxthmi	r6, r6
 8005ece:	e7e6      	b.n	8005e9e <_printf_i+0x182>
 8005ed0:	4615      	mov	r5, r2
 8005ed2:	e7bb      	b.n	8005e4c <_printf_i+0x130>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	6826      	ldr	r6, [r4, #0]
 8005ed8:	6961      	ldr	r1, [r4, #20]
 8005eda:	1d18      	adds	r0, r3, #4
 8005edc:	6028      	str	r0, [r5, #0]
 8005ede:	0635      	lsls	r5, r6, #24
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	d501      	bpl.n	8005ee8 <_printf_i+0x1cc>
 8005ee4:	6019      	str	r1, [r3, #0]
 8005ee6:	e002      	b.n	8005eee <_printf_i+0x1d2>
 8005ee8:	0670      	lsls	r0, r6, #25
 8005eea:	d5fb      	bpl.n	8005ee4 <_printf_i+0x1c8>
 8005eec:	8019      	strh	r1, [r3, #0]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	4615      	mov	r5, r2
 8005ef4:	e7ba      	b.n	8005e6c <_printf_i+0x150>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	1d1a      	adds	r2, r3, #4
 8005efa:	602a      	str	r2, [r5, #0]
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	6862      	ldr	r2, [r4, #4]
 8005f00:	2100      	movs	r1, #0
 8005f02:	4628      	mov	r0, r5
 8005f04:	f7fa f984 	bl	8000210 <memchr>
 8005f08:	b108      	cbz	r0, 8005f0e <_printf_i+0x1f2>
 8005f0a:	1b40      	subs	r0, r0, r5
 8005f0c:	6060      	str	r0, [r4, #4]
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	2300      	movs	r3, #0
 8005f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f18:	e7a8      	b.n	8005e6c <_printf_i+0x150>
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	4649      	mov	r1, r9
 8005f20:	4640      	mov	r0, r8
 8005f22:	47d0      	blx	sl
 8005f24:	3001      	adds	r0, #1
 8005f26:	d0ab      	beq.n	8005e80 <_printf_i+0x164>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	079b      	lsls	r3, r3, #30
 8005f2c:	d413      	bmi.n	8005f56 <_printf_i+0x23a>
 8005f2e:	68e0      	ldr	r0, [r4, #12]
 8005f30:	9b03      	ldr	r3, [sp, #12]
 8005f32:	4298      	cmp	r0, r3
 8005f34:	bfb8      	it	lt
 8005f36:	4618      	movlt	r0, r3
 8005f38:	e7a4      	b.n	8005e84 <_printf_i+0x168>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	4649      	mov	r1, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	47d0      	blx	sl
 8005f44:	3001      	adds	r0, #1
 8005f46:	d09b      	beq.n	8005e80 <_printf_i+0x164>
 8005f48:	3501      	adds	r5, #1
 8005f4a:	68e3      	ldr	r3, [r4, #12]
 8005f4c:	9903      	ldr	r1, [sp, #12]
 8005f4e:	1a5b      	subs	r3, r3, r1
 8005f50:	42ab      	cmp	r3, r5
 8005f52:	dcf2      	bgt.n	8005f3a <_printf_i+0x21e>
 8005f54:	e7eb      	b.n	8005f2e <_printf_i+0x212>
 8005f56:	2500      	movs	r5, #0
 8005f58:	f104 0619 	add.w	r6, r4, #25
 8005f5c:	e7f5      	b.n	8005f4a <_printf_i+0x22e>
 8005f5e:	bf00      	nop
 8005f60:	0800c5d0 	.word	0x0800c5d0
 8005f64:	0800c5e1 	.word	0x0800c5e1

08005f68 <_scanf_float>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	b087      	sub	sp, #28
 8005f6e:	4617      	mov	r7, r2
 8005f70:	9303      	str	r3, [sp, #12]
 8005f72:	688b      	ldr	r3, [r1, #8]
 8005f74:	1e5a      	subs	r2, r3, #1
 8005f76:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f7a:	bf83      	ittte	hi
 8005f7c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f80:	195b      	addhi	r3, r3, r5
 8005f82:	9302      	strhi	r3, [sp, #8]
 8005f84:	2300      	movls	r3, #0
 8005f86:	bf86      	itte	hi
 8005f88:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f8c:	608b      	strhi	r3, [r1, #8]
 8005f8e:	9302      	strls	r3, [sp, #8]
 8005f90:	680b      	ldr	r3, [r1, #0]
 8005f92:	468b      	mov	fp, r1
 8005f94:	2500      	movs	r5, #0
 8005f96:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005f9a:	f84b 3b1c 	str.w	r3, [fp], #28
 8005f9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005fa2:	4680      	mov	r8, r0
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	465e      	mov	r6, fp
 8005fa8:	46aa      	mov	sl, r5
 8005faa:	46a9      	mov	r9, r5
 8005fac:	9501      	str	r5, [sp, #4]
 8005fae:	68a2      	ldr	r2, [r4, #8]
 8005fb0:	b152      	cbz	r2, 8005fc8 <_scanf_float+0x60>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b4e      	cmp	r3, #78	; 0x4e
 8005fb8:	d864      	bhi.n	8006084 <_scanf_float+0x11c>
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	d83c      	bhi.n	8006038 <_scanf_float+0xd0>
 8005fbe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005fc2:	b2c8      	uxtb	r0, r1
 8005fc4:	280e      	cmp	r0, #14
 8005fc6:	d93a      	bls.n	800603e <_scanf_float+0xd6>
 8005fc8:	f1b9 0f00 	cmp.w	r9, #0
 8005fcc:	d003      	beq.n	8005fd6 <_scanf_float+0x6e>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fda:	f1ba 0f01 	cmp.w	sl, #1
 8005fde:	f200 8113 	bhi.w	8006208 <_scanf_float+0x2a0>
 8005fe2:	455e      	cmp	r6, fp
 8005fe4:	f200 8105 	bhi.w	80061f2 <_scanf_float+0x28a>
 8005fe8:	2501      	movs	r5, #1
 8005fea:	4628      	mov	r0, r5
 8005fec:	b007      	add	sp, #28
 8005fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005ff6:	2a0d      	cmp	r2, #13
 8005ff8:	d8e6      	bhi.n	8005fc8 <_scanf_float+0x60>
 8005ffa:	a101      	add	r1, pc, #4	; (adr r1, 8006000 <_scanf_float+0x98>)
 8005ffc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006000:	0800613f 	.word	0x0800613f
 8006004:	08005fc9 	.word	0x08005fc9
 8006008:	08005fc9 	.word	0x08005fc9
 800600c:	08005fc9 	.word	0x08005fc9
 8006010:	0800619f 	.word	0x0800619f
 8006014:	08006177 	.word	0x08006177
 8006018:	08005fc9 	.word	0x08005fc9
 800601c:	08005fc9 	.word	0x08005fc9
 8006020:	0800614d 	.word	0x0800614d
 8006024:	08005fc9 	.word	0x08005fc9
 8006028:	08005fc9 	.word	0x08005fc9
 800602c:	08005fc9 	.word	0x08005fc9
 8006030:	08005fc9 	.word	0x08005fc9
 8006034:	08006105 	.word	0x08006105
 8006038:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800603c:	e7db      	b.n	8005ff6 <_scanf_float+0x8e>
 800603e:	290e      	cmp	r1, #14
 8006040:	d8c2      	bhi.n	8005fc8 <_scanf_float+0x60>
 8006042:	a001      	add	r0, pc, #4	; (adr r0, 8006048 <_scanf_float+0xe0>)
 8006044:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006048:	080060f7 	.word	0x080060f7
 800604c:	08005fc9 	.word	0x08005fc9
 8006050:	080060f7 	.word	0x080060f7
 8006054:	0800618b 	.word	0x0800618b
 8006058:	08005fc9 	.word	0x08005fc9
 800605c:	080060a5 	.word	0x080060a5
 8006060:	080060e1 	.word	0x080060e1
 8006064:	080060e1 	.word	0x080060e1
 8006068:	080060e1 	.word	0x080060e1
 800606c:	080060e1 	.word	0x080060e1
 8006070:	080060e1 	.word	0x080060e1
 8006074:	080060e1 	.word	0x080060e1
 8006078:	080060e1 	.word	0x080060e1
 800607c:	080060e1 	.word	0x080060e1
 8006080:	080060e1 	.word	0x080060e1
 8006084:	2b6e      	cmp	r3, #110	; 0x6e
 8006086:	d809      	bhi.n	800609c <_scanf_float+0x134>
 8006088:	2b60      	cmp	r3, #96	; 0x60
 800608a:	d8b2      	bhi.n	8005ff2 <_scanf_float+0x8a>
 800608c:	2b54      	cmp	r3, #84	; 0x54
 800608e:	d077      	beq.n	8006180 <_scanf_float+0x218>
 8006090:	2b59      	cmp	r3, #89	; 0x59
 8006092:	d199      	bne.n	8005fc8 <_scanf_float+0x60>
 8006094:	2d07      	cmp	r5, #7
 8006096:	d197      	bne.n	8005fc8 <_scanf_float+0x60>
 8006098:	2508      	movs	r5, #8
 800609a:	e029      	b.n	80060f0 <_scanf_float+0x188>
 800609c:	2b74      	cmp	r3, #116	; 0x74
 800609e:	d06f      	beq.n	8006180 <_scanf_float+0x218>
 80060a0:	2b79      	cmp	r3, #121	; 0x79
 80060a2:	e7f6      	b.n	8006092 <_scanf_float+0x12a>
 80060a4:	6821      	ldr	r1, [r4, #0]
 80060a6:	05c8      	lsls	r0, r1, #23
 80060a8:	d51a      	bpl.n	80060e0 <_scanf_float+0x178>
 80060aa:	9b02      	ldr	r3, [sp, #8]
 80060ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80060b0:	6021      	str	r1, [r4, #0]
 80060b2:	f109 0901 	add.w	r9, r9, #1
 80060b6:	b11b      	cbz	r3, 80060c0 <_scanf_float+0x158>
 80060b8:	3b01      	subs	r3, #1
 80060ba:	3201      	adds	r2, #1
 80060bc:	9302      	str	r3, [sp, #8]
 80060be:	60a2      	str	r2, [r4, #8]
 80060c0:	68a3      	ldr	r3, [r4, #8]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	60a3      	str	r3, [r4, #8]
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	3301      	adds	r3, #1
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	607b      	str	r3, [r7, #4]
 80060d4:	f340 8084 	ble.w	80061e0 <_scanf_float+0x278>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	e766      	b.n	8005fae <_scanf_float+0x46>
 80060e0:	eb1a 0f05 	cmn.w	sl, r5
 80060e4:	f47f af70 	bne.w	8005fc8 <_scanf_float+0x60>
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80060ee:	6022      	str	r2, [r4, #0]
 80060f0:	f806 3b01 	strb.w	r3, [r6], #1
 80060f4:	e7e4      	b.n	80060c0 <_scanf_float+0x158>
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	0610      	lsls	r0, r2, #24
 80060fa:	f57f af65 	bpl.w	8005fc8 <_scanf_float+0x60>
 80060fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006102:	e7f4      	b.n	80060ee <_scanf_float+0x186>
 8006104:	f1ba 0f00 	cmp.w	sl, #0
 8006108:	d10e      	bne.n	8006128 <_scanf_float+0x1c0>
 800610a:	f1b9 0f00 	cmp.w	r9, #0
 800610e:	d10e      	bne.n	800612e <_scanf_float+0x1c6>
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006116:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800611a:	d108      	bne.n	800612e <_scanf_float+0x1c6>
 800611c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006120:	6022      	str	r2, [r4, #0]
 8006122:	f04f 0a01 	mov.w	sl, #1
 8006126:	e7e3      	b.n	80060f0 <_scanf_float+0x188>
 8006128:	f1ba 0f02 	cmp.w	sl, #2
 800612c:	d055      	beq.n	80061da <_scanf_float+0x272>
 800612e:	2d01      	cmp	r5, #1
 8006130:	d002      	beq.n	8006138 <_scanf_float+0x1d0>
 8006132:	2d04      	cmp	r5, #4
 8006134:	f47f af48 	bne.w	8005fc8 <_scanf_float+0x60>
 8006138:	3501      	adds	r5, #1
 800613a:	b2ed      	uxtb	r5, r5
 800613c:	e7d8      	b.n	80060f0 <_scanf_float+0x188>
 800613e:	f1ba 0f01 	cmp.w	sl, #1
 8006142:	f47f af41 	bne.w	8005fc8 <_scanf_float+0x60>
 8006146:	f04f 0a02 	mov.w	sl, #2
 800614a:	e7d1      	b.n	80060f0 <_scanf_float+0x188>
 800614c:	b97d      	cbnz	r5, 800616e <_scanf_float+0x206>
 800614e:	f1b9 0f00 	cmp.w	r9, #0
 8006152:	f47f af3c 	bne.w	8005fce <_scanf_float+0x66>
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800615c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006160:	f47f af39 	bne.w	8005fd6 <_scanf_float+0x6e>
 8006164:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006168:	6022      	str	r2, [r4, #0]
 800616a:	2501      	movs	r5, #1
 800616c:	e7c0      	b.n	80060f0 <_scanf_float+0x188>
 800616e:	2d03      	cmp	r5, #3
 8006170:	d0e2      	beq.n	8006138 <_scanf_float+0x1d0>
 8006172:	2d05      	cmp	r5, #5
 8006174:	e7de      	b.n	8006134 <_scanf_float+0x1cc>
 8006176:	2d02      	cmp	r5, #2
 8006178:	f47f af26 	bne.w	8005fc8 <_scanf_float+0x60>
 800617c:	2503      	movs	r5, #3
 800617e:	e7b7      	b.n	80060f0 <_scanf_float+0x188>
 8006180:	2d06      	cmp	r5, #6
 8006182:	f47f af21 	bne.w	8005fc8 <_scanf_float+0x60>
 8006186:	2507      	movs	r5, #7
 8006188:	e7b2      	b.n	80060f0 <_scanf_float+0x188>
 800618a:	6822      	ldr	r2, [r4, #0]
 800618c:	0591      	lsls	r1, r2, #22
 800618e:	f57f af1b 	bpl.w	8005fc8 <_scanf_float+0x60>
 8006192:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006196:	6022      	str	r2, [r4, #0]
 8006198:	f8cd 9004 	str.w	r9, [sp, #4]
 800619c:	e7a8      	b.n	80060f0 <_scanf_float+0x188>
 800619e:	6822      	ldr	r2, [r4, #0]
 80061a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80061a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80061a8:	d006      	beq.n	80061b8 <_scanf_float+0x250>
 80061aa:	0550      	lsls	r0, r2, #21
 80061ac:	f57f af0c 	bpl.w	8005fc8 <_scanf_float+0x60>
 80061b0:	f1b9 0f00 	cmp.w	r9, #0
 80061b4:	f43f af0f 	beq.w	8005fd6 <_scanf_float+0x6e>
 80061b8:	0591      	lsls	r1, r2, #22
 80061ba:	bf58      	it	pl
 80061bc:	9901      	ldrpl	r1, [sp, #4]
 80061be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061c2:	bf58      	it	pl
 80061c4:	eba9 0101 	subpl.w	r1, r9, r1
 80061c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80061cc:	bf58      	it	pl
 80061ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80061d2:	6022      	str	r2, [r4, #0]
 80061d4:	f04f 0900 	mov.w	r9, #0
 80061d8:	e78a      	b.n	80060f0 <_scanf_float+0x188>
 80061da:	f04f 0a03 	mov.w	sl, #3
 80061de:	e787      	b.n	80060f0 <_scanf_float+0x188>
 80061e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80061e4:	4639      	mov	r1, r7
 80061e6:	4640      	mov	r0, r8
 80061e8:	4798      	blx	r3
 80061ea:	2800      	cmp	r0, #0
 80061ec:	f43f aedf 	beq.w	8005fae <_scanf_float+0x46>
 80061f0:	e6ea      	b.n	8005fc8 <_scanf_float+0x60>
 80061f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061fa:	463a      	mov	r2, r7
 80061fc:	4640      	mov	r0, r8
 80061fe:	4798      	blx	r3
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	3b01      	subs	r3, #1
 8006204:	6123      	str	r3, [r4, #16]
 8006206:	e6ec      	b.n	8005fe2 <_scanf_float+0x7a>
 8006208:	1e6b      	subs	r3, r5, #1
 800620a:	2b06      	cmp	r3, #6
 800620c:	d825      	bhi.n	800625a <_scanf_float+0x2f2>
 800620e:	2d02      	cmp	r5, #2
 8006210:	d836      	bhi.n	8006280 <_scanf_float+0x318>
 8006212:	455e      	cmp	r6, fp
 8006214:	f67f aee8 	bls.w	8005fe8 <_scanf_float+0x80>
 8006218:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800621c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006220:	463a      	mov	r2, r7
 8006222:	4640      	mov	r0, r8
 8006224:	4798      	blx	r3
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	3b01      	subs	r3, #1
 800622a:	6123      	str	r3, [r4, #16]
 800622c:	e7f1      	b.n	8006212 <_scanf_float+0x2aa>
 800622e:	9802      	ldr	r0, [sp, #8]
 8006230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006234:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006238:	9002      	str	r0, [sp, #8]
 800623a:	463a      	mov	r2, r7
 800623c:	4640      	mov	r0, r8
 800623e:	4798      	blx	r3
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	3b01      	subs	r3, #1
 8006244:	6123      	str	r3, [r4, #16]
 8006246:	f10a 3aff 	add.w	sl, sl, #4294967295
 800624a:	fa5f fa8a 	uxtb.w	sl, sl
 800624e:	f1ba 0f02 	cmp.w	sl, #2
 8006252:	d1ec      	bne.n	800622e <_scanf_float+0x2c6>
 8006254:	3d03      	subs	r5, #3
 8006256:	b2ed      	uxtb	r5, r5
 8006258:	1b76      	subs	r6, r6, r5
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	05da      	lsls	r2, r3, #23
 800625e:	d52f      	bpl.n	80062c0 <_scanf_float+0x358>
 8006260:	055b      	lsls	r3, r3, #21
 8006262:	d510      	bpl.n	8006286 <_scanf_float+0x31e>
 8006264:	455e      	cmp	r6, fp
 8006266:	f67f aebf 	bls.w	8005fe8 <_scanf_float+0x80>
 800626a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800626e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006272:	463a      	mov	r2, r7
 8006274:	4640      	mov	r0, r8
 8006276:	4798      	blx	r3
 8006278:	6923      	ldr	r3, [r4, #16]
 800627a:	3b01      	subs	r3, #1
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	e7f1      	b.n	8006264 <_scanf_float+0x2fc>
 8006280:	46aa      	mov	sl, r5
 8006282:	9602      	str	r6, [sp, #8]
 8006284:	e7df      	b.n	8006246 <_scanf_float+0x2de>
 8006286:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800628a:	6923      	ldr	r3, [r4, #16]
 800628c:	2965      	cmp	r1, #101	; 0x65
 800628e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006292:	f106 35ff 	add.w	r5, r6, #4294967295
 8006296:	6123      	str	r3, [r4, #16]
 8006298:	d00c      	beq.n	80062b4 <_scanf_float+0x34c>
 800629a:	2945      	cmp	r1, #69	; 0x45
 800629c:	d00a      	beq.n	80062b4 <_scanf_float+0x34c>
 800629e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062a2:	463a      	mov	r2, r7
 80062a4:	4640      	mov	r0, r8
 80062a6:	4798      	blx	r3
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	1eb5      	subs	r5, r6, #2
 80062b2:	6123      	str	r3, [r4, #16]
 80062b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062b8:	463a      	mov	r2, r7
 80062ba:	4640      	mov	r0, r8
 80062bc:	4798      	blx	r3
 80062be:	462e      	mov	r6, r5
 80062c0:	6825      	ldr	r5, [r4, #0]
 80062c2:	f015 0510 	ands.w	r5, r5, #16
 80062c6:	d159      	bne.n	800637c <_scanf_float+0x414>
 80062c8:	7035      	strb	r5, [r6, #0]
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d4:	d11b      	bne.n	800630e <_scanf_float+0x3a6>
 80062d6:	9b01      	ldr	r3, [sp, #4]
 80062d8:	454b      	cmp	r3, r9
 80062da:	eba3 0209 	sub.w	r2, r3, r9
 80062de:	d123      	bne.n	8006328 <_scanf_float+0x3c0>
 80062e0:	2200      	movs	r2, #0
 80062e2:	4659      	mov	r1, fp
 80062e4:	4640      	mov	r0, r8
 80062e6:	f000 ff09 	bl	80070fc <_strtod_r>
 80062ea:	6822      	ldr	r2, [r4, #0]
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	f012 0f02 	tst.w	r2, #2
 80062f2:	ec57 6b10 	vmov	r6, r7, d0
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	d021      	beq.n	800633e <_scanf_float+0x3d6>
 80062fa:	9903      	ldr	r1, [sp, #12]
 80062fc:	1d1a      	adds	r2, r3, #4
 80062fe:	600a      	str	r2, [r1, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	e9c3 6700 	strd	r6, r7, [r3]
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60e3      	str	r3, [r4, #12]
 800630c:	e66d      	b.n	8005fea <_scanf_float+0x82>
 800630e:	9b04      	ldr	r3, [sp, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0e5      	beq.n	80062e0 <_scanf_float+0x378>
 8006314:	9905      	ldr	r1, [sp, #20]
 8006316:	230a      	movs	r3, #10
 8006318:	462a      	mov	r2, r5
 800631a:	3101      	adds	r1, #1
 800631c:	4640      	mov	r0, r8
 800631e:	f000 ff75 	bl	800720c <_strtol_r>
 8006322:	9b04      	ldr	r3, [sp, #16]
 8006324:	9e05      	ldr	r6, [sp, #20]
 8006326:	1ac2      	subs	r2, r0, r3
 8006328:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800632c:	429e      	cmp	r6, r3
 800632e:	bf28      	it	cs
 8006330:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006334:	4912      	ldr	r1, [pc, #72]	; (8006380 <_scanf_float+0x418>)
 8006336:	4630      	mov	r0, r6
 8006338:	f000 f82c 	bl	8006394 <siprintf>
 800633c:	e7d0      	b.n	80062e0 <_scanf_float+0x378>
 800633e:	9903      	ldr	r1, [sp, #12]
 8006340:	f012 0f04 	tst.w	r2, #4
 8006344:	f103 0204 	add.w	r2, r3, #4
 8006348:	600a      	str	r2, [r1, #0]
 800634a:	d1d9      	bne.n	8006300 <_scanf_float+0x398>
 800634c:	f8d3 8000 	ldr.w	r8, [r3]
 8006350:	ee10 2a10 	vmov	r2, s0
 8006354:	ee10 0a10 	vmov	r0, s0
 8006358:	463b      	mov	r3, r7
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa fbfe 	bl	8000b5c <__aeabi_dcmpun>
 8006360:	b128      	cbz	r0, 800636e <_scanf_float+0x406>
 8006362:	4808      	ldr	r0, [pc, #32]	; (8006384 <_scanf_float+0x41c>)
 8006364:	f000 f810 	bl	8006388 <nanf>
 8006368:	ed88 0a00 	vstr	s0, [r8]
 800636c:	e7cb      	b.n	8006306 <_scanf_float+0x39e>
 800636e:	4630      	mov	r0, r6
 8006370:	4639      	mov	r1, r7
 8006372:	f7fa fc51 	bl	8000c18 <__aeabi_d2f>
 8006376:	f8c8 0000 	str.w	r0, [r8]
 800637a:	e7c4      	b.n	8006306 <_scanf_float+0x39e>
 800637c:	2500      	movs	r5, #0
 800637e:	e634      	b.n	8005fea <_scanf_float+0x82>
 8006380:	0800c5f2 	.word	0x0800c5f2
 8006384:	0800ca13 	.word	0x0800ca13

08006388 <nanf>:
 8006388:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006390 <nanf+0x8>
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	7fc00000 	.word	0x7fc00000

08006394 <siprintf>:
 8006394:	b40e      	push	{r1, r2, r3}
 8006396:	b500      	push	{lr}
 8006398:	b09c      	sub	sp, #112	; 0x70
 800639a:	ab1d      	add	r3, sp, #116	; 0x74
 800639c:	9002      	str	r0, [sp, #8]
 800639e:	9006      	str	r0, [sp, #24]
 80063a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063a4:	4809      	ldr	r0, [pc, #36]	; (80063cc <siprintf+0x38>)
 80063a6:	9107      	str	r1, [sp, #28]
 80063a8:	9104      	str	r1, [sp, #16]
 80063aa:	4909      	ldr	r1, [pc, #36]	; (80063d0 <siprintf+0x3c>)
 80063ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b0:	9105      	str	r1, [sp, #20]
 80063b2:	6800      	ldr	r0, [r0, #0]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	a902      	add	r1, sp, #8
 80063b8:	f002 ff8a 	bl	80092d0 <_svfiprintf_r>
 80063bc:	9b02      	ldr	r3, [sp, #8]
 80063be:	2200      	movs	r2, #0
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	b01c      	add	sp, #112	; 0x70
 80063c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c8:	b003      	add	sp, #12
 80063ca:	4770      	bx	lr
 80063cc:	20000018 	.word	0x20000018
 80063d0:	ffff0208 	.word	0xffff0208

080063d4 <siscanf>:
 80063d4:	b40e      	push	{r1, r2, r3}
 80063d6:	b510      	push	{r4, lr}
 80063d8:	b09f      	sub	sp, #124	; 0x7c
 80063da:	ac21      	add	r4, sp, #132	; 0x84
 80063dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80063e0:	f854 2b04 	ldr.w	r2, [r4], #4
 80063e4:	9201      	str	r2, [sp, #4]
 80063e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80063ea:	9004      	str	r0, [sp, #16]
 80063ec:	9008      	str	r0, [sp, #32]
 80063ee:	f7f9 ff01 	bl	80001f4 <strlen>
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <siscanf+0x50>)
 80063f4:	9005      	str	r0, [sp, #20]
 80063f6:	9009      	str	r0, [sp, #36]	; 0x24
 80063f8:	930d      	str	r3, [sp, #52]	; 0x34
 80063fa:	480b      	ldr	r0, [pc, #44]	; (8006428 <siscanf+0x54>)
 80063fc:	9a01      	ldr	r2, [sp, #4]
 80063fe:	6800      	ldr	r0, [r0, #0]
 8006400:	9403      	str	r4, [sp, #12]
 8006402:	2300      	movs	r3, #0
 8006404:	9311      	str	r3, [sp, #68]	; 0x44
 8006406:	9316      	str	r3, [sp, #88]	; 0x58
 8006408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800640c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006410:	a904      	add	r1, sp, #16
 8006412:	4623      	mov	r3, r4
 8006414:	f003 f8b6 	bl	8009584 <__ssvfiscanf_r>
 8006418:	b01f      	add	sp, #124	; 0x7c
 800641a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800641e:	b003      	add	sp, #12
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	0800644f 	.word	0x0800644f
 8006428:	20000018 	.word	0x20000018

0800642c <__sread>:
 800642c:	b510      	push	{r4, lr}
 800642e:	460c      	mov	r4, r1
 8006430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006434:	f003 fb70 	bl	8009b18 <_read_r>
 8006438:	2800      	cmp	r0, #0
 800643a:	bfab      	itete	ge
 800643c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800643e:	89a3      	ldrhlt	r3, [r4, #12]
 8006440:	181b      	addge	r3, r3, r0
 8006442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006446:	bfac      	ite	ge
 8006448:	6563      	strge	r3, [r4, #84]	; 0x54
 800644a:	81a3      	strhlt	r3, [r4, #12]
 800644c:	bd10      	pop	{r4, pc}

0800644e <__seofread>:
 800644e:	2000      	movs	r0, #0
 8006450:	4770      	bx	lr

08006452 <__swrite>:
 8006452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006456:	461f      	mov	r7, r3
 8006458:	898b      	ldrh	r3, [r1, #12]
 800645a:	05db      	lsls	r3, r3, #23
 800645c:	4605      	mov	r5, r0
 800645e:	460c      	mov	r4, r1
 8006460:	4616      	mov	r6, r2
 8006462:	d505      	bpl.n	8006470 <__swrite+0x1e>
 8006464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006468:	2302      	movs	r3, #2
 800646a:	2200      	movs	r2, #0
 800646c:	f002 f8e2 	bl	8008634 <_lseek_r>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	4632      	mov	r2, r6
 800647e:	463b      	mov	r3, r7
 8006480:	4628      	mov	r0, r5
 8006482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006486:	f000 bec3 	b.w	8007210 <_write_r>

0800648a <__sseek>:
 800648a:	b510      	push	{r4, lr}
 800648c:	460c      	mov	r4, r1
 800648e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006492:	f002 f8cf 	bl	8008634 <_lseek_r>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	bf15      	itete	ne
 800649c:	6560      	strne	r0, [r4, #84]	; 0x54
 800649e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064a6:	81a3      	strheq	r3, [r4, #12]
 80064a8:	bf18      	it	ne
 80064aa:	81a3      	strhne	r3, [r4, #12]
 80064ac:	bd10      	pop	{r4, pc}

080064ae <__sclose>:
 80064ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b2:	f000 bebf 	b.w	8007234 <_close_r>

080064b6 <sulp>:
 80064b6:	b570      	push	{r4, r5, r6, lr}
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	ec45 4b10 	vmov	d0, r4, r5
 80064c0:	4616      	mov	r6, r2
 80064c2:	f002 fc63 	bl	8008d8c <__ulp>
 80064c6:	ec51 0b10 	vmov	r0, r1, d0
 80064ca:	b17e      	cbz	r6, 80064ec <sulp+0x36>
 80064cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80064d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dd09      	ble.n	80064ec <sulp+0x36>
 80064d8:	051b      	lsls	r3, r3, #20
 80064da:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80064de:	2400      	movs	r4, #0
 80064e0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80064e4:	4622      	mov	r2, r4
 80064e6:	462b      	mov	r3, r5
 80064e8:	f7fa f89e 	bl	8000628 <__aeabi_dmul>
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080064f0 <_strtod_l>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	ed2d 8b02 	vpush	{d8}
 80064f8:	b09d      	sub	sp, #116	; 0x74
 80064fa:	461f      	mov	r7, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	9318      	str	r3, [sp, #96]	; 0x60
 8006500:	4ba2      	ldr	r3, [pc, #648]	; (800678c <_strtod_l+0x29c>)
 8006502:	9213      	str	r2, [sp, #76]	; 0x4c
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	9305      	str	r3, [sp, #20]
 8006508:	4604      	mov	r4, r0
 800650a:	4618      	mov	r0, r3
 800650c:	4688      	mov	r8, r1
 800650e:	f7f9 fe71 	bl	80001f4 <strlen>
 8006512:	f04f 0a00 	mov.w	sl, #0
 8006516:	4605      	mov	r5, r0
 8006518:	f04f 0b00 	mov.w	fp, #0
 800651c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006522:	781a      	ldrb	r2, [r3, #0]
 8006524:	2a2b      	cmp	r2, #43	; 0x2b
 8006526:	d04e      	beq.n	80065c6 <_strtod_l+0xd6>
 8006528:	d83b      	bhi.n	80065a2 <_strtod_l+0xb2>
 800652a:	2a0d      	cmp	r2, #13
 800652c:	d834      	bhi.n	8006598 <_strtod_l+0xa8>
 800652e:	2a08      	cmp	r2, #8
 8006530:	d834      	bhi.n	800659c <_strtod_l+0xac>
 8006532:	2a00      	cmp	r2, #0
 8006534:	d03e      	beq.n	80065b4 <_strtod_l+0xc4>
 8006536:	2300      	movs	r3, #0
 8006538:	930a      	str	r3, [sp, #40]	; 0x28
 800653a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800653c:	7833      	ldrb	r3, [r6, #0]
 800653e:	2b30      	cmp	r3, #48	; 0x30
 8006540:	f040 80b0 	bne.w	80066a4 <_strtod_l+0x1b4>
 8006544:	7873      	ldrb	r3, [r6, #1]
 8006546:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800654a:	2b58      	cmp	r3, #88	; 0x58
 800654c:	d168      	bne.n	8006620 <_strtod_l+0x130>
 800654e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	ab18      	add	r3, sp, #96	; 0x60
 8006554:	9702      	str	r7, [sp, #8]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	4a8d      	ldr	r2, [pc, #564]	; (8006790 <_strtod_l+0x2a0>)
 800655a:	ab19      	add	r3, sp, #100	; 0x64
 800655c:	a917      	add	r1, sp, #92	; 0x5c
 800655e:	4620      	mov	r0, r4
 8006560:	f001 fd5c 	bl	800801c <__gethex>
 8006564:	f010 0707 	ands.w	r7, r0, #7
 8006568:	4605      	mov	r5, r0
 800656a:	d005      	beq.n	8006578 <_strtod_l+0x88>
 800656c:	2f06      	cmp	r7, #6
 800656e:	d12c      	bne.n	80065ca <_strtod_l+0xda>
 8006570:	3601      	adds	r6, #1
 8006572:	2300      	movs	r3, #0
 8006574:	9617      	str	r6, [sp, #92]	; 0x5c
 8006576:	930a      	str	r3, [sp, #40]	; 0x28
 8006578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 8590 	bne.w	80070a0 <_strtod_l+0xbb0>
 8006580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006582:	b1eb      	cbz	r3, 80065c0 <_strtod_l+0xd0>
 8006584:	4652      	mov	r2, sl
 8006586:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800658a:	ec43 2b10 	vmov	d0, r2, r3
 800658e:	b01d      	add	sp, #116	; 0x74
 8006590:	ecbd 8b02 	vpop	{d8}
 8006594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006598:	2a20      	cmp	r2, #32
 800659a:	d1cc      	bne.n	8006536 <_strtod_l+0x46>
 800659c:	3301      	adds	r3, #1
 800659e:	9317      	str	r3, [sp, #92]	; 0x5c
 80065a0:	e7be      	b.n	8006520 <_strtod_l+0x30>
 80065a2:	2a2d      	cmp	r2, #45	; 0x2d
 80065a4:	d1c7      	bne.n	8006536 <_strtod_l+0x46>
 80065a6:	2201      	movs	r2, #1
 80065a8:	920a      	str	r2, [sp, #40]	; 0x28
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1c2      	bne.n	800653a <_strtod_l+0x4a>
 80065b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065b6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f040 856e 	bne.w	800709c <_strtod_l+0xbac>
 80065c0:	4652      	mov	r2, sl
 80065c2:	465b      	mov	r3, fp
 80065c4:	e7e1      	b.n	800658a <_strtod_l+0x9a>
 80065c6:	2200      	movs	r2, #0
 80065c8:	e7ee      	b.n	80065a8 <_strtod_l+0xb8>
 80065ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80065cc:	b13a      	cbz	r2, 80065de <_strtod_l+0xee>
 80065ce:	2135      	movs	r1, #53	; 0x35
 80065d0:	a81a      	add	r0, sp, #104	; 0x68
 80065d2:	f002 fce6 	bl	8008fa2 <__copybits>
 80065d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065d8:	4620      	mov	r0, r4
 80065da:	f002 f8a5 	bl	8008728 <_Bfree>
 80065de:	3f01      	subs	r7, #1
 80065e0:	2f04      	cmp	r7, #4
 80065e2:	d806      	bhi.n	80065f2 <_strtod_l+0x102>
 80065e4:	e8df f007 	tbb	[pc, r7]
 80065e8:	1714030a 	.word	0x1714030a
 80065ec:	0a          	.byte	0x0a
 80065ed:	00          	.byte	0x00
 80065ee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80065f2:	0728      	lsls	r0, r5, #28
 80065f4:	d5c0      	bpl.n	8006578 <_strtod_l+0x88>
 80065f6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80065fa:	e7bd      	b.n	8006578 <_strtod_l+0x88>
 80065fc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006600:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006602:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006606:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800660a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800660e:	e7f0      	b.n	80065f2 <_strtod_l+0x102>
 8006610:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006794 <_strtod_l+0x2a4>
 8006614:	e7ed      	b.n	80065f2 <_strtod_l+0x102>
 8006616:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800661a:	f04f 3aff 	mov.w	sl, #4294967295
 800661e:	e7e8      	b.n	80065f2 <_strtod_l+0x102>
 8006620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	9217      	str	r2, [sp, #92]	; 0x5c
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	2b30      	cmp	r3, #48	; 0x30
 800662a:	d0f9      	beq.n	8006620 <_strtod_l+0x130>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0a3      	beq.n	8006578 <_strtod_l+0x88>
 8006630:	2301      	movs	r3, #1
 8006632:	f04f 0900 	mov.w	r9, #0
 8006636:	9304      	str	r3, [sp, #16]
 8006638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800663a:	9308      	str	r3, [sp, #32]
 800663c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006640:	464f      	mov	r7, r9
 8006642:	220a      	movs	r2, #10
 8006644:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006646:	7806      	ldrb	r6, [r0, #0]
 8006648:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800664c:	b2d9      	uxtb	r1, r3
 800664e:	2909      	cmp	r1, #9
 8006650:	d92a      	bls.n	80066a8 <_strtod_l+0x1b8>
 8006652:	9905      	ldr	r1, [sp, #20]
 8006654:	462a      	mov	r2, r5
 8006656:	f003 fac3 	bl	8009be0 <strncmp>
 800665a:	b398      	cbz	r0, 80066c4 <_strtod_l+0x1d4>
 800665c:	2000      	movs	r0, #0
 800665e:	4632      	mov	r2, r6
 8006660:	463d      	mov	r5, r7
 8006662:	9005      	str	r0, [sp, #20]
 8006664:	4603      	mov	r3, r0
 8006666:	2a65      	cmp	r2, #101	; 0x65
 8006668:	d001      	beq.n	800666e <_strtod_l+0x17e>
 800666a:	2a45      	cmp	r2, #69	; 0x45
 800666c:	d118      	bne.n	80066a0 <_strtod_l+0x1b0>
 800666e:	b91d      	cbnz	r5, 8006678 <_strtod_l+0x188>
 8006670:	9a04      	ldr	r2, [sp, #16]
 8006672:	4302      	orrs	r2, r0
 8006674:	d09e      	beq.n	80065b4 <_strtod_l+0xc4>
 8006676:	2500      	movs	r5, #0
 8006678:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800667c:	f108 0201 	add.w	r2, r8, #1
 8006680:	9217      	str	r2, [sp, #92]	; 0x5c
 8006682:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006686:	2a2b      	cmp	r2, #43	; 0x2b
 8006688:	d075      	beq.n	8006776 <_strtod_l+0x286>
 800668a:	2a2d      	cmp	r2, #45	; 0x2d
 800668c:	d07b      	beq.n	8006786 <_strtod_l+0x296>
 800668e:	f04f 0c00 	mov.w	ip, #0
 8006692:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006696:	2909      	cmp	r1, #9
 8006698:	f240 8082 	bls.w	80067a0 <_strtod_l+0x2b0>
 800669c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80066a0:	2600      	movs	r6, #0
 80066a2:	e09d      	b.n	80067e0 <_strtod_l+0x2f0>
 80066a4:	2300      	movs	r3, #0
 80066a6:	e7c4      	b.n	8006632 <_strtod_l+0x142>
 80066a8:	2f08      	cmp	r7, #8
 80066aa:	bfd8      	it	le
 80066ac:	9907      	ldrle	r1, [sp, #28]
 80066ae:	f100 0001 	add.w	r0, r0, #1
 80066b2:	bfda      	itte	le
 80066b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80066b8:	9307      	strle	r3, [sp, #28]
 80066ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 80066be:	3701      	adds	r7, #1
 80066c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80066c2:	e7bf      	b.n	8006644 <_strtod_l+0x154>
 80066c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066c6:	195a      	adds	r2, r3, r5
 80066c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80066ca:	5d5a      	ldrb	r2, [r3, r5]
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	d037      	beq.n	8006740 <_strtod_l+0x250>
 80066d0:	9005      	str	r0, [sp, #20]
 80066d2:	463d      	mov	r5, r7
 80066d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80066d8:	2b09      	cmp	r3, #9
 80066da:	d912      	bls.n	8006702 <_strtod_l+0x212>
 80066dc:	2301      	movs	r3, #1
 80066de:	e7c2      	b.n	8006666 <_strtod_l+0x176>
 80066e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80066e6:	785a      	ldrb	r2, [r3, #1]
 80066e8:	3001      	adds	r0, #1
 80066ea:	2a30      	cmp	r2, #48	; 0x30
 80066ec:	d0f8      	beq.n	80066e0 <_strtod_l+0x1f0>
 80066ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	f200 84d9 	bhi.w	80070aa <_strtod_l+0xbba>
 80066f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066fa:	9005      	str	r0, [sp, #20]
 80066fc:	2000      	movs	r0, #0
 80066fe:	9308      	str	r3, [sp, #32]
 8006700:	4605      	mov	r5, r0
 8006702:	3a30      	subs	r2, #48	; 0x30
 8006704:	f100 0301 	add.w	r3, r0, #1
 8006708:	d014      	beq.n	8006734 <_strtod_l+0x244>
 800670a:	9905      	ldr	r1, [sp, #20]
 800670c:	4419      	add	r1, r3
 800670e:	9105      	str	r1, [sp, #20]
 8006710:	462b      	mov	r3, r5
 8006712:	eb00 0e05 	add.w	lr, r0, r5
 8006716:	210a      	movs	r1, #10
 8006718:	4573      	cmp	r3, lr
 800671a:	d113      	bne.n	8006744 <_strtod_l+0x254>
 800671c:	182b      	adds	r3, r5, r0
 800671e:	2b08      	cmp	r3, #8
 8006720:	f105 0501 	add.w	r5, r5, #1
 8006724:	4405      	add	r5, r0
 8006726:	dc1c      	bgt.n	8006762 <_strtod_l+0x272>
 8006728:	9907      	ldr	r1, [sp, #28]
 800672a:	230a      	movs	r3, #10
 800672c:	fb03 2301 	mla	r3, r3, r1, r2
 8006730:	9307      	str	r3, [sp, #28]
 8006732:	2300      	movs	r3, #0
 8006734:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006736:	1c51      	adds	r1, r2, #1
 8006738:	9117      	str	r1, [sp, #92]	; 0x5c
 800673a:	7852      	ldrb	r2, [r2, #1]
 800673c:	4618      	mov	r0, r3
 800673e:	e7c9      	b.n	80066d4 <_strtod_l+0x1e4>
 8006740:	4638      	mov	r0, r7
 8006742:	e7d2      	b.n	80066ea <_strtod_l+0x1fa>
 8006744:	2b08      	cmp	r3, #8
 8006746:	dc04      	bgt.n	8006752 <_strtod_l+0x262>
 8006748:	9e07      	ldr	r6, [sp, #28]
 800674a:	434e      	muls	r6, r1
 800674c:	9607      	str	r6, [sp, #28]
 800674e:	3301      	adds	r3, #1
 8006750:	e7e2      	b.n	8006718 <_strtod_l+0x228>
 8006752:	f103 0c01 	add.w	ip, r3, #1
 8006756:	f1bc 0f10 	cmp.w	ip, #16
 800675a:	bfd8      	it	le
 800675c:	fb01 f909 	mulle.w	r9, r1, r9
 8006760:	e7f5      	b.n	800674e <_strtod_l+0x25e>
 8006762:	2d10      	cmp	r5, #16
 8006764:	bfdc      	itt	le
 8006766:	230a      	movle	r3, #10
 8006768:	fb03 2909 	mlale	r9, r3, r9, r2
 800676c:	e7e1      	b.n	8006732 <_strtod_l+0x242>
 800676e:	2300      	movs	r3, #0
 8006770:	9305      	str	r3, [sp, #20]
 8006772:	2301      	movs	r3, #1
 8006774:	e77c      	b.n	8006670 <_strtod_l+0x180>
 8006776:	f04f 0c00 	mov.w	ip, #0
 800677a:	f108 0202 	add.w	r2, r8, #2
 800677e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006780:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006784:	e785      	b.n	8006692 <_strtod_l+0x1a2>
 8006786:	f04f 0c01 	mov.w	ip, #1
 800678a:	e7f6      	b.n	800677a <_strtod_l+0x28a>
 800678c:	0800c840 	.word	0x0800c840
 8006790:	0800c5f8 	.word	0x0800c5f8
 8006794:	7ff00000 	.word	0x7ff00000
 8006798:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800679a:	1c51      	adds	r1, r2, #1
 800679c:	9117      	str	r1, [sp, #92]	; 0x5c
 800679e:	7852      	ldrb	r2, [r2, #1]
 80067a0:	2a30      	cmp	r2, #48	; 0x30
 80067a2:	d0f9      	beq.n	8006798 <_strtod_l+0x2a8>
 80067a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80067a8:	2908      	cmp	r1, #8
 80067aa:	f63f af79 	bhi.w	80066a0 <_strtod_l+0x1b0>
 80067ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80067b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067b4:	9206      	str	r2, [sp, #24]
 80067b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067b8:	1c51      	adds	r1, r2, #1
 80067ba:	9117      	str	r1, [sp, #92]	; 0x5c
 80067bc:	7852      	ldrb	r2, [r2, #1]
 80067be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80067c2:	2e09      	cmp	r6, #9
 80067c4:	d937      	bls.n	8006836 <_strtod_l+0x346>
 80067c6:	9e06      	ldr	r6, [sp, #24]
 80067c8:	1b89      	subs	r1, r1, r6
 80067ca:	2908      	cmp	r1, #8
 80067cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80067d0:	dc02      	bgt.n	80067d8 <_strtod_l+0x2e8>
 80067d2:	4576      	cmp	r6, lr
 80067d4:	bfa8      	it	ge
 80067d6:	4676      	movge	r6, lr
 80067d8:	f1bc 0f00 	cmp.w	ip, #0
 80067dc:	d000      	beq.n	80067e0 <_strtod_l+0x2f0>
 80067de:	4276      	negs	r6, r6
 80067e0:	2d00      	cmp	r5, #0
 80067e2:	d14d      	bne.n	8006880 <_strtod_l+0x390>
 80067e4:	9904      	ldr	r1, [sp, #16]
 80067e6:	4301      	orrs	r1, r0
 80067e8:	f47f aec6 	bne.w	8006578 <_strtod_l+0x88>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f47f aee1 	bne.w	80065b4 <_strtod_l+0xc4>
 80067f2:	2a69      	cmp	r2, #105	; 0x69
 80067f4:	d027      	beq.n	8006846 <_strtod_l+0x356>
 80067f6:	dc24      	bgt.n	8006842 <_strtod_l+0x352>
 80067f8:	2a49      	cmp	r2, #73	; 0x49
 80067fa:	d024      	beq.n	8006846 <_strtod_l+0x356>
 80067fc:	2a4e      	cmp	r2, #78	; 0x4e
 80067fe:	f47f aed9 	bne.w	80065b4 <_strtod_l+0xc4>
 8006802:	499f      	ldr	r1, [pc, #636]	; (8006a80 <_strtod_l+0x590>)
 8006804:	a817      	add	r0, sp, #92	; 0x5c
 8006806:	f001 fe61 	bl	80084cc <__match>
 800680a:	2800      	cmp	r0, #0
 800680c:	f43f aed2 	beq.w	80065b4 <_strtod_l+0xc4>
 8006810:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b28      	cmp	r3, #40	; 0x28
 8006816:	d12d      	bne.n	8006874 <_strtod_l+0x384>
 8006818:	499a      	ldr	r1, [pc, #616]	; (8006a84 <_strtod_l+0x594>)
 800681a:	aa1a      	add	r2, sp, #104	; 0x68
 800681c:	a817      	add	r0, sp, #92	; 0x5c
 800681e:	f001 fe69 	bl	80084f4 <__hexnan>
 8006822:	2805      	cmp	r0, #5
 8006824:	d126      	bne.n	8006874 <_strtod_l+0x384>
 8006826:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006828:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800682c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006830:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006834:	e6a0      	b.n	8006578 <_strtod_l+0x88>
 8006836:	210a      	movs	r1, #10
 8006838:	fb01 2e0e 	mla	lr, r1, lr, r2
 800683c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006840:	e7b9      	b.n	80067b6 <_strtod_l+0x2c6>
 8006842:	2a6e      	cmp	r2, #110	; 0x6e
 8006844:	e7db      	b.n	80067fe <_strtod_l+0x30e>
 8006846:	4990      	ldr	r1, [pc, #576]	; (8006a88 <_strtod_l+0x598>)
 8006848:	a817      	add	r0, sp, #92	; 0x5c
 800684a:	f001 fe3f 	bl	80084cc <__match>
 800684e:	2800      	cmp	r0, #0
 8006850:	f43f aeb0 	beq.w	80065b4 <_strtod_l+0xc4>
 8006854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006856:	498d      	ldr	r1, [pc, #564]	; (8006a8c <_strtod_l+0x59c>)
 8006858:	3b01      	subs	r3, #1
 800685a:	a817      	add	r0, sp, #92	; 0x5c
 800685c:	9317      	str	r3, [sp, #92]	; 0x5c
 800685e:	f001 fe35 	bl	80084cc <__match>
 8006862:	b910      	cbnz	r0, 800686a <_strtod_l+0x37a>
 8006864:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006866:	3301      	adds	r3, #1
 8006868:	9317      	str	r3, [sp, #92]	; 0x5c
 800686a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006a9c <_strtod_l+0x5ac>
 800686e:	f04f 0a00 	mov.w	sl, #0
 8006872:	e681      	b.n	8006578 <_strtod_l+0x88>
 8006874:	4886      	ldr	r0, [pc, #536]	; (8006a90 <_strtod_l+0x5a0>)
 8006876:	f003 f963 	bl	8009b40 <nan>
 800687a:	ec5b ab10 	vmov	sl, fp, d0
 800687e:	e67b      	b.n	8006578 <_strtod_l+0x88>
 8006880:	9b05      	ldr	r3, [sp, #20]
 8006882:	9807      	ldr	r0, [sp, #28]
 8006884:	1af3      	subs	r3, r6, r3
 8006886:	2f00      	cmp	r7, #0
 8006888:	bf08      	it	eq
 800688a:	462f      	moveq	r7, r5
 800688c:	2d10      	cmp	r5, #16
 800688e:	9306      	str	r3, [sp, #24]
 8006890:	46a8      	mov	r8, r5
 8006892:	bfa8      	it	ge
 8006894:	f04f 0810 	movge.w	r8, #16
 8006898:	f7f9 fe4c 	bl	8000534 <__aeabi_ui2d>
 800689c:	2d09      	cmp	r5, #9
 800689e:	4682      	mov	sl, r0
 80068a0:	468b      	mov	fp, r1
 80068a2:	dd13      	ble.n	80068cc <_strtod_l+0x3dc>
 80068a4:	4b7b      	ldr	r3, [pc, #492]	; (8006a94 <_strtod_l+0x5a4>)
 80068a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80068aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80068ae:	f7f9 febb 	bl	8000628 <__aeabi_dmul>
 80068b2:	4682      	mov	sl, r0
 80068b4:	4648      	mov	r0, r9
 80068b6:	468b      	mov	fp, r1
 80068b8:	f7f9 fe3c 	bl	8000534 <__aeabi_ui2d>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4650      	mov	r0, sl
 80068c2:	4659      	mov	r1, fp
 80068c4:	f7f9 fcfa 	bl	80002bc <__adddf3>
 80068c8:	4682      	mov	sl, r0
 80068ca:	468b      	mov	fp, r1
 80068cc:	2d0f      	cmp	r5, #15
 80068ce:	dc38      	bgt.n	8006942 <_strtod_l+0x452>
 80068d0:	9b06      	ldr	r3, [sp, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f43f ae50 	beq.w	8006578 <_strtod_l+0x88>
 80068d8:	dd24      	ble.n	8006924 <_strtod_l+0x434>
 80068da:	2b16      	cmp	r3, #22
 80068dc:	dc0b      	bgt.n	80068f6 <_strtod_l+0x406>
 80068de:	496d      	ldr	r1, [pc, #436]	; (8006a94 <_strtod_l+0x5a4>)
 80068e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068e8:	4652      	mov	r2, sl
 80068ea:	465b      	mov	r3, fp
 80068ec:	f7f9 fe9c 	bl	8000628 <__aeabi_dmul>
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	e640      	b.n	8006578 <_strtod_l+0x88>
 80068f6:	9a06      	ldr	r2, [sp, #24]
 80068f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80068fc:	4293      	cmp	r3, r2
 80068fe:	db20      	blt.n	8006942 <_strtod_l+0x452>
 8006900:	4c64      	ldr	r4, [pc, #400]	; (8006a94 <_strtod_l+0x5a4>)
 8006902:	f1c5 050f 	rsb	r5, r5, #15
 8006906:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800690a:	4652      	mov	r2, sl
 800690c:	465b      	mov	r3, fp
 800690e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006912:	f7f9 fe89 	bl	8000628 <__aeabi_dmul>
 8006916:	9b06      	ldr	r3, [sp, #24]
 8006918:	1b5d      	subs	r5, r3, r5
 800691a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800691e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006922:	e7e3      	b.n	80068ec <_strtod_l+0x3fc>
 8006924:	9b06      	ldr	r3, [sp, #24]
 8006926:	3316      	adds	r3, #22
 8006928:	db0b      	blt.n	8006942 <_strtod_l+0x452>
 800692a:	9b05      	ldr	r3, [sp, #20]
 800692c:	1b9e      	subs	r6, r3, r6
 800692e:	4b59      	ldr	r3, [pc, #356]	; (8006a94 <_strtod_l+0x5a4>)
 8006930:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006934:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006938:	4650      	mov	r0, sl
 800693a:	4659      	mov	r1, fp
 800693c:	f7f9 ff9e 	bl	800087c <__aeabi_ddiv>
 8006940:	e7d6      	b.n	80068f0 <_strtod_l+0x400>
 8006942:	9b06      	ldr	r3, [sp, #24]
 8006944:	eba5 0808 	sub.w	r8, r5, r8
 8006948:	4498      	add	r8, r3
 800694a:	f1b8 0f00 	cmp.w	r8, #0
 800694e:	dd74      	ble.n	8006a3a <_strtod_l+0x54a>
 8006950:	f018 030f 	ands.w	r3, r8, #15
 8006954:	d00a      	beq.n	800696c <_strtod_l+0x47c>
 8006956:	494f      	ldr	r1, [pc, #316]	; (8006a94 <_strtod_l+0x5a4>)
 8006958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800695c:	4652      	mov	r2, sl
 800695e:	465b      	mov	r3, fp
 8006960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006964:	f7f9 fe60 	bl	8000628 <__aeabi_dmul>
 8006968:	4682      	mov	sl, r0
 800696a:	468b      	mov	fp, r1
 800696c:	f038 080f 	bics.w	r8, r8, #15
 8006970:	d04f      	beq.n	8006a12 <_strtod_l+0x522>
 8006972:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006976:	dd22      	ble.n	80069be <_strtod_l+0x4ce>
 8006978:	2500      	movs	r5, #0
 800697a:	462e      	mov	r6, r5
 800697c:	9507      	str	r5, [sp, #28]
 800697e:	9505      	str	r5, [sp, #20]
 8006980:	2322      	movs	r3, #34	; 0x22
 8006982:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006a9c <_strtod_l+0x5ac>
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	f04f 0a00 	mov.w	sl, #0
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f43f adf2 	beq.w	8006578 <_strtod_l+0x88>
 8006994:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006996:	4620      	mov	r0, r4
 8006998:	f001 fec6 	bl	8008728 <_Bfree>
 800699c:	9905      	ldr	r1, [sp, #20]
 800699e:	4620      	mov	r0, r4
 80069a0:	f001 fec2 	bl	8008728 <_Bfree>
 80069a4:	4631      	mov	r1, r6
 80069a6:	4620      	mov	r0, r4
 80069a8:	f001 febe 	bl	8008728 <_Bfree>
 80069ac:	9907      	ldr	r1, [sp, #28]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f001 feba 	bl	8008728 <_Bfree>
 80069b4:	4629      	mov	r1, r5
 80069b6:	4620      	mov	r0, r4
 80069b8:	f001 feb6 	bl	8008728 <_Bfree>
 80069bc:	e5dc      	b.n	8006578 <_strtod_l+0x88>
 80069be:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <_strtod_l+0x5a8>)
 80069c0:	9304      	str	r3, [sp, #16]
 80069c2:	2300      	movs	r3, #0
 80069c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80069c8:	4650      	mov	r0, sl
 80069ca:	4659      	mov	r1, fp
 80069cc:	4699      	mov	r9, r3
 80069ce:	f1b8 0f01 	cmp.w	r8, #1
 80069d2:	dc21      	bgt.n	8006a18 <_strtod_l+0x528>
 80069d4:	b10b      	cbz	r3, 80069da <_strtod_l+0x4ea>
 80069d6:	4682      	mov	sl, r0
 80069d8:	468b      	mov	fp, r1
 80069da:	4b2f      	ldr	r3, [pc, #188]	; (8006a98 <_strtod_l+0x5a8>)
 80069dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80069e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80069e4:	4652      	mov	r2, sl
 80069e6:	465b      	mov	r3, fp
 80069e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80069ec:	f7f9 fe1c 	bl	8000628 <__aeabi_dmul>
 80069f0:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <_strtod_l+0x5ac>)
 80069f2:	460a      	mov	r2, r1
 80069f4:	400b      	ands	r3, r1
 80069f6:	492a      	ldr	r1, [pc, #168]	; (8006aa0 <_strtod_l+0x5b0>)
 80069f8:	428b      	cmp	r3, r1
 80069fa:	4682      	mov	sl, r0
 80069fc:	d8bc      	bhi.n	8006978 <_strtod_l+0x488>
 80069fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a02:	428b      	cmp	r3, r1
 8006a04:	bf86      	itte	hi
 8006a06:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006aa4 <_strtod_l+0x5b4>
 8006a0a:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a0e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006a12:	2300      	movs	r3, #0
 8006a14:	9304      	str	r3, [sp, #16]
 8006a16:	e084      	b.n	8006b22 <_strtod_l+0x632>
 8006a18:	f018 0f01 	tst.w	r8, #1
 8006a1c:	d005      	beq.n	8006a2a <_strtod_l+0x53a>
 8006a1e:	9b04      	ldr	r3, [sp, #16]
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fe00 	bl	8000628 <__aeabi_dmul>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	9a04      	ldr	r2, [sp, #16]
 8006a2c:	3208      	adds	r2, #8
 8006a2e:	f109 0901 	add.w	r9, r9, #1
 8006a32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006a36:	9204      	str	r2, [sp, #16]
 8006a38:	e7c9      	b.n	80069ce <_strtod_l+0x4de>
 8006a3a:	d0ea      	beq.n	8006a12 <_strtod_l+0x522>
 8006a3c:	f1c8 0800 	rsb	r8, r8, #0
 8006a40:	f018 020f 	ands.w	r2, r8, #15
 8006a44:	d00a      	beq.n	8006a5c <_strtod_l+0x56c>
 8006a46:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <_strtod_l+0x5a4>)
 8006a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	4659      	mov	r1, fp
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f7f9 ff12 	bl	800087c <__aeabi_ddiv>
 8006a58:	4682      	mov	sl, r0
 8006a5a:	468b      	mov	fp, r1
 8006a5c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006a60:	d0d7      	beq.n	8006a12 <_strtod_l+0x522>
 8006a62:	f1b8 0f1f 	cmp.w	r8, #31
 8006a66:	dd1f      	ble.n	8006aa8 <_strtod_l+0x5b8>
 8006a68:	2500      	movs	r5, #0
 8006a6a:	462e      	mov	r6, r5
 8006a6c:	9507      	str	r5, [sp, #28]
 8006a6e:	9505      	str	r5, [sp, #20]
 8006a70:	2322      	movs	r3, #34	; 0x22
 8006a72:	f04f 0a00 	mov.w	sl, #0
 8006a76:	f04f 0b00 	mov.w	fp, #0
 8006a7a:	6023      	str	r3, [r4, #0]
 8006a7c:	e786      	b.n	800698c <_strtod_l+0x49c>
 8006a7e:	bf00      	nop
 8006a80:	0800c5cd 	.word	0x0800c5cd
 8006a84:	0800c60c 	.word	0x0800c60c
 8006a88:	0800c5c5 	.word	0x0800c5c5
 8006a8c:	0800c74c 	.word	0x0800c74c
 8006a90:	0800ca13 	.word	0x0800ca13
 8006a94:	0800c8d8 	.word	0x0800c8d8
 8006a98:	0800c8b0 	.word	0x0800c8b0
 8006a9c:	7ff00000 	.word	0x7ff00000
 8006aa0:	7ca00000 	.word	0x7ca00000
 8006aa4:	7fefffff 	.word	0x7fefffff
 8006aa8:	f018 0310 	ands.w	r3, r8, #16
 8006aac:	bf18      	it	ne
 8006aae:	236a      	movne	r3, #106	; 0x6a
 8006ab0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006e60 <_strtod_l+0x970>
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	4650      	mov	r0, sl
 8006ab8:	4659      	mov	r1, fp
 8006aba:	2300      	movs	r3, #0
 8006abc:	f018 0f01 	tst.w	r8, #1
 8006ac0:	d004      	beq.n	8006acc <_strtod_l+0x5dc>
 8006ac2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ac6:	f7f9 fdaf 	bl	8000628 <__aeabi_dmul>
 8006aca:	2301      	movs	r3, #1
 8006acc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006ad0:	f109 0908 	add.w	r9, r9, #8
 8006ad4:	d1f2      	bne.n	8006abc <_strtod_l+0x5cc>
 8006ad6:	b10b      	cbz	r3, 8006adc <_strtod_l+0x5ec>
 8006ad8:	4682      	mov	sl, r0
 8006ada:	468b      	mov	fp, r1
 8006adc:	9b04      	ldr	r3, [sp, #16]
 8006ade:	b1c3      	cbz	r3, 8006b12 <_strtod_l+0x622>
 8006ae0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006ae4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	4659      	mov	r1, fp
 8006aec:	dd11      	ble.n	8006b12 <_strtod_l+0x622>
 8006aee:	2b1f      	cmp	r3, #31
 8006af0:	f340 8124 	ble.w	8006d3c <_strtod_l+0x84c>
 8006af4:	2b34      	cmp	r3, #52	; 0x34
 8006af6:	bfde      	ittt	le
 8006af8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006afc:	f04f 33ff 	movle.w	r3, #4294967295
 8006b00:	fa03 f202 	lslle.w	r2, r3, r2
 8006b04:	f04f 0a00 	mov.w	sl, #0
 8006b08:	bfcc      	ite	gt
 8006b0a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006b0e:	ea02 0b01 	andle.w	fp, r2, r1
 8006b12:	2200      	movs	r2, #0
 8006b14:	2300      	movs	r3, #0
 8006b16:	4650      	mov	r0, sl
 8006b18:	4659      	mov	r1, fp
 8006b1a:	f7f9 ffed 	bl	8000af8 <__aeabi_dcmpeq>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d1a2      	bne.n	8006a68 <_strtod_l+0x578>
 8006b22:	9b07      	ldr	r3, [sp, #28]
 8006b24:	9300      	str	r3, [sp, #0]
 8006b26:	9908      	ldr	r1, [sp, #32]
 8006b28:	462b      	mov	r3, r5
 8006b2a:	463a      	mov	r2, r7
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f001 fe63 	bl	80087f8 <__s2b>
 8006b32:	9007      	str	r0, [sp, #28]
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f43f af1f 	beq.w	8006978 <_strtod_l+0x488>
 8006b3a:	9b05      	ldr	r3, [sp, #20]
 8006b3c:	1b9e      	subs	r6, r3, r6
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	bfb4      	ite	lt
 8006b44:	4633      	movlt	r3, r6
 8006b46:	2300      	movge	r3, #0
 8006b48:	930c      	str	r3, [sp, #48]	; 0x30
 8006b4a:	9b06      	ldr	r3, [sp, #24]
 8006b4c:	2500      	movs	r5, #0
 8006b4e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006b52:	9312      	str	r3, [sp, #72]	; 0x48
 8006b54:	462e      	mov	r6, r5
 8006b56:	9b07      	ldr	r3, [sp, #28]
 8006b58:	4620      	mov	r0, r4
 8006b5a:	6859      	ldr	r1, [r3, #4]
 8006b5c:	f001 fda4 	bl	80086a8 <_Balloc>
 8006b60:	9005      	str	r0, [sp, #20]
 8006b62:	2800      	cmp	r0, #0
 8006b64:	f43f af0c 	beq.w	8006980 <_strtod_l+0x490>
 8006b68:	9b07      	ldr	r3, [sp, #28]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	3202      	adds	r2, #2
 8006b6e:	f103 010c 	add.w	r1, r3, #12
 8006b72:	0092      	lsls	r2, r2, #2
 8006b74:	300c      	adds	r0, #12
 8006b76:	f001 fd89 	bl	800868c <memcpy>
 8006b7a:	ec4b ab10 	vmov	d0, sl, fp
 8006b7e:	aa1a      	add	r2, sp, #104	; 0x68
 8006b80:	a919      	add	r1, sp, #100	; 0x64
 8006b82:	4620      	mov	r0, r4
 8006b84:	f002 f97e 	bl	8008e84 <__d2b>
 8006b88:	ec4b ab18 	vmov	d8, sl, fp
 8006b8c:	9018      	str	r0, [sp, #96]	; 0x60
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f43f aef6 	beq.w	8006980 <_strtod_l+0x490>
 8006b94:	2101      	movs	r1, #1
 8006b96:	4620      	mov	r0, r4
 8006b98:	f001 fec8 	bl	800892c <__i2b>
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f43f aeee 	beq.w	8006980 <_strtod_l+0x490>
 8006ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ba6:	9904      	ldr	r1, [sp, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bfab      	itete	ge
 8006bac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006bae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006bb0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006bb2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006bb6:	bfac      	ite	ge
 8006bb8:	eb03 0902 	addge.w	r9, r3, r2
 8006bbc:	1ad7      	sublt	r7, r2, r3
 8006bbe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006bc0:	eba3 0801 	sub.w	r8, r3, r1
 8006bc4:	4490      	add	r8, r2
 8006bc6:	4ba1      	ldr	r3, [pc, #644]	; (8006e4c <_strtod_l+0x95c>)
 8006bc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bcc:	4598      	cmp	r8, r3
 8006bce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006bd2:	f280 80c7 	bge.w	8006d64 <_strtod_l+0x874>
 8006bd6:	eba3 0308 	sub.w	r3, r3, r8
 8006bda:	2b1f      	cmp	r3, #31
 8006bdc:	eba2 0203 	sub.w	r2, r2, r3
 8006be0:	f04f 0101 	mov.w	r1, #1
 8006be4:	f300 80b1 	bgt.w	8006d4a <_strtod_l+0x85a>
 8006be8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bec:	930d      	str	r3, [sp, #52]	; 0x34
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9308      	str	r3, [sp, #32]
 8006bf2:	eb09 0802 	add.w	r8, r9, r2
 8006bf6:	9b04      	ldr	r3, [sp, #16]
 8006bf8:	45c1      	cmp	r9, r8
 8006bfa:	4417      	add	r7, r2
 8006bfc:	441f      	add	r7, r3
 8006bfe:	464b      	mov	r3, r9
 8006c00:	bfa8      	it	ge
 8006c02:	4643      	movge	r3, r8
 8006c04:	42bb      	cmp	r3, r7
 8006c06:	bfa8      	it	ge
 8006c08:	463b      	movge	r3, r7
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bfc2      	ittt	gt
 8006c0e:	eba8 0803 	subgt.w	r8, r8, r3
 8006c12:	1aff      	subgt	r7, r7, r3
 8006c14:	eba9 0903 	subgt.w	r9, r9, r3
 8006c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dd17      	ble.n	8006c4e <_strtod_l+0x75e>
 8006c1e:	4631      	mov	r1, r6
 8006c20:	461a      	mov	r2, r3
 8006c22:	4620      	mov	r0, r4
 8006c24:	f001 ff42 	bl	8008aac <__pow5mult>
 8006c28:	4606      	mov	r6, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f43f aea8 	beq.w	8006980 <_strtod_l+0x490>
 8006c30:	4601      	mov	r1, r0
 8006c32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c34:	4620      	mov	r0, r4
 8006c36:	f001 fe8f 	bl	8008958 <__multiply>
 8006c3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	f43f ae9f 	beq.w	8006980 <_strtod_l+0x490>
 8006c42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c44:	4620      	mov	r0, r4
 8006c46:	f001 fd6f 	bl	8008728 <_Bfree>
 8006c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4c:	9318      	str	r3, [sp, #96]	; 0x60
 8006c4e:	f1b8 0f00 	cmp.w	r8, #0
 8006c52:	f300 808c 	bgt.w	8006d6e <_strtod_l+0x87e>
 8006c56:	9b06      	ldr	r3, [sp, #24]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	dd08      	ble.n	8006c6e <_strtod_l+0x77e>
 8006c5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c5e:	9905      	ldr	r1, [sp, #20]
 8006c60:	4620      	mov	r0, r4
 8006c62:	f001 ff23 	bl	8008aac <__pow5mult>
 8006c66:	9005      	str	r0, [sp, #20]
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	f43f ae89 	beq.w	8006980 <_strtod_l+0x490>
 8006c6e:	2f00      	cmp	r7, #0
 8006c70:	dd08      	ble.n	8006c84 <_strtod_l+0x794>
 8006c72:	9905      	ldr	r1, [sp, #20]
 8006c74:	463a      	mov	r2, r7
 8006c76:	4620      	mov	r0, r4
 8006c78:	f001 ff72 	bl	8008b60 <__lshift>
 8006c7c:	9005      	str	r0, [sp, #20]
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f43f ae7e 	beq.w	8006980 <_strtod_l+0x490>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	dd08      	ble.n	8006c9c <_strtod_l+0x7ac>
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	464a      	mov	r2, r9
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f001 ff66 	bl	8008b60 <__lshift>
 8006c94:	4606      	mov	r6, r0
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f43f ae72 	beq.w	8006980 <_strtod_l+0x490>
 8006c9c:	9a05      	ldr	r2, [sp, #20]
 8006c9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f001 ffe9 	bl	8008c78 <__mdiff>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	f43f ae69 	beq.w	8006980 <_strtod_l+0x490>
 8006cae:	68c3      	ldr	r3, [r0, #12]
 8006cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60c3      	str	r3, [r0, #12]
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	f001 ffc2 	bl	8008c40 <__mcmp>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	da60      	bge.n	8006d82 <_strtod_l+0x892>
 8006cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc2:	ea53 030a 	orrs.w	r3, r3, sl
 8006cc6:	f040 8082 	bne.w	8006dce <_strtod_l+0x8de>
 8006cca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d17d      	bne.n	8006dce <_strtod_l+0x8de>
 8006cd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cd6:	0d1b      	lsrs	r3, r3, #20
 8006cd8:	051b      	lsls	r3, r3, #20
 8006cda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006cde:	d976      	bls.n	8006dce <_strtod_l+0x8de>
 8006ce0:	696b      	ldr	r3, [r5, #20]
 8006ce2:	b913      	cbnz	r3, 8006cea <_strtod_l+0x7fa>
 8006ce4:	692b      	ldr	r3, [r5, #16]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	dd71      	ble.n	8006dce <_strtod_l+0x8de>
 8006cea:	4629      	mov	r1, r5
 8006cec:	2201      	movs	r2, #1
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f001 ff36 	bl	8008b60 <__lshift>
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4605      	mov	r5, r0
 8006cf8:	f001 ffa2 	bl	8008c40 <__mcmp>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	dd66      	ble.n	8006dce <_strtod_l+0x8de>
 8006d00:	9904      	ldr	r1, [sp, #16]
 8006d02:	4a53      	ldr	r2, [pc, #332]	; (8006e50 <_strtod_l+0x960>)
 8006d04:	465b      	mov	r3, fp
 8006d06:	2900      	cmp	r1, #0
 8006d08:	f000 8081 	beq.w	8006e0e <_strtod_l+0x91e>
 8006d0c:	ea02 010b 	and.w	r1, r2, fp
 8006d10:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d14:	dc7b      	bgt.n	8006e0e <_strtod_l+0x91e>
 8006d16:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d1a:	f77f aea9 	ble.w	8006a70 <_strtod_l+0x580>
 8006d1e:	4b4d      	ldr	r3, [pc, #308]	; (8006e54 <_strtod_l+0x964>)
 8006d20:	4650      	mov	r0, sl
 8006d22:	4659      	mov	r1, fp
 8006d24:	2200      	movs	r2, #0
 8006d26:	f7f9 fc7f 	bl	8000628 <__aeabi_dmul>
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	4303      	orrs	r3, r0
 8006d2e:	bf08      	it	eq
 8006d30:	2322      	moveq	r3, #34	; 0x22
 8006d32:	4682      	mov	sl, r0
 8006d34:	468b      	mov	fp, r1
 8006d36:	bf08      	it	eq
 8006d38:	6023      	streq	r3, [r4, #0]
 8006d3a:	e62b      	b.n	8006994 <_strtod_l+0x4a4>
 8006d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	ea03 0a0a 	and.w	sl, r3, sl
 8006d48:	e6e3      	b.n	8006b12 <_strtod_l+0x622>
 8006d4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006d4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006d52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006d56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006d5a:	fa01 f308 	lsl.w	r3, r1, r8
 8006d5e:	9308      	str	r3, [sp, #32]
 8006d60:	910d      	str	r1, [sp, #52]	; 0x34
 8006d62:	e746      	b.n	8006bf2 <_strtod_l+0x702>
 8006d64:	2300      	movs	r3, #0
 8006d66:	9308      	str	r3, [sp, #32]
 8006d68:	2301      	movs	r3, #1
 8006d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8006d6c:	e741      	b.n	8006bf2 <_strtod_l+0x702>
 8006d6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006d70:	4642      	mov	r2, r8
 8006d72:	4620      	mov	r0, r4
 8006d74:	f001 fef4 	bl	8008b60 <__lshift>
 8006d78:	9018      	str	r0, [sp, #96]	; 0x60
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	f47f af6b 	bne.w	8006c56 <_strtod_l+0x766>
 8006d80:	e5fe      	b.n	8006980 <_strtod_l+0x490>
 8006d82:	465f      	mov	r7, fp
 8006d84:	d16e      	bne.n	8006e64 <_strtod_l+0x974>
 8006d86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d8c:	b342      	cbz	r2, 8006de0 <_strtod_l+0x8f0>
 8006d8e:	4a32      	ldr	r2, [pc, #200]	; (8006e58 <_strtod_l+0x968>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d128      	bne.n	8006de6 <_strtod_l+0x8f6>
 8006d94:	9b04      	ldr	r3, [sp, #16]
 8006d96:	4651      	mov	r1, sl
 8006d98:	b1eb      	cbz	r3, 8006dd6 <_strtod_l+0x8e6>
 8006d9a:	4b2d      	ldr	r3, [pc, #180]	; (8006e50 <_strtod_l+0x960>)
 8006d9c:	403b      	ands	r3, r7
 8006d9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	d819      	bhi.n	8006ddc <_strtod_l+0x8ec>
 8006da8:	0d1b      	lsrs	r3, r3, #20
 8006daa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006dae:	fa02 f303 	lsl.w	r3, r2, r3
 8006db2:	4299      	cmp	r1, r3
 8006db4:	d117      	bne.n	8006de6 <_strtod_l+0x8f6>
 8006db6:	4b29      	ldr	r3, [pc, #164]	; (8006e5c <_strtod_l+0x96c>)
 8006db8:	429f      	cmp	r7, r3
 8006dba:	d102      	bne.n	8006dc2 <_strtod_l+0x8d2>
 8006dbc:	3101      	adds	r1, #1
 8006dbe:	f43f addf 	beq.w	8006980 <_strtod_l+0x490>
 8006dc2:	4b23      	ldr	r3, [pc, #140]	; (8006e50 <_strtod_l+0x960>)
 8006dc4:	403b      	ands	r3, r7
 8006dc6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006dca:	f04f 0a00 	mov.w	sl, #0
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1a4      	bne.n	8006d1e <_strtod_l+0x82e>
 8006dd4:	e5de      	b.n	8006994 <_strtod_l+0x4a4>
 8006dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dda:	e7ea      	b.n	8006db2 <_strtod_l+0x8c2>
 8006ddc:	4613      	mov	r3, r2
 8006dde:	e7e8      	b.n	8006db2 <_strtod_l+0x8c2>
 8006de0:	ea53 030a 	orrs.w	r3, r3, sl
 8006de4:	d08c      	beq.n	8006d00 <_strtod_l+0x810>
 8006de6:	9b08      	ldr	r3, [sp, #32]
 8006de8:	b1db      	cbz	r3, 8006e22 <_strtod_l+0x932>
 8006dea:	423b      	tst	r3, r7
 8006dec:	d0ef      	beq.n	8006dce <_strtod_l+0x8de>
 8006dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df0:	9a04      	ldr	r2, [sp, #16]
 8006df2:	4650      	mov	r0, sl
 8006df4:	4659      	mov	r1, fp
 8006df6:	b1c3      	cbz	r3, 8006e2a <_strtod_l+0x93a>
 8006df8:	f7ff fb5d 	bl	80064b6 <sulp>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	ec51 0b18 	vmov	r0, r1, d8
 8006e04:	f7f9 fa5a 	bl	80002bc <__adddf3>
 8006e08:	4682      	mov	sl, r0
 8006e0a:	468b      	mov	fp, r1
 8006e0c:	e7df      	b.n	8006dce <_strtod_l+0x8de>
 8006e0e:	4013      	ands	r3, r2
 8006e10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e1c:	f04f 3aff 	mov.w	sl, #4294967295
 8006e20:	e7d5      	b.n	8006dce <_strtod_l+0x8de>
 8006e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e24:	ea13 0f0a 	tst.w	r3, sl
 8006e28:	e7e0      	b.n	8006dec <_strtod_l+0x8fc>
 8006e2a:	f7ff fb44 	bl	80064b6 <sulp>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	ec51 0b18 	vmov	r0, r1, d8
 8006e36:	f7f9 fa3f 	bl	80002b8 <__aeabi_dsub>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4682      	mov	sl, r0
 8006e40:	468b      	mov	fp, r1
 8006e42:	f7f9 fe59 	bl	8000af8 <__aeabi_dcmpeq>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d0c1      	beq.n	8006dce <_strtod_l+0x8de>
 8006e4a:	e611      	b.n	8006a70 <_strtod_l+0x580>
 8006e4c:	fffffc02 	.word	0xfffffc02
 8006e50:	7ff00000 	.word	0x7ff00000
 8006e54:	39500000 	.word	0x39500000
 8006e58:	000fffff 	.word	0x000fffff
 8006e5c:	7fefffff 	.word	0x7fefffff
 8006e60:	0800c620 	.word	0x0800c620
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	f002 f868 	bl	8008f3c <__ratio>
 8006e6c:	ec59 8b10 	vmov	r8, r9, d0
 8006e70:	ee10 0a10 	vmov	r0, s0
 8006e74:	2200      	movs	r2, #0
 8006e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	f7f9 fe50 	bl	8000b20 <__aeabi_dcmple>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d07a      	beq.n	8006f7a <_strtod_l+0xa8a>
 8006e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d04a      	beq.n	8006f20 <_strtod_l+0xa30>
 8006e8a:	4b95      	ldr	r3, [pc, #596]	; (80070e0 <_strtod_l+0xbf0>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80070e0 <_strtod_l+0xbf0>
 8006e96:	f04f 0800 	mov.w	r8, #0
 8006e9a:	4b92      	ldr	r3, [pc, #584]	; (80070e4 <_strtod_l+0xbf4>)
 8006e9c:	403b      	ands	r3, r7
 8006e9e:	930d      	str	r3, [sp, #52]	; 0x34
 8006ea0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ea2:	4b91      	ldr	r3, [pc, #580]	; (80070e8 <_strtod_l+0xbf8>)
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	f040 80b0 	bne.w	800700a <_strtod_l+0xb1a>
 8006eaa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006eae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006eb2:	ec4b ab10 	vmov	d0, sl, fp
 8006eb6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006eba:	f001 ff67 	bl	8008d8c <__ulp>
 8006ebe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ec2:	ec53 2b10 	vmov	r2, r3, d0
 8006ec6:	f7f9 fbaf 	bl	8000628 <__aeabi_dmul>
 8006eca:	4652      	mov	r2, sl
 8006ecc:	465b      	mov	r3, fp
 8006ece:	f7f9 f9f5 	bl	80002bc <__adddf3>
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4983      	ldr	r1, [pc, #524]	; (80070e4 <_strtod_l+0xbf4>)
 8006ed6:	4a85      	ldr	r2, [pc, #532]	; (80070ec <_strtod_l+0xbfc>)
 8006ed8:	4019      	ands	r1, r3
 8006eda:	4291      	cmp	r1, r2
 8006edc:	4682      	mov	sl, r0
 8006ede:	d960      	bls.n	8006fa2 <_strtod_l+0xab2>
 8006ee0:	ee18 3a90 	vmov	r3, s17
 8006ee4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d104      	bne.n	8006ef6 <_strtod_l+0xa06>
 8006eec:	ee18 3a10 	vmov	r3, s16
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	f43f ad45 	beq.w	8006980 <_strtod_l+0x490>
 8006ef6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80070f8 <_strtod_l+0xc08>
 8006efa:	f04f 3aff 	mov.w	sl, #4294967295
 8006efe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f00:	4620      	mov	r0, r4
 8006f02:	f001 fc11 	bl	8008728 <_Bfree>
 8006f06:	9905      	ldr	r1, [sp, #20]
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f001 fc0d 	bl	8008728 <_Bfree>
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4620      	mov	r0, r4
 8006f12:	f001 fc09 	bl	8008728 <_Bfree>
 8006f16:	4629      	mov	r1, r5
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f001 fc05 	bl	8008728 <_Bfree>
 8006f1e:	e61a      	b.n	8006b56 <_strtod_l+0x666>
 8006f20:	f1ba 0f00 	cmp.w	sl, #0
 8006f24:	d11b      	bne.n	8006f5e <_strtod_l+0xa6e>
 8006f26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f2a:	b9f3      	cbnz	r3, 8006f6a <_strtod_l+0xa7a>
 8006f2c:	4b6c      	ldr	r3, [pc, #432]	; (80070e0 <_strtod_l+0xbf0>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4640      	mov	r0, r8
 8006f32:	4649      	mov	r1, r9
 8006f34:	f7f9 fdea 	bl	8000b0c <__aeabi_dcmplt>
 8006f38:	b9d0      	cbnz	r0, 8006f70 <_strtod_l+0xa80>
 8006f3a:	4640      	mov	r0, r8
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	4b6c      	ldr	r3, [pc, #432]	; (80070f0 <_strtod_l+0xc00>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	f7f9 fb71 	bl	8000628 <__aeabi_dmul>
 8006f46:	4680      	mov	r8, r0
 8006f48:	4689      	mov	r9, r1
 8006f4a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f4e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006f52:	9315      	str	r3, [sp, #84]	; 0x54
 8006f54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006f58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006f5c:	e79d      	b.n	8006e9a <_strtod_l+0x9aa>
 8006f5e:	f1ba 0f01 	cmp.w	sl, #1
 8006f62:	d102      	bne.n	8006f6a <_strtod_l+0xa7a>
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	f43f ad83 	beq.w	8006a70 <_strtod_l+0x580>
 8006f6a:	4b62      	ldr	r3, [pc, #392]	; (80070f4 <_strtod_l+0xc04>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	e78e      	b.n	8006e8e <_strtod_l+0x99e>
 8006f70:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80070f0 <_strtod_l+0xc00>
 8006f74:	f04f 0800 	mov.w	r8, #0
 8006f78:	e7e7      	b.n	8006f4a <_strtod_l+0xa5a>
 8006f7a:	4b5d      	ldr	r3, [pc, #372]	; (80070f0 <_strtod_l+0xc00>)
 8006f7c:	4640      	mov	r0, r8
 8006f7e:	4649      	mov	r1, r9
 8006f80:	2200      	movs	r2, #0
 8006f82:	f7f9 fb51 	bl	8000628 <__aeabi_dmul>
 8006f86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f88:	4680      	mov	r8, r0
 8006f8a:	4689      	mov	r9, r1
 8006f8c:	b933      	cbnz	r3, 8006f9c <_strtod_l+0xaac>
 8006f8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f92:	900e      	str	r0, [sp, #56]	; 0x38
 8006f94:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f9a:	e7dd      	b.n	8006f58 <_strtod_l+0xa68>
 8006f9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006fa0:	e7f9      	b.n	8006f96 <_strtod_l+0xaa6>
 8006fa2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1a8      	bne.n	8006efe <_strtod_l+0xa0e>
 8006fac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fb2:	0d1b      	lsrs	r3, r3, #20
 8006fb4:	051b      	lsls	r3, r3, #20
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d1a1      	bne.n	8006efe <_strtod_l+0xa0e>
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f7f9 fecb 	bl	8000d58 <__aeabi_d2lz>
 8006fc2:	f7f9 fb03 	bl	80005cc <__aeabi_l2d>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4640      	mov	r0, r8
 8006fcc:	4649      	mov	r1, r9
 8006fce:	f7f9 f973 	bl	80002b8 <__aeabi_dsub>
 8006fd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fd8:	ea43 030a 	orr.w	r3, r3, sl
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	4680      	mov	r8, r0
 8006fe0:	4689      	mov	r9, r1
 8006fe2:	d055      	beq.n	8007090 <_strtod_l+0xba0>
 8006fe4:	a336      	add	r3, pc, #216	; (adr r3, 80070c0 <_strtod_l+0xbd0>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f7f9 fd8f 	bl	8000b0c <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f47f acd0 	bne.w	8006994 <_strtod_l+0x4a4>
 8006ff4:	a334      	add	r3, pc, #208	; (adr r3, 80070c8 <_strtod_l+0xbd8>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	f7f9 fda3 	bl	8000b48 <__aeabi_dcmpgt>
 8007002:	2800      	cmp	r0, #0
 8007004:	f43f af7b 	beq.w	8006efe <_strtod_l+0xa0e>
 8007008:	e4c4      	b.n	8006994 <_strtod_l+0x4a4>
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	b333      	cbz	r3, 800705c <_strtod_l+0xb6c>
 800700e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007010:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007014:	d822      	bhi.n	800705c <_strtod_l+0xb6c>
 8007016:	a32e      	add	r3, pc, #184	; (adr r3, 80070d0 <_strtod_l+0xbe0>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	4640      	mov	r0, r8
 800701e:	4649      	mov	r1, r9
 8007020:	f7f9 fd7e 	bl	8000b20 <__aeabi_dcmple>
 8007024:	b1a0      	cbz	r0, 8007050 <_strtod_l+0xb60>
 8007026:	4649      	mov	r1, r9
 8007028:	4640      	mov	r0, r8
 800702a:	f7f9 fdd5 	bl	8000bd8 <__aeabi_d2uiz>
 800702e:	2801      	cmp	r0, #1
 8007030:	bf38      	it	cc
 8007032:	2001      	movcc	r0, #1
 8007034:	f7f9 fa7e 	bl	8000534 <__aeabi_ui2d>
 8007038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800703a:	4680      	mov	r8, r0
 800703c:	4689      	mov	r9, r1
 800703e:	bb23      	cbnz	r3, 800708a <_strtod_l+0xb9a>
 8007040:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007044:	9010      	str	r0, [sp, #64]	; 0x40
 8007046:	9311      	str	r3, [sp, #68]	; 0x44
 8007048:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800704c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007052:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007054:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007058:	1a9b      	subs	r3, r3, r2
 800705a:	9309      	str	r3, [sp, #36]	; 0x24
 800705c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007060:	eeb0 0a48 	vmov.f32	s0, s16
 8007064:	eef0 0a68 	vmov.f32	s1, s17
 8007068:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800706c:	f001 fe8e 	bl	8008d8c <__ulp>
 8007070:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007074:	ec53 2b10 	vmov	r2, r3, d0
 8007078:	f7f9 fad6 	bl	8000628 <__aeabi_dmul>
 800707c:	ec53 2b18 	vmov	r2, r3, d8
 8007080:	f7f9 f91c 	bl	80002bc <__adddf3>
 8007084:	4682      	mov	sl, r0
 8007086:	468b      	mov	fp, r1
 8007088:	e78d      	b.n	8006fa6 <_strtod_l+0xab6>
 800708a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800708e:	e7db      	b.n	8007048 <_strtod_l+0xb58>
 8007090:	a311      	add	r3, pc, #68	; (adr r3, 80070d8 <_strtod_l+0xbe8>)
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f7f9 fd39 	bl	8000b0c <__aeabi_dcmplt>
 800709a:	e7b2      	b.n	8007002 <_strtod_l+0xb12>
 800709c:	2300      	movs	r3, #0
 800709e:	930a      	str	r3, [sp, #40]	; 0x28
 80070a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	f7ff ba6b 	b.w	8006580 <_strtod_l+0x90>
 80070aa:	2a65      	cmp	r2, #101	; 0x65
 80070ac:	f43f ab5f 	beq.w	800676e <_strtod_l+0x27e>
 80070b0:	2a45      	cmp	r2, #69	; 0x45
 80070b2:	f43f ab5c 	beq.w	800676e <_strtod_l+0x27e>
 80070b6:	2301      	movs	r3, #1
 80070b8:	f7ff bb94 	b.w	80067e4 <_strtod_l+0x2f4>
 80070bc:	f3af 8000 	nop.w
 80070c0:	94a03595 	.word	0x94a03595
 80070c4:	3fdfffff 	.word	0x3fdfffff
 80070c8:	35afe535 	.word	0x35afe535
 80070cc:	3fe00000 	.word	0x3fe00000
 80070d0:	ffc00000 	.word	0xffc00000
 80070d4:	41dfffff 	.word	0x41dfffff
 80070d8:	94a03595 	.word	0x94a03595
 80070dc:	3fcfffff 	.word	0x3fcfffff
 80070e0:	3ff00000 	.word	0x3ff00000
 80070e4:	7ff00000 	.word	0x7ff00000
 80070e8:	7fe00000 	.word	0x7fe00000
 80070ec:	7c9fffff 	.word	0x7c9fffff
 80070f0:	3fe00000 	.word	0x3fe00000
 80070f4:	bff00000 	.word	0xbff00000
 80070f8:	7fefffff 	.word	0x7fefffff

080070fc <_strtod_r>:
 80070fc:	4b01      	ldr	r3, [pc, #4]	; (8007104 <_strtod_r+0x8>)
 80070fe:	f7ff b9f7 	b.w	80064f0 <_strtod_l>
 8007102:	bf00      	nop
 8007104:	20000080 	.word	0x20000080

08007108 <_strtol_l.constprop.0>:
 8007108:	2b01      	cmp	r3, #1
 800710a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800710e:	d001      	beq.n	8007114 <_strtol_l.constprop.0+0xc>
 8007110:	2b24      	cmp	r3, #36	; 0x24
 8007112:	d906      	bls.n	8007122 <_strtol_l.constprop.0+0x1a>
 8007114:	f7fe fa8c 	bl	8005630 <__errno>
 8007118:	2316      	movs	r3, #22
 800711a:	6003      	str	r3, [r0, #0]
 800711c:	2000      	movs	r0, #0
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007122:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007208 <_strtol_l.constprop.0+0x100>
 8007126:	460d      	mov	r5, r1
 8007128:	462e      	mov	r6, r5
 800712a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800712e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007132:	f017 0708 	ands.w	r7, r7, #8
 8007136:	d1f7      	bne.n	8007128 <_strtol_l.constprop.0+0x20>
 8007138:	2c2d      	cmp	r4, #45	; 0x2d
 800713a:	d132      	bne.n	80071a2 <_strtol_l.constprop.0+0x9a>
 800713c:	782c      	ldrb	r4, [r5, #0]
 800713e:	2701      	movs	r7, #1
 8007140:	1cb5      	adds	r5, r6, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d05b      	beq.n	80071fe <_strtol_l.constprop.0+0xf6>
 8007146:	2b10      	cmp	r3, #16
 8007148:	d109      	bne.n	800715e <_strtol_l.constprop.0+0x56>
 800714a:	2c30      	cmp	r4, #48	; 0x30
 800714c:	d107      	bne.n	800715e <_strtol_l.constprop.0+0x56>
 800714e:	782c      	ldrb	r4, [r5, #0]
 8007150:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007154:	2c58      	cmp	r4, #88	; 0x58
 8007156:	d14d      	bne.n	80071f4 <_strtol_l.constprop.0+0xec>
 8007158:	786c      	ldrb	r4, [r5, #1]
 800715a:	2310      	movs	r3, #16
 800715c:	3502      	adds	r5, #2
 800715e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007162:	f108 38ff 	add.w	r8, r8, #4294967295
 8007166:	f04f 0c00 	mov.w	ip, #0
 800716a:	fbb8 f9f3 	udiv	r9, r8, r3
 800716e:	4666      	mov	r6, ip
 8007170:	fb03 8a19 	mls	sl, r3, r9, r8
 8007174:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007178:	f1be 0f09 	cmp.w	lr, #9
 800717c:	d816      	bhi.n	80071ac <_strtol_l.constprop.0+0xa4>
 800717e:	4674      	mov	r4, lr
 8007180:	42a3      	cmp	r3, r4
 8007182:	dd24      	ble.n	80071ce <_strtol_l.constprop.0+0xc6>
 8007184:	f1bc 0f00 	cmp.w	ip, #0
 8007188:	db1e      	blt.n	80071c8 <_strtol_l.constprop.0+0xc0>
 800718a:	45b1      	cmp	r9, r6
 800718c:	d31c      	bcc.n	80071c8 <_strtol_l.constprop.0+0xc0>
 800718e:	d101      	bne.n	8007194 <_strtol_l.constprop.0+0x8c>
 8007190:	45a2      	cmp	sl, r4
 8007192:	db19      	blt.n	80071c8 <_strtol_l.constprop.0+0xc0>
 8007194:	fb06 4603 	mla	r6, r6, r3, r4
 8007198:	f04f 0c01 	mov.w	ip, #1
 800719c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071a0:	e7e8      	b.n	8007174 <_strtol_l.constprop.0+0x6c>
 80071a2:	2c2b      	cmp	r4, #43	; 0x2b
 80071a4:	bf04      	itt	eq
 80071a6:	782c      	ldrbeq	r4, [r5, #0]
 80071a8:	1cb5      	addeq	r5, r6, #2
 80071aa:	e7ca      	b.n	8007142 <_strtol_l.constprop.0+0x3a>
 80071ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80071b0:	f1be 0f19 	cmp.w	lr, #25
 80071b4:	d801      	bhi.n	80071ba <_strtol_l.constprop.0+0xb2>
 80071b6:	3c37      	subs	r4, #55	; 0x37
 80071b8:	e7e2      	b.n	8007180 <_strtol_l.constprop.0+0x78>
 80071ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80071be:	f1be 0f19 	cmp.w	lr, #25
 80071c2:	d804      	bhi.n	80071ce <_strtol_l.constprop.0+0xc6>
 80071c4:	3c57      	subs	r4, #87	; 0x57
 80071c6:	e7db      	b.n	8007180 <_strtol_l.constprop.0+0x78>
 80071c8:	f04f 3cff 	mov.w	ip, #4294967295
 80071cc:	e7e6      	b.n	800719c <_strtol_l.constprop.0+0x94>
 80071ce:	f1bc 0f00 	cmp.w	ip, #0
 80071d2:	da05      	bge.n	80071e0 <_strtol_l.constprop.0+0xd8>
 80071d4:	2322      	movs	r3, #34	; 0x22
 80071d6:	6003      	str	r3, [r0, #0]
 80071d8:	4646      	mov	r6, r8
 80071da:	b942      	cbnz	r2, 80071ee <_strtol_l.constprop.0+0xe6>
 80071dc:	4630      	mov	r0, r6
 80071de:	e79e      	b.n	800711e <_strtol_l.constprop.0+0x16>
 80071e0:	b107      	cbz	r7, 80071e4 <_strtol_l.constprop.0+0xdc>
 80071e2:	4276      	negs	r6, r6
 80071e4:	2a00      	cmp	r2, #0
 80071e6:	d0f9      	beq.n	80071dc <_strtol_l.constprop.0+0xd4>
 80071e8:	f1bc 0f00 	cmp.w	ip, #0
 80071ec:	d000      	beq.n	80071f0 <_strtol_l.constprop.0+0xe8>
 80071ee:	1e69      	subs	r1, r5, #1
 80071f0:	6011      	str	r1, [r2, #0]
 80071f2:	e7f3      	b.n	80071dc <_strtol_l.constprop.0+0xd4>
 80071f4:	2430      	movs	r4, #48	; 0x30
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1b1      	bne.n	800715e <_strtol_l.constprop.0+0x56>
 80071fa:	2308      	movs	r3, #8
 80071fc:	e7af      	b.n	800715e <_strtol_l.constprop.0+0x56>
 80071fe:	2c30      	cmp	r4, #48	; 0x30
 8007200:	d0a5      	beq.n	800714e <_strtol_l.constprop.0+0x46>
 8007202:	230a      	movs	r3, #10
 8007204:	e7ab      	b.n	800715e <_strtol_l.constprop.0+0x56>
 8007206:	bf00      	nop
 8007208:	0800c649 	.word	0x0800c649

0800720c <_strtol_r>:
 800720c:	f7ff bf7c 	b.w	8007108 <_strtol_l.constprop.0>

08007210 <_write_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d07      	ldr	r5, [pc, #28]	; (8007230 <_write_r+0x20>)
 8007214:	4604      	mov	r4, r0
 8007216:	4608      	mov	r0, r1
 8007218:	4611      	mov	r1, r2
 800721a:	2200      	movs	r2, #0
 800721c:	602a      	str	r2, [r5, #0]
 800721e:	461a      	mov	r2, r3
 8007220:	f7fb fd12 	bl	8002c48 <_write>
 8007224:	1c43      	adds	r3, r0, #1
 8007226:	d102      	bne.n	800722e <_write_r+0x1e>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	b103      	cbz	r3, 800722e <_write_r+0x1e>
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	bd38      	pop	{r3, r4, r5, pc}
 8007230:	20000d40 	.word	0x20000d40

08007234 <_close_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4d06      	ldr	r5, [pc, #24]	; (8007250 <_close_r+0x1c>)
 8007238:	2300      	movs	r3, #0
 800723a:	4604      	mov	r4, r0
 800723c:	4608      	mov	r0, r1
 800723e:	602b      	str	r3, [r5, #0]
 8007240:	f7fb fd1e 	bl	8002c80 <_close>
 8007244:	1c43      	adds	r3, r0, #1
 8007246:	d102      	bne.n	800724e <_close_r+0x1a>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	b103      	cbz	r3, 800724e <_close_r+0x1a>
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	bd38      	pop	{r3, r4, r5, pc}
 8007250:	20000d40 	.word	0x20000d40

08007254 <quorem>:
 8007254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	6903      	ldr	r3, [r0, #16]
 800725a:	690c      	ldr	r4, [r1, #16]
 800725c:	42a3      	cmp	r3, r4
 800725e:	4607      	mov	r7, r0
 8007260:	f2c0 8081 	blt.w	8007366 <quorem+0x112>
 8007264:	3c01      	subs	r4, #1
 8007266:	f101 0814 	add.w	r8, r1, #20
 800726a:	f100 0514 	add.w	r5, r0, #20
 800726e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007278:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800727c:	3301      	adds	r3, #1
 800727e:	429a      	cmp	r2, r3
 8007280:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007284:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007288:	fbb2 f6f3 	udiv	r6, r2, r3
 800728c:	d331      	bcc.n	80072f2 <quorem+0x9e>
 800728e:	f04f 0e00 	mov.w	lr, #0
 8007292:	4640      	mov	r0, r8
 8007294:	46ac      	mov	ip, r5
 8007296:	46f2      	mov	sl, lr
 8007298:	f850 2b04 	ldr.w	r2, [r0], #4
 800729c:	b293      	uxth	r3, r2
 800729e:	fb06 e303 	mla	r3, r6, r3, lr
 80072a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	ebaa 0303 	sub.w	r3, sl, r3
 80072ac:	f8dc a000 	ldr.w	sl, [ip]
 80072b0:	0c12      	lsrs	r2, r2, #16
 80072b2:	fa13 f38a 	uxtah	r3, r3, sl
 80072b6:	fb06 e202 	mla	r2, r6, r2, lr
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	9b00      	ldr	r3, [sp, #0]
 80072be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072c2:	b292      	uxth	r2, r2
 80072c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80072c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80072d0:	4581      	cmp	r9, r0
 80072d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072d6:	f84c 3b04 	str.w	r3, [ip], #4
 80072da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072de:	d2db      	bcs.n	8007298 <quorem+0x44>
 80072e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80072e4:	b92b      	cbnz	r3, 80072f2 <quorem+0x9e>
 80072e6:	9b01      	ldr	r3, [sp, #4]
 80072e8:	3b04      	subs	r3, #4
 80072ea:	429d      	cmp	r5, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	d32e      	bcc.n	800734e <quorem+0xfa>
 80072f0:	613c      	str	r4, [r7, #16]
 80072f2:	4638      	mov	r0, r7
 80072f4:	f001 fca4 	bl	8008c40 <__mcmp>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	db24      	blt.n	8007346 <quorem+0xf2>
 80072fc:	3601      	adds	r6, #1
 80072fe:	4628      	mov	r0, r5
 8007300:	f04f 0c00 	mov.w	ip, #0
 8007304:	f858 2b04 	ldr.w	r2, [r8], #4
 8007308:	f8d0 e000 	ldr.w	lr, [r0]
 800730c:	b293      	uxth	r3, r2
 800730e:	ebac 0303 	sub.w	r3, ip, r3
 8007312:	0c12      	lsrs	r2, r2, #16
 8007314:	fa13 f38e 	uxtah	r3, r3, lr
 8007318:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800731c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007320:	b29b      	uxth	r3, r3
 8007322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007326:	45c1      	cmp	r9, r8
 8007328:	f840 3b04 	str.w	r3, [r0], #4
 800732c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007330:	d2e8      	bcs.n	8007304 <quorem+0xb0>
 8007332:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007336:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800733a:	b922      	cbnz	r2, 8007346 <quorem+0xf2>
 800733c:	3b04      	subs	r3, #4
 800733e:	429d      	cmp	r5, r3
 8007340:	461a      	mov	r2, r3
 8007342:	d30a      	bcc.n	800735a <quorem+0x106>
 8007344:	613c      	str	r4, [r7, #16]
 8007346:	4630      	mov	r0, r6
 8007348:	b003      	add	sp, #12
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	3b04      	subs	r3, #4
 8007352:	2a00      	cmp	r2, #0
 8007354:	d1cc      	bne.n	80072f0 <quorem+0x9c>
 8007356:	3c01      	subs	r4, #1
 8007358:	e7c7      	b.n	80072ea <quorem+0x96>
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	3b04      	subs	r3, #4
 800735e:	2a00      	cmp	r2, #0
 8007360:	d1f0      	bne.n	8007344 <quorem+0xf0>
 8007362:	3c01      	subs	r4, #1
 8007364:	e7eb      	b.n	800733e <quorem+0xea>
 8007366:	2000      	movs	r0, #0
 8007368:	e7ee      	b.n	8007348 <quorem+0xf4>
 800736a:	0000      	movs	r0, r0
 800736c:	0000      	movs	r0, r0
	...

08007370 <_dtoa_r>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	ed2d 8b04 	vpush	{d8-d9}
 8007378:	ec57 6b10 	vmov	r6, r7, d0
 800737c:	b093      	sub	sp, #76	; 0x4c
 800737e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007380:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007384:	9106      	str	r1, [sp, #24]
 8007386:	ee10 aa10 	vmov	sl, s0
 800738a:	4604      	mov	r4, r0
 800738c:	9209      	str	r2, [sp, #36]	; 0x24
 800738e:	930c      	str	r3, [sp, #48]	; 0x30
 8007390:	46bb      	mov	fp, r7
 8007392:	b975      	cbnz	r5, 80073b2 <_dtoa_r+0x42>
 8007394:	2010      	movs	r0, #16
 8007396:	f001 f95f 	bl	8008658 <malloc>
 800739a:	4602      	mov	r2, r0
 800739c:	6260      	str	r0, [r4, #36]	; 0x24
 800739e:	b920      	cbnz	r0, 80073aa <_dtoa_r+0x3a>
 80073a0:	4ba7      	ldr	r3, [pc, #668]	; (8007640 <_dtoa_r+0x2d0>)
 80073a2:	21ea      	movs	r1, #234	; 0xea
 80073a4:	48a7      	ldr	r0, [pc, #668]	; (8007644 <_dtoa_r+0x2d4>)
 80073a6:	f002 fceb 	bl	8009d80 <__assert_func>
 80073aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073ae:	6005      	str	r5, [r0, #0]
 80073b0:	60c5      	str	r5, [r0, #12]
 80073b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b4:	6819      	ldr	r1, [r3, #0]
 80073b6:	b151      	cbz	r1, 80073ce <_dtoa_r+0x5e>
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	604a      	str	r2, [r1, #4]
 80073bc:	2301      	movs	r3, #1
 80073be:	4093      	lsls	r3, r2
 80073c0:	608b      	str	r3, [r1, #8]
 80073c2:	4620      	mov	r0, r4
 80073c4:	f001 f9b0 	bl	8008728 <_Bfree>
 80073c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	1e3b      	subs	r3, r7, #0
 80073d0:	bfaa      	itet	ge
 80073d2:	2300      	movge	r3, #0
 80073d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80073d8:	f8c8 3000 	strge.w	r3, [r8]
 80073dc:	4b9a      	ldr	r3, [pc, #616]	; (8007648 <_dtoa_r+0x2d8>)
 80073de:	bfbc      	itt	lt
 80073e0:	2201      	movlt	r2, #1
 80073e2:	f8c8 2000 	strlt.w	r2, [r8]
 80073e6:	ea33 030b 	bics.w	r3, r3, fp
 80073ea:	d11b      	bne.n	8007424 <_dtoa_r+0xb4>
 80073ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073f8:	4333      	orrs	r3, r6
 80073fa:	f000 8592 	beq.w	8007f22 <_dtoa_r+0xbb2>
 80073fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007400:	b963      	cbnz	r3, 800741c <_dtoa_r+0xac>
 8007402:	4b92      	ldr	r3, [pc, #584]	; (800764c <_dtoa_r+0x2dc>)
 8007404:	e022      	b.n	800744c <_dtoa_r+0xdc>
 8007406:	4b92      	ldr	r3, [pc, #584]	; (8007650 <_dtoa_r+0x2e0>)
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	3308      	adds	r3, #8
 800740c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800740e:	6013      	str	r3, [r2, #0]
 8007410:	9801      	ldr	r0, [sp, #4]
 8007412:	b013      	add	sp, #76	; 0x4c
 8007414:	ecbd 8b04 	vpop	{d8-d9}
 8007418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741c:	4b8b      	ldr	r3, [pc, #556]	; (800764c <_dtoa_r+0x2dc>)
 800741e:	9301      	str	r3, [sp, #4]
 8007420:	3303      	adds	r3, #3
 8007422:	e7f3      	b.n	800740c <_dtoa_r+0x9c>
 8007424:	2200      	movs	r2, #0
 8007426:	2300      	movs	r3, #0
 8007428:	4650      	mov	r0, sl
 800742a:	4659      	mov	r1, fp
 800742c:	f7f9 fb64 	bl	8000af8 <__aeabi_dcmpeq>
 8007430:	ec4b ab19 	vmov	d9, sl, fp
 8007434:	4680      	mov	r8, r0
 8007436:	b158      	cbz	r0, 8007450 <_dtoa_r+0xe0>
 8007438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800743a:	2301      	movs	r3, #1
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 856b 	beq.w	8007f1c <_dtoa_r+0xbac>
 8007446:	4883      	ldr	r0, [pc, #524]	; (8007654 <_dtoa_r+0x2e4>)
 8007448:	6018      	str	r0, [r3, #0]
 800744a:	1e43      	subs	r3, r0, #1
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	e7df      	b.n	8007410 <_dtoa_r+0xa0>
 8007450:	ec4b ab10 	vmov	d0, sl, fp
 8007454:	aa10      	add	r2, sp, #64	; 0x40
 8007456:	a911      	add	r1, sp, #68	; 0x44
 8007458:	4620      	mov	r0, r4
 800745a:	f001 fd13 	bl	8008e84 <__d2b>
 800745e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007462:	ee08 0a10 	vmov	s16, r0
 8007466:	2d00      	cmp	r5, #0
 8007468:	f000 8084 	beq.w	8007574 <_dtoa_r+0x204>
 800746c:	ee19 3a90 	vmov	r3, s19
 8007470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007474:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007478:	4656      	mov	r6, sl
 800747a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800747e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007482:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007486:	4b74      	ldr	r3, [pc, #464]	; (8007658 <_dtoa_r+0x2e8>)
 8007488:	2200      	movs	r2, #0
 800748a:	4630      	mov	r0, r6
 800748c:	4639      	mov	r1, r7
 800748e:	f7f8 ff13 	bl	80002b8 <__aeabi_dsub>
 8007492:	a365      	add	r3, pc, #404	; (adr r3, 8007628 <_dtoa_r+0x2b8>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f9 f8c6 	bl	8000628 <__aeabi_dmul>
 800749c:	a364      	add	r3, pc, #400	; (adr r3, 8007630 <_dtoa_r+0x2c0>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 ff0b 	bl	80002bc <__adddf3>
 80074a6:	4606      	mov	r6, r0
 80074a8:	4628      	mov	r0, r5
 80074aa:	460f      	mov	r7, r1
 80074ac:	f7f9 f852 	bl	8000554 <__aeabi_i2d>
 80074b0:	a361      	add	r3, pc, #388	; (adr r3, 8007638 <_dtoa_r+0x2c8>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f7f9 f8b7 	bl	8000628 <__aeabi_dmul>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4630      	mov	r0, r6
 80074c0:	4639      	mov	r1, r7
 80074c2:	f7f8 fefb 	bl	80002bc <__adddf3>
 80074c6:	4606      	mov	r6, r0
 80074c8:	460f      	mov	r7, r1
 80074ca:	f7f9 fb5d 	bl	8000b88 <__aeabi_d2iz>
 80074ce:	2200      	movs	r2, #0
 80074d0:	9000      	str	r0, [sp, #0]
 80074d2:	2300      	movs	r3, #0
 80074d4:	4630      	mov	r0, r6
 80074d6:	4639      	mov	r1, r7
 80074d8:	f7f9 fb18 	bl	8000b0c <__aeabi_dcmplt>
 80074dc:	b150      	cbz	r0, 80074f4 <_dtoa_r+0x184>
 80074de:	9800      	ldr	r0, [sp, #0]
 80074e0:	f7f9 f838 	bl	8000554 <__aeabi_i2d>
 80074e4:	4632      	mov	r2, r6
 80074e6:	463b      	mov	r3, r7
 80074e8:	f7f9 fb06 	bl	8000af8 <__aeabi_dcmpeq>
 80074ec:	b910      	cbnz	r0, 80074f4 <_dtoa_r+0x184>
 80074ee:	9b00      	ldr	r3, [sp, #0]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	9b00      	ldr	r3, [sp, #0]
 80074f6:	2b16      	cmp	r3, #22
 80074f8:	d85a      	bhi.n	80075b0 <_dtoa_r+0x240>
 80074fa:	9a00      	ldr	r2, [sp, #0]
 80074fc:	4b57      	ldr	r3, [pc, #348]	; (800765c <_dtoa_r+0x2ec>)
 80074fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	ec51 0b19 	vmov	r0, r1, d9
 800750a:	f7f9 faff 	bl	8000b0c <__aeabi_dcmplt>
 800750e:	2800      	cmp	r0, #0
 8007510:	d050      	beq.n	80075b4 <_dtoa_r+0x244>
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	3b01      	subs	r3, #1
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2300      	movs	r3, #0
 800751a:	930b      	str	r3, [sp, #44]	; 0x2c
 800751c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800751e:	1b5d      	subs	r5, r3, r5
 8007520:	1e6b      	subs	r3, r5, #1
 8007522:	9305      	str	r3, [sp, #20]
 8007524:	bf45      	ittet	mi
 8007526:	f1c5 0301 	rsbmi	r3, r5, #1
 800752a:	9304      	strmi	r3, [sp, #16]
 800752c:	2300      	movpl	r3, #0
 800752e:	2300      	movmi	r3, #0
 8007530:	bf4c      	ite	mi
 8007532:	9305      	strmi	r3, [sp, #20]
 8007534:	9304      	strpl	r3, [sp, #16]
 8007536:	9b00      	ldr	r3, [sp, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	db3d      	blt.n	80075b8 <_dtoa_r+0x248>
 800753c:	9b05      	ldr	r3, [sp, #20]
 800753e:	9a00      	ldr	r2, [sp, #0]
 8007540:	920a      	str	r2, [sp, #40]	; 0x28
 8007542:	4413      	add	r3, r2
 8007544:	9305      	str	r3, [sp, #20]
 8007546:	2300      	movs	r3, #0
 8007548:	9307      	str	r3, [sp, #28]
 800754a:	9b06      	ldr	r3, [sp, #24]
 800754c:	2b09      	cmp	r3, #9
 800754e:	f200 8089 	bhi.w	8007664 <_dtoa_r+0x2f4>
 8007552:	2b05      	cmp	r3, #5
 8007554:	bfc4      	itt	gt
 8007556:	3b04      	subgt	r3, #4
 8007558:	9306      	strgt	r3, [sp, #24]
 800755a:	9b06      	ldr	r3, [sp, #24]
 800755c:	f1a3 0302 	sub.w	r3, r3, #2
 8007560:	bfcc      	ite	gt
 8007562:	2500      	movgt	r5, #0
 8007564:	2501      	movle	r5, #1
 8007566:	2b03      	cmp	r3, #3
 8007568:	f200 8087 	bhi.w	800767a <_dtoa_r+0x30a>
 800756c:	e8df f003 	tbb	[pc, r3]
 8007570:	59383a2d 	.word	0x59383a2d
 8007574:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007578:	441d      	add	r5, r3
 800757a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800757e:	2b20      	cmp	r3, #32
 8007580:	bfc1      	itttt	gt
 8007582:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007586:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800758a:	fa0b f303 	lslgt.w	r3, fp, r3
 800758e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007592:	bfda      	itte	le
 8007594:	f1c3 0320 	rsble	r3, r3, #32
 8007598:	fa06 f003 	lslle.w	r0, r6, r3
 800759c:	4318      	orrgt	r0, r3
 800759e:	f7f8 ffc9 	bl	8000534 <__aeabi_ui2d>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4606      	mov	r6, r0
 80075a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80075aa:	3d01      	subs	r5, #1
 80075ac:	930e      	str	r3, [sp, #56]	; 0x38
 80075ae:	e76a      	b.n	8007486 <_dtoa_r+0x116>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e7b2      	b.n	800751a <_dtoa_r+0x1aa>
 80075b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80075b6:	e7b1      	b.n	800751c <_dtoa_r+0x1ac>
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	9a00      	ldr	r2, [sp, #0]
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	9304      	str	r3, [sp, #16]
 80075c0:	4253      	negs	r3, r2
 80075c2:	9307      	str	r3, [sp, #28]
 80075c4:	2300      	movs	r3, #0
 80075c6:	930a      	str	r3, [sp, #40]	; 0x28
 80075c8:	e7bf      	b.n	800754a <_dtoa_r+0x1da>
 80075ca:	2300      	movs	r3, #0
 80075cc:	9308      	str	r3, [sp, #32]
 80075ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dc55      	bgt.n	8007680 <_dtoa_r+0x310>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075da:	461a      	mov	r2, r3
 80075dc:	9209      	str	r2, [sp, #36]	; 0x24
 80075de:	e00c      	b.n	80075fa <_dtoa_r+0x28a>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e7f3      	b.n	80075cc <_dtoa_r+0x25c>
 80075e4:	2300      	movs	r3, #0
 80075e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e8:	9308      	str	r3, [sp, #32]
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	4413      	add	r3, r2
 80075ee:	9302      	str	r3, [sp, #8]
 80075f0:	3301      	adds	r3, #1
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	9303      	str	r3, [sp, #12]
 80075f6:	bfb8      	it	lt
 80075f8:	2301      	movlt	r3, #1
 80075fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80075fc:	2200      	movs	r2, #0
 80075fe:	6042      	str	r2, [r0, #4]
 8007600:	2204      	movs	r2, #4
 8007602:	f102 0614 	add.w	r6, r2, #20
 8007606:	429e      	cmp	r6, r3
 8007608:	6841      	ldr	r1, [r0, #4]
 800760a:	d93d      	bls.n	8007688 <_dtoa_r+0x318>
 800760c:	4620      	mov	r0, r4
 800760e:	f001 f84b 	bl	80086a8 <_Balloc>
 8007612:	9001      	str	r0, [sp, #4]
 8007614:	2800      	cmp	r0, #0
 8007616:	d13b      	bne.n	8007690 <_dtoa_r+0x320>
 8007618:	4b11      	ldr	r3, [pc, #68]	; (8007660 <_dtoa_r+0x2f0>)
 800761a:	4602      	mov	r2, r0
 800761c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007620:	e6c0      	b.n	80073a4 <_dtoa_r+0x34>
 8007622:	2301      	movs	r3, #1
 8007624:	e7df      	b.n	80075e6 <_dtoa_r+0x276>
 8007626:	bf00      	nop
 8007628:	636f4361 	.word	0x636f4361
 800762c:	3fd287a7 	.word	0x3fd287a7
 8007630:	8b60c8b3 	.word	0x8b60c8b3
 8007634:	3fc68a28 	.word	0x3fc68a28
 8007638:	509f79fb 	.word	0x509f79fb
 800763c:	3fd34413 	.word	0x3fd34413
 8007640:	0800c756 	.word	0x0800c756
 8007644:	0800c76d 	.word	0x0800c76d
 8007648:	7ff00000 	.word	0x7ff00000
 800764c:	0800c752 	.word	0x0800c752
 8007650:	0800c749 	.word	0x0800c749
 8007654:	0800c9c2 	.word	0x0800c9c2
 8007658:	3ff80000 	.word	0x3ff80000
 800765c:	0800c8d8 	.word	0x0800c8d8
 8007660:	0800c7c8 	.word	0x0800c7c8
 8007664:	2501      	movs	r5, #1
 8007666:	2300      	movs	r3, #0
 8007668:	9306      	str	r3, [sp, #24]
 800766a:	9508      	str	r5, [sp, #32]
 800766c:	f04f 33ff 	mov.w	r3, #4294967295
 8007670:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007674:	2200      	movs	r2, #0
 8007676:	2312      	movs	r3, #18
 8007678:	e7b0      	b.n	80075dc <_dtoa_r+0x26c>
 800767a:	2301      	movs	r3, #1
 800767c:	9308      	str	r3, [sp, #32]
 800767e:	e7f5      	b.n	800766c <_dtoa_r+0x2fc>
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007686:	e7b8      	b.n	80075fa <_dtoa_r+0x28a>
 8007688:	3101      	adds	r1, #1
 800768a:	6041      	str	r1, [r0, #4]
 800768c:	0052      	lsls	r2, r2, #1
 800768e:	e7b8      	b.n	8007602 <_dtoa_r+0x292>
 8007690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007692:	9a01      	ldr	r2, [sp, #4]
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	2b0e      	cmp	r3, #14
 800769a:	f200 809d 	bhi.w	80077d8 <_dtoa_r+0x468>
 800769e:	2d00      	cmp	r5, #0
 80076a0:	f000 809a 	beq.w	80077d8 <_dtoa_r+0x468>
 80076a4:	9b00      	ldr	r3, [sp, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dd32      	ble.n	8007710 <_dtoa_r+0x3a0>
 80076aa:	4ab7      	ldr	r2, [pc, #732]	; (8007988 <_dtoa_r+0x618>)
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076b8:	9b00      	ldr	r3, [sp, #0]
 80076ba:	05d8      	lsls	r0, r3, #23
 80076bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80076c0:	d516      	bpl.n	80076f0 <_dtoa_r+0x380>
 80076c2:	4bb2      	ldr	r3, [pc, #712]	; (800798c <_dtoa_r+0x61c>)
 80076c4:	ec51 0b19 	vmov	r0, r1, d9
 80076c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076cc:	f7f9 f8d6 	bl	800087c <__aeabi_ddiv>
 80076d0:	f007 070f 	and.w	r7, r7, #15
 80076d4:	4682      	mov	sl, r0
 80076d6:	468b      	mov	fp, r1
 80076d8:	2503      	movs	r5, #3
 80076da:	4eac      	ldr	r6, [pc, #688]	; (800798c <_dtoa_r+0x61c>)
 80076dc:	b957      	cbnz	r7, 80076f4 <_dtoa_r+0x384>
 80076de:	4642      	mov	r2, r8
 80076e0:	464b      	mov	r3, r9
 80076e2:	4650      	mov	r0, sl
 80076e4:	4659      	mov	r1, fp
 80076e6:	f7f9 f8c9 	bl	800087c <__aeabi_ddiv>
 80076ea:	4682      	mov	sl, r0
 80076ec:	468b      	mov	fp, r1
 80076ee:	e028      	b.n	8007742 <_dtoa_r+0x3d2>
 80076f0:	2502      	movs	r5, #2
 80076f2:	e7f2      	b.n	80076da <_dtoa_r+0x36a>
 80076f4:	07f9      	lsls	r1, r7, #31
 80076f6:	d508      	bpl.n	800770a <_dtoa_r+0x39a>
 80076f8:	4640      	mov	r0, r8
 80076fa:	4649      	mov	r1, r9
 80076fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007700:	f7f8 ff92 	bl	8000628 <__aeabi_dmul>
 8007704:	3501      	adds	r5, #1
 8007706:	4680      	mov	r8, r0
 8007708:	4689      	mov	r9, r1
 800770a:	107f      	asrs	r7, r7, #1
 800770c:	3608      	adds	r6, #8
 800770e:	e7e5      	b.n	80076dc <_dtoa_r+0x36c>
 8007710:	f000 809b 	beq.w	800784a <_dtoa_r+0x4da>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	4f9d      	ldr	r7, [pc, #628]	; (800798c <_dtoa_r+0x61c>)
 8007718:	425e      	negs	r6, r3
 800771a:	4b9b      	ldr	r3, [pc, #620]	; (8007988 <_dtoa_r+0x618>)
 800771c:	f006 020f 	and.w	r2, r6, #15
 8007720:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007728:	ec51 0b19 	vmov	r0, r1, d9
 800772c:	f7f8 ff7c 	bl	8000628 <__aeabi_dmul>
 8007730:	1136      	asrs	r6, r6, #4
 8007732:	4682      	mov	sl, r0
 8007734:	468b      	mov	fp, r1
 8007736:	2300      	movs	r3, #0
 8007738:	2502      	movs	r5, #2
 800773a:	2e00      	cmp	r6, #0
 800773c:	d17a      	bne.n	8007834 <_dtoa_r+0x4c4>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1d3      	bne.n	80076ea <_dtoa_r+0x37a>
 8007742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8082 	beq.w	800784e <_dtoa_r+0x4de>
 800774a:	4b91      	ldr	r3, [pc, #580]	; (8007990 <_dtoa_r+0x620>)
 800774c:	2200      	movs	r2, #0
 800774e:	4650      	mov	r0, sl
 8007750:	4659      	mov	r1, fp
 8007752:	f7f9 f9db 	bl	8000b0c <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	d079      	beq.n	800784e <_dtoa_r+0x4de>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d076      	beq.n	800784e <_dtoa_r+0x4de>
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	dd36      	ble.n	80077d4 <_dtoa_r+0x464>
 8007766:	9b00      	ldr	r3, [sp, #0]
 8007768:	4650      	mov	r0, sl
 800776a:	4659      	mov	r1, fp
 800776c:	1e5f      	subs	r7, r3, #1
 800776e:	2200      	movs	r2, #0
 8007770:	4b88      	ldr	r3, [pc, #544]	; (8007994 <_dtoa_r+0x624>)
 8007772:	f7f8 ff59 	bl	8000628 <__aeabi_dmul>
 8007776:	9e02      	ldr	r6, [sp, #8]
 8007778:	4682      	mov	sl, r0
 800777a:	468b      	mov	fp, r1
 800777c:	3501      	adds	r5, #1
 800777e:	4628      	mov	r0, r5
 8007780:	f7f8 fee8 	bl	8000554 <__aeabi_i2d>
 8007784:	4652      	mov	r2, sl
 8007786:	465b      	mov	r3, fp
 8007788:	f7f8 ff4e 	bl	8000628 <__aeabi_dmul>
 800778c:	4b82      	ldr	r3, [pc, #520]	; (8007998 <_dtoa_r+0x628>)
 800778e:	2200      	movs	r2, #0
 8007790:	f7f8 fd94 	bl	80002bc <__adddf3>
 8007794:	46d0      	mov	r8, sl
 8007796:	46d9      	mov	r9, fp
 8007798:	4682      	mov	sl, r0
 800779a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800779e:	2e00      	cmp	r6, #0
 80077a0:	d158      	bne.n	8007854 <_dtoa_r+0x4e4>
 80077a2:	4b7e      	ldr	r3, [pc, #504]	; (800799c <_dtoa_r+0x62c>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	4640      	mov	r0, r8
 80077a8:	4649      	mov	r1, r9
 80077aa:	f7f8 fd85 	bl	80002b8 <__aeabi_dsub>
 80077ae:	4652      	mov	r2, sl
 80077b0:	465b      	mov	r3, fp
 80077b2:	4680      	mov	r8, r0
 80077b4:	4689      	mov	r9, r1
 80077b6:	f7f9 f9c7 	bl	8000b48 <__aeabi_dcmpgt>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f040 8295 	bne.w	8007cea <_dtoa_r+0x97a>
 80077c0:	4652      	mov	r2, sl
 80077c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80077c6:	4640      	mov	r0, r8
 80077c8:	4649      	mov	r1, r9
 80077ca:	f7f9 f99f 	bl	8000b0c <__aeabi_dcmplt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	f040 8289 	bne.w	8007ce6 <_dtoa_r+0x976>
 80077d4:	ec5b ab19 	vmov	sl, fp, d9
 80077d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f2c0 8148 	blt.w	8007a70 <_dtoa_r+0x700>
 80077e0:	9a00      	ldr	r2, [sp, #0]
 80077e2:	2a0e      	cmp	r2, #14
 80077e4:	f300 8144 	bgt.w	8007a70 <_dtoa_r+0x700>
 80077e8:	4b67      	ldr	r3, [pc, #412]	; (8007988 <_dtoa_r+0x618>)
 80077ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f280 80d5 	bge.w	80079a4 <_dtoa_r+0x634>
 80077fa:	9b03      	ldr	r3, [sp, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f300 80d1 	bgt.w	80079a4 <_dtoa_r+0x634>
 8007802:	f040 826f 	bne.w	8007ce4 <_dtoa_r+0x974>
 8007806:	4b65      	ldr	r3, [pc, #404]	; (800799c <_dtoa_r+0x62c>)
 8007808:	2200      	movs	r2, #0
 800780a:	4640      	mov	r0, r8
 800780c:	4649      	mov	r1, r9
 800780e:	f7f8 ff0b 	bl	8000628 <__aeabi_dmul>
 8007812:	4652      	mov	r2, sl
 8007814:	465b      	mov	r3, fp
 8007816:	f7f9 f98d 	bl	8000b34 <__aeabi_dcmpge>
 800781a:	9e03      	ldr	r6, [sp, #12]
 800781c:	4637      	mov	r7, r6
 800781e:	2800      	cmp	r0, #0
 8007820:	f040 8245 	bne.w	8007cae <_dtoa_r+0x93e>
 8007824:	9d01      	ldr	r5, [sp, #4]
 8007826:	2331      	movs	r3, #49	; 0x31
 8007828:	f805 3b01 	strb.w	r3, [r5], #1
 800782c:	9b00      	ldr	r3, [sp, #0]
 800782e:	3301      	adds	r3, #1
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	e240      	b.n	8007cb6 <_dtoa_r+0x946>
 8007834:	07f2      	lsls	r2, r6, #31
 8007836:	d505      	bpl.n	8007844 <_dtoa_r+0x4d4>
 8007838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800783c:	f7f8 fef4 	bl	8000628 <__aeabi_dmul>
 8007840:	3501      	adds	r5, #1
 8007842:	2301      	movs	r3, #1
 8007844:	1076      	asrs	r6, r6, #1
 8007846:	3708      	adds	r7, #8
 8007848:	e777      	b.n	800773a <_dtoa_r+0x3ca>
 800784a:	2502      	movs	r5, #2
 800784c:	e779      	b.n	8007742 <_dtoa_r+0x3d2>
 800784e:	9f00      	ldr	r7, [sp, #0]
 8007850:	9e03      	ldr	r6, [sp, #12]
 8007852:	e794      	b.n	800777e <_dtoa_r+0x40e>
 8007854:	9901      	ldr	r1, [sp, #4]
 8007856:	4b4c      	ldr	r3, [pc, #304]	; (8007988 <_dtoa_r+0x618>)
 8007858:	4431      	add	r1, r6
 800785a:	910d      	str	r1, [sp, #52]	; 0x34
 800785c:	9908      	ldr	r1, [sp, #32]
 800785e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007862:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007866:	2900      	cmp	r1, #0
 8007868:	d043      	beq.n	80078f2 <_dtoa_r+0x582>
 800786a:	494d      	ldr	r1, [pc, #308]	; (80079a0 <_dtoa_r+0x630>)
 800786c:	2000      	movs	r0, #0
 800786e:	f7f9 f805 	bl	800087c <__aeabi_ddiv>
 8007872:	4652      	mov	r2, sl
 8007874:	465b      	mov	r3, fp
 8007876:	f7f8 fd1f 	bl	80002b8 <__aeabi_dsub>
 800787a:	9d01      	ldr	r5, [sp, #4]
 800787c:	4682      	mov	sl, r0
 800787e:	468b      	mov	fp, r1
 8007880:	4649      	mov	r1, r9
 8007882:	4640      	mov	r0, r8
 8007884:	f7f9 f980 	bl	8000b88 <__aeabi_d2iz>
 8007888:	4606      	mov	r6, r0
 800788a:	f7f8 fe63 	bl	8000554 <__aeabi_i2d>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4640      	mov	r0, r8
 8007894:	4649      	mov	r1, r9
 8007896:	f7f8 fd0f 	bl	80002b8 <__aeabi_dsub>
 800789a:	3630      	adds	r6, #48	; 0x30
 800789c:	f805 6b01 	strb.w	r6, [r5], #1
 80078a0:	4652      	mov	r2, sl
 80078a2:	465b      	mov	r3, fp
 80078a4:	4680      	mov	r8, r0
 80078a6:	4689      	mov	r9, r1
 80078a8:	f7f9 f930 	bl	8000b0c <__aeabi_dcmplt>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	d163      	bne.n	8007978 <_dtoa_r+0x608>
 80078b0:	4642      	mov	r2, r8
 80078b2:	464b      	mov	r3, r9
 80078b4:	4936      	ldr	r1, [pc, #216]	; (8007990 <_dtoa_r+0x620>)
 80078b6:	2000      	movs	r0, #0
 80078b8:	f7f8 fcfe 	bl	80002b8 <__aeabi_dsub>
 80078bc:	4652      	mov	r2, sl
 80078be:	465b      	mov	r3, fp
 80078c0:	f7f9 f924 	bl	8000b0c <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f040 80b5 	bne.w	8007a34 <_dtoa_r+0x6c4>
 80078ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078cc:	429d      	cmp	r5, r3
 80078ce:	d081      	beq.n	80077d4 <_dtoa_r+0x464>
 80078d0:	4b30      	ldr	r3, [pc, #192]	; (8007994 <_dtoa_r+0x624>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	4650      	mov	r0, sl
 80078d6:	4659      	mov	r1, fp
 80078d8:	f7f8 fea6 	bl	8000628 <__aeabi_dmul>
 80078dc:	4b2d      	ldr	r3, [pc, #180]	; (8007994 <_dtoa_r+0x624>)
 80078de:	4682      	mov	sl, r0
 80078e0:	468b      	mov	fp, r1
 80078e2:	4640      	mov	r0, r8
 80078e4:	4649      	mov	r1, r9
 80078e6:	2200      	movs	r2, #0
 80078e8:	f7f8 fe9e 	bl	8000628 <__aeabi_dmul>
 80078ec:	4680      	mov	r8, r0
 80078ee:	4689      	mov	r9, r1
 80078f0:	e7c6      	b.n	8007880 <_dtoa_r+0x510>
 80078f2:	4650      	mov	r0, sl
 80078f4:	4659      	mov	r1, fp
 80078f6:	f7f8 fe97 	bl	8000628 <__aeabi_dmul>
 80078fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078fc:	9d01      	ldr	r5, [sp, #4]
 80078fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007900:	4682      	mov	sl, r0
 8007902:	468b      	mov	fp, r1
 8007904:	4649      	mov	r1, r9
 8007906:	4640      	mov	r0, r8
 8007908:	f7f9 f93e 	bl	8000b88 <__aeabi_d2iz>
 800790c:	4606      	mov	r6, r0
 800790e:	f7f8 fe21 	bl	8000554 <__aeabi_i2d>
 8007912:	3630      	adds	r6, #48	; 0x30
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4640      	mov	r0, r8
 800791a:	4649      	mov	r1, r9
 800791c:	f7f8 fccc 	bl	80002b8 <__aeabi_dsub>
 8007920:	f805 6b01 	strb.w	r6, [r5], #1
 8007924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007926:	429d      	cmp	r5, r3
 8007928:	4680      	mov	r8, r0
 800792a:	4689      	mov	r9, r1
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	d124      	bne.n	800797c <_dtoa_r+0x60c>
 8007932:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <_dtoa_r+0x630>)
 8007934:	4650      	mov	r0, sl
 8007936:	4659      	mov	r1, fp
 8007938:	f7f8 fcc0 	bl	80002bc <__adddf3>
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4640      	mov	r0, r8
 8007942:	4649      	mov	r1, r9
 8007944:	f7f9 f900 	bl	8000b48 <__aeabi_dcmpgt>
 8007948:	2800      	cmp	r0, #0
 800794a:	d173      	bne.n	8007a34 <_dtoa_r+0x6c4>
 800794c:	4652      	mov	r2, sl
 800794e:	465b      	mov	r3, fp
 8007950:	4913      	ldr	r1, [pc, #76]	; (80079a0 <_dtoa_r+0x630>)
 8007952:	2000      	movs	r0, #0
 8007954:	f7f8 fcb0 	bl	80002b8 <__aeabi_dsub>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4640      	mov	r0, r8
 800795e:	4649      	mov	r1, r9
 8007960:	f7f9 f8d4 	bl	8000b0c <__aeabi_dcmplt>
 8007964:	2800      	cmp	r0, #0
 8007966:	f43f af35 	beq.w	80077d4 <_dtoa_r+0x464>
 800796a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800796c:	1e6b      	subs	r3, r5, #1
 800796e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007970:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007974:	2b30      	cmp	r3, #48	; 0x30
 8007976:	d0f8      	beq.n	800796a <_dtoa_r+0x5fa>
 8007978:	9700      	str	r7, [sp, #0]
 800797a:	e049      	b.n	8007a10 <_dtoa_r+0x6a0>
 800797c:	4b05      	ldr	r3, [pc, #20]	; (8007994 <_dtoa_r+0x624>)
 800797e:	f7f8 fe53 	bl	8000628 <__aeabi_dmul>
 8007982:	4680      	mov	r8, r0
 8007984:	4689      	mov	r9, r1
 8007986:	e7bd      	b.n	8007904 <_dtoa_r+0x594>
 8007988:	0800c8d8 	.word	0x0800c8d8
 800798c:	0800c8b0 	.word	0x0800c8b0
 8007990:	3ff00000 	.word	0x3ff00000
 8007994:	40240000 	.word	0x40240000
 8007998:	401c0000 	.word	0x401c0000
 800799c:	40140000 	.word	0x40140000
 80079a0:	3fe00000 	.word	0x3fe00000
 80079a4:	9d01      	ldr	r5, [sp, #4]
 80079a6:	4656      	mov	r6, sl
 80079a8:	465f      	mov	r7, fp
 80079aa:	4642      	mov	r2, r8
 80079ac:	464b      	mov	r3, r9
 80079ae:	4630      	mov	r0, r6
 80079b0:	4639      	mov	r1, r7
 80079b2:	f7f8 ff63 	bl	800087c <__aeabi_ddiv>
 80079b6:	f7f9 f8e7 	bl	8000b88 <__aeabi_d2iz>
 80079ba:	4682      	mov	sl, r0
 80079bc:	f7f8 fdca 	bl	8000554 <__aeabi_i2d>
 80079c0:	4642      	mov	r2, r8
 80079c2:	464b      	mov	r3, r9
 80079c4:	f7f8 fe30 	bl	8000628 <__aeabi_dmul>
 80079c8:	4602      	mov	r2, r0
 80079ca:	460b      	mov	r3, r1
 80079cc:	4630      	mov	r0, r6
 80079ce:	4639      	mov	r1, r7
 80079d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80079d4:	f7f8 fc70 	bl	80002b8 <__aeabi_dsub>
 80079d8:	f805 6b01 	strb.w	r6, [r5], #1
 80079dc:	9e01      	ldr	r6, [sp, #4]
 80079de:	9f03      	ldr	r7, [sp, #12]
 80079e0:	1bae      	subs	r6, r5, r6
 80079e2:	42b7      	cmp	r7, r6
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	d135      	bne.n	8007a56 <_dtoa_r+0x6e6>
 80079ea:	f7f8 fc67 	bl	80002bc <__adddf3>
 80079ee:	4642      	mov	r2, r8
 80079f0:	464b      	mov	r3, r9
 80079f2:	4606      	mov	r6, r0
 80079f4:	460f      	mov	r7, r1
 80079f6:	f7f9 f8a7 	bl	8000b48 <__aeabi_dcmpgt>
 80079fa:	b9d0      	cbnz	r0, 8007a32 <_dtoa_r+0x6c2>
 80079fc:	4642      	mov	r2, r8
 80079fe:	464b      	mov	r3, r9
 8007a00:	4630      	mov	r0, r6
 8007a02:	4639      	mov	r1, r7
 8007a04:	f7f9 f878 	bl	8000af8 <__aeabi_dcmpeq>
 8007a08:	b110      	cbz	r0, 8007a10 <_dtoa_r+0x6a0>
 8007a0a:	f01a 0f01 	tst.w	sl, #1
 8007a0e:	d110      	bne.n	8007a32 <_dtoa_r+0x6c2>
 8007a10:	4620      	mov	r0, r4
 8007a12:	ee18 1a10 	vmov	r1, s16
 8007a16:	f000 fe87 	bl	8008728 <_Bfree>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	9800      	ldr	r0, [sp, #0]
 8007a1e:	702b      	strb	r3, [r5, #0]
 8007a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a22:	3001      	adds	r0, #1
 8007a24:	6018      	str	r0, [r3, #0]
 8007a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f43f acf1 	beq.w	8007410 <_dtoa_r+0xa0>
 8007a2e:	601d      	str	r5, [r3, #0]
 8007a30:	e4ee      	b.n	8007410 <_dtoa_r+0xa0>
 8007a32:	9f00      	ldr	r7, [sp, #0]
 8007a34:	462b      	mov	r3, r5
 8007a36:	461d      	mov	r5, r3
 8007a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a3c:	2a39      	cmp	r2, #57	; 0x39
 8007a3e:	d106      	bne.n	8007a4e <_dtoa_r+0x6de>
 8007a40:	9a01      	ldr	r2, [sp, #4]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d1f7      	bne.n	8007a36 <_dtoa_r+0x6c6>
 8007a46:	9901      	ldr	r1, [sp, #4]
 8007a48:	2230      	movs	r2, #48	; 0x30
 8007a4a:	3701      	adds	r7, #1
 8007a4c:	700a      	strb	r2, [r1, #0]
 8007a4e:	781a      	ldrb	r2, [r3, #0]
 8007a50:	3201      	adds	r2, #1
 8007a52:	701a      	strb	r2, [r3, #0]
 8007a54:	e790      	b.n	8007978 <_dtoa_r+0x608>
 8007a56:	4ba6      	ldr	r3, [pc, #664]	; (8007cf0 <_dtoa_r+0x980>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f7f8 fde5 	bl	8000628 <__aeabi_dmul>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2300      	movs	r3, #0
 8007a62:	4606      	mov	r6, r0
 8007a64:	460f      	mov	r7, r1
 8007a66:	f7f9 f847 	bl	8000af8 <__aeabi_dcmpeq>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d09d      	beq.n	80079aa <_dtoa_r+0x63a>
 8007a6e:	e7cf      	b.n	8007a10 <_dtoa_r+0x6a0>
 8007a70:	9a08      	ldr	r2, [sp, #32]
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	f000 80d7 	beq.w	8007c26 <_dtoa_r+0x8b6>
 8007a78:	9a06      	ldr	r2, [sp, #24]
 8007a7a:	2a01      	cmp	r2, #1
 8007a7c:	f300 80ba 	bgt.w	8007bf4 <_dtoa_r+0x884>
 8007a80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	f000 80b2 	beq.w	8007bec <_dtoa_r+0x87c>
 8007a88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a8c:	9e07      	ldr	r6, [sp, #28]
 8007a8e:	9d04      	ldr	r5, [sp, #16]
 8007a90:	9a04      	ldr	r2, [sp, #16]
 8007a92:	441a      	add	r2, r3
 8007a94:	9204      	str	r2, [sp, #16]
 8007a96:	9a05      	ldr	r2, [sp, #20]
 8007a98:	2101      	movs	r1, #1
 8007a9a:	441a      	add	r2, r3
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	9205      	str	r2, [sp, #20]
 8007aa0:	f000 ff44 	bl	800892c <__i2b>
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	dd0c      	ble.n	8007ac4 <_dtoa_r+0x754>
 8007aaa:	9b05      	ldr	r3, [sp, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dd09      	ble.n	8007ac4 <_dtoa_r+0x754>
 8007ab0:	42ab      	cmp	r3, r5
 8007ab2:	9a04      	ldr	r2, [sp, #16]
 8007ab4:	bfa8      	it	ge
 8007ab6:	462b      	movge	r3, r5
 8007ab8:	1ad2      	subs	r2, r2, r3
 8007aba:	9204      	str	r2, [sp, #16]
 8007abc:	9a05      	ldr	r2, [sp, #20]
 8007abe:	1aed      	subs	r5, r5, r3
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	9b07      	ldr	r3, [sp, #28]
 8007ac6:	b31b      	cbz	r3, 8007b10 <_dtoa_r+0x7a0>
 8007ac8:	9b08      	ldr	r3, [sp, #32]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 80af 	beq.w	8007c2e <_dtoa_r+0x8be>
 8007ad0:	2e00      	cmp	r6, #0
 8007ad2:	dd13      	ble.n	8007afc <_dtoa_r+0x78c>
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	4632      	mov	r2, r6
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 ffe7 	bl	8008aac <__pow5mult>
 8007ade:	ee18 2a10 	vmov	r2, s16
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 ff36 	bl	8008958 <__multiply>
 8007aec:	ee18 1a10 	vmov	r1, s16
 8007af0:	4680      	mov	r8, r0
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 fe18 	bl	8008728 <_Bfree>
 8007af8:	ee08 8a10 	vmov	s16, r8
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	1b9a      	subs	r2, r3, r6
 8007b00:	d006      	beq.n	8007b10 <_dtoa_r+0x7a0>
 8007b02:	ee18 1a10 	vmov	r1, s16
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 ffd0 	bl	8008aac <__pow5mult>
 8007b0c:	ee08 0a10 	vmov	s16, r0
 8007b10:	2101      	movs	r1, #1
 8007b12:	4620      	mov	r0, r4
 8007b14:	f000 ff0a 	bl	800892c <__i2b>
 8007b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	f340 8088 	ble.w	8007c32 <_dtoa_r+0x8c2>
 8007b22:	461a      	mov	r2, r3
 8007b24:	4601      	mov	r1, r0
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 ffc0 	bl	8008aac <__pow5mult>
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	4606      	mov	r6, r0
 8007b32:	f340 8081 	ble.w	8007c38 <_dtoa_r+0x8c8>
 8007b36:	f04f 0800 	mov.w	r8, #0
 8007b3a:	6933      	ldr	r3, [r6, #16]
 8007b3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007b40:	6918      	ldr	r0, [r3, #16]
 8007b42:	f000 fea3 	bl	800888c <__hi0bits>
 8007b46:	f1c0 0020 	rsb	r0, r0, #32
 8007b4a:	9b05      	ldr	r3, [sp, #20]
 8007b4c:	4418      	add	r0, r3
 8007b4e:	f010 001f 	ands.w	r0, r0, #31
 8007b52:	f000 8092 	beq.w	8007c7a <_dtoa_r+0x90a>
 8007b56:	f1c0 0320 	rsb	r3, r0, #32
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	f340 808a 	ble.w	8007c74 <_dtoa_r+0x904>
 8007b60:	f1c0 001c 	rsb	r0, r0, #28
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	4403      	add	r3, r0
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	4403      	add	r3, r0
 8007b6e:	4405      	add	r5, r0
 8007b70:	9305      	str	r3, [sp, #20]
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	dd07      	ble.n	8007b88 <_dtoa_r+0x818>
 8007b78:	ee18 1a10 	vmov	r1, s16
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f000 ffee 	bl	8008b60 <__lshift>
 8007b84:	ee08 0a10 	vmov	s16, r0
 8007b88:	9b05      	ldr	r3, [sp, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dd05      	ble.n	8007b9a <_dtoa_r+0x82a>
 8007b8e:	4631      	mov	r1, r6
 8007b90:	461a      	mov	r2, r3
 8007b92:	4620      	mov	r0, r4
 8007b94:	f000 ffe4 	bl	8008b60 <__lshift>
 8007b98:	4606      	mov	r6, r0
 8007b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d06e      	beq.n	8007c7e <_dtoa_r+0x90e>
 8007ba0:	ee18 0a10 	vmov	r0, s16
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	f001 f84b 	bl	8008c40 <__mcmp>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	da67      	bge.n	8007c7e <_dtoa_r+0x90e>
 8007bae:	9b00      	ldr	r3, [sp, #0]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	ee18 1a10 	vmov	r1, s16
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	220a      	movs	r2, #10
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fdd5 	bl	800876c <__multadd>
 8007bc2:	9b08      	ldr	r3, [sp, #32]
 8007bc4:	ee08 0a10 	vmov	s16, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 81b1 	beq.w	8007f30 <_dtoa_r+0xbc0>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	220a      	movs	r2, #10
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f000 fdc9 	bl	800876c <__multadd>
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	4607      	mov	r7, r0
 8007be0:	f300 808e 	bgt.w	8007d00 <_dtoa_r+0x990>
 8007be4:	9b06      	ldr	r3, [sp, #24]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	dc51      	bgt.n	8007c8e <_dtoa_r+0x91e>
 8007bea:	e089      	b.n	8007d00 <_dtoa_r+0x990>
 8007bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bf2:	e74b      	b.n	8007a8c <_dtoa_r+0x71c>
 8007bf4:	9b03      	ldr	r3, [sp, #12]
 8007bf6:	1e5e      	subs	r6, r3, #1
 8007bf8:	9b07      	ldr	r3, [sp, #28]
 8007bfa:	42b3      	cmp	r3, r6
 8007bfc:	bfbf      	itttt	lt
 8007bfe:	9b07      	ldrlt	r3, [sp, #28]
 8007c00:	9607      	strlt	r6, [sp, #28]
 8007c02:	1af2      	sublt	r2, r6, r3
 8007c04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c06:	bfb6      	itet	lt
 8007c08:	189b      	addlt	r3, r3, r2
 8007c0a:	1b9e      	subge	r6, r3, r6
 8007c0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	bfb8      	it	lt
 8007c12:	2600      	movlt	r6, #0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bfb7      	itett	lt
 8007c18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007c1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007c20:	1a9d      	sublt	r5, r3, r2
 8007c22:	2300      	movlt	r3, #0
 8007c24:	e734      	b.n	8007a90 <_dtoa_r+0x720>
 8007c26:	9e07      	ldr	r6, [sp, #28]
 8007c28:	9d04      	ldr	r5, [sp, #16]
 8007c2a:	9f08      	ldr	r7, [sp, #32]
 8007c2c:	e73b      	b.n	8007aa6 <_dtoa_r+0x736>
 8007c2e:	9a07      	ldr	r2, [sp, #28]
 8007c30:	e767      	b.n	8007b02 <_dtoa_r+0x792>
 8007c32:	9b06      	ldr	r3, [sp, #24]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	dc18      	bgt.n	8007c6a <_dtoa_r+0x8fa>
 8007c38:	f1ba 0f00 	cmp.w	sl, #0
 8007c3c:	d115      	bne.n	8007c6a <_dtoa_r+0x8fa>
 8007c3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c42:	b993      	cbnz	r3, 8007c6a <_dtoa_r+0x8fa>
 8007c44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c48:	0d1b      	lsrs	r3, r3, #20
 8007c4a:	051b      	lsls	r3, r3, #20
 8007c4c:	b183      	cbz	r3, 8007c70 <_dtoa_r+0x900>
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	3301      	adds	r3, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	9b05      	ldr	r3, [sp, #20]
 8007c56:	3301      	adds	r3, #1
 8007c58:	9305      	str	r3, [sp, #20]
 8007c5a:	f04f 0801 	mov.w	r8, #1
 8007c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f47f af6a 	bne.w	8007b3a <_dtoa_r+0x7ca>
 8007c66:	2001      	movs	r0, #1
 8007c68:	e76f      	b.n	8007b4a <_dtoa_r+0x7da>
 8007c6a:	f04f 0800 	mov.w	r8, #0
 8007c6e:	e7f6      	b.n	8007c5e <_dtoa_r+0x8ee>
 8007c70:	4698      	mov	r8, r3
 8007c72:	e7f4      	b.n	8007c5e <_dtoa_r+0x8ee>
 8007c74:	f43f af7d 	beq.w	8007b72 <_dtoa_r+0x802>
 8007c78:	4618      	mov	r0, r3
 8007c7a:	301c      	adds	r0, #28
 8007c7c:	e772      	b.n	8007b64 <_dtoa_r+0x7f4>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dc37      	bgt.n	8007cf4 <_dtoa_r+0x984>
 8007c84:	9b06      	ldr	r3, [sp, #24]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	dd34      	ble.n	8007cf4 <_dtoa_r+0x984>
 8007c8a:	9b03      	ldr	r3, [sp, #12]
 8007c8c:	9302      	str	r3, [sp, #8]
 8007c8e:	9b02      	ldr	r3, [sp, #8]
 8007c90:	b96b      	cbnz	r3, 8007cae <_dtoa_r+0x93e>
 8007c92:	4631      	mov	r1, r6
 8007c94:	2205      	movs	r2, #5
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 fd68 	bl	800876c <__multadd>
 8007c9c:	4601      	mov	r1, r0
 8007c9e:	4606      	mov	r6, r0
 8007ca0:	ee18 0a10 	vmov	r0, s16
 8007ca4:	f000 ffcc 	bl	8008c40 <__mcmp>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	f73f adbb 	bgt.w	8007824 <_dtoa_r+0x4b4>
 8007cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb0:	9d01      	ldr	r5, [sp, #4]
 8007cb2:	43db      	mvns	r3, r3
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	f04f 0800 	mov.w	r8, #0
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fd33 	bl	8008728 <_Bfree>
 8007cc2:	2f00      	cmp	r7, #0
 8007cc4:	f43f aea4 	beq.w	8007a10 <_dtoa_r+0x6a0>
 8007cc8:	f1b8 0f00 	cmp.w	r8, #0
 8007ccc:	d005      	beq.n	8007cda <_dtoa_r+0x96a>
 8007cce:	45b8      	cmp	r8, r7
 8007cd0:	d003      	beq.n	8007cda <_dtoa_r+0x96a>
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fd27 	bl	8008728 <_Bfree>
 8007cda:	4639      	mov	r1, r7
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f000 fd23 	bl	8008728 <_Bfree>
 8007ce2:	e695      	b.n	8007a10 <_dtoa_r+0x6a0>
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	4637      	mov	r7, r6
 8007ce8:	e7e1      	b.n	8007cae <_dtoa_r+0x93e>
 8007cea:	9700      	str	r7, [sp, #0]
 8007cec:	4637      	mov	r7, r6
 8007cee:	e599      	b.n	8007824 <_dtoa_r+0x4b4>
 8007cf0:	40240000 	.word	0x40240000
 8007cf4:	9b08      	ldr	r3, [sp, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80ca 	beq.w	8007e90 <_dtoa_r+0xb20>
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	9302      	str	r3, [sp, #8]
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	dd05      	ble.n	8007d10 <_dtoa_r+0x9a0>
 8007d04:	4639      	mov	r1, r7
 8007d06:	462a      	mov	r2, r5
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 ff29 	bl	8008b60 <__lshift>
 8007d0e:	4607      	mov	r7, r0
 8007d10:	f1b8 0f00 	cmp.w	r8, #0
 8007d14:	d05b      	beq.n	8007dce <_dtoa_r+0xa5e>
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fcc5 	bl	80086a8 <_Balloc>
 8007d1e:	4605      	mov	r5, r0
 8007d20:	b928      	cbnz	r0, 8007d2e <_dtoa_r+0x9be>
 8007d22:	4b87      	ldr	r3, [pc, #540]	; (8007f40 <_dtoa_r+0xbd0>)
 8007d24:	4602      	mov	r2, r0
 8007d26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d2a:	f7ff bb3b 	b.w	80073a4 <_dtoa_r+0x34>
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	3202      	adds	r2, #2
 8007d32:	0092      	lsls	r2, r2, #2
 8007d34:	f107 010c 	add.w	r1, r7, #12
 8007d38:	300c      	adds	r0, #12
 8007d3a:	f000 fca7 	bl	800868c <memcpy>
 8007d3e:	2201      	movs	r2, #1
 8007d40:	4629      	mov	r1, r5
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 ff0c 	bl	8008b60 <__lshift>
 8007d48:	9b01      	ldr	r3, [sp, #4]
 8007d4a:	f103 0901 	add.w	r9, r3, #1
 8007d4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007d52:	4413      	add	r3, r2
 8007d54:	9305      	str	r3, [sp, #20]
 8007d56:	f00a 0301 	and.w	r3, sl, #1
 8007d5a:	46b8      	mov	r8, r7
 8007d5c:	9304      	str	r3, [sp, #16]
 8007d5e:	4607      	mov	r7, r0
 8007d60:	4631      	mov	r1, r6
 8007d62:	ee18 0a10 	vmov	r0, s16
 8007d66:	f7ff fa75 	bl	8007254 <quorem>
 8007d6a:	4641      	mov	r1, r8
 8007d6c:	9002      	str	r0, [sp, #8]
 8007d6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007d72:	ee18 0a10 	vmov	r0, s16
 8007d76:	f000 ff63 	bl	8008c40 <__mcmp>
 8007d7a:	463a      	mov	r2, r7
 8007d7c:	9003      	str	r0, [sp, #12]
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4620      	mov	r0, r4
 8007d82:	f000 ff79 	bl	8008c78 <__mdiff>
 8007d86:	68c2      	ldr	r2, [r0, #12]
 8007d88:	f109 3bff 	add.w	fp, r9, #4294967295
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	bb02      	cbnz	r2, 8007dd2 <_dtoa_r+0xa62>
 8007d90:	4601      	mov	r1, r0
 8007d92:	ee18 0a10 	vmov	r0, s16
 8007d96:	f000 ff53 	bl	8008c40 <__mcmp>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4620      	mov	r0, r4
 8007da0:	9207      	str	r2, [sp, #28]
 8007da2:	f000 fcc1 	bl	8008728 <_Bfree>
 8007da6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007daa:	ea43 0102 	orr.w	r1, r3, r2
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	430b      	orrs	r3, r1
 8007db2:	464d      	mov	r5, r9
 8007db4:	d10f      	bne.n	8007dd6 <_dtoa_r+0xa66>
 8007db6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007dba:	d02a      	beq.n	8007e12 <_dtoa_r+0xaa2>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	dd02      	ble.n	8007dc8 <_dtoa_r+0xa58>
 8007dc2:	9b02      	ldr	r3, [sp, #8]
 8007dc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007dc8:	f88b a000 	strb.w	sl, [fp]
 8007dcc:	e775      	b.n	8007cba <_dtoa_r+0x94a>
 8007dce:	4638      	mov	r0, r7
 8007dd0:	e7ba      	b.n	8007d48 <_dtoa_r+0x9d8>
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	e7e2      	b.n	8007d9c <_dtoa_r+0xa2c>
 8007dd6:	9b03      	ldr	r3, [sp, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db04      	blt.n	8007de6 <_dtoa_r+0xa76>
 8007ddc:	9906      	ldr	r1, [sp, #24]
 8007dde:	430b      	orrs	r3, r1
 8007de0:	9904      	ldr	r1, [sp, #16]
 8007de2:	430b      	orrs	r3, r1
 8007de4:	d122      	bne.n	8007e2c <_dtoa_r+0xabc>
 8007de6:	2a00      	cmp	r2, #0
 8007de8:	ddee      	ble.n	8007dc8 <_dtoa_r+0xa58>
 8007dea:	ee18 1a10 	vmov	r1, s16
 8007dee:	2201      	movs	r2, #1
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 feb5 	bl	8008b60 <__lshift>
 8007df6:	4631      	mov	r1, r6
 8007df8:	ee08 0a10 	vmov	s16, r0
 8007dfc:	f000 ff20 	bl	8008c40 <__mcmp>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	dc03      	bgt.n	8007e0c <_dtoa_r+0xa9c>
 8007e04:	d1e0      	bne.n	8007dc8 <_dtoa_r+0xa58>
 8007e06:	f01a 0f01 	tst.w	sl, #1
 8007e0a:	d0dd      	beq.n	8007dc8 <_dtoa_r+0xa58>
 8007e0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e10:	d1d7      	bne.n	8007dc2 <_dtoa_r+0xa52>
 8007e12:	2339      	movs	r3, #57	; 0x39
 8007e14:	f88b 3000 	strb.w	r3, [fp]
 8007e18:	462b      	mov	r3, r5
 8007e1a:	461d      	mov	r5, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007e22:	2a39      	cmp	r2, #57	; 0x39
 8007e24:	d071      	beq.n	8007f0a <_dtoa_r+0xb9a>
 8007e26:	3201      	adds	r2, #1
 8007e28:	701a      	strb	r2, [r3, #0]
 8007e2a:	e746      	b.n	8007cba <_dtoa_r+0x94a>
 8007e2c:	2a00      	cmp	r2, #0
 8007e2e:	dd07      	ble.n	8007e40 <_dtoa_r+0xad0>
 8007e30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007e34:	d0ed      	beq.n	8007e12 <_dtoa_r+0xaa2>
 8007e36:	f10a 0301 	add.w	r3, sl, #1
 8007e3a:	f88b 3000 	strb.w	r3, [fp]
 8007e3e:	e73c      	b.n	8007cba <_dtoa_r+0x94a>
 8007e40:	9b05      	ldr	r3, [sp, #20]
 8007e42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007e46:	4599      	cmp	r9, r3
 8007e48:	d047      	beq.n	8007eda <_dtoa_r+0xb6a>
 8007e4a:	ee18 1a10 	vmov	r1, s16
 8007e4e:	2300      	movs	r3, #0
 8007e50:	220a      	movs	r2, #10
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fc8a 	bl	800876c <__multadd>
 8007e58:	45b8      	cmp	r8, r7
 8007e5a:	ee08 0a10 	vmov	s16, r0
 8007e5e:	f04f 0300 	mov.w	r3, #0
 8007e62:	f04f 020a 	mov.w	r2, #10
 8007e66:	4641      	mov	r1, r8
 8007e68:	4620      	mov	r0, r4
 8007e6a:	d106      	bne.n	8007e7a <_dtoa_r+0xb0a>
 8007e6c:	f000 fc7e 	bl	800876c <__multadd>
 8007e70:	4680      	mov	r8, r0
 8007e72:	4607      	mov	r7, r0
 8007e74:	f109 0901 	add.w	r9, r9, #1
 8007e78:	e772      	b.n	8007d60 <_dtoa_r+0x9f0>
 8007e7a:	f000 fc77 	bl	800876c <__multadd>
 8007e7e:	4639      	mov	r1, r7
 8007e80:	4680      	mov	r8, r0
 8007e82:	2300      	movs	r3, #0
 8007e84:	220a      	movs	r2, #10
 8007e86:	4620      	mov	r0, r4
 8007e88:	f000 fc70 	bl	800876c <__multadd>
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	e7f1      	b.n	8007e74 <_dtoa_r+0xb04>
 8007e90:	9b03      	ldr	r3, [sp, #12]
 8007e92:	9302      	str	r3, [sp, #8]
 8007e94:	9d01      	ldr	r5, [sp, #4]
 8007e96:	ee18 0a10 	vmov	r0, s16
 8007e9a:	4631      	mov	r1, r6
 8007e9c:	f7ff f9da 	bl	8007254 <quorem>
 8007ea0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	f805 ab01 	strb.w	sl, [r5], #1
 8007eaa:	1aea      	subs	r2, r5, r3
 8007eac:	9b02      	ldr	r3, [sp, #8]
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	dd09      	ble.n	8007ec6 <_dtoa_r+0xb56>
 8007eb2:	ee18 1a10 	vmov	r1, s16
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	220a      	movs	r2, #10
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f000 fc56 	bl	800876c <__multadd>
 8007ec0:	ee08 0a10 	vmov	s16, r0
 8007ec4:	e7e7      	b.n	8007e96 <_dtoa_r+0xb26>
 8007ec6:	9b02      	ldr	r3, [sp, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bfc8      	it	gt
 8007ecc:	461d      	movgt	r5, r3
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	bfd8      	it	le
 8007ed2:	2501      	movle	r5, #1
 8007ed4:	441d      	add	r5, r3
 8007ed6:	f04f 0800 	mov.w	r8, #0
 8007eda:	ee18 1a10 	vmov	r1, s16
 8007ede:	2201      	movs	r2, #1
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fe3d 	bl	8008b60 <__lshift>
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	ee08 0a10 	vmov	s16, r0
 8007eec:	f000 fea8 	bl	8008c40 <__mcmp>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	dc91      	bgt.n	8007e18 <_dtoa_r+0xaa8>
 8007ef4:	d102      	bne.n	8007efc <_dtoa_r+0xb8c>
 8007ef6:	f01a 0f01 	tst.w	sl, #1
 8007efa:	d18d      	bne.n	8007e18 <_dtoa_r+0xaa8>
 8007efc:	462b      	mov	r3, r5
 8007efe:	461d      	mov	r5, r3
 8007f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f04:	2a30      	cmp	r2, #48	; 0x30
 8007f06:	d0fa      	beq.n	8007efe <_dtoa_r+0xb8e>
 8007f08:	e6d7      	b.n	8007cba <_dtoa_r+0x94a>
 8007f0a:	9a01      	ldr	r2, [sp, #4]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d184      	bne.n	8007e1a <_dtoa_r+0xaaa>
 8007f10:	9b00      	ldr	r3, [sp, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2331      	movs	r3, #49	; 0x31
 8007f18:	7013      	strb	r3, [r2, #0]
 8007f1a:	e6ce      	b.n	8007cba <_dtoa_r+0x94a>
 8007f1c:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <_dtoa_r+0xbd4>)
 8007f1e:	f7ff ba95 	b.w	800744c <_dtoa_r+0xdc>
 8007f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f47f aa6e 	bne.w	8007406 <_dtoa_r+0x96>
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <_dtoa_r+0xbd8>)
 8007f2c:	f7ff ba8e 	b.w	800744c <_dtoa_r+0xdc>
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	dcae      	bgt.n	8007e94 <_dtoa_r+0xb24>
 8007f36:	9b06      	ldr	r3, [sp, #24]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	f73f aea8 	bgt.w	8007c8e <_dtoa_r+0x91e>
 8007f3e:	e7a9      	b.n	8007e94 <_dtoa_r+0xb24>
 8007f40:	0800c7c8 	.word	0x0800c7c8
 8007f44:	0800c9c1 	.word	0x0800c9c1
 8007f48:	0800c749 	.word	0x0800c749

08007f4c <rshift>:
 8007f4c:	6903      	ldr	r3, [r0, #16]
 8007f4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007f52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007f5a:	f100 0414 	add.w	r4, r0, #20
 8007f5e:	dd45      	ble.n	8007fec <rshift+0xa0>
 8007f60:	f011 011f 	ands.w	r1, r1, #31
 8007f64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007f68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007f6c:	d10c      	bne.n	8007f88 <rshift+0x3c>
 8007f6e:	f100 0710 	add.w	r7, r0, #16
 8007f72:	4629      	mov	r1, r5
 8007f74:	42b1      	cmp	r1, r6
 8007f76:	d334      	bcc.n	8007fe2 <rshift+0x96>
 8007f78:	1a9b      	subs	r3, r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	1eea      	subs	r2, r5, #3
 8007f7e:	4296      	cmp	r6, r2
 8007f80:	bf38      	it	cc
 8007f82:	2300      	movcc	r3, #0
 8007f84:	4423      	add	r3, r4
 8007f86:	e015      	b.n	8007fb4 <rshift+0x68>
 8007f88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007f8c:	f1c1 0820 	rsb	r8, r1, #32
 8007f90:	40cf      	lsrs	r7, r1
 8007f92:	f105 0e04 	add.w	lr, r5, #4
 8007f96:	46a1      	mov	r9, r4
 8007f98:	4576      	cmp	r6, lr
 8007f9a:	46f4      	mov	ip, lr
 8007f9c:	d815      	bhi.n	8007fca <rshift+0x7e>
 8007f9e:	1a9a      	subs	r2, r3, r2
 8007fa0:	0092      	lsls	r2, r2, #2
 8007fa2:	3a04      	subs	r2, #4
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	42ae      	cmp	r6, r5
 8007fa8:	bf38      	it	cc
 8007faa:	2200      	movcc	r2, #0
 8007fac:	18a3      	adds	r3, r4, r2
 8007fae:	50a7      	str	r7, [r4, r2]
 8007fb0:	b107      	cbz	r7, 8007fb4 <rshift+0x68>
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	1b1a      	subs	r2, r3, r4
 8007fb6:	42a3      	cmp	r3, r4
 8007fb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007fbc:	bf08      	it	eq
 8007fbe:	2300      	moveq	r3, #0
 8007fc0:	6102      	str	r2, [r0, #16]
 8007fc2:	bf08      	it	eq
 8007fc4:	6143      	streq	r3, [r0, #20]
 8007fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fca:	f8dc c000 	ldr.w	ip, [ip]
 8007fce:	fa0c fc08 	lsl.w	ip, ip, r8
 8007fd2:	ea4c 0707 	orr.w	r7, ip, r7
 8007fd6:	f849 7b04 	str.w	r7, [r9], #4
 8007fda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fde:	40cf      	lsrs	r7, r1
 8007fe0:	e7da      	b.n	8007f98 <rshift+0x4c>
 8007fe2:	f851 cb04 	ldr.w	ip, [r1], #4
 8007fe6:	f847 cf04 	str.w	ip, [r7, #4]!
 8007fea:	e7c3      	b.n	8007f74 <rshift+0x28>
 8007fec:	4623      	mov	r3, r4
 8007fee:	e7e1      	b.n	8007fb4 <rshift+0x68>

08007ff0 <__hexdig_fun>:
 8007ff0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ff4:	2b09      	cmp	r3, #9
 8007ff6:	d802      	bhi.n	8007ffe <__hexdig_fun+0xe>
 8007ff8:	3820      	subs	r0, #32
 8007ffa:	b2c0      	uxtb	r0, r0
 8007ffc:	4770      	bx	lr
 8007ffe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008002:	2b05      	cmp	r3, #5
 8008004:	d801      	bhi.n	800800a <__hexdig_fun+0x1a>
 8008006:	3847      	subs	r0, #71	; 0x47
 8008008:	e7f7      	b.n	8007ffa <__hexdig_fun+0xa>
 800800a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800800e:	2b05      	cmp	r3, #5
 8008010:	d801      	bhi.n	8008016 <__hexdig_fun+0x26>
 8008012:	3827      	subs	r0, #39	; 0x27
 8008014:	e7f1      	b.n	8007ffa <__hexdig_fun+0xa>
 8008016:	2000      	movs	r0, #0
 8008018:	4770      	bx	lr
	...

0800801c <__gethex>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	ed2d 8b02 	vpush	{d8}
 8008024:	b089      	sub	sp, #36	; 0x24
 8008026:	ee08 0a10 	vmov	s16, r0
 800802a:	9304      	str	r3, [sp, #16]
 800802c:	4bb4      	ldr	r3, [pc, #720]	; (8008300 <__gethex+0x2e4>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	4618      	mov	r0, r3
 8008034:	468b      	mov	fp, r1
 8008036:	4690      	mov	r8, r2
 8008038:	f7f8 f8dc 	bl	80001f4 <strlen>
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	f8db 2000 	ldr.w	r2, [fp]
 8008042:	4403      	add	r3, r0
 8008044:	4682      	mov	sl, r0
 8008046:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800804a:	9305      	str	r3, [sp, #20]
 800804c:	1c93      	adds	r3, r2, #2
 800804e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008052:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008056:	32fe      	adds	r2, #254	; 0xfe
 8008058:	18d1      	adds	r1, r2, r3
 800805a:	461f      	mov	r7, r3
 800805c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008060:	9100      	str	r1, [sp, #0]
 8008062:	2830      	cmp	r0, #48	; 0x30
 8008064:	d0f8      	beq.n	8008058 <__gethex+0x3c>
 8008066:	f7ff ffc3 	bl	8007ff0 <__hexdig_fun>
 800806a:	4604      	mov	r4, r0
 800806c:	2800      	cmp	r0, #0
 800806e:	d13a      	bne.n	80080e6 <__gethex+0xca>
 8008070:	9901      	ldr	r1, [sp, #4]
 8008072:	4652      	mov	r2, sl
 8008074:	4638      	mov	r0, r7
 8008076:	f001 fdb3 	bl	8009be0 <strncmp>
 800807a:	4605      	mov	r5, r0
 800807c:	2800      	cmp	r0, #0
 800807e:	d168      	bne.n	8008152 <__gethex+0x136>
 8008080:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008084:	eb07 060a 	add.w	r6, r7, sl
 8008088:	f7ff ffb2 	bl	8007ff0 <__hexdig_fun>
 800808c:	2800      	cmp	r0, #0
 800808e:	d062      	beq.n	8008156 <__gethex+0x13a>
 8008090:	4633      	mov	r3, r6
 8008092:	7818      	ldrb	r0, [r3, #0]
 8008094:	2830      	cmp	r0, #48	; 0x30
 8008096:	461f      	mov	r7, r3
 8008098:	f103 0301 	add.w	r3, r3, #1
 800809c:	d0f9      	beq.n	8008092 <__gethex+0x76>
 800809e:	f7ff ffa7 	bl	8007ff0 <__hexdig_fun>
 80080a2:	2301      	movs	r3, #1
 80080a4:	fab0 f480 	clz	r4, r0
 80080a8:	0964      	lsrs	r4, r4, #5
 80080aa:	4635      	mov	r5, r6
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	463a      	mov	r2, r7
 80080b0:	4616      	mov	r6, r2
 80080b2:	3201      	adds	r2, #1
 80080b4:	7830      	ldrb	r0, [r6, #0]
 80080b6:	f7ff ff9b 	bl	8007ff0 <__hexdig_fun>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d1f8      	bne.n	80080b0 <__gethex+0x94>
 80080be:	9901      	ldr	r1, [sp, #4]
 80080c0:	4652      	mov	r2, sl
 80080c2:	4630      	mov	r0, r6
 80080c4:	f001 fd8c 	bl	8009be0 <strncmp>
 80080c8:	b980      	cbnz	r0, 80080ec <__gethex+0xd0>
 80080ca:	b94d      	cbnz	r5, 80080e0 <__gethex+0xc4>
 80080cc:	eb06 050a 	add.w	r5, r6, sl
 80080d0:	462a      	mov	r2, r5
 80080d2:	4616      	mov	r6, r2
 80080d4:	3201      	adds	r2, #1
 80080d6:	7830      	ldrb	r0, [r6, #0]
 80080d8:	f7ff ff8a 	bl	8007ff0 <__hexdig_fun>
 80080dc:	2800      	cmp	r0, #0
 80080de:	d1f8      	bne.n	80080d2 <__gethex+0xb6>
 80080e0:	1bad      	subs	r5, r5, r6
 80080e2:	00ad      	lsls	r5, r5, #2
 80080e4:	e004      	b.n	80080f0 <__gethex+0xd4>
 80080e6:	2400      	movs	r4, #0
 80080e8:	4625      	mov	r5, r4
 80080ea:	e7e0      	b.n	80080ae <__gethex+0x92>
 80080ec:	2d00      	cmp	r5, #0
 80080ee:	d1f7      	bne.n	80080e0 <__gethex+0xc4>
 80080f0:	7833      	ldrb	r3, [r6, #0]
 80080f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80080f6:	2b50      	cmp	r3, #80	; 0x50
 80080f8:	d13b      	bne.n	8008172 <__gethex+0x156>
 80080fa:	7873      	ldrb	r3, [r6, #1]
 80080fc:	2b2b      	cmp	r3, #43	; 0x2b
 80080fe:	d02c      	beq.n	800815a <__gethex+0x13e>
 8008100:	2b2d      	cmp	r3, #45	; 0x2d
 8008102:	d02e      	beq.n	8008162 <__gethex+0x146>
 8008104:	1c71      	adds	r1, r6, #1
 8008106:	f04f 0900 	mov.w	r9, #0
 800810a:	7808      	ldrb	r0, [r1, #0]
 800810c:	f7ff ff70 	bl	8007ff0 <__hexdig_fun>
 8008110:	1e43      	subs	r3, r0, #1
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b18      	cmp	r3, #24
 8008116:	d82c      	bhi.n	8008172 <__gethex+0x156>
 8008118:	f1a0 0210 	sub.w	r2, r0, #16
 800811c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008120:	f7ff ff66 	bl	8007ff0 <__hexdig_fun>
 8008124:	1e43      	subs	r3, r0, #1
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b18      	cmp	r3, #24
 800812a:	d91d      	bls.n	8008168 <__gethex+0x14c>
 800812c:	f1b9 0f00 	cmp.w	r9, #0
 8008130:	d000      	beq.n	8008134 <__gethex+0x118>
 8008132:	4252      	negs	r2, r2
 8008134:	4415      	add	r5, r2
 8008136:	f8cb 1000 	str.w	r1, [fp]
 800813a:	b1e4      	cbz	r4, 8008176 <__gethex+0x15a>
 800813c:	9b00      	ldr	r3, [sp, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	bf14      	ite	ne
 8008142:	2700      	movne	r7, #0
 8008144:	2706      	moveq	r7, #6
 8008146:	4638      	mov	r0, r7
 8008148:	b009      	add	sp, #36	; 0x24
 800814a:	ecbd 8b02 	vpop	{d8}
 800814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008152:	463e      	mov	r6, r7
 8008154:	4625      	mov	r5, r4
 8008156:	2401      	movs	r4, #1
 8008158:	e7ca      	b.n	80080f0 <__gethex+0xd4>
 800815a:	f04f 0900 	mov.w	r9, #0
 800815e:	1cb1      	adds	r1, r6, #2
 8008160:	e7d3      	b.n	800810a <__gethex+0xee>
 8008162:	f04f 0901 	mov.w	r9, #1
 8008166:	e7fa      	b.n	800815e <__gethex+0x142>
 8008168:	230a      	movs	r3, #10
 800816a:	fb03 0202 	mla	r2, r3, r2, r0
 800816e:	3a10      	subs	r2, #16
 8008170:	e7d4      	b.n	800811c <__gethex+0x100>
 8008172:	4631      	mov	r1, r6
 8008174:	e7df      	b.n	8008136 <__gethex+0x11a>
 8008176:	1bf3      	subs	r3, r6, r7
 8008178:	3b01      	subs	r3, #1
 800817a:	4621      	mov	r1, r4
 800817c:	2b07      	cmp	r3, #7
 800817e:	dc0b      	bgt.n	8008198 <__gethex+0x17c>
 8008180:	ee18 0a10 	vmov	r0, s16
 8008184:	f000 fa90 	bl	80086a8 <_Balloc>
 8008188:	4604      	mov	r4, r0
 800818a:	b940      	cbnz	r0, 800819e <__gethex+0x182>
 800818c:	4b5d      	ldr	r3, [pc, #372]	; (8008304 <__gethex+0x2e8>)
 800818e:	4602      	mov	r2, r0
 8008190:	21de      	movs	r1, #222	; 0xde
 8008192:	485d      	ldr	r0, [pc, #372]	; (8008308 <__gethex+0x2ec>)
 8008194:	f001 fdf4 	bl	8009d80 <__assert_func>
 8008198:	3101      	adds	r1, #1
 800819a:	105b      	asrs	r3, r3, #1
 800819c:	e7ee      	b.n	800817c <__gethex+0x160>
 800819e:	f100 0914 	add.w	r9, r0, #20
 80081a2:	f04f 0b00 	mov.w	fp, #0
 80081a6:	f1ca 0301 	rsb	r3, sl, #1
 80081aa:	f8cd 9008 	str.w	r9, [sp, #8]
 80081ae:	f8cd b000 	str.w	fp, [sp]
 80081b2:	9306      	str	r3, [sp, #24]
 80081b4:	42b7      	cmp	r7, r6
 80081b6:	d340      	bcc.n	800823a <__gethex+0x21e>
 80081b8:	9802      	ldr	r0, [sp, #8]
 80081ba:	9b00      	ldr	r3, [sp, #0]
 80081bc:	f840 3b04 	str.w	r3, [r0], #4
 80081c0:	eba0 0009 	sub.w	r0, r0, r9
 80081c4:	1080      	asrs	r0, r0, #2
 80081c6:	0146      	lsls	r6, r0, #5
 80081c8:	6120      	str	r0, [r4, #16]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fb5e 	bl	800888c <__hi0bits>
 80081d0:	1a30      	subs	r0, r6, r0
 80081d2:	f8d8 6000 	ldr.w	r6, [r8]
 80081d6:	42b0      	cmp	r0, r6
 80081d8:	dd63      	ble.n	80082a2 <__gethex+0x286>
 80081da:	1b87      	subs	r7, r0, r6
 80081dc:	4639      	mov	r1, r7
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 ff02 	bl	8008fe8 <__any_on>
 80081e4:	4682      	mov	sl, r0
 80081e6:	b1a8      	cbz	r0, 8008214 <__gethex+0x1f8>
 80081e8:	1e7b      	subs	r3, r7, #1
 80081ea:	1159      	asrs	r1, r3, #5
 80081ec:	f003 021f 	and.w	r2, r3, #31
 80081f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80081f4:	f04f 0a01 	mov.w	sl, #1
 80081f8:	fa0a f202 	lsl.w	r2, sl, r2
 80081fc:	420a      	tst	r2, r1
 80081fe:	d009      	beq.n	8008214 <__gethex+0x1f8>
 8008200:	4553      	cmp	r3, sl
 8008202:	dd05      	ble.n	8008210 <__gethex+0x1f4>
 8008204:	1eb9      	subs	r1, r7, #2
 8008206:	4620      	mov	r0, r4
 8008208:	f000 feee 	bl	8008fe8 <__any_on>
 800820c:	2800      	cmp	r0, #0
 800820e:	d145      	bne.n	800829c <__gethex+0x280>
 8008210:	f04f 0a02 	mov.w	sl, #2
 8008214:	4639      	mov	r1, r7
 8008216:	4620      	mov	r0, r4
 8008218:	f7ff fe98 	bl	8007f4c <rshift>
 800821c:	443d      	add	r5, r7
 800821e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008222:	42ab      	cmp	r3, r5
 8008224:	da4c      	bge.n	80082c0 <__gethex+0x2a4>
 8008226:	ee18 0a10 	vmov	r0, s16
 800822a:	4621      	mov	r1, r4
 800822c:	f000 fa7c 	bl	8008728 <_Bfree>
 8008230:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008232:	2300      	movs	r3, #0
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	27a3      	movs	r7, #163	; 0xa3
 8008238:	e785      	b.n	8008146 <__gethex+0x12a>
 800823a:	1e73      	subs	r3, r6, #1
 800823c:	9a05      	ldr	r2, [sp, #20]
 800823e:	9303      	str	r3, [sp, #12]
 8008240:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008244:	4293      	cmp	r3, r2
 8008246:	d019      	beq.n	800827c <__gethex+0x260>
 8008248:	f1bb 0f20 	cmp.w	fp, #32
 800824c:	d107      	bne.n	800825e <__gethex+0x242>
 800824e:	9b02      	ldr	r3, [sp, #8]
 8008250:	9a00      	ldr	r2, [sp, #0]
 8008252:	f843 2b04 	str.w	r2, [r3], #4
 8008256:	9302      	str	r3, [sp, #8]
 8008258:	2300      	movs	r3, #0
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	469b      	mov	fp, r3
 800825e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008262:	f7ff fec5 	bl	8007ff0 <__hexdig_fun>
 8008266:	9b00      	ldr	r3, [sp, #0]
 8008268:	f000 000f 	and.w	r0, r0, #15
 800826c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008270:	4303      	orrs	r3, r0
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	f10b 0b04 	add.w	fp, fp, #4
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	e00d      	b.n	8008298 <__gethex+0x27c>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	9a06      	ldr	r2, [sp, #24]
 8008280:	4413      	add	r3, r2
 8008282:	42bb      	cmp	r3, r7
 8008284:	d3e0      	bcc.n	8008248 <__gethex+0x22c>
 8008286:	4618      	mov	r0, r3
 8008288:	9901      	ldr	r1, [sp, #4]
 800828a:	9307      	str	r3, [sp, #28]
 800828c:	4652      	mov	r2, sl
 800828e:	f001 fca7 	bl	8009be0 <strncmp>
 8008292:	9b07      	ldr	r3, [sp, #28]
 8008294:	2800      	cmp	r0, #0
 8008296:	d1d7      	bne.n	8008248 <__gethex+0x22c>
 8008298:	461e      	mov	r6, r3
 800829a:	e78b      	b.n	80081b4 <__gethex+0x198>
 800829c:	f04f 0a03 	mov.w	sl, #3
 80082a0:	e7b8      	b.n	8008214 <__gethex+0x1f8>
 80082a2:	da0a      	bge.n	80082ba <__gethex+0x29e>
 80082a4:	1a37      	subs	r7, r6, r0
 80082a6:	4621      	mov	r1, r4
 80082a8:	ee18 0a10 	vmov	r0, s16
 80082ac:	463a      	mov	r2, r7
 80082ae:	f000 fc57 	bl	8008b60 <__lshift>
 80082b2:	1bed      	subs	r5, r5, r7
 80082b4:	4604      	mov	r4, r0
 80082b6:	f100 0914 	add.w	r9, r0, #20
 80082ba:	f04f 0a00 	mov.w	sl, #0
 80082be:	e7ae      	b.n	800821e <__gethex+0x202>
 80082c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80082c4:	42a8      	cmp	r0, r5
 80082c6:	dd72      	ble.n	80083ae <__gethex+0x392>
 80082c8:	1b45      	subs	r5, r0, r5
 80082ca:	42ae      	cmp	r6, r5
 80082cc:	dc36      	bgt.n	800833c <__gethex+0x320>
 80082ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d02a      	beq.n	800832c <__gethex+0x310>
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d02c      	beq.n	8008334 <__gethex+0x318>
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d11c      	bne.n	8008318 <__gethex+0x2fc>
 80082de:	42ae      	cmp	r6, r5
 80082e0:	d11a      	bne.n	8008318 <__gethex+0x2fc>
 80082e2:	2e01      	cmp	r6, #1
 80082e4:	d112      	bne.n	800830c <__gethex+0x2f0>
 80082e6:	9a04      	ldr	r2, [sp, #16]
 80082e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	2301      	movs	r3, #1
 80082f0:	6123      	str	r3, [r4, #16]
 80082f2:	f8c9 3000 	str.w	r3, [r9]
 80082f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082f8:	2762      	movs	r7, #98	; 0x62
 80082fa:	601c      	str	r4, [r3, #0]
 80082fc:	e723      	b.n	8008146 <__gethex+0x12a>
 80082fe:	bf00      	nop
 8008300:	0800c840 	.word	0x0800c840
 8008304:	0800c7c8 	.word	0x0800c7c8
 8008308:	0800c7d9 	.word	0x0800c7d9
 800830c:	1e71      	subs	r1, r6, #1
 800830e:	4620      	mov	r0, r4
 8008310:	f000 fe6a 	bl	8008fe8 <__any_on>
 8008314:	2800      	cmp	r0, #0
 8008316:	d1e6      	bne.n	80082e6 <__gethex+0x2ca>
 8008318:	ee18 0a10 	vmov	r0, s16
 800831c:	4621      	mov	r1, r4
 800831e:	f000 fa03 	bl	8008728 <_Bfree>
 8008322:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008324:	2300      	movs	r3, #0
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	2750      	movs	r7, #80	; 0x50
 800832a:	e70c      	b.n	8008146 <__gethex+0x12a>
 800832c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f2      	bne.n	8008318 <__gethex+0x2fc>
 8008332:	e7d8      	b.n	80082e6 <__gethex+0x2ca>
 8008334:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1d5      	bne.n	80082e6 <__gethex+0x2ca>
 800833a:	e7ed      	b.n	8008318 <__gethex+0x2fc>
 800833c:	1e6f      	subs	r7, r5, #1
 800833e:	f1ba 0f00 	cmp.w	sl, #0
 8008342:	d131      	bne.n	80083a8 <__gethex+0x38c>
 8008344:	b127      	cbz	r7, 8008350 <__gethex+0x334>
 8008346:	4639      	mov	r1, r7
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fe4d 	bl	8008fe8 <__any_on>
 800834e:	4682      	mov	sl, r0
 8008350:	117b      	asrs	r3, r7, #5
 8008352:	2101      	movs	r1, #1
 8008354:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008358:	f007 071f 	and.w	r7, r7, #31
 800835c:	fa01 f707 	lsl.w	r7, r1, r7
 8008360:	421f      	tst	r7, r3
 8008362:	4629      	mov	r1, r5
 8008364:	4620      	mov	r0, r4
 8008366:	bf18      	it	ne
 8008368:	f04a 0a02 	orrne.w	sl, sl, #2
 800836c:	1b76      	subs	r6, r6, r5
 800836e:	f7ff fded 	bl	8007f4c <rshift>
 8008372:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008376:	2702      	movs	r7, #2
 8008378:	f1ba 0f00 	cmp.w	sl, #0
 800837c:	d048      	beq.n	8008410 <__gethex+0x3f4>
 800837e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008382:	2b02      	cmp	r3, #2
 8008384:	d015      	beq.n	80083b2 <__gethex+0x396>
 8008386:	2b03      	cmp	r3, #3
 8008388:	d017      	beq.n	80083ba <__gethex+0x39e>
 800838a:	2b01      	cmp	r3, #1
 800838c:	d109      	bne.n	80083a2 <__gethex+0x386>
 800838e:	f01a 0f02 	tst.w	sl, #2
 8008392:	d006      	beq.n	80083a2 <__gethex+0x386>
 8008394:	f8d9 0000 	ldr.w	r0, [r9]
 8008398:	ea4a 0a00 	orr.w	sl, sl, r0
 800839c:	f01a 0f01 	tst.w	sl, #1
 80083a0:	d10e      	bne.n	80083c0 <__gethex+0x3a4>
 80083a2:	f047 0710 	orr.w	r7, r7, #16
 80083a6:	e033      	b.n	8008410 <__gethex+0x3f4>
 80083a8:	f04f 0a01 	mov.w	sl, #1
 80083ac:	e7d0      	b.n	8008350 <__gethex+0x334>
 80083ae:	2701      	movs	r7, #1
 80083b0:	e7e2      	b.n	8008378 <__gethex+0x35c>
 80083b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083b4:	f1c3 0301 	rsb	r3, r3, #1
 80083b8:	9315      	str	r3, [sp, #84]	; 0x54
 80083ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0f0      	beq.n	80083a2 <__gethex+0x386>
 80083c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80083c4:	f104 0314 	add.w	r3, r4, #20
 80083c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80083cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80083d0:	f04f 0c00 	mov.w	ip, #0
 80083d4:	4618      	mov	r0, r3
 80083d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083da:	f1b2 3fff 	cmp.w	r2, #4294967295
 80083de:	d01c      	beq.n	800841a <__gethex+0x3fe>
 80083e0:	3201      	adds	r2, #1
 80083e2:	6002      	str	r2, [r0, #0]
 80083e4:	2f02      	cmp	r7, #2
 80083e6:	f104 0314 	add.w	r3, r4, #20
 80083ea:	d13f      	bne.n	800846c <__gethex+0x450>
 80083ec:	f8d8 2000 	ldr.w	r2, [r8]
 80083f0:	3a01      	subs	r2, #1
 80083f2:	42b2      	cmp	r2, r6
 80083f4:	d10a      	bne.n	800840c <__gethex+0x3f0>
 80083f6:	1171      	asrs	r1, r6, #5
 80083f8:	2201      	movs	r2, #1
 80083fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083fe:	f006 061f 	and.w	r6, r6, #31
 8008402:	fa02 f606 	lsl.w	r6, r2, r6
 8008406:	421e      	tst	r6, r3
 8008408:	bf18      	it	ne
 800840a:	4617      	movne	r7, r2
 800840c:	f047 0720 	orr.w	r7, r7, #32
 8008410:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008412:	601c      	str	r4, [r3, #0]
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	601d      	str	r5, [r3, #0]
 8008418:	e695      	b.n	8008146 <__gethex+0x12a>
 800841a:	4299      	cmp	r1, r3
 800841c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008420:	d8d8      	bhi.n	80083d4 <__gethex+0x3b8>
 8008422:	68a3      	ldr	r3, [r4, #8]
 8008424:	459b      	cmp	fp, r3
 8008426:	db19      	blt.n	800845c <__gethex+0x440>
 8008428:	6861      	ldr	r1, [r4, #4]
 800842a:	ee18 0a10 	vmov	r0, s16
 800842e:	3101      	adds	r1, #1
 8008430:	f000 f93a 	bl	80086a8 <_Balloc>
 8008434:	4681      	mov	r9, r0
 8008436:	b918      	cbnz	r0, 8008440 <__gethex+0x424>
 8008438:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <__gethex+0x488>)
 800843a:	4602      	mov	r2, r0
 800843c:	2184      	movs	r1, #132	; 0x84
 800843e:	e6a8      	b.n	8008192 <__gethex+0x176>
 8008440:	6922      	ldr	r2, [r4, #16]
 8008442:	3202      	adds	r2, #2
 8008444:	f104 010c 	add.w	r1, r4, #12
 8008448:	0092      	lsls	r2, r2, #2
 800844a:	300c      	adds	r0, #12
 800844c:	f000 f91e 	bl	800868c <memcpy>
 8008450:	4621      	mov	r1, r4
 8008452:	ee18 0a10 	vmov	r0, s16
 8008456:	f000 f967 	bl	8008728 <_Bfree>
 800845a:	464c      	mov	r4, r9
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008464:	6122      	str	r2, [r4, #16]
 8008466:	2201      	movs	r2, #1
 8008468:	615a      	str	r2, [r3, #20]
 800846a:	e7bb      	b.n	80083e4 <__gethex+0x3c8>
 800846c:	6922      	ldr	r2, [r4, #16]
 800846e:	455a      	cmp	r2, fp
 8008470:	dd0b      	ble.n	800848a <__gethex+0x46e>
 8008472:	2101      	movs	r1, #1
 8008474:	4620      	mov	r0, r4
 8008476:	f7ff fd69 	bl	8007f4c <rshift>
 800847a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800847e:	3501      	adds	r5, #1
 8008480:	42ab      	cmp	r3, r5
 8008482:	f6ff aed0 	blt.w	8008226 <__gethex+0x20a>
 8008486:	2701      	movs	r7, #1
 8008488:	e7c0      	b.n	800840c <__gethex+0x3f0>
 800848a:	f016 061f 	ands.w	r6, r6, #31
 800848e:	d0fa      	beq.n	8008486 <__gethex+0x46a>
 8008490:	4453      	add	r3, sl
 8008492:	f1c6 0620 	rsb	r6, r6, #32
 8008496:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800849a:	f000 f9f7 	bl	800888c <__hi0bits>
 800849e:	42b0      	cmp	r0, r6
 80084a0:	dbe7      	blt.n	8008472 <__gethex+0x456>
 80084a2:	e7f0      	b.n	8008486 <__gethex+0x46a>
 80084a4:	0800c7c8 	.word	0x0800c7c8

080084a8 <L_shift>:
 80084a8:	f1c2 0208 	rsb	r2, r2, #8
 80084ac:	0092      	lsls	r2, r2, #2
 80084ae:	b570      	push	{r4, r5, r6, lr}
 80084b0:	f1c2 0620 	rsb	r6, r2, #32
 80084b4:	6843      	ldr	r3, [r0, #4]
 80084b6:	6804      	ldr	r4, [r0, #0]
 80084b8:	fa03 f506 	lsl.w	r5, r3, r6
 80084bc:	432c      	orrs	r4, r5
 80084be:	40d3      	lsrs	r3, r2
 80084c0:	6004      	str	r4, [r0, #0]
 80084c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80084c6:	4288      	cmp	r0, r1
 80084c8:	d3f4      	bcc.n	80084b4 <L_shift+0xc>
 80084ca:	bd70      	pop	{r4, r5, r6, pc}

080084cc <__match>:
 80084cc:	b530      	push	{r4, r5, lr}
 80084ce:	6803      	ldr	r3, [r0, #0]
 80084d0:	3301      	adds	r3, #1
 80084d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d6:	b914      	cbnz	r4, 80084de <__match+0x12>
 80084d8:	6003      	str	r3, [r0, #0]
 80084da:	2001      	movs	r0, #1
 80084dc:	bd30      	pop	{r4, r5, pc}
 80084de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80084e6:	2d19      	cmp	r5, #25
 80084e8:	bf98      	it	ls
 80084ea:	3220      	addls	r2, #32
 80084ec:	42a2      	cmp	r2, r4
 80084ee:	d0f0      	beq.n	80084d2 <__match+0x6>
 80084f0:	2000      	movs	r0, #0
 80084f2:	e7f3      	b.n	80084dc <__match+0x10>

080084f4 <__hexnan>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	680b      	ldr	r3, [r1, #0]
 80084fa:	115e      	asrs	r6, r3, #5
 80084fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008500:	f013 031f 	ands.w	r3, r3, #31
 8008504:	b087      	sub	sp, #28
 8008506:	bf18      	it	ne
 8008508:	3604      	addne	r6, #4
 800850a:	2500      	movs	r5, #0
 800850c:	1f37      	subs	r7, r6, #4
 800850e:	4690      	mov	r8, r2
 8008510:	6802      	ldr	r2, [r0, #0]
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	4682      	mov	sl, r0
 8008516:	f846 5c04 	str.w	r5, [r6, #-4]
 800851a:	46b9      	mov	r9, r7
 800851c:	463c      	mov	r4, r7
 800851e:	9502      	str	r5, [sp, #8]
 8008520:	46ab      	mov	fp, r5
 8008522:	7851      	ldrb	r1, [r2, #1]
 8008524:	1c53      	adds	r3, r2, #1
 8008526:	9303      	str	r3, [sp, #12]
 8008528:	b341      	cbz	r1, 800857c <__hexnan+0x88>
 800852a:	4608      	mov	r0, r1
 800852c:	9205      	str	r2, [sp, #20]
 800852e:	9104      	str	r1, [sp, #16]
 8008530:	f7ff fd5e 	bl	8007ff0 <__hexdig_fun>
 8008534:	2800      	cmp	r0, #0
 8008536:	d14f      	bne.n	80085d8 <__hexnan+0xe4>
 8008538:	9904      	ldr	r1, [sp, #16]
 800853a:	9a05      	ldr	r2, [sp, #20]
 800853c:	2920      	cmp	r1, #32
 800853e:	d818      	bhi.n	8008572 <__hexnan+0x7e>
 8008540:	9b02      	ldr	r3, [sp, #8]
 8008542:	459b      	cmp	fp, r3
 8008544:	dd13      	ble.n	800856e <__hexnan+0x7a>
 8008546:	454c      	cmp	r4, r9
 8008548:	d206      	bcs.n	8008558 <__hexnan+0x64>
 800854a:	2d07      	cmp	r5, #7
 800854c:	dc04      	bgt.n	8008558 <__hexnan+0x64>
 800854e:	462a      	mov	r2, r5
 8008550:	4649      	mov	r1, r9
 8008552:	4620      	mov	r0, r4
 8008554:	f7ff ffa8 	bl	80084a8 <L_shift>
 8008558:	4544      	cmp	r4, r8
 800855a:	d950      	bls.n	80085fe <__hexnan+0x10a>
 800855c:	2300      	movs	r3, #0
 800855e:	f1a4 0904 	sub.w	r9, r4, #4
 8008562:	f844 3c04 	str.w	r3, [r4, #-4]
 8008566:	f8cd b008 	str.w	fp, [sp, #8]
 800856a:	464c      	mov	r4, r9
 800856c:	461d      	mov	r5, r3
 800856e:	9a03      	ldr	r2, [sp, #12]
 8008570:	e7d7      	b.n	8008522 <__hexnan+0x2e>
 8008572:	2929      	cmp	r1, #41	; 0x29
 8008574:	d156      	bne.n	8008624 <__hexnan+0x130>
 8008576:	3202      	adds	r2, #2
 8008578:	f8ca 2000 	str.w	r2, [sl]
 800857c:	f1bb 0f00 	cmp.w	fp, #0
 8008580:	d050      	beq.n	8008624 <__hexnan+0x130>
 8008582:	454c      	cmp	r4, r9
 8008584:	d206      	bcs.n	8008594 <__hexnan+0xa0>
 8008586:	2d07      	cmp	r5, #7
 8008588:	dc04      	bgt.n	8008594 <__hexnan+0xa0>
 800858a:	462a      	mov	r2, r5
 800858c:	4649      	mov	r1, r9
 800858e:	4620      	mov	r0, r4
 8008590:	f7ff ff8a 	bl	80084a8 <L_shift>
 8008594:	4544      	cmp	r4, r8
 8008596:	d934      	bls.n	8008602 <__hexnan+0x10e>
 8008598:	f1a8 0204 	sub.w	r2, r8, #4
 800859c:	4623      	mov	r3, r4
 800859e:	f853 1b04 	ldr.w	r1, [r3], #4
 80085a2:	f842 1f04 	str.w	r1, [r2, #4]!
 80085a6:	429f      	cmp	r7, r3
 80085a8:	d2f9      	bcs.n	800859e <__hexnan+0xaa>
 80085aa:	1b3b      	subs	r3, r7, r4
 80085ac:	f023 0303 	bic.w	r3, r3, #3
 80085b0:	3304      	adds	r3, #4
 80085b2:	3401      	adds	r4, #1
 80085b4:	3e03      	subs	r6, #3
 80085b6:	42b4      	cmp	r4, r6
 80085b8:	bf88      	it	hi
 80085ba:	2304      	movhi	r3, #4
 80085bc:	4443      	add	r3, r8
 80085be:	2200      	movs	r2, #0
 80085c0:	f843 2b04 	str.w	r2, [r3], #4
 80085c4:	429f      	cmp	r7, r3
 80085c6:	d2fb      	bcs.n	80085c0 <__hexnan+0xcc>
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	b91b      	cbnz	r3, 80085d4 <__hexnan+0xe0>
 80085cc:	4547      	cmp	r7, r8
 80085ce:	d127      	bne.n	8008620 <__hexnan+0x12c>
 80085d0:	2301      	movs	r3, #1
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	2005      	movs	r0, #5
 80085d6:	e026      	b.n	8008626 <__hexnan+0x132>
 80085d8:	3501      	adds	r5, #1
 80085da:	2d08      	cmp	r5, #8
 80085dc:	f10b 0b01 	add.w	fp, fp, #1
 80085e0:	dd06      	ble.n	80085f0 <__hexnan+0xfc>
 80085e2:	4544      	cmp	r4, r8
 80085e4:	d9c3      	bls.n	800856e <__hexnan+0x7a>
 80085e6:	2300      	movs	r3, #0
 80085e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80085ec:	2501      	movs	r5, #1
 80085ee:	3c04      	subs	r4, #4
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	f000 000f 	and.w	r0, r0, #15
 80085f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80085fa:	6022      	str	r2, [r4, #0]
 80085fc:	e7b7      	b.n	800856e <__hexnan+0x7a>
 80085fe:	2508      	movs	r5, #8
 8008600:	e7b5      	b.n	800856e <__hexnan+0x7a>
 8008602:	9b01      	ldr	r3, [sp, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0df      	beq.n	80085c8 <__hexnan+0xd4>
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	f1c3 0320 	rsb	r3, r3, #32
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
 8008614:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008618:	401a      	ands	r2, r3
 800861a:	f846 2c04 	str.w	r2, [r6, #-4]
 800861e:	e7d3      	b.n	80085c8 <__hexnan+0xd4>
 8008620:	3f04      	subs	r7, #4
 8008622:	e7d1      	b.n	80085c8 <__hexnan+0xd4>
 8008624:	2004      	movs	r0, #4
 8008626:	b007      	add	sp, #28
 8008628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800862c <_localeconv_r>:
 800862c:	4800      	ldr	r0, [pc, #0]	; (8008630 <_localeconv_r+0x4>)
 800862e:	4770      	bx	lr
 8008630:	20000170 	.word	0x20000170

08008634 <_lseek_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4d07      	ldr	r5, [pc, #28]	; (8008654 <_lseek_r+0x20>)
 8008638:	4604      	mov	r4, r0
 800863a:	4608      	mov	r0, r1
 800863c:	4611      	mov	r1, r2
 800863e:	2200      	movs	r2, #0
 8008640:	602a      	str	r2, [r5, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	f7fa fb43 	bl	8002cce <_lseek>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_lseek_r+0x1e>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_lseek_r+0x1e>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	20000d40 	.word	0x20000d40

08008658 <malloc>:
 8008658:	4b02      	ldr	r3, [pc, #8]	; (8008664 <malloc+0xc>)
 800865a:	4601      	mov	r1, r0
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	f000 bd67 	b.w	8009130 <_malloc_r>
 8008662:	bf00      	nop
 8008664:	20000018 	.word	0x20000018

08008668 <__ascii_mbtowc>:
 8008668:	b082      	sub	sp, #8
 800866a:	b901      	cbnz	r1, 800866e <__ascii_mbtowc+0x6>
 800866c:	a901      	add	r1, sp, #4
 800866e:	b142      	cbz	r2, 8008682 <__ascii_mbtowc+0x1a>
 8008670:	b14b      	cbz	r3, 8008686 <__ascii_mbtowc+0x1e>
 8008672:	7813      	ldrb	r3, [r2, #0]
 8008674:	600b      	str	r3, [r1, #0]
 8008676:	7812      	ldrb	r2, [r2, #0]
 8008678:	1e10      	subs	r0, r2, #0
 800867a:	bf18      	it	ne
 800867c:	2001      	movne	r0, #1
 800867e:	b002      	add	sp, #8
 8008680:	4770      	bx	lr
 8008682:	4610      	mov	r0, r2
 8008684:	e7fb      	b.n	800867e <__ascii_mbtowc+0x16>
 8008686:	f06f 0001 	mvn.w	r0, #1
 800868a:	e7f8      	b.n	800867e <__ascii_mbtowc+0x16>

0800868c <memcpy>:
 800868c:	440a      	add	r2, r1
 800868e:	4291      	cmp	r1, r2
 8008690:	f100 33ff 	add.w	r3, r0, #4294967295
 8008694:	d100      	bne.n	8008698 <memcpy+0xc>
 8008696:	4770      	bx	lr
 8008698:	b510      	push	{r4, lr}
 800869a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800869e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086a2:	4291      	cmp	r1, r2
 80086a4:	d1f9      	bne.n	800869a <memcpy+0xe>
 80086a6:	bd10      	pop	{r4, pc}

080086a8 <_Balloc>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086ac:	4604      	mov	r4, r0
 80086ae:	460d      	mov	r5, r1
 80086b0:	b976      	cbnz	r6, 80086d0 <_Balloc+0x28>
 80086b2:	2010      	movs	r0, #16
 80086b4:	f7ff ffd0 	bl	8008658 <malloc>
 80086b8:	4602      	mov	r2, r0
 80086ba:	6260      	str	r0, [r4, #36]	; 0x24
 80086bc:	b920      	cbnz	r0, 80086c8 <_Balloc+0x20>
 80086be:	4b18      	ldr	r3, [pc, #96]	; (8008720 <_Balloc+0x78>)
 80086c0:	4818      	ldr	r0, [pc, #96]	; (8008724 <_Balloc+0x7c>)
 80086c2:	2166      	movs	r1, #102	; 0x66
 80086c4:	f001 fb5c 	bl	8009d80 <__assert_func>
 80086c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086cc:	6006      	str	r6, [r0, #0]
 80086ce:	60c6      	str	r6, [r0, #12]
 80086d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086d2:	68f3      	ldr	r3, [r6, #12]
 80086d4:	b183      	cbz	r3, 80086f8 <_Balloc+0x50>
 80086d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086de:	b9b8      	cbnz	r0, 8008710 <_Balloc+0x68>
 80086e0:	2101      	movs	r1, #1
 80086e2:	fa01 f605 	lsl.w	r6, r1, r5
 80086e6:	1d72      	adds	r2, r6, #5
 80086e8:	0092      	lsls	r2, r2, #2
 80086ea:	4620      	mov	r0, r4
 80086ec:	f000 fc9d 	bl	800902a <_calloc_r>
 80086f0:	b160      	cbz	r0, 800870c <_Balloc+0x64>
 80086f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086f6:	e00e      	b.n	8008716 <_Balloc+0x6e>
 80086f8:	2221      	movs	r2, #33	; 0x21
 80086fa:	2104      	movs	r1, #4
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fc94 	bl	800902a <_calloc_r>
 8008702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008704:	60f0      	str	r0, [r6, #12]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e4      	bne.n	80086d6 <_Balloc+0x2e>
 800870c:	2000      	movs	r0, #0
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	6802      	ldr	r2, [r0, #0]
 8008712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008716:	2300      	movs	r3, #0
 8008718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800871c:	e7f7      	b.n	800870e <_Balloc+0x66>
 800871e:	bf00      	nop
 8008720:	0800c756 	.word	0x0800c756
 8008724:	0800c854 	.word	0x0800c854

08008728 <_Bfree>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800872c:	4605      	mov	r5, r0
 800872e:	460c      	mov	r4, r1
 8008730:	b976      	cbnz	r6, 8008750 <_Bfree+0x28>
 8008732:	2010      	movs	r0, #16
 8008734:	f7ff ff90 	bl	8008658 <malloc>
 8008738:	4602      	mov	r2, r0
 800873a:	6268      	str	r0, [r5, #36]	; 0x24
 800873c:	b920      	cbnz	r0, 8008748 <_Bfree+0x20>
 800873e:	4b09      	ldr	r3, [pc, #36]	; (8008764 <_Bfree+0x3c>)
 8008740:	4809      	ldr	r0, [pc, #36]	; (8008768 <_Bfree+0x40>)
 8008742:	218a      	movs	r1, #138	; 0x8a
 8008744:	f001 fb1c 	bl	8009d80 <__assert_func>
 8008748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800874c:	6006      	str	r6, [r0, #0]
 800874e:	60c6      	str	r6, [r0, #12]
 8008750:	b13c      	cbz	r4, 8008762 <_Bfree+0x3a>
 8008752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008754:	6862      	ldr	r2, [r4, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800875c:	6021      	str	r1, [r4, #0]
 800875e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	0800c756 	.word	0x0800c756
 8008768:	0800c854 	.word	0x0800c854

0800876c <__multadd>:
 800876c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008770:	690d      	ldr	r5, [r1, #16]
 8008772:	4607      	mov	r7, r0
 8008774:	460c      	mov	r4, r1
 8008776:	461e      	mov	r6, r3
 8008778:	f101 0c14 	add.w	ip, r1, #20
 800877c:	2000      	movs	r0, #0
 800877e:	f8dc 3000 	ldr.w	r3, [ip]
 8008782:	b299      	uxth	r1, r3
 8008784:	fb02 6101 	mla	r1, r2, r1, r6
 8008788:	0c1e      	lsrs	r6, r3, #16
 800878a:	0c0b      	lsrs	r3, r1, #16
 800878c:	fb02 3306 	mla	r3, r2, r6, r3
 8008790:	b289      	uxth	r1, r1
 8008792:	3001      	adds	r0, #1
 8008794:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008798:	4285      	cmp	r5, r0
 800879a:	f84c 1b04 	str.w	r1, [ip], #4
 800879e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087a2:	dcec      	bgt.n	800877e <__multadd+0x12>
 80087a4:	b30e      	cbz	r6, 80087ea <__multadd+0x7e>
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	dc19      	bgt.n	80087e0 <__multadd+0x74>
 80087ac:	6861      	ldr	r1, [r4, #4]
 80087ae:	4638      	mov	r0, r7
 80087b0:	3101      	adds	r1, #1
 80087b2:	f7ff ff79 	bl	80086a8 <_Balloc>
 80087b6:	4680      	mov	r8, r0
 80087b8:	b928      	cbnz	r0, 80087c6 <__multadd+0x5a>
 80087ba:	4602      	mov	r2, r0
 80087bc:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <__multadd+0x84>)
 80087be:	480d      	ldr	r0, [pc, #52]	; (80087f4 <__multadd+0x88>)
 80087c0:	21b5      	movs	r1, #181	; 0xb5
 80087c2:	f001 fadd 	bl	8009d80 <__assert_func>
 80087c6:	6922      	ldr	r2, [r4, #16]
 80087c8:	3202      	adds	r2, #2
 80087ca:	f104 010c 	add.w	r1, r4, #12
 80087ce:	0092      	lsls	r2, r2, #2
 80087d0:	300c      	adds	r0, #12
 80087d2:	f7ff ff5b 	bl	800868c <memcpy>
 80087d6:	4621      	mov	r1, r4
 80087d8:	4638      	mov	r0, r7
 80087da:	f7ff ffa5 	bl	8008728 <_Bfree>
 80087de:	4644      	mov	r4, r8
 80087e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087e4:	3501      	adds	r5, #1
 80087e6:	615e      	str	r6, [r3, #20]
 80087e8:	6125      	str	r5, [r4, #16]
 80087ea:	4620      	mov	r0, r4
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f0:	0800c7c8 	.word	0x0800c7c8
 80087f4:	0800c854 	.word	0x0800c854

080087f8 <__s2b>:
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	460c      	mov	r4, r1
 80087fe:	4615      	mov	r5, r2
 8008800:	461f      	mov	r7, r3
 8008802:	2209      	movs	r2, #9
 8008804:	3308      	adds	r3, #8
 8008806:	4606      	mov	r6, r0
 8008808:	fb93 f3f2 	sdiv	r3, r3, r2
 800880c:	2100      	movs	r1, #0
 800880e:	2201      	movs	r2, #1
 8008810:	429a      	cmp	r2, r3
 8008812:	db09      	blt.n	8008828 <__s2b+0x30>
 8008814:	4630      	mov	r0, r6
 8008816:	f7ff ff47 	bl	80086a8 <_Balloc>
 800881a:	b940      	cbnz	r0, 800882e <__s2b+0x36>
 800881c:	4602      	mov	r2, r0
 800881e:	4b19      	ldr	r3, [pc, #100]	; (8008884 <__s2b+0x8c>)
 8008820:	4819      	ldr	r0, [pc, #100]	; (8008888 <__s2b+0x90>)
 8008822:	21ce      	movs	r1, #206	; 0xce
 8008824:	f001 faac 	bl	8009d80 <__assert_func>
 8008828:	0052      	lsls	r2, r2, #1
 800882a:	3101      	adds	r1, #1
 800882c:	e7f0      	b.n	8008810 <__s2b+0x18>
 800882e:	9b08      	ldr	r3, [sp, #32]
 8008830:	6143      	str	r3, [r0, #20]
 8008832:	2d09      	cmp	r5, #9
 8008834:	f04f 0301 	mov.w	r3, #1
 8008838:	6103      	str	r3, [r0, #16]
 800883a:	dd16      	ble.n	800886a <__s2b+0x72>
 800883c:	f104 0909 	add.w	r9, r4, #9
 8008840:	46c8      	mov	r8, r9
 8008842:	442c      	add	r4, r5
 8008844:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008848:	4601      	mov	r1, r0
 800884a:	3b30      	subs	r3, #48	; 0x30
 800884c:	220a      	movs	r2, #10
 800884e:	4630      	mov	r0, r6
 8008850:	f7ff ff8c 	bl	800876c <__multadd>
 8008854:	45a0      	cmp	r8, r4
 8008856:	d1f5      	bne.n	8008844 <__s2b+0x4c>
 8008858:	f1a5 0408 	sub.w	r4, r5, #8
 800885c:	444c      	add	r4, r9
 800885e:	1b2d      	subs	r5, r5, r4
 8008860:	1963      	adds	r3, r4, r5
 8008862:	42bb      	cmp	r3, r7
 8008864:	db04      	blt.n	8008870 <__s2b+0x78>
 8008866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800886a:	340a      	adds	r4, #10
 800886c:	2509      	movs	r5, #9
 800886e:	e7f6      	b.n	800885e <__s2b+0x66>
 8008870:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008874:	4601      	mov	r1, r0
 8008876:	3b30      	subs	r3, #48	; 0x30
 8008878:	220a      	movs	r2, #10
 800887a:	4630      	mov	r0, r6
 800887c:	f7ff ff76 	bl	800876c <__multadd>
 8008880:	e7ee      	b.n	8008860 <__s2b+0x68>
 8008882:	bf00      	nop
 8008884:	0800c7c8 	.word	0x0800c7c8
 8008888:	0800c854 	.word	0x0800c854

0800888c <__hi0bits>:
 800888c:	0c03      	lsrs	r3, r0, #16
 800888e:	041b      	lsls	r3, r3, #16
 8008890:	b9d3      	cbnz	r3, 80088c8 <__hi0bits+0x3c>
 8008892:	0400      	lsls	r0, r0, #16
 8008894:	2310      	movs	r3, #16
 8008896:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800889a:	bf04      	itt	eq
 800889c:	0200      	lsleq	r0, r0, #8
 800889e:	3308      	addeq	r3, #8
 80088a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088a4:	bf04      	itt	eq
 80088a6:	0100      	lsleq	r0, r0, #4
 80088a8:	3304      	addeq	r3, #4
 80088aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088ae:	bf04      	itt	eq
 80088b0:	0080      	lsleq	r0, r0, #2
 80088b2:	3302      	addeq	r3, #2
 80088b4:	2800      	cmp	r0, #0
 80088b6:	db05      	blt.n	80088c4 <__hi0bits+0x38>
 80088b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088bc:	f103 0301 	add.w	r3, r3, #1
 80088c0:	bf08      	it	eq
 80088c2:	2320      	moveq	r3, #32
 80088c4:	4618      	mov	r0, r3
 80088c6:	4770      	bx	lr
 80088c8:	2300      	movs	r3, #0
 80088ca:	e7e4      	b.n	8008896 <__hi0bits+0xa>

080088cc <__lo0bits>:
 80088cc:	6803      	ldr	r3, [r0, #0]
 80088ce:	f013 0207 	ands.w	r2, r3, #7
 80088d2:	4601      	mov	r1, r0
 80088d4:	d00b      	beq.n	80088ee <__lo0bits+0x22>
 80088d6:	07da      	lsls	r2, r3, #31
 80088d8:	d423      	bmi.n	8008922 <__lo0bits+0x56>
 80088da:	0798      	lsls	r0, r3, #30
 80088dc:	bf49      	itett	mi
 80088de:	085b      	lsrmi	r3, r3, #1
 80088e0:	089b      	lsrpl	r3, r3, #2
 80088e2:	2001      	movmi	r0, #1
 80088e4:	600b      	strmi	r3, [r1, #0]
 80088e6:	bf5c      	itt	pl
 80088e8:	600b      	strpl	r3, [r1, #0]
 80088ea:	2002      	movpl	r0, #2
 80088ec:	4770      	bx	lr
 80088ee:	b298      	uxth	r0, r3
 80088f0:	b9a8      	cbnz	r0, 800891e <__lo0bits+0x52>
 80088f2:	0c1b      	lsrs	r3, r3, #16
 80088f4:	2010      	movs	r0, #16
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	b90a      	cbnz	r2, 80088fe <__lo0bits+0x32>
 80088fa:	3008      	adds	r0, #8
 80088fc:	0a1b      	lsrs	r3, r3, #8
 80088fe:	071a      	lsls	r2, r3, #28
 8008900:	bf04      	itt	eq
 8008902:	091b      	lsreq	r3, r3, #4
 8008904:	3004      	addeq	r0, #4
 8008906:	079a      	lsls	r2, r3, #30
 8008908:	bf04      	itt	eq
 800890a:	089b      	lsreq	r3, r3, #2
 800890c:	3002      	addeq	r0, #2
 800890e:	07da      	lsls	r2, r3, #31
 8008910:	d403      	bmi.n	800891a <__lo0bits+0x4e>
 8008912:	085b      	lsrs	r3, r3, #1
 8008914:	f100 0001 	add.w	r0, r0, #1
 8008918:	d005      	beq.n	8008926 <__lo0bits+0x5a>
 800891a:	600b      	str	r3, [r1, #0]
 800891c:	4770      	bx	lr
 800891e:	4610      	mov	r0, r2
 8008920:	e7e9      	b.n	80088f6 <__lo0bits+0x2a>
 8008922:	2000      	movs	r0, #0
 8008924:	4770      	bx	lr
 8008926:	2020      	movs	r0, #32
 8008928:	4770      	bx	lr
	...

0800892c <__i2b>:
 800892c:	b510      	push	{r4, lr}
 800892e:	460c      	mov	r4, r1
 8008930:	2101      	movs	r1, #1
 8008932:	f7ff feb9 	bl	80086a8 <_Balloc>
 8008936:	4602      	mov	r2, r0
 8008938:	b928      	cbnz	r0, 8008946 <__i2b+0x1a>
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <__i2b+0x24>)
 800893c:	4805      	ldr	r0, [pc, #20]	; (8008954 <__i2b+0x28>)
 800893e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008942:	f001 fa1d 	bl	8009d80 <__assert_func>
 8008946:	2301      	movs	r3, #1
 8008948:	6144      	str	r4, [r0, #20]
 800894a:	6103      	str	r3, [r0, #16]
 800894c:	bd10      	pop	{r4, pc}
 800894e:	bf00      	nop
 8008950:	0800c7c8 	.word	0x0800c7c8
 8008954:	0800c854 	.word	0x0800c854

08008958 <__multiply>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	4691      	mov	r9, r2
 800895e:	690a      	ldr	r2, [r1, #16]
 8008960:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008964:	429a      	cmp	r2, r3
 8008966:	bfb8      	it	lt
 8008968:	460b      	movlt	r3, r1
 800896a:	460c      	mov	r4, r1
 800896c:	bfbc      	itt	lt
 800896e:	464c      	movlt	r4, r9
 8008970:	4699      	movlt	r9, r3
 8008972:	6927      	ldr	r7, [r4, #16]
 8008974:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008978:	68a3      	ldr	r3, [r4, #8]
 800897a:	6861      	ldr	r1, [r4, #4]
 800897c:	eb07 060a 	add.w	r6, r7, sl
 8008980:	42b3      	cmp	r3, r6
 8008982:	b085      	sub	sp, #20
 8008984:	bfb8      	it	lt
 8008986:	3101      	addlt	r1, #1
 8008988:	f7ff fe8e 	bl	80086a8 <_Balloc>
 800898c:	b930      	cbnz	r0, 800899c <__multiply+0x44>
 800898e:	4602      	mov	r2, r0
 8008990:	4b44      	ldr	r3, [pc, #272]	; (8008aa4 <__multiply+0x14c>)
 8008992:	4845      	ldr	r0, [pc, #276]	; (8008aa8 <__multiply+0x150>)
 8008994:	f240 115d 	movw	r1, #349	; 0x15d
 8008998:	f001 f9f2 	bl	8009d80 <__assert_func>
 800899c:	f100 0514 	add.w	r5, r0, #20
 80089a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089a4:	462b      	mov	r3, r5
 80089a6:	2200      	movs	r2, #0
 80089a8:	4543      	cmp	r3, r8
 80089aa:	d321      	bcc.n	80089f0 <__multiply+0x98>
 80089ac:	f104 0314 	add.w	r3, r4, #20
 80089b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089b4:	f109 0314 	add.w	r3, r9, #20
 80089b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089bc:	9202      	str	r2, [sp, #8]
 80089be:	1b3a      	subs	r2, r7, r4
 80089c0:	3a15      	subs	r2, #21
 80089c2:	f022 0203 	bic.w	r2, r2, #3
 80089c6:	3204      	adds	r2, #4
 80089c8:	f104 0115 	add.w	r1, r4, #21
 80089cc:	428f      	cmp	r7, r1
 80089ce:	bf38      	it	cc
 80089d0:	2204      	movcc	r2, #4
 80089d2:	9201      	str	r2, [sp, #4]
 80089d4:	9a02      	ldr	r2, [sp, #8]
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d80c      	bhi.n	80089f6 <__multiply+0x9e>
 80089dc:	2e00      	cmp	r6, #0
 80089de:	dd03      	ble.n	80089e8 <__multiply+0x90>
 80089e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d05a      	beq.n	8008a9e <__multiply+0x146>
 80089e8:	6106      	str	r6, [r0, #16]
 80089ea:	b005      	add	sp, #20
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	f843 2b04 	str.w	r2, [r3], #4
 80089f4:	e7d8      	b.n	80089a8 <__multiply+0x50>
 80089f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80089fa:	f1ba 0f00 	cmp.w	sl, #0
 80089fe:	d024      	beq.n	8008a4a <__multiply+0xf2>
 8008a00:	f104 0e14 	add.w	lr, r4, #20
 8008a04:	46a9      	mov	r9, r5
 8008a06:	f04f 0c00 	mov.w	ip, #0
 8008a0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a0e:	f8d9 1000 	ldr.w	r1, [r9]
 8008a12:	fa1f fb82 	uxth.w	fp, r2
 8008a16:	b289      	uxth	r1, r1
 8008a18:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a20:	f8d9 2000 	ldr.w	r2, [r9]
 8008a24:	4461      	add	r1, ip
 8008a26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a32:	b289      	uxth	r1, r1
 8008a34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a38:	4577      	cmp	r7, lr
 8008a3a:	f849 1b04 	str.w	r1, [r9], #4
 8008a3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a42:	d8e2      	bhi.n	8008a0a <__multiply+0xb2>
 8008a44:	9a01      	ldr	r2, [sp, #4]
 8008a46:	f845 c002 	str.w	ip, [r5, r2]
 8008a4a:	9a03      	ldr	r2, [sp, #12]
 8008a4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a50:	3304      	adds	r3, #4
 8008a52:	f1b9 0f00 	cmp.w	r9, #0
 8008a56:	d020      	beq.n	8008a9a <__multiply+0x142>
 8008a58:	6829      	ldr	r1, [r5, #0]
 8008a5a:	f104 0c14 	add.w	ip, r4, #20
 8008a5e:	46ae      	mov	lr, r5
 8008a60:	f04f 0a00 	mov.w	sl, #0
 8008a64:	f8bc b000 	ldrh.w	fp, [ip]
 8008a68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a6c:	fb09 220b 	mla	r2, r9, fp, r2
 8008a70:	4492      	add	sl, r2
 8008a72:	b289      	uxth	r1, r1
 8008a74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a78:	f84e 1b04 	str.w	r1, [lr], #4
 8008a7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a80:	f8be 1000 	ldrh.w	r1, [lr]
 8008a84:	0c12      	lsrs	r2, r2, #16
 8008a86:	fb09 1102 	mla	r1, r9, r2, r1
 8008a8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a8e:	4567      	cmp	r7, ip
 8008a90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a94:	d8e6      	bhi.n	8008a64 <__multiply+0x10c>
 8008a96:	9a01      	ldr	r2, [sp, #4]
 8008a98:	50a9      	str	r1, [r5, r2]
 8008a9a:	3504      	adds	r5, #4
 8008a9c:	e79a      	b.n	80089d4 <__multiply+0x7c>
 8008a9e:	3e01      	subs	r6, #1
 8008aa0:	e79c      	b.n	80089dc <__multiply+0x84>
 8008aa2:	bf00      	nop
 8008aa4:	0800c7c8 	.word	0x0800c7c8
 8008aa8:	0800c854 	.word	0x0800c854

08008aac <__pow5mult>:
 8008aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab0:	4615      	mov	r5, r2
 8008ab2:	f012 0203 	ands.w	r2, r2, #3
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	d007      	beq.n	8008acc <__pow5mult+0x20>
 8008abc:	4c25      	ldr	r4, [pc, #148]	; (8008b54 <__pow5mult+0xa8>)
 8008abe:	3a01      	subs	r2, #1
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ac6:	f7ff fe51 	bl	800876c <__multadd>
 8008aca:	4607      	mov	r7, r0
 8008acc:	10ad      	asrs	r5, r5, #2
 8008ace:	d03d      	beq.n	8008b4c <__pow5mult+0xa0>
 8008ad0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ad2:	b97c      	cbnz	r4, 8008af4 <__pow5mult+0x48>
 8008ad4:	2010      	movs	r0, #16
 8008ad6:	f7ff fdbf 	bl	8008658 <malloc>
 8008ada:	4602      	mov	r2, r0
 8008adc:	6270      	str	r0, [r6, #36]	; 0x24
 8008ade:	b928      	cbnz	r0, 8008aec <__pow5mult+0x40>
 8008ae0:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <__pow5mult+0xac>)
 8008ae2:	481e      	ldr	r0, [pc, #120]	; (8008b5c <__pow5mult+0xb0>)
 8008ae4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ae8:	f001 f94a 	bl	8009d80 <__assert_func>
 8008aec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008af0:	6004      	str	r4, [r0, #0]
 8008af2:	60c4      	str	r4, [r0, #12]
 8008af4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008af8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008afc:	b94c      	cbnz	r4, 8008b12 <__pow5mult+0x66>
 8008afe:	f240 2171 	movw	r1, #625	; 0x271
 8008b02:	4630      	mov	r0, r6
 8008b04:	f7ff ff12 	bl	800892c <__i2b>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b0e:	4604      	mov	r4, r0
 8008b10:	6003      	str	r3, [r0, #0]
 8008b12:	f04f 0900 	mov.w	r9, #0
 8008b16:	07eb      	lsls	r3, r5, #31
 8008b18:	d50a      	bpl.n	8008b30 <__pow5mult+0x84>
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	4630      	mov	r0, r6
 8008b20:	f7ff ff1a 	bl	8008958 <__multiply>
 8008b24:	4639      	mov	r1, r7
 8008b26:	4680      	mov	r8, r0
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff fdfd 	bl	8008728 <_Bfree>
 8008b2e:	4647      	mov	r7, r8
 8008b30:	106d      	asrs	r5, r5, #1
 8008b32:	d00b      	beq.n	8008b4c <__pow5mult+0xa0>
 8008b34:	6820      	ldr	r0, [r4, #0]
 8008b36:	b938      	cbnz	r0, 8008b48 <__pow5mult+0x9c>
 8008b38:	4622      	mov	r2, r4
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f7ff ff0b 	bl	8008958 <__multiply>
 8008b42:	6020      	str	r0, [r4, #0]
 8008b44:	f8c0 9000 	str.w	r9, [r0]
 8008b48:	4604      	mov	r4, r0
 8008b4a:	e7e4      	b.n	8008b16 <__pow5mult+0x6a>
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b52:	bf00      	nop
 8008b54:	0800c9a0 	.word	0x0800c9a0
 8008b58:	0800c756 	.word	0x0800c756
 8008b5c:	0800c854 	.word	0x0800c854

08008b60 <__lshift>:
 8008b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	460c      	mov	r4, r1
 8008b66:	6849      	ldr	r1, [r1, #4]
 8008b68:	6923      	ldr	r3, [r4, #16]
 8008b6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b6e:	68a3      	ldr	r3, [r4, #8]
 8008b70:	4607      	mov	r7, r0
 8008b72:	4691      	mov	r9, r2
 8008b74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b78:	f108 0601 	add.w	r6, r8, #1
 8008b7c:	42b3      	cmp	r3, r6
 8008b7e:	db0b      	blt.n	8008b98 <__lshift+0x38>
 8008b80:	4638      	mov	r0, r7
 8008b82:	f7ff fd91 	bl	80086a8 <_Balloc>
 8008b86:	4605      	mov	r5, r0
 8008b88:	b948      	cbnz	r0, 8008b9e <__lshift+0x3e>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4b2a      	ldr	r3, [pc, #168]	; (8008c38 <__lshift+0xd8>)
 8008b8e:	482b      	ldr	r0, [pc, #172]	; (8008c3c <__lshift+0xdc>)
 8008b90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b94:	f001 f8f4 	bl	8009d80 <__assert_func>
 8008b98:	3101      	adds	r1, #1
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	e7ee      	b.n	8008b7c <__lshift+0x1c>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f100 0114 	add.w	r1, r0, #20
 8008ba4:	f100 0210 	add.w	r2, r0, #16
 8008ba8:	4618      	mov	r0, r3
 8008baa:	4553      	cmp	r3, sl
 8008bac:	db37      	blt.n	8008c1e <__lshift+0xbe>
 8008bae:	6920      	ldr	r0, [r4, #16]
 8008bb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bb4:	f104 0314 	add.w	r3, r4, #20
 8008bb8:	f019 091f 	ands.w	r9, r9, #31
 8008bbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008bc4:	d02f      	beq.n	8008c26 <__lshift+0xc6>
 8008bc6:	f1c9 0e20 	rsb	lr, r9, #32
 8008bca:	468a      	mov	sl, r1
 8008bcc:	f04f 0c00 	mov.w	ip, #0
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	fa02 f209 	lsl.w	r2, r2, r9
 8008bd6:	ea42 020c 	orr.w	r2, r2, ip
 8008bda:	f84a 2b04 	str.w	r2, [sl], #4
 8008bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8008be2:	4298      	cmp	r0, r3
 8008be4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008be8:	d8f2      	bhi.n	8008bd0 <__lshift+0x70>
 8008bea:	1b03      	subs	r3, r0, r4
 8008bec:	3b15      	subs	r3, #21
 8008bee:	f023 0303 	bic.w	r3, r3, #3
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	f104 0215 	add.w	r2, r4, #21
 8008bf8:	4290      	cmp	r0, r2
 8008bfa:	bf38      	it	cc
 8008bfc:	2304      	movcc	r3, #4
 8008bfe:	f841 c003 	str.w	ip, [r1, r3]
 8008c02:	f1bc 0f00 	cmp.w	ip, #0
 8008c06:	d001      	beq.n	8008c0c <__lshift+0xac>
 8008c08:	f108 0602 	add.w	r6, r8, #2
 8008c0c:	3e01      	subs	r6, #1
 8008c0e:	4638      	mov	r0, r7
 8008c10:	612e      	str	r6, [r5, #16]
 8008c12:	4621      	mov	r1, r4
 8008c14:	f7ff fd88 	bl	8008728 <_Bfree>
 8008c18:	4628      	mov	r0, r5
 8008c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c22:	3301      	adds	r3, #1
 8008c24:	e7c1      	b.n	8008baa <__lshift+0x4a>
 8008c26:	3904      	subs	r1, #4
 8008c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c30:	4298      	cmp	r0, r3
 8008c32:	d8f9      	bhi.n	8008c28 <__lshift+0xc8>
 8008c34:	e7ea      	b.n	8008c0c <__lshift+0xac>
 8008c36:	bf00      	nop
 8008c38:	0800c7c8 	.word	0x0800c7c8
 8008c3c:	0800c854 	.word	0x0800c854

08008c40 <__mcmp>:
 8008c40:	b530      	push	{r4, r5, lr}
 8008c42:	6902      	ldr	r2, [r0, #16]
 8008c44:	690c      	ldr	r4, [r1, #16]
 8008c46:	1b12      	subs	r2, r2, r4
 8008c48:	d10e      	bne.n	8008c68 <__mcmp+0x28>
 8008c4a:	f100 0314 	add.w	r3, r0, #20
 8008c4e:	3114      	adds	r1, #20
 8008c50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c60:	42a5      	cmp	r5, r4
 8008c62:	d003      	beq.n	8008c6c <__mcmp+0x2c>
 8008c64:	d305      	bcc.n	8008c72 <__mcmp+0x32>
 8008c66:	2201      	movs	r2, #1
 8008c68:	4610      	mov	r0, r2
 8008c6a:	bd30      	pop	{r4, r5, pc}
 8008c6c:	4283      	cmp	r3, r0
 8008c6e:	d3f3      	bcc.n	8008c58 <__mcmp+0x18>
 8008c70:	e7fa      	b.n	8008c68 <__mcmp+0x28>
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295
 8008c76:	e7f7      	b.n	8008c68 <__mcmp+0x28>

08008c78 <__mdiff>:
 8008c78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	4606      	mov	r6, r0
 8008c80:	4611      	mov	r1, r2
 8008c82:	4620      	mov	r0, r4
 8008c84:	4690      	mov	r8, r2
 8008c86:	f7ff ffdb 	bl	8008c40 <__mcmp>
 8008c8a:	1e05      	subs	r5, r0, #0
 8008c8c:	d110      	bne.n	8008cb0 <__mdiff+0x38>
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4630      	mov	r0, r6
 8008c92:	f7ff fd09 	bl	80086a8 <_Balloc>
 8008c96:	b930      	cbnz	r0, 8008ca6 <__mdiff+0x2e>
 8008c98:	4b3a      	ldr	r3, [pc, #232]	; (8008d84 <__mdiff+0x10c>)
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	f240 2132 	movw	r1, #562	; 0x232
 8008ca0:	4839      	ldr	r0, [pc, #228]	; (8008d88 <__mdiff+0x110>)
 8008ca2:	f001 f86d 	bl	8009d80 <__assert_func>
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb0:	bfa4      	itt	ge
 8008cb2:	4643      	movge	r3, r8
 8008cb4:	46a0      	movge	r8, r4
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cbc:	bfa6      	itte	ge
 8008cbe:	461c      	movge	r4, r3
 8008cc0:	2500      	movge	r5, #0
 8008cc2:	2501      	movlt	r5, #1
 8008cc4:	f7ff fcf0 	bl	80086a8 <_Balloc>
 8008cc8:	b920      	cbnz	r0, 8008cd4 <__mdiff+0x5c>
 8008cca:	4b2e      	ldr	r3, [pc, #184]	; (8008d84 <__mdiff+0x10c>)
 8008ccc:	4602      	mov	r2, r0
 8008cce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cd2:	e7e5      	b.n	8008ca0 <__mdiff+0x28>
 8008cd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008cd8:	6926      	ldr	r6, [r4, #16]
 8008cda:	60c5      	str	r5, [r0, #12]
 8008cdc:	f104 0914 	add.w	r9, r4, #20
 8008ce0:	f108 0514 	add.w	r5, r8, #20
 8008ce4:	f100 0e14 	add.w	lr, r0, #20
 8008ce8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008cec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cf0:	f108 0210 	add.w	r2, r8, #16
 8008cf4:	46f2      	mov	sl, lr
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d00:	fa1f f883 	uxth.w	r8, r3
 8008d04:	fa11 f18b 	uxtah	r1, r1, fp
 8008d08:	0c1b      	lsrs	r3, r3, #16
 8008d0a:	eba1 0808 	sub.w	r8, r1, r8
 8008d0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d16:	fa1f f888 	uxth.w	r8, r8
 8008d1a:	1419      	asrs	r1, r3, #16
 8008d1c:	454e      	cmp	r6, r9
 8008d1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d22:	f84a 3b04 	str.w	r3, [sl], #4
 8008d26:	d8e7      	bhi.n	8008cf8 <__mdiff+0x80>
 8008d28:	1b33      	subs	r3, r6, r4
 8008d2a:	3b15      	subs	r3, #21
 8008d2c:	f023 0303 	bic.w	r3, r3, #3
 8008d30:	3304      	adds	r3, #4
 8008d32:	3415      	adds	r4, #21
 8008d34:	42a6      	cmp	r6, r4
 8008d36:	bf38      	it	cc
 8008d38:	2304      	movcc	r3, #4
 8008d3a:	441d      	add	r5, r3
 8008d3c:	4473      	add	r3, lr
 8008d3e:	469e      	mov	lr, r3
 8008d40:	462e      	mov	r6, r5
 8008d42:	4566      	cmp	r6, ip
 8008d44:	d30e      	bcc.n	8008d64 <__mdiff+0xec>
 8008d46:	f10c 0203 	add.w	r2, ip, #3
 8008d4a:	1b52      	subs	r2, r2, r5
 8008d4c:	f022 0203 	bic.w	r2, r2, #3
 8008d50:	3d03      	subs	r5, #3
 8008d52:	45ac      	cmp	ip, r5
 8008d54:	bf38      	it	cc
 8008d56:	2200      	movcc	r2, #0
 8008d58:	441a      	add	r2, r3
 8008d5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d5e:	b17b      	cbz	r3, 8008d80 <__mdiff+0x108>
 8008d60:	6107      	str	r7, [r0, #16]
 8008d62:	e7a3      	b.n	8008cac <__mdiff+0x34>
 8008d64:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d68:	fa11 f288 	uxtah	r2, r1, r8
 8008d6c:	1414      	asrs	r4, r2, #16
 8008d6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d72:	b292      	uxth	r2, r2
 8008d74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d78:	f84e 2b04 	str.w	r2, [lr], #4
 8008d7c:	1421      	asrs	r1, r4, #16
 8008d7e:	e7e0      	b.n	8008d42 <__mdiff+0xca>
 8008d80:	3f01      	subs	r7, #1
 8008d82:	e7ea      	b.n	8008d5a <__mdiff+0xe2>
 8008d84:	0800c7c8 	.word	0x0800c7c8
 8008d88:	0800c854 	.word	0x0800c854

08008d8c <__ulp>:
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	ed8d 0b00 	vstr	d0, [sp]
 8008d92:	9b01      	ldr	r3, [sp, #4]
 8008d94:	4912      	ldr	r1, [pc, #72]	; (8008de0 <__ulp+0x54>)
 8008d96:	4019      	ands	r1, r3
 8008d98:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	dd05      	ble.n	8008dac <__ulp+0x20>
 8008da0:	2200      	movs	r2, #0
 8008da2:	460b      	mov	r3, r1
 8008da4:	ec43 2b10 	vmov	d0, r2, r3
 8008da8:	b002      	add	sp, #8
 8008daa:	4770      	bx	lr
 8008dac:	4249      	negs	r1, r1
 8008dae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008db2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	f04f 0300 	mov.w	r3, #0
 8008dbe:	da04      	bge.n	8008dca <__ulp+0x3e>
 8008dc0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008dc4:	fa41 f300 	asr.w	r3, r1, r0
 8008dc8:	e7ec      	b.n	8008da4 <__ulp+0x18>
 8008dca:	f1a0 0114 	sub.w	r1, r0, #20
 8008dce:	291e      	cmp	r1, #30
 8008dd0:	bfda      	itte	le
 8008dd2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008dd6:	fa20 f101 	lsrle.w	r1, r0, r1
 8008dda:	2101      	movgt	r1, #1
 8008ddc:	460a      	mov	r2, r1
 8008dde:	e7e1      	b.n	8008da4 <__ulp+0x18>
 8008de0:	7ff00000 	.word	0x7ff00000

08008de4 <__b2d>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	6905      	ldr	r5, [r0, #16]
 8008de8:	f100 0714 	add.w	r7, r0, #20
 8008dec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008df0:	1f2e      	subs	r6, r5, #4
 8008df2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7ff fd48 	bl	800888c <__hi0bits>
 8008dfc:	f1c0 0320 	rsb	r3, r0, #32
 8008e00:	280a      	cmp	r0, #10
 8008e02:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008e80 <__b2d+0x9c>
 8008e06:	600b      	str	r3, [r1, #0]
 8008e08:	dc14      	bgt.n	8008e34 <__b2d+0x50>
 8008e0a:	f1c0 0e0b 	rsb	lr, r0, #11
 8008e0e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008e12:	42b7      	cmp	r7, r6
 8008e14:	ea41 030c 	orr.w	r3, r1, ip
 8008e18:	bf34      	ite	cc
 8008e1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e1e:	2100      	movcs	r1, #0
 8008e20:	3015      	adds	r0, #21
 8008e22:	fa04 f000 	lsl.w	r0, r4, r0
 8008e26:	fa21 f10e 	lsr.w	r1, r1, lr
 8008e2a:	ea40 0201 	orr.w	r2, r0, r1
 8008e2e:	ec43 2b10 	vmov	d0, r2, r3
 8008e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e34:	42b7      	cmp	r7, r6
 8008e36:	bf3a      	itte	cc
 8008e38:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e3c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008e40:	2100      	movcs	r1, #0
 8008e42:	380b      	subs	r0, #11
 8008e44:	d017      	beq.n	8008e76 <__b2d+0x92>
 8008e46:	f1c0 0c20 	rsb	ip, r0, #32
 8008e4a:	fa04 f500 	lsl.w	r5, r4, r0
 8008e4e:	42be      	cmp	r6, r7
 8008e50:	fa21 f40c 	lsr.w	r4, r1, ip
 8008e54:	ea45 0504 	orr.w	r5, r5, r4
 8008e58:	bf8c      	ite	hi
 8008e5a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008e5e:	2400      	movls	r4, #0
 8008e60:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008e64:	fa01 f000 	lsl.w	r0, r1, r0
 8008e68:	fa24 f40c 	lsr.w	r4, r4, ip
 8008e6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e70:	ea40 0204 	orr.w	r2, r0, r4
 8008e74:	e7db      	b.n	8008e2e <__b2d+0x4a>
 8008e76:	ea44 030c 	orr.w	r3, r4, ip
 8008e7a:	460a      	mov	r2, r1
 8008e7c:	e7d7      	b.n	8008e2e <__b2d+0x4a>
 8008e7e:	bf00      	nop
 8008e80:	3ff00000 	.word	0x3ff00000

08008e84 <__d2b>:
 8008e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e88:	4689      	mov	r9, r1
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	ec57 6b10 	vmov	r6, r7, d0
 8008e90:	4690      	mov	r8, r2
 8008e92:	f7ff fc09 	bl	80086a8 <_Balloc>
 8008e96:	4604      	mov	r4, r0
 8008e98:	b930      	cbnz	r0, 8008ea8 <__d2b+0x24>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b25      	ldr	r3, [pc, #148]	; (8008f34 <__d2b+0xb0>)
 8008e9e:	4826      	ldr	r0, [pc, #152]	; (8008f38 <__d2b+0xb4>)
 8008ea0:	f240 310a 	movw	r1, #778	; 0x30a
 8008ea4:	f000 ff6c 	bl	8009d80 <__assert_func>
 8008ea8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008eac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008eb0:	bb35      	cbnz	r5, 8008f00 <__d2b+0x7c>
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	d028      	beq.n	8008f0a <__d2b+0x86>
 8008eb8:	4668      	mov	r0, sp
 8008eba:	9600      	str	r6, [sp, #0]
 8008ebc:	f7ff fd06 	bl	80088cc <__lo0bits>
 8008ec0:	9900      	ldr	r1, [sp, #0]
 8008ec2:	b300      	cbz	r0, 8008f06 <__d2b+0x82>
 8008ec4:	9a01      	ldr	r2, [sp, #4]
 8008ec6:	f1c0 0320 	rsb	r3, r0, #32
 8008eca:	fa02 f303 	lsl.w	r3, r2, r3
 8008ece:	430b      	orrs	r3, r1
 8008ed0:	40c2      	lsrs	r2, r0
 8008ed2:	6163      	str	r3, [r4, #20]
 8008ed4:	9201      	str	r2, [sp, #4]
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	61a3      	str	r3, [r4, #24]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	bf14      	ite	ne
 8008ede:	2202      	movne	r2, #2
 8008ee0:	2201      	moveq	r2, #1
 8008ee2:	6122      	str	r2, [r4, #16]
 8008ee4:	b1d5      	cbz	r5, 8008f1c <__d2b+0x98>
 8008ee6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008eea:	4405      	add	r5, r0
 8008eec:	f8c9 5000 	str.w	r5, [r9]
 8008ef0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ef4:	f8c8 0000 	str.w	r0, [r8]
 8008ef8:	4620      	mov	r0, r4
 8008efa:	b003      	add	sp, #12
 8008efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f04:	e7d5      	b.n	8008eb2 <__d2b+0x2e>
 8008f06:	6161      	str	r1, [r4, #20]
 8008f08:	e7e5      	b.n	8008ed6 <__d2b+0x52>
 8008f0a:	a801      	add	r0, sp, #4
 8008f0c:	f7ff fcde 	bl	80088cc <__lo0bits>
 8008f10:	9b01      	ldr	r3, [sp, #4]
 8008f12:	6163      	str	r3, [r4, #20]
 8008f14:	2201      	movs	r2, #1
 8008f16:	6122      	str	r2, [r4, #16]
 8008f18:	3020      	adds	r0, #32
 8008f1a:	e7e3      	b.n	8008ee4 <__d2b+0x60>
 8008f1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f24:	f8c9 0000 	str.w	r0, [r9]
 8008f28:	6918      	ldr	r0, [r3, #16]
 8008f2a:	f7ff fcaf 	bl	800888c <__hi0bits>
 8008f2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f32:	e7df      	b.n	8008ef4 <__d2b+0x70>
 8008f34:	0800c7c8 	.word	0x0800c7c8
 8008f38:	0800c854 	.word	0x0800c854

08008f3c <__ratio>:
 8008f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f40:	4688      	mov	r8, r1
 8008f42:	4669      	mov	r1, sp
 8008f44:	4681      	mov	r9, r0
 8008f46:	f7ff ff4d 	bl	8008de4 <__b2d>
 8008f4a:	a901      	add	r1, sp, #4
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	ec55 4b10 	vmov	r4, r5, d0
 8008f52:	f7ff ff47 	bl	8008de4 <__b2d>
 8008f56:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f5a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f5e:	eba3 0c02 	sub.w	ip, r3, r2
 8008f62:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f6c:	ec51 0b10 	vmov	r0, r1, d0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	bfd6      	itet	le
 8008f74:	460a      	movle	r2, r1
 8008f76:	462a      	movgt	r2, r5
 8008f78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	462f      	mov	r7, r5
 8008f80:	bfd4      	ite	le
 8008f82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	ee10 2a10 	vmov	r2, s0
 8008f90:	465b      	mov	r3, fp
 8008f92:	4639      	mov	r1, r7
 8008f94:	f7f7 fc72 	bl	800087c <__aeabi_ddiv>
 8008f98:	ec41 0b10 	vmov	d0, r0, r1
 8008f9c:	b003      	add	sp, #12
 8008f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fa2 <__copybits>:
 8008fa2:	3901      	subs	r1, #1
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	1149      	asrs	r1, r1, #5
 8008fa8:	6914      	ldr	r4, [r2, #16]
 8008faa:	3101      	adds	r1, #1
 8008fac:	f102 0314 	add.w	r3, r2, #20
 8008fb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fb8:	1f05      	subs	r5, r0, #4
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	d30c      	bcc.n	8008fd8 <__copybits+0x36>
 8008fbe:	1aa3      	subs	r3, r4, r2
 8008fc0:	3b11      	subs	r3, #17
 8008fc2:	f023 0303 	bic.w	r3, r3, #3
 8008fc6:	3211      	adds	r2, #17
 8008fc8:	42a2      	cmp	r2, r4
 8008fca:	bf88      	it	hi
 8008fcc:	2300      	movhi	r3, #0
 8008fce:	4418      	add	r0, r3
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4288      	cmp	r0, r1
 8008fd4:	d305      	bcc.n	8008fe2 <__copybits+0x40>
 8008fd6:	bd70      	pop	{r4, r5, r6, pc}
 8008fd8:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fdc:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fe0:	e7eb      	b.n	8008fba <__copybits+0x18>
 8008fe2:	f840 3b04 	str.w	r3, [r0], #4
 8008fe6:	e7f4      	b.n	8008fd2 <__copybits+0x30>

08008fe8 <__any_on>:
 8008fe8:	f100 0214 	add.w	r2, r0, #20
 8008fec:	6900      	ldr	r0, [r0, #16]
 8008fee:	114b      	asrs	r3, r1, #5
 8008ff0:	4298      	cmp	r0, r3
 8008ff2:	b510      	push	{r4, lr}
 8008ff4:	db11      	blt.n	800901a <__any_on+0x32>
 8008ff6:	dd0a      	ble.n	800900e <__any_on+0x26>
 8008ff8:	f011 011f 	ands.w	r1, r1, #31
 8008ffc:	d007      	beq.n	800900e <__any_on+0x26>
 8008ffe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009002:	fa24 f001 	lsr.w	r0, r4, r1
 8009006:	fa00 f101 	lsl.w	r1, r0, r1
 800900a:	428c      	cmp	r4, r1
 800900c:	d10b      	bne.n	8009026 <__any_on+0x3e>
 800900e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009012:	4293      	cmp	r3, r2
 8009014:	d803      	bhi.n	800901e <__any_on+0x36>
 8009016:	2000      	movs	r0, #0
 8009018:	bd10      	pop	{r4, pc}
 800901a:	4603      	mov	r3, r0
 800901c:	e7f7      	b.n	800900e <__any_on+0x26>
 800901e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009022:	2900      	cmp	r1, #0
 8009024:	d0f5      	beq.n	8009012 <__any_on+0x2a>
 8009026:	2001      	movs	r0, #1
 8009028:	e7f6      	b.n	8009018 <__any_on+0x30>

0800902a <_calloc_r>:
 800902a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800902c:	fba1 2402 	umull	r2, r4, r1, r2
 8009030:	b94c      	cbnz	r4, 8009046 <_calloc_r+0x1c>
 8009032:	4611      	mov	r1, r2
 8009034:	9201      	str	r2, [sp, #4]
 8009036:	f000 f87b 	bl	8009130 <_malloc_r>
 800903a:	9a01      	ldr	r2, [sp, #4]
 800903c:	4605      	mov	r5, r0
 800903e:	b930      	cbnz	r0, 800904e <_calloc_r+0x24>
 8009040:	4628      	mov	r0, r5
 8009042:	b003      	add	sp, #12
 8009044:	bd30      	pop	{r4, r5, pc}
 8009046:	220c      	movs	r2, #12
 8009048:	6002      	str	r2, [r0, #0]
 800904a:	2500      	movs	r5, #0
 800904c:	e7f8      	b.n	8009040 <_calloc_r+0x16>
 800904e:	4621      	mov	r1, r4
 8009050:	f7fc fb18 	bl	8005684 <memset>
 8009054:	e7f4      	b.n	8009040 <_calloc_r+0x16>
	...

08009058 <_free_r>:
 8009058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800905a:	2900      	cmp	r1, #0
 800905c:	d044      	beq.n	80090e8 <_free_r+0x90>
 800905e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009062:	9001      	str	r0, [sp, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f1a1 0404 	sub.w	r4, r1, #4
 800906a:	bfb8      	it	lt
 800906c:	18e4      	addlt	r4, r4, r3
 800906e:	f001 f88b 	bl	800a188 <__malloc_lock>
 8009072:	4a1e      	ldr	r2, [pc, #120]	; (80090ec <_free_r+0x94>)
 8009074:	9801      	ldr	r0, [sp, #4]
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	b933      	cbnz	r3, 8009088 <_free_r+0x30>
 800907a:	6063      	str	r3, [r4, #4]
 800907c:	6014      	str	r4, [r2, #0]
 800907e:	b003      	add	sp, #12
 8009080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009084:	f001 b886 	b.w	800a194 <__malloc_unlock>
 8009088:	42a3      	cmp	r3, r4
 800908a:	d908      	bls.n	800909e <_free_r+0x46>
 800908c:	6825      	ldr	r5, [r4, #0]
 800908e:	1961      	adds	r1, r4, r5
 8009090:	428b      	cmp	r3, r1
 8009092:	bf01      	itttt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	1949      	addeq	r1, r1, r5
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	e7ed      	b.n	800907a <_free_r+0x22>
 800909e:	461a      	mov	r2, r3
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	b10b      	cbz	r3, 80090a8 <_free_r+0x50>
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d9fa      	bls.n	800909e <_free_r+0x46>
 80090a8:	6811      	ldr	r1, [r2, #0]
 80090aa:	1855      	adds	r5, r2, r1
 80090ac:	42a5      	cmp	r5, r4
 80090ae:	d10b      	bne.n	80090c8 <_free_r+0x70>
 80090b0:	6824      	ldr	r4, [r4, #0]
 80090b2:	4421      	add	r1, r4
 80090b4:	1854      	adds	r4, r2, r1
 80090b6:	42a3      	cmp	r3, r4
 80090b8:	6011      	str	r1, [r2, #0]
 80090ba:	d1e0      	bne.n	800907e <_free_r+0x26>
 80090bc:	681c      	ldr	r4, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	6053      	str	r3, [r2, #4]
 80090c2:	4421      	add	r1, r4
 80090c4:	6011      	str	r1, [r2, #0]
 80090c6:	e7da      	b.n	800907e <_free_r+0x26>
 80090c8:	d902      	bls.n	80090d0 <_free_r+0x78>
 80090ca:	230c      	movs	r3, #12
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	e7d6      	b.n	800907e <_free_r+0x26>
 80090d0:	6825      	ldr	r5, [r4, #0]
 80090d2:	1961      	adds	r1, r4, r5
 80090d4:	428b      	cmp	r3, r1
 80090d6:	bf04      	itt	eq
 80090d8:	6819      	ldreq	r1, [r3, #0]
 80090da:	685b      	ldreq	r3, [r3, #4]
 80090dc:	6063      	str	r3, [r4, #4]
 80090de:	bf04      	itt	eq
 80090e0:	1949      	addeq	r1, r1, r5
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	6054      	str	r4, [r2, #4]
 80090e6:	e7ca      	b.n	800907e <_free_r+0x26>
 80090e8:	b003      	add	sp, #12
 80090ea:	bd30      	pop	{r4, r5, pc}
 80090ec:	20000d38 	.word	0x20000d38

080090f0 <sbrk_aligned>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	4e0e      	ldr	r6, [pc, #56]	; (800912c <sbrk_aligned+0x3c>)
 80090f4:	460c      	mov	r4, r1
 80090f6:	6831      	ldr	r1, [r6, #0]
 80090f8:	4605      	mov	r5, r0
 80090fa:	b911      	cbnz	r1, 8009102 <sbrk_aligned+0x12>
 80090fc:	f000 fd28 	bl	8009b50 <_sbrk_r>
 8009100:	6030      	str	r0, [r6, #0]
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f000 fd23 	bl	8009b50 <_sbrk_r>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	d00a      	beq.n	8009124 <sbrk_aligned+0x34>
 800910e:	1cc4      	adds	r4, r0, #3
 8009110:	f024 0403 	bic.w	r4, r4, #3
 8009114:	42a0      	cmp	r0, r4
 8009116:	d007      	beq.n	8009128 <sbrk_aligned+0x38>
 8009118:	1a21      	subs	r1, r4, r0
 800911a:	4628      	mov	r0, r5
 800911c:	f000 fd18 	bl	8009b50 <_sbrk_r>
 8009120:	3001      	adds	r0, #1
 8009122:	d101      	bne.n	8009128 <sbrk_aligned+0x38>
 8009124:	f04f 34ff 	mov.w	r4, #4294967295
 8009128:	4620      	mov	r0, r4
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	20000d3c 	.word	0x20000d3c

08009130 <_malloc_r>:
 8009130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009134:	1ccd      	adds	r5, r1, #3
 8009136:	f025 0503 	bic.w	r5, r5, #3
 800913a:	3508      	adds	r5, #8
 800913c:	2d0c      	cmp	r5, #12
 800913e:	bf38      	it	cc
 8009140:	250c      	movcc	r5, #12
 8009142:	2d00      	cmp	r5, #0
 8009144:	4607      	mov	r7, r0
 8009146:	db01      	blt.n	800914c <_malloc_r+0x1c>
 8009148:	42a9      	cmp	r1, r5
 800914a:	d905      	bls.n	8009158 <_malloc_r+0x28>
 800914c:	230c      	movs	r3, #12
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	2600      	movs	r6, #0
 8009152:	4630      	mov	r0, r6
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	4e2e      	ldr	r6, [pc, #184]	; (8009214 <_malloc_r+0xe4>)
 800915a:	f001 f815 	bl	800a188 <__malloc_lock>
 800915e:	6833      	ldr	r3, [r6, #0]
 8009160:	461c      	mov	r4, r3
 8009162:	bb34      	cbnz	r4, 80091b2 <_malloc_r+0x82>
 8009164:	4629      	mov	r1, r5
 8009166:	4638      	mov	r0, r7
 8009168:	f7ff ffc2 	bl	80090f0 <sbrk_aligned>
 800916c:	1c43      	adds	r3, r0, #1
 800916e:	4604      	mov	r4, r0
 8009170:	d14d      	bne.n	800920e <_malloc_r+0xde>
 8009172:	6834      	ldr	r4, [r6, #0]
 8009174:	4626      	mov	r6, r4
 8009176:	2e00      	cmp	r6, #0
 8009178:	d140      	bne.n	80091fc <_malloc_r+0xcc>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	4631      	mov	r1, r6
 800917e:	4638      	mov	r0, r7
 8009180:	eb04 0803 	add.w	r8, r4, r3
 8009184:	f000 fce4 	bl	8009b50 <_sbrk_r>
 8009188:	4580      	cmp	r8, r0
 800918a:	d13a      	bne.n	8009202 <_malloc_r+0xd2>
 800918c:	6821      	ldr	r1, [r4, #0]
 800918e:	3503      	adds	r5, #3
 8009190:	1a6d      	subs	r5, r5, r1
 8009192:	f025 0503 	bic.w	r5, r5, #3
 8009196:	3508      	adds	r5, #8
 8009198:	2d0c      	cmp	r5, #12
 800919a:	bf38      	it	cc
 800919c:	250c      	movcc	r5, #12
 800919e:	4629      	mov	r1, r5
 80091a0:	4638      	mov	r0, r7
 80091a2:	f7ff ffa5 	bl	80090f0 <sbrk_aligned>
 80091a6:	3001      	adds	r0, #1
 80091a8:	d02b      	beq.n	8009202 <_malloc_r+0xd2>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	442b      	add	r3, r5
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	e00e      	b.n	80091d0 <_malloc_r+0xa0>
 80091b2:	6822      	ldr	r2, [r4, #0]
 80091b4:	1b52      	subs	r2, r2, r5
 80091b6:	d41e      	bmi.n	80091f6 <_malloc_r+0xc6>
 80091b8:	2a0b      	cmp	r2, #11
 80091ba:	d916      	bls.n	80091ea <_malloc_r+0xba>
 80091bc:	1961      	adds	r1, r4, r5
 80091be:	42a3      	cmp	r3, r4
 80091c0:	6025      	str	r5, [r4, #0]
 80091c2:	bf18      	it	ne
 80091c4:	6059      	strne	r1, [r3, #4]
 80091c6:	6863      	ldr	r3, [r4, #4]
 80091c8:	bf08      	it	eq
 80091ca:	6031      	streq	r1, [r6, #0]
 80091cc:	5162      	str	r2, [r4, r5]
 80091ce:	604b      	str	r3, [r1, #4]
 80091d0:	4638      	mov	r0, r7
 80091d2:	f104 060b 	add.w	r6, r4, #11
 80091d6:	f000 ffdd 	bl	800a194 <__malloc_unlock>
 80091da:	f026 0607 	bic.w	r6, r6, #7
 80091de:	1d23      	adds	r3, r4, #4
 80091e0:	1af2      	subs	r2, r6, r3
 80091e2:	d0b6      	beq.n	8009152 <_malloc_r+0x22>
 80091e4:	1b9b      	subs	r3, r3, r6
 80091e6:	50a3      	str	r3, [r4, r2]
 80091e8:	e7b3      	b.n	8009152 <_malloc_r+0x22>
 80091ea:	6862      	ldr	r2, [r4, #4]
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	bf0c      	ite	eq
 80091f0:	6032      	streq	r2, [r6, #0]
 80091f2:	605a      	strne	r2, [r3, #4]
 80091f4:	e7ec      	b.n	80091d0 <_malloc_r+0xa0>
 80091f6:	4623      	mov	r3, r4
 80091f8:	6864      	ldr	r4, [r4, #4]
 80091fa:	e7b2      	b.n	8009162 <_malloc_r+0x32>
 80091fc:	4634      	mov	r4, r6
 80091fe:	6876      	ldr	r6, [r6, #4]
 8009200:	e7b9      	b.n	8009176 <_malloc_r+0x46>
 8009202:	230c      	movs	r3, #12
 8009204:	603b      	str	r3, [r7, #0]
 8009206:	4638      	mov	r0, r7
 8009208:	f000 ffc4 	bl	800a194 <__malloc_unlock>
 800920c:	e7a1      	b.n	8009152 <_malloc_r+0x22>
 800920e:	6025      	str	r5, [r4, #0]
 8009210:	e7de      	b.n	80091d0 <_malloc_r+0xa0>
 8009212:	bf00      	nop
 8009214:	20000d38 	.word	0x20000d38

08009218 <__ssputs_r>:
 8009218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800921c:	688e      	ldr	r6, [r1, #8]
 800921e:	429e      	cmp	r6, r3
 8009220:	4682      	mov	sl, r0
 8009222:	460c      	mov	r4, r1
 8009224:	4690      	mov	r8, r2
 8009226:	461f      	mov	r7, r3
 8009228:	d838      	bhi.n	800929c <__ssputs_r+0x84>
 800922a:	898a      	ldrh	r2, [r1, #12]
 800922c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009230:	d032      	beq.n	8009298 <__ssputs_r+0x80>
 8009232:	6825      	ldr	r5, [r4, #0]
 8009234:	6909      	ldr	r1, [r1, #16]
 8009236:	eba5 0901 	sub.w	r9, r5, r1
 800923a:	6965      	ldr	r5, [r4, #20]
 800923c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009244:	3301      	adds	r3, #1
 8009246:	444b      	add	r3, r9
 8009248:	106d      	asrs	r5, r5, #1
 800924a:	429d      	cmp	r5, r3
 800924c:	bf38      	it	cc
 800924e:	461d      	movcc	r5, r3
 8009250:	0553      	lsls	r3, r2, #21
 8009252:	d531      	bpl.n	80092b8 <__ssputs_r+0xa0>
 8009254:	4629      	mov	r1, r5
 8009256:	f7ff ff6b 	bl	8009130 <_malloc_r>
 800925a:	4606      	mov	r6, r0
 800925c:	b950      	cbnz	r0, 8009274 <__ssputs_r+0x5c>
 800925e:	230c      	movs	r3, #12
 8009260:	f8ca 3000 	str.w	r3, [sl]
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009274:	6921      	ldr	r1, [r4, #16]
 8009276:	464a      	mov	r2, r9
 8009278:	f7ff fa08 	bl	800868c <memcpy>
 800927c:	89a3      	ldrh	r3, [r4, #12]
 800927e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	6126      	str	r6, [r4, #16]
 800928a:	6165      	str	r5, [r4, #20]
 800928c:	444e      	add	r6, r9
 800928e:	eba5 0509 	sub.w	r5, r5, r9
 8009292:	6026      	str	r6, [r4, #0]
 8009294:	60a5      	str	r5, [r4, #8]
 8009296:	463e      	mov	r6, r7
 8009298:	42be      	cmp	r6, r7
 800929a:	d900      	bls.n	800929e <__ssputs_r+0x86>
 800929c:	463e      	mov	r6, r7
 800929e:	6820      	ldr	r0, [r4, #0]
 80092a0:	4632      	mov	r2, r6
 80092a2:	4641      	mov	r1, r8
 80092a4:	f000 ff56 	bl	800a154 <memmove>
 80092a8:	68a3      	ldr	r3, [r4, #8]
 80092aa:	1b9b      	subs	r3, r3, r6
 80092ac:	60a3      	str	r3, [r4, #8]
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	4433      	add	r3, r6
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	2000      	movs	r0, #0
 80092b6:	e7db      	b.n	8009270 <__ssputs_r+0x58>
 80092b8:	462a      	mov	r2, r5
 80092ba:	f000 ff71 	bl	800a1a0 <_realloc_r>
 80092be:	4606      	mov	r6, r0
 80092c0:	2800      	cmp	r0, #0
 80092c2:	d1e1      	bne.n	8009288 <__ssputs_r+0x70>
 80092c4:	6921      	ldr	r1, [r4, #16]
 80092c6:	4650      	mov	r0, sl
 80092c8:	f7ff fec6 	bl	8009058 <_free_r>
 80092cc:	e7c7      	b.n	800925e <__ssputs_r+0x46>
	...

080092d0 <_svfiprintf_r>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	4698      	mov	r8, r3
 80092d6:	898b      	ldrh	r3, [r1, #12]
 80092d8:	061b      	lsls	r3, r3, #24
 80092da:	b09d      	sub	sp, #116	; 0x74
 80092dc:	4607      	mov	r7, r0
 80092de:	460d      	mov	r5, r1
 80092e0:	4614      	mov	r4, r2
 80092e2:	d50e      	bpl.n	8009302 <_svfiprintf_r+0x32>
 80092e4:	690b      	ldr	r3, [r1, #16]
 80092e6:	b963      	cbnz	r3, 8009302 <_svfiprintf_r+0x32>
 80092e8:	2140      	movs	r1, #64	; 0x40
 80092ea:	f7ff ff21 	bl	8009130 <_malloc_r>
 80092ee:	6028      	str	r0, [r5, #0]
 80092f0:	6128      	str	r0, [r5, #16]
 80092f2:	b920      	cbnz	r0, 80092fe <_svfiprintf_r+0x2e>
 80092f4:	230c      	movs	r3, #12
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	e0d1      	b.n	80094a2 <_svfiprintf_r+0x1d2>
 80092fe:	2340      	movs	r3, #64	; 0x40
 8009300:	616b      	str	r3, [r5, #20]
 8009302:	2300      	movs	r3, #0
 8009304:	9309      	str	r3, [sp, #36]	; 0x24
 8009306:	2320      	movs	r3, #32
 8009308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800930c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009310:	2330      	movs	r3, #48	; 0x30
 8009312:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094bc <_svfiprintf_r+0x1ec>
 8009316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800931a:	f04f 0901 	mov.w	r9, #1
 800931e:	4623      	mov	r3, r4
 8009320:	469a      	mov	sl, r3
 8009322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009326:	b10a      	cbz	r2, 800932c <_svfiprintf_r+0x5c>
 8009328:	2a25      	cmp	r2, #37	; 0x25
 800932a:	d1f9      	bne.n	8009320 <_svfiprintf_r+0x50>
 800932c:	ebba 0b04 	subs.w	fp, sl, r4
 8009330:	d00b      	beq.n	800934a <_svfiprintf_r+0x7a>
 8009332:	465b      	mov	r3, fp
 8009334:	4622      	mov	r2, r4
 8009336:	4629      	mov	r1, r5
 8009338:	4638      	mov	r0, r7
 800933a:	f7ff ff6d 	bl	8009218 <__ssputs_r>
 800933e:	3001      	adds	r0, #1
 8009340:	f000 80aa 	beq.w	8009498 <_svfiprintf_r+0x1c8>
 8009344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009346:	445a      	add	r2, fp
 8009348:	9209      	str	r2, [sp, #36]	; 0x24
 800934a:	f89a 3000 	ldrb.w	r3, [sl]
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 80a2 	beq.w	8009498 <_svfiprintf_r+0x1c8>
 8009354:	2300      	movs	r3, #0
 8009356:	f04f 32ff 	mov.w	r2, #4294967295
 800935a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800935e:	f10a 0a01 	add.w	sl, sl, #1
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	9307      	str	r3, [sp, #28]
 8009366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800936a:	931a      	str	r3, [sp, #104]	; 0x68
 800936c:	4654      	mov	r4, sl
 800936e:	2205      	movs	r2, #5
 8009370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009374:	4851      	ldr	r0, [pc, #324]	; (80094bc <_svfiprintf_r+0x1ec>)
 8009376:	f7f6 ff4b 	bl	8000210 <memchr>
 800937a:	9a04      	ldr	r2, [sp, #16]
 800937c:	b9d8      	cbnz	r0, 80093b6 <_svfiprintf_r+0xe6>
 800937e:	06d0      	lsls	r0, r2, #27
 8009380:	bf44      	itt	mi
 8009382:	2320      	movmi	r3, #32
 8009384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009388:	0711      	lsls	r1, r2, #28
 800938a:	bf44      	itt	mi
 800938c:	232b      	movmi	r3, #43	; 0x2b
 800938e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009392:	f89a 3000 	ldrb.w	r3, [sl]
 8009396:	2b2a      	cmp	r3, #42	; 0x2a
 8009398:	d015      	beq.n	80093c6 <_svfiprintf_r+0xf6>
 800939a:	9a07      	ldr	r2, [sp, #28]
 800939c:	4654      	mov	r4, sl
 800939e:	2000      	movs	r0, #0
 80093a0:	f04f 0c0a 	mov.w	ip, #10
 80093a4:	4621      	mov	r1, r4
 80093a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093aa:	3b30      	subs	r3, #48	; 0x30
 80093ac:	2b09      	cmp	r3, #9
 80093ae:	d94e      	bls.n	800944e <_svfiprintf_r+0x17e>
 80093b0:	b1b0      	cbz	r0, 80093e0 <_svfiprintf_r+0x110>
 80093b2:	9207      	str	r2, [sp, #28]
 80093b4:	e014      	b.n	80093e0 <_svfiprintf_r+0x110>
 80093b6:	eba0 0308 	sub.w	r3, r0, r8
 80093ba:	fa09 f303 	lsl.w	r3, r9, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	9304      	str	r3, [sp, #16]
 80093c2:	46a2      	mov	sl, r4
 80093c4:	e7d2      	b.n	800936c <_svfiprintf_r+0x9c>
 80093c6:	9b03      	ldr	r3, [sp, #12]
 80093c8:	1d19      	adds	r1, r3, #4
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	9103      	str	r1, [sp, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	bfbb      	ittet	lt
 80093d2:	425b      	neglt	r3, r3
 80093d4:	f042 0202 	orrlt.w	r2, r2, #2
 80093d8:	9307      	strge	r3, [sp, #28]
 80093da:	9307      	strlt	r3, [sp, #28]
 80093dc:	bfb8      	it	lt
 80093de:	9204      	strlt	r2, [sp, #16]
 80093e0:	7823      	ldrb	r3, [r4, #0]
 80093e2:	2b2e      	cmp	r3, #46	; 0x2e
 80093e4:	d10c      	bne.n	8009400 <_svfiprintf_r+0x130>
 80093e6:	7863      	ldrb	r3, [r4, #1]
 80093e8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ea:	d135      	bne.n	8009458 <_svfiprintf_r+0x188>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	1d1a      	adds	r2, r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	9203      	str	r2, [sp, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bfb8      	it	lt
 80093f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80093fc:	3402      	adds	r4, #2
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094cc <_svfiprintf_r+0x1fc>
 8009404:	7821      	ldrb	r1, [r4, #0]
 8009406:	2203      	movs	r2, #3
 8009408:	4650      	mov	r0, sl
 800940a:	f7f6 ff01 	bl	8000210 <memchr>
 800940e:	b140      	cbz	r0, 8009422 <_svfiprintf_r+0x152>
 8009410:	2340      	movs	r3, #64	; 0x40
 8009412:	eba0 000a 	sub.w	r0, r0, sl
 8009416:	fa03 f000 	lsl.w	r0, r3, r0
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	4303      	orrs	r3, r0
 800941e:	3401      	adds	r4, #1
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009426:	4826      	ldr	r0, [pc, #152]	; (80094c0 <_svfiprintf_r+0x1f0>)
 8009428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800942c:	2206      	movs	r2, #6
 800942e:	f7f6 feef 	bl	8000210 <memchr>
 8009432:	2800      	cmp	r0, #0
 8009434:	d038      	beq.n	80094a8 <_svfiprintf_r+0x1d8>
 8009436:	4b23      	ldr	r3, [pc, #140]	; (80094c4 <_svfiprintf_r+0x1f4>)
 8009438:	bb1b      	cbnz	r3, 8009482 <_svfiprintf_r+0x1b2>
 800943a:	9b03      	ldr	r3, [sp, #12]
 800943c:	3307      	adds	r3, #7
 800943e:	f023 0307 	bic.w	r3, r3, #7
 8009442:	3308      	adds	r3, #8
 8009444:	9303      	str	r3, [sp, #12]
 8009446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009448:	4433      	add	r3, r6
 800944a:	9309      	str	r3, [sp, #36]	; 0x24
 800944c:	e767      	b.n	800931e <_svfiprintf_r+0x4e>
 800944e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009452:	460c      	mov	r4, r1
 8009454:	2001      	movs	r0, #1
 8009456:	e7a5      	b.n	80093a4 <_svfiprintf_r+0xd4>
 8009458:	2300      	movs	r3, #0
 800945a:	3401      	adds	r4, #1
 800945c:	9305      	str	r3, [sp, #20]
 800945e:	4619      	mov	r1, r3
 8009460:	f04f 0c0a 	mov.w	ip, #10
 8009464:	4620      	mov	r0, r4
 8009466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800946a:	3a30      	subs	r2, #48	; 0x30
 800946c:	2a09      	cmp	r2, #9
 800946e:	d903      	bls.n	8009478 <_svfiprintf_r+0x1a8>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d0c5      	beq.n	8009400 <_svfiprintf_r+0x130>
 8009474:	9105      	str	r1, [sp, #20]
 8009476:	e7c3      	b.n	8009400 <_svfiprintf_r+0x130>
 8009478:	fb0c 2101 	mla	r1, ip, r1, r2
 800947c:	4604      	mov	r4, r0
 800947e:	2301      	movs	r3, #1
 8009480:	e7f0      	b.n	8009464 <_svfiprintf_r+0x194>
 8009482:	ab03      	add	r3, sp, #12
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	462a      	mov	r2, r5
 8009488:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <_svfiprintf_r+0x1f8>)
 800948a:	a904      	add	r1, sp, #16
 800948c:	4638      	mov	r0, r7
 800948e:	f7fc f9a1 	bl	80057d4 <_printf_float>
 8009492:	1c42      	adds	r2, r0, #1
 8009494:	4606      	mov	r6, r0
 8009496:	d1d6      	bne.n	8009446 <_svfiprintf_r+0x176>
 8009498:	89ab      	ldrh	r3, [r5, #12]
 800949a:	065b      	lsls	r3, r3, #25
 800949c:	f53f af2c 	bmi.w	80092f8 <_svfiprintf_r+0x28>
 80094a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094a2:	b01d      	add	sp, #116	; 0x74
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	ab03      	add	r3, sp, #12
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	462a      	mov	r2, r5
 80094ae:	4b06      	ldr	r3, [pc, #24]	; (80094c8 <_svfiprintf_r+0x1f8>)
 80094b0:	a904      	add	r1, sp, #16
 80094b2:	4638      	mov	r0, r7
 80094b4:	f7fc fc32 	bl	8005d1c <_printf_i>
 80094b8:	e7eb      	b.n	8009492 <_svfiprintf_r+0x1c2>
 80094ba:	bf00      	nop
 80094bc:	0800c9ac 	.word	0x0800c9ac
 80094c0:	0800c9b6 	.word	0x0800c9b6
 80094c4:	080057d5 	.word	0x080057d5
 80094c8:	08009219 	.word	0x08009219
 80094cc:	0800c9b2 	.word	0x0800c9b2

080094d0 <_sungetc_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	1c4b      	adds	r3, r1, #1
 80094d4:	4614      	mov	r4, r2
 80094d6:	d103      	bne.n	80094e0 <_sungetc_r+0x10>
 80094d8:	f04f 35ff 	mov.w	r5, #4294967295
 80094dc:	4628      	mov	r0, r5
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	8993      	ldrh	r3, [r2, #12]
 80094e2:	f023 0320 	bic.w	r3, r3, #32
 80094e6:	8193      	strh	r3, [r2, #12]
 80094e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094ea:	6852      	ldr	r2, [r2, #4]
 80094ec:	b2cd      	uxtb	r5, r1
 80094ee:	b18b      	cbz	r3, 8009514 <_sungetc_r+0x44>
 80094f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094f2:	4293      	cmp	r3, r2
 80094f4:	dd08      	ble.n	8009508 <_sungetc_r+0x38>
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	1e5a      	subs	r2, r3, #1
 80094fa:	6022      	str	r2, [r4, #0]
 80094fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009500:	6863      	ldr	r3, [r4, #4]
 8009502:	3301      	adds	r3, #1
 8009504:	6063      	str	r3, [r4, #4]
 8009506:	e7e9      	b.n	80094dc <_sungetc_r+0xc>
 8009508:	4621      	mov	r1, r4
 800950a:	f000 fbf1 	bl	8009cf0 <__submore>
 800950e:	2800      	cmp	r0, #0
 8009510:	d0f1      	beq.n	80094f6 <_sungetc_r+0x26>
 8009512:	e7e1      	b.n	80094d8 <_sungetc_r+0x8>
 8009514:	6921      	ldr	r1, [r4, #16]
 8009516:	6823      	ldr	r3, [r4, #0]
 8009518:	b151      	cbz	r1, 8009530 <_sungetc_r+0x60>
 800951a:	4299      	cmp	r1, r3
 800951c:	d208      	bcs.n	8009530 <_sungetc_r+0x60>
 800951e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009522:	42a9      	cmp	r1, r5
 8009524:	d104      	bne.n	8009530 <_sungetc_r+0x60>
 8009526:	3b01      	subs	r3, #1
 8009528:	3201      	adds	r2, #1
 800952a:	6023      	str	r3, [r4, #0]
 800952c:	6062      	str	r2, [r4, #4]
 800952e:	e7d5      	b.n	80094dc <_sungetc_r+0xc>
 8009530:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009538:	6363      	str	r3, [r4, #52]	; 0x34
 800953a:	2303      	movs	r3, #3
 800953c:	63a3      	str	r3, [r4, #56]	; 0x38
 800953e:	4623      	mov	r3, r4
 8009540:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	2301      	movs	r3, #1
 8009548:	e7dc      	b.n	8009504 <_sungetc_r+0x34>

0800954a <__ssrefill_r>:
 800954a:	b510      	push	{r4, lr}
 800954c:	460c      	mov	r4, r1
 800954e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009550:	b169      	cbz	r1, 800956e <__ssrefill_r+0x24>
 8009552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009556:	4299      	cmp	r1, r3
 8009558:	d001      	beq.n	800955e <__ssrefill_r+0x14>
 800955a:	f7ff fd7d 	bl	8009058 <_free_r>
 800955e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	2000      	movs	r0, #0
 8009564:	6360      	str	r0, [r4, #52]	; 0x34
 8009566:	b113      	cbz	r3, 800956e <__ssrefill_r+0x24>
 8009568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	bd10      	pop	{r4, pc}
 800956e:	6923      	ldr	r3, [r4, #16]
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	2300      	movs	r3, #0
 8009574:	6063      	str	r3, [r4, #4]
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	f043 0320 	orr.w	r3, r3, #32
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	f04f 30ff 	mov.w	r0, #4294967295
 8009582:	e7f3      	b.n	800956c <__ssrefill_r+0x22>

08009584 <__ssvfiscanf_r>:
 8009584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	460c      	mov	r4, r1
 800958a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800958e:	2100      	movs	r1, #0
 8009590:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009594:	49a6      	ldr	r1, [pc, #664]	; (8009830 <__ssvfiscanf_r+0x2ac>)
 8009596:	91a0      	str	r1, [sp, #640]	; 0x280
 8009598:	f10d 0804 	add.w	r8, sp, #4
 800959c:	49a5      	ldr	r1, [pc, #660]	; (8009834 <__ssvfiscanf_r+0x2b0>)
 800959e:	4fa6      	ldr	r7, [pc, #664]	; (8009838 <__ssvfiscanf_r+0x2b4>)
 80095a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800983c <__ssvfiscanf_r+0x2b8>
 80095a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80095a8:	4606      	mov	r6, r0
 80095aa:	91a1      	str	r1, [sp, #644]	; 0x284
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	7813      	ldrb	r3, [r2, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 815a 	beq.w	800986a <__ssvfiscanf_r+0x2e6>
 80095b6:	5dd9      	ldrb	r1, [r3, r7]
 80095b8:	f011 0108 	ands.w	r1, r1, #8
 80095bc:	f102 0501 	add.w	r5, r2, #1
 80095c0:	d019      	beq.n	80095f6 <__ssvfiscanf_r+0x72>
 80095c2:	6863      	ldr	r3, [r4, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	dd0f      	ble.n	80095e8 <__ssvfiscanf_r+0x64>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	781a      	ldrb	r2, [r3, #0]
 80095cc:	5cba      	ldrb	r2, [r7, r2]
 80095ce:	0712      	lsls	r2, r2, #28
 80095d0:	d401      	bmi.n	80095d6 <__ssvfiscanf_r+0x52>
 80095d2:	462a      	mov	r2, r5
 80095d4:	e7eb      	b.n	80095ae <__ssvfiscanf_r+0x2a>
 80095d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80095d8:	3201      	adds	r2, #1
 80095da:	9245      	str	r2, [sp, #276]	; 0x114
 80095dc:	6862      	ldr	r2, [r4, #4]
 80095de:	3301      	adds	r3, #1
 80095e0:	3a01      	subs	r2, #1
 80095e2:	6062      	str	r2, [r4, #4]
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	e7ec      	b.n	80095c2 <__ssvfiscanf_r+0x3e>
 80095e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80095ea:	4621      	mov	r1, r4
 80095ec:	4630      	mov	r0, r6
 80095ee:	4798      	blx	r3
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d0e9      	beq.n	80095c8 <__ssvfiscanf_r+0x44>
 80095f4:	e7ed      	b.n	80095d2 <__ssvfiscanf_r+0x4e>
 80095f6:	2b25      	cmp	r3, #37	; 0x25
 80095f8:	d012      	beq.n	8009620 <__ssvfiscanf_r+0x9c>
 80095fa:	469a      	mov	sl, r3
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f340 8091 	ble.w	8009726 <__ssvfiscanf_r+0x1a2>
 8009604:	6822      	ldr	r2, [r4, #0]
 8009606:	7813      	ldrb	r3, [r2, #0]
 8009608:	4553      	cmp	r3, sl
 800960a:	f040 812e 	bne.w	800986a <__ssvfiscanf_r+0x2e6>
 800960e:	6863      	ldr	r3, [r4, #4]
 8009610:	3b01      	subs	r3, #1
 8009612:	6063      	str	r3, [r4, #4]
 8009614:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009616:	3201      	adds	r2, #1
 8009618:	3301      	adds	r3, #1
 800961a:	6022      	str	r2, [r4, #0]
 800961c:	9345      	str	r3, [sp, #276]	; 0x114
 800961e:	e7d8      	b.n	80095d2 <__ssvfiscanf_r+0x4e>
 8009620:	9141      	str	r1, [sp, #260]	; 0x104
 8009622:	9143      	str	r1, [sp, #268]	; 0x10c
 8009624:	7853      	ldrb	r3, [r2, #1]
 8009626:	2b2a      	cmp	r3, #42	; 0x2a
 8009628:	bf02      	ittt	eq
 800962a:	2310      	moveq	r3, #16
 800962c:	1c95      	addeq	r5, r2, #2
 800962e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009630:	220a      	movs	r2, #10
 8009632:	46aa      	mov	sl, r5
 8009634:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009638:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800963c:	2b09      	cmp	r3, #9
 800963e:	d91d      	bls.n	800967c <__ssvfiscanf_r+0xf8>
 8009640:	487e      	ldr	r0, [pc, #504]	; (800983c <__ssvfiscanf_r+0x2b8>)
 8009642:	2203      	movs	r2, #3
 8009644:	f7f6 fde4 	bl	8000210 <memchr>
 8009648:	b140      	cbz	r0, 800965c <__ssvfiscanf_r+0xd8>
 800964a:	2301      	movs	r3, #1
 800964c:	eba0 0009 	sub.w	r0, r0, r9
 8009650:	fa03 f000 	lsl.w	r0, r3, r0
 8009654:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009656:	4318      	orrs	r0, r3
 8009658:	9041      	str	r0, [sp, #260]	; 0x104
 800965a:	4655      	mov	r5, sl
 800965c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009660:	2b78      	cmp	r3, #120	; 0x78
 8009662:	d806      	bhi.n	8009672 <__ssvfiscanf_r+0xee>
 8009664:	2b57      	cmp	r3, #87	; 0x57
 8009666:	d810      	bhi.n	800968a <__ssvfiscanf_r+0x106>
 8009668:	2b25      	cmp	r3, #37	; 0x25
 800966a:	d0c6      	beq.n	80095fa <__ssvfiscanf_r+0x76>
 800966c:	d856      	bhi.n	800971c <__ssvfiscanf_r+0x198>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d064      	beq.n	800973c <__ssvfiscanf_r+0x1b8>
 8009672:	2303      	movs	r3, #3
 8009674:	9347      	str	r3, [sp, #284]	; 0x11c
 8009676:	230a      	movs	r3, #10
 8009678:	9342      	str	r3, [sp, #264]	; 0x108
 800967a:	e071      	b.n	8009760 <__ssvfiscanf_r+0x1dc>
 800967c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800967e:	fb02 1103 	mla	r1, r2, r3, r1
 8009682:	3930      	subs	r1, #48	; 0x30
 8009684:	9143      	str	r1, [sp, #268]	; 0x10c
 8009686:	4655      	mov	r5, sl
 8009688:	e7d3      	b.n	8009632 <__ssvfiscanf_r+0xae>
 800968a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800968e:	2a20      	cmp	r2, #32
 8009690:	d8ef      	bhi.n	8009672 <__ssvfiscanf_r+0xee>
 8009692:	a101      	add	r1, pc, #4	; (adr r1, 8009698 <__ssvfiscanf_r+0x114>)
 8009694:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009698:	0800974b 	.word	0x0800974b
 800969c:	08009673 	.word	0x08009673
 80096a0:	08009673 	.word	0x08009673
 80096a4:	080097a9 	.word	0x080097a9
 80096a8:	08009673 	.word	0x08009673
 80096ac:	08009673 	.word	0x08009673
 80096b0:	08009673 	.word	0x08009673
 80096b4:	08009673 	.word	0x08009673
 80096b8:	08009673 	.word	0x08009673
 80096bc:	08009673 	.word	0x08009673
 80096c0:	08009673 	.word	0x08009673
 80096c4:	080097bf 	.word	0x080097bf
 80096c8:	08009795 	.word	0x08009795
 80096cc:	08009723 	.word	0x08009723
 80096d0:	08009723 	.word	0x08009723
 80096d4:	08009723 	.word	0x08009723
 80096d8:	08009673 	.word	0x08009673
 80096dc:	08009799 	.word	0x08009799
 80096e0:	08009673 	.word	0x08009673
 80096e4:	08009673 	.word	0x08009673
 80096e8:	08009673 	.word	0x08009673
 80096ec:	08009673 	.word	0x08009673
 80096f0:	080097cf 	.word	0x080097cf
 80096f4:	080097a1 	.word	0x080097a1
 80096f8:	08009743 	.word	0x08009743
 80096fc:	08009673 	.word	0x08009673
 8009700:	08009673 	.word	0x08009673
 8009704:	080097cb 	.word	0x080097cb
 8009708:	08009673 	.word	0x08009673
 800970c:	08009795 	.word	0x08009795
 8009710:	08009673 	.word	0x08009673
 8009714:	08009673 	.word	0x08009673
 8009718:	0800974b 	.word	0x0800974b
 800971c:	3b45      	subs	r3, #69	; 0x45
 800971e:	2b02      	cmp	r3, #2
 8009720:	d8a7      	bhi.n	8009672 <__ssvfiscanf_r+0xee>
 8009722:	2305      	movs	r3, #5
 8009724:	e01b      	b.n	800975e <__ssvfiscanf_r+0x1da>
 8009726:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009728:	4621      	mov	r1, r4
 800972a:	4630      	mov	r0, r6
 800972c:	4798      	blx	r3
 800972e:	2800      	cmp	r0, #0
 8009730:	f43f af68 	beq.w	8009604 <__ssvfiscanf_r+0x80>
 8009734:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009736:	2800      	cmp	r0, #0
 8009738:	f040 808d 	bne.w	8009856 <__ssvfiscanf_r+0x2d2>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295
 8009740:	e08f      	b.n	8009862 <__ssvfiscanf_r+0x2de>
 8009742:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009744:	f042 0220 	orr.w	r2, r2, #32
 8009748:	9241      	str	r2, [sp, #260]	; 0x104
 800974a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800974c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009750:	9241      	str	r2, [sp, #260]	; 0x104
 8009752:	2210      	movs	r2, #16
 8009754:	2b6f      	cmp	r3, #111	; 0x6f
 8009756:	9242      	str	r2, [sp, #264]	; 0x108
 8009758:	bf34      	ite	cc
 800975a:	2303      	movcc	r3, #3
 800975c:	2304      	movcs	r3, #4
 800975e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009760:	6863      	ldr	r3, [r4, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	dd42      	ble.n	80097ec <__ssvfiscanf_r+0x268>
 8009766:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009768:	0659      	lsls	r1, r3, #25
 800976a:	d404      	bmi.n	8009776 <__ssvfiscanf_r+0x1f2>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	781a      	ldrb	r2, [r3, #0]
 8009770:	5cba      	ldrb	r2, [r7, r2]
 8009772:	0712      	lsls	r2, r2, #28
 8009774:	d441      	bmi.n	80097fa <__ssvfiscanf_r+0x276>
 8009776:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009778:	2b02      	cmp	r3, #2
 800977a:	dc50      	bgt.n	800981e <__ssvfiscanf_r+0x29a>
 800977c:	466b      	mov	r3, sp
 800977e:	4622      	mov	r2, r4
 8009780:	a941      	add	r1, sp, #260	; 0x104
 8009782:	4630      	mov	r0, r6
 8009784:	f000 f876 	bl	8009874 <_scanf_chars>
 8009788:	2801      	cmp	r0, #1
 800978a:	d06e      	beq.n	800986a <__ssvfiscanf_r+0x2e6>
 800978c:	2802      	cmp	r0, #2
 800978e:	f47f af20 	bne.w	80095d2 <__ssvfiscanf_r+0x4e>
 8009792:	e7cf      	b.n	8009734 <__ssvfiscanf_r+0x1b0>
 8009794:	220a      	movs	r2, #10
 8009796:	e7dd      	b.n	8009754 <__ssvfiscanf_r+0x1d0>
 8009798:	2300      	movs	r3, #0
 800979a:	9342      	str	r3, [sp, #264]	; 0x108
 800979c:	2303      	movs	r3, #3
 800979e:	e7de      	b.n	800975e <__ssvfiscanf_r+0x1da>
 80097a0:	2308      	movs	r3, #8
 80097a2:	9342      	str	r3, [sp, #264]	; 0x108
 80097a4:	2304      	movs	r3, #4
 80097a6:	e7da      	b.n	800975e <__ssvfiscanf_r+0x1da>
 80097a8:	4629      	mov	r1, r5
 80097aa:	4640      	mov	r0, r8
 80097ac:	f000 f9e0 	bl	8009b70 <__sccl>
 80097b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80097b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b6:	9341      	str	r3, [sp, #260]	; 0x104
 80097b8:	4605      	mov	r5, r0
 80097ba:	2301      	movs	r3, #1
 80097bc:	e7cf      	b.n	800975e <__ssvfiscanf_r+0x1da>
 80097be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80097c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c4:	9341      	str	r3, [sp, #260]	; 0x104
 80097c6:	2300      	movs	r3, #0
 80097c8:	e7c9      	b.n	800975e <__ssvfiscanf_r+0x1da>
 80097ca:	2302      	movs	r3, #2
 80097cc:	e7c7      	b.n	800975e <__ssvfiscanf_r+0x1da>
 80097ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 80097d0:	06c3      	lsls	r3, r0, #27
 80097d2:	f53f aefe 	bmi.w	80095d2 <__ssvfiscanf_r+0x4e>
 80097d6:	9b00      	ldr	r3, [sp, #0]
 80097d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097da:	1d19      	adds	r1, r3, #4
 80097dc:	9100      	str	r1, [sp, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f010 0f01 	tst.w	r0, #1
 80097e4:	bf14      	ite	ne
 80097e6:	801a      	strhne	r2, [r3, #0]
 80097e8:	601a      	streq	r2, [r3, #0]
 80097ea:	e6f2      	b.n	80095d2 <__ssvfiscanf_r+0x4e>
 80097ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097ee:	4621      	mov	r1, r4
 80097f0:	4630      	mov	r0, r6
 80097f2:	4798      	blx	r3
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d0b6      	beq.n	8009766 <__ssvfiscanf_r+0x1e2>
 80097f8:	e79c      	b.n	8009734 <__ssvfiscanf_r+0x1b0>
 80097fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80097fc:	3201      	adds	r2, #1
 80097fe:	9245      	str	r2, [sp, #276]	; 0x114
 8009800:	6862      	ldr	r2, [r4, #4]
 8009802:	3a01      	subs	r2, #1
 8009804:	2a00      	cmp	r2, #0
 8009806:	6062      	str	r2, [r4, #4]
 8009808:	dd02      	ble.n	8009810 <__ssvfiscanf_r+0x28c>
 800980a:	3301      	adds	r3, #1
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	e7ad      	b.n	800976c <__ssvfiscanf_r+0x1e8>
 8009810:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009812:	4621      	mov	r1, r4
 8009814:	4630      	mov	r0, r6
 8009816:	4798      	blx	r3
 8009818:	2800      	cmp	r0, #0
 800981a:	d0a7      	beq.n	800976c <__ssvfiscanf_r+0x1e8>
 800981c:	e78a      	b.n	8009734 <__ssvfiscanf_r+0x1b0>
 800981e:	2b04      	cmp	r3, #4
 8009820:	dc0e      	bgt.n	8009840 <__ssvfiscanf_r+0x2bc>
 8009822:	466b      	mov	r3, sp
 8009824:	4622      	mov	r2, r4
 8009826:	a941      	add	r1, sp, #260	; 0x104
 8009828:	4630      	mov	r0, r6
 800982a:	f000 f87d 	bl	8009928 <_scanf_i>
 800982e:	e7ab      	b.n	8009788 <__ssvfiscanf_r+0x204>
 8009830:	080094d1 	.word	0x080094d1
 8009834:	0800954b 	.word	0x0800954b
 8009838:	0800c649 	.word	0x0800c649
 800983c:	0800c9b2 	.word	0x0800c9b2
 8009840:	4b0b      	ldr	r3, [pc, #44]	; (8009870 <__ssvfiscanf_r+0x2ec>)
 8009842:	2b00      	cmp	r3, #0
 8009844:	f43f aec5 	beq.w	80095d2 <__ssvfiscanf_r+0x4e>
 8009848:	466b      	mov	r3, sp
 800984a:	4622      	mov	r2, r4
 800984c:	a941      	add	r1, sp, #260	; 0x104
 800984e:	4630      	mov	r0, r6
 8009850:	f7fc fb8a 	bl	8005f68 <_scanf_float>
 8009854:	e798      	b.n	8009788 <__ssvfiscanf_r+0x204>
 8009856:	89a3      	ldrh	r3, [r4, #12]
 8009858:	f013 0f40 	tst.w	r3, #64	; 0x40
 800985c:	bf18      	it	ne
 800985e:	f04f 30ff 	movne.w	r0, #4294967295
 8009862:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800986c:	e7f9      	b.n	8009862 <__ssvfiscanf_r+0x2de>
 800986e:	bf00      	nop
 8009870:	08005f69 	.word	0x08005f69

08009874 <_scanf_chars>:
 8009874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009878:	4615      	mov	r5, r2
 800987a:	688a      	ldr	r2, [r1, #8]
 800987c:	4680      	mov	r8, r0
 800987e:	460c      	mov	r4, r1
 8009880:	b932      	cbnz	r2, 8009890 <_scanf_chars+0x1c>
 8009882:	698a      	ldr	r2, [r1, #24]
 8009884:	2a00      	cmp	r2, #0
 8009886:	bf0c      	ite	eq
 8009888:	2201      	moveq	r2, #1
 800988a:	f04f 32ff 	movne.w	r2, #4294967295
 800988e:	608a      	str	r2, [r1, #8]
 8009890:	6822      	ldr	r2, [r4, #0]
 8009892:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009924 <_scanf_chars+0xb0>
 8009896:	06d1      	lsls	r1, r2, #27
 8009898:	bf5f      	itttt	pl
 800989a:	681a      	ldrpl	r2, [r3, #0]
 800989c:	1d11      	addpl	r1, r2, #4
 800989e:	6019      	strpl	r1, [r3, #0]
 80098a0:	6816      	ldrpl	r6, [r2, #0]
 80098a2:	2700      	movs	r7, #0
 80098a4:	69a0      	ldr	r0, [r4, #24]
 80098a6:	b188      	cbz	r0, 80098cc <_scanf_chars+0x58>
 80098a8:	2801      	cmp	r0, #1
 80098aa:	d107      	bne.n	80098bc <_scanf_chars+0x48>
 80098ac:	682a      	ldr	r2, [r5, #0]
 80098ae:	7811      	ldrb	r1, [r2, #0]
 80098b0:	6962      	ldr	r2, [r4, #20]
 80098b2:	5c52      	ldrb	r2, [r2, r1]
 80098b4:	b952      	cbnz	r2, 80098cc <_scanf_chars+0x58>
 80098b6:	2f00      	cmp	r7, #0
 80098b8:	d031      	beq.n	800991e <_scanf_chars+0xaa>
 80098ba:	e022      	b.n	8009902 <_scanf_chars+0x8e>
 80098bc:	2802      	cmp	r0, #2
 80098be:	d120      	bne.n	8009902 <_scanf_chars+0x8e>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80098c8:	071b      	lsls	r3, r3, #28
 80098ca:	d41a      	bmi.n	8009902 <_scanf_chars+0x8e>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	06da      	lsls	r2, r3, #27
 80098d0:	bf5e      	ittt	pl
 80098d2:	682b      	ldrpl	r3, [r5, #0]
 80098d4:	781b      	ldrbpl	r3, [r3, #0]
 80098d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80098da:	682a      	ldr	r2, [r5, #0]
 80098dc:	686b      	ldr	r3, [r5, #4]
 80098de:	3201      	adds	r2, #1
 80098e0:	602a      	str	r2, [r5, #0]
 80098e2:	68a2      	ldr	r2, [r4, #8]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	3a01      	subs	r2, #1
 80098e8:	606b      	str	r3, [r5, #4]
 80098ea:	3701      	adds	r7, #1
 80098ec:	60a2      	str	r2, [r4, #8]
 80098ee:	b142      	cbz	r2, 8009902 <_scanf_chars+0x8e>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	dcd7      	bgt.n	80098a4 <_scanf_chars+0x30>
 80098f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80098f8:	4629      	mov	r1, r5
 80098fa:	4640      	mov	r0, r8
 80098fc:	4798      	blx	r3
 80098fe:	2800      	cmp	r0, #0
 8009900:	d0d0      	beq.n	80098a4 <_scanf_chars+0x30>
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	f013 0310 	ands.w	r3, r3, #16
 8009908:	d105      	bne.n	8009916 <_scanf_chars+0xa2>
 800990a:	68e2      	ldr	r2, [r4, #12]
 800990c:	3201      	adds	r2, #1
 800990e:	60e2      	str	r2, [r4, #12]
 8009910:	69a2      	ldr	r2, [r4, #24]
 8009912:	b102      	cbz	r2, 8009916 <_scanf_chars+0xa2>
 8009914:	7033      	strb	r3, [r6, #0]
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	443b      	add	r3, r7
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	2000      	movs	r0, #0
 800991e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009922:	bf00      	nop
 8009924:	0800c649 	.word	0x0800c649

08009928 <_scanf_i>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	4698      	mov	r8, r3
 800992e:	4b76      	ldr	r3, [pc, #472]	; (8009b08 <_scanf_i+0x1e0>)
 8009930:	460c      	mov	r4, r1
 8009932:	4682      	mov	sl, r0
 8009934:	4616      	mov	r6, r2
 8009936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800993a:	b087      	sub	sp, #28
 800993c:	ab03      	add	r3, sp, #12
 800993e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009942:	4b72      	ldr	r3, [pc, #456]	; (8009b0c <_scanf_i+0x1e4>)
 8009944:	69a1      	ldr	r1, [r4, #24]
 8009946:	4a72      	ldr	r2, [pc, #456]	; (8009b10 <_scanf_i+0x1e8>)
 8009948:	2903      	cmp	r1, #3
 800994a:	bf18      	it	ne
 800994c:	461a      	movne	r2, r3
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	9201      	str	r2, [sp, #4]
 8009952:	1e5a      	subs	r2, r3, #1
 8009954:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009958:	bf88      	it	hi
 800995a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800995e:	4627      	mov	r7, r4
 8009960:	bf82      	ittt	hi
 8009962:	eb03 0905 	addhi.w	r9, r3, r5
 8009966:	f240 135d 	movwhi	r3, #349	; 0x15d
 800996a:	60a3      	strhi	r3, [r4, #8]
 800996c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009970:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009974:	bf98      	it	ls
 8009976:	f04f 0900 	movls.w	r9, #0
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	463d      	mov	r5, r7
 800997e:	f04f 0b00 	mov.w	fp, #0
 8009982:	6831      	ldr	r1, [r6, #0]
 8009984:	ab03      	add	r3, sp, #12
 8009986:	7809      	ldrb	r1, [r1, #0]
 8009988:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800998c:	2202      	movs	r2, #2
 800998e:	f7f6 fc3f 	bl	8000210 <memchr>
 8009992:	b328      	cbz	r0, 80099e0 <_scanf_i+0xb8>
 8009994:	f1bb 0f01 	cmp.w	fp, #1
 8009998:	d159      	bne.n	8009a4e <_scanf_i+0x126>
 800999a:	6862      	ldr	r2, [r4, #4]
 800999c:	b92a      	cbnz	r2, 80099aa <_scanf_i+0x82>
 800999e:	6822      	ldr	r2, [r4, #0]
 80099a0:	2308      	movs	r3, #8
 80099a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099a6:	6063      	str	r3, [r4, #4]
 80099a8:	6022      	str	r2, [r4, #0]
 80099aa:	6822      	ldr	r2, [r4, #0]
 80099ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80099b0:	6022      	str	r2, [r4, #0]
 80099b2:	68a2      	ldr	r2, [r4, #8]
 80099b4:	1e51      	subs	r1, r2, #1
 80099b6:	60a1      	str	r1, [r4, #8]
 80099b8:	b192      	cbz	r2, 80099e0 <_scanf_i+0xb8>
 80099ba:	6832      	ldr	r2, [r6, #0]
 80099bc:	1c51      	adds	r1, r2, #1
 80099be:	6031      	str	r1, [r6, #0]
 80099c0:	7812      	ldrb	r2, [r2, #0]
 80099c2:	f805 2b01 	strb.w	r2, [r5], #1
 80099c6:	6872      	ldr	r2, [r6, #4]
 80099c8:	3a01      	subs	r2, #1
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	6072      	str	r2, [r6, #4]
 80099ce:	dc07      	bgt.n	80099e0 <_scanf_i+0xb8>
 80099d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80099d4:	4631      	mov	r1, r6
 80099d6:	4650      	mov	r0, sl
 80099d8:	4790      	blx	r2
 80099da:	2800      	cmp	r0, #0
 80099dc:	f040 8085 	bne.w	8009aea <_scanf_i+0x1c2>
 80099e0:	f10b 0b01 	add.w	fp, fp, #1
 80099e4:	f1bb 0f03 	cmp.w	fp, #3
 80099e8:	d1cb      	bne.n	8009982 <_scanf_i+0x5a>
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	b90b      	cbnz	r3, 80099f2 <_scanf_i+0xca>
 80099ee:	230a      	movs	r3, #10
 80099f0:	6063      	str	r3, [r4, #4]
 80099f2:	6863      	ldr	r3, [r4, #4]
 80099f4:	4947      	ldr	r1, [pc, #284]	; (8009b14 <_scanf_i+0x1ec>)
 80099f6:	6960      	ldr	r0, [r4, #20]
 80099f8:	1ac9      	subs	r1, r1, r3
 80099fa:	f000 f8b9 	bl	8009b70 <__sccl>
 80099fe:	f04f 0b00 	mov.w	fp, #0
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d03d      	beq.n	8009a86 <_scanf_i+0x15e>
 8009a0a:	6831      	ldr	r1, [r6, #0]
 8009a0c:	6960      	ldr	r0, [r4, #20]
 8009a0e:	f891 c000 	ldrb.w	ip, [r1]
 8009a12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d035      	beq.n	8009a86 <_scanf_i+0x15e>
 8009a1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009a1e:	d124      	bne.n	8009a6a <_scanf_i+0x142>
 8009a20:	0510      	lsls	r0, r2, #20
 8009a22:	d522      	bpl.n	8009a6a <_scanf_i+0x142>
 8009a24:	f10b 0b01 	add.w	fp, fp, #1
 8009a28:	f1b9 0f00 	cmp.w	r9, #0
 8009a2c:	d003      	beq.n	8009a36 <_scanf_i+0x10e>
 8009a2e:	3301      	adds	r3, #1
 8009a30:	f109 39ff 	add.w	r9, r9, #4294967295
 8009a34:	60a3      	str	r3, [r4, #8]
 8009a36:	6873      	ldr	r3, [r6, #4]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	6073      	str	r3, [r6, #4]
 8009a3e:	dd1b      	ble.n	8009a78 <_scanf_i+0x150>
 8009a40:	6833      	ldr	r3, [r6, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	6033      	str	r3, [r6, #0]
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	60a3      	str	r3, [r4, #8]
 8009a4c:	e7d9      	b.n	8009a02 <_scanf_i+0xda>
 8009a4e:	f1bb 0f02 	cmp.w	fp, #2
 8009a52:	d1ae      	bne.n	80099b2 <_scanf_i+0x8a>
 8009a54:	6822      	ldr	r2, [r4, #0]
 8009a56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009a5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a5e:	d1bf      	bne.n	80099e0 <_scanf_i+0xb8>
 8009a60:	2310      	movs	r3, #16
 8009a62:	6063      	str	r3, [r4, #4]
 8009a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a68:	e7a2      	b.n	80099b0 <_scanf_i+0x88>
 8009a6a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009a6e:	6022      	str	r2, [r4, #0]
 8009a70:	780b      	ldrb	r3, [r1, #0]
 8009a72:	f805 3b01 	strb.w	r3, [r5], #1
 8009a76:	e7de      	b.n	8009a36 <_scanf_i+0x10e>
 8009a78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4650      	mov	r0, sl
 8009a80:	4798      	blx	r3
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d0df      	beq.n	8009a46 <_scanf_i+0x11e>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	05db      	lsls	r3, r3, #23
 8009a8a:	d50d      	bpl.n	8009aa8 <_scanf_i+0x180>
 8009a8c:	42bd      	cmp	r5, r7
 8009a8e:	d909      	bls.n	8009aa4 <_scanf_i+0x17c>
 8009a90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009a94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a98:	4632      	mov	r2, r6
 8009a9a:	4650      	mov	r0, sl
 8009a9c:	4798      	blx	r3
 8009a9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009aa2:	464d      	mov	r5, r9
 8009aa4:	42bd      	cmp	r5, r7
 8009aa6:	d02d      	beq.n	8009b04 <_scanf_i+0x1dc>
 8009aa8:	6822      	ldr	r2, [r4, #0]
 8009aaa:	f012 0210 	ands.w	r2, r2, #16
 8009aae:	d113      	bne.n	8009ad8 <_scanf_i+0x1b0>
 8009ab0:	702a      	strb	r2, [r5, #0]
 8009ab2:	6863      	ldr	r3, [r4, #4]
 8009ab4:	9e01      	ldr	r6, [sp, #4]
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	4650      	mov	r0, sl
 8009aba:	47b0      	blx	r6
 8009abc:	6821      	ldr	r1, [r4, #0]
 8009abe:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac2:	f011 0f20 	tst.w	r1, #32
 8009ac6:	d013      	beq.n	8009af0 <_scanf_i+0x1c8>
 8009ac8:	1d1a      	adds	r2, r3, #4
 8009aca:	f8c8 2000 	str.w	r2, [r8]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6018      	str	r0, [r3, #0]
 8009ad2:	68e3      	ldr	r3, [r4, #12]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	60e3      	str	r3, [r4, #12]
 8009ad8:	1bed      	subs	r5, r5, r7
 8009ada:	44ab      	add	fp, r5
 8009adc:	6925      	ldr	r5, [r4, #16]
 8009ade:	445d      	add	r5, fp
 8009ae0:	6125      	str	r5, [r4, #16]
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	b007      	add	sp, #28
 8009ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aea:	f04f 0b00 	mov.w	fp, #0
 8009aee:	e7ca      	b.n	8009a86 <_scanf_i+0x15e>
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	f8c8 2000 	str.w	r2, [r8]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f011 0f01 	tst.w	r1, #1
 8009afc:	bf14      	ite	ne
 8009afe:	8018      	strhne	r0, [r3, #0]
 8009b00:	6018      	streq	r0, [r3, #0]
 8009b02:	e7e6      	b.n	8009ad2 <_scanf_i+0x1aa>
 8009b04:	2001      	movs	r0, #1
 8009b06:	e7ed      	b.n	8009ae4 <_scanf_i+0x1bc>
 8009b08:	0800c5b0 	.word	0x0800c5b0
 8009b0c:	08009ced 	.word	0x08009ced
 8009b10:	0800720d 	.word	0x0800720d
 8009b14:	0800c9d6 	.word	0x0800c9d6

08009b18 <_read_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d07      	ldr	r5, [pc, #28]	; (8009b38 <_read_r+0x20>)
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	4608      	mov	r0, r1
 8009b20:	4611      	mov	r1, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	602a      	str	r2, [r5, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f7f9 f871 	bl	8002c0e <_read>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_read_r+0x1e>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_read_r+0x1e>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	20000d40 	.word	0x20000d40
 8009b3c:	00000000 	.word	0x00000000

08009b40 <nan>:
 8009b40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009b48 <nan+0x8>
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	00000000 	.word	0x00000000
 8009b4c:	7ff80000 	.word	0x7ff80000

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	; (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f9 f8c4 	bl	8002ce8 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	20000d40 	.word	0x20000d40

08009b70 <__sccl>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	780b      	ldrb	r3, [r1, #0]
 8009b74:	4604      	mov	r4, r0
 8009b76:	2b5e      	cmp	r3, #94	; 0x5e
 8009b78:	bf0b      	itete	eq
 8009b7a:	784b      	ldrbeq	r3, [r1, #1]
 8009b7c:	1c48      	addne	r0, r1, #1
 8009b7e:	1c88      	addeq	r0, r1, #2
 8009b80:	2200      	movne	r2, #0
 8009b82:	bf08      	it	eq
 8009b84:	2201      	moveq	r2, #1
 8009b86:	1e61      	subs	r1, r4, #1
 8009b88:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009b8c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009b90:	42a9      	cmp	r1, r5
 8009b92:	d1fb      	bne.n	8009b8c <__sccl+0x1c>
 8009b94:	b90b      	cbnz	r3, 8009b9a <__sccl+0x2a>
 8009b96:	3801      	subs	r0, #1
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	f082 0201 	eor.w	r2, r2, #1
 8009b9e:	54e2      	strb	r2, [r4, r3]
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009ba8:	292d      	cmp	r1, #45	; 0x2d
 8009baa:	d006      	beq.n	8009bba <__sccl+0x4a>
 8009bac:	295d      	cmp	r1, #93	; 0x5d
 8009bae:	d0f3      	beq.n	8009b98 <__sccl+0x28>
 8009bb0:	b909      	cbnz	r1, 8009bb6 <__sccl+0x46>
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	e7f0      	b.n	8009b98 <__sccl+0x28>
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	e7f1      	b.n	8009b9e <__sccl+0x2e>
 8009bba:	786e      	ldrb	r6, [r5, #1]
 8009bbc:	2e5d      	cmp	r6, #93	; 0x5d
 8009bbe:	d0fa      	beq.n	8009bb6 <__sccl+0x46>
 8009bc0:	42b3      	cmp	r3, r6
 8009bc2:	dcf8      	bgt.n	8009bb6 <__sccl+0x46>
 8009bc4:	3502      	adds	r5, #2
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	3101      	adds	r1, #1
 8009bca:	428e      	cmp	r6, r1
 8009bcc:	5462      	strb	r2, [r4, r1]
 8009bce:	dcfb      	bgt.n	8009bc8 <__sccl+0x58>
 8009bd0:	1af1      	subs	r1, r6, r3
 8009bd2:	3901      	subs	r1, #1
 8009bd4:	1c58      	adds	r0, r3, #1
 8009bd6:	42b3      	cmp	r3, r6
 8009bd8:	bfa8      	it	ge
 8009bda:	2100      	movge	r1, #0
 8009bdc:	1843      	adds	r3, r0, r1
 8009bde:	e7e0      	b.n	8009ba2 <__sccl+0x32>

08009be0 <strncmp>:
 8009be0:	b510      	push	{r4, lr}
 8009be2:	b17a      	cbz	r2, 8009c04 <strncmp+0x24>
 8009be4:	4603      	mov	r3, r0
 8009be6:	3901      	subs	r1, #1
 8009be8:	1884      	adds	r4, r0, r2
 8009bea:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009bf2:	4290      	cmp	r0, r2
 8009bf4:	d101      	bne.n	8009bfa <strncmp+0x1a>
 8009bf6:	42a3      	cmp	r3, r4
 8009bf8:	d101      	bne.n	8009bfe <strncmp+0x1e>
 8009bfa:	1a80      	subs	r0, r0, r2
 8009bfc:	bd10      	pop	{r4, pc}
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d1f3      	bne.n	8009bea <strncmp+0xa>
 8009c02:	e7fa      	b.n	8009bfa <strncmp+0x1a>
 8009c04:	4610      	mov	r0, r2
 8009c06:	e7f9      	b.n	8009bfc <strncmp+0x1c>

08009c08 <_strtoul_l.constprop.0>:
 8009c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c0c:	4f36      	ldr	r7, [pc, #216]	; (8009ce8 <_strtoul_l.constprop.0+0xe0>)
 8009c0e:	4686      	mov	lr, r0
 8009c10:	460d      	mov	r5, r1
 8009c12:	4628      	mov	r0, r5
 8009c14:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c18:	5de6      	ldrb	r6, [r4, r7]
 8009c1a:	f016 0608 	ands.w	r6, r6, #8
 8009c1e:	d1f8      	bne.n	8009c12 <_strtoul_l.constprop.0+0xa>
 8009c20:	2c2d      	cmp	r4, #45	; 0x2d
 8009c22:	d12f      	bne.n	8009c84 <_strtoul_l.constprop.0+0x7c>
 8009c24:	782c      	ldrb	r4, [r5, #0]
 8009c26:	2601      	movs	r6, #1
 8009c28:	1c85      	adds	r5, r0, #2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d057      	beq.n	8009cde <_strtoul_l.constprop.0+0xd6>
 8009c2e:	2b10      	cmp	r3, #16
 8009c30:	d109      	bne.n	8009c46 <_strtoul_l.constprop.0+0x3e>
 8009c32:	2c30      	cmp	r4, #48	; 0x30
 8009c34:	d107      	bne.n	8009c46 <_strtoul_l.constprop.0+0x3e>
 8009c36:	7828      	ldrb	r0, [r5, #0]
 8009c38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009c3c:	2858      	cmp	r0, #88	; 0x58
 8009c3e:	d149      	bne.n	8009cd4 <_strtoul_l.constprop.0+0xcc>
 8009c40:	786c      	ldrb	r4, [r5, #1]
 8009c42:	2310      	movs	r3, #16
 8009c44:	3502      	adds	r5, #2
 8009c46:	f04f 38ff 	mov.w	r8, #4294967295
 8009c4a:	2700      	movs	r7, #0
 8009c4c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009c50:	fb03 f908 	mul.w	r9, r3, r8
 8009c54:	ea6f 0909 	mvn.w	r9, r9
 8009c58:	4638      	mov	r0, r7
 8009c5a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009c5e:	f1bc 0f09 	cmp.w	ip, #9
 8009c62:	d814      	bhi.n	8009c8e <_strtoul_l.constprop.0+0x86>
 8009c64:	4664      	mov	r4, ip
 8009c66:	42a3      	cmp	r3, r4
 8009c68:	dd22      	ble.n	8009cb0 <_strtoul_l.constprop.0+0xa8>
 8009c6a:	2f00      	cmp	r7, #0
 8009c6c:	db1d      	blt.n	8009caa <_strtoul_l.constprop.0+0xa2>
 8009c6e:	4580      	cmp	r8, r0
 8009c70:	d31b      	bcc.n	8009caa <_strtoul_l.constprop.0+0xa2>
 8009c72:	d101      	bne.n	8009c78 <_strtoul_l.constprop.0+0x70>
 8009c74:	45a1      	cmp	r9, r4
 8009c76:	db18      	blt.n	8009caa <_strtoul_l.constprop.0+0xa2>
 8009c78:	fb00 4003 	mla	r0, r0, r3, r4
 8009c7c:	2701      	movs	r7, #1
 8009c7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c82:	e7ea      	b.n	8009c5a <_strtoul_l.constprop.0+0x52>
 8009c84:	2c2b      	cmp	r4, #43	; 0x2b
 8009c86:	bf04      	itt	eq
 8009c88:	782c      	ldrbeq	r4, [r5, #0]
 8009c8a:	1c85      	addeq	r5, r0, #2
 8009c8c:	e7cd      	b.n	8009c2a <_strtoul_l.constprop.0+0x22>
 8009c8e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009c92:	f1bc 0f19 	cmp.w	ip, #25
 8009c96:	d801      	bhi.n	8009c9c <_strtoul_l.constprop.0+0x94>
 8009c98:	3c37      	subs	r4, #55	; 0x37
 8009c9a:	e7e4      	b.n	8009c66 <_strtoul_l.constprop.0+0x5e>
 8009c9c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009ca0:	f1bc 0f19 	cmp.w	ip, #25
 8009ca4:	d804      	bhi.n	8009cb0 <_strtoul_l.constprop.0+0xa8>
 8009ca6:	3c57      	subs	r4, #87	; 0x57
 8009ca8:	e7dd      	b.n	8009c66 <_strtoul_l.constprop.0+0x5e>
 8009caa:	f04f 37ff 	mov.w	r7, #4294967295
 8009cae:	e7e6      	b.n	8009c7e <_strtoul_l.constprop.0+0x76>
 8009cb0:	2f00      	cmp	r7, #0
 8009cb2:	da07      	bge.n	8009cc4 <_strtoul_l.constprop.0+0xbc>
 8009cb4:	2322      	movs	r3, #34	; 0x22
 8009cb6:	f8ce 3000 	str.w	r3, [lr]
 8009cba:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbe:	b932      	cbnz	r2, 8009cce <_strtoul_l.constprop.0+0xc6>
 8009cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cc4:	b106      	cbz	r6, 8009cc8 <_strtoul_l.constprop.0+0xc0>
 8009cc6:	4240      	negs	r0, r0
 8009cc8:	2a00      	cmp	r2, #0
 8009cca:	d0f9      	beq.n	8009cc0 <_strtoul_l.constprop.0+0xb8>
 8009ccc:	b107      	cbz	r7, 8009cd0 <_strtoul_l.constprop.0+0xc8>
 8009cce:	1e69      	subs	r1, r5, #1
 8009cd0:	6011      	str	r1, [r2, #0]
 8009cd2:	e7f5      	b.n	8009cc0 <_strtoul_l.constprop.0+0xb8>
 8009cd4:	2430      	movs	r4, #48	; 0x30
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1b5      	bne.n	8009c46 <_strtoul_l.constprop.0+0x3e>
 8009cda:	2308      	movs	r3, #8
 8009cdc:	e7b3      	b.n	8009c46 <_strtoul_l.constprop.0+0x3e>
 8009cde:	2c30      	cmp	r4, #48	; 0x30
 8009ce0:	d0a9      	beq.n	8009c36 <_strtoul_l.constprop.0+0x2e>
 8009ce2:	230a      	movs	r3, #10
 8009ce4:	e7af      	b.n	8009c46 <_strtoul_l.constprop.0+0x3e>
 8009ce6:	bf00      	nop
 8009ce8:	0800c649 	.word	0x0800c649

08009cec <_strtoul_r>:
 8009cec:	f7ff bf8c 	b.w	8009c08 <_strtoul_l.constprop.0>

08009cf0 <__submore>:
 8009cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cfc:	4299      	cmp	r1, r3
 8009cfe:	d11d      	bne.n	8009d3c <__submore+0x4c>
 8009d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009d04:	f7ff fa14 	bl	8009130 <_malloc_r>
 8009d08:	b918      	cbnz	r0, 8009d12 <__submore+0x22>
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d16:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009d1c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d1e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009d22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d26:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009d2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d2e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009d32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009d36:	6020      	str	r0, [r4, #0]
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e7e8      	b.n	8009d0e <__submore+0x1e>
 8009d3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009d3e:	0077      	lsls	r7, r6, #1
 8009d40:	463a      	mov	r2, r7
 8009d42:	f000 fa2d 	bl	800a1a0 <_realloc_r>
 8009d46:	4605      	mov	r5, r0
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	d0de      	beq.n	8009d0a <__submore+0x1a>
 8009d4c:	eb00 0806 	add.w	r8, r0, r6
 8009d50:	4601      	mov	r1, r0
 8009d52:	4632      	mov	r2, r6
 8009d54:	4640      	mov	r0, r8
 8009d56:	f7fe fc99 	bl	800868c <memcpy>
 8009d5a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009d5e:	f8c4 8000 	str.w	r8, [r4]
 8009d62:	e7e9      	b.n	8009d38 <__submore+0x48>

08009d64 <__ascii_wctomb>:
 8009d64:	b149      	cbz	r1, 8009d7a <__ascii_wctomb+0x16>
 8009d66:	2aff      	cmp	r2, #255	; 0xff
 8009d68:	bf85      	ittet	hi
 8009d6a:	238a      	movhi	r3, #138	; 0x8a
 8009d6c:	6003      	strhi	r3, [r0, #0]
 8009d6e:	700a      	strbls	r2, [r1, #0]
 8009d70:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d74:	bf98      	it	ls
 8009d76:	2001      	movls	r0, #1
 8009d78:	4770      	bx	lr
 8009d7a:	4608      	mov	r0, r1
 8009d7c:	4770      	bx	lr
	...

08009d80 <__assert_func>:
 8009d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d82:	4614      	mov	r4, r2
 8009d84:	461a      	mov	r2, r3
 8009d86:	4b09      	ldr	r3, [pc, #36]	; (8009dac <__assert_func+0x2c>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4605      	mov	r5, r0
 8009d8c:	68d8      	ldr	r0, [r3, #12]
 8009d8e:	b14c      	cbz	r4, 8009da4 <__assert_func+0x24>
 8009d90:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <__assert_func+0x30>)
 8009d92:	9100      	str	r1, [sp, #0]
 8009d94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d98:	4906      	ldr	r1, [pc, #24]	; (8009db4 <__assert_func+0x34>)
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	f000 f9a6 	bl	800a0ec <fiprintf>
 8009da0:	f000 fc46 	bl	800a630 <abort>
 8009da4:	4b04      	ldr	r3, [pc, #16]	; (8009db8 <__assert_func+0x38>)
 8009da6:	461c      	mov	r4, r3
 8009da8:	e7f3      	b.n	8009d92 <__assert_func+0x12>
 8009daa:	bf00      	nop
 8009dac:	20000018 	.word	0x20000018
 8009db0:	0800c9d8 	.word	0x0800c9d8
 8009db4:	0800c9e5 	.word	0x0800c9e5
 8009db8:	0800ca13 	.word	0x0800ca13

08009dbc <__sflush_r>:
 8009dbc:	898a      	ldrh	r2, [r1, #12]
 8009dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	0710      	lsls	r0, r2, #28
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	d458      	bmi.n	8009e7c <__sflush_r+0xc0>
 8009dca:	684b      	ldr	r3, [r1, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dc05      	bgt.n	8009ddc <__sflush_r+0x20>
 8009dd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dc02      	bgt.n	8009ddc <__sflush_r+0x20>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	d0f9      	beq.n	8009dd6 <__sflush_r+0x1a>
 8009de2:	2300      	movs	r3, #0
 8009de4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009de8:	682f      	ldr	r7, [r5, #0]
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	d032      	beq.n	8009e54 <__sflush_r+0x98>
 8009dee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	075a      	lsls	r2, r3, #29
 8009df4:	d505      	bpl.n	8009e02 <__sflush_r+0x46>
 8009df6:	6863      	ldr	r3, [r4, #4]
 8009df8:	1ac0      	subs	r0, r0, r3
 8009dfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dfc:	b10b      	cbz	r3, 8009e02 <__sflush_r+0x46>
 8009dfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e00:	1ac0      	subs	r0, r0, r3
 8009e02:	2300      	movs	r3, #0
 8009e04:	4602      	mov	r2, r0
 8009e06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e08:	6a21      	ldr	r1, [r4, #32]
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	47b0      	blx	r6
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	d106      	bne.n	8009e22 <__sflush_r+0x66>
 8009e14:	6829      	ldr	r1, [r5, #0]
 8009e16:	291d      	cmp	r1, #29
 8009e18:	d82c      	bhi.n	8009e74 <__sflush_r+0xb8>
 8009e1a:	4a2a      	ldr	r2, [pc, #168]	; (8009ec4 <__sflush_r+0x108>)
 8009e1c:	40ca      	lsrs	r2, r1
 8009e1e:	07d6      	lsls	r6, r2, #31
 8009e20:	d528      	bpl.n	8009e74 <__sflush_r+0xb8>
 8009e22:	2200      	movs	r2, #0
 8009e24:	6062      	str	r2, [r4, #4]
 8009e26:	04d9      	lsls	r1, r3, #19
 8009e28:	6922      	ldr	r2, [r4, #16]
 8009e2a:	6022      	str	r2, [r4, #0]
 8009e2c:	d504      	bpl.n	8009e38 <__sflush_r+0x7c>
 8009e2e:	1c42      	adds	r2, r0, #1
 8009e30:	d101      	bne.n	8009e36 <__sflush_r+0x7a>
 8009e32:	682b      	ldr	r3, [r5, #0]
 8009e34:	b903      	cbnz	r3, 8009e38 <__sflush_r+0x7c>
 8009e36:	6560      	str	r0, [r4, #84]	; 0x54
 8009e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e3a:	602f      	str	r7, [r5, #0]
 8009e3c:	2900      	cmp	r1, #0
 8009e3e:	d0ca      	beq.n	8009dd6 <__sflush_r+0x1a>
 8009e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e44:	4299      	cmp	r1, r3
 8009e46:	d002      	beq.n	8009e4e <__sflush_r+0x92>
 8009e48:	4628      	mov	r0, r5
 8009e4a:	f7ff f905 	bl	8009058 <_free_r>
 8009e4e:	2000      	movs	r0, #0
 8009e50:	6360      	str	r0, [r4, #52]	; 0x34
 8009e52:	e7c1      	b.n	8009dd8 <__sflush_r+0x1c>
 8009e54:	6a21      	ldr	r1, [r4, #32]
 8009e56:	2301      	movs	r3, #1
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b0      	blx	r6
 8009e5c:	1c41      	adds	r1, r0, #1
 8009e5e:	d1c7      	bne.n	8009df0 <__sflush_r+0x34>
 8009e60:	682b      	ldr	r3, [r5, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0c4      	beq.n	8009df0 <__sflush_r+0x34>
 8009e66:	2b1d      	cmp	r3, #29
 8009e68:	d001      	beq.n	8009e6e <__sflush_r+0xb2>
 8009e6a:	2b16      	cmp	r3, #22
 8009e6c:	d101      	bne.n	8009e72 <__sflush_r+0xb6>
 8009e6e:	602f      	str	r7, [r5, #0]
 8009e70:	e7b1      	b.n	8009dd6 <__sflush_r+0x1a>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	e7ad      	b.n	8009dd8 <__sflush_r+0x1c>
 8009e7c:	690f      	ldr	r7, [r1, #16]
 8009e7e:	2f00      	cmp	r7, #0
 8009e80:	d0a9      	beq.n	8009dd6 <__sflush_r+0x1a>
 8009e82:	0793      	lsls	r3, r2, #30
 8009e84:	680e      	ldr	r6, [r1, #0]
 8009e86:	bf08      	it	eq
 8009e88:	694b      	ldreq	r3, [r1, #20]
 8009e8a:	600f      	str	r7, [r1, #0]
 8009e8c:	bf18      	it	ne
 8009e8e:	2300      	movne	r3, #0
 8009e90:	eba6 0807 	sub.w	r8, r6, r7
 8009e94:	608b      	str	r3, [r1, #8]
 8009e96:	f1b8 0f00 	cmp.w	r8, #0
 8009e9a:	dd9c      	ble.n	8009dd6 <__sflush_r+0x1a>
 8009e9c:	6a21      	ldr	r1, [r4, #32]
 8009e9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ea0:	4643      	mov	r3, r8
 8009ea2:	463a      	mov	r2, r7
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b0      	blx	r6
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	dc06      	bgt.n	8009eba <__sflush_r+0xfe>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb8:	e78e      	b.n	8009dd8 <__sflush_r+0x1c>
 8009eba:	4407      	add	r7, r0
 8009ebc:	eba8 0800 	sub.w	r8, r8, r0
 8009ec0:	e7e9      	b.n	8009e96 <__sflush_r+0xda>
 8009ec2:	bf00      	nop
 8009ec4:	20400001 	.word	0x20400001

08009ec8 <_fflush_r>:
 8009ec8:	b538      	push	{r3, r4, r5, lr}
 8009eca:	690b      	ldr	r3, [r1, #16]
 8009ecc:	4605      	mov	r5, r0
 8009ece:	460c      	mov	r4, r1
 8009ed0:	b913      	cbnz	r3, 8009ed8 <_fflush_r+0x10>
 8009ed2:	2500      	movs	r5, #0
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	b118      	cbz	r0, 8009ee2 <_fflush_r+0x1a>
 8009eda:	6983      	ldr	r3, [r0, #24]
 8009edc:	b90b      	cbnz	r3, 8009ee2 <_fflush_r+0x1a>
 8009ede:	f000 f887 	bl	8009ff0 <__sinit>
 8009ee2:	4b14      	ldr	r3, [pc, #80]	; (8009f34 <_fflush_r+0x6c>)
 8009ee4:	429c      	cmp	r4, r3
 8009ee6:	d11b      	bne.n	8009f20 <_fflush_r+0x58>
 8009ee8:	686c      	ldr	r4, [r5, #4]
 8009eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0ef      	beq.n	8009ed2 <_fflush_r+0xa>
 8009ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ef4:	07d0      	lsls	r0, r2, #31
 8009ef6:	d404      	bmi.n	8009f02 <_fflush_r+0x3a>
 8009ef8:	0599      	lsls	r1, r3, #22
 8009efa:	d402      	bmi.n	8009f02 <_fflush_r+0x3a>
 8009efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009efe:	f000 f927 	bl	800a150 <__retarget_lock_acquire_recursive>
 8009f02:	4628      	mov	r0, r5
 8009f04:	4621      	mov	r1, r4
 8009f06:	f7ff ff59 	bl	8009dbc <__sflush_r>
 8009f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f0c:	07da      	lsls	r2, r3, #31
 8009f0e:	4605      	mov	r5, r0
 8009f10:	d4e0      	bmi.n	8009ed4 <_fflush_r+0xc>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	059b      	lsls	r3, r3, #22
 8009f16:	d4dd      	bmi.n	8009ed4 <_fflush_r+0xc>
 8009f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f1a:	f000 f91a 	bl	800a152 <__retarget_lock_release_recursive>
 8009f1e:	e7d9      	b.n	8009ed4 <_fflush_r+0xc>
 8009f20:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <_fflush_r+0x70>)
 8009f22:	429c      	cmp	r4, r3
 8009f24:	d101      	bne.n	8009f2a <_fflush_r+0x62>
 8009f26:	68ac      	ldr	r4, [r5, #8]
 8009f28:	e7df      	b.n	8009eea <_fflush_r+0x22>
 8009f2a:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <_fflush_r+0x74>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	bf08      	it	eq
 8009f30:	68ec      	ldreq	r4, [r5, #12]
 8009f32:	e7da      	b.n	8009eea <_fflush_r+0x22>
 8009f34:	0800ca34 	.word	0x0800ca34
 8009f38:	0800ca54 	.word	0x0800ca54
 8009f3c:	0800ca14 	.word	0x0800ca14

08009f40 <std>:
 8009f40:	2300      	movs	r3, #0
 8009f42:	b510      	push	{r4, lr}
 8009f44:	4604      	mov	r4, r0
 8009f46:	e9c0 3300 	strd	r3, r3, [r0]
 8009f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f4e:	6083      	str	r3, [r0, #8]
 8009f50:	8181      	strh	r1, [r0, #12]
 8009f52:	6643      	str	r3, [r0, #100]	; 0x64
 8009f54:	81c2      	strh	r2, [r0, #14]
 8009f56:	6183      	str	r3, [r0, #24]
 8009f58:	4619      	mov	r1, r3
 8009f5a:	2208      	movs	r2, #8
 8009f5c:	305c      	adds	r0, #92	; 0x5c
 8009f5e:	f7fb fb91 	bl	8005684 <memset>
 8009f62:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <std+0x38>)
 8009f64:	6263      	str	r3, [r4, #36]	; 0x24
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <std+0x3c>)
 8009f68:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f6a:	4b05      	ldr	r3, [pc, #20]	; (8009f80 <std+0x40>)
 8009f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <std+0x44>)
 8009f70:	6224      	str	r4, [r4, #32]
 8009f72:	6323      	str	r3, [r4, #48]	; 0x30
 8009f74:	bd10      	pop	{r4, pc}
 8009f76:	bf00      	nop
 8009f78:	0800642d 	.word	0x0800642d
 8009f7c:	08006453 	.word	0x08006453
 8009f80:	0800648b 	.word	0x0800648b
 8009f84:	080064af 	.word	0x080064af

08009f88 <_cleanup_r>:
 8009f88:	4901      	ldr	r1, [pc, #4]	; (8009f90 <_cleanup_r+0x8>)
 8009f8a:	f000 b8c1 	b.w	800a110 <_fwalk_reent>
 8009f8e:	bf00      	nop
 8009f90:	08009ec9 	.word	0x08009ec9

08009f94 <__sfmoreglue>:
 8009f94:	b570      	push	{r4, r5, r6, lr}
 8009f96:	2268      	movs	r2, #104	; 0x68
 8009f98:	1e4d      	subs	r5, r1, #1
 8009f9a:	4355      	muls	r5, r2
 8009f9c:	460e      	mov	r6, r1
 8009f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fa2:	f7ff f8c5 	bl	8009130 <_malloc_r>
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	b140      	cbz	r0, 8009fbc <__sfmoreglue+0x28>
 8009faa:	2100      	movs	r1, #0
 8009fac:	e9c0 1600 	strd	r1, r6, [r0]
 8009fb0:	300c      	adds	r0, #12
 8009fb2:	60a0      	str	r0, [r4, #8]
 8009fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fb8:	f7fb fb64 	bl	8005684 <memset>
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}

08009fc0 <__sfp_lock_acquire>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__sfp_lock_acquire+0x8>)
 8009fc2:	f000 b8c5 	b.w	800a150 <__retarget_lock_acquire_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	20000d45 	.word	0x20000d45

08009fcc <__sfp_lock_release>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	; (8009fd4 <__sfp_lock_release+0x8>)
 8009fce:	f000 b8c0 	b.w	800a152 <__retarget_lock_release_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	20000d45 	.word	0x20000d45

08009fd8 <__sinit_lock_acquire>:
 8009fd8:	4801      	ldr	r0, [pc, #4]	; (8009fe0 <__sinit_lock_acquire+0x8>)
 8009fda:	f000 b8b9 	b.w	800a150 <__retarget_lock_acquire_recursive>
 8009fde:	bf00      	nop
 8009fe0:	20000d46 	.word	0x20000d46

08009fe4 <__sinit_lock_release>:
 8009fe4:	4801      	ldr	r0, [pc, #4]	; (8009fec <__sinit_lock_release+0x8>)
 8009fe6:	f000 b8b4 	b.w	800a152 <__retarget_lock_release_recursive>
 8009fea:	bf00      	nop
 8009fec:	20000d46 	.word	0x20000d46

08009ff0 <__sinit>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	f7ff fff0 	bl	8009fd8 <__sinit_lock_acquire>
 8009ff8:	69a3      	ldr	r3, [r4, #24]
 8009ffa:	b11b      	cbz	r3, 800a004 <__sinit+0x14>
 8009ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a000:	f7ff bff0 	b.w	8009fe4 <__sinit_lock_release>
 800a004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a008:	6523      	str	r3, [r4, #80]	; 0x50
 800a00a:	4b13      	ldr	r3, [pc, #76]	; (800a058 <__sinit+0x68>)
 800a00c:	4a13      	ldr	r2, [pc, #76]	; (800a05c <__sinit+0x6c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	62a2      	str	r2, [r4, #40]	; 0x28
 800a012:	42a3      	cmp	r3, r4
 800a014:	bf04      	itt	eq
 800a016:	2301      	moveq	r3, #1
 800a018:	61a3      	streq	r3, [r4, #24]
 800a01a:	4620      	mov	r0, r4
 800a01c:	f000 f820 	bl	800a060 <__sfp>
 800a020:	6060      	str	r0, [r4, #4]
 800a022:	4620      	mov	r0, r4
 800a024:	f000 f81c 	bl	800a060 <__sfp>
 800a028:	60a0      	str	r0, [r4, #8]
 800a02a:	4620      	mov	r0, r4
 800a02c:	f000 f818 	bl	800a060 <__sfp>
 800a030:	2200      	movs	r2, #0
 800a032:	60e0      	str	r0, [r4, #12]
 800a034:	2104      	movs	r1, #4
 800a036:	6860      	ldr	r0, [r4, #4]
 800a038:	f7ff ff82 	bl	8009f40 <std>
 800a03c:	68a0      	ldr	r0, [r4, #8]
 800a03e:	2201      	movs	r2, #1
 800a040:	2109      	movs	r1, #9
 800a042:	f7ff ff7d 	bl	8009f40 <std>
 800a046:	68e0      	ldr	r0, [r4, #12]
 800a048:	2202      	movs	r2, #2
 800a04a:	2112      	movs	r1, #18
 800a04c:	f7ff ff78 	bl	8009f40 <std>
 800a050:	2301      	movs	r3, #1
 800a052:	61a3      	str	r3, [r4, #24]
 800a054:	e7d2      	b.n	8009ffc <__sinit+0xc>
 800a056:	bf00      	nop
 800a058:	0800c5bc 	.word	0x0800c5bc
 800a05c:	08009f89 	.word	0x08009f89

0800a060 <__sfp>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	4607      	mov	r7, r0
 800a064:	f7ff ffac 	bl	8009fc0 <__sfp_lock_acquire>
 800a068:	4b1e      	ldr	r3, [pc, #120]	; (800a0e4 <__sfp+0x84>)
 800a06a:	681e      	ldr	r6, [r3, #0]
 800a06c:	69b3      	ldr	r3, [r6, #24]
 800a06e:	b913      	cbnz	r3, 800a076 <__sfp+0x16>
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff ffbd 	bl	8009ff0 <__sinit>
 800a076:	3648      	adds	r6, #72	; 0x48
 800a078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	d503      	bpl.n	800a088 <__sfp+0x28>
 800a080:	6833      	ldr	r3, [r6, #0]
 800a082:	b30b      	cbz	r3, 800a0c8 <__sfp+0x68>
 800a084:	6836      	ldr	r6, [r6, #0]
 800a086:	e7f7      	b.n	800a078 <__sfp+0x18>
 800a088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a08c:	b9d5      	cbnz	r5, 800a0c4 <__sfp+0x64>
 800a08e:	4b16      	ldr	r3, [pc, #88]	; (800a0e8 <__sfp+0x88>)
 800a090:	60e3      	str	r3, [r4, #12]
 800a092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a096:	6665      	str	r5, [r4, #100]	; 0x64
 800a098:	f000 f859 	bl	800a14e <__retarget_lock_init_recursive>
 800a09c:	f7ff ff96 	bl	8009fcc <__sfp_lock_release>
 800a0a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0a8:	6025      	str	r5, [r4, #0]
 800a0aa:	61a5      	str	r5, [r4, #24]
 800a0ac:	2208      	movs	r2, #8
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0b4:	f7fb fae6 	bl	8005684 <memset>
 800a0b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0c4:	3468      	adds	r4, #104	; 0x68
 800a0c6:	e7d9      	b.n	800a07c <__sfp+0x1c>
 800a0c8:	2104      	movs	r1, #4
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	f7ff ff62 	bl	8009f94 <__sfmoreglue>
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	6030      	str	r0, [r6, #0]
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d1d5      	bne.n	800a084 <__sfp+0x24>
 800a0d8:	f7ff ff78 	bl	8009fcc <__sfp_lock_release>
 800a0dc:	230c      	movs	r3, #12
 800a0de:	603b      	str	r3, [r7, #0]
 800a0e0:	e7ee      	b.n	800a0c0 <__sfp+0x60>
 800a0e2:	bf00      	nop
 800a0e4:	0800c5bc 	.word	0x0800c5bc
 800a0e8:	ffff0001 	.word	0xffff0001

0800a0ec <fiprintf>:
 800a0ec:	b40e      	push	{r1, r2, r3}
 800a0ee:	b503      	push	{r0, r1, lr}
 800a0f0:	4601      	mov	r1, r0
 800a0f2:	ab03      	add	r3, sp, #12
 800a0f4:	4805      	ldr	r0, [pc, #20]	; (800a10c <fiprintf+0x20>)
 800a0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0fa:	6800      	ldr	r0, [r0, #0]
 800a0fc:	9301      	str	r3, [sp, #4]
 800a0fe:	f000 f8a7 	bl	800a250 <_vfiprintf_r>
 800a102:	b002      	add	sp, #8
 800a104:	f85d eb04 	ldr.w	lr, [sp], #4
 800a108:	b003      	add	sp, #12
 800a10a:	4770      	bx	lr
 800a10c:	20000018 	.word	0x20000018

0800a110 <_fwalk_reent>:
 800a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a114:	4606      	mov	r6, r0
 800a116:	4688      	mov	r8, r1
 800a118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a11c:	2700      	movs	r7, #0
 800a11e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a122:	f1b9 0901 	subs.w	r9, r9, #1
 800a126:	d505      	bpl.n	800a134 <_fwalk_reent+0x24>
 800a128:	6824      	ldr	r4, [r4, #0]
 800a12a:	2c00      	cmp	r4, #0
 800a12c:	d1f7      	bne.n	800a11e <_fwalk_reent+0xe>
 800a12e:	4638      	mov	r0, r7
 800a130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a134:	89ab      	ldrh	r3, [r5, #12]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d907      	bls.n	800a14a <_fwalk_reent+0x3a>
 800a13a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a13e:	3301      	adds	r3, #1
 800a140:	d003      	beq.n	800a14a <_fwalk_reent+0x3a>
 800a142:	4629      	mov	r1, r5
 800a144:	4630      	mov	r0, r6
 800a146:	47c0      	blx	r8
 800a148:	4307      	orrs	r7, r0
 800a14a:	3568      	adds	r5, #104	; 0x68
 800a14c:	e7e9      	b.n	800a122 <_fwalk_reent+0x12>

0800a14e <__retarget_lock_init_recursive>:
 800a14e:	4770      	bx	lr

0800a150 <__retarget_lock_acquire_recursive>:
 800a150:	4770      	bx	lr

0800a152 <__retarget_lock_release_recursive>:
 800a152:	4770      	bx	lr

0800a154 <memmove>:
 800a154:	4288      	cmp	r0, r1
 800a156:	b510      	push	{r4, lr}
 800a158:	eb01 0402 	add.w	r4, r1, r2
 800a15c:	d902      	bls.n	800a164 <memmove+0x10>
 800a15e:	4284      	cmp	r4, r0
 800a160:	4623      	mov	r3, r4
 800a162:	d807      	bhi.n	800a174 <memmove+0x20>
 800a164:	1e43      	subs	r3, r0, #1
 800a166:	42a1      	cmp	r1, r4
 800a168:	d008      	beq.n	800a17c <memmove+0x28>
 800a16a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a16e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a172:	e7f8      	b.n	800a166 <memmove+0x12>
 800a174:	4402      	add	r2, r0
 800a176:	4601      	mov	r1, r0
 800a178:	428a      	cmp	r2, r1
 800a17a:	d100      	bne.n	800a17e <memmove+0x2a>
 800a17c:	bd10      	pop	{r4, pc}
 800a17e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a182:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a186:	e7f7      	b.n	800a178 <memmove+0x24>

0800a188 <__malloc_lock>:
 800a188:	4801      	ldr	r0, [pc, #4]	; (800a190 <__malloc_lock+0x8>)
 800a18a:	f7ff bfe1 	b.w	800a150 <__retarget_lock_acquire_recursive>
 800a18e:	bf00      	nop
 800a190:	20000d44 	.word	0x20000d44

0800a194 <__malloc_unlock>:
 800a194:	4801      	ldr	r0, [pc, #4]	; (800a19c <__malloc_unlock+0x8>)
 800a196:	f7ff bfdc 	b.w	800a152 <__retarget_lock_release_recursive>
 800a19a:	bf00      	nop
 800a19c:	20000d44 	.word	0x20000d44

0800a1a0 <_realloc_r>:
 800a1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a4:	4680      	mov	r8, r0
 800a1a6:	4614      	mov	r4, r2
 800a1a8:	460e      	mov	r6, r1
 800a1aa:	b921      	cbnz	r1, 800a1b6 <_realloc_r+0x16>
 800a1ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	4611      	mov	r1, r2
 800a1b2:	f7fe bfbd 	b.w	8009130 <_malloc_r>
 800a1b6:	b92a      	cbnz	r2, 800a1c4 <_realloc_r+0x24>
 800a1b8:	f7fe ff4e 	bl	8009058 <_free_r>
 800a1bc:	4625      	mov	r5, r4
 800a1be:	4628      	mov	r0, r5
 800a1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c4:	f000 faa0 	bl	800a708 <_malloc_usable_size_r>
 800a1c8:	4284      	cmp	r4, r0
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	d802      	bhi.n	800a1d4 <_realloc_r+0x34>
 800a1ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a1d2:	d812      	bhi.n	800a1fa <_realloc_r+0x5a>
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f7fe ffaa 	bl	8009130 <_malloc_r>
 800a1dc:	4605      	mov	r5, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d0ed      	beq.n	800a1be <_realloc_r+0x1e>
 800a1e2:	42bc      	cmp	r4, r7
 800a1e4:	4622      	mov	r2, r4
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	bf28      	it	cs
 800a1ea:	463a      	movcs	r2, r7
 800a1ec:	f7fe fa4e 	bl	800868c <memcpy>
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4640      	mov	r0, r8
 800a1f4:	f7fe ff30 	bl	8009058 <_free_r>
 800a1f8:	e7e1      	b.n	800a1be <_realloc_r+0x1e>
 800a1fa:	4635      	mov	r5, r6
 800a1fc:	e7df      	b.n	800a1be <_realloc_r+0x1e>

0800a1fe <__sfputc_r>:
 800a1fe:	6893      	ldr	r3, [r2, #8]
 800a200:	3b01      	subs	r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	b410      	push	{r4}
 800a206:	6093      	str	r3, [r2, #8]
 800a208:	da08      	bge.n	800a21c <__sfputc_r+0x1e>
 800a20a:	6994      	ldr	r4, [r2, #24]
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	db01      	blt.n	800a214 <__sfputc_r+0x16>
 800a210:	290a      	cmp	r1, #10
 800a212:	d103      	bne.n	800a21c <__sfputc_r+0x1e>
 800a214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a218:	f000 b94a 	b.w	800a4b0 <__swbuf_r>
 800a21c:	6813      	ldr	r3, [r2, #0]
 800a21e:	1c58      	adds	r0, r3, #1
 800a220:	6010      	str	r0, [r2, #0]
 800a222:	7019      	strb	r1, [r3, #0]
 800a224:	4608      	mov	r0, r1
 800a226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <__sfputs_r>:
 800a22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22e:	4606      	mov	r6, r0
 800a230:	460f      	mov	r7, r1
 800a232:	4614      	mov	r4, r2
 800a234:	18d5      	adds	r5, r2, r3
 800a236:	42ac      	cmp	r4, r5
 800a238:	d101      	bne.n	800a23e <__sfputs_r+0x12>
 800a23a:	2000      	movs	r0, #0
 800a23c:	e007      	b.n	800a24e <__sfputs_r+0x22>
 800a23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a242:	463a      	mov	r2, r7
 800a244:	4630      	mov	r0, r6
 800a246:	f7ff ffda 	bl	800a1fe <__sfputc_r>
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	d1f3      	bne.n	800a236 <__sfputs_r+0xa>
 800a24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a250 <_vfiprintf_r>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	460d      	mov	r5, r1
 800a256:	b09d      	sub	sp, #116	; 0x74
 800a258:	4614      	mov	r4, r2
 800a25a:	4698      	mov	r8, r3
 800a25c:	4606      	mov	r6, r0
 800a25e:	b118      	cbz	r0, 800a268 <_vfiprintf_r+0x18>
 800a260:	6983      	ldr	r3, [r0, #24]
 800a262:	b90b      	cbnz	r3, 800a268 <_vfiprintf_r+0x18>
 800a264:	f7ff fec4 	bl	8009ff0 <__sinit>
 800a268:	4b89      	ldr	r3, [pc, #548]	; (800a490 <_vfiprintf_r+0x240>)
 800a26a:	429d      	cmp	r5, r3
 800a26c:	d11b      	bne.n	800a2a6 <_vfiprintf_r+0x56>
 800a26e:	6875      	ldr	r5, [r6, #4]
 800a270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a272:	07d9      	lsls	r1, r3, #31
 800a274:	d405      	bmi.n	800a282 <_vfiprintf_r+0x32>
 800a276:	89ab      	ldrh	r3, [r5, #12]
 800a278:	059a      	lsls	r2, r3, #22
 800a27a:	d402      	bmi.n	800a282 <_vfiprintf_r+0x32>
 800a27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a27e:	f7ff ff67 	bl	800a150 <__retarget_lock_acquire_recursive>
 800a282:	89ab      	ldrh	r3, [r5, #12]
 800a284:	071b      	lsls	r3, r3, #28
 800a286:	d501      	bpl.n	800a28c <_vfiprintf_r+0x3c>
 800a288:	692b      	ldr	r3, [r5, #16]
 800a28a:	b9eb      	cbnz	r3, 800a2c8 <_vfiprintf_r+0x78>
 800a28c:	4629      	mov	r1, r5
 800a28e:	4630      	mov	r0, r6
 800a290:	f000 f960 	bl	800a554 <__swsetup_r>
 800a294:	b1c0      	cbz	r0, 800a2c8 <_vfiprintf_r+0x78>
 800a296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a298:	07dc      	lsls	r4, r3, #31
 800a29a:	d50e      	bpl.n	800a2ba <_vfiprintf_r+0x6a>
 800a29c:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a0:	b01d      	add	sp, #116	; 0x74
 800a2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a6:	4b7b      	ldr	r3, [pc, #492]	; (800a494 <_vfiprintf_r+0x244>)
 800a2a8:	429d      	cmp	r5, r3
 800a2aa:	d101      	bne.n	800a2b0 <_vfiprintf_r+0x60>
 800a2ac:	68b5      	ldr	r5, [r6, #8]
 800a2ae:	e7df      	b.n	800a270 <_vfiprintf_r+0x20>
 800a2b0:	4b79      	ldr	r3, [pc, #484]	; (800a498 <_vfiprintf_r+0x248>)
 800a2b2:	429d      	cmp	r5, r3
 800a2b4:	bf08      	it	eq
 800a2b6:	68f5      	ldreq	r5, [r6, #12]
 800a2b8:	e7da      	b.n	800a270 <_vfiprintf_r+0x20>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	0598      	lsls	r0, r3, #22
 800a2be:	d4ed      	bmi.n	800a29c <_vfiprintf_r+0x4c>
 800a2c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2c2:	f7ff ff46 	bl	800a152 <__retarget_lock_release_recursive>
 800a2c6:	e7e9      	b.n	800a29c <_vfiprintf_r+0x4c>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a2cc:	2320      	movs	r3, #32
 800a2ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d6:	2330      	movs	r3, #48	; 0x30
 800a2d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a49c <_vfiprintf_r+0x24c>
 800a2dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2e0:	f04f 0901 	mov.w	r9, #1
 800a2e4:	4623      	mov	r3, r4
 800a2e6:	469a      	mov	sl, r3
 800a2e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ec:	b10a      	cbz	r2, 800a2f2 <_vfiprintf_r+0xa2>
 800a2ee:	2a25      	cmp	r2, #37	; 0x25
 800a2f0:	d1f9      	bne.n	800a2e6 <_vfiprintf_r+0x96>
 800a2f2:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f6:	d00b      	beq.n	800a310 <_vfiprintf_r+0xc0>
 800a2f8:	465b      	mov	r3, fp
 800a2fa:	4622      	mov	r2, r4
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	4630      	mov	r0, r6
 800a300:	f7ff ff94 	bl	800a22c <__sfputs_r>
 800a304:	3001      	adds	r0, #1
 800a306:	f000 80aa 	beq.w	800a45e <_vfiprintf_r+0x20e>
 800a30a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a30c:	445a      	add	r2, fp
 800a30e:	9209      	str	r2, [sp, #36]	; 0x24
 800a310:	f89a 3000 	ldrb.w	r3, [sl]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 80a2 	beq.w	800a45e <_vfiprintf_r+0x20e>
 800a31a:	2300      	movs	r3, #0
 800a31c:	f04f 32ff 	mov.w	r2, #4294967295
 800a320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a324:	f10a 0a01 	add.w	sl, sl, #1
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	9307      	str	r3, [sp, #28]
 800a32c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a330:	931a      	str	r3, [sp, #104]	; 0x68
 800a332:	4654      	mov	r4, sl
 800a334:	2205      	movs	r2, #5
 800a336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33a:	4858      	ldr	r0, [pc, #352]	; (800a49c <_vfiprintf_r+0x24c>)
 800a33c:	f7f5 ff68 	bl	8000210 <memchr>
 800a340:	9a04      	ldr	r2, [sp, #16]
 800a342:	b9d8      	cbnz	r0, 800a37c <_vfiprintf_r+0x12c>
 800a344:	06d1      	lsls	r1, r2, #27
 800a346:	bf44      	itt	mi
 800a348:	2320      	movmi	r3, #32
 800a34a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a34e:	0713      	lsls	r3, r2, #28
 800a350:	bf44      	itt	mi
 800a352:	232b      	movmi	r3, #43	; 0x2b
 800a354:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a358:	f89a 3000 	ldrb.w	r3, [sl]
 800a35c:	2b2a      	cmp	r3, #42	; 0x2a
 800a35e:	d015      	beq.n	800a38c <_vfiprintf_r+0x13c>
 800a360:	9a07      	ldr	r2, [sp, #28]
 800a362:	4654      	mov	r4, sl
 800a364:	2000      	movs	r0, #0
 800a366:	f04f 0c0a 	mov.w	ip, #10
 800a36a:	4621      	mov	r1, r4
 800a36c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a370:	3b30      	subs	r3, #48	; 0x30
 800a372:	2b09      	cmp	r3, #9
 800a374:	d94e      	bls.n	800a414 <_vfiprintf_r+0x1c4>
 800a376:	b1b0      	cbz	r0, 800a3a6 <_vfiprintf_r+0x156>
 800a378:	9207      	str	r2, [sp, #28]
 800a37a:	e014      	b.n	800a3a6 <_vfiprintf_r+0x156>
 800a37c:	eba0 0308 	sub.w	r3, r0, r8
 800a380:	fa09 f303 	lsl.w	r3, r9, r3
 800a384:	4313      	orrs	r3, r2
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	46a2      	mov	sl, r4
 800a38a:	e7d2      	b.n	800a332 <_vfiprintf_r+0xe2>
 800a38c:	9b03      	ldr	r3, [sp, #12]
 800a38e:	1d19      	adds	r1, r3, #4
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	9103      	str	r1, [sp, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	bfbb      	ittet	lt
 800a398:	425b      	neglt	r3, r3
 800a39a:	f042 0202 	orrlt.w	r2, r2, #2
 800a39e:	9307      	strge	r3, [sp, #28]
 800a3a0:	9307      	strlt	r3, [sp, #28]
 800a3a2:	bfb8      	it	lt
 800a3a4:	9204      	strlt	r2, [sp, #16]
 800a3a6:	7823      	ldrb	r3, [r4, #0]
 800a3a8:	2b2e      	cmp	r3, #46	; 0x2e
 800a3aa:	d10c      	bne.n	800a3c6 <_vfiprintf_r+0x176>
 800a3ac:	7863      	ldrb	r3, [r4, #1]
 800a3ae:	2b2a      	cmp	r3, #42	; 0x2a
 800a3b0:	d135      	bne.n	800a41e <_vfiprintf_r+0x1ce>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	1d1a      	adds	r2, r3, #4
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	9203      	str	r2, [sp, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	bfb8      	it	lt
 800a3be:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3c2:	3402      	adds	r4, #2
 800a3c4:	9305      	str	r3, [sp, #20]
 800a3c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4ac <_vfiprintf_r+0x25c>
 800a3ca:	7821      	ldrb	r1, [r4, #0]
 800a3cc:	2203      	movs	r2, #3
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	f7f5 ff1e 	bl	8000210 <memchr>
 800a3d4:	b140      	cbz	r0, 800a3e8 <_vfiprintf_r+0x198>
 800a3d6:	2340      	movs	r3, #64	; 0x40
 800a3d8:	eba0 000a 	sub.w	r0, r0, sl
 800a3dc:	fa03 f000 	lsl.w	r0, r3, r0
 800a3e0:	9b04      	ldr	r3, [sp, #16]
 800a3e2:	4303      	orrs	r3, r0
 800a3e4:	3401      	adds	r4, #1
 800a3e6:	9304      	str	r3, [sp, #16]
 800a3e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ec:	482c      	ldr	r0, [pc, #176]	; (800a4a0 <_vfiprintf_r+0x250>)
 800a3ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3f2:	2206      	movs	r2, #6
 800a3f4:	f7f5 ff0c 	bl	8000210 <memchr>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d03f      	beq.n	800a47c <_vfiprintf_r+0x22c>
 800a3fc:	4b29      	ldr	r3, [pc, #164]	; (800a4a4 <_vfiprintf_r+0x254>)
 800a3fe:	bb1b      	cbnz	r3, 800a448 <_vfiprintf_r+0x1f8>
 800a400:	9b03      	ldr	r3, [sp, #12]
 800a402:	3307      	adds	r3, #7
 800a404:	f023 0307 	bic.w	r3, r3, #7
 800a408:	3308      	adds	r3, #8
 800a40a:	9303      	str	r3, [sp, #12]
 800a40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40e:	443b      	add	r3, r7
 800a410:	9309      	str	r3, [sp, #36]	; 0x24
 800a412:	e767      	b.n	800a2e4 <_vfiprintf_r+0x94>
 800a414:	fb0c 3202 	mla	r2, ip, r2, r3
 800a418:	460c      	mov	r4, r1
 800a41a:	2001      	movs	r0, #1
 800a41c:	e7a5      	b.n	800a36a <_vfiprintf_r+0x11a>
 800a41e:	2300      	movs	r3, #0
 800a420:	3401      	adds	r4, #1
 800a422:	9305      	str	r3, [sp, #20]
 800a424:	4619      	mov	r1, r3
 800a426:	f04f 0c0a 	mov.w	ip, #10
 800a42a:	4620      	mov	r0, r4
 800a42c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a430:	3a30      	subs	r2, #48	; 0x30
 800a432:	2a09      	cmp	r2, #9
 800a434:	d903      	bls.n	800a43e <_vfiprintf_r+0x1ee>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0c5      	beq.n	800a3c6 <_vfiprintf_r+0x176>
 800a43a:	9105      	str	r1, [sp, #20]
 800a43c:	e7c3      	b.n	800a3c6 <_vfiprintf_r+0x176>
 800a43e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a442:	4604      	mov	r4, r0
 800a444:	2301      	movs	r3, #1
 800a446:	e7f0      	b.n	800a42a <_vfiprintf_r+0x1da>
 800a448:	ab03      	add	r3, sp, #12
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	462a      	mov	r2, r5
 800a44e:	4b16      	ldr	r3, [pc, #88]	; (800a4a8 <_vfiprintf_r+0x258>)
 800a450:	a904      	add	r1, sp, #16
 800a452:	4630      	mov	r0, r6
 800a454:	f7fb f9be 	bl	80057d4 <_printf_float>
 800a458:	4607      	mov	r7, r0
 800a45a:	1c78      	adds	r0, r7, #1
 800a45c:	d1d6      	bne.n	800a40c <_vfiprintf_r+0x1bc>
 800a45e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a460:	07d9      	lsls	r1, r3, #31
 800a462:	d405      	bmi.n	800a470 <_vfiprintf_r+0x220>
 800a464:	89ab      	ldrh	r3, [r5, #12]
 800a466:	059a      	lsls	r2, r3, #22
 800a468:	d402      	bmi.n	800a470 <_vfiprintf_r+0x220>
 800a46a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a46c:	f7ff fe71 	bl	800a152 <__retarget_lock_release_recursive>
 800a470:	89ab      	ldrh	r3, [r5, #12]
 800a472:	065b      	lsls	r3, r3, #25
 800a474:	f53f af12 	bmi.w	800a29c <_vfiprintf_r+0x4c>
 800a478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a47a:	e711      	b.n	800a2a0 <_vfiprintf_r+0x50>
 800a47c:	ab03      	add	r3, sp, #12
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	462a      	mov	r2, r5
 800a482:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <_vfiprintf_r+0x258>)
 800a484:	a904      	add	r1, sp, #16
 800a486:	4630      	mov	r0, r6
 800a488:	f7fb fc48 	bl	8005d1c <_printf_i>
 800a48c:	e7e4      	b.n	800a458 <_vfiprintf_r+0x208>
 800a48e:	bf00      	nop
 800a490:	0800ca34 	.word	0x0800ca34
 800a494:	0800ca54 	.word	0x0800ca54
 800a498:	0800ca14 	.word	0x0800ca14
 800a49c:	0800c9ac 	.word	0x0800c9ac
 800a4a0:	0800c9b6 	.word	0x0800c9b6
 800a4a4:	080057d5 	.word	0x080057d5
 800a4a8:	0800a22d 	.word	0x0800a22d
 800a4ac:	0800c9b2 	.word	0x0800c9b2

0800a4b0 <__swbuf_r>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	460e      	mov	r6, r1
 800a4b4:	4614      	mov	r4, r2
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	b118      	cbz	r0, 800a4c2 <__swbuf_r+0x12>
 800a4ba:	6983      	ldr	r3, [r0, #24]
 800a4bc:	b90b      	cbnz	r3, 800a4c2 <__swbuf_r+0x12>
 800a4be:	f7ff fd97 	bl	8009ff0 <__sinit>
 800a4c2:	4b21      	ldr	r3, [pc, #132]	; (800a548 <__swbuf_r+0x98>)
 800a4c4:	429c      	cmp	r4, r3
 800a4c6:	d12b      	bne.n	800a520 <__swbuf_r+0x70>
 800a4c8:	686c      	ldr	r4, [r5, #4]
 800a4ca:	69a3      	ldr	r3, [r4, #24]
 800a4cc:	60a3      	str	r3, [r4, #8]
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	071a      	lsls	r2, r3, #28
 800a4d2:	d52f      	bpl.n	800a534 <__swbuf_r+0x84>
 800a4d4:	6923      	ldr	r3, [r4, #16]
 800a4d6:	b36b      	cbz	r3, 800a534 <__swbuf_r+0x84>
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	6820      	ldr	r0, [r4, #0]
 800a4dc:	1ac0      	subs	r0, r0, r3
 800a4de:	6963      	ldr	r3, [r4, #20]
 800a4e0:	b2f6      	uxtb	r6, r6
 800a4e2:	4283      	cmp	r3, r0
 800a4e4:	4637      	mov	r7, r6
 800a4e6:	dc04      	bgt.n	800a4f2 <__swbuf_r+0x42>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f7ff fcec 	bl	8009ec8 <_fflush_r>
 800a4f0:	bb30      	cbnz	r0, 800a540 <__swbuf_r+0x90>
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	60a3      	str	r3, [r4, #8]
 800a4f8:	6823      	ldr	r3, [r4, #0]
 800a4fa:	1c5a      	adds	r2, r3, #1
 800a4fc:	6022      	str	r2, [r4, #0]
 800a4fe:	701e      	strb	r6, [r3, #0]
 800a500:	6963      	ldr	r3, [r4, #20]
 800a502:	3001      	adds	r0, #1
 800a504:	4283      	cmp	r3, r0
 800a506:	d004      	beq.n	800a512 <__swbuf_r+0x62>
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	07db      	lsls	r3, r3, #31
 800a50c:	d506      	bpl.n	800a51c <__swbuf_r+0x6c>
 800a50e:	2e0a      	cmp	r6, #10
 800a510:	d104      	bne.n	800a51c <__swbuf_r+0x6c>
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f7ff fcd7 	bl	8009ec8 <_fflush_r>
 800a51a:	b988      	cbnz	r0, 800a540 <__swbuf_r+0x90>
 800a51c:	4638      	mov	r0, r7
 800a51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a520:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <__swbuf_r+0x9c>)
 800a522:	429c      	cmp	r4, r3
 800a524:	d101      	bne.n	800a52a <__swbuf_r+0x7a>
 800a526:	68ac      	ldr	r4, [r5, #8]
 800a528:	e7cf      	b.n	800a4ca <__swbuf_r+0x1a>
 800a52a:	4b09      	ldr	r3, [pc, #36]	; (800a550 <__swbuf_r+0xa0>)
 800a52c:	429c      	cmp	r4, r3
 800a52e:	bf08      	it	eq
 800a530:	68ec      	ldreq	r4, [r5, #12]
 800a532:	e7ca      	b.n	800a4ca <__swbuf_r+0x1a>
 800a534:	4621      	mov	r1, r4
 800a536:	4628      	mov	r0, r5
 800a538:	f000 f80c 	bl	800a554 <__swsetup_r>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	d0cb      	beq.n	800a4d8 <__swbuf_r+0x28>
 800a540:	f04f 37ff 	mov.w	r7, #4294967295
 800a544:	e7ea      	b.n	800a51c <__swbuf_r+0x6c>
 800a546:	bf00      	nop
 800a548:	0800ca34 	.word	0x0800ca34
 800a54c:	0800ca54 	.word	0x0800ca54
 800a550:	0800ca14 	.word	0x0800ca14

0800a554 <__swsetup_r>:
 800a554:	4b32      	ldr	r3, [pc, #200]	; (800a620 <__swsetup_r+0xcc>)
 800a556:	b570      	push	{r4, r5, r6, lr}
 800a558:	681d      	ldr	r5, [r3, #0]
 800a55a:	4606      	mov	r6, r0
 800a55c:	460c      	mov	r4, r1
 800a55e:	b125      	cbz	r5, 800a56a <__swsetup_r+0x16>
 800a560:	69ab      	ldr	r3, [r5, #24]
 800a562:	b913      	cbnz	r3, 800a56a <__swsetup_r+0x16>
 800a564:	4628      	mov	r0, r5
 800a566:	f7ff fd43 	bl	8009ff0 <__sinit>
 800a56a:	4b2e      	ldr	r3, [pc, #184]	; (800a624 <__swsetup_r+0xd0>)
 800a56c:	429c      	cmp	r4, r3
 800a56e:	d10f      	bne.n	800a590 <__swsetup_r+0x3c>
 800a570:	686c      	ldr	r4, [r5, #4]
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a578:	0719      	lsls	r1, r3, #28
 800a57a:	d42c      	bmi.n	800a5d6 <__swsetup_r+0x82>
 800a57c:	06dd      	lsls	r5, r3, #27
 800a57e:	d411      	bmi.n	800a5a4 <__swsetup_r+0x50>
 800a580:	2309      	movs	r3, #9
 800a582:	6033      	str	r3, [r6, #0]
 800a584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	f04f 30ff 	mov.w	r0, #4294967295
 800a58e:	e03e      	b.n	800a60e <__swsetup_r+0xba>
 800a590:	4b25      	ldr	r3, [pc, #148]	; (800a628 <__swsetup_r+0xd4>)
 800a592:	429c      	cmp	r4, r3
 800a594:	d101      	bne.n	800a59a <__swsetup_r+0x46>
 800a596:	68ac      	ldr	r4, [r5, #8]
 800a598:	e7eb      	b.n	800a572 <__swsetup_r+0x1e>
 800a59a:	4b24      	ldr	r3, [pc, #144]	; (800a62c <__swsetup_r+0xd8>)
 800a59c:	429c      	cmp	r4, r3
 800a59e:	bf08      	it	eq
 800a5a0:	68ec      	ldreq	r4, [r5, #12]
 800a5a2:	e7e6      	b.n	800a572 <__swsetup_r+0x1e>
 800a5a4:	0758      	lsls	r0, r3, #29
 800a5a6:	d512      	bpl.n	800a5ce <__swsetup_r+0x7a>
 800a5a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5aa:	b141      	cbz	r1, 800a5be <__swsetup_r+0x6a>
 800a5ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5b0:	4299      	cmp	r1, r3
 800a5b2:	d002      	beq.n	800a5ba <__swsetup_r+0x66>
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	f7fe fd4f 	bl	8009058 <_free_r>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5c4:	81a3      	strh	r3, [r4, #12]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	6063      	str	r3, [r4, #4]
 800a5ca:	6923      	ldr	r3, [r4, #16]
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	f043 0308 	orr.w	r3, r3, #8
 800a5d4:	81a3      	strh	r3, [r4, #12]
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	b94b      	cbnz	r3, 800a5ee <__swsetup_r+0x9a>
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5e4:	d003      	beq.n	800a5ee <__swsetup_r+0x9a>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f000 f84d 	bl	800a688 <__smakebuf_r>
 800a5ee:	89a0      	ldrh	r0, [r4, #12]
 800a5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5f4:	f010 0301 	ands.w	r3, r0, #1
 800a5f8:	d00a      	beq.n	800a610 <__swsetup_r+0xbc>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60a3      	str	r3, [r4, #8]
 800a5fe:	6963      	ldr	r3, [r4, #20]
 800a600:	425b      	negs	r3, r3
 800a602:	61a3      	str	r3, [r4, #24]
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	b943      	cbnz	r3, 800a61a <__swsetup_r+0xc6>
 800a608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a60c:	d1ba      	bne.n	800a584 <__swsetup_r+0x30>
 800a60e:	bd70      	pop	{r4, r5, r6, pc}
 800a610:	0781      	lsls	r1, r0, #30
 800a612:	bf58      	it	pl
 800a614:	6963      	ldrpl	r3, [r4, #20]
 800a616:	60a3      	str	r3, [r4, #8]
 800a618:	e7f4      	b.n	800a604 <__swsetup_r+0xb0>
 800a61a:	2000      	movs	r0, #0
 800a61c:	e7f7      	b.n	800a60e <__swsetup_r+0xba>
 800a61e:	bf00      	nop
 800a620:	20000018 	.word	0x20000018
 800a624:	0800ca34 	.word	0x0800ca34
 800a628:	0800ca54 	.word	0x0800ca54
 800a62c:	0800ca14 	.word	0x0800ca14

0800a630 <abort>:
 800a630:	b508      	push	{r3, lr}
 800a632:	2006      	movs	r0, #6
 800a634:	f000 f898 	bl	800a768 <raise>
 800a638:	2001      	movs	r0, #1
 800a63a:	f7f8 fade 	bl	8002bfa <_exit>

0800a63e <__swhatbuf_r>:
 800a63e:	b570      	push	{r4, r5, r6, lr}
 800a640:	460e      	mov	r6, r1
 800a642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a646:	2900      	cmp	r1, #0
 800a648:	b096      	sub	sp, #88	; 0x58
 800a64a:	4614      	mov	r4, r2
 800a64c:	461d      	mov	r5, r3
 800a64e:	da08      	bge.n	800a662 <__swhatbuf_r+0x24>
 800a650:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	602a      	str	r2, [r5, #0]
 800a658:	061a      	lsls	r2, r3, #24
 800a65a:	d410      	bmi.n	800a67e <__swhatbuf_r+0x40>
 800a65c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a660:	e00e      	b.n	800a680 <__swhatbuf_r+0x42>
 800a662:	466a      	mov	r2, sp
 800a664:	f000 f89c 	bl	800a7a0 <_fstat_r>
 800a668:	2800      	cmp	r0, #0
 800a66a:	dbf1      	blt.n	800a650 <__swhatbuf_r+0x12>
 800a66c:	9a01      	ldr	r2, [sp, #4]
 800a66e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a672:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a676:	425a      	negs	r2, r3
 800a678:	415a      	adcs	r2, r3
 800a67a:	602a      	str	r2, [r5, #0]
 800a67c:	e7ee      	b.n	800a65c <__swhatbuf_r+0x1e>
 800a67e:	2340      	movs	r3, #64	; 0x40
 800a680:	2000      	movs	r0, #0
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	b016      	add	sp, #88	; 0x58
 800a686:	bd70      	pop	{r4, r5, r6, pc}

0800a688 <__smakebuf_r>:
 800a688:	898b      	ldrh	r3, [r1, #12]
 800a68a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a68c:	079d      	lsls	r5, r3, #30
 800a68e:	4606      	mov	r6, r0
 800a690:	460c      	mov	r4, r1
 800a692:	d507      	bpl.n	800a6a4 <__smakebuf_r+0x1c>
 800a694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	2301      	movs	r3, #1
 800a69e:	6163      	str	r3, [r4, #20]
 800a6a0:	b002      	add	sp, #8
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}
 800a6a4:	ab01      	add	r3, sp, #4
 800a6a6:	466a      	mov	r2, sp
 800a6a8:	f7ff ffc9 	bl	800a63e <__swhatbuf_r>
 800a6ac:	9900      	ldr	r1, [sp, #0]
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7fe fd3d 	bl	8009130 <_malloc_r>
 800a6b6:	b948      	cbnz	r0, 800a6cc <__smakebuf_r+0x44>
 800a6b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6bc:	059a      	lsls	r2, r3, #22
 800a6be:	d4ef      	bmi.n	800a6a0 <__smakebuf_r+0x18>
 800a6c0:	f023 0303 	bic.w	r3, r3, #3
 800a6c4:	f043 0302 	orr.w	r3, r3, #2
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	e7e3      	b.n	800a694 <__smakebuf_r+0xc>
 800a6cc:	4b0d      	ldr	r3, [pc, #52]	; (800a704 <__smakebuf_r+0x7c>)
 800a6ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	6020      	str	r0, [r4, #0]
 800a6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d8:	81a3      	strh	r3, [r4, #12]
 800a6da:	9b00      	ldr	r3, [sp, #0]
 800a6dc:	6163      	str	r3, [r4, #20]
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	6120      	str	r0, [r4, #16]
 800a6e2:	b15b      	cbz	r3, 800a6fc <__smakebuf_r+0x74>
 800a6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f000 f86b 	bl	800a7c4 <_isatty_r>
 800a6ee:	b128      	cbz	r0, 800a6fc <__smakebuf_r+0x74>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	f043 0301 	orr.w	r3, r3, #1
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	89a0      	ldrh	r0, [r4, #12]
 800a6fe:	4305      	orrs	r5, r0
 800a700:	81a5      	strh	r5, [r4, #12]
 800a702:	e7cd      	b.n	800a6a0 <__smakebuf_r+0x18>
 800a704:	08009f89 	.word	0x08009f89

0800a708 <_malloc_usable_size_r>:
 800a708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a70c:	1f18      	subs	r0, r3, #4
 800a70e:	2b00      	cmp	r3, #0
 800a710:	bfbc      	itt	lt
 800a712:	580b      	ldrlt	r3, [r1, r0]
 800a714:	18c0      	addlt	r0, r0, r3
 800a716:	4770      	bx	lr

0800a718 <_raise_r>:
 800a718:	291f      	cmp	r1, #31
 800a71a:	b538      	push	{r3, r4, r5, lr}
 800a71c:	4604      	mov	r4, r0
 800a71e:	460d      	mov	r5, r1
 800a720:	d904      	bls.n	800a72c <_raise_r+0x14>
 800a722:	2316      	movs	r3, #22
 800a724:	6003      	str	r3, [r0, #0]
 800a726:	f04f 30ff 	mov.w	r0, #4294967295
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a72e:	b112      	cbz	r2, 800a736 <_raise_r+0x1e>
 800a730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a734:	b94b      	cbnz	r3, 800a74a <_raise_r+0x32>
 800a736:	4620      	mov	r0, r4
 800a738:	f000 f830 	bl	800a79c <_getpid_r>
 800a73c:	462a      	mov	r2, r5
 800a73e:	4601      	mov	r1, r0
 800a740:	4620      	mov	r0, r4
 800a742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a746:	f000 b817 	b.w	800a778 <_kill_r>
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d00a      	beq.n	800a764 <_raise_r+0x4c>
 800a74e:	1c59      	adds	r1, r3, #1
 800a750:	d103      	bne.n	800a75a <_raise_r+0x42>
 800a752:	2316      	movs	r3, #22
 800a754:	6003      	str	r3, [r0, #0]
 800a756:	2001      	movs	r0, #1
 800a758:	e7e7      	b.n	800a72a <_raise_r+0x12>
 800a75a:	2400      	movs	r4, #0
 800a75c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a760:	4628      	mov	r0, r5
 800a762:	4798      	blx	r3
 800a764:	2000      	movs	r0, #0
 800a766:	e7e0      	b.n	800a72a <_raise_r+0x12>

0800a768 <raise>:
 800a768:	4b02      	ldr	r3, [pc, #8]	; (800a774 <raise+0xc>)
 800a76a:	4601      	mov	r1, r0
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	f7ff bfd3 	b.w	800a718 <_raise_r>
 800a772:	bf00      	nop
 800a774:	20000018 	.word	0x20000018

0800a778 <_kill_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	; (800a798 <_kill_r+0x20>)
 800a77c:	2300      	movs	r3, #0
 800a77e:	4604      	mov	r4, r0
 800a780:	4608      	mov	r0, r1
 800a782:	4611      	mov	r1, r2
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	f7f8 fa28 	bl	8002bda <_kill>
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	d102      	bne.n	800a794 <_kill_r+0x1c>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	b103      	cbz	r3, 800a794 <_kill_r+0x1c>
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	bd38      	pop	{r3, r4, r5, pc}
 800a796:	bf00      	nop
 800a798:	20000d40 	.word	0x20000d40

0800a79c <_getpid_r>:
 800a79c:	f7f8 ba15 	b.w	8002bca <_getpid>

0800a7a0 <_fstat_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	; (800a7c0 <_fstat_r+0x20>)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	4611      	mov	r1, r2
 800a7ac:	602b      	str	r3, [r5, #0]
 800a7ae:	f7f8 fa73 	bl	8002c98 <_fstat>
 800a7b2:	1c43      	adds	r3, r0, #1
 800a7b4:	d102      	bne.n	800a7bc <_fstat_r+0x1c>
 800a7b6:	682b      	ldr	r3, [r5, #0]
 800a7b8:	b103      	cbz	r3, 800a7bc <_fstat_r+0x1c>
 800a7ba:	6023      	str	r3, [r4, #0]
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000d40 	.word	0x20000d40

0800a7c4 <_isatty_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d06      	ldr	r5, [pc, #24]	; (800a7e0 <_isatty_r+0x1c>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	602b      	str	r3, [r5, #0]
 800a7d0:	f7f8 fa72 	bl	8002cb8 <_isatty>
 800a7d4:	1c43      	adds	r3, r0, #1
 800a7d6:	d102      	bne.n	800a7de <_isatty_r+0x1a>
 800a7d8:	682b      	ldr	r3, [r5, #0]
 800a7da:	b103      	cbz	r3, 800a7de <_isatty_r+0x1a>
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	bd38      	pop	{r3, r4, r5, pc}
 800a7e0:	20000d40 	.word	0x20000d40
 800a7e4:	00000000 	.word	0x00000000

0800a7e8 <cos>:
 800a7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ea:	ec53 2b10 	vmov	r2, r3, d0
 800a7ee:	4826      	ldr	r0, [pc, #152]	; (800a888 <cos+0xa0>)
 800a7f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7f4:	4281      	cmp	r1, r0
 800a7f6:	dc06      	bgt.n	800a806 <cos+0x1e>
 800a7f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a880 <cos+0x98>
 800a7fc:	b005      	add	sp, #20
 800a7fe:	f85d eb04 	ldr.w	lr, [sp], #4
 800a802:	f000 bd45 	b.w	800b290 <__kernel_cos>
 800a806:	4821      	ldr	r0, [pc, #132]	; (800a88c <cos+0xa4>)
 800a808:	4281      	cmp	r1, r0
 800a80a:	dd09      	ble.n	800a820 <cos+0x38>
 800a80c:	ee10 0a10 	vmov	r0, s0
 800a810:	4619      	mov	r1, r3
 800a812:	f7f5 fd51 	bl	80002b8 <__aeabi_dsub>
 800a816:	ec41 0b10 	vmov	d0, r0, r1
 800a81a:	b005      	add	sp, #20
 800a81c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a820:	4668      	mov	r0, sp
 800a822:	f000 fb29 	bl	800ae78 <__ieee754_rem_pio2>
 800a826:	f000 0003 	and.w	r0, r0, #3
 800a82a:	2801      	cmp	r0, #1
 800a82c:	d00b      	beq.n	800a846 <cos+0x5e>
 800a82e:	2802      	cmp	r0, #2
 800a830:	d016      	beq.n	800a860 <cos+0x78>
 800a832:	b9e0      	cbnz	r0, 800a86e <cos+0x86>
 800a834:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a838:	ed9d 0b00 	vldr	d0, [sp]
 800a83c:	f000 fd28 	bl	800b290 <__kernel_cos>
 800a840:	ec51 0b10 	vmov	r0, r1, d0
 800a844:	e7e7      	b.n	800a816 <cos+0x2e>
 800a846:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a84a:	ed9d 0b00 	vldr	d0, [sp]
 800a84e:	f001 f937 	bl	800bac0 <__kernel_sin>
 800a852:	ec53 2b10 	vmov	r2, r3, d0
 800a856:	ee10 0a10 	vmov	r0, s0
 800a85a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a85e:	e7da      	b.n	800a816 <cos+0x2e>
 800a860:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a864:	ed9d 0b00 	vldr	d0, [sp]
 800a868:	f000 fd12 	bl	800b290 <__kernel_cos>
 800a86c:	e7f1      	b.n	800a852 <cos+0x6a>
 800a86e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a872:	ed9d 0b00 	vldr	d0, [sp]
 800a876:	2001      	movs	r0, #1
 800a878:	f001 f922 	bl	800bac0 <__kernel_sin>
 800a87c:	e7e0      	b.n	800a840 <cos+0x58>
 800a87e:	bf00      	nop
	...
 800a888:	3fe921fb 	.word	0x3fe921fb
 800a88c:	7fefffff 	.word	0x7fefffff

0800a890 <sin>:
 800a890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a892:	ec53 2b10 	vmov	r2, r3, d0
 800a896:	4828      	ldr	r0, [pc, #160]	; (800a938 <sin+0xa8>)
 800a898:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a89c:	4281      	cmp	r1, r0
 800a89e:	dc07      	bgt.n	800a8b0 <sin+0x20>
 800a8a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a930 <sin+0xa0>
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	b005      	add	sp, #20
 800a8a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8ac:	f001 b908 	b.w	800bac0 <__kernel_sin>
 800a8b0:	4822      	ldr	r0, [pc, #136]	; (800a93c <sin+0xac>)
 800a8b2:	4281      	cmp	r1, r0
 800a8b4:	dd09      	ble.n	800a8ca <sin+0x3a>
 800a8b6:	ee10 0a10 	vmov	r0, s0
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	f7f5 fcfc 	bl	80002b8 <__aeabi_dsub>
 800a8c0:	ec41 0b10 	vmov	d0, r0, r1
 800a8c4:	b005      	add	sp, #20
 800a8c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8ca:	4668      	mov	r0, sp
 800a8cc:	f000 fad4 	bl	800ae78 <__ieee754_rem_pio2>
 800a8d0:	f000 0003 	and.w	r0, r0, #3
 800a8d4:	2801      	cmp	r0, #1
 800a8d6:	d00c      	beq.n	800a8f2 <sin+0x62>
 800a8d8:	2802      	cmp	r0, #2
 800a8da:	d011      	beq.n	800a900 <sin+0x70>
 800a8dc:	b9f0      	cbnz	r0, 800a91c <sin+0x8c>
 800a8de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8e2:	ed9d 0b00 	vldr	d0, [sp]
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	f001 f8ea 	bl	800bac0 <__kernel_sin>
 800a8ec:	ec51 0b10 	vmov	r0, r1, d0
 800a8f0:	e7e6      	b.n	800a8c0 <sin+0x30>
 800a8f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8f6:	ed9d 0b00 	vldr	d0, [sp]
 800a8fa:	f000 fcc9 	bl	800b290 <__kernel_cos>
 800a8fe:	e7f5      	b.n	800a8ec <sin+0x5c>
 800a900:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a904:	ed9d 0b00 	vldr	d0, [sp]
 800a908:	2001      	movs	r0, #1
 800a90a:	f001 f8d9 	bl	800bac0 <__kernel_sin>
 800a90e:	ec53 2b10 	vmov	r2, r3, d0
 800a912:	ee10 0a10 	vmov	r0, s0
 800a916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a91a:	e7d1      	b.n	800a8c0 <sin+0x30>
 800a91c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a920:	ed9d 0b00 	vldr	d0, [sp]
 800a924:	f000 fcb4 	bl	800b290 <__kernel_cos>
 800a928:	e7f1      	b.n	800a90e <sin+0x7e>
 800a92a:	bf00      	nop
 800a92c:	f3af 8000 	nop.w
	...
 800a938:	3fe921fb 	.word	0x3fe921fb
 800a93c:	7fefffff 	.word	0x7fefffff

0800a940 <atan2>:
 800a940:	f000 b84a 	b.w	800a9d8 <__ieee754_atan2>
 800a944:	0000      	movs	r0, r0
	...

0800a948 <exp>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	ed2d 8b02 	vpush	{d8}
 800a94e:	ec55 4b10 	vmov	r4, r5, d0
 800a952:	f000 f90d 	bl	800ab70 <__ieee754_exp>
 800a956:	eeb0 8a40 	vmov.f32	s16, s0
 800a95a:	eef0 8a60 	vmov.f32	s17, s1
 800a95e:	ec45 4b10 	vmov	d0, r4, r5
 800a962:	f001 fb46 	bl	800bff2 <finite>
 800a966:	b168      	cbz	r0, 800a984 <exp+0x3c>
 800a968:	a317      	add	r3, pc, #92	; (adr r3, 800a9c8 <exp+0x80>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f6 f8e9 	bl	8000b48 <__aeabi_dcmpgt>
 800a976:	b160      	cbz	r0, 800a992 <exp+0x4a>
 800a978:	f7fa fe5a 	bl	8005630 <__errno>
 800a97c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800a9b8 <exp+0x70>
 800a980:	2322      	movs	r3, #34	; 0x22
 800a982:	6003      	str	r3, [r0, #0]
 800a984:	eeb0 0a48 	vmov.f32	s0, s16
 800a988:	eef0 0a68 	vmov.f32	s1, s17
 800a98c:	ecbd 8b02 	vpop	{d8}
 800a990:	bd38      	pop	{r3, r4, r5, pc}
 800a992:	a30f      	add	r3, pc, #60	; (adr r3, 800a9d0 <exp+0x88>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	4620      	mov	r0, r4
 800a99a:	4629      	mov	r1, r5
 800a99c:	f7f6 f8b6 	bl	8000b0c <__aeabi_dcmplt>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d0ef      	beq.n	800a984 <exp+0x3c>
 800a9a4:	f7fa fe44 	bl	8005630 <__errno>
 800a9a8:	2322      	movs	r3, #34	; 0x22
 800a9aa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800a9c0 <exp+0x78>
 800a9ae:	6003      	str	r3, [r0, #0]
 800a9b0:	e7e8      	b.n	800a984 <exp+0x3c>
 800a9b2:	bf00      	nop
 800a9b4:	f3af 8000 	nop.w
 800a9b8:	00000000 	.word	0x00000000
 800a9bc:	7ff00000 	.word	0x7ff00000
	...
 800a9c8:	fefa39ef 	.word	0xfefa39ef
 800a9cc:	40862e42 	.word	0x40862e42
 800a9d0:	d52d3051 	.word	0xd52d3051
 800a9d4:	c0874910 	.word	0xc0874910

0800a9d8 <__ieee754_atan2>:
 800a9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9dc:	ec57 6b11 	vmov	r6, r7, d1
 800a9e0:	4273      	negs	r3, r6
 800a9e2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ab68 <__ieee754_atan2+0x190>
 800a9e6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a9ea:	4333      	orrs	r3, r6
 800a9ec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a9f0:	4573      	cmp	r3, lr
 800a9f2:	ec51 0b10 	vmov	r0, r1, d0
 800a9f6:	ee11 8a10 	vmov	r8, s2
 800a9fa:	d80a      	bhi.n	800aa12 <__ieee754_atan2+0x3a>
 800a9fc:	4244      	negs	r4, r0
 800a9fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa02:	4304      	orrs	r4, r0
 800aa04:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800aa08:	4574      	cmp	r4, lr
 800aa0a:	ee10 9a10 	vmov	r9, s0
 800aa0e:	468c      	mov	ip, r1
 800aa10:	d907      	bls.n	800aa22 <__ieee754_atan2+0x4a>
 800aa12:	4632      	mov	r2, r6
 800aa14:	463b      	mov	r3, r7
 800aa16:	f7f5 fc51 	bl	80002bc <__adddf3>
 800aa1a:	ec41 0b10 	vmov	d0, r0, r1
 800aa1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa22:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800aa26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aa2a:	4334      	orrs	r4, r6
 800aa2c:	d103      	bne.n	800aa36 <__ieee754_atan2+0x5e>
 800aa2e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa32:	f001 b935 	b.w	800bca0 <atan>
 800aa36:	17bc      	asrs	r4, r7, #30
 800aa38:	f004 0402 	and.w	r4, r4, #2
 800aa3c:	ea53 0909 	orrs.w	r9, r3, r9
 800aa40:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800aa44:	d107      	bne.n	800aa56 <__ieee754_atan2+0x7e>
 800aa46:	2c02      	cmp	r4, #2
 800aa48:	d060      	beq.n	800ab0c <__ieee754_atan2+0x134>
 800aa4a:	2c03      	cmp	r4, #3
 800aa4c:	d1e5      	bne.n	800aa1a <__ieee754_atan2+0x42>
 800aa4e:	a142      	add	r1, pc, #264	; (adr r1, 800ab58 <__ieee754_atan2+0x180>)
 800aa50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa54:	e7e1      	b.n	800aa1a <__ieee754_atan2+0x42>
 800aa56:	ea52 0808 	orrs.w	r8, r2, r8
 800aa5a:	d106      	bne.n	800aa6a <__ieee754_atan2+0x92>
 800aa5c:	f1bc 0f00 	cmp.w	ip, #0
 800aa60:	da5f      	bge.n	800ab22 <__ieee754_atan2+0x14a>
 800aa62:	a13f      	add	r1, pc, #252	; (adr r1, 800ab60 <__ieee754_atan2+0x188>)
 800aa64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa68:	e7d7      	b.n	800aa1a <__ieee754_atan2+0x42>
 800aa6a:	4572      	cmp	r2, lr
 800aa6c:	d10f      	bne.n	800aa8e <__ieee754_atan2+0xb6>
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	f104 34ff 	add.w	r4, r4, #4294967295
 800aa74:	d107      	bne.n	800aa86 <__ieee754_atan2+0xae>
 800aa76:	2c02      	cmp	r4, #2
 800aa78:	d84c      	bhi.n	800ab14 <__ieee754_atan2+0x13c>
 800aa7a:	4b35      	ldr	r3, [pc, #212]	; (800ab50 <__ieee754_atan2+0x178>)
 800aa7c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800aa80:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aa84:	e7c9      	b.n	800aa1a <__ieee754_atan2+0x42>
 800aa86:	2c02      	cmp	r4, #2
 800aa88:	d848      	bhi.n	800ab1c <__ieee754_atan2+0x144>
 800aa8a:	4b32      	ldr	r3, [pc, #200]	; (800ab54 <__ieee754_atan2+0x17c>)
 800aa8c:	e7f6      	b.n	800aa7c <__ieee754_atan2+0xa4>
 800aa8e:	4573      	cmp	r3, lr
 800aa90:	d0e4      	beq.n	800aa5c <__ieee754_atan2+0x84>
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800aa98:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa9c:	da1e      	bge.n	800aadc <__ieee754_atan2+0x104>
 800aa9e:	2f00      	cmp	r7, #0
 800aaa0:	da01      	bge.n	800aaa6 <__ieee754_atan2+0xce>
 800aaa2:	323c      	adds	r2, #60	; 0x3c
 800aaa4:	db1e      	blt.n	800aae4 <__ieee754_atan2+0x10c>
 800aaa6:	4632      	mov	r2, r6
 800aaa8:	463b      	mov	r3, r7
 800aaaa:	f7f5 fee7 	bl	800087c <__aeabi_ddiv>
 800aaae:	ec41 0b10 	vmov	d0, r0, r1
 800aab2:	f001 fa95 	bl	800bfe0 <fabs>
 800aab6:	f001 f8f3 	bl	800bca0 <atan>
 800aaba:	ec51 0b10 	vmov	r0, r1, d0
 800aabe:	2c01      	cmp	r4, #1
 800aac0:	d013      	beq.n	800aaea <__ieee754_atan2+0x112>
 800aac2:	2c02      	cmp	r4, #2
 800aac4:	d015      	beq.n	800aaf2 <__ieee754_atan2+0x11a>
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	d0a7      	beq.n	800aa1a <__ieee754_atan2+0x42>
 800aaca:	a319      	add	r3, pc, #100	; (adr r3, 800ab30 <__ieee754_atan2+0x158>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7f5 fbf2 	bl	80002b8 <__aeabi_dsub>
 800aad4:	a318      	add	r3, pc, #96	; (adr r3, 800ab38 <__ieee754_atan2+0x160>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	e014      	b.n	800ab06 <__ieee754_atan2+0x12e>
 800aadc:	a118      	add	r1, pc, #96	; (adr r1, 800ab40 <__ieee754_atan2+0x168>)
 800aade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aae2:	e7ec      	b.n	800aabe <__ieee754_atan2+0xe6>
 800aae4:	2000      	movs	r0, #0
 800aae6:	2100      	movs	r1, #0
 800aae8:	e7e9      	b.n	800aabe <__ieee754_atan2+0xe6>
 800aaea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaee:	4619      	mov	r1, r3
 800aaf0:	e793      	b.n	800aa1a <__ieee754_atan2+0x42>
 800aaf2:	a30f      	add	r3, pc, #60	; (adr r3, 800ab30 <__ieee754_atan2+0x158>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f7f5 fbde 	bl	80002b8 <__aeabi_dsub>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	a10d      	add	r1, pc, #52	; (adr r1, 800ab38 <__ieee754_atan2+0x160>)
 800ab02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab06:	f7f5 fbd7 	bl	80002b8 <__aeabi_dsub>
 800ab0a:	e786      	b.n	800aa1a <__ieee754_atan2+0x42>
 800ab0c:	a10a      	add	r1, pc, #40	; (adr r1, 800ab38 <__ieee754_atan2+0x160>)
 800ab0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab12:	e782      	b.n	800aa1a <__ieee754_atan2+0x42>
 800ab14:	a10c      	add	r1, pc, #48	; (adr r1, 800ab48 <__ieee754_atan2+0x170>)
 800ab16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab1a:	e77e      	b.n	800aa1a <__ieee754_atan2+0x42>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	2100      	movs	r1, #0
 800ab20:	e77b      	b.n	800aa1a <__ieee754_atan2+0x42>
 800ab22:	a107      	add	r1, pc, #28	; (adr r1, 800ab40 <__ieee754_atan2+0x168>)
 800ab24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab28:	e777      	b.n	800aa1a <__ieee754_atan2+0x42>
 800ab2a:	bf00      	nop
 800ab2c:	f3af 8000 	nop.w
 800ab30:	33145c07 	.word	0x33145c07
 800ab34:	3ca1a626 	.word	0x3ca1a626
 800ab38:	54442d18 	.word	0x54442d18
 800ab3c:	400921fb 	.word	0x400921fb
 800ab40:	54442d18 	.word	0x54442d18
 800ab44:	3ff921fb 	.word	0x3ff921fb
 800ab48:	54442d18 	.word	0x54442d18
 800ab4c:	3fe921fb 	.word	0x3fe921fb
 800ab50:	0800ca78 	.word	0x0800ca78
 800ab54:	0800ca90 	.word	0x0800ca90
 800ab58:	54442d18 	.word	0x54442d18
 800ab5c:	c00921fb 	.word	0xc00921fb
 800ab60:	54442d18 	.word	0x54442d18
 800ab64:	bff921fb 	.word	0xbff921fb
 800ab68:	7ff00000 	.word	0x7ff00000
 800ab6c:	00000000 	.word	0x00000000

0800ab70 <__ieee754_exp>:
 800ab70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab74:	ec55 4b10 	vmov	r4, r5, d0
 800ab78:	49b5      	ldr	r1, [pc, #724]	; (800ae50 <__ieee754_exp+0x2e0>)
 800ab7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab7e:	428b      	cmp	r3, r1
 800ab80:	ed2d 8b04 	vpush	{d8-d9}
 800ab84:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800ab88:	d93d      	bls.n	800ac06 <__ieee754_exp+0x96>
 800ab8a:	49b2      	ldr	r1, [pc, #712]	; (800ae54 <__ieee754_exp+0x2e4>)
 800ab8c:	428b      	cmp	r3, r1
 800ab8e:	d918      	bls.n	800abc2 <__ieee754_exp+0x52>
 800ab90:	ee10 3a10 	vmov	r3, s0
 800ab94:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	d009      	beq.n	800abb0 <__ieee754_exp+0x40>
 800ab9c:	ee10 2a10 	vmov	r2, s0
 800aba0:	462b      	mov	r3, r5
 800aba2:	4620      	mov	r0, r4
 800aba4:	4629      	mov	r1, r5
 800aba6:	f7f5 fb89 	bl	80002bc <__adddf3>
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
 800abae:	e002      	b.n	800abb6 <__ieee754_exp+0x46>
 800abb0:	b10e      	cbz	r6, 800abb6 <__ieee754_exp+0x46>
 800abb2:	2400      	movs	r4, #0
 800abb4:	2500      	movs	r5, #0
 800abb6:	ecbd 8b04 	vpop	{d8-d9}
 800abba:	ec45 4b10 	vmov	d0, r4, r5
 800abbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc2:	a38d      	add	r3, pc, #564	; (adr r3, 800adf8 <__ieee754_exp+0x288>)
 800abc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc8:	ee10 0a10 	vmov	r0, s0
 800abcc:	4629      	mov	r1, r5
 800abce:	f7f5 ffbb 	bl	8000b48 <__aeabi_dcmpgt>
 800abd2:	4607      	mov	r7, r0
 800abd4:	b130      	cbz	r0, 800abe4 <__ieee754_exp+0x74>
 800abd6:	ecbd 8b04 	vpop	{d8-d9}
 800abda:	2000      	movs	r0, #0
 800abdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abe0:	f001 b853 	b.w	800bc8a <__math_oflow>
 800abe4:	a386      	add	r3, pc, #536	; (adr r3, 800ae00 <__ieee754_exp+0x290>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	4620      	mov	r0, r4
 800abec:	4629      	mov	r1, r5
 800abee:	f7f5 ff8d 	bl	8000b0c <__aeabi_dcmplt>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f000 808b 	beq.w	800ad0e <__ieee754_exp+0x19e>
 800abf8:	ecbd 8b04 	vpop	{d8-d9}
 800abfc:	4638      	mov	r0, r7
 800abfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac02:	f001 b839 	b.w	800bc78 <__math_uflow>
 800ac06:	4a94      	ldr	r2, [pc, #592]	; (800ae58 <__ieee754_exp+0x2e8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	f240 80ac 	bls.w	800ad66 <__ieee754_exp+0x1f6>
 800ac0e:	4a93      	ldr	r2, [pc, #588]	; (800ae5c <__ieee754_exp+0x2ec>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d87c      	bhi.n	800ad0e <__ieee754_exp+0x19e>
 800ac14:	4b92      	ldr	r3, [pc, #584]	; (800ae60 <__ieee754_exp+0x2f0>)
 800ac16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	ee10 0a10 	vmov	r0, s0
 800ac22:	4629      	mov	r1, r5
 800ac24:	f7f5 fb48 	bl	80002b8 <__aeabi_dsub>
 800ac28:	4b8e      	ldr	r3, [pc, #568]	; (800ae64 <__ieee754_exp+0x2f4>)
 800ac2a:	00f7      	lsls	r7, r6, #3
 800ac2c:	443b      	add	r3, r7
 800ac2e:	ed93 7b00 	vldr	d7, [r3]
 800ac32:	f1c6 0a01 	rsb	sl, r6, #1
 800ac36:	4680      	mov	r8, r0
 800ac38:	4689      	mov	r9, r1
 800ac3a:	ebaa 0a06 	sub.w	sl, sl, r6
 800ac3e:	eeb0 8a47 	vmov.f32	s16, s14
 800ac42:	eef0 8a67 	vmov.f32	s17, s15
 800ac46:	ec53 2b18 	vmov	r2, r3, d8
 800ac4a:	4640      	mov	r0, r8
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	f7f5 fb33 	bl	80002b8 <__aeabi_dsub>
 800ac52:	4604      	mov	r4, r0
 800ac54:	460d      	mov	r5, r1
 800ac56:	4622      	mov	r2, r4
 800ac58:	462b      	mov	r3, r5
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f7f5 fce3 	bl	8000628 <__aeabi_dmul>
 800ac62:	a369      	add	r3, pc, #420	; (adr r3, 800ae08 <__ieee754_exp+0x298>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	4606      	mov	r6, r0
 800ac6a:	460f      	mov	r7, r1
 800ac6c:	f7f5 fcdc 	bl	8000628 <__aeabi_dmul>
 800ac70:	a367      	add	r3, pc, #412	; (adr r3, 800ae10 <__ieee754_exp+0x2a0>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	f7f5 fb1f 	bl	80002b8 <__aeabi_dsub>
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	463b      	mov	r3, r7
 800ac7e:	f7f5 fcd3 	bl	8000628 <__aeabi_dmul>
 800ac82:	a365      	add	r3, pc, #404	; (adr r3, 800ae18 <__ieee754_exp+0x2a8>)
 800ac84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac88:	f7f5 fb18 	bl	80002bc <__adddf3>
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	f7f5 fcca 	bl	8000628 <__aeabi_dmul>
 800ac94:	a362      	add	r3, pc, #392	; (adr r3, 800ae20 <__ieee754_exp+0x2b0>)
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f7f5 fb0d 	bl	80002b8 <__aeabi_dsub>
 800ac9e:	4632      	mov	r2, r6
 800aca0:	463b      	mov	r3, r7
 800aca2:	f7f5 fcc1 	bl	8000628 <__aeabi_dmul>
 800aca6:	a360      	add	r3, pc, #384	; (adr r3, 800ae28 <__ieee754_exp+0x2b8>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f7f5 fb06 	bl	80002bc <__adddf3>
 800acb0:	4632      	mov	r2, r6
 800acb2:	463b      	mov	r3, r7
 800acb4:	f7f5 fcb8 	bl	8000628 <__aeabi_dmul>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 fafa 	bl	80002b8 <__aeabi_dsub>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4606      	mov	r6, r0
 800acca:	460f      	mov	r7, r1
 800accc:	4620      	mov	r0, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	f7f5 fcaa 	bl	8000628 <__aeabi_dmul>
 800acd4:	ec41 0b19 	vmov	d9, r0, r1
 800acd8:	f1ba 0f00 	cmp.w	sl, #0
 800acdc:	d15d      	bne.n	800ad9a <__ieee754_exp+0x22a>
 800acde:	2200      	movs	r2, #0
 800ace0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f7f5 fae6 	bl	80002b8 <__aeabi_dsub>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	ec51 0b19 	vmov	r0, r1, d9
 800acf4:	f7f5 fdc2 	bl	800087c <__aeabi_ddiv>
 800acf8:	4622      	mov	r2, r4
 800acfa:	462b      	mov	r3, r5
 800acfc:	f7f5 fadc 	bl	80002b8 <__aeabi_dsub>
 800ad00:	4602      	mov	r2, r0
 800ad02:	460b      	mov	r3, r1
 800ad04:	2000      	movs	r0, #0
 800ad06:	4958      	ldr	r1, [pc, #352]	; (800ae68 <__ieee754_exp+0x2f8>)
 800ad08:	f7f5 fad6 	bl	80002b8 <__aeabi_dsub>
 800ad0c:	e74d      	b.n	800abaa <__ieee754_exp+0x3a>
 800ad0e:	4857      	ldr	r0, [pc, #348]	; (800ae6c <__ieee754_exp+0x2fc>)
 800ad10:	a347      	add	r3, pc, #284	; (adr r3, 800ae30 <__ieee754_exp+0x2c0>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f7f5 fc83 	bl	8000628 <__aeabi_dmul>
 800ad22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad26:	f7f5 fac9 	bl	80002bc <__adddf3>
 800ad2a:	f7f5 ff2d 	bl	8000b88 <__aeabi_d2iz>
 800ad2e:	4682      	mov	sl, r0
 800ad30:	f7f5 fc10 	bl	8000554 <__aeabi_i2d>
 800ad34:	a340      	add	r3, pc, #256	; (adr r3, 800ae38 <__ieee754_exp+0x2c8>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	f7f5 fc73 	bl	8000628 <__aeabi_dmul>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4620      	mov	r0, r4
 800ad48:	4629      	mov	r1, r5
 800ad4a:	f7f5 fab5 	bl	80002b8 <__aeabi_dsub>
 800ad4e:	a33c      	add	r3, pc, #240	; (adr r3, 800ae40 <__ieee754_exp+0x2d0>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	4680      	mov	r8, r0
 800ad56:	4689      	mov	r9, r1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7f5 fc64 	bl	8000628 <__aeabi_dmul>
 800ad60:	ec41 0b18 	vmov	d8, r0, r1
 800ad64:	e76f      	b.n	800ac46 <__ieee754_exp+0xd6>
 800ad66:	4a42      	ldr	r2, [pc, #264]	; (800ae70 <__ieee754_exp+0x300>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d811      	bhi.n	800ad90 <__ieee754_exp+0x220>
 800ad6c:	a336      	add	r3, pc, #216	; (adr r3, 800ae48 <__ieee754_exp+0x2d8>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	ee10 0a10 	vmov	r0, s0
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 faa0 	bl	80002bc <__adddf3>
 800ad7c:	4b3a      	ldr	r3, [pc, #232]	; (800ae68 <__ieee754_exp+0x2f8>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f7f5 fee2 	bl	8000b48 <__aeabi_dcmpgt>
 800ad84:	b138      	cbz	r0, 800ad96 <__ieee754_exp+0x226>
 800ad86:	4b38      	ldr	r3, [pc, #224]	; (800ae68 <__ieee754_exp+0x2f8>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	e70a      	b.n	800aba6 <__ieee754_exp+0x36>
 800ad90:	f04f 0a00 	mov.w	sl, #0
 800ad94:	e75f      	b.n	800ac56 <__ieee754_exp+0xe6>
 800ad96:	4682      	mov	sl, r0
 800ad98:	e75d      	b.n	800ac56 <__ieee754_exp+0xe6>
 800ad9a:	4632      	mov	r2, r6
 800ad9c:	463b      	mov	r3, r7
 800ad9e:	2000      	movs	r0, #0
 800ada0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ada4:	f7f5 fa88 	bl	80002b8 <__aeabi_dsub>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	ec51 0b19 	vmov	r0, r1, d9
 800adb0:	f7f5 fd64 	bl	800087c <__aeabi_ddiv>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	ec51 0b18 	vmov	r0, r1, d8
 800adbc:	f7f5 fa7c 	bl	80002b8 <__aeabi_dsub>
 800adc0:	4642      	mov	r2, r8
 800adc2:	464b      	mov	r3, r9
 800adc4:	f7f5 fa78 	bl	80002b8 <__aeabi_dsub>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	2000      	movs	r0, #0
 800adce:	4926      	ldr	r1, [pc, #152]	; (800ae68 <__ieee754_exp+0x2f8>)
 800add0:	f7f5 fa72 	bl	80002b8 <__aeabi_dsub>
 800add4:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800add8:	4592      	cmp	sl, r2
 800adda:	db02      	blt.n	800ade2 <__ieee754_exp+0x272>
 800addc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800ade0:	e6e3      	b.n	800abaa <__ieee754_exp+0x3a>
 800ade2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800ade6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800adea:	2200      	movs	r2, #0
 800adec:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800adf0:	f7f5 fc1a 	bl	8000628 <__aeabi_dmul>
 800adf4:	e6d9      	b.n	800abaa <__ieee754_exp+0x3a>
 800adf6:	bf00      	nop
 800adf8:	fefa39ef 	.word	0xfefa39ef
 800adfc:	40862e42 	.word	0x40862e42
 800ae00:	d52d3051 	.word	0xd52d3051
 800ae04:	c0874910 	.word	0xc0874910
 800ae08:	72bea4d0 	.word	0x72bea4d0
 800ae0c:	3e663769 	.word	0x3e663769
 800ae10:	c5d26bf1 	.word	0xc5d26bf1
 800ae14:	3ebbbd41 	.word	0x3ebbbd41
 800ae18:	af25de2c 	.word	0xaf25de2c
 800ae1c:	3f11566a 	.word	0x3f11566a
 800ae20:	16bebd93 	.word	0x16bebd93
 800ae24:	3f66c16c 	.word	0x3f66c16c
 800ae28:	5555553e 	.word	0x5555553e
 800ae2c:	3fc55555 	.word	0x3fc55555
 800ae30:	652b82fe 	.word	0x652b82fe
 800ae34:	3ff71547 	.word	0x3ff71547
 800ae38:	fee00000 	.word	0xfee00000
 800ae3c:	3fe62e42 	.word	0x3fe62e42
 800ae40:	35793c76 	.word	0x35793c76
 800ae44:	3dea39ef 	.word	0x3dea39ef
 800ae48:	8800759c 	.word	0x8800759c
 800ae4c:	7e37e43c 	.word	0x7e37e43c
 800ae50:	40862e41 	.word	0x40862e41
 800ae54:	7fefffff 	.word	0x7fefffff
 800ae58:	3fd62e42 	.word	0x3fd62e42
 800ae5c:	3ff0a2b1 	.word	0x3ff0a2b1
 800ae60:	0800cab8 	.word	0x0800cab8
 800ae64:	0800cac8 	.word	0x0800cac8
 800ae68:	3ff00000 	.word	0x3ff00000
 800ae6c:	0800caa8 	.word	0x0800caa8
 800ae70:	3defffff 	.word	0x3defffff
 800ae74:	00000000 	.word	0x00000000

0800ae78 <__ieee754_rem_pio2>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	ed2d 8b02 	vpush	{d8}
 800ae80:	ec55 4b10 	vmov	r4, r5, d0
 800ae84:	4bca      	ldr	r3, [pc, #808]	; (800b1b0 <__ieee754_rem_pio2+0x338>)
 800ae86:	b08b      	sub	sp, #44	; 0x2c
 800ae88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ae8c:	4598      	cmp	r8, r3
 800ae8e:	4682      	mov	sl, r0
 800ae90:	9502      	str	r5, [sp, #8]
 800ae92:	dc08      	bgt.n	800aea6 <__ieee754_rem_pio2+0x2e>
 800ae94:	2200      	movs	r2, #0
 800ae96:	2300      	movs	r3, #0
 800ae98:	ed80 0b00 	vstr	d0, [r0]
 800ae9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800aea0:	f04f 0b00 	mov.w	fp, #0
 800aea4:	e028      	b.n	800aef8 <__ieee754_rem_pio2+0x80>
 800aea6:	4bc3      	ldr	r3, [pc, #780]	; (800b1b4 <__ieee754_rem_pio2+0x33c>)
 800aea8:	4598      	cmp	r8, r3
 800aeaa:	dc78      	bgt.n	800af9e <__ieee754_rem_pio2+0x126>
 800aeac:	9b02      	ldr	r3, [sp, #8]
 800aeae:	4ec2      	ldr	r6, [pc, #776]	; (800b1b8 <__ieee754_rem_pio2+0x340>)
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	ee10 0a10 	vmov	r0, s0
 800aeb6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b178 <__ieee754_rem_pio2+0x300>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	4629      	mov	r1, r5
 800aebe:	dd39      	ble.n	800af34 <__ieee754_rem_pio2+0xbc>
 800aec0:	f7f5 f9fa 	bl	80002b8 <__aeabi_dsub>
 800aec4:	45b0      	cmp	r8, r6
 800aec6:	4604      	mov	r4, r0
 800aec8:	460d      	mov	r5, r1
 800aeca:	d01b      	beq.n	800af04 <__ieee754_rem_pio2+0x8c>
 800aecc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	f7f5 f9f1 	bl	80002b8 <__aeabi_dsub>
 800aed6:	4602      	mov	r2, r0
 800aed8:	460b      	mov	r3, r1
 800aeda:	e9ca 2300 	strd	r2, r3, [sl]
 800aede:	4620      	mov	r0, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	f7f5 f9e9 	bl	80002b8 <__aeabi_dsub>
 800aee6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f7f5 f9e4 	bl	80002b8 <__aeabi_dsub>
 800aef0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aef4:	f04f 0b01 	mov.w	fp, #1
 800aef8:	4658      	mov	r0, fp
 800aefa:	b00b      	add	sp, #44	; 0x2c
 800aefc:	ecbd 8b02 	vpop	{d8}
 800af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af04:	a3a0      	add	r3, pc, #640	; (adr r3, 800b188 <__ieee754_rem_pio2+0x310>)
 800af06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0a:	f7f5 f9d5 	bl	80002b8 <__aeabi_dsub>
 800af0e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
 800af18:	f7f5 f9ce 	bl	80002b8 <__aeabi_dsub>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	e9ca 2300 	strd	r2, r3, [sl]
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 f9c6 	bl	80002b8 <__aeabi_dsub>
 800af2c:	a398      	add	r3, pc, #608	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	e7db      	b.n	800aeec <__ieee754_rem_pio2+0x74>
 800af34:	f7f5 f9c2 	bl	80002bc <__adddf3>
 800af38:	45b0      	cmp	r8, r6
 800af3a:	4604      	mov	r4, r0
 800af3c:	460d      	mov	r5, r1
 800af3e:	d016      	beq.n	800af6e <__ieee754_rem_pio2+0xf6>
 800af40:	a38f      	add	r3, pc, #572	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800af42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af46:	f7f5 f9b9 	bl	80002bc <__adddf3>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	e9ca 2300 	strd	r2, r3, [sl]
 800af52:	4620      	mov	r0, r4
 800af54:	4629      	mov	r1, r5
 800af56:	f7f5 f9af 	bl	80002b8 <__aeabi_dsub>
 800af5a:	a389      	add	r3, pc, #548	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	f7f5 f9ac 	bl	80002bc <__adddf3>
 800af64:	f04f 3bff 	mov.w	fp, #4294967295
 800af68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af6c:	e7c4      	b.n	800aef8 <__ieee754_rem_pio2+0x80>
 800af6e:	a386      	add	r3, pc, #536	; (adr r3, 800b188 <__ieee754_rem_pio2+0x310>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 f9a2 	bl	80002bc <__adddf3>
 800af78:	a385      	add	r3, pc, #532	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	4604      	mov	r4, r0
 800af80:	460d      	mov	r5, r1
 800af82:	f7f5 f99b 	bl	80002bc <__adddf3>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	e9ca 2300 	strd	r2, r3, [sl]
 800af8e:	4620      	mov	r0, r4
 800af90:	4629      	mov	r1, r5
 800af92:	f7f5 f991 	bl	80002b8 <__aeabi_dsub>
 800af96:	a37e      	add	r3, pc, #504	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	e7e0      	b.n	800af60 <__ieee754_rem_pio2+0xe8>
 800af9e:	4b87      	ldr	r3, [pc, #540]	; (800b1bc <__ieee754_rem_pio2+0x344>)
 800afa0:	4598      	cmp	r8, r3
 800afa2:	f300 80d9 	bgt.w	800b158 <__ieee754_rem_pio2+0x2e0>
 800afa6:	f001 f81b 	bl	800bfe0 <fabs>
 800afaa:	ec55 4b10 	vmov	r4, r5, d0
 800afae:	ee10 0a10 	vmov	r0, s0
 800afb2:	a379      	add	r3, pc, #484	; (adr r3, 800b198 <__ieee754_rem_pio2+0x320>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	4629      	mov	r1, r5
 800afba:	f7f5 fb35 	bl	8000628 <__aeabi_dmul>
 800afbe:	4b80      	ldr	r3, [pc, #512]	; (800b1c0 <__ieee754_rem_pio2+0x348>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	f7f5 f97b 	bl	80002bc <__adddf3>
 800afc6:	f7f5 fddf 	bl	8000b88 <__aeabi_d2iz>
 800afca:	4683      	mov	fp, r0
 800afcc:	f7f5 fac2 	bl	8000554 <__aeabi_i2d>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	ec43 2b18 	vmov	d8, r2, r3
 800afd8:	a367      	add	r3, pc, #412	; (adr r3, 800b178 <__ieee754_rem_pio2+0x300>)
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	f7f5 fb23 	bl	8000628 <__aeabi_dmul>
 800afe2:	4602      	mov	r2, r0
 800afe4:	460b      	mov	r3, r1
 800afe6:	4620      	mov	r0, r4
 800afe8:	4629      	mov	r1, r5
 800afea:	f7f5 f965 	bl	80002b8 <__aeabi_dsub>
 800afee:	a364      	add	r3, pc, #400	; (adr r3, 800b180 <__ieee754_rem_pio2+0x308>)
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	4606      	mov	r6, r0
 800aff6:	460f      	mov	r7, r1
 800aff8:	ec51 0b18 	vmov	r0, r1, d8
 800affc:	f7f5 fb14 	bl	8000628 <__aeabi_dmul>
 800b000:	f1bb 0f1f 	cmp.w	fp, #31
 800b004:	4604      	mov	r4, r0
 800b006:	460d      	mov	r5, r1
 800b008:	dc0d      	bgt.n	800b026 <__ieee754_rem_pio2+0x1ae>
 800b00a:	4b6e      	ldr	r3, [pc, #440]	; (800b1c4 <__ieee754_rem_pio2+0x34c>)
 800b00c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b014:	4543      	cmp	r3, r8
 800b016:	d006      	beq.n	800b026 <__ieee754_rem_pio2+0x1ae>
 800b018:	4622      	mov	r2, r4
 800b01a:	462b      	mov	r3, r5
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 f94a 	bl	80002b8 <__aeabi_dsub>
 800b024:	e00f      	b.n	800b046 <__ieee754_rem_pio2+0x1ce>
 800b026:	462b      	mov	r3, r5
 800b028:	4622      	mov	r2, r4
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 f943 	bl	80002b8 <__aeabi_dsub>
 800b032:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b036:	9303      	str	r3, [sp, #12]
 800b038:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b03c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b040:	f1b8 0f10 	cmp.w	r8, #16
 800b044:	dc02      	bgt.n	800b04c <__ieee754_rem_pio2+0x1d4>
 800b046:	e9ca 0100 	strd	r0, r1, [sl]
 800b04a:	e039      	b.n	800b0c0 <__ieee754_rem_pio2+0x248>
 800b04c:	a34e      	add	r3, pc, #312	; (adr r3, 800b188 <__ieee754_rem_pio2+0x310>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	ec51 0b18 	vmov	r0, r1, d8
 800b056:	f7f5 fae7 	bl	8000628 <__aeabi_dmul>
 800b05a:	4604      	mov	r4, r0
 800b05c:	460d      	mov	r5, r1
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4630      	mov	r0, r6
 800b064:	4639      	mov	r1, r7
 800b066:	f7f5 f927 	bl	80002b8 <__aeabi_dsub>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4680      	mov	r8, r0
 800b070:	4689      	mov	r9, r1
 800b072:	4630      	mov	r0, r6
 800b074:	4639      	mov	r1, r7
 800b076:	f7f5 f91f 	bl	80002b8 <__aeabi_dsub>
 800b07a:	4622      	mov	r2, r4
 800b07c:	462b      	mov	r3, r5
 800b07e:	f7f5 f91b 	bl	80002b8 <__aeabi_dsub>
 800b082:	a343      	add	r3, pc, #268	; (adr r3, 800b190 <__ieee754_rem_pio2+0x318>)
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	4604      	mov	r4, r0
 800b08a:	460d      	mov	r5, r1
 800b08c:	ec51 0b18 	vmov	r0, r1, d8
 800b090:	f7f5 faca 	bl	8000628 <__aeabi_dmul>
 800b094:	4622      	mov	r2, r4
 800b096:	462b      	mov	r3, r5
 800b098:	f7f5 f90e 	bl	80002b8 <__aeabi_dsub>
 800b09c:	4602      	mov	r2, r0
 800b09e:	460b      	mov	r3, r1
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	460d      	mov	r5, r1
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	f7f5 f906 	bl	80002b8 <__aeabi_dsub>
 800b0ac:	9a03      	ldr	r2, [sp, #12]
 800b0ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	2b31      	cmp	r3, #49	; 0x31
 800b0b6:	dc24      	bgt.n	800b102 <__ieee754_rem_pio2+0x28a>
 800b0b8:	e9ca 0100 	strd	r0, r1, [sl]
 800b0bc:	4646      	mov	r6, r8
 800b0be:	464f      	mov	r7, r9
 800b0c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	4642      	mov	r2, r8
 800b0c8:	464b      	mov	r3, r9
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f7f5 f8f4 	bl	80002b8 <__aeabi_dsub>
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	4622      	mov	r2, r4
 800b0d4:	f7f5 f8f0 	bl	80002b8 <__aeabi_dsub>
 800b0d8:	9b02      	ldr	r3, [sp, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b0e0:	f6bf af0a 	bge.w	800aef8 <__ieee754_rem_pio2+0x80>
 800b0e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0f0:	f8ca 8000 	str.w	r8, [sl]
 800b0f4:	f8ca 0008 	str.w	r0, [sl, #8]
 800b0f8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b0fc:	f1cb 0b00 	rsb	fp, fp, #0
 800b100:	e6fa      	b.n	800aef8 <__ieee754_rem_pio2+0x80>
 800b102:	a327      	add	r3, pc, #156	; (adr r3, 800b1a0 <__ieee754_rem_pio2+0x328>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	ec51 0b18 	vmov	r0, r1, d8
 800b10c:	f7f5 fa8c 	bl	8000628 <__aeabi_dmul>
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 f8cc 	bl	80002b8 <__aeabi_dsub>
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4606      	mov	r6, r0
 800b126:	460f      	mov	r7, r1
 800b128:	4640      	mov	r0, r8
 800b12a:	4649      	mov	r1, r9
 800b12c:	f7f5 f8c4 	bl	80002b8 <__aeabi_dsub>
 800b130:	4622      	mov	r2, r4
 800b132:	462b      	mov	r3, r5
 800b134:	f7f5 f8c0 	bl	80002b8 <__aeabi_dsub>
 800b138:	a31b      	add	r3, pc, #108	; (adr r3, 800b1a8 <__ieee754_rem_pio2+0x330>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	4604      	mov	r4, r0
 800b140:	460d      	mov	r5, r1
 800b142:	ec51 0b18 	vmov	r0, r1, d8
 800b146:	f7f5 fa6f 	bl	8000628 <__aeabi_dmul>
 800b14a:	4622      	mov	r2, r4
 800b14c:	462b      	mov	r3, r5
 800b14e:	f7f5 f8b3 	bl	80002b8 <__aeabi_dsub>
 800b152:	4604      	mov	r4, r0
 800b154:	460d      	mov	r5, r1
 800b156:	e75f      	b.n	800b018 <__ieee754_rem_pio2+0x1a0>
 800b158:	4b1b      	ldr	r3, [pc, #108]	; (800b1c8 <__ieee754_rem_pio2+0x350>)
 800b15a:	4598      	cmp	r8, r3
 800b15c:	dd36      	ble.n	800b1cc <__ieee754_rem_pio2+0x354>
 800b15e:	ee10 2a10 	vmov	r2, s0
 800b162:	462b      	mov	r3, r5
 800b164:	4620      	mov	r0, r4
 800b166:	4629      	mov	r1, r5
 800b168:	f7f5 f8a6 	bl	80002b8 <__aeabi_dsub>
 800b16c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b170:	e9ca 0100 	strd	r0, r1, [sl]
 800b174:	e694      	b.n	800aea0 <__ieee754_rem_pio2+0x28>
 800b176:	bf00      	nop
 800b178:	54400000 	.word	0x54400000
 800b17c:	3ff921fb 	.word	0x3ff921fb
 800b180:	1a626331 	.word	0x1a626331
 800b184:	3dd0b461 	.word	0x3dd0b461
 800b188:	1a600000 	.word	0x1a600000
 800b18c:	3dd0b461 	.word	0x3dd0b461
 800b190:	2e037073 	.word	0x2e037073
 800b194:	3ba3198a 	.word	0x3ba3198a
 800b198:	6dc9c883 	.word	0x6dc9c883
 800b19c:	3fe45f30 	.word	0x3fe45f30
 800b1a0:	2e000000 	.word	0x2e000000
 800b1a4:	3ba3198a 	.word	0x3ba3198a
 800b1a8:	252049c1 	.word	0x252049c1
 800b1ac:	397b839a 	.word	0x397b839a
 800b1b0:	3fe921fb 	.word	0x3fe921fb
 800b1b4:	4002d97b 	.word	0x4002d97b
 800b1b8:	3ff921fb 	.word	0x3ff921fb
 800b1bc:	413921fb 	.word	0x413921fb
 800b1c0:	3fe00000 	.word	0x3fe00000
 800b1c4:	0800cad8 	.word	0x0800cad8
 800b1c8:	7fefffff 	.word	0x7fefffff
 800b1cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b1d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b1d4:	ee10 0a10 	vmov	r0, s0
 800b1d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b1dc:	ee10 6a10 	vmov	r6, s0
 800b1e0:	460f      	mov	r7, r1
 800b1e2:	f7f5 fcd1 	bl	8000b88 <__aeabi_d2iz>
 800b1e6:	f7f5 f9b5 	bl	8000554 <__aeabi_i2d>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1f6:	f7f5 f85f 	bl	80002b8 <__aeabi_dsub>
 800b1fa:	4b23      	ldr	r3, [pc, #140]	; (800b288 <__ieee754_rem_pio2+0x410>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f7f5 fa13 	bl	8000628 <__aeabi_dmul>
 800b202:	460f      	mov	r7, r1
 800b204:	4606      	mov	r6, r0
 800b206:	f7f5 fcbf 	bl	8000b88 <__aeabi_d2iz>
 800b20a:	f7f5 f9a3 	bl	8000554 <__aeabi_i2d>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b21a:	f7f5 f84d 	bl	80002b8 <__aeabi_dsub>
 800b21e:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <__ieee754_rem_pio2+0x410>)
 800b220:	2200      	movs	r2, #0
 800b222:	f7f5 fa01 	bl	8000628 <__aeabi_dmul>
 800b226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b22a:	ad04      	add	r5, sp, #16
 800b22c:	f04f 0803 	mov.w	r8, #3
 800b230:	46a9      	mov	r9, r5
 800b232:	2600      	movs	r6, #0
 800b234:	2700      	movs	r7, #0
 800b236:	4632      	mov	r2, r6
 800b238:	463b      	mov	r3, r7
 800b23a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b23e:	46c3      	mov	fp, r8
 800b240:	3d08      	subs	r5, #8
 800b242:	f108 38ff 	add.w	r8, r8, #4294967295
 800b246:	f7f5 fc57 	bl	8000af8 <__aeabi_dcmpeq>
 800b24a:	2800      	cmp	r0, #0
 800b24c:	d1f3      	bne.n	800b236 <__ieee754_rem_pio2+0x3be>
 800b24e:	4b0f      	ldr	r3, [pc, #60]	; (800b28c <__ieee754_rem_pio2+0x414>)
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	2302      	movs	r3, #2
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	4622      	mov	r2, r4
 800b258:	465b      	mov	r3, fp
 800b25a:	4651      	mov	r1, sl
 800b25c:	4648      	mov	r0, r9
 800b25e:	f000 f8df 	bl	800b420 <__kernel_rem_pio2>
 800b262:	9b02      	ldr	r3, [sp, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	4683      	mov	fp, r0
 800b268:	f6bf ae46 	bge.w	800aef8 <__ieee754_rem_pio2+0x80>
 800b26c:	e9da 2100 	ldrd	r2, r1, [sl]
 800b270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b274:	e9ca 2300 	strd	r2, r3, [sl]
 800b278:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b27c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b280:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b284:	e73a      	b.n	800b0fc <__ieee754_rem_pio2+0x284>
 800b286:	bf00      	nop
 800b288:	41700000 	.word	0x41700000
 800b28c:	0800cb58 	.word	0x0800cb58

0800b290 <__kernel_cos>:
 800b290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b294:	ec57 6b10 	vmov	r6, r7, d0
 800b298:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b29c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b2a0:	ed8d 1b00 	vstr	d1, [sp]
 800b2a4:	da07      	bge.n	800b2b6 <__kernel_cos+0x26>
 800b2a6:	ee10 0a10 	vmov	r0, s0
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 fc6c 	bl	8000b88 <__aeabi_d2iz>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	f000 8088 	beq.w	800b3c6 <__kernel_cos+0x136>
 800b2b6:	4632      	mov	r2, r6
 800b2b8:	463b      	mov	r3, r7
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	f7f5 f9b3 	bl	8000628 <__aeabi_dmul>
 800b2c2:	4b51      	ldr	r3, [pc, #324]	; (800b408 <__kernel_cos+0x178>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	f7f5 f9ad 	bl	8000628 <__aeabi_dmul>
 800b2ce:	a340      	add	r3, pc, #256	; (adr r3, 800b3d0 <__kernel_cos+0x140>)
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	4682      	mov	sl, r0
 800b2d6:	468b      	mov	fp, r1
 800b2d8:	4620      	mov	r0, r4
 800b2da:	4629      	mov	r1, r5
 800b2dc:	f7f5 f9a4 	bl	8000628 <__aeabi_dmul>
 800b2e0:	a33d      	add	r3, pc, #244	; (adr r3, 800b3d8 <__kernel_cos+0x148>)
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f7f4 ffe9 	bl	80002bc <__adddf3>
 800b2ea:	4622      	mov	r2, r4
 800b2ec:	462b      	mov	r3, r5
 800b2ee:	f7f5 f99b 	bl	8000628 <__aeabi_dmul>
 800b2f2:	a33b      	add	r3, pc, #236	; (adr r3, 800b3e0 <__kernel_cos+0x150>)
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	f7f4 ffde 	bl	80002b8 <__aeabi_dsub>
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	462b      	mov	r3, r5
 800b300:	f7f5 f992 	bl	8000628 <__aeabi_dmul>
 800b304:	a338      	add	r3, pc, #224	; (adr r3, 800b3e8 <__kernel_cos+0x158>)
 800b306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30a:	f7f4 ffd7 	bl	80002bc <__adddf3>
 800b30e:	4622      	mov	r2, r4
 800b310:	462b      	mov	r3, r5
 800b312:	f7f5 f989 	bl	8000628 <__aeabi_dmul>
 800b316:	a336      	add	r3, pc, #216	; (adr r3, 800b3f0 <__kernel_cos+0x160>)
 800b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31c:	f7f4 ffcc 	bl	80002b8 <__aeabi_dsub>
 800b320:	4622      	mov	r2, r4
 800b322:	462b      	mov	r3, r5
 800b324:	f7f5 f980 	bl	8000628 <__aeabi_dmul>
 800b328:	a333      	add	r3, pc, #204	; (adr r3, 800b3f8 <__kernel_cos+0x168>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	f7f4 ffc5 	bl	80002bc <__adddf3>
 800b332:	4622      	mov	r2, r4
 800b334:	462b      	mov	r3, r5
 800b336:	f7f5 f977 	bl	8000628 <__aeabi_dmul>
 800b33a:	4622      	mov	r2, r4
 800b33c:	462b      	mov	r3, r5
 800b33e:	f7f5 f973 	bl	8000628 <__aeabi_dmul>
 800b342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b346:	4604      	mov	r4, r0
 800b348:	460d      	mov	r5, r1
 800b34a:	4630      	mov	r0, r6
 800b34c:	4639      	mov	r1, r7
 800b34e:	f7f5 f96b 	bl	8000628 <__aeabi_dmul>
 800b352:	460b      	mov	r3, r1
 800b354:	4602      	mov	r2, r0
 800b356:	4629      	mov	r1, r5
 800b358:	4620      	mov	r0, r4
 800b35a:	f7f4 ffad 	bl	80002b8 <__aeabi_dsub>
 800b35e:	4b2b      	ldr	r3, [pc, #172]	; (800b40c <__kernel_cos+0x17c>)
 800b360:	4598      	cmp	r8, r3
 800b362:	4606      	mov	r6, r0
 800b364:	460f      	mov	r7, r1
 800b366:	dc10      	bgt.n	800b38a <__kernel_cos+0xfa>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4650      	mov	r0, sl
 800b36e:	4659      	mov	r1, fp
 800b370:	f7f4 ffa2 	bl	80002b8 <__aeabi_dsub>
 800b374:	460b      	mov	r3, r1
 800b376:	4926      	ldr	r1, [pc, #152]	; (800b410 <__kernel_cos+0x180>)
 800b378:	4602      	mov	r2, r0
 800b37a:	2000      	movs	r0, #0
 800b37c:	f7f4 ff9c 	bl	80002b8 <__aeabi_dsub>
 800b380:	ec41 0b10 	vmov	d0, r0, r1
 800b384:	b003      	add	sp, #12
 800b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38a:	4b22      	ldr	r3, [pc, #136]	; (800b414 <__kernel_cos+0x184>)
 800b38c:	4920      	ldr	r1, [pc, #128]	; (800b410 <__kernel_cos+0x180>)
 800b38e:	4598      	cmp	r8, r3
 800b390:	bfcc      	ite	gt
 800b392:	4d21      	ldrgt	r5, [pc, #132]	; (800b418 <__kernel_cos+0x188>)
 800b394:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b398:	2400      	movs	r4, #0
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	2000      	movs	r0, #0
 800b3a0:	f7f4 ff8a 	bl	80002b8 <__aeabi_dsub>
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	4680      	mov	r8, r0
 800b3a8:	4689      	mov	r9, r1
 800b3aa:	462b      	mov	r3, r5
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	4659      	mov	r1, fp
 800b3b0:	f7f4 ff82 	bl	80002b8 <__aeabi_dsub>
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	463b      	mov	r3, r7
 800b3b8:	f7f4 ff7e 	bl	80002b8 <__aeabi_dsub>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4640      	mov	r0, r8
 800b3c2:	4649      	mov	r1, r9
 800b3c4:	e7da      	b.n	800b37c <__kernel_cos+0xec>
 800b3c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b400 <__kernel_cos+0x170>
 800b3ca:	e7db      	b.n	800b384 <__kernel_cos+0xf4>
 800b3cc:	f3af 8000 	nop.w
 800b3d0:	be8838d4 	.word	0xbe8838d4
 800b3d4:	bda8fae9 	.word	0xbda8fae9
 800b3d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b3dc:	3e21ee9e 	.word	0x3e21ee9e
 800b3e0:	809c52ad 	.word	0x809c52ad
 800b3e4:	3e927e4f 	.word	0x3e927e4f
 800b3e8:	19cb1590 	.word	0x19cb1590
 800b3ec:	3efa01a0 	.word	0x3efa01a0
 800b3f0:	16c15177 	.word	0x16c15177
 800b3f4:	3f56c16c 	.word	0x3f56c16c
 800b3f8:	5555554c 	.word	0x5555554c
 800b3fc:	3fa55555 	.word	0x3fa55555
 800b400:	00000000 	.word	0x00000000
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	3fe00000 	.word	0x3fe00000
 800b40c:	3fd33332 	.word	0x3fd33332
 800b410:	3ff00000 	.word	0x3ff00000
 800b414:	3fe90000 	.word	0x3fe90000
 800b418:	3fd20000 	.word	0x3fd20000
 800b41c:	00000000 	.word	0x00000000

0800b420 <__kernel_rem_pio2>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	ed2d 8b02 	vpush	{d8}
 800b428:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b42c:	f112 0f14 	cmn.w	r2, #20
 800b430:	9308      	str	r3, [sp, #32]
 800b432:	9101      	str	r1, [sp, #4]
 800b434:	4bc4      	ldr	r3, [pc, #784]	; (800b748 <__kernel_rem_pio2+0x328>)
 800b436:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b438:	900b      	str	r0, [sp, #44]	; 0x2c
 800b43a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b43e:	9302      	str	r3, [sp, #8]
 800b440:	9b08      	ldr	r3, [sp, #32]
 800b442:	f103 33ff 	add.w	r3, r3, #4294967295
 800b446:	bfa8      	it	ge
 800b448:	1ed4      	subge	r4, r2, #3
 800b44a:	9306      	str	r3, [sp, #24]
 800b44c:	bfb2      	itee	lt
 800b44e:	2400      	movlt	r4, #0
 800b450:	2318      	movge	r3, #24
 800b452:	fb94 f4f3 	sdivge	r4, r4, r3
 800b456:	f06f 0317 	mvn.w	r3, #23
 800b45a:	fb04 3303 	mla	r3, r4, r3, r3
 800b45e:	eb03 0a02 	add.w	sl, r3, r2
 800b462:	9b02      	ldr	r3, [sp, #8]
 800b464:	9a06      	ldr	r2, [sp, #24]
 800b466:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b738 <__kernel_rem_pio2+0x318>
 800b46a:	eb03 0802 	add.w	r8, r3, r2
 800b46e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b470:	1aa7      	subs	r7, r4, r2
 800b472:	ae22      	add	r6, sp, #136	; 0x88
 800b474:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b478:	2500      	movs	r5, #0
 800b47a:	4545      	cmp	r5, r8
 800b47c:	dd13      	ble.n	800b4a6 <__kernel_rem_pio2+0x86>
 800b47e:	9b08      	ldr	r3, [sp, #32]
 800b480:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b738 <__kernel_rem_pio2+0x318>
 800b484:	aa22      	add	r2, sp, #136	; 0x88
 800b486:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b48a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b48e:	f04f 0800 	mov.w	r8, #0
 800b492:	9b02      	ldr	r3, [sp, #8]
 800b494:	4598      	cmp	r8, r3
 800b496:	dc2f      	bgt.n	800b4f8 <__kernel_rem_pio2+0xd8>
 800b498:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b49c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b4a0:	462f      	mov	r7, r5
 800b4a2:	2600      	movs	r6, #0
 800b4a4:	e01b      	b.n	800b4de <__kernel_rem_pio2+0xbe>
 800b4a6:	42ef      	cmn	r7, r5
 800b4a8:	d407      	bmi.n	800b4ba <__kernel_rem_pio2+0x9a>
 800b4aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b4ae:	f7f5 f851 	bl	8000554 <__aeabi_i2d>
 800b4b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b4b6:	3501      	adds	r5, #1
 800b4b8:	e7df      	b.n	800b47a <__kernel_rem_pio2+0x5a>
 800b4ba:	ec51 0b18 	vmov	r0, r1, d8
 800b4be:	e7f8      	b.n	800b4b2 <__kernel_rem_pio2+0x92>
 800b4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b4c8:	f7f5 f8ae 	bl	8000628 <__aeabi_dmul>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4d4:	f7f4 fef2 	bl	80002bc <__adddf3>
 800b4d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4dc:	3601      	adds	r6, #1
 800b4de:	9b06      	ldr	r3, [sp, #24]
 800b4e0:	429e      	cmp	r6, r3
 800b4e2:	f1a7 0708 	sub.w	r7, r7, #8
 800b4e6:	ddeb      	ble.n	800b4c0 <__kernel_rem_pio2+0xa0>
 800b4e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b4ec:	f108 0801 	add.w	r8, r8, #1
 800b4f0:	ecab 7b02 	vstmia	fp!, {d7}
 800b4f4:	3508      	adds	r5, #8
 800b4f6:	e7cc      	b.n	800b492 <__kernel_rem_pio2+0x72>
 800b4f8:	9b02      	ldr	r3, [sp, #8]
 800b4fa:	aa0e      	add	r2, sp, #56	; 0x38
 800b4fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b500:	930d      	str	r3, [sp, #52]	; 0x34
 800b502:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b504:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b508:	9c02      	ldr	r4, [sp, #8]
 800b50a:	930c      	str	r3, [sp, #48]	; 0x30
 800b50c:	00e3      	lsls	r3, r4, #3
 800b50e:	930a      	str	r3, [sp, #40]	; 0x28
 800b510:	ab9a      	add	r3, sp, #616	; 0x268
 800b512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b516:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b51a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b51e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b520:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b524:	46c3      	mov	fp, r8
 800b526:	46a1      	mov	r9, r4
 800b528:	f1b9 0f00 	cmp.w	r9, #0
 800b52c:	f1a5 0508 	sub.w	r5, r5, #8
 800b530:	dc77      	bgt.n	800b622 <__kernel_rem_pio2+0x202>
 800b532:	ec47 6b10 	vmov	d0, r6, r7
 800b536:	4650      	mov	r0, sl
 800b538:	f000 fde6 	bl	800c108 <scalbn>
 800b53c:	ec57 6b10 	vmov	r6, r7, d0
 800b540:	2200      	movs	r2, #0
 800b542:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b546:	ee10 0a10 	vmov	r0, s0
 800b54a:	4639      	mov	r1, r7
 800b54c:	f7f5 f86c 	bl	8000628 <__aeabi_dmul>
 800b550:	ec41 0b10 	vmov	d0, r0, r1
 800b554:	f000 fd58 	bl	800c008 <floor>
 800b558:	4b7c      	ldr	r3, [pc, #496]	; (800b74c <__kernel_rem_pio2+0x32c>)
 800b55a:	ec51 0b10 	vmov	r0, r1, d0
 800b55e:	2200      	movs	r2, #0
 800b560:	f7f5 f862 	bl	8000628 <__aeabi_dmul>
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4630      	mov	r0, r6
 800b56a:	4639      	mov	r1, r7
 800b56c:	f7f4 fea4 	bl	80002b8 <__aeabi_dsub>
 800b570:	460f      	mov	r7, r1
 800b572:	4606      	mov	r6, r0
 800b574:	f7f5 fb08 	bl	8000b88 <__aeabi_d2iz>
 800b578:	9004      	str	r0, [sp, #16]
 800b57a:	f7f4 ffeb 	bl	8000554 <__aeabi_i2d>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4630      	mov	r0, r6
 800b584:	4639      	mov	r1, r7
 800b586:	f7f4 fe97 	bl	80002b8 <__aeabi_dsub>
 800b58a:	f1ba 0f00 	cmp.w	sl, #0
 800b58e:	4606      	mov	r6, r0
 800b590:	460f      	mov	r7, r1
 800b592:	dd6d      	ble.n	800b670 <__kernel_rem_pio2+0x250>
 800b594:	1e62      	subs	r2, r4, #1
 800b596:	ab0e      	add	r3, sp, #56	; 0x38
 800b598:	9d04      	ldr	r5, [sp, #16]
 800b59a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b59e:	f1ca 0118 	rsb	r1, sl, #24
 800b5a2:	fa40 f301 	asr.w	r3, r0, r1
 800b5a6:	441d      	add	r5, r3
 800b5a8:	408b      	lsls	r3, r1
 800b5aa:	1ac0      	subs	r0, r0, r3
 800b5ac:	ab0e      	add	r3, sp, #56	; 0x38
 800b5ae:	9504      	str	r5, [sp, #16]
 800b5b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b5b4:	f1ca 0317 	rsb	r3, sl, #23
 800b5b8:	fa40 fb03 	asr.w	fp, r0, r3
 800b5bc:	f1bb 0f00 	cmp.w	fp, #0
 800b5c0:	dd65      	ble.n	800b68e <__kernel_rem_pio2+0x26e>
 800b5c2:	9b04      	ldr	r3, [sp, #16]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	9304      	str	r3, [sp, #16]
 800b5ca:	4615      	mov	r5, r2
 800b5cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b5d0:	4294      	cmp	r4, r2
 800b5d2:	f300 809c 	bgt.w	800b70e <__kernel_rem_pio2+0x2ee>
 800b5d6:	f1ba 0f00 	cmp.w	sl, #0
 800b5da:	dd07      	ble.n	800b5ec <__kernel_rem_pio2+0x1cc>
 800b5dc:	f1ba 0f01 	cmp.w	sl, #1
 800b5e0:	f000 80c0 	beq.w	800b764 <__kernel_rem_pio2+0x344>
 800b5e4:	f1ba 0f02 	cmp.w	sl, #2
 800b5e8:	f000 80c6 	beq.w	800b778 <__kernel_rem_pio2+0x358>
 800b5ec:	f1bb 0f02 	cmp.w	fp, #2
 800b5f0:	d14d      	bne.n	800b68e <__kernel_rem_pio2+0x26e>
 800b5f2:	4632      	mov	r2, r6
 800b5f4:	463b      	mov	r3, r7
 800b5f6:	4956      	ldr	r1, [pc, #344]	; (800b750 <__kernel_rem_pio2+0x330>)
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f7f4 fe5d 	bl	80002b8 <__aeabi_dsub>
 800b5fe:	4606      	mov	r6, r0
 800b600:	460f      	mov	r7, r1
 800b602:	2d00      	cmp	r5, #0
 800b604:	d043      	beq.n	800b68e <__kernel_rem_pio2+0x26e>
 800b606:	4650      	mov	r0, sl
 800b608:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b740 <__kernel_rem_pio2+0x320>
 800b60c:	f000 fd7c 	bl	800c108 <scalbn>
 800b610:	4630      	mov	r0, r6
 800b612:	4639      	mov	r1, r7
 800b614:	ec53 2b10 	vmov	r2, r3, d0
 800b618:	f7f4 fe4e 	bl	80002b8 <__aeabi_dsub>
 800b61c:	4606      	mov	r6, r0
 800b61e:	460f      	mov	r7, r1
 800b620:	e035      	b.n	800b68e <__kernel_rem_pio2+0x26e>
 800b622:	4b4c      	ldr	r3, [pc, #304]	; (800b754 <__kernel_rem_pio2+0x334>)
 800b624:	2200      	movs	r2, #0
 800b626:	4630      	mov	r0, r6
 800b628:	4639      	mov	r1, r7
 800b62a:	f7f4 fffd 	bl	8000628 <__aeabi_dmul>
 800b62e:	f7f5 faab 	bl	8000b88 <__aeabi_d2iz>
 800b632:	f7f4 ff8f 	bl	8000554 <__aeabi_i2d>
 800b636:	4602      	mov	r2, r0
 800b638:	460b      	mov	r3, r1
 800b63a:	ec43 2b18 	vmov	d8, r2, r3
 800b63e:	4b46      	ldr	r3, [pc, #280]	; (800b758 <__kernel_rem_pio2+0x338>)
 800b640:	2200      	movs	r2, #0
 800b642:	f7f4 fff1 	bl	8000628 <__aeabi_dmul>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4630      	mov	r0, r6
 800b64c:	4639      	mov	r1, r7
 800b64e:	f7f4 fe33 	bl	80002b8 <__aeabi_dsub>
 800b652:	f7f5 fa99 	bl	8000b88 <__aeabi_d2iz>
 800b656:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b65a:	f84b 0b04 	str.w	r0, [fp], #4
 800b65e:	ec51 0b18 	vmov	r0, r1, d8
 800b662:	f7f4 fe2b 	bl	80002bc <__adddf3>
 800b666:	f109 39ff 	add.w	r9, r9, #4294967295
 800b66a:	4606      	mov	r6, r0
 800b66c:	460f      	mov	r7, r1
 800b66e:	e75b      	b.n	800b528 <__kernel_rem_pio2+0x108>
 800b670:	d106      	bne.n	800b680 <__kernel_rem_pio2+0x260>
 800b672:	1e63      	subs	r3, r4, #1
 800b674:	aa0e      	add	r2, sp, #56	; 0x38
 800b676:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b67a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b67e:	e79d      	b.n	800b5bc <__kernel_rem_pio2+0x19c>
 800b680:	4b36      	ldr	r3, [pc, #216]	; (800b75c <__kernel_rem_pio2+0x33c>)
 800b682:	2200      	movs	r2, #0
 800b684:	f7f5 fa56 	bl	8000b34 <__aeabi_dcmpge>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d13d      	bne.n	800b708 <__kernel_rem_pio2+0x2e8>
 800b68c:	4683      	mov	fp, r0
 800b68e:	2200      	movs	r2, #0
 800b690:	2300      	movs	r3, #0
 800b692:	4630      	mov	r0, r6
 800b694:	4639      	mov	r1, r7
 800b696:	f7f5 fa2f 	bl	8000af8 <__aeabi_dcmpeq>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	f000 80c0 	beq.w	800b820 <__kernel_rem_pio2+0x400>
 800b6a0:	1e65      	subs	r5, r4, #1
 800b6a2:	462b      	mov	r3, r5
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	9902      	ldr	r1, [sp, #8]
 800b6a8:	428b      	cmp	r3, r1
 800b6aa:	da6c      	bge.n	800b786 <__kernel_rem_pio2+0x366>
 800b6ac:	2a00      	cmp	r2, #0
 800b6ae:	f000 8089 	beq.w	800b7c4 <__kernel_rem_pio2+0x3a4>
 800b6b2:	ab0e      	add	r3, sp, #56	; 0x38
 800b6b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b6b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f000 80ad 	beq.w	800b81c <__kernel_rem_pio2+0x3fc>
 800b6c2:	4650      	mov	r0, sl
 800b6c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b740 <__kernel_rem_pio2+0x320>
 800b6c8:	f000 fd1e 	bl	800c108 <scalbn>
 800b6cc:	ab9a      	add	r3, sp, #616	; 0x268
 800b6ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b6d2:	ec57 6b10 	vmov	r6, r7, d0
 800b6d6:	00ec      	lsls	r4, r5, #3
 800b6d8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b6dc:	46aa      	mov	sl, r5
 800b6de:	f1ba 0f00 	cmp.w	sl, #0
 800b6e2:	f280 80d6 	bge.w	800b892 <__kernel_rem_pio2+0x472>
 800b6e6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b738 <__kernel_rem_pio2+0x318>
 800b6ea:	462e      	mov	r6, r5
 800b6ec:	2e00      	cmp	r6, #0
 800b6ee:	f2c0 8104 	blt.w	800b8fa <__kernel_rem_pio2+0x4da>
 800b6f2:	ab72      	add	r3, sp, #456	; 0x1c8
 800b6f4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b6f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b760 <__kernel_rem_pio2+0x340>
 800b6fc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b700:	f04f 0800 	mov.w	r8, #0
 800b704:	1baf      	subs	r7, r5, r6
 800b706:	e0ea      	b.n	800b8de <__kernel_rem_pio2+0x4be>
 800b708:	f04f 0b02 	mov.w	fp, #2
 800b70c:	e759      	b.n	800b5c2 <__kernel_rem_pio2+0x1a2>
 800b70e:	f8d8 3000 	ldr.w	r3, [r8]
 800b712:	b955      	cbnz	r5, 800b72a <__kernel_rem_pio2+0x30a>
 800b714:	b123      	cbz	r3, 800b720 <__kernel_rem_pio2+0x300>
 800b716:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b71a:	f8c8 3000 	str.w	r3, [r8]
 800b71e:	2301      	movs	r3, #1
 800b720:	3201      	adds	r2, #1
 800b722:	f108 0804 	add.w	r8, r8, #4
 800b726:	461d      	mov	r5, r3
 800b728:	e752      	b.n	800b5d0 <__kernel_rem_pio2+0x1b0>
 800b72a:	1acb      	subs	r3, r1, r3
 800b72c:	f8c8 3000 	str.w	r3, [r8]
 800b730:	462b      	mov	r3, r5
 800b732:	e7f5      	b.n	800b720 <__kernel_rem_pio2+0x300>
 800b734:	f3af 8000 	nop.w
	...
 800b744:	3ff00000 	.word	0x3ff00000
 800b748:	0800cca0 	.word	0x0800cca0
 800b74c:	40200000 	.word	0x40200000
 800b750:	3ff00000 	.word	0x3ff00000
 800b754:	3e700000 	.word	0x3e700000
 800b758:	41700000 	.word	0x41700000
 800b75c:	3fe00000 	.word	0x3fe00000
 800b760:	0800cc60 	.word	0x0800cc60
 800b764:	1e62      	subs	r2, r4, #1
 800b766:	ab0e      	add	r3, sp, #56	; 0x38
 800b768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b76c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b770:	a90e      	add	r1, sp, #56	; 0x38
 800b772:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b776:	e739      	b.n	800b5ec <__kernel_rem_pio2+0x1cc>
 800b778:	1e62      	subs	r2, r4, #1
 800b77a:	ab0e      	add	r3, sp, #56	; 0x38
 800b77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b780:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b784:	e7f4      	b.n	800b770 <__kernel_rem_pio2+0x350>
 800b786:	a90e      	add	r1, sp, #56	; 0x38
 800b788:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	430a      	orrs	r2, r1
 800b790:	e789      	b.n	800b6a6 <__kernel_rem_pio2+0x286>
 800b792:	3301      	adds	r3, #1
 800b794:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b798:	2900      	cmp	r1, #0
 800b79a:	d0fa      	beq.n	800b792 <__kernel_rem_pio2+0x372>
 800b79c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b79e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b7a2:	446a      	add	r2, sp
 800b7a4:	3a98      	subs	r2, #152	; 0x98
 800b7a6:	920a      	str	r2, [sp, #40]	; 0x28
 800b7a8:	9a08      	ldr	r2, [sp, #32]
 800b7aa:	18e3      	adds	r3, r4, r3
 800b7ac:	18a5      	adds	r5, r4, r2
 800b7ae:	aa22      	add	r2, sp, #136	; 0x88
 800b7b0:	f104 0801 	add.w	r8, r4, #1
 800b7b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	9b04      	ldr	r3, [sp, #16]
 800b7bc:	4543      	cmp	r3, r8
 800b7be:	da04      	bge.n	800b7ca <__kernel_rem_pio2+0x3aa>
 800b7c0:	461c      	mov	r4, r3
 800b7c2:	e6a3      	b.n	800b50c <__kernel_rem_pio2+0xec>
 800b7c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e7e4      	b.n	800b794 <__kernel_rem_pio2+0x374>
 800b7ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b7d0:	f7f4 fec0 	bl	8000554 <__aeabi_i2d>
 800b7d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b7d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7da:	46ab      	mov	fp, r5
 800b7dc:	461c      	mov	r4, r3
 800b7de:	f04f 0900 	mov.w	r9, #0
 800b7e2:	2600      	movs	r6, #0
 800b7e4:	2700      	movs	r7, #0
 800b7e6:	9b06      	ldr	r3, [sp, #24]
 800b7e8:	4599      	cmp	r9, r3
 800b7ea:	dd06      	ble.n	800b7fa <__kernel_rem_pio2+0x3da>
 800b7ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b7f2:	f108 0801 	add.w	r8, r8, #1
 800b7f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7f8:	e7df      	b.n	800b7ba <__kernel_rem_pio2+0x39a>
 800b7fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b7fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b802:	f7f4 ff11 	bl	8000628 <__aeabi_dmul>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	4630      	mov	r0, r6
 800b80c:	4639      	mov	r1, r7
 800b80e:	f7f4 fd55 	bl	80002bc <__adddf3>
 800b812:	f109 0901 	add.w	r9, r9, #1
 800b816:	4606      	mov	r6, r0
 800b818:	460f      	mov	r7, r1
 800b81a:	e7e4      	b.n	800b7e6 <__kernel_rem_pio2+0x3c6>
 800b81c:	3d01      	subs	r5, #1
 800b81e:	e748      	b.n	800b6b2 <__kernel_rem_pio2+0x292>
 800b820:	ec47 6b10 	vmov	d0, r6, r7
 800b824:	f1ca 0000 	rsb	r0, sl, #0
 800b828:	f000 fc6e 	bl	800c108 <scalbn>
 800b82c:	ec57 6b10 	vmov	r6, r7, d0
 800b830:	4ba0      	ldr	r3, [pc, #640]	; (800bab4 <__kernel_rem_pio2+0x694>)
 800b832:	ee10 0a10 	vmov	r0, s0
 800b836:	2200      	movs	r2, #0
 800b838:	4639      	mov	r1, r7
 800b83a:	f7f5 f97b 	bl	8000b34 <__aeabi_dcmpge>
 800b83e:	b1f8      	cbz	r0, 800b880 <__kernel_rem_pio2+0x460>
 800b840:	4b9d      	ldr	r3, [pc, #628]	; (800bab8 <__kernel_rem_pio2+0x698>)
 800b842:	2200      	movs	r2, #0
 800b844:	4630      	mov	r0, r6
 800b846:	4639      	mov	r1, r7
 800b848:	f7f4 feee 	bl	8000628 <__aeabi_dmul>
 800b84c:	f7f5 f99c 	bl	8000b88 <__aeabi_d2iz>
 800b850:	4680      	mov	r8, r0
 800b852:	f7f4 fe7f 	bl	8000554 <__aeabi_i2d>
 800b856:	4b97      	ldr	r3, [pc, #604]	; (800bab4 <__kernel_rem_pio2+0x694>)
 800b858:	2200      	movs	r2, #0
 800b85a:	f7f4 fee5 	bl	8000628 <__aeabi_dmul>
 800b85e:	460b      	mov	r3, r1
 800b860:	4602      	mov	r2, r0
 800b862:	4639      	mov	r1, r7
 800b864:	4630      	mov	r0, r6
 800b866:	f7f4 fd27 	bl	80002b8 <__aeabi_dsub>
 800b86a:	f7f5 f98d 	bl	8000b88 <__aeabi_d2iz>
 800b86e:	1c65      	adds	r5, r4, #1
 800b870:	ab0e      	add	r3, sp, #56	; 0x38
 800b872:	f10a 0a18 	add.w	sl, sl, #24
 800b876:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b87a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b87e:	e720      	b.n	800b6c2 <__kernel_rem_pio2+0x2a2>
 800b880:	4630      	mov	r0, r6
 800b882:	4639      	mov	r1, r7
 800b884:	f7f5 f980 	bl	8000b88 <__aeabi_d2iz>
 800b888:	ab0e      	add	r3, sp, #56	; 0x38
 800b88a:	4625      	mov	r5, r4
 800b88c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b890:	e717      	b.n	800b6c2 <__kernel_rem_pio2+0x2a2>
 800b892:	ab0e      	add	r3, sp, #56	; 0x38
 800b894:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b898:	f7f4 fe5c 	bl	8000554 <__aeabi_i2d>
 800b89c:	4632      	mov	r2, r6
 800b89e:	463b      	mov	r3, r7
 800b8a0:	f7f4 fec2 	bl	8000628 <__aeabi_dmul>
 800b8a4:	4b84      	ldr	r3, [pc, #528]	; (800bab8 <__kernel_rem_pio2+0x698>)
 800b8a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f7f4 feba 	bl	8000628 <__aeabi_dmul>
 800b8b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	460f      	mov	r7, r1
 800b8bc:	e70f      	b.n	800b6de <__kernel_rem_pio2+0x2be>
 800b8be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b8c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b8c6:	f7f4 feaf 	bl	8000628 <__aeabi_dmul>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8d2:	f7f4 fcf3 	bl	80002bc <__adddf3>
 800b8d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8da:	f108 0801 	add.w	r8, r8, #1
 800b8de:	9b02      	ldr	r3, [sp, #8]
 800b8e0:	4598      	cmp	r8, r3
 800b8e2:	dc01      	bgt.n	800b8e8 <__kernel_rem_pio2+0x4c8>
 800b8e4:	45b8      	cmp	r8, r7
 800b8e6:	ddea      	ble.n	800b8be <__kernel_rem_pio2+0x49e>
 800b8e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b8ec:	ab4a      	add	r3, sp, #296	; 0x128
 800b8ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b8f2:	ed87 7b00 	vstr	d7, [r7]
 800b8f6:	3e01      	subs	r6, #1
 800b8f8:	e6f8      	b.n	800b6ec <__kernel_rem_pio2+0x2cc>
 800b8fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	dc0b      	bgt.n	800b918 <__kernel_rem_pio2+0x4f8>
 800b900:	2b00      	cmp	r3, #0
 800b902:	dc35      	bgt.n	800b970 <__kernel_rem_pio2+0x550>
 800b904:	d059      	beq.n	800b9ba <__kernel_rem_pio2+0x59a>
 800b906:	9b04      	ldr	r3, [sp, #16]
 800b908:	f003 0007 	and.w	r0, r3, #7
 800b90c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b910:	ecbd 8b02 	vpop	{d8}
 800b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d1f3      	bne.n	800b906 <__kernel_rem_pio2+0x4e6>
 800b91e:	ab4a      	add	r3, sp, #296	; 0x128
 800b920:	4423      	add	r3, r4
 800b922:	9306      	str	r3, [sp, #24]
 800b924:	461c      	mov	r4, r3
 800b926:	469a      	mov	sl, r3
 800b928:	9502      	str	r5, [sp, #8]
 800b92a:	9b02      	ldr	r3, [sp, #8]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b932:	dc6b      	bgt.n	800ba0c <__kernel_rem_pio2+0x5ec>
 800b934:	46aa      	mov	sl, r5
 800b936:	f1ba 0f01 	cmp.w	sl, #1
 800b93a:	f1a4 0408 	sub.w	r4, r4, #8
 800b93e:	f300 8085 	bgt.w	800ba4c <__kernel_rem_pio2+0x62c>
 800b942:	9c06      	ldr	r4, [sp, #24]
 800b944:	2000      	movs	r0, #0
 800b946:	3408      	adds	r4, #8
 800b948:	2100      	movs	r1, #0
 800b94a:	2d01      	cmp	r5, #1
 800b94c:	f300 809d 	bgt.w	800ba8a <__kernel_rem_pio2+0x66a>
 800b950:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b954:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b958:	f1bb 0f00 	cmp.w	fp, #0
 800b95c:	f040 809b 	bne.w	800ba96 <__kernel_rem_pio2+0x676>
 800b960:	9b01      	ldr	r3, [sp, #4]
 800b962:	e9c3 5600 	strd	r5, r6, [r3]
 800b966:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b96a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b96e:	e7ca      	b.n	800b906 <__kernel_rem_pio2+0x4e6>
 800b970:	3408      	adds	r4, #8
 800b972:	ab4a      	add	r3, sp, #296	; 0x128
 800b974:	441c      	add	r4, r3
 800b976:	462e      	mov	r6, r5
 800b978:	2000      	movs	r0, #0
 800b97a:	2100      	movs	r1, #0
 800b97c:	2e00      	cmp	r6, #0
 800b97e:	da36      	bge.n	800b9ee <__kernel_rem_pio2+0x5ce>
 800b980:	f1bb 0f00 	cmp.w	fp, #0
 800b984:	d039      	beq.n	800b9fa <__kernel_rem_pio2+0x5da>
 800b986:	4602      	mov	r2, r0
 800b988:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b98c:	9c01      	ldr	r4, [sp, #4]
 800b98e:	e9c4 2300 	strd	r2, r3, [r4]
 800b992:	4602      	mov	r2, r0
 800b994:	460b      	mov	r3, r1
 800b996:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b99a:	f7f4 fc8d 	bl	80002b8 <__aeabi_dsub>
 800b99e:	ae4c      	add	r6, sp, #304	; 0x130
 800b9a0:	2401      	movs	r4, #1
 800b9a2:	42a5      	cmp	r5, r4
 800b9a4:	da2c      	bge.n	800ba00 <__kernel_rem_pio2+0x5e0>
 800b9a6:	f1bb 0f00 	cmp.w	fp, #0
 800b9aa:	d002      	beq.n	800b9b2 <__kernel_rem_pio2+0x592>
 800b9ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	9b01      	ldr	r3, [sp, #4]
 800b9b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b9b8:	e7a5      	b.n	800b906 <__kernel_rem_pio2+0x4e6>
 800b9ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b9be:	eb0d 0403 	add.w	r4, sp, r3
 800b9c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	2d00      	cmp	r5, #0
 800b9cc:	da09      	bge.n	800b9e2 <__kernel_rem_pio2+0x5c2>
 800b9ce:	f1bb 0f00 	cmp.w	fp, #0
 800b9d2:	d002      	beq.n	800b9da <__kernel_rem_pio2+0x5ba>
 800b9d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9d8:	4619      	mov	r1, r3
 800b9da:	9b01      	ldr	r3, [sp, #4]
 800b9dc:	e9c3 0100 	strd	r0, r1, [r3]
 800b9e0:	e791      	b.n	800b906 <__kernel_rem_pio2+0x4e6>
 800b9e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9e6:	f7f4 fc69 	bl	80002bc <__adddf3>
 800b9ea:	3d01      	subs	r5, #1
 800b9ec:	e7ed      	b.n	800b9ca <__kernel_rem_pio2+0x5aa>
 800b9ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b9f2:	f7f4 fc63 	bl	80002bc <__adddf3>
 800b9f6:	3e01      	subs	r6, #1
 800b9f8:	e7c0      	b.n	800b97c <__kernel_rem_pio2+0x55c>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	e7c5      	b.n	800b98c <__kernel_rem_pio2+0x56c>
 800ba00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ba04:	f7f4 fc5a 	bl	80002bc <__adddf3>
 800ba08:	3401      	adds	r4, #1
 800ba0a:	e7ca      	b.n	800b9a2 <__kernel_rem_pio2+0x582>
 800ba0c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ba10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ba14:	9b02      	ldr	r3, [sp, #8]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	9302      	str	r3, [sp, #8]
 800ba1a:	4632      	mov	r2, r6
 800ba1c:	463b      	mov	r3, r7
 800ba1e:	4640      	mov	r0, r8
 800ba20:	4649      	mov	r1, r9
 800ba22:	f7f4 fc4b 	bl	80002bc <__adddf3>
 800ba26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4640      	mov	r0, r8
 800ba30:	4649      	mov	r1, r9
 800ba32:	f7f4 fc41 	bl	80002b8 <__aeabi_dsub>
 800ba36:	4632      	mov	r2, r6
 800ba38:	463b      	mov	r3, r7
 800ba3a:	f7f4 fc3f 	bl	80002bc <__adddf3>
 800ba3e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ba42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba46:	ed8a 7b00 	vstr	d7, [sl]
 800ba4a:	e76e      	b.n	800b92a <__kernel_rem_pio2+0x50a>
 800ba4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ba50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ba54:	4640      	mov	r0, r8
 800ba56:	4632      	mov	r2, r6
 800ba58:	463b      	mov	r3, r7
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	f7f4 fc2e 	bl	80002bc <__adddf3>
 800ba60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4640      	mov	r0, r8
 800ba6a:	4649      	mov	r1, r9
 800ba6c:	f7f4 fc24 	bl	80002b8 <__aeabi_dsub>
 800ba70:	4632      	mov	r2, r6
 800ba72:	463b      	mov	r3, r7
 800ba74:	f7f4 fc22 	bl	80002bc <__adddf3>
 800ba78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba80:	ed84 7b00 	vstr	d7, [r4]
 800ba84:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba88:	e755      	b.n	800b936 <__kernel_rem_pio2+0x516>
 800ba8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ba8e:	f7f4 fc15 	bl	80002bc <__adddf3>
 800ba92:	3d01      	subs	r5, #1
 800ba94:	e759      	b.n	800b94a <__kernel_rem_pio2+0x52a>
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	9a01      	ldr	r2, [sp, #4]
 800ba9a:	601d      	str	r5, [r3, #0]
 800ba9c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800baa0:	605c      	str	r4, [r3, #4]
 800baa2:	609f      	str	r7, [r3, #8]
 800baa4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800baa8:	60d3      	str	r3, [r2, #12]
 800baaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baae:	6110      	str	r0, [r2, #16]
 800bab0:	6153      	str	r3, [r2, #20]
 800bab2:	e728      	b.n	800b906 <__kernel_rem_pio2+0x4e6>
 800bab4:	41700000 	.word	0x41700000
 800bab8:	3e700000 	.word	0x3e700000
 800babc:	00000000 	.word	0x00000000

0800bac0 <__kernel_sin>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	ed2d 8b04 	vpush	{d8-d9}
 800bac8:	eeb0 8a41 	vmov.f32	s16, s2
 800bacc:	eef0 8a61 	vmov.f32	s17, s3
 800bad0:	ec55 4b10 	vmov	r4, r5, d0
 800bad4:	b083      	sub	sp, #12
 800bad6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bada:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bade:	9001      	str	r0, [sp, #4]
 800bae0:	da06      	bge.n	800baf0 <__kernel_sin+0x30>
 800bae2:	ee10 0a10 	vmov	r0, s0
 800bae6:	4629      	mov	r1, r5
 800bae8:	f7f5 f84e 	bl	8000b88 <__aeabi_d2iz>
 800baec:	2800      	cmp	r0, #0
 800baee:	d051      	beq.n	800bb94 <__kernel_sin+0xd4>
 800baf0:	4622      	mov	r2, r4
 800baf2:	462b      	mov	r3, r5
 800baf4:	4620      	mov	r0, r4
 800baf6:	4629      	mov	r1, r5
 800baf8:	f7f4 fd96 	bl	8000628 <__aeabi_dmul>
 800bafc:	4682      	mov	sl, r0
 800bafe:	468b      	mov	fp, r1
 800bb00:	4602      	mov	r2, r0
 800bb02:	460b      	mov	r3, r1
 800bb04:	4620      	mov	r0, r4
 800bb06:	4629      	mov	r1, r5
 800bb08:	f7f4 fd8e 	bl	8000628 <__aeabi_dmul>
 800bb0c:	a341      	add	r3, pc, #260	; (adr r3, 800bc14 <__kernel_sin+0x154>)
 800bb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb12:	4680      	mov	r8, r0
 800bb14:	4689      	mov	r9, r1
 800bb16:	4650      	mov	r0, sl
 800bb18:	4659      	mov	r1, fp
 800bb1a:	f7f4 fd85 	bl	8000628 <__aeabi_dmul>
 800bb1e:	a33f      	add	r3, pc, #252	; (adr r3, 800bc1c <__kernel_sin+0x15c>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f7f4 fbc8 	bl	80002b8 <__aeabi_dsub>
 800bb28:	4652      	mov	r2, sl
 800bb2a:	465b      	mov	r3, fp
 800bb2c:	f7f4 fd7c 	bl	8000628 <__aeabi_dmul>
 800bb30:	a33c      	add	r3, pc, #240	; (adr r3, 800bc24 <__kernel_sin+0x164>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f7f4 fbc1 	bl	80002bc <__adddf3>
 800bb3a:	4652      	mov	r2, sl
 800bb3c:	465b      	mov	r3, fp
 800bb3e:	f7f4 fd73 	bl	8000628 <__aeabi_dmul>
 800bb42:	a33a      	add	r3, pc, #232	; (adr r3, 800bc2c <__kernel_sin+0x16c>)
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 fbb6 	bl	80002b8 <__aeabi_dsub>
 800bb4c:	4652      	mov	r2, sl
 800bb4e:	465b      	mov	r3, fp
 800bb50:	f7f4 fd6a 	bl	8000628 <__aeabi_dmul>
 800bb54:	a337      	add	r3, pc, #220	; (adr r3, 800bc34 <__kernel_sin+0x174>)
 800bb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5a:	f7f4 fbaf 	bl	80002bc <__adddf3>
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	b9eb      	cbnz	r3, 800bba2 <__kernel_sin+0xe2>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	4650      	mov	r0, sl
 800bb6c:	4659      	mov	r1, fp
 800bb6e:	f7f4 fd5b 	bl	8000628 <__aeabi_dmul>
 800bb72:	a325      	add	r3, pc, #148	; (adr r3, 800bc08 <__kernel_sin+0x148>)
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f7f4 fb9e 	bl	80002b8 <__aeabi_dsub>
 800bb7c:	4642      	mov	r2, r8
 800bb7e:	464b      	mov	r3, r9
 800bb80:	f7f4 fd52 	bl	8000628 <__aeabi_dmul>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4620      	mov	r0, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	f7f4 fb96 	bl	80002bc <__adddf3>
 800bb90:	4604      	mov	r4, r0
 800bb92:	460d      	mov	r5, r1
 800bb94:	ec45 4b10 	vmov	d0, r4, r5
 800bb98:	b003      	add	sp, #12
 800bb9a:	ecbd 8b04 	vpop	{d8-d9}
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba2:	4b1b      	ldr	r3, [pc, #108]	; (800bc10 <__kernel_sin+0x150>)
 800bba4:	ec51 0b18 	vmov	r0, r1, d8
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f7f4 fd3d 	bl	8000628 <__aeabi_dmul>
 800bbae:	4632      	mov	r2, r6
 800bbb0:	ec41 0b19 	vmov	d9, r0, r1
 800bbb4:	463b      	mov	r3, r7
 800bbb6:	4640      	mov	r0, r8
 800bbb8:	4649      	mov	r1, r9
 800bbba:	f7f4 fd35 	bl	8000628 <__aeabi_dmul>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	ec51 0b19 	vmov	r0, r1, d9
 800bbc6:	f7f4 fb77 	bl	80002b8 <__aeabi_dsub>
 800bbca:	4652      	mov	r2, sl
 800bbcc:	465b      	mov	r3, fp
 800bbce:	f7f4 fd2b 	bl	8000628 <__aeabi_dmul>
 800bbd2:	ec53 2b18 	vmov	r2, r3, d8
 800bbd6:	f7f4 fb6f 	bl	80002b8 <__aeabi_dsub>
 800bbda:	a30b      	add	r3, pc, #44	; (adr r3, 800bc08 <__kernel_sin+0x148>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	460f      	mov	r7, r1
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	f7f4 fd1e 	bl	8000628 <__aeabi_dmul>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	f7f4 fb62 	bl	80002bc <__adddf3>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	4629      	mov	r1, r5
 800bc00:	f7f4 fb5a 	bl	80002b8 <__aeabi_dsub>
 800bc04:	e7c4      	b.n	800bb90 <__kernel_sin+0xd0>
 800bc06:	bf00      	nop
 800bc08:	55555549 	.word	0x55555549
 800bc0c:	3fc55555 	.word	0x3fc55555
 800bc10:	3fe00000 	.word	0x3fe00000
 800bc14:	5acfd57c 	.word	0x5acfd57c
 800bc18:	3de5d93a 	.word	0x3de5d93a
 800bc1c:	8a2b9ceb 	.word	0x8a2b9ceb
 800bc20:	3e5ae5e6 	.word	0x3e5ae5e6
 800bc24:	57b1fe7d 	.word	0x57b1fe7d
 800bc28:	3ec71de3 	.word	0x3ec71de3
 800bc2c:	19c161d5 	.word	0x19c161d5
 800bc30:	3f2a01a0 	.word	0x3f2a01a0
 800bc34:	1110f8a6 	.word	0x1110f8a6
 800bc38:	3f811111 	.word	0x3f811111

0800bc3c <with_errno>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	4604      	mov	r4, r0
 800bc40:	460d      	mov	r5, r1
 800bc42:	4616      	mov	r6, r2
 800bc44:	f7f9 fcf4 	bl	8005630 <__errno>
 800bc48:	4629      	mov	r1, r5
 800bc4a:	6006      	str	r6, [r0, #0]
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	bd70      	pop	{r4, r5, r6, pc}

0800bc50 <xflow>:
 800bc50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc52:	4614      	mov	r4, r2
 800bc54:	461d      	mov	r5, r3
 800bc56:	b108      	cbz	r0, 800bc5c <xflow+0xc>
 800bc58:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bc5c:	e9cd 2300 	strd	r2, r3, [sp]
 800bc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc64:	4620      	mov	r0, r4
 800bc66:	4629      	mov	r1, r5
 800bc68:	f7f4 fcde 	bl	8000628 <__aeabi_dmul>
 800bc6c:	2222      	movs	r2, #34	; 0x22
 800bc6e:	b003      	add	sp, #12
 800bc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc74:	f7ff bfe2 	b.w	800bc3c <with_errno>

0800bc78 <__math_uflow>:
 800bc78:	b508      	push	{r3, lr}
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc80:	f7ff ffe6 	bl	800bc50 <xflow>
 800bc84:	ec41 0b10 	vmov	d0, r0, r1
 800bc88:	bd08      	pop	{r3, pc}

0800bc8a <__math_oflow>:
 800bc8a:	b508      	push	{r3, lr}
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bc92:	f7ff ffdd 	bl	800bc50 <xflow>
 800bc96:	ec41 0b10 	vmov	d0, r0, r1
 800bc9a:	bd08      	pop	{r3, pc}
 800bc9c:	0000      	movs	r0, r0
	...

0800bca0 <atan>:
 800bca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	ec55 4b10 	vmov	r4, r5, d0
 800bca8:	4bc3      	ldr	r3, [pc, #780]	; (800bfb8 <atan+0x318>)
 800bcaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bcae:	429e      	cmp	r6, r3
 800bcb0:	46ab      	mov	fp, r5
 800bcb2:	dd18      	ble.n	800bce6 <atan+0x46>
 800bcb4:	4bc1      	ldr	r3, [pc, #772]	; (800bfbc <atan+0x31c>)
 800bcb6:	429e      	cmp	r6, r3
 800bcb8:	dc01      	bgt.n	800bcbe <atan+0x1e>
 800bcba:	d109      	bne.n	800bcd0 <atan+0x30>
 800bcbc:	b144      	cbz	r4, 800bcd0 <atan+0x30>
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	462b      	mov	r3, r5
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	f7f4 faf9 	bl	80002bc <__adddf3>
 800bcca:	4604      	mov	r4, r0
 800bccc:	460d      	mov	r5, r1
 800bcce:	e006      	b.n	800bcde <atan+0x3e>
 800bcd0:	f1bb 0f00 	cmp.w	fp, #0
 800bcd4:	f300 8131 	bgt.w	800bf3a <atan+0x29a>
 800bcd8:	a59b      	add	r5, pc, #620	; (adr r5, 800bf48 <atan+0x2a8>)
 800bcda:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bcde:	ec45 4b10 	vmov	d0, r4, r5
 800bce2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce6:	4bb6      	ldr	r3, [pc, #728]	; (800bfc0 <atan+0x320>)
 800bce8:	429e      	cmp	r6, r3
 800bcea:	dc14      	bgt.n	800bd16 <atan+0x76>
 800bcec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bcf0:	429e      	cmp	r6, r3
 800bcf2:	dc0d      	bgt.n	800bd10 <atan+0x70>
 800bcf4:	a396      	add	r3, pc, #600	; (adr r3, 800bf50 <atan+0x2b0>)
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	ee10 0a10 	vmov	r0, s0
 800bcfe:	4629      	mov	r1, r5
 800bd00:	f7f4 fadc 	bl	80002bc <__adddf3>
 800bd04:	4baf      	ldr	r3, [pc, #700]	; (800bfc4 <atan+0x324>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	f7f4 ff1e 	bl	8000b48 <__aeabi_dcmpgt>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d1e6      	bne.n	800bcde <atan+0x3e>
 800bd10:	f04f 3aff 	mov.w	sl, #4294967295
 800bd14:	e02b      	b.n	800bd6e <atan+0xce>
 800bd16:	f000 f963 	bl	800bfe0 <fabs>
 800bd1a:	4bab      	ldr	r3, [pc, #684]	; (800bfc8 <atan+0x328>)
 800bd1c:	429e      	cmp	r6, r3
 800bd1e:	ec55 4b10 	vmov	r4, r5, d0
 800bd22:	f300 80bf 	bgt.w	800bea4 <atan+0x204>
 800bd26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bd2a:	429e      	cmp	r6, r3
 800bd2c:	f300 80a0 	bgt.w	800be70 <atan+0x1d0>
 800bd30:	ee10 2a10 	vmov	r2, s0
 800bd34:	ee10 0a10 	vmov	r0, s0
 800bd38:	462b      	mov	r3, r5
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	f7f4 fabe 	bl	80002bc <__adddf3>
 800bd40:	4ba0      	ldr	r3, [pc, #640]	; (800bfc4 <atan+0x324>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	f7f4 fab8 	bl	80002b8 <__aeabi_dsub>
 800bd48:	2200      	movs	r2, #0
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd52:	4620      	mov	r0, r4
 800bd54:	4629      	mov	r1, r5
 800bd56:	f7f4 fab1 	bl	80002bc <__adddf3>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4630      	mov	r0, r6
 800bd60:	4639      	mov	r1, r7
 800bd62:	f7f4 fd8b 	bl	800087c <__aeabi_ddiv>
 800bd66:	f04f 0a00 	mov.w	sl, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	460d      	mov	r5, r1
 800bd6e:	4622      	mov	r2, r4
 800bd70:	462b      	mov	r3, r5
 800bd72:	4620      	mov	r0, r4
 800bd74:	4629      	mov	r1, r5
 800bd76:	f7f4 fc57 	bl	8000628 <__aeabi_dmul>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	4680      	mov	r8, r0
 800bd80:	4689      	mov	r9, r1
 800bd82:	f7f4 fc51 	bl	8000628 <__aeabi_dmul>
 800bd86:	a374      	add	r3, pc, #464	; (adr r3, 800bf58 <atan+0x2b8>)
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	460f      	mov	r7, r1
 800bd90:	f7f4 fc4a 	bl	8000628 <__aeabi_dmul>
 800bd94:	a372      	add	r3, pc, #456	; (adr r3, 800bf60 <atan+0x2c0>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	f7f4 fa8f 	bl	80002bc <__adddf3>
 800bd9e:	4632      	mov	r2, r6
 800bda0:	463b      	mov	r3, r7
 800bda2:	f7f4 fc41 	bl	8000628 <__aeabi_dmul>
 800bda6:	a370      	add	r3, pc, #448	; (adr r3, 800bf68 <atan+0x2c8>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f7f4 fa86 	bl	80002bc <__adddf3>
 800bdb0:	4632      	mov	r2, r6
 800bdb2:	463b      	mov	r3, r7
 800bdb4:	f7f4 fc38 	bl	8000628 <__aeabi_dmul>
 800bdb8:	a36d      	add	r3, pc, #436	; (adr r3, 800bf70 <atan+0x2d0>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f7f4 fa7d 	bl	80002bc <__adddf3>
 800bdc2:	4632      	mov	r2, r6
 800bdc4:	463b      	mov	r3, r7
 800bdc6:	f7f4 fc2f 	bl	8000628 <__aeabi_dmul>
 800bdca:	a36b      	add	r3, pc, #428	; (adr r3, 800bf78 <atan+0x2d8>)
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	f7f4 fa74 	bl	80002bc <__adddf3>
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	463b      	mov	r3, r7
 800bdd8:	f7f4 fc26 	bl	8000628 <__aeabi_dmul>
 800bddc:	a368      	add	r3, pc, #416	; (adr r3, 800bf80 <atan+0x2e0>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	f7f4 fa6b 	bl	80002bc <__adddf3>
 800bde6:	4642      	mov	r2, r8
 800bde8:	464b      	mov	r3, r9
 800bdea:	f7f4 fc1d 	bl	8000628 <__aeabi_dmul>
 800bdee:	a366      	add	r3, pc, #408	; (adr r3, 800bf88 <atan+0x2e8>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	4689      	mov	r9, r1
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	f7f4 fc14 	bl	8000628 <__aeabi_dmul>
 800be00:	a363      	add	r3, pc, #396	; (adr r3, 800bf90 <atan+0x2f0>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 fa57 	bl	80002b8 <__aeabi_dsub>
 800be0a:	4632      	mov	r2, r6
 800be0c:	463b      	mov	r3, r7
 800be0e:	f7f4 fc0b 	bl	8000628 <__aeabi_dmul>
 800be12:	a361      	add	r3, pc, #388	; (adr r3, 800bf98 <atan+0x2f8>)
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	f7f4 fa4e 	bl	80002b8 <__aeabi_dsub>
 800be1c:	4632      	mov	r2, r6
 800be1e:	463b      	mov	r3, r7
 800be20:	f7f4 fc02 	bl	8000628 <__aeabi_dmul>
 800be24:	a35e      	add	r3, pc, #376	; (adr r3, 800bfa0 <atan+0x300>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	f7f4 fa45 	bl	80002b8 <__aeabi_dsub>
 800be2e:	4632      	mov	r2, r6
 800be30:	463b      	mov	r3, r7
 800be32:	f7f4 fbf9 	bl	8000628 <__aeabi_dmul>
 800be36:	a35c      	add	r3, pc, #368	; (adr r3, 800bfa8 <atan+0x308>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	f7f4 fa3c 	bl	80002b8 <__aeabi_dsub>
 800be40:	4632      	mov	r2, r6
 800be42:	463b      	mov	r3, r7
 800be44:	f7f4 fbf0 	bl	8000628 <__aeabi_dmul>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4640      	mov	r0, r8
 800be4e:	4649      	mov	r1, r9
 800be50:	f7f4 fa34 	bl	80002bc <__adddf3>
 800be54:	4622      	mov	r2, r4
 800be56:	462b      	mov	r3, r5
 800be58:	f7f4 fbe6 	bl	8000628 <__aeabi_dmul>
 800be5c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	d14b      	bne.n	800befe <atan+0x25e>
 800be66:	4620      	mov	r0, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	f7f4 fa25 	bl	80002b8 <__aeabi_dsub>
 800be6e:	e72c      	b.n	800bcca <atan+0x2a>
 800be70:	ee10 0a10 	vmov	r0, s0
 800be74:	4b53      	ldr	r3, [pc, #332]	; (800bfc4 <atan+0x324>)
 800be76:	2200      	movs	r2, #0
 800be78:	4629      	mov	r1, r5
 800be7a:	f7f4 fa1d 	bl	80002b8 <__aeabi_dsub>
 800be7e:	4b51      	ldr	r3, [pc, #324]	; (800bfc4 <atan+0x324>)
 800be80:	4606      	mov	r6, r0
 800be82:	460f      	mov	r7, r1
 800be84:	2200      	movs	r2, #0
 800be86:	4620      	mov	r0, r4
 800be88:	4629      	mov	r1, r5
 800be8a:	f7f4 fa17 	bl	80002bc <__adddf3>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4630      	mov	r0, r6
 800be94:	4639      	mov	r1, r7
 800be96:	f7f4 fcf1 	bl	800087c <__aeabi_ddiv>
 800be9a:	f04f 0a01 	mov.w	sl, #1
 800be9e:	4604      	mov	r4, r0
 800bea0:	460d      	mov	r5, r1
 800bea2:	e764      	b.n	800bd6e <atan+0xce>
 800bea4:	4b49      	ldr	r3, [pc, #292]	; (800bfcc <atan+0x32c>)
 800bea6:	429e      	cmp	r6, r3
 800bea8:	da1d      	bge.n	800bee6 <atan+0x246>
 800beaa:	ee10 0a10 	vmov	r0, s0
 800beae:	4b48      	ldr	r3, [pc, #288]	; (800bfd0 <atan+0x330>)
 800beb0:	2200      	movs	r2, #0
 800beb2:	4629      	mov	r1, r5
 800beb4:	f7f4 fa00 	bl	80002b8 <__aeabi_dsub>
 800beb8:	4b45      	ldr	r3, [pc, #276]	; (800bfd0 <atan+0x330>)
 800beba:	4606      	mov	r6, r0
 800bebc:	460f      	mov	r7, r1
 800bebe:	2200      	movs	r2, #0
 800bec0:	4620      	mov	r0, r4
 800bec2:	4629      	mov	r1, r5
 800bec4:	f7f4 fbb0 	bl	8000628 <__aeabi_dmul>
 800bec8:	4b3e      	ldr	r3, [pc, #248]	; (800bfc4 <atan+0x324>)
 800beca:	2200      	movs	r2, #0
 800becc:	f7f4 f9f6 	bl	80002bc <__adddf3>
 800bed0:	4602      	mov	r2, r0
 800bed2:	460b      	mov	r3, r1
 800bed4:	4630      	mov	r0, r6
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 fcd0 	bl	800087c <__aeabi_ddiv>
 800bedc:	f04f 0a02 	mov.w	sl, #2
 800bee0:	4604      	mov	r4, r0
 800bee2:	460d      	mov	r5, r1
 800bee4:	e743      	b.n	800bd6e <atan+0xce>
 800bee6:	462b      	mov	r3, r5
 800bee8:	ee10 2a10 	vmov	r2, s0
 800beec:	4939      	ldr	r1, [pc, #228]	; (800bfd4 <atan+0x334>)
 800beee:	2000      	movs	r0, #0
 800bef0:	f7f4 fcc4 	bl	800087c <__aeabi_ddiv>
 800bef4:	f04f 0a03 	mov.w	sl, #3
 800bef8:	4604      	mov	r4, r0
 800befa:	460d      	mov	r5, r1
 800befc:	e737      	b.n	800bd6e <atan+0xce>
 800befe:	4b36      	ldr	r3, [pc, #216]	; (800bfd8 <atan+0x338>)
 800bf00:	4e36      	ldr	r6, [pc, #216]	; (800bfdc <atan+0x33c>)
 800bf02:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bf06:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bf0a:	e9da 2300 	ldrd	r2, r3, [sl]
 800bf0e:	f7f4 f9d3 	bl	80002b8 <__aeabi_dsub>
 800bf12:	4622      	mov	r2, r4
 800bf14:	462b      	mov	r3, r5
 800bf16:	f7f4 f9cf 	bl	80002b8 <__aeabi_dsub>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bf22:	f7f4 f9c9 	bl	80002b8 <__aeabi_dsub>
 800bf26:	f1bb 0f00 	cmp.w	fp, #0
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	460d      	mov	r5, r1
 800bf2e:	f6bf aed6 	bge.w	800bcde <atan+0x3e>
 800bf32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf36:	461d      	mov	r5, r3
 800bf38:	e6d1      	b.n	800bcde <atan+0x3e>
 800bf3a:	a51d      	add	r5, pc, #116	; (adr r5, 800bfb0 <atan+0x310>)
 800bf3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf40:	e6cd      	b.n	800bcde <atan+0x3e>
 800bf42:	bf00      	nop
 800bf44:	f3af 8000 	nop.w
 800bf48:	54442d18 	.word	0x54442d18
 800bf4c:	bff921fb 	.word	0xbff921fb
 800bf50:	8800759c 	.word	0x8800759c
 800bf54:	7e37e43c 	.word	0x7e37e43c
 800bf58:	e322da11 	.word	0xe322da11
 800bf5c:	3f90ad3a 	.word	0x3f90ad3a
 800bf60:	24760deb 	.word	0x24760deb
 800bf64:	3fa97b4b 	.word	0x3fa97b4b
 800bf68:	a0d03d51 	.word	0xa0d03d51
 800bf6c:	3fb10d66 	.word	0x3fb10d66
 800bf70:	c54c206e 	.word	0xc54c206e
 800bf74:	3fb745cd 	.word	0x3fb745cd
 800bf78:	920083ff 	.word	0x920083ff
 800bf7c:	3fc24924 	.word	0x3fc24924
 800bf80:	5555550d 	.word	0x5555550d
 800bf84:	3fd55555 	.word	0x3fd55555
 800bf88:	2c6a6c2f 	.word	0x2c6a6c2f
 800bf8c:	bfa2b444 	.word	0xbfa2b444
 800bf90:	52defd9a 	.word	0x52defd9a
 800bf94:	3fadde2d 	.word	0x3fadde2d
 800bf98:	af749a6d 	.word	0xaf749a6d
 800bf9c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bfa0:	fe231671 	.word	0xfe231671
 800bfa4:	3fbc71c6 	.word	0x3fbc71c6
 800bfa8:	9998ebc4 	.word	0x9998ebc4
 800bfac:	3fc99999 	.word	0x3fc99999
 800bfb0:	54442d18 	.word	0x54442d18
 800bfb4:	3ff921fb 	.word	0x3ff921fb
 800bfb8:	440fffff 	.word	0x440fffff
 800bfbc:	7ff00000 	.word	0x7ff00000
 800bfc0:	3fdbffff 	.word	0x3fdbffff
 800bfc4:	3ff00000 	.word	0x3ff00000
 800bfc8:	3ff2ffff 	.word	0x3ff2ffff
 800bfcc:	40038000 	.word	0x40038000
 800bfd0:	3ff80000 	.word	0x3ff80000
 800bfd4:	bff00000 	.word	0xbff00000
 800bfd8:	0800ccd0 	.word	0x0800ccd0
 800bfdc:	0800ccb0 	.word	0x0800ccb0

0800bfe0 <fabs>:
 800bfe0:	ec51 0b10 	vmov	r0, r1, d0
 800bfe4:	ee10 2a10 	vmov	r2, s0
 800bfe8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfec:	ec43 2b10 	vmov	d0, r2, r3
 800bff0:	4770      	bx	lr

0800bff2 <finite>:
 800bff2:	b082      	sub	sp, #8
 800bff4:	ed8d 0b00 	vstr	d0, [sp]
 800bff8:	9801      	ldr	r0, [sp, #4]
 800bffa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bffe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c002:	0fc0      	lsrs	r0, r0, #31
 800c004:	b002      	add	sp, #8
 800c006:	4770      	bx	lr

0800c008 <floor>:
 800c008:	ec51 0b10 	vmov	r0, r1, d0
 800c00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c010:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c014:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c018:	2e13      	cmp	r6, #19
 800c01a:	ee10 5a10 	vmov	r5, s0
 800c01e:	ee10 8a10 	vmov	r8, s0
 800c022:	460c      	mov	r4, r1
 800c024:	dc32      	bgt.n	800c08c <floor+0x84>
 800c026:	2e00      	cmp	r6, #0
 800c028:	da14      	bge.n	800c054 <floor+0x4c>
 800c02a:	a333      	add	r3, pc, #204	; (adr r3, 800c0f8 <floor+0xf0>)
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	f7f4 f944 	bl	80002bc <__adddf3>
 800c034:	2200      	movs	r2, #0
 800c036:	2300      	movs	r3, #0
 800c038:	f7f4 fd86 	bl	8000b48 <__aeabi_dcmpgt>
 800c03c:	b138      	cbz	r0, 800c04e <floor+0x46>
 800c03e:	2c00      	cmp	r4, #0
 800c040:	da57      	bge.n	800c0f2 <floor+0xea>
 800c042:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c046:	431d      	orrs	r5, r3
 800c048:	d001      	beq.n	800c04e <floor+0x46>
 800c04a:	4c2d      	ldr	r4, [pc, #180]	; (800c100 <floor+0xf8>)
 800c04c:	2500      	movs	r5, #0
 800c04e:	4621      	mov	r1, r4
 800c050:	4628      	mov	r0, r5
 800c052:	e025      	b.n	800c0a0 <floor+0x98>
 800c054:	4f2b      	ldr	r7, [pc, #172]	; (800c104 <floor+0xfc>)
 800c056:	4137      	asrs	r7, r6
 800c058:	ea01 0307 	and.w	r3, r1, r7
 800c05c:	4303      	orrs	r3, r0
 800c05e:	d01f      	beq.n	800c0a0 <floor+0x98>
 800c060:	a325      	add	r3, pc, #148	; (adr r3, 800c0f8 <floor+0xf0>)
 800c062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c066:	f7f4 f929 	bl	80002bc <__adddf3>
 800c06a:	2200      	movs	r2, #0
 800c06c:	2300      	movs	r3, #0
 800c06e:	f7f4 fd6b 	bl	8000b48 <__aeabi_dcmpgt>
 800c072:	2800      	cmp	r0, #0
 800c074:	d0eb      	beq.n	800c04e <floor+0x46>
 800c076:	2c00      	cmp	r4, #0
 800c078:	bfbe      	ittt	lt
 800c07a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c07e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c082:	19a4      	addlt	r4, r4, r6
 800c084:	ea24 0407 	bic.w	r4, r4, r7
 800c088:	2500      	movs	r5, #0
 800c08a:	e7e0      	b.n	800c04e <floor+0x46>
 800c08c:	2e33      	cmp	r6, #51	; 0x33
 800c08e:	dd0b      	ble.n	800c0a8 <floor+0xa0>
 800c090:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c094:	d104      	bne.n	800c0a0 <floor+0x98>
 800c096:	ee10 2a10 	vmov	r2, s0
 800c09a:	460b      	mov	r3, r1
 800c09c:	f7f4 f90e 	bl	80002bc <__adddf3>
 800c0a0:	ec41 0b10 	vmov	d0, r0, r1
 800c0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b0:	fa23 f707 	lsr.w	r7, r3, r7
 800c0b4:	4207      	tst	r7, r0
 800c0b6:	d0f3      	beq.n	800c0a0 <floor+0x98>
 800c0b8:	a30f      	add	r3, pc, #60	; (adr r3, 800c0f8 <floor+0xf0>)
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	f7f4 f8fd 	bl	80002bc <__adddf3>
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f7f4 fd3f 	bl	8000b48 <__aeabi_dcmpgt>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d0bf      	beq.n	800c04e <floor+0x46>
 800c0ce:	2c00      	cmp	r4, #0
 800c0d0:	da02      	bge.n	800c0d8 <floor+0xd0>
 800c0d2:	2e14      	cmp	r6, #20
 800c0d4:	d103      	bne.n	800c0de <floor+0xd6>
 800c0d6:	3401      	adds	r4, #1
 800c0d8:	ea25 0507 	bic.w	r5, r5, r7
 800c0dc:	e7b7      	b.n	800c04e <floor+0x46>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c0e4:	fa03 f606 	lsl.w	r6, r3, r6
 800c0e8:	4435      	add	r5, r6
 800c0ea:	4545      	cmp	r5, r8
 800c0ec:	bf38      	it	cc
 800c0ee:	18e4      	addcc	r4, r4, r3
 800c0f0:	e7f2      	b.n	800c0d8 <floor+0xd0>
 800c0f2:	2500      	movs	r5, #0
 800c0f4:	462c      	mov	r4, r5
 800c0f6:	e7aa      	b.n	800c04e <floor+0x46>
 800c0f8:	8800759c 	.word	0x8800759c
 800c0fc:	7e37e43c 	.word	0x7e37e43c
 800c100:	bff00000 	.word	0xbff00000
 800c104:	000fffff 	.word	0x000fffff

0800c108 <scalbn>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	ec55 4b10 	vmov	r4, r5, d0
 800c10e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c112:	4606      	mov	r6, r0
 800c114:	462b      	mov	r3, r5
 800c116:	b99a      	cbnz	r2, 800c140 <scalbn+0x38>
 800c118:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c11c:	4323      	orrs	r3, r4
 800c11e:	d036      	beq.n	800c18e <scalbn+0x86>
 800c120:	4b39      	ldr	r3, [pc, #228]	; (800c208 <scalbn+0x100>)
 800c122:	4629      	mov	r1, r5
 800c124:	ee10 0a10 	vmov	r0, s0
 800c128:	2200      	movs	r2, #0
 800c12a:	f7f4 fa7d 	bl	8000628 <__aeabi_dmul>
 800c12e:	4b37      	ldr	r3, [pc, #220]	; (800c20c <scalbn+0x104>)
 800c130:	429e      	cmp	r6, r3
 800c132:	4604      	mov	r4, r0
 800c134:	460d      	mov	r5, r1
 800c136:	da10      	bge.n	800c15a <scalbn+0x52>
 800c138:	a32b      	add	r3, pc, #172	; (adr r3, 800c1e8 <scalbn+0xe0>)
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	e03a      	b.n	800c1b6 <scalbn+0xae>
 800c140:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c144:	428a      	cmp	r2, r1
 800c146:	d10c      	bne.n	800c162 <scalbn+0x5a>
 800c148:	ee10 2a10 	vmov	r2, s0
 800c14c:	4620      	mov	r0, r4
 800c14e:	4629      	mov	r1, r5
 800c150:	f7f4 f8b4 	bl	80002bc <__adddf3>
 800c154:	4604      	mov	r4, r0
 800c156:	460d      	mov	r5, r1
 800c158:	e019      	b.n	800c18e <scalbn+0x86>
 800c15a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c15e:	460b      	mov	r3, r1
 800c160:	3a36      	subs	r2, #54	; 0x36
 800c162:	4432      	add	r2, r6
 800c164:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c168:	428a      	cmp	r2, r1
 800c16a:	dd08      	ble.n	800c17e <scalbn+0x76>
 800c16c:	2d00      	cmp	r5, #0
 800c16e:	a120      	add	r1, pc, #128	; (adr r1, 800c1f0 <scalbn+0xe8>)
 800c170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c174:	da1c      	bge.n	800c1b0 <scalbn+0xa8>
 800c176:	a120      	add	r1, pc, #128	; (adr r1, 800c1f8 <scalbn+0xf0>)
 800c178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c17c:	e018      	b.n	800c1b0 <scalbn+0xa8>
 800c17e:	2a00      	cmp	r2, #0
 800c180:	dd08      	ble.n	800c194 <scalbn+0x8c>
 800c182:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c186:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c18a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c18e:	ec45 4b10 	vmov	d0, r4, r5
 800c192:	bd70      	pop	{r4, r5, r6, pc}
 800c194:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c198:	da19      	bge.n	800c1ce <scalbn+0xc6>
 800c19a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c19e:	429e      	cmp	r6, r3
 800c1a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c1a4:	dd0a      	ble.n	800c1bc <scalbn+0xb4>
 800c1a6:	a112      	add	r1, pc, #72	; (adr r1, 800c1f0 <scalbn+0xe8>)
 800c1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e2      	bne.n	800c176 <scalbn+0x6e>
 800c1b0:	a30f      	add	r3, pc, #60	; (adr r3, 800c1f0 <scalbn+0xe8>)
 800c1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b6:	f7f4 fa37 	bl	8000628 <__aeabi_dmul>
 800c1ba:	e7cb      	b.n	800c154 <scalbn+0x4c>
 800c1bc:	a10a      	add	r1, pc, #40	; (adr r1, 800c1e8 <scalbn+0xe0>)
 800c1be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d0b8      	beq.n	800c138 <scalbn+0x30>
 800c1c6:	a10e      	add	r1, pc, #56	; (adr r1, 800c200 <scalbn+0xf8>)
 800c1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1cc:	e7b4      	b.n	800c138 <scalbn+0x30>
 800c1ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1d2:	3236      	adds	r2, #54	; 0x36
 800c1d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4b0c      	ldr	r3, [pc, #48]	; (800c210 <scalbn+0x108>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	e7e8      	b.n	800c1b6 <scalbn+0xae>
 800c1e4:	f3af 8000 	nop.w
 800c1e8:	c2f8f359 	.word	0xc2f8f359
 800c1ec:	01a56e1f 	.word	0x01a56e1f
 800c1f0:	8800759c 	.word	0x8800759c
 800c1f4:	7e37e43c 	.word	0x7e37e43c
 800c1f8:	8800759c 	.word	0x8800759c
 800c1fc:	fe37e43c 	.word	0xfe37e43c
 800c200:	c2f8f359 	.word	0xc2f8f359
 800c204:	81a56e1f 	.word	0x81a56e1f
 800c208:	43500000 	.word	0x43500000
 800c20c:	ffff3cb0 	.word	0xffff3cb0
 800c210:	3c900000 	.word	0x3c900000

0800c214 <_init>:
 800c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c216:	bf00      	nop
 800c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21a:	bc08      	pop	{r3}
 800c21c:	469e      	mov	lr, r3
 800c21e:	4770      	bx	lr

0800c220 <_fini>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr
