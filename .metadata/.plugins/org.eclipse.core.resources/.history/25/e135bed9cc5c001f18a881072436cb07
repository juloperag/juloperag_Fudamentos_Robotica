
A_Semaphore_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e68  08006e68  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e70  08006e70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000136c4  20000074  08006eec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013738  08006eec  00023738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009362  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c91  00000000  00000000  00029406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002b098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002b920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a18  00000000  00000000  0002c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aada  00000000  00000000  0003dae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f738  00000000  00000000  000485c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a7cfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d44  00000000  00000000  000a7d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ca4 	.word	0x08006ca4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006ca4 	.word	0x08006ca4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9a7 	b.w	80005f0 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f835 	bl	8000320 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f828 	bl	8000320 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f817 	bl	8000320 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f809 	bl	8000320 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
//------Definicion de variables
volatile uint8_t printOneTime = 0;
volatile uint16_t randomNumber = 0;

int main(void)
{
 80005f4:	b590      	push	{r4, r7, lr}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af02      	add	r7, sp, #8
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	73fb      	strb	r3, [r7, #15]
	configPLL(clock);
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fb93 	bl	8004d2c <configPLL>
	//Configuracion inicial del sistema
	initSystem();
 8000606:	f000 f89d 	bl	8000744 <initSystem>
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
 800060a:	4b40      	ldr	r3, [pc, #256]	; (800070c <main+0x118>)
 800060c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000610:	4a3e      	ldr	r2, [pc, #248]	; (800070c <main+0x118>)
 8000612:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000616:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <main+0x11c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a3c      	ldr	r2, [pc, #240]	; (8000710 <main+0x11c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6013      	str	r3, [r2, #0]

	//-----------------------Inicio cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//-------------------Configuracion Task--------------
	//Tarea Counting
	xReturned = xTaskCreate(
 8000626:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <main+0x120>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2302      	movs	r3, #2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	4939      	ldr	r1, [pc, #228]	; (8000718 <main+0x124>)
 8000634:	4839      	ldr	r0, [pc, #228]	; (800071c <main+0x128>)
 8000636:	f001 fa29 	bl	8001a8c <xTaskCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a38      	ldr	r2, [pc, #224]	; (8000720 <main+0x12c>)
 800063e:	6013      	str	r3, [r2, #0]
	                    "Task_Counting",      /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Counting);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8000640:	4b37      	ldr	r3, [pc, #220]	; (8000720 <main+0x12c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d00a      	beq.n	800065e <main+0x6a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800065a:	bf00      	nop
 800065c:	e7fe      	b.n	800065c <main+0x68>
	//Tarea Print
	xReturned = xTaskCreate(
 800065e:	4b31      	ldr	r3, [pc, #196]	; (8000724 <main+0x130>)
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2302      	movs	r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	22c8      	movs	r2, #200	; 0xc8
 800066a:	492f      	ldr	r1, [pc, #188]	; (8000728 <main+0x134>)
 800066c:	482f      	ldr	r0, [pc, #188]	; (800072c <main+0x138>)
 800066e:	f001 fa0d 	bl	8001a8c <xTaskCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <main+0x12c>)
 8000676:	6013      	str	r3, [r2, #0]
	                    "Task_Print",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						NULL,    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask_Print);      /* Used to pass out the created task's handle. */
	configASSERT(xReturned == pdPASS);
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <main+0x12c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d00a      	beq.n	8000696 <main+0xa2>
        __asm volatile
 8000680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000684:	f383 8811 	msr	BASEPRI, r3
 8000688:	f3bf 8f6f 	isb	sy
 800068c:	f3bf 8f4f 	dsb	sy
 8000690:	607b      	str	r3, [r7, #4]
    }
 8000692:	bf00      	nop
 8000694:	e7fe      	b.n	8000694 <main+0xa0>


	//-------------------Configuracion Queue--------------
	//cola para enviar datos por consola
	xQueue_Print = xQueueCreate(10, sizeof( size_t) );
 8000696:	2200      	movs	r2, #0
 8000698:	2104      	movs	r1, #4
 800069a:	200a      	movs	r0, #10
 800069c:	f000 fb8a 	bl	8000db4 <xQueueGenericCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a23      	ldr	r2, [pc, #140]	; (8000730 <main+0x13c>)
 80006a4:	6013      	str	r3, [r2, #0]
	configASSERT(xQueue_Print != NULL);
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <main+0x13c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d10a      	bne.n	80006c4 <main+0xd0>
        __asm volatile
 80006ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b2:	f383 8811 	msr	BASEPRI, r3
 80006b6:	f3bf 8f6f 	isb	sy
 80006ba:	f3bf 8f4f 	dsb	sy
 80006be:	603b      	str	r3, [r7, #0]
    }
 80006c0:	bf00      	nop
 80006c2:	e7fe      	b.n	80006c2 <main+0xce>

	//-------------------Configuracion Semaphore-------------
	//Semaphore que indica los working a realizar, Binario o Counting
	//xBinarySemaphore_Working = xSemaphoreCreateBinary();
	xCountingSemaphore_Working = xSemaphoreCreateCounting(10,0);
 80006c4:	2100      	movs	r1, #0
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 fbf6 	bl	8000eb8 <xQueueCreateCountingSemaphore>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a19      	ldr	r2, [pc, #100]	; (8000734 <main+0x140>)
 80006d0:	6013      	str	r3, [r2, #0]

	//-------------------Configuracion Timer--------------
	//Software Timer para el blink
	xHandlerTimer_Led = xTimerCreate("led_timer", pdMS_TO_TICKS(350), pdTRUE, 0, led_state_callback);
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <main+0x144>)
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <main+0x148>)
 80006e0:	f002 f96e 	bl	80029c0 <xTimerCreate>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <main+0x14c>)
 80006e8:	6013      	str	r3, [r2, #0]
	xTimerStart(xHandlerTimer_Led, portMAX_DELAY);
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <main+0x14c>)
 80006ec:	681c      	ldr	r4, [r3, #0]
 80006ee:	f001 fc0f 	bl	8001f10 <xTaskGetTickCount>
 80006f2:	4602      	mov	r2, r0
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	2101      	movs	r1, #1
 80006fe:	4620      	mov	r0, r4
 8000700:	f002 f9ba 	bl	8002a78 <xTimerGenericCommand>

	//-------------------Inicializacion Scheduler--------------
	//Inicia le Scheduler a funcionar
	vTaskStartScheduler();
 8000704:	f001 fb08 	bl	8001d18 <vTaskStartScheduler>
	//-----------------------Fin cofiguracion de los elemntos del kernel de FreeRTOS----------------------

	//Si el scheduler se inicia correctamente no se ejecutada este while
	while(1)
	{
		__NOP();
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <main+0x114>
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	e0001000 	.word	0xe0001000
 8000714:	200000d8 	.word	0x200000d8
 8000718:	08006cbc 	.word	0x08006cbc
 800071c:	08000a59 	.word	0x08000a59
 8000720:	200000d4 	.word	0x200000d4
 8000724:	200000dc 	.word	0x200000dc
 8000728:	08006ccc 	.word	0x08006ccc
 800072c:	08000add 	.word	0x08000add
 8000730:	200000e0 	.word	0x200000e0
 8000734:	200000e4 	.word	0x200000e4
 8000738:	08000b0d 	.word	0x08000b0d
 800073c:	08006cd8 	.word	0x08006cd8
 8000740:	200000e8 	.word	0x200000e8

08000744 <initSystem>:
}


//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void initSystem(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af02      	add	r7, sp, #8
	//---------------------------------Inicio de Configuracion GPIOx---------------------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_BlinkyPin.pGPIOx = GPIOA;
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <initSystem+0xcc>)
 800074c:	4a31      	ldr	r2, [pc, #196]	; (8000814 <initSystem+0xd0>)
 800074e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <initSystem+0xcc>)
 8000752:	2205      	movs	r2, #5
 8000754:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8000756:	2300      	movs	r3, #0
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	2300      	movs	r3, #0
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	482a      	ldr	r0, [pc, #168]	; (8000810 <initSystem+0xcc>)
 8000766:	f004 f97d 	bl	8004a64 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_BlinkyPin);
 800076a:	4829      	ldr	r0, [pc, #164]	; (8000810 <initSystem+0xcc>)
 800076c:	f004 f99c 	bl	8004aa8 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_TX.pGPIOx = GPIOA;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <initSystem+0xd4>)
 8000772:	4a28      	ldr	r2, [pc, #160]	; (8000814 <initSystem+0xd0>)
 8000774:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <initSystem+0xd4>)
 8000778:	2202      	movs	r2, #2
 800077a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800077c:	2307      	movs	r3, #7
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2300      	movs	r3, #0
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	4823      	ldr	r0, [pc, #140]	; (8000818 <initSystem+0xd4>)
 800078c:	f004 f96a 	bl	8004a64 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_TX);
 8000790:	4821      	ldr	r0, [pc, #132]	; (8000818 <initSystem+0xd4>)
 8000792:	f004 f989 	bl	8004aa8 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_CommTerm_RX.pGPIOx = GPIOA;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <initSystem+0xd8>)
 8000798:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <initSystem+0xd0>)
 800079a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_CommTerm_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <initSystem+0xd8>)
 800079e:	2203      	movs	r2, #3
 80007a0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_CommTerm_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80007a2:	2307      	movs	r3, #7
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2300      	movs	r3, #0
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	2200      	movs	r2, #0
 80007ae:	2102      	movs	r1, #2
 80007b0:	481a      	ldr	r0, [pc, #104]	; (800081c <initSystem+0xd8>)
 80007b2:	f004 f957 	bl	8004a64 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_CommTerm_RX);
 80007b6:	4819      	ldr	r0, [pc, #100]	; (800081c <initSystem+0xd8>)
 80007b8:	f004 f976 	bl	8004aa8 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_CommTerm.ptrUSARTx = USART2;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <initSystem+0xdc>)
 80007be:	4a19      	ldr	r2, [pc, #100]	; (8000824 <initSystem+0xe0>)
 80007c0:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_CommTerm.USART_Config.USART_mode = USART_MODE_TX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <initSystem+0xdc>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
	handler_USART_CommTerm.USART_Config.USART_baudrate = USART_BAUDRATE_115200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <initSystem+0xdc>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	705a      	strb	r2, [r3, #1]
	handler_USART_CommTerm.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <initSystem+0xdc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	709a      	strb	r2, [r3, #2]
	handler_USART_CommTerm.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <initSystem+0xdc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	70da      	strb	r2, [r3, #3]
	handler_USART_CommTerm.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_DISABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <initSystem+0xdc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
	handler_USART_CommTerm.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <initSystem+0xdc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_CommTerm);
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <initSystem+0xdc>)
 80007e8:	f004 fb70 	bl	8004ecc <USART_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC13----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_Button.pGPIOx = GPIOC;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <initSystem+0xe4>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <initSystem+0xe8>)
 80007f0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_Button.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <initSystem+0xe4>)
 80007f4:	220d      	movs	r2, #13
 80007f6:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	handler_EXTI_Button.pGPIOHandler = &handler_GPIO_Button;
 80007f8:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <initSystem+0xec>)
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <initSystem+0xe4>)
 80007fc:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	handler_EXTI_Button.edgeType = EXTERNAL_INTERRUPP_FALLING_EDGE;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <initSystem+0xec>)
 8000800:	2200      	movs	r2, #0
 8000802:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(&handler_EXTI_Button);
 8000804:	480a      	ldr	r0, [pc, #40]	; (8000830 <initSystem+0xec>)
 8000806:	f003 f885 	bl	8003914 <extInt_Config>

	//-------------------Fin de Configuracion EXTIx-----------------------

}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000090 	.word	0x20000090
 8000814:	40020000 	.word	0x40020000
 8000818:	200000b0 	.word	0x200000b0
 800081c:	200000bc 	.word	0x200000bc
 8000820:	200000c8 	.word	0x200000c8
 8000824:	40004400 	.word	0x40004400
 8000828:	2000009c 	.word	0x2000009c
 800082c:	40020800 	.word	0x40020800
 8000830:	200000a8 	.word	0x200000a8

08000834 <callback_extInt13>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------UserButton--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13
void callback_extInt13(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	/* Activar la variable printOneTime*/
	printOneTime = 1;
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <callback_extInt13+0x60>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
	/* Generar un numero aleatorio */
	randomNumber = getRandomNumber();
 8000840:	f000 f830 	bl	80008a4 <getRandomNumber>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <callback_extInt13+0x64>)
 800084a:	801a      	strh	r2, [r3, #0]

	BaseType_t pxHigherPriorityTaskWoken;
	pxHigherPriorityTaskWoken = pdFALSE;
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]

	/* Hacer un for que se ejecute tantas veces como el numero aleatorio lo indica
	 * y allí cargar el semaforo (ejemplo binario y ejemplo counter)*/
   	for (uint16_t ii = 0; ii < randomNumber; ii++) {
 8000850:	2300      	movs	r3, #0
 8000852:	80fb      	strh	r3, [r7, #6]
 8000854:	e009      	b.n	800086a <callback_extInt13+0x36>
   		/*cargar el semaforo e indicar que hay un cambio en las funciones.*/
   		xSemaphoreGiveFromISR(xCountingSemaphore_Working, &pxHigherPriorityTaskWoken);
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <callback_extInt13+0x68>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	463a      	mov	r2, r7
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fd06 	bl	8001270 <xQueueGiveFromISR>
   	for (uint16_t ii = 0; ii < randomNumber; ii++) {
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	3301      	adds	r3, #1
 8000868:	80fb      	strh	r3, [r7, #6]
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <callback_extInt13+0x64>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	88fa      	ldrh	r2, [r7, #6]
 8000872:	429a      	cmp	r2, r3
 8000874:	d3ef      	bcc.n	8000856 <callback_extInt13+0x22>
	}
   	//Realizamos cambio de contexto
   	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d007      	beq.n	800088c <callback_extInt13+0x58>
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <callback_extInt13+0x6c>)
 800087e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	f3bf 8f4f 	dsb	sy
 8000888:	f3bf 8f6f 	isb	sy
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000ec 	.word	0x200000ec
 8000898:	200000ee 	.word	0x200000ee
 800089c:	200000e4 	.word	0x200000e4
 80008a0:	e000ed04 	.word	0xe000ed04

080008a4 <getRandomNumber>:

//-------------------------Inicio definicion funciones Adicionales----------------

//Generamos un numero Ramdom
uint16_t getRandomNumber(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	srand( xTaskGetTickCount() );
 80008aa:	f001 fb31 	bl	8001f10 <xTaskGetTickCount>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 ffb5 	bl	8005820 <srand>
	int randomnumber;
	randomnumber = (rand() % 10) +1;
 80008b6:	f004 ffe1 	bl	800587c <rand>
 80008ba:	4601      	mov	r1, r0
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <getRandomNumber+0x40>)
 80008be:	fb83 2301 	smull	r2, r3, r3, r1
 80008c2:	109a      	asrs	r2, r3, #2
 80008c4:	17cb      	asrs	r3, r1, #31
 80008c6:	1ad2      	subs	r2, r2, r3
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1aca      	subs	r2, r1, r3
 80008d2:	1c53      	adds	r3, r2, #1
 80008d4:	607b      	str	r3, [r7, #4]
	return (uint16_t)randomnumber;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	b29b      	uxth	r3, r3
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	66666667 	.word	0x66666667

080008e8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <ITM_SendChar+0x48>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <ITM_SendChar+0x48>)
 80008f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008fc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <ITM_SendChar+0x4c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <ITM_SendChar+0x4c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800090a:	bf00      	nop
 800090c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f8      	beq.n	800090c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800091a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	6013      	str	r3, [r2, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000edfc 	.word	0xe000edfc
 8000934:	e0000e00 	.word	0xe0000e00

08000938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
	return 1;
 800093c:	2301      	movs	r3, #1
}
 800093e:	4618      	mov	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <_kill>:

int _kill(int pid, int sig)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000952:	f004 ff25 	bl	80057a0 <__errno>
 8000956:	4603      	mov	r3, r0
 8000958:	2216      	movs	r2, #22
 800095a:	601a      	str	r2, [r3, #0]
	return -1;
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <_exit>:

void _exit (int status)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ffe7 	bl	8000948 <_kill>
	while (1) {}		/* Make sure we hang here */
 800097a:	e7fe      	b.n	800097a <_exit+0x12>

0800097c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e00a      	b.n	80009a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800098e:	f3af 8000 	nop.w
 8000992:	4601      	mov	r1, r0
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	b2ca      	uxtb	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbf0      	blt.n	800098e <_read+0x12>
	}

return len;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	e009      	b.n	80009dc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff89 	bl	80008e8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	3301      	adds	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dbf1      	blt.n	80009c8 <_write+0x12>
	}
	return len;
 80009e4:	687b      	ldr	r3, [r7, #4]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <_close>:

int _close(int file)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
	return -1;
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a16:	605a      	str	r2, [r3, #4]
	return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <_isatty>:

int _isatty(int file)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <vTask_Test_counting>:

//-----------------------Inicio definicion funciones de las Task---------------------------

//--------Tarea de Counting---------------------
void vTask_Test_counting( void * pvParameters )
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

	const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 1000 );
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	60fb      	str	r3, [r7, #12]

    while(1)
    {
    	/* En este if() el sistema espera que se tenga un elemento disponible en el semaforo
    	 * cuando esta disponible actual -> imprime un mensaje que dice "working"*/
    	if (xSemaphoreTake(xCountingSemaphore_Working, xMaxExpectedBlockTime) == pdPASS) {
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <vTask_Test_counting+0x68>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fd7b 	bl	8001568 <xQueueSemaphoreTake>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d1f6      	bne.n	8000a66 <vTask_Test_counting+0xe>

    		/* Este bloque es para imprimir solo 1 vez el valor del numero aleatorio*/
    		if(printOneTime == 1){
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <vTask_Test_counting+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d115      	bne.n	8000aae <vTask_Test_counting+0x56>
    			sprintf(auxMsg, "counter i = %d\n", randomNumber);
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <vTask_Test_counting+0x70>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4910      	ldr	r1, [pc, #64]	; (8000acc <vTask_Test_counting+0x74>)
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <vTask_Test_counting+0x78>)
 8000a8e:	f004 ff33 	bl	80058f8 <siprintf>
    			char *dummy = auxMsg;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <vTask_Test_counting+0x78>)
 8000a94:	60bb      	str	r3, [r7, #8]
    			xQueueSend(xQueue_Print, &dummy, portMAX_DELAY);
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <vTask_Test_counting+0x7c>)
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	f107 0108 	add.w	r1, r7, #8
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	f000 fa3c 	bl	8000f20 <xQueueGenericSend>
    			printOneTime = 0;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <vTask_Test_counting+0x6c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    		}
    		/* Imprime las peticiones de trabajo que genera el numero aleatorio en la interupcion*/
			xQueueSend(xQueue_Print, &msg_working, portMAX_DELAY);
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <vTask_Test_counting+0x7c>)
 8000ab0:	6818      	ldr	r0, [r3, #0]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	4907      	ldr	r1, [pc, #28]	; (8000ad8 <vTask_Test_counting+0x80>)
 8000aba:	f000 fa31 	bl	8000f20 <xQueueGenericSend>
    	if (xSemaphoreTake(xCountingSemaphore_Working, xMaxExpectedBlockTime) == pdPASS) {
 8000abe:	e7d2      	b.n	8000a66 <vTask_Test_counting+0xe>
 8000ac0:	200000e4 	.word	0x200000e4
 8000ac4:	200000ec 	.word	0x200000ec
 8000ac8:	200000ee 	.word	0x200000ee
 8000acc:	08006cf8 	.word	0x08006cf8
 8000ad0:	200000f0 	.word	0x200000f0
 8000ad4:	200000e0 	.word	0x200000e0
 8000ad8:	20000004 	.word	0x20000004

08000adc <vTask_Print>:



//-------Tarea de Imprimir-------
void vTask_Print(void * pvParameters)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while(1)
	{
		//Se espera por el puntero del mensaje
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <vTask_Print+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f107 010c 	add.w	r1, r7, #12
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fc59 	bl	80013a8 <xQueueReceive>
		//Enviamos por puerto serial dicho mensaje
		writeMsg(&handler_USART_CommTerm, (char *) msg);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4619      	mov	r1, r3
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <vTask_Print+0x2c>)
 8000afc:	f004 fc6b 	bl	80053d6 <writeMsg>
		xQueueReceive(xQueue_Print, &msg, portMAX_DELAY);
 8000b00:	e7f0      	b.n	8000ae4 <vTask_Print+0x8>
 8000b02:	bf00      	nop
 8000b04:	200000e0 	.word	0x200000e0
 8000b08:	200000c8 	.word	0x200000c8

08000b0c <led_state_callback>:


//-----------------------Inicio definicion funciones del Software Timer---------------------------

void led_state_callback(TimerHandle_t xTimer)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	//Cambio estado opuesto Led
	GPIOxTooglePin(&handler_GPIO_BlinkyPin);
 8000b14:	4803      	ldr	r0, [pc, #12]	; (8000b24 <led_state_callback+0x18>)
 8000b16:	f004 f8f1 	bl	8004cfc <GPIOxTooglePin>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000090 	.word	0x20000090

08000b28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b32:	490d      	ldr	r1, [pc, #52]	; (8000b68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <LoopForever+0xe>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b48:	4c0a      	ldr	r4, [pc, #40]	; (8000b74 <LoopForever+0x16>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b56:	f004 fe29 	bl	80057ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff fd4b 	bl	80005f4 <main>

08000b5e <LoopForever>:

LoopForever:
    b LoopForever
 8000b5e:	e7fe      	b.n	8000b5e <LoopForever>
  ldr   r0, =_estack
 8000b60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b6c:	08006e78 	.word	0x08006e78
  ldr r2, =_sbss
 8000b70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b74:	20013738 	.word	0x20013738

08000b78 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b78:	e7fe      	b.n	8000b78 <ADC_IRQHandler>

08000b7a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f103 0208 	add.w	r2, r3, #8
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b92:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f103 0208 	add.w	r2, r3, #8
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f103 0208 	add.w	r2, r3, #8
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c32:	d103      	bne.n	8000c3c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e00c      	b.n	8000c56 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3308      	adds	r3, #8
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	e002      	b.n	8000c4a <vListInsert+0x2e>
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d2f6      	bcs.n	8000c44 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	683a      	ldr	r2, [r7, #0]
 8000c64:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	601a      	str	r2, [r3, #0]
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b085      	sub	sp, #20
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	6892      	ldr	r2, [r2, #8]
 8000ca4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6852      	ldr	r2, [r2, #4]
 8000cae:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d103      	bne.n	8000cc2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10a      	bne.n	8000d0e <xQueueGenericReset+0x2a>
        __asm volatile
 8000cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cfc:	f383 8811 	msr	BASEPRI, r3
 8000d00:	f3bf 8f6f 	isb	sy
 8000d04:	f3bf 8f4f 	dsb	sy
 8000d08:	60bb      	str	r3, [r7, #8]
    }
 8000d0a:	bf00      	nop
 8000d0c:	e7fe      	b.n	8000d0c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8000d0e:	f002 fac3 	bl	8003298 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d1e:	fb01 f303 	mul.w	r3, r1, r3
 8000d22:	441a      	add	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	68f9      	ldr	r1, [r7, #12]
 8000d42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000d44:	fb01 f303 	mul.w	r3, r1, r3
 8000d48:	441a      	add	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	22ff      	movs	r2, #255	; 0xff
 8000d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d114      	bne.n	8000d8e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d01a      	beq.n	8000da2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	3310      	adds	r3, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fa41 	bl	80021f8 <xTaskRemoveFromEventList>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d012      	beq.n	8000da2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <xQueueGenericReset+0xcc>)
 8000d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	f3bf 8f6f 	isb	sy
 8000d8c:	e009      	b.n	8000da2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3310      	adds	r3, #16
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fef1 	bl	8000b7a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3324      	adds	r3, #36	; 0x24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff feec 	bl	8000b7a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000da2:	f002 faa9 	bl	80032f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	e000ed04 	.word	0xe000ed04

08000db4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10a      	bne.n	8000dde <xQueueGenericCreate+0x2a>
        __asm volatile
 8000dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dcc:	f383 8811 	msr	BASEPRI, r3
 8000dd0:	f3bf 8f6f 	isb	sy
 8000dd4:	f3bf 8f4f 	dsb	sy
 8000dd8:	61bb      	str	r3, [r7, #24]
    }
 8000dda:	bf00      	nop
 8000ddc:	e7fe      	b.n	8000ddc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d006      	beq.n	8000dfc <xQueueGenericCreate+0x48>
 8000dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d101      	bne.n	8000e00 <xQueueGenericCreate+0x4c>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <xQueueGenericCreate+0x4e>
 8000e00:	2300      	movs	r3, #0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10a      	bne.n	8000e1c <xQueueGenericCreate+0x68>
        __asm volatile
 8000e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e0a:	f383 8811 	msr	BASEPRI, r3
 8000e0e:	f3bf 8f6f 	isb	sy
 8000e12:	f3bf 8f4f 	dsb	sy
 8000e16:	617b      	str	r3, [r7, #20]
    }
 8000e18:	bf00      	nop
 8000e1a:	e7fe      	b.n	8000e1a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8000e22:	d90a      	bls.n	8000e3a <xQueueGenericCreate+0x86>
        __asm volatile
 8000e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e28:	f383 8811 	msr	BASEPRI, r3
 8000e2c:	f3bf 8f6f 	isb	sy
 8000e30:	f3bf 8f4f 	dsb	sy
 8000e34:	613b      	str	r3, [r7, #16]
    }
 8000e36:	bf00      	nop
 8000e38:	e7fe      	b.n	8000e38 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	3350      	adds	r3, #80	; 0x50
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fb4c 	bl	80034dc <pvPortMalloc>
 8000e44:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00d      	beq.n	8000e68 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
 8000e4e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	3350      	adds	r3, #80	; 0x50
 8000e54:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e56:	79fa      	ldrb	r2, [r7, #7]
 8000e58:	6a3b      	ldr	r3, [r7, #32]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f000 f805 	bl	8000e72 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000e68:	6a3b      	ldr	r3, [r7, #32]
    }
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	60f8      	str	r0, [r7, #12]
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e002      	b.n	8000e94 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	69b8      	ldr	r0, [r7, #24]
 8000ea4:	f7ff ff1e 	bl	8000ce4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10a      	bne.n	8000ede <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 8000ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ecc:	f383 8811 	msr	BASEPRI, r3
 8000ed0:	f3bf 8f6f 	isb	sy
 8000ed4:	f3bf 8f4f 	dsb	sy
 8000ed8:	613b      	str	r3, [r7, #16]
    }
 8000eda:	bf00      	nop
 8000edc:	e7fe      	b.n	8000edc <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d90a      	bls.n	8000efc <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
 8000ef6:	60fb      	str	r3, [r7, #12]
    }
 8000ef8:	bf00      	nop
 8000efa:	e7fe      	b.n	8000efa <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000efc:	2202      	movs	r2, #2
 8000efe:	2100      	movs	r1, #0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff57 	bl	8000db4 <xQueueGenericCreate>
 8000f06:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 8000f14:	697b      	ldr	r3, [r7, #20]
    }
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8000f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10a      	bne.n	8000f52 <xQueueGenericSend+0x32>
        __asm volatile
 8000f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f40:	f383 8811 	msr	BASEPRI, r3
 8000f44:	f3bf 8f6f 	isb	sy
 8000f48:	f3bf 8f4f 	dsb	sy
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8000f4e:	bf00      	nop
 8000f50:	e7fe      	b.n	8000f50 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d103      	bne.n	8000f60 <xQueueGenericSend+0x40>
 8000f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d101      	bne.n	8000f64 <xQueueGenericSend+0x44>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <xQueueGenericSend+0x46>
 8000f64:	2300      	movs	r3, #0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10a      	bne.n	8000f80 <xQueueGenericSend+0x60>
        __asm volatile
 8000f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f6e:	f383 8811 	msr	BASEPRI, r3
 8000f72:	f3bf 8f6f 	isb	sy
 8000f76:	f3bf 8f4f 	dsb	sy
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8000f7c:	bf00      	nop
 8000f7e:	e7fe      	b.n	8000f7e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d103      	bne.n	8000f8e <xQueueGenericSend+0x6e>
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <xQueueGenericSend+0x72>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <xQueueGenericSend+0x74>
 8000f92:	2300      	movs	r3, #0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10a      	bne.n	8000fae <xQueueGenericSend+0x8e>
        __asm volatile
 8000f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f9c:	f383 8811 	msr	BASEPRI, r3
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	f3bf 8f4f 	dsb	sy
 8000fa8:	623b      	str	r3, [r7, #32]
    }
 8000faa:	bf00      	nop
 8000fac:	e7fe      	b.n	8000fac <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000fae:	f001 fabf 	bl	8002530 <xTaskGetSchedulerState>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <xQueueGenericSend+0x9e>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <xQueueGenericSend+0xa2>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <xQueueGenericSend+0xa4>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10a      	bne.n	8000fde <xQueueGenericSend+0xbe>
        __asm volatile
 8000fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fcc:	f383 8811 	msr	BASEPRI, r3
 8000fd0:	f3bf 8f6f 	isb	sy
 8000fd4:	f3bf 8f4f 	dsb	sy
 8000fd8:	61fb      	str	r3, [r7, #28]
    }
 8000fda:	bf00      	nop
 8000fdc:	e7fe      	b.n	8000fdc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000fde:	f002 f95b 	bl	8003298 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d302      	bcc.n	8000ff4 <xQueueGenericSend+0xd4>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d129      	bne.n	8001048 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	68b9      	ldr	r1, [r7, #8]
 8000ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ffa:	f000 fbd9 	bl	80017b0 <prvCopyDataToQueue>
 8000ffe:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	2b00      	cmp	r3, #0
 8001006:	d010      	beq.n	800102a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800100a:	3324      	adds	r3, #36	; 0x24
 800100c:	4618      	mov	r0, r3
 800100e:	f001 f8f3 	bl	80021f8 <xTaskRemoveFromEventList>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001018:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <xQueueGenericSend+0x1f8>)
 800101a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	f3bf 8f4f 	dsb	sy
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	e00a      	b.n	8001040 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800102a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102c:	2b00      	cmp	r3, #0
 800102e:	d007      	beq.n	8001040 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <xQueueGenericSend+0x1f8>)
 8001032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	f3bf 8f4f 	dsb	sy
 800103c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001040:	f002 f95a 	bl	80032f8 <vPortExitCritical>
                return pdPASS;
 8001044:	2301      	movs	r3, #1
 8001046:	e063      	b.n	8001110 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800104e:	f002 f953 	bl	80032f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001052:	2300      	movs	r3, #0
 8001054:	e05c      	b.n	8001110 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001058:	2b00      	cmp	r3, #0
 800105a:	d106      	bne.n	800106a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4618      	mov	r0, r3
 8001062:	f001 f92b 	bl	80022bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001066:	2301      	movs	r3, #1
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800106a:	f002 f945 	bl	80032f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800106e:	f000 fea5 	bl	8001dbc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001072:	f002 f911 	bl	8003298 <vPortEnterCritical>
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800107c:	b25b      	sxtb	r3, r3
 800107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001082:	d103      	bne.n	800108c <xQueueGenericSend+0x16c>
 8001084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001092:	b25b      	sxtb	r3, r3
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d103      	bne.n	80010a2 <xQueueGenericSend+0x182>
 800109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80010a2:	f002 f929 	bl	80032f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80010a6:	1d3a      	adds	r2, r7, #4
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 f91a 	bl	80022e8 <xTaskCheckForTimeOut>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d124      	bne.n	8001104 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80010ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010bc:	f000 fc70 	bl	80019a0 <prvIsQueueFull>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d018      	beq.n	80010f8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80010c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c8:	3310      	adds	r3, #16
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 f842 	bl	8002158 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80010d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010d6:	f000 fbfb 	bl	80018d0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80010da:	f000 fe7d 	bl	8001dd8 <xTaskResumeAll>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f47f af7c 	bne.w	8000fde <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <xQueueGenericSend+0x1f8>)
 80010e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	f3bf 8f4f 	dsb	sy
 80010f2:	f3bf 8f6f 	isb	sy
 80010f6:	e772      	b.n	8000fde <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80010f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010fa:	f000 fbe9 	bl	80018d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80010fe:	f000 fe6b 	bl	8001dd8 <xTaskResumeAll>
 8001102:	e76c      	b.n	8000fde <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001104:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001106:	f000 fbe3 	bl	80018d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800110a:	f000 fe65 	bl	8001dd8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800110e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001110:	4618      	mov	r0, r3
 8001112:	3738      	adds	r7, #56	; 0x38
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	e000ed04 	.word	0xe000ed04

0800111c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b090      	sub	sp, #64	; 0x40
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800112e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10a      	bne.n	800114a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001138:	f383 8811 	msr	BASEPRI, r3
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001146:	bf00      	nop
 8001148:	e7fe      	b.n	8001148 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d103      	bne.n	8001158 <xQueueGenericSendFromISR+0x3c>
 8001150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <xQueueGenericSendFromISR+0x40>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <xQueueGenericSendFromISR+0x42>
 800115c:	2300      	movs	r3, #0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8001162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001166:	f383 8811 	msr	BASEPRI, r3
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001174:	bf00      	nop
 8001176:	e7fe      	b.n	8001176 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d103      	bne.n	8001186 <xQueueGenericSendFromISR+0x6a>
 800117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <xQueueGenericSendFromISR+0x6e>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <xQueueGenericSendFromISR+0x70>
 800118a:	2300      	movs	r3, #0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d10a      	bne.n	80011a6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8001190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001194:	f383 8811 	msr	BASEPRI, r3
 8001198:	f3bf 8f6f 	isb	sy
 800119c:	f3bf 8f4f 	dsb	sy
 80011a0:	623b      	str	r3, [r7, #32]
    }
 80011a2:	bf00      	nop
 80011a4:	e7fe      	b.n	80011a4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80011a6:	f002 f959 	bl	800345c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80011aa:	f3ef 8211 	mrs	r2, BASEPRI
 80011ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b2:	f383 8811 	msr	BASEPRI, r3
 80011b6:	f3bf 8f6f 	isb	sy
 80011ba:	f3bf 8f4f 	dsb	sy
 80011be:	61fa      	str	r2, [r7, #28]
 80011c0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80011c2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80011c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d302      	bcc.n	80011d8 <xQueueGenericSendFromISR+0xbc>
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d13e      	bne.n	8001256 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80011d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80011ee:	f000 fadf 	bl	80017b0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80011f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80011f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fa:	d112      	bne.n	8001222 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	2b00      	cmp	r3, #0
 8001202:	d025      	beq.n	8001250 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001206:	3324      	adds	r3, #36	; 0x24
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fff5 	bl	80021f8 <xTaskRemoveFromEventList>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01d      	beq.n	8001250 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01a      	beq.n	8001250 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e016      	b.n	8001250 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001222:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001226:	2b7f      	cmp	r3, #127	; 0x7f
 8001228:	d10a      	bne.n	8001240 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800122a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800122e:	f383 8811 	msr	BASEPRI, r3
 8001232:	f3bf 8f6f 	isb	sy
 8001236:	f3bf 8f4f 	dsb	sy
 800123a:	617b      	str	r3, [r7, #20]
    }
 800123c:	bf00      	nop
 800123e:	e7fe      	b.n	800123e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001240:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001244:	3301      	adds	r3, #1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	b25a      	sxtb	r2, r3
 800124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800124c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001250:	2301      	movs	r3, #1
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001254:	e001      	b.n	800125a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001256:	2300      	movs	r3, #0
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800125a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001264:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001268:	4618      	mov	r0, r3
 800126a:	3740      	adds	r7, #64	; 0x40
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10a      	bne.n	800129a <xQueueGiveFromISR+0x2a>
        __asm volatile
 8001284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001288:	f383 8811 	msr	BASEPRI, r3
 800128c:	f3bf 8f6f 	isb	sy
 8001290:	f3bf 8f4f 	dsb	sy
 8001294:	623b      	str	r3, [r7, #32]
    }
 8001296:	bf00      	nop
 8001298:	e7fe      	b.n	8001298 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00a      	beq.n	80012b8 <xQueueGiveFromISR+0x48>
        __asm volatile
 80012a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a6:	f383 8811 	msr	BASEPRI, r3
 80012aa:	f3bf 8f6f 	isb	sy
 80012ae:	f3bf 8f4f 	dsb	sy
 80012b2:	61fb      	str	r3, [r7, #28]
    }
 80012b4:	bf00      	nop
 80012b6:	e7fe      	b.n	80012b6 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80012b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d103      	bne.n	80012c8 <xQueueGiveFromISR+0x58>
 80012c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <xQueueGiveFromISR+0x5c>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <xQueueGiveFromISR+0x5e>
 80012cc:	2300      	movs	r3, #0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10a      	bne.n	80012e8 <xQueueGiveFromISR+0x78>
        __asm volatile
 80012d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d6:	f383 8811 	msr	BASEPRI, r3
 80012da:	f3bf 8f6f 	isb	sy
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	61bb      	str	r3, [r7, #24]
    }
 80012e4:	bf00      	nop
 80012e6:	e7fe      	b.n	80012e6 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80012e8:	f002 f8b8 	bl	800345c <vPortValidateInterruptPriority>
        __asm volatile
 80012ec:	f3ef 8211 	mrs	r2, BASEPRI
 80012f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f4:	f383 8811 	msr	BASEPRI, r3
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	f3bf 8f4f 	dsb	sy
 8001300:	617a      	str	r2, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8001304:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001314:	429a      	cmp	r2, r3
 8001316:	d23a      	bcs.n	800138e <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800131e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001328:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800132a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800132e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001332:	d112      	bne.n	800135a <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	2b00      	cmp	r3, #0
 800133a:	d025      	beq.n	8001388 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800133c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133e:	3324      	adds	r3, #36	; 0x24
 8001340:	4618      	mov	r0, r3
 8001342:	f000 ff59 	bl	80021f8 <xTaskRemoveFromEventList>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d01d      	beq.n	8001388 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d01a      	beq.n	8001388 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e016      	b.n	8001388 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800135a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800135e:	2b7f      	cmp	r3, #127	; 0x7f
 8001360:	d10a      	bne.n	8001378 <xQueueGiveFromISR+0x108>
        __asm volatile
 8001362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001366:	f383 8811 	msr	BASEPRI, r3
 800136a:	f3bf 8f6f 	isb	sy
 800136e:	f3bf 8f4f 	dsb	sy
 8001372:	60fb      	str	r3, [r7, #12]
    }
 8001374:	bf00      	nop
 8001376:	e7fe      	b.n	8001376 <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800137c:	3301      	adds	r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	b25a      	sxtb	r2, r3
 8001382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001388:	2301      	movs	r3, #1
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
 800138c:	e001      	b.n	8001392 <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800138e:	2300      	movs	r3, #0
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	f383 8811 	msr	BASEPRI, r3
    }
 800139c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3738      	adds	r7, #56	; 0x38
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10a      	bne.n	80013d8 <xQueueReceive+0x30>
        __asm volatile
 80013c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c6:	f383 8811 	msr	BASEPRI, r3
 80013ca:	f3bf 8f6f 	isb	sy
 80013ce:	f3bf 8f4f 	dsb	sy
 80013d2:	623b      	str	r3, [r7, #32]
    }
 80013d4:	bf00      	nop
 80013d6:	e7fe      	b.n	80013d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d103      	bne.n	80013e6 <xQueueReceive+0x3e>
 80013de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <xQueueReceive+0x42>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <xQueueReceive+0x44>
 80013ea:	2300      	movs	r3, #0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10a      	bne.n	8001406 <xQueueReceive+0x5e>
        __asm volatile
 80013f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013f4:	f383 8811 	msr	BASEPRI, r3
 80013f8:	f3bf 8f6f 	isb	sy
 80013fc:	f3bf 8f4f 	dsb	sy
 8001400:	61fb      	str	r3, [r7, #28]
    }
 8001402:	bf00      	nop
 8001404:	e7fe      	b.n	8001404 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001406:	f001 f893 	bl	8002530 <xTaskGetSchedulerState>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d102      	bne.n	8001416 <xQueueReceive+0x6e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <xQueueReceive+0x72>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <xQueueReceive+0x74>
 800141a:	2300      	movs	r3, #0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10a      	bne.n	8001436 <xQueueReceive+0x8e>
        __asm volatile
 8001420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001424:	f383 8811 	msr	BASEPRI, r3
 8001428:	f3bf 8f6f 	isb	sy
 800142c:	f3bf 8f4f 	dsb	sy
 8001430:	61bb      	str	r3, [r7, #24]
    }
 8001432:	bf00      	nop
 8001434:	e7fe      	b.n	8001434 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001436:	f001 ff2f 	bl	8003298 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	2b00      	cmp	r3, #0
 8001444:	d01f      	beq.n	8001486 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800144a:	f000 fa1b 	bl	8001884 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001454:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00f      	beq.n	800147e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	3310      	adds	r3, #16
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fec8 	bl	80021f8 <xTaskRemoveFromEventList>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <xQueueReceive+0x1bc>)
 8001470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f3bf 8f4f 	dsb	sy
 800147a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800147e:	f001 ff3b 	bl	80032f8 <vPortExitCritical>
                return pdPASS;
 8001482:	2301      	movs	r3, #1
 8001484:	e069      	b.n	800155a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d103      	bne.n	8001494 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800148c:	f001 ff34 	bl	80032f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001490:	2300      	movs	r3, #0
 8001492:	e062      	b.n	800155a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 ff0c 	bl	80022bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80014a8:	f001 ff26 	bl	80032f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80014ac:	f000 fc86 	bl	8001dbc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80014b0:	f001 fef2 	bl	8003298 <vPortEnterCritical>
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d103      	bne.n	80014ca <xQueueReceive+0x122>
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d6:	d103      	bne.n	80014e0 <xQueueReceive+0x138>
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	2200      	movs	r2, #0
 80014dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014e0:	f001 ff0a 	bl	80032f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80014e4:	1d3a      	adds	r2, r7, #4
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 fefb 	bl	80022e8 <xTaskCheckForTimeOut>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d123      	bne.n	8001540 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80014f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014fa:	f000 fa3b 	bl	8001974 <prvIsQueueEmpty>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d017      	beq.n	8001534 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	3324      	adds	r3, #36	; 0x24
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fe23 	bl	8002158 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001514:	f000 f9dc 	bl	80018d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001518:	f000 fc5e 	bl	8001dd8 <xTaskResumeAll>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d189      	bne.n	8001436 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <xQueueReceive+0x1bc>)
 8001524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f3bf 8f4f 	dsb	sy
 800152e:	f3bf 8f6f 	isb	sy
 8001532:	e780      	b.n	8001436 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001536:	f000 f9cb 	bl	80018d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800153a:	f000 fc4d 	bl	8001dd8 <xTaskResumeAll>
 800153e:	e77a      	b.n	8001436 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001542:	f000 f9c5 	bl	80018d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001546:	f000 fc47 	bl	8001dd8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800154a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800154c:	f000 fa12 	bl	8001974 <prvIsQueueEmpty>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	f43f af6f 	beq.w	8001436 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001558:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800155a:	4618      	mov	r0, r3
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000ed04 	.word	0xe000ed04

08001568 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08e      	sub	sp, #56	; 0x38
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001572:	2300      	movs	r3, #0
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10a      	bne.n	800159a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8001584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001588:	f383 8811 	msr	BASEPRI, r3
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f3bf 8f4f 	dsb	sy
 8001594:	623b      	str	r3, [r7, #32]
    }
 8001596:	bf00      	nop
 8001598:	e7fe      	b.n	8001598 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00a      	beq.n	80015b8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80015a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	f3bf 8f6f 	isb	sy
 80015ae:	f3bf 8f4f 	dsb	sy
 80015b2:	61fb      	str	r3, [r7, #28]
    }
 80015b4:	bf00      	nop
 80015b6:	e7fe      	b.n	80015b6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015b8:	f000 ffba 	bl	8002530 <xTaskGetSchedulerState>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <xQueueSemaphoreTake+0x60>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <xQueueSemaphoreTake+0x64>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <xQueueSemaphoreTake+0x66>
 80015cc:	2300      	movs	r3, #0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10a      	bne.n	80015e8 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80015d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015d6:	f383 8811 	msr	BASEPRI, r3
 80015da:	f3bf 8f6f 	isb	sy
 80015de:	f3bf 8f4f 	dsb	sy
 80015e2:	61bb      	str	r3, [r7, #24]
    }
 80015e4:	bf00      	nop
 80015e6:	e7fe      	b.n	80015e6 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015e8:	f001 fe56 	bl	8003298 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d024      	beq.n	8001642 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001608:	f001 f92e 	bl	8002868 <pvTaskIncrementMutexHeldCount>
 800160c:	4602      	mov	r2, r0
 800160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001610:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00f      	beq.n	800163a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	3310      	adds	r3, #16
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fdea 	bl	80021f8 <xTaskRemoveFromEventList>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d007      	beq.n	800163a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800162a:	4b54      	ldr	r3, [pc, #336]	; (800177c <xQueueSemaphoreTake+0x214>)
 800162c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	f3bf 8f4f 	dsb	sy
 8001636:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800163a:	f001 fe5d 	bl	80032f8 <vPortExitCritical>
                return pdPASS;
 800163e:	2301      	movs	r3, #1
 8001640:	e097      	b.n	8001772 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00a      	beq.n	8001664 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800164e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001652:	f383 8811 	msr	BASEPRI, r3
 8001656:	f3bf 8f6f 	isb	sy
 800165a:	f3bf 8f4f 	dsb	sy
 800165e:	617b      	str	r3, [r7, #20]
    }
 8001660:	bf00      	nop
 8001662:	e7fe      	b.n	8001662 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001664:	f001 fe48 	bl	80032f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001668:	2300      	movs	r3, #0
 800166a:	e082      	b.n	8001772 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fe20 	bl	80022bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800167c:	2301      	movs	r3, #1
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001680:	f001 fe3a 	bl	80032f8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001684:	f000 fb9a 	bl	8001dbc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001688:	f001 fe06 	bl	8003298 <vPortEnterCritical>
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001698:	d103      	bne.n	80016a2 <xQueueSemaphoreTake+0x13a>
 800169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ae:	d103      	bne.n	80016b8 <xQueueSemaphoreTake+0x150>
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016b8:	f001 fe1e 	bl	80032f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016bc:	463a      	mov	r2, r7
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fe0f 	bl	80022e8 <xTaskCheckForTimeOut>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d132      	bne.n	8001736 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80016d2:	f000 f94f 	bl	8001974 <prvIsQueueEmpty>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d026      	beq.n	800172a <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80016e4:	f001 fdd8 	bl	8003298 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 ff3d 	bl	800256c <xTaskPriorityInherit>
 80016f2:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80016f4:	f001 fe00 	bl	80032f8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	3324      	adds	r3, #36	; 0x24
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fd29 	bl	8002158 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001708:	f000 f8e2 	bl	80018d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800170c:	f000 fb64 	bl	8001dd8 <xTaskResumeAll>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	f47f af68 	bne.w	80015e8 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <xQueueSemaphoreTake+0x214>)
 800171a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	f3bf 8f6f 	isb	sy
 8001728:	e75e      	b.n	80015e8 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800172a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800172c:	f000 f8d0 	bl	80018d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001730:	f000 fb52 	bl	8001dd8 <xTaskResumeAll>
 8001734:	e758      	b.n	80015e8 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8001736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001738:	f000 f8ca 	bl	80018d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800173c:	f000 fb4c 	bl	8001dd8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001742:	f000 f917 	bl	8001974 <prvIsQueueEmpty>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	f43f af4d 	beq.w	80015e8 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00d      	beq.n	8001770 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8001754:	f001 fda0 	bl	8003298 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800175a:	f000 f811 	bl	8001780 <prvGetDisinheritPriorityAfterTimeout>
 800175e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fff0 	bl	800274c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800176c:	f001 fdc4 	bl	80032f8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001770:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001772:	4618      	mov	r0, r3
 8001774:	3738      	adds	r7, #56	; 0x38
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000ed04 	.word	0xe000ed04

08001780 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1c3 0305 	rsb	r3, r3, #5
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e001      	b.n	80017a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80017a2:	68fb      	ldr	r3, [r7, #12]
    }
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10d      	bne.n	80017ea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d14d      	bne.n	8001872 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 ff3c 	bl	8002658 <xTaskPriorityDisinherit>
 80017e0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	e043      	b.n	8001872 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d119      	bne.n	8001824 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6858      	ldr	r0, [r3, #4]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	461a      	mov	r2, r3
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	f003 fffa 	bl	80057f4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	441a      	add	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	429a      	cmp	r2, r3
 8001818:	d32b      	bcc.n	8001872 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	e026      	b.n	8001872 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	68d8      	ldr	r0, [r3, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	461a      	mov	r2, r3
 800182e:	68b9      	ldr	r1, [r7, #8]
 8001830:	f003 ffe0 	bl	80057f4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	425b      	negs	r3, r3
 800183e:	441a      	add	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	425b      	negs	r3, r3
 800185a:	441a      	add	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d105      	bne.n	8001872 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	3b01      	subs	r3, #1
 8001870:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800187a:	697b      	ldr	r3, [r7, #20]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d018      	beq.n	80018c8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	441a      	add	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d303      	bcc.n	80018b8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68d9      	ldr	r1, [r3, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	461a      	mov	r2, r3
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f003 ff96 	bl	80057f4 <memcpy>
    }
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80018d8:	f001 fcde 	bl	8003298 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018e2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018e4:	e011      	b.n	800190a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3324      	adds	r3, #36	; 0x24
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fc80 	bl	80021f8 <xTaskRemoveFromEventList>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80018fe:	f000 fd59 	bl	80023b4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	3b01      	subs	r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	2b00      	cmp	r3, #0
 8001910:	dce9      	bgt.n	80018e6 <prvUnlockQueue+0x16>
 8001912:	e000      	b.n	8001916 <prvUnlockQueue+0x46>
                        break;
 8001914:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	22ff      	movs	r2, #255	; 0xff
 800191a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800191e:	f001 fceb 	bl	80032f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001922:	f001 fcb9 	bl	8003298 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800192c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800192e:	e011      	b.n	8001954 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d012      	beq.n	800195e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3310      	adds	r3, #16
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fc5b 	bl	80021f8 <xTaskRemoveFromEventList>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001948:	f000 fd34 	bl	80023b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800194c:	7bbb      	ldrb	r3, [r7, #14]
 800194e:	3b01      	subs	r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001958:	2b00      	cmp	r3, #0
 800195a:	dce9      	bgt.n	8001930 <prvUnlockQueue+0x60>
 800195c:	e000      	b.n	8001960 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800195e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	22ff      	movs	r2, #255	; 0xff
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001968:	f001 fcc6 	bl	80032f8 <vPortExitCritical>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800197c:	f001 fc8c 	bl	8003298 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001988:	2301      	movs	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e001      	b.n	8001992 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001992:	f001 fcb1 	bl	80032f8 <vPortExitCritical>

    return xReturn;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80019a8:	f001 fc76 	bl	8003298 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d102      	bne.n	80019be <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80019b8:	2301      	movs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e001      	b.n	80019c2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80019c2:	f001 fc99 	bl	80032f8 <vPortExitCritical>

    return xReturn;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e014      	b.n	8001a0a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <vQueueAddToRegistry+0x50>)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10b      	bne.n	8001a04 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <vQueueAddToRegistry+0x50>)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <vQueueAddToRegistry+0x50>)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8001a02:	e006      	b.n	8001a12 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	d9e7      	bls.n	80019e0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000130 	.word	0x20000130

08001a24 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001a34:	f001 fc30 	bl	8003298 <vPortEnterCritical>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d103      	bne.n	8001a4e <vQueueWaitForMessageRestricted+0x2a>
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5a:	d103      	bne.n	8001a64 <vQueueWaitForMessageRestricted+0x40>
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a64:	f001 fc48 	bl	80032f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d106      	bne.n	8001a7e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3324      	adds	r3, #36	; 0x24
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	68b9      	ldr	r1, [r7, #8]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fb91 	bl	80021a0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff26 	bl	80018d0 <prvUnlockQueue>
    }
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af04      	add	r7, sp, #16
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 fd1b 	bl	80034dc <pvPortMalloc>
 8001aa6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00e      	beq.n	8001acc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001aae:	2058      	movs	r0, #88	; 0x58
 8001ab0:	f001 fd14 	bl	80034dc <pvPortMalloc>
 8001ab4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ac2:	e005      	b.n	8001ad0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001ac4:	6978      	ldr	r0, [r7, #20]
 8001ac6:	f001 fde9 	bl	800369c <vPortFree>
 8001aca:	e001      	b.n	8001ad0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d013      	beq.n	8001afe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ad6:	88fa      	ldrh	r2, [r7, #6]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f80e 	bl	8001b0e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001af2:	69f8      	ldr	r0, [r7, #28]
 8001af4:	f000 f8a2 	bl	8001c3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001af8:	2301      	movs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	e002      	b.n	8001b04 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001b04:	69bb      	ldr	r3, [r7, #24]
    }
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b088      	sub	sp, #32
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	461a      	mov	r2, r3
 8001b26:	21a5      	movs	r1, #165	; 0xa5
 8001b28:	f003 fe72 	bl	8005810 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b36:	3b01      	subs	r3, #1
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f023 0307 	bic.w	r3, r3, #7
 8001b44:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <prvInitialiseNewTask+0x58>
        __asm volatile
 8001b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	617b      	str	r3, [r7, #20]
    }
 8001b62:	bf00      	nop
 8001b64:	e7fe      	b.n	8001b64 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01f      	beq.n	8001bac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	e012      	b.n	8001b98 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	7819      	ldrb	r1, [r3, #0]
 8001b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	4413      	add	r3, r2
 8001b80:	3334      	adds	r3, #52	; 0x34
 8001b82:	460a      	mov	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b09      	cmp	r3, #9
 8001b9c:	d9e9      	bls.n	8001b72 <prvInitialiseNewTask+0x64>
 8001b9e:	e000      	b.n	8001ba2 <prvInitialiseNewTask+0x94>
            {
                break;
 8001ba0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001baa:	e003      	b.n	8001bb4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d901      	bls.n	8001bbe <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	2200      	movs	r2, #0
 8001bce:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fff0 	bl	8000bba <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	3318      	adds	r3, #24
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe ffeb 	bl	8000bba <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bec:	f1c3 0205 	rsb	r2, r3, #5
 8001bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	3350      	adds	r3, #80	; 0x50
 8001bfe:	2204      	movs	r2, #4
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fe04 	bl	8005810 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0a:	3354      	adds	r3, #84	; 0x54
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fdfd 	bl	8005810 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	69b8      	ldr	r0, [r7, #24]
 8001c1c:	f001 fa0c 	bl	8003038 <pxPortInitialiseStack>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c24:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c32:	bf00      	nop
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001c44:	f001 fb28 	bl	8003298 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001c48:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <prvAddNewTaskToReadyList+0xc0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <prvAddNewTaskToReadyList+0xc0>)
 8001c50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001c52:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <prvAddNewTaskToReadyList+0xc4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001c5a:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <prvAddNewTaskToReadyList+0xc4>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <prvAddNewTaskToReadyList+0xc0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d110      	bne.n	8001c8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001c68:	f000 fbc8 	bl	80023fc <prvInitialiseTaskLists>
 8001c6c:	e00d      	b.n	8001c8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <prvAddNewTaskToReadyList+0xc8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <prvAddNewTaskToReadyList+0xc4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d802      	bhi.n	8001c8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001c84:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <prvAddNewTaskToReadyList+0xc4>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <prvAddNewTaskToReadyList+0xcc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <prvAddNewTaskToReadyList+0xcc>)
 8001c92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <prvAddNewTaskToReadyList+0xcc>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <prvAddNewTaskToReadyList+0xd0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	4a18      	ldr	r2, [pc, #96]	; (8001d0c <prvAddNewTaskToReadyList+0xd0>)
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <prvAddNewTaskToReadyList+0xd4>)
 8001cbc:	441a      	add	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	f7fe ff85 	bl	8000bd4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001cca:	f001 fb15 	bl	80032f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <prvAddNewTaskToReadyList+0xc8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00e      	beq.n	8001cf4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <prvAddNewTaskToReadyList+0xc4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d207      	bcs.n	8001cf4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <prvAddNewTaskToReadyList+0xd8>)
 8001ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	f3bf 8f4f 	dsb	sy
 8001cf0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000248 	.word	0x20000248
 8001d00:	20000170 	.word	0x20000170
 8001d04:	20000254 	.word	0x20000254
 8001d08:	20000264 	.word	0x20000264
 8001d0c:	20000250 	.word	0x20000250
 8001d10:	20000174 	.word	0x20000174
 8001d14:	e000ed04 	.word	0xe000ed04

08001d18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <vTaskStartScheduler+0x88>)
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2300      	movs	r3, #0
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2300      	movs	r3, #0
 8001d28:	2282      	movs	r2, #130	; 0x82
 8001d2a:	491e      	ldr	r1, [pc, #120]	; (8001da4 <vTaskStartScheduler+0x8c>)
 8001d2c:	481e      	ldr	r0, [pc, #120]	; (8001da8 <vTaskStartScheduler+0x90>)
 8001d2e:	f7ff fead 	bl	8001a8c <xTaskCreate>
 8001d32:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001d3a:	f000 fe0f 	bl	800295c <xTimerCreateTimerTask>
 8001d3e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d116      	bne.n	8001d74 <vTaskStartScheduler+0x5c>
        __asm volatile
 8001d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4a:	f383 8811 	msr	BASEPRI, r3
 8001d4e:	f3bf 8f6f 	isb	sy
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	60bb      	str	r3, [r7, #8]
    }
 8001d58:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <vTaskStartScheduler+0x94>)
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <vTaskStartScheduler+0x98>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <vTaskStartScheduler+0x9c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001d6e:	f001 f9f1 	bl	8003154 <xPortStartScheduler>
 8001d72:	e00e      	b.n	8001d92 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7a:	d10a      	bne.n	8001d92 <vTaskStartScheduler+0x7a>
        __asm volatile
 8001d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d80:	f383 8811 	msr	BASEPRI, r3
 8001d84:	f3bf 8f6f 	isb	sy
 8001d88:	f3bf 8f4f 	dsb	sy
 8001d8c:	607b      	str	r3, [r7, #4]
    }
 8001d8e:	bf00      	nop
 8001d90:	e7fe      	b.n	8001d90 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <vTaskStartScheduler+0xa0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000026c 	.word	0x2000026c
 8001da4:	08006d08 	.word	0x08006d08
 8001da8:	080023cd 	.word	0x080023cd
 8001dac:	20000268 	.word	0x20000268
 8001db0:	20000254 	.word	0x20000254
 8001db4:	2000024c 	.word	0x2000024c
 8001db8:	20000008 	.word	0x20000008

08001dbc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <vTaskSuspendAll+0x18>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <vTaskSuspendAll+0x18>)
 8001dc8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20000270 	.word	0x20000270

08001dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <xTaskResumeAll+0x114>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <xTaskResumeAll+0x2c>
        __asm volatile
 8001dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df2:	f383 8811 	msr	BASEPRI, r3
 8001df6:	f3bf 8f6f 	isb	sy
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	603b      	str	r3, [r7, #0]
    }
 8001e00:	bf00      	nop
 8001e02:	e7fe      	b.n	8001e02 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e04:	f001 fa48 	bl	8003298 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <xTaskResumeAll+0x114>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	4a37      	ldr	r2, [pc, #220]	; (8001eec <xTaskResumeAll+0x114>)
 8001e10:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <xTaskResumeAll+0x114>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d161      	bne.n	8001ede <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e1a:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <xTaskResumeAll+0x118>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d05d      	beq.n	8001ede <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e22:	e02e      	b.n	8001e82 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e24:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <xTaskResumeAll+0x11c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	3318      	adds	r3, #24
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe ff2c 	bl	8000c8e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe ff27 	bl	8000c8e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	2201      	movs	r2, #1
 8001e46:	409a      	lsls	r2, r3
 8001e48:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <xTaskResumeAll+0x120>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <xTaskResumeAll+0x120>)
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4a27      	ldr	r2, [pc, #156]	; (8001efc <xTaskResumeAll+0x124>)
 8001e60:	441a      	add	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3304      	adds	r3, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f7fe feb3 	bl	8000bd4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <xTaskResumeAll+0x128>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d302      	bcc.n	8001e82 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <xTaskResumeAll+0x12c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <xTaskResumeAll+0x11c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1cc      	bne.n	8001e24 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001e90:	f000 fb32 	bl	80024f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <xTaskResumeAll+0x130>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001ea0:	f000 f846 	bl	8001f30 <xTaskIncrementTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <xTaskResumeAll+0x12c>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f1      	bne.n	8001ea0 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <xTaskResumeAll+0x130>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <xTaskResumeAll+0x12c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <xTaskResumeAll+0x134>)
 8001ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f3bf 8f4f 	dsb	sy
 8001eda:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001ede:	f001 fa0b 	bl	80032f8 <vPortExitCritical>

    return xAlreadyYielded;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000270 	.word	0x20000270
 8001ef0:	20000248 	.word	0x20000248
 8001ef4:	20000208 	.word	0x20000208
 8001ef8:	20000250 	.word	0x20000250
 8001efc:	20000174 	.word	0x20000174
 8001f00:	20000170 	.word	0x20000170
 8001f04:	2000025c 	.word	0x2000025c
 8001f08:	20000258 	.word	0x20000258
 8001f0c:	e000ed04 	.word	0xe000ed04

08001f10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <xTaskGetTickCount+0x1c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001f1c:	687b      	ldr	r3, [r7, #4]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	2000024c 	.word	0x2000024c

08001f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <xTaskIncrementTick+0x144>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 808e 	bne.w	8002060 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f44:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <xTaskIncrementTick+0x148>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001f4c:	4a4a      	ldr	r2, [pc, #296]	; (8002078 <xTaskIncrementTick+0x148>)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d120      	bne.n	8001f9a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <xTaskIncrementTick+0x14c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <xTaskIncrementTick+0x48>
        __asm volatile
 8001f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f66:	f383 8811 	msr	BASEPRI, r3
 8001f6a:	f3bf 8f6f 	isb	sy
 8001f6e:	f3bf 8f4f 	dsb	sy
 8001f72:	603b      	str	r3, [r7, #0]
    }
 8001f74:	bf00      	nop
 8001f76:	e7fe      	b.n	8001f76 <xTaskIncrementTick+0x46>
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <xTaskIncrementTick+0x14c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b40      	ldr	r3, [pc, #256]	; (8002080 <xTaskIncrementTick+0x150>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a3e      	ldr	r2, [pc, #248]	; (800207c <xTaskIncrementTick+0x14c>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4a3e      	ldr	r2, [pc, #248]	; (8002080 <xTaskIncrementTick+0x150>)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <xTaskIncrementTick+0x154>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	4a3c      	ldr	r2, [pc, #240]	; (8002084 <xTaskIncrementTick+0x154>)
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	f000 faaf 	bl	80024f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <xTaskIncrementTick+0x158>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d348      	bcc.n	8002036 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fa4:	4b35      	ldr	r3, [pc, #212]	; (800207c <xTaskIncrementTick+0x14c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <xTaskIncrementTick+0x158>)
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	601a      	str	r2, [r3, #0]
                    break;
 8001fb6:	e03e      	b.n	8002036 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fb8:	4b30      	ldr	r3, [pc, #192]	; (800207c <xTaskIncrementTick+0x14c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d203      	bcs.n	8001fd8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <xTaskIncrementTick+0x158>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001fd6:	e02e      	b.n	8002036 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fe56 	bl	8000c8e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d004      	beq.n	8001ff4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3318      	adds	r3, #24
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fe4d 	bl	8000c8e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <xTaskIncrementTick+0x15c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	4a22      	ldr	r2, [pc, #136]	; (800208c <xTaskIncrementTick+0x15c>)
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <xTaskIncrementTick+0x160>)
 8002014:	441a      	add	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	3304      	adds	r3, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f7fe fdd9 	bl	8000bd4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <xTaskIncrementTick+0x164>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	429a      	cmp	r2, r3
 800202e:	d3b9      	bcc.n	8001fa4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002030:	2301      	movs	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002034:	e7b6      	b.n	8001fa4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <xTaskIncrementTick+0x164>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	4914      	ldr	r1, [pc, #80]	; (8002090 <xTaskIncrementTick+0x160>)
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d901      	bls.n	8002052 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800204e:	2301      	movs	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <xTaskIncrementTick+0x168>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800205a:	2301      	movs	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	e004      	b.n	800206a <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <xTaskIncrementTick+0x16c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a0d      	ldr	r2, [pc, #52]	; (800209c <xTaskIncrementTick+0x16c>)
 8002068:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800206a:	697b      	ldr	r3, [r7, #20]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000270 	.word	0x20000270
 8002078:	2000024c 	.word	0x2000024c
 800207c:	20000200 	.word	0x20000200
 8002080:	20000204 	.word	0x20000204
 8002084:	20000260 	.word	0x20000260
 8002088:	20000268 	.word	0x20000268
 800208c:	20000250 	.word	0x20000250
 8002090:	20000174 	.word	0x20000174
 8002094:	20000170 	.word	0x20000170
 8002098:	2000025c 	.word	0x2000025c
 800209c:	20000258 	.word	0x20000258

080020a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <vTaskSwitchContext+0xa4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <vTaskSwitchContext+0xa8>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80020b4:	e03f      	b.n	8002136 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <vTaskSwitchContext+0xa8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <vTaskSwitchContext+0xac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	f1c3 031f 	rsb	r3, r3, #31
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	491f      	ldr	r1, [pc, #124]	; (8002150 <vTaskSwitchContext+0xb0>)
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10a      	bne.n	80020fc <vTaskSwitchContext+0x5c>
        __asm volatile
 80020e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	607b      	str	r3, [r7, #4]
    }
 80020f8:	bf00      	nop
 80020fa:	e7fe      	b.n	80020fa <vTaskSwitchContext+0x5a>
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <vTaskSwitchContext+0xb0>)
 8002108:	4413      	add	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	3308      	adds	r3, #8
 800211e:	429a      	cmp	r2, r3
 8002120:	d104      	bne.n	800212c <vTaskSwitchContext+0x8c>
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <vTaskSwitchContext+0xb4>)
 8002134:	6013      	str	r3, [r2, #0]
}
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000270 	.word	0x20000270
 8002148:	2000025c 	.word	0x2000025c
 800214c:	20000250 	.word	0x20000250
 8002150:	20000174 	.word	0x20000174
 8002154:	20000170 	.word	0x20000170

08002158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800216c:	f383 8811 	msr	BASEPRI, r3
 8002170:	f3bf 8f6f 	isb	sy
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	60fb      	str	r3, [r7, #12]
    }
 800217a:	bf00      	nop
 800217c:	e7fe      	b.n	800217c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <vTaskPlaceOnEventList+0x44>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3318      	adds	r3, #24
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fd48 	bl	8000c1c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800218c:	2101      	movs	r1, #1
 800218e:	6838      	ldr	r0, [r7, #0]
 8002190:	f000 fb7e 	bl	8002890 <prvAddCurrentTaskToDelayedList>
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000170 	.word	0x20000170

080021a0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10a      	bne.n	80021c8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80021b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b6:	f383 8811 	msr	BASEPRI, r3
 80021ba:	f3bf 8f6f 	isb	sy
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	617b      	str	r3, [r7, #20]
    }
 80021c4:	bf00      	nop
 80021c6:	e7fe      	b.n	80021c6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3318      	adds	r3, #24
 80021ce:	4619      	mov	r1, r3
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7fe fcff 	bl	8000bd4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68b8      	ldr	r0, [r7, #8]
 80021e6:	f000 fb53 	bl	8002890 <prvAddCurrentTaskToDelayedList>
    }
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000170 	.word	0x20000170

080021f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	60fb      	str	r3, [r7, #12]
    }
 8002220:	bf00      	nop
 8002222:	e7fe      	b.n	8002222 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	3318      	adds	r3, #24
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fd30 	bl	8000c8e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <xTaskRemoveFromEventList+0xac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11c      	bne.n	8002270 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	3304      	adds	r3, #4
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fd27 	bl	8000c8e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	2201      	movs	r2, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <xTaskRemoveFromEventList+0xb0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4313      	orrs	r3, r2
 800224e:	4a16      	ldr	r2, [pc, #88]	; (80022a8 <xTaskRemoveFromEventList+0xb0>)
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4a13      	ldr	r2, [pc, #76]	; (80022ac <xTaskRemoveFromEventList+0xb4>)
 8002260:	441a      	add	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	3304      	adds	r3, #4
 8002266:	4619      	mov	r1, r3
 8002268:	4610      	mov	r0, r2
 800226a:	f7fe fcb3 	bl	8000bd4 <vListInsertEnd>
 800226e:	e005      	b.n	800227c <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	3318      	adds	r3, #24
 8002274:	4619      	mov	r1, r3
 8002276:	480e      	ldr	r0, [pc, #56]	; (80022b0 <xTaskRemoveFromEventList+0xb8>)
 8002278:	f7fe fcac 	bl	8000bd4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <xTaskRemoveFromEventList+0xbc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	429a      	cmp	r2, r3
 8002288:	d905      	bls.n	8002296 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800228a:	2301      	movs	r3, #1
 800228c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <xTaskRemoveFromEventList+0xc0>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e001      	b.n	800229a <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800229a:	697b      	ldr	r3, [r7, #20]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000270 	.word	0x20000270
 80022a8:	20000250 	.word	0x20000250
 80022ac:	20000174 	.word	0x20000174
 80022b0:	20000208 	.word	0x20000208
 80022b4:	20000170 	.word	0x20000170
 80022b8:	2000025c 	.word	0x2000025c

080022bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <vTaskInternalSetTimeOutState+0x24>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <vTaskInternalSetTimeOutState+0x28>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	605a      	str	r2, [r3, #4]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	20000260 	.word	0x20000260
 80022e4:	2000024c 	.word	0x2000024c

080022e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10a      	bne.n	800230e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80022f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	613b      	str	r3, [r7, #16]
    }
 800230a:	bf00      	nop
 800230c:	e7fe      	b.n	800230c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002318:	f383 8811 	msr	BASEPRI, r3
 800231c:	f3bf 8f6f 	isb	sy
 8002320:	f3bf 8f4f 	dsb	sy
 8002324:	60fb      	str	r3, [r7, #12]
    }
 8002326:	bf00      	nop
 8002328:	e7fe      	b.n	8002328 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800232a:	f000 ffb5 	bl	8003298 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800232e:	4b1f      	ldr	r3, [pc, #124]	; (80023ac <xTaskCheckForTimeOut+0xc4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002346:	d102      	bne.n	800234e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	e026      	b.n	800239c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <xTaskCheckForTimeOut+0xc8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d00a      	beq.n	8002370 <xTaskCheckForTimeOut+0x88>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	429a      	cmp	r2, r3
 8002362:	d305      	bcc.n	8002370 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002364:	2301      	movs	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e015      	b.n	800239c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	429a      	cmp	r2, r3
 8002378:	d20b      	bcs.n	8002392 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	1ad2      	subs	r2, r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ff98 	bl	80022bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	e004      	b.n	800239c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002398:	2301      	movs	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800239c:	f000 ffac 	bl	80032f8 <vPortExitCritical>

    return xReturn;
 80023a0:	69fb      	ldr	r3, [r7, #28]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2000024c 	.word	0x2000024c
 80023b0:	20000260 	.word	0x20000260

080023b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <vTaskMissedYield+0x14>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	2000025c 	.word	0x2000025c

080023cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80023d4:	f000 f852 	bl	800247c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <prvIdleTask+0x28>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d9f9      	bls.n	80023d4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <prvIdleTask+0x2c>)
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80023f0:	e7f0      	b.n	80023d4 <prvIdleTask+0x8>
 80023f2:	bf00      	nop
 80023f4:	20000174 	.word	0x20000174
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	e00c      	b.n	8002422 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <prvInitialiseTaskLists+0x60>)
 8002414:	4413      	add	r3, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fbaf 	bl	8000b7a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3301      	adds	r3, #1
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d9ef      	bls.n	8002408 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <prvInitialiseTaskLists+0x64>)
 800242a:	f7fe fba6 	bl	8000b7a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800242e:	480d      	ldr	r0, [pc, #52]	; (8002464 <prvInitialiseTaskLists+0x68>)
 8002430:	f7fe fba3 	bl	8000b7a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <prvInitialiseTaskLists+0x6c>)
 8002436:	f7fe fba0 	bl	8000b7a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800243a:	480c      	ldr	r0, [pc, #48]	; (800246c <prvInitialiseTaskLists+0x70>)
 800243c:	f7fe fb9d 	bl	8000b7a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002440:	480b      	ldr	r0, [pc, #44]	; (8002470 <prvInitialiseTaskLists+0x74>)
 8002442:	f7fe fb9a 	bl	8000b7a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <prvInitialiseTaskLists+0x78>)
 8002448:	4a05      	ldr	r2, [pc, #20]	; (8002460 <prvInitialiseTaskLists+0x64>)
 800244a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <prvInitialiseTaskLists+0x7c>)
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <prvInitialiseTaskLists+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000174 	.word	0x20000174
 8002460:	200001d8 	.word	0x200001d8
 8002464:	200001ec 	.word	0x200001ec
 8002468:	20000208 	.word	0x20000208
 800246c:	2000021c 	.word	0x2000021c
 8002470:	20000234 	.word	0x20000234
 8002474:	20000200 	.word	0x20000200
 8002478:	20000204 	.word	0x20000204

0800247c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002482:	e019      	b.n	80024b8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002484:	f000 ff08 	bl	8003298 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <prvCheckTasksWaitingTermination+0x50>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fbfa 	bl	8000c8e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <prvCheckTasksWaitingTermination+0x54>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3b01      	subs	r3, #1
 80024a0:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <prvCheckTasksWaitingTermination+0x54>)
 80024a2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <prvCheckTasksWaitingTermination+0x58>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <prvCheckTasksWaitingTermination+0x58>)
 80024ac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80024ae:	f000 ff23 	bl	80032f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f810 	bl	80024d8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <prvCheckTasksWaitingTermination+0x58>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1e1      	bne.n	8002484 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	2000021c 	.word	0x2000021c
 80024d0:	20000248 	.word	0x20000248
 80024d4:	20000230 	.word	0x20000230

080024d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	4618      	mov	r0, r3
 80024e6:	f001 f8d9 	bl	800369c <vPortFree>
                vPortFree( pxTCB );
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f001 f8d6 	bl	800369c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <prvResetNextTaskUnblockTime+0x30>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d104      	bne.n	8002510 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <prvResetNextTaskUnblockTime+0x34>)
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800250e:	e005      	b.n	800251c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <prvResetNextTaskUnblockTime+0x30>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <prvResetNextTaskUnblockTime+0x34>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000200 	.word	0x20000200
 800252c:	20000268 	.word	0x20000268

08002530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <xTaskGetSchedulerState+0x34>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800253e:	2301      	movs	r3, #1
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	e008      	b.n	8002556 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <xTaskGetSchedulerState+0x38>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800254c:	2302      	movs	r3, #2
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	e001      	b.n	8002556 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002556:	687b      	ldr	r3, [r7, #4]
    }
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	20000254 	.word	0x20000254
 8002568:	20000270 	.word	0x20000270

0800256c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d05e      	beq.n	8002640 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <xTaskPriorityInherit+0xe0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	429a      	cmp	r2, r3
 800258e:	d24e      	bcs.n	800262e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db06      	blt.n	80025a6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <xTaskPriorityInherit+0xe0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	f1c3 0205 	rsb	r2, r3, #5
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6959      	ldr	r1, [r3, #20]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4a26      	ldr	r2, [pc, #152]	; (8002650 <xTaskPriorityInherit+0xe4>)
 80025b8:	4413      	add	r3, r2
 80025ba:	4299      	cmp	r1, r3
 80025bc:	d12f      	bne.n	800261e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3304      	adds	r3, #4
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fb63 	bl	8000c8e <uxListRemove>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	2201      	movs	r2, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43da      	mvns	r2, r3
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <xTaskPriorityInherit+0xe8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4013      	ands	r3, r2
 80025e0:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <xTaskPriorityInherit+0xe8>)
 80025e2:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <xTaskPriorityInherit+0xe0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	2201      	movs	r2, #1
 80025f4:	409a      	lsls	r2, r3
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <xTaskPriorityInherit+0xe8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <xTaskPriorityInherit+0xe8>)
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4a10      	ldr	r2, [pc, #64]	; (8002650 <xTaskPriorityInherit+0xe4>)
 800260e:	441a      	add	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f7fe fadc 	bl	8000bd4 <vListInsertEnd>
 800261c:	e004      	b.n	8002628 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <xTaskPriorityInherit+0xe0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002628:	2301      	movs	r3, #1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e008      	b.n	8002640 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <xTaskPriorityInherit+0xe0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	429a      	cmp	r2, r3
 800263a:	d201      	bcs.n	8002640 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800263c:	2301      	movs	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002640:	68fb      	ldr	r3, [r7, #12]
    }
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000170 	.word	0x20000170
 8002650:	20000174 	.word	0x20000174
 8002654:	20000250 	.word	0x20000250

08002658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d063      	beq.n	8002736 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800266e:	4b34      	ldr	r3, [pc, #208]	; (8002740 <xTaskPriorityDisinherit+0xe8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d00a      	beq.n	800268e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8002678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	60fb      	str	r3, [r7, #12]
    }
 800268a:	bf00      	nop
 800268c:	e7fe      	b.n	800268c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	60bb      	str	r3, [r7, #8]
    }
 80026a8:	bf00      	nop
 80026aa:	e7fe      	b.n	80026aa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	1e5a      	subs	r2, r3, #1
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	429a      	cmp	r2, r3
 80026c0:	d039      	beq.n	8002736 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d135      	bne.n	8002736 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	3304      	adds	r3, #4
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fadd 	bl	8000c8e <uxListRemove>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	2201      	movs	r2, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43da      	mvns	r2, r3
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <xTaskPriorityDisinherit+0xec>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4013      	ands	r3, r2
 80026ec:	4a15      	ldr	r2, [pc, #84]	; (8002744 <xTaskPriorityDisinherit+0xec>)
 80026ee:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f1c3 0205 	rsb	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	2201      	movs	r2, #1
 800270a:	409a      	lsls	r2, r3
 800270c:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <xTaskPriorityDisinherit+0xec>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4313      	orrs	r3, r2
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <xTaskPriorityDisinherit+0xec>)
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <xTaskPriorityDisinherit+0xf0>)
 8002724:	441a      	add	r2, r3
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3304      	adds	r3, #4
 800272a:	4619      	mov	r1, r3
 800272c:	4610      	mov	r0, r2
 800272e:	f7fe fa51 	bl	8000bd4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002736:	697b      	ldr	r3, [r7, #20]
    }
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000170 	.word	0x20000170
 8002744:	20000250 	.word	0x20000250
 8002748:	20000174 	.word	0x20000174

0800274c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800275a:	2301      	movs	r3, #1
 800275c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d077      	beq.n	8002854 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	60fb      	str	r3, [r7, #12]
    }
 800277e:	bf00      	nop
 8002780:	e7fe      	b.n	8002780 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d902      	bls.n	8002792 <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	e002      	b.n	8002798 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d058      	beq.n	8002854 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d153      	bne.n	8002854 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d10a      	bne.n	80027cc <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	60bb      	str	r3, [r7, #8]
    }
 80027c8:	bf00      	nop
 80027ca:	e7fe      	b.n	80027ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db04      	blt.n	80027ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f1c3 0205 	rsb	r2, r3, #5
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6959      	ldr	r1, [r3, #20]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80027fa:	4413      	add	r3, r2
 80027fc:	4299      	cmp	r1, r3
 80027fe:	d129      	bne.n	8002854 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	3304      	adds	r3, #4
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fa42 	bl	8000c8e <uxListRemove>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	2201      	movs	r2, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4013      	ands	r3, r2
 8002822:	4a10      	ldr	r2, [pc, #64]	; (8002864 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002824:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	2201      	movs	r2, #1
 800282c:	409a      	lsls	r2, r3
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4a06      	ldr	r2, [pc, #24]	; (8002860 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002846:	441a      	add	r2, r3
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3304      	adds	r3, #4
 800284c:	4619      	mov	r1, r3
 800284e:	4610      	mov	r0, r2
 8002850:	f7fe f9c0 	bl	8000bd4 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000170 	.word	0x20000170
 8002860:	20000174 	.word	0x20000174
 8002864:	20000250 	.word	0x20000250

08002868 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <pvTaskIncrementMutexHeldCount+0x24>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <pvTaskIncrementMutexHeldCount+0x24>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800287a:	3201      	adds	r2, #1
 800287c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800287e:	4b03      	ldr	r3, [pc, #12]	; (800288c <pvTaskIncrementMutexHeldCount+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
    }
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	20000170 	.word	0x20000170

08002890 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <prvAddCurrentTaskToDelayedList+0xb0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3304      	adds	r3, #4
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe f9f1 	bl	8000c8e <uxListRemove>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10b      	bne.n	80028ca <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	2201      	movs	r2, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4013      	ands	r3, r2
 80028c6:	4a20      	ldr	r2, [pc, #128]	; (8002948 <prvAddCurrentTaskToDelayedList+0xb8>)
 80028c8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d10a      	bne.n	80028e8 <prvAddCurrentTaskToDelayedList+0x58>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d007      	beq.n	80028e8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3304      	adds	r3, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	481a      	ldr	r0, [pc, #104]	; (800294c <prvAddCurrentTaskToDelayedList+0xbc>)
 80028e2:	f7fe f977 	bl	8000bd4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80028e6:	e026      	b.n	8002936 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <prvAddCurrentTaskToDelayedList+0xb4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d209      	bcs.n	8002914 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3304      	adds	r3, #4
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7fe f985 	bl	8000c1c <vListInsert>
}
 8002912:	e010      	b.n	8002936 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <prvAddCurrentTaskToDelayedList+0xb4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3304      	adds	r3, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7fe f97b 	bl	8000c1c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	d202      	bcs.n	8002936 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002930:	4a09      	ldr	r2, [pc, #36]	; (8002958 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	6013      	str	r3, [r2, #0]
}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000024c 	.word	0x2000024c
 8002944:	20000170 	.word	0x20000170
 8002948:	20000250 	.word	0x20000250
 800294c:	20000234 	.word	0x20000234
 8002950:	20000204 	.word	0x20000204
 8002954:	20000200 	.word	0x20000200
 8002958:	20000268 	.word	0x20000268

0800295c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002966:	f000 fb31 	bl	8002fcc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <xTimerCreateTimerTask+0x54>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <xTimerCreateTimerTask+0x58>)
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	2302      	movs	r3, #2
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002980:	490d      	ldr	r1, [pc, #52]	; (80029b8 <xTimerCreateTimerTask+0x5c>)
 8002982:	480e      	ldr	r0, [pc, #56]	; (80029bc <xTimerCreateTimerTask+0x60>)
 8002984:	f7ff f882 	bl	8001a8c <xTaskCreate>
 8002988:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	603b      	str	r3, [r7, #0]
    }
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80029a6:	687b      	ldr	r3, [r7, #4]
    }
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	200002a4 	.word	0x200002a4
 80029b4:	200002a8 	.word	0x200002a8
 80029b8:	08006d10 	.word	0x08006d10
 80029bc:	08002bad 	.word	0x08002bad

080029c0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80029ce:	202c      	movs	r0, #44	; 0x2c
 80029d0:	f000 fd84 	bl	80034dc <pvPortMalloc>
 80029d4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f805 	bl	8002a02 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80029f8:	697b      	ldr	r3, [r7, #20]
        }
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	617b      	str	r3, [r7, #20]
    }
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01e      	beq.n	8002a70 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8002a32:	f000 facb 	bl	8002fcc <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	6a3a      	ldr	r2, [r7, #32]
 8002a4c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	3304      	adds	r3, #4
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe f8b1 	bl	8000bba <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a64:	f043 0304 	orr.w	r3, r3, #4
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8002a70:	bf00      	nop
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	; 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10a      	bne.n	8002aa6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8002a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a94:	f383 8811 	msr	BASEPRI, r3
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	623b      	str	r3, [r7, #32]
    }
 8002aa2:	bf00      	nop
 8002aa4:	e7fe      	b.n	8002aa4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <xTimerGenericCommand+0x98>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d02a      	beq.n	8002b04 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	dc18      	bgt.n	8002af2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ac0:	f7ff fd36 	bl	8002530 <xTaskGetSchedulerState>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d109      	bne.n	8002ade <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <xTimerGenericCommand+0x98>)
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	f107 0114 	add.w	r1, r7, #20
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad6:	f7fe fa23 	bl	8000f20 <xQueueGenericSend>
 8002ada:	6278      	str	r0, [r7, #36]	; 0x24
 8002adc:	e012      	b.n	8002b04 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <xTimerGenericCommand+0x98>)
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	f107 0114 	add.w	r1, r7, #20
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f7fe fa19 	bl	8000f20 <xQueueGenericSend>
 8002aee:	6278      	str	r0, [r7, #36]	; 0x24
 8002af0:	e008      	b.n	8002b04 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <xTimerGenericCommand+0x98>)
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	f107 0114 	add.w	r1, r7, #20
 8002afa:	2300      	movs	r3, #0
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	f7fe fb0d 	bl	800111c <xQueueGenericSendFromISR>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b06:	4618      	mov	r0, r3
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200002a4 	.word	0x200002a4

08002b14 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <prvProcessExpiredTimer+0x94>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe f8ae 	bl	8000c8e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d022      	beq.n	8002b86 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	18d1      	adds	r1, r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	6978      	ldr	r0, [r7, #20]
 8002b4e:	f000 f8d1 	bl	8002cf4 <prvInsertTimerInActiveList>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01f      	beq.n	8002b98 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b58:	2300      	movs	r3, #0
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	2100      	movs	r1, #0
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f7ff ff88 	bl	8002a78 <xTimerGenericCommand>
 8002b68:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d113      	bne.n	8002b98 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	60fb      	str	r3, [r7, #12]
    }
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	6978      	ldr	r0, [r7, #20]
 8002b9e:	4798      	blx	r3
    }
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000029c 	.word	0x2000029c

08002bac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 f857 	bl	8002c6c <prvGetNextExpireTime>
 8002bbe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f803 	bl	8002bd0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002bca:	f000 f8d5 	bl	8002d78 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002bce:	e7f1      	b.n	8002bb4 <prvTimerTask+0x8>

08002bd0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002bda:	f7ff f8ef 	bl	8001dbc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bde:	f107 0308 	add.w	r3, r7, #8
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f866 	bl	8002cb4 <prvSampleTimeNow>
 8002be8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d130      	bne.n	8002c52 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <prvProcessTimerOrBlockTask+0x3c>
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d806      	bhi.n	8002c0c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002bfe:	f7ff f8eb 	bl	8001dd8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002c02:	68f9      	ldr	r1, [r7, #12]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff85 	bl	8002b14 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002c0a:	e024      	b.n	8002c56 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <prvProcessTimerOrBlockTask+0x90>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <prvProcessTimerOrBlockTask+0x50>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <prvProcessTimerOrBlockTask+0x52>
 8002c20:	2300      	movs	r3, #0
 8002c22:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <prvProcessTimerOrBlockTask+0x94>)
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	f7fe fef7 	bl	8001a24 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002c36:	f7ff f8cf 	bl	8001dd8 <xTaskResumeAll>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <prvProcessTimerOrBlockTask+0x98>)
 8002c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
    }
 8002c50:	e001      	b.n	8002c56 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002c52:	f7ff f8c1 	bl	8001dd8 <xTaskResumeAll>
    }
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200002a0 	.word	0x200002a0
 8002c64:	200002a4 	.word	0x200002a4
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <prvGetNextExpireTime+0x44>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <prvGetNextExpireTime+0x16>
 8002c7e:	2201      	movs	r2, #1
 8002c80:	e000      	b.n	8002c84 <prvGetNextExpireTime+0x18>
 8002c82:	2200      	movs	r2, #0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <prvGetNextExpireTime+0x44>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	e001      	b.n	8002ca0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    }
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000029c 	.word	0x2000029c

08002cb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002cbc:	f7ff f928 	bl	8001f10 <xTaskGetTickCount>
 8002cc0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <prvSampleTimeNow+0x3c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d205      	bcs.n	8002cd8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002ccc:	f000 f91a 	bl	8002f04 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e002      	b.n	8002cde <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002cde:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <prvSampleTimeNow+0x3c>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    }
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200002ac 	.word	0x200002ac

08002cf4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d812      	bhi.n	8002d40 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	1ad2      	subs	r2, r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d302      	bcc.n	8002d2e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e01b      	b.n	8002d66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <prvInsertTimerInActiveList+0x7c>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3304      	adds	r3, #4
 8002d36:	4619      	mov	r1, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f7fd ff6f 	bl	8000c1c <vListInsert>
 8002d3e:	e012      	b.n	8002d66 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d206      	bcs.n	8002d56 <prvInsertTimerInActiveList+0x62>
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002d50:	2301      	movs	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e007      	b.n	8002d66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <prvInsertTimerInActiveList+0x80>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f7fd ff5b 	bl	8000c1c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002d66:	697b      	ldr	r3, [r7, #20]
    }
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200002a0 	.word	0x200002a0
 8002d74:	2000029c 	.word	0x2000029c

08002d78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08c      	sub	sp, #48	; 0x30
 8002d7c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d7e:	e0ae      	b.n	8002ede <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f2c0 80aa 	blt.w	8002edc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d004      	beq.n	8002d9e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	3304      	adds	r3, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd ff78 	bl	8000c8e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff87 	bl	8002cb4 <prvSampleTimeNow>
 8002da6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b09      	cmp	r3, #9
 8002dac:	f200 8097 	bhi.w	8002ede <prvProcessReceivedCommands+0x166>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <prvProcessReceivedCommands+0x40>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002de1 	.word	0x08002de1
 8002dbc:	08002de1 	.word	0x08002de1
 8002dc0:	08002de1 	.word	0x08002de1
 8002dc4:	08002e55 	.word	0x08002e55
 8002dc8:	08002e69 	.word	0x08002e69
 8002dcc:	08002eb3 	.word	0x08002eb3
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002de1 	.word	0x08002de1
 8002dd8:	08002e55 	.word	0x08002e55
 8002ddc:	08002e69 	.word	0x08002e69
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	18d1      	adds	r1, r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a3a      	ldr	r2, [r7, #32]
 8002dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e00:	f7ff ff78 	bl	8002cf4 <prvInsertTimerInActiveList>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d069      	beq.n	8002ede <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e10:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d05e      	beq.n	8002ede <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	441a      	add	r2, r3
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e32:	f7ff fe21 	bl	8002a78 <xTimerGenericCommand>
 8002e36:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d14f      	bne.n	8002ede <prvProcessReceivedCommands+0x166>
        __asm volatile
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	61bb      	str	r3, [r7, #24]
    }
 8002e50:	bf00      	nop
 8002e52:	e7fe      	b.n	8002e52 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002e66:	e03a      	b.n	8002ede <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	617b      	str	r3, [r7, #20]
    }
 8002e9a:	bf00      	nop
 8002e9c:	e7fe      	b.n	8002e9c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	18d1      	adds	r1, r2, r3
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	6a3a      	ldr	r2, [r7, #32]
 8002eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eac:	f7ff ff22 	bl	8002cf4 <prvInsertTimerInActiveList>
                        break;
 8002eb0:	e015      	b.n	8002ede <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d103      	bne.n	8002ec8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8002ec0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec2:	f000 fbeb 	bl	800369c <vPortFree>
 8002ec6:	e00a      	b.n	8002ede <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002eda:	e000      	b.n	8002ede <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002edc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <prvProcessReceivedCommands+0x188>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f107 0108 	add.w	r1, r7, #8
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe fa5d 	bl	80013a8 <xQueueReceive>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f af45 	bne.w	8002d80 <prvProcessReceivedCommands+0x8>
        }
    }
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200002a4 	.word	0x200002a4

08002f04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f0a:	e048      	b.n	8002f9e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <prvSwitchTimerLists+0xc0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f16:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <prvSwitchTimerLists+0xc0>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd feb2 	bl	8000c8e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d02e      	beq.n	8002f9e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d90e      	bls.n	8002f70 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <prvSwitchTimerLists+0xc0>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3304      	adds	r3, #4
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f7fd fe57 	bl	8000c1c <vListInsert>
 8002f6e:	e016      	b.n	8002f9e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f70:	2300      	movs	r3, #0
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	2100      	movs	r1, #0
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff fd7c 	bl	8002a78 <xTimerGenericCommand>
 8002f80:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	603b      	str	r3, [r7, #0]
    }
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <prvSwitchTimerLists+0xc0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1b1      	bne.n	8002f0c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <prvSwitchTimerLists+0xc0>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <prvSwitchTimerLists+0xc4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <prvSwitchTimerLists+0xc0>)
 8002fb4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002fb6:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <prvSwitchTimerLists+0xc4>)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	6013      	str	r3, [r2, #0]
    }
 8002fbc:	bf00      	nop
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	2000029c 	.word	0x2000029c
 8002fc8:	200002a0 	.word	0x200002a0

08002fcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002fd0:	f000 f962 	bl	8003298 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002fd4:	4b12      	ldr	r3, [pc, #72]	; (8003020 <prvCheckForValidListAndQueue+0x54>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11d      	bne.n	8003018 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002fdc:	4811      	ldr	r0, [pc, #68]	; (8003024 <prvCheckForValidListAndQueue+0x58>)
 8002fde:	f7fd fdcc 	bl	8000b7a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002fe2:	4811      	ldr	r0, [pc, #68]	; (8003028 <prvCheckForValidListAndQueue+0x5c>)
 8002fe4:	f7fd fdc9 	bl	8000b7a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <prvCheckForValidListAndQueue+0x60>)
 8002fea:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <prvCheckForValidListAndQueue+0x58>)
 8002fec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002fee:	4b10      	ldr	r3, [pc, #64]	; (8003030 <prvCheckForValidListAndQueue+0x64>)
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <prvCheckForValidListAndQueue+0x5c>)
 8002ff2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	210c      	movs	r1, #12
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f7fd fedb 	bl	8000db4 <xQueueGenericCreate>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a07      	ldr	r2, [pc, #28]	; (8003020 <prvCheckForValidListAndQueue+0x54>)
 8003002:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <prvCheckForValidListAndQueue+0x54>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <prvCheckForValidListAndQueue+0x54>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4908      	ldr	r1, [pc, #32]	; (8003034 <prvCheckForValidListAndQueue+0x68>)
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fcdc 	bl	80019d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003018:	f000 f96e 	bl	80032f8 <vPortExitCritical>
    }
 800301c:	bf00      	nop
 800301e:	bd80      	pop	{r7, pc}
 8003020:	200002a4 	.word	0x200002a4
 8003024:	20000274 	.word	0x20000274
 8003028:	20000288 	.word	0x20000288
 800302c:	2000029c 	.word	0x2000029c
 8003030:	200002a0 	.word	0x200002a0
 8003034:	08006d18 	.word	0x08006d18

08003038 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3b04      	subs	r3, #4
 8003048:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003050:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3b04      	subs	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3b04      	subs	r3, #4
 8003066:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003068:	4a0c      	ldr	r2, [pc, #48]	; (800309c <pxPortInitialiseStack+0x64>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3b14      	subs	r3, #20
 8003072:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3b04      	subs	r3, #4
 800307e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f06f 0202 	mvn.w	r2, #2
 8003086:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3b20      	subs	r3, #32
 800308c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800308e:	68fb      	ldr	r3, [r7, #12]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	080030a1 	.word	0x080030a1

080030a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <prvTaskExitError+0x54>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b2:	d00a      	beq.n	80030ca <prvTaskExitError+0x2a>
        __asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	60fb      	str	r3, [r7, #12]
    }
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <prvTaskExitError+0x28>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	60bb      	str	r3, [r7, #8]
    }
 80030dc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80030de:	bf00      	nop
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0fc      	beq.n	80030e0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	2000000c 	.word	0x2000000c
	...

08003100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <pxCurrentTCBConst2>)
 8003102:	6819      	ldr	r1, [r3, #0]
 8003104:	6808      	ldr	r0, [r1, #0]
 8003106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310a:	f380 8809 	msr	PSP, r0
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f380 8811 	msr	BASEPRI, r0
 800311a:	4770      	bx	lr
 800311c:	f3af 8000 	nop.w

08003120 <pxCurrentTCBConst2>:
 8003120:	20000170 	.word	0x20000170
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop

08003128 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003128:	4808      	ldr	r0, [pc, #32]	; (800314c <prvPortStartFirstTask+0x24>)
 800312a:	6800      	ldr	r0, [r0, #0]
 800312c:	6800      	ldr	r0, [r0, #0]
 800312e:	f380 8808 	msr	MSP, r0
 8003132:	f04f 0000 	mov.w	r0, #0
 8003136:	f380 8814 	msr	CONTROL, r0
 800313a:	b662      	cpsie	i
 800313c:	b661      	cpsie	f
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	df00      	svc	0
 8003148:	bf00      	nop
 800314a:	0000      	.short	0x0000
 800314c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop

08003154 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800315a:	4b46      	ldr	r3, [pc, #280]	; (8003274 <xPortStartScheduler+0x120>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a46      	ldr	r2, [pc, #280]	; (8003278 <xPortStartScheduler+0x124>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10a      	bne.n	800317a <xPortStartScheduler+0x26>
        __asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	613b      	str	r3, [r7, #16]
    }
 8003176:	bf00      	nop
 8003178:	e7fe      	b.n	8003178 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <xPortStartScheduler+0x120>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a3f      	ldr	r2, [pc, #252]	; (800327c <xPortStartScheduler+0x128>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10a      	bne.n	800319a <xPortStartScheduler+0x46>
        __asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	60fb      	str	r3, [r7, #12]
    }
 8003196:	bf00      	nop
 8003198:	e7fe      	b.n	8003198 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800319a:	4b39      	ldr	r3, [pc, #228]	; (8003280 <xPortStartScheduler+0x12c>)
 800319c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	22ff      	movs	r2, #255	; 0xff
 80031aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4b31      	ldr	r3, [pc, #196]	; (8003284 <xPortStartScheduler+0x130>)
 80031c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031c2:	4b31      	ldr	r3, [pc, #196]	; (8003288 <xPortStartScheduler+0x134>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031c8:	e009      	b.n	80031de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80031ca:	4b2f      	ldr	r3, [pc, #188]	; (8003288 <xPortStartScheduler+0x134>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	4a2d      	ldr	r2, [pc, #180]	; (8003288 <xPortStartScheduler+0x134>)
 80031d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d0ef      	beq.n	80031ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031ea:	4b27      	ldr	r3, [pc, #156]	; (8003288 <xPortStartScheduler+0x134>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d00a      	beq.n	800320c <xPortStartScheduler+0xb8>
        __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	60bb      	str	r3, [r7, #8]
    }
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <xPortStartScheduler+0x134>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <xPortStartScheduler+0x134>)
 8003214:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003216:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <xPortStartScheduler+0x134>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800321e:	4a1a      	ldr	r2, [pc, #104]	; (8003288 <xPortStartScheduler+0x134>)
 8003220:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	b2da      	uxtb	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <xPortStartScheduler+0x138>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <xPortStartScheduler+0x138>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003234:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <xPortStartScheduler+0x138>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a14      	ldr	r2, [pc, #80]	; (800328c <xPortStartScheduler+0x138>)
 800323c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003240:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003242:	f000 f8db 	bl	80033fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <xPortStartScheduler+0x13c>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800324c:	f000 f8fa 	bl	8003444 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <xPortStartScheduler+0x140>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <xPortStartScheduler+0x140>)
 8003256:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800325a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800325c:	f7ff ff64 	bl	8003128 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003260:	f7fe ff1e 	bl	80020a0 <vTaskSwitchContext>
    prvTaskExitError();
 8003264:	f7ff ff1c 	bl	80030a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000ed00 	.word	0xe000ed00
 8003278:	410fc271 	.word	0x410fc271
 800327c:	410fc270 	.word	0x410fc270
 8003280:	e000e400 	.word	0xe000e400
 8003284:	200002b0 	.word	0x200002b0
 8003288:	200002b4 	.word	0x200002b4
 800328c:	e000ed20 	.word	0xe000ed20
 8003290:	2000000c 	.word	0x2000000c
 8003294:	e000ef34 	.word	0xe000ef34

08003298 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
        __asm volatile
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	607b      	str	r3, [r7, #4]
    }
 80032b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <vPortEnterCritical+0x58>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <vPortEnterCritical+0x58>)
 80032ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <vPortEnterCritical+0x58>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10f      	bne.n	80032e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <vPortEnterCritical+0x5c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	603b      	str	r3, [r7, #0]
    }
 80032e0:	bf00      	nop
 80032e2:	e7fe      	b.n	80032e2 <vPortEnterCritical+0x4a>
    }
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	2000000c 	.word	0x2000000c
 80032f4:	e000ed04 	.word	0xe000ed04

080032f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <vPortExitCritical+0x50>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <vPortExitCritical+0x24>
        __asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	607b      	str	r3, [r7, #4]
    }
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <vPortExitCritical+0x50>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3b01      	subs	r3, #1
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <vPortExitCritical+0x50>)
 8003324:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <vPortExitCritical+0x50>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d105      	bne.n	800333a <vPortExitCritical+0x42>
 800332e:	2300      	movs	r3, #0
 8003330:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f383 8811 	msr	BASEPRI, r3
    }
 8003338:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	2000000c 	.word	0x2000000c
 800334c:	00000000 	.word	0x00000000

08003350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003350:	f3ef 8009 	mrs	r0, PSP
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <pxCurrentTCBConst>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	f01e 0f10 	tst.w	lr, #16
 8003360:	bf08      	it	eq
 8003362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336a:	6010      	str	r0, [r2, #0]
 800336c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003374:	f380 8811 	msr	BASEPRI, r0
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f7fe fe8e 	bl	80020a0 <vTaskSwitchContext>
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f380 8811 	msr	BASEPRI, r0
 800338c:	bc09      	pop	{r0, r3}
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	6808      	ldr	r0, [r1, #0]
 8003392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003396:	f01e 0f10 	tst.w	lr, #16
 800339a:	bf08      	it	eq
 800339c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80033a0:	f380 8809 	msr	PSP, r0
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	f3af 8000 	nop.w

080033b0 <pxCurrentTCBConst>:
 80033b0:	20000170 	.word	0x20000170
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop

080033b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
        __asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	607b      	str	r3, [r7, #4]
    }
 80033d0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80033d2:	f7fe fdad 	bl	8001f30 <xTaskIncrementTick>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033dc:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <SysTick_Handler+0x40>)
 80033de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f383 8811 	msr	BASEPRI, r3
    }
 80033ee:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	e000ed04 	.word	0xe000ed04

080033fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003400:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <vPortSetupTimerInterrupt+0x34>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <vPortSetupTimerInterrupt+0x38>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <vPortSetupTimerInterrupt+0x3c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <vPortSetupTimerInterrupt+0x40>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	4a09      	ldr	r2, [pc, #36]	; (8003440 <vPortSetupTimerInterrupt+0x44>)
 800341a:	3b01      	subs	r3, #1
 800341c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <vPortSetupTimerInterrupt+0x34>)
 8003420:	2207      	movs	r2, #7
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	bf00      	nop
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e010 	.word	0xe000e010
 8003434:	e000e018 	.word	0xe000e018
 8003438:	20000000 	.word	0x20000000
 800343c:	10624dd3 	.word	0x10624dd3
 8003440:	e000e014 	.word	0xe000e014

08003444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003454 <vPortEnableVFP+0x10>
 8003448:	6801      	ldr	r1, [r0, #0]
 800344a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800344e:	6001      	str	r1, [r0, #0]
 8003450:	4770      	bx	lr
 8003452:	0000      	.short	0x0000
 8003454:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop

0800345c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003462:	f3ef 8305 	mrs	r3, IPSR
 8003466:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	d914      	bls.n	8003498 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <vPortValidateInterruptPriority+0x70>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <vPortValidateInterruptPriority+0x74>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	7afa      	ldrb	r2, [r7, #11]
 800347e:	429a      	cmp	r2, r3
 8003480:	d20a      	bcs.n	8003498 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	607b      	str	r3, [r7, #4]
    }
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <vPortValidateInterruptPriority+0x78>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <vPortValidateInterruptPriority+0x7c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d90a      	bls.n	80034be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	603b      	str	r3, [r7, #0]
    }
 80034ba:	bf00      	nop
 80034bc:	e7fe      	b.n	80034bc <vPortValidateInterruptPriority+0x60>
    }
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000e3f0 	.word	0xe000e3f0
 80034d0:	200002b0 	.word	0x200002b0
 80034d4:	e000ed0c 	.word	0xe000ed0c
 80034d8:	200002b4 	.word	0x200002b4

080034dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80034e8:	f7fe fc68 	bl	8001dbc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80034ec:	4b65      	ldr	r3, [pc, #404]	; (8003684 <pvPortMalloc+0x1a8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80034f4:	f000 f934 	bl	8003760 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034f8:	4b63      	ldr	r3, [pc, #396]	; (8003688 <pvPortMalloc+0x1ac>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 80a7 	bne.w	8003654 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02d      	beq.n	8003568 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800350c:	2208      	movs	r2, #8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d227      	bcs.n	8003568 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003518:	2208      	movs	r2, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	2b00      	cmp	r3, #0
 8003528:	d021      	beq.n	800356e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f023 0307 	bic.w	r3, r3, #7
 8003530:	3308      	adds	r3, #8
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	429a      	cmp	r2, r3
 8003536:	d214      	bcs.n	8003562 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f023 0307 	bic.w	r3, r3, #7
 800353e:	3308      	adds	r3, #8
 8003540:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <pvPortMalloc+0x92>
        __asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	617b      	str	r3, [r7, #20]
    }
 800355e:	bf00      	nop
 8003560:	e7fe      	b.n	8003560 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003566:	e002      	b.n	800356e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	e000      	b.n	8003570 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800356e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d06e      	beq.n	8003654 <pvPortMalloc+0x178>
 8003576:	4b45      	ldr	r3, [pc, #276]	; (800368c <pvPortMalloc+0x1b0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	d869      	bhi.n	8003654 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003580:	4b43      	ldr	r3, [pc, #268]	; (8003690 <pvPortMalloc+0x1b4>)
 8003582:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003584:	4b42      	ldr	r3, [pc, #264]	; (8003690 <pvPortMalloc+0x1b4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800358a:	e004      	b.n	8003596 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	d903      	bls.n	80035a8 <pvPortMalloc+0xcc>
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f1      	bne.n	800358c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80035a8:	4b36      	ldr	r3, [pc, #216]	; (8003684 <pvPortMalloc+0x1a8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d050      	beq.n	8003654 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2208      	movs	r2, #8
 80035b8:	4413      	add	r3, r2
 80035ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	1ad2      	subs	r2, r2, r3
 80035cc:	2308      	movs	r3, #8
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d91f      	bls.n	8003614 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <pvPortMalloc+0x120>
        __asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	613b      	str	r3, [r7, #16]
    }
 80035f8:	bf00      	nop
 80035fa:	e7fe      	b.n	80035fa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1ad2      	subs	r2, r2, r3
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800360e:	69b8      	ldr	r0, [r7, #24]
 8003610:	f000 f908 	bl	8003824 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <pvPortMalloc+0x1b0>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	4a1b      	ldr	r2, [pc, #108]	; (800368c <pvPortMalloc+0x1b0>)
 8003620:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003622:	4b1a      	ldr	r3, [pc, #104]	; (800368c <pvPortMalloc+0x1b0>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <pvPortMalloc+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d203      	bcs.n	8003636 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <pvPortMalloc+0x1b0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <pvPortMalloc+0x1b8>)
 8003634:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <pvPortMalloc+0x1ac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	431a      	orrs	r2, r3
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <pvPortMalloc+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	4a11      	ldr	r2, [pc, #68]	; (8003698 <pvPortMalloc+0x1bc>)
 8003652:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003654:	f7fe fbc0 	bl	8001dd8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <pvPortMalloc+0x19c>
        __asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	60fb      	str	r3, [r7, #12]
    }
 8003674:	bf00      	nop
 8003676:	e7fe      	b.n	8003676 <pvPortMalloc+0x19a>
    return pvReturn;
 8003678:	69fb      	ldr	r3, [r7, #28]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20012ec0 	.word	0x20012ec0
 8003688:	20012ed4 	.word	0x20012ed4
 800368c:	20012ec4 	.word	0x20012ec4
 8003690:	20012eb8 	.word	0x20012eb8
 8003694:	20012ec8 	.word	0x20012ec8
 8003698:	20012ecc 	.word	0x20012ecc

0800369c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d04d      	beq.n	800374a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036ae:	2308      	movs	r3, #8
 80036b0:	425b      	negs	r3, r3
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <vPortFree+0xb8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <vPortFree+0x44>
        __asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60fb      	str	r3, [r7, #12]
    }
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <vPortFree+0x62>
        __asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	60bb      	str	r3, [r7, #8]
    }
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	4b14      	ldr	r3, [pc, #80]	; (8003754 <vPortFree+0xb8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01e      	beq.n	800374a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d11a      	bne.n	800374a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <vPortFree+0xb8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	43db      	mvns	r3, r3
 800371e:	401a      	ands	r2, r3
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003724:	f7fe fb4a 	bl	8001dbc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <vPortFree+0xbc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4413      	add	r3, r2
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <vPortFree+0xbc>)
 8003734:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003736:	6938      	ldr	r0, [r7, #16]
 8003738:	f000 f874 	bl	8003824 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800373c:	4b07      	ldr	r3, [pc, #28]	; (800375c <vPortFree+0xc0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a06      	ldr	r2, [pc, #24]	; (800375c <vPortFree+0xc0>)
 8003744:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003746:	f7fe fb47 	bl	8001dd8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800374a:	bf00      	nop
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20012ed4 	.word	0x20012ed4
 8003758:	20012ec4 	.word	0x20012ec4
 800375c:	20012ed0 	.word	0x20012ed0

08003760 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003766:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800376a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <prvHeapInit+0xac>)
 800376e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3307      	adds	r3, #7
 800377e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0307 	bic.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	4a1f      	ldr	r2, [pc, #124]	; (800380c <prvHeapInit+0xac>)
 8003790:	4413      	add	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <prvHeapInit+0xb0>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800379e:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <prvHeapInit+0xb0>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4413      	add	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80037ac:	2208      	movs	r2, #8
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0307 	bic.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <prvHeapInit+0xb4>)
 80037c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <prvHeapInit+0xb4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <prvHeapInit+0xb4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	1ad2      	subs	r2, r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <prvHeapInit+0xb4>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a0a      	ldr	r2, [pc, #40]	; (8003818 <prvHeapInit+0xb8>)
 80037ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a09      	ldr	r2, [pc, #36]	; (800381c <prvHeapInit+0xbc>)
 80037f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <prvHeapInit+0xc0>)
 80037fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	200002b8 	.word	0x200002b8
 8003810:	20012eb8 	.word	0x20012eb8
 8003814:	20012ec0 	.word	0x20012ec0
 8003818:	20012ec8 	.word	0x20012ec8
 800381c:	20012ec4 	.word	0x20012ec4
 8003820:	20012ed4 	.word	0x20012ed4

08003824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800382c:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <prvInsertBlockIntoFreeList+0xac>)
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e002      	b.n	8003838 <prvInsertBlockIntoFreeList+0x14>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	d8f7      	bhi.n	8003832 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	4413      	add	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d108      	bne.n	8003866 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	441a      	add	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	441a      	add	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d118      	bne.n	80038ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d00d      	beq.n	80038a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	441a      	add	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e008      	b.n	80038b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <prvInsertBlockIntoFreeList+0xb0>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e003      	b.n	80038b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d002      	beq.n	80038c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20012eb8 	.word	0x20012eb8
 80038d4:	20012ec0 	.word	0x20012ec0

080038d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	db0b      	blt.n	8003902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4907      	ldr	r1, [pc, #28]	; (8003910 <__NVIC_EnableIRQ+0x38>)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2001      	movs	r0, #1
 80038fa:	fa00 f202 	lsl.w	r2, r0, r2
 80038fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000e100 	.word	0xe000e100

08003914 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	2300      	movs	r3, #0
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	2300      	movs	r3, #0
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2301      	movs	r3, #1
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	f001 f899 	bl	8004a64 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f001 f8b6 	bl	8004aa8 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800393c:	4b97      	ldr	r3, [pc, #604]	; (8003b9c <extInt_Config+0x288>)
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	4a96      	ldr	r2, [pc, #600]	; (8003b9c <extInt_Config+0x288>)
 8003942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003946:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	f200 85cf 	bhi.w	80044f2 <extInt_Config+0xbde>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <extInt_Config+0x48>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	0800399d 	.word	0x0800399d
 8003960:	08003a53 	.word	0x08003a53
 8003964:	08003b09 	.word	0x08003b09
 8003968:	08003bdf 	.word	0x08003bdf
 800396c:	08003c95 	.word	0x08003c95
 8003970:	08003d43 	.word	0x08003d43
 8003974:	08003e09 	.word	0x08003e09
 8003978:	08003eb1 	.word	0x08003eb1
 800397c:	08003f59 	.word	0x08003f59
 8003980:	08004001 	.word	0x08004001
 8003984:	080040c7 	.word	0x080040c7
 8003988:	0800416f 	.word	0x0800416f
 800398c:	08004217 	.word	0x08004217
 8003990:	080042dd 	.word	0x080042dd
 8003994:	08004385 	.word	0x08004385
 8003998:	0800442d 	.word	0x0800442d
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 800399c:	4b80      	ldr	r3, [pc, #512]	; (8003ba0 <extInt_Config+0x28c>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a7f      	ldr	r2, [pc, #508]	; (8003ba0 <extInt_Config+0x28c>)
 80039a2:	f023 030f 	bic.w	r3, r3, #15
 80039a6:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4a7d      	ldr	r2, [pc, #500]	; (8003ba4 <extInt_Config+0x290>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d105      	bne.n	80039c0 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80039b4:	4b7a      	ldr	r3, [pc, #488]	; (8003ba0 <extInt_Config+0x28c>)
 80039b6:	4a7a      	ldr	r2, [pc, #488]	; (8003ba0 <extInt_Config+0x28c>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80039bc:	f000 bd9b 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4a78      	ldr	r2, [pc, #480]	; (8003ba8 <extInt_Config+0x294>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d107      	bne.n	80039dc <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80039cc:	4b74      	ldr	r3, [pc, #464]	; (8003ba0 <extInt_Config+0x28c>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a73      	ldr	r2, [pc, #460]	; (8003ba0 <extInt_Config+0x28c>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	6093      	str	r3, [r2, #8]
		break;
 80039d8:	f000 bd8d 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4a72      	ldr	r2, [pc, #456]	; (8003bac <extInt_Config+0x298>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d107      	bne.n	80039f8 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80039e8:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <extInt_Config+0x28c>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a6c      	ldr	r2, [pc, #432]	; (8003ba0 <extInt_Config+0x28c>)
 80039ee:	f043 0302 	orr.w	r3, r3, #2
 80039f2:	6093      	str	r3, [r2, #8]
		break;
 80039f4:	f000 bd7f 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	4a6c      	ldr	r2, [pc, #432]	; (8003bb0 <extInt_Config+0x29c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d107      	bne.n	8003a14 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8003a04:	4b66      	ldr	r3, [pc, #408]	; (8003ba0 <extInt_Config+0x28c>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <extInt_Config+0x28c>)
 8003a0a:	f043 0303 	orr.w	r3, r3, #3
 8003a0e:	6093      	str	r3, [r2, #8]
		break;
 8003a10:	f000 bd71 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4a66      	ldr	r2, [pc, #408]	; (8003bb4 <extInt_Config+0x2a0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d107      	bne.n	8003a30 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8003a20:	4b5f      	ldr	r3, [pc, #380]	; (8003ba0 <extInt_Config+0x28c>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a5e      	ldr	r2, [pc, #376]	; (8003ba0 <extInt_Config+0x28c>)
 8003a26:	f043 0304 	orr.w	r3, r3, #4
 8003a2a:	6093      	str	r3, [r2, #8]
		break;
 8003a2c:	f000 bd63 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4a60      	ldr	r2, [pc, #384]	; (8003bb8 <extInt_Config+0x2a4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d107      	bne.n	8003a4c <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8003a3c:	4b58      	ldr	r3, [pc, #352]	; (8003ba0 <extInt_Config+0x28c>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a57      	ldr	r2, [pc, #348]	; (8003ba0 <extInt_Config+0x28c>)
 8003a42:	f043 0307 	orr.w	r3, r3, #7
 8003a46:	6093      	str	r3, [r2, #8]
		break;
 8003a48:	f000 bd55 	b.w	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003a4c:	bf00      	nop
		break;
 8003a4e:	f000 bd52 	b.w	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8003a52:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <extInt_Config+0x28c>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	4a52      	ldr	r2, [pc, #328]	; (8003ba0 <extInt_Config+0x28c>)
 8003a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a4f      	ldr	r2, [pc, #316]	; (8003ba4 <extInt_Config+0x290>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d105      	bne.n	8003a76 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8003a6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ba0 <extInt_Config+0x28c>)
 8003a6c:	4a4c      	ldr	r2, [pc, #304]	; (8003ba0 <extInt_Config+0x28c>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003a72:	f000 bd40 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ba8 <extInt_Config+0x294>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d107      	bne.n	8003a92 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <extInt_Config+0x28c>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4a46      	ldr	r2, [pc, #280]	; (8003ba0 <extInt_Config+0x28c>)
 8003a88:	f043 0310 	orr.w	r3, r3, #16
 8003a8c:	6093      	str	r3, [r2, #8]
		break;
 8003a8e:	f000 bd32 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a44      	ldr	r2, [pc, #272]	; (8003bac <extInt_Config+0x298>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d107      	bne.n	8003aae <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8003a9e:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <extInt_Config+0x28c>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4a3f      	ldr	r2, [pc, #252]	; (8003ba0 <extInt_Config+0x28c>)
 8003aa4:	f043 0320 	orr.w	r3, r3, #32
 8003aa8:	6093      	str	r3, [r2, #8]
		break;
 8003aaa:	f000 bd24 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a3e      	ldr	r2, [pc, #248]	; (8003bb0 <extInt_Config+0x29c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d107      	bne.n	8003aca <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8003aba:	4b39      	ldr	r3, [pc, #228]	; (8003ba0 <extInt_Config+0x28c>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4a38      	ldr	r2, [pc, #224]	; (8003ba0 <extInt_Config+0x28c>)
 8003ac0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003ac4:	6093      	str	r3, [r2, #8]
		break;
 8003ac6:	f000 bd16 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a38      	ldr	r2, [pc, #224]	; (8003bb4 <extInt_Config+0x2a0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d107      	bne.n	8003ae6 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8003ad6:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <extInt_Config+0x28c>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4a31      	ldr	r2, [pc, #196]	; (8003ba0 <extInt_Config+0x28c>)
 8003adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae0:	6093      	str	r3, [r2, #8]
		break;
 8003ae2:	f000 bd08 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a32      	ldr	r2, [pc, #200]	; (8003bb8 <extInt_Config+0x2a4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d107      	bne.n	8003b02 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8003af2:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <extInt_Config+0x28c>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <extInt_Config+0x28c>)
 8003af8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003afc:	6093      	str	r3, [r2, #8]
		break;
 8003afe:	f000 bcfa 	b.w	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003b02:	bf00      	nop
		break;
 8003b04:	f000 bcf7 	b.w	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <extInt_Config+0x28c>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <extInt_Config+0x28c>)
 8003b0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b12:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	4a22      	ldr	r2, [pc, #136]	; (8003ba4 <extInt_Config+0x290>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d105      	bne.n	8003b2c <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8003b20:	4b1f      	ldr	r3, [pc, #124]	; (8003ba0 <extInt_Config+0x28c>)
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <extInt_Config+0x28c>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003b28:	f000 bce5 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <extInt_Config+0x294>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d107      	bne.n	8003b48 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <extInt_Config+0x28c>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <extInt_Config+0x28c>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b42:	6093      	str	r3, [r2, #8]
		break;
 8003b44:	f000 bcd7 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <extInt_Config+0x298>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d107      	bne.n	8003b64 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8003b54:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <extInt_Config+0x28c>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <extInt_Config+0x28c>)
 8003b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5e:	6093      	str	r3, [r2, #8]
		break;
 8003b60:	f000 bcc9 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <extInt_Config+0x29c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d107      	bne.n	8003b80 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <extInt_Config+0x28c>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <extInt_Config+0x28c>)
 8003b76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003b7a:	6093      	str	r3, [r2, #8]
		break;
 8003b7c:	f000 bcbb 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <extInt_Config+0x2a0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d117      	bne.n	8003bbc <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <extInt_Config+0x28c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a03      	ldr	r2, [pc, #12]	; (8003ba0 <extInt_Config+0x28c>)
 8003b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b96:	6093      	str	r3, [r2, #8]
		break;
 8003b98:	f000 bcad 	b.w	80044f6 <extInt_Config+0xbe2>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40013800 	.word	0x40013800
 8003ba4:	40020000 	.word	0x40020000
 8003ba8:	40020400 	.word	0x40020400
 8003bac:	40020800 	.word	0x40020800
 8003bb0:	40020c00 	.word	0x40020c00
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	4a8a      	ldr	r2, [pc, #552]	; (8003dec <extInt_Config+0x4d8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d107      	bne.n	8003bd8 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8003bc8:	4b89      	ldr	r3, [pc, #548]	; (8003df0 <extInt_Config+0x4dc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a88      	ldr	r2, [pc, #544]	; (8003df0 <extInt_Config+0x4dc>)
 8003bce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bd2:	6093      	str	r3, [r2, #8]
		break;
 8003bd4:	f000 bc8f 	b.w	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003bd8:	bf00      	nop
		break;
 8003bda:	f000 bc8c 	b.w	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8003bde:	4b84      	ldr	r3, [pc, #528]	; (8003df0 <extInt_Config+0x4dc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4a83      	ldr	r2, [pc, #524]	; (8003df0 <extInt_Config+0x4dc>)
 8003be4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003be8:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a80      	ldr	r2, [pc, #512]	; (8003df4 <extInt_Config+0x4e0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d105      	bne.n	8003c02 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8003bf6:	4b7e      	ldr	r3, [pc, #504]	; (8003df0 <extInt_Config+0x4dc>)
 8003bf8:	4a7d      	ldr	r2, [pc, #500]	; (8003df0 <extInt_Config+0x4dc>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003bfe:	f000 bc7a 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a7b      	ldr	r2, [pc, #492]	; (8003df8 <extInt_Config+0x4e4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d107      	bne.n	8003c1e <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8003c0e:	4b78      	ldr	r3, [pc, #480]	; (8003df0 <extInt_Config+0x4dc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	4a77      	ldr	r2, [pc, #476]	; (8003df0 <extInt_Config+0x4dc>)
 8003c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c18:	6093      	str	r3, [r2, #8]
		break;
 8003c1a:	f000 bc6c 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a75      	ldr	r2, [pc, #468]	; (8003dfc <extInt_Config+0x4e8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d107      	bne.n	8003c3a <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8003c2a:	4b71      	ldr	r3, [pc, #452]	; (8003df0 <extInt_Config+0x4dc>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	4a70      	ldr	r2, [pc, #448]	; (8003df0 <extInt_Config+0x4dc>)
 8003c30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c34:	6093      	str	r3, [r2, #8]
		break;
 8003c36:	f000 bc5e 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a6f      	ldr	r2, [pc, #444]	; (8003e00 <extInt_Config+0x4ec>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d107      	bne.n	8003c56 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8003c46:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <extInt_Config+0x4dc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	4a69      	ldr	r2, [pc, #420]	; (8003df0 <extInt_Config+0x4dc>)
 8003c4c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003c50:	6093      	str	r3, [r2, #8]
		break;
 8003c52:	f000 bc50 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a69      	ldr	r2, [pc, #420]	; (8003e04 <extInt_Config+0x4f0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d107      	bne.n	8003c72 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8003c62:	4b63      	ldr	r3, [pc, #396]	; (8003df0 <extInt_Config+0x4dc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	4a62      	ldr	r2, [pc, #392]	; (8003df0 <extInt_Config+0x4dc>)
 8003c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c6c:	6093      	str	r3, [r2, #8]
		break;
 8003c6e:	f000 bc42 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a5c      	ldr	r2, [pc, #368]	; (8003dec <extInt_Config+0x4d8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d107      	bne.n	8003c8e <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8003c7e:	4b5c      	ldr	r3, [pc, #368]	; (8003df0 <extInt_Config+0x4dc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a5b      	ldr	r2, [pc, #364]	; (8003df0 <extInt_Config+0x4dc>)
 8003c84:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003c88:	6093      	str	r3, [r2, #8]
		break;
 8003c8a:	f000 bc34 	b.w	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003c8e:	bf00      	nop
		break;
 8003c90:	f000 bc31 	b.w	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8003c94:	4b56      	ldr	r3, [pc, #344]	; (8003df0 <extInt_Config+0x4dc>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4a55      	ldr	r2, [pc, #340]	; (8003df0 <extInt_Config+0x4dc>)
 8003c9a:	f023 030f 	bic.w	r3, r3, #15
 8003c9e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4a53      	ldr	r2, [pc, #332]	; (8003df4 <extInt_Config+0x4e0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d105      	bne.n	8003cb8 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8003cac:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <extInt_Config+0x4dc>)
 8003cae:	4a50      	ldr	r2, [pc, #320]	; (8003df0 <extInt_Config+0x4dc>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003cb4:	f000 bc1f 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	4a4e      	ldr	r2, [pc, #312]	; (8003df8 <extInt_Config+0x4e4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d107      	bne.n	8003cd4 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8003cc4:	4b4a      	ldr	r3, [pc, #296]	; (8003df0 <extInt_Config+0x4dc>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a49      	ldr	r2, [pc, #292]	; (8003df0 <extInt_Config+0x4dc>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	60d3      	str	r3, [r2, #12]
		break;
 8003cd0:	f000 bc11 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <extInt_Config+0x4e8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d107      	bne.n	8003cf0 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003ce0:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <extInt_Config+0x4dc>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a42      	ldr	r2, [pc, #264]	; (8003df0 <extInt_Config+0x4dc>)
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	60d3      	str	r3, [r2, #12]
		break;
 8003cec:	f000 bc03 	b.w	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	4a42      	ldr	r2, [pc, #264]	; (8003e00 <extInt_Config+0x4ec>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d106      	bne.n	8003d0a <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003cfc:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <extInt_Config+0x4dc>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a3b      	ldr	r2, [pc, #236]	; (8003df0 <extInt_Config+0x4dc>)
 8003d02:	f043 0303 	orr.w	r3, r3, #3
 8003d06:	60d3      	str	r3, [r2, #12]
		break;
 8003d08:	e3f5      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a3c      	ldr	r2, [pc, #240]	; (8003e04 <extInt_Config+0x4f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d106      	bne.n	8003d24 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8003d16:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <extInt_Config+0x4dc>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4a35      	ldr	r2, [pc, #212]	; (8003df0 <extInt_Config+0x4dc>)
 8003d1c:	f043 0304 	orr.w	r3, r3, #4
 8003d20:	60d3      	str	r3, [r2, #12]
		break;
 8003d22:	e3e8      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	4a30      	ldr	r2, [pc, #192]	; (8003dec <extInt_Config+0x4d8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d106      	bne.n	8003d3e <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8003d30:	4b2f      	ldr	r3, [pc, #188]	; (8003df0 <extInt_Config+0x4dc>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <extInt_Config+0x4dc>)
 8003d36:	f043 0307 	orr.w	r3, r3, #7
 8003d3a:	60d3      	str	r3, [r2, #12]
		break;
 8003d3c:	e3db      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003d3e:	bf00      	nop
		break;
 8003d40:	e3d9      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8003d42:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <extInt_Config+0x4dc>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <extInt_Config+0x4dc>)
 8003d48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4c:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <extInt_Config+0x4e0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d104      	bne.n	8003d64 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <extInt_Config+0x4dc>)
 8003d5c:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <extInt_Config+0x4dc>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003d62:	e3c8      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <extInt_Config+0x4e4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d106      	bne.n	8003d7e <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8003d70:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <extInt_Config+0x4dc>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <extInt_Config+0x4dc>)
 8003d76:	f043 0310 	orr.w	r3, r3, #16
 8003d7a:	60d3      	str	r3, [r2, #12]
		break;
 8003d7c:	e3bb      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <extInt_Config+0x4e8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d106      	bne.n	8003d98 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8003d8a:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <extInt_Config+0x4dc>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <extInt_Config+0x4dc>)
 8003d90:	f043 0320 	orr.w	r3, r3, #32
 8003d94:	60d3      	str	r3, [r2, #12]
		break;
 8003d96:	e3ae      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <extInt_Config+0x4ec>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d106      	bne.n	8003db2 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <extInt_Config+0x4dc>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <extInt_Config+0x4dc>)
 8003daa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003dae:	60d3      	str	r3, [r2, #12]
		break;
 8003db0:	e3a1      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <extInt_Config+0x4f0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d106      	bne.n	8003dcc <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <extInt_Config+0x4dc>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <extInt_Config+0x4dc>)
 8003dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc8:	60d3      	str	r3, [r2, #12]
		break;
 8003dca:	e394      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	4a06      	ldr	r2, [pc, #24]	; (8003dec <extInt_Config+0x4d8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d106      	bne.n	8003de6 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <extInt_Config+0x4dc>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <extInt_Config+0x4dc>)
 8003dde:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003de2:	60d3      	str	r3, [r2, #12]
		break;
 8003de4:	e387      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003de6:	bf00      	nop
		break;
 8003de8:	e385      	b.n	80044f6 <extInt_Config+0xbe2>
 8003dea:	bf00      	nop
 8003dec:	40021c00 	.word	0x40021c00
 8003df0:	40013800 	.word	0x40013800
 8003df4:	40020000 	.word	0x40020000
 8003df8:	40020400 	.word	0x40020400
 8003dfc:	40020800 	.word	0x40020800
 8003e00:	40020c00 	.word	0x40020c00
 8003e04:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8003e08:	4b86      	ldr	r3, [pc, #536]	; (8004024 <extInt_Config+0x710>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a85      	ldr	r2, [pc, #532]	; (8004024 <extInt_Config+0x710>)
 8003e0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e12:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	4a83      	ldr	r2, [pc, #524]	; (8004028 <extInt_Config+0x714>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d104      	bne.n	8003e2a <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8003e20:	4b80      	ldr	r3, [pc, #512]	; (8004024 <extInt_Config+0x710>)
 8003e22:	4a80      	ldr	r2, [pc, #512]	; (8004024 <extInt_Config+0x710>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003e28:	e365      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a7e      	ldr	r2, [pc, #504]	; (800402c <extInt_Config+0x718>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d106      	bne.n	8003e44 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8003e36:	4b7b      	ldr	r3, [pc, #492]	; (8004024 <extInt_Config+0x710>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	4a7a      	ldr	r2, [pc, #488]	; (8004024 <extInt_Config+0x710>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	60d3      	str	r3, [r2, #12]
		break;
 8003e42:	e358      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	4a79      	ldr	r2, [pc, #484]	; (8004030 <extInt_Config+0x71c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d106      	bne.n	8003e5e <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003e50:	4b74      	ldr	r3, [pc, #464]	; (8004024 <extInt_Config+0x710>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a73      	ldr	r2, [pc, #460]	; (8004024 <extInt_Config+0x710>)
 8003e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e5a:	60d3      	str	r3, [r2, #12]
		break;
 8003e5c:	e34b      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4a73      	ldr	r2, [pc, #460]	; (8004034 <extInt_Config+0x720>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d106      	bne.n	8003e78 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8003e6a:	4b6e      	ldr	r3, [pc, #440]	; (8004024 <extInt_Config+0x710>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4a6d      	ldr	r2, [pc, #436]	; (8004024 <extInt_Config+0x710>)
 8003e70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003e74:	60d3      	str	r3, [r2, #12]
		break;
 8003e76:	e33e      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	4a6e      	ldr	r2, [pc, #440]	; (8004038 <extInt_Config+0x724>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d106      	bne.n	8003e92 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8003e84:	4b67      	ldr	r3, [pc, #412]	; (8004024 <extInt_Config+0x710>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	4a66      	ldr	r2, [pc, #408]	; (8004024 <extInt_Config+0x710>)
 8003e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e8e:	60d3      	str	r3, [r2, #12]
		break;
 8003e90:	e331      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a68      	ldr	r2, [pc, #416]	; (800403c <extInt_Config+0x728>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d106      	bne.n	8003eac <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8003e9e:	4b61      	ldr	r3, [pc, #388]	; (8004024 <extInt_Config+0x710>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	4a60      	ldr	r2, [pc, #384]	; (8004024 <extInt_Config+0x710>)
 8003ea4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ea8:	60d3      	str	r3, [r2, #12]
		break;
 8003eaa:	e324      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003eac:	bf00      	nop
		break;
 8003eae:	e322      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8003eb0:	4b5c      	ldr	r3, [pc, #368]	; (8004024 <extInt_Config+0x710>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4a5b      	ldr	r2, [pc, #364]	; (8004024 <extInt_Config+0x710>)
 8003eb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eba:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	4a59      	ldr	r2, [pc, #356]	; (8004028 <extInt_Config+0x714>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d104      	bne.n	8003ed2 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8003ec8:	4b56      	ldr	r3, [pc, #344]	; (8004024 <extInt_Config+0x710>)
 8003eca:	4a56      	ldr	r2, [pc, #344]	; (8004024 <extInt_Config+0x710>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003ed0:	e311      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a54      	ldr	r2, [pc, #336]	; (800402c <extInt_Config+0x718>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d106      	bne.n	8003eec <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003ede:	4b51      	ldr	r3, [pc, #324]	; (8004024 <extInt_Config+0x710>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a50      	ldr	r2, [pc, #320]	; (8004024 <extInt_Config+0x710>)
 8003ee4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ee8:	60d3      	str	r3, [r2, #12]
		break;
 8003eea:	e304      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4a4f      	ldr	r2, [pc, #316]	; (8004030 <extInt_Config+0x71c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d106      	bne.n	8003f06 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8003ef8:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <extInt_Config+0x710>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a49      	ldr	r2, [pc, #292]	; (8004024 <extInt_Config+0x710>)
 8003efe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f02:	60d3      	str	r3, [r2, #12]
		break;
 8003f04:	e2f7      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4a49      	ldr	r2, [pc, #292]	; (8004034 <extInt_Config+0x720>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d106      	bne.n	8003f20 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8003f12:	4b44      	ldr	r3, [pc, #272]	; (8004024 <extInt_Config+0x710>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4a43      	ldr	r2, [pc, #268]	; (8004024 <extInt_Config+0x710>)
 8003f18:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003f1c:	60d3      	str	r3, [r2, #12]
		break;
 8003f1e:	e2ea      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a44      	ldr	r2, [pc, #272]	; (8004038 <extInt_Config+0x724>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d106      	bne.n	8003f3a <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003f2c:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <extInt_Config+0x710>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a3c      	ldr	r2, [pc, #240]	; (8004024 <extInt_Config+0x710>)
 8003f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f36:	60d3      	str	r3, [r2, #12]
		break;
 8003f38:	e2dd      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a3e      	ldr	r2, [pc, #248]	; (800403c <extInt_Config+0x728>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d106      	bne.n	8003f54 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <extInt_Config+0x710>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	4a36      	ldr	r2, [pc, #216]	; (8004024 <extInt_Config+0x710>)
 8003f4c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003f50:	60d3      	str	r3, [r2, #12]
		break;
 8003f52:	e2d0      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003f54:	bf00      	nop
		break;
 8003f56:	e2ce      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8003f58:	4b32      	ldr	r3, [pc, #200]	; (8004024 <extInt_Config+0x710>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	4a31      	ldr	r2, [pc, #196]	; (8004024 <extInt_Config+0x710>)
 8003f5e:	f023 030f 	bic.w	r3, r3, #15
 8003f62:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	; (8004028 <extInt_Config+0x714>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d104      	bne.n	8003f7a <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8003f70:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <extInt_Config+0x710>)
 8003f72:	4a2c      	ldr	r2, [pc, #176]	; (8004024 <extInt_Config+0x710>)
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003f78:	e2bd      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a2a      	ldr	r2, [pc, #168]	; (800402c <extInt_Config+0x718>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d106      	bne.n	8003f94 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8003f86:	4b27      	ldr	r3, [pc, #156]	; (8004024 <extInt_Config+0x710>)
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	4a26      	ldr	r2, [pc, #152]	; (8004024 <extInt_Config+0x710>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6113      	str	r3, [r2, #16]
		break;
 8003f92:	e2b0      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	4a25      	ldr	r2, [pc, #148]	; (8004030 <extInt_Config+0x71c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d106      	bne.n	8003fae <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8003fa0:	4b20      	ldr	r3, [pc, #128]	; (8004024 <extInt_Config+0x710>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <extInt_Config+0x710>)
 8003fa6:	f043 0302 	orr.w	r3, r3, #2
 8003faa:	6113      	str	r3, [r2, #16]
		break;
 8003fac:	e2a3      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <extInt_Config+0x720>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d106      	bne.n	8003fc8 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8003fba:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <extInt_Config+0x710>)
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	4a19      	ldr	r2, [pc, #100]	; (8004024 <extInt_Config+0x710>)
 8003fc0:	f043 0303 	orr.w	r3, r3, #3
 8003fc4:	6113      	str	r3, [r2, #16]
		break;
 8003fc6:	e296      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4a1a      	ldr	r2, [pc, #104]	; (8004038 <extInt_Config+0x724>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d106      	bne.n	8003fe2 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <extInt_Config+0x710>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4a12      	ldr	r2, [pc, #72]	; (8004024 <extInt_Config+0x710>)
 8003fda:	f043 0304 	orr.w	r3, r3, #4
 8003fde:	6113      	str	r3, [r2, #16]
		break;
 8003fe0:	e289      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a14      	ldr	r2, [pc, #80]	; (800403c <extInt_Config+0x728>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d106      	bne.n	8003ffc <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <extInt_Config+0x710>)
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <extInt_Config+0x710>)
 8003ff4:	f043 0307 	orr.w	r3, r3, #7
 8003ff8:	6113      	str	r3, [r2, #16]
		break;
 8003ffa:	e27c      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8003ffc:	bf00      	nop
		break;
 8003ffe:	e27a      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <extInt_Config+0x710>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <extInt_Config+0x710>)
 8004006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400a:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4a05      	ldr	r2, [pc, #20]	; (8004028 <extInt_Config+0x714>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d113      	bne.n	8004040 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8004018:	4b02      	ldr	r3, [pc, #8]	; (8004024 <extInt_Config+0x710>)
 800401a:	4a02      	ldr	r2, [pc, #8]	; (8004024 <extInt_Config+0x710>)
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8004020:	e269      	b.n	80044f6 <extInt_Config+0xbe2>
 8004022:	bf00      	nop
 8004024:	40013800 	.word	0x40013800
 8004028:	40020000 	.word	0x40020000
 800402c:	40020400 	.word	0x40020400
 8004030:	40020800 	.word	0x40020800
 8004034:	40020c00 	.word	0x40020c00
 8004038:	40021000 	.word	0x40021000
 800403c:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	4a83      	ldr	r2, [pc, #524]	; (8004254 <extInt_Config+0x940>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d106      	bne.n	800405a <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 800404c:	4b82      	ldr	r3, [pc, #520]	; (8004258 <extInt_Config+0x944>)
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	4a81      	ldr	r2, [pc, #516]	; (8004258 <extInt_Config+0x944>)
 8004052:	f043 0310 	orr.w	r3, r3, #16
 8004056:	6113      	str	r3, [r2, #16]
		break;
 8004058:	e24d      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a7e      	ldr	r2, [pc, #504]	; (800425c <extInt_Config+0x948>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d106      	bne.n	8004074 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8004066:	4b7c      	ldr	r3, [pc, #496]	; (8004258 <extInt_Config+0x944>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	4a7b      	ldr	r2, [pc, #492]	; (8004258 <extInt_Config+0x944>)
 800406c:	f043 0320 	orr.w	r3, r3, #32
 8004070:	6113      	str	r3, [r2, #16]
		break;
 8004072:	e240      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	4a79      	ldr	r2, [pc, #484]	; (8004260 <extInt_Config+0x94c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d106      	bne.n	800408e <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8004080:	4b75      	ldr	r3, [pc, #468]	; (8004258 <extInt_Config+0x944>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4a74      	ldr	r2, [pc, #464]	; (8004258 <extInt_Config+0x944>)
 8004086:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800408a:	6113      	str	r3, [r2, #16]
		break;
 800408c:	e233      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a73      	ldr	r2, [pc, #460]	; (8004264 <extInt_Config+0x950>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d106      	bne.n	80040a8 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 800409a:	4b6f      	ldr	r3, [pc, #444]	; (8004258 <extInt_Config+0x944>)
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	4a6e      	ldr	r2, [pc, #440]	; (8004258 <extInt_Config+0x944>)
 80040a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a4:	6113      	str	r3, [r2, #16]
		break;
 80040a6:	e226      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4a6e      	ldr	r2, [pc, #440]	; (8004268 <extInt_Config+0x954>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d106      	bne.n	80040c2 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80040b4:	4b68      	ldr	r3, [pc, #416]	; (8004258 <extInt_Config+0x944>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	4a67      	ldr	r2, [pc, #412]	; (8004258 <extInt_Config+0x944>)
 80040ba:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80040be:	6113      	str	r3, [r2, #16]
		break;
 80040c0:	e219      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 80040c2:	bf00      	nop
		break;
 80040c4:	e217      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80040c6:	4b64      	ldr	r3, [pc, #400]	; (8004258 <extInt_Config+0x944>)
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	4a63      	ldr	r2, [pc, #396]	; (8004258 <extInt_Config+0x944>)
 80040cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040d0:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a64      	ldr	r2, [pc, #400]	; (800426c <extInt_Config+0x958>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d104      	bne.n	80040e8 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80040de:	4b5e      	ldr	r3, [pc, #376]	; (8004258 <extInt_Config+0x944>)
 80040e0:	4a5d      	ldr	r2, [pc, #372]	; (8004258 <extInt_Config+0x944>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80040e6:	e206      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	4a59      	ldr	r2, [pc, #356]	; (8004254 <extInt_Config+0x940>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d106      	bne.n	8004102 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80040f4:	4b58      	ldr	r3, [pc, #352]	; (8004258 <extInt_Config+0x944>)
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	4a57      	ldr	r2, [pc, #348]	; (8004258 <extInt_Config+0x944>)
 80040fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fe:	6113      	str	r3, [r2, #16]
		break;
 8004100:	e1f9      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a54      	ldr	r2, [pc, #336]	; (800425c <extInt_Config+0x948>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d106      	bne.n	800411c <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800410e:	4b52      	ldr	r3, [pc, #328]	; (8004258 <extInt_Config+0x944>)
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	4a51      	ldr	r2, [pc, #324]	; (8004258 <extInt_Config+0x944>)
 8004114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004118:	6113      	str	r3, [r2, #16]
		break;
 800411a:	e1ec      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4a4f      	ldr	r2, [pc, #316]	; (8004260 <extInt_Config+0x94c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d106      	bne.n	8004136 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8004128:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <extInt_Config+0x944>)
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	4a4a      	ldr	r2, [pc, #296]	; (8004258 <extInt_Config+0x944>)
 800412e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004132:	6113      	str	r3, [r2, #16]
		break;
 8004134:	e1df      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a49      	ldr	r2, [pc, #292]	; (8004264 <extInt_Config+0x950>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d106      	bne.n	8004150 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8004142:	4b45      	ldr	r3, [pc, #276]	; (8004258 <extInt_Config+0x944>)
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4a44      	ldr	r2, [pc, #272]	; (8004258 <extInt_Config+0x944>)
 8004148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800414c:	6113      	str	r3, [r2, #16]
		break;
 800414e:	e1d2      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4a44      	ldr	r2, [pc, #272]	; (8004268 <extInt_Config+0x954>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d106      	bne.n	800416a <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 800415c:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <extInt_Config+0x944>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	4a3d      	ldr	r2, [pc, #244]	; (8004258 <extInt_Config+0x944>)
 8004162:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004166:	6113      	str	r3, [r2, #16]
		break;
 8004168:	e1c5      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 800416a:	bf00      	nop
		break;
 800416c:	e1c3      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 800416e:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <extInt_Config+0x944>)
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	4a39      	ldr	r2, [pc, #228]	; (8004258 <extInt_Config+0x944>)
 8004174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004178:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a3a      	ldr	r2, [pc, #232]	; (800426c <extInt_Config+0x958>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d104      	bne.n	8004190 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <extInt_Config+0x944>)
 8004188:	4a33      	ldr	r2, [pc, #204]	; (8004258 <extInt_Config+0x944>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800418e:	e1b2      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <extInt_Config+0x940>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d106      	bne.n	80041aa <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <extInt_Config+0x944>)
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	4a2d      	ldr	r2, [pc, #180]	; (8004258 <extInt_Config+0x944>)
 80041a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041a6:	6113      	str	r3, [r2, #16]
		break;
 80041a8:	e1a5      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4a2a      	ldr	r2, [pc, #168]	; (800425c <extInt_Config+0x948>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d106      	bne.n	80041c4 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80041b6:	4b28      	ldr	r3, [pc, #160]	; (8004258 <extInt_Config+0x944>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	4a27      	ldr	r2, [pc, #156]	; (8004258 <extInt_Config+0x944>)
 80041bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041c0:	6113      	str	r3, [r2, #16]
		break;
 80041c2:	e198      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	4a25      	ldr	r2, [pc, #148]	; (8004260 <extInt_Config+0x94c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d106      	bne.n	80041de <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80041d0:	4b21      	ldr	r3, [pc, #132]	; (8004258 <extInt_Config+0x944>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	4a20      	ldr	r2, [pc, #128]	; (8004258 <extInt_Config+0x944>)
 80041d6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80041da:	6113      	str	r3, [r2, #16]
		break;
 80041dc:	e18b      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <extInt_Config+0x950>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d106      	bne.n	80041f8 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <extInt_Config+0x944>)
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	4a1a      	ldr	r2, [pc, #104]	; (8004258 <extInt_Config+0x944>)
 80041f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041f4:	6113      	str	r3, [r2, #16]
		break;
 80041f6:	e17e      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4a1a      	ldr	r2, [pc, #104]	; (8004268 <extInt_Config+0x954>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d106      	bne.n	8004212 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8004204:	4b14      	ldr	r3, [pc, #80]	; (8004258 <extInt_Config+0x944>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	4a13      	ldr	r2, [pc, #76]	; (8004258 <extInt_Config+0x944>)
 800420a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800420e:	6113      	str	r3, [r2, #16]
		break;
 8004210:	e171      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8004212:	bf00      	nop
		break;
 8004214:	e16f      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <extInt_Config+0x944>)
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4a0f      	ldr	r2, [pc, #60]	; (8004258 <extInt_Config+0x944>)
 800421c:	f023 030f 	bic.w	r3, r3, #15
 8004220:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4a10      	ldr	r2, [pc, #64]	; (800426c <extInt_Config+0x958>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d104      	bne.n	8004238 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <extInt_Config+0x944>)
 8004230:	4a09      	ldr	r2, [pc, #36]	; (8004258 <extInt_Config+0x944>)
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8004236:	e15e      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4a05      	ldr	r2, [pc, #20]	; (8004254 <extInt_Config+0x940>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d115      	bne.n	8004270 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <extInt_Config+0x944>)
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	4a03      	ldr	r2, [pc, #12]	; (8004258 <extInt_Config+0x944>)
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	6153      	str	r3, [r2, #20]
		break;
 8004250:	e151      	b.n	80044f6 <extInt_Config+0xbe2>
 8004252:	bf00      	nop
 8004254:	40020400 	.word	0x40020400
 8004258:	40013800 	.word	0x40013800
 800425c:	40020800 	.word	0x40020800
 8004260:	40020c00 	.word	0x40020c00
 8004264:	40021000 	.word	0x40021000
 8004268:	40021c00 	.word	0x40021c00
 800426c:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4a83      	ldr	r2, [pc, #524]	; (8004484 <extInt_Config+0xb70>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d106      	bne.n	800428a <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 800427c:	4b82      	ldr	r3, [pc, #520]	; (8004488 <extInt_Config+0xb74>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4a81      	ldr	r2, [pc, #516]	; (8004488 <extInt_Config+0xb74>)
 8004282:	f043 0302 	orr.w	r3, r3, #2
 8004286:	6153      	str	r3, [r2, #20]
		break;
 8004288:	e135      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a7e      	ldr	r2, [pc, #504]	; (800448c <extInt_Config+0xb78>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d106      	bne.n	80042a4 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8004296:	4b7c      	ldr	r3, [pc, #496]	; (8004488 <extInt_Config+0xb74>)
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4a7b      	ldr	r2, [pc, #492]	; (8004488 <extInt_Config+0xb74>)
 800429c:	f043 0303 	orr.w	r3, r3, #3
 80042a0:	6153      	str	r3, [r2, #20]
		break;
 80042a2:	e128      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	4a79      	ldr	r2, [pc, #484]	; (8004490 <extInt_Config+0xb7c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d106      	bne.n	80042be <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80042b0:	4b75      	ldr	r3, [pc, #468]	; (8004488 <extInt_Config+0xb74>)
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	4a74      	ldr	r2, [pc, #464]	; (8004488 <extInt_Config+0xb74>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	6153      	str	r3, [r2, #20]
		break;
 80042bc:	e11b      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a73      	ldr	r2, [pc, #460]	; (8004494 <extInt_Config+0xb80>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d106      	bne.n	80042d8 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80042ca:	4b6f      	ldr	r3, [pc, #444]	; (8004488 <extInt_Config+0xb74>)
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	4a6e      	ldr	r2, [pc, #440]	; (8004488 <extInt_Config+0xb74>)
 80042d0:	f043 0307 	orr.w	r3, r3, #7
 80042d4:	6153      	str	r3, [r2, #20]
		break;
 80042d6:	e10e      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 80042d8:	bf00      	nop
		break;
 80042da:	e10c      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 80042dc:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <extInt_Config+0xb74>)
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	4a69      	ldr	r2, [pc, #420]	; (8004488 <extInt_Config+0xb74>)
 80042e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042e6:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	4a6a      	ldr	r2, [pc, #424]	; (8004498 <extInt_Config+0xb84>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d104      	bne.n	80042fe <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80042f4:	4b64      	ldr	r3, [pc, #400]	; (8004488 <extInt_Config+0xb74>)
 80042f6:	4a64      	ldr	r2, [pc, #400]	; (8004488 <extInt_Config+0xb74>)
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80042fc:	e0fb      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a65      	ldr	r2, [pc, #404]	; (800449c <extInt_Config+0xb88>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d106      	bne.n	8004318 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800430a:	4b5f      	ldr	r3, [pc, #380]	; (8004488 <extInt_Config+0xb74>)
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	4a5e      	ldr	r2, [pc, #376]	; (8004488 <extInt_Config+0xb74>)
 8004310:	f043 0310 	orr.w	r3, r3, #16
 8004314:	6153      	str	r3, [r2, #20]
		break;
 8004316:	e0ee      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4a59      	ldr	r2, [pc, #356]	; (8004484 <extInt_Config+0xb70>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d106      	bne.n	8004332 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8004324:	4b58      	ldr	r3, [pc, #352]	; (8004488 <extInt_Config+0xb74>)
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	4a57      	ldr	r2, [pc, #348]	; (8004488 <extInt_Config+0xb74>)
 800432a:	f043 0320 	orr.w	r3, r3, #32
 800432e:	6153      	str	r3, [r2, #20]
		break;
 8004330:	e0e1      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	4a54      	ldr	r2, [pc, #336]	; (800448c <extInt_Config+0xb78>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d106      	bne.n	800434c <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800433e:	4b52      	ldr	r3, [pc, #328]	; (8004488 <extInt_Config+0xb74>)
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	4a51      	ldr	r2, [pc, #324]	; (8004488 <extInt_Config+0xb74>)
 8004344:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004348:	6153      	str	r3, [r2, #20]
		break;
 800434a:	e0d4      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4a4f      	ldr	r2, [pc, #316]	; (8004490 <extInt_Config+0xb7c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d106      	bne.n	8004366 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8004358:	4b4b      	ldr	r3, [pc, #300]	; (8004488 <extInt_Config+0xb74>)
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	4a4a      	ldr	r2, [pc, #296]	; (8004488 <extInt_Config+0xb74>)
 800435e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004362:	6153      	str	r3, [r2, #20]
		break;
 8004364:	e0c7      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a49      	ldr	r2, [pc, #292]	; (8004494 <extInt_Config+0xb80>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d106      	bne.n	8004380 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8004372:	4b45      	ldr	r3, [pc, #276]	; (8004488 <extInt_Config+0xb74>)
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	4a44      	ldr	r2, [pc, #272]	; (8004488 <extInt_Config+0xb74>)
 8004378:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800437c:	6153      	str	r3, [r2, #20]
		break;
 800437e:	e0ba      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8004380:	bf00      	nop
		break;
 8004382:	e0b8      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8004384:	4b40      	ldr	r3, [pc, #256]	; (8004488 <extInt_Config+0xb74>)
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	4a3f      	ldr	r2, [pc, #252]	; (8004488 <extInt_Config+0xb74>)
 800438a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800438e:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4a40      	ldr	r2, [pc, #256]	; (8004498 <extInt_Config+0xb84>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d104      	bne.n	80043a6 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 800439c:	4b3a      	ldr	r3, [pc, #232]	; (8004488 <extInt_Config+0xb74>)
 800439e:	4a3a      	ldr	r2, [pc, #232]	; (8004488 <extInt_Config+0xb74>)
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80043a4:	e0a7      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a3b      	ldr	r2, [pc, #236]	; (800449c <extInt_Config+0xb88>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d106      	bne.n	80043c0 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80043b2:	4b35      	ldr	r3, [pc, #212]	; (8004488 <extInt_Config+0xb74>)
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	4a34      	ldr	r2, [pc, #208]	; (8004488 <extInt_Config+0xb74>)
 80043b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043bc:	6153      	str	r3, [r2, #20]
		break;
 80043be:	e09a      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	4a2f      	ldr	r2, [pc, #188]	; (8004484 <extInt_Config+0xb70>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d106      	bne.n	80043da <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80043cc:	4b2e      	ldr	r3, [pc, #184]	; (8004488 <extInt_Config+0xb74>)
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	4a2d      	ldr	r2, [pc, #180]	; (8004488 <extInt_Config+0xb74>)
 80043d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043d6:	6153      	str	r3, [r2, #20]
		break;
 80043d8:	e08d      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	4a2a      	ldr	r2, [pc, #168]	; (800448c <extInt_Config+0xb78>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d106      	bne.n	80043f4 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80043e6:	4b28      	ldr	r3, [pc, #160]	; (8004488 <extInt_Config+0xb74>)
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	4a27      	ldr	r2, [pc, #156]	; (8004488 <extInt_Config+0xb74>)
 80043ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80043f0:	6153      	str	r3, [r2, #20]
		break;
 80043f2:	e080      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4a25      	ldr	r2, [pc, #148]	; (8004490 <extInt_Config+0xb7c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d106      	bne.n	800440e <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8004400:	4b21      	ldr	r3, [pc, #132]	; (8004488 <extInt_Config+0xb74>)
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	4a20      	ldr	r2, [pc, #128]	; (8004488 <extInt_Config+0xb74>)
 8004406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800440a:	6153      	str	r3, [r2, #20]
		break;
 800440c:	e073      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <extInt_Config+0xb80>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d106      	bne.n	8004428 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <extInt_Config+0xb74>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <extInt_Config+0xb74>)
 8004420:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004424:	6153      	str	r3, [r2, #20]
		break;
 8004426:	e066      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 8004428:	bf00      	nop
		break;
 800442a:	e064      	b.n	80044f6 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 800442c:	4b16      	ldr	r3, [pc, #88]	; (8004488 <extInt_Config+0xb74>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	4a15      	ldr	r2, [pc, #84]	; (8004488 <extInt_Config+0xb74>)
 8004432:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004436:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	4a16      	ldr	r2, [pc, #88]	; (8004498 <extInt_Config+0xb84>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d104      	bne.n	800444e <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8004444:	4b10      	ldr	r3, [pc, #64]	; (8004488 <extInt_Config+0xb74>)
 8004446:	4a10      	ldr	r2, [pc, #64]	; (8004488 <extInt_Config+0xb74>)
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800444c:	e053      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4a11      	ldr	r2, [pc, #68]	; (800449c <extInt_Config+0xb88>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d106      	bne.n	8004468 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <extInt_Config+0xb74>)
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <extInt_Config+0xb74>)
 8004460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004464:	6153      	str	r3, [r2, #20]
		break;
 8004466:	e046      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <extInt_Config+0xb70>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d115      	bne.n	80044a0 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <extInt_Config+0xb74>)
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	4a03      	ldr	r2, [pc, #12]	; (8004488 <extInt_Config+0xb74>)
 800447a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800447e:	6153      	str	r3, [r2, #20]
		break;
 8004480:	e039      	b.n	80044f6 <extInt_Config+0xbe2>
 8004482:	bf00      	nop
 8004484:	40020800 	.word	0x40020800
 8004488:	40013800 	.word	0x40013800
 800448c:	40020c00 	.word	0x40020c00
 8004490:	40021000 	.word	0x40021000
 8004494:	40021c00 	.word	0x40021c00
 8004498:	40020000 	.word	0x40020000
 800449c:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4a9d      	ldr	r2, [pc, #628]	; (800471c <extInt_Config+0xe08>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d106      	bne.n	80044ba <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80044ac:	4b9c      	ldr	r3, [pc, #624]	; (8004720 <extInt_Config+0xe0c>)
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	4a9b      	ldr	r2, [pc, #620]	; (8004720 <extInt_Config+0xe0c>)
 80044b2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80044b6:	6153      	str	r3, [r2, #20]
		break;
 80044b8:	e01d      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a98      	ldr	r2, [pc, #608]	; (8004724 <extInt_Config+0xe10>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d106      	bne.n	80044d4 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80044c6:	4b96      	ldr	r3, [pc, #600]	; (8004720 <extInt_Config+0xe0c>)
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4a95      	ldr	r2, [pc, #596]	; (8004720 <extInt_Config+0xe0c>)
 80044cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d0:	6153      	str	r3, [r2, #20]
		break;
 80044d2:	e010      	b.n	80044f6 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	4a93      	ldr	r2, [pc, #588]	; (8004728 <extInt_Config+0xe14>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d106      	bne.n	80044ee <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80044e0:	4b8f      	ldr	r3, [pc, #572]	; (8004720 <extInt_Config+0xe0c>)
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	4a8e      	ldr	r2, [pc, #568]	; (8004720 <extInt_Config+0xe0c>)
 80044e6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80044ea:	6153      	str	r3, [r2, #20]
		break;
 80044ec:	e003      	b.n	80044f6 <extInt_Config+0xbe2>
			__NOP();
 80044ee:	bf00      	nop
		break;
 80044f0:	e001      	b.n	80044f6 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 80044f2:	bf00      	nop
		break;
 80044f4:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	791b      	ldrb	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d126      	bne.n	800454c <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80044fe:	4b8b      	ldr	r3, [pc, #556]	; (800472c <extInt_Config+0xe18>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	7812      	ldrb	r2, [r2, #0]
 8004508:	4611      	mov	r1, r2
 800450a:	2201      	movs	r2, #1
 800450c:	408a      	lsls	r2, r1
 800450e:	43d2      	mvns	r2, r2
 8004510:	4611      	mov	r1, r2
 8004512:	4a86      	ldr	r2, [pc, #536]	; (800472c <extInt_Config+0xe18>)
 8004514:	400b      	ands	r3, r1
 8004516:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004518:	4b84      	ldr	r3, [pc, #528]	; (800472c <extInt_Config+0xe18>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	7812      	ldrb	r2, [r2, #0]
 8004522:	4611      	mov	r1, r2
 8004524:	2201      	movs	r2, #1
 8004526:	408a      	lsls	r2, r1
 8004528:	43d2      	mvns	r2, r2
 800452a:	4611      	mov	r1, r2
 800452c:	4a7f      	ldr	r2, [pc, #508]	; (800472c <extInt_Config+0xe18>)
 800452e:	400b      	ands	r3, r1
 8004530:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004532:	4b7e      	ldr	r3, [pc, #504]	; (800472c <extInt_Config+0xe18>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	4611      	mov	r1, r2
 800453e:	2201      	movs	r2, #1
 8004540:	408a      	lsls	r2, r1
 8004542:	4611      	mov	r1, r2
 8004544:	4a79      	ldr	r2, [pc, #484]	; (800472c <extInt_Config+0xe18>)
 8004546:	430b      	orrs	r3, r1
 8004548:	6093      	str	r3, [r2, #8]
 800454a:	e05c      	b.n	8004606 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	791b      	ldrb	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d126      	bne.n	80045a2 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004554:	4b75      	ldr	r3, [pc, #468]	; (800472c <extInt_Config+0xe18>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	7812      	ldrb	r2, [r2, #0]
 800455e:	4611      	mov	r1, r2
 8004560:	2201      	movs	r2, #1
 8004562:	408a      	lsls	r2, r1
 8004564:	43d2      	mvns	r2, r2
 8004566:	4611      	mov	r1, r2
 8004568:	4a70      	ldr	r2, [pc, #448]	; (800472c <extInt_Config+0xe18>)
 800456a:	400b      	ands	r3, r1
 800456c:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800456e:	4b6f      	ldr	r3, [pc, #444]	; (800472c <extInt_Config+0xe18>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	4611      	mov	r1, r2
 800457a:	2201      	movs	r2, #1
 800457c:	408a      	lsls	r2, r1
 800457e:	43d2      	mvns	r2, r2
 8004580:	4611      	mov	r1, r2
 8004582:	4a6a      	ldr	r2, [pc, #424]	; (800472c <extInt_Config+0xe18>)
 8004584:	400b      	ands	r3, r1
 8004586:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004588:	4b68      	ldr	r3, [pc, #416]	; (800472c <extInt_Config+0xe18>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	4611      	mov	r1, r2
 8004594:	2201      	movs	r2, #1
 8004596:	408a      	lsls	r2, r1
 8004598:	4611      	mov	r1, r2
 800459a:	4a64      	ldr	r2, [pc, #400]	; (800472c <extInt_Config+0xe18>)
 800459c:	430b      	orrs	r3, r1
 800459e:	60d3      	str	r3, [r2, #12]
 80045a0:	e031      	b.n	8004606 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80045a2:	4b62      	ldr	r3, [pc, #392]	; (800472c <extInt_Config+0xe18>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	7812      	ldrb	r2, [r2, #0]
 80045ac:	4611      	mov	r1, r2
 80045ae:	2201      	movs	r2, #1
 80045b0:	408a      	lsls	r2, r1
 80045b2:	43d2      	mvns	r2, r2
 80045b4:	4611      	mov	r1, r2
 80045b6:	4a5d      	ldr	r2, [pc, #372]	; (800472c <extInt_Config+0xe18>)
 80045b8:	400b      	ands	r3, r1
 80045ba:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80045bc:	4b5b      	ldr	r3, [pc, #364]	; (800472c <extInt_Config+0xe18>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	4611      	mov	r1, r2
 80045c8:	2201      	movs	r2, #1
 80045ca:	408a      	lsls	r2, r1
 80045cc:	43d2      	mvns	r2, r2
 80045ce:	4611      	mov	r1, r2
 80045d0:	4a56      	ldr	r2, [pc, #344]	; (800472c <extInt_Config+0xe18>)
 80045d2:	400b      	ands	r3, r1
 80045d4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80045d6:	4b55      	ldr	r3, [pc, #340]	; (800472c <extInt_Config+0xe18>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	4611      	mov	r1, r2
 80045e2:	2201      	movs	r2, #1
 80045e4:	408a      	lsls	r2, r1
 80045e6:	4611      	mov	r1, r2
 80045e8:	4a50      	ldr	r2, [pc, #320]	; (800472c <extInt_Config+0xe18>)
 80045ea:	430b      	orrs	r3, r1
 80045ec:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80045ee:	4b4f      	ldr	r3, [pc, #316]	; (800472c <extInt_Config+0xe18>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	4611      	mov	r1, r2
 80045fa:	2201      	movs	r2, #1
 80045fc:	408a      	lsls	r2, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	4a4a      	ldr	r2, [pc, #296]	; (800472c <extInt_Config+0xe18>)
 8004602:	430b      	orrs	r3, r1
 8004604:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <extInt_Config+0xe18>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	7812      	ldrb	r2, [r2, #0]
 8004610:	4611      	mov	r1, r2
 8004612:	2201      	movs	r2, #1
 8004614:	408a      	lsls	r2, r1
 8004616:	43d2      	mvns	r2, r2
 8004618:	4611      	mov	r1, r2
 800461a:	4a44      	ldr	r2, [pc, #272]	; (800472c <extInt_Config+0xe18>)
 800461c:	400b      	ands	r3, r1
 800461e:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <extInt_Config+0xe18>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	7812      	ldrb	r2, [r2, #0]
 800462a:	4611      	mov	r1, r2
 800462c:	2201      	movs	r2, #1
 800462e:	408a      	lsls	r2, r1
 8004630:	4611      	mov	r1, r2
 8004632:	4a3e      	ldr	r2, [pc, #248]	; (800472c <extInt_Config+0xe18>)
 8004634:	430b      	orrs	r3, r1
 8004636:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004638:	b672      	cpsid	i
}
 800463a:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	d862      	bhi.n	800470c <extInt_Config+0xdf8>
 8004646:	a201      	add	r2, pc, #4	; (adr r2, 800464c <extInt_Config+0xd38>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	0800468d 	.word	0x0800468d
 8004650:	08004695 	.word	0x08004695
 8004654:	0800469d 	.word	0x0800469d
 8004658:	080046a5 	.word	0x080046a5
 800465c:	080046ad 	.word	0x080046ad
 8004660:	080046b5 	.word	0x080046b5
 8004664:	080046bd 	.word	0x080046bd
 8004668:	080046c5 	.word	0x080046c5
 800466c:	080046cd 	.word	0x080046cd
 8004670:	080046d5 	.word	0x080046d5
 8004674:	080046dd 	.word	0x080046dd
 8004678:	080046e5 	.word	0x080046e5
 800467c:	080046ed 	.word	0x080046ed
 8004680:	080046f5 	.word	0x080046f5
 8004684:	080046fd 	.word	0x080046fd
 8004688:	08004705 	.word	0x08004705
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 800468c:	2006      	movs	r0, #6
 800468e:	f7ff f923 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 8004692:	e03c      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8004694:	2007      	movs	r0, #7
 8004696:	f7ff f91f 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 800469a:	e038      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 800469c:	2008      	movs	r0, #8
 800469e:	f7ff f91b 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046a2:	e034      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80046a4:	2009      	movs	r0, #9
 80046a6:	f7ff f917 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046aa:	e030      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80046ac:	200a      	movs	r0, #10
 80046ae:	f7ff f913 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046b2:	e02c      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046b4:	2017      	movs	r0, #23
 80046b6:	f7ff f90f 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046ba:	e028      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046bc:	2017      	movs	r0, #23
 80046be:	f7ff f90b 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046c2:	e024      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046c4:	2017      	movs	r0, #23
 80046c6:	f7ff f907 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046ca:	e020      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046cc:	2017      	movs	r0, #23
 80046ce:	f7ff f903 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046d2:	e01c      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80046d4:	2017      	movs	r0, #23
 80046d6:	f7ff f8ff 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046da:	e018      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046dc:	2028      	movs	r0, #40	; 0x28
 80046de:	f7ff f8fb 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046e2:	e014      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046e4:	2028      	movs	r0, #40	; 0x28
 80046e6:	f7ff f8f7 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046ea:	e010      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046ec:	2028      	movs	r0, #40	; 0x28
 80046ee:	f7ff f8f3 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046f2:	e00c      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046f4:	2028      	movs	r0, #40	; 0x28
 80046f6:	f7ff f8ef 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 80046fa:	e008      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046fc:	2028      	movs	r0, #40	; 0x28
 80046fe:	f7ff f8eb 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 8004702:	e004      	b.n	800470e <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004704:	2028      	movs	r0, #40	; 0x28
 8004706:	f7ff f8e7 	bl	80038d8 <__NVIC_EnableIRQ>
		break;
 800470a:	e000      	b.n	800470e <extInt_Config+0xdfa>
	}

	default: {
		break;
 800470c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800470e:	b662      	cpsie	i
}
 8004710:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40020c00 	.word	0x40020c00
 8004720:	40013800 	.word	0x40013800
 8004724:	40021000 	.word	0x40021000
 8004728:	40021c00 	.word	0x40021c00
 800472c:	40013c00 	.word	0x40013c00

08004730 <callback_extInt0>:
	__enable_irq();
}


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
	__NOP();
 8004734:	bf00      	nop
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <callback_extInt1>:

__attribute__ ((weak)) void callback_extInt1(void){
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
	__NOP();
 8004744:	bf00      	nop
}
 8004746:	bf00      	nop
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt2(void){
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
	__NOP();
 8004754:	bf00      	nop
}
 8004756:	bf00      	nop
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <callback_extInt3>:

__attribute__ ((weak)) void callback_extInt3(void){
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
	__NOP();
 8004764:	bf00      	nop
}
 8004766:	bf00      	nop
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt4(void){
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
	__NOP();
 8004774:	bf00      	nop
}
 8004776:	bf00      	nop
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
	__NOP();
 8004784:	bf00      	nop
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
	__NOP();
 8004794:	bf00      	nop
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
	__NOP();
 80047a4:	bf00      	nop
}
 80047a6:	bf00      	nop
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
	__NOP();
 80047b4:	bf00      	nop
}
 80047b6:	bf00      	nop
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
	__NOP();
 80047c4:	bf00      	nop
}
 80047c6:	bf00      	nop
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
	__NOP();
 80047d4:	bf00      	nop
}
 80047d6:	bf00      	nop
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
	__NOP();
 80047e4:	bf00      	nop
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
	__NOP();
 80047f4:	bf00      	nop
}
 80047f6:	bf00      	nop
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt13(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt14(void){
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
	__NOP();
 8004804:	bf00      	nop
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
	__NOP();
 8004814:	bf00      	nop
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <EXTI0_IRQHandler+0x28>)
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <EXTI0_IRQHandler+0x28>)
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	4a04      	ldr	r2, [pc, #16]	; (8004848 <EXTI0_IRQHandler+0x28>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 800483c:	f7ff ff78 	bl	8004730 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8004840:	e000      	b.n	8004844 <EXTI0_IRQHandler+0x24>
		__NOP();
 8004842:	bf00      	nop
}
 8004844:	bf00      	nop
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40013c00 	.word	0x40013c00

0800484c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8004850:	4b08      	ldr	r3, [pc, #32]	; (8004874 <EXTI1_IRQHandler+0x28>)
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <EXTI1_IRQHandler+0x28>)
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	4a04      	ldr	r2, [pc, #16]	; (8004874 <EXTI1_IRQHandler+0x28>)
 8004862:	f043 0302 	orr.w	r3, r3, #2
 8004866:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8004868:	f7ff ff6a 	bl	8004740 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 800486c:	e000      	b.n	8004870 <EXTI1_IRQHandler+0x24>
		__NOP();
 800486e:	bf00      	nop
}
 8004870:	bf00      	nop
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40013c00 	.word	0x40013c00

08004878 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <EXTI2_IRQHandler+0x28>)
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <EXTI2_IRQHandler+0x28>)
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <EXTI2_IRQHandler+0x28>)
 800488e:	f043 0304 	orr.w	r3, r3, #4
 8004892:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8004894:	f7ff ff5c 	bl	8004750 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8004898:	e000      	b.n	800489c <EXTI2_IRQHandler+0x24>
		__NOP();
 800489a:	bf00      	nop
}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40013c00 	.word	0x40013c00

080048a4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <EXTI3_IRQHandler+0x28>)
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d008      	beq.n	80048c6 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <EXTI3_IRQHandler+0x28>)
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <EXTI3_IRQHandler+0x28>)
 80048ba:	f043 0308 	orr.w	r3, r3, #8
 80048be:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80048c0:	f7ff ff4e 	bl	8004760 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80048c4:	e000      	b.n	80048c8 <EXTI3_IRQHandler+0x24>
		__NOP();
 80048c6:	bf00      	nop
}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40013c00 	.word	0x40013c00

080048d0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <EXTI4_IRQHandler+0x28>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <EXTI4_IRQHandler+0x28>)
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	4a04      	ldr	r2, [pc, #16]	; (80048f8 <EXTI4_IRQHandler+0x28>)
 80048e6:	f043 0310 	orr.w	r3, r3, #16
 80048ea:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 80048ec:	f7ff ff40 	bl	8004770 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 80048f0:	e000      	b.n	80048f4 <EXTI4_IRQHandler+0x24>
		__NOP();
 80048f2:	bf00      	nop
}
 80048f4:	bf00      	nop
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40013c00 	.word	0x40013c00

080048fc <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8004900:	4b26      	ldr	r3, [pc, #152]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 800490c:	4b23      	ldr	r3, [pc, #140]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	4a22      	ldr	r2, [pc, #136]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 8004912:	f043 0320 	orr.w	r3, r3, #32
 8004916:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8004918:	f7ff ff32 	bl	8004780 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 800491c:	e03c      	b.n	8004998 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 800491e:	4b1f      	ldr	r3, [pc, #124]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800492a:	4b1c      	ldr	r3, [pc, #112]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	4a1b      	ldr	r2, [pc, #108]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8004936:	f7ff ff2b 	bl	8004790 <callback_extInt6>
}
 800493a:	e02d      	b.n	8004998 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 800493c:	4b17      	ldr	r3, [pc, #92]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8004948:	4b14      	ldr	r3, [pc, #80]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	4a13      	ldr	r2, [pc, #76]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800494e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004952:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8004954:	f7ff ff24 	bl	80047a0 <callback_extInt7>
}
 8004958:	e01e      	b.n	8004998 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	4a0c      	ldr	r2, [pc, #48]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800496c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004970:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8004972:	f7ff ff1d 	bl	80047b0 <callback_extInt8>
}
 8004976:	e00f      	b.n	8004998 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8004978:	4b08      	ldr	r3, [pc, #32]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	4a04      	ldr	r2, [pc, #16]	; (800499c <EXTI9_5_IRQHandler+0xa0>)
 800498a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800498e:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8004990:	f7ff ff16 	bl	80047c0 <callback_extInt9>
}
 8004994:	e000      	b.n	8004998 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8004996:	bf00      	nop
}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40013c00 	.word	0x40013c00

080049a0 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 80049a4:	4b2e      	ldr	r3, [pc, #184]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80049b0:	4b2b      	ldr	r3, [pc, #172]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	4a2a      	ldr	r2, [pc, #168]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049ba:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80049bc:	f7ff ff08 	bl	80047d0 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80049c0:	e04b      	b.n	8004a5a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80049c2:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80049ce:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	4a23      	ldr	r2, [pc, #140]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049d8:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80049da:	f7ff ff01 	bl	80047e0 <callback_extInt11>
}
 80049de:	e03c      	b.n	8004a5a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80049e0:	4b1f      	ldr	r3, [pc, #124]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 80049f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049f6:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 80049f8:	f7ff fefa 	bl	80047f0 <callback_extInt12>
}
 80049fc:	e02d      	b.n	8004a5a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 80049fe:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8004a0a:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a14:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8004a16:	f7fb ff0d 	bl	8000834 <callback_extInt13>
}
 8004a1a:	e01e      	b.n	8004a5a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8004a28:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a32:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8004a34:	f7ff fee4 	bl	8004800 <callback_extInt14>
}
 8004a38:	e00f      	b.n	8004a5a <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <EXTI15_10_IRQHandler+0xc0>)
 8004a4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a50:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8004a52:	f7ff fedd 	bl	8004810 <callback_extInt15>
}
 8004a56:	e000      	b.n	8004a5a <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8004a58:	bf00      	nop
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40013c00 	.word	0x40013c00

08004a64 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	70fb      	strb	r3, [r7, #3]
 8004a76:	460b      	mov	r3, r1
 8004a78:	70bb      	strb	r3, [r7, #2]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	78ba      	ldrb	r2, [r7, #2]
 8004a88:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	787a      	ldrb	r2, [r7, #1]
 8004a8e:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7c3a      	ldrb	r2, [r7, #16]
 8004a94:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	7d3a      	ldrb	r2, [r7, #20]
 8004a9a:	715a      	strb	r2, [r3, #5]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4a88      	ldr	r2, [pc, #544]	; (8004ce0 <GPIO_Config+0x238>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d106      	bne.n	8004ad0 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8004ac2:	4b88      	ldr	r3, [pc, #544]	; (8004ce4 <GPIO_Config+0x23c>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	4a87      	ldr	r2, [pc, #540]	; (8004ce4 <GPIO_Config+0x23c>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6313      	str	r3, [r2, #48]	; 0x30
 8004ace:	e03a      	b.n	8004b46 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	4a84      	ldr	r2, [pc, #528]	; (8004ce8 <GPIO_Config+0x240>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d106      	bne.n	8004ae8 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8004ada:	4b82      	ldr	r3, [pc, #520]	; (8004ce4 <GPIO_Config+0x23c>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	4a81      	ldr	r2, [pc, #516]	; (8004ce4 <GPIO_Config+0x23c>)
 8004ae0:	f043 0302 	orr.w	r3, r3, #2
 8004ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ae6:	e02e      	b.n	8004b46 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a7f      	ldr	r2, [pc, #508]	; (8004cec <GPIO_Config+0x244>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d106      	bne.n	8004b00 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8004af2:	4b7c      	ldr	r3, [pc, #496]	; (8004ce4 <GPIO_Config+0x23c>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	4a7b      	ldr	r2, [pc, #492]	; (8004ce4 <GPIO_Config+0x23c>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	6313      	str	r3, [r2, #48]	; 0x30
 8004afe:	e022      	b.n	8004b46 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a7a      	ldr	r2, [pc, #488]	; (8004cf0 <GPIO_Config+0x248>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d106      	bne.n	8004b18 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8004b0a:	4b76      	ldr	r3, [pc, #472]	; (8004ce4 <GPIO_Config+0x23c>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4a75      	ldr	r2, [pc, #468]	; (8004ce4 <GPIO_Config+0x23c>)
 8004b10:	f043 0308 	orr.w	r3, r3, #8
 8004b14:	6313      	str	r3, [r2, #48]	; 0x30
 8004b16:	e016      	b.n	8004b46 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4a75      	ldr	r2, [pc, #468]	; (8004cf4 <GPIO_Config+0x24c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d106      	bne.n	8004b30 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8004b22:	4b70      	ldr	r3, [pc, #448]	; (8004ce4 <GPIO_Config+0x23c>)
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	4a6f      	ldr	r2, [pc, #444]	; (8004ce4 <GPIO_Config+0x23c>)
 8004b28:	f043 0310 	orr.w	r3, r3, #16
 8004b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b2e:	e00a      	b.n	8004b46 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a70      	ldr	r2, [pc, #448]	; (8004cf8 <GPIO_Config+0x250>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d105      	bne.n	8004b46 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8004b3a:	4b6a      	ldr	r3, [pc, #424]	; (8004ce4 <GPIO_Config+0x23c>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	4a69      	ldr	r2, [pc, #420]	; (8004ce4 <GPIO_Config+0x23c>)
 8004b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b44:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	785b      	ldrb	r3, [r3, #1]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2103      	movs	r1, #3
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	400a      	ands	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	6819      	ldr	r1, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	789b      	ldrb	r3, [r3, #2]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	408b      	lsls	r3, r1
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	4619      	mov	r1, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	400a      	ands	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	78db      	ldrb	r3, [r3, #3]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	2103      	movs	r1, #3
 8004be2:	fa01 f303 	lsl.w	r3, r1, r3
 8004be6:	43db      	mvns	r3, r3
 8004be8:	4619      	mov	r1, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	400a      	ands	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	6899      	ldr	r1, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	791b      	ldrb	r3, [r3, #4]
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	2103      	movs	r1, #3
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	400a      	ands	r2, r1
 8004c30:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	68d9      	ldr	r1, [r3, #12]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d143      	bne.n	8004cd2 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b07      	cmp	r3, #7
 8004c50:	d81f      	bhi.n	8004c92 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	210f      	movs	r1, #15
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	fa01 f303 	lsl.w	r3, r1, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	400a      	ands	r2, r1
 8004c72:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	6a1a      	ldr	r2, [r3, #32]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	795b      	ldrb	r3, [r3, #5]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	4619      	mov	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8004c90:	e01f      	b.n	8004cd2 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	3b08      	subs	r3, #8
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	4619      	mov	r1, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	795b      	ldrb	r3, [r3, #5]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	4619      	mov	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40020000 	.word	0x40020000
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	40020400 	.word	0x40020400
 8004cec:	40020800 	.word	0x40020800
 8004cf0:	40020c00 	.word	0x40020c00
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40021c00 	.word	0x40021c00

08004cfc <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	2301      	movs	r3, #1
 8004d12:	408b      	lsls	r3, r1
 8004d14:	4619      	mov	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	404a      	eors	r2, r1
 8004d1c:	615a      	str	r2, [r3, #20]
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8004d36:	4a39      	ldr	r2, [pc, #228]	; (8004e1c <configPLL+0xf0>)
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	2b31      	cmp	r3, #49	; 0x31
 8004d40:	d804      	bhi.n	8004d4c <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8004d42:	4b37      	ldr	r3, [pc, #220]	; (8004e20 <configPLL+0xf4>)
 8004d44:	4a36      	ldr	r2, [pc, #216]	; (8004e20 <configPLL+0xf4>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	6093      	str	r3, [r2, #8]
 8004d4a:	e005      	b.n	8004d58 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004d4c:	4b34      	ldr	r3, [pc, #208]	; (8004e20 <configPLL+0xf4>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a33      	ldr	r2, [pc, #204]	; (8004e20 <configPLL+0xf4>)
 8004d52:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004d56:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8004d58:	4b31      	ldr	r3, [pc, #196]	; (8004e20 <configPLL+0xf4>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <configPLL+0xf4>)
 8004d5e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004d62:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8004d64:	4b2e      	ldr	r3, [pc, #184]	; (8004e20 <configPLL+0xf4>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <configPLL+0xf4>)
 8004d6a:	f043 0312 	orr.w	r3, r3, #18
 8004d6e:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8004d70:	4b2b      	ldr	r3, [pc, #172]	; (8004e20 <configPLL+0xf4>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	79fa      	ldrb	r2, [r7, #7]
 8004d76:	0092      	lsls	r2, r2, #2
 8004d78:	3a0e      	subs	r2, #14
 8004d7a:	0192      	lsls	r2, r2, #6
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4a28      	ldr	r2, [pc, #160]	; (8004e20 <configPLL+0xf4>)
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8004d84:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <configPLL+0xf4>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <configPLL+0xf4>)
 8004d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8e:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8004d90:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <configPLL+0xf4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a22      	ldr	r2, [pc, #136]	; (8004e20 <configPLL+0xf4>)
 8004d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004d9c:	e000      	b.n	8004da0 <configPLL+0x74>
	{
		__NOP();
 8004d9e:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004da0:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <configPLL+0xf4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0f8      	beq.n	8004d9e <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	2b5a      	cmp	r3, #90	; 0x5a
 8004db0:	d909      	bls.n	8004dc6 <configPLL+0x9a>
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	2b64      	cmp	r3, #100	; 0x64
 8004db6:	d806      	bhi.n	8004dc6 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8004db8:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <configPLL+0xf8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a19      	ldr	r2, [pc, #100]	; (8004e24 <configPLL+0xf8>)
 8004dbe:	f043 0303 	orr.w	r3, r3, #3
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e01d      	b.n	8004e02 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d909      	bls.n	8004de0 <configPLL+0xb4>
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	2b5a      	cmp	r3, #90	; 0x5a
 8004dd0:	d806      	bhi.n	8004de0 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8004dd2:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <configPLL+0xf8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <configPLL+0xf8>)
 8004dd8:	f043 0302 	orr.w	r3, r3, #2
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e010      	b.n	8004e02 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	2b1e      	cmp	r3, #30
 8004de4:	d909      	bls.n	8004dfa <configPLL+0xce>
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d806      	bhi.n	8004dfa <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8004dec:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <configPLL+0xf8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0c      	ldr	r2, [pc, #48]	; (8004e24 <configPLL+0xf8>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	e003      	b.n	8004e02 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <configPLL+0xf8>)
 8004dfc:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <configPLL+0xf8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8004e02:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <configPLL+0xf4>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4a06      	ldr	r2, [pc, #24]	; (8004e20 <configPLL+0xf4>)
 8004e08:	f043 0302 	orr.w	r3, r3, #2
 8004e0c:	6093      	str	r3, [r2, #8]

}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20012ed8 	.word	0x20012ed8
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40023c00 	.word	0x40023c00

08004e28 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <getConfigPLL+0x30>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d103      	bne.n	8004e46 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <getConfigPLL+0x34>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
 8004e44:	e001      	b.n	8004e4a <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8004e46:	2310      	movs	r3, #16
 8004e48:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	20012ed8 	.word	0x20012ed8

08004e60 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8004e66:	f7ff ffdf 	bl	8004e28 <getConfigPLL>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8004e6e:	2300      	movs	r3, #0
 8004e70:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8004e72:	79bb      	ldrb	r3, [r7, #6]
 8004e74:	2b31      	cmp	r3, #49	; 0x31
 8004e76:	d802      	bhi.n	8004e7e <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8004e78:	79bb      	ldrb	r3, [r7, #6]
 8004e7a:	71fb      	strb	r3, [r7, #7]
 8004e7c:	e002      	b.n	8004e84 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8004e7e:	79bb      	ldrb	r3, [r7, #6]
 8004e80:	089b      	lsrs	r3, r3, #2
 8004e82:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8004e84:	79fb      	ldrb	r3, [r7, #7]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <__NVIC_EnableIRQ>:
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	db0b      	blt.n	8004eba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	f003 021f 	and.w	r2, r3, #31
 8004ea8:	4907      	ldr	r1, [pc, #28]	; (8004ec8 <__NVIC_EnableIRQ+0x38>)
 8004eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	e000e100 	.word	0xe000e100

08004ecc <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a8f      	ldr	r2, [pc, #572]	; (8005118 <USART_Config+0x24c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d107      	bne.n	8004eee <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8004ede:	4b8f      	ldr	r3, [pc, #572]	; (800511c <USART_Config+0x250>)
 8004ee0:	2210      	movs	r2, #16
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a8d      	ldr	r2, [pc, #564]	; (8005120 <USART_Config+0x254>)
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e019      	b.n	8004f22 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	4a8c      	ldr	r2, [pc, #560]	; (8005124 <USART_Config+0x258>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d108      	bne.n	8004f0a <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8004ef8:	4b88      	ldr	r3, [pc, #544]	; (800511c <USART_Config+0x250>)
 8004efa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4a88      	ldr	r2, [pc, #544]	; (8005128 <USART_Config+0x25c>)
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e00b      	b.n	8004f22 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	4a87      	ldr	r2, [pc, #540]	; (800512c <USART_Config+0x260>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d106      	bne.n	8004f22 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004f14:	4b81      	ldr	r3, [pc, #516]	; (800511c <USART_Config+0x250>)
 8004f16:	2220      	movs	r2, #32
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	4a84      	ldr	r2, [pc, #528]	; (8005130 <USART_Config+0x264>)
 8004f20:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2200      	movs	r2, #0
 8004f28:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	789b      	ldrb	r3, [r3, #2]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d03d      	beq.n	8004fb6 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f48:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f58:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f68:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f78:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	789b      	ldrb	r3, [r3, #2]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d110      	bne.n	8004fa4 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f90:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa0:	60da      	str	r2, [r3, #12]
 8004fa2:	e018      	b.n	8004fd6 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fb2:	60da      	str	r2, [r3, #12]
 8004fb4:	e00f      	b.n	8004fd6 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc4:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fd4:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	78db      	ldrb	r3, [r3, #3]
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d84c      	bhi.n	8005078 <USART_Config+0x1ac>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <USART_Config+0x118>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	08005013 	.word	0x08005013
 8004fec:	08005035 	.word	0x08005035
 8004ff0:	08005057 	.word	0x08005057
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005002:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	6912      	ldr	r2, [r2, #16]
 800500e:	611a      	str	r2, [r3, #16]
		break;
 8005010:	e041      	b.n	8005096 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005020:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005030:	611a      	str	r2, [r3, #16]
		break;
 8005032:	e030      	b.n	8005096 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005042:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005052:	611a      	str	r2, [r3, #16]
		break;
 8005054:	e01f      	b.n	8005096 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005064:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005074:	611a      	str	r2, [r3, #16]
		break;
 8005076:	e00e      	b.n	8005096 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005086:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	6912      	ldr	r2, [r2, #16]
 8005092:	611a      	str	r2, [r3, #16]
		break;
 8005094:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <USART_Config+0x258>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d104      	bne.n	80050ae <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80050a4:	f7ff fedc 	bl	8004e60 <getClockAPB1>
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]
 80050ac:	e003      	b.n	80050b6 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 80050ae:	f7ff febb 	bl	8004e28 <getConfigPLL>
 80050b2:	4603      	mov	r3, r0
 80050b4:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	785b      	ldrb	r3, [r3, #1]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10b      	bne.n	80050d6 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 f91f 	bl	8005308 <getValueBaudRate>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	e02f      	b.n	8005136 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d10b      	bne.n	80050f6 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f90f 	bl	8005308 <getValueBaudRate>
 80050ea:	4603      	mov	r3, r0
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	e01f      	b.n	8005136 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d11a      	bne.n	8005134 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8005104:	4618      	mov	r0, r3
 8005106:	f000 f8ff 	bl	8005308 <getValueBaudRate>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	e00f      	b.n	8005136 <USART_Config+0x26a>
 8005116:	bf00      	nop
 8005118:	40011000 	.word	0x40011000
 800511c:	40023800 	.word	0x40023800
 8005120:	20012edc 	.word	0x20012edc
 8005124:	40004400 	.word	0x40004400
 8005128:	20012ee0 	.word	0x20012ee0
 800512c:	40011400 	.word	0x40011400
 8005130:	20012ee4 	.word	0x20012ee4
	}
	else
	{
		__NOP();
 8005134:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d866      	bhi.n	800520c <USART_Config+0x340>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <USART_Config+0x278>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005155 	.word	0x08005155
 8005148:	08005177 	.word	0x08005177
 800514c:	08005199 	.word	0x08005199
 8005150:	080051db 	.word	0x080051db
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f022 0208 	bic.w	r2, r2, #8
 8005162:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f042 0208 	orr.w	r2, r2, #8
 8005172:	60da      	str	r2, [r3, #12]

		break;
 8005174:	e063      	b.n	800523e <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f022 0204 	bic.w	r2, r2, #4
 8005184:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f042 0204 	orr.w	r2, r2, #4
 8005194:	60da      	str	r2, [r3, #12]

		break;
 8005196:	e052      	b.n	800523e <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f022 0208 	bic.w	r2, r2, #8
 80051a6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f042 0208 	orr.w	r2, r2, #8
 80051b6:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f022 0204 	bic.w	r2, r2, #4
 80051c6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f042 0204 	orr.w	r2, r2, #4
 80051d6:	60da      	str	r2, [r3, #12]


		break;
 80051d8:	e031      	b.n	800523e <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f022 0208 	bic.w	r2, r2, #8
 80051f8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f022 0204 	bic.w	r2, r2, #4
 8005208:	60da      	str	r2, [r3, #12]
		break;
 800520a:	e018      	b.n	800523e <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800521a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f022 0208 	bic.w	r2, r2, #8
 800522a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f022 0204 	bic.w	r2, r2, #4
 800523a:	60da      	str	r2, [r3, #12]
		break;
 800523c:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800523e:	b672      	cpsid	i
}
 8005240:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	791b      	ldrb	r3, [r3, #4]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d110      	bne.n	800526c <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f022 0220 	bic.w	r2, r2, #32
 8005258:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f042 0220 	orr.w	r2, r2, #32
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	e007      	b.n	800527c <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f022 0220 	bic.w	r2, r2, #32
 800527a:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	791b      	ldrb	r3, [r3, #4]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d003      	beq.n	800528c <USART_Config+0x3c0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	795b      	ldrb	r3, [r3, #5]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d11a      	bne.n	80052c2 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <USART_Config+0x430>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d103      	bne.n	800529e <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8005296:	2025      	movs	r0, #37	; 0x25
 8005298:	f7ff fdfa 	bl	8004e90 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800529c:	e013      	b.n	80052c6 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	4a17      	ldr	r2, [pc, #92]	; (8005300 <USART_Config+0x434>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d103      	bne.n	80052b0 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80052a8:	2026      	movs	r0, #38	; 0x26
 80052aa:	f7ff fdf1 	bl	8004e90 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80052ae:	e00a      	b.n	80052c6 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	4a13      	ldr	r2, [pc, #76]	; (8005304 <USART_Config+0x438>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d105      	bne.n	80052c6 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80052ba:	2047      	movs	r0, #71	; 0x47
 80052bc:	f7ff fde8 	bl	8004e90 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80052c0:	e001      	b.n	80052c6 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80052c6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80052c8:	b662      	cpsie	i
}
 80052ca:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d00f      	beq.n	80052f4 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052f2:	60da      	str	r2, [r3, #12]
	}
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40011000 	.word	0x40011000
 8005300:	40004400 	.word	0x40004400
 8005304:	40011400 	.word	0x40011400

08005308 <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8005308:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	6039      	str	r1, [r7, #0]
 8005312:	4601      	mov	r1, r0
 8005314:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8005316:	79f9      	ldrb	r1, [r7, #7]
 8005318:	2000      	movs	r0, #0
 800531a:	460a      	mov	r2, r1
 800531c:	4603      	mov	r3, r0
 800531e:	491f      	ldr	r1, [pc, #124]	; (800539c <getValueBaudRate+0x94>)
 8005320:	fb01 f003 	mul.w	r0, r1, r3
 8005324:	2102      	movs	r1, #2
 8005326:	fb02 f101 	mul.w	r1, r2, r1
 800532a:	4401      	add	r1, r0
 800532c:	481b      	ldr	r0, [pc, #108]	; (800539c <getValueBaudRate+0x94>)
 800532e:	fba2 4500 	umull	r4, r5, r2, r0
 8005332:	194b      	adds	r3, r1, r5
 8005334:	461d      	mov	r5, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	2200      	movs	r2, #0
 800533c:	4698      	mov	r8, r3
 800533e:	4691      	mov	r9, r2
 8005340:	4642      	mov	r2, r8
 8005342:	464b      	mov	r3, r9
 8005344:	4620      	mov	r0, r4
 8005346:	4629      	mov	r1, r5
 8005348:	f7fa ff9a 	bl	8000280 <__aeabi_ldivmod>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4613      	mov	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <getValueBaudRate+0x98>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	0b5b      	lsrs	r3, r3, #13
 800535e:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f242 7210 	movw	r2, #10000	; 0x2710
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <getValueBaudRate+0x98>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	0a5b      	lsrs	r3, r3, #9
 800537e:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	b29b      	uxth	r3, r3
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	b29a      	uxth	r2, r3
 8005388:	7afb      	ldrb	r3, [r7, #11]
 800538a:	b29b      	uxth	r3, r3
 800538c:	4313      	orrs	r3, r2
 800538e:	813b      	strh	r3, [r7, #8]

    return value;
 8005390:	893b      	ldrh	r3, [r7, #8]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800539c:	540be400 	.word	0x540be400
 80053a0:	d1b71759 	.word	0xd1b71759

080053a4 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 80053b0:	e000      	b.n	80053b4 <writeChar+0x10>
	{
		__NOP();
 80053b2:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f7      	beq.n	80053b2 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	78fa      	ldrb	r2, [r7, #3]
 80053c8:	605a      	str	r2, [r3, #4]

}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 80053e4:	e00a      	b.n	80053fc <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	4413      	add	r3, r2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ffd7 	bl	80053a4 <writeChar>
		i++;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	3301      	adds	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	4413      	add	r3, r2
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ee      	bne.n	80053e6 <writeMsg+0x10>
	}
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <interruptionTX>:
	return auxRxData;
}

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
 800541a:	460b      	mov	r3, r1
 800541c:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10c      	bne.n	800543e <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800543c:	e005      	b.n	800544a <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60da      	str	r2, [r3, #12]
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8005456:	b480      	push	{r7}
 8005458:	af00      	add	r7, sp, #0
	__NOP();
 800545a:	bf00      	nop
}
 800545c:	bf00      	nop
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <BasicUSART2_Callback>:


__attribute__((weak)) void BasicUSART2_Callback()
{
 8005466:	b480      	push	{r7}
 8005468:	af00      	add	r7, sp, #0
	__NOP();
 800546a:	bf00      	nop
}
 800546c:	bf00      	nop
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8005476:	b480      	push	{r7}
 8005478:	af00      	add	r7, sp, #0
	__NOP();
 800547a:	bf00      	nop
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 800548c:	4b37      	ldr	r3, [pc, #220]	; (800556c <USART1_IRQHandler+0xe4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 800549a:	4b34      	ldr	r3, [pc, #208]	; (800556c <USART1_IRQHandler+0xe4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	4b33      	ldr	r3, [pc, #204]	; (8005570 <USART1_IRQHandler+0xe8>)
 80054a4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80054a6:	f7ff ffd6 	bl	8005456 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80054aa:	e05d      	b.n	8005568 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80054ac:	4b2f      	ldr	r3, [pc, #188]	; (800556c <USART1_IRQHandler+0xe4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d055      	beq.n	8005566 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80054ba:	4b2e      	ldr	r3, [pc, #184]	; (8005574 <USART1_IRQHandler+0xec>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 80054c2:	4b2d      	ldr	r3, [pc, #180]	; (8005578 <USART1_IRQHandler+0xf0>)
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	4b29      	ldr	r3, [pc, #164]	; (800556c <USART1_IRQHandler+0xe4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80054cc:	4b27      	ldr	r3, [pc, #156]	; (800556c <USART1_IRQHandler+0xe4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2100      	movs	r1, #0
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff ff9d 	bl	8005412 <interruptionTX>
}
 80054d8:	e046      	b.n	8005568 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80054da:	4b26      	ldr	r3, [pc, #152]	; (8005574 <USART1_IRQHandler+0xec>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d142      	bne.n	8005568 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80054e2:	4b26      	ldr	r3, [pc, #152]	; (800557c <USART1_IRQHandler+0xf4>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	4b25      	ldr	r3, [pc, #148]	; (8005580 <USART1_IRQHandler+0xf8>)
 80054ea:	5c9b      	ldrb	r3, [r3, r2]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00e      	beq.n	800550e <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 80054f0:	4b22      	ldr	r3, [pc, #136]	; (800557c <USART1_IRQHandler+0xf4>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	4b22      	ldr	r3, [pc, #136]	; (8005580 <USART1_IRQHandler+0xf8>)
 80054f8:	5c9a      	ldrb	r2, [r3, r2]
 80054fa:	4b1c      	ldr	r3, [pc, #112]	; (800556c <USART1_IRQHandler+0xe4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	605a      	str	r2, [r3, #4]
				posChar++;
 8005500:	4b1e      	ldr	r3, [pc, #120]	; (800557c <USART1_IRQHandler+0xf4>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	b2da      	uxtb	r2, r3
 8005508:	4b1c      	ldr	r3, [pc, #112]	; (800557c <USART1_IRQHandler+0xf4>)
 800550a:	701a      	strb	r2, [r3, #0]
}
 800550c:	e02c      	b.n	8005568 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800550e:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <USART1_IRQHandler+0xfc>)
 8005510:	781a      	ldrb	r2, [r3, #0]
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <USART1_IRQHandler+0x100>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d215      	bcs.n	8005546 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800551a:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <USART1_IRQHandler+0xfc>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	2364      	movs	r3, #100	; 0x64
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	4a19      	ldr	r2, [pc, #100]	; (800558c <USART1_IRQHandler+0x104>)
 8005528:	4413      	add	r3, r2
 800552a:	4619      	mov	r1, r3
 800552c:	4814      	ldr	r0, [pc, #80]	; (8005580 <USART1_IRQHandler+0xf8>)
 800552e:	f000 f9e3 	bl	80058f8 <siprintf>
					posChar = 0;
 8005532:	4b12      	ldr	r3, [pc, #72]	; (800557c <USART1_IRQHandler+0xf4>)
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005538:	4b12      	ldr	r3, [pc, #72]	; (8005584 <USART1_IRQHandler+0xfc>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <USART1_IRQHandler+0xfc>)
 8005542:	701a      	strb	r2, [r3, #0]
}
 8005544:	e010      	b.n	8005568 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8005546:	4b09      	ldr	r3, [pc, #36]	; (800556c <USART1_IRQHandler+0xe4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2100      	movs	r1, #0
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff ff60 	bl	8005412 <interruptionTX>
					posChar = 0;
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <USART1_IRQHandler+0xf4>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005558:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <USART1_IRQHandler+0xfc>)
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <USART1_IRQHandler+0x100>)
 8005560:	2200      	movs	r2, #0
 8005562:	701a      	strb	r2, [r3, #0]
}
 8005564:	e000      	b.n	8005568 <USART1_IRQHandler+0xe0>
		__NOP();
 8005566:	bf00      	nop
}
 8005568:	bf00      	nop
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20012edc 	.word	0x20012edc
 8005570:	20012ee8 	.word	0x20012ee8
 8005574:	20013723 	.word	0x20013723
 8005578:	20012ee9 	.word	0x20012ee9
 800557c:	20013722 	.word	0x20013722
 8005580:	20012eec 	.word	0x20012eec
 8005584:	20013721 	.word	0x20013721
 8005588:	20013720 	.word	0x20013720
 800558c:	20012f50 	.word	0x20012f50

08005590 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8005594:	4b37      	ldr	r3, [pc, #220]	; (8005674 <USART2_IRQHandler+0xe4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 80055a2:	4b34      	ldr	r3, [pc, #208]	; (8005674 <USART2_IRQHandler+0xe4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	4b33      	ldr	r3, [pc, #204]	; (8005678 <USART2_IRQHandler+0xe8>)
 80055ac:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 80055ae:	f7ff ff5a 	bl	8005466 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 80055b2:	e05d      	b.n	8005670 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 80055b4:	4b2f      	ldr	r3, [pc, #188]	; (8005674 <USART2_IRQHandler+0xe4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d055      	beq.n	800566e <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80055c2:	4b2e      	ldr	r3, [pc, #184]	; (800567c <USART2_IRQHandler+0xec>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10b      	bne.n	80055e2 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 80055ca:	4b2d      	ldr	r3, [pc, #180]	; (8005680 <USART2_IRQHandler+0xf0>)
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	4b29      	ldr	r3, [pc, #164]	; (8005674 <USART2_IRQHandler+0xe4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80055d4:	4b27      	ldr	r3, [pc, #156]	; (8005674 <USART2_IRQHandler+0xe4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff ff19 	bl	8005412 <interruptionTX>
}
 80055e0:	e046      	b.n	8005670 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80055e2:	4b26      	ldr	r3, [pc, #152]	; (800567c <USART2_IRQHandler+0xec>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d142      	bne.n	8005670 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80055ea:	4b26      	ldr	r3, [pc, #152]	; (8005684 <USART2_IRQHandler+0xf4>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <USART2_IRQHandler+0xf8>)
 80055f2:	5c9b      	ldrb	r3, [r3, r2]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 80055f8:	4b22      	ldr	r3, [pc, #136]	; (8005684 <USART2_IRQHandler+0xf4>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <USART2_IRQHandler+0xf8>)
 8005600:	5c9a      	ldrb	r2, [r3, r2]
 8005602:	4b1c      	ldr	r3, [pc, #112]	; (8005674 <USART2_IRQHandler+0xe4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
				posChar++;
 8005608:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <USART2_IRQHandler+0xf4>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <USART2_IRQHandler+0xf4>)
 8005612:	701a      	strb	r2, [r3, #0]
}
 8005614:	e02c      	b.n	8005670 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005616:	4b1d      	ldr	r3, [pc, #116]	; (800568c <USART2_IRQHandler+0xfc>)
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <USART2_IRQHandler+0x100>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d215      	bcs.n	800564e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8005622:	4b1a      	ldr	r3, [pc, #104]	; (800568c <USART2_IRQHandler+0xfc>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	2364      	movs	r3, #100	; 0x64
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	4a19      	ldr	r2, [pc, #100]	; (8005694 <USART2_IRQHandler+0x104>)
 8005630:	4413      	add	r3, r2
 8005632:	4619      	mov	r1, r3
 8005634:	4814      	ldr	r0, [pc, #80]	; (8005688 <USART2_IRQHandler+0xf8>)
 8005636:	f000 f95f 	bl	80058f8 <siprintf>
					posChar = 0;
 800563a:	4b12      	ldr	r3, [pc, #72]	; (8005684 <USART2_IRQHandler+0xf4>)
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005640:	4b12      	ldr	r3, [pc, #72]	; (800568c <USART2_IRQHandler+0xfc>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	4b10      	ldr	r3, [pc, #64]	; (800568c <USART2_IRQHandler+0xfc>)
 800564a:	701a      	strb	r2, [r3, #0]
}
 800564c:	e010      	b.n	8005670 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <USART2_IRQHandler+0xe4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fedc 	bl	8005412 <interruptionTX>
					posChar = 0;
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <USART2_IRQHandler+0xf4>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005660:	4b0a      	ldr	r3, [pc, #40]	; (800568c <USART2_IRQHandler+0xfc>)
 8005662:	2200      	movs	r2, #0
 8005664:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <USART2_IRQHandler+0x100>)
 8005668:	2200      	movs	r2, #0
 800566a:	701a      	strb	r2, [r3, #0]
}
 800566c:	e000      	b.n	8005670 <USART2_IRQHandler+0xe0>
		__NOP();
 800566e:	bf00      	nop
}
 8005670:	bf00      	nop
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20012ee0 	.word	0x20012ee0
 8005678:	20012ee8 	.word	0x20012ee8
 800567c:	20013723 	.word	0x20013723
 8005680:	20012ee9 	.word	0x20012ee9
 8005684:	20013722 	.word	0x20013722
 8005688:	20012eec 	.word	0x20012eec
 800568c:	20013721 	.word	0x20013721
 8005690:	20013720 	.word	0x20013720
 8005694:	20012f50 	.word	0x20012f50

08005698 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <USART6_IRQHandler+0xe4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d008      	beq.n	80056bc <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 80056aa:	4b34      	ldr	r3, [pc, #208]	; (800577c <USART6_IRQHandler+0xe4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	4b33      	ldr	r3, [pc, #204]	; (8005780 <USART6_IRQHandler+0xe8>)
 80056b4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 80056b6:	f7ff fede 	bl	8005476 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 80056ba:	e05d      	b.n	8005778 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 80056bc:	4b2f      	ldr	r3, [pc, #188]	; (800577c <USART6_IRQHandler+0xe4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d055      	beq.n	8005776 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80056ca:	4b2e      	ldr	r3, [pc, #184]	; (8005784 <USART6_IRQHandler+0xec>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 80056d2:	4b2d      	ldr	r3, [pc, #180]	; (8005788 <USART6_IRQHandler+0xf0>)
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	4b29      	ldr	r3, [pc, #164]	; (800577c <USART6_IRQHandler+0xe4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80056dc:	4b27      	ldr	r3, [pc, #156]	; (800577c <USART6_IRQHandler+0xe4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2100      	movs	r1, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fe95 	bl	8005412 <interruptionTX>
}
 80056e8:	e046      	b.n	8005778 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80056ea:	4b26      	ldr	r3, [pc, #152]	; (8005784 <USART6_IRQHandler+0xec>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d142      	bne.n	8005778 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80056f2:	4b26      	ldr	r3, [pc, #152]	; (800578c <USART6_IRQHandler+0xf4>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <USART6_IRQHandler+0xf8>)
 80056fa:	5c9b      	ldrb	r3, [r3, r2]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00e      	beq.n	800571e <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8005700:	4b22      	ldr	r3, [pc, #136]	; (800578c <USART6_IRQHandler+0xf4>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	4b22      	ldr	r3, [pc, #136]	; (8005790 <USART6_IRQHandler+0xf8>)
 8005708:	5c9a      	ldrb	r2, [r3, r2]
 800570a:	4b1c      	ldr	r3, [pc, #112]	; (800577c <USART6_IRQHandler+0xe4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	605a      	str	r2, [r3, #4]
				posChar++;
 8005710:	4b1e      	ldr	r3, [pc, #120]	; (800578c <USART6_IRQHandler+0xf4>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	4b1c      	ldr	r3, [pc, #112]	; (800578c <USART6_IRQHandler+0xf4>)
 800571a:	701a      	strb	r2, [r3, #0]
}
 800571c:	e02c      	b.n	8005778 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800571e:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <USART6_IRQHandler+0xfc>)
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <USART6_IRQHandler+0x100>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d215      	bcs.n	8005756 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800572a:	4b1a      	ldr	r3, [pc, #104]	; (8005794 <USART6_IRQHandler+0xfc>)
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	2364      	movs	r3, #100	; 0x64
 8005732:	fb02 f303 	mul.w	r3, r2, r3
 8005736:	4a19      	ldr	r2, [pc, #100]	; (800579c <USART6_IRQHandler+0x104>)
 8005738:	4413      	add	r3, r2
 800573a:	4619      	mov	r1, r3
 800573c:	4814      	ldr	r0, [pc, #80]	; (8005790 <USART6_IRQHandler+0xf8>)
 800573e:	f000 f8db 	bl	80058f8 <siprintf>
					posChar = 0;
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <USART6_IRQHandler+0xf4>)
 8005744:	2200      	movs	r2, #0
 8005746:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005748:	4b12      	ldr	r3, [pc, #72]	; (8005794 <USART6_IRQHandler+0xfc>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <USART6_IRQHandler+0xfc>)
 8005752:	701a      	strb	r2, [r3, #0]
}
 8005754:	e010      	b.n	8005778 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <USART6_IRQHandler+0xe4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff fe58 	bl	8005412 <interruptionTX>
					posChar = 0;
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <USART6_IRQHandler+0xf4>)
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <USART6_IRQHandler+0xfc>)
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <USART6_IRQHandler+0x100>)
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
}
 8005774:	e000      	b.n	8005778 <USART6_IRQHandler+0xe0>
		__NOP();
 8005776:	bf00      	nop
}
 8005778:	bf00      	nop
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20012ee4 	.word	0x20012ee4
 8005780:	20012ee8 	.word	0x20012ee8
 8005784:	20013723 	.word	0x20013723
 8005788:	20012ee9 	.word	0x20012ee9
 800578c:	20013722 	.word	0x20013722
 8005790:	20012eec 	.word	0x20012eec
 8005794:	20013721 	.word	0x20013721
 8005798:	20013720 	.word	0x20013720
 800579c:	20012f50 	.word	0x20012f50

080057a0 <__errno>:
 80057a0:	4b01      	ldr	r3, [pc, #4]	; (80057a8 <__errno+0x8>)
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000010 	.word	0x20000010

080057ac <__libc_init_array>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	4d0d      	ldr	r5, [pc, #52]	; (80057e4 <__libc_init_array+0x38>)
 80057b0:	4c0d      	ldr	r4, [pc, #52]	; (80057e8 <__libc_init_array+0x3c>)
 80057b2:	1b64      	subs	r4, r4, r5
 80057b4:	10a4      	asrs	r4, r4, #2
 80057b6:	2600      	movs	r6, #0
 80057b8:	42a6      	cmp	r6, r4
 80057ba:	d109      	bne.n	80057d0 <__libc_init_array+0x24>
 80057bc:	4d0b      	ldr	r5, [pc, #44]	; (80057ec <__libc_init_array+0x40>)
 80057be:	4c0c      	ldr	r4, [pc, #48]	; (80057f0 <__libc_init_array+0x44>)
 80057c0:	f001 fa70 	bl	8006ca4 <_init>
 80057c4:	1b64      	subs	r4, r4, r5
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	2600      	movs	r6, #0
 80057ca:	42a6      	cmp	r6, r4
 80057cc:	d105      	bne.n	80057da <__libc_init_array+0x2e>
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d4:	4798      	blx	r3
 80057d6:	3601      	adds	r6, #1
 80057d8:	e7ee      	b.n	80057b8 <__libc_init_array+0xc>
 80057da:	f855 3b04 	ldr.w	r3, [r5], #4
 80057de:	4798      	blx	r3
 80057e0:	3601      	adds	r6, #1
 80057e2:	e7f2      	b.n	80057ca <__libc_init_array+0x1e>
 80057e4:	08006e70 	.word	0x08006e70
 80057e8:	08006e70 	.word	0x08006e70
 80057ec:	08006e70 	.word	0x08006e70
 80057f0:	08006e74 	.word	0x08006e74

080057f4 <memcpy>:
 80057f4:	440a      	add	r2, r1
 80057f6:	4291      	cmp	r1, r2
 80057f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057fc:	d100      	bne.n	8005800 <memcpy+0xc>
 80057fe:	4770      	bx	lr
 8005800:	b510      	push	{r4, lr}
 8005802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800580a:	4291      	cmp	r1, r2
 800580c:	d1f9      	bne.n	8005802 <memcpy+0xe>
 800580e:	bd10      	pop	{r4, pc}

08005810 <memset>:
 8005810:	4402      	add	r2, r0
 8005812:	4603      	mov	r3, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	d100      	bne.n	800581a <memset+0xa>
 8005818:	4770      	bx	lr
 800581a:	f803 1b01 	strb.w	r1, [r3], #1
 800581e:	e7f9      	b.n	8005814 <memset+0x4>

08005820 <srand>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4b10      	ldr	r3, [pc, #64]	; (8005864 <srand+0x44>)
 8005824:	681d      	ldr	r5, [r3, #0]
 8005826:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005828:	4604      	mov	r4, r0
 800582a:	b9b3      	cbnz	r3, 800585a <srand+0x3a>
 800582c:	2018      	movs	r0, #24
 800582e:	f000 f8b3 	bl	8005998 <malloc>
 8005832:	4602      	mov	r2, r0
 8005834:	63a8      	str	r0, [r5, #56]	; 0x38
 8005836:	b920      	cbnz	r0, 8005842 <srand+0x22>
 8005838:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <srand+0x48>)
 800583a:	480c      	ldr	r0, [pc, #48]	; (800586c <srand+0x4c>)
 800583c:	2142      	movs	r1, #66	; 0x42
 800583e:	f000 f87b 	bl	8005938 <__assert_func>
 8005842:	490b      	ldr	r1, [pc, #44]	; (8005870 <srand+0x50>)
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <srand+0x54>)
 8005846:	e9c0 1300 	strd	r1, r3, [r0]
 800584a:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <srand+0x58>)
 800584c:	6083      	str	r3, [r0, #8]
 800584e:	230b      	movs	r3, #11
 8005850:	8183      	strh	r3, [r0, #12]
 8005852:	2100      	movs	r1, #0
 8005854:	2001      	movs	r0, #1
 8005856:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800585a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800585c:	2200      	movs	r2, #0
 800585e:	611c      	str	r4, [r3, #16]
 8005860:	615a      	str	r2, [r3, #20]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	20000010 	.word	0x20000010
 8005868:	08006d24 	.word	0x08006d24
 800586c:	08006d3b 	.word	0x08006d3b
 8005870:	abcd330e 	.word	0xabcd330e
 8005874:	e66d1234 	.word	0xe66d1234
 8005878:	0005deec 	.word	0x0005deec

0800587c <rand>:
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <rand+0x5c>)
 800587e:	b510      	push	{r4, lr}
 8005880:	681c      	ldr	r4, [r3, #0]
 8005882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005884:	b9b3      	cbnz	r3, 80058b4 <rand+0x38>
 8005886:	2018      	movs	r0, #24
 8005888:	f000 f886 	bl	8005998 <malloc>
 800588c:	63a0      	str	r0, [r4, #56]	; 0x38
 800588e:	b928      	cbnz	r0, 800589c <rand+0x20>
 8005890:	4602      	mov	r2, r0
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <rand+0x60>)
 8005894:	4812      	ldr	r0, [pc, #72]	; (80058e0 <rand+0x64>)
 8005896:	214e      	movs	r1, #78	; 0x4e
 8005898:	f000 f84e 	bl	8005938 <__assert_func>
 800589c:	4a11      	ldr	r2, [pc, #68]	; (80058e4 <rand+0x68>)
 800589e:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <rand+0x6c>)
 80058a0:	e9c0 2300 	strd	r2, r3, [r0]
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <rand+0x70>)
 80058a6:	6083      	str	r3, [r0, #8]
 80058a8:	230b      	movs	r3, #11
 80058aa:	8183      	strh	r3, [r0, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	2300      	movs	r3, #0
 80058b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80058b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80058b6:	4a0e      	ldr	r2, [pc, #56]	; (80058f0 <rand+0x74>)
 80058b8:	6920      	ldr	r0, [r4, #16]
 80058ba:	6963      	ldr	r3, [r4, #20]
 80058bc:	490d      	ldr	r1, [pc, #52]	; (80058f4 <rand+0x78>)
 80058be:	4342      	muls	r2, r0
 80058c0:	fb01 2203 	mla	r2, r1, r3, r2
 80058c4:	fba0 0101 	umull	r0, r1, r0, r1
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	eb42 0001 	adc.w	r0, r2, r1
 80058ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80058d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80058d6:	bd10      	pop	{r4, pc}
 80058d8:	20000010 	.word	0x20000010
 80058dc:	08006d24 	.word	0x08006d24
 80058e0:	08006d3b 	.word	0x08006d3b
 80058e4:	abcd330e 	.word	0xabcd330e
 80058e8:	e66d1234 	.word	0xe66d1234
 80058ec:	0005deec 	.word	0x0005deec
 80058f0:	5851f42d 	.word	0x5851f42d
 80058f4:	4c957f2d 	.word	0x4c957f2d

080058f8 <siprintf>:
 80058f8:	b40e      	push	{r1, r2, r3}
 80058fa:	b500      	push	{lr}
 80058fc:	b09c      	sub	sp, #112	; 0x70
 80058fe:	ab1d      	add	r3, sp, #116	; 0x74
 8005900:	9002      	str	r0, [sp, #8]
 8005902:	9006      	str	r0, [sp, #24]
 8005904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005908:	4809      	ldr	r0, [pc, #36]	; (8005930 <siprintf+0x38>)
 800590a:	9107      	str	r1, [sp, #28]
 800590c:	9104      	str	r1, [sp, #16]
 800590e:	4909      	ldr	r1, [pc, #36]	; (8005934 <siprintf+0x3c>)
 8005910:	f853 2b04 	ldr.w	r2, [r3], #4
 8005914:	9105      	str	r1, [sp, #20]
 8005916:	6800      	ldr	r0, [r0, #0]
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	a902      	add	r1, sp, #8
 800591c:	f000 f980 	bl	8005c20 <_svfiprintf_r>
 8005920:	9b02      	ldr	r3, [sp, #8]
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	b01c      	add	sp, #112	; 0x70
 8005928:	f85d eb04 	ldr.w	lr, [sp], #4
 800592c:	b003      	add	sp, #12
 800592e:	4770      	bx	lr
 8005930:	20000010 	.word	0x20000010
 8005934:	ffff0208 	.word	0xffff0208

08005938 <__assert_func>:
 8005938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800593a:	4614      	mov	r4, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <__assert_func+0x2c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4605      	mov	r5, r0
 8005944:	68d8      	ldr	r0, [r3, #12]
 8005946:	b14c      	cbz	r4, 800595c <__assert_func+0x24>
 8005948:	4b07      	ldr	r3, [pc, #28]	; (8005968 <__assert_func+0x30>)
 800594a:	9100      	str	r1, [sp, #0]
 800594c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005950:	4906      	ldr	r1, [pc, #24]	; (800596c <__assert_func+0x34>)
 8005952:	462b      	mov	r3, r5
 8005954:	f000 f80e 	bl	8005974 <fiprintf>
 8005958:	f000 fe20 	bl	800659c <abort>
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <__assert_func+0x38>)
 800595e:	461c      	mov	r4, r3
 8005960:	e7f3      	b.n	800594a <__assert_func+0x12>
 8005962:	bf00      	nop
 8005964:	20000010 	.word	0x20000010
 8005968:	08006d96 	.word	0x08006d96
 800596c:	08006da3 	.word	0x08006da3
 8005970:	08006dd1 	.word	0x08006dd1

08005974 <fiprintf>:
 8005974:	b40e      	push	{r1, r2, r3}
 8005976:	b503      	push	{r0, r1, lr}
 8005978:	4601      	mov	r1, r0
 800597a:	ab03      	add	r3, sp, #12
 800597c:	4805      	ldr	r0, [pc, #20]	; (8005994 <fiprintf+0x20>)
 800597e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005982:	6800      	ldr	r0, [r0, #0]
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	f000 fa75 	bl	8005e74 <_vfiprintf_r>
 800598a:	b002      	add	sp, #8
 800598c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005990:	b003      	add	sp, #12
 8005992:	4770      	bx	lr
 8005994:	20000010 	.word	0x20000010

08005998 <malloc>:
 8005998:	4b02      	ldr	r3, [pc, #8]	; (80059a4 <malloc+0xc>)
 800599a:	4601      	mov	r1, r0
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	f000 b86f 	b.w	8005a80 <_malloc_r>
 80059a2:	bf00      	nop
 80059a4:	20000010 	.word	0x20000010

080059a8 <_free_r>:
 80059a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059aa:	2900      	cmp	r1, #0
 80059ac:	d044      	beq.n	8005a38 <_free_r+0x90>
 80059ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b2:	9001      	str	r0, [sp, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f1a1 0404 	sub.w	r4, r1, #4
 80059ba:	bfb8      	it	lt
 80059bc:	18e4      	addlt	r4, r4, r3
 80059be:	f001 f82f 	bl	8006a20 <__malloc_lock>
 80059c2:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <_free_r+0x94>)
 80059c4:	9801      	ldr	r0, [sp, #4]
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	b933      	cbnz	r3, 80059d8 <_free_r+0x30>
 80059ca:	6063      	str	r3, [r4, #4]
 80059cc:	6014      	str	r4, [r2, #0]
 80059ce:	b003      	add	sp, #12
 80059d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059d4:	f001 b82a 	b.w	8006a2c <__malloc_unlock>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d908      	bls.n	80059ee <_free_r+0x46>
 80059dc:	6825      	ldr	r5, [r4, #0]
 80059de:	1961      	adds	r1, r4, r5
 80059e0:	428b      	cmp	r3, r1
 80059e2:	bf01      	itttt	eq
 80059e4:	6819      	ldreq	r1, [r3, #0]
 80059e6:	685b      	ldreq	r3, [r3, #4]
 80059e8:	1949      	addeq	r1, r1, r5
 80059ea:	6021      	streq	r1, [r4, #0]
 80059ec:	e7ed      	b.n	80059ca <_free_r+0x22>
 80059ee:	461a      	mov	r2, r3
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b10b      	cbz	r3, 80059f8 <_free_r+0x50>
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d9fa      	bls.n	80059ee <_free_r+0x46>
 80059f8:	6811      	ldr	r1, [r2, #0]
 80059fa:	1855      	adds	r5, r2, r1
 80059fc:	42a5      	cmp	r5, r4
 80059fe:	d10b      	bne.n	8005a18 <_free_r+0x70>
 8005a00:	6824      	ldr	r4, [r4, #0]
 8005a02:	4421      	add	r1, r4
 8005a04:	1854      	adds	r4, r2, r1
 8005a06:	42a3      	cmp	r3, r4
 8005a08:	6011      	str	r1, [r2, #0]
 8005a0a:	d1e0      	bne.n	80059ce <_free_r+0x26>
 8005a0c:	681c      	ldr	r4, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	6053      	str	r3, [r2, #4]
 8005a12:	4421      	add	r1, r4
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	e7da      	b.n	80059ce <_free_r+0x26>
 8005a18:	d902      	bls.n	8005a20 <_free_r+0x78>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	6003      	str	r3, [r0, #0]
 8005a1e:	e7d6      	b.n	80059ce <_free_r+0x26>
 8005a20:	6825      	ldr	r5, [r4, #0]
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf04      	itt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	6063      	str	r3, [r4, #4]
 8005a2e:	bf04      	itt	eq
 8005a30:	1949      	addeq	r1, r1, r5
 8005a32:	6021      	streq	r1, [r4, #0]
 8005a34:	6054      	str	r4, [r2, #4]
 8005a36:	e7ca      	b.n	80059ce <_free_r+0x26>
 8005a38:	b003      	add	sp, #12
 8005a3a:	bd30      	pop	{r4, r5, pc}
 8005a3c:	20013724 	.word	0x20013724

08005a40 <sbrk_aligned>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	4e0e      	ldr	r6, [pc, #56]	; (8005a7c <sbrk_aligned+0x3c>)
 8005a44:	460c      	mov	r4, r1
 8005a46:	6831      	ldr	r1, [r6, #0]
 8005a48:	4605      	mov	r5, r0
 8005a4a:	b911      	cbnz	r1, 8005a52 <sbrk_aligned+0x12>
 8005a4c:	f000 fcd6 	bl	80063fc <_sbrk_r>
 8005a50:	6030      	str	r0, [r6, #0]
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f000 fcd1 	bl	80063fc <_sbrk_r>
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	d00a      	beq.n	8005a74 <sbrk_aligned+0x34>
 8005a5e:	1cc4      	adds	r4, r0, #3
 8005a60:	f024 0403 	bic.w	r4, r4, #3
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d007      	beq.n	8005a78 <sbrk_aligned+0x38>
 8005a68:	1a21      	subs	r1, r4, r0
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	f000 fcc6 	bl	80063fc <_sbrk_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	d101      	bne.n	8005a78 <sbrk_aligned+0x38>
 8005a74:	f04f 34ff 	mov.w	r4, #4294967295
 8005a78:	4620      	mov	r0, r4
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	20013728 	.word	0x20013728

08005a80 <_malloc_r>:
 8005a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a84:	1ccd      	adds	r5, r1, #3
 8005a86:	f025 0503 	bic.w	r5, r5, #3
 8005a8a:	3508      	adds	r5, #8
 8005a8c:	2d0c      	cmp	r5, #12
 8005a8e:	bf38      	it	cc
 8005a90:	250c      	movcc	r5, #12
 8005a92:	2d00      	cmp	r5, #0
 8005a94:	4607      	mov	r7, r0
 8005a96:	db01      	blt.n	8005a9c <_malloc_r+0x1c>
 8005a98:	42a9      	cmp	r1, r5
 8005a9a:	d905      	bls.n	8005aa8 <_malloc_r+0x28>
 8005a9c:	230c      	movs	r3, #12
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aa8:	4e2e      	ldr	r6, [pc, #184]	; (8005b64 <_malloc_r+0xe4>)
 8005aaa:	f000 ffb9 	bl	8006a20 <__malloc_lock>
 8005aae:	6833      	ldr	r3, [r6, #0]
 8005ab0:	461c      	mov	r4, r3
 8005ab2:	bb34      	cbnz	r4, 8005b02 <_malloc_r+0x82>
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f7ff ffc2 	bl	8005a40 <sbrk_aligned>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	4604      	mov	r4, r0
 8005ac0:	d14d      	bne.n	8005b5e <_malloc_r+0xde>
 8005ac2:	6834      	ldr	r4, [r6, #0]
 8005ac4:	4626      	mov	r6, r4
 8005ac6:	2e00      	cmp	r6, #0
 8005ac8:	d140      	bne.n	8005b4c <_malloc_r+0xcc>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	4631      	mov	r1, r6
 8005ace:	4638      	mov	r0, r7
 8005ad0:	eb04 0803 	add.w	r8, r4, r3
 8005ad4:	f000 fc92 	bl	80063fc <_sbrk_r>
 8005ad8:	4580      	cmp	r8, r0
 8005ada:	d13a      	bne.n	8005b52 <_malloc_r+0xd2>
 8005adc:	6821      	ldr	r1, [r4, #0]
 8005ade:	3503      	adds	r5, #3
 8005ae0:	1a6d      	subs	r5, r5, r1
 8005ae2:	f025 0503 	bic.w	r5, r5, #3
 8005ae6:	3508      	adds	r5, #8
 8005ae8:	2d0c      	cmp	r5, #12
 8005aea:	bf38      	it	cc
 8005aec:	250c      	movcc	r5, #12
 8005aee:	4629      	mov	r1, r5
 8005af0:	4638      	mov	r0, r7
 8005af2:	f7ff ffa5 	bl	8005a40 <sbrk_aligned>
 8005af6:	3001      	adds	r0, #1
 8005af8:	d02b      	beq.n	8005b52 <_malloc_r+0xd2>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	442b      	add	r3, r5
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	e00e      	b.n	8005b20 <_malloc_r+0xa0>
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	1b52      	subs	r2, r2, r5
 8005b06:	d41e      	bmi.n	8005b46 <_malloc_r+0xc6>
 8005b08:	2a0b      	cmp	r2, #11
 8005b0a:	d916      	bls.n	8005b3a <_malloc_r+0xba>
 8005b0c:	1961      	adds	r1, r4, r5
 8005b0e:	42a3      	cmp	r3, r4
 8005b10:	6025      	str	r5, [r4, #0]
 8005b12:	bf18      	it	ne
 8005b14:	6059      	strne	r1, [r3, #4]
 8005b16:	6863      	ldr	r3, [r4, #4]
 8005b18:	bf08      	it	eq
 8005b1a:	6031      	streq	r1, [r6, #0]
 8005b1c:	5162      	str	r2, [r4, r5]
 8005b1e:	604b      	str	r3, [r1, #4]
 8005b20:	4638      	mov	r0, r7
 8005b22:	f104 060b 	add.w	r6, r4, #11
 8005b26:	f000 ff81 	bl	8006a2c <__malloc_unlock>
 8005b2a:	f026 0607 	bic.w	r6, r6, #7
 8005b2e:	1d23      	adds	r3, r4, #4
 8005b30:	1af2      	subs	r2, r6, r3
 8005b32:	d0b6      	beq.n	8005aa2 <_malloc_r+0x22>
 8005b34:	1b9b      	subs	r3, r3, r6
 8005b36:	50a3      	str	r3, [r4, r2]
 8005b38:	e7b3      	b.n	8005aa2 <_malloc_r+0x22>
 8005b3a:	6862      	ldr	r2, [r4, #4]
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	bf0c      	ite	eq
 8005b40:	6032      	streq	r2, [r6, #0]
 8005b42:	605a      	strne	r2, [r3, #4]
 8005b44:	e7ec      	b.n	8005b20 <_malloc_r+0xa0>
 8005b46:	4623      	mov	r3, r4
 8005b48:	6864      	ldr	r4, [r4, #4]
 8005b4a:	e7b2      	b.n	8005ab2 <_malloc_r+0x32>
 8005b4c:	4634      	mov	r4, r6
 8005b4e:	6876      	ldr	r6, [r6, #4]
 8005b50:	e7b9      	b.n	8005ac6 <_malloc_r+0x46>
 8005b52:	230c      	movs	r3, #12
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	4638      	mov	r0, r7
 8005b58:	f000 ff68 	bl	8006a2c <__malloc_unlock>
 8005b5c:	e7a1      	b.n	8005aa2 <_malloc_r+0x22>
 8005b5e:	6025      	str	r5, [r4, #0]
 8005b60:	e7de      	b.n	8005b20 <_malloc_r+0xa0>
 8005b62:	bf00      	nop
 8005b64:	20013724 	.word	0x20013724

08005b68 <__ssputs_r>:
 8005b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b6c:	688e      	ldr	r6, [r1, #8]
 8005b6e:	429e      	cmp	r6, r3
 8005b70:	4682      	mov	sl, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	4690      	mov	r8, r2
 8005b76:	461f      	mov	r7, r3
 8005b78:	d838      	bhi.n	8005bec <__ssputs_r+0x84>
 8005b7a:	898a      	ldrh	r2, [r1, #12]
 8005b7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b80:	d032      	beq.n	8005be8 <__ssputs_r+0x80>
 8005b82:	6825      	ldr	r5, [r4, #0]
 8005b84:	6909      	ldr	r1, [r1, #16]
 8005b86:	eba5 0901 	sub.w	r9, r5, r1
 8005b8a:	6965      	ldr	r5, [r4, #20]
 8005b8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b94:	3301      	adds	r3, #1
 8005b96:	444b      	add	r3, r9
 8005b98:	106d      	asrs	r5, r5, #1
 8005b9a:	429d      	cmp	r5, r3
 8005b9c:	bf38      	it	cc
 8005b9e:	461d      	movcc	r5, r3
 8005ba0:	0553      	lsls	r3, r2, #21
 8005ba2:	d531      	bpl.n	8005c08 <__ssputs_r+0xa0>
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	f7ff ff6b 	bl	8005a80 <_malloc_r>
 8005baa:	4606      	mov	r6, r0
 8005bac:	b950      	cbnz	r0, 8005bc4 <__ssputs_r+0x5c>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	f8ca 3000 	str.w	r3, [sl]
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc4:	6921      	ldr	r1, [r4, #16]
 8005bc6:	464a      	mov	r2, r9
 8005bc8:	f7ff fe14 	bl	80057f4 <memcpy>
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	6126      	str	r6, [r4, #16]
 8005bda:	6165      	str	r5, [r4, #20]
 8005bdc:	444e      	add	r6, r9
 8005bde:	eba5 0509 	sub.w	r5, r5, r9
 8005be2:	6026      	str	r6, [r4, #0]
 8005be4:	60a5      	str	r5, [r4, #8]
 8005be6:	463e      	mov	r6, r7
 8005be8:	42be      	cmp	r6, r7
 8005bea:	d900      	bls.n	8005bee <__ssputs_r+0x86>
 8005bec:	463e      	mov	r6, r7
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	4641      	mov	r1, r8
 8005bf4:	f000 fefa 	bl	80069ec <memmove>
 8005bf8:	68a3      	ldr	r3, [r4, #8]
 8005bfa:	1b9b      	subs	r3, r3, r6
 8005bfc:	60a3      	str	r3, [r4, #8]
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	4433      	add	r3, r6
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	2000      	movs	r0, #0
 8005c06:	e7db      	b.n	8005bc0 <__ssputs_r+0x58>
 8005c08:	462a      	mov	r2, r5
 8005c0a:	f000 ff15 	bl	8006a38 <_realloc_r>
 8005c0e:	4606      	mov	r6, r0
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d1e1      	bne.n	8005bd8 <__ssputs_r+0x70>
 8005c14:	6921      	ldr	r1, [r4, #16]
 8005c16:	4650      	mov	r0, sl
 8005c18:	f7ff fec6 	bl	80059a8 <_free_r>
 8005c1c:	e7c7      	b.n	8005bae <__ssputs_r+0x46>
	...

08005c20 <_svfiprintf_r>:
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	4698      	mov	r8, r3
 8005c26:	898b      	ldrh	r3, [r1, #12]
 8005c28:	061b      	lsls	r3, r3, #24
 8005c2a:	b09d      	sub	sp, #116	; 0x74
 8005c2c:	4607      	mov	r7, r0
 8005c2e:	460d      	mov	r5, r1
 8005c30:	4614      	mov	r4, r2
 8005c32:	d50e      	bpl.n	8005c52 <_svfiprintf_r+0x32>
 8005c34:	690b      	ldr	r3, [r1, #16]
 8005c36:	b963      	cbnz	r3, 8005c52 <_svfiprintf_r+0x32>
 8005c38:	2140      	movs	r1, #64	; 0x40
 8005c3a:	f7ff ff21 	bl	8005a80 <_malloc_r>
 8005c3e:	6028      	str	r0, [r5, #0]
 8005c40:	6128      	str	r0, [r5, #16]
 8005c42:	b920      	cbnz	r0, 8005c4e <_svfiprintf_r+0x2e>
 8005c44:	230c      	movs	r3, #12
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	e0d1      	b.n	8005df2 <_svfiprintf_r+0x1d2>
 8005c4e:	2340      	movs	r3, #64	; 0x40
 8005c50:	616b      	str	r3, [r5, #20]
 8005c52:	2300      	movs	r3, #0
 8005c54:	9309      	str	r3, [sp, #36]	; 0x24
 8005c56:	2320      	movs	r3, #32
 8005c58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c60:	2330      	movs	r3, #48	; 0x30
 8005c62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e0c <_svfiprintf_r+0x1ec>
 8005c66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c6a:	f04f 0901 	mov.w	r9, #1
 8005c6e:	4623      	mov	r3, r4
 8005c70:	469a      	mov	sl, r3
 8005c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c76:	b10a      	cbz	r2, 8005c7c <_svfiprintf_r+0x5c>
 8005c78:	2a25      	cmp	r2, #37	; 0x25
 8005c7a:	d1f9      	bne.n	8005c70 <_svfiprintf_r+0x50>
 8005c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8005c80:	d00b      	beq.n	8005c9a <_svfiprintf_r+0x7a>
 8005c82:	465b      	mov	r3, fp
 8005c84:	4622      	mov	r2, r4
 8005c86:	4629      	mov	r1, r5
 8005c88:	4638      	mov	r0, r7
 8005c8a:	f7ff ff6d 	bl	8005b68 <__ssputs_r>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f000 80aa 	beq.w	8005de8 <_svfiprintf_r+0x1c8>
 8005c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c96:	445a      	add	r2, fp
 8005c98:	9209      	str	r2, [sp, #36]	; 0x24
 8005c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f000 80a2 	beq.w	8005de8 <_svfiprintf_r+0x1c8>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8005caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cae:	f10a 0a01 	add.w	sl, sl, #1
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	9307      	str	r3, [sp, #28]
 8005cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cba:	931a      	str	r3, [sp, #104]	; 0x68
 8005cbc:	4654      	mov	r4, sl
 8005cbe:	2205      	movs	r2, #5
 8005cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc4:	4851      	ldr	r0, [pc, #324]	; (8005e0c <_svfiprintf_r+0x1ec>)
 8005cc6:	f7fa fa8b 	bl	80001e0 <memchr>
 8005cca:	9a04      	ldr	r2, [sp, #16]
 8005ccc:	b9d8      	cbnz	r0, 8005d06 <_svfiprintf_r+0xe6>
 8005cce:	06d0      	lsls	r0, r2, #27
 8005cd0:	bf44      	itt	mi
 8005cd2:	2320      	movmi	r3, #32
 8005cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd8:	0711      	lsls	r1, r2, #28
 8005cda:	bf44      	itt	mi
 8005cdc:	232b      	movmi	r3, #43	; 0x2b
 8005cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce8:	d015      	beq.n	8005d16 <_svfiprintf_r+0xf6>
 8005cea:	9a07      	ldr	r2, [sp, #28]
 8005cec:	4654      	mov	r4, sl
 8005cee:	2000      	movs	r0, #0
 8005cf0:	f04f 0c0a 	mov.w	ip, #10
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cfa:	3b30      	subs	r3, #48	; 0x30
 8005cfc:	2b09      	cmp	r3, #9
 8005cfe:	d94e      	bls.n	8005d9e <_svfiprintf_r+0x17e>
 8005d00:	b1b0      	cbz	r0, 8005d30 <_svfiprintf_r+0x110>
 8005d02:	9207      	str	r2, [sp, #28]
 8005d04:	e014      	b.n	8005d30 <_svfiprintf_r+0x110>
 8005d06:	eba0 0308 	sub.w	r3, r0, r8
 8005d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	9304      	str	r3, [sp, #16]
 8005d12:	46a2      	mov	sl, r4
 8005d14:	e7d2      	b.n	8005cbc <_svfiprintf_r+0x9c>
 8005d16:	9b03      	ldr	r3, [sp, #12]
 8005d18:	1d19      	adds	r1, r3, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	9103      	str	r1, [sp, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bfbb      	ittet	lt
 8005d22:	425b      	neglt	r3, r3
 8005d24:	f042 0202 	orrlt.w	r2, r2, #2
 8005d28:	9307      	strge	r3, [sp, #28]
 8005d2a:	9307      	strlt	r3, [sp, #28]
 8005d2c:	bfb8      	it	lt
 8005d2e:	9204      	strlt	r2, [sp, #16]
 8005d30:	7823      	ldrb	r3, [r4, #0]
 8005d32:	2b2e      	cmp	r3, #46	; 0x2e
 8005d34:	d10c      	bne.n	8005d50 <_svfiprintf_r+0x130>
 8005d36:	7863      	ldrb	r3, [r4, #1]
 8005d38:	2b2a      	cmp	r3, #42	; 0x2a
 8005d3a:	d135      	bne.n	8005da8 <_svfiprintf_r+0x188>
 8005d3c:	9b03      	ldr	r3, [sp, #12]
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	9203      	str	r2, [sp, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bfb8      	it	lt
 8005d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d4c:	3402      	adds	r4, #2
 8005d4e:	9305      	str	r3, [sp, #20]
 8005d50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005e1c <_svfiprintf_r+0x1fc>
 8005d54:	7821      	ldrb	r1, [r4, #0]
 8005d56:	2203      	movs	r2, #3
 8005d58:	4650      	mov	r0, sl
 8005d5a:	f7fa fa41 	bl	80001e0 <memchr>
 8005d5e:	b140      	cbz	r0, 8005d72 <_svfiprintf_r+0x152>
 8005d60:	2340      	movs	r3, #64	; 0x40
 8005d62:	eba0 000a 	sub.w	r0, r0, sl
 8005d66:	fa03 f000 	lsl.w	r0, r3, r0
 8005d6a:	9b04      	ldr	r3, [sp, #16]
 8005d6c:	4303      	orrs	r3, r0
 8005d6e:	3401      	adds	r4, #1
 8005d70:	9304      	str	r3, [sp, #16]
 8005d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d76:	4826      	ldr	r0, [pc, #152]	; (8005e10 <_svfiprintf_r+0x1f0>)
 8005d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d7c:	2206      	movs	r2, #6
 8005d7e:	f7fa fa2f 	bl	80001e0 <memchr>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d038      	beq.n	8005df8 <_svfiprintf_r+0x1d8>
 8005d86:	4b23      	ldr	r3, [pc, #140]	; (8005e14 <_svfiprintf_r+0x1f4>)
 8005d88:	bb1b      	cbnz	r3, 8005dd2 <_svfiprintf_r+0x1b2>
 8005d8a:	9b03      	ldr	r3, [sp, #12]
 8005d8c:	3307      	adds	r3, #7
 8005d8e:	f023 0307 	bic.w	r3, r3, #7
 8005d92:	3308      	adds	r3, #8
 8005d94:	9303      	str	r3, [sp, #12]
 8005d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d98:	4433      	add	r3, r6
 8005d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9c:	e767      	b.n	8005c6e <_svfiprintf_r+0x4e>
 8005d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005da2:	460c      	mov	r4, r1
 8005da4:	2001      	movs	r0, #1
 8005da6:	e7a5      	b.n	8005cf4 <_svfiprintf_r+0xd4>
 8005da8:	2300      	movs	r3, #0
 8005daa:	3401      	adds	r4, #1
 8005dac:	9305      	str	r3, [sp, #20]
 8005dae:	4619      	mov	r1, r3
 8005db0:	f04f 0c0a 	mov.w	ip, #10
 8005db4:	4620      	mov	r0, r4
 8005db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dba:	3a30      	subs	r2, #48	; 0x30
 8005dbc:	2a09      	cmp	r2, #9
 8005dbe:	d903      	bls.n	8005dc8 <_svfiprintf_r+0x1a8>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d0c5      	beq.n	8005d50 <_svfiprintf_r+0x130>
 8005dc4:	9105      	str	r1, [sp, #20]
 8005dc6:	e7c3      	b.n	8005d50 <_svfiprintf_r+0x130>
 8005dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dcc:	4604      	mov	r4, r0
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e7f0      	b.n	8005db4 <_svfiprintf_r+0x194>
 8005dd2:	ab03      	add	r3, sp, #12
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <_svfiprintf_r+0x1f8>)
 8005dda:	a904      	add	r1, sp, #16
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f3af 8000 	nop.w
 8005de2:	1c42      	adds	r2, r0, #1
 8005de4:	4606      	mov	r6, r0
 8005de6:	d1d6      	bne.n	8005d96 <_svfiprintf_r+0x176>
 8005de8:	89ab      	ldrh	r3, [r5, #12]
 8005dea:	065b      	lsls	r3, r3, #25
 8005dec:	f53f af2c 	bmi.w	8005c48 <_svfiprintf_r+0x28>
 8005df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005df2:	b01d      	add	sp, #116	; 0x74
 8005df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df8:	ab03      	add	r3, sp, #12
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <_svfiprintf_r+0x1f8>)
 8005e00:	a904      	add	r1, sp, #16
 8005e02:	4638      	mov	r0, r7
 8005e04:	f000 f9d4 	bl	80061b0 <_printf_i>
 8005e08:	e7eb      	b.n	8005de2 <_svfiprintf_r+0x1c2>
 8005e0a:	bf00      	nop
 8005e0c:	08006dd2 	.word	0x08006dd2
 8005e10:	08006ddc 	.word	0x08006ddc
 8005e14:	00000000 	.word	0x00000000
 8005e18:	08005b69 	.word	0x08005b69
 8005e1c:	08006dd8 	.word	0x08006dd8

08005e20 <__sfputc_r>:
 8005e20:	6893      	ldr	r3, [r2, #8]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	b410      	push	{r4}
 8005e28:	6093      	str	r3, [r2, #8]
 8005e2a:	da08      	bge.n	8005e3e <__sfputc_r+0x1e>
 8005e2c:	6994      	ldr	r4, [r2, #24]
 8005e2e:	42a3      	cmp	r3, r4
 8005e30:	db01      	blt.n	8005e36 <__sfputc_r+0x16>
 8005e32:	290a      	cmp	r1, #10
 8005e34:	d103      	bne.n	8005e3e <__sfputc_r+0x1e>
 8005e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e3a:	f000 baef 	b.w	800641c <__swbuf_r>
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	1c58      	adds	r0, r3, #1
 8005e42:	6010      	str	r0, [r2, #0]
 8005e44:	7019      	strb	r1, [r3, #0]
 8005e46:	4608      	mov	r0, r1
 8005e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <__sfputs_r>:
 8005e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e50:	4606      	mov	r6, r0
 8005e52:	460f      	mov	r7, r1
 8005e54:	4614      	mov	r4, r2
 8005e56:	18d5      	adds	r5, r2, r3
 8005e58:	42ac      	cmp	r4, r5
 8005e5a:	d101      	bne.n	8005e60 <__sfputs_r+0x12>
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	e007      	b.n	8005e70 <__sfputs_r+0x22>
 8005e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e64:	463a      	mov	r2, r7
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7ff ffda 	bl	8005e20 <__sfputc_r>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d1f3      	bne.n	8005e58 <__sfputs_r+0xa>
 8005e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e74 <_vfiprintf_r>:
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e78:	460d      	mov	r5, r1
 8005e7a:	b09d      	sub	sp, #116	; 0x74
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	4698      	mov	r8, r3
 8005e80:	4606      	mov	r6, r0
 8005e82:	b118      	cbz	r0, 8005e8c <_vfiprintf_r+0x18>
 8005e84:	6983      	ldr	r3, [r0, #24]
 8005e86:	b90b      	cbnz	r3, 8005e8c <_vfiprintf_r+0x18>
 8005e88:	f000 fcaa 	bl	80067e0 <__sinit>
 8005e8c:	4b89      	ldr	r3, [pc, #548]	; (80060b4 <_vfiprintf_r+0x240>)
 8005e8e:	429d      	cmp	r5, r3
 8005e90:	d11b      	bne.n	8005eca <_vfiprintf_r+0x56>
 8005e92:	6875      	ldr	r5, [r6, #4]
 8005e94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e96:	07d9      	lsls	r1, r3, #31
 8005e98:	d405      	bmi.n	8005ea6 <_vfiprintf_r+0x32>
 8005e9a:	89ab      	ldrh	r3, [r5, #12]
 8005e9c:	059a      	lsls	r2, r3, #22
 8005e9e:	d402      	bmi.n	8005ea6 <_vfiprintf_r+0x32>
 8005ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ea2:	f000 fd3b 	bl	800691c <__retarget_lock_acquire_recursive>
 8005ea6:	89ab      	ldrh	r3, [r5, #12]
 8005ea8:	071b      	lsls	r3, r3, #28
 8005eaa:	d501      	bpl.n	8005eb0 <_vfiprintf_r+0x3c>
 8005eac:	692b      	ldr	r3, [r5, #16]
 8005eae:	b9eb      	cbnz	r3, 8005eec <_vfiprintf_r+0x78>
 8005eb0:	4629      	mov	r1, r5
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f000 fb04 	bl	80064c0 <__swsetup_r>
 8005eb8:	b1c0      	cbz	r0, 8005eec <_vfiprintf_r+0x78>
 8005eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ebc:	07dc      	lsls	r4, r3, #31
 8005ebe:	d50e      	bpl.n	8005ede <_vfiprintf_r+0x6a>
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	b01d      	add	sp, #116	; 0x74
 8005ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eca:	4b7b      	ldr	r3, [pc, #492]	; (80060b8 <_vfiprintf_r+0x244>)
 8005ecc:	429d      	cmp	r5, r3
 8005ece:	d101      	bne.n	8005ed4 <_vfiprintf_r+0x60>
 8005ed0:	68b5      	ldr	r5, [r6, #8]
 8005ed2:	e7df      	b.n	8005e94 <_vfiprintf_r+0x20>
 8005ed4:	4b79      	ldr	r3, [pc, #484]	; (80060bc <_vfiprintf_r+0x248>)
 8005ed6:	429d      	cmp	r5, r3
 8005ed8:	bf08      	it	eq
 8005eda:	68f5      	ldreq	r5, [r6, #12]
 8005edc:	e7da      	b.n	8005e94 <_vfiprintf_r+0x20>
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	0598      	lsls	r0, r3, #22
 8005ee2:	d4ed      	bmi.n	8005ec0 <_vfiprintf_r+0x4c>
 8005ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ee6:	f000 fd1a 	bl	800691e <__retarget_lock_release_recursive>
 8005eea:	e7e9      	b.n	8005ec0 <_vfiprintf_r+0x4c>
 8005eec:	2300      	movs	r3, #0
 8005eee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005efa:	2330      	movs	r3, #48	; 0x30
 8005efc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80060c0 <_vfiprintf_r+0x24c>
 8005f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f04:	f04f 0901 	mov.w	r9, #1
 8005f08:	4623      	mov	r3, r4
 8005f0a:	469a      	mov	sl, r3
 8005f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f10:	b10a      	cbz	r2, 8005f16 <_vfiprintf_r+0xa2>
 8005f12:	2a25      	cmp	r2, #37	; 0x25
 8005f14:	d1f9      	bne.n	8005f0a <_vfiprintf_r+0x96>
 8005f16:	ebba 0b04 	subs.w	fp, sl, r4
 8005f1a:	d00b      	beq.n	8005f34 <_vfiprintf_r+0xc0>
 8005f1c:	465b      	mov	r3, fp
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4629      	mov	r1, r5
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7ff ff93 	bl	8005e4e <__sfputs_r>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f000 80aa 	beq.w	8006082 <_vfiprintf_r+0x20e>
 8005f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f30:	445a      	add	r2, fp
 8005f32:	9209      	str	r2, [sp, #36]	; 0x24
 8005f34:	f89a 3000 	ldrb.w	r3, [sl]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80a2 	beq.w	8006082 <_vfiprintf_r+0x20e>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f04f 32ff 	mov.w	r2, #4294967295
 8005f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f48:	f10a 0a01 	add.w	sl, sl, #1
 8005f4c:	9304      	str	r3, [sp, #16]
 8005f4e:	9307      	str	r3, [sp, #28]
 8005f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f54:	931a      	str	r3, [sp, #104]	; 0x68
 8005f56:	4654      	mov	r4, sl
 8005f58:	2205      	movs	r2, #5
 8005f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f5e:	4858      	ldr	r0, [pc, #352]	; (80060c0 <_vfiprintf_r+0x24c>)
 8005f60:	f7fa f93e 	bl	80001e0 <memchr>
 8005f64:	9a04      	ldr	r2, [sp, #16]
 8005f66:	b9d8      	cbnz	r0, 8005fa0 <_vfiprintf_r+0x12c>
 8005f68:	06d1      	lsls	r1, r2, #27
 8005f6a:	bf44      	itt	mi
 8005f6c:	2320      	movmi	r3, #32
 8005f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f72:	0713      	lsls	r3, r2, #28
 8005f74:	bf44      	itt	mi
 8005f76:	232b      	movmi	r3, #43	; 0x2b
 8005f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f80:	2b2a      	cmp	r3, #42	; 0x2a
 8005f82:	d015      	beq.n	8005fb0 <_vfiprintf_r+0x13c>
 8005f84:	9a07      	ldr	r2, [sp, #28]
 8005f86:	4654      	mov	r4, sl
 8005f88:	2000      	movs	r0, #0
 8005f8a:	f04f 0c0a 	mov.w	ip, #10
 8005f8e:	4621      	mov	r1, r4
 8005f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f94:	3b30      	subs	r3, #48	; 0x30
 8005f96:	2b09      	cmp	r3, #9
 8005f98:	d94e      	bls.n	8006038 <_vfiprintf_r+0x1c4>
 8005f9a:	b1b0      	cbz	r0, 8005fca <_vfiprintf_r+0x156>
 8005f9c:	9207      	str	r2, [sp, #28]
 8005f9e:	e014      	b.n	8005fca <_vfiprintf_r+0x156>
 8005fa0:	eba0 0308 	sub.w	r3, r0, r8
 8005fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	46a2      	mov	sl, r4
 8005fae:	e7d2      	b.n	8005f56 <_vfiprintf_r+0xe2>
 8005fb0:	9b03      	ldr	r3, [sp, #12]
 8005fb2:	1d19      	adds	r1, r3, #4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	9103      	str	r1, [sp, #12]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bfbb      	ittet	lt
 8005fbc:	425b      	neglt	r3, r3
 8005fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8005fc2:	9307      	strge	r3, [sp, #28]
 8005fc4:	9307      	strlt	r3, [sp, #28]
 8005fc6:	bfb8      	it	lt
 8005fc8:	9204      	strlt	r2, [sp, #16]
 8005fca:	7823      	ldrb	r3, [r4, #0]
 8005fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8005fce:	d10c      	bne.n	8005fea <_vfiprintf_r+0x176>
 8005fd0:	7863      	ldrb	r3, [r4, #1]
 8005fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd4:	d135      	bne.n	8006042 <_vfiprintf_r+0x1ce>
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	1d1a      	adds	r2, r3, #4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	9203      	str	r2, [sp, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bfb8      	it	lt
 8005fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fe6:	3402      	adds	r4, #2
 8005fe8:	9305      	str	r3, [sp, #20]
 8005fea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060d0 <_vfiprintf_r+0x25c>
 8005fee:	7821      	ldrb	r1, [r4, #0]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	f7fa f8f4 	bl	80001e0 <memchr>
 8005ff8:	b140      	cbz	r0, 800600c <_vfiprintf_r+0x198>
 8005ffa:	2340      	movs	r3, #64	; 0x40
 8005ffc:	eba0 000a 	sub.w	r0, r0, sl
 8006000:	fa03 f000 	lsl.w	r0, r3, r0
 8006004:	9b04      	ldr	r3, [sp, #16]
 8006006:	4303      	orrs	r3, r0
 8006008:	3401      	adds	r4, #1
 800600a:	9304      	str	r3, [sp, #16]
 800600c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006010:	482c      	ldr	r0, [pc, #176]	; (80060c4 <_vfiprintf_r+0x250>)
 8006012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006016:	2206      	movs	r2, #6
 8006018:	f7fa f8e2 	bl	80001e0 <memchr>
 800601c:	2800      	cmp	r0, #0
 800601e:	d03f      	beq.n	80060a0 <_vfiprintf_r+0x22c>
 8006020:	4b29      	ldr	r3, [pc, #164]	; (80060c8 <_vfiprintf_r+0x254>)
 8006022:	bb1b      	cbnz	r3, 800606c <_vfiprintf_r+0x1f8>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	3307      	adds	r3, #7
 8006028:	f023 0307 	bic.w	r3, r3, #7
 800602c:	3308      	adds	r3, #8
 800602e:	9303      	str	r3, [sp, #12]
 8006030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006032:	443b      	add	r3, r7
 8006034:	9309      	str	r3, [sp, #36]	; 0x24
 8006036:	e767      	b.n	8005f08 <_vfiprintf_r+0x94>
 8006038:	fb0c 3202 	mla	r2, ip, r2, r3
 800603c:	460c      	mov	r4, r1
 800603e:	2001      	movs	r0, #1
 8006040:	e7a5      	b.n	8005f8e <_vfiprintf_r+0x11a>
 8006042:	2300      	movs	r3, #0
 8006044:	3401      	adds	r4, #1
 8006046:	9305      	str	r3, [sp, #20]
 8006048:	4619      	mov	r1, r3
 800604a:	f04f 0c0a 	mov.w	ip, #10
 800604e:	4620      	mov	r0, r4
 8006050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006054:	3a30      	subs	r2, #48	; 0x30
 8006056:	2a09      	cmp	r2, #9
 8006058:	d903      	bls.n	8006062 <_vfiprintf_r+0x1ee>
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0c5      	beq.n	8005fea <_vfiprintf_r+0x176>
 800605e:	9105      	str	r1, [sp, #20]
 8006060:	e7c3      	b.n	8005fea <_vfiprintf_r+0x176>
 8006062:	fb0c 2101 	mla	r1, ip, r1, r2
 8006066:	4604      	mov	r4, r0
 8006068:	2301      	movs	r3, #1
 800606a:	e7f0      	b.n	800604e <_vfiprintf_r+0x1da>
 800606c:	ab03      	add	r3, sp, #12
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	462a      	mov	r2, r5
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <_vfiprintf_r+0x258>)
 8006074:	a904      	add	r1, sp, #16
 8006076:	4630      	mov	r0, r6
 8006078:	f3af 8000 	nop.w
 800607c:	4607      	mov	r7, r0
 800607e:	1c78      	adds	r0, r7, #1
 8006080:	d1d6      	bne.n	8006030 <_vfiprintf_r+0x1bc>
 8006082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006084:	07d9      	lsls	r1, r3, #31
 8006086:	d405      	bmi.n	8006094 <_vfiprintf_r+0x220>
 8006088:	89ab      	ldrh	r3, [r5, #12]
 800608a:	059a      	lsls	r2, r3, #22
 800608c:	d402      	bmi.n	8006094 <_vfiprintf_r+0x220>
 800608e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006090:	f000 fc45 	bl	800691e <__retarget_lock_release_recursive>
 8006094:	89ab      	ldrh	r3, [r5, #12]
 8006096:	065b      	lsls	r3, r3, #25
 8006098:	f53f af12 	bmi.w	8005ec0 <_vfiprintf_r+0x4c>
 800609c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800609e:	e711      	b.n	8005ec4 <_vfiprintf_r+0x50>
 80060a0:	ab03      	add	r3, sp, #12
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	462a      	mov	r2, r5
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <_vfiprintf_r+0x258>)
 80060a8:	a904      	add	r1, sp, #16
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 f880 	bl	80061b0 <_printf_i>
 80060b0:	e7e4      	b.n	800607c <_vfiprintf_r+0x208>
 80060b2:	bf00      	nop
 80060b4:	08006e28 	.word	0x08006e28
 80060b8:	08006e48 	.word	0x08006e48
 80060bc:	08006e08 	.word	0x08006e08
 80060c0:	08006dd2 	.word	0x08006dd2
 80060c4:	08006ddc 	.word	0x08006ddc
 80060c8:	00000000 	.word	0x00000000
 80060cc:	08005e4f 	.word	0x08005e4f
 80060d0:	08006dd8 	.word	0x08006dd8

080060d4 <_printf_common>:
 80060d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	4616      	mov	r6, r2
 80060da:	4699      	mov	r9, r3
 80060dc:	688a      	ldr	r2, [r1, #8]
 80060de:	690b      	ldr	r3, [r1, #16]
 80060e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	bfb8      	it	lt
 80060e8:	4613      	movlt	r3, r2
 80060ea:	6033      	str	r3, [r6, #0]
 80060ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060f0:	4607      	mov	r7, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	b10a      	cbz	r2, 80060fa <_printf_common+0x26>
 80060f6:	3301      	adds	r3, #1
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	0699      	lsls	r1, r3, #26
 80060fe:	bf42      	ittt	mi
 8006100:	6833      	ldrmi	r3, [r6, #0]
 8006102:	3302      	addmi	r3, #2
 8006104:	6033      	strmi	r3, [r6, #0]
 8006106:	6825      	ldr	r5, [r4, #0]
 8006108:	f015 0506 	ands.w	r5, r5, #6
 800610c:	d106      	bne.n	800611c <_printf_common+0x48>
 800610e:	f104 0a19 	add.w	sl, r4, #25
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	6832      	ldr	r2, [r6, #0]
 8006116:	1a9b      	subs	r3, r3, r2
 8006118:	42ab      	cmp	r3, r5
 800611a:	dc26      	bgt.n	800616a <_printf_common+0x96>
 800611c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006120:	1e13      	subs	r3, r2, #0
 8006122:	6822      	ldr	r2, [r4, #0]
 8006124:	bf18      	it	ne
 8006126:	2301      	movne	r3, #1
 8006128:	0692      	lsls	r2, r2, #26
 800612a:	d42b      	bmi.n	8006184 <_printf_common+0xb0>
 800612c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006130:	4649      	mov	r1, r9
 8006132:	4638      	mov	r0, r7
 8006134:	47c0      	blx	r8
 8006136:	3001      	adds	r0, #1
 8006138:	d01e      	beq.n	8006178 <_printf_common+0xa4>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	68e5      	ldr	r5, [r4, #12]
 800613e:	6832      	ldr	r2, [r6, #0]
 8006140:	f003 0306 	and.w	r3, r3, #6
 8006144:	2b04      	cmp	r3, #4
 8006146:	bf08      	it	eq
 8006148:	1aad      	subeq	r5, r5, r2
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	6922      	ldr	r2, [r4, #16]
 800614e:	bf0c      	ite	eq
 8006150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006154:	2500      	movne	r5, #0
 8006156:	4293      	cmp	r3, r2
 8006158:	bfc4      	itt	gt
 800615a:	1a9b      	subgt	r3, r3, r2
 800615c:	18ed      	addgt	r5, r5, r3
 800615e:	2600      	movs	r6, #0
 8006160:	341a      	adds	r4, #26
 8006162:	42b5      	cmp	r5, r6
 8006164:	d11a      	bne.n	800619c <_printf_common+0xc8>
 8006166:	2000      	movs	r0, #0
 8006168:	e008      	b.n	800617c <_printf_common+0xa8>
 800616a:	2301      	movs	r3, #1
 800616c:	4652      	mov	r2, sl
 800616e:	4649      	mov	r1, r9
 8006170:	4638      	mov	r0, r7
 8006172:	47c0      	blx	r8
 8006174:	3001      	adds	r0, #1
 8006176:	d103      	bne.n	8006180 <_printf_common+0xac>
 8006178:	f04f 30ff 	mov.w	r0, #4294967295
 800617c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006180:	3501      	adds	r5, #1
 8006182:	e7c6      	b.n	8006112 <_printf_common+0x3e>
 8006184:	18e1      	adds	r1, r4, r3
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	2030      	movs	r0, #48	; 0x30
 800618a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800618e:	4422      	add	r2, r4
 8006190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006198:	3302      	adds	r3, #2
 800619a:	e7c7      	b.n	800612c <_printf_common+0x58>
 800619c:	2301      	movs	r3, #1
 800619e:	4622      	mov	r2, r4
 80061a0:	4649      	mov	r1, r9
 80061a2:	4638      	mov	r0, r7
 80061a4:	47c0      	blx	r8
 80061a6:	3001      	adds	r0, #1
 80061a8:	d0e6      	beq.n	8006178 <_printf_common+0xa4>
 80061aa:	3601      	adds	r6, #1
 80061ac:	e7d9      	b.n	8006162 <_printf_common+0x8e>
	...

080061b0 <_printf_i>:
 80061b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b4:	7e0f      	ldrb	r7, [r1, #24]
 80061b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061b8:	2f78      	cmp	r7, #120	; 0x78
 80061ba:	4691      	mov	r9, r2
 80061bc:	4680      	mov	r8, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	469a      	mov	sl, r3
 80061c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061c6:	d807      	bhi.n	80061d8 <_printf_i+0x28>
 80061c8:	2f62      	cmp	r7, #98	; 0x62
 80061ca:	d80a      	bhi.n	80061e2 <_printf_i+0x32>
 80061cc:	2f00      	cmp	r7, #0
 80061ce:	f000 80d8 	beq.w	8006382 <_printf_i+0x1d2>
 80061d2:	2f58      	cmp	r7, #88	; 0x58
 80061d4:	f000 80a3 	beq.w	800631e <_printf_i+0x16e>
 80061d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061e0:	e03a      	b.n	8006258 <_printf_i+0xa8>
 80061e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061e6:	2b15      	cmp	r3, #21
 80061e8:	d8f6      	bhi.n	80061d8 <_printf_i+0x28>
 80061ea:	a101      	add	r1, pc, #4	; (adr r1, 80061f0 <_printf_i+0x40>)
 80061ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f0:	08006249 	.word	0x08006249
 80061f4:	0800625d 	.word	0x0800625d
 80061f8:	080061d9 	.word	0x080061d9
 80061fc:	080061d9 	.word	0x080061d9
 8006200:	080061d9 	.word	0x080061d9
 8006204:	080061d9 	.word	0x080061d9
 8006208:	0800625d 	.word	0x0800625d
 800620c:	080061d9 	.word	0x080061d9
 8006210:	080061d9 	.word	0x080061d9
 8006214:	080061d9 	.word	0x080061d9
 8006218:	080061d9 	.word	0x080061d9
 800621c:	08006369 	.word	0x08006369
 8006220:	0800628d 	.word	0x0800628d
 8006224:	0800634b 	.word	0x0800634b
 8006228:	080061d9 	.word	0x080061d9
 800622c:	080061d9 	.word	0x080061d9
 8006230:	0800638b 	.word	0x0800638b
 8006234:	080061d9 	.word	0x080061d9
 8006238:	0800628d 	.word	0x0800628d
 800623c:	080061d9 	.word	0x080061d9
 8006240:	080061d9 	.word	0x080061d9
 8006244:	08006353 	.word	0x08006353
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	1d1a      	adds	r2, r3, #4
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	602a      	str	r2, [r5, #0]
 8006250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006258:	2301      	movs	r3, #1
 800625a:	e0a3      	b.n	80063a4 <_printf_i+0x1f4>
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	6829      	ldr	r1, [r5, #0]
 8006260:	0606      	lsls	r6, r0, #24
 8006262:	f101 0304 	add.w	r3, r1, #4
 8006266:	d50a      	bpl.n	800627e <_printf_i+0xce>
 8006268:	680e      	ldr	r6, [r1, #0]
 800626a:	602b      	str	r3, [r5, #0]
 800626c:	2e00      	cmp	r6, #0
 800626e:	da03      	bge.n	8006278 <_printf_i+0xc8>
 8006270:	232d      	movs	r3, #45	; 0x2d
 8006272:	4276      	negs	r6, r6
 8006274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006278:	485e      	ldr	r0, [pc, #376]	; (80063f4 <_printf_i+0x244>)
 800627a:	230a      	movs	r3, #10
 800627c:	e019      	b.n	80062b2 <_printf_i+0x102>
 800627e:	680e      	ldr	r6, [r1, #0]
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006286:	bf18      	it	ne
 8006288:	b236      	sxthne	r6, r6
 800628a:	e7ef      	b.n	800626c <_printf_i+0xbc>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	6820      	ldr	r0, [r4, #0]
 8006290:	1d19      	adds	r1, r3, #4
 8006292:	6029      	str	r1, [r5, #0]
 8006294:	0601      	lsls	r1, r0, #24
 8006296:	d501      	bpl.n	800629c <_printf_i+0xec>
 8006298:	681e      	ldr	r6, [r3, #0]
 800629a:	e002      	b.n	80062a2 <_printf_i+0xf2>
 800629c:	0646      	lsls	r6, r0, #25
 800629e:	d5fb      	bpl.n	8006298 <_printf_i+0xe8>
 80062a0:	881e      	ldrh	r6, [r3, #0]
 80062a2:	4854      	ldr	r0, [pc, #336]	; (80063f4 <_printf_i+0x244>)
 80062a4:	2f6f      	cmp	r7, #111	; 0x6f
 80062a6:	bf0c      	ite	eq
 80062a8:	2308      	moveq	r3, #8
 80062aa:	230a      	movne	r3, #10
 80062ac:	2100      	movs	r1, #0
 80062ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062b2:	6865      	ldr	r5, [r4, #4]
 80062b4:	60a5      	str	r5, [r4, #8]
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	bfa2      	ittt	ge
 80062ba:	6821      	ldrge	r1, [r4, #0]
 80062bc:	f021 0104 	bicge.w	r1, r1, #4
 80062c0:	6021      	strge	r1, [r4, #0]
 80062c2:	b90e      	cbnz	r6, 80062c8 <_printf_i+0x118>
 80062c4:	2d00      	cmp	r5, #0
 80062c6:	d04d      	beq.n	8006364 <_printf_i+0x1b4>
 80062c8:	4615      	mov	r5, r2
 80062ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ce:	fb03 6711 	mls	r7, r3, r1, r6
 80062d2:	5dc7      	ldrb	r7, [r0, r7]
 80062d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062d8:	4637      	mov	r7, r6
 80062da:	42bb      	cmp	r3, r7
 80062dc:	460e      	mov	r6, r1
 80062de:	d9f4      	bls.n	80062ca <_printf_i+0x11a>
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d10b      	bne.n	80062fc <_printf_i+0x14c>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	07de      	lsls	r6, r3, #31
 80062e8:	d508      	bpl.n	80062fc <_printf_i+0x14c>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6861      	ldr	r1, [r4, #4]
 80062ee:	4299      	cmp	r1, r3
 80062f0:	bfde      	ittt	le
 80062f2:	2330      	movle	r3, #48	; 0x30
 80062f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062fc:	1b52      	subs	r2, r2, r5
 80062fe:	6122      	str	r2, [r4, #16]
 8006300:	f8cd a000 	str.w	sl, [sp]
 8006304:	464b      	mov	r3, r9
 8006306:	aa03      	add	r2, sp, #12
 8006308:	4621      	mov	r1, r4
 800630a:	4640      	mov	r0, r8
 800630c:	f7ff fee2 	bl	80060d4 <_printf_common>
 8006310:	3001      	adds	r0, #1
 8006312:	d14c      	bne.n	80063ae <_printf_i+0x1fe>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	b004      	add	sp, #16
 800631a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631e:	4835      	ldr	r0, [pc, #212]	; (80063f4 <_printf_i+0x244>)
 8006320:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006324:	6829      	ldr	r1, [r5, #0]
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	f851 6b04 	ldr.w	r6, [r1], #4
 800632c:	6029      	str	r1, [r5, #0]
 800632e:	061d      	lsls	r5, r3, #24
 8006330:	d514      	bpl.n	800635c <_printf_i+0x1ac>
 8006332:	07df      	lsls	r7, r3, #31
 8006334:	bf44      	itt	mi
 8006336:	f043 0320 	orrmi.w	r3, r3, #32
 800633a:	6023      	strmi	r3, [r4, #0]
 800633c:	b91e      	cbnz	r6, 8006346 <_printf_i+0x196>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f023 0320 	bic.w	r3, r3, #32
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	2310      	movs	r3, #16
 8006348:	e7b0      	b.n	80062ac <_printf_i+0xfc>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f043 0320 	orr.w	r3, r3, #32
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	2378      	movs	r3, #120	; 0x78
 8006354:	4828      	ldr	r0, [pc, #160]	; (80063f8 <_printf_i+0x248>)
 8006356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800635a:	e7e3      	b.n	8006324 <_printf_i+0x174>
 800635c:	0659      	lsls	r1, r3, #25
 800635e:	bf48      	it	mi
 8006360:	b2b6      	uxthmi	r6, r6
 8006362:	e7e6      	b.n	8006332 <_printf_i+0x182>
 8006364:	4615      	mov	r5, r2
 8006366:	e7bb      	b.n	80062e0 <_printf_i+0x130>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	6826      	ldr	r6, [r4, #0]
 800636c:	6961      	ldr	r1, [r4, #20]
 800636e:	1d18      	adds	r0, r3, #4
 8006370:	6028      	str	r0, [r5, #0]
 8006372:	0635      	lsls	r5, r6, #24
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	d501      	bpl.n	800637c <_printf_i+0x1cc>
 8006378:	6019      	str	r1, [r3, #0]
 800637a:	e002      	b.n	8006382 <_printf_i+0x1d2>
 800637c:	0670      	lsls	r0, r6, #25
 800637e:	d5fb      	bpl.n	8006378 <_printf_i+0x1c8>
 8006380:	8019      	strh	r1, [r3, #0]
 8006382:	2300      	movs	r3, #0
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	4615      	mov	r5, r2
 8006388:	e7ba      	b.n	8006300 <_printf_i+0x150>
 800638a:	682b      	ldr	r3, [r5, #0]
 800638c:	1d1a      	adds	r2, r3, #4
 800638e:	602a      	str	r2, [r5, #0]
 8006390:	681d      	ldr	r5, [r3, #0]
 8006392:	6862      	ldr	r2, [r4, #4]
 8006394:	2100      	movs	r1, #0
 8006396:	4628      	mov	r0, r5
 8006398:	f7f9 ff22 	bl	80001e0 <memchr>
 800639c:	b108      	cbz	r0, 80063a2 <_printf_i+0x1f2>
 800639e:	1b40      	subs	r0, r0, r5
 80063a0:	6060      	str	r0, [r4, #4]
 80063a2:	6863      	ldr	r3, [r4, #4]
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	2300      	movs	r3, #0
 80063a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ac:	e7a8      	b.n	8006300 <_printf_i+0x150>
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	462a      	mov	r2, r5
 80063b2:	4649      	mov	r1, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	47d0      	blx	sl
 80063b8:	3001      	adds	r0, #1
 80063ba:	d0ab      	beq.n	8006314 <_printf_i+0x164>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	079b      	lsls	r3, r3, #30
 80063c0:	d413      	bmi.n	80063ea <_printf_i+0x23a>
 80063c2:	68e0      	ldr	r0, [r4, #12]
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	4298      	cmp	r0, r3
 80063c8:	bfb8      	it	lt
 80063ca:	4618      	movlt	r0, r3
 80063cc:	e7a4      	b.n	8006318 <_printf_i+0x168>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4632      	mov	r2, r6
 80063d2:	4649      	mov	r1, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	47d0      	blx	sl
 80063d8:	3001      	adds	r0, #1
 80063da:	d09b      	beq.n	8006314 <_printf_i+0x164>
 80063dc:	3501      	adds	r5, #1
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	9903      	ldr	r1, [sp, #12]
 80063e2:	1a5b      	subs	r3, r3, r1
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	dcf2      	bgt.n	80063ce <_printf_i+0x21e>
 80063e8:	e7eb      	b.n	80063c2 <_printf_i+0x212>
 80063ea:	2500      	movs	r5, #0
 80063ec:	f104 0619 	add.w	r6, r4, #25
 80063f0:	e7f5      	b.n	80063de <_printf_i+0x22e>
 80063f2:	bf00      	nop
 80063f4:	08006de3 	.word	0x08006de3
 80063f8:	08006df4 	.word	0x08006df4

080063fc <_sbrk_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	; (8006418 <_sbrk_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f000 fc3e 	bl	8006c88 <_sbrk>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_sbrk_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_sbrk_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20013730 	.word	0x20013730

0800641c <__swbuf_r>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	460e      	mov	r6, r1
 8006420:	4614      	mov	r4, r2
 8006422:	4605      	mov	r5, r0
 8006424:	b118      	cbz	r0, 800642e <__swbuf_r+0x12>
 8006426:	6983      	ldr	r3, [r0, #24]
 8006428:	b90b      	cbnz	r3, 800642e <__swbuf_r+0x12>
 800642a:	f000 f9d9 	bl	80067e0 <__sinit>
 800642e:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <__swbuf_r+0x98>)
 8006430:	429c      	cmp	r4, r3
 8006432:	d12b      	bne.n	800648c <__swbuf_r+0x70>
 8006434:	686c      	ldr	r4, [r5, #4]
 8006436:	69a3      	ldr	r3, [r4, #24]
 8006438:	60a3      	str	r3, [r4, #8]
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	071a      	lsls	r2, r3, #28
 800643e:	d52f      	bpl.n	80064a0 <__swbuf_r+0x84>
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	b36b      	cbz	r3, 80064a0 <__swbuf_r+0x84>
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	1ac0      	subs	r0, r0, r3
 800644a:	6963      	ldr	r3, [r4, #20]
 800644c:	b2f6      	uxtb	r6, r6
 800644e:	4283      	cmp	r3, r0
 8006450:	4637      	mov	r7, r6
 8006452:	dc04      	bgt.n	800645e <__swbuf_r+0x42>
 8006454:	4621      	mov	r1, r4
 8006456:	4628      	mov	r0, r5
 8006458:	f000 f92e 	bl	80066b8 <_fflush_r>
 800645c:	bb30      	cbnz	r0, 80064ac <__swbuf_r+0x90>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	3b01      	subs	r3, #1
 8006462:	60a3      	str	r3, [r4, #8]
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	6022      	str	r2, [r4, #0]
 800646a:	701e      	strb	r6, [r3, #0]
 800646c:	6963      	ldr	r3, [r4, #20]
 800646e:	3001      	adds	r0, #1
 8006470:	4283      	cmp	r3, r0
 8006472:	d004      	beq.n	800647e <__swbuf_r+0x62>
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	07db      	lsls	r3, r3, #31
 8006478:	d506      	bpl.n	8006488 <__swbuf_r+0x6c>
 800647a:	2e0a      	cmp	r6, #10
 800647c:	d104      	bne.n	8006488 <__swbuf_r+0x6c>
 800647e:	4621      	mov	r1, r4
 8006480:	4628      	mov	r0, r5
 8006482:	f000 f919 	bl	80066b8 <_fflush_r>
 8006486:	b988      	cbnz	r0, 80064ac <__swbuf_r+0x90>
 8006488:	4638      	mov	r0, r7
 800648a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <__swbuf_r+0x9c>)
 800648e:	429c      	cmp	r4, r3
 8006490:	d101      	bne.n	8006496 <__swbuf_r+0x7a>
 8006492:	68ac      	ldr	r4, [r5, #8]
 8006494:	e7cf      	b.n	8006436 <__swbuf_r+0x1a>
 8006496:	4b09      	ldr	r3, [pc, #36]	; (80064bc <__swbuf_r+0xa0>)
 8006498:	429c      	cmp	r4, r3
 800649a:	bf08      	it	eq
 800649c:	68ec      	ldreq	r4, [r5, #12]
 800649e:	e7ca      	b.n	8006436 <__swbuf_r+0x1a>
 80064a0:	4621      	mov	r1, r4
 80064a2:	4628      	mov	r0, r5
 80064a4:	f000 f80c 	bl	80064c0 <__swsetup_r>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d0cb      	beq.n	8006444 <__swbuf_r+0x28>
 80064ac:	f04f 37ff 	mov.w	r7, #4294967295
 80064b0:	e7ea      	b.n	8006488 <__swbuf_r+0x6c>
 80064b2:	bf00      	nop
 80064b4:	08006e28 	.word	0x08006e28
 80064b8:	08006e48 	.word	0x08006e48
 80064bc:	08006e08 	.word	0x08006e08

080064c0 <__swsetup_r>:
 80064c0:	4b32      	ldr	r3, [pc, #200]	; (800658c <__swsetup_r+0xcc>)
 80064c2:	b570      	push	{r4, r5, r6, lr}
 80064c4:	681d      	ldr	r5, [r3, #0]
 80064c6:	4606      	mov	r6, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	b125      	cbz	r5, 80064d6 <__swsetup_r+0x16>
 80064cc:	69ab      	ldr	r3, [r5, #24]
 80064ce:	b913      	cbnz	r3, 80064d6 <__swsetup_r+0x16>
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 f985 	bl	80067e0 <__sinit>
 80064d6:	4b2e      	ldr	r3, [pc, #184]	; (8006590 <__swsetup_r+0xd0>)
 80064d8:	429c      	cmp	r4, r3
 80064da:	d10f      	bne.n	80064fc <__swsetup_r+0x3c>
 80064dc:	686c      	ldr	r4, [r5, #4]
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064e4:	0719      	lsls	r1, r3, #28
 80064e6:	d42c      	bmi.n	8006542 <__swsetup_r+0x82>
 80064e8:	06dd      	lsls	r5, r3, #27
 80064ea:	d411      	bmi.n	8006510 <__swsetup_r+0x50>
 80064ec:	2309      	movs	r3, #9
 80064ee:	6033      	str	r3, [r6, #0]
 80064f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064f4:	81a3      	strh	r3, [r4, #12]
 80064f6:	f04f 30ff 	mov.w	r0, #4294967295
 80064fa:	e03e      	b.n	800657a <__swsetup_r+0xba>
 80064fc:	4b25      	ldr	r3, [pc, #148]	; (8006594 <__swsetup_r+0xd4>)
 80064fe:	429c      	cmp	r4, r3
 8006500:	d101      	bne.n	8006506 <__swsetup_r+0x46>
 8006502:	68ac      	ldr	r4, [r5, #8]
 8006504:	e7eb      	b.n	80064de <__swsetup_r+0x1e>
 8006506:	4b24      	ldr	r3, [pc, #144]	; (8006598 <__swsetup_r+0xd8>)
 8006508:	429c      	cmp	r4, r3
 800650a:	bf08      	it	eq
 800650c:	68ec      	ldreq	r4, [r5, #12]
 800650e:	e7e6      	b.n	80064de <__swsetup_r+0x1e>
 8006510:	0758      	lsls	r0, r3, #29
 8006512:	d512      	bpl.n	800653a <__swsetup_r+0x7a>
 8006514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006516:	b141      	cbz	r1, 800652a <__swsetup_r+0x6a>
 8006518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800651c:	4299      	cmp	r1, r3
 800651e:	d002      	beq.n	8006526 <__swsetup_r+0x66>
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff fa41 	bl	80059a8 <_free_r>
 8006526:	2300      	movs	r3, #0
 8006528:	6363      	str	r3, [r4, #52]	; 0x34
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006530:	81a3      	strh	r3, [r4, #12]
 8006532:	2300      	movs	r3, #0
 8006534:	6063      	str	r3, [r4, #4]
 8006536:	6923      	ldr	r3, [r4, #16]
 8006538:	6023      	str	r3, [r4, #0]
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	f043 0308 	orr.w	r3, r3, #8
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	b94b      	cbnz	r3, 800655a <__swsetup_r+0x9a>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800654c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006550:	d003      	beq.n	800655a <__swsetup_r+0x9a>
 8006552:	4621      	mov	r1, r4
 8006554:	4630      	mov	r0, r6
 8006556:	f000 fa09 	bl	800696c <__smakebuf_r>
 800655a:	89a0      	ldrh	r0, [r4, #12]
 800655c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006560:	f010 0301 	ands.w	r3, r0, #1
 8006564:	d00a      	beq.n	800657c <__swsetup_r+0xbc>
 8006566:	2300      	movs	r3, #0
 8006568:	60a3      	str	r3, [r4, #8]
 800656a:	6963      	ldr	r3, [r4, #20]
 800656c:	425b      	negs	r3, r3
 800656e:	61a3      	str	r3, [r4, #24]
 8006570:	6923      	ldr	r3, [r4, #16]
 8006572:	b943      	cbnz	r3, 8006586 <__swsetup_r+0xc6>
 8006574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006578:	d1ba      	bne.n	80064f0 <__swsetup_r+0x30>
 800657a:	bd70      	pop	{r4, r5, r6, pc}
 800657c:	0781      	lsls	r1, r0, #30
 800657e:	bf58      	it	pl
 8006580:	6963      	ldrpl	r3, [r4, #20]
 8006582:	60a3      	str	r3, [r4, #8]
 8006584:	e7f4      	b.n	8006570 <__swsetup_r+0xb0>
 8006586:	2000      	movs	r0, #0
 8006588:	e7f7      	b.n	800657a <__swsetup_r+0xba>
 800658a:	bf00      	nop
 800658c:	20000010 	.word	0x20000010
 8006590:	08006e28 	.word	0x08006e28
 8006594:	08006e48 	.word	0x08006e48
 8006598:	08006e08 	.word	0x08006e08

0800659c <abort>:
 800659c:	b508      	push	{r3, lr}
 800659e:	2006      	movs	r0, #6
 80065a0:	f000 faa2 	bl	8006ae8 <raise>
 80065a4:	2001      	movs	r0, #1
 80065a6:	f7fa f9df 	bl	8000968 <_exit>
	...

080065ac <__sflush_r>:
 80065ac:	898a      	ldrh	r2, [r1, #12]
 80065ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	4605      	mov	r5, r0
 80065b4:	0710      	lsls	r0, r2, #28
 80065b6:	460c      	mov	r4, r1
 80065b8:	d458      	bmi.n	800666c <__sflush_r+0xc0>
 80065ba:	684b      	ldr	r3, [r1, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	dc05      	bgt.n	80065cc <__sflush_r+0x20>
 80065c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dc02      	bgt.n	80065cc <__sflush_r+0x20>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065ce:	2e00      	cmp	r6, #0
 80065d0:	d0f9      	beq.n	80065c6 <__sflush_r+0x1a>
 80065d2:	2300      	movs	r3, #0
 80065d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065d8:	682f      	ldr	r7, [r5, #0]
 80065da:	602b      	str	r3, [r5, #0]
 80065dc:	d032      	beq.n	8006644 <__sflush_r+0x98>
 80065de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	075a      	lsls	r2, r3, #29
 80065e4:	d505      	bpl.n	80065f2 <__sflush_r+0x46>
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	1ac0      	subs	r0, r0, r3
 80065ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065ec:	b10b      	cbz	r3, 80065f2 <__sflush_r+0x46>
 80065ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065f0:	1ac0      	subs	r0, r0, r3
 80065f2:	2300      	movs	r3, #0
 80065f4:	4602      	mov	r2, r0
 80065f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065f8:	6a21      	ldr	r1, [r4, #32]
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b0      	blx	r6
 80065fe:	1c43      	adds	r3, r0, #1
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	d106      	bne.n	8006612 <__sflush_r+0x66>
 8006604:	6829      	ldr	r1, [r5, #0]
 8006606:	291d      	cmp	r1, #29
 8006608:	d82c      	bhi.n	8006664 <__sflush_r+0xb8>
 800660a:	4a2a      	ldr	r2, [pc, #168]	; (80066b4 <__sflush_r+0x108>)
 800660c:	40ca      	lsrs	r2, r1
 800660e:	07d6      	lsls	r6, r2, #31
 8006610:	d528      	bpl.n	8006664 <__sflush_r+0xb8>
 8006612:	2200      	movs	r2, #0
 8006614:	6062      	str	r2, [r4, #4]
 8006616:	04d9      	lsls	r1, r3, #19
 8006618:	6922      	ldr	r2, [r4, #16]
 800661a:	6022      	str	r2, [r4, #0]
 800661c:	d504      	bpl.n	8006628 <__sflush_r+0x7c>
 800661e:	1c42      	adds	r2, r0, #1
 8006620:	d101      	bne.n	8006626 <__sflush_r+0x7a>
 8006622:	682b      	ldr	r3, [r5, #0]
 8006624:	b903      	cbnz	r3, 8006628 <__sflush_r+0x7c>
 8006626:	6560      	str	r0, [r4, #84]	; 0x54
 8006628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800662a:	602f      	str	r7, [r5, #0]
 800662c:	2900      	cmp	r1, #0
 800662e:	d0ca      	beq.n	80065c6 <__sflush_r+0x1a>
 8006630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006634:	4299      	cmp	r1, r3
 8006636:	d002      	beq.n	800663e <__sflush_r+0x92>
 8006638:	4628      	mov	r0, r5
 800663a:	f7ff f9b5 	bl	80059a8 <_free_r>
 800663e:	2000      	movs	r0, #0
 8006640:	6360      	str	r0, [r4, #52]	; 0x34
 8006642:	e7c1      	b.n	80065c8 <__sflush_r+0x1c>
 8006644:	6a21      	ldr	r1, [r4, #32]
 8006646:	2301      	movs	r3, #1
 8006648:	4628      	mov	r0, r5
 800664a:	47b0      	blx	r6
 800664c:	1c41      	adds	r1, r0, #1
 800664e:	d1c7      	bne.n	80065e0 <__sflush_r+0x34>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0c4      	beq.n	80065e0 <__sflush_r+0x34>
 8006656:	2b1d      	cmp	r3, #29
 8006658:	d001      	beq.n	800665e <__sflush_r+0xb2>
 800665a:	2b16      	cmp	r3, #22
 800665c:	d101      	bne.n	8006662 <__sflush_r+0xb6>
 800665e:	602f      	str	r7, [r5, #0]
 8006660:	e7b1      	b.n	80065c6 <__sflush_r+0x1a>
 8006662:	89a3      	ldrh	r3, [r4, #12]
 8006664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	e7ad      	b.n	80065c8 <__sflush_r+0x1c>
 800666c:	690f      	ldr	r7, [r1, #16]
 800666e:	2f00      	cmp	r7, #0
 8006670:	d0a9      	beq.n	80065c6 <__sflush_r+0x1a>
 8006672:	0793      	lsls	r3, r2, #30
 8006674:	680e      	ldr	r6, [r1, #0]
 8006676:	bf08      	it	eq
 8006678:	694b      	ldreq	r3, [r1, #20]
 800667a:	600f      	str	r7, [r1, #0]
 800667c:	bf18      	it	ne
 800667e:	2300      	movne	r3, #0
 8006680:	eba6 0807 	sub.w	r8, r6, r7
 8006684:	608b      	str	r3, [r1, #8]
 8006686:	f1b8 0f00 	cmp.w	r8, #0
 800668a:	dd9c      	ble.n	80065c6 <__sflush_r+0x1a>
 800668c:	6a21      	ldr	r1, [r4, #32]
 800668e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006690:	4643      	mov	r3, r8
 8006692:	463a      	mov	r2, r7
 8006694:	4628      	mov	r0, r5
 8006696:	47b0      	blx	r6
 8006698:	2800      	cmp	r0, #0
 800669a:	dc06      	bgt.n	80066aa <__sflush_r+0xfe>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	e78e      	b.n	80065c8 <__sflush_r+0x1c>
 80066aa:	4407      	add	r7, r0
 80066ac:	eba8 0800 	sub.w	r8, r8, r0
 80066b0:	e7e9      	b.n	8006686 <__sflush_r+0xda>
 80066b2:	bf00      	nop
 80066b4:	20400001 	.word	0x20400001

080066b8 <_fflush_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	690b      	ldr	r3, [r1, #16]
 80066bc:	4605      	mov	r5, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	b913      	cbnz	r3, 80066c8 <_fflush_r+0x10>
 80066c2:	2500      	movs	r5, #0
 80066c4:	4628      	mov	r0, r5
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	b118      	cbz	r0, 80066d2 <_fflush_r+0x1a>
 80066ca:	6983      	ldr	r3, [r0, #24]
 80066cc:	b90b      	cbnz	r3, 80066d2 <_fflush_r+0x1a>
 80066ce:	f000 f887 	bl	80067e0 <__sinit>
 80066d2:	4b14      	ldr	r3, [pc, #80]	; (8006724 <_fflush_r+0x6c>)
 80066d4:	429c      	cmp	r4, r3
 80066d6:	d11b      	bne.n	8006710 <_fflush_r+0x58>
 80066d8:	686c      	ldr	r4, [r5, #4]
 80066da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0ef      	beq.n	80066c2 <_fflush_r+0xa>
 80066e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066e4:	07d0      	lsls	r0, r2, #31
 80066e6:	d404      	bmi.n	80066f2 <_fflush_r+0x3a>
 80066e8:	0599      	lsls	r1, r3, #22
 80066ea:	d402      	bmi.n	80066f2 <_fflush_r+0x3a>
 80066ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ee:	f000 f915 	bl	800691c <__retarget_lock_acquire_recursive>
 80066f2:	4628      	mov	r0, r5
 80066f4:	4621      	mov	r1, r4
 80066f6:	f7ff ff59 	bl	80065ac <__sflush_r>
 80066fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066fc:	07da      	lsls	r2, r3, #31
 80066fe:	4605      	mov	r5, r0
 8006700:	d4e0      	bmi.n	80066c4 <_fflush_r+0xc>
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	059b      	lsls	r3, r3, #22
 8006706:	d4dd      	bmi.n	80066c4 <_fflush_r+0xc>
 8006708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800670a:	f000 f908 	bl	800691e <__retarget_lock_release_recursive>
 800670e:	e7d9      	b.n	80066c4 <_fflush_r+0xc>
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <_fflush_r+0x70>)
 8006712:	429c      	cmp	r4, r3
 8006714:	d101      	bne.n	800671a <_fflush_r+0x62>
 8006716:	68ac      	ldr	r4, [r5, #8]
 8006718:	e7df      	b.n	80066da <_fflush_r+0x22>
 800671a:	4b04      	ldr	r3, [pc, #16]	; (800672c <_fflush_r+0x74>)
 800671c:	429c      	cmp	r4, r3
 800671e:	bf08      	it	eq
 8006720:	68ec      	ldreq	r4, [r5, #12]
 8006722:	e7da      	b.n	80066da <_fflush_r+0x22>
 8006724:	08006e28 	.word	0x08006e28
 8006728:	08006e48 	.word	0x08006e48
 800672c:	08006e08 	.word	0x08006e08

08006730 <std>:
 8006730:	2300      	movs	r3, #0
 8006732:	b510      	push	{r4, lr}
 8006734:	4604      	mov	r4, r0
 8006736:	e9c0 3300 	strd	r3, r3, [r0]
 800673a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800673e:	6083      	str	r3, [r0, #8]
 8006740:	8181      	strh	r1, [r0, #12]
 8006742:	6643      	str	r3, [r0, #100]	; 0x64
 8006744:	81c2      	strh	r2, [r0, #14]
 8006746:	6183      	str	r3, [r0, #24]
 8006748:	4619      	mov	r1, r3
 800674a:	2208      	movs	r2, #8
 800674c:	305c      	adds	r0, #92	; 0x5c
 800674e:	f7ff f85f 	bl	8005810 <memset>
 8006752:	4b05      	ldr	r3, [pc, #20]	; (8006768 <std+0x38>)
 8006754:	6263      	str	r3, [r4, #36]	; 0x24
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <std+0x3c>)
 8006758:	62a3      	str	r3, [r4, #40]	; 0x28
 800675a:	4b05      	ldr	r3, [pc, #20]	; (8006770 <std+0x40>)
 800675c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <std+0x44>)
 8006760:	6224      	str	r4, [r4, #32]
 8006762:	6323      	str	r3, [r4, #48]	; 0x30
 8006764:	bd10      	pop	{r4, pc}
 8006766:	bf00      	nop
 8006768:	08006b21 	.word	0x08006b21
 800676c:	08006b43 	.word	0x08006b43
 8006770:	08006b7b 	.word	0x08006b7b
 8006774:	08006b9f 	.word	0x08006b9f

08006778 <_cleanup_r>:
 8006778:	4901      	ldr	r1, [pc, #4]	; (8006780 <_cleanup_r+0x8>)
 800677a:	f000 b8af 	b.w	80068dc <_fwalk_reent>
 800677e:	bf00      	nop
 8006780:	080066b9 	.word	0x080066b9

08006784 <__sfmoreglue>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	2268      	movs	r2, #104	; 0x68
 8006788:	1e4d      	subs	r5, r1, #1
 800678a:	4355      	muls	r5, r2
 800678c:	460e      	mov	r6, r1
 800678e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006792:	f7ff f975 	bl	8005a80 <_malloc_r>
 8006796:	4604      	mov	r4, r0
 8006798:	b140      	cbz	r0, 80067ac <__sfmoreglue+0x28>
 800679a:	2100      	movs	r1, #0
 800679c:	e9c0 1600 	strd	r1, r6, [r0]
 80067a0:	300c      	adds	r0, #12
 80067a2:	60a0      	str	r0, [r4, #8]
 80067a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067a8:	f7ff f832 	bl	8005810 <memset>
 80067ac:	4620      	mov	r0, r4
 80067ae:	bd70      	pop	{r4, r5, r6, pc}

080067b0 <__sfp_lock_acquire>:
 80067b0:	4801      	ldr	r0, [pc, #4]	; (80067b8 <__sfp_lock_acquire+0x8>)
 80067b2:	f000 b8b3 	b.w	800691c <__retarget_lock_acquire_recursive>
 80067b6:	bf00      	nop
 80067b8:	2001372d 	.word	0x2001372d

080067bc <__sfp_lock_release>:
 80067bc:	4801      	ldr	r0, [pc, #4]	; (80067c4 <__sfp_lock_release+0x8>)
 80067be:	f000 b8ae 	b.w	800691e <__retarget_lock_release_recursive>
 80067c2:	bf00      	nop
 80067c4:	2001372d 	.word	0x2001372d

080067c8 <__sinit_lock_acquire>:
 80067c8:	4801      	ldr	r0, [pc, #4]	; (80067d0 <__sinit_lock_acquire+0x8>)
 80067ca:	f000 b8a7 	b.w	800691c <__retarget_lock_acquire_recursive>
 80067ce:	bf00      	nop
 80067d0:	2001372e 	.word	0x2001372e

080067d4 <__sinit_lock_release>:
 80067d4:	4801      	ldr	r0, [pc, #4]	; (80067dc <__sinit_lock_release+0x8>)
 80067d6:	f000 b8a2 	b.w	800691e <__retarget_lock_release_recursive>
 80067da:	bf00      	nop
 80067dc:	2001372e 	.word	0x2001372e

080067e0 <__sinit>:
 80067e0:	b510      	push	{r4, lr}
 80067e2:	4604      	mov	r4, r0
 80067e4:	f7ff fff0 	bl	80067c8 <__sinit_lock_acquire>
 80067e8:	69a3      	ldr	r3, [r4, #24]
 80067ea:	b11b      	cbz	r3, 80067f4 <__sinit+0x14>
 80067ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f0:	f7ff bff0 	b.w	80067d4 <__sinit_lock_release>
 80067f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80067f8:	6523      	str	r3, [r4, #80]	; 0x50
 80067fa:	4b13      	ldr	r3, [pc, #76]	; (8006848 <__sinit+0x68>)
 80067fc:	4a13      	ldr	r2, [pc, #76]	; (800684c <__sinit+0x6c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	62a2      	str	r2, [r4, #40]	; 0x28
 8006802:	42a3      	cmp	r3, r4
 8006804:	bf04      	itt	eq
 8006806:	2301      	moveq	r3, #1
 8006808:	61a3      	streq	r3, [r4, #24]
 800680a:	4620      	mov	r0, r4
 800680c:	f000 f820 	bl	8006850 <__sfp>
 8006810:	6060      	str	r0, [r4, #4]
 8006812:	4620      	mov	r0, r4
 8006814:	f000 f81c 	bl	8006850 <__sfp>
 8006818:	60a0      	str	r0, [r4, #8]
 800681a:	4620      	mov	r0, r4
 800681c:	f000 f818 	bl	8006850 <__sfp>
 8006820:	2200      	movs	r2, #0
 8006822:	60e0      	str	r0, [r4, #12]
 8006824:	2104      	movs	r1, #4
 8006826:	6860      	ldr	r0, [r4, #4]
 8006828:	f7ff ff82 	bl	8006730 <std>
 800682c:	68a0      	ldr	r0, [r4, #8]
 800682e:	2201      	movs	r2, #1
 8006830:	2109      	movs	r1, #9
 8006832:	f7ff ff7d 	bl	8006730 <std>
 8006836:	68e0      	ldr	r0, [r4, #12]
 8006838:	2202      	movs	r2, #2
 800683a:	2112      	movs	r1, #18
 800683c:	f7ff ff78 	bl	8006730 <std>
 8006840:	2301      	movs	r3, #1
 8006842:	61a3      	str	r3, [r4, #24]
 8006844:	e7d2      	b.n	80067ec <__sinit+0xc>
 8006846:	bf00      	nop
 8006848:	08006d20 	.word	0x08006d20
 800684c:	08006779 	.word	0x08006779

08006850 <__sfp>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	4607      	mov	r7, r0
 8006854:	f7ff ffac 	bl	80067b0 <__sfp_lock_acquire>
 8006858:	4b1e      	ldr	r3, [pc, #120]	; (80068d4 <__sfp+0x84>)
 800685a:	681e      	ldr	r6, [r3, #0]
 800685c:	69b3      	ldr	r3, [r6, #24]
 800685e:	b913      	cbnz	r3, 8006866 <__sfp+0x16>
 8006860:	4630      	mov	r0, r6
 8006862:	f7ff ffbd 	bl	80067e0 <__sinit>
 8006866:	3648      	adds	r6, #72	; 0x48
 8006868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800686c:	3b01      	subs	r3, #1
 800686e:	d503      	bpl.n	8006878 <__sfp+0x28>
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	b30b      	cbz	r3, 80068b8 <__sfp+0x68>
 8006874:	6836      	ldr	r6, [r6, #0]
 8006876:	e7f7      	b.n	8006868 <__sfp+0x18>
 8006878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800687c:	b9d5      	cbnz	r5, 80068b4 <__sfp+0x64>
 800687e:	4b16      	ldr	r3, [pc, #88]	; (80068d8 <__sfp+0x88>)
 8006880:	60e3      	str	r3, [r4, #12]
 8006882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006886:	6665      	str	r5, [r4, #100]	; 0x64
 8006888:	f000 f847 	bl	800691a <__retarget_lock_init_recursive>
 800688c:	f7ff ff96 	bl	80067bc <__sfp_lock_release>
 8006890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006898:	6025      	str	r5, [r4, #0]
 800689a:	61a5      	str	r5, [r4, #24]
 800689c:	2208      	movs	r2, #8
 800689e:	4629      	mov	r1, r5
 80068a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068a4:	f7fe ffb4 	bl	8005810 <memset>
 80068a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068b0:	4620      	mov	r0, r4
 80068b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b4:	3468      	adds	r4, #104	; 0x68
 80068b6:	e7d9      	b.n	800686c <__sfp+0x1c>
 80068b8:	2104      	movs	r1, #4
 80068ba:	4638      	mov	r0, r7
 80068bc:	f7ff ff62 	bl	8006784 <__sfmoreglue>
 80068c0:	4604      	mov	r4, r0
 80068c2:	6030      	str	r0, [r6, #0]
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d1d5      	bne.n	8006874 <__sfp+0x24>
 80068c8:	f7ff ff78 	bl	80067bc <__sfp_lock_release>
 80068cc:	230c      	movs	r3, #12
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	e7ee      	b.n	80068b0 <__sfp+0x60>
 80068d2:	bf00      	nop
 80068d4:	08006d20 	.word	0x08006d20
 80068d8:	ffff0001 	.word	0xffff0001

080068dc <_fwalk_reent>:
 80068dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e0:	4606      	mov	r6, r0
 80068e2:	4688      	mov	r8, r1
 80068e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068e8:	2700      	movs	r7, #0
 80068ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068ee:	f1b9 0901 	subs.w	r9, r9, #1
 80068f2:	d505      	bpl.n	8006900 <_fwalk_reent+0x24>
 80068f4:	6824      	ldr	r4, [r4, #0]
 80068f6:	2c00      	cmp	r4, #0
 80068f8:	d1f7      	bne.n	80068ea <_fwalk_reent+0xe>
 80068fa:	4638      	mov	r0, r7
 80068fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006900:	89ab      	ldrh	r3, [r5, #12]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d907      	bls.n	8006916 <_fwalk_reent+0x3a>
 8006906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800690a:	3301      	adds	r3, #1
 800690c:	d003      	beq.n	8006916 <_fwalk_reent+0x3a>
 800690e:	4629      	mov	r1, r5
 8006910:	4630      	mov	r0, r6
 8006912:	47c0      	blx	r8
 8006914:	4307      	orrs	r7, r0
 8006916:	3568      	adds	r5, #104	; 0x68
 8006918:	e7e9      	b.n	80068ee <_fwalk_reent+0x12>

0800691a <__retarget_lock_init_recursive>:
 800691a:	4770      	bx	lr

0800691c <__retarget_lock_acquire_recursive>:
 800691c:	4770      	bx	lr

0800691e <__retarget_lock_release_recursive>:
 800691e:	4770      	bx	lr

08006920 <__swhatbuf_r>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	460e      	mov	r6, r1
 8006924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006928:	2900      	cmp	r1, #0
 800692a:	b096      	sub	sp, #88	; 0x58
 800692c:	4614      	mov	r4, r2
 800692e:	461d      	mov	r5, r3
 8006930:	da08      	bge.n	8006944 <__swhatbuf_r+0x24>
 8006932:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	602a      	str	r2, [r5, #0]
 800693a:	061a      	lsls	r2, r3, #24
 800693c:	d410      	bmi.n	8006960 <__swhatbuf_r+0x40>
 800693e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006942:	e00e      	b.n	8006962 <__swhatbuf_r+0x42>
 8006944:	466a      	mov	r2, sp
 8006946:	f000 f951 	bl	8006bec <_fstat_r>
 800694a:	2800      	cmp	r0, #0
 800694c:	dbf1      	blt.n	8006932 <__swhatbuf_r+0x12>
 800694e:	9a01      	ldr	r2, [sp, #4]
 8006950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006958:	425a      	negs	r2, r3
 800695a:	415a      	adcs	r2, r3
 800695c:	602a      	str	r2, [r5, #0]
 800695e:	e7ee      	b.n	800693e <__swhatbuf_r+0x1e>
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	2000      	movs	r0, #0
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	b016      	add	sp, #88	; 0x58
 8006968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800696c <__smakebuf_r>:
 800696c:	898b      	ldrh	r3, [r1, #12]
 800696e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006970:	079d      	lsls	r5, r3, #30
 8006972:	4606      	mov	r6, r0
 8006974:	460c      	mov	r4, r1
 8006976:	d507      	bpl.n	8006988 <__smakebuf_r+0x1c>
 8006978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	6123      	str	r3, [r4, #16]
 8006980:	2301      	movs	r3, #1
 8006982:	6163      	str	r3, [r4, #20]
 8006984:	b002      	add	sp, #8
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	ab01      	add	r3, sp, #4
 800698a:	466a      	mov	r2, sp
 800698c:	f7ff ffc8 	bl	8006920 <__swhatbuf_r>
 8006990:	9900      	ldr	r1, [sp, #0]
 8006992:	4605      	mov	r5, r0
 8006994:	4630      	mov	r0, r6
 8006996:	f7ff f873 	bl	8005a80 <_malloc_r>
 800699a:	b948      	cbnz	r0, 80069b0 <__smakebuf_r+0x44>
 800699c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a0:	059a      	lsls	r2, r3, #22
 80069a2:	d4ef      	bmi.n	8006984 <__smakebuf_r+0x18>
 80069a4:	f023 0303 	bic.w	r3, r3, #3
 80069a8:	f043 0302 	orr.w	r3, r3, #2
 80069ac:	81a3      	strh	r3, [r4, #12]
 80069ae:	e7e3      	b.n	8006978 <__smakebuf_r+0xc>
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <__smakebuf_r+0x7c>)
 80069b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	6020      	str	r0, [r4, #0]
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	9b00      	ldr	r3, [sp, #0]
 80069c0:	6163      	str	r3, [r4, #20]
 80069c2:	9b01      	ldr	r3, [sp, #4]
 80069c4:	6120      	str	r0, [r4, #16]
 80069c6:	b15b      	cbz	r3, 80069e0 <__smakebuf_r+0x74>
 80069c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069cc:	4630      	mov	r0, r6
 80069ce:	f000 f91f 	bl	8006c10 <_isatty_r>
 80069d2:	b128      	cbz	r0, 80069e0 <__smakebuf_r+0x74>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f023 0303 	bic.w	r3, r3, #3
 80069da:	f043 0301 	orr.w	r3, r3, #1
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	89a0      	ldrh	r0, [r4, #12]
 80069e2:	4305      	orrs	r5, r0
 80069e4:	81a5      	strh	r5, [r4, #12]
 80069e6:	e7cd      	b.n	8006984 <__smakebuf_r+0x18>
 80069e8:	08006779 	.word	0x08006779

080069ec <memmove>:
 80069ec:	4288      	cmp	r0, r1
 80069ee:	b510      	push	{r4, lr}
 80069f0:	eb01 0402 	add.w	r4, r1, r2
 80069f4:	d902      	bls.n	80069fc <memmove+0x10>
 80069f6:	4284      	cmp	r4, r0
 80069f8:	4623      	mov	r3, r4
 80069fa:	d807      	bhi.n	8006a0c <memmove+0x20>
 80069fc:	1e43      	subs	r3, r0, #1
 80069fe:	42a1      	cmp	r1, r4
 8006a00:	d008      	beq.n	8006a14 <memmove+0x28>
 8006a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a0a:	e7f8      	b.n	80069fe <memmove+0x12>
 8006a0c:	4402      	add	r2, r0
 8006a0e:	4601      	mov	r1, r0
 8006a10:	428a      	cmp	r2, r1
 8006a12:	d100      	bne.n	8006a16 <memmove+0x2a>
 8006a14:	bd10      	pop	{r4, pc}
 8006a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a1e:	e7f7      	b.n	8006a10 <memmove+0x24>

08006a20 <__malloc_lock>:
 8006a20:	4801      	ldr	r0, [pc, #4]	; (8006a28 <__malloc_lock+0x8>)
 8006a22:	f7ff bf7b 	b.w	800691c <__retarget_lock_acquire_recursive>
 8006a26:	bf00      	nop
 8006a28:	2001372c 	.word	0x2001372c

08006a2c <__malloc_unlock>:
 8006a2c:	4801      	ldr	r0, [pc, #4]	; (8006a34 <__malloc_unlock+0x8>)
 8006a2e:	f7ff bf76 	b.w	800691e <__retarget_lock_release_recursive>
 8006a32:	bf00      	nop
 8006a34:	2001372c 	.word	0x2001372c

08006a38 <_realloc_r>:
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4614      	mov	r4, r2
 8006a40:	460e      	mov	r6, r1
 8006a42:	b921      	cbnz	r1, 8006a4e <_realloc_r+0x16>
 8006a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a48:	4611      	mov	r1, r2
 8006a4a:	f7ff b819 	b.w	8005a80 <_malloc_r>
 8006a4e:	b92a      	cbnz	r2, 8006a5c <_realloc_r+0x24>
 8006a50:	f7fe ffaa 	bl	80059a8 <_free_r>
 8006a54:	4625      	mov	r5, r4
 8006a56:	4628      	mov	r0, r5
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5c:	f000 f8fa 	bl	8006c54 <_malloc_usable_size_r>
 8006a60:	4284      	cmp	r4, r0
 8006a62:	4607      	mov	r7, r0
 8006a64:	d802      	bhi.n	8006a6c <_realloc_r+0x34>
 8006a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a6a:	d812      	bhi.n	8006a92 <_realloc_r+0x5a>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f7ff f806 	bl	8005a80 <_malloc_r>
 8006a74:	4605      	mov	r5, r0
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d0ed      	beq.n	8006a56 <_realloc_r+0x1e>
 8006a7a:	42bc      	cmp	r4, r7
 8006a7c:	4622      	mov	r2, r4
 8006a7e:	4631      	mov	r1, r6
 8006a80:	bf28      	it	cs
 8006a82:	463a      	movcs	r2, r7
 8006a84:	f7fe feb6 	bl	80057f4 <memcpy>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	f7fe ff8c 	bl	80059a8 <_free_r>
 8006a90:	e7e1      	b.n	8006a56 <_realloc_r+0x1e>
 8006a92:	4635      	mov	r5, r6
 8006a94:	e7df      	b.n	8006a56 <_realloc_r+0x1e>

08006a96 <_raise_r>:
 8006a96:	291f      	cmp	r1, #31
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	460d      	mov	r5, r1
 8006a9e:	d904      	bls.n	8006aaa <_raise_r+0x14>
 8006aa0:	2316      	movs	r3, #22
 8006aa2:	6003      	str	r3, [r0, #0]
 8006aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa8:	bd38      	pop	{r3, r4, r5, pc}
 8006aaa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006aac:	b112      	cbz	r2, 8006ab4 <_raise_r+0x1e>
 8006aae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ab2:	b94b      	cbnz	r3, 8006ac8 <_raise_r+0x32>
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 f831 	bl	8006b1c <_getpid_r>
 8006aba:	462a      	mov	r2, r5
 8006abc:	4601      	mov	r1, r0
 8006abe:	4620      	mov	r0, r4
 8006ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ac4:	f000 b818 	b.w	8006af8 <_kill_r>
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d00a      	beq.n	8006ae2 <_raise_r+0x4c>
 8006acc:	1c59      	adds	r1, r3, #1
 8006ace:	d103      	bne.n	8006ad8 <_raise_r+0x42>
 8006ad0:	2316      	movs	r3, #22
 8006ad2:	6003      	str	r3, [r0, #0]
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	e7e7      	b.n	8006aa8 <_raise_r+0x12>
 8006ad8:	2400      	movs	r4, #0
 8006ada:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	4798      	blx	r3
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e7e0      	b.n	8006aa8 <_raise_r+0x12>
	...

08006ae8 <raise>:
 8006ae8:	4b02      	ldr	r3, [pc, #8]	; (8006af4 <raise+0xc>)
 8006aea:	4601      	mov	r1, r0
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	f7ff bfd2 	b.w	8006a96 <_raise_r>
 8006af2:	bf00      	nop
 8006af4:	20000010 	.word	0x20000010

08006af8 <_kill_r>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	4d07      	ldr	r5, [pc, #28]	; (8006b18 <_kill_r+0x20>)
 8006afc:	2300      	movs	r3, #0
 8006afe:	4604      	mov	r4, r0
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	f7f9 ff1f 	bl	8000948 <_kill>
 8006b0a:	1c43      	adds	r3, r0, #1
 8006b0c:	d102      	bne.n	8006b14 <_kill_r+0x1c>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	b103      	cbz	r3, 8006b14 <_kill_r+0x1c>
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	bd38      	pop	{r3, r4, r5, pc}
 8006b16:	bf00      	nop
 8006b18:	20013730 	.word	0x20013730

08006b1c <_getpid_r>:
 8006b1c:	f7f9 bf0c 	b.w	8000938 <_getpid>

08006b20 <__sread>:
 8006b20:	b510      	push	{r4, lr}
 8006b22:	460c      	mov	r4, r1
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	f000 f89c 	bl	8006c64 <_read_r>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	bfab      	itete	ge
 8006b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b32:	89a3      	ldrhlt	r3, [r4, #12]
 8006b34:	181b      	addge	r3, r3, r0
 8006b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b3a:	bfac      	ite	ge
 8006b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b3e:	81a3      	strhlt	r3, [r4, #12]
 8006b40:	bd10      	pop	{r4, pc}

08006b42 <__swrite>:
 8006b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b46:	461f      	mov	r7, r3
 8006b48:	898b      	ldrh	r3, [r1, #12]
 8006b4a:	05db      	lsls	r3, r3, #23
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	4616      	mov	r6, r2
 8006b52:	d505      	bpl.n	8006b60 <__swrite+0x1e>
 8006b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b58:	2302      	movs	r3, #2
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f000 f868 	bl	8006c30 <_lseek_r>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	463b      	mov	r3, r7
 8006b70:	4628      	mov	r0, r5
 8006b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b76:	f000 b817 	b.w	8006ba8 <_write_r>

08006b7a <__sseek>:
 8006b7a:	b510      	push	{r4, lr}
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b82:	f000 f855 	bl	8006c30 <_lseek_r>
 8006b86:	1c43      	adds	r3, r0, #1
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	bf15      	itete	ne
 8006b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b96:	81a3      	strheq	r3, [r4, #12]
 8006b98:	bf18      	it	ne
 8006b9a:	81a3      	strhne	r3, [r4, #12]
 8006b9c:	bd10      	pop	{r4, pc}

08006b9e <__sclose>:
 8006b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba2:	f000 b813 	b.w	8006bcc <_close_r>
	...

08006ba8 <_write_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4d07      	ldr	r5, [pc, #28]	; (8006bc8 <_write_r+0x20>)
 8006bac:	4604      	mov	r4, r0
 8006bae:	4608      	mov	r0, r1
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	602a      	str	r2, [r5, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f7f9 fefd 	bl	80009b6 <_write>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_write_r+0x1e>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_write_r+0x1e>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	20013730 	.word	0x20013730

08006bcc <_close_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d06      	ldr	r5, [pc, #24]	; (8006be8 <_close_r+0x1c>)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	602b      	str	r3, [r5, #0]
 8006bd8:	f7f9 ff09 	bl	80009ee <_close>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_close_r+0x1a>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_close_r+0x1a>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20013730 	.word	0x20013730

08006bec <_fstat_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d07      	ldr	r5, [pc, #28]	; (8006c0c <_fstat_r+0x20>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	f7f9 ff04 	bl	8000a06 <_fstat>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	d102      	bne.n	8006c08 <_fstat_r+0x1c>
 8006c02:	682b      	ldr	r3, [r5, #0]
 8006c04:	b103      	cbz	r3, 8006c08 <_fstat_r+0x1c>
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	bd38      	pop	{r3, r4, r5, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20013730 	.word	0x20013730

08006c10 <_isatty_r>:
 8006c10:	b538      	push	{r3, r4, r5, lr}
 8006c12:	4d06      	ldr	r5, [pc, #24]	; (8006c2c <_isatty_r+0x1c>)
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	4608      	mov	r0, r1
 8006c1a:	602b      	str	r3, [r5, #0]
 8006c1c:	f7f9 ff03 	bl	8000a26 <_isatty>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d102      	bne.n	8006c2a <_isatty_r+0x1a>
 8006c24:	682b      	ldr	r3, [r5, #0]
 8006c26:	b103      	cbz	r3, 8006c2a <_isatty_r+0x1a>
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	20013730 	.word	0x20013730

08006c30 <_lseek_r>:
 8006c30:	b538      	push	{r3, r4, r5, lr}
 8006c32:	4d07      	ldr	r5, [pc, #28]	; (8006c50 <_lseek_r+0x20>)
 8006c34:	4604      	mov	r4, r0
 8006c36:	4608      	mov	r0, r1
 8006c38:	4611      	mov	r1, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	602a      	str	r2, [r5, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f7f9 fefc 	bl	8000a3c <_lseek>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d102      	bne.n	8006c4e <_lseek_r+0x1e>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	b103      	cbz	r3, 8006c4e <_lseek_r+0x1e>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	20013730 	.word	0x20013730

08006c54 <_malloc_usable_size_r>:
 8006c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c58:	1f18      	subs	r0, r3, #4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bfbc      	itt	lt
 8006c5e:	580b      	ldrlt	r3, [r1, r0]
 8006c60:	18c0      	addlt	r0, r0, r3
 8006c62:	4770      	bx	lr

08006c64 <_read_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d07      	ldr	r5, [pc, #28]	; (8006c84 <_read_r+0x20>)
 8006c68:	4604      	mov	r4, r0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	602a      	str	r2, [r5, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f7f9 fe82 	bl	800097c <_read>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_read_r+0x1e>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_read_r+0x1e>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	20013730 	.word	0x20013730

08006c88 <_sbrk>:
 8006c88:	4a04      	ldr	r2, [pc, #16]	; (8006c9c <_sbrk+0x14>)
 8006c8a:	6811      	ldr	r1, [r2, #0]
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	b909      	cbnz	r1, 8006c94 <_sbrk+0xc>
 8006c90:	4903      	ldr	r1, [pc, #12]	; (8006ca0 <_sbrk+0x18>)
 8006c92:	6011      	str	r1, [r2, #0]
 8006c94:	6810      	ldr	r0, [r2, #0]
 8006c96:	4403      	add	r3, r0
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	4770      	bx	lr
 8006c9c:	20013734 	.word	0x20013734
 8006ca0:	20013738 	.word	0x20013738

08006ca4 <_init>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr

08006cb0 <_fini>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr
