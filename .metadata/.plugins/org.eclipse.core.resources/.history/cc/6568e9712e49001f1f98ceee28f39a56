
Prueba_Giroscopio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08006e50  08006e50  00016e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f4  080072f4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072fc  080072fc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072fc  080072fc  000172fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007300  08007300  00017300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ec  200001d8  080074dc  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  080074dc  00020ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003756  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ddd  00000000  00000000  0002395e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000340  00000000  00000000  00024740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b8  00000000  00000000  00024a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000101c4  00000000  00000000  00024d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004317  00000000  00000000  00034efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000567b9  00000000  00000000  00039213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008f9cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b8  00000000  00000000  0008fa1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e38 	.word	0x08006e38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08006e38 	.word	0x08006e38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9dd 	b.w	8001074 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f86b 	bl	8000da4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f85e 	bl	8000da4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f84d 	bl	8000da4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f83f 	bl	8000da4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fed3 	bl	8000aec <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc49 	bl	8000608 <__aeabi_dmul>
 8000d76:	f7ff ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbca 	bl	8000514 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc40 	bl	8000608 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa82 	bl	8000298 <__aeabi_dsub>
 8000d94:	f7ff ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	468e      	mov	lr, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14d      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db2:	428a      	cmp	r2, r1
 8000db4:	4694      	mov	ip, r2
 8000db6:	d969      	bls.n	8000e8c <__udivmoddi4+0xe8>
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b152      	cbz	r2, 8000dd4 <__udivmoddi4+0x30>
 8000dbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc2:	f1c2 0120 	rsb	r1, r2, #32
 8000dc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dce:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd2:	4094      	lsls	r4, r2
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	0c21      	lsrs	r1, r4, #16
 8000dda:	fbbe f6f8 	udiv	r6, lr, r8
 8000dde:	fa1f f78c 	uxth.w	r7, ip
 8000de2:	fb08 e316 	mls	r3, r8, r6, lr
 8000de6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dea:	fb06 f107 	mul.w	r1, r6, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfa:	f080 811f 	bcs.w	800103c <__udivmoddi4+0x298>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 811c 	bls.w	800103c <__udivmoddi4+0x298>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb00 f707 	mul.w	r7, r0, r7
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x92>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	f080 810a 	bcs.w	8001040 <__udivmoddi4+0x29c>
 8000e2c:	42a7      	cmp	r7, r4
 8000e2e:	f240 8107 	bls.w	8001040 <__udivmoddi4+0x29c>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	1be4      	subs	r4, r4, r7
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	b11d      	cbz	r5, 8000e48 <__udivmoddi4+0xa4>
 8000e40:	40d4      	lsrs	r4, r2
 8000e42:	2300      	movs	r3, #0
 8000e44:	e9c5 4300 	strd	r4, r3, [r5]
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0xc2>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80ef 	beq.w	8001036 <__udivmoddi4+0x292>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x160>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xd4>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80f9 	bhi.w	800106a <__udivmoddi4+0x2c6>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	469e      	mov	lr, r3
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0e0      	beq.n	8000e48 <__udivmoddi4+0xa4>
 8000e86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8a:	e7dd      	b.n	8000e48 <__udivmoddi4+0xa4>
 8000e8c:	b902      	cbnz	r2, 8000e90 <__udivmoddi4+0xec>
 8000e8e:	deff      	udf	#255	; 0xff
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f040 8092 	bne.w	8000fbe <__udivmoddi4+0x21a>
 8000e9a:	eba1 010c 	sub.w	r1, r1, ip
 8000e9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	0c20      	lsrs	r0, r4, #16
 8000eaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eae:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb6:	fb0e f003 	mul.w	r0, lr, r3
 8000eba:	4288      	cmp	r0, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x12c>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x12a>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f200 80cb 	bhi.w	8001064 <__udivmoddi4+0x2c0>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1110 	mls	r1, r7, r0, r1
 8000edc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee4:	45a6      	cmp	lr, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x156>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef0:	d202      	bcs.n	8000ef8 <__udivmoddi4+0x154>
 8000ef2:	45a6      	cmp	lr, r4
 8000ef4:	f200 80bb 	bhi.w	800106e <__udivmoddi4+0x2ca>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f02:	e79c      	b.n	8000e3e <__udivmoddi4+0x9a>
 8000f04:	f1c6 0720 	rsb	r7, r6, #32
 8000f08:	40b3      	lsls	r3, r6
 8000f0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f12:	fa20 f407 	lsr.w	r4, r0, r7
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	40f9      	lsrs	r1, r7
 8000f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f22:	fa00 f306 	lsl.w	r3, r0, r6
 8000f26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2a:	0c20      	lsrs	r0, r4, #16
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	fb09 1118 	mls	r1, r9, r8, r1
 8000f34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f38:	fb08 f00e 	mul.w	r0, r8, lr
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f42:	d90b      	bls.n	8000f5c <__udivmoddi4+0x1b8>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f4c:	f080 8088 	bcs.w	8001060 <__udivmoddi4+0x2bc>
 8000f50:	4288      	cmp	r0, r1
 8000f52:	f240 8085 	bls.w	8001060 <__udivmoddi4+0x2bc>
 8000f56:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	1a09      	subs	r1, r1, r0
 8000f5e:	b2a4      	uxth	r4, r4
 8000f60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f64:	fb09 1110 	mls	r1, r9, r0, r1
 8000f68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f70:	458e      	cmp	lr, r1
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1e2>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7c:	d26c      	bcs.n	8001058 <__udivmoddi4+0x2b4>
 8000f7e:	458e      	cmp	lr, r1
 8000f80:	d96a      	bls.n	8001058 <__udivmoddi4+0x2b4>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4461      	add	r1, ip
 8000f86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f8e:	eba1 010e 	sub.w	r1, r1, lr
 8000f92:	42a1      	cmp	r1, r4
 8000f94:	46c8      	mov	r8, r9
 8000f96:	46a6      	mov	lr, r4
 8000f98:	d356      	bcc.n	8001048 <__udivmoddi4+0x2a4>
 8000f9a:	d053      	beq.n	8001044 <__udivmoddi4+0x2a0>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x212>
 8000f9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000faa:	fa22 f306 	lsr.w	r3, r2, r6
 8000fae:	40f1      	lsrs	r1, r6
 8000fb0:	431f      	orrs	r7, r3
 8000fb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	4631      	mov	r1, r6
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1c2 0320 	rsb	r3, r2, #32
 8000fc2:	40d8      	lsrs	r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	4301      	orrs	r1, r0
 8000fd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd4:	fa1f fe8c 	uxth.w	lr, ip
 8000fd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe0:	0c0b      	lsrs	r3, r1, #16
 8000fe2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fe6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fea:	429e      	cmp	r6, r3
 8000fec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x260>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffa:	d22f      	bcs.n	800105c <__udivmoddi4+0x2b8>
 8000ffc:	429e      	cmp	r6, r3
 8000ffe:	d92d      	bls.n	800105c <__udivmoddi4+0x2b8>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	b289      	uxth	r1, r1
 8001008:	fbb3 f6f7 	udiv	r6, r3, r7
 800100c:	fb07 3316 	mls	r3, r7, r6, r3
 8001010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001014:	fb06 f30e 	mul.w	r3, r6, lr
 8001018:	428b      	cmp	r3, r1
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x28a>
 800101c:	eb1c 0101 	adds.w	r1, ip, r1
 8001020:	f106 38ff 	add.w	r8, r6, #4294967295
 8001024:	d216      	bcs.n	8001054 <__udivmoddi4+0x2b0>
 8001026:	428b      	cmp	r3, r1
 8001028:	d914      	bls.n	8001054 <__udivmoddi4+0x2b0>
 800102a:	3e02      	subs	r6, #2
 800102c:	4461      	add	r1, ip
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001034:	e738      	b.n	8000ea8 <__udivmoddi4+0x104>
 8001036:	462e      	mov	r6, r5
 8001038:	4628      	mov	r0, r5
 800103a:	e705      	b.n	8000e48 <__udivmoddi4+0xa4>
 800103c:	4606      	mov	r6, r0
 800103e:	e6e3      	b.n	8000e08 <__udivmoddi4+0x64>
 8001040:	4618      	mov	r0, r3
 8001042:	e6f8      	b.n	8000e36 <__udivmoddi4+0x92>
 8001044:	454b      	cmp	r3, r9
 8001046:	d2a9      	bcs.n	8000f9c <__udivmoddi4+0x1f8>
 8001048:	ebb9 0802 	subs.w	r8, r9, r2
 800104c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001050:	3801      	subs	r0, #1
 8001052:	e7a3      	b.n	8000f9c <__udivmoddi4+0x1f8>
 8001054:	4646      	mov	r6, r8
 8001056:	e7ea      	b.n	800102e <__udivmoddi4+0x28a>
 8001058:	4620      	mov	r0, r4
 800105a:	e794      	b.n	8000f86 <__udivmoddi4+0x1e2>
 800105c:	4640      	mov	r0, r8
 800105e:	e7d1      	b.n	8001004 <__udivmoddi4+0x260>
 8001060:	46d0      	mov	r8, sl
 8001062:	e77b      	b.n	8000f5c <__udivmoddi4+0x1b8>
 8001064:	3b02      	subs	r3, #2
 8001066:	4461      	add	r1, ip
 8001068:	e732      	b.n	8000ed0 <__udivmoddi4+0x12c>
 800106a:	4630      	mov	r0, r6
 800106c:	e709      	b.n	8000e82 <__udivmoddi4+0xde>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	e742      	b.n	8000efa <__udivmoddi4+0x156>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <main>:
#define WHO_AM_I    117                            //Registro para verificar la identidad del equipo

void acelerometro_I2C(void);                       //Cabecera para la comunicacion I2C

int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	//Realizamos la configuracuion inicial
	int_Hardware();
 800107c:	f000 f81c 	bl	80010b8 <int_Hardware>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <main+0x34>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <main+0x34>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos para el PIN un 1 logico,
	GPIO_writePin (&handler_BlinkyPin, SET);
 8001090:	2101      	movs	r1, #1
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <main+0x38>)
 8001094:	f000 fc8a 	bl	80019ac <GPIO_writePin>

	while(1)
	{
		if(charRead != '\0')
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <main+0x3c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <main+0x30>
		{

			charRead = '\0';
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <main+0x3c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	e7f7      	b.n	8001098 <main+0x20>
		}
		else { __NOP(); }
 80010a8:	bf00      	nop
		if(charRead != '\0')
 80010aa:	e7f5      	b.n	8001098 <main+0x20>
 80010ac:	e000ed00 	.word	0xe000ed00
 80010b0:	200001f4 	.word	0x200001f4
 80010b4:	20000000 	.word	0x20000000

080010b8 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80010be:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <int_Hardware+0x13c>)
 80010c0:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <int_Hardware+0x140>)
 80010c2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80010c4:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <int_Hardware+0x13c>)
 80010c6:	2205      	movs	r2, #5
 80010c8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80010ca:	2300      	movs	r3, #0
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2200      	movs	r2, #0
 80010d6:	2101      	movs	r1, #1
 80010d8:	4846      	ldr	r0, [pc, #280]	; (80011f4 <int_Hardware+0x13c>)
 80010da:	f000 fb1b 	bl	8001714 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 80010de:	4845      	ldr	r0, [pc, #276]	; (80011f4 <int_Hardware+0x13c>)
 80010e0:	f000 fb3a 	bl	8001758 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 80010e4:	4b45      	ldr	r3, [pc, #276]	; (80011fc <int_Hardware+0x144>)
 80010e6:	4a44      	ldr	r2, [pc, #272]	; (80011f8 <int_Hardware+0x140>)
 80010e8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <int_Hardware+0x144>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80010f0:	2307      	movs	r3, #7
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2300      	movs	r3, #0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	2200      	movs	r2, #0
 80010fc:	2102      	movs	r1, #2
 80010fe:	483f      	ldr	r0, [pc, #252]	; (80011fc <int_Hardware+0x144>)
 8001100:	f000 fb08 	bl	8001714 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001104:	483d      	ldr	r0, [pc, #244]	; (80011fc <int_Hardware+0x144>)
 8001106:	f000 fb27 	bl	8001758 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800110a:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <int_Hardware+0x148>)
 800110c:	4a3a      	ldr	r2, [pc, #232]	; (80011f8 <int_Hardware+0x140>)
 800110e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8001110:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <int_Hardware+0x148>)
 8001112:	2203      	movs	r2, #3
 8001114:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001116:	2307      	movs	r3, #7
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	2200      	movs	r2, #0
 8001122:	2102      	movs	r1, #2
 8001124:	4836      	ldr	r0, [pc, #216]	; (8001200 <int_Hardware+0x148>)
 8001126:	f000 faf5 	bl	8001714 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800112a:	4835      	ldr	r0, [pc, #212]	; (8001200 <int_Hardware+0x148>)
 800112c:	f000 fb14 	bl	8001758 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_Acelerometro.pGPIOx = GPIOB;
 8001130:	4b34      	ldr	r3, [pc, #208]	; (8001204 <int_Hardware+0x14c>)
 8001132:	4a35      	ldr	r2, [pc, #212]	; (8001208 <int_Hardware+0x150>)
 8001134:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_Acelerometro.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <int_Hardware+0x14c>)
 8001138:	2208      	movs	r2, #8
 800113a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_Acelerometro, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 800113c:	2304      	movs	r3, #4
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	2300      	movs	r3, #0
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2302      	movs	r3, #2
 8001146:	2201      	movs	r2, #1
 8001148:	2102      	movs	r1, #2
 800114a:	482e      	ldr	r0, [pc, #184]	; (8001204 <int_Hardware+0x14c>)
 800114c:	f000 fae2 	bl	8001714 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_Acelerometro);
 8001150:	482c      	ldr	r0, [pc, #176]	; (8001204 <int_Hardware+0x14c>)
 8001152:	f000 fb01 	bl	8001758 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_Acelerometro.pGPIOx = GPIOB;
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <int_Hardware+0x154>)
 8001158:	4a2b      	ldr	r2, [pc, #172]	; (8001208 <int_Hardware+0x150>)
 800115a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_Acelerometro.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 800115c:	4b2b      	ldr	r3, [pc, #172]	; (800120c <int_Hardware+0x154>)
 800115e:	2209      	movs	r2, #9
 8001160:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_Acelerometro, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8001162:	2304      	movs	r3, #4
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	2300      	movs	r3, #0
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2302      	movs	r3, #2
 800116c:	2201      	movs	r2, #1
 800116e:	2102      	movs	r1, #2
 8001170:	4826      	ldr	r0, [pc, #152]	; (800120c <int_Hardware+0x154>)
 8001172:	f000 facf 	bl	8001714 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_Acelerometro);
 8001176:	4825      	ldr	r0, [pc, #148]	; (800120c <int_Hardware+0x154>)
 8001178:	f000 faee 	bl	8001758 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <int_Hardware+0x158>)
 800117e:	4a25      	ldr	r2, [pc, #148]	; (8001214 <int_Hardware+0x15c>)
 8001180:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <int_Hardware+0x158>)
 8001184:	2202      	movs	r2, #2
 8001186:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_9600;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <int_Hardware+0x158>)
 800118a:	2200      	movs	r2, #0
 800118c:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <int_Hardware+0x158>)
 8001190:	2200      	movs	r2, #0
 8001192:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8001194:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <int_Hardware+0x158>)
 8001196:	2200      	movs	r2, #0
 8001198:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <int_Hardware+0x158>)
 800119c:	2201      	movs	r2, #1
 800119e:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <int_Hardware+0x158>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 80011a6:	481a      	ldr	r0, [pc, #104]	; (8001210 <int_Hardware+0x158>)
 80011a8:	f000 fd6c 	bl	8001c84 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <int_Hardware+0x160>)
 80011ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <int_Hardware+0x160>)
 80011b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ba:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <int_Hardware+0x160>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <int_Hardware+0x160>)
 80011c4:	22fa      	movs	r2, #250	; 0xfa
 80011c6:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <int_Hardware+0x160>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80011ce:	4812      	ldr	r0, [pc, #72]	; (8001218 <int_Hardware+0x160>)
 80011d0:	f000 f94a 	bl	8001468 <BasicTimer_Config>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_Acelerometro.prtI2Cx = I2C1;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <int_Hardware+0x164>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <int_Hardware+0x168>)
 80011d8:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_Acelerometro.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <int_Hardware+0x164>)
 80011dc:	2201      	movs	r2, #1
 80011de:	715a      	strb	r2, [r3, #5]
	handler_I2C_Acelerometro.slaveAddress = ACCEL_ADDRESSS;       //Direccion del Sclave
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <int_Hardware+0x164>)
 80011e2:	2269      	movs	r2, #105	; 0x69
 80011e4:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_Acelerometro);
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <int_Hardware+0x164>)
 80011e8:	f000 fc22 	bl	8001a30 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------



}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001f4 	.word	0x200001f4
 80011f8:	40020000 	.word	0x40020000
 80011fc:	20000210 	.word	0x20000210
 8001200:	2000021c 	.word	0x2000021c
 8001204:	20000234 	.word	0x20000234
 8001208:	40020400 	.word	0x40020400
 800120c:	20000240 	.word	0x20000240
 8001210:	20000228 	.word	0x20000228
 8001214:	40004400 	.word	0x40004400
 8001218:	20000200 	.word	0x20000200
 800121c:	2000024c 	.word	0x2000024c
 8001220:	40005400 	.word	0x40005400

08001224 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <BasicTimer2_Callback+0x10>)
 800122a:	f000 fbea 	bl	8001a02 <GPIOxTooglePin>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001f4 	.word	0x200001f4

08001238 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	charRead = getRxData();
 800123c:	f000 ff8e 	bl	800215c <getRxData>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b01      	ldr	r3, [pc, #4]	; (800124c <BasicUSART2_Callback+0x14>)
 8001246:	701a      	strb	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000000 	.word	0x20000000

08001250 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001252:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001254:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <LoopForever+0x6>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	; (8001290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <LoopForever+0xe>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <LoopForever+0x16>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800127e:	f001 f93d 	bl	80024fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001282:	f7ff fef9 	bl	8001078 <main>

08001286 <LoopForever>:

LoopForever:
    b LoopForever
 8001286:	e7fe      	b.n	8001286 <LoopForever>
  ldr   r0, =_estack
 8001288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001294:	08007304 	.word	0x08007304
  ldr r2, =_sbss
 8001298:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800129c:	20000ac4 	.word	0x20000ac4

080012a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <ADC_IRQHandler>

080012a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
	return 1;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_kill>:

int _kill(int pid, int sig)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012bc:	f001 f918 	bl	80024f0 <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2216      	movs	r2, #22
 80012c4:	601a      	str	r2, [r3, #0]
	return -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_exit>:

void _exit (int status)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012da:	f04f 31ff 	mov.w	r1, #4294967295
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ffe7 	bl	80012b2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012e4:	e7fe      	b.n	80012e4 <_exit+0x12>

080012e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e00a      	b.n	800130e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012f8:	f3af 8000 	nop.w
 80012fc:	4601      	mov	r1, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	60ba      	str	r2, [r7, #8]
 8001304:	b2ca      	uxtb	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	dbf0      	blt.n	80012f8 <_read+0x12>
	}

return len;
 8001316:	687b      	ldr	r3, [r7, #4]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	e009      	b.n	8001346 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbf1      	blt.n	8001332 <_write+0x12>
	}
	return len;
 800134e:	687b      	ldr	r3, [r7, #4]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_close>:

int _close(int file)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	return -1;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001380:	605a      	str	r2, [r3, #4]
	return 0;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_isatty>:

int _isatty(int file)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	return 1;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b085      	sub	sp, #20
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
	return 0;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <_sbrk+0x5c>)
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <_sbrk+0x60>)
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <_sbrk+0x64>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <_sbrk+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d207      	bcs.n	8001400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f0:	f001 f87e 	bl	80024f0 <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e009      	b.n	8001414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20020000 	.word	0x20020000
 8001420:	00000400 	.word	0x00000400
 8001424:	20000254 	.word	0x20000254
 8001428:	20000ac8 	.word	0x20000ac8

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001478:	d10a      	bne.n	8001490 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800147a:	4b62      	ldr	r3, [pc, #392]	; (8001604 <BasicTimer_Config+0x19c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a61      	ldr	r2, [pc, #388]	; (8001604 <BasicTimer_Config+0x19c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4a5f      	ldr	r2, [pc, #380]	; (8001608 <BasicTimer_Config+0x1a0>)
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e02e      	b.n	80014ee <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a5d      	ldr	r2, [pc, #372]	; (800160c <BasicTimer_Config+0x1a4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10a      	bne.n	80014b0 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800149a:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <BasicTimer_Config+0x19c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a59      	ldr	r2, [pc, #356]	; (8001604 <BasicTimer_Config+0x19c>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	4a59      	ldr	r2, [pc, #356]	; (8001610 <BasicTimer_Config+0x1a8>)
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01e      	b.n	80014ee <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a57      	ldr	r2, [pc, #348]	; (8001614 <BasicTimer_Config+0x1ac>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10a      	bne.n	80014d0 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80014ba:	4b52      	ldr	r3, [pc, #328]	; (8001604 <BasicTimer_Config+0x19c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a51      	ldr	r2, [pc, #324]	; (8001604 <BasicTimer_Config+0x19c>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4a53      	ldr	r2, [pc, #332]	; (8001618 <BasicTimer_Config+0x1b0>)
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00e      	b.n	80014ee <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a51      	ldr	r2, [pc, #324]	; (800161c <BasicTimer_Config+0x1b4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d109      	bne.n	80014ee <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80014da:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <BasicTimer_Config+0x19c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a49      	ldr	r2, [pc, #292]	; (8001604 <BasicTimer_Config+0x19c>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <BasicTimer_Config+0x1b8>)
 80014ec:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80014ee:	f000 fb77 	bl	8001be0 <getConfigPLL>
 80014f2:	4603      	mov	r3, r0
 80014f4:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80014f6:	f000 fb8f 	bl	8001c18 <getClockAPB1>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	2b31      	cmp	r3, #49	; 0x31
 8001502:	d903      	bls.n	800150c <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e000      	b.n	800150e <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 800150c:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	8852      	ldrh	r2, [r2, #2]
 8001514:	fb02 f303 	mul.w	r3, r2, r3
 8001518:	1e5a      	subs	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d112      	bne.n	800154e <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f022 0210 	bic.w	r2, r2, #16
 8001536:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	3201      	adds	r2, #1
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
 800154c:	e018      	b.n	8001580 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f022 0210 	bic.w	r2, r2, #16
 800155c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f042 0210 	orr.w	r2, r2, #16
 800156c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6852      	ldr	r2, [r2, #4]
 800157e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800158c:	d103      	bne.n	8001596 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800158e:	201c      	movs	r0, #28
 8001590:	f7ff ff4c 	bl	800142c <__NVIC_EnableIRQ>
 8001594:	e019      	b.n	80015ca <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <BasicTimer_Config+0x1a4>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d103      	bne.n	80015a8 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 80015a0:	201d      	movs	r0, #29
 80015a2:	f7ff ff43 	bl	800142c <__NVIC_EnableIRQ>
 80015a6:	e010      	b.n	80015ca <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <BasicTimer_Config+0x1ac>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 80015b2:	201e      	movs	r0, #30
 80015b4:	f7ff ff3a 	bl	800142c <__NVIC_EnableIRQ>
 80015b8:	e007      	b.n	80015ca <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <BasicTimer_Config+0x1b4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d102      	bne.n	80015ca <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 80015c4:	2032      	movs	r0, #50	; 0x32
 80015c6:	f7ff ff31 	bl	800142c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80015ca:	b662      	cpsie	i
}
 80015cc:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7a1b      	ldrb	r3, [r3, #8]
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f87d 	bl	80016d4 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	20000258 	.word	0x20000258
 800160c:	40000400 	.word	0x40000400
 8001610:	2000025c 	.word	0x2000025c
 8001614:	40000800 	.word	0x40000800
 8001618:	20000260 	.word	0x20000260
 800161c:	40000c00 	.word	0x40000c00
 8001620:	20000264 	.word	0x20000264

08001624 <BasicTimer3_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
	__NOP();
 8001628:	bf00      	nop
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	__NOP();
 8001638:	bf00      	nop
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	__NOP();
 8001648:	bf00      	nop
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <TIM2_IRQHandler+0x1c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <TIM2_IRQHandler+0x1c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8001668:	f7ff fddc 	bl	8001224 <BasicTimer2_Callback>

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000258 	.word	0x20000258

08001674 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <TIM3_IRQHandler+0x1c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <TIM3_IRQHandler+0x1c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8001688:	f7ff ffcc 	bl	8001624 <BasicTimer3_Callback>

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000025c 	.word	0x2000025c

08001694 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <TIM4_IRQHandler+0x1c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <TIM4_IRQHandler+0x1c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 80016a8:	f7ff ffc4 	bl	8001634 <BasicTimer4_Callback>

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000260 	.word	0x20000260

080016b4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <TIM5_IRQHandler+0x1c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <TIM5_IRQHandler+0x1c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 80016c8:	f7ff ffbc 	bl	8001644 <BasicTimer5_Callback>

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000264 	.word	0x20000264

080016d4 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f042 0201 	orr.w	r2, r2, #1
 80016f4:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 80016f6:	e007      	b.n	8001708 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	68da      	ldr	r2, [r3, #12]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f022 0201 	bic.w	r2, r2, #1
 8001706:	60da      	str	r2, [r3, #12]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	70fb      	strb	r3, [r7, #3]
 8001726:	460b      	mov	r3, r1
 8001728:	70bb      	strb	r3, [r7, #2]
 800172a:	4613      	mov	r3, r2
 800172c:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	78fa      	ldrb	r2, [r7, #3]
 8001732:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	78ba      	ldrb	r2, [r7, #2]
 8001738:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	787a      	ldrb	r2, [r7, #1]
 800173e:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7c3a      	ldrb	r2, [r7, #16]
 8001744:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7d3a      	ldrb	r2, [r7, #20]
 800174a:	715a      	strb	r2, [r3, #5]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a88      	ldr	r2, [pc, #544]	; (8001990 <GPIO_Config+0x238>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d106      	bne.n	8001780 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8001772:	4b88      	ldr	r3, [pc, #544]	; (8001994 <GPIO_Config+0x23c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a87      	ldr	r2, [pc, #540]	; (8001994 <GPIO_Config+0x23c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	e03a      	b.n	80017f6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a84      	ldr	r2, [pc, #528]	; (8001998 <GPIO_Config+0x240>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d106      	bne.n	8001798 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 800178a:	4b82      	ldr	r3, [pc, #520]	; (8001994 <GPIO_Config+0x23c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a81      	ldr	r2, [pc, #516]	; (8001994 <GPIO_Config+0x23c>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	e02e      	b.n	80017f6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a7f      	ldr	r2, [pc, #508]	; (800199c <GPIO_Config+0x244>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d106      	bne.n	80017b0 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 80017a2:	4b7c      	ldr	r3, [pc, #496]	; (8001994 <GPIO_Config+0x23c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a7b      	ldr	r2, [pc, #492]	; (8001994 <GPIO_Config+0x23c>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	e022      	b.n	80017f6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <GPIO_Config+0x248>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d106      	bne.n	80017c8 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 80017ba:	4b76      	ldr	r3, [pc, #472]	; (8001994 <GPIO_Config+0x23c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a75      	ldr	r2, [pc, #468]	; (8001994 <GPIO_Config+0x23c>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	e016      	b.n	80017f6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a75      	ldr	r2, [pc, #468]	; (80019a4 <GPIO_Config+0x24c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d106      	bne.n	80017e0 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 80017d2:	4b70      	ldr	r3, [pc, #448]	; (8001994 <GPIO_Config+0x23c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a6f      	ldr	r2, [pc, #444]	; (8001994 <GPIO_Config+0x23c>)
 80017d8:	f043 0310 	orr.w	r3, r3, #16
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	e00a      	b.n	80017f6 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a70      	ldr	r2, [pc, #448]	; (80019a8 <GPIO_Config+0x250>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d105      	bne.n	80017f6 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 80017ea:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <GPIO_Config+0x23c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a69      	ldr	r2, [pc, #420]	; (8001994 <GPIO_Config+0x23c>)
 80017f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	785b      	ldrb	r3, [r3, #1]
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2103      	movs	r1, #3
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	4619      	mov	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	400a      	ands	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	6819      	ldr	r1, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	789b      	ldrb	r3, [r3, #2]
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	2301      	movs	r3, #1
 8001854:	408b      	lsls	r3, r1
 8001856:	43db      	mvns	r3, r3
 8001858:	4619      	mov	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	400a      	ands	r2, r1
 8001860:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	430a      	orrs	r2, r1
 8001870:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	78db      	ldrb	r3, [r3, #3]
 8001876:	461a      	mov	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2103      	movs	r1, #3
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	4619      	mov	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	400a      	ands	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	6899      	ldr	r1, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	791b      	ldrb	r3, [r3, #4]
 80018b6:	461a      	mov	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2103      	movs	r1, #3
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4619      	mov	r1, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	400a      	ands	r2, r1
 80018e0:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	68d9      	ldr	r1, [r3, #12]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	785b      	ldrb	r3, [r3, #1]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d143      	bne.n	8001982 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b07      	cmp	r3, #7
 8001900:	d81f      	bhi.n	8001942 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	6a1a      	ldr	r2, [r3, #32]
 8001910:	210f      	movs	r1, #15
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	4619      	mov	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	400a      	ands	r2, r1
 8001922:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	6a1a      	ldr	r2, [r3, #32]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	795b      	ldrb	r3, [r3, #5]
 800192e:	4619      	mov	r1, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	4619      	mov	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	430a      	orrs	r2, r1
 800193e:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8001940:	e01f      	b.n	8001982 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	3b08      	subs	r3, #8
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001952:	210f      	movs	r1, #15
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4619      	mov	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	400a      	ands	r2, r1
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	795b      	ldrb	r3, [r3, #5]
 8001970:	4619      	mov	r1, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	4619      	mov	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	430a      	orrs	r2, r1
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40020000 	.word	0x40020000
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40021c00 	.word	0x40021c00

080019ac <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10d      	bne.n	80019da <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	2301      	movs	r3, #1
 80019cc:	408b      	lsls	r3, r1
 80019ce:	4619      	mov	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 80019d8:	e00d      	b.n	80019f6 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	3310      	adds	r3, #16
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	4619      	mov	r1, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	619a      	str	r2, [r3, #24]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	695a      	ldr	r2, [r3, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	2301      	movs	r3, #1
 8001a18:	408b      	lsls	r3, r1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	404a      	eors	r2, r1
 8001a22:	615a      	str	r2, [r3, #20]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 8001a38:	f000 f8ee 	bl	8001c18 <getClockAPB1>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a60      	ldr	r2, [pc, #384]	; (8001bc8 <i2c_Config+0x198>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d106      	bne.n	8001a58 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001a4a:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <i2c_Config+0x19c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a5f      	ldr	r2, [pc, #380]	; (8001bcc <i2c_Config+0x19c>)
 8001a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	e016      	b.n	8001a86 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a5c      	ldr	r2, [pc, #368]	; (8001bd0 <i2c_Config+0x1a0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d106      	bne.n	8001a70 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001a62:	4b5a      	ldr	r3, [pc, #360]	; (8001bcc <i2c_Config+0x19c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a59      	ldr	r2, [pc, #356]	; (8001bcc <i2c_Config+0x19c>)
 8001a68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	e00a      	b.n	8001a86 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <i2c_Config+0x1a4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d105      	bne.n	8001a86 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8001a7a:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <i2c_Config+0x19c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a53      	ldr	r2, [pc, #332]	; (8001bcc <i2c_Config+0x19c>)
 8001a80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a94:	601a      	str	r2, [r3, #0]
	__NOP();
 8001a96:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa6:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001ab6:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6859      	ldr	r1, [r3, #4]
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	795b      	ldrb	r3, [r3, #5]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d121      	bne.n	8001b2c <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af6:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69d9      	ldr	r1, [r3, #28]
 8001b0a:	89ba      	ldrh	r2, [r7, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	3301      	adds	r3, #1
 8001b18:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a19      	ldr	r1, [r3, #32]
 8001b20:	7afa      	ldrb	r2, [r7, #11]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	621a      	str	r2, [r3, #32]
 8001b2a:	e039      	b.n	8001ba0 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b3a:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69da      	ldr	r2, [r3, #28]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b4a:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <i2c_Config+0x1a8>)
 8001b58:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5c:	1192      	asrs	r2, r2, #6
 8001b5e:	17db      	asrs	r3, r3, #31
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69d9      	ldr	r1, [r3, #28]
 8001b6a:	89ba      	ldrh	r2, [r7, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <i2c_Config+0x1ac>)
 8001b80:	fb82 1203 	smull	r1, r2, r2, r3
 8001b84:	1192      	asrs	r2, r2, #6
 8001b86:	17db      	asrs	r3, r3, #31
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6a19      	ldr	r1, [r3, #32]
 8001b96:	7afa      	ldrb	r2, [r7, #11]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f022 0201 	bic.w	r2, r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40005400 	.word	0x40005400
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40005800 	.word	0x40005800
 8001bd4:	40005c00 	.word	0x40005c00
 8001bd8:	057619f1 	.word	0x057619f1
 8001bdc:	10624dd3 	.word	0x10624dd3

08001be0 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <getConfigPLL+0x30>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d103      	bne.n	8001bfe <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <getConfigPLL+0x34>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
 8001bfc:	e001      	b.n	8001c02 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8001bfe:	2310      	movs	r3, #16
 8001c00:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8001c02:	79fb      	ldrb	r3, [r7, #7]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40023800 	.word	0x40023800
 8001c14:	20000268 	.word	0x20000268

08001c18 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8001c1e:	f7ff ffdf 	bl	8001be0 <getConfigPLL>
 8001c22:	4603      	mov	r3, r0
 8001c24:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8001c26:	2300      	movs	r3, #0
 8001c28:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	2b31      	cmp	r3, #49	; 0x31
 8001c2e:	d802      	bhi.n	8001c36 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8001c30:	79bb      	ldrb	r3, [r7, #6]
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	e002      	b.n	8001c3c <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8001c36:	79bb      	ldrb	r3, [r7, #6]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <__NVIC_EnableIRQ>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a8f      	ldr	r2, [pc, #572]	; (8001ed0 <USART_Config+0x24c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d107      	bne.n	8001ca6 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8001c96:	4b8f      	ldr	r3, [pc, #572]	; (8001ed4 <USART_Config+0x250>)
 8001c98:	2210      	movs	r2, #16
 8001c9a:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a8d      	ldr	r2, [pc, #564]	; (8001ed8 <USART_Config+0x254>)
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	e019      	b.n	8001cda <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	4a8c      	ldr	r2, [pc, #560]	; (8001edc <USART_Config+0x258>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d108      	bne.n	8001cc2 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8001cb0:	4b88      	ldr	r3, [pc, #544]	; (8001ed4 <USART_Config+0x250>)
 8001cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	4a88      	ldr	r2, [pc, #544]	; (8001ee0 <USART_Config+0x25c>)
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	e00b      	b.n	8001cda <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4a87      	ldr	r2, [pc, #540]	; (8001ee4 <USART_Config+0x260>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d106      	bne.n	8001cda <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8001ccc:	4b81      	ldr	r3, [pc, #516]	; (8001ed4 <USART_Config+0x250>)
 8001cce:	2220      	movs	r2, #32
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4a84      	ldr	r2, [pc, #528]	; (8001ee8 <USART_Config+0x264>)
 8001cd8:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	789b      	ldrb	r3, [r3, #2]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d03d      	beq.n	8001d6e <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d00:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d10:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d20:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d30:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d110      	bne.n	8001d5c <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d48:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e018      	b.n	8001d8e <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	e00f      	b.n	8001d8e <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7c:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8c:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	78db      	ldrb	r3, [r3, #3]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d84c      	bhi.n	8001e30 <USART_Config+0x1ac>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <USART_Config+0x118>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001dad 	.word	0x08001dad
 8001da0:	08001dcb 	.word	0x08001dcb
 8001da4:	08001ded 	.word	0x08001ded
 8001da8:	08001e0f 	.word	0x08001e0f
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dba:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	6912      	ldr	r2, [r2, #16]
 8001dc6:	611a      	str	r2, [r3, #16]
		break;
 8001dc8:	e041      	b.n	8001e4e <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dd8:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001de8:	611a      	str	r2, [r3, #16]
		break;
 8001dea:	e030      	b.n	8001e4e <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dfa:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e0a:	611a      	str	r2, [r3, #16]
		break;
 8001e0c:	e01f      	b.n	8001e4e <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e1c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001e2c:	611a      	str	r2, [r3, #16]
		break;
 8001e2e:	e00e      	b.n	8001e4e <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001e3e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	6912      	ldr	r2, [r2, #16]
 8001e4a:	611a      	str	r2, [r3, #16]
		break;
 8001e4c:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4a21      	ldr	r2, [pc, #132]	; (8001edc <USART_Config+0x258>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d104      	bne.n	8001e66 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001e5c:	f7ff fedc 	bl	8001c18 <getClockAPB1>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e003      	b.n	8001e6e <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8001e66:	f7ff febb 	bl	8001be0 <getConfigPLL>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	785b      	ldrb	r3, [r3, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10b      	bne.n	8001e8e <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 f91f 	bl	80020c0 <getValueBaudRate>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	e02f      	b.n	8001eee <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	785b      	ldrb	r3, [r3, #1]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10b      	bne.n	8001eae <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f90f 	bl	80020c0 <getValueBaudRate>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e01f      	b.n	8001eee <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	785b      	ldrb	r3, [r3, #1]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d11a      	bne.n	8001eec <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f8ff 	bl	80020c0 <getValueBaudRate>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	e00f      	b.n	8001eee <USART_Config+0x26a>
 8001ece:	bf00      	nop
 8001ed0:	40011000 	.word	0x40011000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	2000026c 	.word	0x2000026c
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	20000270 	.word	0x20000270
 8001ee4:	40011400 	.word	0x40011400
 8001ee8:	20000274 	.word	0x20000274
	}
	else
	{
		__NOP();
 8001eec:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d866      	bhi.n	8001fc4 <USART_Config+0x340>
 8001ef6:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <USART_Config+0x278>)
 8001ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	08001f2f 	.word	0x08001f2f
 8001f04:	08001f51 	.word	0x08001f51
 8001f08:	08001f93 	.word	0x08001f93
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f022 0208 	bic.w	r2, r2, #8
 8001f1a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	60da      	str	r2, [r3, #12]

		break;
 8001f2c:	e063      	b.n	8001ff6 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f022 0204 	bic.w	r2, r2, #4
 8001f3c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f042 0204 	orr.w	r2, r2, #4
 8001f4c:	60da      	str	r2, [r3, #12]

		break;
 8001f4e:	e052      	b.n	8001ff6 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f022 0208 	bic.w	r2, r2, #8
 8001f5e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f042 0208 	orr.w	r2, r2, #8
 8001f6e:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f022 0204 	bic.w	r2, r2, #4
 8001f7e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f042 0204 	orr.w	r2, r2, #4
 8001f8e:	60da      	str	r2, [r3, #12]


		break;
 8001f90:	e031      	b.n	8001ff6 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fa0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f022 0208 	bic.w	r2, r2, #8
 8001fb0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f022 0204 	bic.w	r2, r2, #4
 8001fc0:	60da      	str	r2, [r3, #12]
		break;
 8001fc2:	e018      	b.n	8001ff6 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fd2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f022 0208 	bic.w	r2, r2, #8
 8001fe2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f022 0204 	bic.w	r2, r2, #4
 8001ff2:	60da      	str	r2, [r3, #12]
		break;
 8001ff4:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff6:	b672      	cpsid	i
}
 8001ff8:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	791b      	ldrb	r3, [r3, #4]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d110      	bne.n	8002024 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f022 0220 	bic.w	r2, r2, #32
 8002010:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	e007      	b.n	8002034 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f022 0220 	bic.w	r2, r2, #32
 8002032:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d003      	beq.n	8002044 <USART_Config+0x3c0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	795b      	ldrb	r3, [r3, #5]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d11a      	bne.n	800207a <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <USART_Config+0x430>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d103      	bne.n	8002056 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 800204e:	2025      	movs	r0, #37	; 0x25
 8002050:	f7ff fdfa 	bl	8001c48 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8002054:	e013      	b.n	800207e <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <USART_Config+0x434>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d103      	bne.n	8002068 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8002060:	2026      	movs	r0, #38	; 0x26
 8002062:	f7ff fdf1 	bl	8001c48 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8002066:	e00a      	b.n	800207e <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <USART_Config+0x438>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d105      	bne.n	800207e <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8002072:	2047      	movs	r0, #71	; 0x47
 8002074:	f7ff fde8 	bl	8001c48 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8002078:	e001      	b.n	800207e <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800207e:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002080:	b662      	cpsie	i
}
 8002082:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d00f      	beq.n	80020ac <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800209a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020aa:	60da      	str	r2, [r3, #12]
	}
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40004400 	.word	0x40004400
 80020bc:	40011400 	.word	0x40011400

080020c0 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 80020c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	4601      	mov	r1, r0
 80020cc:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 80020ce:	79f9      	ldrb	r1, [r7, #7]
 80020d0:	2000      	movs	r0, #0
 80020d2:	460a      	mov	r2, r1
 80020d4:	4603      	mov	r3, r0
 80020d6:	491f      	ldr	r1, [pc, #124]	; (8002154 <getValueBaudRate+0x94>)
 80020d8:	fb01 f003 	mul.w	r0, r1, r3
 80020dc:	2102      	movs	r1, #2
 80020de:	fb02 f101 	mul.w	r1, r2, r1
 80020e2:	4401      	add	r1, r0
 80020e4:	481b      	ldr	r0, [pc, #108]	; (8002154 <getValueBaudRate+0x94>)
 80020e6:	fba2 4500 	umull	r4, r5, r2, r0
 80020ea:	194b      	adds	r3, r1, r5
 80020ec:	461d      	mov	r5, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	2200      	movs	r2, #0
 80020f4:	4698      	mov	r8, r3
 80020f6:	4691      	mov	r9, r2
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe fdca 	bl	8000c98 <__aeabi_ldivmod>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4613      	mov	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <getValueBaudRate+0x98>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0b5b      	lsrs	r3, r3, #13
 8002116:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f242 7210 	movw	r2, #10000	; 0x2710
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <getValueBaudRate+0x98>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	0a5b      	lsrs	r3, r3, #9
 8002136:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	b29b      	uxth	r3, r3
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	b29a      	uxth	r2, r3
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	813b      	strh	r3, [r7, #8]

    return value;
 8002148:	893b      	ldrh	r3, [r7, #8]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002154:	540be400 	.word	0x540be400
 8002158:	d1b71759 	.word	0xd1b71759

0800215c <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	return auxRxData;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <getRxData+0x14>)
 8002162:	781b      	ldrb	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000278 	.word	0x20000278

08002174 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d10c      	bne.n	80021a0 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 800219e:	e005      	b.n	80021ac <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
	__NOP();
 80021bc:	bf00      	nop
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	__NOP();
 80021cc:	bf00      	nop
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80021dc:	4b37      	ldr	r3, [pc, #220]	; (80022bc <USART1_IRQHandler+0xe4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <USART1_IRQHandler+0xe4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <USART1_IRQHandler+0xe8>)
 80021f4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80021f6:	f7ff ffdf 	bl	80021b8 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80021fa:	e05d      	b.n	80022b8 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80021fc:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <USART1_IRQHandler+0xe4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d055      	beq.n	80022b6 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800220a:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <USART1_IRQHandler+0xec>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10b      	bne.n	800222a <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <USART1_IRQHandler+0xf0>)
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <USART1_IRQHandler+0xe4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <USART1_IRQHandler+0xe4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ffa6 	bl	8002174 <interruptionTX>
}
 8002228:	e046      	b.n	80022b8 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <USART1_IRQHandler+0xec>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d142      	bne.n	80022b8 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <USART1_IRQHandler+0xf4>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <USART1_IRQHandler+0xf8>)
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <USART1_IRQHandler+0xf4>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <USART1_IRQHandler+0xf8>)
 8002248:	5c9a      	ldrb	r2, [r3, r2]
 800224a:	4b1c      	ldr	r3, [pc, #112]	; (80022bc <USART1_IRQHandler+0xe4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
				posChar++;
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <USART1_IRQHandler+0xf4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <USART1_IRQHandler+0xf4>)
 800225a:	701a      	strb	r2, [r3, #0]
}
 800225c:	e02c      	b.n	80022b8 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800225e:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <USART1_IRQHandler+0xfc>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <USART1_IRQHandler+0x100>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d215      	bcs.n	8002296 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <USART1_IRQHandler+0xfc>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	2364      	movs	r3, #100	; 0x64
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4a19      	ldr	r2, [pc, #100]	; (80022dc <USART1_IRQHandler+0x104>)
 8002278:	4413      	add	r3, r2
 800227a:	4619      	mov	r1, r3
 800227c:	4814      	ldr	r0, [pc, #80]	; (80022d0 <USART1_IRQHandler+0xf8>)
 800227e:	f000 ffe9 	bl	8003254 <siprintf>
					posChar = 0;
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <USART1_IRQHandler+0xf4>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <USART1_IRQHandler+0xfc>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <USART1_IRQHandler+0xfc>)
 8002292:	701a      	strb	r2, [r3, #0]
}
 8002294:	e010      	b.n	80022b8 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <USART1_IRQHandler+0xe4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff69 	bl	8002174 <interruptionTX>
					posChar = 0;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <USART1_IRQHandler+0xf4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <USART1_IRQHandler+0xfc>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <USART1_IRQHandler+0x100>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
}
 80022b4:	e000      	b.n	80022b8 <USART1_IRQHandler+0xe0>
		__NOP();
 80022b6:	bf00      	nop
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	2000026c 	.word	0x2000026c
 80022c0:	20000278 	.word	0x20000278
 80022c4:	20000ab3 	.word	0x20000ab3
 80022c8:	20000279 	.word	0x20000279
 80022cc:	20000ab2 	.word	0x20000ab2
 80022d0:	2000027c 	.word	0x2000027c
 80022d4:	20000ab1 	.word	0x20000ab1
 80022d8:	20000ab0 	.word	0x20000ab0
 80022dc:	200002e0 	.word	0x200002e0

080022e0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 80022e4:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <USART2_IRQHandler+0xe4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <USART2_IRQHandler+0xe4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <USART2_IRQHandler+0xe8>)
 80022fc:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 80022fe:	f7fe ff9b 	bl	8001238 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8002302:	e05d      	b.n	80023c0 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8002304:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <USART2_IRQHandler+0xe4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230e:	2b00      	cmp	r3, #0
 8002310:	d055      	beq.n	80023be <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <USART2_IRQHandler+0xec>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10b      	bne.n	8002332 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <USART2_IRQHandler+0xf0>)
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <USART2_IRQHandler+0xe4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <USART2_IRQHandler+0xe4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff22 	bl	8002174 <interruptionTX>
}
 8002330:	e046      	b.n	80023c0 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8002332:	4b26      	ldr	r3, [pc, #152]	; (80023cc <USART2_IRQHandler+0xec>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d142      	bne.n	80023c0 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <USART2_IRQHandler+0xf4>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <USART2_IRQHandler+0xf8>)
 8002342:	5c9b      	ldrb	r3, [r3, r2]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00e      	beq.n	8002366 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <USART2_IRQHandler+0xf4>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <USART2_IRQHandler+0xf8>)
 8002350:	5c9a      	ldrb	r2, [r3, r2]
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <USART2_IRQHandler+0xe4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
				posChar++;
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <USART2_IRQHandler+0xf4>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	3301      	adds	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <USART2_IRQHandler+0xf4>)
 8002362:	701a      	strb	r2, [r3, #0]
}
 8002364:	e02c      	b.n	80023c0 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <USART2_IRQHandler+0xfc>)
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <USART2_IRQHandler+0x100>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d215      	bcs.n	800239e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <USART2_IRQHandler+0xfc>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	2364      	movs	r3, #100	; 0x64
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <USART2_IRQHandler+0x104>)
 8002380:	4413      	add	r3, r2
 8002382:	4619      	mov	r1, r3
 8002384:	4814      	ldr	r0, [pc, #80]	; (80023d8 <USART2_IRQHandler+0xf8>)
 8002386:	f000 ff65 	bl	8003254 <siprintf>
					posChar = 0;
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <USART2_IRQHandler+0xf4>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <USART2_IRQHandler+0xfc>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b10      	ldr	r3, [pc, #64]	; (80023dc <USART2_IRQHandler+0xfc>)
 800239a:	701a      	strb	r2, [r3, #0]
}
 800239c:	e010      	b.n	80023c0 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <USART2_IRQHandler+0xe4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fee5 	bl	8002174 <interruptionTX>
					posChar = 0;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <USART2_IRQHandler+0xf4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <USART2_IRQHandler+0xfc>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <USART2_IRQHandler+0x100>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
}
 80023bc:	e000      	b.n	80023c0 <USART2_IRQHandler+0xe0>
		__NOP();
 80023be:	bf00      	nop
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000270 	.word	0x20000270
 80023c8:	20000278 	.word	0x20000278
 80023cc:	20000ab3 	.word	0x20000ab3
 80023d0:	20000279 	.word	0x20000279
 80023d4:	20000ab2 	.word	0x20000ab2
 80023d8:	2000027c 	.word	0x2000027c
 80023dc:	20000ab1 	.word	0x20000ab1
 80023e0:	20000ab0 	.word	0x20000ab0
 80023e4:	200002e0 	.word	0x200002e0

080023e8 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 80023ec:	4b37      	ldr	r3, [pc, #220]	; (80024cc <USART6_IRQHandler+0xe4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0320 	and.w	r3, r3, #32
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 80023fa:	4b34      	ldr	r3, [pc, #208]	; (80024cc <USART6_IRQHandler+0xe4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <USART6_IRQHandler+0xe8>)
 8002404:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8002406:	f7ff fedf 	bl	80021c8 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800240a:	e05d      	b.n	80024c8 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <USART6_IRQHandler+0xe4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d055      	beq.n	80024c6 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800241a:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <USART6_IRQHandler+0xec>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8002422:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <USART6_IRQHandler+0xf0>)
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <USART6_IRQHandler+0xe4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <USART6_IRQHandler+0xe4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fe9e 	bl	8002174 <interruptionTX>
}
 8002438:	e046      	b.n	80024c8 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <USART6_IRQHandler+0xec>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d142      	bne.n	80024c8 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <USART6_IRQHandler+0xf4>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <USART6_IRQHandler+0xf8>)
 800244a:	5c9b      	ldrb	r3, [r3, r2]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <USART6_IRQHandler+0xf4>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	4b22      	ldr	r3, [pc, #136]	; (80024e0 <USART6_IRQHandler+0xf8>)
 8002458:	5c9a      	ldrb	r2, [r3, r2]
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <USART6_IRQHandler+0xe4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
				posChar++;
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <USART6_IRQHandler+0xf4>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <USART6_IRQHandler+0xf4>)
 800246a:	701a      	strb	r2, [r3, #0]
}
 800246c:	e02c      	b.n	80024c8 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <USART6_IRQHandler+0xfc>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <USART6_IRQHandler+0x100>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d215      	bcs.n	80024a6 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <USART6_IRQHandler+0xfc>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	2364      	movs	r3, #100	; 0x64
 8002482:	fb02 f303 	mul.w	r3, r2, r3
 8002486:	4a19      	ldr	r2, [pc, #100]	; (80024ec <USART6_IRQHandler+0x104>)
 8002488:	4413      	add	r3, r2
 800248a:	4619      	mov	r1, r3
 800248c:	4814      	ldr	r0, [pc, #80]	; (80024e0 <USART6_IRQHandler+0xf8>)
 800248e:	f000 fee1 	bl	8003254 <siprintf>
					posChar = 0;
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <USART6_IRQHandler+0xf4>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <USART6_IRQHandler+0xfc>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <USART6_IRQHandler+0xfc>)
 80024a2:	701a      	strb	r2, [r3, #0]
}
 80024a4:	e010      	b.n	80024c8 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <USART6_IRQHandler+0xe4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2100      	movs	r1, #0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fe61 	bl	8002174 <interruptionTX>
					posChar = 0;
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <USART6_IRQHandler+0xf4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <USART6_IRQHandler+0xfc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <USART6_IRQHandler+0x100>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
}
 80024c4:	e000      	b.n	80024c8 <USART6_IRQHandler+0xe0>
		__NOP();
 80024c6:	bf00      	nop
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000274 	.word	0x20000274
 80024d0:	20000278 	.word	0x20000278
 80024d4:	20000ab3 	.word	0x20000ab3
 80024d8:	20000279 	.word	0x20000279
 80024dc:	20000ab2 	.word	0x20000ab2
 80024e0:	2000027c 	.word	0x2000027c
 80024e4:	20000ab1 	.word	0x20000ab1
 80024e8:	20000ab0 	.word	0x20000ab0
 80024ec:	200002e0 	.word	0x200002e0

080024f0 <__errno>:
 80024f0:	4b01      	ldr	r3, [pc, #4]	; (80024f8 <__errno+0x8>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000004 	.word	0x20000004

080024fc <__libc_init_array>:
 80024fc:	b570      	push	{r4, r5, r6, lr}
 80024fe:	4d0d      	ldr	r5, [pc, #52]	; (8002534 <__libc_init_array+0x38>)
 8002500:	4c0d      	ldr	r4, [pc, #52]	; (8002538 <__libc_init_array+0x3c>)
 8002502:	1b64      	subs	r4, r4, r5
 8002504:	10a4      	asrs	r4, r4, #2
 8002506:	2600      	movs	r6, #0
 8002508:	42a6      	cmp	r6, r4
 800250a:	d109      	bne.n	8002520 <__libc_init_array+0x24>
 800250c:	4d0b      	ldr	r5, [pc, #44]	; (800253c <__libc_init_array+0x40>)
 800250e:	4c0c      	ldr	r4, [pc, #48]	; (8002540 <__libc_init_array+0x44>)
 8002510:	f004 fc92 	bl	8006e38 <_init>
 8002514:	1b64      	subs	r4, r4, r5
 8002516:	10a4      	asrs	r4, r4, #2
 8002518:	2600      	movs	r6, #0
 800251a:	42a6      	cmp	r6, r4
 800251c:	d105      	bne.n	800252a <__libc_init_array+0x2e>
 800251e:	bd70      	pop	{r4, r5, r6, pc}
 8002520:	f855 3b04 	ldr.w	r3, [r5], #4
 8002524:	4798      	blx	r3
 8002526:	3601      	adds	r6, #1
 8002528:	e7ee      	b.n	8002508 <__libc_init_array+0xc>
 800252a:	f855 3b04 	ldr.w	r3, [r5], #4
 800252e:	4798      	blx	r3
 8002530:	3601      	adds	r6, #1
 8002532:	e7f2      	b.n	800251a <__libc_init_array+0x1e>
 8002534:	080072fc 	.word	0x080072fc
 8002538:	080072fc 	.word	0x080072fc
 800253c:	080072fc 	.word	0x080072fc
 8002540:	08007300 	.word	0x08007300

08002544 <memset>:
 8002544:	4402      	add	r2, r0
 8002546:	4603      	mov	r3, r0
 8002548:	4293      	cmp	r3, r2
 800254a:	d100      	bne.n	800254e <memset+0xa>
 800254c:	4770      	bx	lr
 800254e:	f803 1b01 	strb.w	r1, [r3], #1
 8002552:	e7f9      	b.n	8002548 <memset+0x4>

08002554 <__cvt>:
 8002554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002558:	ec55 4b10 	vmov	r4, r5, d0
 800255c:	2d00      	cmp	r5, #0
 800255e:	460e      	mov	r6, r1
 8002560:	4619      	mov	r1, r3
 8002562:	462b      	mov	r3, r5
 8002564:	bfbb      	ittet	lt
 8002566:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800256a:	461d      	movlt	r5, r3
 800256c:	2300      	movge	r3, #0
 800256e:	232d      	movlt	r3, #45	; 0x2d
 8002570:	700b      	strb	r3, [r1, #0]
 8002572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002574:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002578:	4691      	mov	r9, r2
 800257a:	f023 0820 	bic.w	r8, r3, #32
 800257e:	bfbc      	itt	lt
 8002580:	4622      	movlt	r2, r4
 8002582:	4614      	movlt	r4, r2
 8002584:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002588:	d005      	beq.n	8002596 <__cvt+0x42>
 800258a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800258e:	d100      	bne.n	8002592 <__cvt+0x3e>
 8002590:	3601      	adds	r6, #1
 8002592:	2102      	movs	r1, #2
 8002594:	e000      	b.n	8002598 <__cvt+0x44>
 8002596:	2103      	movs	r1, #3
 8002598:	ab03      	add	r3, sp, #12
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	ab02      	add	r3, sp, #8
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	ec45 4b10 	vmov	d0, r4, r5
 80025a4:	4653      	mov	r3, sl
 80025a6:	4632      	mov	r2, r6
 80025a8:	f001 fdae 	bl	8004108 <_dtoa_r>
 80025ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80025b0:	4607      	mov	r7, r0
 80025b2:	d102      	bne.n	80025ba <__cvt+0x66>
 80025b4:	f019 0f01 	tst.w	r9, #1
 80025b8:	d022      	beq.n	8002600 <__cvt+0xac>
 80025ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80025be:	eb07 0906 	add.w	r9, r7, r6
 80025c2:	d110      	bne.n	80025e6 <__cvt+0x92>
 80025c4:	783b      	ldrb	r3, [r7, #0]
 80025c6:	2b30      	cmp	r3, #48	; 0x30
 80025c8:	d10a      	bne.n	80025e0 <__cvt+0x8c>
 80025ca:	2200      	movs	r2, #0
 80025cc:	2300      	movs	r3, #0
 80025ce:	4620      	mov	r0, r4
 80025d0:	4629      	mov	r1, r5
 80025d2:	f7fe fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80025d6:	b918      	cbnz	r0, 80025e0 <__cvt+0x8c>
 80025d8:	f1c6 0601 	rsb	r6, r6, #1
 80025dc:	f8ca 6000 	str.w	r6, [sl]
 80025e0:	f8da 3000 	ldr.w	r3, [sl]
 80025e4:	4499      	add	r9, r3
 80025e6:	2200      	movs	r2, #0
 80025e8:	2300      	movs	r3, #0
 80025ea:	4620      	mov	r0, r4
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7fe fa73 	bl	8000ad8 <__aeabi_dcmpeq>
 80025f2:	b108      	cbz	r0, 80025f8 <__cvt+0xa4>
 80025f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80025f8:	2230      	movs	r2, #48	; 0x30
 80025fa:	9b03      	ldr	r3, [sp, #12]
 80025fc:	454b      	cmp	r3, r9
 80025fe:	d307      	bcc.n	8002610 <__cvt+0xbc>
 8002600:	9b03      	ldr	r3, [sp, #12]
 8002602:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002604:	1bdb      	subs	r3, r3, r7
 8002606:	4638      	mov	r0, r7
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	b004      	add	sp, #16
 800260c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002610:	1c59      	adds	r1, r3, #1
 8002612:	9103      	str	r1, [sp, #12]
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	e7f0      	b.n	80025fa <__cvt+0xa6>

08002618 <__exponent>:
 8002618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800261a:	4603      	mov	r3, r0
 800261c:	2900      	cmp	r1, #0
 800261e:	bfb8      	it	lt
 8002620:	4249      	neglt	r1, r1
 8002622:	f803 2b02 	strb.w	r2, [r3], #2
 8002626:	bfb4      	ite	lt
 8002628:	222d      	movlt	r2, #45	; 0x2d
 800262a:	222b      	movge	r2, #43	; 0x2b
 800262c:	2909      	cmp	r1, #9
 800262e:	7042      	strb	r2, [r0, #1]
 8002630:	dd2a      	ble.n	8002688 <__exponent+0x70>
 8002632:	f10d 0407 	add.w	r4, sp, #7
 8002636:	46a4      	mov	ip, r4
 8002638:	270a      	movs	r7, #10
 800263a:	46a6      	mov	lr, r4
 800263c:	460a      	mov	r2, r1
 800263e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002642:	fb07 1516 	mls	r5, r7, r6, r1
 8002646:	3530      	adds	r5, #48	; 0x30
 8002648:	2a63      	cmp	r2, #99	; 0x63
 800264a:	f104 34ff 	add.w	r4, r4, #4294967295
 800264e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002652:	4631      	mov	r1, r6
 8002654:	dcf1      	bgt.n	800263a <__exponent+0x22>
 8002656:	3130      	adds	r1, #48	; 0x30
 8002658:	f1ae 0502 	sub.w	r5, lr, #2
 800265c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002660:	1c44      	adds	r4, r0, #1
 8002662:	4629      	mov	r1, r5
 8002664:	4561      	cmp	r1, ip
 8002666:	d30a      	bcc.n	800267e <__exponent+0x66>
 8002668:	f10d 0209 	add.w	r2, sp, #9
 800266c:	eba2 020e 	sub.w	r2, r2, lr
 8002670:	4565      	cmp	r5, ip
 8002672:	bf88      	it	hi
 8002674:	2200      	movhi	r2, #0
 8002676:	4413      	add	r3, r2
 8002678:	1a18      	subs	r0, r3, r0
 800267a:	b003      	add	sp, #12
 800267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002682:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002686:	e7ed      	b.n	8002664 <__exponent+0x4c>
 8002688:	2330      	movs	r3, #48	; 0x30
 800268a:	3130      	adds	r1, #48	; 0x30
 800268c:	7083      	strb	r3, [r0, #2]
 800268e:	70c1      	strb	r1, [r0, #3]
 8002690:	1d03      	adds	r3, r0, #4
 8002692:	e7f1      	b.n	8002678 <__exponent+0x60>

08002694 <_printf_float>:
 8002694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002698:	ed2d 8b02 	vpush	{d8}
 800269c:	b08d      	sub	sp, #52	; 0x34
 800269e:	460c      	mov	r4, r1
 80026a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80026a4:	4616      	mov	r6, r2
 80026a6:	461f      	mov	r7, r3
 80026a8:	4605      	mov	r5, r0
 80026aa:	f002 fe8b 	bl	80053c4 <_localeconv_r>
 80026ae:	f8d0 a000 	ldr.w	sl, [r0]
 80026b2:	4650      	mov	r0, sl
 80026b4:	f7fd fd94 	bl	80001e0 <strlen>
 80026b8:	2300      	movs	r3, #0
 80026ba:	930a      	str	r3, [sp, #40]	; 0x28
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	9305      	str	r3, [sp, #20]
 80026c0:	f8d8 3000 	ldr.w	r3, [r8]
 80026c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80026c8:	3307      	adds	r3, #7
 80026ca:	f023 0307 	bic.w	r3, r3, #7
 80026ce:	f103 0208 	add.w	r2, r3, #8
 80026d2:	f8c8 2000 	str.w	r2, [r8]
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80026de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80026e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80026e6:	9307      	str	r3, [sp, #28]
 80026e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80026ec:	ee08 0a10 	vmov	s16, r0
 80026f0:	4b9f      	ldr	r3, [pc, #636]	; (8002970 <_printf_float+0x2dc>)
 80026f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80026f6:	f04f 32ff 	mov.w	r2, #4294967295
 80026fa:	f7fe fa1f 	bl	8000b3c <__aeabi_dcmpun>
 80026fe:	bb88      	cbnz	r0, 8002764 <_printf_float+0xd0>
 8002700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002704:	4b9a      	ldr	r3, [pc, #616]	; (8002970 <_printf_float+0x2dc>)
 8002706:	f04f 32ff 	mov.w	r2, #4294967295
 800270a:	f7fe f9f9 	bl	8000b00 <__aeabi_dcmple>
 800270e:	bb48      	cbnz	r0, 8002764 <_printf_float+0xd0>
 8002710:	2200      	movs	r2, #0
 8002712:	2300      	movs	r3, #0
 8002714:	4640      	mov	r0, r8
 8002716:	4649      	mov	r1, r9
 8002718:	f7fe f9e8 	bl	8000aec <__aeabi_dcmplt>
 800271c:	b110      	cbz	r0, 8002724 <_printf_float+0x90>
 800271e:	232d      	movs	r3, #45	; 0x2d
 8002720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002724:	4b93      	ldr	r3, [pc, #588]	; (8002974 <_printf_float+0x2e0>)
 8002726:	4894      	ldr	r0, [pc, #592]	; (8002978 <_printf_float+0x2e4>)
 8002728:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800272c:	bf94      	ite	ls
 800272e:	4698      	movls	r8, r3
 8002730:	4680      	movhi	r8, r0
 8002732:	2303      	movs	r3, #3
 8002734:	6123      	str	r3, [r4, #16]
 8002736:	9b05      	ldr	r3, [sp, #20]
 8002738:	f023 0204 	bic.w	r2, r3, #4
 800273c:	6022      	str	r2, [r4, #0]
 800273e:	f04f 0900 	mov.w	r9, #0
 8002742:	9700      	str	r7, [sp, #0]
 8002744:	4633      	mov	r3, r6
 8002746:	aa0b      	add	r2, sp, #44	; 0x2c
 8002748:	4621      	mov	r1, r4
 800274a:	4628      	mov	r0, r5
 800274c:	f000 f9d8 	bl	8002b00 <_printf_common>
 8002750:	3001      	adds	r0, #1
 8002752:	f040 8090 	bne.w	8002876 <_printf_float+0x1e2>
 8002756:	f04f 30ff 	mov.w	r0, #4294967295
 800275a:	b00d      	add	sp, #52	; 0x34
 800275c:	ecbd 8b02 	vpop	{d8}
 8002760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	4640      	mov	r0, r8
 800276a:	4649      	mov	r1, r9
 800276c:	f7fe f9e6 	bl	8000b3c <__aeabi_dcmpun>
 8002770:	b140      	cbz	r0, 8002784 <_printf_float+0xf0>
 8002772:	464b      	mov	r3, r9
 8002774:	2b00      	cmp	r3, #0
 8002776:	bfbc      	itt	lt
 8002778:	232d      	movlt	r3, #45	; 0x2d
 800277a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800277e:	487f      	ldr	r0, [pc, #508]	; (800297c <_printf_float+0x2e8>)
 8002780:	4b7f      	ldr	r3, [pc, #508]	; (8002980 <_printf_float+0x2ec>)
 8002782:	e7d1      	b.n	8002728 <_printf_float+0x94>
 8002784:	6863      	ldr	r3, [r4, #4]
 8002786:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800278a:	9206      	str	r2, [sp, #24]
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	d13f      	bne.n	8002810 <_printf_float+0x17c>
 8002790:	2306      	movs	r3, #6
 8002792:	6063      	str	r3, [r4, #4]
 8002794:	9b05      	ldr	r3, [sp, #20]
 8002796:	6861      	ldr	r1, [r4, #4]
 8002798:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800279c:	2300      	movs	r3, #0
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	ab0a      	add	r3, sp, #40	; 0x28
 80027a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80027a6:	ab09      	add	r3, sp, #36	; 0x24
 80027a8:	ec49 8b10 	vmov	d0, r8, r9
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	6022      	str	r2, [r4, #0]
 80027b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80027b4:	4628      	mov	r0, r5
 80027b6:	f7ff fecd 	bl	8002554 <__cvt>
 80027ba:	9b06      	ldr	r3, [sp, #24]
 80027bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80027be:	2b47      	cmp	r3, #71	; 0x47
 80027c0:	4680      	mov	r8, r0
 80027c2:	d108      	bne.n	80027d6 <_printf_float+0x142>
 80027c4:	1cc8      	adds	r0, r1, #3
 80027c6:	db02      	blt.n	80027ce <_printf_float+0x13a>
 80027c8:	6863      	ldr	r3, [r4, #4]
 80027ca:	4299      	cmp	r1, r3
 80027cc:	dd41      	ble.n	8002852 <_printf_float+0x1be>
 80027ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80027d2:	fa5f fb8b 	uxtb.w	fp, fp
 80027d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80027da:	d820      	bhi.n	800281e <_printf_float+0x18a>
 80027dc:	3901      	subs	r1, #1
 80027de:	465a      	mov	r2, fp
 80027e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80027e4:	9109      	str	r1, [sp, #36]	; 0x24
 80027e6:	f7ff ff17 	bl	8002618 <__exponent>
 80027ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027ec:	1813      	adds	r3, r2, r0
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	4681      	mov	r9, r0
 80027f2:	6123      	str	r3, [r4, #16]
 80027f4:	dc02      	bgt.n	80027fc <_printf_float+0x168>
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	07d2      	lsls	r2, r2, #31
 80027fa:	d501      	bpl.n	8002800 <_printf_float+0x16c>
 80027fc:	3301      	adds	r3, #1
 80027fe:	6123      	str	r3, [r4, #16]
 8002800:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002804:	2b00      	cmp	r3, #0
 8002806:	d09c      	beq.n	8002742 <_printf_float+0xae>
 8002808:	232d      	movs	r3, #45	; 0x2d
 800280a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800280e:	e798      	b.n	8002742 <_printf_float+0xae>
 8002810:	9a06      	ldr	r2, [sp, #24]
 8002812:	2a47      	cmp	r2, #71	; 0x47
 8002814:	d1be      	bne.n	8002794 <_printf_float+0x100>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1bc      	bne.n	8002794 <_printf_float+0x100>
 800281a:	2301      	movs	r3, #1
 800281c:	e7b9      	b.n	8002792 <_printf_float+0xfe>
 800281e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002822:	d118      	bne.n	8002856 <_printf_float+0x1c2>
 8002824:	2900      	cmp	r1, #0
 8002826:	6863      	ldr	r3, [r4, #4]
 8002828:	dd0b      	ble.n	8002842 <_printf_float+0x1ae>
 800282a:	6121      	str	r1, [r4, #16]
 800282c:	b913      	cbnz	r3, 8002834 <_printf_float+0x1a0>
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	07d0      	lsls	r0, r2, #31
 8002832:	d502      	bpl.n	800283a <_printf_float+0x1a6>
 8002834:	3301      	adds	r3, #1
 8002836:	440b      	add	r3, r1
 8002838:	6123      	str	r3, [r4, #16]
 800283a:	65a1      	str	r1, [r4, #88]	; 0x58
 800283c:	f04f 0900 	mov.w	r9, #0
 8002840:	e7de      	b.n	8002800 <_printf_float+0x16c>
 8002842:	b913      	cbnz	r3, 800284a <_printf_float+0x1b6>
 8002844:	6822      	ldr	r2, [r4, #0]
 8002846:	07d2      	lsls	r2, r2, #31
 8002848:	d501      	bpl.n	800284e <_printf_float+0x1ba>
 800284a:	3302      	adds	r3, #2
 800284c:	e7f4      	b.n	8002838 <_printf_float+0x1a4>
 800284e:	2301      	movs	r3, #1
 8002850:	e7f2      	b.n	8002838 <_printf_float+0x1a4>
 8002852:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002858:	4299      	cmp	r1, r3
 800285a:	db05      	blt.n	8002868 <_printf_float+0x1d4>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	6121      	str	r1, [r4, #16]
 8002860:	07d8      	lsls	r0, r3, #31
 8002862:	d5ea      	bpl.n	800283a <_printf_float+0x1a6>
 8002864:	1c4b      	adds	r3, r1, #1
 8002866:	e7e7      	b.n	8002838 <_printf_float+0x1a4>
 8002868:	2900      	cmp	r1, #0
 800286a:	bfd4      	ite	le
 800286c:	f1c1 0202 	rsble	r2, r1, #2
 8002870:	2201      	movgt	r2, #1
 8002872:	4413      	add	r3, r2
 8002874:	e7e0      	b.n	8002838 <_printf_float+0x1a4>
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	055a      	lsls	r2, r3, #21
 800287a:	d407      	bmi.n	800288c <_printf_float+0x1f8>
 800287c:	6923      	ldr	r3, [r4, #16]
 800287e:	4642      	mov	r2, r8
 8002880:	4631      	mov	r1, r6
 8002882:	4628      	mov	r0, r5
 8002884:	47b8      	blx	r7
 8002886:	3001      	adds	r0, #1
 8002888:	d12c      	bne.n	80028e4 <_printf_float+0x250>
 800288a:	e764      	b.n	8002756 <_printf_float+0xc2>
 800288c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002890:	f240 80e0 	bls.w	8002a54 <_printf_float+0x3c0>
 8002894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002898:	2200      	movs	r2, #0
 800289a:	2300      	movs	r3, #0
 800289c:	f7fe f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d034      	beq.n	800290e <_printf_float+0x27a>
 80028a4:	4a37      	ldr	r2, [pc, #220]	; (8002984 <_printf_float+0x2f0>)
 80028a6:	2301      	movs	r3, #1
 80028a8:	4631      	mov	r1, r6
 80028aa:	4628      	mov	r0, r5
 80028ac:	47b8      	blx	r7
 80028ae:	3001      	adds	r0, #1
 80028b0:	f43f af51 	beq.w	8002756 <_printf_float+0xc2>
 80028b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028b8:	429a      	cmp	r2, r3
 80028ba:	db02      	blt.n	80028c2 <_printf_float+0x22e>
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	07d8      	lsls	r0, r3, #31
 80028c0:	d510      	bpl.n	80028e4 <_printf_float+0x250>
 80028c2:	ee18 3a10 	vmov	r3, s16
 80028c6:	4652      	mov	r2, sl
 80028c8:	4631      	mov	r1, r6
 80028ca:	4628      	mov	r0, r5
 80028cc:	47b8      	blx	r7
 80028ce:	3001      	adds	r0, #1
 80028d0:	f43f af41 	beq.w	8002756 <_printf_float+0xc2>
 80028d4:	f04f 0800 	mov.w	r8, #0
 80028d8:	f104 091a 	add.w	r9, r4, #26
 80028dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	4543      	cmp	r3, r8
 80028e2:	dc09      	bgt.n	80028f8 <_printf_float+0x264>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	079b      	lsls	r3, r3, #30
 80028e8:	f100 8105 	bmi.w	8002af6 <_printf_float+0x462>
 80028ec:	68e0      	ldr	r0, [r4, #12]
 80028ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028f0:	4298      	cmp	r0, r3
 80028f2:	bfb8      	it	lt
 80028f4:	4618      	movlt	r0, r3
 80028f6:	e730      	b.n	800275a <_printf_float+0xc6>
 80028f8:	2301      	movs	r3, #1
 80028fa:	464a      	mov	r2, r9
 80028fc:	4631      	mov	r1, r6
 80028fe:	4628      	mov	r0, r5
 8002900:	47b8      	blx	r7
 8002902:	3001      	adds	r0, #1
 8002904:	f43f af27 	beq.w	8002756 <_printf_float+0xc2>
 8002908:	f108 0801 	add.w	r8, r8, #1
 800290c:	e7e6      	b.n	80028dc <_printf_float+0x248>
 800290e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002910:	2b00      	cmp	r3, #0
 8002912:	dc39      	bgt.n	8002988 <_printf_float+0x2f4>
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <_printf_float+0x2f0>)
 8002916:	2301      	movs	r3, #1
 8002918:	4631      	mov	r1, r6
 800291a:	4628      	mov	r0, r5
 800291c:	47b8      	blx	r7
 800291e:	3001      	adds	r0, #1
 8002920:	f43f af19 	beq.w	8002756 <_printf_float+0xc2>
 8002924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002928:	4313      	orrs	r3, r2
 800292a:	d102      	bne.n	8002932 <_printf_float+0x29e>
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	07d9      	lsls	r1, r3, #31
 8002930:	d5d8      	bpl.n	80028e4 <_printf_float+0x250>
 8002932:	ee18 3a10 	vmov	r3, s16
 8002936:	4652      	mov	r2, sl
 8002938:	4631      	mov	r1, r6
 800293a:	4628      	mov	r0, r5
 800293c:	47b8      	blx	r7
 800293e:	3001      	adds	r0, #1
 8002940:	f43f af09 	beq.w	8002756 <_printf_float+0xc2>
 8002944:	f04f 0900 	mov.w	r9, #0
 8002948:	f104 0a1a 	add.w	sl, r4, #26
 800294c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800294e:	425b      	negs	r3, r3
 8002950:	454b      	cmp	r3, r9
 8002952:	dc01      	bgt.n	8002958 <_printf_float+0x2c4>
 8002954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002956:	e792      	b.n	800287e <_printf_float+0x1ea>
 8002958:	2301      	movs	r3, #1
 800295a:	4652      	mov	r2, sl
 800295c:	4631      	mov	r1, r6
 800295e:	4628      	mov	r0, r5
 8002960:	47b8      	blx	r7
 8002962:	3001      	adds	r0, #1
 8002964:	f43f aef7 	beq.w	8002756 <_printf_float+0xc2>
 8002968:	f109 0901 	add.w	r9, r9, #1
 800296c:	e7ee      	b.n	800294c <_printf_float+0x2b8>
 800296e:	bf00      	nop
 8002970:	7fefffff 	.word	0x7fefffff
 8002974:	08006e54 	.word	0x08006e54
 8002978:	08006e58 	.word	0x08006e58
 800297c:	08006e60 	.word	0x08006e60
 8002980:	08006e5c 	.word	0x08006e5c
 8002984:	08006e64 	.word	0x08006e64
 8002988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800298a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800298c:	429a      	cmp	r2, r3
 800298e:	bfa8      	it	ge
 8002990:	461a      	movge	r2, r3
 8002992:	2a00      	cmp	r2, #0
 8002994:	4691      	mov	r9, r2
 8002996:	dc37      	bgt.n	8002a08 <_printf_float+0x374>
 8002998:	f04f 0b00 	mov.w	fp, #0
 800299c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80029a0:	f104 021a 	add.w	r2, r4, #26
 80029a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029a6:	9305      	str	r3, [sp, #20]
 80029a8:	eba3 0309 	sub.w	r3, r3, r9
 80029ac:	455b      	cmp	r3, fp
 80029ae:	dc33      	bgt.n	8002a18 <_printf_float+0x384>
 80029b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029b4:	429a      	cmp	r2, r3
 80029b6:	db3b      	blt.n	8002a30 <_printf_float+0x39c>
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	07da      	lsls	r2, r3, #31
 80029bc:	d438      	bmi.n	8002a30 <_printf_float+0x39c>
 80029be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029c0:	9a05      	ldr	r2, [sp, #20]
 80029c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80029c4:	1a9a      	subs	r2, r3, r2
 80029c6:	eba3 0901 	sub.w	r9, r3, r1
 80029ca:	4591      	cmp	r9, r2
 80029cc:	bfa8      	it	ge
 80029ce:	4691      	movge	r9, r2
 80029d0:	f1b9 0f00 	cmp.w	r9, #0
 80029d4:	dc35      	bgt.n	8002a42 <_printf_float+0x3ae>
 80029d6:	f04f 0800 	mov.w	r8, #0
 80029da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80029de:	f104 0a1a 	add.w	sl, r4, #26
 80029e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	eba3 0309 	sub.w	r3, r3, r9
 80029ec:	4543      	cmp	r3, r8
 80029ee:	f77f af79 	ble.w	80028e4 <_printf_float+0x250>
 80029f2:	2301      	movs	r3, #1
 80029f4:	4652      	mov	r2, sl
 80029f6:	4631      	mov	r1, r6
 80029f8:	4628      	mov	r0, r5
 80029fa:	47b8      	blx	r7
 80029fc:	3001      	adds	r0, #1
 80029fe:	f43f aeaa 	beq.w	8002756 <_printf_float+0xc2>
 8002a02:	f108 0801 	add.w	r8, r8, #1
 8002a06:	e7ec      	b.n	80029e2 <_printf_float+0x34e>
 8002a08:	4613      	mov	r3, r2
 8002a0a:	4631      	mov	r1, r6
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	4628      	mov	r0, r5
 8002a10:	47b8      	blx	r7
 8002a12:	3001      	adds	r0, #1
 8002a14:	d1c0      	bne.n	8002998 <_printf_float+0x304>
 8002a16:	e69e      	b.n	8002756 <_printf_float+0xc2>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	4631      	mov	r1, r6
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	9205      	str	r2, [sp, #20]
 8002a20:	47b8      	blx	r7
 8002a22:	3001      	adds	r0, #1
 8002a24:	f43f ae97 	beq.w	8002756 <_printf_float+0xc2>
 8002a28:	9a05      	ldr	r2, [sp, #20]
 8002a2a:	f10b 0b01 	add.w	fp, fp, #1
 8002a2e:	e7b9      	b.n	80029a4 <_printf_float+0x310>
 8002a30:	ee18 3a10 	vmov	r3, s16
 8002a34:	4652      	mov	r2, sl
 8002a36:	4631      	mov	r1, r6
 8002a38:	4628      	mov	r0, r5
 8002a3a:	47b8      	blx	r7
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	d1be      	bne.n	80029be <_printf_float+0x32a>
 8002a40:	e689      	b.n	8002756 <_printf_float+0xc2>
 8002a42:	9a05      	ldr	r2, [sp, #20]
 8002a44:	464b      	mov	r3, r9
 8002a46:	4442      	add	r2, r8
 8002a48:	4631      	mov	r1, r6
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	47b8      	blx	r7
 8002a4e:	3001      	adds	r0, #1
 8002a50:	d1c1      	bne.n	80029d6 <_printf_float+0x342>
 8002a52:	e680      	b.n	8002756 <_printf_float+0xc2>
 8002a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a56:	2a01      	cmp	r2, #1
 8002a58:	dc01      	bgt.n	8002a5e <_printf_float+0x3ca>
 8002a5a:	07db      	lsls	r3, r3, #31
 8002a5c:	d538      	bpl.n	8002ad0 <_printf_float+0x43c>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	4642      	mov	r2, r8
 8002a62:	4631      	mov	r1, r6
 8002a64:	4628      	mov	r0, r5
 8002a66:	47b8      	blx	r7
 8002a68:	3001      	adds	r0, #1
 8002a6a:	f43f ae74 	beq.w	8002756 <_printf_float+0xc2>
 8002a6e:	ee18 3a10 	vmov	r3, s16
 8002a72:	4652      	mov	r2, sl
 8002a74:	4631      	mov	r1, r6
 8002a76:	4628      	mov	r0, r5
 8002a78:	47b8      	blx	r7
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	f43f ae6b 	beq.w	8002756 <_printf_float+0xc2>
 8002a80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a84:	2200      	movs	r2, #0
 8002a86:	2300      	movs	r3, #0
 8002a88:	f7fe f826 	bl	8000ad8 <__aeabi_dcmpeq>
 8002a8c:	b9d8      	cbnz	r0, 8002ac6 <_printf_float+0x432>
 8002a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a90:	f108 0201 	add.w	r2, r8, #1
 8002a94:	3b01      	subs	r3, #1
 8002a96:	4631      	mov	r1, r6
 8002a98:	4628      	mov	r0, r5
 8002a9a:	47b8      	blx	r7
 8002a9c:	3001      	adds	r0, #1
 8002a9e:	d10e      	bne.n	8002abe <_printf_float+0x42a>
 8002aa0:	e659      	b.n	8002756 <_printf_float+0xc2>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	4652      	mov	r2, sl
 8002aa6:	4631      	mov	r1, r6
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	47b8      	blx	r7
 8002aac:	3001      	adds	r0, #1
 8002aae:	f43f ae52 	beq.w	8002756 <_printf_float+0xc2>
 8002ab2:	f108 0801 	add.w	r8, r8, #1
 8002ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	4543      	cmp	r3, r8
 8002abc:	dcf1      	bgt.n	8002aa2 <_printf_float+0x40e>
 8002abe:	464b      	mov	r3, r9
 8002ac0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002ac4:	e6dc      	b.n	8002880 <_printf_float+0x1ec>
 8002ac6:	f04f 0800 	mov.w	r8, #0
 8002aca:	f104 0a1a 	add.w	sl, r4, #26
 8002ace:	e7f2      	b.n	8002ab6 <_printf_float+0x422>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	4642      	mov	r2, r8
 8002ad4:	e7df      	b.n	8002a96 <_printf_float+0x402>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	464a      	mov	r2, r9
 8002ada:	4631      	mov	r1, r6
 8002adc:	4628      	mov	r0, r5
 8002ade:	47b8      	blx	r7
 8002ae0:	3001      	adds	r0, #1
 8002ae2:	f43f ae38 	beq.w	8002756 <_printf_float+0xc2>
 8002ae6:	f108 0801 	add.w	r8, r8, #1
 8002aea:	68e3      	ldr	r3, [r4, #12]
 8002aec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002aee:	1a5b      	subs	r3, r3, r1
 8002af0:	4543      	cmp	r3, r8
 8002af2:	dcf0      	bgt.n	8002ad6 <_printf_float+0x442>
 8002af4:	e6fa      	b.n	80028ec <_printf_float+0x258>
 8002af6:	f04f 0800 	mov.w	r8, #0
 8002afa:	f104 0919 	add.w	r9, r4, #25
 8002afe:	e7f4      	b.n	8002aea <_printf_float+0x456>

08002b00 <_printf_common>:
 8002b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b04:	4616      	mov	r6, r2
 8002b06:	4699      	mov	r9, r3
 8002b08:	688a      	ldr	r2, [r1, #8]
 8002b0a:	690b      	ldr	r3, [r1, #16]
 8002b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b10:	4293      	cmp	r3, r2
 8002b12:	bfb8      	it	lt
 8002b14:	4613      	movlt	r3, r2
 8002b16:	6033      	str	r3, [r6, #0]
 8002b18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b1c:	4607      	mov	r7, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	b10a      	cbz	r2, 8002b26 <_printf_common+0x26>
 8002b22:	3301      	adds	r3, #1
 8002b24:	6033      	str	r3, [r6, #0]
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	0699      	lsls	r1, r3, #26
 8002b2a:	bf42      	ittt	mi
 8002b2c:	6833      	ldrmi	r3, [r6, #0]
 8002b2e:	3302      	addmi	r3, #2
 8002b30:	6033      	strmi	r3, [r6, #0]
 8002b32:	6825      	ldr	r5, [r4, #0]
 8002b34:	f015 0506 	ands.w	r5, r5, #6
 8002b38:	d106      	bne.n	8002b48 <_printf_common+0x48>
 8002b3a:	f104 0a19 	add.w	sl, r4, #25
 8002b3e:	68e3      	ldr	r3, [r4, #12]
 8002b40:	6832      	ldr	r2, [r6, #0]
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	42ab      	cmp	r3, r5
 8002b46:	dc26      	bgt.n	8002b96 <_printf_common+0x96>
 8002b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b4c:	1e13      	subs	r3, r2, #0
 8002b4e:	6822      	ldr	r2, [r4, #0]
 8002b50:	bf18      	it	ne
 8002b52:	2301      	movne	r3, #1
 8002b54:	0692      	lsls	r2, r2, #26
 8002b56:	d42b      	bmi.n	8002bb0 <_printf_common+0xb0>
 8002b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	4638      	mov	r0, r7
 8002b60:	47c0      	blx	r8
 8002b62:	3001      	adds	r0, #1
 8002b64:	d01e      	beq.n	8002ba4 <_printf_common+0xa4>
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	68e5      	ldr	r5, [r4, #12]
 8002b6a:	6832      	ldr	r2, [r6, #0]
 8002b6c:	f003 0306 	and.w	r3, r3, #6
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	bf08      	it	eq
 8002b74:	1aad      	subeq	r5, r5, r2
 8002b76:	68a3      	ldr	r3, [r4, #8]
 8002b78:	6922      	ldr	r2, [r4, #16]
 8002b7a:	bf0c      	ite	eq
 8002b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b80:	2500      	movne	r5, #0
 8002b82:	4293      	cmp	r3, r2
 8002b84:	bfc4      	itt	gt
 8002b86:	1a9b      	subgt	r3, r3, r2
 8002b88:	18ed      	addgt	r5, r5, r3
 8002b8a:	2600      	movs	r6, #0
 8002b8c:	341a      	adds	r4, #26
 8002b8e:	42b5      	cmp	r5, r6
 8002b90:	d11a      	bne.n	8002bc8 <_printf_common+0xc8>
 8002b92:	2000      	movs	r0, #0
 8002b94:	e008      	b.n	8002ba8 <_printf_common+0xa8>
 8002b96:	2301      	movs	r3, #1
 8002b98:	4652      	mov	r2, sl
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	47c0      	blx	r8
 8002ba0:	3001      	adds	r0, #1
 8002ba2:	d103      	bne.n	8002bac <_printf_common+0xac>
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bac:	3501      	adds	r5, #1
 8002bae:	e7c6      	b.n	8002b3e <_printf_common+0x3e>
 8002bb0:	18e1      	adds	r1, r4, r3
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	2030      	movs	r0, #48	; 0x30
 8002bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002bba:	4422      	add	r2, r4
 8002bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	e7c7      	b.n	8002b58 <_printf_common+0x58>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	4622      	mov	r2, r4
 8002bcc:	4649      	mov	r1, r9
 8002bce:	4638      	mov	r0, r7
 8002bd0:	47c0      	blx	r8
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	d0e6      	beq.n	8002ba4 <_printf_common+0xa4>
 8002bd6:	3601      	adds	r6, #1
 8002bd8:	e7d9      	b.n	8002b8e <_printf_common+0x8e>
	...

08002bdc <_printf_i>:
 8002bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002be0:	7e0f      	ldrb	r7, [r1, #24]
 8002be2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002be4:	2f78      	cmp	r7, #120	; 0x78
 8002be6:	4691      	mov	r9, r2
 8002be8:	4680      	mov	r8, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	469a      	mov	sl, r3
 8002bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002bf2:	d807      	bhi.n	8002c04 <_printf_i+0x28>
 8002bf4:	2f62      	cmp	r7, #98	; 0x62
 8002bf6:	d80a      	bhi.n	8002c0e <_printf_i+0x32>
 8002bf8:	2f00      	cmp	r7, #0
 8002bfa:	f000 80d8 	beq.w	8002dae <_printf_i+0x1d2>
 8002bfe:	2f58      	cmp	r7, #88	; 0x58
 8002c00:	f000 80a3 	beq.w	8002d4a <_printf_i+0x16e>
 8002c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c0c:	e03a      	b.n	8002c84 <_printf_i+0xa8>
 8002c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c12:	2b15      	cmp	r3, #21
 8002c14:	d8f6      	bhi.n	8002c04 <_printf_i+0x28>
 8002c16:	a101      	add	r1, pc, #4	; (adr r1, 8002c1c <_printf_i+0x40>)
 8002c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c1c:	08002c75 	.word	0x08002c75
 8002c20:	08002c89 	.word	0x08002c89
 8002c24:	08002c05 	.word	0x08002c05
 8002c28:	08002c05 	.word	0x08002c05
 8002c2c:	08002c05 	.word	0x08002c05
 8002c30:	08002c05 	.word	0x08002c05
 8002c34:	08002c89 	.word	0x08002c89
 8002c38:	08002c05 	.word	0x08002c05
 8002c3c:	08002c05 	.word	0x08002c05
 8002c40:	08002c05 	.word	0x08002c05
 8002c44:	08002c05 	.word	0x08002c05
 8002c48:	08002d95 	.word	0x08002d95
 8002c4c:	08002cb9 	.word	0x08002cb9
 8002c50:	08002d77 	.word	0x08002d77
 8002c54:	08002c05 	.word	0x08002c05
 8002c58:	08002c05 	.word	0x08002c05
 8002c5c:	08002db7 	.word	0x08002db7
 8002c60:	08002c05 	.word	0x08002c05
 8002c64:	08002cb9 	.word	0x08002cb9
 8002c68:	08002c05 	.word	0x08002c05
 8002c6c:	08002c05 	.word	0x08002c05
 8002c70:	08002d7f 	.word	0x08002d7f
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	602a      	str	r2, [r5, #0]
 8002c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0a3      	b.n	8002dd0 <_printf_i+0x1f4>
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	6829      	ldr	r1, [r5, #0]
 8002c8c:	0606      	lsls	r6, r0, #24
 8002c8e:	f101 0304 	add.w	r3, r1, #4
 8002c92:	d50a      	bpl.n	8002caa <_printf_i+0xce>
 8002c94:	680e      	ldr	r6, [r1, #0]
 8002c96:	602b      	str	r3, [r5, #0]
 8002c98:	2e00      	cmp	r6, #0
 8002c9a:	da03      	bge.n	8002ca4 <_printf_i+0xc8>
 8002c9c:	232d      	movs	r3, #45	; 0x2d
 8002c9e:	4276      	negs	r6, r6
 8002ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ca4:	485e      	ldr	r0, [pc, #376]	; (8002e20 <_printf_i+0x244>)
 8002ca6:	230a      	movs	r3, #10
 8002ca8:	e019      	b.n	8002cde <_printf_i+0x102>
 8002caa:	680e      	ldr	r6, [r1, #0]
 8002cac:	602b      	str	r3, [r5, #0]
 8002cae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cb2:	bf18      	it	ne
 8002cb4:	b236      	sxthne	r6, r6
 8002cb6:	e7ef      	b.n	8002c98 <_printf_i+0xbc>
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	6820      	ldr	r0, [r4, #0]
 8002cbc:	1d19      	adds	r1, r3, #4
 8002cbe:	6029      	str	r1, [r5, #0]
 8002cc0:	0601      	lsls	r1, r0, #24
 8002cc2:	d501      	bpl.n	8002cc8 <_printf_i+0xec>
 8002cc4:	681e      	ldr	r6, [r3, #0]
 8002cc6:	e002      	b.n	8002cce <_printf_i+0xf2>
 8002cc8:	0646      	lsls	r6, r0, #25
 8002cca:	d5fb      	bpl.n	8002cc4 <_printf_i+0xe8>
 8002ccc:	881e      	ldrh	r6, [r3, #0]
 8002cce:	4854      	ldr	r0, [pc, #336]	; (8002e20 <_printf_i+0x244>)
 8002cd0:	2f6f      	cmp	r7, #111	; 0x6f
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2308      	moveq	r3, #8
 8002cd6:	230a      	movne	r3, #10
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002cde:	6865      	ldr	r5, [r4, #4]
 8002ce0:	60a5      	str	r5, [r4, #8]
 8002ce2:	2d00      	cmp	r5, #0
 8002ce4:	bfa2      	ittt	ge
 8002ce6:	6821      	ldrge	r1, [r4, #0]
 8002ce8:	f021 0104 	bicge.w	r1, r1, #4
 8002cec:	6021      	strge	r1, [r4, #0]
 8002cee:	b90e      	cbnz	r6, 8002cf4 <_printf_i+0x118>
 8002cf0:	2d00      	cmp	r5, #0
 8002cf2:	d04d      	beq.n	8002d90 <_printf_i+0x1b4>
 8002cf4:	4615      	mov	r5, r2
 8002cf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8002cfa:	fb03 6711 	mls	r7, r3, r1, r6
 8002cfe:	5dc7      	ldrb	r7, [r0, r7]
 8002d00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d04:	4637      	mov	r7, r6
 8002d06:	42bb      	cmp	r3, r7
 8002d08:	460e      	mov	r6, r1
 8002d0a:	d9f4      	bls.n	8002cf6 <_printf_i+0x11a>
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d10b      	bne.n	8002d28 <_printf_i+0x14c>
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	07de      	lsls	r6, r3, #31
 8002d14:	d508      	bpl.n	8002d28 <_printf_i+0x14c>
 8002d16:	6923      	ldr	r3, [r4, #16]
 8002d18:	6861      	ldr	r1, [r4, #4]
 8002d1a:	4299      	cmp	r1, r3
 8002d1c:	bfde      	ittt	le
 8002d1e:	2330      	movle	r3, #48	; 0x30
 8002d20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d28:	1b52      	subs	r2, r2, r5
 8002d2a:	6122      	str	r2, [r4, #16]
 8002d2c:	f8cd a000 	str.w	sl, [sp]
 8002d30:	464b      	mov	r3, r9
 8002d32:	aa03      	add	r2, sp, #12
 8002d34:	4621      	mov	r1, r4
 8002d36:	4640      	mov	r0, r8
 8002d38:	f7ff fee2 	bl	8002b00 <_printf_common>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d14c      	bne.n	8002dda <_printf_i+0x1fe>
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	b004      	add	sp, #16
 8002d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4a:	4835      	ldr	r0, [pc, #212]	; (8002e20 <_printf_i+0x244>)
 8002d4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d50:	6829      	ldr	r1, [r5, #0]
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d58:	6029      	str	r1, [r5, #0]
 8002d5a:	061d      	lsls	r5, r3, #24
 8002d5c:	d514      	bpl.n	8002d88 <_printf_i+0x1ac>
 8002d5e:	07df      	lsls	r7, r3, #31
 8002d60:	bf44      	itt	mi
 8002d62:	f043 0320 	orrmi.w	r3, r3, #32
 8002d66:	6023      	strmi	r3, [r4, #0]
 8002d68:	b91e      	cbnz	r6, 8002d72 <_printf_i+0x196>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	f023 0320 	bic.w	r3, r3, #32
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	2310      	movs	r3, #16
 8002d74:	e7b0      	b.n	8002cd8 <_printf_i+0xfc>
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	f043 0320 	orr.w	r3, r3, #32
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	2378      	movs	r3, #120	; 0x78
 8002d80:	4828      	ldr	r0, [pc, #160]	; (8002e24 <_printf_i+0x248>)
 8002d82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d86:	e7e3      	b.n	8002d50 <_printf_i+0x174>
 8002d88:	0659      	lsls	r1, r3, #25
 8002d8a:	bf48      	it	mi
 8002d8c:	b2b6      	uxthmi	r6, r6
 8002d8e:	e7e6      	b.n	8002d5e <_printf_i+0x182>
 8002d90:	4615      	mov	r5, r2
 8002d92:	e7bb      	b.n	8002d0c <_printf_i+0x130>
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	6826      	ldr	r6, [r4, #0]
 8002d98:	6961      	ldr	r1, [r4, #20]
 8002d9a:	1d18      	adds	r0, r3, #4
 8002d9c:	6028      	str	r0, [r5, #0]
 8002d9e:	0635      	lsls	r5, r6, #24
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	d501      	bpl.n	8002da8 <_printf_i+0x1cc>
 8002da4:	6019      	str	r1, [r3, #0]
 8002da6:	e002      	b.n	8002dae <_printf_i+0x1d2>
 8002da8:	0670      	lsls	r0, r6, #25
 8002daa:	d5fb      	bpl.n	8002da4 <_printf_i+0x1c8>
 8002dac:	8019      	strh	r1, [r3, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	6123      	str	r3, [r4, #16]
 8002db2:	4615      	mov	r5, r2
 8002db4:	e7ba      	b.n	8002d2c <_printf_i+0x150>
 8002db6:	682b      	ldr	r3, [r5, #0]
 8002db8:	1d1a      	adds	r2, r3, #4
 8002dba:	602a      	str	r2, [r5, #0]
 8002dbc:	681d      	ldr	r5, [r3, #0]
 8002dbe:	6862      	ldr	r2, [r4, #4]
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f7fd fa14 	bl	80001f0 <memchr>
 8002dc8:	b108      	cbz	r0, 8002dce <_printf_i+0x1f2>
 8002dca:	1b40      	subs	r0, r0, r5
 8002dcc:	6060      	str	r0, [r4, #4]
 8002dce:	6863      	ldr	r3, [r4, #4]
 8002dd0:	6123      	str	r3, [r4, #16]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dd8:	e7a8      	b.n	8002d2c <_printf_i+0x150>
 8002dda:	6923      	ldr	r3, [r4, #16]
 8002ddc:	462a      	mov	r2, r5
 8002dde:	4649      	mov	r1, r9
 8002de0:	4640      	mov	r0, r8
 8002de2:	47d0      	blx	sl
 8002de4:	3001      	adds	r0, #1
 8002de6:	d0ab      	beq.n	8002d40 <_printf_i+0x164>
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	079b      	lsls	r3, r3, #30
 8002dec:	d413      	bmi.n	8002e16 <_printf_i+0x23a>
 8002dee:	68e0      	ldr	r0, [r4, #12]
 8002df0:	9b03      	ldr	r3, [sp, #12]
 8002df2:	4298      	cmp	r0, r3
 8002df4:	bfb8      	it	lt
 8002df6:	4618      	movlt	r0, r3
 8002df8:	e7a4      	b.n	8002d44 <_printf_i+0x168>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	4632      	mov	r2, r6
 8002dfe:	4649      	mov	r1, r9
 8002e00:	4640      	mov	r0, r8
 8002e02:	47d0      	blx	sl
 8002e04:	3001      	adds	r0, #1
 8002e06:	d09b      	beq.n	8002d40 <_printf_i+0x164>
 8002e08:	3501      	adds	r5, #1
 8002e0a:	68e3      	ldr	r3, [r4, #12]
 8002e0c:	9903      	ldr	r1, [sp, #12]
 8002e0e:	1a5b      	subs	r3, r3, r1
 8002e10:	42ab      	cmp	r3, r5
 8002e12:	dcf2      	bgt.n	8002dfa <_printf_i+0x21e>
 8002e14:	e7eb      	b.n	8002dee <_printf_i+0x212>
 8002e16:	2500      	movs	r5, #0
 8002e18:	f104 0619 	add.w	r6, r4, #25
 8002e1c:	e7f5      	b.n	8002e0a <_printf_i+0x22e>
 8002e1e:	bf00      	nop
 8002e20:	08006e66 	.word	0x08006e66
 8002e24:	08006e77 	.word	0x08006e77

08002e28 <_scanf_float>:
 8002e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	4617      	mov	r7, r2
 8002e30:	9303      	str	r3, [sp, #12]
 8002e32:	688b      	ldr	r3, [r1, #8]
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8002e3a:	bf83      	ittte	hi
 8002e3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002e40:	195b      	addhi	r3, r3, r5
 8002e42:	9302      	strhi	r3, [sp, #8]
 8002e44:	2300      	movls	r3, #0
 8002e46:	bf86      	itte	hi
 8002e48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8002e4c:	608b      	strhi	r3, [r1, #8]
 8002e4e:	9302      	strls	r3, [sp, #8]
 8002e50:	680b      	ldr	r3, [r1, #0]
 8002e52:	468b      	mov	fp, r1
 8002e54:	2500      	movs	r5, #0
 8002e56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8002e5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8002e5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8002e62:	4680      	mov	r8, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	465e      	mov	r6, fp
 8002e68:	46aa      	mov	sl, r5
 8002e6a:	46a9      	mov	r9, r5
 8002e6c:	9501      	str	r5, [sp, #4]
 8002e6e:	68a2      	ldr	r2, [r4, #8]
 8002e70:	b152      	cbz	r2, 8002e88 <_scanf_float+0x60>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b4e      	cmp	r3, #78	; 0x4e
 8002e78:	d864      	bhi.n	8002f44 <_scanf_float+0x11c>
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d83c      	bhi.n	8002ef8 <_scanf_float+0xd0>
 8002e7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8002e82:	b2c8      	uxtb	r0, r1
 8002e84:	280e      	cmp	r0, #14
 8002e86:	d93a      	bls.n	8002efe <_scanf_float+0xd6>
 8002e88:	f1b9 0f00 	cmp.w	r9, #0
 8002e8c:	d003      	beq.n	8002e96 <_scanf_float+0x6e>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e94:	6023      	str	r3, [r4, #0]
 8002e96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002e9a:	f1ba 0f01 	cmp.w	sl, #1
 8002e9e:	f200 8113 	bhi.w	80030c8 <_scanf_float+0x2a0>
 8002ea2:	455e      	cmp	r6, fp
 8002ea4:	f200 8105 	bhi.w	80030b2 <_scanf_float+0x28a>
 8002ea8:	2501      	movs	r5, #1
 8002eaa:	4628      	mov	r0, r5
 8002eac:	b007      	add	sp, #28
 8002eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002eb6:	2a0d      	cmp	r2, #13
 8002eb8:	d8e6      	bhi.n	8002e88 <_scanf_float+0x60>
 8002eba:	a101      	add	r1, pc, #4	; (adr r1, 8002ec0 <_scanf_float+0x98>)
 8002ebc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002ec0:	08002fff 	.word	0x08002fff
 8002ec4:	08002e89 	.word	0x08002e89
 8002ec8:	08002e89 	.word	0x08002e89
 8002ecc:	08002e89 	.word	0x08002e89
 8002ed0:	0800305f 	.word	0x0800305f
 8002ed4:	08003037 	.word	0x08003037
 8002ed8:	08002e89 	.word	0x08002e89
 8002edc:	08002e89 	.word	0x08002e89
 8002ee0:	0800300d 	.word	0x0800300d
 8002ee4:	08002e89 	.word	0x08002e89
 8002ee8:	08002e89 	.word	0x08002e89
 8002eec:	08002e89 	.word	0x08002e89
 8002ef0:	08002e89 	.word	0x08002e89
 8002ef4:	08002fc5 	.word	0x08002fc5
 8002ef8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002efc:	e7db      	b.n	8002eb6 <_scanf_float+0x8e>
 8002efe:	290e      	cmp	r1, #14
 8002f00:	d8c2      	bhi.n	8002e88 <_scanf_float+0x60>
 8002f02:	a001      	add	r0, pc, #4	; (adr r0, 8002f08 <_scanf_float+0xe0>)
 8002f04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002f08:	08002fb7 	.word	0x08002fb7
 8002f0c:	08002e89 	.word	0x08002e89
 8002f10:	08002fb7 	.word	0x08002fb7
 8002f14:	0800304b 	.word	0x0800304b
 8002f18:	08002e89 	.word	0x08002e89
 8002f1c:	08002f65 	.word	0x08002f65
 8002f20:	08002fa1 	.word	0x08002fa1
 8002f24:	08002fa1 	.word	0x08002fa1
 8002f28:	08002fa1 	.word	0x08002fa1
 8002f2c:	08002fa1 	.word	0x08002fa1
 8002f30:	08002fa1 	.word	0x08002fa1
 8002f34:	08002fa1 	.word	0x08002fa1
 8002f38:	08002fa1 	.word	0x08002fa1
 8002f3c:	08002fa1 	.word	0x08002fa1
 8002f40:	08002fa1 	.word	0x08002fa1
 8002f44:	2b6e      	cmp	r3, #110	; 0x6e
 8002f46:	d809      	bhi.n	8002f5c <_scanf_float+0x134>
 8002f48:	2b60      	cmp	r3, #96	; 0x60
 8002f4a:	d8b2      	bhi.n	8002eb2 <_scanf_float+0x8a>
 8002f4c:	2b54      	cmp	r3, #84	; 0x54
 8002f4e:	d077      	beq.n	8003040 <_scanf_float+0x218>
 8002f50:	2b59      	cmp	r3, #89	; 0x59
 8002f52:	d199      	bne.n	8002e88 <_scanf_float+0x60>
 8002f54:	2d07      	cmp	r5, #7
 8002f56:	d197      	bne.n	8002e88 <_scanf_float+0x60>
 8002f58:	2508      	movs	r5, #8
 8002f5a:	e029      	b.n	8002fb0 <_scanf_float+0x188>
 8002f5c:	2b74      	cmp	r3, #116	; 0x74
 8002f5e:	d06f      	beq.n	8003040 <_scanf_float+0x218>
 8002f60:	2b79      	cmp	r3, #121	; 0x79
 8002f62:	e7f6      	b.n	8002f52 <_scanf_float+0x12a>
 8002f64:	6821      	ldr	r1, [r4, #0]
 8002f66:	05c8      	lsls	r0, r1, #23
 8002f68:	d51a      	bpl.n	8002fa0 <_scanf_float+0x178>
 8002f6a:	9b02      	ldr	r3, [sp, #8]
 8002f6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002f70:	6021      	str	r1, [r4, #0]
 8002f72:	f109 0901 	add.w	r9, r9, #1
 8002f76:	b11b      	cbz	r3, 8002f80 <_scanf_float+0x158>
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	3201      	adds	r2, #1
 8002f7c:	9302      	str	r3, [sp, #8]
 8002f7e:	60a2      	str	r2, [r4, #8]
 8002f80:	68a3      	ldr	r3, [r4, #8]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	60a3      	str	r3, [r4, #8]
 8002f86:	6923      	ldr	r3, [r4, #16]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	6123      	str	r3, [r4, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	f340 8084 	ble.w	80030a0 <_scanf_float+0x278>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	e766      	b.n	8002e6e <_scanf_float+0x46>
 8002fa0:	eb1a 0f05 	cmn.w	sl, r5
 8002fa4:	f47f af70 	bne.w	8002e88 <_scanf_float+0x60>
 8002fa8:	6822      	ldr	r2, [r4, #0]
 8002faa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8002fae:	6022      	str	r2, [r4, #0]
 8002fb0:	f806 3b01 	strb.w	r3, [r6], #1
 8002fb4:	e7e4      	b.n	8002f80 <_scanf_float+0x158>
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	0610      	lsls	r0, r2, #24
 8002fba:	f57f af65 	bpl.w	8002e88 <_scanf_float+0x60>
 8002fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc2:	e7f4      	b.n	8002fae <_scanf_float+0x186>
 8002fc4:	f1ba 0f00 	cmp.w	sl, #0
 8002fc8:	d10e      	bne.n	8002fe8 <_scanf_float+0x1c0>
 8002fca:	f1b9 0f00 	cmp.w	r9, #0
 8002fce:	d10e      	bne.n	8002fee <_scanf_float+0x1c6>
 8002fd0:	6822      	ldr	r2, [r4, #0]
 8002fd2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8002fd6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002fda:	d108      	bne.n	8002fee <_scanf_float+0x1c6>
 8002fdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8002fe0:	6022      	str	r2, [r4, #0]
 8002fe2:	f04f 0a01 	mov.w	sl, #1
 8002fe6:	e7e3      	b.n	8002fb0 <_scanf_float+0x188>
 8002fe8:	f1ba 0f02 	cmp.w	sl, #2
 8002fec:	d055      	beq.n	800309a <_scanf_float+0x272>
 8002fee:	2d01      	cmp	r5, #1
 8002ff0:	d002      	beq.n	8002ff8 <_scanf_float+0x1d0>
 8002ff2:	2d04      	cmp	r5, #4
 8002ff4:	f47f af48 	bne.w	8002e88 <_scanf_float+0x60>
 8002ff8:	3501      	adds	r5, #1
 8002ffa:	b2ed      	uxtb	r5, r5
 8002ffc:	e7d8      	b.n	8002fb0 <_scanf_float+0x188>
 8002ffe:	f1ba 0f01 	cmp.w	sl, #1
 8003002:	f47f af41 	bne.w	8002e88 <_scanf_float+0x60>
 8003006:	f04f 0a02 	mov.w	sl, #2
 800300a:	e7d1      	b.n	8002fb0 <_scanf_float+0x188>
 800300c:	b97d      	cbnz	r5, 800302e <_scanf_float+0x206>
 800300e:	f1b9 0f00 	cmp.w	r9, #0
 8003012:	f47f af3c 	bne.w	8002e8e <_scanf_float+0x66>
 8003016:	6822      	ldr	r2, [r4, #0]
 8003018:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800301c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003020:	f47f af39 	bne.w	8002e96 <_scanf_float+0x6e>
 8003024:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003028:	6022      	str	r2, [r4, #0]
 800302a:	2501      	movs	r5, #1
 800302c:	e7c0      	b.n	8002fb0 <_scanf_float+0x188>
 800302e:	2d03      	cmp	r5, #3
 8003030:	d0e2      	beq.n	8002ff8 <_scanf_float+0x1d0>
 8003032:	2d05      	cmp	r5, #5
 8003034:	e7de      	b.n	8002ff4 <_scanf_float+0x1cc>
 8003036:	2d02      	cmp	r5, #2
 8003038:	f47f af26 	bne.w	8002e88 <_scanf_float+0x60>
 800303c:	2503      	movs	r5, #3
 800303e:	e7b7      	b.n	8002fb0 <_scanf_float+0x188>
 8003040:	2d06      	cmp	r5, #6
 8003042:	f47f af21 	bne.w	8002e88 <_scanf_float+0x60>
 8003046:	2507      	movs	r5, #7
 8003048:	e7b2      	b.n	8002fb0 <_scanf_float+0x188>
 800304a:	6822      	ldr	r2, [r4, #0]
 800304c:	0591      	lsls	r1, r2, #22
 800304e:	f57f af1b 	bpl.w	8002e88 <_scanf_float+0x60>
 8003052:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003056:	6022      	str	r2, [r4, #0]
 8003058:	f8cd 9004 	str.w	r9, [sp, #4]
 800305c:	e7a8      	b.n	8002fb0 <_scanf_float+0x188>
 800305e:	6822      	ldr	r2, [r4, #0]
 8003060:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003064:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003068:	d006      	beq.n	8003078 <_scanf_float+0x250>
 800306a:	0550      	lsls	r0, r2, #21
 800306c:	f57f af0c 	bpl.w	8002e88 <_scanf_float+0x60>
 8003070:	f1b9 0f00 	cmp.w	r9, #0
 8003074:	f43f af0f 	beq.w	8002e96 <_scanf_float+0x6e>
 8003078:	0591      	lsls	r1, r2, #22
 800307a:	bf58      	it	pl
 800307c:	9901      	ldrpl	r1, [sp, #4]
 800307e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003082:	bf58      	it	pl
 8003084:	eba9 0101 	subpl.w	r1, r9, r1
 8003088:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800308c:	bf58      	it	pl
 800308e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003092:	6022      	str	r2, [r4, #0]
 8003094:	f04f 0900 	mov.w	r9, #0
 8003098:	e78a      	b.n	8002fb0 <_scanf_float+0x188>
 800309a:	f04f 0a03 	mov.w	sl, #3
 800309e:	e787      	b.n	8002fb0 <_scanf_float+0x188>
 80030a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80030a4:	4639      	mov	r1, r7
 80030a6:	4640      	mov	r0, r8
 80030a8:	4798      	blx	r3
 80030aa:	2800      	cmp	r0, #0
 80030ac:	f43f aedf 	beq.w	8002e6e <_scanf_float+0x46>
 80030b0:	e6ea      	b.n	8002e88 <_scanf_float+0x60>
 80030b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80030b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80030ba:	463a      	mov	r2, r7
 80030bc:	4640      	mov	r0, r8
 80030be:	4798      	blx	r3
 80030c0:	6923      	ldr	r3, [r4, #16]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6123      	str	r3, [r4, #16]
 80030c6:	e6ec      	b.n	8002ea2 <_scanf_float+0x7a>
 80030c8:	1e6b      	subs	r3, r5, #1
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d825      	bhi.n	800311a <_scanf_float+0x2f2>
 80030ce:	2d02      	cmp	r5, #2
 80030d0:	d836      	bhi.n	8003140 <_scanf_float+0x318>
 80030d2:	455e      	cmp	r6, fp
 80030d4:	f67f aee8 	bls.w	8002ea8 <_scanf_float+0x80>
 80030d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80030dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80030e0:	463a      	mov	r2, r7
 80030e2:	4640      	mov	r0, r8
 80030e4:	4798      	blx	r3
 80030e6:	6923      	ldr	r3, [r4, #16]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	6123      	str	r3, [r4, #16]
 80030ec:	e7f1      	b.n	80030d2 <_scanf_float+0x2aa>
 80030ee:	9802      	ldr	r0, [sp, #8]
 80030f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80030f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80030f8:	9002      	str	r0, [sp, #8]
 80030fa:	463a      	mov	r2, r7
 80030fc:	4640      	mov	r0, r8
 80030fe:	4798      	blx	r3
 8003100:	6923      	ldr	r3, [r4, #16]
 8003102:	3b01      	subs	r3, #1
 8003104:	6123      	str	r3, [r4, #16]
 8003106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800310a:	fa5f fa8a 	uxtb.w	sl, sl
 800310e:	f1ba 0f02 	cmp.w	sl, #2
 8003112:	d1ec      	bne.n	80030ee <_scanf_float+0x2c6>
 8003114:	3d03      	subs	r5, #3
 8003116:	b2ed      	uxtb	r5, r5
 8003118:	1b76      	subs	r6, r6, r5
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	05da      	lsls	r2, r3, #23
 800311e:	d52f      	bpl.n	8003180 <_scanf_float+0x358>
 8003120:	055b      	lsls	r3, r3, #21
 8003122:	d510      	bpl.n	8003146 <_scanf_float+0x31e>
 8003124:	455e      	cmp	r6, fp
 8003126:	f67f aebf 	bls.w	8002ea8 <_scanf_float+0x80>
 800312a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800312e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003132:	463a      	mov	r2, r7
 8003134:	4640      	mov	r0, r8
 8003136:	4798      	blx	r3
 8003138:	6923      	ldr	r3, [r4, #16]
 800313a:	3b01      	subs	r3, #1
 800313c:	6123      	str	r3, [r4, #16]
 800313e:	e7f1      	b.n	8003124 <_scanf_float+0x2fc>
 8003140:	46aa      	mov	sl, r5
 8003142:	9602      	str	r6, [sp, #8]
 8003144:	e7df      	b.n	8003106 <_scanf_float+0x2de>
 8003146:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800314a:	6923      	ldr	r3, [r4, #16]
 800314c:	2965      	cmp	r1, #101	; 0x65
 800314e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003152:	f106 35ff 	add.w	r5, r6, #4294967295
 8003156:	6123      	str	r3, [r4, #16]
 8003158:	d00c      	beq.n	8003174 <_scanf_float+0x34c>
 800315a:	2945      	cmp	r1, #69	; 0x45
 800315c:	d00a      	beq.n	8003174 <_scanf_float+0x34c>
 800315e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003162:	463a      	mov	r2, r7
 8003164:	4640      	mov	r0, r8
 8003166:	4798      	blx	r3
 8003168:	6923      	ldr	r3, [r4, #16]
 800316a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800316e:	3b01      	subs	r3, #1
 8003170:	1eb5      	subs	r5, r6, #2
 8003172:	6123      	str	r3, [r4, #16]
 8003174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003178:	463a      	mov	r2, r7
 800317a:	4640      	mov	r0, r8
 800317c:	4798      	blx	r3
 800317e:	462e      	mov	r6, r5
 8003180:	6825      	ldr	r5, [r4, #0]
 8003182:	f015 0510 	ands.w	r5, r5, #16
 8003186:	d159      	bne.n	800323c <_scanf_float+0x414>
 8003188:	7035      	strb	r5, [r6, #0]
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003194:	d11b      	bne.n	80031ce <_scanf_float+0x3a6>
 8003196:	9b01      	ldr	r3, [sp, #4]
 8003198:	454b      	cmp	r3, r9
 800319a:	eba3 0209 	sub.w	r2, r3, r9
 800319e:	d123      	bne.n	80031e8 <_scanf_float+0x3c0>
 80031a0:	2200      	movs	r2, #0
 80031a2:	4659      	mov	r1, fp
 80031a4:	4640      	mov	r0, r8
 80031a6:	f000 fe99 	bl	8003edc <_strtod_r>
 80031aa:	6822      	ldr	r2, [r4, #0]
 80031ac:	9b03      	ldr	r3, [sp, #12]
 80031ae:	f012 0f02 	tst.w	r2, #2
 80031b2:	ec57 6b10 	vmov	r6, r7, d0
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	d021      	beq.n	80031fe <_scanf_float+0x3d6>
 80031ba:	9903      	ldr	r1, [sp, #12]
 80031bc:	1d1a      	adds	r2, r3, #4
 80031be:	600a      	str	r2, [r1, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	e9c3 6700 	strd	r6, r7, [r3]
 80031c6:	68e3      	ldr	r3, [r4, #12]
 80031c8:	3301      	adds	r3, #1
 80031ca:	60e3      	str	r3, [r4, #12]
 80031cc:	e66d      	b.n	8002eaa <_scanf_float+0x82>
 80031ce:	9b04      	ldr	r3, [sp, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0e5      	beq.n	80031a0 <_scanf_float+0x378>
 80031d4:	9905      	ldr	r1, [sp, #20]
 80031d6:	230a      	movs	r3, #10
 80031d8:	462a      	mov	r2, r5
 80031da:	3101      	adds	r1, #1
 80031dc:	4640      	mov	r0, r8
 80031de:	f000 ff05 	bl	8003fec <_strtol_r>
 80031e2:	9b04      	ldr	r3, [sp, #16]
 80031e4:	9e05      	ldr	r6, [sp, #20]
 80031e6:	1ac2      	subs	r2, r0, r3
 80031e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80031ec:	429e      	cmp	r6, r3
 80031ee:	bf28      	it	cs
 80031f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80031f4:	4912      	ldr	r1, [pc, #72]	; (8003240 <_scanf_float+0x418>)
 80031f6:	4630      	mov	r0, r6
 80031f8:	f000 f82c 	bl	8003254 <siprintf>
 80031fc:	e7d0      	b.n	80031a0 <_scanf_float+0x378>
 80031fe:	9903      	ldr	r1, [sp, #12]
 8003200:	f012 0f04 	tst.w	r2, #4
 8003204:	f103 0204 	add.w	r2, r3, #4
 8003208:	600a      	str	r2, [r1, #0]
 800320a:	d1d9      	bne.n	80031c0 <_scanf_float+0x398>
 800320c:	f8d3 8000 	ldr.w	r8, [r3]
 8003210:	ee10 2a10 	vmov	r2, s0
 8003214:	ee10 0a10 	vmov	r0, s0
 8003218:	463b      	mov	r3, r7
 800321a:	4639      	mov	r1, r7
 800321c:	f7fd fc8e 	bl	8000b3c <__aeabi_dcmpun>
 8003220:	b128      	cbz	r0, 800322e <_scanf_float+0x406>
 8003222:	4808      	ldr	r0, [pc, #32]	; (8003244 <_scanf_float+0x41c>)
 8003224:	f000 f810 	bl	8003248 <nanf>
 8003228:	ed88 0a00 	vstr	s0, [r8]
 800322c:	e7cb      	b.n	80031c6 <_scanf_float+0x39e>
 800322e:	4630      	mov	r0, r6
 8003230:	4639      	mov	r1, r7
 8003232:	f7fd fce1 	bl	8000bf8 <__aeabi_d2f>
 8003236:	f8c8 0000 	str.w	r0, [r8]
 800323a:	e7c4      	b.n	80031c6 <_scanf_float+0x39e>
 800323c:	2500      	movs	r5, #0
 800323e:	e634      	b.n	8002eaa <_scanf_float+0x82>
 8003240:	08006e88 	.word	0x08006e88
 8003244:	08007290 	.word	0x08007290

08003248 <nanf>:
 8003248:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003250 <nanf+0x8>
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	7fc00000 	.word	0x7fc00000

08003254 <siprintf>:
 8003254:	b40e      	push	{r1, r2, r3}
 8003256:	b500      	push	{lr}
 8003258:	b09c      	sub	sp, #112	; 0x70
 800325a:	ab1d      	add	r3, sp, #116	; 0x74
 800325c:	9002      	str	r0, [sp, #8]
 800325e:	9006      	str	r0, [sp, #24]
 8003260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003264:	4809      	ldr	r0, [pc, #36]	; (800328c <siprintf+0x38>)
 8003266:	9107      	str	r1, [sp, #28]
 8003268:	9104      	str	r1, [sp, #16]
 800326a:	4909      	ldr	r1, [pc, #36]	; (8003290 <siprintf+0x3c>)
 800326c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003270:	9105      	str	r1, [sp, #20]
 8003272:	6800      	ldr	r0, [r0, #0]
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	a902      	add	r1, sp, #8
 8003278:	f002 fee4 	bl	8006044 <_svfiprintf_r>
 800327c:	9b02      	ldr	r3, [sp, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	b01c      	add	sp, #112	; 0x70
 8003284:	f85d eb04 	ldr.w	lr, [sp], #4
 8003288:	b003      	add	sp, #12
 800328a:	4770      	bx	lr
 800328c:	20000004 	.word	0x20000004
 8003290:	ffff0208 	.word	0xffff0208

08003294 <sulp>:
 8003294:	b570      	push	{r4, r5, r6, lr}
 8003296:	4604      	mov	r4, r0
 8003298:	460d      	mov	r5, r1
 800329a:	ec45 4b10 	vmov	d0, r4, r5
 800329e:	4616      	mov	r6, r2
 80032a0:	f002 fc2e 	bl	8005b00 <__ulp>
 80032a4:	ec51 0b10 	vmov	r0, r1, d0
 80032a8:	b17e      	cbz	r6, 80032ca <sulp+0x36>
 80032aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80032ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	dd09      	ble.n	80032ca <sulp+0x36>
 80032b6:	051b      	lsls	r3, r3, #20
 80032b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80032bc:	2400      	movs	r4, #0
 80032be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80032c2:	4622      	mov	r2, r4
 80032c4:	462b      	mov	r3, r5
 80032c6:	f7fd f99f 	bl	8000608 <__aeabi_dmul>
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	0000      	movs	r0, r0
	...

080032d0 <_strtod_l>:
 80032d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032d4:	ed2d 8b02 	vpush	{d8}
 80032d8:	b09d      	sub	sp, #116	; 0x74
 80032da:	461f      	mov	r7, r3
 80032dc:	2300      	movs	r3, #0
 80032de:	9318      	str	r3, [sp, #96]	; 0x60
 80032e0:	4ba2      	ldr	r3, [pc, #648]	; (800356c <_strtod_l+0x29c>)
 80032e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	9305      	str	r3, [sp, #20]
 80032e8:	4604      	mov	r4, r0
 80032ea:	4618      	mov	r0, r3
 80032ec:	4688      	mov	r8, r1
 80032ee:	f7fc ff77 	bl	80001e0 <strlen>
 80032f2:	f04f 0a00 	mov.w	sl, #0
 80032f6:	4605      	mov	r5, r0
 80032f8:	f04f 0b00 	mov.w	fp, #0
 80032fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	2a2b      	cmp	r2, #43	; 0x2b
 8003306:	d04e      	beq.n	80033a6 <_strtod_l+0xd6>
 8003308:	d83b      	bhi.n	8003382 <_strtod_l+0xb2>
 800330a:	2a0d      	cmp	r2, #13
 800330c:	d834      	bhi.n	8003378 <_strtod_l+0xa8>
 800330e:	2a08      	cmp	r2, #8
 8003310:	d834      	bhi.n	800337c <_strtod_l+0xac>
 8003312:	2a00      	cmp	r2, #0
 8003314:	d03e      	beq.n	8003394 <_strtod_l+0xc4>
 8003316:	2300      	movs	r3, #0
 8003318:	930a      	str	r3, [sp, #40]	; 0x28
 800331a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800331c:	7833      	ldrb	r3, [r6, #0]
 800331e:	2b30      	cmp	r3, #48	; 0x30
 8003320:	f040 80b0 	bne.w	8003484 <_strtod_l+0x1b4>
 8003324:	7873      	ldrb	r3, [r6, #1]
 8003326:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800332a:	2b58      	cmp	r3, #88	; 0x58
 800332c:	d168      	bne.n	8003400 <_strtod_l+0x130>
 800332e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	ab18      	add	r3, sp, #96	; 0x60
 8003334:	9702      	str	r7, [sp, #8]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4a8d      	ldr	r2, [pc, #564]	; (8003570 <_strtod_l+0x2a0>)
 800333a:	ab19      	add	r3, sp, #100	; 0x64
 800333c:	a917      	add	r1, sp, #92	; 0x5c
 800333e:	4620      	mov	r0, r4
 8003340:	f001 fd38 	bl	8004db4 <__gethex>
 8003344:	f010 0707 	ands.w	r7, r0, #7
 8003348:	4605      	mov	r5, r0
 800334a:	d005      	beq.n	8003358 <_strtod_l+0x88>
 800334c:	2f06      	cmp	r7, #6
 800334e:	d12c      	bne.n	80033aa <_strtod_l+0xda>
 8003350:	3601      	adds	r6, #1
 8003352:	2300      	movs	r3, #0
 8003354:	9617      	str	r6, [sp, #92]	; 0x5c
 8003356:	930a      	str	r3, [sp, #40]	; 0x28
 8003358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8590 	bne.w	8003e80 <_strtod_l+0xbb0>
 8003360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003362:	b1eb      	cbz	r3, 80033a0 <_strtod_l+0xd0>
 8003364:	4652      	mov	r2, sl
 8003366:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800336a:	ec43 2b10 	vmov	d0, r2, r3
 800336e:	b01d      	add	sp, #116	; 0x74
 8003370:	ecbd 8b02 	vpop	{d8}
 8003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003378:	2a20      	cmp	r2, #32
 800337a:	d1cc      	bne.n	8003316 <_strtod_l+0x46>
 800337c:	3301      	adds	r3, #1
 800337e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003380:	e7be      	b.n	8003300 <_strtod_l+0x30>
 8003382:	2a2d      	cmp	r2, #45	; 0x2d
 8003384:	d1c7      	bne.n	8003316 <_strtod_l+0x46>
 8003386:	2201      	movs	r2, #1
 8003388:	920a      	str	r2, [sp, #40]	; 0x28
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	9217      	str	r2, [sp, #92]	; 0x5c
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1c2      	bne.n	800331a <_strtod_l+0x4a>
 8003394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003396:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 856e 	bne.w	8003e7c <_strtod_l+0xbac>
 80033a0:	4652      	mov	r2, sl
 80033a2:	465b      	mov	r3, fp
 80033a4:	e7e1      	b.n	800336a <_strtod_l+0x9a>
 80033a6:	2200      	movs	r2, #0
 80033a8:	e7ee      	b.n	8003388 <_strtod_l+0xb8>
 80033aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80033ac:	b13a      	cbz	r2, 80033be <_strtod_l+0xee>
 80033ae:	2135      	movs	r1, #53	; 0x35
 80033b0:	a81a      	add	r0, sp, #104	; 0x68
 80033b2:	f002 fcb0 	bl	8005d16 <__copybits>
 80033b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80033b8:	4620      	mov	r0, r4
 80033ba:	f002 f86f 	bl	800549c <_Bfree>
 80033be:	3f01      	subs	r7, #1
 80033c0:	2f04      	cmp	r7, #4
 80033c2:	d806      	bhi.n	80033d2 <_strtod_l+0x102>
 80033c4:	e8df f007 	tbb	[pc, r7]
 80033c8:	1714030a 	.word	0x1714030a
 80033cc:	0a          	.byte	0x0a
 80033cd:	00          	.byte	0x00
 80033ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80033d2:	0728      	lsls	r0, r5, #28
 80033d4:	d5c0      	bpl.n	8003358 <_strtod_l+0x88>
 80033d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80033da:	e7bd      	b.n	8003358 <_strtod_l+0x88>
 80033dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80033e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80033e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80033e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80033ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80033ee:	e7f0      	b.n	80033d2 <_strtod_l+0x102>
 80033f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8003574 <_strtod_l+0x2a4>
 80033f4:	e7ed      	b.n	80033d2 <_strtod_l+0x102>
 80033f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80033fa:	f04f 3aff 	mov.w	sl, #4294967295
 80033fe:	e7e8      	b.n	80033d2 <_strtod_l+0x102>
 8003400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	9217      	str	r2, [sp, #92]	; 0x5c
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b30      	cmp	r3, #48	; 0x30
 800340a:	d0f9      	beq.n	8003400 <_strtod_l+0x130>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0a3      	beq.n	8003358 <_strtod_l+0x88>
 8003410:	2301      	movs	r3, #1
 8003412:	f04f 0900 	mov.w	r9, #0
 8003416:	9304      	str	r3, [sp, #16]
 8003418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800341a:	9308      	str	r3, [sp, #32]
 800341c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003420:	464f      	mov	r7, r9
 8003422:	220a      	movs	r2, #10
 8003424:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003426:	7806      	ldrb	r6, [r0, #0]
 8003428:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800342c:	b2d9      	uxtb	r1, r3
 800342e:	2909      	cmp	r1, #9
 8003430:	d92a      	bls.n	8003488 <_strtod_l+0x1b8>
 8003432:	9905      	ldr	r1, [sp, #20]
 8003434:	462a      	mov	r2, r5
 8003436:	f002 ff1f 	bl	8006278 <strncmp>
 800343a:	b398      	cbz	r0, 80034a4 <_strtod_l+0x1d4>
 800343c:	2000      	movs	r0, #0
 800343e:	4632      	mov	r2, r6
 8003440:	463d      	mov	r5, r7
 8003442:	9005      	str	r0, [sp, #20]
 8003444:	4603      	mov	r3, r0
 8003446:	2a65      	cmp	r2, #101	; 0x65
 8003448:	d001      	beq.n	800344e <_strtod_l+0x17e>
 800344a:	2a45      	cmp	r2, #69	; 0x45
 800344c:	d118      	bne.n	8003480 <_strtod_l+0x1b0>
 800344e:	b91d      	cbnz	r5, 8003458 <_strtod_l+0x188>
 8003450:	9a04      	ldr	r2, [sp, #16]
 8003452:	4302      	orrs	r2, r0
 8003454:	d09e      	beq.n	8003394 <_strtod_l+0xc4>
 8003456:	2500      	movs	r5, #0
 8003458:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800345c:	f108 0201 	add.w	r2, r8, #1
 8003460:	9217      	str	r2, [sp, #92]	; 0x5c
 8003462:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003466:	2a2b      	cmp	r2, #43	; 0x2b
 8003468:	d075      	beq.n	8003556 <_strtod_l+0x286>
 800346a:	2a2d      	cmp	r2, #45	; 0x2d
 800346c:	d07b      	beq.n	8003566 <_strtod_l+0x296>
 800346e:	f04f 0c00 	mov.w	ip, #0
 8003472:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003476:	2909      	cmp	r1, #9
 8003478:	f240 8082 	bls.w	8003580 <_strtod_l+0x2b0>
 800347c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003480:	2600      	movs	r6, #0
 8003482:	e09d      	b.n	80035c0 <_strtod_l+0x2f0>
 8003484:	2300      	movs	r3, #0
 8003486:	e7c4      	b.n	8003412 <_strtod_l+0x142>
 8003488:	2f08      	cmp	r7, #8
 800348a:	bfd8      	it	le
 800348c:	9907      	ldrle	r1, [sp, #28]
 800348e:	f100 0001 	add.w	r0, r0, #1
 8003492:	bfda      	itte	le
 8003494:	fb02 3301 	mlale	r3, r2, r1, r3
 8003498:	9307      	strle	r3, [sp, #28]
 800349a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800349e:	3701      	adds	r7, #1
 80034a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80034a2:	e7bf      	b.n	8003424 <_strtod_l+0x154>
 80034a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80034a6:	195a      	adds	r2, r3, r5
 80034a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80034aa:	5d5a      	ldrb	r2, [r3, r5]
 80034ac:	2f00      	cmp	r7, #0
 80034ae:	d037      	beq.n	8003520 <_strtod_l+0x250>
 80034b0:	9005      	str	r0, [sp, #20]
 80034b2:	463d      	mov	r5, r7
 80034b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d912      	bls.n	80034e2 <_strtod_l+0x212>
 80034bc:	2301      	movs	r3, #1
 80034be:	e7c2      	b.n	8003446 <_strtod_l+0x176>
 80034c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80034c6:	785a      	ldrb	r2, [r3, #1]
 80034c8:	3001      	adds	r0, #1
 80034ca:	2a30      	cmp	r2, #48	; 0x30
 80034cc:	d0f8      	beq.n	80034c0 <_strtod_l+0x1f0>
 80034ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	f200 84d9 	bhi.w	8003e8a <_strtod_l+0xbba>
 80034d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80034da:	9005      	str	r0, [sp, #20]
 80034dc:	2000      	movs	r0, #0
 80034de:	9308      	str	r3, [sp, #32]
 80034e0:	4605      	mov	r5, r0
 80034e2:	3a30      	subs	r2, #48	; 0x30
 80034e4:	f100 0301 	add.w	r3, r0, #1
 80034e8:	d014      	beq.n	8003514 <_strtod_l+0x244>
 80034ea:	9905      	ldr	r1, [sp, #20]
 80034ec:	4419      	add	r1, r3
 80034ee:	9105      	str	r1, [sp, #20]
 80034f0:	462b      	mov	r3, r5
 80034f2:	eb00 0e05 	add.w	lr, r0, r5
 80034f6:	210a      	movs	r1, #10
 80034f8:	4573      	cmp	r3, lr
 80034fa:	d113      	bne.n	8003524 <_strtod_l+0x254>
 80034fc:	182b      	adds	r3, r5, r0
 80034fe:	2b08      	cmp	r3, #8
 8003500:	f105 0501 	add.w	r5, r5, #1
 8003504:	4405      	add	r5, r0
 8003506:	dc1c      	bgt.n	8003542 <_strtod_l+0x272>
 8003508:	9907      	ldr	r1, [sp, #28]
 800350a:	230a      	movs	r3, #10
 800350c:	fb03 2301 	mla	r3, r3, r1, r2
 8003510:	9307      	str	r3, [sp, #28]
 8003512:	2300      	movs	r3, #0
 8003514:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003516:	1c51      	adds	r1, r2, #1
 8003518:	9117      	str	r1, [sp, #92]	; 0x5c
 800351a:	7852      	ldrb	r2, [r2, #1]
 800351c:	4618      	mov	r0, r3
 800351e:	e7c9      	b.n	80034b4 <_strtod_l+0x1e4>
 8003520:	4638      	mov	r0, r7
 8003522:	e7d2      	b.n	80034ca <_strtod_l+0x1fa>
 8003524:	2b08      	cmp	r3, #8
 8003526:	dc04      	bgt.n	8003532 <_strtod_l+0x262>
 8003528:	9e07      	ldr	r6, [sp, #28]
 800352a:	434e      	muls	r6, r1
 800352c:	9607      	str	r6, [sp, #28]
 800352e:	3301      	adds	r3, #1
 8003530:	e7e2      	b.n	80034f8 <_strtod_l+0x228>
 8003532:	f103 0c01 	add.w	ip, r3, #1
 8003536:	f1bc 0f10 	cmp.w	ip, #16
 800353a:	bfd8      	it	le
 800353c:	fb01 f909 	mulle.w	r9, r1, r9
 8003540:	e7f5      	b.n	800352e <_strtod_l+0x25e>
 8003542:	2d10      	cmp	r5, #16
 8003544:	bfdc      	itt	le
 8003546:	230a      	movle	r3, #10
 8003548:	fb03 2909 	mlale	r9, r3, r9, r2
 800354c:	e7e1      	b.n	8003512 <_strtod_l+0x242>
 800354e:	2300      	movs	r3, #0
 8003550:	9305      	str	r3, [sp, #20]
 8003552:	2301      	movs	r3, #1
 8003554:	e77c      	b.n	8003450 <_strtod_l+0x180>
 8003556:	f04f 0c00 	mov.w	ip, #0
 800355a:	f108 0202 	add.w	r2, r8, #2
 800355e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003560:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003564:	e785      	b.n	8003472 <_strtod_l+0x1a2>
 8003566:	f04f 0c01 	mov.w	ip, #1
 800356a:	e7f6      	b.n	800355a <_strtod_l+0x28a>
 800356c:	080070d8 	.word	0x080070d8
 8003570:	08006e90 	.word	0x08006e90
 8003574:	7ff00000 	.word	0x7ff00000
 8003578:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800357a:	1c51      	adds	r1, r2, #1
 800357c:	9117      	str	r1, [sp, #92]	; 0x5c
 800357e:	7852      	ldrb	r2, [r2, #1]
 8003580:	2a30      	cmp	r2, #48	; 0x30
 8003582:	d0f9      	beq.n	8003578 <_strtod_l+0x2a8>
 8003584:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003588:	2908      	cmp	r1, #8
 800358a:	f63f af79 	bhi.w	8003480 <_strtod_l+0x1b0>
 800358e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003592:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003594:	9206      	str	r2, [sp, #24]
 8003596:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003598:	1c51      	adds	r1, r2, #1
 800359a:	9117      	str	r1, [sp, #92]	; 0x5c
 800359c:	7852      	ldrb	r2, [r2, #1]
 800359e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80035a2:	2e09      	cmp	r6, #9
 80035a4:	d937      	bls.n	8003616 <_strtod_l+0x346>
 80035a6:	9e06      	ldr	r6, [sp, #24]
 80035a8:	1b89      	subs	r1, r1, r6
 80035aa:	2908      	cmp	r1, #8
 80035ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80035b0:	dc02      	bgt.n	80035b8 <_strtod_l+0x2e8>
 80035b2:	4576      	cmp	r6, lr
 80035b4:	bfa8      	it	ge
 80035b6:	4676      	movge	r6, lr
 80035b8:	f1bc 0f00 	cmp.w	ip, #0
 80035bc:	d000      	beq.n	80035c0 <_strtod_l+0x2f0>
 80035be:	4276      	negs	r6, r6
 80035c0:	2d00      	cmp	r5, #0
 80035c2:	d14d      	bne.n	8003660 <_strtod_l+0x390>
 80035c4:	9904      	ldr	r1, [sp, #16]
 80035c6:	4301      	orrs	r1, r0
 80035c8:	f47f aec6 	bne.w	8003358 <_strtod_l+0x88>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f47f aee1 	bne.w	8003394 <_strtod_l+0xc4>
 80035d2:	2a69      	cmp	r2, #105	; 0x69
 80035d4:	d027      	beq.n	8003626 <_strtod_l+0x356>
 80035d6:	dc24      	bgt.n	8003622 <_strtod_l+0x352>
 80035d8:	2a49      	cmp	r2, #73	; 0x49
 80035da:	d024      	beq.n	8003626 <_strtod_l+0x356>
 80035dc:	2a4e      	cmp	r2, #78	; 0x4e
 80035de:	f47f aed9 	bne.w	8003394 <_strtod_l+0xc4>
 80035e2:	499f      	ldr	r1, [pc, #636]	; (8003860 <_strtod_l+0x590>)
 80035e4:	a817      	add	r0, sp, #92	; 0x5c
 80035e6:	f001 fe3d 	bl	8005264 <__match>
 80035ea:	2800      	cmp	r0, #0
 80035ec:	f43f aed2 	beq.w	8003394 <_strtod_l+0xc4>
 80035f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b28      	cmp	r3, #40	; 0x28
 80035f6:	d12d      	bne.n	8003654 <_strtod_l+0x384>
 80035f8:	499a      	ldr	r1, [pc, #616]	; (8003864 <_strtod_l+0x594>)
 80035fa:	aa1a      	add	r2, sp, #104	; 0x68
 80035fc:	a817      	add	r0, sp, #92	; 0x5c
 80035fe:	f001 fe45 	bl	800528c <__hexnan>
 8003602:	2805      	cmp	r0, #5
 8003604:	d126      	bne.n	8003654 <_strtod_l+0x384>
 8003606:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003608:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800360c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003610:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003614:	e6a0      	b.n	8003358 <_strtod_l+0x88>
 8003616:	210a      	movs	r1, #10
 8003618:	fb01 2e0e 	mla	lr, r1, lr, r2
 800361c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003620:	e7b9      	b.n	8003596 <_strtod_l+0x2c6>
 8003622:	2a6e      	cmp	r2, #110	; 0x6e
 8003624:	e7db      	b.n	80035de <_strtod_l+0x30e>
 8003626:	4990      	ldr	r1, [pc, #576]	; (8003868 <_strtod_l+0x598>)
 8003628:	a817      	add	r0, sp, #92	; 0x5c
 800362a:	f001 fe1b 	bl	8005264 <__match>
 800362e:	2800      	cmp	r0, #0
 8003630:	f43f aeb0 	beq.w	8003394 <_strtod_l+0xc4>
 8003634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003636:	498d      	ldr	r1, [pc, #564]	; (800386c <_strtod_l+0x59c>)
 8003638:	3b01      	subs	r3, #1
 800363a:	a817      	add	r0, sp, #92	; 0x5c
 800363c:	9317      	str	r3, [sp, #92]	; 0x5c
 800363e:	f001 fe11 	bl	8005264 <__match>
 8003642:	b910      	cbnz	r0, 800364a <_strtod_l+0x37a>
 8003644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003646:	3301      	adds	r3, #1
 8003648:	9317      	str	r3, [sp, #92]	; 0x5c
 800364a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800387c <_strtod_l+0x5ac>
 800364e:	f04f 0a00 	mov.w	sl, #0
 8003652:	e681      	b.n	8003358 <_strtod_l+0x88>
 8003654:	4886      	ldr	r0, [pc, #536]	; (8003870 <_strtod_l+0x5a0>)
 8003656:	f002 fdf7 	bl	8006248 <nan>
 800365a:	ec5b ab10 	vmov	sl, fp, d0
 800365e:	e67b      	b.n	8003358 <_strtod_l+0x88>
 8003660:	9b05      	ldr	r3, [sp, #20]
 8003662:	9807      	ldr	r0, [sp, #28]
 8003664:	1af3      	subs	r3, r6, r3
 8003666:	2f00      	cmp	r7, #0
 8003668:	bf08      	it	eq
 800366a:	462f      	moveq	r7, r5
 800366c:	2d10      	cmp	r5, #16
 800366e:	9306      	str	r3, [sp, #24]
 8003670:	46a8      	mov	r8, r5
 8003672:	bfa8      	it	ge
 8003674:	f04f 0810 	movge.w	r8, #16
 8003678:	f7fc ff4c 	bl	8000514 <__aeabi_ui2d>
 800367c:	2d09      	cmp	r5, #9
 800367e:	4682      	mov	sl, r0
 8003680:	468b      	mov	fp, r1
 8003682:	dd13      	ble.n	80036ac <_strtod_l+0x3dc>
 8003684:	4b7b      	ldr	r3, [pc, #492]	; (8003874 <_strtod_l+0x5a4>)
 8003686:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800368a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800368e:	f7fc ffbb 	bl	8000608 <__aeabi_dmul>
 8003692:	4682      	mov	sl, r0
 8003694:	4648      	mov	r0, r9
 8003696:	468b      	mov	fp, r1
 8003698:	f7fc ff3c 	bl	8000514 <__aeabi_ui2d>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4650      	mov	r0, sl
 80036a2:	4659      	mov	r1, fp
 80036a4:	f7fc fdfa 	bl	800029c <__adddf3>
 80036a8:	4682      	mov	sl, r0
 80036aa:	468b      	mov	fp, r1
 80036ac:	2d0f      	cmp	r5, #15
 80036ae:	dc38      	bgt.n	8003722 <_strtod_l+0x452>
 80036b0:	9b06      	ldr	r3, [sp, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f43f ae50 	beq.w	8003358 <_strtod_l+0x88>
 80036b8:	dd24      	ble.n	8003704 <_strtod_l+0x434>
 80036ba:	2b16      	cmp	r3, #22
 80036bc:	dc0b      	bgt.n	80036d6 <_strtod_l+0x406>
 80036be:	496d      	ldr	r1, [pc, #436]	; (8003874 <_strtod_l+0x5a4>)
 80036c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80036c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036c8:	4652      	mov	r2, sl
 80036ca:	465b      	mov	r3, fp
 80036cc:	f7fc ff9c 	bl	8000608 <__aeabi_dmul>
 80036d0:	4682      	mov	sl, r0
 80036d2:	468b      	mov	fp, r1
 80036d4:	e640      	b.n	8003358 <_strtod_l+0x88>
 80036d6:	9a06      	ldr	r2, [sp, #24]
 80036d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80036dc:	4293      	cmp	r3, r2
 80036de:	db20      	blt.n	8003722 <_strtod_l+0x452>
 80036e0:	4c64      	ldr	r4, [pc, #400]	; (8003874 <_strtod_l+0x5a4>)
 80036e2:	f1c5 050f 	rsb	r5, r5, #15
 80036e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80036ea:	4652      	mov	r2, sl
 80036ec:	465b      	mov	r3, fp
 80036ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036f2:	f7fc ff89 	bl	8000608 <__aeabi_dmul>
 80036f6:	9b06      	ldr	r3, [sp, #24]
 80036f8:	1b5d      	subs	r5, r3, r5
 80036fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80036fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003702:	e7e3      	b.n	80036cc <_strtod_l+0x3fc>
 8003704:	9b06      	ldr	r3, [sp, #24]
 8003706:	3316      	adds	r3, #22
 8003708:	db0b      	blt.n	8003722 <_strtod_l+0x452>
 800370a:	9b05      	ldr	r3, [sp, #20]
 800370c:	1b9e      	subs	r6, r3, r6
 800370e:	4b59      	ldr	r3, [pc, #356]	; (8003874 <_strtod_l+0x5a4>)
 8003710:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003714:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003718:	4650      	mov	r0, sl
 800371a:	4659      	mov	r1, fp
 800371c:	f7fd f89e 	bl	800085c <__aeabi_ddiv>
 8003720:	e7d6      	b.n	80036d0 <_strtod_l+0x400>
 8003722:	9b06      	ldr	r3, [sp, #24]
 8003724:	eba5 0808 	sub.w	r8, r5, r8
 8003728:	4498      	add	r8, r3
 800372a:	f1b8 0f00 	cmp.w	r8, #0
 800372e:	dd74      	ble.n	800381a <_strtod_l+0x54a>
 8003730:	f018 030f 	ands.w	r3, r8, #15
 8003734:	d00a      	beq.n	800374c <_strtod_l+0x47c>
 8003736:	494f      	ldr	r1, [pc, #316]	; (8003874 <_strtod_l+0x5a4>)
 8003738:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800373c:	4652      	mov	r2, sl
 800373e:	465b      	mov	r3, fp
 8003740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003744:	f7fc ff60 	bl	8000608 <__aeabi_dmul>
 8003748:	4682      	mov	sl, r0
 800374a:	468b      	mov	fp, r1
 800374c:	f038 080f 	bics.w	r8, r8, #15
 8003750:	d04f      	beq.n	80037f2 <_strtod_l+0x522>
 8003752:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003756:	dd22      	ble.n	800379e <_strtod_l+0x4ce>
 8003758:	2500      	movs	r5, #0
 800375a:	462e      	mov	r6, r5
 800375c:	9507      	str	r5, [sp, #28]
 800375e:	9505      	str	r5, [sp, #20]
 8003760:	2322      	movs	r3, #34	; 0x22
 8003762:	f8df b118 	ldr.w	fp, [pc, #280]	; 800387c <_strtod_l+0x5ac>
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	f04f 0a00 	mov.w	sl, #0
 800376c:	9b07      	ldr	r3, [sp, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f43f adf2 	beq.w	8003358 <_strtod_l+0x88>
 8003774:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003776:	4620      	mov	r0, r4
 8003778:	f001 fe90 	bl	800549c <_Bfree>
 800377c:	9905      	ldr	r1, [sp, #20]
 800377e:	4620      	mov	r0, r4
 8003780:	f001 fe8c 	bl	800549c <_Bfree>
 8003784:	4631      	mov	r1, r6
 8003786:	4620      	mov	r0, r4
 8003788:	f001 fe88 	bl	800549c <_Bfree>
 800378c:	9907      	ldr	r1, [sp, #28]
 800378e:	4620      	mov	r0, r4
 8003790:	f001 fe84 	bl	800549c <_Bfree>
 8003794:	4629      	mov	r1, r5
 8003796:	4620      	mov	r0, r4
 8003798:	f001 fe80 	bl	800549c <_Bfree>
 800379c:	e5dc      	b.n	8003358 <_strtod_l+0x88>
 800379e:	4b36      	ldr	r3, [pc, #216]	; (8003878 <_strtod_l+0x5a8>)
 80037a0:	9304      	str	r3, [sp, #16]
 80037a2:	2300      	movs	r3, #0
 80037a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80037a8:	4650      	mov	r0, sl
 80037aa:	4659      	mov	r1, fp
 80037ac:	4699      	mov	r9, r3
 80037ae:	f1b8 0f01 	cmp.w	r8, #1
 80037b2:	dc21      	bgt.n	80037f8 <_strtod_l+0x528>
 80037b4:	b10b      	cbz	r3, 80037ba <_strtod_l+0x4ea>
 80037b6:	4682      	mov	sl, r0
 80037b8:	468b      	mov	fp, r1
 80037ba:	4b2f      	ldr	r3, [pc, #188]	; (8003878 <_strtod_l+0x5a8>)
 80037bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80037c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80037c4:	4652      	mov	r2, sl
 80037c6:	465b      	mov	r3, fp
 80037c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80037cc:	f7fc ff1c 	bl	8000608 <__aeabi_dmul>
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <_strtod_l+0x5ac>)
 80037d2:	460a      	mov	r2, r1
 80037d4:	400b      	ands	r3, r1
 80037d6:	492a      	ldr	r1, [pc, #168]	; (8003880 <_strtod_l+0x5b0>)
 80037d8:	428b      	cmp	r3, r1
 80037da:	4682      	mov	sl, r0
 80037dc:	d8bc      	bhi.n	8003758 <_strtod_l+0x488>
 80037de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80037e2:	428b      	cmp	r3, r1
 80037e4:	bf86      	itte	hi
 80037e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8003884 <_strtod_l+0x5b4>
 80037ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80037ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80037f2:	2300      	movs	r3, #0
 80037f4:	9304      	str	r3, [sp, #16]
 80037f6:	e084      	b.n	8003902 <_strtod_l+0x632>
 80037f8:	f018 0f01 	tst.w	r8, #1
 80037fc:	d005      	beq.n	800380a <_strtod_l+0x53a>
 80037fe:	9b04      	ldr	r3, [sp, #16]
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fc ff00 	bl	8000608 <__aeabi_dmul>
 8003808:	2301      	movs	r3, #1
 800380a:	9a04      	ldr	r2, [sp, #16]
 800380c:	3208      	adds	r2, #8
 800380e:	f109 0901 	add.w	r9, r9, #1
 8003812:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003816:	9204      	str	r2, [sp, #16]
 8003818:	e7c9      	b.n	80037ae <_strtod_l+0x4de>
 800381a:	d0ea      	beq.n	80037f2 <_strtod_l+0x522>
 800381c:	f1c8 0800 	rsb	r8, r8, #0
 8003820:	f018 020f 	ands.w	r2, r8, #15
 8003824:	d00a      	beq.n	800383c <_strtod_l+0x56c>
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <_strtod_l+0x5a4>)
 8003828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800382c:	4650      	mov	r0, sl
 800382e:	4659      	mov	r1, fp
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f7fd f812 	bl	800085c <__aeabi_ddiv>
 8003838:	4682      	mov	sl, r0
 800383a:	468b      	mov	fp, r1
 800383c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003840:	d0d7      	beq.n	80037f2 <_strtod_l+0x522>
 8003842:	f1b8 0f1f 	cmp.w	r8, #31
 8003846:	dd1f      	ble.n	8003888 <_strtod_l+0x5b8>
 8003848:	2500      	movs	r5, #0
 800384a:	462e      	mov	r6, r5
 800384c:	9507      	str	r5, [sp, #28]
 800384e:	9505      	str	r5, [sp, #20]
 8003850:	2322      	movs	r3, #34	; 0x22
 8003852:	f04f 0a00 	mov.w	sl, #0
 8003856:	f04f 0b00 	mov.w	fp, #0
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	e786      	b.n	800376c <_strtod_l+0x49c>
 800385e:	bf00      	nop
 8003860:	08006e61 	.word	0x08006e61
 8003864:	08006ea4 	.word	0x08006ea4
 8003868:	08006e59 	.word	0x08006e59
 800386c:	08006fe4 	.word	0x08006fe4
 8003870:	08007290 	.word	0x08007290
 8003874:	08007170 	.word	0x08007170
 8003878:	08007148 	.word	0x08007148
 800387c:	7ff00000 	.word	0x7ff00000
 8003880:	7ca00000 	.word	0x7ca00000
 8003884:	7fefffff 	.word	0x7fefffff
 8003888:	f018 0310 	ands.w	r3, r8, #16
 800388c:	bf18      	it	ne
 800388e:	236a      	movne	r3, #106	; 0x6a
 8003890:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8003c40 <_strtod_l+0x970>
 8003894:	9304      	str	r3, [sp, #16]
 8003896:	4650      	mov	r0, sl
 8003898:	4659      	mov	r1, fp
 800389a:	2300      	movs	r3, #0
 800389c:	f018 0f01 	tst.w	r8, #1
 80038a0:	d004      	beq.n	80038ac <_strtod_l+0x5dc>
 80038a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80038a6:	f7fc feaf 	bl	8000608 <__aeabi_dmul>
 80038aa:	2301      	movs	r3, #1
 80038ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80038b0:	f109 0908 	add.w	r9, r9, #8
 80038b4:	d1f2      	bne.n	800389c <_strtod_l+0x5cc>
 80038b6:	b10b      	cbz	r3, 80038bc <_strtod_l+0x5ec>
 80038b8:	4682      	mov	sl, r0
 80038ba:	468b      	mov	fp, r1
 80038bc:	9b04      	ldr	r3, [sp, #16]
 80038be:	b1c3      	cbz	r3, 80038f2 <_strtod_l+0x622>
 80038c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80038c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	4659      	mov	r1, fp
 80038cc:	dd11      	ble.n	80038f2 <_strtod_l+0x622>
 80038ce:	2b1f      	cmp	r3, #31
 80038d0:	f340 8124 	ble.w	8003b1c <_strtod_l+0x84c>
 80038d4:	2b34      	cmp	r3, #52	; 0x34
 80038d6:	bfde      	ittt	le
 80038d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80038dc:	f04f 33ff 	movle.w	r3, #4294967295
 80038e0:	fa03 f202 	lslle.w	r2, r3, r2
 80038e4:	f04f 0a00 	mov.w	sl, #0
 80038e8:	bfcc      	ite	gt
 80038ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80038ee:	ea02 0b01 	andle.w	fp, r2, r1
 80038f2:	2200      	movs	r2, #0
 80038f4:	2300      	movs	r3, #0
 80038f6:	4650      	mov	r0, sl
 80038f8:	4659      	mov	r1, fp
 80038fa:	f7fd f8ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d1a2      	bne.n	8003848 <_strtod_l+0x578>
 8003902:	9b07      	ldr	r3, [sp, #28]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	9908      	ldr	r1, [sp, #32]
 8003908:	462b      	mov	r3, r5
 800390a:	463a      	mov	r2, r7
 800390c:	4620      	mov	r0, r4
 800390e:	f001 fe2d 	bl	800556c <__s2b>
 8003912:	9007      	str	r0, [sp, #28]
 8003914:	2800      	cmp	r0, #0
 8003916:	f43f af1f 	beq.w	8003758 <_strtod_l+0x488>
 800391a:	9b05      	ldr	r3, [sp, #20]
 800391c:	1b9e      	subs	r6, r3, r6
 800391e:	9b06      	ldr	r3, [sp, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	bfb4      	ite	lt
 8003924:	4633      	movlt	r3, r6
 8003926:	2300      	movge	r3, #0
 8003928:	930c      	str	r3, [sp, #48]	; 0x30
 800392a:	9b06      	ldr	r3, [sp, #24]
 800392c:	2500      	movs	r5, #0
 800392e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003932:	9312      	str	r3, [sp, #72]	; 0x48
 8003934:	462e      	mov	r6, r5
 8003936:	9b07      	ldr	r3, [sp, #28]
 8003938:	4620      	mov	r0, r4
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	f001 fd6e 	bl	800541c <_Balloc>
 8003940:	9005      	str	r0, [sp, #20]
 8003942:	2800      	cmp	r0, #0
 8003944:	f43f af0c 	beq.w	8003760 <_strtod_l+0x490>
 8003948:	9b07      	ldr	r3, [sp, #28]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	3202      	adds	r2, #2
 800394e:	f103 010c 	add.w	r1, r3, #12
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	300c      	adds	r0, #12
 8003956:	f001 fd53 	bl	8005400 <memcpy>
 800395a:	ec4b ab10 	vmov	d0, sl, fp
 800395e:	aa1a      	add	r2, sp, #104	; 0x68
 8003960:	a919      	add	r1, sp, #100	; 0x64
 8003962:	4620      	mov	r0, r4
 8003964:	f002 f948 	bl	8005bf8 <__d2b>
 8003968:	ec4b ab18 	vmov	d8, sl, fp
 800396c:	9018      	str	r0, [sp, #96]	; 0x60
 800396e:	2800      	cmp	r0, #0
 8003970:	f43f aef6 	beq.w	8003760 <_strtod_l+0x490>
 8003974:	2101      	movs	r1, #1
 8003976:	4620      	mov	r0, r4
 8003978:	f001 fe92 	bl	80056a0 <__i2b>
 800397c:	4606      	mov	r6, r0
 800397e:	2800      	cmp	r0, #0
 8003980:	f43f aeee 	beq.w	8003760 <_strtod_l+0x490>
 8003984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003986:	9904      	ldr	r1, [sp, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	bfab      	itete	ge
 800398c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800398e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8003990:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8003992:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8003996:	bfac      	ite	ge
 8003998:	eb03 0902 	addge.w	r9, r3, r2
 800399c:	1ad7      	sublt	r7, r2, r3
 800399e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80039a0:	eba3 0801 	sub.w	r8, r3, r1
 80039a4:	4490      	add	r8, r2
 80039a6:	4ba1      	ldr	r3, [pc, #644]	; (8003c2c <_strtod_l+0x95c>)
 80039a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80039ac:	4598      	cmp	r8, r3
 80039ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80039b2:	f280 80c7 	bge.w	8003b44 <_strtod_l+0x874>
 80039b6:	eba3 0308 	sub.w	r3, r3, r8
 80039ba:	2b1f      	cmp	r3, #31
 80039bc:	eba2 0203 	sub.w	r2, r2, r3
 80039c0:	f04f 0101 	mov.w	r1, #1
 80039c4:	f300 80b1 	bgt.w	8003b2a <_strtod_l+0x85a>
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	930d      	str	r3, [sp, #52]	; 0x34
 80039ce:	2300      	movs	r3, #0
 80039d0:	9308      	str	r3, [sp, #32]
 80039d2:	eb09 0802 	add.w	r8, r9, r2
 80039d6:	9b04      	ldr	r3, [sp, #16]
 80039d8:	45c1      	cmp	r9, r8
 80039da:	4417      	add	r7, r2
 80039dc:	441f      	add	r7, r3
 80039de:	464b      	mov	r3, r9
 80039e0:	bfa8      	it	ge
 80039e2:	4643      	movge	r3, r8
 80039e4:	42bb      	cmp	r3, r7
 80039e6:	bfa8      	it	ge
 80039e8:	463b      	movge	r3, r7
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bfc2      	ittt	gt
 80039ee:	eba8 0803 	subgt.w	r8, r8, r3
 80039f2:	1aff      	subgt	r7, r7, r3
 80039f4:	eba9 0903 	subgt.w	r9, r9, r3
 80039f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dd17      	ble.n	8003a2e <_strtod_l+0x75e>
 80039fe:	4631      	mov	r1, r6
 8003a00:	461a      	mov	r2, r3
 8003a02:	4620      	mov	r0, r4
 8003a04:	f001 ff0c 	bl	8005820 <__pow5mult>
 8003a08:	4606      	mov	r6, r0
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	f43f aea8 	beq.w	8003760 <_strtod_l+0x490>
 8003a10:	4601      	mov	r1, r0
 8003a12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003a14:	4620      	mov	r0, r4
 8003a16:	f001 fe59 	bl	80056cc <__multiply>
 8003a1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	f43f ae9f 	beq.w	8003760 <_strtod_l+0x490>
 8003a22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003a24:	4620      	mov	r0, r4
 8003a26:	f001 fd39 	bl	800549c <_Bfree>
 8003a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a2c:	9318      	str	r3, [sp, #96]	; 0x60
 8003a2e:	f1b8 0f00 	cmp.w	r8, #0
 8003a32:	f300 808c 	bgt.w	8003b4e <_strtod_l+0x87e>
 8003a36:	9b06      	ldr	r3, [sp, #24]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dd08      	ble.n	8003a4e <_strtod_l+0x77e>
 8003a3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003a3e:	9905      	ldr	r1, [sp, #20]
 8003a40:	4620      	mov	r0, r4
 8003a42:	f001 feed 	bl	8005820 <__pow5mult>
 8003a46:	9005      	str	r0, [sp, #20]
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	f43f ae89 	beq.w	8003760 <_strtod_l+0x490>
 8003a4e:	2f00      	cmp	r7, #0
 8003a50:	dd08      	ble.n	8003a64 <_strtod_l+0x794>
 8003a52:	9905      	ldr	r1, [sp, #20]
 8003a54:	463a      	mov	r2, r7
 8003a56:	4620      	mov	r0, r4
 8003a58:	f001 ff3c 	bl	80058d4 <__lshift>
 8003a5c:	9005      	str	r0, [sp, #20]
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	f43f ae7e 	beq.w	8003760 <_strtod_l+0x490>
 8003a64:	f1b9 0f00 	cmp.w	r9, #0
 8003a68:	dd08      	ble.n	8003a7c <_strtod_l+0x7ac>
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	464a      	mov	r2, r9
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f001 ff30 	bl	80058d4 <__lshift>
 8003a74:	4606      	mov	r6, r0
 8003a76:	2800      	cmp	r0, #0
 8003a78:	f43f ae72 	beq.w	8003760 <_strtod_l+0x490>
 8003a7c:	9a05      	ldr	r2, [sp, #20]
 8003a7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003a80:	4620      	mov	r0, r4
 8003a82:	f001 ffb3 	bl	80059ec <__mdiff>
 8003a86:	4605      	mov	r5, r0
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	f43f ae69 	beq.w	8003760 <_strtod_l+0x490>
 8003a8e:	68c3      	ldr	r3, [r0, #12]
 8003a90:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a92:	2300      	movs	r3, #0
 8003a94:	60c3      	str	r3, [r0, #12]
 8003a96:	4631      	mov	r1, r6
 8003a98:	f001 ff8c 	bl	80059b4 <__mcmp>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	da60      	bge.n	8003b62 <_strtod_l+0x892>
 8003aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003aa2:	ea53 030a 	orrs.w	r3, r3, sl
 8003aa6:	f040 8082 	bne.w	8003bae <_strtod_l+0x8de>
 8003aaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d17d      	bne.n	8003bae <_strtod_l+0x8de>
 8003ab2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003ab6:	0d1b      	lsrs	r3, r3, #20
 8003ab8:	051b      	lsls	r3, r3, #20
 8003aba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003abe:	d976      	bls.n	8003bae <_strtod_l+0x8de>
 8003ac0:	696b      	ldr	r3, [r5, #20]
 8003ac2:	b913      	cbnz	r3, 8003aca <_strtod_l+0x7fa>
 8003ac4:	692b      	ldr	r3, [r5, #16]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	dd71      	ble.n	8003bae <_strtod_l+0x8de>
 8003aca:	4629      	mov	r1, r5
 8003acc:	2201      	movs	r2, #1
 8003ace:	4620      	mov	r0, r4
 8003ad0:	f001 ff00 	bl	80058d4 <__lshift>
 8003ad4:	4631      	mov	r1, r6
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	f001 ff6c 	bl	80059b4 <__mcmp>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	dd66      	ble.n	8003bae <_strtod_l+0x8de>
 8003ae0:	9904      	ldr	r1, [sp, #16]
 8003ae2:	4a53      	ldr	r2, [pc, #332]	; (8003c30 <_strtod_l+0x960>)
 8003ae4:	465b      	mov	r3, fp
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	f000 8081 	beq.w	8003bee <_strtod_l+0x91e>
 8003aec:	ea02 010b 	and.w	r1, r2, fp
 8003af0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003af4:	dc7b      	bgt.n	8003bee <_strtod_l+0x91e>
 8003af6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003afa:	f77f aea9 	ble.w	8003850 <_strtod_l+0x580>
 8003afe:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <_strtod_l+0x964>)
 8003b00:	4650      	mov	r0, sl
 8003b02:	4659      	mov	r1, fp
 8003b04:	2200      	movs	r2, #0
 8003b06:	f7fc fd7f 	bl	8000608 <__aeabi_dmul>
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4303      	orrs	r3, r0
 8003b0e:	bf08      	it	eq
 8003b10:	2322      	moveq	r3, #34	; 0x22
 8003b12:	4682      	mov	sl, r0
 8003b14:	468b      	mov	fp, r1
 8003b16:	bf08      	it	eq
 8003b18:	6023      	streq	r3, [r4, #0]
 8003b1a:	e62b      	b.n	8003774 <_strtod_l+0x4a4>
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	ea03 0a0a 	and.w	sl, r3, sl
 8003b28:	e6e3      	b.n	80038f2 <_strtod_l+0x622>
 8003b2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8003b2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8003b32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8003b36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8003b3a:	fa01 f308 	lsl.w	r3, r1, r8
 8003b3e:	9308      	str	r3, [sp, #32]
 8003b40:	910d      	str	r1, [sp, #52]	; 0x34
 8003b42:	e746      	b.n	80039d2 <_strtod_l+0x702>
 8003b44:	2300      	movs	r3, #0
 8003b46:	9308      	str	r3, [sp, #32]
 8003b48:	2301      	movs	r3, #1
 8003b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8003b4c:	e741      	b.n	80039d2 <_strtod_l+0x702>
 8003b4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003b50:	4642      	mov	r2, r8
 8003b52:	4620      	mov	r0, r4
 8003b54:	f001 febe 	bl	80058d4 <__lshift>
 8003b58:	9018      	str	r0, [sp, #96]	; 0x60
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	f47f af6b 	bne.w	8003a36 <_strtod_l+0x766>
 8003b60:	e5fe      	b.n	8003760 <_strtod_l+0x490>
 8003b62:	465f      	mov	r7, fp
 8003b64:	d16e      	bne.n	8003c44 <_strtod_l+0x974>
 8003b66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003b6c:	b342      	cbz	r2, 8003bc0 <_strtod_l+0x8f0>
 8003b6e:	4a32      	ldr	r2, [pc, #200]	; (8003c38 <_strtod_l+0x968>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d128      	bne.n	8003bc6 <_strtod_l+0x8f6>
 8003b74:	9b04      	ldr	r3, [sp, #16]
 8003b76:	4651      	mov	r1, sl
 8003b78:	b1eb      	cbz	r3, 8003bb6 <_strtod_l+0x8e6>
 8003b7a:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <_strtod_l+0x960>)
 8003b7c:	403b      	ands	r3, r7
 8003b7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003b82:	f04f 32ff 	mov.w	r2, #4294967295
 8003b86:	d819      	bhi.n	8003bbc <_strtod_l+0x8ec>
 8003b88:	0d1b      	lsrs	r3, r3, #20
 8003b8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	4299      	cmp	r1, r3
 8003b94:	d117      	bne.n	8003bc6 <_strtod_l+0x8f6>
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <_strtod_l+0x96c>)
 8003b98:	429f      	cmp	r7, r3
 8003b9a:	d102      	bne.n	8003ba2 <_strtod_l+0x8d2>
 8003b9c:	3101      	adds	r1, #1
 8003b9e:	f43f addf 	beq.w	8003760 <_strtod_l+0x490>
 8003ba2:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <_strtod_l+0x960>)
 8003ba4:	403b      	ands	r3, r7
 8003ba6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8003baa:	f04f 0a00 	mov.w	sl, #0
 8003bae:	9b04      	ldr	r3, [sp, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1a4      	bne.n	8003afe <_strtod_l+0x82e>
 8003bb4:	e5de      	b.n	8003774 <_strtod_l+0x4a4>
 8003bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bba:	e7ea      	b.n	8003b92 <_strtod_l+0x8c2>
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	e7e8      	b.n	8003b92 <_strtod_l+0x8c2>
 8003bc0:	ea53 030a 	orrs.w	r3, r3, sl
 8003bc4:	d08c      	beq.n	8003ae0 <_strtod_l+0x810>
 8003bc6:	9b08      	ldr	r3, [sp, #32]
 8003bc8:	b1db      	cbz	r3, 8003c02 <_strtod_l+0x932>
 8003bca:	423b      	tst	r3, r7
 8003bcc:	d0ef      	beq.n	8003bae <_strtod_l+0x8de>
 8003bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bd0:	9a04      	ldr	r2, [sp, #16]
 8003bd2:	4650      	mov	r0, sl
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	b1c3      	cbz	r3, 8003c0a <_strtod_l+0x93a>
 8003bd8:	f7ff fb5c 	bl	8003294 <sulp>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	ec51 0b18 	vmov	r0, r1, d8
 8003be4:	f7fc fb5a 	bl	800029c <__adddf3>
 8003be8:	4682      	mov	sl, r0
 8003bea:	468b      	mov	fp, r1
 8003bec:	e7df      	b.n	8003bae <_strtod_l+0x8de>
 8003bee:	4013      	ands	r3, r2
 8003bf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003bf4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8003bf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8003bfc:	f04f 3aff 	mov.w	sl, #4294967295
 8003c00:	e7d5      	b.n	8003bae <_strtod_l+0x8de>
 8003c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c04:	ea13 0f0a 	tst.w	r3, sl
 8003c08:	e7e0      	b.n	8003bcc <_strtod_l+0x8fc>
 8003c0a:	f7ff fb43 	bl	8003294 <sulp>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	ec51 0b18 	vmov	r0, r1, d8
 8003c16:	f7fc fb3f 	bl	8000298 <__aeabi_dsub>
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4682      	mov	sl, r0
 8003c20:	468b      	mov	fp, r1
 8003c22:	f7fc ff59 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d0c1      	beq.n	8003bae <_strtod_l+0x8de>
 8003c2a:	e611      	b.n	8003850 <_strtod_l+0x580>
 8003c2c:	fffffc02 	.word	0xfffffc02
 8003c30:	7ff00000 	.word	0x7ff00000
 8003c34:	39500000 	.word	0x39500000
 8003c38:	000fffff 	.word	0x000fffff
 8003c3c:	7fefffff 	.word	0x7fefffff
 8003c40:	08006eb8 	.word	0x08006eb8
 8003c44:	4631      	mov	r1, r6
 8003c46:	4628      	mov	r0, r5
 8003c48:	f002 f832 	bl	8005cb0 <__ratio>
 8003c4c:	ec59 8b10 	vmov	r8, r9, d0
 8003c50:	ee10 0a10 	vmov	r0, s0
 8003c54:	2200      	movs	r2, #0
 8003c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	f7fc ff50 	bl	8000b00 <__aeabi_dcmple>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d07a      	beq.n	8003d5a <_strtod_l+0xa8a>
 8003c64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04a      	beq.n	8003d00 <_strtod_l+0xa30>
 8003c6a:	4b95      	ldr	r3, [pc, #596]	; (8003ec0 <_strtod_l+0xbf0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003c72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8003ec0 <_strtod_l+0xbf0>
 8003c76:	f04f 0800 	mov.w	r8, #0
 8003c7a:	4b92      	ldr	r3, [pc, #584]	; (8003ec4 <_strtod_l+0xbf4>)
 8003c7c:	403b      	ands	r3, r7
 8003c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8003c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003c82:	4b91      	ldr	r3, [pc, #580]	; (8003ec8 <_strtod_l+0xbf8>)
 8003c84:	429a      	cmp	r2, r3
 8003c86:	f040 80b0 	bne.w	8003dea <_strtod_l+0xb1a>
 8003c8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003c8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8003c92:	ec4b ab10 	vmov	d0, sl, fp
 8003c96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003c9a:	f001 ff31 	bl	8005b00 <__ulp>
 8003c9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ca2:	ec53 2b10 	vmov	r2, r3, d0
 8003ca6:	f7fc fcaf 	bl	8000608 <__aeabi_dmul>
 8003caa:	4652      	mov	r2, sl
 8003cac:	465b      	mov	r3, fp
 8003cae:	f7fc faf5 	bl	800029c <__adddf3>
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4983      	ldr	r1, [pc, #524]	; (8003ec4 <_strtod_l+0xbf4>)
 8003cb6:	4a85      	ldr	r2, [pc, #532]	; (8003ecc <_strtod_l+0xbfc>)
 8003cb8:	4019      	ands	r1, r3
 8003cba:	4291      	cmp	r1, r2
 8003cbc:	4682      	mov	sl, r0
 8003cbe:	d960      	bls.n	8003d82 <_strtod_l+0xab2>
 8003cc0:	ee18 3a90 	vmov	r3, s17
 8003cc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d104      	bne.n	8003cd6 <_strtod_l+0xa06>
 8003ccc:	ee18 3a10 	vmov	r3, s16
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f43f ad45 	beq.w	8003760 <_strtod_l+0x490>
 8003cd6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8003ed8 <_strtod_l+0xc08>
 8003cda:	f04f 3aff 	mov.w	sl, #4294967295
 8003cde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f001 fbdb 	bl	800549c <_Bfree>
 8003ce6:	9905      	ldr	r1, [sp, #20]
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f001 fbd7 	bl	800549c <_Bfree>
 8003cee:	4631      	mov	r1, r6
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f001 fbd3 	bl	800549c <_Bfree>
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f001 fbcf 	bl	800549c <_Bfree>
 8003cfe:	e61a      	b.n	8003936 <_strtod_l+0x666>
 8003d00:	f1ba 0f00 	cmp.w	sl, #0
 8003d04:	d11b      	bne.n	8003d3e <_strtod_l+0xa6e>
 8003d06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003d0a:	b9f3      	cbnz	r3, 8003d4a <_strtod_l+0xa7a>
 8003d0c:	4b6c      	ldr	r3, [pc, #432]	; (8003ec0 <_strtod_l+0xbf0>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	4640      	mov	r0, r8
 8003d12:	4649      	mov	r1, r9
 8003d14:	f7fc feea 	bl	8000aec <__aeabi_dcmplt>
 8003d18:	b9d0      	cbnz	r0, 8003d50 <_strtod_l+0xa80>
 8003d1a:	4640      	mov	r0, r8
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <_strtod_l+0xc00>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	f7fc fc71 	bl	8000608 <__aeabi_dmul>
 8003d26:	4680      	mov	r8, r0
 8003d28:	4689      	mov	r9, r1
 8003d2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003d2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8003d32:	9315      	str	r3, [sp, #84]	; 0x54
 8003d34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003d38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d3c:	e79d      	b.n	8003c7a <_strtod_l+0x9aa>
 8003d3e:	f1ba 0f01 	cmp.w	sl, #1
 8003d42:	d102      	bne.n	8003d4a <_strtod_l+0xa7a>
 8003d44:	2f00      	cmp	r7, #0
 8003d46:	f43f ad83 	beq.w	8003850 <_strtod_l+0x580>
 8003d4a:	4b62      	ldr	r3, [pc, #392]	; (8003ed4 <_strtod_l+0xc04>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	e78e      	b.n	8003c6e <_strtod_l+0x99e>
 8003d50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8003ed0 <_strtod_l+0xc00>
 8003d54:	f04f 0800 	mov.w	r8, #0
 8003d58:	e7e7      	b.n	8003d2a <_strtod_l+0xa5a>
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <_strtod_l+0xc00>)
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	4649      	mov	r1, r9
 8003d60:	2200      	movs	r2, #0
 8003d62:	f7fc fc51 	bl	8000608 <__aeabi_dmul>
 8003d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d68:	4680      	mov	r8, r0
 8003d6a:	4689      	mov	r9, r1
 8003d6c:	b933      	cbnz	r3, 8003d7c <_strtod_l+0xaac>
 8003d6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d72:	900e      	str	r0, [sp, #56]	; 0x38
 8003d74:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003d7a:	e7dd      	b.n	8003d38 <_strtod_l+0xa68>
 8003d7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8003d80:	e7f9      	b.n	8003d76 <_strtod_l+0xaa6>
 8003d82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8003d86:	9b04      	ldr	r3, [sp, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1a8      	bne.n	8003cde <_strtod_l+0xa0e>
 8003d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d92:	0d1b      	lsrs	r3, r3, #20
 8003d94:	051b      	lsls	r3, r3, #20
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d1a1      	bne.n	8003cde <_strtod_l+0xa0e>
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	f7fc ffcb 	bl	8000d38 <__aeabi_d2lz>
 8003da2:	f7fc fc03 	bl	80005ac <__aeabi_l2d>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4640      	mov	r0, r8
 8003dac:	4649      	mov	r1, r9
 8003dae:	f7fc fa73 	bl	8000298 <__aeabi_dsub>
 8003db2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003db4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003db8:	ea43 030a 	orr.w	r3, r3, sl
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	4680      	mov	r8, r0
 8003dc0:	4689      	mov	r9, r1
 8003dc2:	d055      	beq.n	8003e70 <_strtod_l+0xba0>
 8003dc4:	a336      	add	r3, pc, #216	; (adr r3, 8003ea0 <_strtod_l+0xbd0>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	f7fc fe8f 	bl	8000aec <__aeabi_dcmplt>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	f47f acd0 	bne.w	8003774 <_strtod_l+0x4a4>
 8003dd4:	a334      	add	r3, pc, #208	; (adr r3, 8003ea8 <_strtod_l+0xbd8>)
 8003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dda:	4640      	mov	r0, r8
 8003ddc:	4649      	mov	r1, r9
 8003dde:	f7fc fea3 	bl	8000b28 <__aeabi_dcmpgt>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	f43f af7b 	beq.w	8003cde <_strtod_l+0xa0e>
 8003de8:	e4c4      	b.n	8003774 <_strtod_l+0x4a4>
 8003dea:	9b04      	ldr	r3, [sp, #16]
 8003dec:	b333      	cbz	r3, 8003e3c <_strtod_l+0xb6c>
 8003dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003df0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003df4:	d822      	bhi.n	8003e3c <_strtod_l+0xb6c>
 8003df6:	a32e      	add	r3, pc, #184	; (adr r3, 8003eb0 <_strtod_l+0xbe0>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	4640      	mov	r0, r8
 8003dfe:	4649      	mov	r1, r9
 8003e00:	f7fc fe7e 	bl	8000b00 <__aeabi_dcmple>
 8003e04:	b1a0      	cbz	r0, 8003e30 <_strtod_l+0xb60>
 8003e06:	4649      	mov	r1, r9
 8003e08:	4640      	mov	r0, r8
 8003e0a:	f7fc fed5 	bl	8000bb8 <__aeabi_d2uiz>
 8003e0e:	2801      	cmp	r0, #1
 8003e10:	bf38      	it	cc
 8003e12:	2001      	movcc	r0, #1
 8003e14:	f7fc fb7e 	bl	8000514 <__aeabi_ui2d>
 8003e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e1a:	4680      	mov	r8, r0
 8003e1c:	4689      	mov	r9, r1
 8003e1e:	bb23      	cbnz	r3, 8003e6a <_strtod_l+0xb9a>
 8003e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e24:	9010      	str	r0, [sp, #64]	; 0x40
 8003e26:	9311      	str	r3, [sp, #68]	; 0x44
 8003e28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e40:	eeb0 0a48 	vmov.f32	s0, s16
 8003e44:	eef0 0a68 	vmov.f32	s1, s17
 8003e48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e4c:	f001 fe58 	bl	8005b00 <__ulp>
 8003e50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e54:	ec53 2b10 	vmov	r2, r3, d0
 8003e58:	f7fc fbd6 	bl	8000608 <__aeabi_dmul>
 8003e5c:	ec53 2b18 	vmov	r2, r3, d8
 8003e60:	f7fc fa1c 	bl	800029c <__adddf3>
 8003e64:	4682      	mov	sl, r0
 8003e66:	468b      	mov	fp, r1
 8003e68:	e78d      	b.n	8003d86 <_strtod_l+0xab6>
 8003e6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8003e6e:	e7db      	b.n	8003e28 <_strtod_l+0xb58>
 8003e70:	a311      	add	r3, pc, #68	; (adr r3, 8003eb8 <_strtod_l+0xbe8>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f7fc fe39 	bl	8000aec <__aeabi_dcmplt>
 8003e7a:	e7b2      	b.n	8003de2 <_strtod_l+0xb12>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003e82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	f7ff ba6b 	b.w	8003360 <_strtod_l+0x90>
 8003e8a:	2a65      	cmp	r2, #101	; 0x65
 8003e8c:	f43f ab5f 	beq.w	800354e <_strtod_l+0x27e>
 8003e90:	2a45      	cmp	r2, #69	; 0x45
 8003e92:	f43f ab5c 	beq.w	800354e <_strtod_l+0x27e>
 8003e96:	2301      	movs	r3, #1
 8003e98:	f7ff bb94 	b.w	80035c4 <_strtod_l+0x2f4>
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	94a03595 	.word	0x94a03595
 8003ea4:	3fdfffff 	.word	0x3fdfffff
 8003ea8:	35afe535 	.word	0x35afe535
 8003eac:	3fe00000 	.word	0x3fe00000
 8003eb0:	ffc00000 	.word	0xffc00000
 8003eb4:	41dfffff 	.word	0x41dfffff
 8003eb8:	94a03595 	.word	0x94a03595
 8003ebc:	3fcfffff 	.word	0x3fcfffff
 8003ec0:	3ff00000 	.word	0x3ff00000
 8003ec4:	7ff00000 	.word	0x7ff00000
 8003ec8:	7fe00000 	.word	0x7fe00000
 8003ecc:	7c9fffff 	.word	0x7c9fffff
 8003ed0:	3fe00000 	.word	0x3fe00000
 8003ed4:	bff00000 	.word	0xbff00000
 8003ed8:	7fefffff 	.word	0x7fefffff

08003edc <_strtod_r>:
 8003edc:	4b01      	ldr	r3, [pc, #4]	; (8003ee4 <_strtod_r+0x8>)
 8003ede:	f7ff b9f7 	b.w	80032d0 <_strtod_l>
 8003ee2:	bf00      	nop
 8003ee4:	2000006c 	.word	0x2000006c

08003ee8 <_strtol_l.constprop.0>:
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eee:	d001      	beq.n	8003ef4 <_strtol_l.constprop.0+0xc>
 8003ef0:	2b24      	cmp	r3, #36	; 0x24
 8003ef2:	d906      	bls.n	8003f02 <_strtol_l.constprop.0+0x1a>
 8003ef4:	f7fe fafc 	bl	80024f0 <__errno>
 8003ef8:	2316      	movs	r3, #22
 8003efa:	6003      	str	r3, [r0, #0]
 8003efc:	2000      	movs	r0, #0
 8003efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003fe8 <_strtol_l.constprop.0+0x100>
 8003f06:	460d      	mov	r5, r1
 8003f08:	462e      	mov	r6, r5
 8003f0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f0e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003f12:	f017 0708 	ands.w	r7, r7, #8
 8003f16:	d1f7      	bne.n	8003f08 <_strtol_l.constprop.0+0x20>
 8003f18:	2c2d      	cmp	r4, #45	; 0x2d
 8003f1a:	d132      	bne.n	8003f82 <_strtol_l.constprop.0+0x9a>
 8003f1c:	782c      	ldrb	r4, [r5, #0]
 8003f1e:	2701      	movs	r7, #1
 8003f20:	1cb5      	adds	r5, r6, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d05b      	beq.n	8003fde <_strtol_l.constprop.0+0xf6>
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d109      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003f2a:	2c30      	cmp	r4, #48	; 0x30
 8003f2c:	d107      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003f2e:	782c      	ldrb	r4, [r5, #0]
 8003f30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f34:	2c58      	cmp	r4, #88	; 0x58
 8003f36:	d14d      	bne.n	8003fd4 <_strtol_l.constprop.0+0xec>
 8003f38:	786c      	ldrb	r4, [r5, #1]
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	3502      	adds	r5, #2
 8003f3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003f42:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f46:	f04f 0c00 	mov.w	ip, #0
 8003f4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f4e:	4666      	mov	r6, ip
 8003f50:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f54:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003f58:	f1be 0f09 	cmp.w	lr, #9
 8003f5c:	d816      	bhi.n	8003f8c <_strtol_l.constprop.0+0xa4>
 8003f5e:	4674      	mov	r4, lr
 8003f60:	42a3      	cmp	r3, r4
 8003f62:	dd24      	ble.n	8003fae <_strtol_l.constprop.0+0xc6>
 8003f64:	f1bc 0f00 	cmp.w	ip, #0
 8003f68:	db1e      	blt.n	8003fa8 <_strtol_l.constprop.0+0xc0>
 8003f6a:	45b1      	cmp	r9, r6
 8003f6c:	d31c      	bcc.n	8003fa8 <_strtol_l.constprop.0+0xc0>
 8003f6e:	d101      	bne.n	8003f74 <_strtol_l.constprop.0+0x8c>
 8003f70:	45a2      	cmp	sl, r4
 8003f72:	db19      	blt.n	8003fa8 <_strtol_l.constprop.0+0xc0>
 8003f74:	fb06 4603 	mla	r6, r6, r3, r4
 8003f78:	f04f 0c01 	mov.w	ip, #1
 8003f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f80:	e7e8      	b.n	8003f54 <_strtol_l.constprop.0+0x6c>
 8003f82:	2c2b      	cmp	r4, #43	; 0x2b
 8003f84:	bf04      	itt	eq
 8003f86:	782c      	ldrbeq	r4, [r5, #0]
 8003f88:	1cb5      	addeq	r5, r6, #2
 8003f8a:	e7ca      	b.n	8003f22 <_strtol_l.constprop.0+0x3a>
 8003f8c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003f90:	f1be 0f19 	cmp.w	lr, #25
 8003f94:	d801      	bhi.n	8003f9a <_strtol_l.constprop.0+0xb2>
 8003f96:	3c37      	subs	r4, #55	; 0x37
 8003f98:	e7e2      	b.n	8003f60 <_strtol_l.constprop.0+0x78>
 8003f9a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003f9e:	f1be 0f19 	cmp.w	lr, #25
 8003fa2:	d804      	bhi.n	8003fae <_strtol_l.constprop.0+0xc6>
 8003fa4:	3c57      	subs	r4, #87	; 0x57
 8003fa6:	e7db      	b.n	8003f60 <_strtol_l.constprop.0+0x78>
 8003fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8003fac:	e7e6      	b.n	8003f7c <_strtol_l.constprop.0+0x94>
 8003fae:	f1bc 0f00 	cmp.w	ip, #0
 8003fb2:	da05      	bge.n	8003fc0 <_strtol_l.constprop.0+0xd8>
 8003fb4:	2322      	movs	r3, #34	; 0x22
 8003fb6:	6003      	str	r3, [r0, #0]
 8003fb8:	4646      	mov	r6, r8
 8003fba:	b942      	cbnz	r2, 8003fce <_strtol_l.constprop.0+0xe6>
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	e79e      	b.n	8003efe <_strtol_l.constprop.0+0x16>
 8003fc0:	b107      	cbz	r7, 8003fc4 <_strtol_l.constprop.0+0xdc>
 8003fc2:	4276      	negs	r6, r6
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	d0f9      	beq.n	8003fbc <_strtol_l.constprop.0+0xd4>
 8003fc8:	f1bc 0f00 	cmp.w	ip, #0
 8003fcc:	d000      	beq.n	8003fd0 <_strtol_l.constprop.0+0xe8>
 8003fce:	1e69      	subs	r1, r5, #1
 8003fd0:	6011      	str	r1, [r2, #0]
 8003fd2:	e7f3      	b.n	8003fbc <_strtol_l.constprop.0+0xd4>
 8003fd4:	2430      	movs	r4, #48	; 0x30
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1b1      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	e7af      	b.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fde:	2c30      	cmp	r4, #48	; 0x30
 8003fe0:	d0a5      	beq.n	8003f2e <_strtol_l.constprop.0+0x46>
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	e7ab      	b.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fe6:	bf00      	nop
 8003fe8:	08006ee1 	.word	0x08006ee1

08003fec <_strtol_r>:
 8003fec:	f7ff bf7c 	b.w	8003ee8 <_strtol_l.constprop.0>

08003ff0 <quorem>:
 8003ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	6903      	ldr	r3, [r0, #16]
 8003ff6:	690c      	ldr	r4, [r1, #16]
 8003ff8:	42a3      	cmp	r3, r4
 8003ffa:	4607      	mov	r7, r0
 8003ffc:	f2c0 8081 	blt.w	8004102 <quorem+0x112>
 8004000:	3c01      	subs	r4, #1
 8004002:	f101 0814 	add.w	r8, r1, #20
 8004006:	f100 0514 	add.w	r5, r0, #20
 800400a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004014:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004018:	3301      	adds	r3, #1
 800401a:	429a      	cmp	r2, r3
 800401c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004020:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004024:	fbb2 f6f3 	udiv	r6, r2, r3
 8004028:	d331      	bcc.n	800408e <quorem+0x9e>
 800402a:	f04f 0e00 	mov.w	lr, #0
 800402e:	4640      	mov	r0, r8
 8004030:	46ac      	mov	ip, r5
 8004032:	46f2      	mov	sl, lr
 8004034:	f850 2b04 	ldr.w	r2, [r0], #4
 8004038:	b293      	uxth	r3, r2
 800403a:	fb06 e303 	mla	r3, r6, r3, lr
 800403e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004042:	b29b      	uxth	r3, r3
 8004044:	ebaa 0303 	sub.w	r3, sl, r3
 8004048:	f8dc a000 	ldr.w	sl, [ip]
 800404c:	0c12      	lsrs	r2, r2, #16
 800404e:	fa13 f38a 	uxtah	r3, r3, sl
 8004052:	fb06 e202 	mla	r2, r6, r2, lr
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	9b00      	ldr	r3, [sp, #0]
 800405a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800405e:	b292      	uxth	r2, r2
 8004060:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004068:	f8bd 3000 	ldrh.w	r3, [sp]
 800406c:	4581      	cmp	r9, r0
 800406e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004072:	f84c 3b04 	str.w	r3, [ip], #4
 8004076:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800407a:	d2db      	bcs.n	8004034 <quorem+0x44>
 800407c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004080:	b92b      	cbnz	r3, 800408e <quorem+0x9e>
 8004082:	9b01      	ldr	r3, [sp, #4]
 8004084:	3b04      	subs	r3, #4
 8004086:	429d      	cmp	r5, r3
 8004088:	461a      	mov	r2, r3
 800408a:	d32e      	bcc.n	80040ea <quorem+0xfa>
 800408c:	613c      	str	r4, [r7, #16]
 800408e:	4638      	mov	r0, r7
 8004090:	f001 fc90 	bl	80059b4 <__mcmp>
 8004094:	2800      	cmp	r0, #0
 8004096:	db24      	blt.n	80040e2 <quorem+0xf2>
 8004098:	3601      	adds	r6, #1
 800409a:	4628      	mov	r0, r5
 800409c:	f04f 0c00 	mov.w	ip, #0
 80040a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80040a4:	f8d0 e000 	ldr.w	lr, [r0]
 80040a8:	b293      	uxth	r3, r2
 80040aa:	ebac 0303 	sub.w	r3, ip, r3
 80040ae:	0c12      	lsrs	r2, r2, #16
 80040b0:	fa13 f38e 	uxtah	r3, r3, lr
 80040b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80040b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040bc:	b29b      	uxth	r3, r3
 80040be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040c2:	45c1      	cmp	r9, r8
 80040c4:	f840 3b04 	str.w	r3, [r0], #4
 80040c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80040cc:	d2e8      	bcs.n	80040a0 <quorem+0xb0>
 80040ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040d6:	b922      	cbnz	r2, 80040e2 <quorem+0xf2>
 80040d8:	3b04      	subs	r3, #4
 80040da:	429d      	cmp	r5, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	d30a      	bcc.n	80040f6 <quorem+0x106>
 80040e0:	613c      	str	r4, [r7, #16]
 80040e2:	4630      	mov	r0, r6
 80040e4:	b003      	add	sp, #12
 80040e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	3b04      	subs	r3, #4
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d1cc      	bne.n	800408c <quorem+0x9c>
 80040f2:	3c01      	subs	r4, #1
 80040f4:	e7c7      	b.n	8004086 <quorem+0x96>
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	3b04      	subs	r3, #4
 80040fa:	2a00      	cmp	r2, #0
 80040fc:	d1f0      	bne.n	80040e0 <quorem+0xf0>
 80040fe:	3c01      	subs	r4, #1
 8004100:	e7eb      	b.n	80040da <quorem+0xea>
 8004102:	2000      	movs	r0, #0
 8004104:	e7ee      	b.n	80040e4 <quorem+0xf4>
	...

08004108 <_dtoa_r>:
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	ed2d 8b04 	vpush	{d8-d9}
 8004110:	ec57 6b10 	vmov	r6, r7, d0
 8004114:	b093      	sub	sp, #76	; 0x4c
 8004116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004118:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800411c:	9106      	str	r1, [sp, #24]
 800411e:	ee10 aa10 	vmov	sl, s0
 8004122:	4604      	mov	r4, r0
 8004124:	9209      	str	r2, [sp, #36]	; 0x24
 8004126:	930c      	str	r3, [sp, #48]	; 0x30
 8004128:	46bb      	mov	fp, r7
 800412a:	b975      	cbnz	r5, 800414a <_dtoa_r+0x42>
 800412c:	2010      	movs	r0, #16
 800412e:	f001 f94d 	bl	80053cc <malloc>
 8004132:	4602      	mov	r2, r0
 8004134:	6260      	str	r0, [r4, #36]	; 0x24
 8004136:	b920      	cbnz	r0, 8004142 <_dtoa_r+0x3a>
 8004138:	4ba7      	ldr	r3, [pc, #668]	; (80043d8 <_dtoa_r+0x2d0>)
 800413a:	21ea      	movs	r1, #234	; 0xea
 800413c:	48a7      	ldr	r0, [pc, #668]	; (80043dc <_dtoa_r+0x2d4>)
 800413e:	f002 f8bd 	bl	80062bc <__assert_func>
 8004142:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004146:	6005      	str	r5, [r0, #0]
 8004148:	60c5      	str	r5, [r0, #12]
 800414a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	b151      	cbz	r1, 8004166 <_dtoa_r+0x5e>
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	604a      	str	r2, [r1, #4]
 8004154:	2301      	movs	r3, #1
 8004156:	4093      	lsls	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
 800415a:	4620      	mov	r0, r4
 800415c:	f001 f99e 	bl	800549c <_Bfree>
 8004160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	1e3b      	subs	r3, r7, #0
 8004168:	bfaa      	itet	ge
 800416a:	2300      	movge	r3, #0
 800416c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004170:	f8c8 3000 	strge.w	r3, [r8]
 8004174:	4b9a      	ldr	r3, [pc, #616]	; (80043e0 <_dtoa_r+0x2d8>)
 8004176:	bfbc      	itt	lt
 8004178:	2201      	movlt	r2, #1
 800417a:	f8c8 2000 	strlt.w	r2, [r8]
 800417e:	ea33 030b 	bics.w	r3, r3, fp
 8004182:	d11b      	bne.n	80041bc <_dtoa_r+0xb4>
 8004184:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004186:	f242 730f 	movw	r3, #9999	; 0x270f
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004190:	4333      	orrs	r3, r6
 8004192:	f000 8592 	beq.w	8004cba <_dtoa_r+0xbb2>
 8004196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004198:	b963      	cbnz	r3, 80041b4 <_dtoa_r+0xac>
 800419a:	4b92      	ldr	r3, [pc, #584]	; (80043e4 <_dtoa_r+0x2dc>)
 800419c:	e022      	b.n	80041e4 <_dtoa_r+0xdc>
 800419e:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <_dtoa_r+0x2e0>)
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	3308      	adds	r3, #8
 80041a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	9801      	ldr	r0, [sp, #4]
 80041aa:	b013      	add	sp, #76	; 0x4c
 80041ac:	ecbd 8b04 	vpop	{d8-d9}
 80041b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b4:	4b8b      	ldr	r3, [pc, #556]	; (80043e4 <_dtoa_r+0x2dc>)
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	3303      	adds	r3, #3
 80041ba:	e7f3      	b.n	80041a4 <_dtoa_r+0x9c>
 80041bc:	2200      	movs	r2, #0
 80041be:	2300      	movs	r3, #0
 80041c0:	4650      	mov	r0, sl
 80041c2:	4659      	mov	r1, fp
 80041c4:	f7fc fc88 	bl	8000ad8 <__aeabi_dcmpeq>
 80041c8:	ec4b ab19 	vmov	d9, sl, fp
 80041cc:	4680      	mov	r8, r0
 80041ce:	b158      	cbz	r0, 80041e8 <_dtoa_r+0xe0>
 80041d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041d2:	2301      	movs	r3, #1
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 856b 	beq.w	8004cb4 <_dtoa_r+0xbac>
 80041de:	4883      	ldr	r0, [pc, #524]	; (80043ec <_dtoa_r+0x2e4>)
 80041e0:	6018      	str	r0, [r3, #0]
 80041e2:	1e43      	subs	r3, r0, #1
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	e7df      	b.n	80041a8 <_dtoa_r+0xa0>
 80041e8:	ec4b ab10 	vmov	d0, sl, fp
 80041ec:	aa10      	add	r2, sp, #64	; 0x40
 80041ee:	a911      	add	r1, sp, #68	; 0x44
 80041f0:	4620      	mov	r0, r4
 80041f2:	f001 fd01 	bl	8005bf8 <__d2b>
 80041f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80041fa:	ee08 0a10 	vmov	s16, r0
 80041fe:	2d00      	cmp	r5, #0
 8004200:	f000 8084 	beq.w	800430c <_dtoa_r+0x204>
 8004204:	ee19 3a90 	vmov	r3, s19
 8004208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800420c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004210:	4656      	mov	r6, sl
 8004212:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800421a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800421e:	4b74      	ldr	r3, [pc, #464]	; (80043f0 <_dtoa_r+0x2e8>)
 8004220:	2200      	movs	r2, #0
 8004222:	4630      	mov	r0, r6
 8004224:	4639      	mov	r1, r7
 8004226:	f7fc f837 	bl	8000298 <__aeabi_dsub>
 800422a:	a365      	add	r3, pc, #404	; (adr r3, 80043c0 <_dtoa_r+0x2b8>)
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	f7fc f9ea 	bl	8000608 <__aeabi_dmul>
 8004234:	a364      	add	r3, pc, #400	; (adr r3, 80043c8 <_dtoa_r+0x2c0>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f7fc f82f 	bl	800029c <__adddf3>
 800423e:	4606      	mov	r6, r0
 8004240:	4628      	mov	r0, r5
 8004242:	460f      	mov	r7, r1
 8004244:	f7fc f976 	bl	8000534 <__aeabi_i2d>
 8004248:	a361      	add	r3, pc, #388	; (adr r3, 80043d0 <_dtoa_r+0x2c8>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f7fc f9db 	bl	8000608 <__aeabi_dmul>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	4630      	mov	r0, r6
 8004258:	4639      	mov	r1, r7
 800425a:	f7fc f81f 	bl	800029c <__adddf3>
 800425e:	4606      	mov	r6, r0
 8004260:	460f      	mov	r7, r1
 8004262:	f7fc fc81 	bl	8000b68 <__aeabi_d2iz>
 8004266:	2200      	movs	r2, #0
 8004268:	9000      	str	r0, [sp, #0]
 800426a:	2300      	movs	r3, #0
 800426c:	4630      	mov	r0, r6
 800426e:	4639      	mov	r1, r7
 8004270:	f7fc fc3c 	bl	8000aec <__aeabi_dcmplt>
 8004274:	b150      	cbz	r0, 800428c <_dtoa_r+0x184>
 8004276:	9800      	ldr	r0, [sp, #0]
 8004278:	f7fc f95c 	bl	8000534 <__aeabi_i2d>
 800427c:	4632      	mov	r2, r6
 800427e:	463b      	mov	r3, r7
 8004280:	f7fc fc2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004284:	b910      	cbnz	r0, 800428c <_dtoa_r+0x184>
 8004286:	9b00      	ldr	r3, [sp, #0]
 8004288:	3b01      	subs	r3, #1
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	9b00      	ldr	r3, [sp, #0]
 800428e:	2b16      	cmp	r3, #22
 8004290:	d85a      	bhi.n	8004348 <_dtoa_r+0x240>
 8004292:	9a00      	ldr	r2, [sp, #0]
 8004294:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <_dtoa_r+0x2ec>)
 8004296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	ec51 0b19 	vmov	r0, r1, d9
 80042a2:	f7fc fc23 	bl	8000aec <__aeabi_dcmplt>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d050      	beq.n	800434c <_dtoa_r+0x244>
 80042aa:	9b00      	ldr	r3, [sp, #0]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80042b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042b6:	1b5d      	subs	r5, r3, r5
 80042b8:	1e6b      	subs	r3, r5, #1
 80042ba:	9305      	str	r3, [sp, #20]
 80042bc:	bf45      	ittet	mi
 80042be:	f1c5 0301 	rsbmi	r3, r5, #1
 80042c2:	9304      	strmi	r3, [sp, #16]
 80042c4:	2300      	movpl	r3, #0
 80042c6:	2300      	movmi	r3, #0
 80042c8:	bf4c      	ite	mi
 80042ca:	9305      	strmi	r3, [sp, #20]
 80042cc:	9304      	strpl	r3, [sp, #16]
 80042ce:	9b00      	ldr	r3, [sp, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	db3d      	blt.n	8004350 <_dtoa_r+0x248>
 80042d4:	9b05      	ldr	r3, [sp, #20]
 80042d6:	9a00      	ldr	r2, [sp, #0]
 80042d8:	920a      	str	r2, [sp, #40]	; 0x28
 80042da:	4413      	add	r3, r2
 80042dc:	9305      	str	r3, [sp, #20]
 80042de:	2300      	movs	r3, #0
 80042e0:	9307      	str	r3, [sp, #28]
 80042e2:	9b06      	ldr	r3, [sp, #24]
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	f200 8089 	bhi.w	80043fc <_dtoa_r+0x2f4>
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	bfc4      	itt	gt
 80042ee:	3b04      	subgt	r3, #4
 80042f0:	9306      	strgt	r3, [sp, #24]
 80042f2:	9b06      	ldr	r3, [sp, #24]
 80042f4:	f1a3 0302 	sub.w	r3, r3, #2
 80042f8:	bfcc      	ite	gt
 80042fa:	2500      	movgt	r5, #0
 80042fc:	2501      	movle	r5, #1
 80042fe:	2b03      	cmp	r3, #3
 8004300:	f200 8087 	bhi.w	8004412 <_dtoa_r+0x30a>
 8004304:	e8df f003 	tbb	[pc, r3]
 8004308:	59383a2d 	.word	0x59383a2d
 800430c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004310:	441d      	add	r5, r3
 8004312:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004316:	2b20      	cmp	r3, #32
 8004318:	bfc1      	itttt	gt
 800431a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800431e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004322:	fa0b f303 	lslgt.w	r3, fp, r3
 8004326:	fa26 f000 	lsrgt.w	r0, r6, r0
 800432a:	bfda      	itte	le
 800432c:	f1c3 0320 	rsble	r3, r3, #32
 8004330:	fa06 f003 	lslle.w	r0, r6, r3
 8004334:	4318      	orrgt	r0, r3
 8004336:	f7fc f8ed 	bl	8000514 <__aeabi_ui2d>
 800433a:	2301      	movs	r3, #1
 800433c:	4606      	mov	r6, r0
 800433e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004342:	3d01      	subs	r5, #1
 8004344:	930e      	str	r3, [sp, #56]	; 0x38
 8004346:	e76a      	b.n	800421e <_dtoa_r+0x116>
 8004348:	2301      	movs	r3, #1
 800434a:	e7b2      	b.n	80042b2 <_dtoa_r+0x1aa>
 800434c:	900b      	str	r0, [sp, #44]	; 0x2c
 800434e:	e7b1      	b.n	80042b4 <_dtoa_r+0x1ac>
 8004350:	9b04      	ldr	r3, [sp, #16]
 8004352:	9a00      	ldr	r2, [sp, #0]
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	9304      	str	r3, [sp, #16]
 8004358:	4253      	negs	r3, r2
 800435a:	9307      	str	r3, [sp, #28]
 800435c:	2300      	movs	r3, #0
 800435e:	930a      	str	r3, [sp, #40]	; 0x28
 8004360:	e7bf      	b.n	80042e2 <_dtoa_r+0x1da>
 8004362:	2300      	movs	r3, #0
 8004364:	9308      	str	r3, [sp, #32]
 8004366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	dc55      	bgt.n	8004418 <_dtoa_r+0x310>
 800436c:	2301      	movs	r3, #1
 800436e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004372:	461a      	mov	r2, r3
 8004374:	9209      	str	r2, [sp, #36]	; 0x24
 8004376:	e00c      	b.n	8004392 <_dtoa_r+0x28a>
 8004378:	2301      	movs	r3, #1
 800437a:	e7f3      	b.n	8004364 <_dtoa_r+0x25c>
 800437c:	2300      	movs	r3, #0
 800437e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004380:	9308      	str	r3, [sp, #32]
 8004382:	9b00      	ldr	r3, [sp, #0]
 8004384:	4413      	add	r3, r2
 8004386:	9302      	str	r3, [sp, #8]
 8004388:	3301      	adds	r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	9303      	str	r3, [sp, #12]
 800438e:	bfb8      	it	lt
 8004390:	2301      	movlt	r3, #1
 8004392:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004394:	2200      	movs	r2, #0
 8004396:	6042      	str	r2, [r0, #4]
 8004398:	2204      	movs	r2, #4
 800439a:	f102 0614 	add.w	r6, r2, #20
 800439e:	429e      	cmp	r6, r3
 80043a0:	6841      	ldr	r1, [r0, #4]
 80043a2:	d93d      	bls.n	8004420 <_dtoa_r+0x318>
 80043a4:	4620      	mov	r0, r4
 80043a6:	f001 f839 	bl	800541c <_Balloc>
 80043aa:	9001      	str	r0, [sp, #4]
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d13b      	bne.n	8004428 <_dtoa_r+0x320>
 80043b0:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <_dtoa_r+0x2f0>)
 80043b2:	4602      	mov	r2, r0
 80043b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80043b8:	e6c0      	b.n	800413c <_dtoa_r+0x34>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e7df      	b.n	800437e <_dtoa_r+0x276>
 80043be:	bf00      	nop
 80043c0:	636f4361 	.word	0x636f4361
 80043c4:	3fd287a7 	.word	0x3fd287a7
 80043c8:	8b60c8b3 	.word	0x8b60c8b3
 80043cc:	3fc68a28 	.word	0x3fc68a28
 80043d0:	509f79fb 	.word	0x509f79fb
 80043d4:	3fd34413 	.word	0x3fd34413
 80043d8:	08006fee 	.word	0x08006fee
 80043dc:	08007005 	.word	0x08007005
 80043e0:	7ff00000 	.word	0x7ff00000
 80043e4:	08006fea 	.word	0x08006fea
 80043e8:	08006fe1 	.word	0x08006fe1
 80043ec:	08006e65 	.word	0x08006e65
 80043f0:	3ff80000 	.word	0x3ff80000
 80043f4:	08007170 	.word	0x08007170
 80043f8:	08007060 	.word	0x08007060
 80043fc:	2501      	movs	r5, #1
 80043fe:	2300      	movs	r3, #0
 8004400:	9306      	str	r3, [sp, #24]
 8004402:	9508      	str	r5, [sp, #32]
 8004404:	f04f 33ff 	mov.w	r3, #4294967295
 8004408:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800440c:	2200      	movs	r2, #0
 800440e:	2312      	movs	r3, #18
 8004410:	e7b0      	b.n	8004374 <_dtoa_r+0x26c>
 8004412:	2301      	movs	r3, #1
 8004414:	9308      	str	r3, [sp, #32]
 8004416:	e7f5      	b.n	8004404 <_dtoa_r+0x2fc>
 8004418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800441a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800441e:	e7b8      	b.n	8004392 <_dtoa_r+0x28a>
 8004420:	3101      	adds	r1, #1
 8004422:	6041      	str	r1, [r0, #4]
 8004424:	0052      	lsls	r2, r2, #1
 8004426:	e7b8      	b.n	800439a <_dtoa_r+0x292>
 8004428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800442a:	9a01      	ldr	r2, [sp, #4]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	9b03      	ldr	r3, [sp, #12]
 8004430:	2b0e      	cmp	r3, #14
 8004432:	f200 809d 	bhi.w	8004570 <_dtoa_r+0x468>
 8004436:	2d00      	cmp	r5, #0
 8004438:	f000 809a 	beq.w	8004570 <_dtoa_r+0x468>
 800443c:	9b00      	ldr	r3, [sp, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	dd32      	ble.n	80044a8 <_dtoa_r+0x3a0>
 8004442:	4ab7      	ldr	r2, [pc, #732]	; (8004720 <_dtoa_r+0x618>)
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800444c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004450:	9b00      	ldr	r3, [sp, #0]
 8004452:	05d8      	lsls	r0, r3, #23
 8004454:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004458:	d516      	bpl.n	8004488 <_dtoa_r+0x380>
 800445a:	4bb2      	ldr	r3, [pc, #712]	; (8004724 <_dtoa_r+0x61c>)
 800445c:	ec51 0b19 	vmov	r0, r1, d9
 8004460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004464:	f7fc f9fa 	bl	800085c <__aeabi_ddiv>
 8004468:	f007 070f 	and.w	r7, r7, #15
 800446c:	4682      	mov	sl, r0
 800446e:	468b      	mov	fp, r1
 8004470:	2503      	movs	r5, #3
 8004472:	4eac      	ldr	r6, [pc, #688]	; (8004724 <_dtoa_r+0x61c>)
 8004474:	b957      	cbnz	r7, 800448c <_dtoa_r+0x384>
 8004476:	4642      	mov	r2, r8
 8004478:	464b      	mov	r3, r9
 800447a:	4650      	mov	r0, sl
 800447c:	4659      	mov	r1, fp
 800447e:	f7fc f9ed 	bl	800085c <__aeabi_ddiv>
 8004482:	4682      	mov	sl, r0
 8004484:	468b      	mov	fp, r1
 8004486:	e028      	b.n	80044da <_dtoa_r+0x3d2>
 8004488:	2502      	movs	r5, #2
 800448a:	e7f2      	b.n	8004472 <_dtoa_r+0x36a>
 800448c:	07f9      	lsls	r1, r7, #31
 800448e:	d508      	bpl.n	80044a2 <_dtoa_r+0x39a>
 8004490:	4640      	mov	r0, r8
 8004492:	4649      	mov	r1, r9
 8004494:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004498:	f7fc f8b6 	bl	8000608 <__aeabi_dmul>
 800449c:	3501      	adds	r5, #1
 800449e:	4680      	mov	r8, r0
 80044a0:	4689      	mov	r9, r1
 80044a2:	107f      	asrs	r7, r7, #1
 80044a4:	3608      	adds	r6, #8
 80044a6:	e7e5      	b.n	8004474 <_dtoa_r+0x36c>
 80044a8:	f000 809b 	beq.w	80045e2 <_dtoa_r+0x4da>
 80044ac:	9b00      	ldr	r3, [sp, #0]
 80044ae:	4f9d      	ldr	r7, [pc, #628]	; (8004724 <_dtoa_r+0x61c>)
 80044b0:	425e      	negs	r6, r3
 80044b2:	4b9b      	ldr	r3, [pc, #620]	; (8004720 <_dtoa_r+0x618>)
 80044b4:	f006 020f 	and.w	r2, r6, #15
 80044b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	ec51 0b19 	vmov	r0, r1, d9
 80044c4:	f7fc f8a0 	bl	8000608 <__aeabi_dmul>
 80044c8:	1136      	asrs	r6, r6, #4
 80044ca:	4682      	mov	sl, r0
 80044cc:	468b      	mov	fp, r1
 80044ce:	2300      	movs	r3, #0
 80044d0:	2502      	movs	r5, #2
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	d17a      	bne.n	80045cc <_dtoa_r+0x4c4>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1d3      	bne.n	8004482 <_dtoa_r+0x37a>
 80044da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8082 	beq.w	80045e6 <_dtoa_r+0x4de>
 80044e2:	4b91      	ldr	r3, [pc, #580]	; (8004728 <_dtoa_r+0x620>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	4650      	mov	r0, sl
 80044e8:	4659      	mov	r1, fp
 80044ea:	f7fc faff 	bl	8000aec <__aeabi_dcmplt>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d079      	beq.n	80045e6 <_dtoa_r+0x4de>
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d076      	beq.n	80045e6 <_dtoa_r+0x4de>
 80044f8:	9b02      	ldr	r3, [sp, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	dd36      	ble.n	800456c <_dtoa_r+0x464>
 80044fe:	9b00      	ldr	r3, [sp, #0]
 8004500:	4650      	mov	r0, sl
 8004502:	4659      	mov	r1, fp
 8004504:	1e5f      	subs	r7, r3, #1
 8004506:	2200      	movs	r2, #0
 8004508:	4b88      	ldr	r3, [pc, #544]	; (800472c <_dtoa_r+0x624>)
 800450a:	f7fc f87d 	bl	8000608 <__aeabi_dmul>
 800450e:	9e02      	ldr	r6, [sp, #8]
 8004510:	4682      	mov	sl, r0
 8004512:	468b      	mov	fp, r1
 8004514:	3501      	adds	r5, #1
 8004516:	4628      	mov	r0, r5
 8004518:	f7fc f80c 	bl	8000534 <__aeabi_i2d>
 800451c:	4652      	mov	r2, sl
 800451e:	465b      	mov	r3, fp
 8004520:	f7fc f872 	bl	8000608 <__aeabi_dmul>
 8004524:	4b82      	ldr	r3, [pc, #520]	; (8004730 <_dtoa_r+0x628>)
 8004526:	2200      	movs	r2, #0
 8004528:	f7fb feb8 	bl	800029c <__adddf3>
 800452c:	46d0      	mov	r8, sl
 800452e:	46d9      	mov	r9, fp
 8004530:	4682      	mov	sl, r0
 8004532:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004536:	2e00      	cmp	r6, #0
 8004538:	d158      	bne.n	80045ec <_dtoa_r+0x4e4>
 800453a:	4b7e      	ldr	r3, [pc, #504]	; (8004734 <_dtoa_r+0x62c>)
 800453c:	2200      	movs	r2, #0
 800453e:	4640      	mov	r0, r8
 8004540:	4649      	mov	r1, r9
 8004542:	f7fb fea9 	bl	8000298 <__aeabi_dsub>
 8004546:	4652      	mov	r2, sl
 8004548:	465b      	mov	r3, fp
 800454a:	4680      	mov	r8, r0
 800454c:	4689      	mov	r9, r1
 800454e:	f7fc faeb 	bl	8000b28 <__aeabi_dcmpgt>
 8004552:	2800      	cmp	r0, #0
 8004554:	f040 8295 	bne.w	8004a82 <_dtoa_r+0x97a>
 8004558:	4652      	mov	r2, sl
 800455a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800455e:	4640      	mov	r0, r8
 8004560:	4649      	mov	r1, r9
 8004562:	f7fc fac3 	bl	8000aec <__aeabi_dcmplt>
 8004566:	2800      	cmp	r0, #0
 8004568:	f040 8289 	bne.w	8004a7e <_dtoa_r+0x976>
 800456c:	ec5b ab19 	vmov	sl, fp, d9
 8004570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004572:	2b00      	cmp	r3, #0
 8004574:	f2c0 8148 	blt.w	8004808 <_dtoa_r+0x700>
 8004578:	9a00      	ldr	r2, [sp, #0]
 800457a:	2a0e      	cmp	r2, #14
 800457c:	f300 8144 	bgt.w	8004808 <_dtoa_r+0x700>
 8004580:	4b67      	ldr	r3, [pc, #412]	; (8004720 <_dtoa_r+0x618>)
 8004582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004586:	e9d3 8900 	ldrd	r8, r9, [r3]
 800458a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	f280 80d5 	bge.w	800473c <_dtoa_r+0x634>
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f300 80d1 	bgt.w	800473c <_dtoa_r+0x634>
 800459a:	f040 826f 	bne.w	8004a7c <_dtoa_r+0x974>
 800459e:	4b65      	ldr	r3, [pc, #404]	; (8004734 <_dtoa_r+0x62c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	4640      	mov	r0, r8
 80045a4:	4649      	mov	r1, r9
 80045a6:	f7fc f82f 	bl	8000608 <__aeabi_dmul>
 80045aa:	4652      	mov	r2, sl
 80045ac:	465b      	mov	r3, fp
 80045ae:	f7fc fab1 	bl	8000b14 <__aeabi_dcmpge>
 80045b2:	9e03      	ldr	r6, [sp, #12]
 80045b4:	4637      	mov	r7, r6
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f040 8245 	bne.w	8004a46 <_dtoa_r+0x93e>
 80045bc:	9d01      	ldr	r5, [sp, #4]
 80045be:	2331      	movs	r3, #49	; 0x31
 80045c0:	f805 3b01 	strb.w	r3, [r5], #1
 80045c4:	9b00      	ldr	r3, [sp, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	e240      	b.n	8004a4e <_dtoa_r+0x946>
 80045cc:	07f2      	lsls	r2, r6, #31
 80045ce:	d505      	bpl.n	80045dc <_dtoa_r+0x4d4>
 80045d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d4:	f7fc f818 	bl	8000608 <__aeabi_dmul>
 80045d8:	3501      	adds	r5, #1
 80045da:	2301      	movs	r3, #1
 80045dc:	1076      	asrs	r6, r6, #1
 80045de:	3708      	adds	r7, #8
 80045e0:	e777      	b.n	80044d2 <_dtoa_r+0x3ca>
 80045e2:	2502      	movs	r5, #2
 80045e4:	e779      	b.n	80044da <_dtoa_r+0x3d2>
 80045e6:	9f00      	ldr	r7, [sp, #0]
 80045e8:	9e03      	ldr	r6, [sp, #12]
 80045ea:	e794      	b.n	8004516 <_dtoa_r+0x40e>
 80045ec:	9901      	ldr	r1, [sp, #4]
 80045ee:	4b4c      	ldr	r3, [pc, #304]	; (8004720 <_dtoa_r+0x618>)
 80045f0:	4431      	add	r1, r6
 80045f2:	910d      	str	r1, [sp, #52]	; 0x34
 80045f4:	9908      	ldr	r1, [sp, #32]
 80045f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80045fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045fe:	2900      	cmp	r1, #0
 8004600:	d043      	beq.n	800468a <_dtoa_r+0x582>
 8004602:	494d      	ldr	r1, [pc, #308]	; (8004738 <_dtoa_r+0x630>)
 8004604:	2000      	movs	r0, #0
 8004606:	f7fc f929 	bl	800085c <__aeabi_ddiv>
 800460a:	4652      	mov	r2, sl
 800460c:	465b      	mov	r3, fp
 800460e:	f7fb fe43 	bl	8000298 <__aeabi_dsub>
 8004612:	9d01      	ldr	r5, [sp, #4]
 8004614:	4682      	mov	sl, r0
 8004616:	468b      	mov	fp, r1
 8004618:	4649      	mov	r1, r9
 800461a:	4640      	mov	r0, r8
 800461c:	f7fc faa4 	bl	8000b68 <__aeabi_d2iz>
 8004620:	4606      	mov	r6, r0
 8004622:	f7fb ff87 	bl	8000534 <__aeabi_i2d>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4640      	mov	r0, r8
 800462c:	4649      	mov	r1, r9
 800462e:	f7fb fe33 	bl	8000298 <__aeabi_dsub>
 8004632:	3630      	adds	r6, #48	; 0x30
 8004634:	f805 6b01 	strb.w	r6, [r5], #1
 8004638:	4652      	mov	r2, sl
 800463a:	465b      	mov	r3, fp
 800463c:	4680      	mov	r8, r0
 800463e:	4689      	mov	r9, r1
 8004640:	f7fc fa54 	bl	8000aec <__aeabi_dcmplt>
 8004644:	2800      	cmp	r0, #0
 8004646:	d163      	bne.n	8004710 <_dtoa_r+0x608>
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	4936      	ldr	r1, [pc, #216]	; (8004728 <_dtoa_r+0x620>)
 800464e:	2000      	movs	r0, #0
 8004650:	f7fb fe22 	bl	8000298 <__aeabi_dsub>
 8004654:	4652      	mov	r2, sl
 8004656:	465b      	mov	r3, fp
 8004658:	f7fc fa48 	bl	8000aec <__aeabi_dcmplt>
 800465c:	2800      	cmp	r0, #0
 800465e:	f040 80b5 	bne.w	80047cc <_dtoa_r+0x6c4>
 8004662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004664:	429d      	cmp	r5, r3
 8004666:	d081      	beq.n	800456c <_dtoa_r+0x464>
 8004668:	4b30      	ldr	r3, [pc, #192]	; (800472c <_dtoa_r+0x624>)
 800466a:	2200      	movs	r2, #0
 800466c:	4650      	mov	r0, sl
 800466e:	4659      	mov	r1, fp
 8004670:	f7fb ffca 	bl	8000608 <__aeabi_dmul>
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <_dtoa_r+0x624>)
 8004676:	4682      	mov	sl, r0
 8004678:	468b      	mov	fp, r1
 800467a:	4640      	mov	r0, r8
 800467c:	4649      	mov	r1, r9
 800467e:	2200      	movs	r2, #0
 8004680:	f7fb ffc2 	bl	8000608 <__aeabi_dmul>
 8004684:	4680      	mov	r8, r0
 8004686:	4689      	mov	r9, r1
 8004688:	e7c6      	b.n	8004618 <_dtoa_r+0x510>
 800468a:	4650      	mov	r0, sl
 800468c:	4659      	mov	r1, fp
 800468e:	f7fb ffbb 	bl	8000608 <__aeabi_dmul>
 8004692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004694:	9d01      	ldr	r5, [sp, #4]
 8004696:	930f      	str	r3, [sp, #60]	; 0x3c
 8004698:	4682      	mov	sl, r0
 800469a:	468b      	mov	fp, r1
 800469c:	4649      	mov	r1, r9
 800469e:	4640      	mov	r0, r8
 80046a0:	f7fc fa62 	bl	8000b68 <__aeabi_d2iz>
 80046a4:	4606      	mov	r6, r0
 80046a6:	f7fb ff45 	bl	8000534 <__aeabi_i2d>
 80046aa:	3630      	adds	r6, #48	; 0x30
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4640      	mov	r0, r8
 80046b2:	4649      	mov	r1, r9
 80046b4:	f7fb fdf0 	bl	8000298 <__aeabi_dsub>
 80046b8:	f805 6b01 	strb.w	r6, [r5], #1
 80046bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046be:	429d      	cmp	r5, r3
 80046c0:	4680      	mov	r8, r0
 80046c2:	4689      	mov	r9, r1
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	d124      	bne.n	8004714 <_dtoa_r+0x60c>
 80046ca:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <_dtoa_r+0x630>)
 80046cc:	4650      	mov	r0, sl
 80046ce:	4659      	mov	r1, fp
 80046d0:	f7fb fde4 	bl	800029c <__adddf3>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4640      	mov	r0, r8
 80046da:	4649      	mov	r1, r9
 80046dc:	f7fc fa24 	bl	8000b28 <__aeabi_dcmpgt>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d173      	bne.n	80047cc <_dtoa_r+0x6c4>
 80046e4:	4652      	mov	r2, sl
 80046e6:	465b      	mov	r3, fp
 80046e8:	4913      	ldr	r1, [pc, #76]	; (8004738 <_dtoa_r+0x630>)
 80046ea:	2000      	movs	r0, #0
 80046ec:	f7fb fdd4 	bl	8000298 <__aeabi_dsub>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4640      	mov	r0, r8
 80046f6:	4649      	mov	r1, r9
 80046f8:	f7fc f9f8 	bl	8000aec <__aeabi_dcmplt>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f43f af35 	beq.w	800456c <_dtoa_r+0x464>
 8004702:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004704:	1e6b      	subs	r3, r5, #1
 8004706:	930f      	str	r3, [sp, #60]	; 0x3c
 8004708:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d0f8      	beq.n	8004702 <_dtoa_r+0x5fa>
 8004710:	9700      	str	r7, [sp, #0]
 8004712:	e049      	b.n	80047a8 <_dtoa_r+0x6a0>
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <_dtoa_r+0x624>)
 8004716:	f7fb ff77 	bl	8000608 <__aeabi_dmul>
 800471a:	4680      	mov	r8, r0
 800471c:	4689      	mov	r9, r1
 800471e:	e7bd      	b.n	800469c <_dtoa_r+0x594>
 8004720:	08007170 	.word	0x08007170
 8004724:	08007148 	.word	0x08007148
 8004728:	3ff00000 	.word	0x3ff00000
 800472c:	40240000 	.word	0x40240000
 8004730:	401c0000 	.word	0x401c0000
 8004734:	40140000 	.word	0x40140000
 8004738:	3fe00000 	.word	0x3fe00000
 800473c:	9d01      	ldr	r5, [sp, #4]
 800473e:	4656      	mov	r6, sl
 8004740:	465f      	mov	r7, fp
 8004742:	4642      	mov	r2, r8
 8004744:	464b      	mov	r3, r9
 8004746:	4630      	mov	r0, r6
 8004748:	4639      	mov	r1, r7
 800474a:	f7fc f887 	bl	800085c <__aeabi_ddiv>
 800474e:	f7fc fa0b 	bl	8000b68 <__aeabi_d2iz>
 8004752:	4682      	mov	sl, r0
 8004754:	f7fb feee 	bl	8000534 <__aeabi_i2d>
 8004758:	4642      	mov	r2, r8
 800475a:	464b      	mov	r3, r9
 800475c:	f7fb ff54 	bl	8000608 <__aeabi_dmul>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4630      	mov	r0, r6
 8004766:	4639      	mov	r1, r7
 8004768:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800476c:	f7fb fd94 	bl	8000298 <__aeabi_dsub>
 8004770:	f805 6b01 	strb.w	r6, [r5], #1
 8004774:	9e01      	ldr	r6, [sp, #4]
 8004776:	9f03      	ldr	r7, [sp, #12]
 8004778:	1bae      	subs	r6, r5, r6
 800477a:	42b7      	cmp	r7, r6
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	d135      	bne.n	80047ee <_dtoa_r+0x6e6>
 8004782:	f7fb fd8b 	bl	800029c <__adddf3>
 8004786:	4642      	mov	r2, r8
 8004788:	464b      	mov	r3, r9
 800478a:	4606      	mov	r6, r0
 800478c:	460f      	mov	r7, r1
 800478e:	f7fc f9cb 	bl	8000b28 <__aeabi_dcmpgt>
 8004792:	b9d0      	cbnz	r0, 80047ca <_dtoa_r+0x6c2>
 8004794:	4642      	mov	r2, r8
 8004796:	464b      	mov	r3, r9
 8004798:	4630      	mov	r0, r6
 800479a:	4639      	mov	r1, r7
 800479c:	f7fc f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 80047a0:	b110      	cbz	r0, 80047a8 <_dtoa_r+0x6a0>
 80047a2:	f01a 0f01 	tst.w	sl, #1
 80047a6:	d110      	bne.n	80047ca <_dtoa_r+0x6c2>
 80047a8:	4620      	mov	r0, r4
 80047aa:	ee18 1a10 	vmov	r1, s16
 80047ae:	f000 fe75 	bl	800549c <_Bfree>
 80047b2:	2300      	movs	r3, #0
 80047b4:	9800      	ldr	r0, [sp, #0]
 80047b6:	702b      	strb	r3, [r5, #0]
 80047b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047ba:	3001      	adds	r0, #1
 80047bc:	6018      	str	r0, [r3, #0]
 80047be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f43f acf1 	beq.w	80041a8 <_dtoa_r+0xa0>
 80047c6:	601d      	str	r5, [r3, #0]
 80047c8:	e4ee      	b.n	80041a8 <_dtoa_r+0xa0>
 80047ca:	9f00      	ldr	r7, [sp, #0]
 80047cc:	462b      	mov	r3, r5
 80047ce:	461d      	mov	r5, r3
 80047d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047d4:	2a39      	cmp	r2, #57	; 0x39
 80047d6:	d106      	bne.n	80047e6 <_dtoa_r+0x6de>
 80047d8:	9a01      	ldr	r2, [sp, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d1f7      	bne.n	80047ce <_dtoa_r+0x6c6>
 80047de:	9901      	ldr	r1, [sp, #4]
 80047e0:	2230      	movs	r2, #48	; 0x30
 80047e2:	3701      	adds	r7, #1
 80047e4:	700a      	strb	r2, [r1, #0]
 80047e6:	781a      	ldrb	r2, [r3, #0]
 80047e8:	3201      	adds	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e790      	b.n	8004710 <_dtoa_r+0x608>
 80047ee:	4ba6      	ldr	r3, [pc, #664]	; (8004a88 <_dtoa_r+0x980>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	f7fb ff09 	bl	8000608 <__aeabi_dmul>
 80047f6:	2200      	movs	r2, #0
 80047f8:	2300      	movs	r3, #0
 80047fa:	4606      	mov	r6, r0
 80047fc:	460f      	mov	r7, r1
 80047fe:	f7fc f96b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004802:	2800      	cmp	r0, #0
 8004804:	d09d      	beq.n	8004742 <_dtoa_r+0x63a>
 8004806:	e7cf      	b.n	80047a8 <_dtoa_r+0x6a0>
 8004808:	9a08      	ldr	r2, [sp, #32]
 800480a:	2a00      	cmp	r2, #0
 800480c:	f000 80d7 	beq.w	80049be <_dtoa_r+0x8b6>
 8004810:	9a06      	ldr	r2, [sp, #24]
 8004812:	2a01      	cmp	r2, #1
 8004814:	f300 80ba 	bgt.w	800498c <_dtoa_r+0x884>
 8004818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800481a:	2a00      	cmp	r2, #0
 800481c:	f000 80b2 	beq.w	8004984 <_dtoa_r+0x87c>
 8004820:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004824:	9e07      	ldr	r6, [sp, #28]
 8004826:	9d04      	ldr	r5, [sp, #16]
 8004828:	9a04      	ldr	r2, [sp, #16]
 800482a:	441a      	add	r2, r3
 800482c:	9204      	str	r2, [sp, #16]
 800482e:	9a05      	ldr	r2, [sp, #20]
 8004830:	2101      	movs	r1, #1
 8004832:	441a      	add	r2, r3
 8004834:	4620      	mov	r0, r4
 8004836:	9205      	str	r2, [sp, #20]
 8004838:	f000 ff32 	bl	80056a0 <__i2b>
 800483c:	4607      	mov	r7, r0
 800483e:	2d00      	cmp	r5, #0
 8004840:	dd0c      	ble.n	800485c <_dtoa_r+0x754>
 8004842:	9b05      	ldr	r3, [sp, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	dd09      	ble.n	800485c <_dtoa_r+0x754>
 8004848:	42ab      	cmp	r3, r5
 800484a:	9a04      	ldr	r2, [sp, #16]
 800484c:	bfa8      	it	ge
 800484e:	462b      	movge	r3, r5
 8004850:	1ad2      	subs	r2, r2, r3
 8004852:	9204      	str	r2, [sp, #16]
 8004854:	9a05      	ldr	r2, [sp, #20]
 8004856:	1aed      	subs	r5, r5, r3
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	9305      	str	r3, [sp, #20]
 800485c:	9b07      	ldr	r3, [sp, #28]
 800485e:	b31b      	cbz	r3, 80048a8 <_dtoa_r+0x7a0>
 8004860:	9b08      	ldr	r3, [sp, #32]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80af 	beq.w	80049c6 <_dtoa_r+0x8be>
 8004868:	2e00      	cmp	r6, #0
 800486a:	dd13      	ble.n	8004894 <_dtoa_r+0x78c>
 800486c:	4639      	mov	r1, r7
 800486e:	4632      	mov	r2, r6
 8004870:	4620      	mov	r0, r4
 8004872:	f000 ffd5 	bl	8005820 <__pow5mult>
 8004876:	ee18 2a10 	vmov	r2, s16
 800487a:	4601      	mov	r1, r0
 800487c:	4607      	mov	r7, r0
 800487e:	4620      	mov	r0, r4
 8004880:	f000 ff24 	bl	80056cc <__multiply>
 8004884:	ee18 1a10 	vmov	r1, s16
 8004888:	4680      	mov	r8, r0
 800488a:	4620      	mov	r0, r4
 800488c:	f000 fe06 	bl	800549c <_Bfree>
 8004890:	ee08 8a10 	vmov	s16, r8
 8004894:	9b07      	ldr	r3, [sp, #28]
 8004896:	1b9a      	subs	r2, r3, r6
 8004898:	d006      	beq.n	80048a8 <_dtoa_r+0x7a0>
 800489a:	ee18 1a10 	vmov	r1, s16
 800489e:	4620      	mov	r0, r4
 80048a0:	f000 ffbe 	bl	8005820 <__pow5mult>
 80048a4:	ee08 0a10 	vmov	s16, r0
 80048a8:	2101      	movs	r1, #1
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fef8 	bl	80056a0 <__i2b>
 80048b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	4606      	mov	r6, r0
 80048b6:	f340 8088 	ble.w	80049ca <_dtoa_r+0x8c2>
 80048ba:	461a      	mov	r2, r3
 80048bc:	4601      	mov	r1, r0
 80048be:	4620      	mov	r0, r4
 80048c0:	f000 ffae 	bl	8005820 <__pow5mult>
 80048c4:	9b06      	ldr	r3, [sp, #24]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	4606      	mov	r6, r0
 80048ca:	f340 8081 	ble.w	80049d0 <_dtoa_r+0x8c8>
 80048ce:	f04f 0800 	mov.w	r8, #0
 80048d2:	6933      	ldr	r3, [r6, #16]
 80048d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80048d8:	6918      	ldr	r0, [r3, #16]
 80048da:	f000 fe91 	bl	8005600 <__hi0bits>
 80048de:	f1c0 0020 	rsb	r0, r0, #32
 80048e2:	9b05      	ldr	r3, [sp, #20]
 80048e4:	4418      	add	r0, r3
 80048e6:	f010 001f 	ands.w	r0, r0, #31
 80048ea:	f000 8092 	beq.w	8004a12 <_dtoa_r+0x90a>
 80048ee:	f1c0 0320 	rsb	r3, r0, #32
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	f340 808a 	ble.w	8004a0c <_dtoa_r+0x904>
 80048f8:	f1c0 001c 	rsb	r0, r0, #28
 80048fc:	9b04      	ldr	r3, [sp, #16]
 80048fe:	4403      	add	r3, r0
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	9b05      	ldr	r3, [sp, #20]
 8004904:	4403      	add	r3, r0
 8004906:	4405      	add	r5, r0
 8004908:	9305      	str	r3, [sp, #20]
 800490a:	9b04      	ldr	r3, [sp, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	dd07      	ble.n	8004920 <_dtoa_r+0x818>
 8004910:	ee18 1a10 	vmov	r1, s16
 8004914:	461a      	mov	r2, r3
 8004916:	4620      	mov	r0, r4
 8004918:	f000 ffdc 	bl	80058d4 <__lshift>
 800491c:	ee08 0a10 	vmov	s16, r0
 8004920:	9b05      	ldr	r3, [sp, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	dd05      	ble.n	8004932 <_dtoa_r+0x82a>
 8004926:	4631      	mov	r1, r6
 8004928:	461a      	mov	r2, r3
 800492a:	4620      	mov	r0, r4
 800492c:	f000 ffd2 	bl	80058d4 <__lshift>
 8004930:	4606      	mov	r6, r0
 8004932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d06e      	beq.n	8004a16 <_dtoa_r+0x90e>
 8004938:	ee18 0a10 	vmov	r0, s16
 800493c:	4631      	mov	r1, r6
 800493e:	f001 f839 	bl	80059b4 <__mcmp>
 8004942:	2800      	cmp	r0, #0
 8004944:	da67      	bge.n	8004a16 <_dtoa_r+0x90e>
 8004946:	9b00      	ldr	r3, [sp, #0]
 8004948:	3b01      	subs	r3, #1
 800494a:	ee18 1a10 	vmov	r1, s16
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	220a      	movs	r2, #10
 8004952:	2300      	movs	r3, #0
 8004954:	4620      	mov	r0, r4
 8004956:	f000 fdc3 	bl	80054e0 <__multadd>
 800495a:	9b08      	ldr	r3, [sp, #32]
 800495c:	ee08 0a10 	vmov	s16, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 81b1 	beq.w	8004cc8 <_dtoa_r+0xbc0>
 8004966:	2300      	movs	r3, #0
 8004968:	4639      	mov	r1, r7
 800496a:	220a      	movs	r2, #10
 800496c:	4620      	mov	r0, r4
 800496e:	f000 fdb7 	bl	80054e0 <__multadd>
 8004972:	9b02      	ldr	r3, [sp, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	4607      	mov	r7, r0
 8004978:	f300 808e 	bgt.w	8004a98 <_dtoa_r+0x990>
 800497c:	9b06      	ldr	r3, [sp, #24]
 800497e:	2b02      	cmp	r3, #2
 8004980:	dc51      	bgt.n	8004a26 <_dtoa_r+0x91e>
 8004982:	e089      	b.n	8004a98 <_dtoa_r+0x990>
 8004984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800498a:	e74b      	b.n	8004824 <_dtoa_r+0x71c>
 800498c:	9b03      	ldr	r3, [sp, #12]
 800498e:	1e5e      	subs	r6, r3, #1
 8004990:	9b07      	ldr	r3, [sp, #28]
 8004992:	42b3      	cmp	r3, r6
 8004994:	bfbf      	itttt	lt
 8004996:	9b07      	ldrlt	r3, [sp, #28]
 8004998:	9607      	strlt	r6, [sp, #28]
 800499a:	1af2      	sublt	r2, r6, r3
 800499c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800499e:	bfb6      	itet	lt
 80049a0:	189b      	addlt	r3, r3, r2
 80049a2:	1b9e      	subge	r6, r3, r6
 80049a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	bfb8      	it	lt
 80049aa:	2600      	movlt	r6, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bfb7      	itett	lt
 80049b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80049b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80049b8:	1a9d      	sublt	r5, r3, r2
 80049ba:	2300      	movlt	r3, #0
 80049bc:	e734      	b.n	8004828 <_dtoa_r+0x720>
 80049be:	9e07      	ldr	r6, [sp, #28]
 80049c0:	9d04      	ldr	r5, [sp, #16]
 80049c2:	9f08      	ldr	r7, [sp, #32]
 80049c4:	e73b      	b.n	800483e <_dtoa_r+0x736>
 80049c6:	9a07      	ldr	r2, [sp, #28]
 80049c8:	e767      	b.n	800489a <_dtoa_r+0x792>
 80049ca:	9b06      	ldr	r3, [sp, #24]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	dc18      	bgt.n	8004a02 <_dtoa_r+0x8fa>
 80049d0:	f1ba 0f00 	cmp.w	sl, #0
 80049d4:	d115      	bne.n	8004a02 <_dtoa_r+0x8fa>
 80049d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049da:	b993      	cbnz	r3, 8004a02 <_dtoa_r+0x8fa>
 80049dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049e0:	0d1b      	lsrs	r3, r3, #20
 80049e2:	051b      	lsls	r3, r3, #20
 80049e4:	b183      	cbz	r3, 8004a08 <_dtoa_r+0x900>
 80049e6:	9b04      	ldr	r3, [sp, #16]
 80049e8:	3301      	adds	r3, #1
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	9b05      	ldr	r3, [sp, #20]
 80049ee:	3301      	adds	r3, #1
 80049f0:	9305      	str	r3, [sp, #20]
 80049f2:	f04f 0801 	mov.w	r8, #1
 80049f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f47f af6a 	bne.w	80048d2 <_dtoa_r+0x7ca>
 80049fe:	2001      	movs	r0, #1
 8004a00:	e76f      	b.n	80048e2 <_dtoa_r+0x7da>
 8004a02:	f04f 0800 	mov.w	r8, #0
 8004a06:	e7f6      	b.n	80049f6 <_dtoa_r+0x8ee>
 8004a08:	4698      	mov	r8, r3
 8004a0a:	e7f4      	b.n	80049f6 <_dtoa_r+0x8ee>
 8004a0c:	f43f af7d 	beq.w	800490a <_dtoa_r+0x802>
 8004a10:	4618      	mov	r0, r3
 8004a12:	301c      	adds	r0, #28
 8004a14:	e772      	b.n	80048fc <_dtoa_r+0x7f4>
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	dc37      	bgt.n	8004a8c <_dtoa_r+0x984>
 8004a1c:	9b06      	ldr	r3, [sp, #24]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	dd34      	ble.n	8004a8c <_dtoa_r+0x984>
 8004a22:	9b03      	ldr	r3, [sp, #12]
 8004a24:	9302      	str	r3, [sp, #8]
 8004a26:	9b02      	ldr	r3, [sp, #8]
 8004a28:	b96b      	cbnz	r3, 8004a46 <_dtoa_r+0x93e>
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	2205      	movs	r2, #5
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f000 fd56 	bl	80054e0 <__multadd>
 8004a34:	4601      	mov	r1, r0
 8004a36:	4606      	mov	r6, r0
 8004a38:	ee18 0a10 	vmov	r0, s16
 8004a3c:	f000 ffba 	bl	80059b4 <__mcmp>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	f73f adbb 	bgt.w	80045bc <_dtoa_r+0x4b4>
 8004a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a48:	9d01      	ldr	r5, [sp, #4]
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	f04f 0800 	mov.w	r8, #0
 8004a52:	4631      	mov	r1, r6
 8004a54:	4620      	mov	r0, r4
 8004a56:	f000 fd21 	bl	800549c <_Bfree>
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	f43f aea4 	beq.w	80047a8 <_dtoa_r+0x6a0>
 8004a60:	f1b8 0f00 	cmp.w	r8, #0
 8004a64:	d005      	beq.n	8004a72 <_dtoa_r+0x96a>
 8004a66:	45b8      	cmp	r8, r7
 8004a68:	d003      	beq.n	8004a72 <_dtoa_r+0x96a>
 8004a6a:	4641      	mov	r1, r8
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f000 fd15 	bl	800549c <_Bfree>
 8004a72:	4639      	mov	r1, r7
 8004a74:	4620      	mov	r0, r4
 8004a76:	f000 fd11 	bl	800549c <_Bfree>
 8004a7a:	e695      	b.n	80047a8 <_dtoa_r+0x6a0>
 8004a7c:	2600      	movs	r6, #0
 8004a7e:	4637      	mov	r7, r6
 8004a80:	e7e1      	b.n	8004a46 <_dtoa_r+0x93e>
 8004a82:	9700      	str	r7, [sp, #0]
 8004a84:	4637      	mov	r7, r6
 8004a86:	e599      	b.n	80045bc <_dtoa_r+0x4b4>
 8004a88:	40240000 	.word	0x40240000
 8004a8c:	9b08      	ldr	r3, [sp, #32]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80ca 	beq.w	8004c28 <_dtoa_r+0xb20>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	9302      	str	r3, [sp, #8]
 8004a98:	2d00      	cmp	r5, #0
 8004a9a:	dd05      	ble.n	8004aa8 <_dtoa_r+0x9a0>
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	462a      	mov	r2, r5
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f000 ff17 	bl	80058d4 <__lshift>
 8004aa6:	4607      	mov	r7, r0
 8004aa8:	f1b8 0f00 	cmp.w	r8, #0
 8004aac:	d05b      	beq.n	8004b66 <_dtoa_r+0xa5e>
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f000 fcb3 	bl	800541c <_Balloc>
 8004ab6:	4605      	mov	r5, r0
 8004ab8:	b928      	cbnz	r0, 8004ac6 <_dtoa_r+0x9be>
 8004aba:	4b87      	ldr	r3, [pc, #540]	; (8004cd8 <_dtoa_r+0xbd0>)
 8004abc:	4602      	mov	r2, r0
 8004abe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ac2:	f7ff bb3b 	b.w	800413c <_dtoa_r+0x34>
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	3202      	adds	r2, #2
 8004aca:	0092      	lsls	r2, r2, #2
 8004acc:	f107 010c 	add.w	r1, r7, #12
 8004ad0:	300c      	adds	r0, #12
 8004ad2:	f000 fc95 	bl	8005400 <memcpy>
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4620      	mov	r0, r4
 8004adc:	f000 fefa 	bl	80058d4 <__lshift>
 8004ae0:	9b01      	ldr	r3, [sp, #4]
 8004ae2:	f103 0901 	add.w	r9, r3, #1
 8004ae6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004aea:	4413      	add	r3, r2
 8004aec:	9305      	str	r3, [sp, #20]
 8004aee:	f00a 0301 	and.w	r3, sl, #1
 8004af2:	46b8      	mov	r8, r7
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	4607      	mov	r7, r0
 8004af8:	4631      	mov	r1, r6
 8004afa:	ee18 0a10 	vmov	r0, s16
 8004afe:	f7ff fa77 	bl	8003ff0 <quorem>
 8004b02:	4641      	mov	r1, r8
 8004b04:	9002      	str	r0, [sp, #8]
 8004b06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004b0a:	ee18 0a10 	vmov	r0, s16
 8004b0e:	f000 ff51 	bl	80059b4 <__mcmp>
 8004b12:	463a      	mov	r2, r7
 8004b14:	9003      	str	r0, [sp, #12]
 8004b16:	4631      	mov	r1, r6
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f000 ff67 	bl	80059ec <__mdiff>
 8004b1e:	68c2      	ldr	r2, [r0, #12]
 8004b20:	f109 3bff 	add.w	fp, r9, #4294967295
 8004b24:	4605      	mov	r5, r0
 8004b26:	bb02      	cbnz	r2, 8004b6a <_dtoa_r+0xa62>
 8004b28:	4601      	mov	r1, r0
 8004b2a:	ee18 0a10 	vmov	r0, s16
 8004b2e:	f000 ff41 	bl	80059b4 <__mcmp>
 8004b32:	4602      	mov	r2, r0
 8004b34:	4629      	mov	r1, r5
 8004b36:	4620      	mov	r0, r4
 8004b38:	9207      	str	r2, [sp, #28]
 8004b3a:	f000 fcaf 	bl	800549c <_Bfree>
 8004b3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004b42:	ea43 0102 	orr.w	r1, r3, r2
 8004b46:	9b04      	ldr	r3, [sp, #16]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	464d      	mov	r5, r9
 8004b4c:	d10f      	bne.n	8004b6e <_dtoa_r+0xa66>
 8004b4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004b52:	d02a      	beq.n	8004baa <_dtoa_r+0xaa2>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dd02      	ble.n	8004b60 <_dtoa_r+0xa58>
 8004b5a:	9b02      	ldr	r3, [sp, #8]
 8004b5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004b60:	f88b a000 	strb.w	sl, [fp]
 8004b64:	e775      	b.n	8004a52 <_dtoa_r+0x94a>
 8004b66:	4638      	mov	r0, r7
 8004b68:	e7ba      	b.n	8004ae0 <_dtoa_r+0x9d8>
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	e7e2      	b.n	8004b34 <_dtoa_r+0xa2c>
 8004b6e:	9b03      	ldr	r3, [sp, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	db04      	blt.n	8004b7e <_dtoa_r+0xa76>
 8004b74:	9906      	ldr	r1, [sp, #24]
 8004b76:	430b      	orrs	r3, r1
 8004b78:	9904      	ldr	r1, [sp, #16]
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	d122      	bne.n	8004bc4 <_dtoa_r+0xabc>
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	ddee      	ble.n	8004b60 <_dtoa_r+0xa58>
 8004b82:	ee18 1a10 	vmov	r1, s16
 8004b86:	2201      	movs	r2, #1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	f000 fea3 	bl	80058d4 <__lshift>
 8004b8e:	4631      	mov	r1, r6
 8004b90:	ee08 0a10 	vmov	s16, r0
 8004b94:	f000 ff0e 	bl	80059b4 <__mcmp>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	dc03      	bgt.n	8004ba4 <_dtoa_r+0xa9c>
 8004b9c:	d1e0      	bne.n	8004b60 <_dtoa_r+0xa58>
 8004b9e:	f01a 0f01 	tst.w	sl, #1
 8004ba2:	d0dd      	beq.n	8004b60 <_dtoa_r+0xa58>
 8004ba4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ba8:	d1d7      	bne.n	8004b5a <_dtoa_r+0xa52>
 8004baa:	2339      	movs	r3, #57	; 0x39
 8004bac:	f88b 3000 	strb.w	r3, [fp]
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	461d      	mov	r5, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004bba:	2a39      	cmp	r2, #57	; 0x39
 8004bbc:	d071      	beq.n	8004ca2 <_dtoa_r+0xb9a>
 8004bbe:	3201      	adds	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e746      	b.n	8004a52 <_dtoa_r+0x94a>
 8004bc4:	2a00      	cmp	r2, #0
 8004bc6:	dd07      	ble.n	8004bd8 <_dtoa_r+0xad0>
 8004bc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004bcc:	d0ed      	beq.n	8004baa <_dtoa_r+0xaa2>
 8004bce:	f10a 0301 	add.w	r3, sl, #1
 8004bd2:	f88b 3000 	strb.w	r3, [fp]
 8004bd6:	e73c      	b.n	8004a52 <_dtoa_r+0x94a>
 8004bd8:	9b05      	ldr	r3, [sp, #20]
 8004bda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004bde:	4599      	cmp	r9, r3
 8004be0:	d047      	beq.n	8004c72 <_dtoa_r+0xb6a>
 8004be2:	ee18 1a10 	vmov	r1, s16
 8004be6:	2300      	movs	r3, #0
 8004be8:	220a      	movs	r2, #10
 8004bea:	4620      	mov	r0, r4
 8004bec:	f000 fc78 	bl	80054e0 <__multadd>
 8004bf0:	45b8      	cmp	r8, r7
 8004bf2:	ee08 0a10 	vmov	s16, r0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	f04f 020a 	mov.w	r2, #10
 8004bfe:	4641      	mov	r1, r8
 8004c00:	4620      	mov	r0, r4
 8004c02:	d106      	bne.n	8004c12 <_dtoa_r+0xb0a>
 8004c04:	f000 fc6c 	bl	80054e0 <__multadd>
 8004c08:	4680      	mov	r8, r0
 8004c0a:	4607      	mov	r7, r0
 8004c0c:	f109 0901 	add.w	r9, r9, #1
 8004c10:	e772      	b.n	8004af8 <_dtoa_r+0x9f0>
 8004c12:	f000 fc65 	bl	80054e0 <__multadd>
 8004c16:	4639      	mov	r1, r7
 8004c18:	4680      	mov	r8, r0
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	220a      	movs	r2, #10
 8004c1e:	4620      	mov	r0, r4
 8004c20:	f000 fc5e 	bl	80054e0 <__multadd>
 8004c24:	4607      	mov	r7, r0
 8004c26:	e7f1      	b.n	8004c0c <_dtoa_r+0xb04>
 8004c28:	9b03      	ldr	r3, [sp, #12]
 8004c2a:	9302      	str	r3, [sp, #8]
 8004c2c:	9d01      	ldr	r5, [sp, #4]
 8004c2e:	ee18 0a10 	vmov	r0, s16
 8004c32:	4631      	mov	r1, r6
 8004c34:	f7ff f9dc 	bl	8003ff0 <quorem>
 8004c38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004c3c:	9b01      	ldr	r3, [sp, #4]
 8004c3e:	f805 ab01 	strb.w	sl, [r5], #1
 8004c42:	1aea      	subs	r2, r5, r3
 8004c44:	9b02      	ldr	r3, [sp, #8]
 8004c46:	4293      	cmp	r3, r2
 8004c48:	dd09      	ble.n	8004c5e <_dtoa_r+0xb56>
 8004c4a:	ee18 1a10 	vmov	r1, s16
 8004c4e:	2300      	movs	r3, #0
 8004c50:	220a      	movs	r2, #10
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 fc44 	bl	80054e0 <__multadd>
 8004c58:	ee08 0a10 	vmov	s16, r0
 8004c5c:	e7e7      	b.n	8004c2e <_dtoa_r+0xb26>
 8004c5e:	9b02      	ldr	r3, [sp, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bfc8      	it	gt
 8004c64:	461d      	movgt	r5, r3
 8004c66:	9b01      	ldr	r3, [sp, #4]
 8004c68:	bfd8      	it	le
 8004c6a:	2501      	movle	r5, #1
 8004c6c:	441d      	add	r5, r3
 8004c6e:	f04f 0800 	mov.w	r8, #0
 8004c72:	ee18 1a10 	vmov	r1, s16
 8004c76:	2201      	movs	r2, #1
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 fe2b 	bl	80058d4 <__lshift>
 8004c7e:	4631      	mov	r1, r6
 8004c80:	ee08 0a10 	vmov	s16, r0
 8004c84:	f000 fe96 	bl	80059b4 <__mcmp>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	dc91      	bgt.n	8004bb0 <_dtoa_r+0xaa8>
 8004c8c:	d102      	bne.n	8004c94 <_dtoa_r+0xb8c>
 8004c8e:	f01a 0f01 	tst.w	sl, #1
 8004c92:	d18d      	bne.n	8004bb0 <_dtoa_r+0xaa8>
 8004c94:	462b      	mov	r3, r5
 8004c96:	461d      	mov	r5, r3
 8004c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c9c:	2a30      	cmp	r2, #48	; 0x30
 8004c9e:	d0fa      	beq.n	8004c96 <_dtoa_r+0xb8e>
 8004ca0:	e6d7      	b.n	8004a52 <_dtoa_r+0x94a>
 8004ca2:	9a01      	ldr	r2, [sp, #4]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d184      	bne.n	8004bb2 <_dtoa_r+0xaaa>
 8004ca8:	9b00      	ldr	r3, [sp, #0]
 8004caa:	3301      	adds	r3, #1
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	2331      	movs	r3, #49	; 0x31
 8004cb0:	7013      	strb	r3, [r2, #0]
 8004cb2:	e6ce      	b.n	8004a52 <_dtoa_r+0x94a>
 8004cb4:	4b09      	ldr	r3, [pc, #36]	; (8004cdc <_dtoa_r+0xbd4>)
 8004cb6:	f7ff ba95 	b.w	80041e4 <_dtoa_r+0xdc>
 8004cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f47f aa6e 	bne.w	800419e <_dtoa_r+0x96>
 8004cc2:	4b07      	ldr	r3, [pc, #28]	; (8004ce0 <_dtoa_r+0xbd8>)
 8004cc4:	f7ff ba8e 	b.w	80041e4 <_dtoa_r+0xdc>
 8004cc8:	9b02      	ldr	r3, [sp, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dcae      	bgt.n	8004c2c <_dtoa_r+0xb24>
 8004cce:	9b06      	ldr	r3, [sp, #24]
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	f73f aea8 	bgt.w	8004a26 <_dtoa_r+0x91e>
 8004cd6:	e7a9      	b.n	8004c2c <_dtoa_r+0xb24>
 8004cd8:	08007060 	.word	0x08007060
 8004cdc:	08006e64 	.word	0x08006e64
 8004ce0:	08006fe1 	.word	0x08006fe1

08004ce4 <rshift>:
 8004ce4:	6903      	ldr	r3, [r0, #16]
 8004ce6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004cf2:	f100 0414 	add.w	r4, r0, #20
 8004cf6:	dd45      	ble.n	8004d84 <rshift+0xa0>
 8004cf8:	f011 011f 	ands.w	r1, r1, #31
 8004cfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004d00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004d04:	d10c      	bne.n	8004d20 <rshift+0x3c>
 8004d06:	f100 0710 	add.w	r7, r0, #16
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	42b1      	cmp	r1, r6
 8004d0e:	d334      	bcc.n	8004d7a <rshift+0x96>
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	1eea      	subs	r2, r5, #3
 8004d16:	4296      	cmp	r6, r2
 8004d18:	bf38      	it	cc
 8004d1a:	2300      	movcc	r3, #0
 8004d1c:	4423      	add	r3, r4
 8004d1e:	e015      	b.n	8004d4c <rshift+0x68>
 8004d20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004d24:	f1c1 0820 	rsb	r8, r1, #32
 8004d28:	40cf      	lsrs	r7, r1
 8004d2a:	f105 0e04 	add.w	lr, r5, #4
 8004d2e:	46a1      	mov	r9, r4
 8004d30:	4576      	cmp	r6, lr
 8004d32:	46f4      	mov	ip, lr
 8004d34:	d815      	bhi.n	8004d62 <rshift+0x7e>
 8004d36:	1a9a      	subs	r2, r3, r2
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	3a04      	subs	r2, #4
 8004d3c:	3501      	adds	r5, #1
 8004d3e:	42ae      	cmp	r6, r5
 8004d40:	bf38      	it	cc
 8004d42:	2200      	movcc	r2, #0
 8004d44:	18a3      	adds	r3, r4, r2
 8004d46:	50a7      	str	r7, [r4, r2]
 8004d48:	b107      	cbz	r7, 8004d4c <rshift+0x68>
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	1b1a      	subs	r2, r3, r4
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004d54:	bf08      	it	eq
 8004d56:	2300      	moveq	r3, #0
 8004d58:	6102      	str	r2, [r0, #16]
 8004d5a:	bf08      	it	eq
 8004d5c:	6143      	streq	r3, [r0, #20]
 8004d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d62:	f8dc c000 	ldr.w	ip, [ip]
 8004d66:	fa0c fc08 	lsl.w	ip, ip, r8
 8004d6a:	ea4c 0707 	orr.w	r7, ip, r7
 8004d6e:	f849 7b04 	str.w	r7, [r9], #4
 8004d72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d76:	40cf      	lsrs	r7, r1
 8004d78:	e7da      	b.n	8004d30 <rshift+0x4c>
 8004d7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8004d7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8004d82:	e7c3      	b.n	8004d0c <rshift+0x28>
 8004d84:	4623      	mov	r3, r4
 8004d86:	e7e1      	b.n	8004d4c <rshift+0x68>

08004d88 <__hexdig_fun>:
 8004d88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004d8c:	2b09      	cmp	r3, #9
 8004d8e:	d802      	bhi.n	8004d96 <__hexdig_fun+0xe>
 8004d90:	3820      	subs	r0, #32
 8004d92:	b2c0      	uxtb	r0, r0
 8004d94:	4770      	bx	lr
 8004d96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d801      	bhi.n	8004da2 <__hexdig_fun+0x1a>
 8004d9e:	3847      	subs	r0, #71	; 0x47
 8004da0:	e7f7      	b.n	8004d92 <__hexdig_fun+0xa>
 8004da2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d801      	bhi.n	8004dae <__hexdig_fun+0x26>
 8004daa:	3827      	subs	r0, #39	; 0x27
 8004dac:	e7f1      	b.n	8004d92 <__hexdig_fun+0xa>
 8004dae:	2000      	movs	r0, #0
 8004db0:	4770      	bx	lr
	...

08004db4 <__gethex>:
 8004db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db8:	ed2d 8b02 	vpush	{d8}
 8004dbc:	b089      	sub	sp, #36	; 0x24
 8004dbe:	ee08 0a10 	vmov	s16, r0
 8004dc2:	9304      	str	r3, [sp, #16]
 8004dc4:	4bb4      	ldr	r3, [pc, #720]	; (8005098 <__gethex+0x2e4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	468b      	mov	fp, r1
 8004dce:	4690      	mov	r8, r2
 8004dd0:	f7fb fa06 	bl	80001e0 <strlen>
 8004dd4:	9b01      	ldr	r3, [sp, #4]
 8004dd6:	f8db 2000 	ldr.w	r2, [fp]
 8004dda:	4403      	add	r3, r0
 8004ddc:	4682      	mov	sl, r0
 8004dde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004de2:	9305      	str	r3, [sp, #20]
 8004de4:	1c93      	adds	r3, r2, #2
 8004de6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004dea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004dee:	32fe      	adds	r2, #254	; 0xfe
 8004df0:	18d1      	adds	r1, r2, r3
 8004df2:	461f      	mov	r7, r3
 8004df4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004df8:	9100      	str	r1, [sp, #0]
 8004dfa:	2830      	cmp	r0, #48	; 0x30
 8004dfc:	d0f8      	beq.n	8004df0 <__gethex+0x3c>
 8004dfe:	f7ff ffc3 	bl	8004d88 <__hexdig_fun>
 8004e02:	4604      	mov	r4, r0
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d13a      	bne.n	8004e7e <__gethex+0xca>
 8004e08:	9901      	ldr	r1, [sp, #4]
 8004e0a:	4652      	mov	r2, sl
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f001 fa33 	bl	8006278 <strncmp>
 8004e12:	4605      	mov	r5, r0
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d168      	bne.n	8004eea <__gethex+0x136>
 8004e18:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004e1c:	eb07 060a 	add.w	r6, r7, sl
 8004e20:	f7ff ffb2 	bl	8004d88 <__hexdig_fun>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d062      	beq.n	8004eee <__gethex+0x13a>
 8004e28:	4633      	mov	r3, r6
 8004e2a:	7818      	ldrb	r0, [r3, #0]
 8004e2c:	2830      	cmp	r0, #48	; 0x30
 8004e2e:	461f      	mov	r7, r3
 8004e30:	f103 0301 	add.w	r3, r3, #1
 8004e34:	d0f9      	beq.n	8004e2a <__gethex+0x76>
 8004e36:	f7ff ffa7 	bl	8004d88 <__hexdig_fun>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	fab0 f480 	clz	r4, r0
 8004e40:	0964      	lsrs	r4, r4, #5
 8004e42:	4635      	mov	r5, r6
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	463a      	mov	r2, r7
 8004e48:	4616      	mov	r6, r2
 8004e4a:	3201      	adds	r2, #1
 8004e4c:	7830      	ldrb	r0, [r6, #0]
 8004e4e:	f7ff ff9b 	bl	8004d88 <__hexdig_fun>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d1f8      	bne.n	8004e48 <__gethex+0x94>
 8004e56:	9901      	ldr	r1, [sp, #4]
 8004e58:	4652      	mov	r2, sl
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f001 fa0c 	bl	8006278 <strncmp>
 8004e60:	b980      	cbnz	r0, 8004e84 <__gethex+0xd0>
 8004e62:	b94d      	cbnz	r5, 8004e78 <__gethex+0xc4>
 8004e64:	eb06 050a 	add.w	r5, r6, sl
 8004e68:	462a      	mov	r2, r5
 8004e6a:	4616      	mov	r6, r2
 8004e6c:	3201      	adds	r2, #1
 8004e6e:	7830      	ldrb	r0, [r6, #0]
 8004e70:	f7ff ff8a 	bl	8004d88 <__hexdig_fun>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d1f8      	bne.n	8004e6a <__gethex+0xb6>
 8004e78:	1bad      	subs	r5, r5, r6
 8004e7a:	00ad      	lsls	r5, r5, #2
 8004e7c:	e004      	b.n	8004e88 <__gethex+0xd4>
 8004e7e:	2400      	movs	r4, #0
 8004e80:	4625      	mov	r5, r4
 8004e82:	e7e0      	b.n	8004e46 <__gethex+0x92>
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	d1f7      	bne.n	8004e78 <__gethex+0xc4>
 8004e88:	7833      	ldrb	r3, [r6, #0]
 8004e8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e8e:	2b50      	cmp	r3, #80	; 0x50
 8004e90:	d13b      	bne.n	8004f0a <__gethex+0x156>
 8004e92:	7873      	ldrb	r3, [r6, #1]
 8004e94:	2b2b      	cmp	r3, #43	; 0x2b
 8004e96:	d02c      	beq.n	8004ef2 <__gethex+0x13e>
 8004e98:	2b2d      	cmp	r3, #45	; 0x2d
 8004e9a:	d02e      	beq.n	8004efa <__gethex+0x146>
 8004e9c:	1c71      	adds	r1, r6, #1
 8004e9e:	f04f 0900 	mov.w	r9, #0
 8004ea2:	7808      	ldrb	r0, [r1, #0]
 8004ea4:	f7ff ff70 	bl	8004d88 <__hexdig_fun>
 8004ea8:	1e43      	subs	r3, r0, #1
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b18      	cmp	r3, #24
 8004eae:	d82c      	bhi.n	8004f0a <__gethex+0x156>
 8004eb0:	f1a0 0210 	sub.w	r2, r0, #16
 8004eb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004eb8:	f7ff ff66 	bl	8004d88 <__hexdig_fun>
 8004ebc:	1e43      	subs	r3, r0, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b18      	cmp	r3, #24
 8004ec2:	d91d      	bls.n	8004f00 <__gethex+0x14c>
 8004ec4:	f1b9 0f00 	cmp.w	r9, #0
 8004ec8:	d000      	beq.n	8004ecc <__gethex+0x118>
 8004eca:	4252      	negs	r2, r2
 8004ecc:	4415      	add	r5, r2
 8004ece:	f8cb 1000 	str.w	r1, [fp]
 8004ed2:	b1e4      	cbz	r4, 8004f0e <__gethex+0x15a>
 8004ed4:	9b00      	ldr	r3, [sp, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	bf14      	ite	ne
 8004eda:	2700      	movne	r7, #0
 8004edc:	2706      	moveq	r7, #6
 8004ede:	4638      	mov	r0, r7
 8004ee0:	b009      	add	sp, #36	; 0x24
 8004ee2:	ecbd 8b02 	vpop	{d8}
 8004ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eea:	463e      	mov	r6, r7
 8004eec:	4625      	mov	r5, r4
 8004eee:	2401      	movs	r4, #1
 8004ef0:	e7ca      	b.n	8004e88 <__gethex+0xd4>
 8004ef2:	f04f 0900 	mov.w	r9, #0
 8004ef6:	1cb1      	adds	r1, r6, #2
 8004ef8:	e7d3      	b.n	8004ea2 <__gethex+0xee>
 8004efa:	f04f 0901 	mov.w	r9, #1
 8004efe:	e7fa      	b.n	8004ef6 <__gethex+0x142>
 8004f00:	230a      	movs	r3, #10
 8004f02:	fb03 0202 	mla	r2, r3, r2, r0
 8004f06:	3a10      	subs	r2, #16
 8004f08:	e7d4      	b.n	8004eb4 <__gethex+0x100>
 8004f0a:	4631      	mov	r1, r6
 8004f0c:	e7df      	b.n	8004ece <__gethex+0x11a>
 8004f0e:	1bf3      	subs	r3, r6, r7
 8004f10:	3b01      	subs	r3, #1
 8004f12:	4621      	mov	r1, r4
 8004f14:	2b07      	cmp	r3, #7
 8004f16:	dc0b      	bgt.n	8004f30 <__gethex+0x17c>
 8004f18:	ee18 0a10 	vmov	r0, s16
 8004f1c:	f000 fa7e 	bl	800541c <_Balloc>
 8004f20:	4604      	mov	r4, r0
 8004f22:	b940      	cbnz	r0, 8004f36 <__gethex+0x182>
 8004f24:	4b5d      	ldr	r3, [pc, #372]	; (800509c <__gethex+0x2e8>)
 8004f26:	4602      	mov	r2, r0
 8004f28:	21de      	movs	r1, #222	; 0xde
 8004f2a:	485d      	ldr	r0, [pc, #372]	; (80050a0 <__gethex+0x2ec>)
 8004f2c:	f001 f9c6 	bl	80062bc <__assert_func>
 8004f30:	3101      	adds	r1, #1
 8004f32:	105b      	asrs	r3, r3, #1
 8004f34:	e7ee      	b.n	8004f14 <__gethex+0x160>
 8004f36:	f100 0914 	add.w	r9, r0, #20
 8004f3a:	f04f 0b00 	mov.w	fp, #0
 8004f3e:	f1ca 0301 	rsb	r3, sl, #1
 8004f42:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f46:	f8cd b000 	str.w	fp, [sp]
 8004f4a:	9306      	str	r3, [sp, #24]
 8004f4c:	42b7      	cmp	r7, r6
 8004f4e:	d340      	bcc.n	8004fd2 <__gethex+0x21e>
 8004f50:	9802      	ldr	r0, [sp, #8]
 8004f52:	9b00      	ldr	r3, [sp, #0]
 8004f54:	f840 3b04 	str.w	r3, [r0], #4
 8004f58:	eba0 0009 	sub.w	r0, r0, r9
 8004f5c:	1080      	asrs	r0, r0, #2
 8004f5e:	0146      	lsls	r6, r0, #5
 8004f60:	6120      	str	r0, [r4, #16]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fb4c 	bl	8005600 <__hi0bits>
 8004f68:	1a30      	subs	r0, r6, r0
 8004f6a:	f8d8 6000 	ldr.w	r6, [r8]
 8004f6e:	42b0      	cmp	r0, r6
 8004f70:	dd63      	ble.n	800503a <__gethex+0x286>
 8004f72:	1b87      	subs	r7, r0, r6
 8004f74:	4639      	mov	r1, r7
 8004f76:	4620      	mov	r0, r4
 8004f78:	f000 fef0 	bl	8005d5c <__any_on>
 8004f7c:	4682      	mov	sl, r0
 8004f7e:	b1a8      	cbz	r0, 8004fac <__gethex+0x1f8>
 8004f80:	1e7b      	subs	r3, r7, #1
 8004f82:	1159      	asrs	r1, r3, #5
 8004f84:	f003 021f 	and.w	r2, r3, #31
 8004f88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004f8c:	f04f 0a01 	mov.w	sl, #1
 8004f90:	fa0a f202 	lsl.w	r2, sl, r2
 8004f94:	420a      	tst	r2, r1
 8004f96:	d009      	beq.n	8004fac <__gethex+0x1f8>
 8004f98:	4553      	cmp	r3, sl
 8004f9a:	dd05      	ble.n	8004fa8 <__gethex+0x1f4>
 8004f9c:	1eb9      	subs	r1, r7, #2
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f000 fedc 	bl	8005d5c <__any_on>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d145      	bne.n	8005034 <__gethex+0x280>
 8004fa8:	f04f 0a02 	mov.w	sl, #2
 8004fac:	4639      	mov	r1, r7
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f7ff fe98 	bl	8004ce4 <rshift>
 8004fb4:	443d      	add	r5, r7
 8004fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fba:	42ab      	cmp	r3, r5
 8004fbc:	da4c      	bge.n	8005058 <__gethex+0x2a4>
 8004fbe:	ee18 0a10 	vmov	r0, s16
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	f000 fa6a 	bl	800549c <_Bfree>
 8004fc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	27a3      	movs	r7, #163	; 0xa3
 8004fd0:	e785      	b.n	8004ede <__gethex+0x12a>
 8004fd2:	1e73      	subs	r3, r6, #1
 8004fd4:	9a05      	ldr	r2, [sp, #20]
 8004fd6:	9303      	str	r3, [sp, #12]
 8004fd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d019      	beq.n	8005014 <__gethex+0x260>
 8004fe0:	f1bb 0f20 	cmp.w	fp, #32
 8004fe4:	d107      	bne.n	8004ff6 <__gethex+0x242>
 8004fe6:	9b02      	ldr	r3, [sp, #8]
 8004fe8:	9a00      	ldr	r2, [sp, #0]
 8004fea:	f843 2b04 	str.w	r2, [r3], #4
 8004fee:	9302      	str	r3, [sp, #8]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	469b      	mov	fp, r3
 8004ff6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004ffa:	f7ff fec5 	bl	8004d88 <__hexdig_fun>
 8004ffe:	9b00      	ldr	r3, [sp, #0]
 8005000:	f000 000f 	and.w	r0, r0, #15
 8005004:	fa00 f00b 	lsl.w	r0, r0, fp
 8005008:	4303      	orrs	r3, r0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	f10b 0b04 	add.w	fp, fp, #4
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	e00d      	b.n	8005030 <__gethex+0x27c>
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	9a06      	ldr	r2, [sp, #24]
 8005018:	4413      	add	r3, r2
 800501a:	42bb      	cmp	r3, r7
 800501c:	d3e0      	bcc.n	8004fe0 <__gethex+0x22c>
 800501e:	4618      	mov	r0, r3
 8005020:	9901      	ldr	r1, [sp, #4]
 8005022:	9307      	str	r3, [sp, #28]
 8005024:	4652      	mov	r2, sl
 8005026:	f001 f927 	bl	8006278 <strncmp>
 800502a:	9b07      	ldr	r3, [sp, #28]
 800502c:	2800      	cmp	r0, #0
 800502e:	d1d7      	bne.n	8004fe0 <__gethex+0x22c>
 8005030:	461e      	mov	r6, r3
 8005032:	e78b      	b.n	8004f4c <__gethex+0x198>
 8005034:	f04f 0a03 	mov.w	sl, #3
 8005038:	e7b8      	b.n	8004fac <__gethex+0x1f8>
 800503a:	da0a      	bge.n	8005052 <__gethex+0x29e>
 800503c:	1a37      	subs	r7, r6, r0
 800503e:	4621      	mov	r1, r4
 8005040:	ee18 0a10 	vmov	r0, s16
 8005044:	463a      	mov	r2, r7
 8005046:	f000 fc45 	bl	80058d4 <__lshift>
 800504a:	1bed      	subs	r5, r5, r7
 800504c:	4604      	mov	r4, r0
 800504e:	f100 0914 	add.w	r9, r0, #20
 8005052:	f04f 0a00 	mov.w	sl, #0
 8005056:	e7ae      	b.n	8004fb6 <__gethex+0x202>
 8005058:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800505c:	42a8      	cmp	r0, r5
 800505e:	dd72      	ble.n	8005146 <__gethex+0x392>
 8005060:	1b45      	subs	r5, r0, r5
 8005062:	42ae      	cmp	r6, r5
 8005064:	dc36      	bgt.n	80050d4 <__gethex+0x320>
 8005066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d02a      	beq.n	80050c4 <__gethex+0x310>
 800506e:	2b03      	cmp	r3, #3
 8005070:	d02c      	beq.n	80050cc <__gethex+0x318>
 8005072:	2b01      	cmp	r3, #1
 8005074:	d11c      	bne.n	80050b0 <__gethex+0x2fc>
 8005076:	42ae      	cmp	r6, r5
 8005078:	d11a      	bne.n	80050b0 <__gethex+0x2fc>
 800507a:	2e01      	cmp	r6, #1
 800507c:	d112      	bne.n	80050a4 <__gethex+0x2f0>
 800507e:	9a04      	ldr	r2, [sp, #16]
 8005080:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	2301      	movs	r3, #1
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	f8c9 3000 	str.w	r3, [r9]
 800508e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005090:	2762      	movs	r7, #98	; 0x62
 8005092:	601c      	str	r4, [r3, #0]
 8005094:	e723      	b.n	8004ede <__gethex+0x12a>
 8005096:	bf00      	nop
 8005098:	080070d8 	.word	0x080070d8
 800509c:	08007060 	.word	0x08007060
 80050a0:	08007071 	.word	0x08007071
 80050a4:	1e71      	subs	r1, r6, #1
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 fe58 	bl	8005d5c <__any_on>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d1e6      	bne.n	800507e <__gethex+0x2ca>
 80050b0:	ee18 0a10 	vmov	r0, s16
 80050b4:	4621      	mov	r1, r4
 80050b6:	f000 f9f1 	bl	800549c <_Bfree>
 80050ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050bc:	2300      	movs	r3, #0
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	2750      	movs	r7, #80	; 0x50
 80050c2:	e70c      	b.n	8004ede <__gethex+0x12a>
 80050c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f2      	bne.n	80050b0 <__gethex+0x2fc>
 80050ca:	e7d8      	b.n	800507e <__gethex+0x2ca>
 80050cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1d5      	bne.n	800507e <__gethex+0x2ca>
 80050d2:	e7ed      	b.n	80050b0 <__gethex+0x2fc>
 80050d4:	1e6f      	subs	r7, r5, #1
 80050d6:	f1ba 0f00 	cmp.w	sl, #0
 80050da:	d131      	bne.n	8005140 <__gethex+0x38c>
 80050dc:	b127      	cbz	r7, 80050e8 <__gethex+0x334>
 80050de:	4639      	mov	r1, r7
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 fe3b 	bl	8005d5c <__any_on>
 80050e6:	4682      	mov	sl, r0
 80050e8:	117b      	asrs	r3, r7, #5
 80050ea:	2101      	movs	r1, #1
 80050ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80050f0:	f007 071f 	and.w	r7, r7, #31
 80050f4:	fa01 f707 	lsl.w	r7, r1, r7
 80050f8:	421f      	tst	r7, r3
 80050fa:	4629      	mov	r1, r5
 80050fc:	4620      	mov	r0, r4
 80050fe:	bf18      	it	ne
 8005100:	f04a 0a02 	orrne.w	sl, sl, #2
 8005104:	1b76      	subs	r6, r6, r5
 8005106:	f7ff fded 	bl	8004ce4 <rshift>
 800510a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800510e:	2702      	movs	r7, #2
 8005110:	f1ba 0f00 	cmp.w	sl, #0
 8005114:	d048      	beq.n	80051a8 <__gethex+0x3f4>
 8005116:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d015      	beq.n	800514a <__gethex+0x396>
 800511e:	2b03      	cmp	r3, #3
 8005120:	d017      	beq.n	8005152 <__gethex+0x39e>
 8005122:	2b01      	cmp	r3, #1
 8005124:	d109      	bne.n	800513a <__gethex+0x386>
 8005126:	f01a 0f02 	tst.w	sl, #2
 800512a:	d006      	beq.n	800513a <__gethex+0x386>
 800512c:	f8d9 0000 	ldr.w	r0, [r9]
 8005130:	ea4a 0a00 	orr.w	sl, sl, r0
 8005134:	f01a 0f01 	tst.w	sl, #1
 8005138:	d10e      	bne.n	8005158 <__gethex+0x3a4>
 800513a:	f047 0710 	orr.w	r7, r7, #16
 800513e:	e033      	b.n	80051a8 <__gethex+0x3f4>
 8005140:	f04f 0a01 	mov.w	sl, #1
 8005144:	e7d0      	b.n	80050e8 <__gethex+0x334>
 8005146:	2701      	movs	r7, #1
 8005148:	e7e2      	b.n	8005110 <__gethex+0x35c>
 800514a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800514c:	f1c3 0301 	rsb	r3, r3, #1
 8005150:	9315      	str	r3, [sp, #84]	; 0x54
 8005152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <__gethex+0x386>
 8005158:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800515c:	f104 0314 	add.w	r3, r4, #20
 8005160:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005164:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005168:	f04f 0c00 	mov.w	ip, #0
 800516c:	4618      	mov	r0, r3
 800516e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005172:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005176:	d01c      	beq.n	80051b2 <__gethex+0x3fe>
 8005178:	3201      	adds	r2, #1
 800517a:	6002      	str	r2, [r0, #0]
 800517c:	2f02      	cmp	r7, #2
 800517e:	f104 0314 	add.w	r3, r4, #20
 8005182:	d13f      	bne.n	8005204 <__gethex+0x450>
 8005184:	f8d8 2000 	ldr.w	r2, [r8]
 8005188:	3a01      	subs	r2, #1
 800518a:	42b2      	cmp	r2, r6
 800518c:	d10a      	bne.n	80051a4 <__gethex+0x3f0>
 800518e:	1171      	asrs	r1, r6, #5
 8005190:	2201      	movs	r2, #1
 8005192:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005196:	f006 061f 	and.w	r6, r6, #31
 800519a:	fa02 f606 	lsl.w	r6, r2, r6
 800519e:	421e      	tst	r6, r3
 80051a0:	bf18      	it	ne
 80051a2:	4617      	movne	r7, r2
 80051a4:	f047 0720 	orr.w	r7, r7, #32
 80051a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051aa:	601c      	str	r4, [r3, #0]
 80051ac:	9b04      	ldr	r3, [sp, #16]
 80051ae:	601d      	str	r5, [r3, #0]
 80051b0:	e695      	b.n	8004ede <__gethex+0x12a>
 80051b2:	4299      	cmp	r1, r3
 80051b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80051b8:	d8d8      	bhi.n	800516c <__gethex+0x3b8>
 80051ba:	68a3      	ldr	r3, [r4, #8]
 80051bc:	459b      	cmp	fp, r3
 80051be:	db19      	blt.n	80051f4 <__gethex+0x440>
 80051c0:	6861      	ldr	r1, [r4, #4]
 80051c2:	ee18 0a10 	vmov	r0, s16
 80051c6:	3101      	adds	r1, #1
 80051c8:	f000 f928 	bl	800541c <_Balloc>
 80051cc:	4681      	mov	r9, r0
 80051ce:	b918      	cbnz	r0, 80051d8 <__gethex+0x424>
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <__gethex+0x488>)
 80051d2:	4602      	mov	r2, r0
 80051d4:	2184      	movs	r1, #132	; 0x84
 80051d6:	e6a8      	b.n	8004f2a <__gethex+0x176>
 80051d8:	6922      	ldr	r2, [r4, #16]
 80051da:	3202      	adds	r2, #2
 80051dc:	f104 010c 	add.w	r1, r4, #12
 80051e0:	0092      	lsls	r2, r2, #2
 80051e2:	300c      	adds	r0, #12
 80051e4:	f000 f90c 	bl	8005400 <memcpy>
 80051e8:	4621      	mov	r1, r4
 80051ea:	ee18 0a10 	vmov	r0, s16
 80051ee:	f000 f955 	bl	800549c <_Bfree>
 80051f2:	464c      	mov	r4, r9
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051fc:	6122      	str	r2, [r4, #16]
 80051fe:	2201      	movs	r2, #1
 8005200:	615a      	str	r2, [r3, #20]
 8005202:	e7bb      	b.n	800517c <__gethex+0x3c8>
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	455a      	cmp	r2, fp
 8005208:	dd0b      	ble.n	8005222 <__gethex+0x46e>
 800520a:	2101      	movs	r1, #1
 800520c:	4620      	mov	r0, r4
 800520e:	f7ff fd69 	bl	8004ce4 <rshift>
 8005212:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005216:	3501      	adds	r5, #1
 8005218:	42ab      	cmp	r3, r5
 800521a:	f6ff aed0 	blt.w	8004fbe <__gethex+0x20a>
 800521e:	2701      	movs	r7, #1
 8005220:	e7c0      	b.n	80051a4 <__gethex+0x3f0>
 8005222:	f016 061f 	ands.w	r6, r6, #31
 8005226:	d0fa      	beq.n	800521e <__gethex+0x46a>
 8005228:	4453      	add	r3, sl
 800522a:	f1c6 0620 	rsb	r6, r6, #32
 800522e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005232:	f000 f9e5 	bl	8005600 <__hi0bits>
 8005236:	42b0      	cmp	r0, r6
 8005238:	dbe7      	blt.n	800520a <__gethex+0x456>
 800523a:	e7f0      	b.n	800521e <__gethex+0x46a>
 800523c:	08007060 	.word	0x08007060

08005240 <L_shift>:
 8005240:	f1c2 0208 	rsb	r2, r2, #8
 8005244:	0092      	lsls	r2, r2, #2
 8005246:	b570      	push	{r4, r5, r6, lr}
 8005248:	f1c2 0620 	rsb	r6, r2, #32
 800524c:	6843      	ldr	r3, [r0, #4]
 800524e:	6804      	ldr	r4, [r0, #0]
 8005250:	fa03 f506 	lsl.w	r5, r3, r6
 8005254:	432c      	orrs	r4, r5
 8005256:	40d3      	lsrs	r3, r2
 8005258:	6004      	str	r4, [r0, #0]
 800525a:	f840 3f04 	str.w	r3, [r0, #4]!
 800525e:	4288      	cmp	r0, r1
 8005260:	d3f4      	bcc.n	800524c <L_shift+0xc>
 8005262:	bd70      	pop	{r4, r5, r6, pc}

08005264 <__match>:
 8005264:	b530      	push	{r4, r5, lr}
 8005266:	6803      	ldr	r3, [r0, #0]
 8005268:	3301      	adds	r3, #1
 800526a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526e:	b914      	cbnz	r4, 8005276 <__match+0x12>
 8005270:	6003      	str	r3, [r0, #0]
 8005272:	2001      	movs	r0, #1
 8005274:	bd30      	pop	{r4, r5, pc}
 8005276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800527a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800527e:	2d19      	cmp	r5, #25
 8005280:	bf98      	it	ls
 8005282:	3220      	addls	r2, #32
 8005284:	42a2      	cmp	r2, r4
 8005286:	d0f0      	beq.n	800526a <__match+0x6>
 8005288:	2000      	movs	r0, #0
 800528a:	e7f3      	b.n	8005274 <__match+0x10>

0800528c <__hexnan>:
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	115e      	asrs	r6, r3, #5
 8005294:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005298:	f013 031f 	ands.w	r3, r3, #31
 800529c:	b087      	sub	sp, #28
 800529e:	bf18      	it	ne
 80052a0:	3604      	addne	r6, #4
 80052a2:	2500      	movs	r5, #0
 80052a4:	1f37      	subs	r7, r6, #4
 80052a6:	4690      	mov	r8, r2
 80052a8:	6802      	ldr	r2, [r0, #0]
 80052aa:	9301      	str	r3, [sp, #4]
 80052ac:	4682      	mov	sl, r0
 80052ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80052b2:	46b9      	mov	r9, r7
 80052b4:	463c      	mov	r4, r7
 80052b6:	9502      	str	r5, [sp, #8]
 80052b8:	46ab      	mov	fp, r5
 80052ba:	7851      	ldrb	r1, [r2, #1]
 80052bc:	1c53      	adds	r3, r2, #1
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	b341      	cbz	r1, 8005314 <__hexnan+0x88>
 80052c2:	4608      	mov	r0, r1
 80052c4:	9205      	str	r2, [sp, #20]
 80052c6:	9104      	str	r1, [sp, #16]
 80052c8:	f7ff fd5e 	bl	8004d88 <__hexdig_fun>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d14f      	bne.n	8005370 <__hexnan+0xe4>
 80052d0:	9904      	ldr	r1, [sp, #16]
 80052d2:	9a05      	ldr	r2, [sp, #20]
 80052d4:	2920      	cmp	r1, #32
 80052d6:	d818      	bhi.n	800530a <__hexnan+0x7e>
 80052d8:	9b02      	ldr	r3, [sp, #8]
 80052da:	459b      	cmp	fp, r3
 80052dc:	dd13      	ble.n	8005306 <__hexnan+0x7a>
 80052de:	454c      	cmp	r4, r9
 80052e0:	d206      	bcs.n	80052f0 <__hexnan+0x64>
 80052e2:	2d07      	cmp	r5, #7
 80052e4:	dc04      	bgt.n	80052f0 <__hexnan+0x64>
 80052e6:	462a      	mov	r2, r5
 80052e8:	4649      	mov	r1, r9
 80052ea:	4620      	mov	r0, r4
 80052ec:	f7ff ffa8 	bl	8005240 <L_shift>
 80052f0:	4544      	cmp	r4, r8
 80052f2:	d950      	bls.n	8005396 <__hexnan+0x10a>
 80052f4:	2300      	movs	r3, #0
 80052f6:	f1a4 0904 	sub.w	r9, r4, #4
 80052fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80052fe:	f8cd b008 	str.w	fp, [sp, #8]
 8005302:	464c      	mov	r4, r9
 8005304:	461d      	mov	r5, r3
 8005306:	9a03      	ldr	r2, [sp, #12]
 8005308:	e7d7      	b.n	80052ba <__hexnan+0x2e>
 800530a:	2929      	cmp	r1, #41	; 0x29
 800530c:	d156      	bne.n	80053bc <__hexnan+0x130>
 800530e:	3202      	adds	r2, #2
 8005310:	f8ca 2000 	str.w	r2, [sl]
 8005314:	f1bb 0f00 	cmp.w	fp, #0
 8005318:	d050      	beq.n	80053bc <__hexnan+0x130>
 800531a:	454c      	cmp	r4, r9
 800531c:	d206      	bcs.n	800532c <__hexnan+0xa0>
 800531e:	2d07      	cmp	r5, #7
 8005320:	dc04      	bgt.n	800532c <__hexnan+0xa0>
 8005322:	462a      	mov	r2, r5
 8005324:	4649      	mov	r1, r9
 8005326:	4620      	mov	r0, r4
 8005328:	f7ff ff8a 	bl	8005240 <L_shift>
 800532c:	4544      	cmp	r4, r8
 800532e:	d934      	bls.n	800539a <__hexnan+0x10e>
 8005330:	f1a8 0204 	sub.w	r2, r8, #4
 8005334:	4623      	mov	r3, r4
 8005336:	f853 1b04 	ldr.w	r1, [r3], #4
 800533a:	f842 1f04 	str.w	r1, [r2, #4]!
 800533e:	429f      	cmp	r7, r3
 8005340:	d2f9      	bcs.n	8005336 <__hexnan+0xaa>
 8005342:	1b3b      	subs	r3, r7, r4
 8005344:	f023 0303 	bic.w	r3, r3, #3
 8005348:	3304      	adds	r3, #4
 800534a:	3401      	adds	r4, #1
 800534c:	3e03      	subs	r6, #3
 800534e:	42b4      	cmp	r4, r6
 8005350:	bf88      	it	hi
 8005352:	2304      	movhi	r3, #4
 8005354:	4443      	add	r3, r8
 8005356:	2200      	movs	r2, #0
 8005358:	f843 2b04 	str.w	r2, [r3], #4
 800535c:	429f      	cmp	r7, r3
 800535e:	d2fb      	bcs.n	8005358 <__hexnan+0xcc>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	b91b      	cbnz	r3, 800536c <__hexnan+0xe0>
 8005364:	4547      	cmp	r7, r8
 8005366:	d127      	bne.n	80053b8 <__hexnan+0x12c>
 8005368:	2301      	movs	r3, #1
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	2005      	movs	r0, #5
 800536e:	e026      	b.n	80053be <__hexnan+0x132>
 8005370:	3501      	adds	r5, #1
 8005372:	2d08      	cmp	r5, #8
 8005374:	f10b 0b01 	add.w	fp, fp, #1
 8005378:	dd06      	ble.n	8005388 <__hexnan+0xfc>
 800537a:	4544      	cmp	r4, r8
 800537c:	d9c3      	bls.n	8005306 <__hexnan+0x7a>
 800537e:	2300      	movs	r3, #0
 8005380:	f844 3c04 	str.w	r3, [r4, #-4]
 8005384:	2501      	movs	r5, #1
 8005386:	3c04      	subs	r4, #4
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	f000 000f 	and.w	r0, r0, #15
 800538e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005392:	6022      	str	r2, [r4, #0]
 8005394:	e7b7      	b.n	8005306 <__hexnan+0x7a>
 8005396:	2508      	movs	r5, #8
 8005398:	e7b5      	b.n	8005306 <__hexnan+0x7a>
 800539a:	9b01      	ldr	r3, [sp, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0df      	beq.n	8005360 <__hexnan+0xd4>
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	f1c3 0320 	rsb	r3, r3, #32
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80053b0:	401a      	ands	r2, r3
 80053b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80053b6:	e7d3      	b.n	8005360 <__hexnan+0xd4>
 80053b8:	3f04      	subs	r7, #4
 80053ba:	e7d1      	b.n	8005360 <__hexnan+0xd4>
 80053bc:	2004      	movs	r0, #4
 80053be:	b007      	add	sp, #28
 80053c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080053c4 <_localeconv_r>:
 80053c4:	4800      	ldr	r0, [pc, #0]	; (80053c8 <_localeconv_r+0x4>)
 80053c6:	4770      	bx	lr
 80053c8:	2000015c 	.word	0x2000015c

080053cc <malloc>:
 80053cc:	4b02      	ldr	r3, [pc, #8]	; (80053d8 <malloc+0xc>)
 80053ce:	4601      	mov	r1, r0
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f000 bd67 	b.w	8005ea4 <_malloc_r>
 80053d6:	bf00      	nop
 80053d8:	20000004 	.word	0x20000004

080053dc <__ascii_mbtowc>:
 80053dc:	b082      	sub	sp, #8
 80053de:	b901      	cbnz	r1, 80053e2 <__ascii_mbtowc+0x6>
 80053e0:	a901      	add	r1, sp, #4
 80053e2:	b142      	cbz	r2, 80053f6 <__ascii_mbtowc+0x1a>
 80053e4:	b14b      	cbz	r3, 80053fa <__ascii_mbtowc+0x1e>
 80053e6:	7813      	ldrb	r3, [r2, #0]
 80053e8:	600b      	str	r3, [r1, #0]
 80053ea:	7812      	ldrb	r2, [r2, #0]
 80053ec:	1e10      	subs	r0, r2, #0
 80053ee:	bf18      	it	ne
 80053f0:	2001      	movne	r0, #1
 80053f2:	b002      	add	sp, #8
 80053f4:	4770      	bx	lr
 80053f6:	4610      	mov	r0, r2
 80053f8:	e7fb      	b.n	80053f2 <__ascii_mbtowc+0x16>
 80053fa:	f06f 0001 	mvn.w	r0, #1
 80053fe:	e7f8      	b.n	80053f2 <__ascii_mbtowc+0x16>

08005400 <memcpy>:
 8005400:	440a      	add	r2, r1
 8005402:	4291      	cmp	r1, r2
 8005404:	f100 33ff 	add.w	r3, r0, #4294967295
 8005408:	d100      	bne.n	800540c <memcpy+0xc>
 800540a:	4770      	bx	lr
 800540c:	b510      	push	{r4, lr}
 800540e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005416:	4291      	cmp	r1, r2
 8005418:	d1f9      	bne.n	800540e <memcpy+0xe>
 800541a:	bd10      	pop	{r4, pc}

0800541c <_Balloc>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005420:	4604      	mov	r4, r0
 8005422:	460d      	mov	r5, r1
 8005424:	b976      	cbnz	r6, 8005444 <_Balloc+0x28>
 8005426:	2010      	movs	r0, #16
 8005428:	f7ff ffd0 	bl	80053cc <malloc>
 800542c:	4602      	mov	r2, r0
 800542e:	6260      	str	r0, [r4, #36]	; 0x24
 8005430:	b920      	cbnz	r0, 800543c <_Balloc+0x20>
 8005432:	4b18      	ldr	r3, [pc, #96]	; (8005494 <_Balloc+0x78>)
 8005434:	4818      	ldr	r0, [pc, #96]	; (8005498 <_Balloc+0x7c>)
 8005436:	2166      	movs	r1, #102	; 0x66
 8005438:	f000 ff40 	bl	80062bc <__assert_func>
 800543c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005440:	6006      	str	r6, [r0, #0]
 8005442:	60c6      	str	r6, [r0, #12]
 8005444:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005446:	68f3      	ldr	r3, [r6, #12]
 8005448:	b183      	cbz	r3, 800546c <_Balloc+0x50>
 800544a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005452:	b9b8      	cbnz	r0, 8005484 <_Balloc+0x68>
 8005454:	2101      	movs	r1, #1
 8005456:	fa01 f605 	lsl.w	r6, r1, r5
 800545a:	1d72      	adds	r2, r6, #5
 800545c:	0092      	lsls	r2, r2, #2
 800545e:	4620      	mov	r0, r4
 8005460:	f000 fc9d 	bl	8005d9e <_calloc_r>
 8005464:	b160      	cbz	r0, 8005480 <_Balloc+0x64>
 8005466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800546a:	e00e      	b.n	800548a <_Balloc+0x6e>
 800546c:	2221      	movs	r2, #33	; 0x21
 800546e:	2104      	movs	r1, #4
 8005470:	4620      	mov	r0, r4
 8005472:	f000 fc94 	bl	8005d9e <_calloc_r>
 8005476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005478:	60f0      	str	r0, [r6, #12]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e4      	bne.n	800544a <_Balloc+0x2e>
 8005480:	2000      	movs	r0, #0
 8005482:	bd70      	pop	{r4, r5, r6, pc}
 8005484:	6802      	ldr	r2, [r0, #0]
 8005486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800548a:	2300      	movs	r3, #0
 800548c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005490:	e7f7      	b.n	8005482 <_Balloc+0x66>
 8005492:	bf00      	nop
 8005494:	08006fee 	.word	0x08006fee
 8005498:	080070ec 	.word	0x080070ec

0800549c <_Bfree>:
 800549c:	b570      	push	{r4, r5, r6, lr}
 800549e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054a0:	4605      	mov	r5, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	b976      	cbnz	r6, 80054c4 <_Bfree+0x28>
 80054a6:	2010      	movs	r0, #16
 80054a8:	f7ff ff90 	bl	80053cc <malloc>
 80054ac:	4602      	mov	r2, r0
 80054ae:	6268      	str	r0, [r5, #36]	; 0x24
 80054b0:	b920      	cbnz	r0, 80054bc <_Bfree+0x20>
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <_Bfree+0x3c>)
 80054b4:	4809      	ldr	r0, [pc, #36]	; (80054dc <_Bfree+0x40>)
 80054b6:	218a      	movs	r1, #138	; 0x8a
 80054b8:	f000 ff00 	bl	80062bc <__assert_func>
 80054bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054c0:	6006      	str	r6, [r0, #0]
 80054c2:	60c6      	str	r6, [r0, #12]
 80054c4:	b13c      	cbz	r4, 80054d6 <_Bfree+0x3a>
 80054c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054c8:	6862      	ldr	r2, [r4, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054d0:	6021      	str	r1, [r4, #0]
 80054d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	08006fee 	.word	0x08006fee
 80054dc:	080070ec 	.word	0x080070ec

080054e0 <__multadd>:
 80054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e4:	690d      	ldr	r5, [r1, #16]
 80054e6:	4607      	mov	r7, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	461e      	mov	r6, r3
 80054ec:	f101 0c14 	add.w	ip, r1, #20
 80054f0:	2000      	movs	r0, #0
 80054f2:	f8dc 3000 	ldr.w	r3, [ip]
 80054f6:	b299      	uxth	r1, r3
 80054f8:	fb02 6101 	mla	r1, r2, r1, r6
 80054fc:	0c1e      	lsrs	r6, r3, #16
 80054fe:	0c0b      	lsrs	r3, r1, #16
 8005500:	fb02 3306 	mla	r3, r2, r6, r3
 8005504:	b289      	uxth	r1, r1
 8005506:	3001      	adds	r0, #1
 8005508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800550c:	4285      	cmp	r5, r0
 800550e:	f84c 1b04 	str.w	r1, [ip], #4
 8005512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005516:	dcec      	bgt.n	80054f2 <__multadd+0x12>
 8005518:	b30e      	cbz	r6, 800555e <__multadd+0x7e>
 800551a:	68a3      	ldr	r3, [r4, #8]
 800551c:	42ab      	cmp	r3, r5
 800551e:	dc19      	bgt.n	8005554 <__multadd+0x74>
 8005520:	6861      	ldr	r1, [r4, #4]
 8005522:	4638      	mov	r0, r7
 8005524:	3101      	adds	r1, #1
 8005526:	f7ff ff79 	bl	800541c <_Balloc>
 800552a:	4680      	mov	r8, r0
 800552c:	b928      	cbnz	r0, 800553a <__multadd+0x5a>
 800552e:	4602      	mov	r2, r0
 8005530:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <__multadd+0x84>)
 8005532:	480d      	ldr	r0, [pc, #52]	; (8005568 <__multadd+0x88>)
 8005534:	21b5      	movs	r1, #181	; 0xb5
 8005536:	f000 fec1 	bl	80062bc <__assert_func>
 800553a:	6922      	ldr	r2, [r4, #16]
 800553c:	3202      	adds	r2, #2
 800553e:	f104 010c 	add.w	r1, r4, #12
 8005542:	0092      	lsls	r2, r2, #2
 8005544:	300c      	adds	r0, #12
 8005546:	f7ff ff5b 	bl	8005400 <memcpy>
 800554a:	4621      	mov	r1, r4
 800554c:	4638      	mov	r0, r7
 800554e:	f7ff ffa5 	bl	800549c <_Bfree>
 8005552:	4644      	mov	r4, r8
 8005554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005558:	3501      	adds	r5, #1
 800555a:	615e      	str	r6, [r3, #20]
 800555c:	6125      	str	r5, [r4, #16]
 800555e:	4620      	mov	r0, r4
 8005560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005564:	08007060 	.word	0x08007060
 8005568:	080070ec 	.word	0x080070ec

0800556c <__s2b>:
 800556c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005570:	460c      	mov	r4, r1
 8005572:	4615      	mov	r5, r2
 8005574:	461f      	mov	r7, r3
 8005576:	2209      	movs	r2, #9
 8005578:	3308      	adds	r3, #8
 800557a:	4606      	mov	r6, r0
 800557c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005580:	2100      	movs	r1, #0
 8005582:	2201      	movs	r2, #1
 8005584:	429a      	cmp	r2, r3
 8005586:	db09      	blt.n	800559c <__s2b+0x30>
 8005588:	4630      	mov	r0, r6
 800558a:	f7ff ff47 	bl	800541c <_Balloc>
 800558e:	b940      	cbnz	r0, 80055a2 <__s2b+0x36>
 8005590:	4602      	mov	r2, r0
 8005592:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <__s2b+0x8c>)
 8005594:	4819      	ldr	r0, [pc, #100]	; (80055fc <__s2b+0x90>)
 8005596:	21ce      	movs	r1, #206	; 0xce
 8005598:	f000 fe90 	bl	80062bc <__assert_func>
 800559c:	0052      	lsls	r2, r2, #1
 800559e:	3101      	adds	r1, #1
 80055a0:	e7f0      	b.n	8005584 <__s2b+0x18>
 80055a2:	9b08      	ldr	r3, [sp, #32]
 80055a4:	6143      	str	r3, [r0, #20]
 80055a6:	2d09      	cmp	r5, #9
 80055a8:	f04f 0301 	mov.w	r3, #1
 80055ac:	6103      	str	r3, [r0, #16]
 80055ae:	dd16      	ble.n	80055de <__s2b+0x72>
 80055b0:	f104 0909 	add.w	r9, r4, #9
 80055b4:	46c8      	mov	r8, r9
 80055b6:	442c      	add	r4, r5
 80055b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80055bc:	4601      	mov	r1, r0
 80055be:	3b30      	subs	r3, #48	; 0x30
 80055c0:	220a      	movs	r2, #10
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7ff ff8c 	bl	80054e0 <__multadd>
 80055c8:	45a0      	cmp	r8, r4
 80055ca:	d1f5      	bne.n	80055b8 <__s2b+0x4c>
 80055cc:	f1a5 0408 	sub.w	r4, r5, #8
 80055d0:	444c      	add	r4, r9
 80055d2:	1b2d      	subs	r5, r5, r4
 80055d4:	1963      	adds	r3, r4, r5
 80055d6:	42bb      	cmp	r3, r7
 80055d8:	db04      	blt.n	80055e4 <__s2b+0x78>
 80055da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055de:	340a      	adds	r4, #10
 80055e0:	2509      	movs	r5, #9
 80055e2:	e7f6      	b.n	80055d2 <__s2b+0x66>
 80055e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80055e8:	4601      	mov	r1, r0
 80055ea:	3b30      	subs	r3, #48	; 0x30
 80055ec:	220a      	movs	r2, #10
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7ff ff76 	bl	80054e0 <__multadd>
 80055f4:	e7ee      	b.n	80055d4 <__s2b+0x68>
 80055f6:	bf00      	nop
 80055f8:	08007060 	.word	0x08007060
 80055fc:	080070ec 	.word	0x080070ec

08005600 <__hi0bits>:
 8005600:	0c03      	lsrs	r3, r0, #16
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	b9d3      	cbnz	r3, 800563c <__hi0bits+0x3c>
 8005606:	0400      	lsls	r0, r0, #16
 8005608:	2310      	movs	r3, #16
 800560a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800560e:	bf04      	itt	eq
 8005610:	0200      	lsleq	r0, r0, #8
 8005612:	3308      	addeq	r3, #8
 8005614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005618:	bf04      	itt	eq
 800561a:	0100      	lsleq	r0, r0, #4
 800561c:	3304      	addeq	r3, #4
 800561e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005622:	bf04      	itt	eq
 8005624:	0080      	lsleq	r0, r0, #2
 8005626:	3302      	addeq	r3, #2
 8005628:	2800      	cmp	r0, #0
 800562a:	db05      	blt.n	8005638 <__hi0bits+0x38>
 800562c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005630:	f103 0301 	add.w	r3, r3, #1
 8005634:	bf08      	it	eq
 8005636:	2320      	moveq	r3, #32
 8005638:	4618      	mov	r0, r3
 800563a:	4770      	bx	lr
 800563c:	2300      	movs	r3, #0
 800563e:	e7e4      	b.n	800560a <__hi0bits+0xa>

08005640 <__lo0bits>:
 8005640:	6803      	ldr	r3, [r0, #0]
 8005642:	f013 0207 	ands.w	r2, r3, #7
 8005646:	4601      	mov	r1, r0
 8005648:	d00b      	beq.n	8005662 <__lo0bits+0x22>
 800564a:	07da      	lsls	r2, r3, #31
 800564c:	d423      	bmi.n	8005696 <__lo0bits+0x56>
 800564e:	0798      	lsls	r0, r3, #30
 8005650:	bf49      	itett	mi
 8005652:	085b      	lsrmi	r3, r3, #1
 8005654:	089b      	lsrpl	r3, r3, #2
 8005656:	2001      	movmi	r0, #1
 8005658:	600b      	strmi	r3, [r1, #0]
 800565a:	bf5c      	itt	pl
 800565c:	600b      	strpl	r3, [r1, #0]
 800565e:	2002      	movpl	r0, #2
 8005660:	4770      	bx	lr
 8005662:	b298      	uxth	r0, r3
 8005664:	b9a8      	cbnz	r0, 8005692 <__lo0bits+0x52>
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	2010      	movs	r0, #16
 800566a:	b2da      	uxtb	r2, r3
 800566c:	b90a      	cbnz	r2, 8005672 <__lo0bits+0x32>
 800566e:	3008      	adds	r0, #8
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	071a      	lsls	r2, r3, #28
 8005674:	bf04      	itt	eq
 8005676:	091b      	lsreq	r3, r3, #4
 8005678:	3004      	addeq	r0, #4
 800567a:	079a      	lsls	r2, r3, #30
 800567c:	bf04      	itt	eq
 800567e:	089b      	lsreq	r3, r3, #2
 8005680:	3002      	addeq	r0, #2
 8005682:	07da      	lsls	r2, r3, #31
 8005684:	d403      	bmi.n	800568e <__lo0bits+0x4e>
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	f100 0001 	add.w	r0, r0, #1
 800568c:	d005      	beq.n	800569a <__lo0bits+0x5a>
 800568e:	600b      	str	r3, [r1, #0]
 8005690:	4770      	bx	lr
 8005692:	4610      	mov	r0, r2
 8005694:	e7e9      	b.n	800566a <__lo0bits+0x2a>
 8005696:	2000      	movs	r0, #0
 8005698:	4770      	bx	lr
 800569a:	2020      	movs	r0, #32
 800569c:	4770      	bx	lr
	...

080056a0 <__i2b>:
 80056a0:	b510      	push	{r4, lr}
 80056a2:	460c      	mov	r4, r1
 80056a4:	2101      	movs	r1, #1
 80056a6:	f7ff feb9 	bl	800541c <_Balloc>
 80056aa:	4602      	mov	r2, r0
 80056ac:	b928      	cbnz	r0, 80056ba <__i2b+0x1a>
 80056ae:	4b05      	ldr	r3, [pc, #20]	; (80056c4 <__i2b+0x24>)
 80056b0:	4805      	ldr	r0, [pc, #20]	; (80056c8 <__i2b+0x28>)
 80056b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80056b6:	f000 fe01 	bl	80062bc <__assert_func>
 80056ba:	2301      	movs	r3, #1
 80056bc:	6144      	str	r4, [r0, #20]
 80056be:	6103      	str	r3, [r0, #16]
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	08007060 	.word	0x08007060
 80056c8:	080070ec 	.word	0x080070ec

080056cc <__multiply>:
 80056cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	4691      	mov	r9, r2
 80056d2:	690a      	ldr	r2, [r1, #16]
 80056d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056d8:	429a      	cmp	r2, r3
 80056da:	bfb8      	it	lt
 80056dc:	460b      	movlt	r3, r1
 80056de:	460c      	mov	r4, r1
 80056e0:	bfbc      	itt	lt
 80056e2:	464c      	movlt	r4, r9
 80056e4:	4699      	movlt	r9, r3
 80056e6:	6927      	ldr	r7, [r4, #16]
 80056e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	6861      	ldr	r1, [r4, #4]
 80056f0:	eb07 060a 	add.w	r6, r7, sl
 80056f4:	42b3      	cmp	r3, r6
 80056f6:	b085      	sub	sp, #20
 80056f8:	bfb8      	it	lt
 80056fa:	3101      	addlt	r1, #1
 80056fc:	f7ff fe8e 	bl	800541c <_Balloc>
 8005700:	b930      	cbnz	r0, 8005710 <__multiply+0x44>
 8005702:	4602      	mov	r2, r0
 8005704:	4b44      	ldr	r3, [pc, #272]	; (8005818 <__multiply+0x14c>)
 8005706:	4845      	ldr	r0, [pc, #276]	; (800581c <__multiply+0x150>)
 8005708:	f240 115d 	movw	r1, #349	; 0x15d
 800570c:	f000 fdd6 	bl	80062bc <__assert_func>
 8005710:	f100 0514 	add.w	r5, r0, #20
 8005714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005718:	462b      	mov	r3, r5
 800571a:	2200      	movs	r2, #0
 800571c:	4543      	cmp	r3, r8
 800571e:	d321      	bcc.n	8005764 <__multiply+0x98>
 8005720:	f104 0314 	add.w	r3, r4, #20
 8005724:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005728:	f109 0314 	add.w	r3, r9, #20
 800572c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005730:	9202      	str	r2, [sp, #8]
 8005732:	1b3a      	subs	r2, r7, r4
 8005734:	3a15      	subs	r2, #21
 8005736:	f022 0203 	bic.w	r2, r2, #3
 800573a:	3204      	adds	r2, #4
 800573c:	f104 0115 	add.w	r1, r4, #21
 8005740:	428f      	cmp	r7, r1
 8005742:	bf38      	it	cc
 8005744:	2204      	movcc	r2, #4
 8005746:	9201      	str	r2, [sp, #4]
 8005748:	9a02      	ldr	r2, [sp, #8]
 800574a:	9303      	str	r3, [sp, #12]
 800574c:	429a      	cmp	r2, r3
 800574e:	d80c      	bhi.n	800576a <__multiply+0x9e>
 8005750:	2e00      	cmp	r6, #0
 8005752:	dd03      	ble.n	800575c <__multiply+0x90>
 8005754:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005758:	2b00      	cmp	r3, #0
 800575a:	d05a      	beq.n	8005812 <__multiply+0x146>
 800575c:	6106      	str	r6, [r0, #16]
 800575e:	b005      	add	sp, #20
 8005760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005764:	f843 2b04 	str.w	r2, [r3], #4
 8005768:	e7d8      	b.n	800571c <__multiply+0x50>
 800576a:	f8b3 a000 	ldrh.w	sl, [r3]
 800576e:	f1ba 0f00 	cmp.w	sl, #0
 8005772:	d024      	beq.n	80057be <__multiply+0xf2>
 8005774:	f104 0e14 	add.w	lr, r4, #20
 8005778:	46a9      	mov	r9, r5
 800577a:	f04f 0c00 	mov.w	ip, #0
 800577e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005782:	f8d9 1000 	ldr.w	r1, [r9]
 8005786:	fa1f fb82 	uxth.w	fp, r2
 800578a:	b289      	uxth	r1, r1
 800578c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005790:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005794:	f8d9 2000 	ldr.w	r2, [r9]
 8005798:	4461      	add	r1, ip
 800579a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800579e:	fb0a c20b 	mla	r2, sl, fp, ip
 80057a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80057a6:	b289      	uxth	r1, r1
 80057a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80057ac:	4577      	cmp	r7, lr
 80057ae:	f849 1b04 	str.w	r1, [r9], #4
 80057b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80057b6:	d8e2      	bhi.n	800577e <__multiply+0xb2>
 80057b8:	9a01      	ldr	r2, [sp, #4]
 80057ba:	f845 c002 	str.w	ip, [r5, r2]
 80057be:	9a03      	ldr	r2, [sp, #12]
 80057c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057c4:	3304      	adds	r3, #4
 80057c6:	f1b9 0f00 	cmp.w	r9, #0
 80057ca:	d020      	beq.n	800580e <__multiply+0x142>
 80057cc:	6829      	ldr	r1, [r5, #0]
 80057ce:	f104 0c14 	add.w	ip, r4, #20
 80057d2:	46ae      	mov	lr, r5
 80057d4:	f04f 0a00 	mov.w	sl, #0
 80057d8:	f8bc b000 	ldrh.w	fp, [ip]
 80057dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80057e0:	fb09 220b 	mla	r2, r9, fp, r2
 80057e4:	4492      	add	sl, r2
 80057e6:	b289      	uxth	r1, r1
 80057e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80057ec:	f84e 1b04 	str.w	r1, [lr], #4
 80057f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057f4:	f8be 1000 	ldrh.w	r1, [lr]
 80057f8:	0c12      	lsrs	r2, r2, #16
 80057fa:	fb09 1102 	mla	r1, r9, r2, r1
 80057fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005802:	4567      	cmp	r7, ip
 8005804:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005808:	d8e6      	bhi.n	80057d8 <__multiply+0x10c>
 800580a:	9a01      	ldr	r2, [sp, #4]
 800580c:	50a9      	str	r1, [r5, r2]
 800580e:	3504      	adds	r5, #4
 8005810:	e79a      	b.n	8005748 <__multiply+0x7c>
 8005812:	3e01      	subs	r6, #1
 8005814:	e79c      	b.n	8005750 <__multiply+0x84>
 8005816:	bf00      	nop
 8005818:	08007060 	.word	0x08007060
 800581c:	080070ec 	.word	0x080070ec

08005820 <__pow5mult>:
 8005820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005824:	4615      	mov	r5, r2
 8005826:	f012 0203 	ands.w	r2, r2, #3
 800582a:	4606      	mov	r6, r0
 800582c:	460f      	mov	r7, r1
 800582e:	d007      	beq.n	8005840 <__pow5mult+0x20>
 8005830:	4c25      	ldr	r4, [pc, #148]	; (80058c8 <__pow5mult+0xa8>)
 8005832:	3a01      	subs	r2, #1
 8005834:	2300      	movs	r3, #0
 8005836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800583a:	f7ff fe51 	bl	80054e0 <__multadd>
 800583e:	4607      	mov	r7, r0
 8005840:	10ad      	asrs	r5, r5, #2
 8005842:	d03d      	beq.n	80058c0 <__pow5mult+0xa0>
 8005844:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005846:	b97c      	cbnz	r4, 8005868 <__pow5mult+0x48>
 8005848:	2010      	movs	r0, #16
 800584a:	f7ff fdbf 	bl	80053cc <malloc>
 800584e:	4602      	mov	r2, r0
 8005850:	6270      	str	r0, [r6, #36]	; 0x24
 8005852:	b928      	cbnz	r0, 8005860 <__pow5mult+0x40>
 8005854:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <__pow5mult+0xac>)
 8005856:	481e      	ldr	r0, [pc, #120]	; (80058d0 <__pow5mult+0xb0>)
 8005858:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800585c:	f000 fd2e 	bl	80062bc <__assert_func>
 8005860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005864:	6004      	str	r4, [r0, #0]
 8005866:	60c4      	str	r4, [r0, #12]
 8005868:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800586c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005870:	b94c      	cbnz	r4, 8005886 <__pow5mult+0x66>
 8005872:	f240 2171 	movw	r1, #625	; 0x271
 8005876:	4630      	mov	r0, r6
 8005878:	f7ff ff12 	bl	80056a0 <__i2b>
 800587c:	2300      	movs	r3, #0
 800587e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005882:	4604      	mov	r4, r0
 8005884:	6003      	str	r3, [r0, #0]
 8005886:	f04f 0900 	mov.w	r9, #0
 800588a:	07eb      	lsls	r3, r5, #31
 800588c:	d50a      	bpl.n	80058a4 <__pow5mult+0x84>
 800588e:	4639      	mov	r1, r7
 8005890:	4622      	mov	r2, r4
 8005892:	4630      	mov	r0, r6
 8005894:	f7ff ff1a 	bl	80056cc <__multiply>
 8005898:	4639      	mov	r1, r7
 800589a:	4680      	mov	r8, r0
 800589c:	4630      	mov	r0, r6
 800589e:	f7ff fdfd 	bl	800549c <_Bfree>
 80058a2:	4647      	mov	r7, r8
 80058a4:	106d      	asrs	r5, r5, #1
 80058a6:	d00b      	beq.n	80058c0 <__pow5mult+0xa0>
 80058a8:	6820      	ldr	r0, [r4, #0]
 80058aa:	b938      	cbnz	r0, 80058bc <__pow5mult+0x9c>
 80058ac:	4622      	mov	r2, r4
 80058ae:	4621      	mov	r1, r4
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7ff ff0b 	bl	80056cc <__multiply>
 80058b6:	6020      	str	r0, [r4, #0]
 80058b8:	f8c0 9000 	str.w	r9, [r0]
 80058bc:	4604      	mov	r4, r0
 80058be:	e7e4      	b.n	800588a <__pow5mult+0x6a>
 80058c0:	4638      	mov	r0, r7
 80058c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c6:	bf00      	nop
 80058c8:	08007238 	.word	0x08007238
 80058cc:	08006fee 	.word	0x08006fee
 80058d0:	080070ec 	.word	0x080070ec

080058d4 <__lshift>:
 80058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	460c      	mov	r4, r1
 80058da:	6849      	ldr	r1, [r1, #4]
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058e2:	68a3      	ldr	r3, [r4, #8]
 80058e4:	4607      	mov	r7, r0
 80058e6:	4691      	mov	r9, r2
 80058e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058ec:	f108 0601 	add.w	r6, r8, #1
 80058f0:	42b3      	cmp	r3, r6
 80058f2:	db0b      	blt.n	800590c <__lshift+0x38>
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff fd91 	bl	800541c <_Balloc>
 80058fa:	4605      	mov	r5, r0
 80058fc:	b948      	cbnz	r0, 8005912 <__lshift+0x3e>
 80058fe:	4602      	mov	r2, r0
 8005900:	4b2a      	ldr	r3, [pc, #168]	; (80059ac <__lshift+0xd8>)
 8005902:	482b      	ldr	r0, [pc, #172]	; (80059b0 <__lshift+0xdc>)
 8005904:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005908:	f000 fcd8 	bl	80062bc <__assert_func>
 800590c:	3101      	adds	r1, #1
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	e7ee      	b.n	80058f0 <__lshift+0x1c>
 8005912:	2300      	movs	r3, #0
 8005914:	f100 0114 	add.w	r1, r0, #20
 8005918:	f100 0210 	add.w	r2, r0, #16
 800591c:	4618      	mov	r0, r3
 800591e:	4553      	cmp	r3, sl
 8005920:	db37      	blt.n	8005992 <__lshift+0xbe>
 8005922:	6920      	ldr	r0, [r4, #16]
 8005924:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005928:	f104 0314 	add.w	r3, r4, #20
 800592c:	f019 091f 	ands.w	r9, r9, #31
 8005930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005934:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005938:	d02f      	beq.n	800599a <__lshift+0xc6>
 800593a:	f1c9 0e20 	rsb	lr, r9, #32
 800593e:	468a      	mov	sl, r1
 8005940:	f04f 0c00 	mov.w	ip, #0
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	fa02 f209 	lsl.w	r2, r2, r9
 800594a:	ea42 020c 	orr.w	r2, r2, ip
 800594e:	f84a 2b04 	str.w	r2, [sl], #4
 8005952:	f853 2b04 	ldr.w	r2, [r3], #4
 8005956:	4298      	cmp	r0, r3
 8005958:	fa22 fc0e 	lsr.w	ip, r2, lr
 800595c:	d8f2      	bhi.n	8005944 <__lshift+0x70>
 800595e:	1b03      	subs	r3, r0, r4
 8005960:	3b15      	subs	r3, #21
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	3304      	adds	r3, #4
 8005968:	f104 0215 	add.w	r2, r4, #21
 800596c:	4290      	cmp	r0, r2
 800596e:	bf38      	it	cc
 8005970:	2304      	movcc	r3, #4
 8005972:	f841 c003 	str.w	ip, [r1, r3]
 8005976:	f1bc 0f00 	cmp.w	ip, #0
 800597a:	d001      	beq.n	8005980 <__lshift+0xac>
 800597c:	f108 0602 	add.w	r6, r8, #2
 8005980:	3e01      	subs	r6, #1
 8005982:	4638      	mov	r0, r7
 8005984:	612e      	str	r6, [r5, #16]
 8005986:	4621      	mov	r1, r4
 8005988:	f7ff fd88 	bl	800549c <_Bfree>
 800598c:	4628      	mov	r0, r5
 800598e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005992:	f842 0f04 	str.w	r0, [r2, #4]!
 8005996:	3301      	adds	r3, #1
 8005998:	e7c1      	b.n	800591e <__lshift+0x4a>
 800599a:	3904      	subs	r1, #4
 800599c:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80059a4:	4298      	cmp	r0, r3
 80059a6:	d8f9      	bhi.n	800599c <__lshift+0xc8>
 80059a8:	e7ea      	b.n	8005980 <__lshift+0xac>
 80059aa:	bf00      	nop
 80059ac:	08007060 	.word	0x08007060
 80059b0:	080070ec 	.word	0x080070ec

080059b4 <__mcmp>:
 80059b4:	b530      	push	{r4, r5, lr}
 80059b6:	6902      	ldr	r2, [r0, #16]
 80059b8:	690c      	ldr	r4, [r1, #16]
 80059ba:	1b12      	subs	r2, r2, r4
 80059bc:	d10e      	bne.n	80059dc <__mcmp+0x28>
 80059be:	f100 0314 	add.w	r3, r0, #20
 80059c2:	3114      	adds	r1, #20
 80059c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80059c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80059cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80059d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80059d4:	42a5      	cmp	r5, r4
 80059d6:	d003      	beq.n	80059e0 <__mcmp+0x2c>
 80059d8:	d305      	bcc.n	80059e6 <__mcmp+0x32>
 80059da:	2201      	movs	r2, #1
 80059dc:	4610      	mov	r0, r2
 80059de:	bd30      	pop	{r4, r5, pc}
 80059e0:	4283      	cmp	r3, r0
 80059e2:	d3f3      	bcc.n	80059cc <__mcmp+0x18>
 80059e4:	e7fa      	b.n	80059dc <__mcmp+0x28>
 80059e6:	f04f 32ff 	mov.w	r2, #4294967295
 80059ea:	e7f7      	b.n	80059dc <__mcmp+0x28>

080059ec <__mdiff>:
 80059ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f0:	460c      	mov	r4, r1
 80059f2:	4606      	mov	r6, r0
 80059f4:	4611      	mov	r1, r2
 80059f6:	4620      	mov	r0, r4
 80059f8:	4690      	mov	r8, r2
 80059fa:	f7ff ffdb 	bl	80059b4 <__mcmp>
 80059fe:	1e05      	subs	r5, r0, #0
 8005a00:	d110      	bne.n	8005a24 <__mdiff+0x38>
 8005a02:	4629      	mov	r1, r5
 8005a04:	4630      	mov	r0, r6
 8005a06:	f7ff fd09 	bl	800541c <_Balloc>
 8005a0a:	b930      	cbnz	r0, 8005a1a <__mdiff+0x2e>
 8005a0c:	4b3a      	ldr	r3, [pc, #232]	; (8005af8 <__mdiff+0x10c>)
 8005a0e:	4602      	mov	r2, r0
 8005a10:	f240 2132 	movw	r1, #562	; 0x232
 8005a14:	4839      	ldr	r0, [pc, #228]	; (8005afc <__mdiff+0x110>)
 8005a16:	f000 fc51 	bl	80062bc <__assert_func>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a24:	bfa4      	itt	ge
 8005a26:	4643      	movge	r3, r8
 8005a28:	46a0      	movge	r8, r4
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005a30:	bfa6      	itte	ge
 8005a32:	461c      	movge	r4, r3
 8005a34:	2500      	movge	r5, #0
 8005a36:	2501      	movlt	r5, #1
 8005a38:	f7ff fcf0 	bl	800541c <_Balloc>
 8005a3c:	b920      	cbnz	r0, 8005a48 <__mdiff+0x5c>
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <__mdiff+0x10c>)
 8005a40:	4602      	mov	r2, r0
 8005a42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a46:	e7e5      	b.n	8005a14 <__mdiff+0x28>
 8005a48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005a4c:	6926      	ldr	r6, [r4, #16]
 8005a4e:	60c5      	str	r5, [r0, #12]
 8005a50:	f104 0914 	add.w	r9, r4, #20
 8005a54:	f108 0514 	add.w	r5, r8, #20
 8005a58:	f100 0e14 	add.w	lr, r0, #20
 8005a5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a64:	f108 0210 	add.w	r2, r8, #16
 8005a68:	46f2      	mov	sl, lr
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a74:	fa1f f883 	uxth.w	r8, r3
 8005a78:	fa11 f18b 	uxtah	r1, r1, fp
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	eba1 0808 	sub.w	r8, r1, r8
 8005a82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a8a:	fa1f f888 	uxth.w	r8, r8
 8005a8e:	1419      	asrs	r1, r3, #16
 8005a90:	454e      	cmp	r6, r9
 8005a92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a96:	f84a 3b04 	str.w	r3, [sl], #4
 8005a9a:	d8e7      	bhi.n	8005a6c <__mdiff+0x80>
 8005a9c:	1b33      	subs	r3, r6, r4
 8005a9e:	3b15      	subs	r3, #21
 8005aa0:	f023 0303 	bic.w	r3, r3, #3
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	3415      	adds	r4, #21
 8005aa8:	42a6      	cmp	r6, r4
 8005aaa:	bf38      	it	cc
 8005aac:	2304      	movcc	r3, #4
 8005aae:	441d      	add	r5, r3
 8005ab0:	4473      	add	r3, lr
 8005ab2:	469e      	mov	lr, r3
 8005ab4:	462e      	mov	r6, r5
 8005ab6:	4566      	cmp	r6, ip
 8005ab8:	d30e      	bcc.n	8005ad8 <__mdiff+0xec>
 8005aba:	f10c 0203 	add.w	r2, ip, #3
 8005abe:	1b52      	subs	r2, r2, r5
 8005ac0:	f022 0203 	bic.w	r2, r2, #3
 8005ac4:	3d03      	subs	r5, #3
 8005ac6:	45ac      	cmp	ip, r5
 8005ac8:	bf38      	it	cc
 8005aca:	2200      	movcc	r2, #0
 8005acc:	441a      	add	r2, r3
 8005ace:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005ad2:	b17b      	cbz	r3, 8005af4 <__mdiff+0x108>
 8005ad4:	6107      	str	r7, [r0, #16]
 8005ad6:	e7a3      	b.n	8005a20 <__mdiff+0x34>
 8005ad8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005adc:	fa11 f288 	uxtah	r2, r1, r8
 8005ae0:	1414      	asrs	r4, r2, #16
 8005ae2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005aec:	f84e 2b04 	str.w	r2, [lr], #4
 8005af0:	1421      	asrs	r1, r4, #16
 8005af2:	e7e0      	b.n	8005ab6 <__mdiff+0xca>
 8005af4:	3f01      	subs	r7, #1
 8005af6:	e7ea      	b.n	8005ace <__mdiff+0xe2>
 8005af8:	08007060 	.word	0x08007060
 8005afc:	080070ec 	.word	0x080070ec

08005b00 <__ulp>:
 8005b00:	b082      	sub	sp, #8
 8005b02:	ed8d 0b00 	vstr	d0, [sp]
 8005b06:	9b01      	ldr	r3, [sp, #4]
 8005b08:	4912      	ldr	r1, [pc, #72]	; (8005b54 <__ulp+0x54>)
 8005b0a:	4019      	ands	r1, r3
 8005b0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8005b10:	2900      	cmp	r1, #0
 8005b12:	dd05      	ble.n	8005b20 <__ulp+0x20>
 8005b14:	2200      	movs	r2, #0
 8005b16:	460b      	mov	r3, r1
 8005b18:	ec43 2b10 	vmov	d0, r2, r3
 8005b1c:	b002      	add	sp, #8
 8005b1e:	4770      	bx	lr
 8005b20:	4249      	negs	r1, r1
 8005b22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8005b26:	ea4f 5021 	mov.w	r0, r1, asr #20
 8005b2a:	f04f 0200 	mov.w	r2, #0
 8005b2e:	f04f 0300 	mov.w	r3, #0
 8005b32:	da04      	bge.n	8005b3e <__ulp+0x3e>
 8005b34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005b38:	fa41 f300 	asr.w	r3, r1, r0
 8005b3c:	e7ec      	b.n	8005b18 <__ulp+0x18>
 8005b3e:	f1a0 0114 	sub.w	r1, r0, #20
 8005b42:	291e      	cmp	r1, #30
 8005b44:	bfda      	itte	le
 8005b46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8005b4a:	fa20 f101 	lsrle.w	r1, r0, r1
 8005b4e:	2101      	movgt	r1, #1
 8005b50:	460a      	mov	r2, r1
 8005b52:	e7e1      	b.n	8005b18 <__ulp+0x18>
 8005b54:	7ff00000 	.word	0x7ff00000

08005b58 <__b2d>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	6905      	ldr	r5, [r0, #16]
 8005b5c:	f100 0714 	add.w	r7, r0, #20
 8005b60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8005b64:	1f2e      	subs	r6, r5, #4
 8005b66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7ff fd48 	bl	8005600 <__hi0bits>
 8005b70:	f1c0 0320 	rsb	r3, r0, #32
 8005b74:	280a      	cmp	r0, #10
 8005b76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8005bf4 <__b2d+0x9c>
 8005b7a:	600b      	str	r3, [r1, #0]
 8005b7c:	dc14      	bgt.n	8005ba8 <__b2d+0x50>
 8005b7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8005b82:	fa24 f10e 	lsr.w	r1, r4, lr
 8005b86:	42b7      	cmp	r7, r6
 8005b88:	ea41 030c 	orr.w	r3, r1, ip
 8005b8c:	bf34      	ite	cc
 8005b8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005b92:	2100      	movcs	r1, #0
 8005b94:	3015      	adds	r0, #21
 8005b96:	fa04 f000 	lsl.w	r0, r4, r0
 8005b9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8005b9e:	ea40 0201 	orr.w	r2, r0, r1
 8005ba2:	ec43 2b10 	vmov	d0, r2, r3
 8005ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ba8:	42b7      	cmp	r7, r6
 8005baa:	bf3a      	itte	cc
 8005bac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8005bb0:	f1a5 0608 	subcc.w	r6, r5, #8
 8005bb4:	2100      	movcs	r1, #0
 8005bb6:	380b      	subs	r0, #11
 8005bb8:	d017      	beq.n	8005bea <__b2d+0x92>
 8005bba:	f1c0 0c20 	rsb	ip, r0, #32
 8005bbe:	fa04 f500 	lsl.w	r5, r4, r0
 8005bc2:	42be      	cmp	r6, r7
 8005bc4:	fa21 f40c 	lsr.w	r4, r1, ip
 8005bc8:	ea45 0504 	orr.w	r5, r5, r4
 8005bcc:	bf8c      	ite	hi
 8005bce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8005bd2:	2400      	movls	r4, #0
 8005bd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8005bd8:	fa01 f000 	lsl.w	r0, r1, r0
 8005bdc:	fa24 f40c 	lsr.w	r4, r4, ip
 8005be0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005be4:	ea40 0204 	orr.w	r2, r0, r4
 8005be8:	e7db      	b.n	8005ba2 <__b2d+0x4a>
 8005bea:	ea44 030c 	orr.w	r3, r4, ip
 8005bee:	460a      	mov	r2, r1
 8005bf0:	e7d7      	b.n	8005ba2 <__b2d+0x4a>
 8005bf2:	bf00      	nop
 8005bf4:	3ff00000 	.word	0x3ff00000

08005bf8 <__d2b>:
 8005bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	4689      	mov	r9, r1
 8005bfe:	2101      	movs	r1, #1
 8005c00:	ec57 6b10 	vmov	r6, r7, d0
 8005c04:	4690      	mov	r8, r2
 8005c06:	f7ff fc09 	bl	800541c <_Balloc>
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	b930      	cbnz	r0, 8005c1c <__d2b+0x24>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <__d2b+0xb0>)
 8005c12:	4826      	ldr	r0, [pc, #152]	; (8005cac <__d2b+0xb4>)
 8005c14:	f240 310a 	movw	r1, #778	; 0x30a
 8005c18:	f000 fb50 	bl	80062bc <__assert_func>
 8005c1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c24:	bb35      	cbnz	r5, 8005c74 <__d2b+0x7c>
 8005c26:	2e00      	cmp	r6, #0
 8005c28:	9301      	str	r3, [sp, #4]
 8005c2a:	d028      	beq.n	8005c7e <__d2b+0x86>
 8005c2c:	4668      	mov	r0, sp
 8005c2e:	9600      	str	r6, [sp, #0]
 8005c30:	f7ff fd06 	bl	8005640 <__lo0bits>
 8005c34:	9900      	ldr	r1, [sp, #0]
 8005c36:	b300      	cbz	r0, 8005c7a <__d2b+0x82>
 8005c38:	9a01      	ldr	r2, [sp, #4]
 8005c3a:	f1c0 0320 	rsb	r3, r0, #32
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	430b      	orrs	r3, r1
 8005c44:	40c2      	lsrs	r2, r0
 8005c46:	6163      	str	r3, [r4, #20]
 8005c48:	9201      	str	r2, [sp, #4]
 8005c4a:	9b01      	ldr	r3, [sp, #4]
 8005c4c:	61a3      	str	r3, [r4, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf14      	ite	ne
 8005c52:	2202      	movne	r2, #2
 8005c54:	2201      	moveq	r2, #1
 8005c56:	6122      	str	r2, [r4, #16]
 8005c58:	b1d5      	cbz	r5, 8005c90 <__d2b+0x98>
 8005c5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c5e:	4405      	add	r5, r0
 8005c60:	f8c9 5000 	str.w	r5, [r9]
 8005c64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c68:	f8c8 0000 	str.w	r0, [r8]
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	b003      	add	sp, #12
 8005c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c78:	e7d5      	b.n	8005c26 <__d2b+0x2e>
 8005c7a:	6161      	str	r1, [r4, #20]
 8005c7c:	e7e5      	b.n	8005c4a <__d2b+0x52>
 8005c7e:	a801      	add	r0, sp, #4
 8005c80:	f7ff fcde 	bl	8005640 <__lo0bits>
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	6163      	str	r3, [r4, #20]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	6122      	str	r2, [r4, #16]
 8005c8c:	3020      	adds	r0, #32
 8005c8e:	e7e3      	b.n	8005c58 <__d2b+0x60>
 8005c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c98:	f8c9 0000 	str.w	r0, [r9]
 8005c9c:	6918      	ldr	r0, [r3, #16]
 8005c9e:	f7ff fcaf 	bl	8005600 <__hi0bits>
 8005ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005ca6:	e7df      	b.n	8005c68 <__d2b+0x70>
 8005ca8:	08007060 	.word	0x08007060
 8005cac:	080070ec 	.word	0x080070ec

08005cb0 <__ratio>:
 8005cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	4688      	mov	r8, r1
 8005cb6:	4669      	mov	r1, sp
 8005cb8:	4681      	mov	r9, r0
 8005cba:	f7ff ff4d 	bl	8005b58 <__b2d>
 8005cbe:	a901      	add	r1, sp, #4
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	ec55 4b10 	vmov	r4, r5, d0
 8005cc6:	f7ff ff47 	bl	8005b58 <__b2d>
 8005cca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cce:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005cd2:	eba3 0c02 	sub.w	ip, r3, r2
 8005cd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005ce0:	ec51 0b10 	vmov	r0, r1, d0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bfd6      	itet	le
 8005ce8:	460a      	movle	r2, r1
 8005cea:	462a      	movgt	r2, r5
 8005cec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005cf0:	468b      	mov	fp, r1
 8005cf2:	462f      	mov	r7, r5
 8005cf4:	bfd4      	ite	le
 8005cf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005cfa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005cfe:	4620      	mov	r0, r4
 8005d00:	ee10 2a10 	vmov	r2, s0
 8005d04:	465b      	mov	r3, fp
 8005d06:	4639      	mov	r1, r7
 8005d08:	f7fa fda8 	bl	800085c <__aeabi_ddiv>
 8005d0c:	ec41 0b10 	vmov	d0, r0, r1
 8005d10:	b003      	add	sp, #12
 8005d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d16 <__copybits>:
 8005d16:	3901      	subs	r1, #1
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	1149      	asrs	r1, r1, #5
 8005d1c:	6914      	ldr	r4, [r2, #16]
 8005d1e:	3101      	adds	r1, #1
 8005d20:	f102 0314 	add.w	r3, r2, #20
 8005d24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005d28:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005d2c:	1f05      	subs	r5, r0, #4
 8005d2e:	42a3      	cmp	r3, r4
 8005d30:	d30c      	bcc.n	8005d4c <__copybits+0x36>
 8005d32:	1aa3      	subs	r3, r4, r2
 8005d34:	3b11      	subs	r3, #17
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	3211      	adds	r2, #17
 8005d3c:	42a2      	cmp	r2, r4
 8005d3e:	bf88      	it	hi
 8005d40:	2300      	movhi	r3, #0
 8005d42:	4418      	add	r0, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	4288      	cmp	r0, r1
 8005d48:	d305      	bcc.n	8005d56 <__copybits+0x40>
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	f853 6b04 	ldr.w	r6, [r3], #4
 8005d50:	f845 6f04 	str.w	r6, [r5, #4]!
 8005d54:	e7eb      	b.n	8005d2e <__copybits+0x18>
 8005d56:	f840 3b04 	str.w	r3, [r0], #4
 8005d5a:	e7f4      	b.n	8005d46 <__copybits+0x30>

08005d5c <__any_on>:
 8005d5c:	f100 0214 	add.w	r2, r0, #20
 8005d60:	6900      	ldr	r0, [r0, #16]
 8005d62:	114b      	asrs	r3, r1, #5
 8005d64:	4298      	cmp	r0, r3
 8005d66:	b510      	push	{r4, lr}
 8005d68:	db11      	blt.n	8005d8e <__any_on+0x32>
 8005d6a:	dd0a      	ble.n	8005d82 <__any_on+0x26>
 8005d6c:	f011 011f 	ands.w	r1, r1, #31
 8005d70:	d007      	beq.n	8005d82 <__any_on+0x26>
 8005d72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005d76:	fa24 f001 	lsr.w	r0, r4, r1
 8005d7a:	fa00 f101 	lsl.w	r1, r0, r1
 8005d7e:	428c      	cmp	r4, r1
 8005d80:	d10b      	bne.n	8005d9a <__any_on+0x3e>
 8005d82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d803      	bhi.n	8005d92 <__any_on+0x36>
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	4603      	mov	r3, r0
 8005d90:	e7f7      	b.n	8005d82 <__any_on+0x26>
 8005d92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d96:	2900      	cmp	r1, #0
 8005d98:	d0f5      	beq.n	8005d86 <__any_on+0x2a>
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	e7f6      	b.n	8005d8c <__any_on+0x30>

08005d9e <_calloc_r>:
 8005d9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005da0:	fba1 2402 	umull	r2, r4, r1, r2
 8005da4:	b94c      	cbnz	r4, 8005dba <_calloc_r+0x1c>
 8005da6:	4611      	mov	r1, r2
 8005da8:	9201      	str	r2, [sp, #4]
 8005daa:	f000 f87b 	bl	8005ea4 <_malloc_r>
 8005dae:	9a01      	ldr	r2, [sp, #4]
 8005db0:	4605      	mov	r5, r0
 8005db2:	b930      	cbnz	r0, 8005dc2 <_calloc_r+0x24>
 8005db4:	4628      	mov	r0, r5
 8005db6:	b003      	add	sp, #12
 8005db8:	bd30      	pop	{r4, r5, pc}
 8005dba:	220c      	movs	r2, #12
 8005dbc:	6002      	str	r2, [r0, #0]
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	e7f8      	b.n	8005db4 <_calloc_r+0x16>
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	f7fc fbbe 	bl	8002544 <memset>
 8005dc8:	e7f4      	b.n	8005db4 <_calloc_r+0x16>
	...

08005dcc <_free_r>:
 8005dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d044      	beq.n	8005e5c <_free_r+0x90>
 8005dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dd6:	9001      	str	r0, [sp, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f1a1 0404 	sub.w	r4, r1, #4
 8005dde:	bfb8      	it	lt
 8005de0:	18e4      	addlt	r4, r4, r3
 8005de2:	f000 fab5 	bl	8006350 <__malloc_lock>
 8005de6:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <_free_r+0x94>)
 8005de8:	9801      	ldr	r0, [sp, #4]
 8005dea:	6813      	ldr	r3, [r2, #0]
 8005dec:	b933      	cbnz	r3, 8005dfc <_free_r+0x30>
 8005dee:	6063      	str	r3, [r4, #4]
 8005df0:	6014      	str	r4, [r2, #0]
 8005df2:	b003      	add	sp, #12
 8005df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005df8:	f000 bab0 	b.w	800635c <__malloc_unlock>
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	d908      	bls.n	8005e12 <_free_r+0x46>
 8005e00:	6825      	ldr	r5, [r4, #0]
 8005e02:	1961      	adds	r1, r4, r5
 8005e04:	428b      	cmp	r3, r1
 8005e06:	bf01      	itttt	eq
 8005e08:	6819      	ldreq	r1, [r3, #0]
 8005e0a:	685b      	ldreq	r3, [r3, #4]
 8005e0c:	1949      	addeq	r1, r1, r5
 8005e0e:	6021      	streq	r1, [r4, #0]
 8005e10:	e7ed      	b.n	8005dee <_free_r+0x22>
 8005e12:	461a      	mov	r2, r3
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	b10b      	cbz	r3, 8005e1c <_free_r+0x50>
 8005e18:	42a3      	cmp	r3, r4
 8005e1a:	d9fa      	bls.n	8005e12 <_free_r+0x46>
 8005e1c:	6811      	ldr	r1, [r2, #0]
 8005e1e:	1855      	adds	r5, r2, r1
 8005e20:	42a5      	cmp	r5, r4
 8005e22:	d10b      	bne.n	8005e3c <_free_r+0x70>
 8005e24:	6824      	ldr	r4, [r4, #0]
 8005e26:	4421      	add	r1, r4
 8005e28:	1854      	adds	r4, r2, r1
 8005e2a:	42a3      	cmp	r3, r4
 8005e2c:	6011      	str	r1, [r2, #0]
 8005e2e:	d1e0      	bne.n	8005df2 <_free_r+0x26>
 8005e30:	681c      	ldr	r4, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	6053      	str	r3, [r2, #4]
 8005e36:	4421      	add	r1, r4
 8005e38:	6011      	str	r1, [r2, #0]
 8005e3a:	e7da      	b.n	8005df2 <_free_r+0x26>
 8005e3c:	d902      	bls.n	8005e44 <_free_r+0x78>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	6003      	str	r3, [r0, #0]
 8005e42:	e7d6      	b.n	8005df2 <_free_r+0x26>
 8005e44:	6825      	ldr	r5, [r4, #0]
 8005e46:	1961      	adds	r1, r4, r5
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	bf04      	itt	eq
 8005e4c:	6819      	ldreq	r1, [r3, #0]
 8005e4e:	685b      	ldreq	r3, [r3, #4]
 8005e50:	6063      	str	r3, [r4, #4]
 8005e52:	bf04      	itt	eq
 8005e54:	1949      	addeq	r1, r1, r5
 8005e56:	6021      	streq	r1, [r4, #0]
 8005e58:	6054      	str	r4, [r2, #4]
 8005e5a:	e7ca      	b.n	8005df2 <_free_r+0x26>
 8005e5c:	b003      	add	sp, #12
 8005e5e:	bd30      	pop	{r4, r5, pc}
 8005e60:	20000ab4 	.word	0x20000ab4

08005e64 <sbrk_aligned>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	4e0e      	ldr	r6, [pc, #56]	; (8005ea0 <sbrk_aligned+0x3c>)
 8005e68:	460c      	mov	r4, r1
 8005e6a:	6831      	ldr	r1, [r6, #0]
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	b911      	cbnz	r1, 8005e76 <sbrk_aligned+0x12>
 8005e70:	f000 f9f2 	bl	8006258 <_sbrk_r>
 8005e74:	6030      	str	r0, [r6, #0]
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f000 f9ed 	bl	8006258 <_sbrk_r>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d00a      	beq.n	8005e98 <sbrk_aligned+0x34>
 8005e82:	1cc4      	adds	r4, r0, #3
 8005e84:	f024 0403 	bic.w	r4, r4, #3
 8005e88:	42a0      	cmp	r0, r4
 8005e8a:	d007      	beq.n	8005e9c <sbrk_aligned+0x38>
 8005e8c:	1a21      	subs	r1, r4, r0
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 f9e2 	bl	8006258 <_sbrk_r>
 8005e94:	3001      	adds	r0, #1
 8005e96:	d101      	bne.n	8005e9c <sbrk_aligned+0x38>
 8005e98:	f04f 34ff 	mov.w	r4, #4294967295
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	20000ab8 	.word	0x20000ab8

08005ea4 <_malloc_r>:
 8005ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea8:	1ccd      	adds	r5, r1, #3
 8005eaa:	f025 0503 	bic.w	r5, r5, #3
 8005eae:	3508      	adds	r5, #8
 8005eb0:	2d0c      	cmp	r5, #12
 8005eb2:	bf38      	it	cc
 8005eb4:	250c      	movcc	r5, #12
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	4607      	mov	r7, r0
 8005eba:	db01      	blt.n	8005ec0 <_malloc_r+0x1c>
 8005ebc:	42a9      	cmp	r1, r5
 8005ebe:	d905      	bls.n	8005ecc <_malloc_r+0x28>
 8005ec0:	230c      	movs	r3, #12
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	2600      	movs	r6, #0
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ecc:	4e2e      	ldr	r6, [pc, #184]	; (8005f88 <_malloc_r+0xe4>)
 8005ece:	f000 fa3f 	bl	8006350 <__malloc_lock>
 8005ed2:	6833      	ldr	r3, [r6, #0]
 8005ed4:	461c      	mov	r4, r3
 8005ed6:	bb34      	cbnz	r4, 8005f26 <_malloc_r+0x82>
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4638      	mov	r0, r7
 8005edc:	f7ff ffc2 	bl	8005e64 <sbrk_aligned>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	d14d      	bne.n	8005f82 <_malloc_r+0xde>
 8005ee6:	6834      	ldr	r4, [r6, #0]
 8005ee8:	4626      	mov	r6, r4
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	d140      	bne.n	8005f70 <_malloc_r+0xcc>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	eb04 0803 	add.w	r8, r4, r3
 8005ef8:	f000 f9ae 	bl	8006258 <_sbrk_r>
 8005efc:	4580      	cmp	r8, r0
 8005efe:	d13a      	bne.n	8005f76 <_malloc_r+0xd2>
 8005f00:	6821      	ldr	r1, [r4, #0]
 8005f02:	3503      	adds	r5, #3
 8005f04:	1a6d      	subs	r5, r5, r1
 8005f06:	f025 0503 	bic.w	r5, r5, #3
 8005f0a:	3508      	adds	r5, #8
 8005f0c:	2d0c      	cmp	r5, #12
 8005f0e:	bf38      	it	cc
 8005f10:	250c      	movcc	r5, #12
 8005f12:	4629      	mov	r1, r5
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff ffa5 	bl	8005e64 <sbrk_aligned>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	d02b      	beq.n	8005f76 <_malloc_r+0xd2>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	442b      	add	r3, r5
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	e00e      	b.n	8005f44 <_malloc_r+0xa0>
 8005f26:	6822      	ldr	r2, [r4, #0]
 8005f28:	1b52      	subs	r2, r2, r5
 8005f2a:	d41e      	bmi.n	8005f6a <_malloc_r+0xc6>
 8005f2c:	2a0b      	cmp	r2, #11
 8005f2e:	d916      	bls.n	8005f5e <_malloc_r+0xba>
 8005f30:	1961      	adds	r1, r4, r5
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	6025      	str	r5, [r4, #0]
 8005f36:	bf18      	it	ne
 8005f38:	6059      	strne	r1, [r3, #4]
 8005f3a:	6863      	ldr	r3, [r4, #4]
 8005f3c:	bf08      	it	eq
 8005f3e:	6031      	streq	r1, [r6, #0]
 8005f40:	5162      	str	r2, [r4, r5]
 8005f42:	604b      	str	r3, [r1, #4]
 8005f44:	4638      	mov	r0, r7
 8005f46:	f104 060b 	add.w	r6, r4, #11
 8005f4a:	f000 fa07 	bl	800635c <__malloc_unlock>
 8005f4e:	f026 0607 	bic.w	r6, r6, #7
 8005f52:	1d23      	adds	r3, r4, #4
 8005f54:	1af2      	subs	r2, r6, r3
 8005f56:	d0b6      	beq.n	8005ec6 <_malloc_r+0x22>
 8005f58:	1b9b      	subs	r3, r3, r6
 8005f5a:	50a3      	str	r3, [r4, r2]
 8005f5c:	e7b3      	b.n	8005ec6 <_malloc_r+0x22>
 8005f5e:	6862      	ldr	r2, [r4, #4]
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	bf0c      	ite	eq
 8005f64:	6032      	streq	r2, [r6, #0]
 8005f66:	605a      	strne	r2, [r3, #4]
 8005f68:	e7ec      	b.n	8005f44 <_malloc_r+0xa0>
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	6864      	ldr	r4, [r4, #4]
 8005f6e:	e7b2      	b.n	8005ed6 <_malloc_r+0x32>
 8005f70:	4634      	mov	r4, r6
 8005f72:	6876      	ldr	r6, [r6, #4]
 8005f74:	e7b9      	b.n	8005eea <_malloc_r+0x46>
 8005f76:	230c      	movs	r3, #12
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	f000 f9ee 	bl	800635c <__malloc_unlock>
 8005f80:	e7a1      	b.n	8005ec6 <_malloc_r+0x22>
 8005f82:	6025      	str	r5, [r4, #0]
 8005f84:	e7de      	b.n	8005f44 <_malloc_r+0xa0>
 8005f86:	bf00      	nop
 8005f88:	20000ab4 	.word	0x20000ab4

08005f8c <__ssputs_r>:
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	688e      	ldr	r6, [r1, #8]
 8005f92:	429e      	cmp	r6, r3
 8005f94:	4682      	mov	sl, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	4690      	mov	r8, r2
 8005f9a:	461f      	mov	r7, r3
 8005f9c:	d838      	bhi.n	8006010 <__ssputs_r+0x84>
 8005f9e:	898a      	ldrh	r2, [r1, #12]
 8005fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fa4:	d032      	beq.n	800600c <__ssputs_r+0x80>
 8005fa6:	6825      	ldr	r5, [r4, #0]
 8005fa8:	6909      	ldr	r1, [r1, #16]
 8005faa:	eba5 0901 	sub.w	r9, r5, r1
 8005fae:	6965      	ldr	r5, [r4, #20]
 8005fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fb8:	3301      	adds	r3, #1
 8005fba:	444b      	add	r3, r9
 8005fbc:	106d      	asrs	r5, r5, #1
 8005fbe:	429d      	cmp	r5, r3
 8005fc0:	bf38      	it	cc
 8005fc2:	461d      	movcc	r5, r3
 8005fc4:	0553      	lsls	r3, r2, #21
 8005fc6:	d531      	bpl.n	800602c <__ssputs_r+0xa0>
 8005fc8:	4629      	mov	r1, r5
 8005fca:	f7ff ff6b 	bl	8005ea4 <_malloc_r>
 8005fce:	4606      	mov	r6, r0
 8005fd0:	b950      	cbnz	r0, 8005fe8 <__ssputs_r+0x5c>
 8005fd2:	230c      	movs	r3, #12
 8005fd4:	f8ca 3000 	str.w	r3, [sl]
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fde:	81a3      	strh	r3, [r4, #12]
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe8:	6921      	ldr	r1, [r4, #16]
 8005fea:	464a      	mov	r2, r9
 8005fec:	f7ff fa08 	bl	8005400 <memcpy>
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffa:	81a3      	strh	r3, [r4, #12]
 8005ffc:	6126      	str	r6, [r4, #16]
 8005ffe:	6165      	str	r5, [r4, #20]
 8006000:	444e      	add	r6, r9
 8006002:	eba5 0509 	sub.w	r5, r5, r9
 8006006:	6026      	str	r6, [r4, #0]
 8006008:	60a5      	str	r5, [r4, #8]
 800600a:	463e      	mov	r6, r7
 800600c:	42be      	cmp	r6, r7
 800600e:	d900      	bls.n	8006012 <__ssputs_r+0x86>
 8006010:	463e      	mov	r6, r7
 8006012:	6820      	ldr	r0, [r4, #0]
 8006014:	4632      	mov	r2, r6
 8006016:	4641      	mov	r1, r8
 8006018:	f000 f980 	bl	800631c <memmove>
 800601c:	68a3      	ldr	r3, [r4, #8]
 800601e:	1b9b      	subs	r3, r3, r6
 8006020:	60a3      	str	r3, [r4, #8]
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	4433      	add	r3, r6
 8006026:	6023      	str	r3, [r4, #0]
 8006028:	2000      	movs	r0, #0
 800602a:	e7db      	b.n	8005fe4 <__ssputs_r+0x58>
 800602c:	462a      	mov	r2, r5
 800602e:	f000 f99b 	bl	8006368 <_realloc_r>
 8006032:	4606      	mov	r6, r0
 8006034:	2800      	cmp	r0, #0
 8006036:	d1e1      	bne.n	8005ffc <__ssputs_r+0x70>
 8006038:	6921      	ldr	r1, [r4, #16]
 800603a:	4650      	mov	r0, sl
 800603c:	f7ff fec6 	bl	8005dcc <_free_r>
 8006040:	e7c7      	b.n	8005fd2 <__ssputs_r+0x46>
	...

08006044 <_svfiprintf_r>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	4698      	mov	r8, r3
 800604a:	898b      	ldrh	r3, [r1, #12]
 800604c:	061b      	lsls	r3, r3, #24
 800604e:	b09d      	sub	sp, #116	; 0x74
 8006050:	4607      	mov	r7, r0
 8006052:	460d      	mov	r5, r1
 8006054:	4614      	mov	r4, r2
 8006056:	d50e      	bpl.n	8006076 <_svfiprintf_r+0x32>
 8006058:	690b      	ldr	r3, [r1, #16]
 800605a:	b963      	cbnz	r3, 8006076 <_svfiprintf_r+0x32>
 800605c:	2140      	movs	r1, #64	; 0x40
 800605e:	f7ff ff21 	bl	8005ea4 <_malloc_r>
 8006062:	6028      	str	r0, [r5, #0]
 8006064:	6128      	str	r0, [r5, #16]
 8006066:	b920      	cbnz	r0, 8006072 <_svfiprintf_r+0x2e>
 8006068:	230c      	movs	r3, #12
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	e0d1      	b.n	8006216 <_svfiprintf_r+0x1d2>
 8006072:	2340      	movs	r3, #64	; 0x40
 8006074:	616b      	str	r3, [r5, #20]
 8006076:	2300      	movs	r3, #0
 8006078:	9309      	str	r3, [sp, #36]	; 0x24
 800607a:	2320      	movs	r3, #32
 800607c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006080:	f8cd 800c 	str.w	r8, [sp, #12]
 8006084:	2330      	movs	r3, #48	; 0x30
 8006086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006230 <_svfiprintf_r+0x1ec>
 800608a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800608e:	f04f 0901 	mov.w	r9, #1
 8006092:	4623      	mov	r3, r4
 8006094:	469a      	mov	sl, r3
 8006096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800609a:	b10a      	cbz	r2, 80060a0 <_svfiprintf_r+0x5c>
 800609c:	2a25      	cmp	r2, #37	; 0x25
 800609e:	d1f9      	bne.n	8006094 <_svfiprintf_r+0x50>
 80060a0:	ebba 0b04 	subs.w	fp, sl, r4
 80060a4:	d00b      	beq.n	80060be <_svfiprintf_r+0x7a>
 80060a6:	465b      	mov	r3, fp
 80060a8:	4622      	mov	r2, r4
 80060aa:	4629      	mov	r1, r5
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7ff ff6d 	bl	8005f8c <__ssputs_r>
 80060b2:	3001      	adds	r0, #1
 80060b4:	f000 80aa 	beq.w	800620c <_svfiprintf_r+0x1c8>
 80060b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ba:	445a      	add	r2, fp
 80060bc:	9209      	str	r2, [sp, #36]	; 0x24
 80060be:	f89a 3000 	ldrb.w	r3, [sl]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80a2 	beq.w	800620c <_svfiprintf_r+0x1c8>
 80060c8:	2300      	movs	r3, #0
 80060ca:	f04f 32ff 	mov.w	r2, #4294967295
 80060ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060d2:	f10a 0a01 	add.w	sl, sl, #1
 80060d6:	9304      	str	r3, [sp, #16]
 80060d8:	9307      	str	r3, [sp, #28]
 80060da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060de:	931a      	str	r3, [sp, #104]	; 0x68
 80060e0:	4654      	mov	r4, sl
 80060e2:	2205      	movs	r2, #5
 80060e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e8:	4851      	ldr	r0, [pc, #324]	; (8006230 <_svfiprintf_r+0x1ec>)
 80060ea:	f7fa f881 	bl	80001f0 <memchr>
 80060ee:	9a04      	ldr	r2, [sp, #16]
 80060f0:	b9d8      	cbnz	r0, 800612a <_svfiprintf_r+0xe6>
 80060f2:	06d0      	lsls	r0, r2, #27
 80060f4:	bf44      	itt	mi
 80060f6:	2320      	movmi	r3, #32
 80060f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060fc:	0711      	lsls	r1, r2, #28
 80060fe:	bf44      	itt	mi
 8006100:	232b      	movmi	r3, #43	; 0x2b
 8006102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006106:	f89a 3000 	ldrb.w	r3, [sl]
 800610a:	2b2a      	cmp	r3, #42	; 0x2a
 800610c:	d015      	beq.n	800613a <_svfiprintf_r+0xf6>
 800610e:	9a07      	ldr	r2, [sp, #28]
 8006110:	4654      	mov	r4, sl
 8006112:	2000      	movs	r0, #0
 8006114:	f04f 0c0a 	mov.w	ip, #10
 8006118:	4621      	mov	r1, r4
 800611a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800611e:	3b30      	subs	r3, #48	; 0x30
 8006120:	2b09      	cmp	r3, #9
 8006122:	d94e      	bls.n	80061c2 <_svfiprintf_r+0x17e>
 8006124:	b1b0      	cbz	r0, 8006154 <_svfiprintf_r+0x110>
 8006126:	9207      	str	r2, [sp, #28]
 8006128:	e014      	b.n	8006154 <_svfiprintf_r+0x110>
 800612a:	eba0 0308 	sub.w	r3, r0, r8
 800612e:	fa09 f303 	lsl.w	r3, r9, r3
 8006132:	4313      	orrs	r3, r2
 8006134:	9304      	str	r3, [sp, #16]
 8006136:	46a2      	mov	sl, r4
 8006138:	e7d2      	b.n	80060e0 <_svfiprintf_r+0x9c>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	1d19      	adds	r1, r3, #4
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	9103      	str	r1, [sp, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	bfbb      	ittet	lt
 8006146:	425b      	neglt	r3, r3
 8006148:	f042 0202 	orrlt.w	r2, r2, #2
 800614c:	9307      	strge	r3, [sp, #28]
 800614e:	9307      	strlt	r3, [sp, #28]
 8006150:	bfb8      	it	lt
 8006152:	9204      	strlt	r2, [sp, #16]
 8006154:	7823      	ldrb	r3, [r4, #0]
 8006156:	2b2e      	cmp	r3, #46	; 0x2e
 8006158:	d10c      	bne.n	8006174 <_svfiprintf_r+0x130>
 800615a:	7863      	ldrb	r3, [r4, #1]
 800615c:	2b2a      	cmp	r3, #42	; 0x2a
 800615e:	d135      	bne.n	80061cc <_svfiprintf_r+0x188>
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	9203      	str	r2, [sp, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	bfb8      	it	lt
 800616c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006170:	3402      	adds	r4, #2
 8006172:	9305      	str	r3, [sp, #20]
 8006174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006240 <_svfiprintf_r+0x1fc>
 8006178:	7821      	ldrb	r1, [r4, #0]
 800617a:	2203      	movs	r2, #3
 800617c:	4650      	mov	r0, sl
 800617e:	f7fa f837 	bl	80001f0 <memchr>
 8006182:	b140      	cbz	r0, 8006196 <_svfiprintf_r+0x152>
 8006184:	2340      	movs	r3, #64	; 0x40
 8006186:	eba0 000a 	sub.w	r0, r0, sl
 800618a:	fa03 f000 	lsl.w	r0, r3, r0
 800618e:	9b04      	ldr	r3, [sp, #16]
 8006190:	4303      	orrs	r3, r0
 8006192:	3401      	adds	r4, #1
 8006194:	9304      	str	r3, [sp, #16]
 8006196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800619a:	4826      	ldr	r0, [pc, #152]	; (8006234 <_svfiprintf_r+0x1f0>)
 800619c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061a0:	2206      	movs	r2, #6
 80061a2:	f7fa f825 	bl	80001f0 <memchr>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d038      	beq.n	800621c <_svfiprintf_r+0x1d8>
 80061aa:	4b23      	ldr	r3, [pc, #140]	; (8006238 <_svfiprintf_r+0x1f4>)
 80061ac:	bb1b      	cbnz	r3, 80061f6 <_svfiprintf_r+0x1b2>
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	3307      	adds	r3, #7
 80061b2:	f023 0307 	bic.w	r3, r3, #7
 80061b6:	3308      	adds	r3, #8
 80061b8:	9303      	str	r3, [sp, #12]
 80061ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061bc:	4433      	add	r3, r6
 80061be:	9309      	str	r3, [sp, #36]	; 0x24
 80061c0:	e767      	b.n	8006092 <_svfiprintf_r+0x4e>
 80061c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061c6:	460c      	mov	r4, r1
 80061c8:	2001      	movs	r0, #1
 80061ca:	e7a5      	b.n	8006118 <_svfiprintf_r+0xd4>
 80061cc:	2300      	movs	r3, #0
 80061ce:	3401      	adds	r4, #1
 80061d0:	9305      	str	r3, [sp, #20]
 80061d2:	4619      	mov	r1, r3
 80061d4:	f04f 0c0a 	mov.w	ip, #10
 80061d8:	4620      	mov	r0, r4
 80061da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061de:	3a30      	subs	r2, #48	; 0x30
 80061e0:	2a09      	cmp	r2, #9
 80061e2:	d903      	bls.n	80061ec <_svfiprintf_r+0x1a8>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0c5      	beq.n	8006174 <_svfiprintf_r+0x130>
 80061e8:	9105      	str	r1, [sp, #20]
 80061ea:	e7c3      	b.n	8006174 <_svfiprintf_r+0x130>
 80061ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80061f0:	4604      	mov	r4, r0
 80061f2:	2301      	movs	r3, #1
 80061f4:	e7f0      	b.n	80061d8 <_svfiprintf_r+0x194>
 80061f6:	ab03      	add	r3, sp, #12
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	462a      	mov	r2, r5
 80061fc:	4b0f      	ldr	r3, [pc, #60]	; (800623c <_svfiprintf_r+0x1f8>)
 80061fe:	a904      	add	r1, sp, #16
 8006200:	4638      	mov	r0, r7
 8006202:	f7fc fa47 	bl	8002694 <_printf_float>
 8006206:	1c42      	adds	r2, r0, #1
 8006208:	4606      	mov	r6, r0
 800620a:	d1d6      	bne.n	80061ba <_svfiprintf_r+0x176>
 800620c:	89ab      	ldrh	r3, [r5, #12]
 800620e:	065b      	lsls	r3, r3, #25
 8006210:	f53f af2c 	bmi.w	800606c <_svfiprintf_r+0x28>
 8006214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006216:	b01d      	add	sp, #116	; 0x74
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621c:	ab03      	add	r3, sp, #12
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	462a      	mov	r2, r5
 8006222:	4b06      	ldr	r3, [pc, #24]	; (800623c <_svfiprintf_r+0x1f8>)
 8006224:	a904      	add	r1, sp, #16
 8006226:	4638      	mov	r0, r7
 8006228:	f7fc fcd8 	bl	8002bdc <_printf_i>
 800622c:	e7eb      	b.n	8006206 <_svfiprintf_r+0x1c2>
 800622e:	bf00      	nop
 8006230:	08007244 	.word	0x08007244
 8006234:	0800724e 	.word	0x0800724e
 8006238:	08002695 	.word	0x08002695
 800623c:	08005f8d 	.word	0x08005f8d
 8006240:	0800724a 	.word	0x0800724a
 8006244:	00000000 	.word	0x00000000

08006248 <nan>:
 8006248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006250 <nan+0x8>
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	00000000 	.word	0x00000000
 8006254:	7ff80000 	.word	0x7ff80000

08006258 <_sbrk_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4d06      	ldr	r5, [pc, #24]	; (8006274 <_sbrk_r+0x1c>)
 800625c:	2300      	movs	r3, #0
 800625e:	4604      	mov	r4, r0
 8006260:	4608      	mov	r0, r1
 8006262:	602b      	str	r3, [r5, #0]
 8006264:	f7fb f8ac 	bl	80013c0 <_sbrk>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	d102      	bne.n	8006272 <_sbrk_r+0x1a>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b103      	cbz	r3, 8006272 <_sbrk_r+0x1a>
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	bd38      	pop	{r3, r4, r5, pc}
 8006274:	20000abc 	.word	0x20000abc

08006278 <strncmp>:
 8006278:	b510      	push	{r4, lr}
 800627a:	b17a      	cbz	r2, 800629c <strncmp+0x24>
 800627c:	4603      	mov	r3, r0
 800627e:	3901      	subs	r1, #1
 8006280:	1884      	adds	r4, r0, r2
 8006282:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006286:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800628a:	4290      	cmp	r0, r2
 800628c:	d101      	bne.n	8006292 <strncmp+0x1a>
 800628e:	42a3      	cmp	r3, r4
 8006290:	d101      	bne.n	8006296 <strncmp+0x1e>
 8006292:	1a80      	subs	r0, r0, r2
 8006294:	bd10      	pop	{r4, pc}
 8006296:	2800      	cmp	r0, #0
 8006298:	d1f3      	bne.n	8006282 <strncmp+0xa>
 800629a:	e7fa      	b.n	8006292 <strncmp+0x1a>
 800629c:	4610      	mov	r0, r2
 800629e:	e7f9      	b.n	8006294 <strncmp+0x1c>

080062a0 <__ascii_wctomb>:
 80062a0:	b149      	cbz	r1, 80062b6 <__ascii_wctomb+0x16>
 80062a2:	2aff      	cmp	r2, #255	; 0xff
 80062a4:	bf85      	ittet	hi
 80062a6:	238a      	movhi	r3, #138	; 0x8a
 80062a8:	6003      	strhi	r3, [r0, #0]
 80062aa:	700a      	strbls	r2, [r1, #0]
 80062ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80062b0:	bf98      	it	ls
 80062b2:	2001      	movls	r0, #1
 80062b4:	4770      	bx	lr
 80062b6:	4608      	mov	r0, r1
 80062b8:	4770      	bx	lr
	...

080062bc <__assert_func>:
 80062bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062be:	4614      	mov	r4, r2
 80062c0:	461a      	mov	r2, r3
 80062c2:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <__assert_func+0x2c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4605      	mov	r5, r0
 80062c8:	68d8      	ldr	r0, [r3, #12]
 80062ca:	b14c      	cbz	r4, 80062e0 <__assert_func+0x24>
 80062cc:	4b07      	ldr	r3, [pc, #28]	; (80062ec <__assert_func+0x30>)
 80062ce:	9100      	str	r1, [sp, #0]
 80062d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062d4:	4906      	ldr	r1, [pc, #24]	; (80062f0 <__assert_func+0x34>)
 80062d6:	462b      	mov	r3, r5
 80062d8:	f000 f80e 	bl	80062f8 <fiprintf>
 80062dc:	f000 fa8c 	bl	80067f8 <abort>
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <__assert_func+0x38>)
 80062e2:	461c      	mov	r4, r3
 80062e4:	e7f3      	b.n	80062ce <__assert_func+0x12>
 80062e6:	bf00      	nop
 80062e8:	20000004 	.word	0x20000004
 80062ec:	08007255 	.word	0x08007255
 80062f0:	08007262 	.word	0x08007262
 80062f4:	08007290 	.word	0x08007290

080062f8 <fiprintf>:
 80062f8:	b40e      	push	{r1, r2, r3}
 80062fa:	b503      	push	{r0, r1, lr}
 80062fc:	4601      	mov	r1, r0
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	4805      	ldr	r0, [pc, #20]	; (8006318 <fiprintf+0x20>)
 8006302:	f853 2b04 	ldr.w	r2, [r3], #4
 8006306:	6800      	ldr	r0, [r0, #0]
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	f000 f885 	bl	8006418 <_vfiprintf_r>
 800630e:	b002      	add	sp, #8
 8006310:	f85d eb04 	ldr.w	lr, [sp], #4
 8006314:	b003      	add	sp, #12
 8006316:	4770      	bx	lr
 8006318:	20000004 	.word	0x20000004

0800631c <memmove>:
 800631c:	4288      	cmp	r0, r1
 800631e:	b510      	push	{r4, lr}
 8006320:	eb01 0402 	add.w	r4, r1, r2
 8006324:	d902      	bls.n	800632c <memmove+0x10>
 8006326:	4284      	cmp	r4, r0
 8006328:	4623      	mov	r3, r4
 800632a:	d807      	bhi.n	800633c <memmove+0x20>
 800632c:	1e43      	subs	r3, r0, #1
 800632e:	42a1      	cmp	r1, r4
 8006330:	d008      	beq.n	8006344 <memmove+0x28>
 8006332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800633a:	e7f8      	b.n	800632e <memmove+0x12>
 800633c:	4402      	add	r2, r0
 800633e:	4601      	mov	r1, r0
 8006340:	428a      	cmp	r2, r1
 8006342:	d100      	bne.n	8006346 <memmove+0x2a>
 8006344:	bd10      	pop	{r4, pc}
 8006346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800634a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800634e:	e7f7      	b.n	8006340 <memmove+0x24>

08006350 <__malloc_lock>:
 8006350:	4801      	ldr	r0, [pc, #4]	; (8006358 <__malloc_lock+0x8>)
 8006352:	f000 bc11 	b.w	8006b78 <__retarget_lock_acquire_recursive>
 8006356:	bf00      	nop
 8006358:	20000ac0 	.word	0x20000ac0

0800635c <__malloc_unlock>:
 800635c:	4801      	ldr	r0, [pc, #4]	; (8006364 <__malloc_unlock+0x8>)
 800635e:	f000 bc0c 	b.w	8006b7a <__retarget_lock_release_recursive>
 8006362:	bf00      	nop
 8006364:	20000ac0 	.word	0x20000ac0

08006368 <_realloc_r>:
 8006368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636c:	4680      	mov	r8, r0
 800636e:	4614      	mov	r4, r2
 8006370:	460e      	mov	r6, r1
 8006372:	b921      	cbnz	r1, 800637e <_realloc_r+0x16>
 8006374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006378:	4611      	mov	r1, r2
 800637a:	f7ff bd93 	b.w	8005ea4 <_malloc_r>
 800637e:	b92a      	cbnz	r2, 800638c <_realloc_r+0x24>
 8006380:	f7ff fd24 	bl	8005dcc <_free_r>
 8006384:	4625      	mov	r5, r4
 8006386:	4628      	mov	r0, r5
 8006388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800638c:	f000 fc5c 	bl	8006c48 <_malloc_usable_size_r>
 8006390:	4284      	cmp	r4, r0
 8006392:	4607      	mov	r7, r0
 8006394:	d802      	bhi.n	800639c <_realloc_r+0x34>
 8006396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800639a:	d812      	bhi.n	80063c2 <_realloc_r+0x5a>
 800639c:	4621      	mov	r1, r4
 800639e:	4640      	mov	r0, r8
 80063a0:	f7ff fd80 	bl	8005ea4 <_malloc_r>
 80063a4:	4605      	mov	r5, r0
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d0ed      	beq.n	8006386 <_realloc_r+0x1e>
 80063aa:	42bc      	cmp	r4, r7
 80063ac:	4622      	mov	r2, r4
 80063ae:	4631      	mov	r1, r6
 80063b0:	bf28      	it	cs
 80063b2:	463a      	movcs	r2, r7
 80063b4:	f7ff f824 	bl	8005400 <memcpy>
 80063b8:	4631      	mov	r1, r6
 80063ba:	4640      	mov	r0, r8
 80063bc:	f7ff fd06 	bl	8005dcc <_free_r>
 80063c0:	e7e1      	b.n	8006386 <_realloc_r+0x1e>
 80063c2:	4635      	mov	r5, r6
 80063c4:	e7df      	b.n	8006386 <_realloc_r+0x1e>

080063c6 <__sfputc_r>:
 80063c6:	6893      	ldr	r3, [r2, #8]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	b410      	push	{r4}
 80063ce:	6093      	str	r3, [r2, #8]
 80063d0:	da08      	bge.n	80063e4 <__sfputc_r+0x1e>
 80063d2:	6994      	ldr	r4, [r2, #24]
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	db01      	blt.n	80063dc <__sfputc_r+0x16>
 80063d8:	290a      	cmp	r1, #10
 80063da:	d103      	bne.n	80063e4 <__sfputc_r+0x1e>
 80063dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e0:	f000 b94a 	b.w	8006678 <__swbuf_r>
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	1c58      	adds	r0, r3, #1
 80063e8:	6010      	str	r0, [r2, #0]
 80063ea:	7019      	strb	r1, [r3, #0]
 80063ec:	4608      	mov	r0, r1
 80063ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <__sfputs_r>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	4606      	mov	r6, r0
 80063f8:	460f      	mov	r7, r1
 80063fa:	4614      	mov	r4, r2
 80063fc:	18d5      	adds	r5, r2, r3
 80063fe:	42ac      	cmp	r4, r5
 8006400:	d101      	bne.n	8006406 <__sfputs_r+0x12>
 8006402:	2000      	movs	r0, #0
 8006404:	e007      	b.n	8006416 <__sfputs_r+0x22>
 8006406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800640a:	463a      	mov	r2, r7
 800640c:	4630      	mov	r0, r6
 800640e:	f7ff ffda 	bl	80063c6 <__sfputc_r>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d1f3      	bne.n	80063fe <__sfputs_r+0xa>
 8006416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006418 <_vfiprintf_r>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	460d      	mov	r5, r1
 800641e:	b09d      	sub	sp, #116	; 0x74
 8006420:	4614      	mov	r4, r2
 8006422:	4698      	mov	r8, r3
 8006424:	4606      	mov	r6, r0
 8006426:	b118      	cbz	r0, 8006430 <_vfiprintf_r+0x18>
 8006428:	6983      	ldr	r3, [r0, #24]
 800642a:	b90b      	cbnz	r3, 8006430 <_vfiprintf_r+0x18>
 800642c:	f000 fb06 	bl	8006a3c <__sinit>
 8006430:	4b89      	ldr	r3, [pc, #548]	; (8006658 <_vfiprintf_r+0x240>)
 8006432:	429d      	cmp	r5, r3
 8006434:	d11b      	bne.n	800646e <_vfiprintf_r+0x56>
 8006436:	6875      	ldr	r5, [r6, #4]
 8006438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800643a:	07d9      	lsls	r1, r3, #31
 800643c:	d405      	bmi.n	800644a <_vfiprintf_r+0x32>
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	059a      	lsls	r2, r3, #22
 8006442:	d402      	bmi.n	800644a <_vfiprintf_r+0x32>
 8006444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006446:	f000 fb97 	bl	8006b78 <__retarget_lock_acquire_recursive>
 800644a:	89ab      	ldrh	r3, [r5, #12]
 800644c:	071b      	lsls	r3, r3, #28
 800644e:	d501      	bpl.n	8006454 <_vfiprintf_r+0x3c>
 8006450:	692b      	ldr	r3, [r5, #16]
 8006452:	b9eb      	cbnz	r3, 8006490 <_vfiprintf_r+0x78>
 8006454:	4629      	mov	r1, r5
 8006456:	4630      	mov	r0, r6
 8006458:	f000 f960 	bl	800671c <__swsetup_r>
 800645c:	b1c0      	cbz	r0, 8006490 <_vfiprintf_r+0x78>
 800645e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006460:	07dc      	lsls	r4, r3, #31
 8006462:	d50e      	bpl.n	8006482 <_vfiprintf_r+0x6a>
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	b01d      	add	sp, #116	; 0x74
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646e:	4b7b      	ldr	r3, [pc, #492]	; (800665c <_vfiprintf_r+0x244>)
 8006470:	429d      	cmp	r5, r3
 8006472:	d101      	bne.n	8006478 <_vfiprintf_r+0x60>
 8006474:	68b5      	ldr	r5, [r6, #8]
 8006476:	e7df      	b.n	8006438 <_vfiprintf_r+0x20>
 8006478:	4b79      	ldr	r3, [pc, #484]	; (8006660 <_vfiprintf_r+0x248>)
 800647a:	429d      	cmp	r5, r3
 800647c:	bf08      	it	eq
 800647e:	68f5      	ldreq	r5, [r6, #12]
 8006480:	e7da      	b.n	8006438 <_vfiprintf_r+0x20>
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	0598      	lsls	r0, r3, #22
 8006486:	d4ed      	bmi.n	8006464 <_vfiprintf_r+0x4c>
 8006488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800648a:	f000 fb76 	bl	8006b7a <__retarget_lock_release_recursive>
 800648e:	e7e9      	b.n	8006464 <_vfiprintf_r+0x4c>
 8006490:	2300      	movs	r3, #0
 8006492:	9309      	str	r3, [sp, #36]	; 0x24
 8006494:	2320      	movs	r3, #32
 8006496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800649a:	f8cd 800c 	str.w	r8, [sp, #12]
 800649e:	2330      	movs	r3, #48	; 0x30
 80064a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006664 <_vfiprintf_r+0x24c>
 80064a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064a8:	f04f 0901 	mov.w	r9, #1
 80064ac:	4623      	mov	r3, r4
 80064ae:	469a      	mov	sl, r3
 80064b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b4:	b10a      	cbz	r2, 80064ba <_vfiprintf_r+0xa2>
 80064b6:	2a25      	cmp	r2, #37	; 0x25
 80064b8:	d1f9      	bne.n	80064ae <_vfiprintf_r+0x96>
 80064ba:	ebba 0b04 	subs.w	fp, sl, r4
 80064be:	d00b      	beq.n	80064d8 <_vfiprintf_r+0xc0>
 80064c0:	465b      	mov	r3, fp
 80064c2:	4622      	mov	r2, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ff94 	bl	80063f4 <__sfputs_r>
 80064cc:	3001      	adds	r0, #1
 80064ce:	f000 80aa 	beq.w	8006626 <_vfiprintf_r+0x20e>
 80064d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d4:	445a      	add	r2, fp
 80064d6:	9209      	str	r2, [sp, #36]	; 0x24
 80064d8:	f89a 3000 	ldrb.w	r3, [sl]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80a2 	beq.w	8006626 <_vfiprintf_r+0x20e>
 80064e2:	2300      	movs	r3, #0
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ec:	f10a 0a01 	add.w	sl, sl, #1
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f8:	931a      	str	r3, [sp, #104]	; 0x68
 80064fa:	4654      	mov	r4, sl
 80064fc:	2205      	movs	r2, #5
 80064fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006502:	4858      	ldr	r0, [pc, #352]	; (8006664 <_vfiprintf_r+0x24c>)
 8006504:	f7f9 fe74 	bl	80001f0 <memchr>
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	b9d8      	cbnz	r0, 8006544 <_vfiprintf_r+0x12c>
 800650c:	06d1      	lsls	r1, r2, #27
 800650e:	bf44      	itt	mi
 8006510:	2320      	movmi	r3, #32
 8006512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006516:	0713      	lsls	r3, r2, #28
 8006518:	bf44      	itt	mi
 800651a:	232b      	movmi	r3, #43	; 0x2b
 800651c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006520:	f89a 3000 	ldrb.w	r3, [sl]
 8006524:	2b2a      	cmp	r3, #42	; 0x2a
 8006526:	d015      	beq.n	8006554 <_vfiprintf_r+0x13c>
 8006528:	9a07      	ldr	r2, [sp, #28]
 800652a:	4654      	mov	r4, sl
 800652c:	2000      	movs	r0, #0
 800652e:	f04f 0c0a 	mov.w	ip, #10
 8006532:	4621      	mov	r1, r4
 8006534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006538:	3b30      	subs	r3, #48	; 0x30
 800653a:	2b09      	cmp	r3, #9
 800653c:	d94e      	bls.n	80065dc <_vfiprintf_r+0x1c4>
 800653e:	b1b0      	cbz	r0, 800656e <_vfiprintf_r+0x156>
 8006540:	9207      	str	r2, [sp, #28]
 8006542:	e014      	b.n	800656e <_vfiprintf_r+0x156>
 8006544:	eba0 0308 	sub.w	r3, r0, r8
 8006548:	fa09 f303 	lsl.w	r3, r9, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	46a2      	mov	sl, r4
 8006552:	e7d2      	b.n	80064fa <_vfiprintf_r+0xe2>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	1d19      	adds	r1, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	9103      	str	r1, [sp, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfbb      	ittet	lt
 8006560:	425b      	neglt	r3, r3
 8006562:	f042 0202 	orrlt.w	r2, r2, #2
 8006566:	9307      	strge	r3, [sp, #28]
 8006568:	9307      	strlt	r3, [sp, #28]
 800656a:	bfb8      	it	lt
 800656c:	9204      	strlt	r2, [sp, #16]
 800656e:	7823      	ldrb	r3, [r4, #0]
 8006570:	2b2e      	cmp	r3, #46	; 0x2e
 8006572:	d10c      	bne.n	800658e <_vfiprintf_r+0x176>
 8006574:	7863      	ldrb	r3, [r4, #1]
 8006576:	2b2a      	cmp	r3, #42	; 0x2a
 8006578:	d135      	bne.n	80065e6 <_vfiprintf_r+0x1ce>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9203      	str	r2, [sp, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfb8      	it	lt
 8006586:	f04f 33ff 	movlt.w	r3, #4294967295
 800658a:	3402      	adds	r4, #2
 800658c:	9305      	str	r3, [sp, #20]
 800658e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006674 <_vfiprintf_r+0x25c>
 8006592:	7821      	ldrb	r1, [r4, #0]
 8006594:	2203      	movs	r2, #3
 8006596:	4650      	mov	r0, sl
 8006598:	f7f9 fe2a 	bl	80001f0 <memchr>
 800659c:	b140      	cbz	r0, 80065b0 <_vfiprintf_r+0x198>
 800659e:	2340      	movs	r3, #64	; 0x40
 80065a0:	eba0 000a 	sub.w	r0, r0, sl
 80065a4:	fa03 f000 	lsl.w	r0, r3, r0
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	4303      	orrs	r3, r0
 80065ac:	3401      	adds	r4, #1
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b4:	482c      	ldr	r0, [pc, #176]	; (8006668 <_vfiprintf_r+0x250>)
 80065b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065ba:	2206      	movs	r2, #6
 80065bc:	f7f9 fe18 	bl	80001f0 <memchr>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d03f      	beq.n	8006644 <_vfiprintf_r+0x22c>
 80065c4:	4b29      	ldr	r3, [pc, #164]	; (800666c <_vfiprintf_r+0x254>)
 80065c6:	bb1b      	cbnz	r3, 8006610 <_vfiprintf_r+0x1f8>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	3307      	adds	r3, #7
 80065cc:	f023 0307 	bic.w	r3, r3, #7
 80065d0:	3308      	adds	r3, #8
 80065d2:	9303      	str	r3, [sp, #12]
 80065d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d6:	443b      	add	r3, r7
 80065d8:	9309      	str	r3, [sp, #36]	; 0x24
 80065da:	e767      	b.n	80064ac <_vfiprintf_r+0x94>
 80065dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e0:	460c      	mov	r4, r1
 80065e2:	2001      	movs	r0, #1
 80065e4:	e7a5      	b.n	8006532 <_vfiprintf_r+0x11a>
 80065e6:	2300      	movs	r3, #0
 80065e8:	3401      	adds	r4, #1
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	4619      	mov	r1, r3
 80065ee:	f04f 0c0a 	mov.w	ip, #10
 80065f2:	4620      	mov	r0, r4
 80065f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f8:	3a30      	subs	r2, #48	; 0x30
 80065fa:	2a09      	cmp	r2, #9
 80065fc:	d903      	bls.n	8006606 <_vfiprintf_r+0x1ee>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0c5      	beq.n	800658e <_vfiprintf_r+0x176>
 8006602:	9105      	str	r1, [sp, #20]
 8006604:	e7c3      	b.n	800658e <_vfiprintf_r+0x176>
 8006606:	fb0c 2101 	mla	r1, ip, r1, r2
 800660a:	4604      	mov	r4, r0
 800660c:	2301      	movs	r3, #1
 800660e:	e7f0      	b.n	80065f2 <_vfiprintf_r+0x1da>
 8006610:	ab03      	add	r3, sp, #12
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	462a      	mov	r2, r5
 8006616:	4b16      	ldr	r3, [pc, #88]	; (8006670 <_vfiprintf_r+0x258>)
 8006618:	a904      	add	r1, sp, #16
 800661a:	4630      	mov	r0, r6
 800661c:	f7fc f83a 	bl	8002694 <_printf_float>
 8006620:	4607      	mov	r7, r0
 8006622:	1c78      	adds	r0, r7, #1
 8006624:	d1d6      	bne.n	80065d4 <_vfiprintf_r+0x1bc>
 8006626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006628:	07d9      	lsls	r1, r3, #31
 800662a:	d405      	bmi.n	8006638 <_vfiprintf_r+0x220>
 800662c:	89ab      	ldrh	r3, [r5, #12]
 800662e:	059a      	lsls	r2, r3, #22
 8006630:	d402      	bmi.n	8006638 <_vfiprintf_r+0x220>
 8006632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006634:	f000 faa1 	bl	8006b7a <__retarget_lock_release_recursive>
 8006638:	89ab      	ldrh	r3, [r5, #12]
 800663a:	065b      	lsls	r3, r3, #25
 800663c:	f53f af12 	bmi.w	8006464 <_vfiprintf_r+0x4c>
 8006640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006642:	e711      	b.n	8006468 <_vfiprintf_r+0x50>
 8006644:	ab03      	add	r3, sp, #12
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	462a      	mov	r2, r5
 800664a:	4b09      	ldr	r3, [pc, #36]	; (8006670 <_vfiprintf_r+0x258>)
 800664c:	a904      	add	r1, sp, #16
 800664e:	4630      	mov	r0, r6
 8006650:	f7fc fac4 	bl	8002bdc <_printf_i>
 8006654:	e7e4      	b.n	8006620 <_vfiprintf_r+0x208>
 8006656:	bf00      	nop
 8006658:	080072b4 	.word	0x080072b4
 800665c:	080072d4 	.word	0x080072d4
 8006660:	08007294 	.word	0x08007294
 8006664:	08007244 	.word	0x08007244
 8006668:	0800724e 	.word	0x0800724e
 800666c:	08002695 	.word	0x08002695
 8006670:	080063f5 	.word	0x080063f5
 8006674:	0800724a 	.word	0x0800724a

08006678 <__swbuf_r>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	460e      	mov	r6, r1
 800667c:	4614      	mov	r4, r2
 800667e:	4605      	mov	r5, r0
 8006680:	b118      	cbz	r0, 800668a <__swbuf_r+0x12>
 8006682:	6983      	ldr	r3, [r0, #24]
 8006684:	b90b      	cbnz	r3, 800668a <__swbuf_r+0x12>
 8006686:	f000 f9d9 	bl	8006a3c <__sinit>
 800668a:	4b21      	ldr	r3, [pc, #132]	; (8006710 <__swbuf_r+0x98>)
 800668c:	429c      	cmp	r4, r3
 800668e:	d12b      	bne.n	80066e8 <__swbuf_r+0x70>
 8006690:	686c      	ldr	r4, [r5, #4]
 8006692:	69a3      	ldr	r3, [r4, #24]
 8006694:	60a3      	str	r3, [r4, #8]
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	071a      	lsls	r2, r3, #28
 800669a:	d52f      	bpl.n	80066fc <__swbuf_r+0x84>
 800669c:	6923      	ldr	r3, [r4, #16]
 800669e:	b36b      	cbz	r3, 80066fc <__swbuf_r+0x84>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	6820      	ldr	r0, [r4, #0]
 80066a4:	1ac0      	subs	r0, r0, r3
 80066a6:	6963      	ldr	r3, [r4, #20]
 80066a8:	b2f6      	uxtb	r6, r6
 80066aa:	4283      	cmp	r3, r0
 80066ac:	4637      	mov	r7, r6
 80066ae:	dc04      	bgt.n	80066ba <__swbuf_r+0x42>
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f92e 	bl	8006914 <_fflush_r>
 80066b8:	bb30      	cbnz	r0, 8006708 <__swbuf_r+0x90>
 80066ba:	68a3      	ldr	r3, [r4, #8]
 80066bc:	3b01      	subs	r3, #1
 80066be:	60a3      	str	r3, [r4, #8]
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	6022      	str	r2, [r4, #0]
 80066c6:	701e      	strb	r6, [r3, #0]
 80066c8:	6963      	ldr	r3, [r4, #20]
 80066ca:	3001      	adds	r0, #1
 80066cc:	4283      	cmp	r3, r0
 80066ce:	d004      	beq.n	80066da <__swbuf_r+0x62>
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	07db      	lsls	r3, r3, #31
 80066d4:	d506      	bpl.n	80066e4 <__swbuf_r+0x6c>
 80066d6:	2e0a      	cmp	r6, #10
 80066d8:	d104      	bne.n	80066e4 <__swbuf_r+0x6c>
 80066da:	4621      	mov	r1, r4
 80066dc:	4628      	mov	r0, r5
 80066de:	f000 f919 	bl	8006914 <_fflush_r>
 80066e2:	b988      	cbnz	r0, 8006708 <__swbuf_r+0x90>
 80066e4:	4638      	mov	r0, r7
 80066e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <__swbuf_r+0x9c>)
 80066ea:	429c      	cmp	r4, r3
 80066ec:	d101      	bne.n	80066f2 <__swbuf_r+0x7a>
 80066ee:	68ac      	ldr	r4, [r5, #8]
 80066f0:	e7cf      	b.n	8006692 <__swbuf_r+0x1a>
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <__swbuf_r+0xa0>)
 80066f4:	429c      	cmp	r4, r3
 80066f6:	bf08      	it	eq
 80066f8:	68ec      	ldreq	r4, [r5, #12]
 80066fa:	e7ca      	b.n	8006692 <__swbuf_r+0x1a>
 80066fc:	4621      	mov	r1, r4
 80066fe:	4628      	mov	r0, r5
 8006700:	f000 f80c 	bl	800671c <__swsetup_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	d0cb      	beq.n	80066a0 <__swbuf_r+0x28>
 8006708:	f04f 37ff 	mov.w	r7, #4294967295
 800670c:	e7ea      	b.n	80066e4 <__swbuf_r+0x6c>
 800670e:	bf00      	nop
 8006710:	080072b4 	.word	0x080072b4
 8006714:	080072d4 	.word	0x080072d4
 8006718:	08007294 	.word	0x08007294

0800671c <__swsetup_r>:
 800671c:	4b32      	ldr	r3, [pc, #200]	; (80067e8 <__swsetup_r+0xcc>)
 800671e:	b570      	push	{r4, r5, r6, lr}
 8006720:	681d      	ldr	r5, [r3, #0]
 8006722:	4606      	mov	r6, r0
 8006724:	460c      	mov	r4, r1
 8006726:	b125      	cbz	r5, 8006732 <__swsetup_r+0x16>
 8006728:	69ab      	ldr	r3, [r5, #24]
 800672a:	b913      	cbnz	r3, 8006732 <__swsetup_r+0x16>
 800672c:	4628      	mov	r0, r5
 800672e:	f000 f985 	bl	8006a3c <__sinit>
 8006732:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <__swsetup_r+0xd0>)
 8006734:	429c      	cmp	r4, r3
 8006736:	d10f      	bne.n	8006758 <__swsetup_r+0x3c>
 8006738:	686c      	ldr	r4, [r5, #4]
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006740:	0719      	lsls	r1, r3, #28
 8006742:	d42c      	bmi.n	800679e <__swsetup_r+0x82>
 8006744:	06dd      	lsls	r5, r3, #27
 8006746:	d411      	bmi.n	800676c <__swsetup_r+0x50>
 8006748:	2309      	movs	r3, #9
 800674a:	6033      	str	r3, [r6, #0]
 800674c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006750:	81a3      	strh	r3, [r4, #12]
 8006752:	f04f 30ff 	mov.w	r0, #4294967295
 8006756:	e03e      	b.n	80067d6 <__swsetup_r+0xba>
 8006758:	4b25      	ldr	r3, [pc, #148]	; (80067f0 <__swsetup_r+0xd4>)
 800675a:	429c      	cmp	r4, r3
 800675c:	d101      	bne.n	8006762 <__swsetup_r+0x46>
 800675e:	68ac      	ldr	r4, [r5, #8]
 8006760:	e7eb      	b.n	800673a <__swsetup_r+0x1e>
 8006762:	4b24      	ldr	r3, [pc, #144]	; (80067f4 <__swsetup_r+0xd8>)
 8006764:	429c      	cmp	r4, r3
 8006766:	bf08      	it	eq
 8006768:	68ec      	ldreq	r4, [r5, #12]
 800676a:	e7e6      	b.n	800673a <__swsetup_r+0x1e>
 800676c:	0758      	lsls	r0, r3, #29
 800676e:	d512      	bpl.n	8006796 <__swsetup_r+0x7a>
 8006770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006772:	b141      	cbz	r1, 8006786 <__swsetup_r+0x6a>
 8006774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006778:	4299      	cmp	r1, r3
 800677a:	d002      	beq.n	8006782 <__swsetup_r+0x66>
 800677c:	4630      	mov	r0, r6
 800677e:	f7ff fb25 	bl	8005dcc <_free_r>
 8006782:	2300      	movs	r3, #0
 8006784:	6363      	str	r3, [r4, #52]	; 0x34
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800678c:	81a3      	strh	r3, [r4, #12]
 800678e:	2300      	movs	r3, #0
 8006790:	6063      	str	r3, [r4, #4]
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f043 0308 	orr.w	r3, r3, #8
 800679c:	81a3      	strh	r3, [r4, #12]
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	b94b      	cbnz	r3, 80067b6 <__swsetup_r+0x9a>
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ac:	d003      	beq.n	80067b6 <__swsetup_r+0x9a>
 80067ae:	4621      	mov	r1, r4
 80067b0:	4630      	mov	r0, r6
 80067b2:	f000 fa09 	bl	8006bc8 <__smakebuf_r>
 80067b6:	89a0      	ldrh	r0, [r4, #12]
 80067b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067bc:	f010 0301 	ands.w	r3, r0, #1
 80067c0:	d00a      	beq.n	80067d8 <__swsetup_r+0xbc>
 80067c2:	2300      	movs	r3, #0
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	6963      	ldr	r3, [r4, #20]
 80067c8:	425b      	negs	r3, r3
 80067ca:	61a3      	str	r3, [r4, #24]
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	b943      	cbnz	r3, 80067e2 <__swsetup_r+0xc6>
 80067d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067d4:	d1ba      	bne.n	800674c <__swsetup_r+0x30>
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	0781      	lsls	r1, r0, #30
 80067da:	bf58      	it	pl
 80067dc:	6963      	ldrpl	r3, [r4, #20]
 80067de:	60a3      	str	r3, [r4, #8]
 80067e0:	e7f4      	b.n	80067cc <__swsetup_r+0xb0>
 80067e2:	2000      	movs	r0, #0
 80067e4:	e7f7      	b.n	80067d6 <__swsetup_r+0xba>
 80067e6:	bf00      	nop
 80067e8:	20000004 	.word	0x20000004
 80067ec:	080072b4 	.word	0x080072b4
 80067f0:	080072d4 	.word	0x080072d4
 80067f4:	08007294 	.word	0x08007294

080067f8 <abort>:
 80067f8:	b508      	push	{r3, lr}
 80067fa:	2006      	movs	r0, #6
 80067fc:	f000 fa54 	bl	8006ca8 <raise>
 8006800:	2001      	movs	r0, #1
 8006802:	f7fa fd66 	bl	80012d2 <_exit>
	...

08006808 <__sflush_r>:
 8006808:	898a      	ldrh	r2, [r1, #12]
 800680a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800680e:	4605      	mov	r5, r0
 8006810:	0710      	lsls	r0, r2, #28
 8006812:	460c      	mov	r4, r1
 8006814:	d458      	bmi.n	80068c8 <__sflush_r+0xc0>
 8006816:	684b      	ldr	r3, [r1, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc05      	bgt.n	8006828 <__sflush_r+0x20>
 800681c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	dc02      	bgt.n	8006828 <__sflush_r+0x20>
 8006822:	2000      	movs	r0, #0
 8006824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800682a:	2e00      	cmp	r6, #0
 800682c:	d0f9      	beq.n	8006822 <__sflush_r+0x1a>
 800682e:	2300      	movs	r3, #0
 8006830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006834:	682f      	ldr	r7, [r5, #0]
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	d032      	beq.n	80068a0 <__sflush_r+0x98>
 800683a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	075a      	lsls	r2, r3, #29
 8006840:	d505      	bpl.n	800684e <__sflush_r+0x46>
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	1ac0      	subs	r0, r0, r3
 8006846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006848:	b10b      	cbz	r3, 800684e <__sflush_r+0x46>
 800684a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800684c:	1ac0      	subs	r0, r0, r3
 800684e:	2300      	movs	r3, #0
 8006850:	4602      	mov	r2, r0
 8006852:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006854:	6a21      	ldr	r1, [r4, #32]
 8006856:	4628      	mov	r0, r5
 8006858:	47b0      	blx	r6
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	d106      	bne.n	800686e <__sflush_r+0x66>
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	291d      	cmp	r1, #29
 8006864:	d82c      	bhi.n	80068c0 <__sflush_r+0xb8>
 8006866:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <__sflush_r+0x108>)
 8006868:	40ca      	lsrs	r2, r1
 800686a:	07d6      	lsls	r6, r2, #31
 800686c:	d528      	bpl.n	80068c0 <__sflush_r+0xb8>
 800686e:	2200      	movs	r2, #0
 8006870:	6062      	str	r2, [r4, #4]
 8006872:	04d9      	lsls	r1, r3, #19
 8006874:	6922      	ldr	r2, [r4, #16]
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	d504      	bpl.n	8006884 <__sflush_r+0x7c>
 800687a:	1c42      	adds	r2, r0, #1
 800687c:	d101      	bne.n	8006882 <__sflush_r+0x7a>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	b903      	cbnz	r3, 8006884 <__sflush_r+0x7c>
 8006882:	6560      	str	r0, [r4, #84]	; 0x54
 8006884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006886:	602f      	str	r7, [r5, #0]
 8006888:	2900      	cmp	r1, #0
 800688a:	d0ca      	beq.n	8006822 <__sflush_r+0x1a>
 800688c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006890:	4299      	cmp	r1, r3
 8006892:	d002      	beq.n	800689a <__sflush_r+0x92>
 8006894:	4628      	mov	r0, r5
 8006896:	f7ff fa99 	bl	8005dcc <_free_r>
 800689a:	2000      	movs	r0, #0
 800689c:	6360      	str	r0, [r4, #52]	; 0x34
 800689e:	e7c1      	b.n	8006824 <__sflush_r+0x1c>
 80068a0:	6a21      	ldr	r1, [r4, #32]
 80068a2:	2301      	movs	r3, #1
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b0      	blx	r6
 80068a8:	1c41      	adds	r1, r0, #1
 80068aa:	d1c7      	bne.n	800683c <__sflush_r+0x34>
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0c4      	beq.n	800683c <__sflush_r+0x34>
 80068b2:	2b1d      	cmp	r3, #29
 80068b4:	d001      	beq.n	80068ba <__sflush_r+0xb2>
 80068b6:	2b16      	cmp	r3, #22
 80068b8:	d101      	bne.n	80068be <__sflush_r+0xb6>
 80068ba:	602f      	str	r7, [r5, #0]
 80068bc:	e7b1      	b.n	8006822 <__sflush_r+0x1a>
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	e7ad      	b.n	8006824 <__sflush_r+0x1c>
 80068c8:	690f      	ldr	r7, [r1, #16]
 80068ca:	2f00      	cmp	r7, #0
 80068cc:	d0a9      	beq.n	8006822 <__sflush_r+0x1a>
 80068ce:	0793      	lsls	r3, r2, #30
 80068d0:	680e      	ldr	r6, [r1, #0]
 80068d2:	bf08      	it	eq
 80068d4:	694b      	ldreq	r3, [r1, #20]
 80068d6:	600f      	str	r7, [r1, #0]
 80068d8:	bf18      	it	ne
 80068da:	2300      	movne	r3, #0
 80068dc:	eba6 0807 	sub.w	r8, r6, r7
 80068e0:	608b      	str	r3, [r1, #8]
 80068e2:	f1b8 0f00 	cmp.w	r8, #0
 80068e6:	dd9c      	ble.n	8006822 <__sflush_r+0x1a>
 80068e8:	6a21      	ldr	r1, [r4, #32]
 80068ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068ec:	4643      	mov	r3, r8
 80068ee:	463a      	mov	r2, r7
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b0      	blx	r6
 80068f4:	2800      	cmp	r0, #0
 80068f6:	dc06      	bgt.n	8006906 <__sflush_r+0xfe>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fe:	81a3      	strh	r3, [r4, #12]
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	e78e      	b.n	8006824 <__sflush_r+0x1c>
 8006906:	4407      	add	r7, r0
 8006908:	eba8 0800 	sub.w	r8, r8, r0
 800690c:	e7e9      	b.n	80068e2 <__sflush_r+0xda>
 800690e:	bf00      	nop
 8006910:	20400001 	.word	0x20400001

08006914 <_fflush_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	690b      	ldr	r3, [r1, #16]
 8006918:	4605      	mov	r5, r0
 800691a:	460c      	mov	r4, r1
 800691c:	b913      	cbnz	r3, 8006924 <_fflush_r+0x10>
 800691e:	2500      	movs	r5, #0
 8006920:	4628      	mov	r0, r5
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	b118      	cbz	r0, 800692e <_fflush_r+0x1a>
 8006926:	6983      	ldr	r3, [r0, #24]
 8006928:	b90b      	cbnz	r3, 800692e <_fflush_r+0x1a>
 800692a:	f000 f887 	bl	8006a3c <__sinit>
 800692e:	4b14      	ldr	r3, [pc, #80]	; (8006980 <_fflush_r+0x6c>)
 8006930:	429c      	cmp	r4, r3
 8006932:	d11b      	bne.n	800696c <_fflush_r+0x58>
 8006934:	686c      	ldr	r4, [r5, #4]
 8006936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0ef      	beq.n	800691e <_fflush_r+0xa>
 800693e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006940:	07d0      	lsls	r0, r2, #31
 8006942:	d404      	bmi.n	800694e <_fflush_r+0x3a>
 8006944:	0599      	lsls	r1, r3, #22
 8006946:	d402      	bmi.n	800694e <_fflush_r+0x3a>
 8006948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800694a:	f000 f915 	bl	8006b78 <__retarget_lock_acquire_recursive>
 800694e:	4628      	mov	r0, r5
 8006950:	4621      	mov	r1, r4
 8006952:	f7ff ff59 	bl	8006808 <__sflush_r>
 8006956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006958:	07da      	lsls	r2, r3, #31
 800695a:	4605      	mov	r5, r0
 800695c:	d4e0      	bmi.n	8006920 <_fflush_r+0xc>
 800695e:	89a3      	ldrh	r3, [r4, #12]
 8006960:	059b      	lsls	r3, r3, #22
 8006962:	d4dd      	bmi.n	8006920 <_fflush_r+0xc>
 8006964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006966:	f000 f908 	bl	8006b7a <__retarget_lock_release_recursive>
 800696a:	e7d9      	b.n	8006920 <_fflush_r+0xc>
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <_fflush_r+0x70>)
 800696e:	429c      	cmp	r4, r3
 8006970:	d101      	bne.n	8006976 <_fflush_r+0x62>
 8006972:	68ac      	ldr	r4, [r5, #8]
 8006974:	e7df      	b.n	8006936 <_fflush_r+0x22>
 8006976:	4b04      	ldr	r3, [pc, #16]	; (8006988 <_fflush_r+0x74>)
 8006978:	429c      	cmp	r4, r3
 800697a:	bf08      	it	eq
 800697c:	68ec      	ldreq	r4, [r5, #12]
 800697e:	e7da      	b.n	8006936 <_fflush_r+0x22>
 8006980:	080072b4 	.word	0x080072b4
 8006984:	080072d4 	.word	0x080072d4
 8006988:	08007294 	.word	0x08007294

0800698c <std>:
 800698c:	2300      	movs	r3, #0
 800698e:	b510      	push	{r4, lr}
 8006990:	4604      	mov	r4, r0
 8006992:	e9c0 3300 	strd	r3, r3, [r0]
 8006996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800699a:	6083      	str	r3, [r0, #8]
 800699c:	8181      	strh	r1, [r0, #12]
 800699e:	6643      	str	r3, [r0, #100]	; 0x64
 80069a0:	81c2      	strh	r2, [r0, #14]
 80069a2:	6183      	str	r3, [r0, #24]
 80069a4:	4619      	mov	r1, r3
 80069a6:	2208      	movs	r2, #8
 80069a8:	305c      	adds	r0, #92	; 0x5c
 80069aa:	f7fb fdcb 	bl	8002544 <memset>
 80069ae:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <std+0x38>)
 80069b0:	6263      	str	r3, [r4, #36]	; 0x24
 80069b2:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <std+0x3c>)
 80069b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <std+0x40>)
 80069b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069ba:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <std+0x44>)
 80069bc:	6224      	str	r4, [r4, #32]
 80069be:	6323      	str	r3, [r4, #48]	; 0x30
 80069c0:	bd10      	pop	{r4, pc}
 80069c2:	bf00      	nop
 80069c4:	08006ce1 	.word	0x08006ce1
 80069c8:	08006d03 	.word	0x08006d03
 80069cc:	08006d3b 	.word	0x08006d3b
 80069d0:	08006d5f 	.word	0x08006d5f

080069d4 <_cleanup_r>:
 80069d4:	4901      	ldr	r1, [pc, #4]	; (80069dc <_cleanup_r+0x8>)
 80069d6:	f000 b8af 	b.w	8006b38 <_fwalk_reent>
 80069da:	bf00      	nop
 80069dc:	08006915 	.word	0x08006915

080069e0 <__sfmoreglue>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	2268      	movs	r2, #104	; 0x68
 80069e4:	1e4d      	subs	r5, r1, #1
 80069e6:	4355      	muls	r5, r2
 80069e8:	460e      	mov	r6, r1
 80069ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069ee:	f7ff fa59 	bl	8005ea4 <_malloc_r>
 80069f2:	4604      	mov	r4, r0
 80069f4:	b140      	cbz	r0, 8006a08 <__sfmoreglue+0x28>
 80069f6:	2100      	movs	r1, #0
 80069f8:	e9c0 1600 	strd	r1, r6, [r0]
 80069fc:	300c      	adds	r0, #12
 80069fe:	60a0      	str	r0, [r4, #8]
 8006a00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a04:	f7fb fd9e 	bl	8002544 <memset>
 8006a08:	4620      	mov	r0, r4
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}

08006a0c <__sfp_lock_acquire>:
 8006a0c:	4801      	ldr	r0, [pc, #4]	; (8006a14 <__sfp_lock_acquire+0x8>)
 8006a0e:	f000 b8b3 	b.w	8006b78 <__retarget_lock_acquire_recursive>
 8006a12:	bf00      	nop
 8006a14:	20000ac1 	.word	0x20000ac1

08006a18 <__sfp_lock_release>:
 8006a18:	4801      	ldr	r0, [pc, #4]	; (8006a20 <__sfp_lock_release+0x8>)
 8006a1a:	f000 b8ae 	b.w	8006b7a <__retarget_lock_release_recursive>
 8006a1e:	bf00      	nop
 8006a20:	20000ac1 	.word	0x20000ac1

08006a24 <__sinit_lock_acquire>:
 8006a24:	4801      	ldr	r0, [pc, #4]	; (8006a2c <__sinit_lock_acquire+0x8>)
 8006a26:	f000 b8a7 	b.w	8006b78 <__retarget_lock_acquire_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	20000ac2 	.word	0x20000ac2

08006a30 <__sinit_lock_release>:
 8006a30:	4801      	ldr	r0, [pc, #4]	; (8006a38 <__sinit_lock_release+0x8>)
 8006a32:	f000 b8a2 	b.w	8006b7a <__retarget_lock_release_recursive>
 8006a36:	bf00      	nop
 8006a38:	20000ac2 	.word	0x20000ac2

08006a3c <__sinit>:
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	4604      	mov	r4, r0
 8006a40:	f7ff fff0 	bl	8006a24 <__sinit_lock_acquire>
 8006a44:	69a3      	ldr	r3, [r4, #24]
 8006a46:	b11b      	cbz	r3, 8006a50 <__sinit+0x14>
 8006a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a4c:	f7ff bff0 	b.w	8006a30 <__sinit_lock_release>
 8006a50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a54:	6523      	str	r3, [r4, #80]	; 0x50
 8006a56:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <__sinit+0x68>)
 8006a58:	4a13      	ldr	r2, [pc, #76]	; (8006aa8 <__sinit+0x6c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a5e:	42a3      	cmp	r3, r4
 8006a60:	bf04      	itt	eq
 8006a62:	2301      	moveq	r3, #1
 8006a64:	61a3      	streq	r3, [r4, #24]
 8006a66:	4620      	mov	r0, r4
 8006a68:	f000 f820 	bl	8006aac <__sfp>
 8006a6c:	6060      	str	r0, [r4, #4]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 f81c 	bl	8006aac <__sfp>
 8006a74:	60a0      	str	r0, [r4, #8]
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 f818 	bl	8006aac <__sfp>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60e0      	str	r0, [r4, #12]
 8006a80:	2104      	movs	r1, #4
 8006a82:	6860      	ldr	r0, [r4, #4]
 8006a84:	f7ff ff82 	bl	800698c <std>
 8006a88:	68a0      	ldr	r0, [r4, #8]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	2109      	movs	r1, #9
 8006a8e:	f7ff ff7d 	bl	800698c <std>
 8006a92:	68e0      	ldr	r0, [r4, #12]
 8006a94:	2202      	movs	r2, #2
 8006a96:	2112      	movs	r1, #18
 8006a98:	f7ff ff78 	bl	800698c <std>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	61a3      	str	r3, [r4, #24]
 8006aa0:	e7d2      	b.n	8006a48 <__sinit+0xc>
 8006aa2:	bf00      	nop
 8006aa4:	08006e50 	.word	0x08006e50
 8006aa8:	080069d5 	.word	0x080069d5

08006aac <__sfp>:
 8006aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aae:	4607      	mov	r7, r0
 8006ab0:	f7ff ffac 	bl	8006a0c <__sfp_lock_acquire>
 8006ab4:	4b1e      	ldr	r3, [pc, #120]	; (8006b30 <__sfp+0x84>)
 8006ab6:	681e      	ldr	r6, [r3, #0]
 8006ab8:	69b3      	ldr	r3, [r6, #24]
 8006aba:	b913      	cbnz	r3, 8006ac2 <__sfp+0x16>
 8006abc:	4630      	mov	r0, r6
 8006abe:	f7ff ffbd 	bl	8006a3c <__sinit>
 8006ac2:	3648      	adds	r6, #72	; 0x48
 8006ac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	d503      	bpl.n	8006ad4 <__sfp+0x28>
 8006acc:	6833      	ldr	r3, [r6, #0]
 8006ace:	b30b      	cbz	r3, 8006b14 <__sfp+0x68>
 8006ad0:	6836      	ldr	r6, [r6, #0]
 8006ad2:	e7f7      	b.n	8006ac4 <__sfp+0x18>
 8006ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ad8:	b9d5      	cbnz	r5, 8006b10 <__sfp+0x64>
 8006ada:	4b16      	ldr	r3, [pc, #88]	; (8006b34 <__sfp+0x88>)
 8006adc:	60e3      	str	r3, [r4, #12]
 8006ade:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ae2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ae4:	f000 f847 	bl	8006b76 <__retarget_lock_init_recursive>
 8006ae8:	f7ff ff96 	bl	8006a18 <__sfp_lock_release>
 8006aec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006af0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006af4:	6025      	str	r5, [r4, #0]
 8006af6:	61a5      	str	r5, [r4, #24]
 8006af8:	2208      	movs	r2, #8
 8006afa:	4629      	mov	r1, r5
 8006afc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b00:	f7fb fd20 	bl	8002544 <memset>
 8006b04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b10:	3468      	adds	r4, #104	; 0x68
 8006b12:	e7d9      	b.n	8006ac8 <__sfp+0x1c>
 8006b14:	2104      	movs	r1, #4
 8006b16:	4638      	mov	r0, r7
 8006b18:	f7ff ff62 	bl	80069e0 <__sfmoreglue>
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	6030      	str	r0, [r6, #0]
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d1d5      	bne.n	8006ad0 <__sfp+0x24>
 8006b24:	f7ff ff78 	bl	8006a18 <__sfp_lock_release>
 8006b28:	230c      	movs	r3, #12
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	e7ee      	b.n	8006b0c <__sfp+0x60>
 8006b2e:	bf00      	nop
 8006b30:	08006e50 	.word	0x08006e50
 8006b34:	ffff0001 	.word	0xffff0001

08006b38 <_fwalk_reent>:
 8006b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	4688      	mov	r8, r1
 8006b40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b44:	2700      	movs	r7, #0
 8006b46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b4a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b4e:	d505      	bpl.n	8006b5c <_fwalk_reent+0x24>
 8006b50:	6824      	ldr	r4, [r4, #0]
 8006b52:	2c00      	cmp	r4, #0
 8006b54:	d1f7      	bne.n	8006b46 <_fwalk_reent+0xe>
 8006b56:	4638      	mov	r0, r7
 8006b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b5c:	89ab      	ldrh	r3, [r5, #12]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d907      	bls.n	8006b72 <_fwalk_reent+0x3a>
 8006b62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b66:	3301      	adds	r3, #1
 8006b68:	d003      	beq.n	8006b72 <_fwalk_reent+0x3a>
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	47c0      	blx	r8
 8006b70:	4307      	orrs	r7, r0
 8006b72:	3568      	adds	r5, #104	; 0x68
 8006b74:	e7e9      	b.n	8006b4a <_fwalk_reent+0x12>

08006b76 <__retarget_lock_init_recursive>:
 8006b76:	4770      	bx	lr

08006b78 <__retarget_lock_acquire_recursive>:
 8006b78:	4770      	bx	lr

08006b7a <__retarget_lock_release_recursive>:
 8006b7a:	4770      	bx	lr

08006b7c <__swhatbuf_r>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	460e      	mov	r6, r1
 8006b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b84:	2900      	cmp	r1, #0
 8006b86:	b096      	sub	sp, #88	; 0x58
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	da08      	bge.n	8006ba0 <__swhatbuf_r+0x24>
 8006b8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	602a      	str	r2, [r5, #0]
 8006b96:	061a      	lsls	r2, r3, #24
 8006b98:	d410      	bmi.n	8006bbc <__swhatbuf_r+0x40>
 8006b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b9e:	e00e      	b.n	8006bbe <__swhatbuf_r+0x42>
 8006ba0:	466a      	mov	r2, sp
 8006ba2:	f000 f903 	bl	8006dac <_fstat_r>
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	dbf1      	blt.n	8006b8e <__swhatbuf_r+0x12>
 8006baa:	9a01      	ldr	r2, [sp, #4]
 8006bac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006bb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006bb4:	425a      	negs	r2, r3
 8006bb6:	415a      	adcs	r2, r3
 8006bb8:	602a      	str	r2, [r5, #0]
 8006bba:	e7ee      	b.n	8006b9a <__swhatbuf_r+0x1e>
 8006bbc:	2340      	movs	r3, #64	; 0x40
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	b016      	add	sp, #88	; 0x58
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006bc8 <__smakebuf_r>:
 8006bc8:	898b      	ldrh	r3, [r1, #12]
 8006bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bcc:	079d      	lsls	r5, r3, #30
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460c      	mov	r4, r1
 8006bd2:	d507      	bpl.n	8006be4 <__smakebuf_r+0x1c>
 8006bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	2301      	movs	r3, #1
 8006bde:	6163      	str	r3, [r4, #20]
 8006be0:	b002      	add	sp, #8
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	ab01      	add	r3, sp, #4
 8006be6:	466a      	mov	r2, sp
 8006be8:	f7ff ffc8 	bl	8006b7c <__swhatbuf_r>
 8006bec:	9900      	ldr	r1, [sp, #0]
 8006bee:	4605      	mov	r5, r0
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7ff f957 	bl	8005ea4 <_malloc_r>
 8006bf6:	b948      	cbnz	r0, 8006c0c <__smakebuf_r+0x44>
 8006bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfc:	059a      	lsls	r2, r3, #22
 8006bfe:	d4ef      	bmi.n	8006be0 <__smakebuf_r+0x18>
 8006c00:	f023 0303 	bic.w	r3, r3, #3
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	e7e3      	b.n	8006bd4 <__smakebuf_r+0xc>
 8006c0c:	4b0d      	ldr	r3, [pc, #52]	; (8006c44 <__smakebuf_r+0x7c>)
 8006c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	6020      	str	r0, [r4, #0]
 8006c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	9b00      	ldr	r3, [sp, #0]
 8006c1c:	6163      	str	r3, [r4, #20]
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	6120      	str	r0, [r4, #16]
 8006c22:	b15b      	cbz	r3, 8006c3c <__smakebuf_r+0x74>
 8006c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 f8d1 	bl	8006dd0 <_isatty_r>
 8006c2e:	b128      	cbz	r0, 8006c3c <__smakebuf_r+0x74>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	f043 0301 	orr.w	r3, r3, #1
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	89a0      	ldrh	r0, [r4, #12]
 8006c3e:	4305      	orrs	r5, r0
 8006c40:	81a5      	strh	r5, [r4, #12]
 8006c42:	e7cd      	b.n	8006be0 <__smakebuf_r+0x18>
 8006c44:	080069d5 	.word	0x080069d5

08006c48 <_malloc_usable_size_r>:
 8006c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c4c:	1f18      	subs	r0, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	bfbc      	itt	lt
 8006c52:	580b      	ldrlt	r3, [r1, r0]
 8006c54:	18c0      	addlt	r0, r0, r3
 8006c56:	4770      	bx	lr

08006c58 <_raise_r>:
 8006c58:	291f      	cmp	r1, #31
 8006c5a:	b538      	push	{r3, r4, r5, lr}
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	460d      	mov	r5, r1
 8006c60:	d904      	bls.n	8006c6c <_raise_r+0x14>
 8006c62:	2316      	movs	r3, #22
 8006c64:	6003      	str	r3, [r0, #0]
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c6e:	b112      	cbz	r2, 8006c76 <_raise_r+0x1e>
 8006c70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c74:	b94b      	cbnz	r3, 8006c8a <_raise_r+0x32>
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 f830 	bl	8006cdc <_getpid_r>
 8006c7c:	462a      	mov	r2, r5
 8006c7e:	4601      	mov	r1, r0
 8006c80:	4620      	mov	r0, r4
 8006c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c86:	f000 b817 	b.w	8006cb8 <_kill_r>
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d00a      	beq.n	8006ca4 <_raise_r+0x4c>
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	d103      	bne.n	8006c9a <_raise_r+0x42>
 8006c92:	2316      	movs	r3, #22
 8006c94:	6003      	str	r3, [r0, #0]
 8006c96:	2001      	movs	r0, #1
 8006c98:	e7e7      	b.n	8006c6a <_raise_r+0x12>
 8006c9a:	2400      	movs	r4, #0
 8006c9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	4798      	blx	r3
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7e0      	b.n	8006c6a <_raise_r+0x12>

08006ca8 <raise>:
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <raise+0xc>)
 8006caa:	4601      	mov	r1, r0
 8006cac:	6818      	ldr	r0, [r3, #0]
 8006cae:	f7ff bfd3 	b.w	8006c58 <_raise_r>
 8006cb2:	bf00      	nop
 8006cb4:	20000004 	.word	0x20000004

08006cb8 <_kill_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d07      	ldr	r5, [pc, #28]	; (8006cd8 <_kill_r+0x20>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	602b      	str	r3, [r5, #0]
 8006cc6:	f7fa faf4 	bl	80012b2 <_kill>
 8006cca:	1c43      	adds	r3, r0, #1
 8006ccc:	d102      	bne.n	8006cd4 <_kill_r+0x1c>
 8006cce:	682b      	ldr	r3, [r5, #0]
 8006cd0:	b103      	cbz	r3, 8006cd4 <_kill_r+0x1c>
 8006cd2:	6023      	str	r3, [r4, #0]
 8006cd4:	bd38      	pop	{r3, r4, r5, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000abc 	.word	0x20000abc

08006cdc <_getpid_r>:
 8006cdc:	f7fa bae1 	b.w	80012a2 <_getpid>

08006ce0 <__sread>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	f000 f894 	bl	8006e14 <_read_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	bfab      	itete	ge
 8006cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf4:	181b      	addge	r3, r3, r0
 8006cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cfa:	bfac      	ite	ge
 8006cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cfe:	81a3      	strhlt	r3, [r4, #12]
 8006d00:	bd10      	pop	{r4, pc}

08006d02 <__swrite>:
 8006d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	461f      	mov	r7, r3
 8006d08:	898b      	ldrh	r3, [r1, #12]
 8006d0a:	05db      	lsls	r3, r3, #23
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	4616      	mov	r6, r2
 8006d12:	d505      	bpl.n	8006d20 <__swrite+0x1e>
 8006d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d18:	2302      	movs	r3, #2
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f000 f868 	bl	8006df0 <_lseek_r>
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	463b      	mov	r3, r7
 8006d30:	4628      	mov	r0, r5
 8006d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d36:	f000 b817 	b.w	8006d68 <_write_r>

08006d3a <__sseek>:
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d42:	f000 f855 	bl	8006df0 <_lseek_r>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	bf15      	itete	ne
 8006d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d56:	81a3      	strheq	r3, [r4, #12]
 8006d58:	bf18      	it	ne
 8006d5a:	81a3      	strhne	r3, [r4, #12]
 8006d5c:	bd10      	pop	{r4, pc}

08006d5e <__sclose>:
 8006d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d62:	f000 b813 	b.w	8006d8c <_close_r>
	...

08006d68 <_write_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d07      	ldr	r5, [pc, #28]	; (8006d88 <_write_r+0x20>)
 8006d6c:	4604      	mov	r4, r0
 8006d6e:	4608      	mov	r0, r1
 8006d70:	4611      	mov	r1, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	602a      	str	r2, [r5, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f7fa fad2 	bl	8001320 <_write>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_write_r+0x1e>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_write_r+0x1e>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20000abc 	.word	0x20000abc

08006d8c <_close_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d06      	ldr	r5, [pc, #24]	; (8006da8 <_close_r+0x1c>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fa fade 	bl	8001358 <_close>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_close_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_close_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20000abc 	.word	0x20000abc

08006dac <_fstat_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d07      	ldr	r5, [pc, #28]	; (8006dcc <_fstat_r+0x20>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	4611      	mov	r1, r2
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	f7fa fad9 	bl	8001370 <_fstat>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d102      	bne.n	8006dc8 <_fstat_r+0x1c>
 8006dc2:	682b      	ldr	r3, [r5, #0]
 8006dc4:	b103      	cbz	r3, 8006dc8 <_fstat_r+0x1c>
 8006dc6:	6023      	str	r3, [r4, #0]
 8006dc8:	bd38      	pop	{r3, r4, r5, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000abc 	.word	0x20000abc

08006dd0 <_isatty_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4d06      	ldr	r5, [pc, #24]	; (8006dec <_isatty_r+0x1c>)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	f7fa fad8 	bl	8001390 <_isatty>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_isatty_r+0x1a>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_isatty_r+0x1a>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20000abc 	.word	0x20000abc

08006df0 <_lseek_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4d07      	ldr	r5, [pc, #28]	; (8006e10 <_lseek_r+0x20>)
 8006df4:	4604      	mov	r4, r0
 8006df6:	4608      	mov	r0, r1
 8006df8:	4611      	mov	r1, r2
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f7fa fad1 	bl	80013a6 <_lseek>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_lseek_r+0x1e>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_lseek_r+0x1e>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000abc 	.word	0x20000abc

08006e14 <_read_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4d07      	ldr	r5, [pc, #28]	; (8006e34 <_read_r+0x20>)
 8006e18:	4604      	mov	r4, r0
 8006e1a:	4608      	mov	r0, r1
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	602a      	str	r2, [r5, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f7fa fa5f 	bl	80012e6 <_read>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d102      	bne.n	8006e32 <_read_r+0x1e>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	b103      	cbz	r3, 8006e32 <_read_r+0x1e>
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	20000abc 	.word	0x20000abc

08006e38 <_init>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	bf00      	nop
 8006e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3e:	bc08      	pop	{r3}
 8006e40:	469e      	mov	lr, r3
 8006e42:	4770      	bx	lr

08006e44 <_fini>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	bf00      	nop
 8006e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4a:	bc08      	pop	{r3}
 8006e4c:	469e      	mov	lr, r3
 8006e4e:	4770      	bx	lr
