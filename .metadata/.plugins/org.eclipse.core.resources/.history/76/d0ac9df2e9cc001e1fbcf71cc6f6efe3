/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 */

#include <stdint.h>
#include "FreeRTOS.h"
#include "task.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//Definicion de variables del sistema
uint32_t SystemCoreClock = 1600000;
//Variables del programa
#define  STACK_SIZE 200
//Cabeceras de las funciones del programa
void vTaskOne( void * pvParameters );
void vTaskTwo( void * pvParameters );

int main(void)
{
	BaseType_t xReturned;
	TaskHandle_t xHandleTask1 = NULL;
	TaskHandle_t xHandleTask2 = NULL;

	//Configuracion tarea 1
	xReturned = xTaskCreate(
						vTaskOne,       /* Function that implements the task. */
	                    "Task1",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-1",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask1);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);

	//configuracion tarea 2
	xReturned = xTaskCreate(
						vTaskTwo,       /* Function that implements the task. */
	                    "Task2",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-2",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask2);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);

	/* Start the created tasks running. */
	//vTaskStartScheduler();

	while(1)
	{
	}
}

/* Funcion que gobierna a la tarea 1*/
void vTaskOne( void * pvParameters )
{
	while(1)
	{
		printf("%s\n",(char *) pvParameters);
	}
}

/* Funcion que gobierna a la tarea 2*/
void vTaskTwo( void * pvParameters )
{
	while(1)
	{
		while(1)
		{
			printf("%s\n",(char *) pvParameters);
		}
	}
}

