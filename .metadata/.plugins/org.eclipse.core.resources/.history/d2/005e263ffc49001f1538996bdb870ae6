//Importacio de librerias
#include "MPUAccel.h"
#include <SysTickDriver.h>

void configMPUAccel (MPUAccel_Handler_t *ptrMPUAccel){

	uint8_t rdy  = 0;
	uint8_t byte = 0;


	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){

		rdy = WHOIAM(ptrMPUAccel);
	}

	//------------------Reiniciamos el MPU--------------------------
	//byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l);
	//byte &= ~(0b10000000);
	//i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, RESET);
	//Pausa
	//delay_ms(1);
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
	//Pausa
	delay_ms(1);

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
	byte &= ~(0b00011000);
	//Pausa
	delay_ms(1);
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
	byte &= ~(0b00011000);
	//Pausa
	delay_ms(1);
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
}



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
	//Variables auxiliares
	uint8_t whoami = 0;
	uint8_t rdy    = 0;
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
	//verificamos la transacciÃ³n
	whoami &= ~(0b10000001);
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);

	return rdy;
}


float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead)
{
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
	uint8_t address_L = 0;
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
	uint16_t aux_L = 0;
	float    aux   = 0;
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
		default:{ break; }
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (aux_H << 8) | (aux_L);
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
	{
		//Verificamos el eje del sensor a medir
		case READ_ACCEL_X:
		case READ_ACCEL_Y:
		case READ_ACCEL_Z:
		{	//Deacuerdo a la escala se realiza la conversion
			switch (ptrMPUAccel->fullScaleACCEL)
			{
				case ACCEL_2G :{aux = (aux*9.77)/ACCEL_2G_SENS; break;}
				case ACCEL_4G :{aux = (aux*9.77)/ACCEL_4G_SENS; break;}
				case ACCEL_8G :{aux = (aux*9.77)/ACCEL_8G_SENS; break;}
				case ACCEL_16G :{aux = (aux*9.77)/ACCEL_16G_SENS; break;}
				default:{ break; }
			}
			break;
		}
		case READ_GYRO_X:
		case READ_GYRO_Y:
		case READ_GYRO_Z:
		{	//Deacuerdo a la escala se realiza la conversion
			switch (ptrMPUAccel->fullScaleGYRO)
			{
				case GYRO_250 :{ aux /= GYRO_250_SENS; break;}
				case GYRO_500 :{ aux /= GYRO_500_SENS; break;}
				case GYRO_1000 :{ aux /= GYRO_1000_SENS; break;}
				case GYRO_2000 :{ aux /= GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
	}
	//Retornamos valor
	return aux;
}

//--------------Funciones para la medicion de la aceleracion en lso diferentes Ejes------------------------
float readAccel_X (MPUAccel_Handler_t *ptrMPUAccel){
	//Creamos las variables donde almacenamos todos los datos
	uint16_t AccelX_H = 0;
	uint16_t AccelX_L = 0;
	float    AccelX   = 0;
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	AccelX_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_XOUT_H);
	AccelX_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_XOUT_L);
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	AccelX = (AccelX_H << 8) | (AccelX_L);
	//Realizamos la conversion de los bytes al valor de aceleracion en el respectivo eje
	switch (ptrMPUAccel->fullScaleACCEL)
	{
		case ACCEL_2G :{ AccelX = (AccelX*9.8)/ACCEL_2G_SENS; break;}
		case ACCEL_4G :{ AccelX = (AccelX*9.8)/ACCEL_4G_SENS; break;}
		case ACCEL_8G :{ AccelX = (AccelX*9.8)/ACCEL_8G_SENS; break;}
		case ACCEL_16G :{ AccelX = (AccelX*9.8)/ACCEL_16G_SENS; break;}
		default:{ break; }
	}
	//Retornamos valor
	return AccelX;
}


float readAccel_Y (MPUAccel_Handler_t *ptrMPUAccel){
	//Creamos las variables donde almacenamos todos los datos
	uint16_t AccelY_H = 0;
	uint16_t AccelY_L = 0;
	float    AccelY   = 0;
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	AccelY_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_YOUT_H);
	AccelY_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_YOUT_L);
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	AccelY = (AccelY_H << 8) | (AccelY_L);
	//Realizamos la conversion de los bytes al valor de aceleracion en el respectivo eje
	switch (ptrMPUAccel->fullScaleACCEL)
	{
		case ACCEL_2G :{ AccelY = (AccelY*9.8)/ACCEL_2G_SENS; break;}
		case ACCEL_4G :{ AccelY = (AccelY*9.8)/ACCEL_4G_SENS; break;}
		case ACCEL_8G :{ AccelY = (AccelY*9.8)/ACCEL_8G_SENS; break;}
		case ACCEL_16G :{ AccelY = (AccelY*9.8)/ACCEL_16G_SENS; break;}
		default:{ break; }
	}
	//Retornamos valor
	return AccelY;
}


float readAccel_Z (MPUAccel_Handler_t *ptrMPUAccel){
	//Creamos las variables donde almacenamos todos los datos
	uint16_t AccelZ_H = 0;
	uint16_t AccelZ_L = 0;
	float    AccelZ   = 0;
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	AccelZ_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_ZOUT_H);
	AccelZ_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_ZOUT_L);
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	AccelZ = (AccelZ_H << 8) | (AccelZ_L);
	//Realizamos la conversion de los bytes al valor de aceleracion en el respectivo eje
	switch (ptrMPUAccel->fullScaleACCEL)
	{
		case ACCEL_2G :{ AccelZ = (AccelZ*9.8)/ACCEL_2G_SENS; break;}
		case ACCEL_4G :{ AccelZ = (AccelZ*9.8)/ACCEL_4G_SENS; break;}
		case ACCEL_8G :{ AccelZ = (AccelZ*9.8)/ACCEL_8G_SENS; break;}
		case ACCEL_16G :{ AccelZ = (AccelZ*9.8)/ACCEL_16G_SENS; break;}
		default:{ break; }
	}
	//Retornamos valor
	return AccelZ;
}


float readGyro_X (MPUAccel_Handler_t *ptrMPUAccel){
	//Creamos las variables donde almacenamos todos los datos
	uint16_t GYROX_H = 0;
	uint16_t GYROX_L = 0;
	float    GYROX   = 0;
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	GYROX_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_XOUT_H);
	GYROX_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_XOUT_L);
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	GYROX = (GYROX_H << 8) | (GYROX_L);
	//Realizamos la conversion de los bytes al valor de aceleracion en el respectivo eje
	switch (ptrMPUAccel->fullScaleGYRO)
	{
		case GYRO_250 :{ GYROX /= GYRO_250_SENS; break;}
		case GYRO_500 :{ GYROX /= GYRO_500_SENS; break;}
		case GYRO_1000 :{ GYROX /= GYRO_1000_SENS; break;}
		case GYRO_2000 :{ GYROX /= GYRO_2000_SENS; break;}
		default:{ break; }
	}
	//Retornamos valor
	return GYROX;
}


float readGyro_Y (MPUAccel_Handler_t *ptrMPUAccel){
	//Creamos las variables donde almacenamos todos los datos
	uint16_t GYROY_H = 0;
	uint16_t GYROY_L = 0;
	float    GYROY   = 0;
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	GYROY_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_YOUT_H);
	GYROY_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_YOUT_L);
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	GYROY = (GYROY_H << 8) | (GYROY_L);
	//Realizamos la conversion de los bytes al valor de aceleracion en el respectivo eje
	switch (ptrMPUAccel->fullScaleGYRO)
	{
		case GYRO_250 :{ GYROY /= GYRO_250_SENS; break;}
		case GYRO_500 :{ GYROY /= GYRO_500_SENS; break;}
		case GYRO_1000 :{ GYROY /= GYRO_1000_SENS; break;}
		case GYRO_2000 :{ GYROY /= GYRO_2000_SENS; break;}
		default:{ break; }
	}
	//Retornamos valor
	return GYROY;
}

float readGyro_Z (MPUAccel_Handler_t *ptrMPUAccel){
	//Creamos las variables donde almacenamos todos los datos
	uint16_t GYROZ_H = 0;
	uint16_t GYROZ_L = 0;
	float    GYROZ   = 0;
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	GYROZ_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_ZOUT_H);
	GYROZ_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_ZOUT_L);
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	GYROZ = (GYROZ_H << 8) | (GYROZ_L);
	//Realizamos la conversion de los bytes al valor de aceleracion en el respectivo eje
	switch (ptrMPUAccel->fullScaleGYRO)
	{
		case GYRO_250 :{ GYROZ /= GYRO_250_SENS; break;}
		case GYRO_500 :{ GYROZ /= GYRO_500_SENS; break;}
		case GYRO_1000 :{ GYROZ /= GYRO_1000_SENS; break;}
		case GYRO_2000 :{ GYROZ /= GYRO_2000_SENS; break;}
		default:{ break; }
	}
	//Retornamos valor
	return GYROZ;
}




