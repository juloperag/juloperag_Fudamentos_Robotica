
Control_Robot_v3.6_Control_Jaco_Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c794  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  0800c938  0800c938  0001c938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2c8  0800d2c8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2c8  0800d2c8  0001d2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2d0  0800d2d0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d0  0800d2d0  0001d2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2d4  0800d2d4  0001d2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d2d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b78  200001f0  0800d4c4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d68  0800d4c4  00020d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a73  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016af  00000000  00000000  00026c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  00028340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00028908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011595  00000000  00000000  00028df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086c5  00000000  00000000  0003a38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059265  00000000  00000000  00042a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009bcb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003098  00000000  00000000  0009bd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c91c 	.word	0x0800c91c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800c91c 	.word	0x0800c91c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
#include <SysTickDriver.h>

void configMPUAccel (MPUAccel_Handler_t *ptrMPUAccel){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73bb      	strb	r3, [r7, #14]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 80012c4:	e004      	b.n	80012d0 <configMPUAccel+0x1c>

		rdy = WHOIAM(ptrMPUAccel);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f84f 	bl	800136a <WHOIAM>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f7      	beq.n	80012c6 <configMPUAccel+0x12>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	216b      	movs	r1, #107	; 0x6b
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fdb1 	bl	8004e46 <i2c_WriteSingleRegister>
	//Pausa
	delay_ms(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f004 fa43 	bl	8005770 <delay_ms>

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	211c      	movs	r1, #28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fd77 	bl	8004de4 <i2c_ReadSingleRegister>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	f023 0318 	bic.w	r3, r3, #24
 8001300:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f004 fa34 	bl	8005770 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6858      	ldr	r0, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	b25a      	sxtb	r2, r3
 8001314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001318:	4313      	orrs	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	211c      	movs	r1, #28
 8001322:	f003 fd90 	bl	8004e46 <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	211b      	movs	r1, #27
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fd59 	bl	8004de4 <i2c_ReadSingleRegister>
 8001332:	4603      	mov	r3, r0
 8001334:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	f023 0318 	bic.w	r3, r3, #24
 800133c:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f004 fa16 	bl	8005770 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6858      	ldr	r0, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	b25a      	sxtb	r2, r3
 8001350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001354:	4313      	orrs	r3, r2
 8001356:	b25b      	sxtb	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	211b      	movs	r1, #27
 800135e:	f003 fd72 	bl	8004e46 <i2c_WriteSingleRegister>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2175      	movs	r1, #117	; 0x75
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fd2f 	bl	8004de4 <i2c_ReadSingleRegister>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001390:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73bb      	strb	r3, [r7, #14]

	return rdy;
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
 80013bc:	4613      	mov	r3, r2
 80013be:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d82d      	bhi.n	800143c <readMPU+0x8c>
 80013e0:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <readMPU+0x38>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	08001401 	.word	0x08001401
 80013ec:	0800140b 	.word	0x0800140b
 80013f0:	08001415 	.word	0x08001415
 80013f4:	0800141f 	.word	0x0800141f
 80013f8:	08001429 	.word	0x08001429
 80013fc:	08001433 	.word	0x08001433
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8001400:	233b      	movs	r3, #59	; 0x3b
 8001402:	75fb      	strb	r3, [r7, #23]
 8001404:	233c      	movs	r3, #60	; 0x3c
 8001406:	75bb      	strb	r3, [r7, #22]
 8001408:	e019      	b.n	800143e <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 800140a:	233d      	movs	r3, #61	; 0x3d
 800140c:	75fb      	strb	r3, [r7, #23]
 800140e:	233e      	movs	r3, #62	; 0x3e
 8001410:	75bb      	strb	r3, [r7, #22]
 8001412:	e014      	b.n	800143e <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8001414:	233f      	movs	r3, #63	; 0x3f
 8001416:	75fb      	strb	r3, [r7, #23]
 8001418:	2340      	movs	r3, #64	; 0x40
 800141a:	75bb      	strb	r3, [r7, #22]
 800141c:	e00f      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 800141e:	2343      	movs	r3, #67	; 0x43
 8001420:	75fb      	strb	r3, [r7, #23]
 8001422:	2344      	movs	r3, #68	; 0x44
 8001424:	75bb      	strb	r3, [r7, #22]
 8001426:	e00a      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8001428:	2345      	movs	r3, #69	; 0x45
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	2346      	movs	r3, #70	; 0x46
 800142e:	75bb      	strb	r3, [r7, #22]
 8001430:	e005      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 8001432:	2347      	movs	r3, #71	; 0x47
 8001434:	75fb      	strb	r3, [r7, #23]
 8001436:	2348      	movs	r3, #72	; 0x48
 8001438:	75bb      	strb	r3, [r7, #22]
 800143a:	e000      	b.n	800143e <readMPU+0x8e>
		default:{ break; }
 800143c:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	7dfa      	ldrb	r2, [r7, #23]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fccc 	bl	8004de4 <i2c_ReadSingleRegister>
 800144c:	4603      	mov	r3, r0
 800144e:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	7dba      	ldrb	r2, [r7, #22]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fcc3 	bl	8004de4 <i2c_ReadSingleRegister>
 800145e:	4603      	mov	r3, r0
 8001460:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	b29a      	uxth	r2, r3
 8001472:	883b      	ldrh	r3, [r7, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b29b      	uxth	r3, r3
 8001478:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2b02      	cmp	r3, #2
 800147e:	dc02      	bgt.n	8001486 <readMPU+0xd6>
 8001480:	2b00      	cmp	r3, #0
 8001482:	da05      	bge.n	8001490 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8001484:	e0d6      	b.n	8001634 <readMPU+0x284>
 8001486:	3b03      	subs	r3, #3
	switch(elementRead)
 8001488:	2b02      	cmp	r3, #2
 800148a:	f200 80d3 	bhi.w	8001634 <readMPU+0x284>
 800148e:	e081      	b.n	8001594 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d87b      	bhi.n	8001590 <readMPU+0x1e0>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <readMPU+0xf0>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014e9 	.word	0x080014e9
 80014a8:	08001521 	.word	0x08001521
 80014ac:	08001559 	.word	0x08001559
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 80014b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f84d 	bl	8000554 <__aeabi_i2d>
 80014ba:	a363      	add	r3, pc, #396	; (adr r3, 8001648 <readMPU+0x298>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8b2 	bl	8000628 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <readMPU+0x2a0>)
 80014d2:	f7ff f9d3 	bl	800087c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb9b 	bl	8000c18 <__aeabi_d2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e054      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 80014e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	a355      	add	r3, pc, #340	; (adr r3, 8001648 <readMPU+0x298>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f896 	bl	8000628 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b52      	ldr	r3, [pc, #328]	; (8001654 <readMPU+0x2a4>)
 800150a:	f7ff f9b7 	bl	800087c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb7f 	bl	8000c18 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	e038      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 8001520:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f815 	bl	8000554 <__aeabi_i2d>
 800152a:	a347      	add	r3, pc, #284	; (adr r3, 8001648 <readMPU+0x298>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f87a 	bl	8000628 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <readMPU+0x2a8>)
 8001542:	f7ff f99b 	bl	800087c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb63 	bl	8000c18 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	e01c      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 8001558:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fff9 	bl	8000554 <__aeabi_i2d>
 8001562:	a339      	add	r3, pc, #228	; (adr r3, 8001648 <readMPU+0x298>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f85e 	bl	8000628 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <readMPU+0x2ac>)
 800157a:	f7ff f97f 	bl	800087c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fb47 	bl	8000c18 <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e000      	b.n	8001592 <readMPU+0x1e2>
				default:{ break; }
 8001590:	bf00      	nop
			break;
 8001592:	e050      	b.n	8001636 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d849      	bhi.n	8001630 <readMPU+0x280>
 800159c:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <readMPU+0x1f4>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015b5 	.word	0x080015b5
 80015a8:	080015d5 	.word	0x080015d5
 80015ac:	080015f5 	.word	0x080015f5
 80015b0:	08001615 	.word	0x08001615
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 80015b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <readMPU+0x2b0>)
 80015ba:	fb82 1203 	smull	r1, r2, r2, r3
 80015be:	1152      	asrs	r2, r2, #5
 80015c0:	17db      	asrs	r3, r3, #31
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ce:	edc7 7a04 	vstr	s15, [r7, #16]
 80015d2:	e02e      	b.n	8001632 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 80015d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <readMPU+0x2b4>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1112      	asrs	r2, r2, #4
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	edc7 7a04 	vstr	s15, [r7, #16]
 80015f2:	e01e      	b.n	8001632 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 80015f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <readMPU+0x2b4>)
 80015fa:	fb82 1203 	smull	r1, r2, r2, r3
 80015fe:	10d2      	asrs	r2, r2, #3
 8001600:	17db      	asrs	r3, r3, #31
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b21b      	sxth	r3, r3
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160e:	edc7 7a04 	vstr	s15, [r7, #16]
 8001612:	e00e      	b.n	8001632 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 8001614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da00      	bge.n	800161e <readMPU+0x26e>
 800161c:	330f      	adds	r3, #15
 800161e:	111b      	asrs	r3, r3, #4
 8001620:	b21b      	sxth	r3, r3
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162a:	edc7 7a04 	vstr	s15, [r7, #16]
 800162e:	e000      	b.n	8001632 <readMPU+0x282>
				default:{ break; }
 8001630:	bf00      	nop
			break;
 8001632:	e000      	b.n	8001636 <readMPU+0x286>
		default:{ break; }
 8001634:	bf00      	nop
	}
	//Retornamos valor
	return res;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	ee07 3a90 	vmov	s15, r3
}
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	70a3d70a 	.word	0x70a3d70a
 800164c:	40238a3d 	.word	0x40238a3d
 8001650:	40d00000 	.word	0x40d00000
 8001654:	40c00000 	.word	0x40c00000
 8001658:	40b00000 	.word	0x40b00000
 800165c:	40a00000 	.word	0x40a00000
 8001660:	3e88cb3d 	.word	0x3e88cb3d
 8001664:	3e0f83e1 	.word	0x3e0f83e1

08001668 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d82c      	bhi.n	80016e8 <readCalibrationMPU+0x80>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <readCalibrationMPU+0x2c>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016b7 	.word	0x080016b7
 800169c:	080016c1 	.word	0x080016c1
 80016a0:	080016cb 	.word	0x080016cb
 80016a4:	080016d5 	.word	0x080016d5
 80016a8:	080016df 	.word	0x080016df
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 80016ac:	233b      	movs	r3, #59	; 0x3b
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	233c      	movs	r3, #60	; 0x3c
 80016b2:	73bb      	strb	r3, [r7, #14]
 80016b4:	e019      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 80016b6:	233d      	movs	r3, #61	; 0x3d
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	233e      	movs	r3, #62	; 0x3e
 80016bc:	73bb      	strb	r3, [r7, #14]
 80016be:	e014      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80016c0:	233f      	movs	r3, #63	; 0x3f
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	e00f      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80016ca:	2343      	movs	r3, #67	; 0x43
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	2344      	movs	r3, #68	; 0x44
 80016d0:	73bb      	strb	r3, [r7, #14]
 80016d2:	e00a      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80016d4:	2345      	movs	r3, #69	; 0x45
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	2346      	movs	r3, #70	; 0x46
 80016da:	73bb      	strb	r3, [r7, #14]
 80016dc:	e005      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80016de:	2347      	movs	r3, #71	; 0x47
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	2348      	movs	r3, #72	; 0x48
 80016e4:	73bb      	strb	r3, [r7, #14]
 80016e6:	e000      	b.n	80016ea <readCalibrationMPU+0x82>
		default:{ break; }
 80016e8:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fb76 	bl	8004de4 <i2c_ReadSingleRegister>
 80016f8:	4603      	mov	r3, r0
 80016fa:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	7bba      	ldrb	r2, [r7, #14]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fb6d 	bl	8004de4 <i2c_ReadSingleRegister>
 800170a:	4603      	mov	r3, r0
 800170c:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001718:	4313      	orrs	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 800171c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementCalibration)
{
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b088      	sub	sp, #32
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t num_samples = 200;
 8001742:	23c8      	movs	r3, #200	; 0xc8
 8001744:	827b      	strh	r3, [r7, #18]
	float offset = 0;
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e017      	b.n	8001782 <calibrationMPU+0x5a>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	4619      	mov	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff86 	bl	8001668 <readCalibrationMPU>
 800175c:	4603      	mov	r3, r0
 800175e:	b21b      	sxth	r3, r3
 8001760:	17da      	asrs	r2, r3, #31
 8001762:	461c      	mov	r4, r3
 8001764:	4615      	mov	r5, r2
 8001766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800176a:	eb12 0804 	adds.w	r8, r2, r4
 800176e:	eb43 0905 	adc.w	r9, r3, r5
 8001772:	e9c7 8906 	strd	r8, r9, [r7, #24]
		//Pausa
		delay_ms(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f003 fffa 	bl	8005770 <delay_ms>
	for (int i = 0; i < num_samples; i++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	8a7b      	ldrh	r3, [r7, #18]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbe3      	blt.n	8001752 <calibrationMPU+0x2a>
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 800178a:	8a7b      	ldrh	r3, [r7, #18]
 800178c:	2200      	movs	r2, #0
 800178e:	469a      	mov	sl, r3
 8001790:	4693      	mov	fp, r2
 8001792:	4652      	mov	r2, sl
 8001794:	465b      	mov	r3, fp
 8001796:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800179a:	f7ff fb9b 	bl	8000ed4 <__aeabi_ldivmod>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff fb57 	bl	8000e58 <__aeabi_l2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	60fb      	str	r3, [r7, #12]
	//Retornar valor
	return offset;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	ee07 3a90 	vmov	s15, r3
}
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017c0 <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, MPUTimerSample_t *timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	460b      	mov	r3, r1
 80017d4:	70fb      	strb	r3, [r7, #3]
 80017d6:	4613      	mov	r3, r2
 80017d8:	803b      	strh	r3, [r7, #0]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 80017da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	4619      	mov	r1, r3
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7ff fde4 	bl	80013b0 <readMPU>
 80017e8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	//Calculo del tiempo trascurrido tras el ultima leida
	uint64_t time_now = getTicksMs();
 80017ec:	f003 ffb2 	bl	8005754 <getTicksMs>
 80017f0:	e9c7 0106 	strd	r0, r1, [r7, #24]
	timer->delta_timer =  time_now - timer->timer_prev;
 80017f4:	8b39      	ldrh	r1, [r7, #24]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	b293      	uxth	r3, r2
 80017fe:	1acb      	subs	r3, r1, r3
 8001800:	b29a      	uxth	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	811a      	strh	r2, [r3, #8]
	timer->timer_prev = time_now;
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800180c:	e9c1 2300 	strd	r2, r3, [r1]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer->delta_timer)/1000;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	891b      	ldrh	r3, [r3, #8]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001824:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001848 <getAngle+0x88>
 8001828:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	edc7 7a05 	vstr	s15, [r7, #20]

	return ang;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	ee07 3a90 	vmov	s15, r3
}
 800183e:	eeb0 0a67 	vmov.f32	s0, s15
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	447a0000 	.word	0x447a0000

0800184c <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	4610      	mov	r0, r2
 800186e:	f003 fef3 	bl	8005658 <updateDuttyCyclePercentageFloat>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f003 f8a1 	bl	80049f8 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f003 fdff 	bl	80054cc <statusPolarityPWM>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <main>:

float hxd = 0;
float hyd = 0;

int main(void)
{
 80018d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018dc:	b09a      	sub	sp, #104	; 0x68
 80018de:	af02      	add	r7, sp, #8
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema

	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80018e0:	2364      	movs	r3, #100	; 0x64
 80018e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	configPLL(clock);
 80018e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 face 	bl	8004e8c <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 80018f0:	f000 fad0 	bl	8001e94 <int_Hardware>
	//Activamos el Systick
	config_SysTick_ms();
 80018f4:	f003 fef4 	bl	80056e0 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <main+0x84>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <main+0x84>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 8001908:	f000 fc92 	bl	8002230 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800190c:	2101      	movs	r1, #1
 800190e:	4814      	ldr	r0, [pc, #80]	; (8001960 <main+0x88>)
 8001910:	f003 f872 	bl	80049f8 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001914:	2101      	movs	r1, #1
 8001916:	4813      	ldr	r0, [pc, #76]	; (8001964 <main+0x8c>)
 8001918:	f003 f86e 	bl	80049f8 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800191c:	2101      	movs	r1, #1
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <main+0x90>)
 8001920:	f003 f86a 	bl	80049f8 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001924:	2101      	movs	r1, #1
 8001926:	4811      	ldr	r0, [pc, #68]	; (800196c <main+0x94>)
 8001928:	f003 f866 	bl	80049f8 <GPIO_writePin>
	int_Config_Motor();
 800192c:	f000 fc9e 	bl	800226c <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <main+0x98>)
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <main+0x9c>)
 8001934:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <main+0xa0>)
 8001938:	4a10      	ldr	r2, [pc, #64]	; (800197c <main+0xa4>)
 800193a:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <main+0xa8>)
 800193e:	4a11      	ldr	r2, [pc, #68]	; (8001984 <main+0xac>)
 8001940:	601a      	str	r2, [r3, #0]

	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 8001942:	f000 fc7f 	bl	8002244 <int_MPU>


	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <main+0xb0>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d120      	bne.n	8001990 <main+0xb8>
		{
			runCommand(bufferRecepcion);
 800194e:	480f      	ldr	r0, [pc, #60]	; (800198c <main+0xb4>)
 8001950:	f001 f828 	bl	80029a4 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <main+0xb0>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e01a      	b.n	8001992 <main+0xba>
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	200002f4 	.word	0x200002f4
 8001964:	20000370 	.word	0x20000370
 8001968:	20000300 	.word	0x20000300
 800196c:	2000037c 	.word	0x2000037c
 8001970:	20000480 	.word	0x20000480
 8001974:	20000318 	.word	0x20000318
 8001978:	20000474 	.word	0x20000474
 800197c:	40105fa7 	.word	0x40105fa7
 8001980:	20000478 	.word	0x20000478
 8001984:	400facee 	.word	0x400facee
 8001988:	20000014 	.word	0x20000014
 800198c:	20000498 	.word	0x20000498
		}
		else
		{ __NOP(); }
 8001990:	bf00      	nop
		//Calculo de odometry y aplicacion PID
		if(flag_count_odometry == 1)
 8001992:	4bcb      	ldr	r3, [pc, #812]	; (8001cc0 <main+0x3e8>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	f040 825a 	bne.w	8001e50 <main+0x578>
		{
			//Calculo odometria
			distance_c = (handler_Motor_L.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	   //[mm]
 800199c:	4bc9      	ldr	r3, [pc, #804]	; (8001cc4 <main+0x3ec>)
 800199e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80019a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ae:	4bc6      	ldr	r3, [pc, #792]	; (8001cc8 <main+0x3f0>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]
			//w_angular_c = ((handler_Motor_R.parametersMotor.velocity-handler_Motor_L.parametersMotor.velocity)*100000)/b; //[rad/s]
			parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.xr_position + (distance_c*(cos(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 80019b4:	4bc5      	ldr	r3, [pc, #788]	; (8001ccc <main+0x3f4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fddd 	bl	8000578 <__aeabi_f2d>
 80019be:	4604      	mov	r4, r0
 80019c0:	460d      	mov	r5, r1
 80019c2:	4bc1      	ldr	r3, [pc, #772]	; (8001cc8 <main+0x3f0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdd6 	bl	8000578 <__aeabi_f2d>
 80019cc:	4680      	mov	r8, r0
 80019ce:	4689      	mov	r9, r1
 80019d0:	4bbe      	ldr	r3, [pc, #760]	; (8001ccc <main+0x3f4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdcf 	bl	8000578 <__aeabi_f2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ec43 2b10 	vmov	d0, r2, r3
 80019e2:	f009 fc89 	bl	800b2f8 <cos>
 80019e6:	ec53 2b10 	vmov	r2, r3, d0
 80019ea:	4640      	mov	r0, r8
 80019ec:	4649      	mov	r1, r9
 80019ee:	f7fe fe1b 	bl	8000628 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7fe fc5f 	bl	80002bc <__adddf3>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f907 	bl	8000c18 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4aaf      	ldr	r2, [pc, #700]	; (8001ccc <main+0x3f4>)
 8001a0e:	6053      	str	r3, [r2, #4]
			parameter_Posicion_Robot.yr_position  = parameter_Posicion_Robot.yr_position  + (distance_c*(sin(parameter_Posicion_Robot.phi_relativo)));       //[mm]
 8001a10:	4bae      	ldr	r3, [pc, #696]	; (8001ccc <main+0x3f4>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fdaf 	bl	8000578 <__aeabi_f2d>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	4baa      	ldr	r3, [pc, #680]	; (8001cc8 <main+0x3f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fda8 	bl	8000578 <__aeabi_f2d>
 8001a28:	4680      	mov	r8, r0
 8001a2a:	4689      	mov	r9, r1
 8001a2c:	4ba7      	ldr	r3, [pc, #668]	; (8001ccc <main+0x3f4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fda1 	bl	8000578 <__aeabi_f2d>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	ec43 2b10 	vmov	d0, r2, r3
 8001a3e:	f009 fcaf 	bl	800b3a0 <sin>
 8001a42:	ec53 2b10 	vmov	r2, r3, d0
 8001a46:	4640      	mov	r0, r8
 8001a48:	4649      	mov	r1, r9
 8001a4a:	f7fe fded 	bl	8000628 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4620      	mov	r0, r4
 8001a54:	4629      	mov	r1, r5
 8001a56:	f7fe fc31 	bl	80002bc <__adddf3>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f8d9 	bl	8000c18 <__aeabi_d2f>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a98      	ldr	r2, [pc, #608]	; (8001ccc <main+0x3f4>)
 8001a6a:	6093      	str	r3, [r2, #8]
			//Paso de c.relativa a c.globales
			parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal + parameter_Posicion_Robot.xr_position*sin_cal;
 8001a6c:	4b97      	ldr	r3, [pc, #604]	; (8001ccc <main+0x3f4>)
 8001a6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a72:	4b96      	ldr	r3, [pc, #600]	; (8001ccc <main+0x3f4>)
 8001a74:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a78:	4b95      	ldr	r3, [pc, #596]	; (8001cd0 <main+0x3f8>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a86:	4b91      	ldr	r3, [pc, #580]	; (8001ccc <main+0x3f4>)
 8001a88:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a8c:	4b91      	ldr	r3, [pc, #580]	; (8001cd4 <main+0x3fc>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9a:	4b8c      	ldr	r3, [pc, #560]	; (8001ccc <main+0x3f4>)
 8001a9c:	edc3 7a05 	vstr	s15, [r3, #20]
			parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial - parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 8001aa0:	4b8a      	ldr	r3, [pc, #552]	; (8001ccc <main+0x3f4>)
 8001aa2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001aa6:	4b89      	ldr	r3, [pc, #548]	; (8001ccc <main+0x3f4>)
 8001aa8:	edd3 6a01 	vldr	s13, [r3, #4]
 8001aac:	4b89      	ldr	r3, [pc, #548]	; (8001cd4 <main+0x3fc>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aba:	4b84      	ldr	r3, [pc, #528]	; (8001ccc <main+0x3f4>)
 8001abc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ac0:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <main+0x3f8>)
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	4b7f      	ldr	r3, [pc, #508]	; (8001ccc <main+0x3f4>)
 8001ad0:	edc3 7a06 	vstr	s15, [r3, #24]
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 8001ad4:	4b7d      	ldr	r3, [pc, #500]	; (8001ccc <main+0x3f4>)
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd4d 	bl	8000578 <__aeabi_f2d>
 8001ade:	4604      	mov	r4, r0
 8001ae0:	460d      	mov	r5, r1
 8001ae2:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <main+0x3f4>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd46 	bl	8000578 <__aeabi_f2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	e9cd 2300 	strd	r2, r3, [sp]
 8001af4:	4622      	mov	r2, r4
 8001af6:	462b      	mov	r3, r5
 8001af8:	4977      	ldr	r1, [pc, #476]	; (8001cd8 <main+0x400>)
 8001afa:	4878      	ldr	r0, [pc, #480]	; (8001cdc <main+0x404>)
 8001afc:	f005 f9d2 	bl	8006ea4 <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001b00:	4976      	ldr	r1, [pc, #472]	; (8001cdc <main+0x404>)
 8001b02:	4877      	ldr	r0, [pc, #476]	; (8001ce0 <main+0x408>)
 8001b04:	f004 f914 	bl	8005d30 <writeMsgForTXE>
			//Calculamos los errores de posicion
			double he[2] = {0};
 8001b08:	f107 0320 	add.w	r3, r7, #32
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
			he[0] =  (hxd - parameter_Posicion_Robot.xg_position)/1000;
 8001b16:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <main+0x40c>)
 8001b18:	ed93 7a00 	vldr	s14, [r3]
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <main+0x3f4>)
 8001b1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b26:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001ce8 <main+0x410>
 8001b2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b2e:	ee16 0a90 	vmov	r0, s13
 8001b32:	f7fe fd21 	bl	8000578 <__aeabi_f2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
			if (he[0]<bl)
 8001b3e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b42:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <main+0x414>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fd16 	bl	8000578 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4620      	mov	r0, r4
 8001b52:	4629      	mov	r1, r5
 8001b54:	f7fe ffda 	bl	8000b0c <__aeabi_dcmplt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <main+0x298>
			{
				he[0] = bl;
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <main+0x414>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd08 	bl	8000578 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			}

			he[1] = (hyd - parameter_Posicion_Robot.yg_position)/1000;
 8001b70:	4b5f      	ldr	r3, [pc, #380]	; (8001cf0 <main+0x418>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	4b55      	ldr	r3, [pc, #340]	; (8001ccc <main+0x3f4>)
 8001b78:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b80:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001ce8 <main+0x410>
 8001b84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b88:	ee16 0a90 	vmov	r0, s13
 8001b8c:	f7fe fcf4 	bl	8000578 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			//Establecemos la matriz jacobina
			double phi_Global = parameter_Posicion_Robot.phi_relativo - setpoint_phi;
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <main+0x3f4>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	4b55      	ldr	r3, [pc, #340]	; (8001cf4 <main+0x41c>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	ee17 0a90 	vmov	r0, s15
 8001bac:	f7fe fce4 	bl	8000578 <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			double jaco[2][2] =  {{cos(phi_Global), (distance_c/1000)*sin(phi_Global)},{sin(phi_Global),(distance_c/1000)*cos(phi_Global)}};
 8001bb8:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001bbc:	f009 fb9c 	bl	800b2f8 <cos>
 8001bc0:	eeb0 7a40 	vmov.f32	s14, s0
 8001bc4:	eef0 7a60 	vmov.f32	s15, s1
 8001bc8:	ed87 7b00 	vstr	d7, [r7]
 8001bcc:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <main+0x3f0>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001ce8 <main+0x410>
 8001bd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001bda:	ee16 0a90 	vmov	r0, s13
 8001bde:	f7fe fccb 	bl	8000578 <__aeabi_f2d>
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001bea:	f009 fbd9 	bl	800b3a0 <sin>
 8001bee:	ec53 2b10 	vmov	r2, r3, d0
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f7fe fd17 	bl	8000628 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c02:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001c06:	f009 fbcb 	bl	800b3a0 <sin>
 8001c0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001c0e:	eef0 7a60 	vmov.f32	s15, s1
 8001c12:	ed87 7b04 	vstr	d7, [r7, #16]
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <main+0x3f0>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001ce8 <main+0x410>
 8001c20:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c24:	ee16 0a90 	vmov	r0, s13
 8001c28:	f7fe fca6 	bl	8000578 <__aeabi_f2d>
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	460d      	mov	r5, r1
 8001c30:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8001c34:	f009 fb60 	bl	800b2f8 <cos>
 8001c38:	ec53 2b10 	vmov	r2, r3, d0
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	4629      	mov	r1, r5
 8001c40:	f7fe fcf2 	bl	8000628 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	e9c7 2306 	strd	r2, r3, [r7, #24]
			//Definimos la matriz inversa
			inverseMatrix(jaco);
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f001 f9e8 	bl	8003024 <inverseMatrix>
			//Aplicamos la ley de control
			double uRef = jaco[0][0]*(0.02*he[0])+jaco[0][1]*(m*he[1]);
 8001c54:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c5c:	a316      	add	r3, pc, #88	; (adr r3, 8001cb8 <main+0x3e0>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fce1 	bl	8000628 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	f7fe fcdb 	bl	8000628 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4690      	mov	r8, r2
 8001c78:	4699      	mov	r9, r3
 8001c7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <main+0x420>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc78 	bl	8000578 <__aeabi_f2d>
 8001c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c8c:	f7fe fccc 	bl	8000628 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4620      	mov	r0, r4
 8001c96:	4629      	mov	r1, r5
 8001c98:	f7fe fcc6 	bl	8000628 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4640      	mov	r0, r8
 8001ca2:	4649      	mov	r1, r9
 8001ca4:	f7fe fb0a 	bl	80002bc <__adddf3>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001cb0:	e024      	b.n	8001cfc <main+0x424>
 8001cb2:	bf00      	nop
 8001cb4:	f3af 8000 	nop.w
 8001cb8:	47ae147b 	.word	0x47ae147b
 8001cbc:	3f947ae1 	.word	0x3f947ae1
 8001cc0:	20000470 	.word	0x20000470
 8001cc4:	20000394 	.word	0x20000394
 8001cc8:	2000047c 	.word	0x2000047c
 8001ccc:	20000430 	.word	0x20000430
 8001cd0:	20000464 	.word	0x20000464
 8001cd4:	20000468 	.word	0x20000468
 8001cd8:	0800c938 	.word	0x0800c938
 8001cdc:	200002a8 	.word	0x200002a8
 8001ce0:	2000029c 	.word	0x2000029c
 8001ce4:	200004d8 	.word	0x200004d8
 8001ce8:	447a0000 	.word	0x447a0000
 8001cec:	20000010 	.word	0x20000010
 8001cf0:	200004dc 	.word	0x200004dc
 8001cf4:	20000428 	.word	0x20000428
 8001cf8:	2000000c 	.word	0x2000000c
			double wRef = jaco[1][0]*(0.02*he[0])+jaco[1][1]*(m*he[1]);
 8001cfc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d00:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d04:	a361      	add	r3, pc, #388	; (adr r3, 8001e8c <main+0x5b4>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	f7fe fc8d 	bl	8000628 <__aeabi_dmul>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4620      	mov	r0, r4
 8001d14:	4629      	mov	r1, r5
 8001d16:	f7fe fc87 	bl	8000628 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4690      	mov	r8, r2
 8001d20:	4699      	mov	r9, r3
 8001d22:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d26:	4b52      	ldr	r3, [pc, #328]	; (8001e70 <main+0x598>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc24 	bl	8000578 <__aeabi_f2d>
 8001d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d34:	f7fe fc78 	bl	8000628 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	4629      	mov	r1, r5
 8001d40:	f7fe fc72 	bl	8000628 <__aeabi_dmul>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4640      	mov	r0, r8
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	f7fe fab6 	bl	80002bc <__adddf3>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			//Calculamos velocidades para cada rueda
			double velRef_L = (2*uRef-(wRef*b)/100000)/2;
 8001d58:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	f7fe faac 	bl	80002bc <__adddf3>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4614      	mov	r4, r2
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	a33a      	add	r3, pc, #232	; (adr r3, 8001e58 <main+0x580>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d76:	f7fe fc57 	bl	8000628 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	a337      	add	r3, pc, #220	; (adr r3, 8001e60 <main+0x588>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fd78 	bl	800087c <__aeabi_ddiv>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4620      	mov	r0, r4
 8001d92:	4629      	mov	r1, r5
 8001d94:	f7fe fa90 	bl	80002b8 <__aeabi_dsub>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001da8:	f7fe fd68 	bl	800087c <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			double velRef_R = 2*uRef-velRef_L;
 8001db4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	f7fe fa7e 	bl	80002bc <__adddf3>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001dcc:	f7fe fa74 	bl	80002b8 <__aeabi_dsub>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			//Conversion de velocidad a dutty
			handler_Motor_L.configMotor.dutty = 478*velRef_L  - 18;
 8001dd8:	a323      	add	r3, pc, #140	; (adr r3, 8001e68 <main+0x590>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001de2:	f7fe fc21 	bl	8000628 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <main+0x59c>)
 8001df4:	f7fe fa60 	bl	80002b8 <__aeabi_dsub>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe ff0a 	bl	8000c18 <__aeabi_d2f>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <main+0x5a0>)
 8001e08:	6393      	str	r3, [r2, #56]	; 0x38
			handler_Motor_R.configMotor.dutty = 563*velRef_R  - 26;
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <main+0x5a4>)
 8001e10:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e14:	f7fe fc08 	bl	8000628 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <main+0x5a8>)
 8001e26:	f7fe fa47 	bl	80002b8 <__aeabi_dsub>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe fef1 	bl	8000c18 <__aeabi_d2f>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <main+0x5ac>)
 8001e3a:	6393      	str	r3, [r2, #56]	; 0x38

			//Correccion del dutty
			correction(&handler_Motor_L);
 8001e3c:	480e      	ldr	r0, [pc, #56]	; (8001e78 <main+0x5a0>)
 8001e3e:	f000 ffdb 	bl	8002df8 <correction>
			correction(&handler_Motor_R);
 8001e42:	4810      	ldr	r0, [pc, #64]	; (8001e84 <main+0x5ac>)
 8001e44:	f000 ffd8 	bl	8002df8 <correction>
			//Restablecemos valores
			flag_count_odometry = 0;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <main+0x5b0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e57a      	b.n	8001946 <main+0x6e>
		}
		else
		{ __NOP(); }
 8001e50:	bf00      	nop
		if(commandComplete==1)
 8001e52:	e578      	b.n	8001946 <main+0x6e>
 8001e54:	f3af 8000 	nop.w
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	40c45f00 	.word	0x40c45f00
 8001e60:	00000000 	.word	0x00000000
 8001e64:	40f86a00 	.word	0x40f86a00
 8001e68:	00000000 	.word	0x00000000
 8001e6c:	407de000 	.word	0x407de000
 8001e70:	2000000c 	.word	0x2000000c
 8001e74:	40320000 	.word	0x40320000
 8001e78:	20000394 	.word	0x20000394
 8001e7c:	40819800 	.word	0x40819800
 8001e80:	403a0000 	.word	0x403a0000
 8001e84:	20000318 	.word	0x20000318
 8001e88:	20000470 	.word	0x20000470
 8001e8c:	47ae147b 	.word	0x47ae147b
 8001e90:	3f947ae1 	.word	0x3f947ae1

08001e94 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 8001e9a:	4bae      	ldr	r3, [pc, #696]	; (8002154 <int_Hardware+0x2c0>)
 8001e9c:	4aae      	ldr	r2, [pc, #696]	; (8002158 <int_Hardware+0x2c4>)
 8001e9e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8001ea0:	4bac      	ldr	r3, [pc, #688]	; (8002154 <int_Hardware+0x2c0>)
 8001ea2:	2209      	movs	r2, #9
 8001ea4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	48a7      	ldr	r0, [pc, #668]	; (8002154 <int_Hardware+0x2c0>)
 8001eb6:	f002 fc53 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 8001eba:	48a6      	ldr	r0, [pc, #664]	; (8002154 <int_Hardware+0x2c0>)
 8001ebc:	f002 fc72 	bl	80047a4 <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001ec0:	4ba6      	ldr	r3, [pc, #664]	; (800215c <int_Hardware+0x2c8>)
 8001ec2:	4aa7      	ldr	r2, [pc, #668]	; (8002160 <int_Hardware+0x2cc>)
 8001ec4:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001ec6:	4ba5      	ldr	r3, [pc, #660]	; (800215c <int_Hardware+0x2c8>)
 8001ec8:	2205      	movs	r2, #5
 8001eca:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2101      	movs	r1, #1
 8001eda:	48a0      	ldr	r0, [pc, #640]	; (800215c <int_Hardware+0x2c8>)
 8001edc:	f002 fc40 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001ee0:	489e      	ldr	r0, [pc, #632]	; (800215c <int_Hardware+0x2c8>)
 8001ee2:	f002 fc5f 	bl	80047a4 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001ee6:	4b9f      	ldr	r3, [pc, #636]	; (8002164 <int_Hardware+0x2d0>)
 8001ee8:	4a9d      	ldr	r2, [pc, #628]	; (8002160 <int_Hardware+0x2cc>)
 8001eea:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8001eec:	4b9d      	ldr	r3, [pc, #628]	; (8002164 <int_Hardware+0x2d0>)
 8001eee:	2209      	movs	r2, #9
 8001ef0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2301      	movs	r3, #1
 8001efc:	2200      	movs	r2, #0
 8001efe:	2102      	movs	r1, #2
 8001f00:	4898      	ldr	r0, [pc, #608]	; (8002164 <int_Hardware+0x2d0>)
 8001f02:	f002 fc2d 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001f06:	4897      	ldr	r0, [pc, #604]	; (8002164 <int_Hardware+0x2d0>)
 8001f08:	f002 fc4c 	bl	80047a4 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8001f0c:	4b96      	ldr	r3, [pc, #600]	; (8002168 <int_Hardware+0x2d4>)
 8001f0e:	4a94      	ldr	r2, [pc, #592]	; (8002160 <int_Hardware+0x2cc>)
 8001f10:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001f12:	4b95      	ldr	r3, [pc, #596]	; (8002168 <int_Hardware+0x2d4>)
 8001f14:	220a      	movs	r2, #10
 8001f16:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001f18:	2307      	movs	r3, #7
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	2200      	movs	r2, #0
 8001f24:	2102      	movs	r1, #2
 8001f26:	4890      	ldr	r0, [pc, #576]	; (8002168 <int_Hardware+0x2d4>)
 8001f28:	f002 fc1a 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001f2c:	488e      	ldr	r0, [pc, #568]	; (8002168 <int_Hardware+0x2d4>)
 8001f2e:	f002 fc39 	bl	80047a4 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001f32:	4b8e      	ldr	r3, [pc, #568]	; (800216c <int_Hardware+0x2d8>)
 8001f34:	4a8a      	ldr	r2, [pc, #552]	; (8002160 <int_Hardware+0x2cc>)
 8001f36:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001f38:	4b8c      	ldr	r3, [pc, #560]	; (800216c <int_Hardware+0x2d8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001f3e:	2302      	movs	r3, #2
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2300      	movs	r3, #0
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2301      	movs	r3, #1
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	4887      	ldr	r0, [pc, #540]	; (800216c <int_Hardware+0x2d8>)
 8001f4e:	f002 fc07 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001f52:	4886      	ldr	r0, [pc, #536]	; (800216c <int_Hardware+0x2d8>)
 8001f54:	f002 fc26 	bl	80047a4 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001f58:	4b85      	ldr	r3, [pc, #532]	; (8002170 <int_Hardware+0x2dc>)
 8001f5a:	4a7f      	ldr	r2, [pc, #508]	; (8002158 <int_Hardware+0x2c4>)
 8001f5c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8001f5e:	4b84      	ldr	r3, [pc, #528]	; (8002170 <int_Hardware+0x2dc>)
 8001f60:	220c      	movs	r2, #12
 8001f62:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001f64:	2300      	movs	r3, #0
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2101      	movs	r1, #1
 8001f72:	487f      	ldr	r0, [pc, #508]	; (8002170 <int_Hardware+0x2dc>)
 8001f74:	f002 fbf4 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 8001f78:	487d      	ldr	r0, [pc, #500]	; (8002170 <int_Hardware+0x2dc>)
 8001f7a:	f002 fc13 	bl	80047a4 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 8001f7e:	4b7d      	ldr	r3, [pc, #500]	; (8002174 <int_Hardware+0x2e0>)
 8001f80:	4a75      	ldr	r2, [pc, #468]	; (8002158 <int_Hardware+0x2c4>)
 8001f82:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001f84:	4b7b      	ldr	r3, [pc, #492]	; (8002174 <int_Hardware+0x2e0>)
 8001f86:	220a      	movs	r2, #10
 8001f88:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2301      	movs	r3, #1
 8001f94:	2200      	movs	r2, #0
 8001f96:	2101      	movs	r1, #1
 8001f98:	4876      	ldr	r0, [pc, #472]	; (8002174 <int_Hardware+0x2e0>)
 8001f9a:	f002 fbe1 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 8001f9e:	4875      	ldr	r0, [pc, #468]	; (8002174 <int_Hardware+0x2e0>)
 8001fa0:	f002 fc00 	bl	80047a4 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8001fa4:	4b74      	ldr	r3, [pc, #464]	; (8002178 <int_Hardware+0x2e4>)
 8001fa6:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <int_Hardware+0x2cc>)
 8001fa8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 8001faa:	4b73      	ldr	r3, [pc, #460]	; (8002178 <int_Hardware+0x2e4>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	486e      	ldr	r0, [pc, #440]	; (8002178 <int_Hardware+0x2e4>)
 8001fc0:	f002 fbce 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001fc4:	486c      	ldr	r0, [pc, #432]	; (8002178 <int_Hardware+0x2e4>)
 8001fc6:	f002 fbed 	bl	80047a4 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8001fca:	4b6c      	ldr	r3, [pc, #432]	; (800217c <int_Hardware+0x2e8>)
 8001fcc:	4a6c      	ldr	r2, [pc, #432]	; (8002180 <int_Hardware+0x2ec>)
 8001fce:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <int_Hardware+0x2e8>)
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	4865      	ldr	r0, [pc, #404]	; (800217c <int_Hardware+0x2e8>)
 8001fe6:	f002 fbbb 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8001fea:	4864      	ldr	r0, [pc, #400]	; (800217c <int_Hardware+0x2e8>)
 8001fec:	f002 fbda 	bl	80047a4 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <int_Hardware+0x2f0>)
 8001ff2:	4a59      	ldr	r2, [pc, #356]	; (8002158 <int_Hardware+0x2c4>)
 8001ff4:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <int_Hardware+0x2f0>)
 8001ff8:	220b      	movs	r2, #11
 8001ffa:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2300      	movs	r3, #0
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2301      	movs	r3, #1
 8002006:	2200      	movs	r2, #0
 8002008:	2101      	movs	r1, #1
 800200a:	485e      	ldr	r0, [pc, #376]	; (8002184 <int_Hardware+0x2f0>)
 800200c:	f002 fba8 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8002010:	485c      	ldr	r0, [pc, #368]	; (8002184 <int_Hardware+0x2f0>)
 8002012:	f002 fbc7 	bl	80047a4 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 8002016:	4b5c      	ldr	r3, [pc, #368]	; (8002188 <int_Hardware+0x2f4>)
 8002018:	4a5c      	ldr	r2, [pc, #368]	; (800218c <int_Hardware+0x2f8>)
 800201a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 800201c:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <int_Hardware+0x2f4>)
 800201e:	2208      	movs	r2, #8
 8002020:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8002022:	2304      	movs	r3, #4
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2302      	movs	r3, #2
 800202c:	2201      	movs	r2, #1
 800202e:	2102      	movs	r1, #2
 8002030:	4855      	ldr	r0, [pc, #340]	; (8002188 <int_Hardware+0x2f4>)
 8002032:	f002 fb95 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 8002036:	4854      	ldr	r0, [pc, #336]	; (8002188 <int_Hardware+0x2f4>)
 8002038:	f002 fbb4 	bl	80047a4 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 800203c:	4b54      	ldr	r3, [pc, #336]	; (8002190 <int_Hardware+0x2fc>)
 800203e:	4a53      	ldr	r2, [pc, #332]	; (800218c <int_Hardware+0x2f8>)
 8002040:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8002042:	4b53      	ldr	r3, [pc, #332]	; (8002190 <int_Hardware+0x2fc>)
 8002044:	2209      	movs	r2, #9
 8002046:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8002048:	2304      	movs	r3, #4
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2302      	movs	r3, #2
 8002052:	2201      	movs	r2, #1
 8002054:	2102      	movs	r1, #2
 8002056:	484e      	ldr	r0, [pc, #312]	; (8002190 <int_Hardware+0x2fc>)
 8002058:	f002 fb82 	bl	8004760 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 800205c:	484c      	ldr	r0, [pc, #304]	; (8002190 <int_Hardware+0x2fc>)
 800205e:	f002 fba1 	bl	80047a4 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 8002062:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <int_Hardware+0x300>)
 8002064:	4a4c      	ldr	r2, [pc, #304]	; (8002198 <int_Hardware+0x304>)
 8002066:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8002068:	4b4a      	ldr	r3, [pc, #296]	; (8002194 <int_Hardware+0x300>)
 800206a:	2202      	movs	r2, #2
 800206c:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <int_Hardware+0x300>)
 8002070:	2201      	movs	r2, #1
 8002072:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8002074:	4b47      	ldr	r3, [pc, #284]	; (8002194 <int_Hardware+0x300>)
 8002076:	2200      	movs	r2, #0
 8002078:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <int_Hardware+0x300>)
 800207c:	2200      	movs	r2, #0
 800207e:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8002080:	4b44      	ldr	r3, [pc, #272]	; (8002194 <int_Hardware+0x300>)
 8002082:	2201      	movs	r2, #1
 8002084:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <int_Hardware+0x300>)
 8002088:	2201      	movs	r2, #1
 800208a:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 800208c:	4841      	ldr	r0, [pc, #260]	; (8002194 <int_Hardware+0x300>)
 800208e:	f003 fbe3 	bl	8005858 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8002092:	4b42      	ldr	r3, [pc, #264]	; (800219c <int_Hardware+0x308>)
 8002094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002098:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800209a:	4b40      	ldr	r3, [pc, #256]	; (800219c <int_Hardware+0x308>)
 800209c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020a0:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <int_Hardware+0x308>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80020a8:	4b3c      	ldr	r3, [pc, #240]	; (800219c <int_Hardware+0x308>)
 80020aa:	22fa      	movs	r2, #250	; 0xfa
 80020ac:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <int_Hardware+0x308>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80020b4:	4839      	ldr	r0, [pc, #228]	; (800219c <int_Hardware+0x308>)
 80020b6:	f001 f92f 	bl	8003318 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 80020ba:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <int_Hardware+0x30c>)
 80020bc:	4a39      	ldr	r2, [pc, #228]	; (80021a4 <int_Hardware+0x310>)
 80020be:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80020c0:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <int_Hardware+0x30c>)
 80020c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020c6:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80020c8:	4b35      	ldr	r3, [pc, #212]	; (80021a0 <int_Hardware+0x30c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = 20;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <int_Hardware+0x30c>)
 80020d0:	2214      	movs	r2, #20
 80020d2:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <int_Hardware+0x30c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Sampling);
 80020da:	4831      	ldr	r0, [pc, #196]	; (80021a0 <int_Hardware+0x30c>)
 80020dc:	f001 f91c 	bl	8003318 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <int_Hardware+0x314>)
 80020e2:	4a32      	ldr	r2, [pc, #200]	; (80021ac <int_Hardware+0x318>)
 80020e4:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80020e6:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <int_Hardware+0x314>)
 80020e8:	220a      	movs	r2, #10
 80020ea:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <int_Hardware+0x314>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <int_Hardware+0x314>)
 80020f4:	2264      	movs	r2, #100	; 0x64
 80020f6:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <int_Hardware+0x314>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80020fe:	482a      	ldr	r0, [pc, #168]	; (80021a8 <int_Hardware+0x314>)
 8002100:	f001 f90a 	bl	8003318 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 8002104:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <int_Hardware+0x31c>)
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <int_Hardware+0x2c4>)
 8002108:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 800210a:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <int_Hardware+0x31c>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <int_Hardware+0x320>)
 8002112:	4a27      	ldr	r2, [pc, #156]	; (80021b0 <int_Hardware+0x31c>)
 8002114:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <int_Hardware+0x320>)
 8002118:	2202      	movs	r2, #2
 800211a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 800211c:	4825      	ldr	r0, [pc, #148]	; (80021b4 <int_Hardware+0x320>)
 800211e:	f001 fa7f 	bl	8003620 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <int_Hardware+0x324>)
 8002124:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <int_Hardware+0x2c4>)
 8002126:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <int_Hardware+0x324>)
 800212a:	2203      	movs	r2, #3
 800212c:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <int_Hardware+0x328>)
 8002130:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <int_Hardware+0x324>)
 8002132:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <int_Hardware+0x328>)
 8002136:	2202      	movs	r2, #2
 8002138:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 800213a:	4820      	ldr	r0, [pc, #128]	; (80021bc <int_Hardware+0x328>)
 800213c:	f001 fa70 	bl	8003620 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <int_Hardware+0x32c>)
 8002142:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <int_Hardware+0x318>)
 8002144:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <int_Hardware+0x32c>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 800214c:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <int_Hardware+0x32c>)
 800214e:	220a      	movs	r2, #10
 8002150:	805a      	strh	r2, [r3, #2]
 8002152:	e037      	b.n	80021c4 <int_Hardware+0x330>
 8002154:	20000228 	.word	0x20000228
 8002158:	40020800 	.word	0x40020800
 800215c:	2000020c 	.word	0x2000020c
 8002160:	40020000 	.word	0x40020000
 8002164:	20000284 	.word	0x20000284
 8002168:	20000290 	.word	0x20000290
 800216c:	200002e8 	.word	0x200002e8
 8002170:	200002f4 	.word	0x200002f4
 8002174:	20000300 	.word	0x20000300
 8002178:	20000364 	.word	0x20000364
 800217c:	20000370 	.word	0x20000370
 8002180:	40020c00 	.word	0x40020c00
 8002184:	2000037c 	.word	0x2000037c
 8002188:	2000025c 	.word	0x2000025c
 800218c:	40020400 	.word	0x40020400
 8002190:	20000268 	.word	0x20000268
 8002194:	2000029c 	.word	0x2000029c
 8002198:	40011000 	.word	0x40011000
 800219c:	20000218 	.word	0x20000218
 80021a0:	200003f0 	.word	0x200003f0
 80021a4:	40000400 	.word	0x40000400
 80021a8:	200003e0 	.word	0x200003e0
 80021ac:	40000c00 	.word	0x40000c00
 80021b0:	20000234 	.word	0x20000234
 80021b4:	20000240 	.word	0x20000240
 80021b8:	20000248 	.word	0x20000248
 80021bc:	20000254 	.word	0x20000254
 80021c0:	2000030c 	.word	0x2000030c
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <int_Hardware+0x388>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 80021ca:	4814      	ldr	r0, [pc, #80]	; (800221c <int_Hardware+0x388>)
 80021cc:	f002 ff8c 	bl	80050e8 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 80021d0:	2101      	movs	r1, #1
 80021d2:	4812      	ldr	r0, [pc, #72]	; (800221c <int_Hardware+0x388>)
 80021d4:	f003 f8e8 	bl	80053a8 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <int_Hardware+0x38c>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <int_Hardware+0x390>)
 80021dc:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <int_Hardware+0x38c>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <int_Hardware+0x38c>)
 80021e6:	220a      	movs	r2, #10
 80021e8:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <int_Hardware+0x38c>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <int_Hardware+0x38c>)
 80021f2:	f002 ff79 	bl	80050e8 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 80021f6:	2101      	movs	r1, #1
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <int_Hardware+0x38c>)
 80021fa:	f003 f8d5 	bl	80053a8 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <int_Hardware+0x394>)
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <int_Hardware+0x398>)
 8002202:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <int_Hardware+0x394>)
 8002206:	2201      	movs	r2, #1
 8002208:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <int_Hardware+0x394>)
 800220c:	2268      	movs	r2, #104	; 0x68
 800220e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <int_Hardware+0x394>)
 8002212:	f002 fc33 	bl	8004a7c <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000030c 	.word	0x2000030c
 8002220:	20000388 	.word	0x20000388
 8002224:	40000c00 	.word	0x40000c00
 8002228:	20000274 	.word	0x20000274
 800222c:	40005400 	.word	0x40005400

08002230 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 8002234:	2000      	movs	r0, #0
 8002236:	f002 fedb 	bl	8004ff0 <configMCO2>
	configMCO2PRE(4);
 800223a:	2004      	movs	r0, #4
 800223c:	f002 fef4 	bl	8005028 <configMCO2PRE>
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <int_MPU>:
//------------------------------Fin configuracion MCO1------------------------------------------

//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <int_MPU+0x20>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <int_MPU+0x20>)
 8002250:	2200      	movs	r2, #0
 8002252:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <int_MPU+0x20>)
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <int_MPU+0x24>)
 8002258:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050);
 800225a:	4802      	ldr	r0, [pc, #8]	; (8002264 <int_MPU+0x20>)
 800225c:	f7ff f82a 	bl	80012b4 <configMPUAccel>

}
 8002260:	bf00      	nop
 8002262:	bd80      	pop	{r7, pc}
 8002264:	2000027c 	.word	0x2000027c
 8002268:	20000274 	.word	0x20000274

0800226c <int_Config_Motor>:



//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <int_Config_Motor+0x90>)
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <int_Config_Motor+0x94>)
 8002274:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.configMotor.frecuency = &value_period;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <int_Config_Motor+0x90>)
 8002278:	4a22      	ldr	r2, [pc, #136]	; (8002304 <int_Config_Motor+0x98>)
 800227a:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_R.configMotor.dir = SET;
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <int_Config_Motor+0x90>)
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <int_Config_Motor+0x90>)
 8002286:	4a20      	ldr	r2, [pc, #128]	; (8002308 <int_Config_Motor+0x9c>)
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <int_Config_Motor+0x90>)
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <int_Config_Motor+0xa0>)
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <int_Config_Motor+0x90>)
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <int_Config_Motor+0xa4>)
 8002294:	649a      	str	r2, [r3, #72]	; 0x48

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <int_Config_Motor+0xa8>)
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <int_Config_Motor+0x94>)
 800229a:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.configMotor.frecuency = &value_period;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <int_Config_Motor+0xa8>)
 800229e:	4a19      	ldr	r2, [pc, #100]	; (8002304 <int_Config_Motor+0x98>)
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_L.configMotor.dir = SET;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <int_Config_Motor+0xa8>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <int_Config_Motor+0xa8>)
 80022ac:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <int_Config_Motor+0xac>)
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <int_Config_Motor+0xa8>)
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <int_Config_Motor+0xb0>)
 80022b4:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <int_Config_Motor+0xa8>)
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <int_Config_Motor+0xb4>)
 80022ba:	649a      	str	r2, [r3, #72]	; 0x48

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_1 = parameter_PID_distace.e_2 = 0;
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <int_Config_Motor+0xb8>)
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <int_Config_Motor+0xb8>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <int_Config_Motor+0xb8>)
 80022ca:	60d3      	str	r3, [r2, #12]
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <int_Config_Motor+0xb8>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <int_Config_Motor+0xb8>)
 80022d2:	6093      	str	r3, [r2, #8]
	parameter_PID_distace.u = parameter_PID_distace.u_1 = 0;
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <int_Config_Motor+0xb8>)
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <int_Config_Motor+0xb8>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a10      	ldr	r2, [pc, #64]	; (8002324 <int_Config_Motor+0xb8>)
 80022e2:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&parameter_PID_distace, 3, 0, 0);   //kp,ti,td
 80022e4:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8002328 <int_Config_Motor+0xbc>
 80022e8:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002328 <int_Config_Motor+0xbc>
 80022ec:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80022f0:	480c      	ldr	r0, [pc, #48]	; (8002324 <int_Config_Motor+0xb8>)
 80022f2:	f000 f81b 	bl	800232c <constains_calculator>

};
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000318 	.word	0x20000318
 8002300:	41a00000 	.word	0x41a00000
 8002304:	20000002 	.word	0x20000002
 8002308:	20000300 	.word	0x20000300
 800230c:	200002f4 	.word	0x200002f4
 8002310:	2000030c 	.word	0x2000030c
 8002314:	20000394 	.word	0x20000394
 8002318:	2000037c 	.word	0x2000037c
 800231c:	20000370 	.word	0x20000370
 8002320:	20000388 	.word	0x20000388
 8002324:	20000408 	.word	0x20000408
 8002328:	00000000 	.word	0x00000000

0800232c <constains_calculator>:


void constains_calculator(Parameters_PID_t *ptrPIDHandler,float kp, float ti, float td)   //kp,ti,td
{
 800232c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	ed87 0a02 	vstr	s0, [r7, #8]
 800233a:	edc7 0a01 	vstr	s1, [r7, #4]
 800233e:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo do controle PID digital
	   ptrPIDHandler->q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 8002342:	68b8      	ldr	r0, [r7, #8]
 8002344:	f7fe f918 	bl	8000578 <__aeabi_f2d>
 8002348:	4604      	mov	r4, r0
 800234a:	460d      	mov	r5, r1
 800234c:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <constains_calculator+0x174>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f911 	bl	8000578 <__aeabi_f2d>
 8002356:	4680      	mov	r8, r0
 8002358:	4689      	mov	r9, r1
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe f90c 	bl	8000578 <__aeabi_f2d>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	f7fd ffaa 	bl	80002bc <__adddf3>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4640      	mov	r0, r8
 800236e:	4649      	mov	r1, r9
 8002370:	f7fe fa84 	bl	800087c <__aeabi_ddiv>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <constains_calculator+0x178>)
 8002382:	f7fd ff9b 	bl	80002bc <__adddf3>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4690      	mov	r8, r2
 800238c:	4699      	mov	r9, r3
 800238e:	4b44      	ldr	r3, [pc, #272]	; (80024a0 <constains_calculator+0x174>)
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ed97 7a00 	vldr	s14, [r7]
 8002398:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800239c:	ee16 0a90 	vmov	r0, s13
 80023a0:	f7fe f8ea 	bl	8000578 <__aeabi_f2d>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4640      	mov	r0, r8
 80023aa:	4649      	mov	r1, r9
 80023ac:	f7fd ff86 	bl	80002bc <__adddf3>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fe f936 	bl	8000628 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fc28 	bl	8000c18 <__aeabi_d2f>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	615a      	str	r2, [r3, #20]
	   ptrPIDHandler->q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 80023ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d2:	eef1 7a67 	vneg.f32	s15, s15
 80023d6:	ee17 3a90 	vmov	r3, s15
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f8cc 	bl	8000578 <__aeabi_f2d>
 80023e0:	4604      	mov	r4, r0
 80023e2:	460d      	mov	r5, r1
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <constains_calculator+0x174>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8c5 	bl	8000578 <__aeabi_f2d>
 80023ee:	4680      	mov	r8, r0
 80023f0:	4689      	mov	r9, r1
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe f8c0 	bl	8000578 <__aeabi_f2d>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	f7fd ff5e 	bl	80002bc <__adddf3>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4640      	mov	r0, r8
 8002406:	4649      	mov	r1, r9
 8002408:	f7fe fa38 	bl	800087c <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	f04f 0000 	mov.w	r0, #0
 8002414:	4923      	ldr	r1, [pc, #140]	; (80024a4 <constains_calculator+0x178>)
 8002416:	f7fd ff4f 	bl	80002b8 <__aeabi_dsub>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4690      	mov	r8, r2
 8002420:	4699      	mov	r9, r3
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f7fe f8a8 	bl	8000578 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	f7fd ff46 	bl	80002bc <__adddf3>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4692      	mov	sl, r2
 8002436:	469b      	mov	fp, r3
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <constains_calculator+0x174>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f89b 	bl	8000578 <__aeabi_f2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4650      	mov	r0, sl
 8002448:	4659      	mov	r1, fp
 800244a:	f7fe fa17 	bl	800087c <__aeabi_ddiv>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4640      	mov	r0, r8
 8002454:	4649      	mov	r1, r9
 8002456:	f7fd ff31 	bl	80002bc <__adddf3>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	f7fe fbd3 	bl	8000c18 <__aeabi_d2f>
 8002472:	4602      	mov	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	619a      	str	r2, [r3, #24]
	   ptrPIDHandler->q2 = (kp*td)/Ts;
 8002478:	ed97 7a02 	vldr	s14, [r7, #8]
 800247c:	edd7 7a00 	vldr	s15, [r7]
 8002480:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <constains_calculator+0x174>)
 8002486:	ed93 7a00 	vldr	s14, [r3]
 800248a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800249e:	bf00      	nop
 80024a0:	20000004 	.word	0x20000004
 80024a4:	3ff00000 	.word	0x3ff00000

080024a8 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <BasicTimer2_Callback+0x10>)
 80024ae:	f002 face 	bl	8004a4e <GPIOxTooglePin>
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000020c 	.word	0x2000020c
 80024bc:	00000000 	.word	0x00000000

080024c0 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 80024c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c2:	ed2d 8b02 	vpush	{d8}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af04      	add	r7, sp, #16
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	if(flag_motor==1)
 80024ca:	4baf      	ldr	r3, [pc, #700]	; (8002788 <BasicTimer3_Callback+0x2c8>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d125      	bne.n	800251e <BasicTimer3_Callback+0x5e>
	{
		//Calculamos el angulo
		ang_Row = getAngle(&handler_MPUAccel_MPU6050, &sample_Gyro, ang_Row, READ_GYRO_Z, gyro_offset);
 80024d2:	4bae      	ldr	r3, [pc, #696]	; (800278c <BasicTimer3_Callback+0x2cc>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	4bad      	ldr	r3, [pc, #692]	; (8002790 <BasicTimer3_Callback+0x2d0>)
 80024da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024de:	2205      	movs	r2, #5
 80024e0:	eeb0 0a67 	vmov.f32	s0, s15
 80024e4:	49ab      	ldr	r1, [pc, #684]	; (8002794 <BasicTimer3_Callback+0x2d4>)
 80024e6:	48ac      	ldr	r0, [pc, #688]	; (8002798 <BasicTimer3_Callback+0x2d8>)
 80024e8:	f7ff f96a 	bl	80017c0 <getAngle>
 80024ec:	eef0 7a40 	vmov.f32	s15, s0
 80024f0:	4ba6      	ldr	r3, [pc, #664]	; (800278c <BasicTimer3_Callback+0x2cc>)
 80024f2:	edc3 7a00 	vstr	s15, [r3]
		//Acumulamos los angulos
		sum_ang += ang_Row;
 80024f6:	4ba9      	ldr	r3, [pc, #676]	; (800279c <BasicTimer3_Callback+0x2dc>)
 80024f8:	ed93 7a00 	vldr	s14, [r3]
 80024fc:	4ba3      	ldr	r3, [pc, #652]	; (800278c <BasicTimer3_Callback+0x2cc>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002506:	4ba5      	ldr	r3, [pc, #660]	; (800279c <BasicTimer3_Callback+0x2dc>)
 8002508:	edc3 7a00 	vstr	s15, [r3]
		//Se acumula el tiempo
		time_accumulated += sample_Gyro.delta_timer;
 800250c:	4ba1      	ldr	r3, [pc, #644]	; (8002794 <BasicTimer3_Callback+0x2d4>)
 800250e:	891a      	ldrh	r2, [r3, #8]
 8002510:	4ba3      	ldr	r3, [pc, #652]	; (80027a0 <BasicTimer3_Callback+0x2e0>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	4413      	add	r3, r2
 8002516:	b29a      	uxth	r2, r3
 8002518:	4ba1      	ldr	r3, [pc, #644]	; (80027a0 <BasicTimer3_Callback+0x2e0>)
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	e000      	b.n	8002520 <BasicTimer3_Callback+0x60>
	}
	else{ __NOP(); }
 800251e:	bf00      	nop

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action>=timeAction_TIMER_Sampling)
 8002520:	4ba0      	ldr	r3, [pc, #640]	; (80027a4 <BasicTimer3_Callback+0x2e4>)
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	4ba0      	ldr	r3, [pc, #640]	; (80027a8 <BasicTimer3_Callback+0x2e8>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	429a      	cmp	r2, r3
 800252a:	f0c0 811b 	bcc.w	8002764 <BasicTimer3_Callback+0x2a4>
	{
		if(flag_motor==1)
 800252e:	4b96      	ldr	r3, [pc, #600]	; (8002788 <BasicTimer3_Callback+0x2c8>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b01      	cmp	r3, #1
 8002534:	f040 80a1 	bne.w	800267a <BasicTimer3_Callback+0x1ba>
		{
			//Calculamos el angulo promedio y la establecemis como el angulo relativo
			float prom_ang = sum_ang/counting_action;
 8002538:	4b98      	ldr	r3, [pc, #608]	; (800279c <BasicTimer3_Callback+0x2dc>)
 800253a:	edd3 6a00 	vldr	s13, [r3]
 800253e:	4b99      	ldr	r3, [pc, #612]	; (80027a4 <BasicTimer3_Callback+0x2e4>)
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254e:	edc7 7a01 	vstr	s15, [r7, #4]
			parameter_Posicion_Robot.phi_relativo = (prom_ang*PI)/180;          //[rad]
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe f810 	bl	8000578 <__aeabi_f2d>
 8002558:	a389      	add	r3, pc, #548	; (adr r3, 8002780 <BasicTimer3_Callback+0x2c0>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe f863 	bl	8000628 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4b8f      	ldr	r3, [pc, #572]	; (80027ac <BasicTimer3_Callback+0x2ec>)
 8002570:	f7fe f984 	bl	800087c <__aeabi_ddiv>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	f7fe fb4c 	bl	8000c18 <__aeabi_d2f>
 8002580:	4603      	mov	r3, r0
 8002582:	4a8b      	ldr	r2, [pc, #556]	; (80027b0 <BasicTimer3_Callback+0x2f0>)
 8002584:	6013      	str	r3, [r2, #0]
			parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8002586:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <BasicTimer3_Callback+0x2f0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd fff4 	bl	8000578 <__aeabi_f2d>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	ec43 2b10 	vmov	d0, r2, r3
 8002598:	f008 ff02 	bl	800b3a0 <sin>
 800259c:	eeb0 8a40 	vmov.f32	s16, s0
 80025a0:	eef0 8a60 	vmov.f32	s17, s1
 80025a4:	4b82      	ldr	r3, [pc, #520]	; (80027b0 <BasicTimer3_Callback+0x2f0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ffe5 	bl	8000578 <__aeabi_f2d>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	ec43 2b10 	vmov	d0, r2, r3
 80025b6:	f008 fe9f 	bl	800b2f8 <cos>
 80025ba:	eeb0 7a40 	vmov.f32	s14, s0
 80025be:	eef0 7a60 	vmov.f32	s15, s1
 80025c2:	eeb0 1a47 	vmov.f32	s2, s14
 80025c6:	eef0 1a67 	vmov.f32	s3, s15
 80025ca:	eeb0 0a48 	vmov.f32	s0, s16
 80025ce:	eef0 0a68 	vmov.f32	s1, s17
 80025d2:	f008 ff3d 	bl	800b450 <atan2>
 80025d6:	ec53 2b10 	vmov	r2, r3, d0
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f7fe fb1b 	bl	8000c18 <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a72      	ldr	r2, [pc, #456]	; (80027b0 <BasicTimer3_Callback+0x2f0>)
 80025e6:	6013      	str	r3, [r2, #0]
			//Calculamos la velocidad
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 80025e8:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 80025ea:	8c1b      	ldrh	r3, [r3, #32]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f4:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <BasicTimer3_Callback+0x2f8>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 8002600:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8002604:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 8002606:	8c1b      	ldrh	r3, [r3, #32]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002610:	4b6b      	ldr	r3, [pc, #428]	; (80027c0 <BasicTimer3_Callback+0x300>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	4b68      	ldr	r3, [pc, #416]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 800261c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accumulated;      //[m/s]
 8002620:	4b64      	ldr	r3, [pc, #400]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 8002622:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002626:	4b5e      	ldr	r3, [pc, #376]	; (80027a0 <BasicTimer3_Callback+0x2e0>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002636:	4b5f      	ldr	r3, [pc, #380]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 8002638:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accumulated;      //[m/s]
 800263c:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 800263e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002642:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <BasicTimer3_Callback+0x2e0>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800264e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002652:	4b5a      	ldr	r3, [pc, #360]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 8002654:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 8002658:	4b58      	ldr	r3, [pc, #352]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 800265a:	2200      	movs	r2, #0
 800265c:	841a      	strh	r2, [r3, #32]
			handler_Motor_L.parametersMotor.count = 0;
 800265e:	4b55      	ldr	r3, [pc, #340]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 8002660:	2200      	movs	r2, #0
 8002662:	841a      	strh	r2, [r3, #32]
			//Subimos Bandera
			flag_count_odometry = 1;
 8002664:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <BasicTimer3_Callback+0x304>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 800266a:	4b4d      	ldr	r3, [pc, #308]	; (80027a0 <BasicTimer3_Callback+0x2e0>)
 800266c:	2200      	movs	r2, #0
 800266e:	801a      	strh	r2, [r3, #0]
			//Reiniciamos variable
			sum_ang = 0;
 8002670:	4b4a      	ldr	r3, [pc, #296]	; (800279c <BasicTimer3_Callback+0x2dc>)
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e070      	b.n	800275c <BasicTimer3_Callback+0x29c>
		}
		else if(flag_motor==3)
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <BasicTimer3_Callback+0x2c8>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d120      	bne.n	80026c4 <BasicTimer3_Callback+0x204>
		{
			//Aumentamos el contador de tiempo
			count_time = count_time + timeAction_TIMER_Sampling;       //Tiempo en ms
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <BasicTimer3_Callback+0x308>)
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <BasicTimer3_Callback+0x2e8>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	4413      	add	r3, r2
 800268c:	b29a      	uxth	r2, r3
 800268e:	4b4e      	ldr	r3, [pc, #312]	; (80027c8 <BasicTimer3_Callback+0x308>)
 8002690:	801a      	strh	r2, [r3, #0]
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 8002692:	4b4d      	ldr	r3, [pc, #308]	; (80027c8 <BasicTimer3_Callback+0x308>)
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b48      	ldr	r3, [pc, #288]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 800269a:	8c1b      	ldrh	r3, [r3, #32]
 800269c:	4619      	mov	r1, r3
 800269e:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 80026a0:	8c1b      	ldrh	r3, [r3, #32]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	460b      	mov	r3, r1
 80026a6:	4949      	ldr	r1, [pc, #292]	; (80027cc <BasicTimer3_Callback+0x30c>)
 80026a8:	4849      	ldr	r0, [pc, #292]	; (80027d0 <BasicTimer3_Callback+0x310>)
 80026aa:	f004 fbfb 	bl	8006ea4 <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80026ae:	4948      	ldr	r1, [pc, #288]	; (80027d0 <BasicTimer3_Callback+0x310>)
 80026b0:	4848      	ldr	r0, [pc, #288]	; (80027d4 <BasicTimer3_Callback+0x314>)
 80026b2:	f003 fb3d 	bl	8005d30 <writeMsgForTXE>
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 80026b6:	4b41      	ldr	r3, [pc, #260]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	841a      	strh	r2, [r3, #32]
			handler_Motor_L.parametersMotor.count = 0;
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	841a      	strh	r2, [r3, #32]
 80026c2:	e04b      	b.n	800275c <BasicTimer3_Callback+0x29c>
		}
		else if(flag_motor==4)
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <BasicTimer3_Callback+0x2c8>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d147      	bne.n	800275c <BasicTimer3_Callback+0x29c>
		{
			//Calculamos la velocidad
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/timeAction_TIMER_Sampling;   //[m/s]
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 80026ce:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <BasicTimer3_Callback+0x2e8>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e2:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 80026e4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/timeAction_TIMER_Sampling;   //[m/s]
 80026e8:	4b34      	ldr	r3, [pc, #208]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 80026ea:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80026ee:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <BasicTimer3_Callback+0x2e8>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 8002700:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			//Aumentamos el contador de tiempo
			count_time = count_time + timeAction_TIMER_Sampling;       //Tiempo en ms
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <BasicTimer3_Callback+0x308>)
 8002706:	881a      	ldrh	r2, [r3, #0]
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <BasicTimer3_Callback+0x2e8>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	4413      	add	r3, r2
 800270e:	b29a      	uxth	r2, r3
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <BasicTimer3_Callback+0x308>)
 8002712:	801a      	strh	r2, [r3, #0]
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, handler_Motor_L.parametersMotor.velocity , handler_Motor_R.parametersMotor.velocity);
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <BasicTimer3_Callback+0x308>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	461e      	mov	r6, r3
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd ff2a 	bl	8000578 <__aeabi_f2d>
 8002724:	4604      	mov	r4, r0
 8002726:	460d      	mov	r5, r1
 8002728:	4b24      	ldr	r3, [pc, #144]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd ff23 	bl	8000578 <__aeabi_f2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800273a:	e9cd 4500 	strd	r4, r5, [sp]
 800273e:	4632      	mov	r2, r6
 8002740:	4925      	ldr	r1, [pc, #148]	; (80027d8 <BasicTimer3_Callback+0x318>)
 8002742:	4823      	ldr	r0, [pc, #140]	; (80027d0 <BasicTimer3_Callback+0x310>)
 8002744:	f004 fbae 	bl	8006ea4 <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8002748:	4921      	ldr	r1, [pc, #132]	; (80027d0 <BasicTimer3_Callback+0x310>)
 800274a:	4822      	ldr	r0, [pc, #136]	; (80027d4 <BasicTimer3_Callback+0x314>)
 800274c:	f003 faf0 	bl	8005d30 <writeMsgForTXE>
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <BasicTimer3_Callback+0x2fc>)
 8002752:	2200      	movs	r2, #0
 8002754:	841a      	strh	r2, [r3, #32]
			handler_Motor_L.parametersMotor.count = 0;
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <BasicTimer3_Callback+0x2f4>)
 8002758:	2200      	movs	r2, #0
 800275a:	841a      	strh	r2, [r3, #32]
		}
		//Reiniciamos el contador de accion
		counting_action = 0;
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <BasicTimer3_Callback+0x2e4>)
 800275e:	2200      	movs	r2, #0
 8002760:	801a      	strh	r2, [r3, #0]

	}
	else{ counting_action++; }

}
 8002762:	e005      	b.n	8002770 <BasicTimer3_Callback+0x2b0>
	else{ counting_action++; }
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <BasicTimer3_Callback+0x2e4>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <BasicTimer3_Callback+0x2e4>)
 800276e:	801a      	strh	r2, [r3, #0]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	ecbd 8b02 	vpop	{d8}
 800277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800277c:	f3af 8000 	nop.w
 8002780:	54442d18 	.word	0x54442d18
 8002784:	400921fb 	.word	0x400921fb
 8002788:	20000484 	.word	0x20000484
 800278c:	20000400 	.word	0x20000400
 8002790:	20000404 	.word	0x20000404
 8002794:	20000450 	.word	0x20000450
 8002798:	2000027c 	.word	0x2000027c
 800279c:	20000460 	.word	0x20000460
 80027a0:	20000490 	.word	0x20000490
 80027a4:	20000492 	.word	0x20000492
 80027a8:	20000008 	.word	0x20000008
 80027ac:	40668000 	.word	0x40668000
 80027b0:	20000430 	.word	0x20000430
 80027b4:	20000394 	.word	0x20000394
 80027b8:	20000474 	.word	0x20000474
 80027bc:	20000318 	.word	0x20000318
 80027c0:	20000478 	.word	0x20000478
 80027c4:	20000470 	.word	0x20000470
 80027c8:	20000486 	.word	0x20000486
 80027cc:	0800c948 	.word	0x0800c948
 80027d0:	200002a8 	.word	0x200002a8
 80027d4:	2000029c 	.word	0x2000029c
 80027d8:	0800c954 	.word	0x0800c954

080027dc <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 80027e0:	f003 fae4 	bl	8005dac <getRxData>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <BasicUSART1_Callback+0x18>)
 80027ea:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 80027ec:	f000 f8ac 	bl	8002948 <recepcionCommand>
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000000 	.word	0x20000000

080027f8 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <callback_extInt1+0x8c>)
 80027fe:	8c1b      	ldrh	r3, [r3, #32]
 8002800:	3301      	adds	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <callback_extInt1+0x8c>)
 8002806:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <callback_extInt1+0x8c>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	3301      	adds	r3, #1
 800280e:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <callback_extInt1+0x8c>)
 8002810:	6253      	str	r3, [r2, #36]	; 0x24
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <callback_extInt1+0x90>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d112      	bne.n	8002840 <callback_extInt1+0x48>
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <callback_extInt1+0x94>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10e      	bne.n	8002840 <callback_extInt1+0x48>
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <callback_extInt1+0x8c>)
 8002824:	8c1a      	ldrh	r2, [r3, #32]
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <callback_extInt1+0x98>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d908      	bls.n	8002840 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 800282e:	2080      	movs	r0, #128	; 0x80
 8002830:	f000 fb2a 	bl	8002e88 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <callback_extInt1+0x9c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff f81e 	bl	800187a <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 800283e:	e01e      	b.n	800287e <callback_extInt1+0x86>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <callback_extInt1+0x90>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d11a      	bne.n	800287e <callback_extInt1+0x86>
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <callback_extInt1+0xa0>)
 800284a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <callback_extInt1+0x8c>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <callback_extInt1+0xa4>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d400      	bmi.n	8002878 <callback_extInt1+0x80>
}
 8002876:	e002      	b.n	800287e <callback_extInt1+0x86>
		status_motor(RESET);
 8002878:	2080      	movs	r0, #128	; 0x80
 800287a:	f000 fb05 	bl	8002e88 <status_motor>
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000318 	.word	0x20000318
 8002888:	20000484 	.word	0x20000484
 800288c:	20000485 	.word	0x20000485
 8002890:	20000488 	.word	0x20000488
 8002894:	20000480 	.word	0x20000480
 8002898:	2000048a 	.word	0x2000048a
 800289c:	20000478 	.word	0x20000478

080028a0 <callback_extInt3>:
void callback_extInt3(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 80028a4:	4b21      	ldr	r3, [pc, #132]	; (800292c <callback_extInt3+0x8c>)
 80028a6:	8c1b      	ldrh	r3, [r3, #32]
 80028a8:	3301      	adds	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <callback_extInt3+0x8c>)
 80028ae:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <callback_extInt3+0x8c>)
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	3301      	adds	r3, #1
 80028b6:	4a1d      	ldr	r2, [pc, #116]	; (800292c <callback_extInt3+0x8c>)
 80028b8:	6253      	str	r3, [r2, #36]	; 0x24
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <callback_extInt3+0x90>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d112      	bne.n	80028e8 <callback_extInt3+0x48>
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <callback_extInt3+0x94>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d10e      	bne.n	80028e8 <callback_extInt3+0x48>
 80028ca:	4b18      	ldr	r3, [pc, #96]	; (800292c <callback_extInt3+0x8c>)
 80028cc:	8c1a      	ldrh	r2, [r3, #32]
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <callback_extInt3+0x98>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d908      	bls.n	80028e8 <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 80028d6:	2080      	movs	r0, #128	; 0x80
 80028d8:	f000 fad6 	bl	8002e88 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <callback_extInt3+0x9c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe ffca 	bl	800187a <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 80028e6:	e01e      	b.n	8002926 <callback_extInt3+0x86>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <callback_extInt3+0x90>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d11a      	bne.n	8002926 <callback_extInt3+0x86>
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <callback_extInt3+0xa0>)
 80028f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <callback_extInt3+0x8c>)
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <callback_extInt3+0xa4>)
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	d400      	bmi.n	8002920 <callback_extInt3+0x80>
}
 800291e:	e002      	b.n	8002926 <callback_extInt3+0x86>
		status_motor(RESET);
 8002920:	2080      	movs	r0, #128	; 0x80
 8002922:	f000 fab1 	bl	8002e88 <status_motor>
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000394 	.word	0x20000394
 8002930:	20000484 	.word	0x20000484
 8002934:	20000485 	.word	0x20000485
 8002938:	20000488 	.word	0x20000488
 800293c:	20000480 	.word	0x20000480
 8002940:	2000048a 	.word	0x2000048a
 8002944:	20000474 	.word	0x20000474

08002948 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
	if(charRead == '@')
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <recepcionCommand+0x4c>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d10c      	bne.n	800296e <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8002954:	4b10      	ldr	r3, [pc, #64]	; (8002998 <recepcionCommand+0x50>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <recepcionCommand+0x54>)
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <recepcionCommand+0x58>)
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <recepcionCommand+0x50>)
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 800296c:	e00c      	b.n	8002988 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <recepcionCommand+0x50>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <recepcionCommand+0x4c>)
 8002976:	7819      	ldrb	r1, [r3, #0]
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <recepcionCommand+0x54>)
 800297a:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <recepcionCommand+0x50>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <recepcionCommand+0x50>)
 8002986:	701a      	strb	r2, [r3, #0]
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000
 8002998:	20000494 	.word	0x20000494
 800299c:	20000498 	.word	0x20000498
 80029a0:	20000014 	.word	0x20000014

080029a4 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b09a      	sub	sp, #104	; 0x68
 80029a8:	af04      	add	r7, sp, #16
 80029aa:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	223c      	movs	r2, #60	; 0x3c
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 fbeb 	bl	8006194 <memset>
	int firtsParameter = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 80029ce:	f107 0114 	add.w	r1, r7, #20
 80029d2:	f107 0218 	add.w	r2, r7, #24
 80029d6:	f107 0308 	add.w	r3, r7, #8
 80029da:	9302      	str	r3, [sp, #8]
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	460b      	mov	r3, r1
 80029ea:	49ac      	ldr	r1, [pc, #688]	; (8002c9c <runCommand+0x2f8>)
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f004 fa79 	bl	8006ee4 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 80029f2:	f107 0318 	add.w	r3, r7, #24
 80029f6:	49aa      	ldr	r1, [pc, #680]	; (8002ca0 <runCommand+0x2fc>)
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fbf1 	bl	80001e0 <strcmp>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d120      	bne.n	8002a46 <runCommand+0xa2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8002a04:	49a7      	ldr	r1, [pc, #668]	; (8002ca4 <runCommand+0x300>)
 8002a06:	48a8      	ldr	r0, [pc, #672]	; (8002ca8 <runCommand+0x304>)
 8002a08:	f003 f992 	bl	8005d30 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8002a0c:	49a7      	ldr	r1, [pc, #668]	; (8002cac <runCommand+0x308>)
 8002a0e:	48a6      	ldr	r0, [pc, #664]	; (8002ca8 <runCommand+0x304>)
 8002a10:	f003 f98e 	bl	8005d30 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 8002a14:	49a6      	ldr	r1, [pc, #664]	; (8002cb0 <runCommand+0x30c>)
 8002a16:	48a4      	ldr	r0, [pc, #656]	; (8002ca8 <runCommand+0x304>)
 8002a18:	f003 f98a 	bl	8005d30 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # ---Inicia Linea recta, #: dist [mm], #: dutty inicial \n");
 8002a1c:	49a5      	ldr	r1, [pc, #660]	; (8002cb4 <runCommand+0x310>)
 8002a1e:	48a2      	ldr	r0, [pc, #648]	; (8002ca8 <runCommand+0x304>)
 8002a20:	f003 f986 	bl	8005d30 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 8002a24:	49a4      	ldr	r1, [pc, #656]	; (8002cb8 <runCommand+0x314>)
 8002a26:	48a0      	ldr	r0, [pc, #640]	; (8002ca8 <runCommand+0x304>)
 8002a28:	f003 f982 	bl	8005d30 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) stop ---Para el estudio en medio de la ejecucion \n");
 8002a2c:	49a3      	ldr	r1, [pc, #652]	; (8002cbc <runCommand+0x318>)
 8002a2e:	489e      	ldr	r0, [pc, #632]	; (8002ca8 <runCommand+0x304>)
 8002a30:	f003 f97e 	bl	8005d30 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: kp,ti,td \n");
 8002a34:	49a2      	ldr	r1, [pc, #648]	; (8002cc0 <runCommand+0x31c>)
 8002a36:	489c      	ldr	r0, [pc, #624]	; (8002ca8 <runCommand+0x304>)
 8002a38:	f003 f97a 	bl	8005d30 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 8002a3c:	49a1      	ldr	r1, [pc, #644]	; (8002cc4 <runCommand+0x320>)
 8002a3e:	489a      	ldr	r0, [pc, #616]	; (8002ca8 <runCommand+0x304>)
 8002a40:	f003 f976 	bl	8005d30 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8002a44:	e1bf      	b.n	8002dc6 <runCommand+0x422>
	else if (strcmp(cmd, "frequency") == 0)
 8002a46:	f107 0318 	add.w	r3, r7, #24
 8002a4a:	499f      	ldr	r1, [pc, #636]	; (8002cc8 <runCommand+0x324>)
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fbc7 	bl	80001e0 <strcmp>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <runCommand+0xc4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	4a9c      	ldr	r2, [pc, #624]	; (8002ccc <runCommand+0x328>)
 8002a5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	4b9b      	ldr	r3, [pc, #620]	; (8002cd0 <runCommand+0x32c>)
 8002a64:	801a      	strh	r2, [r3, #0]
}
 8002a66:	e1ae      	b.n	8002dc6 <runCommand+0x422>
	else if (strcmp(cmd, "line") == 0)
 8002a68:	f107 0318 	add.w	r3, r7, #24
 8002a6c:	4999      	ldr	r1, [pc, #612]	; (8002cd4 <runCommand+0x330>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fbb6 	bl	80001e0 <strcmp>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 80a5 	bne.w	8002bc6 <runCommand+0x222>
		parameter_Posicion_Robot.xg_position = 0;
 8002a7c:	4b96      	ldr	r3, [pc, #600]	; (8002cd8 <runCommand+0x334>)
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	615a      	str	r2, [r3, #20]
		parameter_Posicion_Robot.yg_position = 0;
 8002a84:	4b94      	ldr	r3, [pc, #592]	; (8002cd8 <runCommand+0x334>)
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	619a      	str	r2, [r3, #24]
		parameter_Posicion_Robot.ang_Giro += turn;
 8002a8c:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <runCommand+0x334>)
 8002a8e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a92:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <runCommand+0x338>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9c:	4b8e      	ldr	r3, [pc, #568]	; (8002cd8 <runCommand+0x334>)
 8002a9e:	edc3 7a07 	vstr	s15, [r3, #28]
		parameter_Posicion_Robot.xr_position = 0;
 8002aa2:	4b8d      	ldr	r3, [pc, #564]	; (8002cd8 <runCommand+0x334>)
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	605a      	str	r2, [r3, #4]
		parameter_Posicion_Robot.yr_position = 0;
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <runCommand+0x334>)
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
		ang_Row = 0;
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <runCommand+0x33c>)
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
		cos_cal = cos(parameter_Posicion_Robot.ang_Giro);
 8002aba:	4b87      	ldr	r3, [pc, #540]	; (8002cd8 <runCommand+0x334>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fd fd5a 	bl	8000578 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	ec43 2b10 	vmov	d0, r2, r3
 8002acc:	f008 fc14 	bl	800b2f8 <cos>
 8002ad0:	ec53 2b10 	vmov	r2, r3, d0
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f89e 	bl	8000c18 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a81      	ldr	r2, [pc, #516]	; (8002ce4 <runCommand+0x340>)
 8002ae0:	6013      	str	r3, [r2, #0]
		sin_cal = sin(parameter_Posicion_Robot.ang_Giro);
 8002ae2:	4b7d      	ldr	r3, [pc, #500]	; (8002cd8 <runCommand+0x334>)
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fd46 	bl	8000578 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	ec43 2b10 	vmov	d0, r2, r3
 8002af4:	f008 fc54 	bl	800b3a0 <sin>
 8002af8:	ec53 2b10 	vmov	r2, r3, d0
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7fe f88a 	bl	8000c18 <__aeabi_d2f>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a78      	ldr	r2, [pc, #480]	; (8002ce8 <runCommand+0x344>)
 8002b08:	6013      	str	r3, [r2, #0]
		timeAction_TIMER_Sampling = (Ts/20);
 8002b0a:	4b78      	ldr	r3, [pc, #480]	; (8002cec <runCommand+0x348>)
 8002b0c:	ed93 7a00 	vldr	s14, [r3]
 8002b10:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1c:	ee17 3a90 	vmov	r3, s15
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	4b73      	ldr	r3, [pc, #460]	; (8002cf0 <runCommand+0x34c>)
 8002b24:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <runCommand+0x350>)
 8002b2c:	801a      	strh	r2, [r3, #0]
		duttyInicial = secondParameter;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b38:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <runCommand+0x354>)
 8002b3a:	edc3 7a00 	vstr	s15, [r3]
		parameter_PID_distace.e = parameter_PID_distace.e_1 = parameter_PID_distace.e_2 = parameter_PID_distace.u_1 = 0;
 8002b3e:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <runCommand+0x358>)
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <runCommand+0x358>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a6c      	ldr	r2, [pc, #432]	; (8002cfc <runCommand+0x358>)
 8002b4c:	6113      	str	r3, [r2, #16]
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	; (8002cfc <runCommand+0x358>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	4a6a      	ldr	r2, [pc, #424]	; (8002cfc <runCommand+0x358>)
 8002b54:	60d3      	str	r3, [r2, #12]
 8002b56:	4b69      	ldr	r3, [pc, #420]	; (8002cfc <runCommand+0x358>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a68      	ldr	r2, [pc, #416]	; (8002cfc <runCommand+0x358>)
 8002b5c:	6093      	str	r3, [r2, #8]
		config_motor(1, timeAction_TIMER_Sampling,  duttyInicial, duttyInicial, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002b5e:	4b64      	ldr	r3, [pc, #400]	; (8002cf0 <runCommand+0x34c>)
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	4619      	mov	r1, r3
 8002b64:	4b64      	ldr	r3, [pc, #400]	; (8002cf8 <runCommand+0x354>)
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <runCommand+0x354>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <runCommand+0x32c>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	eef0 0a47 	vmov.f32	s1, s14
 8002b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f000 fa0a 	bl	8002f98 <config_motor>
		status_motor(SET);
 8002b84:	2001      	movs	r0, #1
 8002b86:	f000 f97f 	bl	8002e88 <status_motor>
		sample_Gyro.timer_prev = getTicksMs();
 8002b8a:	f002 fde3 	bl	8005754 <getTicksMs>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	495b      	ldr	r1, [pc, #364]	; (8002d00 <runCommand+0x35c>)
 8002b94:	e9c1 2300 	strd	r2, r3, [r1]
		gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, CAL_GYRO_Z);
 8002b98:	2105      	movs	r1, #5
 8002b9a:	485a      	ldr	r0, [pc, #360]	; (8002d04 <runCommand+0x360>)
 8002b9c:	f7fe fdc4 	bl	8001728 <calibrationMPU>
 8002ba0:	eef0 7a40 	vmov.f32	s15, s0
 8002ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba8:	ee17 3a90 	vmov	r3, s15
 8002bac:	b21a      	sxth	r2, r3
 8002bae:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <runCommand+0x364>)
 8002bb0:	801a      	strh	r2, [r3, #0]
		flag_PID = 0;
 8002bb2:	4b56      	ldr	r3, [pc, #344]	; (8002d0c <runCommand+0x368>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
		time_accumulated = 0;
 8002bb8:	4b55      	ldr	r3, [pc, #340]	; (8002d10 <runCommand+0x36c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	801a      	strh	r2, [r3, #0]
		counting_action = 0;
 8002bbe:	4b55      	ldr	r3, [pc, #340]	; (8002d14 <runCommand+0x370>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	801a      	strh	r2, [r3, #0]
}
 8002bc4:	e0ff      	b.n	8002dc6 <runCommand+0x422>
	else if (strcmp(cmd, "const") == 0)
 8002bc6:	f107 0318 	add.w	r3, r7, #24
 8002bca:	4953      	ldr	r1, [pc, #332]	; (8002d18 <runCommand+0x374>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fb07 	bl	80001e0 <strcmp>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d118      	bne.n	8002c0a <runCommand+0x266>
			constains_calculator(&parameter_PID_distace, firtsParameter, secondParameter, thirdParameter);   //kp,ti,td
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	ee07 3a10 	vmov	s14, r3
 8002be8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	ee06 3a90 	vmov	s13, r3
 8002bf2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002bf6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bfa:	eef0 0a47 	vmov.f32	s1, s14
 8002bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002c02:	483e      	ldr	r0, [pc, #248]	; (8002cfc <runCommand+0x358>)
 8002c04:	f7ff fb92 	bl	800232c <constains_calculator>
}
 8002c08:	e0dd      	b.n	8002dc6 <runCommand+0x422>
	else if (strcmp(cmd, "equation") == 0)
 8002c0a:	f107 0318 	add.w	r3, r7, #24
 8002c0e:	4943      	ldr	r1, [pc, #268]	; (8002d1c <runCommand+0x378>)
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fae5 	bl	80001e0 <strcmp>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d118      	bne.n	8002c4e <runCommand+0x2aa>
			m = ((float) firtsParameter)/100;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c26:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002d20 <runCommand+0x37c>
 8002c2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <runCommand+0x380>)
 8002c30:	edc3 7a00 	vstr	s15, [r3]
			bl = ((float) secondParameter)/100;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002d20 <runCommand+0x37c>
 8002c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <runCommand+0x384>)
 8002c48:	edc3 7a00 	vstr	s15, [r3]
}
 8002c4c:	e0bb      	b.n	8002dc6 <runCommand+0x422>
	else if (strcmp(cmd, "turn") == 0)
 8002c4e:	f107 0318 	add.w	r3, r7, #24
 8002c52:	4936      	ldr	r1, [pc, #216]	; (8002d2c <runCommand+0x388>)
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd fac3 	bl	80001e0 <strcmp>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 809d 	bne.w	8002d9c <runCommand+0x3f8>
		flag_turn = secondParameter;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <runCommand+0x38c>)
 8002c68:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 8002c6a:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <runCommand+0x38c>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d168      	bne.n	8002d44 <runCommand+0x3a0>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	4a2f      	ldr	r2, [pc, #188]	; (8002d34 <runCommand+0x390>)
 8002c76:	fb82 1203 	smull	r1, r2, r2, r3
 8002c7a:	1052      	asrs	r2, r2, #1
 8002c7c:	17db      	asrs	r3, r3, #31
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	4b2c      	ldr	r3, [pc, #176]	; (8002d38 <runCommand+0x394>)
 8002c88:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 8002c8a:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <runCommand+0x398>)
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <runCommand+0x39c>)
 8002c8e:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <runCommand+0x398>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe fdf0 	bl	800187a <updateDirMotor>
 8002c9a:	e067      	b.n	8002d6c <runCommand+0x3c8>
 8002c9c:	0800c964 	.word	0x0800c964
 8002ca0:	0800c974 	.word	0x0800c974
 8002ca4:	0800c97c 	.word	0x0800c97c
 8002ca8:	2000029c 	.word	0x2000029c
 8002cac:	0800c98c 	.word	0x0800c98c
 8002cb0:	0800c9b8 	.word	0x0800c9b8
 8002cb4:	0800ca08 	.word	0x0800ca08
 8002cb8:	0800ca4c 	.word	0x0800ca4c
 8002cbc:	0800ca94 	.word	0x0800ca94
 8002cc0:	0800cacc 	.word	0x0800cacc
 8002cc4:	0800cb00 	.word	0x0800cb00
 8002cc8:	0800cb50 	.word	0x0800cb50
 8002ccc:	000186a0 	.word	0x000186a0
 8002cd0:	2000000a 	.word	0x2000000a
 8002cd4:	0800cb5c 	.word	0x0800cb5c
 8002cd8:	20000430 	.word	0x20000430
 8002cdc:	2000046c 	.word	0x2000046c
 8002ce0:	20000400 	.word	0x20000400
 8002ce4:	20000464 	.word	0x20000464
 8002ce8:	20000468 	.word	0x20000468
 8002cec:	20000004 	.word	0x20000004
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	2000048a 	.word	0x2000048a
 8002cf8:	2000048c 	.word	0x2000048c
 8002cfc:	20000408 	.word	0x20000408
 8002d00:	20000450 	.word	0x20000450
 8002d04:	2000027c 	.word	0x2000027c
 8002d08:	20000404 	.word	0x20000404
 8002d0c:	2000042c 	.word	0x2000042c
 8002d10:	20000490 	.word	0x20000490
 8002d14:	20000492 	.word	0x20000492
 8002d18:	0800cb64 	.word	0x0800cb64
 8002d1c:	0800cb6c 	.word	0x0800cb6c
 8002d20:	42c80000 	.word	0x42c80000
 8002d24:	2000000c 	.word	0x2000000c
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	0800cb78 	.word	0x0800cb78
 8002d30:	20000485 	.word	0x20000485
 8002d34:	66666667 	.word	0x66666667
 8002d38:	20000488 	.word	0x20000488
 8002d3c:	20000480 	.word	0x20000480
 8002d40:	20000318 	.word	0x20000318
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <runCommand+0x42c>)
 8002d48:	fb82 1203 	smull	r1, r2, r2, r3
 8002d4c:	1052      	asrs	r2, r2, #1
 8002d4e:	17db      	asrs	r3, r3, #31
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <runCommand+0x430>)
 8002d5a:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <runCommand+0x434>)
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <runCommand+0x438>)
 8002d60:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <runCommand+0x434>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe fd87 	bl	800187a <updateDirMotor>
		config_motor(2, timeAction_TIMER_Sampling, thirdParameter, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <runCommand+0x43c>)
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	4619      	mov	r1, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	ee07 3a10 	vmov	s14, r3
 8002d82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d86:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <runCommand+0x440>)
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	eef0 0a47 	vmov.f32	s1, s14
 8002d90:	eeb0 0a67 	vmov.f32	s0, s15
 8002d94:	2002      	movs	r0, #2
 8002d96:	f000 f8ff 	bl	8002f98 <config_motor>
}
 8002d9a:	e014      	b.n	8002dc6 <runCommand+0x422>
	else if (strcmp(cmd, "stop") == 0)
 8002d9c:	f107 0318 	add.w	r3, r7, #24
 8002da0:	4911      	ldr	r1, [pc, #68]	; (8002de8 <runCommand+0x444>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fa1c 	bl	80001e0 <strcmp>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d107      	bne.n	8002dbe <runCommand+0x41a>
		status_motor(RESET);
 8002dae:	2080      	movs	r0, #128	; 0x80
 8002db0:	f000 f86a 	bl	8002e88 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 8002db4:	490d      	ldr	r1, [pc, #52]	; (8002dec <runCommand+0x448>)
 8002db6:	480e      	ldr	r0, [pc, #56]	; (8002df0 <runCommand+0x44c>)
 8002db8:	f002 ffba 	bl	8005d30 <writeMsgForTXE>
}
 8002dbc:	e003      	b.n	8002dc6 <runCommand+0x422>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <runCommand+0x450>)
 8002dc0:	480b      	ldr	r0, [pc, #44]	; (8002df0 <runCommand+0x44c>)
 8002dc2:	f002 ffb5 	bl	8005d30 <writeMsgForTXE>
}
 8002dc6:	bf00      	nop
 8002dc8:	3758      	adds	r7, #88	; 0x58
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	66666667 	.word	0x66666667
 8002dd4:	20000488 	.word	0x20000488
 8002dd8:	20000480 	.word	0x20000480
 8002ddc:	20000394 	.word	0x20000394
 8002de0:	20000008 	.word	0x20000008
 8002de4:	2000000a 	.word	0x2000000a
 8002de8:	0800cb80 	.word	0x0800cb80
 8002dec:	0800cb88 	.word	0x0800cb88
 8002df0:	2000029c 	.word	0x2000029c
 8002df4:	0800cba0 	.word	0x0800cba0

08002df8 <correction>:
	ptrPIDHandler->u_1 = ptrPIDHandler->u;

}

void correction(Motor_Handler_t *ptrMotorHandler)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

	//Definimos variables auxiliares
	float port_dutty = 0;
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
	//Conversion ley de control->velocidad->valor dutty
	if(ptrMotorHandler == &handler_Motor_L)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <correction+0x80>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d103      	bne.n	8002e16 <correction+0x1e>
	{
		//Conversion a dutty
		//port_dutty = (0.9234*(ptrMotorHandler->configMotor.dutty) - 3) ;
		port_dutty = ptrMotorHandler->configMotor.dutty;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e002      	b.n	8002e1c <correction+0x24>
	}
	else
	{
		//Conversion a dutty
		port_dutty = ptrMotorHandler->configMotor.dutty;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	60fb      	str	r3, [r7, #12]
	}

    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 50)
 8002e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e20:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002e7c <correction+0x84>
 8002e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	db02      	blt.n	8002e34 <correction+0x3c>
    {
    	port_dutty = 50;
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <correction+0x88>)
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	e018      	b.n	8002e66 <correction+0x6e>
    }
    else if(port_dutty <= duttyInicial-5)
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <correction+0x8c>)
 8002e36:	edd3 7a00 	vldr	s15, [r3]
 8002e3a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e42:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	d809      	bhi.n	8002e64 <correction+0x6c>
    {
    	port_dutty = duttyInicial-5;
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <correction+0x8c>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e5e:	edc7 7a03 	vstr	s15, [r7, #12]
 8002e62:	e000      	b.n	8002e66 <correction+0x6e>
    }
    else
    {
    	__NOP();
 8002e64:	bf00      	nop
    }

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 8002e66:	ed97 0a03 	vldr	s0, [r7, #12]
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe fcee 	bl	800184c <updateDuttyMotor>
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000394 	.word	0x20000394
 8002e7c:	42480000 	.word	0x42480000
 8002e80:	42480000 	.word	0x42480000
 8002e84:	2000048c 	.word	0x2000048c

08002e88 <status_motor>:

void status_motor(uint8_t status)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d138      	bne.n	8002f0a <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8002e98:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <status_motor+0x100>)
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 fa82 	bl	80053a8 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8002ea4:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <status_motor+0x104>)
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 fa7c 	bl	80053a8 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8002eb0:	4b35      	ldr	r3, [pc, #212]	; (8002f88 <status_motor+0x100>)
 8002eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb4:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <status_motor+0x100>)
 8002eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f001 fd98 	bl	80049f8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <status_motor+0x104>)
 8002eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ecc:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <status_motor+0x104>)
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f001 fd8c 	bl	80049f8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8002ee0:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <status_motor+0x100>)
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 fd86 	bl	80049f8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <status_motor+0x104>)
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	2180      	movs	r1, #128	; 0x80
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 fd80 	bl	80049f8 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <status_motor+0x108>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d03f      	beq.n	8002f80 <status_motor+0xf8>
		{
			statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 8002f00:	2101      	movs	r1, #1
 8002f02:	4824      	ldr	r0, [pc, #144]	; (8002f94 <status_motor+0x10c>)
 8002f04:	f000 fb36 	bl	8003574 <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 8002f08:	e03a      	b.n	8002f80 <status_motor+0xf8>
		if(flag_motor!=2)
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <status_motor+0x108>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d003      	beq.n	8002f1a <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 8002f12:	2100      	movs	r1, #0
 8002f14:	481f      	ldr	r0, [pc, #124]	; (8002f94 <status_motor+0x10c>)
 8002f16:	f000 fb2d 	bl	8003574 <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <status_motor+0x100>)
 8002f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f002 fa41 	bl	80053a8 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8002f26:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <status_motor+0x104>)
 8002f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 fa3b 	bl	80053a8 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <status_motor+0x100>)
 8002f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <status_motor+0x100>)
 8002f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f001 fd57 	bl	80049f8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <status_motor+0x104>)
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <status_motor+0x104>)
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f001 fd4b 	bl	80049f8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <status_motor+0x100>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f001 fd45 	bl	80049f8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <status_motor+0x104>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	2101      	movs	r1, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 fd3f 	bl	80049f8 <GPIO_writePin>
		flag_motor = 0;
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <status_motor+0x108>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000394 	.word	0x20000394
 8002f8c:	20000318 	.word	0x20000318
 8002f90:	20000484 	.word	0x20000484
 8002f94:	200003f0 	.word	0x200003f0

08002f98 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6139      	str	r1, [r7, #16]
 8002fa2:	ed87 0a03 	vstr	s0, [r7, #12]
 8002fa6:	edc7 0a02 	vstr	s1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	//updateFrequencyTimer(&handler_TIMER_Sampling, firth);
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <config_motor+0x70>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <config_motor+0x74>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <config_motor+0x70>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <config_motor+0x74>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <config_motor+0x78>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 8002fcc:	4a11      	ldr	r2, [pc, #68]	; (8003014 <config_motor+0x7c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <config_motor+0x80>)
 8002fd8:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8002fda:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <config_motor+0x80>)
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	480e      	ldr	r0, [pc, #56]	; (800301c <config_motor+0x84>)
 8002fe2:	f000 fae7 	bl	80035b4 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 8002fe6:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fea:	4807      	ldr	r0, [pc, #28]	; (8003008 <config_motor+0x70>)
 8002fec:	f7fe fc2e 	bl	800184c <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8002ff0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ff4:	4805      	ldr	r0, [pc, #20]	; (800300c <config_motor+0x74>)
 8002ff6:	f7fe fc29 	bl	800184c <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 8002ffa:	4a09      	ldr	r2, [pc, #36]	; (8003020 <config_motor+0x88>)
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	7013      	strb	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000318 	.word	0x20000318
 800300c:	20000394 	.word	0x20000394
 8003010:	20000486 	.word	0x20000486
 8003014:	000186a0 	.word	0x000186a0
 8003018:	20000002 	.word	0x20000002
 800301c:	200003e0 	.word	0x200003e0
 8003020:	20000484 	.word	0x20000484

08003024 <inverseMatrix>:


void inverseMatrix(double mat[2][2])
{
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	b087      	sub	sp, #28
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
	//Calculo determinante
    double det = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3310      	adds	r3, #16
 8003038:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800303c:	f7fd faf4 	bl	8000628 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4692      	mov	sl, r2
 8003046:	469b      	mov	fp, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3310      	adds	r3, #16
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	f7fd fae7 	bl	8000628 <__aeabi_dmul>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4650      	mov	r0, sl
 8003060:	4659      	mov	r1, fp
 8003062:	f7fd f929 	bl	80002b8 <__aeabi_dsub>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    //Calculo matriz inversa
    double temp = mat[0][0];
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	e9c7 2302 	strd	r2, r3, [r7, #8]
    mat[0][0] = mat[1][1] / det;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3310      	adds	r3, #16
 800307c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003080:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003084:	f7fd fbfa 	bl	800087c <__aeabi_ddiv>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	e9c1 2300 	strd	r2, r3, [r1]
    mat[1][1] = temp / det;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f103 0610 	add.w	r6, r3, #16
 8003098:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800309c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030a0:	f7fd fbec 	bl	800087c <__aeabi_ddiv>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	e9c6 2302 	strd	r2, r3, [r6, #8]
    mat[0][1] = -mat[0][1] / det;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030b2:	4690      	mov	r8, r2
 80030b4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80030b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030bc:	4640      	mov	r0, r8
 80030be:	4649      	mov	r1, r9
 80030c0:	f7fd fbdc 	bl	800087c <__aeabi_ddiv>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
    mat[1][0] = -mat[1][0] / det;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3310      	adds	r3, #16
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	4614      	mov	r4, r2
 80030d8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f103 0610 	add.w	r6, r3, #16
 80030e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7fd fbc7 	bl	800087c <__aeabi_ddiv>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	e9c6 2300 	strd	r2, r3, [r6]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003100:	480d      	ldr	r0, [pc, #52]	; (8003138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003102:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003104:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003108:	480c      	ldr	r0, [pc, #48]	; (800313c <LoopForever+0x6>)
  ldr r1, =_edata
 800310a:	490d      	ldr	r1, [pc, #52]	; (8003140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800310c:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <LoopForever+0xe>)
  movs r3, #0
 800310e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003110:	e002      	b.n	8003118 <LoopCopyDataInit>

08003112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003116:	3304      	adds	r3, #4

08003118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800311a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800311c:	d3f9      	bcc.n	8003112 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311e:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <LoopForever+0x16>)
  movs r3, #0
 8003122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003124:	e001      	b.n	800312a <LoopFillZerobss>

08003126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003128:	3204      	adds	r2, #4

0800312a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800312a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800312c:	d3fb      	bcc.n	8003126 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800312e:	f003 f80d 	bl	800614c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003132:	f7fe fbd1 	bl	80018d8 <main>

08003136 <LoopForever>:

LoopForever:
    b LoopForever
 8003136:	e7fe      	b.n	8003136 <LoopForever>
  ldr   r0, =_estack
 8003138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800313c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003140:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003144:	0800d2d8 	.word	0x0800d2d8
  ldr r2, =_sbss
 8003148:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800314c:	20000d68 	.word	0x20000d68

08003150 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003150:	e7fe      	b.n	8003150 <ADC_IRQHandler>

08003152 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003152:	b480      	push	{r7}
 8003154:	af00      	add	r7, sp, #0
	return 1;
 8003156:	2301      	movs	r3, #1
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <_kill>:

int _kill(int pid, int sig)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800316c:	f002 ffe8 	bl	8006140 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	2216      	movs	r2, #22
 8003174:	601a      	str	r2, [r3, #0]
	return -1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <_exit>:

void _exit (int status)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800318a:	f04f 31ff 	mov.w	r1, #4294967295
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffe7 	bl	8003162 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003194:	e7fe      	b.n	8003194 <_exit+0x12>

08003196 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e00a      	b.n	80031be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031a8:	f3af 8000 	nop.w
 80031ac:	4601      	mov	r1, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	60ba      	str	r2, [r7, #8]
 80031b4:	b2ca      	uxtb	r2, r1
 80031b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	3301      	adds	r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	dbf0      	blt.n	80031a8 <_read+0x12>
	}

return len;
 80031c6:	687b      	ldr	r3, [r7, #4]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	e009      	b.n	80031f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	60ba      	str	r2, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	3301      	adds	r3, #1
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	dbf1      	blt.n	80031e2 <_write+0x12>
	}
	return len;
 80031fe:	687b      	ldr	r3, [r7, #4]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <_close>:

int _close(int file)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	return -1;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003230:	605a      	str	r2, [r3, #4]
	return 0;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <_isatty>:

int _isatty(int file)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	return 1;
 8003248:	2301      	movs	r3, #1
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
	return 0;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003278:	4a14      	ldr	r2, [pc, #80]	; (80032cc <_sbrk+0x5c>)
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <_sbrk+0x60>)
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003284:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <_sbrk+0x64>)
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <_sbrk+0x68>)
 8003290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <_sbrk+0x64>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	429a      	cmp	r2, r3
 800329e:	d207      	bcs.n	80032b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032a0:	f002 ff4e 	bl	8006140 <__errno>
 80032a4:	4603      	mov	r3, r0
 80032a6:	220c      	movs	r2, #12
 80032a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	e009      	b.n	80032c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <_sbrk+0x64>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b6:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <_sbrk+0x64>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <_sbrk+0x64>)
 80032c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032c2:	68fb      	ldr	r3, [r7, #12]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20020000 	.word	0x20020000
 80032d0:	00000400 	.word	0x00000400
 80032d4:	200004e0 	.word	0x200004e0
 80032d8:	20000d68 	.word	0x20000d68

080032dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	db0b      	blt.n	8003306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	f003 021f 	and.w	r2, r3, #31
 80032f4:	4907      	ldr	r1, [pc, #28]	; (8003314 <__NVIC_EnableIRQ+0x38>)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2001      	movs	r0, #1
 80032fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000e100 	.word	0xe000e100

08003318 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003328:	d10a      	bne.n	8003340 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800332a:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <BasicTimer_Config+0x19c>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a61      	ldr	r2, [pc, #388]	; (80034b4 <BasicTimer_Config+0x19c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4a5f      	ldr	r2, [pc, #380]	; (80034b8 <BasicTimer_Config+0x1a0>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e02e      	b.n	800339e <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a5d      	ldr	r2, [pc, #372]	; (80034bc <BasicTimer_Config+0x1a4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10a      	bne.n	8003360 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800334a:	4b5a      	ldr	r3, [pc, #360]	; (80034b4 <BasicTimer_Config+0x19c>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a59      	ldr	r2, [pc, #356]	; (80034b4 <BasicTimer_Config+0x19c>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4a59      	ldr	r2, [pc, #356]	; (80034c0 <BasicTimer_Config+0x1a8>)
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01e      	b.n	800339e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a57      	ldr	r2, [pc, #348]	; (80034c4 <BasicTimer_Config+0x1ac>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d10a      	bne.n	8003380 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800336a:	4b52      	ldr	r3, [pc, #328]	; (80034b4 <BasicTimer_Config+0x19c>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a51      	ldr	r2, [pc, #324]	; (80034b4 <BasicTimer_Config+0x19c>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4a53      	ldr	r2, [pc, #332]	; (80034c8 <BasicTimer_Config+0x1b0>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00e      	b.n	800339e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a51      	ldr	r2, [pc, #324]	; (80034cc <BasicTimer_Config+0x1b4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d109      	bne.n	800339e <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800338a:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <BasicTimer_Config+0x19c>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	4a49      	ldr	r2, [pc, #292]	; (80034b4 <BasicTimer_Config+0x19c>)
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	4a4d      	ldr	r2, [pc, #308]	; (80034d0 <BasicTimer_Config+0x1b8>)
 800339c:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 800339e:	f001 fdf3 	bl	8004f88 <getConfigPLL>
 80033a2:	4603      	mov	r3, r0
 80033a4:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80033a6:	f001 fe0b 	bl	8004fc0 <getClockAPB1>
 80033aa:	4603      	mov	r3, r0
 80033ac:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80033ae:	7bbb      	ldrb	r3, [r7, #14]
 80033b0:	2b31      	cmp	r3, #49	; 0x31
 80033b2:	d903      	bls.n	80033bc <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e000      	b.n	80033be <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80033bc:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	8852      	ldrh	r2, [r2, #2]
 80033c4:	fb02 f303 	mul.w	r3, r2, r3
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d112      	bne.n	80033fe <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f022 0210 	bic.w	r2, r2, #16
 80033e6:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	3201      	adds	r2, #1
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
 80033fc:	e018      	b.n	8003430 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f022 0210 	bic.w	r2, r2, #16
 800340c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f042 0210 	orr.w	r2, r2, #16
 800341c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6852      	ldr	r2, [r2, #4]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003430:	b672      	cpsid	i
}
 8003432:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343c:	d103      	bne.n	8003446 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800343e:	201c      	movs	r0, #28
 8003440:	f7ff ff4c 	bl	80032dc <__NVIC_EnableIRQ>
 8003444:	e019      	b.n	800347a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <BasicTimer_Config+0x1a4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d103      	bne.n	8003458 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8003450:	201d      	movs	r0, #29
 8003452:	f7ff ff43 	bl	80032dc <__NVIC_EnableIRQ>
 8003456:	e010      	b.n	800347a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <BasicTimer_Config+0x1ac>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d103      	bne.n	800346a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8003462:	201e      	movs	r0, #30
 8003464:	f7ff ff3a 	bl	80032dc <__NVIC_EnableIRQ>
 8003468:	e007      	b.n	800347a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <BasicTimer_Config+0x1b4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8003474:	2032      	movs	r0, #50	; 0x32
 8003476:	f7ff ff31 	bl	80032dc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800347a:	b662      	cpsie	i
}
 800347c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7a1b      	ldrb	r3, [r3, #8]
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f875 	bl	8003574 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	200004e4 	.word	0x200004e4
 80034bc:	40000400 	.word	0x40000400
 80034c0:	200004e8 	.word	0x200004e8
 80034c4:	40000800 	.word	0x40000800
 80034c8:	200004ec 	.word	0x200004ec
 80034cc:	40000c00 	.word	0x40000c00
 80034d0:	200004f0 	.word	0x200004f0

080034d4 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
	__NOP();
 80034d8:	bf00      	nop
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
	__NOP();
 80034e8:	bf00      	nop
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <TIM2_IRQHandler+0x1c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <TIM2_IRQHandler+0x1c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8003508:	f7fe ffce 	bl	80024a8 <BasicTimer2_Callback>

}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200004e4 	.word	0x200004e4

08003514 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <TIM3_IRQHandler+0x1c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <TIM3_IRQHandler+0x1c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8003528:	f7fe ffca 	bl	80024c0 <BasicTimer3_Callback>

}
 800352c:	bf00      	nop
 800352e:	bd80      	pop	{r7, pc}
 8003530:	200004e8 	.word	0x200004e8

08003534 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <TIM4_IRQHandler+0x1c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	4b04      	ldr	r3, [pc, #16]	; (8003550 <TIM4_IRQHandler+0x1c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8003548:	f7ff ffc4 	bl	80034d4 <BasicTimer4_Callback>

}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}
 8003550:	200004ec 	.word	0x200004ec

08003554 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <TIM5_IRQHandler+0x1c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <TIM5_IRQHandler+0x1c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8003568:	f7ff ffbc 	bl	80034e4 <BasicTimer5_Callback>

}
 800356c:	bf00      	nop
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200004f0 	.word	0x200004f0

08003574 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d108      	bne.n	8003598 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8003596:	e007      	b.n	80035a8 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	60da      	str	r2, [r3, #12]
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 80035c0:	887a      	ldrh	r2, [r7, #2]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6852      	ldr	r2, [r2, #4]
 80035d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <__NVIC_EnableIRQ>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	db0b      	blt.n	800360e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 021f 	and.w	r2, r3, #31
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <__NVIC_EnableIRQ+0x38>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2001      	movs	r0, #1
 8003606:	fa00 f202 	lsl.w	r2, r0, r2
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000e100 	.word	0xe000e100

08003620 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af02      	add	r7, sp, #8
 8003626:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	2300      	movs	r3, #0
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	2300      	movs	r3, #0
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2301      	movs	r3, #1
 8003636:	2200      	movs	r2, #0
 8003638:	2100      	movs	r1, #0
 800363a:	f001 f891 	bl	8004760 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f001 f8ae 	bl	80047a4 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8003648:	4b97      	ldr	r3, [pc, #604]	; (80038a8 <extInt_Config+0x288>)
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	4a96      	ldr	r2, [pc, #600]	; (80038a8 <extInt_Config+0x288>)
 800364e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003652:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	f200 85cf 	bhi.w	80041fe <extInt_Config+0xbde>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <extInt_Config+0x48>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	080036a9 	.word	0x080036a9
 800366c:	0800375f 	.word	0x0800375f
 8003670:	08003815 	.word	0x08003815
 8003674:	080038eb 	.word	0x080038eb
 8003678:	080039a1 	.word	0x080039a1
 800367c:	08003a4f 	.word	0x08003a4f
 8003680:	08003b15 	.word	0x08003b15
 8003684:	08003bbd 	.word	0x08003bbd
 8003688:	08003c65 	.word	0x08003c65
 800368c:	08003d0d 	.word	0x08003d0d
 8003690:	08003dd3 	.word	0x08003dd3
 8003694:	08003e7b 	.word	0x08003e7b
 8003698:	08003f23 	.word	0x08003f23
 800369c:	08003fe9 	.word	0x08003fe9
 80036a0:	08004091 	.word	0x08004091
 80036a4:	08004139 	.word	0x08004139
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80036a8:	4b80      	ldr	r3, [pc, #512]	; (80038ac <extInt_Config+0x28c>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a7f      	ldr	r2, [pc, #508]	; (80038ac <extInt_Config+0x28c>)
 80036ae:	f023 030f 	bic.w	r3, r3, #15
 80036b2:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4a7d      	ldr	r2, [pc, #500]	; (80038b0 <extInt_Config+0x290>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d105      	bne.n	80036cc <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80036c0:	4b7a      	ldr	r3, [pc, #488]	; (80038ac <extInt_Config+0x28c>)
 80036c2:	4a7a      	ldr	r2, [pc, #488]	; (80038ac <extInt_Config+0x28c>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80036c8:	f000 bd9b 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4a78      	ldr	r2, [pc, #480]	; (80038b4 <extInt_Config+0x294>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d107      	bne.n	80036e8 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80036d8:	4b74      	ldr	r3, [pc, #464]	; (80038ac <extInt_Config+0x28c>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a73      	ldr	r2, [pc, #460]	; (80038ac <extInt_Config+0x28c>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6093      	str	r3, [r2, #8]
		break;
 80036e4:	f000 bd8d 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4a72      	ldr	r2, [pc, #456]	; (80038b8 <extInt_Config+0x298>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d107      	bne.n	8003704 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 80036f4:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <extInt_Config+0x28c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a6c      	ldr	r2, [pc, #432]	; (80038ac <extInt_Config+0x28c>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	6093      	str	r3, [r2, #8]
		break;
 8003700:	f000 bd7f 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	4a6c      	ldr	r2, [pc, #432]	; (80038bc <extInt_Config+0x29c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d107      	bne.n	8003720 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8003710:	4b66      	ldr	r3, [pc, #408]	; (80038ac <extInt_Config+0x28c>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a65      	ldr	r2, [pc, #404]	; (80038ac <extInt_Config+0x28c>)
 8003716:	f043 0303 	orr.w	r3, r3, #3
 800371a:	6093      	str	r3, [r2, #8]
		break;
 800371c:	f000 bd71 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4a66      	ldr	r2, [pc, #408]	; (80038c0 <extInt_Config+0x2a0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d107      	bne.n	800373c <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 800372c:	4b5f      	ldr	r3, [pc, #380]	; (80038ac <extInt_Config+0x28c>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a5e      	ldr	r2, [pc, #376]	; (80038ac <extInt_Config+0x28c>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6093      	str	r3, [r2, #8]
		break;
 8003738:	f000 bd63 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4a60      	ldr	r2, [pc, #384]	; (80038c4 <extInt_Config+0x2a4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d107      	bne.n	8003758 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8003748:	4b58      	ldr	r3, [pc, #352]	; (80038ac <extInt_Config+0x28c>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4a57      	ldr	r2, [pc, #348]	; (80038ac <extInt_Config+0x28c>)
 800374e:	f043 0307 	orr.w	r3, r3, #7
 8003752:	6093      	str	r3, [r2, #8]
		break;
 8003754:	f000 bd55 	b.w	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003758:	bf00      	nop
		break;
 800375a:	f000 bd52 	b.w	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 800375e:	4b53      	ldr	r3, [pc, #332]	; (80038ac <extInt_Config+0x28c>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	4a52      	ldr	r2, [pc, #328]	; (80038ac <extInt_Config+0x28c>)
 8003764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003768:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a4f      	ldr	r2, [pc, #316]	; (80038b0 <extInt_Config+0x290>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d105      	bne.n	8003782 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8003776:	4b4d      	ldr	r3, [pc, #308]	; (80038ac <extInt_Config+0x28c>)
 8003778:	4a4c      	ldr	r2, [pc, #304]	; (80038ac <extInt_Config+0x28c>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800377e:	f000 bd40 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a4a      	ldr	r2, [pc, #296]	; (80038b4 <extInt_Config+0x294>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d107      	bne.n	800379e <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800378e:	4b47      	ldr	r3, [pc, #284]	; (80038ac <extInt_Config+0x28c>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4a46      	ldr	r2, [pc, #280]	; (80038ac <extInt_Config+0x28c>)
 8003794:	f043 0310 	orr.w	r3, r3, #16
 8003798:	6093      	str	r3, [r2, #8]
		break;
 800379a:	f000 bd32 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a44      	ldr	r2, [pc, #272]	; (80038b8 <extInt_Config+0x298>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d107      	bne.n	80037ba <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80037aa:	4b40      	ldr	r3, [pc, #256]	; (80038ac <extInt_Config+0x28c>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4a3f      	ldr	r2, [pc, #252]	; (80038ac <extInt_Config+0x28c>)
 80037b0:	f043 0320 	orr.w	r3, r3, #32
 80037b4:	6093      	str	r3, [r2, #8]
		break;
 80037b6:	f000 bd24 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a3e      	ldr	r2, [pc, #248]	; (80038bc <extInt_Config+0x29c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d107      	bne.n	80037d6 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <extInt_Config+0x28c>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	4a38      	ldr	r2, [pc, #224]	; (80038ac <extInt_Config+0x28c>)
 80037cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80037d0:	6093      	str	r3, [r2, #8]
		break;
 80037d2:	f000 bd16 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a38      	ldr	r2, [pc, #224]	; (80038c0 <extInt_Config+0x2a0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d107      	bne.n	80037f2 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80037e2:	4b32      	ldr	r3, [pc, #200]	; (80038ac <extInt_Config+0x28c>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	4a31      	ldr	r2, [pc, #196]	; (80038ac <extInt_Config+0x28c>)
 80037e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ec:	6093      	str	r3, [r2, #8]
		break;
 80037ee:	f000 bd08 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a32      	ldr	r2, [pc, #200]	; (80038c4 <extInt_Config+0x2a4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d107      	bne.n	800380e <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 80037fe:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <extInt_Config+0x28c>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4a2a      	ldr	r2, [pc, #168]	; (80038ac <extInt_Config+0x28c>)
 8003804:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003808:	6093      	str	r3, [r2, #8]
		break;
 800380a:	f000 bcfa 	b.w	8004202 <extInt_Config+0xbe2>
			__NOP();
 800380e:	bf00      	nop
		break;
 8003810:	f000 bcf7 	b.w	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <extInt_Config+0x28c>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a24      	ldr	r2, [pc, #144]	; (80038ac <extInt_Config+0x28c>)
 800381a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800381e:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <extInt_Config+0x290>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d105      	bne.n	8003838 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 800382c:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <extInt_Config+0x28c>)
 800382e:	4a1f      	ldr	r2, [pc, #124]	; (80038ac <extInt_Config+0x28c>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003834:	f000 bce5 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <extInt_Config+0x294>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d107      	bne.n	8003854 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <extInt_Config+0x28c>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a18      	ldr	r2, [pc, #96]	; (80038ac <extInt_Config+0x28c>)
 800384a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384e:	6093      	str	r3, [r2, #8]
		break;
 8003850:	f000 bcd7 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <extInt_Config+0x298>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d107      	bne.n	8003870 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <extInt_Config+0x28c>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a11      	ldr	r2, [pc, #68]	; (80038ac <extInt_Config+0x28c>)
 8003866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386a:	6093      	str	r3, [r2, #8]
		break;
 800386c:	f000 bcc9 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4a11      	ldr	r2, [pc, #68]	; (80038bc <extInt_Config+0x29c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d107      	bne.n	800388c <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <extInt_Config+0x28c>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <extInt_Config+0x28c>)
 8003882:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003886:	6093      	str	r3, [r2, #8]
		break;
 8003888:	f000 bcbb 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <extInt_Config+0x2a0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d117      	bne.n	80038c8 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <extInt_Config+0x28c>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	4a03      	ldr	r2, [pc, #12]	; (80038ac <extInt_Config+0x28c>)
 800389e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038a2:	6093      	str	r3, [r2, #8]
		break;
 80038a4:	f000 bcad 	b.w	8004202 <extInt_Config+0xbe2>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40013800 	.word	0x40013800
 80038b0:	40020000 	.word	0x40020000
 80038b4:	40020400 	.word	0x40020400
 80038b8:	40020800 	.word	0x40020800
 80038bc:	40020c00 	.word	0x40020c00
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	4a8a      	ldr	r2, [pc, #552]	; (8003af8 <extInt_Config+0x4d8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d107      	bne.n	80038e4 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80038d4:	4b89      	ldr	r3, [pc, #548]	; (8003afc <extInt_Config+0x4dc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a88      	ldr	r2, [pc, #544]	; (8003afc <extInt_Config+0x4dc>)
 80038da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038de:	6093      	str	r3, [r2, #8]
		break;
 80038e0:	f000 bc8f 	b.w	8004202 <extInt_Config+0xbe2>
			__NOP();
 80038e4:	bf00      	nop
		break;
 80038e6:	f000 bc8c 	b.w	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 80038ea:	4b84      	ldr	r3, [pc, #528]	; (8003afc <extInt_Config+0x4dc>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4a83      	ldr	r2, [pc, #524]	; (8003afc <extInt_Config+0x4dc>)
 80038f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038f4:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a80      	ldr	r2, [pc, #512]	; (8003b00 <extInt_Config+0x4e0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d105      	bne.n	800390e <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8003902:	4b7e      	ldr	r3, [pc, #504]	; (8003afc <extInt_Config+0x4dc>)
 8003904:	4a7d      	ldr	r2, [pc, #500]	; (8003afc <extInt_Config+0x4dc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800390a:	f000 bc7a 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a7b      	ldr	r2, [pc, #492]	; (8003b04 <extInt_Config+0x4e4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d107      	bne.n	800392a <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800391a:	4b78      	ldr	r3, [pc, #480]	; (8003afc <extInt_Config+0x4dc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	4a77      	ldr	r2, [pc, #476]	; (8003afc <extInt_Config+0x4dc>)
 8003920:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003924:	6093      	str	r3, [r2, #8]
		break;
 8003926:	f000 bc6c 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <extInt_Config+0x4e8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d107      	bne.n	8003946 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8003936:	4b71      	ldr	r3, [pc, #452]	; (8003afc <extInt_Config+0x4dc>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	4a70      	ldr	r2, [pc, #448]	; (8003afc <extInt_Config+0x4dc>)
 800393c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003940:	6093      	str	r3, [r2, #8]
		break;
 8003942:	f000 bc5e 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a6f      	ldr	r2, [pc, #444]	; (8003b0c <extInt_Config+0x4ec>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d107      	bne.n	8003962 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8003952:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <extInt_Config+0x4dc>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	4a69      	ldr	r2, [pc, #420]	; (8003afc <extInt_Config+0x4dc>)
 8003958:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800395c:	6093      	str	r3, [r2, #8]
		break;
 800395e:	f000 bc50 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a69      	ldr	r2, [pc, #420]	; (8003b10 <extInt_Config+0x4f0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d107      	bne.n	800397e <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800396e:	4b63      	ldr	r3, [pc, #396]	; (8003afc <extInt_Config+0x4dc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4a62      	ldr	r2, [pc, #392]	; (8003afc <extInt_Config+0x4dc>)
 8003974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003978:	6093      	str	r3, [r2, #8]
		break;
 800397a:	f000 bc42 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a5c      	ldr	r2, [pc, #368]	; (8003af8 <extInt_Config+0x4d8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d107      	bne.n	800399a <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 800398a:	4b5c      	ldr	r3, [pc, #368]	; (8003afc <extInt_Config+0x4dc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4a5b      	ldr	r2, [pc, #364]	; (8003afc <extInt_Config+0x4dc>)
 8003990:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003994:	6093      	str	r3, [r2, #8]
		break;
 8003996:	f000 bc34 	b.w	8004202 <extInt_Config+0xbe2>
			__NOP();
 800399a:	bf00      	nop
		break;
 800399c:	f000 bc31 	b.w	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80039a0:	4b56      	ldr	r3, [pc, #344]	; (8003afc <extInt_Config+0x4dc>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a55      	ldr	r2, [pc, #340]	; (8003afc <extInt_Config+0x4dc>)
 80039a6:	f023 030f 	bic.w	r3, r3, #15
 80039aa:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	4a53      	ldr	r2, [pc, #332]	; (8003b00 <extInt_Config+0x4e0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d105      	bne.n	80039c4 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80039b8:	4b50      	ldr	r3, [pc, #320]	; (8003afc <extInt_Config+0x4dc>)
 80039ba:	4a50      	ldr	r2, [pc, #320]	; (8003afc <extInt_Config+0x4dc>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80039c0:	f000 bc1f 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	4a4e      	ldr	r2, [pc, #312]	; (8003b04 <extInt_Config+0x4e4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d107      	bne.n	80039e0 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80039d0:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <extInt_Config+0x4dc>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a49      	ldr	r2, [pc, #292]	; (8003afc <extInt_Config+0x4dc>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	60d3      	str	r3, [r2, #12]
		break;
 80039dc:	f000 bc11 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4a48      	ldr	r2, [pc, #288]	; (8003b08 <extInt_Config+0x4e8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d107      	bne.n	80039fc <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80039ec:	4b43      	ldr	r3, [pc, #268]	; (8003afc <extInt_Config+0x4dc>)
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4a42      	ldr	r2, [pc, #264]	; (8003afc <extInt_Config+0x4dc>)
 80039f2:	f043 0302 	orr.w	r3, r3, #2
 80039f6:	60d3      	str	r3, [r2, #12]
		break;
 80039f8:	f000 bc03 	b.w	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	4a42      	ldr	r2, [pc, #264]	; (8003b0c <extInt_Config+0x4ec>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d106      	bne.n	8003a16 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003a08:	4b3c      	ldr	r3, [pc, #240]	; (8003afc <extInt_Config+0x4dc>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <extInt_Config+0x4dc>)
 8003a0e:	f043 0303 	orr.w	r3, r3, #3
 8003a12:	60d3      	str	r3, [r2, #12]
		break;
 8003a14:	e3f5      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4a3c      	ldr	r2, [pc, #240]	; (8003b10 <extInt_Config+0x4f0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d106      	bne.n	8003a30 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <extInt_Config+0x4dc>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	4a35      	ldr	r2, [pc, #212]	; (8003afc <extInt_Config+0x4dc>)
 8003a28:	f043 0304 	orr.w	r3, r3, #4
 8003a2c:	60d3      	str	r3, [r2, #12]
		break;
 8003a2e:	e3e8      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4a30      	ldr	r2, [pc, #192]	; (8003af8 <extInt_Config+0x4d8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d106      	bne.n	8003a4a <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8003a3c:	4b2f      	ldr	r3, [pc, #188]	; (8003afc <extInt_Config+0x4dc>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a2e      	ldr	r2, [pc, #184]	; (8003afc <extInt_Config+0x4dc>)
 8003a42:	f043 0307 	orr.w	r3, r3, #7
 8003a46:	60d3      	str	r3, [r2, #12]
		break;
 8003a48:	e3db      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003a4a:	bf00      	nop
		break;
 8003a4c:	e3d9      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <extInt_Config+0x4dc>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <extInt_Config+0x4dc>)
 8003a54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a58:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	4a27      	ldr	r2, [pc, #156]	; (8003b00 <extInt_Config+0x4e0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d104      	bne.n	8003a70 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8003a66:	4b25      	ldr	r3, [pc, #148]	; (8003afc <extInt_Config+0x4dc>)
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <extInt_Config+0x4dc>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003a6e:	e3c8      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	4a23      	ldr	r2, [pc, #140]	; (8003b04 <extInt_Config+0x4e4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d106      	bne.n	8003a8a <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8003a7c:	4b1f      	ldr	r3, [pc, #124]	; (8003afc <extInt_Config+0x4dc>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4a1e      	ldr	r2, [pc, #120]	; (8003afc <extInt_Config+0x4dc>)
 8003a82:	f043 0310 	orr.w	r3, r3, #16
 8003a86:	60d3      	str	r3, [r2, #12]
		break;
 8003a88:	e3bb      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <extInt_Config+0x4e8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d106      	bne.n	8003aa4 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8003a96:	4b19      	ldr	r3, [pc, #100]	; (8003afc <extInt_Config+0x4dc>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	; (8003afc <extInt_Config+0x4dc>)
 8003a9c:	f043 0320 	orr.w	r3, r3, #32
 8003aa0:	60d3      	str	r3, [r2, #12]
		break;
 8003aa2:	e3ae      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <extInt_Config+0x4ec>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d106      	bne.n	8003abe <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8003ab0:	4b12      	ldr	r3, [pc, #72]	; (8003afc <extInt_Config+0x4dc>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	4a11      	ldr	r2, [pc, #68]	; (8003afc <extInt_Config+0x4dc>)
 8003ab6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003aba:	60d3      	str	r3, [r2, #12]
		break;
 8003abc:	e3a1      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <extInt_Config+0x4f0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d106      	bne.n	8003ad8 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003aca:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <extInt_Config+0x4dc>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <extInt_Config+0x4dc>)
 8003ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ad4:	60d3      	str	r3, [r2, #12]
		break;
 8003ad6:	e394      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4a06      	ldr	r2, [pc, #24]	; (8003af8 <extInt_Config+0x4d8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d106      	bne.n	8003af2 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <extInt_Config+0x4dc>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <extInt_Config+0x4dc>)
 8003aea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003aee:	60d3      	str	r3, [r2, #12]
		break;
 8003af0:	e387      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003af2:	bf00      	nop
		break;
 8003af4:	e385      	b.n	8004202 <extInt_Config+0xbe2>
 8003af6:	bf00      	nop
 8003af8:	40021c00 	.word	0x40021c00
 8003afc:	40013800 	.word	0x40013800
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40020400 	.word	0x40020400
 8003b08:	40020800 	.word	0x40020800
 8003b0c:	40020c00 	.word	0x40020c00
 8003b10:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8003b14:	4b86      	ldr	r3, [pc, #536]	; (8003d30 <extInt_Config+0x710>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a85      	ldr	r2, [pc, #532]	; (8003d30 <extInt_Config+0x710>)
 8003b1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b1e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	4a83      	ldr	r2, [pc, #524]	; (8003d34 <extInt_Config+0x714>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d104      	bne.n	8003b36 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8003b2c:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <extInt_Config+0x710>)
 8003b2e:	4a80      	ldr	r2, [pc, #512]	; (8003d30 <extInt_Config+0x710>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003b34:	e365      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4a7e      	ldr	r2, [pc, #504]	; (8003d38 <extInt_Config+0x718>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d106      	bne.n	8003b50 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8003b42:	4b7b      	ldr	r3, [pc, #492]	; (8003d30 <extInt_Config+0x710>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4a7a      	ldr	r2, [pc, #488]	; (8003d30 <extInt_Config+0x710>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	60d3      	str	r3, [r2, #12]
		break;
 8003b4e:	e358      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	4a79      	ldr	r2, [pc, #484]	; (8003d3c <extInt_Config+0x71c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d106      	bne.n	8003b6a <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003b5c:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <extInt_Config+0x710>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a73      	ldr	r2, [pc, #460]	; (8003d30 <extInt_Config+0x710>)
 8003b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b66:	60d3      	str	r3, [r2, #12]
		break;
 8003b68:	e34b      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a73      	ldr	r2, [pc, #460]	; (8003d40 <extInt_Config+0x720>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d106      	bne.n	8003b84 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8003b76:	4b6e      	ldr	r3, [pc, #440]	; (8003d30 <extInt_Config+0x710>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	4a6d      	ldr	r2, [pc, #436]	; (8003d30 <extInt_Config+0x710>)
 8003b7c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003b80:	60d3      	str	r3, [r2, #12]
		break;
 8003b82:	e33e      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	4a6e      	ldr	r2, [pc, #440]	; (8003d44 <extInt_Config+0x724>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d106      	bne.n	8003b9e <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8003b90:	4b67      	ldr	r3, [pc, #412]	; (8003d30 <extInt_Config+0x710>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a66      	ldr	r2, [pc, #408]	; (8003d30 <extInt_Config+0x710>)
 8003b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b9a:	60d3      	str	r3, [r2, #12]
		break;
 8003b9c:	e331      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a68      	ldr	r2, [pc, #416]	; (8003d48 <extInt_Config+0x728>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d106      	bne.n	8003bb8 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8003baa:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <extInt_Config+0x710>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4a60      	ldr	r2, [pc, #384]	; (8003d30 <extInt_Config+0x710>)
 8003bb0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bb4:	60d3      	str	r3, [r2, #12]
		break;
 8003bb6:	e324      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003bb8:	bf00      	nop
		break;
 8003bba:	e322      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8003bbc:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <extInt_Config+0x710>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a5b      	ldr	r2, [pc, #364]	; (8003d30 <extInt_Config+0x710>)
 8003bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	4a59      	ldr	r2, [pc, #356]	; (8003d34 <extInt_Config+0x714>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d104      	bne.n	8003bde <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8003bd4:	4b56      	ldr	r3, [pc, #344]	; (8003d30 <extInt_Config+0x710>)
 8003bd6:	4a56      	ldr	r2, [pc, #344]	; (8003d30 <extInt_Config+0x710>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003bdc:	e311      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a54      	ldr	r2, [pc, #336]	; (8003d38 <extInt_Config+0x718>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d106      	bne.n	8003bf8 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003bea:	4b51      	ldr	r3, [pc, #324]	; (8003d30 <extInt_Config+0x710>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <extInt_Config+0x710>)
 8003bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bf4:	60d3      	str	r3, [r2, #12]
		break;
 8003bf6:	e304      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4a4f      	ldr	r2, [pc, #316]	; (8003d3c <extInt_Config+0x71c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d106      	bne.n	8003c12 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8003c04:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <extInt_Config+0x710>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a49      	ldr	r2, [pc, #292]	; (8003d30 <extInt_Config+0x710>)
 8003c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c0e:	60d3      	str	r3, [r2, #12]
		break;
 8003c10:	e2f7      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a49      	ldr	r2, [pc, #292]	; (8003d40 <extInt_Config+0x720>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d106      	bne.n	8003c2c <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8003c1e:	4b44      	ldr	r3, [pc, #272]	; (8003d30 <extInt_Config+0x710>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4a43      	ldr	r2, [pc, #268]	; (8003d30 <extInt_Config+0x710>)
 8003c24:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003c28:	60d3      	str	r3, [r2, #12]
		break;
 8003c2a:	e2ea      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	4a44      	ldr	r2, [pc, #272]	; (8003d44 <extInt_Config+0x724>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d106      	bne.n	8003c46 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003c38:	4b3d      	ldr	r3, [pc, #244]	; (8003d30 <extInt_Config+0x710>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a3c      	ldr	r2, [pc, #240]	; (8003d30 <extInt_Config+0x710>)
 8003c3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c42:	60d3      	str	r3, [r2, #12]
		break;
 8003c44:	e2dd      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a3e      	ldr	r2, [pc, #248]	; (8003d48 <extInt_Config+0x728>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d106      	bne.n	8003c60 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <extInt_Config+0x710>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4a36      	ldr	r2, [pc, #216]	; (8003d30 <extInt_Config+0x710>)
 8003c58:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003c5c:	60d3      	str	r3, [r2, #12]
		break;
 8003c5e:	e2d0      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003c60:	bf00      	nop
		break;
 8003c62:	e2ce      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8003c64:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <extInt_Config+0x710>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4a31      	ldr	r2, [pc, #196]	; (8003d30 <extInt_Config+0x710>)
 8003c6a:	f023 030f 	bic.w	r3, r3, #15
 8003c6e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <extInt_Config+0x714>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d104      	bne.n	8003c86 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8003c7c:	4b2c      	ldr	r3, [pc, #176]	; (8003d30 <extInt_Config+0x710>)
 8003c7e:	4a2c      	ldr	r2, [pc, #176]	; (8003d30 <extInt_Config+0x710>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003c84:	e2bd      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	; (8003d38 <extInt_Config+0x718>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d106      	bne.n	8003ca0 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8003c92:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <extInt_Config+0x710>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <extInt_Config+0x710>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	6113      	str	r3, [r2, #16]
		break;
 8003c9e:	e2b0      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <extInt_Config+0x71c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d106      	bne.n	8003cba <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <extInt_Config+0x710>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4a1f      	ldr	r2, [pc, #124]	; (8003d30 <extInt_Config+0x710>)
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	6113      	str	r3, [r2, #16]
		break;
 8003cb8:	e2a3      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <extInt_Config+0x720>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d106      	bne.n	8003cd4 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8003cc6:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <extInt_Config+0x710>)
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <extInt_Config+0x710>)
 8003ccc:	f043 0303 	orr.w	r3, r3, #3
 8003cd0:	6113      	str	r3, [r2, #16]
		break;
 8003cd2:	e296      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	4a1a      	ldr	r2, [pc, #104]	; (8003d44 <extInt_Config+0x724>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d106      	bne.n	8003cee <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <extInt_Config+0x710>)
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <extInt_Config+0x710>)
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	6113      	str	r3, [r2, #16]
		break;
 8003cec:	e289      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <extInt_Config+0x728>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d106      	bne.n	8003d08 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <extInt_Config+0x710>)
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <extInt_Config+0x710>)
 8003d00:	f043 0307 	orr.w	r3, r3, #7
 8003d04:	6113      	str	r3, [r2, #16]
		break;
 8003d06:	e27c      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003d08:	bf00      	nop
		break;
 8003d0a:	e27a      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <extInt_Config+0x710>)
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <extInt_Config+0x710>)
 8003d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d16:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <extInt_Config+0x714>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d113      	bne.n	8003d4c <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8003d24:	4b02      	ldr	r3, [pc, #8]	; (8003d30 <extInt_Config+0x710>)
 8003d26:	4a02      	ldr	r2, [pc, #8]	; (8003d30 <extInt_Config+0x710>)
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003d2c:	e269      	b.n	8004202 <extInt_Config+0xbe2>
 8003d2e:	bf00      	nop
 8003d30:	40013800 	.word	0x40013800
 8003d34:	40020000 	.word	0x40020000
 8003d38:	40020400 	.word	0x40020400
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	40020c00 	.word	0x40020c00
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4a83      	ldr	r2, [pc, #524]	; (8003f60 <extInt_Config+0x940>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d106      	bne.n	8003d66 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003d58:	4b82      	ldr	r3, [pc, #520]	; (8003f64 <extInt_Config+0x944>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	4a81      	ldr	r2, [pc, #516]	; (8003f64 <extInt_Config+0x944>)
 8003d5e:	f043 0310 	orr.w	r3, r3, #16
 8003d62:	6113      	str	r3, [r2, #16]
		break;
 8003d64:	e24d      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a7e      	ldr	r2, [pc, #504]	; (8003f68 <extInt_Config+0x948>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d106      	bne.n	8003d80 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8003d72:	4b7c      	ldr	r3, [pc, #496]	; (8003f64 <extInt_Config+0x944>)
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	4a7b      	ldr	r2, [pc, #492]	; (8003f64 <extInt_Config+0x944>)
 8003d78:	f043 0320 	orr.w	r3, r3, #32
 8003d7c:	6113      	str	r3, [r2, #16]
		break;
 8003d7e:	e240      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	4a79      	ldr	r2, [pc, #484]	; (8003f6c <extInt_Config+0x94c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d106      	bne.n	8003d9a <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003d8c:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <extInt_Config+0x944>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	4a74      	ldr	r2, [pc, #464]	; (8003f64 <extInt_Config+0x944>)
 8003d92:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003d96:	6113      	str	r3, [r2, #16]
		break;
 8003d98:	e233      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	4a73      	ldr	r2, [pc, #460]	; (8003f70 <extInt_Config+0x950>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d106      	bne.n	8003db4 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8003da6:	4b6f      	ldr	r3, [pc, #444]	; (8003f64 <extInt_Config+0x944>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	4a6e      	ldr	r2, [pc, #440]	; (8003f64 <extInt_Config+0x944>)
 8003dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db0:	6113      	str	r3, [r2, #16]
		break;
 8003db2:	e226      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	4a6e      	ldr	r2, [pc, #440]	; (8003f74 <extInt_Config+0x954>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d106      	bne.n	8003dce <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <extInt_Config+0x944>)
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	4a67      	ldr	r2, [pc, #412]	; (8003f64 <extInt_Config+0x944>)
 8003dc6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003dca:	6113      	str	r3, [r2, #16]
		break;
 8003dcc:	e219      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003dce:	bf00      	nop
		break;
 8003dd0:	e217      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 8003dd2:	4b64      	ldr	r3, [pc, #400]	; (8003f64 <extInt_Config+0x944>)
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	4a63      	ldr	r2, [pc, #396]	; (8003f64 <extInt_Config+0x944>)
 8003dd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ddc:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a64      	ldr	r2, [pc, #400]	; (8003f78 <extInt_Config+0x958>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d104      	bne.n	8003df4 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003dea:	4b5e      	ldr	r3, [pc, #376]	; (8003f64 <extInt_Config+0x944>)
 8003dec:	4a5d      	ldr	r2, [pc, #372]	; (8003f64 <extInt_Config+0x944>)
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003df2:	e206      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a59      	ldr	r2, [pc, #356]	; (8003f60 <extInt_Config+0x940>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d106      	bne.n	8003e0e <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003e00:	4b58      	ldr	r3, [pc, #352]	; (8003f64 <extInt_Config+0x944>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	4a57      	ldr	r2, [pc, #348]	; (8003f64 <extInt_Config+0x944>)
 8003e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0a:	6113      	str	r3, [r2, #16]
		break;
 8003e0c:	e1f9      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	4a54      	ldr	r2, [pc, #336]	; (8003f68 <extInt_Config+0x948>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d106      	bne.n	8003e28 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003e1a:	4b52      	ldr	r3, [pc, #328]	; (8003f64 <extInt_Config+0x944>)
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	4a51      	ldr	r2, [pc, #324]	; (8003f64 <extInt_Config+0x944>)
 8003e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e24:	6113      	str	r3, [r2, #16]
		break;
 8003e26:	e1ec      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	4a4f      	ldr	r2, [pc, #316]	; (8003f6c <extInt_Config+0x94c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d106      	bne.n	8003e42 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8003e34:	4b4b      	ldr	r3, [pc, #300]	; (8003f64 <extInt_Config+0x944>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4a4a      	ldr	r2, [pc, #296]	; (8003f64 <extInt_Config+0x944>)
 8003e3a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003e3e:	6113      	str	r3, [r2, #16]
		break;
 8003e40:	e1df      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a49      	ldr	r2, [pc, #292]	; (8003f70 <extInt_Config+0x950>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d106      	bne.n	8003e5c <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8003e4e:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <extInt_Config+0x944>)
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	4a44      	ldr	r2, [pc, #272]	; (8003f64 <extInt_Config+0x944>)
 8003e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e58:	6113      	str	r3, [r2, #16]
		break;
 8003e5a:	e1d2      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	4a44      	ldr	r2, [pc, #272]	; (8003f74 <extInt_Config+0x954>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d106      	bne.n	8003e76 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003e68:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <extInt_Config+0x944>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	4a3d      	ldr	r2, [pc, #244]	; (8003f64 <extInt_Config+0x944>)
 8003e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e72:	6113      	str	r3, [r2, #16]
		break;
 8003e74:	e1c5      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003e76:	bf00      	nop
		break;
 8003e78:	e1c3      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8003e7a:	4b3a      	ldr	r3, [pc, #232]	; (8003f64 <extInt_Config+0x944>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	4a39      	ldr	r2, [pc, #228]	; (8003f64 <extInt_Config+0x944>)
 8003e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e84:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <extInt_Config+0x958>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d104      	bne.n	8003e9c <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8003e92:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <extInt_Config+0x944>)
 8003e94:	4a33      	ldr	r2, [pc, #204]	; (8003f64 <extInt_Config+0x944>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003e9a:	e1b2      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4a2f      	ldr	r2, [pc, #188]	; (8003f60 <extInt_Config+0x940>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d106      	bne.n	8003eb6 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8003ea8:	4b2e      	ldr	r3, [pc, #184]	; (8003f64 <extInt_Config+0x944>)
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <extInt_Config+0x944>)
 8003eae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eb2:	6113      	str	r3, [r2, #16]
		break;
 8003eb4:	e1a5      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <extInt_Config+0x948>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d106      	bne.n	8003ed0 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8003ec2:	4b28      	ldr	r3, [pc, #160]	; (8003f64 <extInt_Config+0x944>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	4a27      	ldr	r2, [pc, #156]	; (8003f64 <extInt_Config+0x944>)
 8003ec8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ecc:	6113      	str	r3, [r2, #16]
		break;
 8003ece:	e198      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4a25      	ldr	r2, [pc, #148]	; (8003f6c <extInt_Config+0x94c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d106      	bne.n	8003eea <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <extInt_Config+0x944>)
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <extInt_Config+0x944>)
 8003ee2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003ee6:	6113      	str	r3, [r2, #16]
		break;
 8003ee8:	e18b      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <extInt_Config+0x950>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d106      	bne.n	8003f04 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <extInt_Config+0x944>)
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <extInt_Config+0x944>)
 8003efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f00:	6113      	str	r3, [r2, #16]
		break;
 8003f02:	e17e      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <extInt_Config+0x954>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d106      	bne.n	8003f1e <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003f10:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <extInt_Config+0x944>)
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <extInt_Config+0x944>)
 8003f16:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003f1a:	6113      	str	r3, [r2, #16]
		break;
 8003f1c:	e171      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003f1e:	bf00      	nop
		break;
 8003f20:	e16f      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <extInt_Config+0x944>)
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <extInt_Config+0x944>)
 8003f28:	f023 030f 	bic.w	r3, r3, #15
 8003f2c:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <extInt_Config+0x958>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d104      	bne.n	8003f44 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <extInt_Config+0x944>)
 8003f3c:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <extInt_Config+0x944>)
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003f42:	e15e      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <extInt_Config+0x940>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d115      	bne.n	8003f7c <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <extInt_Config+0x944>)
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4a03      	ldr	r2, [pc, #12]	; (8003f64 <extInt_Config+0x944>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	6153      	str	r3, [r2, #20]
		break;
 8003f5c:	e151      	b.n	8004202 <extInt_Config+0xbe2>
 8003f5e:	bf00      	nop
 8003f60:	40020400 	.word	0x40020400
 8003f64:	40013800 	.word	0x40013800
 8003f68:	40020800 	.word	0x40020800
 8003f6c:	40020c00 	.word	0x40020c00
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40021c00 	.word	0x40021c00
 8003f78:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	4a83      	ldr	r2, [pc, #524]	; (8004190 <extInt_Config+0xb70>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d106      	bne.n	8003f96 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003f88:	4b82      	ldr	r3, [pc, #520]	; (8004194 <extInt_Config+0xb74>)
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	4a81      	ldr	r2, [pc, #516]	; (8004194 <extInt_Config+0xb74>)
 8003f8e:	f043 0302 	orr.w	r3, r3, #2
 8003f92:	6153      	str	r3, [r2, #20]
		break;
 8003f94:	e135      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a7e      	ldr	r2, [pc, #504]	; (8004198 <extInt_Config+0xb78>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d106      	bne.n	8003fb0 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8003fa2:	4b7c      	ldr	r3, [pc, #496]	; (8004194 <extInt_Config+0xb74>)
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4a7b      	ldr	r2, [pc, #492]	; (8004194 <extInt_Config+0xb74>)
 8003fa8:	f043 0303 	orr.w	r3, r3, #3
 8003fac:	6153      	str	r3, [r2, #20]
		break;
 8003fae:	e128      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	4a79      	ldr	r2, [pc, #484]	; (800419c <extInt_Config+0xb7c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d106      	bne.n	8003fca <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8003fbc:	4b75      	ldr	r3, [pc, #468]	; (8004194 <extInt_Config+0xb74>)
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	4a74      	ldr	r2, [pc, #464]	; (8004194 <extInt_Config+0xb74>)
 8003fc2:	f043 0304 	orr.w	r3, r3, #4
 8003fc6:	6153      	str	r3, [r2, #20]
		break;
 8003fc8:	e11b      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	4a73      	ldr	r2, [pc, #460]	; (80041a0 <extInt_Config+0xb80>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d106      	bne.n	8003fe4 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8003fd6:	4b6f      	ldr	r3, [pc, #444]	; (8004194 <extInt_Config+0xb74>)
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <extInt_Config+0xb74>)
 8003fdc:	f043 0307 	orr.w	r3, r3, #7
 8003fe0:	6153      	str	r3, [r2, #20]
		break;
 8003fe2:	e10e      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8003fe4:	bf00      	nop
		break;
 8003fe6:	e10c      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8003fe8:	4b6a      	ldr	r3, [pc, #424]	; (8004194 <extInt_Config+0xb74>)
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4a69      	ldr	r2, [pc, #420]	; (8004194 <extInt_Config+0xb74>)
 8003fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff2:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	4a6a      	ldr	r2, [pc, #424]	; (80041a4 <extInt_Config+0xb84>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d104      	bne.n	800400a <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8004000:	4b64      	ldr	r3, [pc, #400]	; (8004194 <extInt_Config+0xb74>)
 8004002:	4a64      	ldr	r2, [pc, #400]	; (8004194 <extInt_Config+0xb74>)
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8004008:	e0fb      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a65      	ldr	r2, [pc, #404]	; (80041a8 <extInt_Config+0xb88>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d106      	bne.n	8004024 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8004016:	4b5f      	ldr	r3, [pc, #380]	; (8004194 <extInt_Config+0xb74>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4a5e      	ldr	r2, [pc, #376]	; (8004194 <extInt_Config+0xb74>)
 800401c:	f043 0310 	orr.w	r3, r3, #16
 8004020:	6153      	str	r3, [r2, #20]
		break;
 8004022:	e0ee      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4a59      	ldr	r2, [pc, #356]	; (8004190 <extInt_Config+0xb70>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d106      	bne.n	800403e <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8004030:	4b58      	ldr	r3, [pc, #352]	; (8004194 <extInt_Config+0xb74>)
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	4a57      	ldr	r2, [pc, #348]	; (8004194 <extInt_Config+0xb74>)
 8004036:	f043 0320 	orr.w	r3, r3, #32
 800403a:	6153      	str	r3, [r2, #20]
		break;
 800403c:	e0e1      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a54      	ldr	r2, [pc, #336]	; (8004198 <extInt_Config+0xb78>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d106      	bne.n	8004058 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800404a:	4b52      	ldr	r3, [pc, #328]	; (8004194 <extInt_Config+0xb74>)
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4a51      	ldr	r2, [pc, #324]	; (8004194 <extInt_Config+0xb74>)
 8004050:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004054:	6153      	str	r3, [r2, #20]
		break;
 8004056:	e0d4      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	4a4f      	ldr	r2, [pc, #316]	; (800419c <extInt_Config+0xb7c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d106      	bne.n	8004072 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8004064:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <extInt_Config+0xb74>)
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	4a4a      	ldr	r2, [pc, #296]	; (8004194 <extInt_Config+0xb74>)
 800406a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800406e:	6153      	str	r3, [r2, #20]
		break;
 8004070:	e0c7      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	4a49      	ldr	r2, [pc, #292]	; (80041a0 <extInt_Config+0xb80>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d106      	bne.n	800408c <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800407e:	4b45      	ldr	r3, [pc, #276]	; (8004194 <extInt_Config+0xb74>)
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4a44      	ldr	r2, [pc, #272]	; (8004194 <extInt_Config+0xb74>)
 8004084:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004088:	6153      	str	r3, [r2, #20]
		break;
 800408a:	e0ba      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 800408c:	bf00      	nop
		break;
 800408e:	e0b8      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8004090:	4b40      	ldr	r3, [pc, #256]	; (8004194 <extInt_Config+0xb74>)
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	4a3f      	ldr	r2, [pc, #252]	; (8004194 <extInt_Config+0xb74>)
 8004096:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800409a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <extInt_Config+0xb84>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d104      	bne.n	80040b2 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80040a8:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <extInt_Config+0xb74>)
 80040aa:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <extInt_Config+0xb74>)
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80040b0:	e0a7      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a3b      	ldr	r2, [pc, #236]	; (80041a8 <extInt_Config+0xb88>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d106      	bne.n	80040cc <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80040be:	4b35      	ldr	r3, [pc, #212]	; (8004194 <extInt_Config+0xb74>)
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	4a34      	ldr	r2, [pc, #208]	; (8004194 <extInt_Config+0xb74>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c8:	6153      	str	r3, [r2, #20]
		break;
 80040ca:	e09a      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	4a2f      	ldr	r2, [pc, #188]	; (8004190 <extInt_Config+0xb70>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d106      	bne.n	80040e6 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80040d8:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <extInt_Config+0xb74>)
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	4a2d      	ldr	r2, [pc, #180]	; (8004194 <extInt_Config+0xb74>)
 80040de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e2:	6153      	str	r3, [r2, #20]
		break;
 80040e4:	e08d      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <extInt_Config+0xb78>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d106      	bne.n	8004100 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80040f2:	4b28      	ldr	r3, [pc, #160]	; (8004194 <extInt_Config+0xb74>)
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	4a27      	ldr	r2, [pc, #156]	; (8004194 <extInt_Config+0xb74>)
 80040f8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80040fc:	6153      	str	r3, [r2, #20]
		break;
 80040fe:	e080      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4a25      	ldr	r2, [pc, #148]	; (800419c <extInt_Config+0xb7c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d106      	bne.n	800411a <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 800410c:	4b21      	ldr	r3, [pc, #132]	; (8004194 <extInt_Config+0xb74>)
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4a20      	ldr	r2, [pc, #128]	; (8004194 <extInt_Config+0xb74>)
 8004112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004116:	6153      	str	r3, [r2, #20]
		break;
 8004118:	e073      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <extInt_Config+0xb80>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d106      	bne.n	8004134 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <extInt_Config+0xb74>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <extInt_Config+0xb74>)
 800412c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004130:	6153      	str	r3, [r2, #20]
		break;
 8004132:	e066      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 8004134:	bf00      	nop
		break;
 8004136:	e064      	b.n	8004202 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <extInt_Config+0xb74>)
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	4a15      	ldr	r2, [pc, #84]	; (8004194 <extInt_Config+0xb74>)
 800413e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004142:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <extInt_Config+0xb84>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d104      	bne.n	800415a <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <extInt_Config+0xb74>)
 8004152:	4a10      	ldr	r2, [pc, #64]	; (8004194 <extInt_Config+0xb74>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8004158:	e053      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <extInt_Config+0xb88>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d106      	bne.n	8004174 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <extInt_Config+0xb74>)
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <extInt_Config+0xb74>)
 800416c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004170:	6153      	str	r3, [r2, #20]
		break;
 8004172:	e046      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	4a05      	ldr	r2, [pc, #20]	; (8004190 <extInt_Config+0xb70>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d115      	bne.n	80041ac <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <extInt_Config+0xb74>)
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	4a03      	ldr	r2, [pc, #12]	; (8004194 <extInt_Config+0xb74>)
 8004186:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800418a:	6153      	str	r3, [r2, #20]
		break;
 800418c:	e039      	b.n	8004202 <extInt_Config+0xbe2>
 800418e:	bf00      	nop
 8004190:	40020800 	.word	0x40020800
 8004194:	40013800 	.word	0x40013800
 8004198:	40020c00 	.word	0x40020c00
 800419c:	40021000 	.word	0x40021000
 80041a0:	40021c00 	.word	0x40021c00
 80041a4:	40020000 	.word	0x40020000
 80041a8:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	4a9d      	ldr	r2, [pc, #628]	; (8004428 <extInt_Config+0xe08>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d106      	bne.n	80041c6 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80041b8:	4b9c      	ldr	r3, [pc, #624]	; (800442c <extInt_Config+0xe0c>)
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	4a9b      	ldr	r2, [pc, #620]	; (800442c <extInt_Config+0xe0c>)
 80041be:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80041c2:	6153      	str	r3, [r2, #20]
		break;
 80041c4:	e01d      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a98      	ldr	r2, [pc, #608]	; (8004430 <extInt_Config+0xe10>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d106      	bne.n	80041e0 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80041d2:	4b96      	ldr	r3, [pc, #600]	; (800442c <extInt_Config+0xe0c>)
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4a95      	ldr	r2, [pc, #596]	; (800442c <extInt_Config+0xe0c>)
 80041d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041dc:	6153      	str	r3, [r2, #20]
		break;
 80041de:	e010      	b.n	8004202 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	4a93      	ldr	r2, [pc, #588]	; (8004434 <extInt_Config+0xe14>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d106      	bne.n	80041fa <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80041ec:	4b8f      	ldr	r3, [pc, #572]	; (800442c <extInt_Config+0xe0c>)
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	4a8e      	ldr	r2, [pc, #568]	; (800442c <extInt_Config+0xe0c>)
 80041f2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80041f6:	6153      	str	r3, [r2, #20]
		break;
 80041f8:	e003      	b.n	8004202 <extInt_Config+0xbe2>
			__NOP();
 80041fa:	bf00      	nop
		break;
 80041fc:	e001      	b.n	8004202 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 80041fe:	bf00      	nop
		break;
 8004200:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	791b      	ldrb	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d126      	bne.n	8004258 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800420a:	4b8b      	ldr	r3, [pc, #556]	; (8004438 <extInt_Config+0xe18>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	7812      	ldrb	r2, [r2, #0]
 8004214:	4611      	mov	r1, r2
 8004216:	2201      	movs	r2, #1
 8004218:	408a      	lsls	r2, r1
 800421a:	43d2      	mvns	r2, r2
 800421c:	4611      	mov	r1, r2
 800421e:	4a86      	ldr	r2, [pc, #536]	; (8004438 <extInt_Config+0xe18>)
 8004220:	400b      	ands	r3, r1
 8004222:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004224:	4b84      	ldr	r3, [pc, #528]	; (8004438 <extInt_Config+0xe18>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	7812      	ldrb	r2, [r2, #0]
 800422e:	4611      	mov	r1, r2
 8004230:	2201      	movs	r2, #1
 8004232:	408a      	lsls	r2, r1
 8004234:	43d2      	mvns	r2, r2
 8004236:	4611      	mov	r1, r2
 8004238:	4a7f      	ldr	r2, [pc, #508]	; (8004438 <extInt_Config+0xe18>)
 800423a:	400b      	ands	r3, r1
 800423c:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800423e:	4b7e      	ldr	r3, [pc, #504]	; (8004438 <extInt_Config+0xe18>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	7812      	ldrb	r2, [r2, #0]
 8004248:	4611      	mov	r1, r2
 800424a:	2201      	movs	r2, #1
 800424c:	408a      	lsls	r2, r1
 800424e:	4611      	mov	r1, r2
 8004250:	4a79      	ldr	r2, [pc, #484]	; (8004438 <extInt_Config+0xe18>)
 8004252:	430b      	orrs	r3, r1
 8004254:	6093      	str	r3, [r2, #8]
 8004256:	e05c      	b.n	8004312 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d126      	bne.n	80042ae <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004260:	4b75      	ldr	r3, [pc, #468]	; (8004438 <extInt_Config+0xe18>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	4611      	mov	r1, r2
 800426c:	2201      	movs	r2, #1
 800426e:	408a      	lsls	r2, r1
 8004270:	43d2      	mvns	r2, r2
 8004272:	4611      	mov	r1, r2
 8004274:	4a70      	ldr	r2, [pc, #448]	; (8004438 <extInt_Config+0xe18>)
 8004276:	400b      	ands	r3, r1
 8004278:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800427a:	4b6f      	ldr	r3, [pc, #444]	; (8004438 <extInt_Config+0xe18>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	4611      	mov	r1, r2
 8004286:	2201      	movs	r2, #1
 8004288:	408a      	lsls	r2, r1
 800428a:	43d2      	mvns	r2, r2
 800428c:	4611      	mov	r1, r2
 800428e:	4a6a      	ldr	r2, [pc, #424]	; (8004438 <extInt_Config+0xe18>)
 8004290:	400b      	ands	r3, r1
 8004292:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004294:	4b68      	ldr	r3, [pc, #416]	; (8004438 <extInt_Config+0xe18>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	7812      	ldrb	r2, [r2, #0]
 800429e:	4611      	mov	r1, r2
 80042a0:	2201      	movs	r2, #1
 80042a2:	408a      	lsls	r2, r1
 80042a4:	4611      	mov	r1, r2
 80042a6:	4a64      	ldr	r2, [pc, #400]	; (8004438 <extInt_Config+0xe18>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	60d3      	str	r3, [r2, #12]
 80042ac:	e031      	b.n	8004312 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042ae:	4b62      	ldr	r3, [pc, #392]	; (8004438 <extInt_Config+0xe18>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	7812      	ldrb	r2, [r2, #0]
 80042b8:	4611      	mov	r1, r2
 80042ba:	2201      	movs	r2, #1
 80042bc:	408a      	lsls	r2, r1
 80042be:	43d2      	mvns	r2, r2
 80042c0:	4611      	mov	r1, r2
 80042c2:	4a5d      	ldr	r2, [pc, #372]	; (8004438 <extInt_Config+0xe18>)
 80042c4:	400b      	ands	r3, r1
 80042c6:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042c8:	4b5b      	ldr	r3, [pc, #364]	; (8004438 <extInt_Config+0xe18>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	4611      	mov	r1, r2
 80042d4:	2201      	movs	r2, #1
 80042d6:	408a      	lsls	r2, r1
 80042d8:	43d2      	mvns	r2, r2
 80042da:	4611      	mov	r1, r2
 80042dc:	4a56      	ldr	r2, [pc, #344]	; (8004438 <extInt_Config+0xe18>)
 80042de:	400b      	ands	r3, r1
 80042e0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042e2:	4b55      	ldr	r3, [pc, #340]	; (8004438 <extInt_Config+0xe18>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	4611      	mov	r1, r2
 80042ee:	2201      	movs	r2, #1
 80042f0:	408a      	lsls	r2, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	4a50      	ldr	r2, [pc, #320]	; (8004438 <extInt_Config+0xe18>)
 80042f6:	430b      	orrs	r3, r1
 80042f8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80042fa:	4b4f      	ldr	r3, [pc, #316]	; (8004438 <extInt_Config+0xe18>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	7812      	ldrb	r2, [r2, #0]
 8004304:	4611      	mov	r1, r2
 8004306:	2201      	movs	r2, #1
 8004308:	408a      	lsls	r2, r1
 800430a:	4611      	mov	r1, r2
 800430c:	4a4a      	ldr	r2, [pc, #296]	; (8004438 <extInt_Config+0xe18>)
 800430e:	430b      	orrs	r3, r1
 8004310:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004312:	4b49      	ldr	r3, [pc, #292]	; (8004438 <extInt_Config+0xe18>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	7812      	ldrb	r2, [r2, #0]
 800431c:	4611      	mov	r1, r2
 800431e:	2201      	movs	r2, #1
 8004320:	408a      	lsls	r2, r1
 8004322:	43d2      	mvns	r2, r2
 8004324:	4611      	mov	r1, r2
 8004326:	4a44      	ldr	r2, [pc, #272]	; (8004438 <extInt_Config+0xe18>)
 8004328:	400b      	ands	r3, r1
 800432a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800432c:	4b42      	ldr	r3, [pc, #264]	; (8004438 <extInt_Config+0xe18>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	4611      	mov	r1, r2
 8004338:	2201      	movs	r2, #1
 800433a:	408a      	lsls	r2, r1
 800433c:	4611      	mov	r1, r2
 800433e:	4a3e      	ldr	r2, [pc, #248]	; (8004438 <extInt_Config+0xe18>)
 8004340:	430b      	orrs	r3, r1
 8004342:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004344:	b672      	cpsid	i
}
 8004346:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	d862      	bhi.n	8004418 <extInt_Config+0xdf8>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <extInt_Config+0xd38>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004399 	.word	0x08004399
 800435c:	080043a1 	.word	0x080043a1
 8004360:	080043a9 	.word	0x080043a9
 8004364:	080043b1 	.word	0x080043b1
 8004368:	080043b9 	.word	0x080043b9
 800436c:	080043c1 	.word	0x080043c1
 8004370:	080043c9 	.word	0x080043c9
 8004374:	080043d1 	.word	0x080043d1
 8004378:	080043d9 	.word	0x080043d9
 800437c:	080043e1 	.word	0x080043e1
 8004380:	080043e9 	.word	0x080043e9
 8004384:	080043f1 	.word	0x080043f1
 8004388:	080043f9 	.word	0x080043f9
 800438c:	08004401 	.word	0x08004401
 8004390:	08004409 	.word	0x08004409
 8004394:	08004411 	.word	0x08004411
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8004398:	2006      	movs	r0, #6
 800439a:	f7ff f923 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 800439e:	e03c      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 80043a0:	2007      	movs	r0, #7
 80043a2:	f7ff f91f 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043a6:	e038      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80043a8:	2008      	movs	r0, #8
 80043aa:	f7ff f91b 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043ae:	e034      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80043b0:	2009      	movs	r0, #9
 80043b2:	f7ff f917 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043b6:	e030      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80043b8:	200a      	movs	r0, #10
 80043ba:	f7ff f913 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043be:	e02c      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043c0:	2017      	movs	r0, #23
 80043c2:	f7ff f90f 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043c6:	e028      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043c8:	2017      	movs	r0, #23
 80043ca:	f7ff f90b 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043ce:	e024      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043d0:	2017      	movs	r0, #23
 80043d2:	f7ff f907 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043d6:	e020      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043d8:	2017      	movs	r0, #23
 80043da:	f7ff f903 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043de:	e01c      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043e0:	2017      	movs	r0, #23
 80043e2:	f7ff f8ff 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043e6:	e018      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043e8:	2028      	movs	r0, #40	; 0x28
 80043ea:	f7ff f8fb 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043ee:	e014      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043f0:	2028      	movs	r0, #40	; 0x28
 80043f2:	f7ff f8f7 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043f6:	e010      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043f8:	2028      	movs	r0, #40	; 0x28
 80043fa:	f7ff f8f3 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 80043fe:	e00c      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004400:	2028      	movs	r0, #40	; 0x28
 8004402:	f7ff f8ef 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 8004406:	e008      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004408:	2028      	movs	r0, #40	; 0x28
 800440a:	f7ff f8eb 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 800440e:	e004      	b.n	800441a <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004410:	2028      	movs	r0, #40	; 0x28
 8004412:	f7ff f8e7 	bl	80035e4 <__NVIC_EnableIRQ>
		break;
 8004416:	e000      	b.n	800441a <extInt_Config+0xdfa>
	}

	default: {
		break;
 8004418:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800441a:	b662      	cpsie	i
}
 800441c:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40020c00 	.word	0x40020c00
 800442c:	40013800 	.word	0x40013800
 8004430:	40021000 	.word	0x40021000
 8004434:	40021c00 	.word	0x40021c00
 8004438:	40013c00 	.word	0x40013c00

0800443c <callback_extInt0>:
	__enable_irq();
}


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
	__NOP();
 8004440:	bf00      	nop
}
 8004442:	bf00      	nop
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
	__NOP();
 8004450:	bf00      	nop
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
	__NOP();
 8004460:	bf00      	nop
}
 8004462:	bf00      	nop
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
	__NOP();
 8004470:	bf00      	nop
}
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
	__NOP();
 8004480:	bf00      	nop
}
 8004482:	bf00      	nop
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
	__NOP();
 8004490:	bf00      	nop
}
 8004492:	bf00      	nop
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
	__NOP();
 80044a0:	bf00      	nop
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
	__NOP();
 80044b0:	bf00      	nop
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
	__NOP();
 80044c0:	bf00      	nop
}
 80044c2:	bf00      	nop
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
	__NOP();
 80044d0:	bf00      	nop
}
 80044d2:	bf00      	nop
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
	__NOP();
 80044e0:	bf00      	nop
}
 80044e2:	bf00      	nop
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
	__NOP();
 80044f0:	bf00      	nop
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
	__NOP();
 8004500:	bf00      	nop
}
 8004502:	bf00      	nop
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
	__NOP();
 8004510:	bf00      	nop
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8004520:	4b08      	ldr	r3, [pc, #32]	; (8004544 <EXTI0_IRQHandler+0x28>)
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <EXTI0_IRQHandler+0x28>)
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	4a04      	ldr	r2, [pc, #16]	; (8004544 <EXTI0_IRQHandler+0x28>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8004538:	f7ff ff80 	bl	800443c <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 800453c:	e000      	b.n	8004540 <EXTI0_IRQHandler+0x24>
		__NOP();
 800453e:	bf00      	nop
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40013c00 	.word	0x40013c00

08004548 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <EXTI1_IRQHandler+0x28>)
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <EXTI1_IRQHandler+0x28>)
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <EXTI1_IRQHandler+0x28>)
 800455e:	f043 0302 	orr.w	r3, r3, #2
 8004562:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8004564:	f7fe f948 	bl	80027f8 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8004568:	e000      	b.n	800456c <EXTI1_IRQHandler+0x24>
		__NOP();
 800456a:	bf00      	nop
}
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40013c00 	.word	0x40013c00

08004574 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <EXTI2_IRQHandler+0x28>)
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <EXTI2_IRQHandler+0x28>)
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <EXTI2_IRQHandler+0x28>)
 800458a:	f043 0304 	orr.w	r3, r3, #4
 800458e:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8004590:	f7ff ff5c 	bl	800444c <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8004594:	e000      	b.n	8004598 <EXTI2_IRQHandler+0x24>
		__NOP();
 8004596:	bf00      	nop
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40013c00 	.word	0x40013c00

080045a0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 80045a4:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <EXTI3_IRQHandler+0x28>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <EXTI3_IRQHandler+0x28>)
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <EXTI3_IRQHandler+0x28>)
 80045b6:	f043 0308 	orr.w	r3, r3, #8
 80045ba:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80045bc:	f7fe f970 	bl	80028a0 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80045c0:	e000      	b.n	80045c4 <EXTI3_IRQHandler+0x24>
		__NOP();
 80045c2:	bf00      	nop
}
 80045c4:	bf00      	nop
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40013c00 	.word	0x40013c00

080045cc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <EXTI4_IRQHandler+0x28>)
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <EXTI4_IRQHandler+0x28>)
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <EXTI4_IRQHandler+0x28>)
 80045e2:	f043 0310 	orr.w	r3, r3, #16
 80045e6:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 80045e8:	f7ff ff38 	bl	800445c <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 80045ec:	e000      	b.n	80045f0 <EXTI4_IRQHandler+0x24>
		__NOP();
 80045ee:	bf00      	nop
}
 80045f0:	bf00      	nop
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40013c00 	.word	0x40013c00

080045f8 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 80045fc:	4b26      	ldr	r3, [pc, #152]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8004608:	4b23      	ldr	r3, [pc, #140]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	4a22      	ldr	r2, [pc, #136]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 800460e:	f043 0320 	orr.w	r3, r3, #32
 8004612:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8004614:	f7ff ff2a 	bl	800446c <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8004618:	e03c      	b.n	8004694 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 800461a:	4b1f      	ldr	r3, [pc, #124]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8004626:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 800462c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004630:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8004632:	f7ff ff23 	bl	800447c <callback_extInt6>
}
 8004636:	e02d      	b.n	8004694 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8004638:	4b17      	ldr	r3, [pc, #92]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8004644:	4b14      	ldr	r3, [pc, #80]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4a13      	ldr	r2, [pc, #76]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8004650:	f7ff ff1c 	bl	800448c <callback_extInt7>
}
 8004654:	e01e      	b.n	8004694 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 800466e:	f7ff ff15 	bl	800449c <callback_extInt8>
}
 8004672:	e00f      	b.n	8004694 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8004674:	4b08      	ldr	r3, [pc, #32]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	4a04      	ldr	r2, [pc, #16]	; (8004698 <EXTI9_5_IRQHandler+0xa0>)
 8004686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800468a:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 800468c:	f7ff ff0e 	bl	80044ac <callback_extInt9>
}
 8004690:	e000      	b.n	8004694 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8004692:	bf00      	nop
}
 8004694:	bf00      	nop
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40013c00 	.word	0x40013c00

0800469c <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 80046a0:	4b2e      	ldr	r3, [pc, #184]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80046ac:	4b2b      	ldr	r3, [pc, #172]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	4a2a      	ldr	r2, [pc, #168]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046b6:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80046b8:	f7ff ff00 	bl	80044bc <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80046bc:	e04b      	b.n	8004756 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80046be:	4b27      	ldr	r3, [pc, #156]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4a23      	ldr	r2, [pc, #140]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046d4:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80046d6:	f7ff fef9 	bl	80044cc <callback_extInt11>
}
 80046da:	e03c      	b.n	8004756 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80046dc:	4b1f      	ldr	r3, [pc, #124]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 80046e8:	4b1c      	ldr	r3, [pc, #112]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	4a1b      	ldr	r2, [pc, #108]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046f2:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 80046f4:	f7ff fef2 	bl	80044dc <callback_extInt12>
}
 80046f8:	e02d      	b.n	8004756 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 80046fa:	4b18      	ldr	r3, [pc, #96]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4a14      	ldr	r2, [pc, #80]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 800470c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004710:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8004712:	f7ff feeb 	bl	80044ec <callback_extInt13>
}
 8004716:	e01e      	b.n	8004756 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	4a0c      	ldr	r2, [pc, #48]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 800472a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800472e:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8004730:	f7ff fee4 	bl	80044fc <callback_extInt14>
}
 8004734:	e00f      	b.n	8004756 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	4a05      	ldr	r2, [pc, #20]	; (800475c <EXTI15_10_IRQHandler+0xc0>)
 8004748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474c:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 800474e:	f7ff fedd 	bl	800450c <callback_extInt15>
}
 8004752:	e000      	b.n	8004756 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8004754:	bf00      	nop
}
 8004756:	bf00      	nop
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40013c00 	.word	0x40013c00

08004760 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	4608      	mov	r0, r1
 800476a:	4611      	mov	r1, r2
 800476c:	461a      	mov	r2, r3
 800476e:	4603      	mov	r3, r0
 8004770:	70fb      	strb	r3, [r7, #3]
 8004772:	460b      	mov	r3, r1
 8004774:	70bb      	strb	r3, [r7, #2]
 8004776:	4613      	mov	r3, r2
 8004778:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	78ba      	ldrb	r2, [r7, #2]
 8004784:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	787a      	ldrb	r2, [r7, #1]
 800478a:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7c3a      	ldrb	r2, [r7, #16]
 8004790:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	7d3a      	ldrb	r2, [r7, #20]
 8004796:	715a      	strb	r2, [r3, #5]
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a88      	ldr	r2, [pc, #544]	; (80049dc <GPIO_Config+0x238>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d106      	bne.n	80047cc <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80047be:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <GPIO_Config+0x23c>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	4a87      	ldr	r2, [pc, #540]	; (80049e0 <GPIO_Config+0x23c>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ca:	e03a      	b.n	8004842 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a84      	ldr	r2, [pc, #528]	; (80049e4 <GPIO_Config+0x240>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d106      	bne.n	80047e4 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 80047d6:	4b82      	ldr	r3, [pc, #520]	; (80049e0 <GPIO_Config+0x23c>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	4a81      	ldr	r2, [pc, #516]	; (80049e0 <GPIO_Config+0x23c>)
 80047dc:	f043 0302 	orr.w	r3, r3, #2
 80047e0:	6313      	str	r3, [r2, #48]	; 0x30
 80047e2:	e02e      	b.n	8004842 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a7f      	ldr	r2, [pc, #508]	; (80049e8 <GPIO_Config+0x244>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d106      	bne.n	80047fc <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 80047ee:	4b7c      	ldr	r3, [pc, #496]	; (80049e0 <GPIO_Config+0x23c>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	4a7b      	ldr	r2, [pc, #492]	; (80049e0 <GPIO_Config+0x23c>)
 80047f4:	f043 0304 	orr.w	r3, r3, #4
 80047f8:	6313      	str	r3, [r2, #48]	; 0x30
 80047fa:	e022      	b.n	8004842 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4a7a      	ldr	r2, [pc, #488]	; (80049ec <GPIO_Config+0x248>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d106      	bne.n	8004814 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <GPIO_Config+0x23c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	4a75      	ldr	r2, [pc, #468]	; (80049e0 <GPIO_Config+0x23c>)
 800480c:	f043 0308 	orr.w	r3, r3, #8
 8004810:	6313      	str	r3, [r2, #48]	; 0x30
 8004812:	e016      	b.n	8004842 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <GPIO_Config+0x24c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d106      	bne.n	800482c <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800481e:	4b70      	ldr	r3, [pc, #448]	; (80049e0 <GPIO_Config+0x23c>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	4a6f      	ldr	r2, [pc, #444]	; (80049e0 <GPIO_Config+0x23c>)
 8004824:	f043 0310 	orr.w	r3, r3, #16
 8004828:	6313      	str	r3, [r2, #48]	; 0x30
 800482a:	e00a      	b.n	8004842 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a70      	ldr	r2, [pc, #448]	; (80049f4 <GPIO_Config+0x250>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d105      	bne.n	8004842 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8004836:	4b6a      	ldr	r3, [pc, #424]	; (80049e0 <GPIO_Config+0x23c>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	4a69      	ldr	r2, [pc, #420]	; (80049e0 <GPIO_Config+0x23c>)
 800483c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004840:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	785b      	ldrb	r3, [r3, #1]
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	2103      	movs	r1, #3
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	4619      	mov	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	400a      	ands	r2, r1
 8004870:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	6819      	ldr	r1, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	430a      	orrs	r2, r1
 8004880:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	789b      	ldrb	r3, [r3, #2]
 8004886:	461a      	mov	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	4619      	mov	r1, r3
 800489e:	2301      	movs	r3, #1
 80048a0:	408b      	lsls	r3, r1
 80048a2:	43db      	mvns	r3, r3
 80048a4:	4619      	mov	r1, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	400a      	ands	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	78db      	ldrb	r3, [r3, #3]
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	2103      	movs	r1, #3
 80048de:	fa01 f303 	lsl.w	r3, r1, r3
 80048e2:	43db      	mvns	r3, r3
 80048e4:	4619      	mov	r1, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	400a      	ands	r2, r1
 80048ec:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	6899      	ldr	r1, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	791b      	ldrb	r3, [r3, #4]
 8004902:	461a      	mov	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	2103      	movs	r1, #3
 800491e:	fa01 f303 	lsl.w	r3, r1, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	4619      	mov	r1, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	400a      	ands	r2, r1
 800492c:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	68d9      	ldr	r1, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	430a      	orrs	r2, r1
 800493c:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d143      	bne.n	80049ce <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b07      	cmp	r3, #7
 800494c:	d81f      	bhi.n	800498e <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	6a1a      	ldr	r2, [r3, #32]
 800495c:	210f      	movs	r1, #15
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	4619      	mov	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	400a      	ands	r2, r1
 800496e:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	6a1a      	ldr	r2, [r3, #32]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	795b      	ldrb	r3, [r3, #5]
 800497a:	4619      	mov	r1, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	4619      	mov	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	430a      	orrs	r2, r1
 800498a:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 800498c:	e01f      	b.n	80049ce <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	3b08      	subs	r3, #8
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800499e:	210f      	movs	r1, #15
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	fa01 f303 	lsl.w	r3, r1, r3
 80049a6:	43db      	mvns	r3, r3
 80049a8:	4619      	mov	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	400a      	ands	r2, r1
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	795b      	ldrb	r3, [r3, #5]
 80049bc:	4619      	mov	r1, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	4619      	mov	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80049ce:	bf00      	nop
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40020000 	.word	0x40020000
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40020400 	.word	0x40020400
 80049e8:	40020800 	.word	0x40020800
 80049ec:	40020c00 	.word	0x40020c00
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40021c00 	.word	0x40021c00

080049f8 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10d      	bne.n	8004a26 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	4619      	mov	r1, r3
 8004a16:	2301      	movs	r3, #1
 8004a18:	408b      	lsls	r3, r1
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8004a24:	e00d      	b.n	8004a42 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	699a      	ldr	r2, [r3, #24]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	3310      	adds	r3, #16
 8004a32:	2101      	movs	r1, #1
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	4619      	mov	r1, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	619a      	str	r2, [r3, #24]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	4619      	mov	r1, r3
 8004a62:	2301      	movs	r3, #1
 8004a64:	408b      	lsls	r3, r1
 8004a66:	4619      	mov	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	404a      	eors	r2, r1
 8004a6e:	615a      	str	r2, [r3, #20]
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 8004a84:	f000 fa9c 	bl	8004fc0 <getClockAPB1>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a60      	ldr	r2, [pc, #384]	; (8004c14 <i2c_Config+0x198>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d106      	bne.n	8004aa4 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8004a96:	4b60      	ldr	r3, [pc, #384]	; (8004c18 <i2c_Config+0x19c>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a5f      	ldr	r2, [pc, #380]	; (8004c18 <i2c_Config+0x19c>)
 8004a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	e016      	b.n	8004ad2 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a5c      	ldr	r2, [pc, #368]	; (8004c1c <i2c_Config+0x1a0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d106      	bne.n	8004abc <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8004aae:	4b5a      	ldr	r3, [pc, #360]	; (8004c18 <i2c_Config+0x19c>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	4a59      	ldr	r2, [pc, #356]	; (8004c18 <i2c_Config+0x19c>)
 8004ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8004aba:	e00a      	b.n	8004ad2 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a57      	ldr	r2, [pc, #348]	; (8004c20 <i2c_Config+0x1a4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d105      	bne.n	8004ad2 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8004ac6:	4b54      	ldr	r3, [pc, #336]	; (8004c18 <i2c_Config+0x19c>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	4a53      	ldr	r2, [pc, #332]	; (8004c18 <i2c_Config+0x19c>)
 8004acc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ad0:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae0:	601a      	str	r2, [r3, #0]
	__NOP();
 8004ae2:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004af2:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004b02:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2200      	movs	r2, #0
 8004b22:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	795b      	ldrb	r3, [r3, #5]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d121      	bne.n	8004b78 <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b42:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	0092      	lsls	r2, r2, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69d9      	ldr	r1, [r3, #28]
 8004b56:	89ba      	ldrh	r2, [r7, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	3301      	adds	r3, #1
 8004b64:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6a19      	ldr	r1, [r3, #32]
 8004b6c:	7afa      	ldrb	r2, [r7, #11]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	621a      	str	r2, [r3, #32]
 8004b76:	e039      	b.n	8004bec <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b86:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b96:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	4a20      	ldr	r2, [pc, #128]	; (8004c24 <i2c_Config+0x1a8>)
 8004ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8004ba8:	1192      	asrs	r2, r2, #6
 8004baa:	17db      	asrs	r3, r3, #31
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69d9      	ldr	r1, [r3, #28]
 8004bb6:	89ba      	ldrh	r2, [r7, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <i2c_Config+0x1ac>)
 8004bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8004bd0:	1192      	asrs	r2, r2, #6
 8004bd2:	17db      	asrs	r3, r3, #31
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6a19      	ldr	r1, [r3, #32]
 8004be2:	7afa      	ldrb	r2, [r7, #11]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40005400 	.word	0x40005400
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40005800 	.word	0x40005800
 8004c20:	40005c00 	.word	0x40005c00
 8004c24:	057619f1 	.word	0x057619f1
 8004c28:	10624dd3 	.word	0x10624dd3

08004c2c <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8004c34:	e000      	b.n	8004c38 <i2c_StartTrasaction+0xc>
	{
		__NOP();
 8004c36:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f7      	bne.n	8004c36 <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c54:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8004c56:	e000      	b.n	8004c5a <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8004c58:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f7      	beq.n	8004c58 <i2c_StartTrasaction+0x2c>
	}
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c8c:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8004c8e:	e000      	b.n	8004c92 <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 8004c90:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f7      	beq.n	8004c90 <i2c_ReStartTrasaction+0x1a>
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	70fb      	strb	r3, [r7, #3]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	005a      	lsls	r2, r3, #1
 8004cc6:	78bb      	ldrb	r3, [r7, #2]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8004cd0:	e000      	b.n	8004cd4 <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 8004cd2:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f7      	beq.n	8004cd2 <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	73fb      	strb	r3, [r7, #15]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	460b      	mov	r3, r1
 8004d08:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8004d12:	e000      	b.n	8004d16 <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 8004d14:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f7      	beq.n	8004d14 <i2c_SendMemoryAddress+0x16>
	}
}
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8004d46:	e000      	b.n	8004d4a <i2c_SendDataByte+0x18>
	{
		__NOP();
 8004d48:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f7      	beq.n	8004d48 <i2c_SendDataByte+0x16>
	}
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8004d6e:	e000      	b.n	8004d72 <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8004d70:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0f7      	beq.n	8004d70 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	799b      	ldrb	r3, [r3, #6]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db2:	601a      	str	r2, [r3, #0]

}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd6:	601a      	str	r2, [r3, #0]
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7ff ff19 	bl	8004c2c <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	791b      	ldrb	r3, [r3, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff ff53 	bl	8004cae <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7ff ff76 	bl	8004cfe <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff ff2f 	bl	8004c76 <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	791b      	ldrb	r3, [r3, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ff44 	bl	8004cae <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ff9d 	bl	8004d66 <i2c_ReadDataByte>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ffb3 	bl	8004d9c <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ffc2 	bl	8004dc0 <i2c_StopTrasaction>

	return auxRead;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	70fb      	strb	r3, [r7, #3]
 8004e52:	4613      	mov	r3, r2
 8004e54:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fee8 	bl	8004c2c <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff ff22 	bl	8004cae <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff ff45 	bl	8004cfe <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 8004e74:	78bb      	ldrb	r3, [r7, #2]
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff5a 	bl	8004d32 <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff ff9e 	bl	8004dc0 <i2c_StopTrasaction>
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8004e96:	4a39      	ldr	r2, [pc, #228]	; (8004f7c <configPLL+0xf0>)
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	2b31      	cmp	r3, #49	; 0x31
 8004ea0:	d804      	bhi.n	8004eac <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8004ea2:	4b37      	ldr	r3, [pc, #220]	; (8004f80 <configPLL+0xf4>)
 8004ea4:	4a36      	ldr	r2, [pc, #216]	; (8004f80 <configPLL+0xf4>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	6093      	str	r3, [r2, #8]
 8004eaa:	e005      	b.n	8004eb8 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004eac:	4b34      	ldr	r3, [pc, #208]	; (8004f80 <configPLL+0xf4>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <configPLL+0xf4>)
 8004eb2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004eb6:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8004eb8:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <configPLL+0xf4>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a30      	ldr	r2, [pc, #192]	; (8004f80 <configPLL+0xf4>)
 8004ebe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004ec2:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <configPLL+0xf4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a2d      	ldr	r2, [pc, #180]	; (8004f80 <configPLL+0xf4>)
 8004eca:	f043 0312 	orr.w	r3, r3, #18
 8004ece:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <configPLL+0xf4>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	79fa      	ldrb	r2, [r7, #7]
 8004ed6:	0092      	lsls	r2, r2, #2
 8004ed8:	3a0e      	subs	r2, #14
 8004eda:	0192      	lsls	r2, r2, #6
 8004edc:	4611      	mov	r1, r2
 8004ede:	4a28      	ldr	r2, [pc, #160]	; (8004f80 <configPLL+0xf4>)
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8004ee4:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <configPLL+0xf4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <configPLL+0xf4>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eee:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8004ef0:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <configPLL+0xf4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <configPLL+0xf4>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004efc:	e000      	b.n	8004f00 <configPLL+0x74>
	{
		__NOP();
 8004efe:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004f00:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <configPLL+0xf4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f8      	beq.n	8004efe <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	2b5a      	cmp	r3, #90	; 0x5a
 8004f10:	d909      	bls.n	8004f26 <configPLL+0x9a>
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	2b64      	cmp	r3, #100	; 0x64
 8004f16:	d806      	bhi.n	8004f26 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8004f18:	4b1a      	ldr	r3, [pc, #104]	; (8004f84 <configPLL+0xf8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <configPLL+0xf8>)
 8004f1e:	f043 0303 	orr.w	r3, r3, #3
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	e01d      	b.n	8004f62 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d909      	bls.n	8004f40 <configPLL+0xb4>
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	2b5a      	cmp	r3, #90	; 0x5a
 8004f30:	d806      	bhi.n	8004f40 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <configPLL+0xf8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <configPLL+0xf8>)
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e010      	b.n	8004f62 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	2b1e      	cmp	r3, #30
 8004f44:	d909      	bls.n	8004f5a <configPLL+0xce>
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d806      	bhi.n	8004f5a <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <configPLL+0xf8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <configPLL+0xf8>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e003      	b.n	8004f62 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <configPLL+0xf8>)
 8004f5c:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <configPLL+0xf8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8004f62:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <configPLL+0xf4>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4a06      	ldr	r2, [pc, #24]	; (8004f80 <configPLL+0xf4>)
 8004f68:	f043 0302 	orr.w	r3, r3, #2
 8004f6c:	6093      	str	r3, [r2, #8]

}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200004f4 	.word	0x200004f4
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40023c00 	.word	0x40023c00

08004f88 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <getConfigPLL+0x30>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d103      	bne.n	8004fa6 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <getConfigPLL+0x34>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	71fb      	strb	r3, [r7, #7]
 8004fa4:	e001      	b.n	8004faa <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8004fa6:	2310      	movs	r3, #16
 8004fa8:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8004faa:	79fb      	ldrb	r3, [r7, #7]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	200004f4 	.word	0x200004f4

08004fc0 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8004fc6:	f7ff ffdf 	bl	8004f88 <getConfigPLL>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8004fce:	2300      	movs	r3, #0
 8004fd0:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8004fd2:	79bb      	ldrb	r3, [r7, #6]
 8004fd4:	2b31      	cmp	r3, #49	; 0x31
 8004fd6:	d802      	bhi.n	8004fde <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8004fd8:	79bb      	ldrb	r3, [r7, #6]
 8004fda:	71fb      	strb	r3, [r7, #7]
 8004fdc:	e002      	b.n	8004fe4 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8004fde:	79bb      	ldrb	r3, [r7, #6]
 8004fe0:	089b      	lsrs	r3, r3, #2
 8004fe2:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <configMCO2+0x34>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4a09      	ldr	r2, [pc, #36]	; (8005024 <configMCO2+0x34>)
 8005000:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005004:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <configMCO2+0x34>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	79fa      	ldrb	r2, [r7, #7]
 800500c:	0792      	lsls	r2, r2, #30
 800500e:	4611      	mov	r1, r2
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <configMCO2+0x34>)
 8005012:	430b      	orrs	r3, r1
 8005014:	6093      	str	r3, [r2, #8]
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800

08005028 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	4603      	mov	r3, r0
 8005030:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	3b01      	subs	r3, #1
 8005036:	2b04      	cmp	r3, #4
 8005038:	d84b      	bhi.n	80050d2 <configMCO2PRE+0xaa>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <configMCO2PRE+0x18>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005055 	.word	0x08005055
 8005044:	0800506b 	.word	0x0800506b
 8005048:	08005085 	.word	0x08005085
 800504c:	0800509f 	.word	0x0800509f
 8005050:	080050b9 	.word	0x080050b9
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8005054:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <configMCO2PRE+0xbc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	4a22      	ldr	r2, [pc, #136]	; (80050e4 <configMCO2PRE+0xbc>)
 800505a:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800505e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8005060:	4b20      	ldr	r3, [pc, #128]	; (80050e4 <configMCO2PRE+0xbc>)
 8005062:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <configMCO2PRE+0xbc>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	6093      	str	r3, [r2, #8]
			break;
 8005068:	e035      	b.n	80050d6 <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800506a:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <configMCO2PRE+0xbc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <configMCO2PRE+0xbc>)
 8005070:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8005074:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8005076:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <configMCO2PRE+0xbc>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4a1a      	ldr	r2, [pc, #104]	; (80050e4 <configMCO2PRE+0xbc>)
 800507c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005080:	6093      	str	r3, [r2, #8]
			break;
 8005082:	e028      	b.n	80050d6 <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8005084:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <configMCO2PRE+0xbc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <configMCO2PRE+0xbc>)
 800508a:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800508e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8005090:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <configMCO2PRE+0xbc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <configMCO2PRE+0xbc>)
 8005096:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 800509a:	6093      	str	r3, [r2, #8]
			break;
 800509c:	e01b      	b.n	80050d6 <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800509e:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <configMCO2PRE+0xbc>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <configMCO2PRE+0xbc>)
 80050a4:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80050a8:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <configMCO2PRE+0xbc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <configMCO2PRE+0xbc>)
 80050b0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80050b4:	6093      	str	r3, [r2, #8]
			break;
 80050b6:	e00e      	b.n	80050d6 <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <configMCO2PRE+0xbc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <configMCO2PRE+0xbc>)
 80050be:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80050c2:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 80050c4:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <configMCO2PRE+0xbc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	4a06      	ldr	r2, [pc, #24]	; (80050e4 <configMCO2PRE+0xbc>)
 80050ca:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80050ce:	6093      	str	r3, [r2, #8]
			break;
 80050d0:	e001      	b.n	80050d6 <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 80050d2:	bf00      	nop
			break;
 80050d4:	bf00      	nop
		}
	}

}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	40023800 	.word	0x40023800

080050e8 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f8:	d106      	bne.n	8005108 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80050fa:	4b81      	ldr	r3, [pc, #516]	; (8005300 <pwm_Config+0x218>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	4a80      	ldr	r2, [pc, #512]	; (8005300 <pwm_Config+0x218>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6413      	str	r3, [r2, #64]	; 0x40
 8005106:	e024      	b.n	8005152 <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a7d      	ldr	r2, [pc, #500]	; (8005304 <pwm_Config+0x21c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d106      	bne.n	8005120 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005112:	4b7b      	ldr	r3, [pc, #492]	; (8005300 <pwm_Config+0x218>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	4a7a      	ldr	r2, [pc, #488]	; (8005300 <pwm_Config+0x218>)
 8005118:	f043 0302 	orr.w	r3, r3, #2
 800511c:	6413      	str	r3, [r2, #64]	; 0x40
 800511e:	e018      	b.n	8005152 <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a78      	ldr	r2, [pc, #480]	; (8005308 <pwm_Config+0x220>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d106      	bne.n	8005138 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800512a:	4b75      	ldr	r3, [pc, #468]	; (8005300 <pwm_Config+0x218>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a74      	ldr	r2, [pc, #464]	; (8005300 <pwm_Config+0x218>)
 8005130:	f043 0304 	orr.w	r3, r3, #4
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	e00c      	b.n	8005152 <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4a73      	ldr	r2, [pc, #460]	; (800530c <pwm_Config+0x224>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d106      	bne.n	8005150 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8005142:	4b6f      	ldr	r3, [pc, #444]	; (8005300 <pwm_Config+0x218>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	4a6e      	ldr	r2, [pc, #440]	; (8005300 <pwm_Config+0x218>)
 8005148:	f043 0308 	orr.w	r3, r3, #8
 800514c:	6413      	str	r3, [r2, #64]	; 0x40
 800514e:	e000      	b.n	8005152 <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8005150:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa4c 	bl	80055f0 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	f200 8118 	bhi.w	8005392 <pwm_Config+0x2aa>
 8005162:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <pwm_Config+0x80>)
 8005164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005168:	08005179 	.word	0x08005179
 800516c:	080051fb 	.word	0x080051fb
 8005170:	0800527d 	.word	0x0800527d
 8005174:	08005311 	.word	0x08005311
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f022 0203 	bic.w	r2, r2, #3
 8005186:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005196:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80051a6:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f022 0208 	bic.w	r2, r2, #8
 80051b6:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f042 0208 	orr.w	r2, r2, #8
 80051c6:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f022 0204 	bic.w	r2, r2, #4
 80051d6:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f042 0204 	orr.w	r2, r2, #4
 80051e6:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051f6:	619a      	str	r2, [r3, #24]

		break;
 80051f8:	e0cc      	b.n	8005394 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f022 0203 	bic.w	r2, r2, #3
 8005208:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005218:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8005228:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005238:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005248:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005258:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	699a      	ldr	r2, [r3, #24]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005268:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	699a      	ldr	r2, [r3, #24]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005278:	619a      	str	r2, [r3, #24]

		break;
 800527a:	e08b      	b.n	8005394 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f022 0203 	bic.w	r2, r2, #3
 800528a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800529a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80052aa:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f022 0208 	bic.w	r2, r2, #8
 80052ba:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f042 0208 	orr.w	r2, r2, #8
 80052ca:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	69da      	ldr	r2, [r3, #28]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f022 0204 	bic.w	r2, r2, #4
 80052da:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	69da      	ldr	r2, [r3, #28]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f042 0204 	orr.w	r2, r2, #4
 80052ea:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052fa:	61da      	str	r2, [r3, #28]

		break;
 80052fc:	e04a      	b.n	8005394 <pwm_Config+0x2ac>
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800531e:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800532e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800533e:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	69da      	ldr	r2, [r3, #28]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800534e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	69da      	ldr	r2, [r3, #28]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800535e:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	69da      	ldr	r2, [r3, #28]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800537e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800538e:	61da      	str	r2, [r3, #28]

		break;
 8005390:	e000      	b.n	8005394 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8005392:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	791b      	ldrb	r3, [r3, #4]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f896 	bl	80054cc <statusPolarityPWM>

}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d87f      	bhi.n	80054bc <statusInOutPWM+0x114>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <statusInOutPWM+0x1c>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	0800540f 	.word	0x0800540f
 80053cc:	08005449 	.word	0x08005449
 80053d0:	08005483 	.word	0x08005483
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d110      	bne.n	80053fc <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f022 0201 	bic.w	r2, r2, #1
 80053e8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	6a1a      	ldr	r2, [r3, #32]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f042 0201 	orr.w	r2, r2, #1
 80053f8:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 80053fa:	e060      	b.n	80054be <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	621a      	str	r2, [r3, #32]
		break;
 800540c:	e057      	b.n	80054be <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d110      	bne.n	8005436 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	6a1a      	ldr	r2, [r3, #32]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f022 0210 	bic.w	r2, r2, #16
 8005422:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	6a1a      	ldr	r2, [r3, #32]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f042 0210 	orr.w	r2, r2, #16
 8005432:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8005434:	e043      	b.n	80054be <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f022 0210 	bic.w	r2, r2, #16
 8005444:	621a      	str	r2, [r3, #32]
		break;
 8005446:	e03a      	b.n	80054be <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d110      	bne.n	8005470 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800545c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	6a1a      	ldr	r2, [r3, #32]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546c:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 800546e:	e026      	b.n	80054be <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	6a1a      	ldr	r2, [r3, #32]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800547e:	621a      	str	r2, [r3, #32]
		break;
 8005480:	e01d      	b.n	80054be <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d110      	bne.n	80054aa <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	6a1a      	ldr	r2, [r3, #32]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005496:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	6a1a      	ldr	r2, [r3, #32]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054a6:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 80054a8:	e009      	b.n	80054be <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	6a1a      	ldr	r2, [r3, #32]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054b8:	621a      	str	r2, [r3, #32]
		break;
 80054ba:	e000      	b.n	80054be <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 80054bc:	bf00      	nop
	}
	}
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop

080054cc <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d87f      	bhi.n	80055e0 <statusPolarityPWM+0x114>
 80054e0:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <statusPolarityPWM+0x1c>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	08005533 	.word	0x08005533
 80054f0:	0800556d 	.word	0x0800556d
 80054f4:	080055a7 	.word	0x080055a7
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d110      	bne.n	8005520 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f022 0202 	bic.w	r2, r2, #2
 800550c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	6a1a      	ldr	r2, [r3, #32]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f042 0202 	orr.w	r2, r2, #2
 800551c:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 800551e:	e060      	b.n	80055e2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	6a1a      	ldr	r2, [r3, #32]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f022 0202 	bic.w	r2, r2, #2
 800552e:	621a      	str	r2, [r3, #32]
		break;
 8005530:	e057      	b.n	80055e2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d110      	bne.n	800555a <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f022 0220 	bic.w	r2, r2, #32
 8005546:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f042 0220 	orr.w	r2, r2, #32
 8005556:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8005558:	e043      	b.n	80055e2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f022 0220 	bic.w	r2, r2, #32
 8005568:	621a      	str	r2, [r3, #32]
		break;
 800556a:	e03a      	b.n	80055e2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d110      	bne.n	8005594 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005580:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005590:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8005592:	e026      	b.n	80055e2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	6a1a      	ldr	r2, [r3, #32]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055a2:	621a      	str	r2, [r3, #32]
		break;
 80055a4:	e01d      	b.n	80055e2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d110      	bne.n	80055ce <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	6a1a      	ldr	r2, [r3, #32]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ba:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	6a1a      	ldr	r2, [r3, #32]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ca:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 80055cc:	e009      	b.n	80055e2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055dc:	621a      	str	r2, [r3, #32]
		break;
 80055de:	e000      	b.n	80055e2 <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 80055e0:	bf00      	nop
	}
	}

}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop

080055f0 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d823      	bhi.n	8005648 <setDuttyCycle+0x58>
 8005600:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <setDuttyCycle+0x18>)
 8005602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005606:	bf00      	nop
 8005608:	08005619 	.word	0x08005619
 800560c:	08005625 	.word	0x08005625
 8005610:	08005631 	.word	0x08005631
 8005614:	0800563d 	.word	0x0800563d
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	885a      	ldrh	r2, [r3, #2]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8005622:	e012      	b.n	800564a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	885a      	ldrh	r2, [r3, #2]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800562e:	e00c      	b.n	800564a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	885a      	ldrh	r2, [r3, #2]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800563a:	e006      	b.n	800564a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	885a      	ldrh	r2, [r3, #2]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8005646:	e000      	b.n	800564a <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8005648:	bf00      	nop
	}
	}

}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop

08005658 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	4a0d      	ldr	r2, [pc, #52]	; (80056a0 <updateDuttyCyclePercentageFloat+0x48>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	095b      	lsrs	r3, r3, #5
 8005672:	b29b      	uxth	r3, r3
 8005674:	ee07 3a90 	vmov	s15, r3
 8005678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800567c:	edd7 7a00 	vldr	s15, [r7]
 8005680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005688:	ee17 3a90 	vmov	r3, s15
 800568c:	b29a      	uxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff ffac 	bl	80055f0 <setDuttyCycle>
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	51eb851f 	.word	0x51eb851f

080056a4 <__NVIC_EnableIRQ>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	db0b      	blt.n	80056ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	f003 021f 	and.w	r2, r3, #31
 80056bc:	4907      	ldr	r1, [pc, #28]	; (80056dc <__NVIC_EnableIRQ+0x38>)
 80056be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	2001      	movs	r0, #1
 80056c6:	fa00 f202 	lsl.w	r2, r0, r2
 80056ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	e000e100 	.word	0xe000e100

080056e0 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 80056e6:	4919      	ldr	r1, [pc, #100]	; (800574c <config_SysTick_ms+0x6c>)
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80056f4:	f7ff fc48 	bl	8004f88 <getConfigPLL>
 80056f8:	4603      	mov	r3, r0
 80056fa:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005702:	fb03 f202 	mul.w	r2, r3, r2
 8005706:	4b12      	ldr	r3, [pc, #72]	; (8005750 <config_SysTick_ms+0x70>)
 8005708:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 800570a:	4b11      	ldr	r3, [pc, #68]	; (8005750 <config_SysTick_ms+0x70>)
 800570c:	2200      	movs	r2, #0
 800570e:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <config_SysTick_ms+0x70>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a0e      	ldr	r2, [pc, #56]	; (8005750 <config_SysTick_ms+0x70>)
 8005716:	f043 0304 	orr.w	r3, r3, #4
 800571a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800571c:	b672      	cpsid	i
}
 800571e:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	f7ff ffbe 	bl	80056a4 <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8005728:	4b09      	ldr	r3, [pc, #36]	; (8005750 <config_SysTick_ms+0x70>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a08      	ldr	r2, [pc, #32]	; (8005750 <config_SysTick_ms+0x70>)
 800572e:	f043 0302 	orr.w	r3, r3, #2
 8005732:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <config_SysTick_ms+0x70>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a05      	ldr	r2, [pc, #20]	; (8005750 <config_SysTick_ms+0x70>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005740:	b662      	cpsie	i
}
 8005742:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	200004f8 	.word	0x200004f8
 8005750:	e000e010 	.word	0xe000e010

08005754 <getTicksMs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksMs(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
	return ticks;
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <getTicksMs+0x18>)
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	200004f8 	.word	0x200004f8

08005770 <delay_ms>:

//Funcion que genera un delay de ms
void delay_ms(uint32_t wait_time_ms)
{
 8005770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
	//Guardamos el valor de ticks transcurridos hasta el momento
	ticks_start = getTicksMs();
 800577a:	f7ff ffeb 	bl	8005754 <getTicksMs>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4914      	ldr	r1, [pc, #80]	; (80057d4 <delay_ms+0x64>)
 8005784:	e9c1 2300 	strd	r2, r3, [r1]
	//Guardamos tambien el valor de ticks transcurridos hasta el momento en una nueva variable
	ticks_counting = getTicksMs();
 8005788:	f7ff ffe4 	bl	8005754 <getTicksMs>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4911      	ldr	r1, [pc, #68]	; (80057d8 <delay_ms+0x68>)
 8005792:	e9c1 2300 	strd	r2, r3, [r1]

	//Realizamos un while que espera que se cumpla el tiempo asignado
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 8005796:	e006      	b.n	80057a6 <delay_ms+0x36>
	{
		//Actualizamos el valor
		ticks_counting = getTicksMs();
 8005798:	f7ff ffdc 	bl	8005754 <getTicksMs>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	490d      	ldr	r1, [pc, #52]	; (80057d8 <delay_ms+0x68>)
 80057a2:	e9c1 2300 	strd	r2, r3, [r1]
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	4698      	mov	r8, r3
 80057ac:	4691      	mov	r9, r2
 80057ae:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <delay_ms+0x64>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	eb18 0402 	adds.w	r4, r8, r2
 80057b8:	eb49 0503 	adc.w	r5, r9, r3
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <delay_ms+0x68>)
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	42a2      	cmp	r2, r4
 80057c4:	41ab      	sbcs	r3, r5
 80057c6:	d3e7      	bcc.n	8005798 <delay_ms+0x28>
	}
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057d4:	20000500 	.word	0x20000500
 80057d8:	20000508 	.word	0x20000508

080057dc <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <SysTick_Handler+0x38>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00e      	beq.n	800580a <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <SysTick_Handler+0x38>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a08      	ldr	r2, [pc, #32]	; (8005814 <SysTick_Handler+0x38>)
 80057f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f6:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 80057f8:	4b07      	ldr	r3, [pc, #28]	; (8005818 <SysTick_Handler+0x3c>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	1c50      	adds	r0, r2, #1
 8005800:	f143 0100 	adc.w	r1, r3, #0
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <SysTick_Handler+0x3c>)
 8005806:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000e010 	.word	0xe000e010
 8005818:	200004f8 	.word	0x200004f8

0800581c <__NVIC_EnableIRQ>:
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582a:	2b00      	cmp	r3, #0
 800582c:	db0b      	blt.n	8005846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	f003 021f 	and.w	r2, r3, #31
 8005834:	4907      	ldr	r1, [pc, #28]	; (8005854 <__NVIC_EnableIRQ+0x38>)
 8005836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	2001      	movs	r0, #1
 800583e:	fa00 f202 	lsl.w	r2, r0, r2
 8005842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	e000e100 	.word	0xe000e100

08005858 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4a8f      	ldr	r2, [pc, #572]	; (8005aa4 <USART_Config+0x24c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d107      	bne.n	800587a <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 800586a:	4b8f      	ldr	r3, [pc, #572]	; (8005aa8 <USART_Config+0x250>)
 800586c:	2210      	movs	r2, #16
 800586e:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4a8d      	ldr	r2, [pc, #564]	; (8005aac <USART_Config+0x254>)
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e019      	b.n	80058ae <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	4a8c      	ldr	r2, [pc, #560]	; (8005ab0 <USART_Config+0x258>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8005884:	4b88      	ldr	r3, [pc, #544]	; (8005aa8 <USART_Config+0x250>)
 8005886:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4a88      	ldr	r2, [pc, #544]	; (8005ab4 <USART_Config+0x25c>)
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	e00b      	b.n	80058ae <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	4a87      	ldr	r2, [pc, #540]	; (8005ab8 <USART_Config+0x260>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d106      	bne.n	80058ae <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 80058a0:	4b81      	ldr	r3, [pc, #516]	; (8005aa8 <USART_Config+0x250>)
 80058a2:	2220      	movs	r2, #32
 80058a4:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	4a84      	ldr	r2, [pc, #528]	; (8005abc <USART_Config+0x264>)
 80058ac:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2200      	movs	r2, #0
 80058b4:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	2200      	movs	r2, #0
 80058bc:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	789b      	ldrb	r3, [r3, #2]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03d      	beq.n	8005942 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058e4:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058f4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005904:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	789b      	ldrb	r3, [r3, #2]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d110      	bne.n	8005930 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800591c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e018      	b.n	8005962 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	e00f      	b.n	8005962 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005950:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005960:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	78db      	ldrb	r3, [r3, #3]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d84c      	bhi.n	8005a04 <USART_Config+0x1ac>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <USART_Config+0x118>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	08005981 	.word	0x08005981
 8005974:	0800599f 	.word	0x0800599f
 8005978:	080059c1 	.word	0x080059c1
 800597c:	080059e3 	.word	0x080059e3
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	691a      	ldr	r2, [r3, #16]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800598e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	6912      	ldr	r2, [r2, #16]
 800599a:	611a      	str	r2, [r3, #16]
		break;
 800599c:	e041      	b.n	8005a22 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80059ac:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059bc:	611a      	str	r2, [r3, #16]
		break;
 80059be:	e030      	b.n	8005a22 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80059ce:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059de:	611a      	str	r2, [r3, #16]
		break;
 80059e0:	e01f      	b.n	8005a22 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80059f0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005a00:	611a      	str	r2, [r3, #16]
		break;
 8005a02:	e00e      	b.n	8005a22 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005a12:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	6912      	ldr	r2, [r2, #16]
 8005a1e:	611a      	str	r2, [r3, #16]
		break;
 8005a20:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4a21      	ldr	r2, [pc, #132]	; (8005ab0 <USART_Config+0x258>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d104      	bne.n	8005a3a <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8005a30:	f7ff fac6 	bl	8004fc0 <getClockAPB1>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e003      	b.n	8005a42 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8005a3a:	f7ff faa5 	bl	8004f88 <getConfigPLL>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	785b      	ldrb	r3, [r3, #1]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f91f 	bl	8005c94 <getValueBaudRate>
 8005a56:	4603      	mov	r3, r0
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	e02f      	b.n	8005ac2 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d10b      	bne.n	8005a82 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 f90f 	bl	8005c94 <getValueBaudRate>
 8005a76:	4603      	mov	r3, r0
 8005a78:	461a      	mov	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	e01f      	b.n	8005ac2 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d11a      	bne.n	8005ac0 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f8ff 	bl	8005c94 <getValueBaudRate>
 8005a96:	4603      	mov	r3, r0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	e00f      	b.n	8005ac2 <USART_Config+0x26a>
 8005aa2:	bf00      	nop
 8005aa4:	40011000 	.word	0x40011000
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	20000510 	.word	0x20000510
 8005ab0:	40004400 	.word	0x40004400
 8005ab4:	20000514 	.word	0x20000514
 8005ab8:	40011400 	.word	0x40011400
 8005abc:	20000518 	.word	0x20000518
	}
	else
	{
		__NOP();
 8005ac0:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d866      	bhi.n	8005b98 <USART_Config+0x340>
 8005aca:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <USART_Config+0x278>)
 8005acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad0:	08005ae1 	.word	0x08005ae1
 8005ad4:	08005b03 	.word	0x08005b03
 8005ad8:	08005b25 	.word	0x08005b25
 8005adc:	08005b67 	.word	0x08005b67
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f022 0208 	bic.w	r2, r2, #8
 8005aee:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f042 0208 	orr.w	r2, r2, #8
 8005afe:	60da      	str	r2, [r3, #12]

		break;
 8005b00:	e063      	b.n	8005bca <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f022 0204 	bic.w	r2, r2, #4
 8005b10:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f042 0204 	orr.w	r2, r2, #4
 8005b20:	60da      	str	r2, [r3, #12]

		break;
 8005b22:	e052      	b.n	8005bca <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f022 0208 	bic.w	r2, r2, #8
 8005b32:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f042 0208 	orr.w	r2, r2, #8
 8005b42:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f022 0204 	bic.w	r2, r2, #4
 8005b52:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f042 0204 	orr.w	r2, r2, #4
 8005b62:	60da      	str	r2, [r3, #12]


		break;
 8005b64:	e031      	b.n	8005bca <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b74:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f022 0208 	bic.w	r2, r2, #8
 8005b84:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f022 0204 	bic.w	r2, r2, #4
 8005b94:	60da      	str	r2, [r3, #12]
		break;
 8005b96:	e018      	b.n	8005bca <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f022 0208 	bic.w	r2, r2, #8
 8005bb6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f022 0204 	bic.w	r2, r2, #4
 8005bc6:	60da      	str	r2, [r3, #12]
		break;
 8005bc8:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8005bca:	b672      	cpsid	i
}
 8005bcc:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	791b      	ldrb	r3, [r3, #4]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d110      	bne.n	8005bf8 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f022 0220 	bic.w	r2, r2, #32
 8005be4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f042 0220 	orr.w	r2, r2, #32
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	e007      	b.n	8005c08 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f022 0220 	bic.w	r2, r2, #32
 8005c06:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d003      	beq.n	8005c18 <USART_Config+0x3c0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	795b      	ldrb	r3, [r3, #5]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d11a      	bne.n	8005c4e <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a1a      	ldr	r2, [pc, #104]	; (8005c88 <USART_Config+0x430>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d103      	bne.n	8005c2a <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8005c22:	2025      	movs	r0, #37	; 0x25
 8005c24:	f7ff fdfa 	bl	800581c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005c28:	e013      	b.n	8005c52 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <USART_Config+0x434>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d103      	bne.n	8005c3c <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8005c34:	2026      	movs	r0, #38	; 0x26
 8005c36:	f7ff fdf1 	bl	800581c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005c3a:	e00a      	b.n	8005c52 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <USART_Config+0x438>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d105      	bne.n	8005c52 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8005c46:	2047      	movs	r0, #71	; 0x47
 8005c48:	f7ff fde8 	bl	800581c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005c4c:	e001      	b.n	8005c52 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8005c4e:	bf00      	nop
 8005c50:	e000      	b.n	8005c54 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005c52:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8005c54:	b662      	cpsie	i
}
 8005c56:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b03      	cmp	r3, #3
 8005c5e:	d00f      	beq.n	8005c80 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c7e:	60da      	str	r2, [r3, #12]
	}
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40011000 	.word	0x40011000
 8005c8c:	40004400 	.word	0x40004400
 8005c90:	40011400 	.word	0x40011400

08005c94 <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8005c94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c98:	b086      	sub	sp, #24
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6039      	str	r1, [r7, #0]
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8005ca2:	79f9      	ldrb	r1, [r7, #7]
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	460a      	mov	r2, r1
 8005ca8:	4603      	mov	r3, r0
 8005caa:	491f      	ldr	r1, [pc, #124]	; (8005d28 <getValueBaudRate+0x94>)
 8005cac:	fb01 f003 	mul.w	r0, r1, r3
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	fb02 f101 	mul.w	r1, r2, r1
 8005cb6:	4401      	add	r1, r0
 8005cb8:	481b      	ldr	r0, [pc, #108]	; (8005d28 <getValueBaudRate+0x94>)
 8005cba:	fba2 4500 	umull	r4, r5, r2, r0
 8005cbe:	194b      	adds	r3, r1, r5
 8005cc0:	461d      	mov	r5, r3
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	4698      	mov	r8, r3
 8005cca:	4691      	mov	r9, r2
 8005ccc:	4642      	mov	r2, r8
 8005cce:	464b      	mov	r3, r9
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fb f8fe 	bl	8000ed4 <__aeabi_ldivmod>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4613      	mov	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <getValueBaudRate+0x98>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	0b5b      	lsrs	r3, r3, #13
 8005cea:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cf2:	fb02 f303 	mul.w	r3, r2, r3
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005d02:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <getValueBaudRate+0x98>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	0a5b      	lsrs	r3, r3, #9
 8005d0a:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	7afb      	ldrb	r3, [r7, #11]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	813b      	strh	r3, [r7, #8]

    return value;
 8005d1c:	893b      	ldrh	r3, [r7, #8]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d28:	540be400 	.word	0x540be400
 8005d2c:	d1b71759 	.word	0xd1b71759

08005d30 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8005d3a:	4b16      	ldr	r3, [pc, #88]	; (8005d94 <writeMsgForTXE+0x64>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d111      	bne.n	8005d66 <writeMsgForTXE+0x36>
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <writeMsgForTXE+0x68>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10d      	bne.n	8005d66 <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	4813      	ldr	r0, [pc, #76]	; (8005d9c <writeMsgForTXE+0x6c>)
 8005d4e:	f001 f8a9 	bl	8006ea4 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8005d52:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <writeMsgForTXE+0x70>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f830 	bl	8005dc4 <interruptionTX>
 8005d64:	e012      	b.n	8005d8c <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8005d66:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <writeMsgForTXE+0x74>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2364      	movs	r3, #100	; 0x64
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	4a0d      	ldr	r2, [pc, #52]	; (8005da8 <writeMsgForTXE+0x78>)
 8005d74:	4413      	add	r3, r2
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 f893 	bl	8006ea4 <siprintf>
		inLine++;
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <writeMsgForTXE+0x74>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	4b07      	ldr	r3, [pc, #28]	; (8005da4 <writeMsgForTXE+0x74>)
 8005d88:	701a      	strb	r2, [r3, #0]
	}
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000d56 	.word	0x20000d56
 8005d98:	20000d55 	.word	0x20000d55
 8005d9c:	20000520 	.word	0x20000520
 8005da0:	20000d57 	.word	0x20000d57
 8005da4:	20000d54 	.word	0x20000d54
 8005da8:	20000584 	.word	0x20000584

08005dac <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
	return auxRxData;
 8005db0:	4b03      	ldr	r3, [pc, #12]	; (8005dc0 <getRxData+0x14>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	2000051c 	.word	0x2000051c

08005dc4 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10c      	bne.n	8005df0 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8005dee:	e005      	b.n	8005dfc <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60da      	str	r2, [r3, #12]
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
	__NOP();
 8005e0c:	bf00      	nop
}
 8005e0e:	bf00      	nop
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
	__NOP();
 8005e1c:	bf00      	nop
}
 8005e1e:	bf00      	nop
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8005e2c:	4b37      	ldr	r3, [pc, #220]	; (8005f0c <USART1_IRQHandler+0xe4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d008      	beq.n	8005e4c <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8005e3a:	4b34      	ldr	r3, [pc, #208]	; (8005f0c <USART1_IRQHandler+0xe4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	4b33      	ldr	r3, [pc, #204]	; (8005f10 <USART1_IRQHandler+0xe8>)
 8005e44:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8005e46:	f7fc fcc9 	bl	80027dc <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8005e4a:	e05d      	b.n	8005f08 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8005e4c:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <USART1_IRQHandler+0xe4>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d055      	beq.n	8005f06 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <USART1_IRQHandler+0xec>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10b      	bne.n	8005e7a <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8005e62:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <USART1_IRQHandler+0xf0>)
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <USART1_IRQHandler+0xe4>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8005e6c:	4b27      	ldr	r3, [pc, #156]	; (8005f0c <USART1_IRQHandler+0xe4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff ffa6 	bl	8005dc4 <interruptionTX>
}
 8005e78:	e046      	b.n	8005f08 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8005e7a:	4b26      	ldr	r3, [pc, #152]	; (8005f14 <USART1_IRQHandler+0xec>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d142      	bne.n	8005f08 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005e82:	4b26      	ldr	r3, [pc, #152]	; (8005f1c <USART1_IRQHandler+0xf4>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	4b25      	ldr	r3, [pc, #148]	; (8005f20 <USART1_IRQHandler+0xf8>)
 8005e8a:	5c9b      	ldrb	r3, [r3, r2]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00e      	beq.n	8005eae <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8005e90:	4b22      	ldr	r3, [pc, #136]	; (8005f1c <USART1_IRQHandler+0xf4>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	4b22      	ldr	r3, [pc, #136]	; (8005f20 <USART1_IRQHandler+0xf8>)
 8005e98:	5c9a      	ldrb	r2, [r3, r2]
 8005e9a:	4b1c      	ldr	r3, [pc, #112]	; (8005f0c <USART1_IRQHandler+0xe4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	605a      	str	r2, [r3, #4]
				posChar++;
 8005ea0:	4b1e      	ldr	r3, [pc, #120]	; (8005f1c <USART1_IRQHandler+0xf4>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <USART1_IRQHandler+0xf4>)
 8005eaa:	701a      	strb	r2, [r3, #0]
}
 8005eac:	e02c      	b.n	8005f08 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005eae:	4b1d      	ldr	r3, [pc, #116]	; (8005f24 <USART1_IRQHandler+0xfc>)
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <USART1_IRQHandler+0x100>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d215      	bcs.n	8005ee6 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8005eba:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <USART1_IRQHandler+0xfc>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	2364      	movs	r3, #100	; 0x64
 8005ec2:	fb02 f303 	mul.w	r3, r2, r3
 8005ec6:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <USART1_IRQHandler+0x104>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4814      	ldr	r0, [pc, #80]	; (8005f20 <USART1_IRQHandler+0xf8>)
 8005ece:	f000 ffe9 	bl	8006ea4 <siprintf>
					posChar = 0;
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <USART1_IRQHandler+0xf4>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005ed8:	4b12      	ldr	r3, [pc, #72]	; (8005f24 <USART1_IRQHandler+0xfc>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	4b10      	ldr	r3, [pc, #64]	; (8005f24 <USART1_IRQHandler+0xfc>)
 8005ee2:	701a      	strb	r2, [r3, #0]
}
 8005ee4:	e010      	b.n	8005f08 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8005ee6:	4b09      	ldr	r3, [pc, #36]	; (8005f0c <USART1_IRQHandler+0xe4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7ff ff69 	bl	8005dc4 <interruptionTX>
					posChar = 0;
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <USART1_IRQHandler+0xf4>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <USART1_IRQHandler+0xfc>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <USART1_IRQHandler+0x100>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
}
 8005f04:	e000      	b.n	8005f08 <USART1_IRQHandler+0xe0>
		__NOP();
 8005f06:	bf00      	nop
}
 8005f08:	bf00      	nop
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000510 	.word	0x20000510
 8005f10:	2000051c 	.word	0x2000051c
 8005f14:	20000d57 	.word	0x20000d57
 8005f18:	2000051d 	.word	0x2000051d
 8005f1c:	20000d56 	.word	0x20000d56
 8005f20:	20000520 	.word	0x20000520
 8005f24:	20000d55 	.word	0x20000d55
 8005f28:	20000d54 	.word	0x20000d54
 8005f2c:	20000584 	.word	0x20000584

08005f30 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8005f34:	4b37      	ldr	r3, [pc, #220]	; (8006014 <USART2_IRQHandler+0xe4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d008      	beq.n	8005f54 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8005f42:	4b34      	ldr	r3, [pc, #208]	; (8006014 <USART2_IRQHandler+0xe4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	4b33      	ldr	r3, [pc, #204]	; (8006018 <USART2_IRQHandler+0xe8>)
 8005f4c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8005f4e:	f7ff ff5b 	bl	8005e08 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8005f52:	e05d      	b.n	8006010 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8005f54:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <USART2_IRQHandler+0xe4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d055      	beq.n	800600e <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005f62:	4b2e      	ldr	r3, [pc, #184]	; (800601c <USART2_IRQHandler+0xec>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8005f6a:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <USART2_IRQHandler+0xf0>)
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	4b29      	ldr	r3, [pc, #164]	; (8006014 <USART2_IRQHandler+0xe4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005f74:	4b27      	ldr	r3, [pc, #156]	; (8006014 <USART2_IRQHandler+0xe4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2100      	movs	r1, #0
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff ff22 	bl	8005dc4 <interruptionTX>
}
 8005f80:	e046      	b.n	8006010 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8005f82:	4b26      	ldr	r3, [pc, #152]	; (800601c <USART2_IRQHandler+0xec>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d142      	bne.n	8006010 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <USART2_IRQHandler+0xf4>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4b25      	ldr	r3, [pc, #148]	; (8006028 <USART2_IRQHandler+0xf8>)
 8005f92:	5c9b      	ldrb	r3, [r3, r2]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00e      	beq.n	8005fb6 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8005f98:	4b22      	ldr	r3, [pc, #136]	; (8006024 <USART2_IRQHandler+0xf4>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4b22      	ldr	r3, [pc, #136]	; (8006028 <USART2_IRQHandler+0xf8>)
 8005fa0:	5c9a      	ldrb	r2, [r3, r2]
 8005fa2:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <USART2_IRQHandler+0xe4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	605a      	str	r2, [r3, #4]
				posChar++;
 8005fa8:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <USART2_IRQHandler+0xf4>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	; (8006024 <USART2_IRQHandler+0xf4>)
 8005fb2:	701a      	strb	r2, [r3, #0]
}
 8005fb4:	e02c      	b.n	8006010 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005fb6:	4b1d      	ldr	r3, [pc, #116]	; (800602c <USART2_IRQHandler+0xfc>)
 8005fb8:	781a      	ldrb	r2, [r3, #0]
 8005fba:	4b1d      	ldr	r3, [pc, #116]	; (8006030 <USART2_IRQHandler+0x100>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d215      	bcs.n	8005fee <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8005fc2:	4b1a      	ldr	r3, [pc, #104]	; (800602c <USART2_IRQHandler+0xfc>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	2364      	movs	r3, #100	; 0x64
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	4a19      	ldr	r2, [pc, #100]	; (8006034 <USART2_IRQHandler+0x104>)
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4814      	ldr	r0, [pc, #80]	; (8006028 <USART2_IRQHandler+0xf8>)
 8005fd6:	f000 ff65 	bl	8006ea4 <siprintf>
					posChar = 0;
 8005fda:	4b12      	ldr	r3, [pc, #72]	; (8006024 <USART2_IRQHandler+0xf4>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005fe0:	4b12      	ldr	r3, [pc, #72]	; (800602c <USART2_IRQHandler+0xfc>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	4b10      	ldr	r3, [pc, #64]	; (800602c <USART2_IRQHandler+0xfc>)
 8005fea:	701a      	strb	r2, [r3, #0]
}
 8005fec:	e010      	b.n	8006010 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <USART2_IRQHandler+0xe4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fee5 	bl	8005dc4 <interruptionTX>
					posChar = 0;
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <USART2_IRQHandler+0xf4>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <USART2_IRQHandler+0xfc>)
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8006006:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <USART2_IRQHandler+0x100>)
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
}
 800600c:	e000      	b.n	8006010 <USART2_IRQHandler+0xe0>
		__NOP();
 800600e:	bf00      	nop
}
 8006010:	bf00      	nop
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000514 	.word	0x20000514
 8006018:	2000051c 	.word	0x2000051c
 800601c:	20000d57 	.word	0x20000d57
 8006020:	2000051d 	.word	0x2000051d
 8006024:	20000d56 	.word	0x20000d56
 8006028:	20000520 	.word	0x20000520
 800602c:	20000d55 	.word	0x20000d55
 8006030:	20000d54 	.word	0x20000d54
 8006034:	20000584 	.word	0x20000584

08006038 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 800603c:	4b37      	ldr	r3, [pc, #220]	; (800611c <USART6_IRQHandler+0xe4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 800604a:	4b34      	ldr	r3, [pc, #208]	; (800611c <USART6_IRQHandler+0xe4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	4b33      	ldr	r3, [pc, #204]	; (8006120 <USART6_IRQHandler+0xe8>)
 8006054:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8006056:	f7ff fedf 	bl	8005e18 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 800605a:	e05d      	b.n	8006118 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 800605c:	4b2f      	ldr	r3, [pc, #188]	; (800611c <USART6_IRQHandler+0xe4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	d055      	beq.n	8006116 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800606a:	4b2e      	ldr	r3, [pc, #184]	; (8006124 <USART6_IRQHandler+0xec>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8006072:	4b2d      	ldr	r3, [pc, #180]	; (8006128 <USART6_IRQHandler+0xf0>)
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	4b29      	ldr	r3, [pc, #164]	; (800611c <USART6_IRQHandler+0xe4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800607c:	4b27      	ldr	r3, [pc, #156]	; (800611c <USART6_IRQHandler+0xe4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2100      	movs	r1, #0
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fe9e 	bl	8005dc4 <interruptionTX>
}
 8006088:	e046      	b.n	8006118 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800608a:	4b26      	ldr	r3, [pc, #152]	; (8006124 <USART6_IRQHandler+0xec>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d142      	bne.n	8006118 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8006092:	4b26      	ldr	r3, [pc, #152]	; (800612c <USART6_IRQHandler+0xf4>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <USART6_IRQHandler+0xf8>)
 800609a:	5c9b      	ldrb	r3, [r3, r2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00e      	beq.n	80060be <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 80060a0:	4b22      	ldr	r3, [pc, #136]	; (800612c <USART6_IRQHandler+0xf4>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b22      	ldr	r3, [pc, #136]	; (8006130 <USART6_IRQHandler+0xf8>)
 80060a8:	5c9a      	ldrb	r2, [r3, r2]
 80060aa:	4b1c      	ldr	r3, [pc, #112]	; (800611c <USART6_IRQHandler+0xe4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	605a      	str	r2, [r3, #4]
				posChar++;
 80060b0:	4b1e      	ldr	r3, [pc, #120]	; (800612c <USART6_IRQHandler+0xf4>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	4b1c      	ldr	r3, [pc, #112]	; (800612c <USART6_IRQHandler+0xf4>)
 80060ba:	701a      	strb	r2, [r3, #0]
}
 80060bc:	e02c      	b.n	8006118 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80060be:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <USART6_IRQHandler+0xfc>)
 80060c0:	781a      	ldrb	r2, [r3, #0]
 80060c2:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <USART6_IRQHandler+0x100>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d215      	bcs.n	80060f6 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80060ca:	4b1a      	ldr	r3, [pc, #104]	; (8006134 <USART6_IRQHandler+0xfc>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	2364      	movs	r3, #100	; 0x64
 80060d2:	fb02 f303 	mul.w	r3, r2, r3
 80060d6:	4a19      	ldr	r2, [pc, #100]	; (800613c <USART6_IRQHandler+0x104>)
 80060d8:	4413      	add	r3, r2
 80060da:	4619      	mov	r1, r3
 80060dc:	4814      	ldr	r0, [pc, #80]	; (8006130 <USART6_IRQHandler+0xf8>)
 80060de:	f000 fee1 	bl	8006ea4 <siprintf>
					posChar = 0;
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <USART6_IRQHandler+0xf4>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80060e8:	4b12      	ldr	r3, [pc, #72]	; (8006134 <USART6_IRQHandler+0xfc>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	4b10      	ldr	r3, [pc, #64]	; (8006134 <USART6_IRQHandler+0xfc>)
 80060f2:	701a      	strb	r2, [r3, #0]
}
 80060f4:	e010      	b.n	8006118 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <USART6_IRQHandler+0xe4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fe61 	bl	8005dc4 <interruptionTX>
					posChar = 0;
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <USART6_IRQHandler+0xf4>)
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8006108:	4b0a      	ldr	r3, [pc, #40]	; (8006134 <USART6_IRQHandler+0xfc>)
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800610e:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <USART6_IRQHandler+0x100>)
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
}
 8006114:	e000      	b.n	8006118 <USART6_IRQHandler+0xe0>
		__NOP();
 8006116:	bf00      	nop
}
 8006118:	bf00      	nop
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000518 	.word	0x20000518
 8006120:	2000051c 	.word	0x2000051c
 8006124:	20000d57 	.word	0x20000d57
 8006128:	2000051d 	.word	0x2000051d
 800612c:	20000d56 	.word	0x20000d56
 8006130:	20000520 	.word	0x20000520
 8006134:	20000d55 	.word	0x20000d55
 8006138:	20000d54 	.word	0x20000d54
 800613c:	20000584 	.word	0x20000584

08006140 <__errno>:
 8006140:	4b01      	ldr	r3, [pc, #4]	; (8006148 <__errno+0x8>)
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000018 	.word	0x20000018

0800614c <__libc_init_array>:
 800614c:	b570      	push	{r4, r5, r6, lr}
 800614e:	4d0d      	ldr	r5, [pc, #52]	; (8006184 <__libc_init_array+0x38>)
 8006150:	4c0d      	ldr	r4, [pc, #52]	; (8006188 <__libc_init_array+0x3c>)
 8006152:	1b64      	subs	r4, r4, r5
 8006154:	10a4      	asrs	r4, r4, #2
 8006156:	2600      	movs	r6, #0
 8006158:	42a6      	cmp	r6, r4
 800615a:	d109      	bne.n	8006170 <__libc_init_array+0x24>
 800615c:	4d0b      	ldr	r5, [pc, #44]	; (800618c <__libc_init_array+0x40>)
 800615e:	4c0c      	ldr	r4, [pc, #48]	; (8006190 <__libc_init_array+0x44>)
 8006160:	f006 fbdc 	bl	800c91c <_init>
 8006164:	1b64      	subs	r4, r4, r5
 8006166:	10a4      	asrs	r4, r4, #2
 8006168:	2600      	movs	r6, #0
 800616a:	42a6      	cmp	r6, r4
 800616c:	d105      	bne.n	800617a <__libc_init_array+0x2e>
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	f855 3b04 	ldr.w	r3, [r5], #4
 8006174:	4798      	blx	r3
 8006176:	3601      	adds	r6, #1
 8006178:	e7ee      	b.n	8006158 <__libc_init_array+0xc>
 800617a:	f855 3b04 	ldr.w	r3, [r5], #4
 800617e:	4798      	blx	r3
 8006180:	3601      	adds	r6, #1
 8006182:	e7f2      	b.n	800616a <__libc_init_array+0x1e>
 8006184:	0800d2d0 	.word	0x0800d2d0
 8006188:	0800d2d0 	.word	0x0800d2d0
 800618c:	0800d2d0 	.word	0x0800d2d0
 8006190:	0800d2d4 	.word	0x0800d2d4

08006194 <memset>:
 8006194:	4402      	add	r2, r0
 8006196:	4603      	mov	r3, r0
 8006198:	4293      	cmp	r3, r2
 800619a:	d100      	bne.n	800619e <memset+0xa>
 800619c:	4770      	bx	lr
 800619e:	f803 1b01 	strb.w	r1, [r3], #1
 80061a2:	e7f9      	b.n	8006198 <memset+0x4>

080061a4 <__cvt>:
 80061a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a8:	ec55 4b10 	vmov	r4, r5, d0
 80061ac:	2d00      	cmp	r5, #0
 80061ae:	460e      	mov	r6, r1
 80061b0:	4619      	mov	r1, r3
 80061b2:	462b      	mov	r3, r5
 80061b4:	bfbb      	ittet	lt
 80061b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061ba:	461d      	movlt	r5, r3
 80061bc:	2300      	movge	r3, #0
 80061be:	232d      	movlt	r3, #45	; 0x2d
 80061c0:	700b      	strb	r3, [r1, #0]
 80061c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061c8:	4691      	mov	r9, r2
 80061ca:	f023 0820 	bic.w	r8, r3, #32
 80061ce:	bfbc      	itt	lt
 80061d0:	4622      	movlt	r2, r4
 80061d2:	4614      	movlt	r4, r2
 80061d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061d8:	d005      	beq.n	80061e6 <__cvt+0x42>
 80061da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061de:	d100      	bne.n	80061e2 <__cvt+0x3e>
 80061e0:	3601      	adds	r6, #1
 80061e2:	2102      	movs	r1, #2
 80061e4:	e000      	b.n	80061e8 <__cvt+0x44>
 80061e6:	2103      	movs	r1, #3
 80061e8:	ab03      	add	r3, sp, #12
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	ab02      	add	r3, sp, #8
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	ec45 4b10 	vmov	d0, r4, r5
 80061f4:	4653      	mov	r3, sl
 80061f6:	4632      	mov	r2, r6
 80061f8:	f001 fe42 	bl	8007e80 <_dtoa_r>
 80061fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006200:	4607      	mov	r7, r0
 8006202:	d102      	bne.n	800620a <__cvt+0x66>
 8006204:	f019 0f01 	tst.w	r9, #1
 8006208:	d022      	beq.n	8006250 <__cvt+0xac>
 800620a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800620e:	eb07 0906 	add.w	r9, r7, r6
 8006212:	d110      	bne.n	8006236 <__cvt+0x92>
 8006214:	783b      	ldrb	r3, [r7, #0]
 8006216:	2b30      	cmp	r3, #48	; 0x30
 8006218:	d10a      	bne.n	8006230 <__cvt+0x8c>
 800621a:	2200      	movs	r2, #0
 800621c:	2300      	movs	r3, #0
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa fc69 	bl	8000af8 <__aeabi_dcmpeq>
 8006226:	b918      	cbnz	r0, 8006230 <__cvt+0x8c>
 8006228:	f1c6 0601 	rsb	r6, r6, #1
 800622c:	f8ca 6000 	str.w	r6, [sl]
 8006230:	f8da 3000 	ldr.w	r3, [sl]
 8006234:	4499      	add	r9, r3
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7fa fc5b 	bl	8000af8 <__aeabi_dcmpeq>
 8006242:	b108      	cbz	r0, 8006248 <__cvt+0xa4>
 8006244:	f8cd 900c 	str.w	r9, [sp, #12]
 8006248:	2230      	movs	r2, #48	; 0x30
 800624a:	9b03      	ldr	r3, [sp, #12]
 800624c:	454b      	cmp	r3, r9
 800624e:	d307      	bcc.n	8006260 <__cvt+0xbc>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006254:	1bdb      	subs	r3, r3, r7
 8006256:	4638      	mov	r0, r7
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	b004      	add	sp, #16
 800625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	9103      	str	r1, [sp, #12]
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e7f0      	b.n	800624a <__cvt+0xa6>

08006268 <__exponent>:
 8006268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800626a:	4603      	mov	r3, r0
 800626c:	2900      	cmp	r1, #0
 800626e:	bfb8      	it	lt
 8006270:	4249      	neglt	r1, r1
 8006272:	f803 2b02 	strb.w	r2, [r3], #2
 8006276:	bfb4      	ite	lt
 8006278:	222d      	movlt	r2, #45	; 0x2d
 800627a:	222b      	movge	r2, #43	; 0x2b
 800627c:	2909      	cmp	r1, #9
 800627e:	7042      	strb	r2, [r0, #1]
 8006280:	dd2a      	ble.n	80062d8 <__exponent+0x70>
 8006282:	f10d 0407 	add.w	r4, sp, #7
 8006286:	46a4      	mov	ip, r4
 8006288:	270a      	movs	r7, #10
 800628a:	46a6      	mov	lr, r4
 800628c:	460a      	mov	r2, r1
 800628e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006292:	fb07 1516 	mls	r5, r7, r6, r1
 8006296:	3530      	adds	r5, #48	; 0x30
 8006298:	2a63      	cmp	r2, #99	; 0x63
 800629a:	f104 34ff 	add.w	r4, r4, #4294967295
 800629e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062a2:	4631      	mov	r1, r6
 80062a4:	dcf1      	bgt.n	800628a <__exponent+0x22>
 80062a6:	3130      	adds	r1, #48	; 0x30
 80062a8:	f1ae 0502 	sub.w	r5, lr, #2
 80062ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062b0:	1c44      	adds	r4, r0, #1
 80062b2:	4629      	mov	r1, r5
 80062b4:	4561      	cmp	r1, ip
 80062b6:	d30a      	bcc.n	80062ce <__exponent+0x66>
 80062b8:	f10d 0209 	add.w	r2, sp, #9
 80062bc:	eba2 020e 	sub.w	r2, r2, lr
 80062c0:	4565      	cmp	r5, ip
 80062c2:	bf88      	it	hi
 80062c4:	2200      	movhi	r2, #0
 80062c6:	4413      	add	r3, r2
 80062c8:	1a18      	subs	r0, r3, r0
 80062ca:	b003      	add	sp, #12
 80062cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062d6:	e7ed      	b.n	80062b4 <__exponent+0x4c>
 80062d8:	2330      	movs	r3, #48	; 0x30
 80062da:	3130      	adds	r1, #48	; 0x30
 80062dc:	7083      	strb	r3, [r0, #2]
 80062de:	70c1      	strb	r1, [r0, #3]
 80062e0:	1d03      	adds	r3, r0, #4
 80062e2:	e7f1      	b.n	80062c8 <__exponent+0x60>

080062e4 <_printf_float>:
 80062e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e8:	ed2d 8b02 	vpush	{d8}
 80062ec:	b08d      	sub	sp, #52	; 0x34
 80062ee:	460c      	mov	r4, r1
 80062f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062f4:	4616      	mov	r6, r2
 80062f6:	461f      	mov	r7, r3
 80062f8:	4605      	mov	r5, r0
 80062fa:	f002 ff1f 	bl	800913c <_localeconv_r>
 80062fe:	f8d0 a000 	ldr.w	sl, [r0]
 8006302:	4650      	mov	r0, sl
 8006304:	f7f9 ff76 	bl	80001f4 <strlen>
 8006308:	2300      	movs	r3, #0
 800630a:	930a      	str	r3, [sp, #40]	; 0x28
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	9305      	str	r3, [sp, #20]
 8006310:	f8d8 3000 	ldr.w	r3, [r8]
 8006314:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006318:	3307      	adds	r3, #7
 800631a:	f023 0307 	bic.w	r3, r3, #7
 800631e:	f103 0208 	add.w	r2, r3, #8
 8006322:	f8c8 2000 	str.w	r2, [r8]
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800632e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006336:	9307      	str	r3, [sp, #28]
 8006338:	f8cd 8018 	str.w	r8, [sp, #24]
 800633c:	ee08 0a10 	vmov	s16, r0
 8006340:	4b9f      	ldr	r3, [pc, #636]	; (80065c0 <_printf_float+0x2dc>)
 8006342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006346:	f04f 32ff 	mov.w	r2, #4294967295
 800634a:	f7fa fc07 	bl	8000b5c <__aeabi_dcmpun>
 800634e:	bb88      	cbnz	r0, 80063b4 <_printf_float+0xd0>
 8006350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006354:	4b9a      	ldr	r3, [pc, #616]	; (80065c0 <_printf_float+0x2dc>)
 8006356:	f04f 32ff 	mov.w	r2, #4294967295
 800635a:	f7fa fbe1 	bl	8000b20 <__aeabi_dcmple>
 800635e:	bb48      	cbnz	r0, 80063b4 <_printf_float+0xd0>
 8006360:	2200      	movs	r2, #0
 8006362:	2300      	movs	r3, #0
 8006364:	4640      	mov	r0, r8
 8006366:	4649      	mov	r1, r9
 8006368:	f7fa fbd0 	bl	8000b0c <__aeabi_dcmplt>
 800636c:	b110      	cbz	r0, 8006374 <_printf_float+0x90>
 800636e:	232d      	movs	r3, #45	; 0x2d
 8006370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006374:	4b93      	ldr	r3, [pc, #588]	; (80065c4 <_printf_float+0x2e0>)
 8006376:	4894      	ldr	r0, [pc, #592]	; (80065c8 <_printf_float+0x2e4>)
 8006378:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800637c:	bf94      	ite	ls
 800637e:	4698      	movls	r8, r3
 8006380:	4680      	movhi	r8, r0
 8006382:	2303      	movs	r3, #3
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	9b05      	ldr	r3, [sp, #20]
 8006388:	f023 0204 	bic.w	r2, r3, #4
 800638c:	6022      	str	r2, [r4, #0]
 800638e:	f04f 0900 	mov.w	r9, #0
 8006392:	9700      	str	r7, [sp, #0]
 8006394:	4633      	mov	r3, r6
 8006396:	aa0b      	add	r2, sp, #44	; 0x2c
 8006398:	4621      	mov	r1, r4
 800639a:	4628      	mov	r0, r5
 800639c:	f000 f9d8 	bl	8006750 <_printf_common>
 80063a0:	3001      	adds	r0, #1
 80063a2:	f040 8090 	bne.w	80064c6 <_printf_float+0x1e2>
 80063a6:	f04f 30ff 	mov.w	r0, #4294967295
 80063aa:	b00d      	add	sp, #52	; 0x34
 80063ac:	ecbd 8b02 	vpop	{d8}
 80063b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b4:	4642      	mov	r2, r8
 80063b6:	464b      	mov	r3, r9
 80063b8:	4640      	mov	r0, r8
 80063ba:	4649      	mov	r1, r9
 80063bc:	f7fa fbce 	bl	8000b5c <__aeabi_dcmpun>
 80063c0:	b140      	cbz	r0, 80063d4 <_printf_float+0xf0>
 80063c2:	464b      	mov	r3, r9
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bfbc      	itt	lt
 80063c8:	232d      	movlt	r3, #45	; 0x2d
 80063ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063ce:	487f      	ldr	r0, [pc, #508]	; (80065cc <_printf_float+0x2e8>)
 80063d0:	4b7f      	ldr	r3, [pc, #508]	; (80065d0 <_printf_float+0x2ec>)
 80063d2:	e7d1      	b.n	8006378 <_printf_float+0x94>
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063da:	9206      	str	r2, [sp, #24]
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	d13f      	bne.n	8006460 <_printf_float+0x17c>
 80063e0:	2306      	movs	r3, #6
 80063e2:	6063      	str	r3, [r4, #4]
 80063e4:	9b05      	ldr	r3, [sp, #20]
 80063e6:	6861      	ldr	r1, [r4, #4]
 80063e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063ec:	2300      	movs	r3, #0
 80063ee:	9303      	str	r3, [sp, #12]
 80063f0:	ab0a      	add	r3, sp, #40	; 0x28
 80063f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063f6:	ab09      	add	r3, sp, #36	; 0x24
 80063f8:	ec49 8b10 	vmov	d0, r8, r9
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	6022      	str	r2, [r4, #0]
 8006400:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006404:	4628      	mov	r0, r5
 8006406:	f7ff fecd 	bl	80061a4 <__cvt>
 800640a:	9b06      	ldr	r3, [sp, #24]
 800640c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800640e:	2b47      	cmp	r3, #71	; 0x47
 8006410:	4680      	mov	r8, r0
 8006412:	d108      	bne.n	8006426 <_printf_float+0x142>
 8006414:	1cc8      	adds	r0, r1, #3
 8006416:	db02      	blt.n	800641e <_printf_float+0x13a>
 8006418:	6863      	ldr	r3, [r4, #4]
 800641a:	4299      	cmp	r1, r3
 800641c:	dd41      	ble.n	80064a2 <_printf_float+0x1be>
 800641e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006422:	fa5f fb8b 	uxtb.w	fp, fp
 8006426:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800642a:	d820      	bhi.n	800646e <_printf_float+0x18a>
 800642c:	3901      	subs	r1, #1
 800642e:	465a      	mov	r2, fp
 8006430:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006434:	9109      	str	r1, [sp, #36]	; 0x24
 8006436:	f7ff ff17 	bl	8006268 <__exponent>
 800643a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800643c:	1813      	adds	r3, r2, r0
 800643e:	2a01      	cmp	r2, #1
 8006440:	4681      	mov	r9, r0
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	dc02      	bgt.n	800644c <_printf_float+0x168>
 8006446:	6822      	ldr	r2, [r4, #0]
 8006448:	07d2      	lsls	r2, r2, #31
 800644a:	d501      	bpl.n	8006450 <_printf_float+0x16c>
 800644c:	3301      	adds	r3, #1
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006454:	2b00      	cmp	r3, #0
 8006456:	d09c      	beq.n	8006392 <_printf_float+0xae>
 8006458:	232d      	movs	r3, #45	; 0x2d
 800645a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800645e:	e798      	b.n	8006392 <_printf_float+0xae>
 8006460:	9a06      	ldr	r2, [sp, #24]
 8006462:	2a47      	cmp	r2, #71	; 0x47
 8006464:	d1be      	bne.n	80063e4 <_printf_float+0x100>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1bc      	bne.n	80063e4 <_printf_float+0x100>
 800646a:	2301      	movs	r3, #1
 800646c:	e7b9      	b.n	80063e2 <_printf_float+0xfe>
 800646e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006472:	d118      	bne.n	80064a6 <_printf_float+0x1c2>
 8006474:	2900      	cmp	r1, #0
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	dd0b      	ble.n	8006492 <_printf_float+0x1ae>
 800647a:	6121      	str	r1, [r4, #16]
 800647c:	b913      	cbnz	r3, 8006484 <_printf_float+0x1a0>
 800647e:	6822      	ldr	r2, [r4, #0]
 8006480:	07d0      	lsls	r0, r2, #31
 8006482:	d502      	bpl.n	800648a <_printf_float+0x1a6>
 8006484:	3301      	adds	r3, #1
 8006486:	440b      	add	r3, r1
 8006488:	6123      	str	r3, [r4, #16]
 800648a:	65a1      	str	r1, [r4, #88]	; 0x58
 800648c:	f04f 0900 	mov.w	r9, #0
 8006490:	e7de      	b.n	8006450 <_printf_float+0x16c>
 8006492:	b913      	cbnz	r3, 800649a <_printf_float+0x1b6>
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	07d2      	lsls	r2, r2, #31
 8006498:	d501      	bpl.n	800649e <_printf_float+0x1ba>
 800649a:	3302      	adds	r3, #2
 800649c:	e7f4      	b.n	8006488 <_printf_float+0x1a4>
 800649e:	2301      	movs	r3, #1
 80064a0:	e7f2      	b.n	8006488 <_printf_float+0x1a4>
 80064a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a8:	4299      	cmp	r1, r3
 80064aa:	db05      	blt.n	80064b8 <_printf_float+0x1d4>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	6121      	str	r1, [r4, #16]
 80064b0:	07d8      	lsls	r0, r3, #31
 80064b2:	d5ea      	bpl.n	800648a <_printf_float+0x1a6>
 80064b4:	1c4b      	adds	r3, r1, #1
 80064b6:	e7e7      	b.n	8006488 <_printf_float+0x1a4>
 80064b8:	2900      	cmp	r1, #0
 80064ba:	bfd4      	ite	le
 80064bc:	f1c1 0202 	rsble	r2, r1, #2
 80064c0:	2201      	movgt	r2, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	e7e0      	b.n	8006488 <_printf_float+0x1a4>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	055a      	lsls	r2, r3, #21
 80064ca:	d407      	bmi.n	80064dc <_printf_float+0x1f8>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	4642      	mov	r2, r8
 80064d0:	4631      	mov	r1, r6
 80064d2:	4628      	mov	r0, r5
 80064d4:	47b8      	blx	r7
 80064d6:	3001      	adds	r0, #1
 80064d8:	d12c      	bne.n	8006534 <_printf_float+0x250>
 80064da:	e764      	b.n	80063a6 <_printf_float+0xc2>
 80064dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064e0:	f240 80e0 	bls.w	80066a4 <_printf_float+0x3c0>
 80064e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064e8:	2200      	movs	r2, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	f7fa fb04 	bl	8000af8 <__aeabi_dcmpeq>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d034      	beq.n	800655e <_printf_float+0x27a>
 80064f4:	4a37      	ldr	r2, [pc, #220]	; (80065d4 <_printf_float+0x2f0>)
 80064f6:	2301      	movs	r3, #1
 80064f8:	4631      	mov	r1, r6
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f af51 	beq.w	80063a6 <_printf_float+0xc2>
 8006504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006508:	429a      	cmp	r2, r3
 800650a:	db02      	blt.n	8006512 <_printf_float+0x22e>
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	07d8      	lsls	r0, r3, #31
 8006510:	d510      	bpl.n	8006534 <_printf_float+0x250>
 8006512:	ee18 3a10 	vmov	r3, s16
 8006516:	4652      	mov	r2, sl
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	f43f af41 	beq.w	80063a6 <_printf_float+0xc2>
 8006524:	f04f 0800 	mov.w	r8, #0
 8006528:	f104 091a 	add.w	r9, r4, #26
 800652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652e:	3b01      	subs	r3, #1
 8006530:	4543      	cmp	r3, r8
 8006532:	dc09      	bgt.n	8006548 <_printf_float+0x264>
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	079b      	lsls	r3, r3, #30
 8006538:	f100 8105 	bmi.w	8006746 <_printf_float+0x462>
 800653c:	68e0      	ldr	r0, [r4, #12]
 800653e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006540:	4298      	cmp	r0, r3
 8006542:	bfb8      	it	lt
 8006544:	4618      	movlt	r0, r3
 8006546:	e730      	b.n	80063aa <_printf_float+0xc6>
 8006548:	2301      	movs	r3, #1
 800654a:	464a      	mov	r2, r9
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af27 	beq.w	80063a6 <_printf_float+0xc2>
 8006558:	f108 0801 	add.w	r8, r8, #1
 800655c:	e7e6      	b.n	800652c <_printf_float+0x248>
 800655e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	dc39      	bgt.n	80065d8 <_printf_float+0x2f4>
 8006564:	4a1b      	ldr	r2, [pc, #108]	; (80065d4 <_printf_float+0x2f0>)
 8006566:	2301      	movs	r3, #1
 8006568:	4631      	mov	r1, r6
 800656a:	4628      	mov	r0, r5
 800656c:	47b8      	blx	r7
 800656e:	3001      	adds	r0, #1
 8006570:	f43f af19 	beq.w	80063a6 <_printf_float+0xc2>
 8006574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006578:	4313      	orrs	r3, r2
 800657a:	d102      	bne.n	8006582 <_printf_float+0x29e>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	07d9      	lsls	r1, r3, #31
 8006580:	d5d8      	bpl.n	8006534 <_printf_float+0x250>
 8006582:	ee18 3a10 	vmov	r3, s16
 8006586:	4652      	mov	r2, sl
 8006588:	4631      	mov	r1, r6
 800658a:	4628      	mov	r0, r5
 800658c:	47b8      	blx	r7
 800658e:	3001      	adds	r0, #1
 8006590:	f43f af09 	beq.w	80063a6 <_printf_float+0xc2>
 8006594:	f04f 0900 	mov.w	r9, #0
 8006598:	f104 0a1a 	add.w	sl, r4, #26
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	425b      	negs	r3, r3
 80065a0:	454b      	cmp	r3, r9
 80065a2:	dc01      	bgt.n	80065a8 <_printf_float+0x2c4>
 80065a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a6:	e792      	b.n	80064ce <_printf_float+0x1ea>
 80065a8:	2301      	movs	r3, #1
 80065aa:	4652      	mov	r2, sl
 80065ac:	4631      	mov	r1, r6
 80065ae:	4628      	mov	r0, r5
 80065b0:	47b8      	blx	r7
 80065b2:	3001      	adds	r0, #1
 80065b4:	f43f aef7 	beq.w	80063a6 <_printf_float+0xc2>
 80065b8:	f109 0901 	add.w	r9, r9, #1
 80065bc:	e7ee      	b.n	800659c <_printf_float+0x2b8>
 80065be:	bf00      	nop
 80065c0:	7fefffff 	.word	0x7fefffff
 80065c4:	0800cbc8 	.word	0x0800cbc8
 80065c8:	0800cbcc 	.word	0x0800cbcc
 80065cc:	0800cbd4 	.word	0x0800cbd4
 80065d0:	0800cbd0 	.word	0x0800cbd0
 80065d4:	0800cfc9 	.word	0x0800cfc9
 80065d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065dc:	429a      	cmp	r2, r3
 80065de:	bfa8      	it	ge
 80065e0:	461a      	movge	r2, r3
 80065e2:	2a00      	cmp	r2, #0
 80065e4:	4691      	mov	r9, r2
 80065e6:	dc37      	bgt.n	8006658 <_printf_float+0x374>
 80065e8:	f04f 0b00 	mov.w	fp, #0
 80065ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065f0:	f104 021a 	add.w	r2, r4, #26
 80065f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065f6:	9305      	str	r3, [sp, #20]
 80065f8:	eba3 0309 	sub.w	r3, r3, r9
 80065fc:	455b      	cmp	r3, fp
 80065fe:	dc33      	bgt.n	8006668 <_printf_float+0x384>
 8006600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006604:	429a      	cmp	r2, r3
 8006606:	db3b      	blt.n	8006680 <_printf_float+0x39c>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d438      	bmi.n	8006680 <_printf_float+0x39c>
 800660e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006610:	9a05      	ldr	r2, [sp, #20]
 8006612:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006614:	1a9a      	subs	r2, r3, r2
 8006616:	eba3 0901 	sub.w	r9, r3, r1
 800661a:	4591      	cmp	r9, r2
 800661c:	bfa8      	it	ge
 800661e:	4691      	movge	r9, r2
 8006620:	f1b9 0f00 	cmp.w	r9, #0
 8006624:	dc35      	bgt.n	8006692 <_printf_float+0x3ae>
 8006626:	f04f 0800 	mov.w	r8, #0
 800662a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800662e:	f104 0a1a 	add.w	sl, r4, #26
 8006632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006636:	1a9b      	subs	r3, r3, r2
 8006638:	eba3 0309 	sub.w	r3, r3, r9
 800663c:	4543      	cmp	r3, r8
 800663e:	f77f af79 	ble.w	8006534 <_printf_float+0x250>
 8006642:	2301      	movs	r3, #1
 8006644:	4652      	mov	r2, sl
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f aeaa 	beq.w	80063a6 <_printf_float+0xc2>
 8006652:	f108 0801 	add.w	r8, r8, #1
 8006656:	e7ec      	b.n	8006632 <_printf_float+0x34e>
 8006658:	4613      	mov	r3, r2
 800665a:	4631      	mov	r1, r6
 800665c:	4642      	mov	r2, r8
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	d1c0      	bne.n	80065e8 <_printf_float+0x304>
 8006666:	e69e      	b.n	80063a6 <_printf_float+0xc2>
 8006668:	2301      	movs	r3, #1
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	9205      	str	r2, [sp, #20]
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	f43f ae97 	beq.w	80063a6 <_printf_float+0xc2>
 8006678:	9a05      	ldr	r2, [sp, #20]
 800667a:	f10b 0b01 	add.w	fp, fp, #1
 800667e:	e7b9      	b.n	80065f4 <_printf_float+0x310>
 8006680:	ee18 3a10 	vmov	r3, s16
 8006684:	4652      	mov	r2, sl
 8006686:	4631      	mov	r1, r6
 8006688:	4628      	mov	r0, r5
 800668a:	47b8      	blx	r7
 800668c:	3001      	adds	r0, #1
 800668e:	d1be      	bne.n	800660e <_printf_float+0x32a>
 8006690:	e689      	b.n	80063a6 <_printf_float+0xc2>
 8006692:	9a05      	ldr	r2, [sp, #20]
 8006694:	464b      	mov	r3, r9
 8006696:	4442      	add	r2, r8
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	d1c1      	bne.n	8006626 <_printf_float+0x342>
 80066a2:	e680      	b.n	80063a6 <_printf_float+0xc2>
 80066a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066a6:	2a01      	cmp	r2, #1
 80066a8:	dc01      	bgt.n	80066ae <_printf_float+0x3ca>
 80066aa:	07db      	lsls	r3, r3, #31
 80066ac:	d538      	bpl.n	8006720 <_printf_float+0x43c>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4642      	mov	r2, r8
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f ae74 	beq.w	80063a6 <_printf_float+0xc2>
 80066be:	ee18 3a10 	vmov	r3, s16
 80066c2:	4652      	mov	r2, sl
 80066c4:	4631      	mov	r1, r6
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b8      	blx	r7
 80066ca:	3001      	adds	r0, #1
 80066cc:	f43f ae6b 	beq.w	80063a6 <_printf_float+0xc2>
 80066d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066d4:	2200      	movs	r2, #0
 80066d6:	2300      	movs	r3, #0
 80066d8:	f7fa fa0e 	bl	8000af8 <__aeabi_dcmpeq>
 80066dc:	b9d8      	cbnz	r0, 8006716 <_printf_float+0x432>
 80066de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e0:	f108 0201 	add.w	r2, r8, #1
 80066e4:	3b01      	subs	r3, #1
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	d10e      	bne.n	800670e <_printf_float+0x42a>
 80066f0:	e659      	b.n	80063a6 <_printf_float+0xc2>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4652      	mov	r2, sl
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f ae52 	beq.w	80063a6 <_printf_float+0xc2>
 8006702:	f108 0801 	add.w	r8, r8, #1
 8006706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006708:	3b01      	subs	r3, #1
 800670a:	4543      	cmp	r3, r8
 800670c:	dcf1      	bgt.n	80066f2 <_printf_float+0x40e>
 800670e:	464b      	mov	r3, r9
 8006710:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006714:	e6dc      	b.n	80064d0 <_printf_float+0x1ec>
 8006716:	f04f 0800 	mov.w	r8, #0
 800671a:	f104 0a1a 	add.w	sl, r4, #26
 800671e:	e7f2      	b.n	8006706 <_printf_float+0x422>
 8006720:	2301      	movs	r3, #1
 8006722:	4642      	mov	r2, r8
 8006724:	e7df      	b.n	80066e6 <_printf_float+0x402>
 8006726:	2301      	movs	r3, #1
 8006728:	464a      	mov	r2, r9
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	f43f ae38 	beq.w	80063a6 <_printf_float+0xc2>
 8006736:	f108 0801 	add.w	r8, r8, #1
 800673a:	68e3      	ldr	r3, [r4, #12]
 800673c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800673e:	1a5b      	subs	r3, r3, r1
 8006740:	4543      	cmp	r3, r8
 8006742:	dcf0      	bgt.n	8006726 <_printf_float+0x442>
 8006744:	e6fa      	b.n	800653c <_printf_float+0x258>
 8006746:	f04f 0800 	mov.w	r8, #0
 800674a:	f104 0919 	add.w	r9, r4, #25
 800674e:	e7f4      	b.n	800673a <_printf_float+0x456>

08006750 <_printf_common>:
 8006750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006754:	4616      	mov	r6, r2
 8006756:	4699      	mov	r9, r3
 8006758:	688a      	ldr	r2, [r1, #8]
 800675a:	690b      	ldr	r3, [r1, #16]
 800675c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006760:	4293      	cmp	r3, r2
 8006762:	bfb8      	it	lt
 8006764:	4613      	movlt	r3, r2
 8006766:	6033      	str	r3, [r6, #0]
 8006768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800676c:	4607      	mov	r7, r0
 800676e:	460c      	mov	r4, r1
 8006770:	b10a      	cbz	r2, 8006776 <_printf_common+0x26>
 8006772:	3301      	adds	r3, #1
 8006774:	6033      	str	r3, [r6, #0]
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	0699      	lsls	r1, r3, #26
 800677a:	bf42      	ittt	mi
 800677c:	6833      	ldrmi	r3, [r6, #0]
 800677e:	3302      	addmi	r3, #2
 8006780:	6033      	strmi	r3, [r6, #0]
 8006782:	6825      	ldr	r5, [r4, #0]
 8006784:	f015 0506 	ands.w	r5, r5, #6
 8006788:	d106      	bne.n	8006798 <_printf_common+0x48>
 800678a:	f104 0a19 	add.w	sl, r4, #25
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	6832      	ldr	r2, [r6, #0]
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	42ab      	cmp	r3, r5
 8006796:	dc26      	bgt.n	80067e6 <_printf_common+0x96>
 8006798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800679c:	1e13      	subs	r3, r2, #0
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	bf18      	it	ne
 80067a2:	2301      	movne	r3, #1
 80067a4:	0692      	lsls	r2, r2, #26
 80067a6:	d42b      	bmi.n	8006800 <_printf_common+0xb0>
 80067a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067ac:	4649      	mov	r1, r9
 80067ae:	4638      	mov	r0, r7
 80067b0:	47c0      	blx	r8
 80067b2:	3001      	adds	r0, #1
 80067b4:	d01e      	beq.n	80067f4 <_printf_common+0xa4>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	68e5      	ldr	r5, [r4, #12]
 80067ba:	6832      	ldr	r2, [r6, #0]
 80067bc:	f003 0306 	and.w	r3, r3, #6
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	bf08      	it	eq
 80067c4:	1aad      	subeq	r5, r5, r2
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	6922      	ldr	r2, [r4, #16]
 80067ca:	bf0c      	ite	eq
 80067cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d0:	2500      	movne	r5, #0
 80067d2:	4293      	cmp	r3, r2
 80067d4:	bfc4      	itt	gt
 80067d6:	1a9b      	subgt	r3, r3, r2
 80067d8:	18ed      	addgt	r5, r5, r3
 80067da:	2600      	movs	r6, #0
 80067dc:	341a      	adds	r4, #26
 80067de:	42b5      	cmp	r5, r6
 80067e0:	d11a      	bne.n	8006818 <_printf_common+0xc8>
 80067e2:	2000      	movs	r0, #0
 80067e4:	e008      	b.n	80067f8 <_printf_common+0xa8>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4652      	mov	r2, sl
 80067ea:	4649      	mov	r1, r9
 80067ec:	4638      	mov	r0, r7
 80067ee:	47c0      	blx	r8
 80067f0:	3001      	adds	r0, #1
 80067f2:	d103      	bne.n	80067fc <_printf_common+0xac>
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fc:	3501      	adds	r5, #1
 80067fe:	e7c6      	b.n	800678e <_printf_common+0x3e>
 8006800:	18e1      	adds	r1, r4, r3
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	2030      	movs	r0, #48	; 0x30
 8006806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800680a:	4422      	add	r2, r4
 800680c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006814:	3302      	adds	r3, #2
 8006816:	e7c7      	b.n	80067a8 <_printf_common+0x58>
 8006818:	2301      	movs	r3, #1
 800681a:	4622      	mov	r2, r4
 800681c:	4649      	mov	r1, r9
 800681e:	4638      	mov	r0, r7
 8006820:	47c0      	blx	r8
 8006822:	3001      	adds	r0, #1
 8006824:	d0e6      	beq.n	80067f4 <_printf_common+0xa4>
 8006826:	3601      	adds	r6, #1
 8006828:	e7d9      	b.n	80067de <_printf_common+0x8e>
	...

0800682c <_printf_i>:
 800682c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	7e0f      	ldrb	r7, [r1, #24]
 8006832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006834:	2f78      	cmp	r7, #120	; 0x78
 8006836:	4691      	mov	r9, r2
 8006838:	4680      	mov	r8, r0
 800683a:	460c      	mov	r4, r1
 800683c:	469a      	mov	sl, r3
 800683e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006842:	d807      	bhi.n	8006854 <_printf_i+0x28>
 8006844:	2f62      	cmp	r7, #98	; 0x62
 8006846:	d80a      	bhi.n	800685e <_printf_i+0x32>
 8006848:	2f00      	cmp	r7, #0
 800684a:	f000 80d8 	beq.w	80069fe <_printf_i+0x1d2>
 800684e:	2f58      	cmp	r7, #88	; 0x58
 8006850:	f000 80a3 	beq.w	800699a <_printf_i+0x16e>
 8006854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800685c:	e03a      	b.n	80068d4 <_printf_i+0xa8>
 800685e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006862:	2b15      	cmp	r3, #21
 8006864:	d8f6      	bhi.n	8006854 <_printf_i+0x28>
 8006866:	a101      	add	r1, pc, #4	; (adr r1, 800686c <_printf_i+0x40>)
 8006868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800686c:	080068c5 	.word	0x080068c5
 8006870:	080068d9 	.word	0x080068d9
 8006874:	08006855 	.word	0x08006855
 8006878:	08006855 	.word	0x08006855
 800687c:	08006855 	.word	0x08006855
 8006880:	08006855 	.word	0x08006855
 8006884:	080068d9 	.word	0x080068d9
 8006888:	08006855 	.word	0x08006855
 800688c:	08006855 	.word	0x08006855
 8006890:	08006855 	.word	0x08006855
 8006894:	08006855 	.word	0x08006855
 8006898:	080069e5 	.word	0x080069e5
 800689c:	08006909 	.word	0x08006909
 80068a0:	080069c7 	.word	0x080069c7
 80068a4:	08006855 	.word	0x08006855
 80068a8:	08006855 	.word	0x08006855
 80068ac:	08006a07 	.word	0x08006a07
 80068b0:	08006855 	.word	0x08006855
 80068b4:	08006909 	.word	0x08006909
 80068b8:	08006855 	.word	0x08006855
 80068bc:	08006855 	.word	0x08006855
 80068c0:	080069cf 	.word	0x080069cf
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	1d1a      	adds	r2, r3, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	602a      	str	r2, [r5, #0]
 80068cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0a3      	b.n	8006a20 <_printf_i+0x1f4>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	6829      	ldr	r1, [r5, #0]
 80068dc:	0606      	lsls	r6, r0, #24
 80068de:	f101 0304 	add.w	r3, r1, #4
 80068e2:	d50a      	bpl.n	80068fa <_printf_i+0xce>
 80068e4:	680e      	ldr	r6, [r1, #0]
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	2e00      	cmp	r6, #0
 80068ea:	da03      	bge.n	80068f4 <_printf_i+0xc8>
 80068ec:	232d      	movs	r3, #45	; 0x2d
 80068ee:	4276      	negs	r6, r6
 80068f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f4:	485e      	ldr	r0, [pc, #376]	; (8006a70 <_printf_i+0x244>)
 80068f6:	230a      	movs	r3, #10
 80068f8:	e019      	b.n	800692e <_printf_i+0x102>
 80068fa:	680e      	ldr	r6, [r1, #0]
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006902:	bf18      	it	ne
 8006904:	b236      	sxthne	r6, r6
 8006906:	e7ef      	b.n	80068e8 <_printf_i+0xbc>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	6820      	ldr	r0, [r4, #0]
 800690c:	1d19      	adds	r1, r3, #4
 800690e:	6029      	str	r1, [r5, #0]
 8006910:	0601      	lsls	r1, r0, #24
 8006912:	d501      	bpl.n	8006918 <_printf_i+0xec>
 8006914:	681e      	ldr	r6, [r3, #0]
 8006916:	e002      	b.n	800691e <_printf_i+0xf2>
 8006918:	0646      	lsls	r6, r0, #25
 800691a:	d5fb      	bpl.n	8006914 <_printf_i+0xe8>
 800691c:	881e      	ldrh	r6, [r3, #0]
 800691e:	4854      	ldr	r0, [pc, #336]	; (8006a70 <_printf_i+0x244>)
 8006920:	2f6f      	cmp	r7, #111	; 0x6f
 8006922:	bf0c      	ite	eq
 8006924:	2308      	moveq	r3, #8
 8006926:	230a      	movne	r3, #10
 8006928:	2100      	movs	r1, #0
 800692a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800692e:	6865      	ldr	r5, [r4, #4]
 8006930:	60a5      	str	r5, [r4, #8]
 8006932:	2d00      	cmp	r5, #0
 8006934:	bfa2      	ittt	ge
 8006936:	6821      	ldrge	r1, [r4, #0]
 8006938:	f021 0104 	bicge.w	r1, r1, #4
 800693c:	6021      	strge	r1, [r4, #0]
 800693e:	b90e      	cbnz	r6, 8006944 <_printf_i+0x118>
 8006940:	2d00      	cmp	r5, #0
 8006942:	d04d      	beq.n	80069e0 <_printf_i+0x1b4>
 8006944:	4615      	mov	r5, r2
 8006946:	fbb6 f1f3 	udiv	r1, r6, r3
 800694a:	fb03 6711 	mls	r7, r3, r1, r6
 800694e:	5dc7      	ldrb	r7, [r0, r7]
 8006950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006954:	4637      	mov	r7, r6
 8006956:	42bb      	cmp	r3, r7
 8006958:	460e      	mov	r6, r1
 800695a:	d9f4      	bls.n	8006946 <_printf_i+0x11a>
 800695c:	2b08      	cmp	r3, #8
 800695e:	d10b      	bne.n	8006978 <_printf_i+0x14c>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	07de      	lsls	r6, r3, #31
 8006964:	d508      	bpl.n	8006978 <_printf_i+0x14c>
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6861      	ldr	r1, [r4, #4]
 800696a:	4299      	cmp	r1, r3
 800696c:	bfde      	ittt	le
 800696e:	2330      	movle	r3, #48	; 0x30
 8006970:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006974:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006978:	1b52      	subs	r2, r2, r5
 800697a:	6122      	str	r2, [r4, #16]
 800697c:	f8cd a000 	str.w	sl, [sp]
 8006980:	464b      	mov	r3, r9
 8006982:	aa03      	add	r2, sp, #12
 8006984:	4621      	mov	r1, r4
 8006986:	4640      	mov	r0, r8
 8006988:	f7ff fee2 	bl	8006750 <_printf_common>
 800698c:	3001      	adds	r0, #1
 800698e:	d14c      	bne.n	8006a2a <_printf_i+0x1fe>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	b004      	add	sp, #16
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699a:	4835      	ldr	r0, [pc, #212]	; (8006a70 <_printf_i+0x244>)
 800699c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069a0:	6829      	ldr	r1, [r5, #0]
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80069a8:	6029      	str	r1, [r5, #0]
 80069aa:	061d      	lsls	r5, r3, #24
 80069ac:	d514      	bpl.n	80069d8 <_printf_i+0x1ac>
 80069ae:	07df      	lsls	r7, r3, #31
 80069b0:	bf44      	itt	mi
 80069b2:	f043 0320 	orrmi.w	r3, r3, #32
 80069b6:	6023      	strmi	r3, [r4, #0]
 80069b8:	b91e      	cbnz	r6, 80069c2 <_printf_i+0x196>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	f023 0320 	bic.w	r3, r3, #32
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	2310      	movs	r3, #16
 80069c4:	e7b0      	b.n	8006928 <_printf_i+0xfc>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f043 0320 	orr.w	r3, r3, #32
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	2378      	movs	r3, #120	; 0x78
 80069d0:	4828      	ldr	r0, [pc, #160]	; (8006a74 <_printf_i+0x248>)
 80069d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069d6:	e7e3      	b.n	80069a0 <_printf_i+0x174>
 80069d8:	0659      	lsls	r1, r3, #25
 80069da:	bf48      	it	mi
 80069dc:	b2b6      	uxthmi	r6, r6
 80069de:	e7e6      	b.n	80069ae <_printf_i+0x182>
 80069e0:	4615      	mov	r5, r2
 80069e2:	e7bb      	b.n	800695c <_printf_i+0x130>
 80069e4:	682b      	ldr	r3, [r5, #0]
 80069e6:	6826      	ldr	r6, [r4, #0]
 80069e8:	6961      	ldr	r1, [r4, #20]
 80069ea:	1d18      	adds	r0, r3, #4
 80069ec:	6028      	str	r0, [r5, #0]
 80069ee:	0635      	lsls	r5, r6, #24
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	d501      	bpl.n	80069f8 <_printf_i+0x1cc>
 80069f4:	6019      	str	r1, [r3, #0]
 80069f6:	e002      	b.n	80069fe <_printf_i+0x1d2>
 80069f8:	0670      	lsls	r0, r6, #25
 80069fa:	d5fb      	bpl.n	80069f4 <_printf_i+0x1c8>
 80069fc:	8019      	strh	r1, [r3, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	6123      	str	r3, [r4, #16]
 8006a02:	4615      	mov	r5, r2
 8006a04:	e7ba      	b.n	800697c <_printf_i+0x150>
 8006a06:	682b      	ldr	r3, [r5, #0]
 8006a08:	1d1a      	adds	r2, r3, #4
 8006a0a:	602a      	str	r2, [r5, #0]
 8006a0c:	681d      	ldr	r5, [r3, #0]
 8006a0e:	6862      	ldr	r2, [r4, #4]
 8006a10:	2100      	movs	r1, #0
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7f9 fbfc 	bl	8000210 <memchr>
 8006a18:	b108      	cbz	r0, 8006a1e <_printf_i+0x1f2>
 8006a1a:	1b40      	subs	r0, r0, r5
 8006a1c:	6060      	str	r0, [r4, #4]
 8006a1e:	6863      	ldr	r3, [r4, #4]
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	2300      	movs	r3, #0
 8006a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a28:	e7a8      	b.n	800697c <_printf_i+0x150>
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	462a      	mov	r2, r5
 8006a2e:	4649      	mov	r1, r9
 8006a30:	4640      	mov	r0, r8
 8006a32:	47d0      	blx	sl
 8006a34:	3001      	adds	r0, #1
 8006a36:	d0ab      	beq.n	8006990 <_printf_i+0x164>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	079b      	lsls	r3, r3, #30
 8006a3c:	d413      	bmi.n	8006a66 <_printf_i+0x23a>
 8006a3e:	68e0      	ldr	r0, [r4, #12]
 8006a40:	9b03      	ldr	r3, [sp, #12]
 8006a42:	4298      	cmp	r0, r3
 8006a44:	bfb8      	it	lt
 8006a46:	4618      	movlt	r0, r3
 8006a48:	e7a4      	b.n	8006994 <_printf_i+0x168>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	47d0      	blx	sl
 8006a54:	3001      	adds	r0, #1
 8006a56:	d09b      	beq.n	8006990 <_printf_i+0x164>
 8006a58:	3501      	adds	r5, #1
 8006a5a:	68e3      	ldr	r3, [r4, #12]
 8006a5c:	9903      	ldr	r1, [sp, #12]
 8006a5e:	1a5b      	subs	r3, r3, r1
 8006a60:	42ab      	cmp	r3, r5
 8006a62:	dcf2      	bgt.n	8006a4a <_printf_i+0x21e>
 8006a64:	e7eb      	b.n	8006a3e <_printf_i+0x212>
 8006a66:	2500      	movs	r5, #0
 8006a68:	f104 0619 	add.w	r6, r4, #25
 8006a6c:	e7f5      	b.n	8006a5a <_printf_i+0x22e>
 8006a6e:	bf00      	nop
 8006a70:	0800cbd8 	.word	0x0800cbd8
 8006a74:	0800cbe9 	.word	0x0800cbe9

08006a78 <_scanf_float>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	b087      	sub	sp, #28
 8006a7e:	4617      	mov	r7, r2
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	688b      	ldr	r3, [r1, #8]
 8006a84:	1e5a      	subs	r2, r3, #1
 8006a86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a8a:	bf83      	ittte	hi
 8006a8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a90:	195b      	addhi	r3, r3, r5
 8006a92:	9302      	strhi	r3, [sp, #8]
 8006a94:	2300      	movls	r3, #0
 8006a96:	bf86      	itte	hi
 8006a98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a9c:	608b      	strhi	r3, [r1, #8]
 8006a9e:	9302      	strls	r3, [sp, #8]
 8006aa0:	680b      	ldr	r3, [r1, #0]
 8006aa2:	468b      	mov	fp, r1
 8006aa4:	2500      	movs	r5, #0
 8006aa6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006aaa:	f84b 3b1c 	str.w	r3, [fp], #28
 8006aae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	465e      	mov	r6, fp
 8006ab8:	46aa      	mov	sl, r5
 8006aba:	46a9      	mov	r9, r5
 8006abc:	9501      	str	r5, [sp, #4]
 8006abe:	68a2      	ldr	r2, [r4, #8]
 8006ac0:	b152      	cbz	r2, 8006ad8 <_scanf_float+0x60>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ac8:	d864      	bhi.n	8006b94 <_scanf_float+0x11c>
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d83c      	bhi.n	8006b48 <_scanf_float+0xd0>
 8006ace:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ad2:	b2c8      	uxtb	r0, r1
 8006ad4:	280e      	cmp	r0, #14
 8006ad6:	d93a      	bls.n	8006b4e <_scanf_float+0xd6>
 8006ad8:	f1b9 0f00 	cmp.w	r9, #0
 8006adc:	d003      	beq.n	8006ae6 <_scanf_float+0x6e>
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aea:	f1ba 0f01 	cmp.w	sl, #1
 8006aee:	f200 8113 	bhi.w	8006d18 <_scanf_float+0x2a0>
 8006af2:	455e      	cmp	r6, fp
 8006af4:	f200 8105 	bhi.w	8006d02 <_scanf_float+0x28a>
 8006af8:	2501      	movs	r5, #1
 8006afa:	4628      	mov	r0, r5
 8006afc:	b007      	add	sp, #28
 8006afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b06:	2a0d      	cmp	r2, #13
 8006b08:	d8e6      	bhi.n	8006ad8 <_scanf_float+0x60>
 8006b0a:	a101      	add	r1, pc, #4	; (adr r1, 8006b10 <_scanf_float+0x98>)
 8006b0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b10:	08006c4f 	.word	0x08006c4f
 8006b14:	08006ad9 	.word	0x08006ad9
 8006b18:	08006ad9 	.word	0x08006ad9
 8006b1c:	08006ad9 	.word	0x08006ad9
 8006b20:	08006caf 	.word	0x08006caf
 8006b24:	08006c87 	.word	0x08006c87
 8006b28:	08006ad9 	.word	0x08006ad9
 8006b2c:	08006ad9 	.word	0x08006ad9
 8006b30:	08006c5d 	.word	0x08006c5d
 8006b34:	08006ad9 	.word	0x08006ad9
 8006b38:	08006ad9 	.word	0x08006ad9
 8006b3c:	08006ad9 	.word	0x08006ad9
 8006b40:	08006ad9 	.word	0x08006ad9
 8006b44:	08006c15 	.word	0x08006c15
 8006b48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b4c:	e7db      	b.n	8006b06 <_scanf_float+0x8e>
 8006b4e:	290e      	cmp	r1, #14
 8006b50:	d8c2      	bhi.n	8006ad8 <_scanf_float+0x60>
 8006b52:	a001      	add	r0, pc, #4	; (adr r0, 8006b58 <_scanf_float+0xe0>)
 8006b54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b58:	08006c07 	.word	0x08006c07
 8006b5c:	08006ad9 	.word	0x08006ad9
 8006b60:	08006c07 	.word	0x08006c07
 8006b64:	08006c9b 	.word	0x08006c9b
 8006b68:	08006ad9 	.word	0x08006ad9
 8006b6c:	08006bb5 	.word	0x08006bb5
 8006b70:	08006bf1 	.word	0x08006bf1
 8006b74:	08006bf1 	.word	0x08006bf1
 8006b78:	08006bf1 	.word	0x08006bf1
 8006b7c:	08006bf1 	.word	0x08006bf1
 8006b80:	08006bf1 	.word	0x08006bf1
 8006b84:	08006bf1 	.word	0x08006bf1
 8006b88:	08006bf1 	.word	0x08006bf1
 8006b8c:	08006bf1 	.word	0x08006bf1
 8006b90:	08006bf1 	.word	0x08006bf1
 8006b94:	2b6e      	cmp	r3, #110	; 0x6e
 8006b96:	d809      	bhi.n	8006bac <_scanf_float+0x134>
 8006b98:	2b60      	cmp	r3, #96	; 0x60
 8006b9a:	d8b2      	bhi.n	8006b02 <_scanf_float+0x8a>
 8006b9c:	2b54      	cmp	r3, #84	; 0x54
 8006b9e:	d077      	beq.n	8006c90 <_scanf_float+0x218>
 8006ba0:	2b59      	cmp	r3, #89	; 0x59
 8006ba2:	d199      	bne.n	8006ad8 <_scanf_float+0x60>
 8006ba4:	2d07      	cmp	r5, #7
 8006ba6:	d197      	bne.n	8006ad8 <_scanf_float+0x60>
 8006ba8:	2508      	movs	r5, #8
 8006baa:	e029      	b.n	8006c00 <_scanf_float+0x188>
 8006bac:	2b74      	cmp	r3, #116	; 0x74
 8006bae:	d06f      	beq.n	8006c90 <_scanf_float+0x218>
 8006bb0:	2b79      	cmp	r3, #121	; 0x79
 8006bb2:	e7f6      	b.n	8006ba2 <_scanf_float+0x12a>
 8006bb4:	6821      	ldr	r1, [r4, #0]
 8006bb6:	05c8      	lsls	r0, r1, #23
 8006bb8:	d51a      	bpl.n	8006bf0 <_scanf_float+0x178>
 8006bba:	9b02      	ldr	r3, [sp, #8]
 8006bbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bc0:	6021      	str	r1, [r4, #0]
 8006bc2:	f109 0901 	add.w	r9, r9, #1
 8006bc6:	b11b      	cbz	r3, 8006bd0 <_scanf_float+0x158>
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	3201      	adds	r2, #1
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	60a2      	str	r2, [r4, #8]
 8006bd0:	68a3      	ldr	r3, [r4, #8]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	6123      	str	r3, [r4, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	f340 8084 	ble.w	8006cf0 <_scanf_float+0x278>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	3301      	adds	r3, #1
 8006bec:	603b      	str	r3, [r7, #0]
 8006bee:	e766      	b.n	8006abe <_scanf_float+0x46>
 8006bf0:	eb1a 0f05 	cmn.w	sl, r5
 8006bf4:	f47f af70 	bne.w	8006ad8 <_scanf_float+0x60>
 8006bf8:	6822      	ldr	r2, [r4, #0]
 8006bfa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	f806 3b01 	strb.w	r3, [r6], #1
 8006c04:	e7e4      	b.n	8006bd0 <_scanf_float+0x158>
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	0610      	lsls	r0, r2, #24
 8006c0a:	f57f af65 	bpl.w	8006ad8 <_scanf_float+0x60>
 8006c0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c12:	e7f4      	b.n	8006bfe <_scanf_float+0x186>
 8006c14:	f1ba 0f00 	cmp.w	sl, #0
 8006c18:	d10e      	bne.n	8006c38 <_scanf_float+0x1c0>
 8006c1a:	f1b9 0f00 	cmp.w	r9, #0
 8006c1e:	d10e      	bne.n	8006c3e <_scanf_float+0x1c6>
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c26:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c2a:	d108      	bne.n	8006c3e <_scanf_float+0x1c6>
 8006c2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	f04f 0a01 	mov.w	sl, #1
 8006c36:	e7e3      	b.n	8006c00 <_scanf_float+0x188>
 8006c38:	f1ba 0f02 	cmp.w	sl, #2
 8006c3c:	d055      	beq.n	8006cea <_scanf_float+0x272>
 8006c3e:	2d01      	cmp	r5, #1
 8006c40:	d002      	beq.n	8006c48 <_scanf_float+0x1d0>
 8006c42:	2d04      	cmp	r5, #4
 8006c44:	f47f af48 	bne.w	8006ad8 <_scanf_float+0x60>
 8006c48:	3501      	adds	r5, #1
 8006c4a:	b2ed      	uxtb	r5, r5
 8006c4c:	e7d8      	b.n	8006c00 <_scanf_float+0x188>
 8006c4e:	f1ba 0f01 	cmp.w	sl, #1
 8006c52:	f47f af41 	bne.w	8006ad8 <_scanf_float+0x60>
 8006c56:	f04f 0a02 	mov.w	sl, #2
 8006c5a:	e7d1      	b.n	8006c00 <_scanf_float+0x188>
 8006c5c:	b97d      	cbnz	r5, 8006c7e <_scanf_float+0x206>
 8006c5e:	f1b9 0f00 	cmp.w	r9, #0
 8006c62:	f47f af3c 	bne.w	8006ade <_scanf_float+0x66>
 8006c66:	6822      	ldr	r2, [r4, #0]
 8006c68:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c70:	f47f af39 	bne.w	8006ae6 <_scanf_float+0x6e>
 8006c74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c78:	6022      	str	r2, [r4, #0]
 8006c7a:	2501      	movs	r5, #1
 8006c7c:	e7c0      	b.n	8006c00 <_scanf_float+0x188>
 8006c7e:	2d03      	cmp	r5, #3
 8006c80:	d0e2      	beq.n	8006c48 <_scanf_float+0x1d0>
 8006c82:	2d05      	cmp	r5, #5
 8006c84:	e7de      	b.n	8006c44 <_scanf_float+0x1cc>
 8006c86:	2d02      	cmp	r5, #2
 8006c88:	f47f af26 	bne.w	8006ad8 <_scanf_float+0x60>
 8006c8c:	2503      	movs	r5, #3
 8006c8e:	e7b7      	b.n	8006c00 <_scanf_float+0x188>
 8006c90:	2d06      	cmp	r5, #6
 8006c92:	f47f af21 	bne.w	8006ad8 <_scanf_float+0x60>
 8006c96:	2507      	movs	r5, #7
 8006c98:	e7b2      	b.n	8006c00 <_scanf_float+0x188>
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	0591      	lsls	r1, r2, #22
 8006c9e:	f57f af1b 	bpl.w	8006ad8 <_scanf_float+0x60>
 8006ca2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006cac:	e7a8      	b.n	8006c00 <_scanf_float+0x188>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cb8:	d006      	beq.n	8006cc8 <_scanf_float+0x250>
 8006cba:	0550      	lsls	r0, r2, #21
 8006cbc:	f57f af0c 	bpl.w	8006ad8 <_scanf_float+0x60>
 8006cc0:	f1b9 0f00 	cmp.w	r9, #0
 8006cc4:	f43f af0f 	beq.w	8006ae6 <_scanf_float+0x6e>
 8006cc8:	0591      	lsls	r1, r2, #22
 8006cca:	bf58      	it	pl
 8006ccc:	9901      	ldrpl	r1, [sp, #4]
 8006cce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cd2:	bf58      	it	pl
 8006cd4:	eba9 0101 	subpl.w	r1, r9, r1
 8006cd8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cdc:	bf58      	it	pl
 8006cde:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ce2:	6022      	str	r2, [r4, #0]
 8006ce4:	f04f 0900 	mov.w	r9, #0
 8006ce8:	e78a      	b.n	8006c00 <_scanf_float+0x188>
 8006cea:	f04f 0a03 	mov.w	sl, #3
 8006cee:	e787      	b.n	8006c00 <_scanf_float+0x188>
 8006cf0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4640      	mov	r0, r8
 8006cf8:	4798      	blx	r3
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	f43f aedf 	beq.w	8006abe <_scanf_float+0x46>
 8006d00:	e6ea      	b.n	8006ad8 <_scanf_float+0x60>
 8006d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d0a:	463a      	mov	r2, r7
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	4798      	blx	r3
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	6123      	str	r3, [r4, #16]
 8006d16:	e6ec      	b.n	8006af2 <_scanf_float+0x7a>
 8006d18:	1e6b      	subs	r3, r5, #1
 8006d1a:	2b06      	cmp	r3, #6
 8006d1c:	d825      	bhi.n	8006d6a <_scanf_float+0x2f2>
 8006d1e:	2d02      	cmp	r5, #2
 8006d20:	d836      	bhi.n	8006d90 <_scanf_float+0x318>
 8006d22:	455e      	cmp	r6, fp
 8006d24:	f67f aee8 	bls.w	8006af8 <_scanf_float+0x80>
 8006d28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d30:	463a      	mov	r2, r7
 8006d32:	4640      	mov	r0, r8
 8006d34:	4798      	blx	r3
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	e7f1      	b.n	8006d22 <_scanf_float+0x2aa>
 8006d3e:	9802      	ldr	r0, [sp, #8]
 8006d40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d44:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d48:	9002      	str	r0, [sp, #8]
 8006d4a:	463a      	mov	r2, r7
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	4798      	blx	r3
 8006d50:	6923      	ldr	r3, [r4, #16]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	6123      	str	r3, [r4, #16]
 8006d56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d5a:	fa5f fa8a 	uxtb.w	sl, sl
 8006d5e:	f1ba 0f02 	cmp.w	sl, #2
 8006d62:	d1ec      	bne.n	8006d3e <_scanf_float+0x2c6>
 8006d64:	3d03      	subs	r5, #3
 8006d66:	b2ed      	uxtb	r5, r5
 8006d68:	1b76      	subs	r6, r6, r5
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	05da      	lsls	r2, r3, #23
 8006d6e:	d52f      	bpl.n	8006dd0 <_scanf_float+0x358>
 8006d70:	055b      	lsls	r3, r3, #21
 8006d72:	d510      	bpl.n	8006d96 <_scanf_float+0x31e>
 8006d74:	455e      	cmp	r6, fp
 8006d76:	f67f aebf 	bls.w	8006af8 <_scanf_float+0x80>
 8006d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d82:	463a      	mov	r2, r7
 8006d84:	4640      	mov	r0, r8
 8006d86:	4798      	blx	r3
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	6123      	str	r3, [r4, #16]
 8006d8e:	e7f1      	b.n	8006d74 <_scanf_float+0x2fc>
 8006d90:	46aa      	mov	sl, r5
 8006d92:	9602      	str	r6, [sp, #8]
 8006d94:	e7df      	b.n	8006d56 <_scanf_float+0x2de>
 8006d96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	2965      	cmp	r1, #101	; 0x65
 8006d9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006da2:	f106 35ff 	add.w	r5, r6, #4294967295
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	d00c      	beq.n	8006dc4 <_scanf_float+0x34c>
 8006daa:	2945      	cmp	r1, #69	; 0x45
 8006dac:	d00a      	beq.n	8006dc4 <_scanf_float+0x34c>
 8006dae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006db2:	463a      	mov	r2, r7
 8006db4:	4640      	mov	r0, r8
 8006db6:	4798      	blx	r3
 8006db8:	6923      	ldr	r3, [r4, #16]
 8006dba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	1eb5      	subs	r5, r6, #2
 8006dc2:	6123      	str	r3, [r4, #16]
 8006dc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dc8:	463a      	mov	r2, r7
 8006dca:	4640      	mov	r0, r8
 8006dcc:	4798      	blx	r3
 8006dce:	462e      	mov	r6, r5
 8006dd0:	6825      	ldr	r5, [r4, #0]
 8006dd2:	f015 0510 	ands.w	r5, r5, #16
 8006dd6:	d159      	bne.n	8006e8c <_scanf_float+0x414>
 8006dd8:	7035      	strb	r5, [r6, #0]
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de4:	d11b      	bne.n	8006e1e <_scanf_float+0x3a6>
 8006de6:	9b01      	ldr	r3, [sp, #4]
 8006de8:	454b      	cmp	r3, r9
 8006dea:	eba3 0209 	sub.w	r2, r3, r9
 8006dee:	d123      	bne.n	8006e38 <_scanf_float+0x3c0>
 8006df0:	2200      	movs	r2, #0
 8006df2:	4659      	mov	r1, fp
 8006df4:	4640      	mov	r0, r8
 8006df6:	f000 ff09 	bl	8007c0c <_strtod_r>
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	f012 0f02 	tst.w	r2, #2
 8006e02:	ec57 6b10 	vmov	r6, r7, d0
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	d021      	beq.n	8006e4e <_scanf_float+0x3d6>
 8006e0a:	9903      	ldr	r1, [sp, #12]
 8006e0c:	1d1a      	adds	r2, r3, #4
 8006e0e:	600a      	str	r2, [r1, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	e9c3 6700 	strd	r6, r7, [r3]
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60e3      	str	r3, [r4, #12]
 8006e1c:	e66d      	b.n	8006afa <_scanf_float+0x82>
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0e5      	beq.n	8006df0 <_scanf_float+0x378>
 8006e24:	9905      	ldr	r1, [sp, #20]
 8006e26:	230a      	movs	r3, #10
 8006e28:	462a      	mov	r2, r5
 8006e2a:	3101      	adds	r1, #1
 8006e2c:	4640      	mov	r0, r8
 8006e2e:	f000 ff75 	bl	8007d1c <_strtol_r>
 8006e32:	9b04      	ldr	r3, [sp, #16]
 8006e34:	9e05      	ldr	r6, [sp, #20]
 8006e36:	1ac2      	subs	r2, r0, r3
 8006e38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e3c:	429e      	cmp	r6, r3
 8006e3e:	bf28      	it	cs
 8006e40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e44:	4912      	ldr	r1, [pc, #72]	; (8006e90 <_scanf_float+0x418>)
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 f82c 	bl	8006ea4 <siprintf>
 8006e4c:	e7d0      	b.n	8006df0 <_scanf_float+0x378>
 8006e4e:	9903      	ldr	r1, [sp, #12]
 8006e50:	f012 0f04 	tst.w	r2, #4
 8006e54:	f103 0204 	add.w	r2, r3, #4
 8006e58:	600a      	str	r2, [r1, #0]
 8006e5a:	d1d9      	bne.n	8006e10 <_scanf_float+0x398>
 8006e5c:	f8d3 8000 	ldr.w	r8, [r3]
 8006e60:	ee10 2a10 	vmov	r2, s0
 8006e64:	ee10 0a10 	vmov	r0, s0
 8006e68:	463b      	mov	r3, r7
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fe76 	bl	8000b5c <__aeabi_dcmpun>
 8006e70:	b128      	cbz	r0, 8006e7e <_scanf_float+0x406>
 8006e72:	4808      	ldr	r0, [pc, #32]	; (8006e94 <_scanf_float+0x41c>)
 8006e74:	f000 f810 	bl	8006e98 <nanf>
 8006e78:	ed88 0a00 	vstr	s0, [r8]
 8006e7c:	e7cb      	b.n	8006e16 <_scanf_float+0x39e>
 8006e7e:	4630      	mov	r0, r6
 8006e80:	4639      	mov	r1, r7
 8006e82:	f7f9 fec9 	bl	8000c18 <__aeabi_d2f>
 8006e86:	f8c8 0000 	str.w	r0, [r8]
 8006e8a:	e7c4      	b.n	8006e16 <_scanf_float+0x39e>
 8006e8c:	2500      	movs	r5, #0
 8006e8e:	e634      	b.n	8006afa <_scanf_float+0x82>
 8006e90:	0800cbfa 	.word	0x0800cbfa
 8006e94:	0800d01b 	.word	0x0800d01b

08006e98 <nanf>:
 8006e98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ea0 <nanf+0x8>
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	7fc00000 	.word	0x7fc00000

08006ea4 <siprintf>:
 8006ea4:	b40e      	push	{r1, r2, r3}
 8006ea6:	b500      	push	{lr}
 8006ea8:	b09c      	sub	sp, #112	; 0x70
 8006eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8006eac:	9002      	str	r0, [sp, #8]
 8006eae:	9006      	str	r0, [sp, #24]
 8006eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eb4:	4809      	ldr	r0, [pc, #36]	; (8006edc <siprintf+0x38>)
 8006eb6:	9107      	str	r1, [sp, #28]
 8006eb8:	9104      	str	r1, [sp, #16]
 8006eba:	4909      	ldr	r1, [pc, #36]	; (8006ee0 <siprintf+0x3c>)
 8006ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ec0:	9105      	str	r1, [sp, #20]
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	a902      	add	r1, sp, #8
 8006ec8:	f002 ff8a 	bl	8009de0 <_svfiprintf_r>
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	b01c      	add	sp, #112	; 0x70
 8006ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed8:	b003      	add	sp, #12
 8006eda:	4770      	bx	lr
 8006edc:	20000018 	.word	0x20000018
 8006ee0:	ffff0208 	.word	0xffff0208

08006ee4 <siscanf>:
 8006ee4:	b40e      	push	{r1, r2, r3}
 8006ee6:	b510      	push	{r4, lr}
 8006ee8:	b09f      	sub	sp, #124	; 0x7c
 8006eea:	ac21      	add	r4, sp, #132	; 0x84
 8006eec:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006ef0:	f854 2b04 	ldr.w	r2, [r4], #4
 8006ef4:	9201      	str	r2, [sp, #4]
 8006ef6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006efa:	9004      	str	r0, [sp, #16]
 8006efc:	9008      	str	r0, [sp, #32]
 8006efe:	f7f9 f979 	bl	80001f4 <strlen>
 8006f02:	4b0c      	ldr	r3, [pc, #48]	; (8006f34 <siscanf+0x50>)
 8006f04:	9005      	str	r0, [sp, #20]
 8006f06:	9009      	str	r0, [sp, #36]	; 0x24
 8006f08:	930d      	str	r3, [sp, #52]	; 0x34
 8006f0a:	480b      	ldr	r0, [pc, #44]	; (8006f38 <siscanf+0x54>)
 8006f0c:	9a01      	ldr	r2, [sp, #4]
 8006f0e:	6800      	ldr	r0, [r0, #0]
 8006f10:	9403      	str	r4, [sp, #12]
 8006f12:	2300      	movs	r3, #0
 8006f14:	9311      	str	r3, [sp, #68]	; 0x44
 8006f16:	9316      	str	r3, [sp, #88]	; 0x58
 8006f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f1c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006f20:	a904      	add	r1, sp, #16
 8006f22:	4623      	mov	r3, r4
 8006f24:	f003 f8b6 	bl	800a094 <__ssvfiscanf_r>
 8006f28:	b01f      	add	sp, #124	; 0x7c
 8006f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f2e:	b003      	add	sp, #12
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	08006f5f 	.word	0x08006f5f
 8006f38:	20000018 	.word	0x20000018

08006f3c <__sread>:
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	460c      	mov	r4, r1
 8006f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f44:	f003 fb70 	bl	800a628 <_read_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	bfab      	itete	ge
 8006f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f50:	181b      	addge	r3, r3, r0
 8006f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f56:	bfac      	ite	ge
 8006f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f5a:	81a3      	strhlt	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__seofread>:
 8006f5e:	2000      	movs	r0, #0
 8006f60:	4770      	bx	lr

08006f62 <__swrite>:
 8006f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f66:	461f      	mov	r7, r3
 8006f68:	898b      	ldrh	r3, [r1, #12]
 8006f6a:	05db      	lsls	r3, r3, #23
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4616      	mov	r6, r2
 8006f72:	d505      	bpl.n	8006f80 <__swrite+0x1e>
 8006f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f78:	2302      	movs	r3, #2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f002 f8e2 	bl	8009144 <_lseek_r>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	463b      	mov	r3, r7
 8006f90:	4628      	mov	r0, r5
 8006f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f96:	f000 bec3 	b.w	8007d20 <_write_r>

08006f9a <__sseek>:
 8006f9a:	b510      	push	{r4, lr}
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa2:	f002 f8cf 	bl	8009144 <_lseek_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	bf15      	itete	ne
 8006fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fb6:	81a3      	strheq	r3, [r4, #12]
 8006fb8:	bf18      	it	ne
 8006fba:	81a3      	strhne	r3, [r4, #12]
 8006fbc:	bd10      	pop	{r4, pc}

08006fbe <__sclose>:
 8006fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc2:	f000 bebf 	b.w	8007d44 <_close_r>

08006fc6 <sulp>:
 8006fc6:	b570      	push	{r4, r5, r6, lr}
 8006fc8:	4604      	mov	r4, r0
 8006fca:	460d      	mov	r5, r1
 8006fcc:	ec45 4b10 	vmov	d0, r4, r5
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	f002 fc63 	bl	800989c <__ulp>
 8006fd6:	ec51 0b10 	vmov	r0, r1, d0
 8006fda:	b17e      	cbz	r6, 8006ffc <sulp+0x36>
 8006fdc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fe0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	dd09      	ble.n	8006ffc <sulp+0x36>
 8006fe8:	051b      	lsls	r3, r3, #20
 8006fea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fee:	2400      	movs	r4, #0
 8006ff0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	f7f9 fb16 	bl	8000628 <__aeabi_dmul>
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007000 <_strtod_l>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	ed2d 8b02 	vpush	{d8}
 8007008:	b09d      	sub	sp, #116	; 0x74
 800700a:	461f      	mov	r7, r3
 800700c:	2300      	movs	r3, #0
 800700e:	9318      	str	r3, [sp, #96]	; 0x60
 8007010:	4ba2      	ldr	r3, [pc, #648]	; (800729c <_strtod_l+0x29c>)
 8007012:	9213      	str	r2, [sp, #76]	; 0x4c
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	9305      	str	r3, [sp, #20]
 8007018:	4604      	mov	r4, r0
 800701a:	4618      	mov	r0, r3
 800701c:	4688      	mov	r8, r1
 800701e:	f7f9 f8e9 	bl	80001f4 <strlen>
 8007022:	f04f 0a00 	mov.w	sl, #0
 8007026:	4605      	mov	r5, r0
 8007028:	f04f 0b00 	mov.w	fp, #0
 800702c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007030:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	2a2b      	cmp	r2, #43	; 0x2b
 8007036:	d04e      	beq.n	80070d6 <_strtod_l+0xd6>
 8007038:	d83b      	bhi.n	80070b2 <_strtod_l+0xb2>
 800703a:	2a0d      	cmp	r2, #13
 800703c:	d834      	bhi.n	80070a8 <_strtod_l+0xa8>
 800703e:	2a08      	cmp	r2, #8
 8007040:	d834      	bhi.n	80070ac <_strtod_l+0xac>
 8007042:	2a00      	cmp	r2, #0
 8007044:	d03e      	beq.n	80070c4 <_strtod_l+0xc4>
 8007046:	2300      	movs	r3, #0
 8007048:	930a      	str	r3, [sp, #40]	; 0x28
 800704a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800704c:	7833      	ldrb	r3, [r6, #0]
 800704e:	2b30      	cmp	r3, #48	; 0x30
 8007050:	f040 80b0 	bne.w	80071b4 <_strtod_l+0x1b4>
 8007054:	7873      	ldrb	r3, [r6, #1]
 8007056:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800705a:	2b58      	cmp	r3, #88	; 0x58
 800705c:	d168      	bne.n	8007130 <_strtod_l+0x130>
 800705e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	ab18      	add	r3, sp, #96	; 0x60
 8007064:	9702      	str	r7, [sp, #8]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	4a8d      	ldr	r2, [pc, #564]	; (80072a0 <_strtod_l+0x2a0>)
 800706a:	ab19      	add	r3, sp, #100	; 0x64
 800706c:	a917      	add	r1, sp, #92	; 0x5c
 800706e:	4620      	mov	r0, r4
 8007070:	f001 fd5c 	bl	8008b2c <__gethex>
 8007074:	f010 0707 	ands.w	r7, r0, #7
 8007078:	4605      	mov	r5, r0
 800707a:	d005      	beq.n	8007088 <_strtod_l+0x88>
 800707c:	2f06      	cmp	r7, #6
 800707e:	d12c      	bne.n	80070da <_strtod_l+0xda>
 8007080:	3601      	adds	r6, #1
 8007082:	2300      	movs	r3, #0
 8007084:	9617      	str	r6, [sp, #92]	; 0x5c
 8007086:	930a      	str	r3, [sp, #40]	; 0x28
 8007088:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800708a:	2b00      	cmp	r3, #0
 800708c:	f040 8590 	bne.w	8007bb0 <_strtod_l+0xbb0>
 8007090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007092:	b1eb      	cbz	r3, 80070d0 <_strtod_l+0xd0>
 8007094:	4652      	mov	r2, sl
 8007096:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800709a:	ec43 2b10 	vmov	d0, r2, r3
 800709e:	b01d      	add	sp, #116	; 0x74
 80070a0:	ecbd 8b02 	vpop	{d8}
 80070a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a8:	2a20      	cmp	r2, #32
 80070aa:	d1cc      	bne.n	8007046 <_strtod_l+0x46>
 80070ac:	3301      	adds	r3, #1
 80070ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80070b0:	e7be      	b.n	8007030 <_strtod_l+0x30>
 80070b2:	2a2d      	cmp	r2, #45	; 0x2d
 80070b4:	d1c7      	bne.n	8007046 <_strtod_l+0x46>
 80070b6:	2201      	movs	r2, #1
 80070b8:	920a      	str	r2, [sp, #40]	; 0x28
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1c2      	bne.n	800704a <_strtod_l+0x4a>
 80070c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 856e 	bne.w	8007bac <_strtod_l+0xbac>
 80070d0:	4652      	mov	r2, sl
 80070d2:	465b      	mov	r3, fp
 80070d4:	e7e1      	b.n	800709a <_strtod_l+0x9a>
 80070d6:	2200      	movs	r2, #0
 80070d8:	e7ee      	b.n	80070b8 <_strtod_l+0xb8>
 80070da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070dc:	b13a      	cbz	r2, 80070ee <_strtod_l+0xee>
 80070de:	2135      	movs	r1, #53	; 0x35
 80070e0:	a81a      	add	r0, sp, #104	; 0x68
 80070e2:	f002 fce6 	bl	8009ab2 <__copybits>
 80070e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070e8:	4620      	mov	r0, r4
 80070ea:	f002 f8a5 	bl	8009238 <_Bfree>
 80070ee:	3f01      	subs	r7, #1
 80070f0:	2f04      	cmp	r7, #4
 80070f2:	d806      	bhi.n	8007102 <_strtod_l+0x102>
 80070f4:	e8df f007 	tbb	[pc, r7]
 80070f8:	1714030a 	.word	0x1714030a
 80070fc:	0a          	.byte	0x0a
 80070fd:	00          	.byte	0x00
 80070fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007102:	0728      	lsls	r0, r5, #28
 8007104:	d5c0      	bpl.n	8007088 <_strtod_l+0x88>
 8007106:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800710a:	e7bd      	b.n	8007088 <_strtod_l+0x88>
 800710c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007110:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007112:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007116:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800711a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800711e:	e7f0      	b.n	8007102 <_strtod_l+0x102>
 8007120:	f8df b180 	ldr.w	fp, [pc, #384]	; 80072a4 <_strtod_l+0x2a4>
 8007124:	e7ed      	b.n	8007102 <_strtod_l+0x102>
 8007126:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800712a:	f04f 3aff 	mov.w	sl, #4294967295
 800712e:	e7e8      	b.n	8007102 <_strtod_l+0x102>
 8007130:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	9217      	str	r2, [sp, #92]	; 0x5c
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b30      	cmp	r3, #48	; 0x30
 800713a:	d0f9      	beq.n	8007130 <_strtod_l+0x130>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0a3      	beq.n	8007088 <_strtod_l+0x88>
 8007140:	2301      	movs	r3, #1
 8007142:	f04f 0900 	mov.w	r9, #0
 8007146:	9304      	str	r3, [sp, #16]
 8007148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800714a:	9308      	str	r3, [sp, #32]
 800714c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007150:	464f      	mov	r7, r9
 8007152:	220a      	movs	r2, #10
 8007154:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007156:	7806      	ldrb	r6, [r0, #0]
 8007158:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800715c:	b2d9      	uxtb	r1, r3
 800715e:	2909      	cmp	r1, #9
 8007160:	d92a      	bls.n	80071b8 <_strtod_l+0x1b8>
 8007162:	9905      	ldr	r1, [sp, #20]
 8007164:	462a      	mov	r2, r5
 8007166:	f003 fac3 	bl	800a6f0 <strncmp>
 800716a:	b398      	cbz	r0, 80071d4 <_strtod_l+0x1d4>
 800716c:	2000      	movs	r0, #0
 800716e:	4632      	mov	r2, r6
 8007170:	463d      	mov	r5, r7
 8007172:	9005      	str	r0, [sp, #20]
 8007174:	4603      	mov	r3, r0
 8007176:	2a65      	cmp	r2, #101	; 0x65
 8007178:	d001      	beq.n	800717e <_strtod_l+0x17e>
 800717a:	2a45      	cmp	r2, #69	; 0x45
 800717c:	d118      	bne.n	80071b0 <_strtod_l+0x1b0>
 800717e:	b91d      	cbnz	r5, 8007188 <_strtod_l+0x188>
 8007180:	9a04      	ldr	r2, [sp, #16]
 8007182:	4302      	orrs	r2, r0
 8007184:	d09e      	beq.n	80070c4 <_strtod_l+0xc4>
 8007186:	2500      	movs	r5, #0
 8007188:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800718c:	f108 0201 	add.w	r2, r8, #1
 8007190:	9217      	str	r2, [sp, #92]	; 0x5c
 8007192:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007196:	2a2b      	cmp	r2, #43	; 0x2b
 8007198:	d075      	beq.n	8007286 <_strtod_l+0x286>
 800719a:	2a2d      	cmp	r2, #45	; 0x2d
 800719c:	d07b      	beq.n	8007296 <_strtod_l+0x296>
 800719e:	f04f 0c00 	mov.w	ip, #0
 80071a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80071a6:	2909      	cmp	r1, #9
 80071a8:	f240 8082 	bls.w	80072b0 <_strtod_l+0x2b0>
 80071ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071b0:	2600      	movs	r6, #0
 80071b2:	e09d      	b.n	80072f0 <_strtod_l+0x2f0>
 80071b4:	2300      	movs	r3, #0
 80071b6:	e7c4      	b.n	8007142 <_strtod_l+0x142>
 80071b8:	2f08      	cmp	r7, #8
 80071ba:	bfd8      	it	le
 80071bc:	9907      	ldrle	r1, [sp, #28]
 80071be:	f100 0001 	add.w	r0, r0, #1
 80071c2:	bfda      	itte	le
 80071c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80071c8:	9307      	strle	r3, [sp, #28]
 80071ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80071ce:	3701      	adds	r7, #1
 80071d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80071d2:	e7bf      	b.n	8007154 <_strtod_l+0x154>
 80071d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071d6:	195a      	adds	r2, r3, r5
 80071d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80071da:	5d5a      	ldrb	r2, [r3, r5]
 80071dc:	2f00      	cmp	r7, #0
 80071de:	d037      	beq.n	8007250 <_strtod_l+0x250>
 80071e0:	9005      	str	r0, [sp, #20]
 80071e2:	463d      	mov	r5, r7
 80071e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071e8:	2b09      	cmp	r3, #9
 80071ea:	d912      	bls.n	8007212 <_strtod_l+0x212>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e7c2      	b.n	8007176 <_strtod_l+0x176>
 80071f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80071f6:	785a      	ldrb	r2, [r3, #1]
 80071f8:	3001      	adds	r0, #1
 80071fa:	2a30      	cmp	r2, #48	; 0x30
 80071fc:	d0f8      	beq.n	80071f0 <_strtod_l+0x1f0>
 80071fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007202:	2b08      	cmp	r3, #8
 8007204:	f200 84d9 	bhi.w	8007bba <_strtod_l+0xbba>
 8007208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800720a:	9005      	str	r0, [sp, #20]
 800720c:	2000      	movs	r0, #0
 800720e:	9308      	str	r3, [sp, #32]
 8007210:	4605      	mov	r5, r0
 8007212:	3a30      	subs	r2, #48	; 0x30
 8007214:	f100 0301 	add.w	r3, r0, #1
 8007218:	d014      	beq.n	8007244 <_strtod_l+0x244>
 800721a:	9905      	ldr	r1, [sp, #20]
 800721c:	4419      	add	r1, r3
 800721e:	9105      	str	r1, [sp, #20]
 8007220:	462b      	mov	r3, r5
 8007222:	eb00 0e05 	add.w	lr, r0, r5
 8007226:	210a      	movs	r1, #10
 8007228:	4573      	cmp	r3, lr
 800722a:	d113      	bne.n	8007254 <_strtod_l+0x254>
 800722c:	182b      	adds	r3, r5, r0
 800722e:	2b08      	cmp	r3, #8
 8007230:	f105 0501 	add.w	r5, r5, #1
 8007234:	4405      	add	r5, r0
 8007236:	dc1c      	bgt.n	8007272 <_strtod_l+0x272>
 8007238:	9907      	ldr	r1, [sp, #28]
 800723a:	230a      	movs	r3, #10
 800723c:	fb03 2301 	mla	r3, r3, r1, r2
 8007240:	9307      	str	r3, [sp, #28]
 8007242:	2300      	movs	r3, #0
 8007244:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007246:	1c51      	adds	r1, r2, #1
 8007248:	9117      	str	r1, [sp, #92]	; 0x5c
 800724a:	7852      	ldrb	r2, [r2, #1]
 800724c:	4618      	mov	r0, r3
 800724e:	e7c9      	b.n	80071e4 <_strtod_l+0x1e4>
 8007250:	4638      	mov	r0, r7
 8007252:	e7d2      	b.n	80071fa <_strtod_l+0x1fa>
 8007254:	2b08      	cmp	r3, #8
 8007256:	dc04      	bgt.n	8007262 <_strtod_l+0x262>
 8007258:	9e07      	ldr	r6, [sp, #28]
 800725a:	434e      	muls	r6, r1
 800725c:	9607      	str	r6, [sp, #28]
 800725e:	3301      	adds	r3, #1
 8007260:	e7e2      	b.n	8007228 <_strtod_l+0x228>
 8007262:	f103 0c01 	add.w	ip, r3, #1
 8007266:	f1bc 0f10 	cmp.w	ip, #16
 800726a:	bfd8      	it	le
 800726c:	fb01 f909 	mulle.w	r9, r1, r9
 8007270:	e7f5      	b.n	800725e <_strtod_l+0x25e>
 8007272:	2d10      	cmp	r5, #16
 8007274:	bfdc      	itt	le
 8007276:	230a      	movle	r3, #10
 8007278:	fb03 2909 	mlale	r9, r3, r9, r2
 800727c:	e7e1      	b.n	8007242 <_strtod_l+0x242>
 800727e:	2300      	movs	r3, #0
 8007280:	9305      	str	r3, [sp, #20]
 8007282:	2301      	movs	r3, #1
 8007284:	e77c      	b.n	8007180 <_strtod_l+0x180>
 8007286:	f04f 0c00 	mov.w	ip, #0
 800728a:	f108 0202 	add.w	r2, r8, #2
 800728e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007290:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007294:	e785      	b.n	80071a2 <_strtod_l+0x1a2>
 8007296:	f04f 0c01 	mov.w	ip, #1
 800729a:	e7f6      	b.n	800728a <_strtod_l+0x28a>
 800729c:	0800ce48 	.word	0x0800ce48
 80072a0:	0800cc00 	.word	0x0800cc00
 80072a4:	7ff00000 	.word	0x7ff00000
 80072a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072aa:	1c51      	adds	r1, r2, #1
 80072ac:	9117      	str	r1, [sp, #92]	; 0x5c
 80072ae:	7852      	ldrb	r2, [r2, #1]
 80072b0:	2a30      	cmp	r2, #48	; 0x30
 80072b2:	d0f9      	beq.n	80072a8 <_strtod_l+0x2a8>
 80072b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80072b8:	2908      	cmp	r1, #8
 80072ba:	f63f af79 	bhi.w	80071b0 <_strtod_l+0x1b0>
 80072be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80072c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072c4:	9206      	str	r2, [sp, #24]
 80072c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072c8:	1c51      	adds	r1, r2, #1
 80072ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80072cc:	7852      	ldrb	r2, [r2, #1]
 80072ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80072d2:	2e09      	cmp	r6, #9
 80072d4:	d937      	bls.n	8007346 <_strtod_l+0x346>
 80072d6:	9e06      	ldr	r6, [sp, #24]
 80072d8:	1b89      	subs	r1, r1, r6
 80072da:	2908      	cmp	r1, #8
 80072dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80072e0:	dc02      	bgt.n	80072e8 <_strtod_l+0x2e8>
 80072e2:	4576      	cmp	r6, lr
 80072e4:	bfa8      	it	ge
 80072e6:	4676      	movge	r6, lr
 80072e8:	f1bc 0f00 	cmp.w	ip, #0
 80072ec:	d000      	beq.n	80072f0 <_strtod_l+0x2f0>
 80072ee:	4276      	negs	r6, r6
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	d14d      	bne.n	8007390 <_strtod_l+0x390>
 80072f4:	9904      	ldr	r1, [sp, #16]
 80072f6:	4301      	orrs	r1, r0
 80072f8:	f47f aec6 	bne.w	8007088 <_strtod_l+0x88>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f47f aee1 	bne.w	80070c4 <_strtod_l+0xc4>
 8007302:	2a69      	cmp	r2, #105	; 0x69
 8007304:	d027      	beq.n	8007356 <_strtod_l+0x356>
 8007306:	dc24      	bgt.n	8007352 <_strtod_l+0x352>
 8007308:	2a49      	cmp	r2, #73	; 0x49
 800730a:	d024      	beq.n	8007356 <_strtod_l+0x356>
 800730c:	2a4e      	cmp	r2, #78	; 0x4e
 800730e:	f47f aed9 	bne.w	80070c4 <_strtod_l+0xc4>
 8007312:	499f      	ldr	r1, [pc, #636]	; (8007590 <_strtod_l+0x590>)
 8007314:	a817      	add	r0, sp, #92	; 0x5c
 8007316:	f001 fe61 	bl	8008fdc <__match>
 800731a:	2800      	cmp	r0, #0
 800731c:	f43f aed2 	beq.w	80070c4 <_strtod_l+0xc4>
 8007320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b28      	cmp	r3, #40	; 0x28
 8007326:	d12d      	bne.n	8007384 <_strtod_l+0x384>
 8007328:	499a      	ldr	r1, [pc, #616]	; (8007594 <_strtod_l+0x594>)
 800732a:	aa1a      	add	r2, sp, #104	; 0x68
 800732c:	a817      	add	r0, sp, #92	; 0x5c
 800732e:	f001 fe69 	bl	8009004 <__hexnan>
 8007332:	2805      	cmp	r0, #5
 8007334:	d126      	bne.n	8007384 <_strtod_l+0x384>
 8007336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007338:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800733c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007340:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007344:	e6a0      	b.n	8007088 <_strtod_l+0x88>
 8007346:	210a      	movs	r1, #10
 8007348:	fb01 2e0e 	mla	lr, r1, lr, r2
 800734c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007350:	e7b9      	b.n	80072c6 <_strtod_l+0x2c6>
 8007352:	2a6e      	cmp	r2, #110	; 0x6e
 8007354:	e7db      	b.n	800730e <_strtod_l+0x30e>
 8007356:	4990      	ldr	r1, [pc, #576]	; (8007598 <_strtod_l+0x598>)
 8007358:	a817      	add	r0, sp, #92	; 0x5c
 800735a:	f001 fe3f 	bl	8008fdc <__match>
 800735e:	2800      	cmp	r0, #0
 8007360:	f43f aeb0 	beq.w	80070c4 <_strtod_l+0xc4>
 8007364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007366:	498d      	ldr	r1, [pc, #564]	; (800759c <_strtod_l+0x59c>)
 8007368:	3b01      	subs	r3, #1
 800736a:	a817      	add	r0, sp, #92	; 0x5c
 800736c:	9317      	str	r3, [sp, #92]	; 0x5c
 800736e:	f001 fe35 	bl	8008fdc <__match>
 8007372:	b910      	cbnz	r0, 800737a <_strtod_l+0x37a>
 8007374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007376:	3301      	adds	r3, #1
 8007378:	9317      	str	r3, [sp, #92]	; 0x5c
 800737a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80075ac <_strtod_l+0x5ac>
 800737e:	f04f 0a00 	mov.w	sl, #0
 8007382:	e681      	b.n	8007088 <_strtod_l+0x88>
 8007384:	4886      	ldr	r0, [pc, #536]	; (80075a0 <_strtod_l+0x5a0>)
 8007386:	f003 f963 	bl	800a650 <nan>
 800738a:	ec5b ab10 	vmov	sl, fp, d0
 800738e:	e67b      	b.n	8007088 <_strtod_l+0x88>
 8007390:	9b05      	ldr	r3, [sp, #20]
 8007392:	9807      	ldr	r0, [sp, #28]
 8007394:	1af3      	subs	r3, r6, r3
 8007396:	2f00      	cmp	r7, #0
 8007398:	bf08      	it	eq
 800739a:	462f      	moveq	r7, r5
 800739c:	2d10      	cmp	r5, #16
 800739e:	9306      	str	r3, [sp, #24]
 80073a0:	46a8      	mov	r8, r5
 80073a2:	bfa8      	it	ge
 80073a4:	f04f 0810 	movge.w	r8, #16
 80073a8:	f7f9 f8c4 	bl	8000534 <__aeabi_ui2d>
 80073ac:	2d09      	cmp	r5, #9
 80073ae:	4682      	mov	sl, r0
 80073b0:	468b      	mov	fp, r1
 80073b2:	dd13      	ble.n	80073dc <_strtod_l+0x3dc>
 80073b4:	4b7b      	ldr	r3, [pc, #492]	; (80075a4 <_strtod_l+0x5a4>)
 80073b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80073ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073be:	f7f9 f933 	bl	8000628 <__aeabi_dmul>
 80073c2:	4682      	mov	sl, r0
 80073c4:	4648      	mov	r0, r9
 80073c6:	468b      	mov	fp, r1
 80073c8:	f7f9 f8b4 	bl	8000534 <__aeabi_ui2d>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	f7f8 ff72 	bl	80002bc <__adddf3>
 80073d8:	4682      	mov	sl, r0
 80073da:	468b      	mov	fp, r1
 80073dc:	2d0f      	cmp	r5, #15
 80073de:	dc38      	bgt.n	8007452 <_strtod_l+0x452>
 80073e0:	9b06      	ldr	r3, [sp, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f43f ae50 	beq.w	8007088 <_strtod_l+0x88>
 80073e8:	dd24      	ble.n	8007434 <_strtod_l+0x434>
 80073ea:	2b16      	cmp	r3, #22
 80073ec:	dc0b      	bgt.n	8007406 <_strtod_l+0x406>
 80073ee:	496d      	ldr	r1, [pc, #436]	; (80075a4 <_strtod_l+0x5a4>)
 80073f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f8:	4652      	mov	r2, sl
 80073fa:	465b      	mov	r3, fp
 80073fc:	f7f9 f914 	bl	8000628 <__aeabi_dmul>
 8007400:	4682      	mov	sl, r0
 8007402:	468b      	mov	fp, r1
 8007404:	e640      	b.n	8007088 <_strtod_l+0x88>
 8007406:	9a06      	ldr	r2, [sp, #24]
 8007408:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800740c:	4293      	cmp	r3, r2
 800740e:	db20      	blt.n	8007452 <_strtod_l+0x452>
 8007410:	4c64      	ldr	r4, [pc, #400]	; (80075a4 <_strtod_l+0x5a4>)
 8007412:	f1c5 050f 	rsb	r5, r5, #15
 8007416:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800741a:	4652      	mov	r2, sl
 800741c:	465b      	mov	r3, fp
 800741e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007422:	f7f9 f901 	bl	8000628 <__aeabi_dmul>
 8007426:	9b06      	ldr	r3, [sp, #24]
 8007428:	1b5d      	subs	r5, r3, r5
 800742a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800742e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007432:	e7e3      	b.n	80073fc <_strtod_l+0x3fc>
 8007434:	9b06      	ldr	r3, [sp, #24]
 8007436:	3316      	adds	r3, #22
 8007438:	db0b      	blt.n	8007452 <_strtod_l+0x452>
 800743a:	9b05      	ldr	r3, [sp, #20]
 800743c:	1b9e      	subs	r6, r3, r6
 800743e:	4b59      	ldr	r3, [pc, #356]	; (80075a4 <_strtod_l+0x5a4>)
 8007440:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007444:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007448:	4650      	mov	r0, sl
 800744a:	4659      	mov	r1, fp
 800744c:	f7f9 fa16 	bl	800087c <__aeabi_ddiv>
 8007450:	e7d6      	b.n	8007400 <_strtod_l+0x400>
 8007452:	9b06      	ldr	r3, [sp, #24]
 8007454:	eba5 0808 	sub.w	r8, r5, r8
 8007458:	4498      	add	r8, r3
 800745a:	f1b8 0f00 	cmp.w	r8, #0
 800745e:	dd74      	ble.n	800754a <_strtod_l+0x54a>
 8007460:	f018 030f 	ands.w	r3, r8, #15
 8007464:	d00a      	beq.n	800747c <_strtod_l+0x47c>
 8007466:	494f      	ldr	r1, [pc, #316]	; (80075a4 <_strtod_l+0x5a4>)
 8007468:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800746c:	4652      	mov	r2, sl
 800746e:	465b      	mov	r3, fp
 8007470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007474:	f7f9 f8d8 	bl	8000628 <__aeabi_dmul>
 8007478:	4682      	mov	sl, r0
 800747a:	468b      	mov	fp, r1
 800747c:	f038 080f 	bics.w	r8, r8, #15
 8007480:	d04f      	beq.n	8007522 <_strtod_l+0x522>
 8007482:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007486:	dd22      	ble.n	80074ce <_strtod_l+0x4ce>
 8007488:	2500      	movs	r5, #0
 800748a:	462e      	mov	r6, r5
 800748c:	9507      	str	r5, [sp, #28]
 800748e:	9505      	str	r5, [sp, #20]
 8007490:	2322      	movs	r3, #34	; 0x22
 8007492:	f8df b118 	ldr.w	fp, [pc, #280]	; 80075ac <_strtod_l+0x5ac>
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	f04f 0a00 	mov.w	sl, #0
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f43f adf2 	beq.w	8007088 <_strtod_l+0x88>
 80074a4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074a6:	4620      	mov	r0, r4
 80074a8:	f001 fec6 	bl	8009238 <_Bfree>
 80074ac:	9905      	ldr	r1, [sp, #20]
 80074ae:	4620      	mov	r0, r4
 80074b0:	f001 fec2 	bl	8009238 <_Bfree>
 80074b4:	4631      	mov	r1, r6
 80074b6:	4620      	mov	r0, r4
 80074b8:	f001 febe 	bl	8009238 <_Bfree>
 80074bc:	9907      	ldr	r1, [sp, #28]
 80074be:	4620      	mov	r0, r4
 80074c0:	f001 feba 	bl	8009238 <_Bfree>
 80074c4:	4629      	mov	r1, r5
 80074c6:	4620      	mov	r0, r4
 80074c8:	f001 feb6 	bl	8009238 <_Bfree>
 80074cc:	e5dc      	b.n	8007088 <_strtod_l+0x88>
 80074ce:	4b36      	ldr	r3, [pc, #216]	; (80075a8 <_strtod_l+0x5a8>)
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	2300      	movs	r3, #0
 80074d4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80074d8:	4650      	mov	r0, sl
 80074da:	4659      	mov	r1, fp
 80074dc:	4699      	mov	r9, r3
 80074de:	f1b8 0f01 	cmp.w	r8, #1
 80074e2:	dc21      	bgt.n	8007528 <_strtod_l+0x528>
 80074e4:	b10b      	cbz	r3, 80074ea <_strtod_l+0x4ea>
 80074e6:	4682      	mov	sl, r0
 80074e8:	468b      	mov	fp, r1
 80074ea:	4b2f      	ldr	r3, [pc, #188]	; (80075a8 <_strtod_l+0x5a8>)
 80074ec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80074f0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80074f4:	4652      	mov	r2, sl
 80074f6:	465b      	mov	r3, fp
 80074f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80074fc:	f7f9 f894 	bl	8000628 <__aeabi_dmul>
 8007500:	4b2a      	ldr	r3, [pc, #168]	; (80075ac <_strtod_l+0x5ac>)
 8007502:	460a      	mov	r2, r1
 8007504:	400b      	ands	r3, r1
 8007506:	492a      	ldr	r1, [pc, #168]	; (80075b0 <_strtod_l+0x5b0>)
 8007508:	428b      	cmp	r3, r1
 800750a:	4682      	mov	sl, r0
 800750c:	d8bc      	bhi.n	8007488 <_strtod_l+0x488>
 800750e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007512:	428b      	cmp	r3, r1
 8007514:	bf86      	itte	hi
 8007516:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80075b4 <_strtod_l+0x5b4>
 800751a:	f04f 3aff 	movhi.w	sl, #4294967295
 800751e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007522:	2300      	movs	r3, #0
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	e084      	b.n	8007632 <_strtod_l+0x632>
 8007528:	f018 0f01 	tst.w	r8, #1
 800752c:	d005      	beq.n	800753a <_strtod_l+0x53a>
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	f7f9 f878 	bl	8000628 <__aeabi_dmul>
 8007538:	2301      	movs	r3, #1
 800753a:	9a04      	ldr	r2, [sp, #16]
 800753c:	3208      	adds	r2, #8
 800753e:	f109 0901 	add.w	r9, r9, #1
 8007542:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007546:	9204      	str	r2, [sp, #16]
 8007548:	e7c9      	b.n	80074de <_strtod_l+0x4de>
 800754a:	d0ea      	beq.n	8007522 <_strtod_l+0x522>
 800754c:	f1c8 0800 	rsb	r8, r8, #0
 8007550:	f018 020f 	ands.w	r2, r8, #15
 8007554:	d00a      	beq.n	800756c <_strtod_l+0x56c>
 8007556:	4b13      	ldr	r3, [pc, #76]	; (80075a4 <_strtod_l+0x5a4>)
 8007558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800755c:	4650      	mov	r0, sl
 800755e:	4659      	mov	r1, fp
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f7f9 f98a 	bl	800087c <__aeabi_ddiv>
 8007568:	4682      	mov	sl, r0
 800756a:	468b      	mov	fp, r1
 800756c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007570:	d0d7      	beq.n	8007522 <_strtod_l+0x522>
 8007572:	f1b8 0f1f 	cmp.w	r8, #31
 8007576:	dd1f      	ble.n	80075b8 <_strtod_l+0x5b8>
 8007578:	2500      	movs	r5, #0
 800757a:	462e      	mov	r6, r5
 800757c:	9507      	str	r5, [sp, #28]
 800757e:	9505      	str	r5, [sp, #20]
 8007580:	2322      	movs	r3, #34	; 0x22
 8007582:	f04f 0a00 	mov.w	sl, #0
 8007586:	f04f 0b00 	mov.w	fp, #0
 800758a:	6023      	str	r3, [r4, #0]
 800758c:	e786      	b.n	800749c <_strtod_l+0x49c>
 800758e:	bf00      	nop
 8007590:	0800cbd5 	.word	0x0800cbd5
 8007594:	0800cc14 	.word	0x0800cc14
 8007598:	0800cbcd 	.word	0x0800cbcd
 800759c:	0800cd54 	.word	0x0800cd54
 80075a0:	0800d01b 	.word	0x0800d01b
 80075a4:	0800cee0 	.word	0x0800cee0
 80075a8:	0800ceb8 	.word	0x0800ceb8
 80075ac:	7ff00000 	.word	0x7ff00000
 80075b0:	7ca00000 	.word	0x7ca00000
 80075b4:	7fefffff 	.word	0x7fefffff
 80075b8:	f018 0310 	ands.w	r3, r8, #16
 80075bc:	bf18      	it	ne
 80075be:	236a      	movne	r3, #106	; 0x6a
 80075c0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007970 <_strtod_l+0x970>
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	4650      	mov	r0, sl
 80075c8:	4659      	mov	r1, fp
 80075ca:	2300      	movs	r3, #0
 80075cc:	f018 0f01 	tst.w	r8, #1
 80075d0:	d004      	beq.n	80075dc <_strtod_l+0x5dc>
 80075d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80075d6:	f7f9 f827 	bl	8000628 <__aeabi_dmul>
 80075da:	2301      	movs	r3, #1
 80075dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80075e0:	f109 0908 	add.w	r9, r9, #8
 80075e4:	d1f2      	bne.n	80075cc <_strtod_l+0x5cc>
 80075e6:	b10b      	cbz	r3, 80075ec <_strtod_l+0x5ec>
 80075e8:	4682      	mov	sl, r0
 80075ea:	468b      	mov	fp, r1
 80075ec:	9b04      	ldr	r3, [sp, #16]
 80075ee:	b1c3      	cbz	r3, 8007622 <_strtod_l+0x622>
 80075f0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80075f4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	4659      	mov	r1, fp
 80075fc:	dd11      	ble.n	8007622 <_strtod_l+0x622>
 80075fe:	2b1f      	cmp	r3, #31
 8007600:	f340 8124 	ble.w	800784c <_strtod_l+0x84c>
 8007604:	2b34      	cmp	r3, #52	; 0x34
 8007606:	bfde      	ittt	le
 8007608:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800760c:	f04f 33ff 	movle.w	r3, #4294967295
 8007610:	fa03 f202 	lslle.w	r2, r3, r2
 8007614:	f04f 0a00 	mov.w	sl, #0
 8007618:	bfcc      	ite	gt
 800761a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800761e:	ea02 0b01 	andle.w	fp, r2, r1
 8007622:	2200      	movs	r2, #0
 8007624:	2300      	movs	r3, #0
 8007626:	4650      	mov	r0, sl
 8007628:	4659      	mov	r1, fp
 800762a:	f7f9 fa65 	bl	8000af8 <__aeabi_dcmpeq>
 800762e:	2800      	cmp	r0, #0
 8007630:	d1a2      	bne.n	8007578 <_strtod_l+0x578>
 8007632:	9b07      	ldr	r3, [sp, #28]
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	9908      	ldr	r1, [sp, #32]
 8007638:	462b      	mov	r3, r5
 800763a:	463a      	mov	r2, r7
 800763c:	4620      	mov	r0, r4
 800763e:	f001 fe63 	bl	8009308 <__s2b>
 8007642:	9007      	str	r0, [sp, #28]
 8007644:	2800      	cmp	r0, #0
 8007646:	f43f af1f 	beq.w	8007488 <_strtod_l+0x488>
 800764a:	9b05      	ldr	r3, [sp, #20]
 800764c:	1b9e      	subs	r6, r3, r6
 800764e:	9b06      	ldr	r3, [sp, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfb4      	ite	lt
 8007654:	4633      	movlt	r3, r6
 8007656:	2300      	movge	r3, #0
 8007658:	930c      	str	r3, [sp, #48]	; 0x30
 800765a:	9b06      	ldr	r3, [sp, #24]
 800765c:	2500      	movs	r5, #0
 800765e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007662:	9312      	str	r3, [sp, #72]	; 0x48
 8007664:	462e      	mov	r6, r5
 8007666:	9b07      	ldr	r3, [sp, #28]
 8007668:	4620      	mov	r0, r4
 800766a:	6859      	ldr	r1, [r3, #4]
 800766c:	f001 fda4 	bl	80091b8 <_Balloc>
 8007670:	9005      	str	r0, [sp, #20]
 8007672:	2800      	cmp	r0, #0
 8007674:	f43f af0c 	beq.w	8007490 <_strtod_l+0x490>
 8007678:	9b07      	ldr	r3, [sp, #28]
 800767a:	691a      	ldr	r2, [r3, #16]
 800767c:	3202      	adds	r2, #2
 800767e:	f103 010c 	add.w	r1, r3, #12
 8007682:	0092      	lsls	r2, r2, #2
 8007684:	300c      	adds	r0, #12
 8007686:	f001 fd89 	bl	800919c <memcpy>
 800768a:	ec4b ab10 	vmov	d0, sl, fp
 800768e:	aa1a      	add	r2, sp, #104	; 0x68
 8007690:	a919      	add	r1, sp, #100	; 0x64
 8007692:	4620      	mov	r0, r4
 8007694:	f002 f97e 	bl	8009994 <__d2b>
 8007698:	ec4b ab18 	vmov	d8, sl, fp
 800769c:	9018      	str	r0, [sp, #96]	; 0x60
 800769e:	2800      	cmp	r0, #0
 80076a0:	f43f aef6 	beq.w	8007490 <_strtod_l+0x490>
 80076a4:	2101      	movs	r1, #1
 80076a6:	4620      	mov	r0, r4
 80076a8:	f001 fec8 	bl	800943c <__i2b>
 80076ac:	4606      	mov	r6, r0
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f43f aeee 	beq.w	8007490 <_strtod_l+0x490>
 80076b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076b6:	9904      	ldr	r1, [sp, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bfab      	itete	ge
 80076bc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80076be:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80076c0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80076c2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80076c6:	bfac      	ite	ge
 80076c8:	eb03 0902 	addge.w	r9, r3, r2
 80076cc:	1ad7      	sublt	r7, r2, r3
 80076ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80076d0:	eba3 0801 	sub.w	r8, r3, r1
 80076d4:	4490      	add	r8, r2
 80076d6:	4ba1      	ldr	r3, [pc, #644]	; (800795c <_strtod_l+0x95c>)
 80076d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80076dc:	4598      	cmp	r8, r3
 80076de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076e2:	f280 80c7 	bge.w	8007874 <_strtod_l+0x874>
 80076e6:	eba3 0308 	sub.w	r3, r3, r8
 80076ea:	2b1f      	cmp	r3, #31
 80076ec:	eba2 0203 	sub.w	r2, r2, r3
 80076f0:	f04f 0101 	mov.w	r1, #1
 80076f4:	f300 80b1 	bgt.w	800785a <_strtod_l+0x85a>
 80076f8:	fa01 f303 	lsl.w	r3, r1, r3
 80076fc:	930d      	str	r3, [sp, #52]	; 0x34
 80076fe:	2300      	movs	r3, #0
 8007700:	9308      	str	r3, [sp, #32]
 8007702:	eb09 0802 	add.w	r8, r9, r2
 8007706:	9b04      	ldr	r3, [sp, #16]
 8007708:	45c1      	cmp	r9, r8
 800770a:	4417      	add	r7, r2
 800770c:	441f      	add	r7, r3
 800770e:	464b      	mov	r3, r9
 8007710:	bfa8      	it	ge
 8007712:	4643      	movge	r3, r8
 8007714:	42bb      	cmp	r3, r7
 8007716:	bfa8      	it	ge
 8007718:	463b      	movge	r3, r7
 800771a:	2b00      	cmp	r3, #0
 800771c:	bfc2      	ittt	gt
 800771e:	eba8 0803 	subgt.w	r8, r8, r3
 8007722:	1aff      	subgt	r7, r7, r3
 8007724:	eba9 0903 	subgt.w	r9, r9, r3
 8007728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800772a:	2b00      	cmp	r3, #0
 800772c:	dd17      	ble.n	800775e <_strtod_l+0x75e>
 800772e:	4631      	mov	r1, r6
 8007730:	461a      	mov	r2, r3
 8007732:	4620      	mov	r0, r4
 8007734:	f001 ff42 	bl	80095bc <__pow5mult>
 8007738:	4606      	mov	r6, r0
 800773a:	2800      	cmp	r0, #0
 800773c:	f43f aea8 	beq.w	8007490 <_strtod_l+0x490>
 8007740:	4601      	mov	r1, r0
 8007742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007744:	4620      	mov	r0, r4
 8007746:	f001 fe8f 	bl	8009468 <__multiply>
 800774a:	900b      	str	r0, [sp, #44]	; 0x2c
 800774c:	2800      	cmp	r0, #0
 800774e:	f43f ae9f 	beq.w	8007490 <_strtod_l+0x490>
 8007752:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007754:	4620      	mov	r0, r4
 8007756:	f001 fd6f 	bl	8009238 <_Bfree>
 800775a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800775c:	9318      	str	r3, [sp, #96]	; 0x60
 800775e:	f1b8 0f00 	cmp.w	r8, #0
 8007762:	f300 808c 	bgt.w	800787e <_strtod_l+0x87e>
 8007766:	9b06      	ldr	r3, [sp, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	dd08      	ble.n	800777e <_strtod_l+0x77e>
 800776c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800776e:	9905      	ldr	r1, [sp, #20]
 8007770:	4620      	mov	r0, r4
 8007772:	f001 ff23 	bl	80095bc <__pow5mult>
 8007776:	9005      	str	r0, [sp, #20]
 8007778:	2800      	cmp	r0, #0
 800777a:	f43f ae89 	beq.w	8007490 <_strtod_l+0x490>
 800777e:	2f00      	cmp	r7, #0
 8007780:	dd08      	ble.n	8007794 <_strtod_l+0x794>
 8007782:	9905      	ldr	r1, [sp, #20]
 8007784:	463a      	mov	r2, r7
 8007786:	4620      	mov	r0, r4
 8007788:	f001 ff72 	bl	8009670 <__lshift>
 800778c:	9005      	str	r0, [sp, #20]
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f ae7e 	beq.w	8007490 <_strtod_l+0x490>
 8007794:	f1b9 0f00 	cmp.w	r9, #0
 8007798:	dd08      	ble.n	80077ac <_strtod_l+0x7ac>
 800779a:	4631      	mov	r1, r6
 800779c:	464a      	mov	r2, r9
 800779e:	4620      	mov	r0, r4
 80077a0:	f001 ff66 	bl	8009670 <__lshift>
 80077a4:	4606      	mov	r6, r0
 80077a6:	2800      	cmp	r0, #0
 80077a8:	f43f ae72 	beq.w	8007490 <_strtod_l+0x490>
 80077ac:	9a05      	ldr	r2, [sp, #20]
 80077ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077b0:	4620      	mov	r0, r4
 80077b2:	f001 ffe9 	bl	8009788 <__mdiff>
 80077b6:	4605      	mov	r5, r0
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f43f ae69 	beq.w	8007490 <_strtod_l+0x490>
 80077be:	68c3      	ldr	r3, [r0, #12]
 80077c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80077c2:	2300      	movs	r3, #0
 80077c4:	60c3      	str	r3, [r0, #12]
 80077c6:	4631      	mov	r1, r6
 80077c8:	f001 ffc2 	bl	8009750 <__mcmp>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	da60      	bge.n	8007892 <_strtod_l+0x892>
 80077d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077d2:	ea53 030a 	orrs.w	r3, r3, sl
 80077d6:	f040 8082 	bne.w	80078de <_strtod_l+0x8de>
 80077da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d17d      	bne.n	80078de <_strtod_l+0x8de>
 80077e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077e6:	0d1b      	lsrs	r3, r3, #20
 80077e8:	051b      	lsls	r3, r3, #20
 80077ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077ee:	d976      	bls.n	80078de <_strtod_l+0x8de>
 80077f0:	696b      	ldr	r3, [r5, #20]
 80077f2:	b913      	cbnz	r3, 80077fa <_strtod_l+0x7fa>
 80077f4:	692b      	ldr	r3, [r5, #16]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	dd71      	ble.n	80078de <_strtod_l+0x8de>
 80077fa:	4629      	mov	r1, r5
 80077fc:	2201      	movs	r2, #1
 80077fe:	4620      	mov	r0, r4
 8007800:	f001 ff36 	bl	8009670 <__lshift>
 8007804:	4631      	mov	r1, r6
 8007806:	4605      	mov	r5, r0
 8007808:	f001 ffa2 	bl	8009750 <__mcmp>
 800780c:	2800      	cmp	r0, #0
 800780e:	dd66      	ble.n	80078de <_strtod_l+0x8de>
 8007810:	9904      	ldr	r1, [sp, #16]
 8007812:	4a53      	ldr	r2, [pc, #332]	; (8007960 <_strtod_l+0x960>)
 8007814:	465b      	mov	r3, fp
 8007816:	2900      	cmp	r1, #0
 8007818:	f000 8081 	beq.w	800791e <_strtod_l+0x91e>
 800781c:	ea02 010b 	and.w	r1, r2, fp
 8007820:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007824:	dc7b      	bgt.n	800791e <_strtod_l+0x91e>
 8007826:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800782a:	f77f aea9 	ble.w	8007580 <_strtod_l+0x580>
 800782e:	4b4d      	ldr	r3, [pc, #308]	; (8007964 <_strtod_l+0x964>)
 8007830:	4650      	mov	r0, sl
 8007832:	4659      	mov	r1, fp
 8007834:	2200      	movs	r2, #0
 8007836:	f7f8 fef7 	bl	8000628 <__aeabi_dmul>
 800783a:	460b      	mov	r3, r1
 800783c:	4303      	orrs	r3, r0
 800783e:	bf08      	it	eq
 8007840:	2322      	moveq	r3, #34	; 0x22
 8007842:	4682      	mov	sl, r0
 8007844:	468b      	mov	fp, r1
 8007846:	bf08      	it	eq
 8007848:	6023      	streq	r3, [r4, #0]
 800784a:	e62b      	b.n	80074a4 <_strtod_l+0x4a4>
 800784c:	f04f 32ff 	mov.w	r2, #4294967295
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	ea03 0a0a 	and.w	sl, r3, sl
 8007858:	e6e3      	b.n	8007622 <_strtod_l+0x622>
 800785a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800785e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007862:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007866:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800786a:	fa01 f308 	lsl.w	r3, r1, r8
 800786e:	9308      	str	r3, [sp, #32]
 8007870:	910d      	str	r1, [sp, #52]	; 0x34
 8007872:	e746      	b.n	8007702 <_strtod_l+0x702>
 8007874:	2300      	movs	r3, #0
 8007876:	9308      	str	r3, [sp, #32]
 8007878:	2301      	movs	r3, #1
 800787a:	930d      	str	r3, [sp, #52]	; 0x34
 800787c:	e741      	b.n	8007702 <_strtod_l+0x702>
 800787e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007880:	4642      	mov	r2, r8
 8007882:	4620      	mov	r0, r4
 8007884:	f001 fef4 	bl	8009670 <__lshift>
 8007888:	9018      	str	r0, [sp, #96]	; 0x60
 800788a:	2800      	cmp	r0, #0
 800788c:	f47f af6b 	bne.w	8007766 <_strtod_l+0x766>
 8007890:	e5fe      	b.n	8007490 <_strtod_l+0x490>
 8007892:	465f      	mov	r7, fp
 8007894:	d16e      	bne.n	8007974 <_strtod_l+0x974>
 8007896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007898:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800789c:	b342      	cbz	r2, 80078f0 <_strtod_l+0x8f0>
 800789e:	4a32      	ldr	r2, [pc, #200]	; (8007968 <_strtod_l+0x968>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d128      	bne.n	80078f6 <_strtod_l+0x8f6>
 80078a4:	9b04      	ldr	r3, [sp, #16]
 80078a6:	4651      	mov	r1, sl
 80078a8:	b1eb      	cbz	r3, 80078e6 <_strtod_l+0x8e6>
 80078aa:	4b2d      	ldr	r3, [pc, #180]	; (8007960 <_strtod_l+0x960>)
 80078ac:	403b      	ands	r3, r7
 80078ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078b2:	f04f 32ff 	mov.w	r2, #4294967295
 80078b6:	d819      	bhi.n	80078ec <_strtod_l+0x8ec>
 80078b8:	0d1b      	lsrs	r3, r3, #20
 80078ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	4299      	cmp	r1, r3
 80078c4:	d117      	bne.n	80078f6 <_strtod_l+0x8f6>
 80078c6:	4b29      	ldr	r3, [pc, #164]	; (800796c <_strtod_l+0x96c>)
 80078c8:	429f      	cmp	r7, r3
 80078ca:	d102      	bne.n	80078d2 <_strtod_l+0x8d2>
 80078cc:	3101      	adds	r1, #1
 80078ce:	f43f addf 	beq.w	8007490 <_strtod_l+0x490>
 80078d2:	4b23      	ldr	r3, [pc, #140]	; (8007960 <_strtod_l+0x960>)
 80078d4:	403b      	ands	r3, r7
 80078d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80078da:	f04f 0a00 	mov.w	sl, #0
 80078de:	9b04      	ldr	r3, [sp, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1a4      	bne.n	800782e <_strtod_l+0x82e>
 80078e4:	e5de      	b.n	80074a4 <_strtod_l+0x4a4>
 80078e6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ea:	e7ea      	b.n	80078c2 <_strtod_l+0x8c2>
 80078ec:	4613      	mov	r3, r2
 80078ee:	e7e8      	b.n	80078c2 <_strtod_l+0x8c2>
 80078f0:	ea53 030a 	orrs.w	r3, r3, sl
 80078f4:	d08c      	beq.n	8007810 <_strtod_l+0x810>
 80078f6:	9b08      	ldr	r3, [sp, #32]
 80078f8:	b1db      	cbz	r3, 8007932 <_strtod_l+0x932>
 80078fa:	423b      	tst	r3, r7
 80078fc:	d0ef      	beq.n	80078de <_strtod_l+0x8de>
 80078fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007900:	9a04      	ldr	r2, [sp, #16]
 8007902:	4650      	mov	r0, sl
 8007904:	4659      	mov	r1, fp
 8007906:	b1c3      	cbz	r3, 800793a <_strtod_l+0x93a>
 8007908:	f7ff fb5d 	bl	8006fc6 <sulp>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	ec51 0b18 	vmov	r0, r1, d8
 8007914:	f7f8 fcd2 	bl	80002bc <__adddf3>
 8007918:	4682      	mov	sl, r0
 800791a:	468b      	mov	fp, r1
 800791c:	e7df      	b.n	80078de <_strtod_l+0x8de>
 800791e:	4013      	ands	r3, r2
 8007920:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007924:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007928:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800792c:	f04f 3aff 	mov.w	sl, #4294967295
 8007930:	e7d5      	b.n	80078de <_strtod_l+0x8de>
 8007932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007934:	ea13 0f0a 	tst.w	r3, sl
 8007938:	e7e0      	b.n	80078fc <_strtod_l+0x8fc>
 800793a:	f7ff fb44 	bl	8006fc6 <sulp>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	ec51 0b18 	vmov	r0, r1, d8
 8007946:	f7f8 fcb7 	bl	80002b8 <__aeabi_dsub>
 800794a:	2200      	movs	r2, #0
 800794c:	2300      	movs	r3, #0
 800794e:	4682      	mov	sl, r0
 8007950:	468b      	mov	fp, r1
 8007952:	f7f9 f8d1 	bl	8000af8 <__aeabi_dcmpeq>
 8007956:	2800      	cmp	r0, #0
 8007958:	d0c1      	beq.n	80078de <_strtod_l+0x8de>
 800795a:	e611      	b.n	8007580 <_strtod_l+0x580>
 800795c:	fffffc02 	.word	0xfffffc02
 8007960:	7ff00000 	.word	0x7ff00000
 8007964:	39500000 	.word	0x39500000
 8007968:	000fffff 	.word	0x000fffff
 800796c:	7fefffff 	.word	0x7fefffff
 8007970:	0800cc28 	.word	0x0800cc28
 8007974:	4631      	mov	r1, r6
 8007976:	4628      	mov	r0, r5
 8007978:	f002 f868 	bl	8009a4c <__ratio>
 800797c:	ec59 8b10 	vmov	r8, r9, d0
 8007980:	ee10 0a10 	vmov	r0, s0
 8007984:	2200      	movs	r2, #0
 8007986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800798a:	4649      	mov	r1, r9
 800798c:	f7f9 f8c8 	bl	8000b20 <__aeabi_dcmple>
 8007990:	2800      	cmp	r0, #0
 8007992:	d07a      	beq.n	8007a8a <_strtod_l+0xa8a>
 8007994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d04a      	beq.n	8007a30 <_strtod_l+0xa30>
 800799a:	4b95      	ldr	r3, [pc, #596]	; (8007bf0 <_strtod_l+0xbf0>)
 800799c:	2200      	movs	r2, #0
 800799e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007bf0 <_strtod_l+0xbf0>
 80079a6:	f04f 0800 	mov.w	r8, #0
 80079aa:	4b92      	ldr	r3, [pc, #584]	; (8007bf4 <_strtod_l+0xbf4>)
 80079ac:	403b      	ands	r3, r7
 80079ae:	930d      	str	r3, [sp, #52]	; 0x34
 80079b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079b2:	4b91      	ldr	r3, [pc, #580]	; (8007bf8 <_strtod_l+0xbf8>)
 80079b4:	429a      	cmp	r2, r3
 80079b6:	f040 80b0 	bne.w	8007b1a <_strtod_l+0xb1a>
 80079ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079be:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80079c2:	ec4b ab10 	vmov	d0, sl, fp
 80079c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079ca:	f001 ff67 	bl	800989c <__ulp>
 80079ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079d2:	ec53 2b10 	vmov	r2, r3, d0
 80079d6:	f7f8 fe27 	bl	8000628 <__aeabi_dmul>
 80079da:	4652      	mov	r2, sl
 80079dc:	465b      	mov	r3, fp
 80079de:	f7f8 fc6d 	bl	80002bc <__adddf3>
 80079e2:	460b      	mov	r3, r1
 80079e4:	4983      	ldr	r1, [pc, #524]	; (8007bf4 <_strtod_l+0xbf4>)
 80079e6:	4a85      	ldr	r2, [pc, #532]	; (8007bfc <_strtod_l+0xbfc>)
 80079e8:	4019      	ands	r1, r3
 80079ea:	4291      	cmp	r1, r2
 80079ec:	4682      	mov	sl, r0
 80079ee:	d960      	bls.n	8007ab2 <_strtod_l+0xab2>
 80079f0:	ee18 3a90 	vmov	r3, s17
 80079f4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d104      	bne.n	8007a06 <_strtod_l+0xa06>
 80079fc:	ee18 3a10 	vmov	r3, s16
 8007a00:	3301      	adds	r3, #1
 8007a02:	f43f ad45 	beq.w	8007490 <_strtod_l+0x490>
 8007a06:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007c08 <_strtod_l+0xc08>
 8007a0a:	f04f 3aff 	mov.w	sl, #4294967295
 8007a0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a10:	4620      	mov	r0, r4
 8007a12:	f001 fc11 	bl	8009238 <_Bfree>
 8007a16:	9905      	ldr	r1, [sp, #20]
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 fc0d 	bl	8009238 <_Bfree>
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4620      	mov	r0, r4
 8007a22:	f001 fc09 	bl	8009238 <_Bfree>
 8007a26:	4629      	mov	r1, r5
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f001 fc05 	bl	8009238 <_Bfree>
 8007a2e:	e61a      	b.n	8007666 <_strtod_l+0x666>
 8007a30:	f1ba 0f00 	cmp.w	sl, #0
 8007a34:	d11b      	bne.n	8007a6e <_strtod_l+0xa6e>
 8007a36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a3a:	b9f3      	cbnz	r3, 8007a7a <_strtod_l+0xa7a>
 8007a3c:	4b6c      	ldr	r3, [pc, #432]	; (8007bf0 <_strtod_l+0xbf0>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4640      	mov	r0, r8
 8007a42:	4649      	mov	r1, r9
 8007a44:	f7f9 f862 	bl	8000b0c <__aeabi_dcmplt>
 8007a48:	b9d0      	cbnz	r0, 8007a80 <_strtod_l+0xa80>
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4b6c      	ldr	r3, [pc, #432]	; (8007c00 <_strtod_l+0xc00>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	f7f8 fde9 	bl	8000628 <__aeabi_dmul>
 8007a56:	4680      	mov	r8, r0
 8007a58:	4689      	mov	r9, r1
 8007a5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a5e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007a62:	9315      	str	r3, [sp, #84]	; 0x54
 8007a64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a6c:	e79d      	b.n	80079aa <_strtod_l+0x9aa>
 8007a6e:	f1ba 0f01 	cmp.w	sl, #1
 8007a72:	d102      	bne.n	8007a7a <_strtod_l+0xa7a>
 8007a74:	2f00      	cmp	r7, #0
 8007a76:	f43f ad83 	beq.w	8007580 <_strtod_l+0x580>
 8007a7a:	4b62      	ldr	r3, [pc, #392]	; (8007c04 <_strtod_l+0xc04>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	e78e      	b.n	800799e <_strtod_l+0x99e>
 8007a80:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007c00 <_strtod_l+0xc00>
 8007a84:	f04f 0800 	mov.w	r8, #0
 8007a88:	e7e7      	b.n	8007a5a <_strtod_l+0xa5a>
 8007a8a:	4b5d      	ldr	r3, [pc, #372]	; (8007c00 <_strtod_l+0xc00>)
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	4649      	mov	r1, r9
 8007a90:	2200      	movs	r2, #0
 8007a92:	f7f8 fdc9 	bl	8000628 <__aeabi_dmul>
 8007a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a98:	4680      	mov	r8, r0
 8007a9a:	4689      	mov	r9, r1
 8007a9c:	b933      	cbnz	r3, 8007aac <_strtod_l+0xaac>
 8007a9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aa2:	900e      	str	r0, [sp, #56]	; 0x38
 8007aa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aa6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007aaa:	e7dd      	b.n	8007a68 <_strtod_l+0xa68>
 8007aac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ab0:	e7f9      	b.n	8007aa6 <_strtod_l+0xaa6>
 8007ab2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007ab6:	9b04      	ldr	r3, [sp, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1a8      	bne.n	8007a0e <_strtod_l+0xa0e>
 8007abc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007ac0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ac2:	0d1b      	lsrs	r3, r3, #20
 8007ac4:	051b      	lsls	r3, r3, #20
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d1a1      	bne.n	8007a0e <_strtod_l+0xa0e>
 8007aca:	4640      	mov	r0, r8
 8007acc:	4649      	mov	r1, r9
 8007ace:	f7f9 fa51 	bl	8000f74 <__aeabi_d2lz>
 8007ad2:	f7f8 fd7b 	bl	80005cc <__aeabi_l2d>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4640      	mov	r0, r8
 8007adc:	4649      	mov	r1, r9
 8007ade:	f7f8 fbeb 	bl	80002b8 <__aeabi_dsub>
 8007ae2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ae4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ae8:	ea43 030a 	orr.w	r3, r3, sl
 8007aec:	4313      	orrs	r3, r2
 8007aee:	4680      	mov	r8, r0
 8007af0:	4689      	mov	r9, r1
 8007af2:	d055      	beq.n	8007ba0 <_strtod_l+0xba0>
 8007af4:	a336      	add	r3, pc, #216	; (adr r3, 8007bd0 <_strtod_l+0xbd0>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f7f9 f807 	bl	8000b0c <__aeabi_dcmplt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	f47f acd0 	bne.w	80074a4 <_strtod_l+0x4a4>
 8007b04:	a334      	add	r3, pc, #208	; (adr r3, 8007bd8 <_strtod_l+0xbd8>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	f7f9 f81b 	bl	8000b48 <__aeabi_dcmpgt>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	f43f af7b 	beq.w	8007a0e <_strtod_l+0xa0e>
 8007b18:	e4c4      	b.n	80074a4 <_strtod_l+0x4a4>
 8007b1a:	9b04      	ldr	r3, [sp, #16]
 8007b1c:	b333      	cbz	r3, 8007b6c <_strtod_l+0xb6c>
 8007b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b20:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b24:	d822      	bhi.n	8007b6c <_strtod_l+0xb6c>
 8007b26:	a32e      	add	r3, pc, #184	; (adr r3, 8007be0 <_strtod_l+0xbe0>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4649      	mov	r1, r9
 8007b30:	f7f8 fff6 	bl	8000b20 <__aeabi_dcmple>
 8007b34:	b1a0      	cbz	r0, 8007b60 <_strtod_l+0xb60>
 8007b36:	4649      	mov	r1, r9
 8007b38:	4640      	mov	r0, r8
 8007b3a:	f7f9 f84d 	bl	8000bd8 <__aeabi_d2uiz>
 8007b3e:	2801      	cmp	r0, #1
 8007b40:	bf38      	it	cc
 8007b42:	2001      	movcc	r0, #1
 8007b44:	f7f8 fcf6 	bl	8000534 <__aeabi_ui2d>
 8007b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4a:	4680      	mov	r8, r0
 8007b4c:	4689      	mov	r9, r1
 8007b4e:	bb23      	cbnz	r3, 8007b9a <_strtod_l+0xb9a>
 8007b50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b54:	9010      	str	r0, [sp, #64]	; 0x40
 8007b56:	9311      	str	r3, [sp, #68]	; 0x44
 8007b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b5c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b64:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b70:	eeb0 0a48 	vmov.f32	s0, s16
 8007b74:	eef0 0a68 	vmov.f32	s1, s17
 8007b78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007b7c:	f001 fe8e 	bl	800989c <__ulp>
 8007b80:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007b84:	ec53 2b10 	vmov	r2, r3, d0
 8007b88:	f7f8 fd4e 	bl	8000628 <__aeabi_dmul>
 8007b8c:	ec53 2b18 	vmov	r2, r3, d8
 8007b90:	f7f8 fb94 	bl	80002bc <__adddf3>
 8007b94:	4682      	mov	sl, r0
 8007b96:	468b      	mov	fp, r1
 8007b98:	e78d      	b.n	8007ab6 <_strtod_l+0xab6>
 8007b9a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007b9e:	e7db      	b.n	8007b58 <_strtod_l+0xb58>
 8007ba0:	a311      	add	r3, pc, #68	; (adr r3, 8007be8 <_strtod_l+0xbe8>)
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f7f8 ffb1 	bl	8000b0c <__aeabi_dcmplt>
 8007baa:	e7b2      	b.n	8007b12 <_strtod_l+0xb12>
 8007bac:	2300      	movs	r3, #0
 8007bae:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	f7ff ba6b 	b.w	8007090 <_strtod_l+0x90>
 8007bba:	2a65      	cmp	r2, #101	; 0x65
 8007bbc:	f43f ab5f 	beq.w	800727e <_strtod_l+0x27e>
 8007bc0:	2a45      	cmp	r2, #69	; 0x45
 8007bc2:	f43f ab5c 	beq.w	800727e <_strtod_l+0x27e>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f7ff bb94 	b.w	80072f4 <_strtod_l+0x2f4>
 8007bcc:	f3af 8000 	nop.w
 8007bd0:	94a03595 	.word	0x94a03595
 8007bd4:	3fdfffff 	.word	0x3fdfffff
 8007bd8:	35afe535 	.word	0x35afe535
 8007bdc:	3fe00000 	.word	0x3fe00000
 8007be0:	ffc00000 	.word	0xffc00000
 8007be4:	41dfffff 	.word	0x41dfffff
 8007be8:	94a03595 	.word	0x94a03595
 8007bec:	3fcfffff 	.word	0x3fcfffff
 8007bf0:	3ff00000 	.word	0x3ff00000
 8007bf4:	7ff00000 	.word	0x7ff00000
 8007bf8:	7fe00000 	.word	0x7fe00000
 8007bfc:	7c9fffff 	.word	0x7c9fffff
 8007c00:	3fe00000 	.word	0x3fe00000
 8007c04:	bff00000 	.word	0xbff00000
 8007c08:	7fefffff 	.word	0x7fefffff

08007c0c <_strtod_r>:
 8007c0c:	4b01      	ldr	r3, [pc, #4]	; (8007c14 <_strtod_r+0x8>)
 8007c0e:	f7ff b9f7 	b.w	8007000 <_strtod_l>
 8007c12:	bf00      	nop
 8007c14:	20000080 	.word	0x20000080

08007c18 <_strtol_l.constprop.0>:
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c1e:	d001      	beq.n	8007c24 <_strtol_l.constprop.0+0xc>
 8007c20:	2b24      	cmp	r3, #36	; 0x24
 8007c22:	d906      	bls.n	8007c32 <_strtol_l.constprop.0+0x1a>
 8007c24:	f7fe fa8c 	bl	8006140 <__errno>
 8007c28:	2316      	movs	r3, #22
 8007c2a:	6003      	str	r3, [r0, #0]
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d18 <_strtol_l.constprop.0+0x100>
 8007c36:	460d      	mov	r5, r1
 8007c38:	462e      	mov	r6, r5
 8007c3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007c42:	f017 0708 	ands.w	r7, r7, #8
 8007c46:	d1f7      	bne.n	8007c38 <_strtol_l.constprop.0+0x20>
 8007c48:	2c2d      	cmp	r4, #45	; 0x2d
 8007c4a:	d132      	bne.n	8007cb2 <_strtol_l.constprop.0+0x9a>
 8007c4c:	782c      	ldrb	r4, [r5, #0]
 8007c4e:	2701      	movs	r7, #1
 8007c50:	1cb5      	adds	r5, r6, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d05b      	beq.n	8007d0e <_strtol_l.constprop.0+0xf6>
 8007c56:	2b10      	cmp	r3, #16
 8007c58:	d109      	bne.n	8007c6e <_strtol_l.constprop.0+0x56>
 8007c5a:	2c30      	cmp	r4, #48	; 0x30
 8007c5c:	d107      	bne.n	8007c6e <_strtol_l.constprop.0+0x56>
 8007c5e:	782c      	ldrb	r4, [r5, #0]
 8007c60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c64:	2c58      	cmp	r4, #88	; 0x58
 8007c66:	d14d      	bne.n	8007d04 <_strtol_l.constprop.0+0xec>
 8007c68:	786c      	ldrb	r4, [r5, #1]
 8007c6a:	2310      	movs	r3, #16
 8007c6c:	3502      	adds	r5, #2
 8007c6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007c72:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c76:	f04f 0c00 	mov.w	ip, #0
 8007c7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8007c7e:	4666      	mov	r6, ip
 8007c80:	fb03 8a19 	mls	sl, r3, r9, r8
 8007c84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007c88:	f1be 0f09 	cmp.w	lr, #9
 8007c8c:	d816      	bhi.n	8007cbc <_strtol_l.constprop.0+0xa4>
 8007c8e:	4674      	mov	r4, lr
 8007c90:	42a3      	cmp	r3, r4
 8007c92:	dd24      	ble.n	8007cde <_strtol_l.constprop.0+0xc6>
 8007c94:	f1bc 0f00 	cmp.w	ip, #0
 8007c98:	db1e      	blt.n	8007cd8 <_strtol_l.constprop.0+0xc0>
 8007c9a:	45b1      	cmp	r9, r6
 8007c9c:	d31c      	bcc.n	8007cd8 <_strtol_l.constprop.0+0xc0>
 8007c9e:	d101      	bne.n	8007ca4 <_strtol_l.constprop.0+0x8c>
 8007ca0:	45a2      	cmp	sl, r4
 8007ca2:	db19      	blt.n	8007cd8 <_strtol_l.constprop.0+0xc0>
 8007ca4:	fb06 4603 	mla	r6, r6, r3, r4
 8007ca8:	f04f 0c01 	mov.w	ip, #1
 8007cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cb0:	e7e8      	b.n	8007c84 <_strtol_l.constprop.0+0x6c>
 8007cb2:	2c2b      	cmp	r4, #43	; 0x2b
 8007cb4:	bf04      	itt	eq
 8007cb6:	782c      	ldrbeq	r4, [r5, #0]
 8007cb8:	1cb5      	addeq	r5, r6, #2
 8007cba:	e7ca      	b.n	8007c52 <_strtol_l.constprop.0+0x3a>
 8007cbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007cc0:	f1be 0f19 	cmp.w	lr, #25
 8007cc4:	d801      	bhi.n	8007cca <_strtol_l.constprop.0+0xb2>
 8007cc6:	3c37      	subs	r4, #55	; 0x37
 8007cc8:	e7e2      	b.n	8007c90 <_strtol_l.constprop.0+0x78>
 8007cca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007cce:	f1be 0f19 	cmp.w	lr, #25
 8007cd2:	d804      	bhi.n	8007cde <_strtol_l.constprop.0+0xc6>
 8007cd4:	3c57      	subs	r4, #87	; 0x57
 8007cd6:	e7db      	b.n	8007c90 <_strtol_l.constprop.0+0x78>
 8007cd8:	f04f 3cff 	mov.w	ip, #4294967295
 8007cdc:	e7e6      	b.n	8007cac <_strtol_l.constprop.0+0x94>
 8007cde:	f1bc 0f00 	cmp.w	ip, #0
 8007ce2:	da05      	bge.n	8007cf0 <_strtol_l.constprop.0+0xd8>
 8007ce4:	2322      	movs	r3, #34	; 0x22
 8007ce6:	6003      	str	r3, [r0, #0]
 8007ce8:	4646      	mov	r6, r8
 8007cea:	b942      	cbnz	r2, 8007cfe <_strtol_l.constprop.0+0xe6>
 8007cec:	4630      	mov	r0, r6
 8007cee:	e79e      	b.n	8007c2e <_strtol_l.constprop.0+0x16>
 8007cf0:	b107      	cbz	r7, 8007cf4 <_strtol_l.constprop.0+0xdc>
 8007cf2:	4276      	negs	r6, r6
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	d0f9      	beq.n	8007cec <_strtol_l.constprop.0+0xd4>
 8007cf8:	f1bc 0f00 	cmp.w	ip, #0
 8007cfc:	d000      	beq.n	8007d00 <_strtol_l.constprop.0+0xe8>
 8007cfe:	1e69      	subs	r1, r5, #1
 8007d00:	6011      	str	r1, [r2, #0]
 8007d02:	e7f3      	b.n	8007cec <_strtol_l.constprop.0+0xd4>
 8007d04:	2430      	movs	r4, #48	; 0x30
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1b1      	bne.n	8007c6e <_strtol_l.constprop.0+0x56>
 8007d0a:	2308      	movs	r3, #8
 8007d0c:	e7af      	b.n	8007c6e <_strtol_l.constprop.0+0x56>
 8007d0e:	2c30      	cmp	r4, #48	; 0x30
 8007d10:	d0a5      	beq.n	8007c5e <_strtol_l.constprop.0+0x46>
 8007d12:	230a      	movs	r3, #10
 8007d14:	e7ab      	b.n	8007c6e <_strtol_l.constprop.0+0x56>
 8007d16:	bf00      	nop
 8007d18:	0800cc51 	.word	0x0800cc51

08007d1c <_strtol_r>:
 8007d1c:	f7ff bf7c 	b.w	8007c18 <_strtol_l.constprop.0>

08007d20 <_write_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d07      	ldr	r5, [pc, #28]	; (8007d40 <_write_r+0x20>)
 8007d24:	4604      	mov	r4, r0
 8007d26:	4608      	mov	r0, r1
 8007d28:	4611      	mov	r1, r2
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	602a      	str	r2, [r5, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f7fb fa4e 	bl	80031d0 <_write>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_write_r+0x1e>
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_write_r+0x1e>
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	20000d60 	.word	0x20000d60

08007d44 <_close_r>:
 8007d44:	b538      	push	{r3, r4, r5, lr}
 8007d46:	4d06      	ldr	r5, [pc, #24]	; (8007d60 <_close_r+0x1c>)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4608      	mov	r0, r1
 8007d4e:	602b      	str	r3, [r5, #0]
 8007d50:	f7fb fa5a 	bl	8003208 <_close>
 8007d54:	1c43      	adds	r3, r0, #1
 8007d56:	d102      	bne.n	8007d5e <_close_r+0x1a>
 8007d58:	682b      	ldr	r3, [r5, #0]
 8007d5a:	b103      	cbz	r3, 8007d5e <_close_r+0x1a>
 8007d5c:	6023      	str	r3, [r4, #0]
 8007d5e:	bd38      	pop	{r3, r4, r5, pc}
 8007d60:	20000d60 	.word	0x20000d60

08007d64 <quorem>:
 8007d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d68:	6903      	ldr	r3, [r0, #16]
 8007d6a:	690c      	ldr	r4, [r1, #16]
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	4607      	mov	r7, r0
 8007d70:	f2c0 8081 	blt.w	8007e76 <quorem+0x112>
 8007d74:	3c01      	subs	r4, #1
 8007d76:	f101 0814 	add.w	r8, r1, #20
 8007d7a:	f100 0514 	add.w	r5, r0, #20
 8007d7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d82:	9301      	str	r3, [sp, #4]
 8007d84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d98:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d9c:	d331      	bcc.n	8007e02 <quorem+0x9e>
 8007d9e:	f04f 0e00 	mov.w	lr, #0
 8007da2:	4640      	mov	r0, r8
 8007da4:	46ac      	mov	ip, r5
 8007da6:	46f2      	mov	sl, lr
 8007da8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dac:	b293      	uxth	r3, r2
 8007dae:	fb06 e303 	mla	r3, r6, r3, lr
 8007db2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	ebaa 0303 	sub.w	r3, sl, r3
 8007dbc:	f8dc a000 	ldr.w	sl, [ip]
 8007dc0:	0c12      	lsrs	r2, r2, #16
 8007dc2:	fa13 f38a 	uxtah	r3, r3, sl
 8007dc6:	fb06 e202 	mla	r2, r6, r2, lr
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dd2:	b292      	uxth	r2, r2
 8007dd4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ddc:	f8bd 3000 	ldrh.w	r3, [sp]
 8007de0:	4581      	cmp	r9, r0
 8007de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de6:	f84c 3b04 	str.w	r3, [ip], #4
 8007dea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dee:	d2db      	bcs.n	8007da8 <quorem+0x44>
 8007df0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007df4:	b92b      	cbnz	r3, 8007e02 <quorem+0x9e>
 8007df6:	9b01      	ldr	r3, [sp, #4]
 8007df8:	3b04      	subs	r3, #4
 8007dfa:	429d      	cmp	r5, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	d32e      	bcc.n	8007e5e <quorem+0xfa>
 8007e00:	613c      	str	r4, [r7, #16]
 8007e02:	4638      	mov	r0, r7
 8007e04:	f001 fca4 	bl	8009750 <__mcmp>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	db24      	blt.n	8007e56 <quorem+0xf2>
 8007e0c:	3601      	adds	r6, #1
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f04f 0c00 	mov.w	ip, #0
 8007e14:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e18:	f8d0 e000 	ldr.w	lr, [r0]
 8007e1c:	b293      	uxth	r3, r2
 8007e1e:	ebac 0303 	sub.w	r3, ip, r3
 8007e22:	0c12      	lsrs	r2, r2, #16
 8007e24:	fa13 f38e 	uxtah	r3, r3, lr
 8007e28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e36:	45c1      	cmp	r9, r8
 8007e38:	f840 3b04 	str.w	r3, [r0], #4
 8007e3c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e40:	d2e8      	bcs.n	8007e14 <quorem+0xb0>
 8007e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e4a:	b922      	cbnz	r2, 8007e56 <quorem+0xf2>
 8007e4c:	3b04      	subs	r3, #4
 8007e4e:	429d      	cmp	r5, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	d30a      	bcc.n	8007e6a <quorem+0x106>
 8007e54:	613c      	str	r4, [r7, #16]
 8007e56:	4630      	mov	r0, r6
 8007e58:	b003      	add	sp, #12
 8007e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5e:	6812      	ldr	r2, [r2, #0]
 8007e60:	3b04      	subs	r3, #4
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	d1cc      	bne.n	8007e00 <quorem+0x9c>
 8007e66:	3c01      	subs	r4, #1
 8007e68:	e7c7      	b.n	8007dfa <quorem+0x96>
 8007e6a:	6812      	ldr	r2, [r2, #0]
 8007e6c:	3b04      	subs	r3, #4
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	d1f0      	bne.n	8007e54 <quorem+0xf0>
 8007e72:	3c01      	subs	r4, #1
 8007e74:	e7eb      	b.n	8007e4e <quorem+0xea>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e7ee      	b.n	8007e58 <quorem+0xf4>
 8007e7a:	0000      	movs	r0, r0
 8007e7c:	0000      	movs	r0, r0
	...

08007e80 <_dtoa_r>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	ed2d 8b04 	vpush	{d8-d9}
 8007e88:	ec57 6b10 	vmov	r6, r7, d0
 8007e8c:	b093      	sub	sp, #76	; 0x4c
 8007e8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e94:	9106      	str	r1, [sp, #24]
 8007e96:	ee10 aa10 	vmov	sl, s0
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea0:	46bb      	mov	fp, r7
 8007ea2:	b975      	cbnz	r5, 8007ec2 <_dtoa_r+0x42>
 8007ea4:	2010      	movs	r0, #16
 8007ea6:	f001 f95f 	bl	8009168 <malloc>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	6260      	str	r0, [r4, #36]	; 0x24
 8007eae:	b920      	cbnz	r0, 8007eba <_dtoa_r+0x3a>
 8007eb0:	4ba7      	ldr	r3, [pc, #668]	; (8008150 <_dtoa_r+0x2d0>)
 8007eb2:	21ea      	movs	r1, #234	; 0xea
 8007eb4:	48a7      	ldr	r0, [pc, #668]	; (8008154 <_dtoa_r+0x2d4>)
 8007eb6:	f002 fceb 	bl	800a890 <__assert_func>
 8007eba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ebe:	6005      	str	r5, [r0, #0]
 8007ec0:	60c5      	str	r5, [r0, #12]
 8007ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec4:	6819      	ldr	r1, [r3, #0]
 8007ec6:	b151      	cbz	r1, 8007ede <_dtoa_r+0x5e>
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	604a      	str	r2, [r1, #4]
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4093      	lsls	r3, r2
 8007ed0:	608b      	str	r3, [r1, #8]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f001 f9b0 	bl	8009238 <_Bfree>
 8007ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	1e3b      	subs	r3, r7, #0
 8007ee0:	bfaa      	itet	ge
 8007ee2:	2300      	movge	r3, #0
 8007ee4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ee8:	f8c8 3000 	strge.w	r3, [r8]
 8007eec:	4b9a      	ldr	r3, [pc, #616]	; (8008158 <_dtoa_r+0x2d8>)
 8007eee:	bfbc      	itt	lt
 8007ef0:	2201      	movlt	r2, #1
 8007ef2:	f8c8 2000 	strlt.w	r2, [r8]
 8007ef6:	ea33 030b 	bics.w	r3, r3, fp
 8007efa:	d11b      	bne.n	8007f34 <_dtoa_r+0xb4>
 8007efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007efe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f02:	6013      	str	r3, [r2, #0]
 8007f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f08:	4333      	orrs	r3, r6
 8007f0a:	f000 8592 	beq.w	8008a32 <_dtoa_r+0xbb2>
 8007f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f10:	b963      	cbnz	r3, 8007f2c <_dtoa_r+0xac>
 8007f12:	4b92      	ldr	r3, [pc, #584]	; (800815c <_dtoa_r+0x2dc>)
 8007f14:	e022      	b.n	8007f5c <_dtoa_r+0xdc>
 8007f16:	4b92      	ldr	r3, [pc, #584]	; (8008160 <_dtoa_r+0x2e0>)
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	9801      	ldr	r0, [sp, #4]
 8007f22:	b013      	add	sp, #76	; 0x4c
 8007f24:	ecbd 8b04 	vpop	{d8-d9}
 8007f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2c:	4b8b      	ldr	r3, [pc, #556]	; (800815c <_dtoa_r+0x2dc>)
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	3303      	adds	r3, #3
 8007f32:	e7f3      	b.n	8007f1c <_dtoa_r+0x9c>
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	4650      	mov	r0, sl
 8007f3a:	4659      	mov	r1, fp
 8007f3c:	f7f8 fddc 	bl	8000af8 <__aeabi_dcmpeq>
 8007f40:	ec4b ab19 	vmov	d9, sl, fp
 8007f44:	4680      	mov	r8, r0
 8007f46:	b158      	cbz	r0, 8007f60 <_dtoa_r+0xe0>
 8007f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 856b 	beq.w	8008a2c <_dtoa_r+0xbac>
 8007f56:	4883      	ldr	r0, [pc, #524]	; (8008164 <_dtoa_r+0x2e4>)
 8007f58:	6018      	str	r0, [r3, #0]
 8007f5a:	1e43      	subs	r3, r0, #1
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	e7df      	b.n	8007f20 <_dtoa_r+0xa0>
 8007f60:	ec4b ab10 	vmov	d0, sl, fp
 8007f64:	aa10      	add	r2, sp, #64	; 0x40
 8007f66:	a911      	add	r1, sp, #68	; 0x44
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f001 fd13 	bl	8009994 <__d2b>
 8007f6e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f72:	ee08 0a10 	vmov	s16, r0
 8007f76:	2d00      	cmp	r5, #0
 8007f78:	f000 8084 	beq.w	8008084 <_dtoa_r+0x204>
 8007f7c:	ee19 3a90 	vmov	r3, s19
 8007f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f84:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f88:	4656      	mov	r6, sl
 8007f8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f92:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f96:	4b74      	ldr	r3, [pc, #464]	; (8008168 <_dtoa_r+0x2e8>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	f7f8 f98b 	bl	80002b8 <__aeabi_dsub>
 8007fa2:	a365      	add	r3, pc, #404	; (adr r3, 8008138 <_dtoa_r+0x2b8>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 fb3e 	bl	8000628 <__aeabi_dmul>
 8007fac:	a364      	add	r3, pc, #400	; (adr r3, 8008140 <_dtoa_r+0x2c0>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f7f8 f983 	bl	80002bc <__adddf3>
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	4628      	mov	r0, r5
 8007fba:	460f      	mov	r7, r1
 8007fbc:	f7f8 faca 	bl	8000554 <__aeabi_i2d>
 8007fc0:	a361      	add	r3, pc, #388	; (adr r3, 8008148 <_dtoa_r+0x2c8>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f7f8 fb2f 	bl	8000628 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4630      	mov	r0, r6
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	f7f8 f973 	bl	80002bc <__adddf3>
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	460f      	mov	r7, r1
 8007fda:	f7f8 fdd5 	bl	8000b88 <__aeabi_d2iz>
 8007fde:	2200      	movs	r2, #0
 8007fe0:	9000      	str	r0, [sp, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 fd90 	bl	8000b0c <__aeabi_dcmplt>
 8007fec:	b150      	cbz	r0, 8008004 <_dtoa_r+0x184>
 8007fee:	9800      	ldr	r0, [sp, #0]
 8007ff0:	f7f8 fab0 	bl	8000554 <__aeabi_i2d>
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	463b      	mov	r3, r7
 8007ff8:	f7f8 fd7e 	bl	8000af8 <__aeabi_dcmpeq>
 8007ffc:	b910      	cbnz	r0, 8008004 <_dtoa_r+0x184>
 8007ffe:	9b00      	ldr	r3, [sp, #0]
 8008000:	3b01      	subs	r3, #1
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	9b00      	ldr	r3, [sp, #0]
 8008006:	2b16      	cmp	r3, #22
 8008008:	d85a      	bhi.n	80080c0 <_dtoa_r+0x240>
 800800a:	9a00      	ldr	r2, [sp, #0]
 800800c:	4b57      	ldr	r3, [pc, #348]	; (800816c <_dtoa_r+0x2ec>)
 800800e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	ec51 0b19 	vmov	r0, r1, d9
 800801a:	f7f8 fd77 	bl	8000b0c <__aeabi_dcmplt>
 800801e:	2800      	cmp	r0, #0
 8008020:	d050      	beq.n	80080c4 <_dtoa_r+0x244>
 8008022:	9b00      	ldr	r3, [sp, #0]
 8008024:	3b01      	subs	r3, #1
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	2300      	movs	r3, #0
 800802a:	930b      	str	r3, [sp, #44]	; 0x2c
 800802c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800802e:	1b5d      	subs	r5, r3, r5
 8008030:	1e6b      	subs	r3, r5, #1
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	bf45      	ittet	mi
 8008036:	f1c5 0301 	rsbmi	r3, r5, #1
 800803a:	9304      	strmi	r3, [sp, #16]
 800803c:	2300      	movpl	r3, #0
 800803e:	2300      	movmi	r3, #0
 8008040:	bf4c      	ite	mi
 8008042:	9305      	strmi	r3, [sp, #20]
 8008044:	9304      	strpl	r3, [sp, #16]
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	db3d      	blt.n	80080c8 <_dtoa_r+0x248>
 800804c:	9b05      	ldr	r3, [sp, #20]
 800804e:	9a00      	ldr	r2, [sp, #0]
 8008050:	920a      	str	r2, [sp, #40]	; 0x28
 8008052:	4413      	add	r3, r2
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	2300      	movs	r3, #0
 8008058:	9307      	str	r3, [sp, #28]
 800805a:	9b06      	ldr	r3, [sp, #24]
 800805c:	2b09      	cmp	r3, #9
 800805e:	f200 8089 	bhi.w	8008174 <_dtoa_r+0x2f4>
 8008062:	2b05      	cmp	r3, #5
 8008064:	bfc4      	itt	gt
 8008066:	3b04      	subgt	r3, #4
 8008068:	9306      	strgt	r3, [sp, #24]
 800806a:	9b06      	ldr	r3, [sp, #24]
 800806c:	f1a3 0302 	sub.w	r3, r3, #2
 8008070:	bfcc      	ite	gt
 8008072:	2500      	movgt	r5, #0
 8008074:	2501      	movle	r5, #1
 8008076:	2b03      	cmp	r3, #3
 8008078:	f200 8087 	bhi.w	800818a <_dtoa_r+0x30a>
 800807c:	e8df f003 	tbb	[pc, r3]
 8008080:	59383a2d 	.word	0x59383a2d
 8008084:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008088:	441d      	add	r5, r3
 800808a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800808e:	2b20      	cmp	r3, #32
 8008090:	bfc1      	itttt	gt
 8008092:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008096:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800809a:	fa0b f303 	lslgt.w	r3, fp, r3
 800809e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080a2:	bfda      	itte	le
 80080a4:	f1c3 0320 	rsble	r3, r3, #32
 80080a8:	fa06 f003 	lslle.w	r0, r6, r3
 80080ac:	4318      	orrgt	r0, r3
 80080ae:	f7f8 fa41 	bl	8000534 <__aeabi_ui2d>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4606      	mov	r6, r0
 80080b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80080ba:	3d01      	subs	r5, #1
 80080bc:	930e      	str	r3, [sp, #56]	; 0x38
 80080be:	e76a      	b.n	8007f96 <_dtoa_r+0x116>
 80080c0:	2301      	movs	r3, #1
 80080c2:	e7b2      	b.n	800802a <_dtoa_r+0x1aa>
 80080c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80080c6:	e7b1      	b.n	800802c <_dtoa_r+0x1ac>
 80080c8:	9b04      	ldr	r3, [sp, #16]
 80080ca:	9a00      	ldr	r2, [sp, #0]
 80080cc:	1a9b      	subs	r3, r3, r2
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	4253      	negs	r3, r2
 80080d2:	9307      	str	r3, [sp, #28]
 80080d4:	2300      	movs	r3, #0
 80080d6:	930a      	str	r3, [sp, #40]	; 0x28
 80080d8:	e7bf      	b.n	800805a <_dtoa_r+0x1da>
 80080da:	2300      	movs	r3, #0
 80080dc:	9308      	str	r3, [sp, #32]
 80080de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dc55      	bgt.n	8008190 <_dtoa_r+0x310>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80080ea:	461a      	mov	r2, r3
 80080ec:	9209      	str	r2, [sp, #36]	; 0x24
 80080ee:	e00c      	b.n	800810a <_dtoa_r+0x28a>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e7f3      	b.n	80080dc <_dtoa_r+0x25c>
 80080f4:	2300      	movs	r3, #0
 80080f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080f8:	9308      	str	r3, [sp, #32]
 80080fa:	9b00      	ldr	r3, [sp, #0]
 80080fc:	4413      	add	r3, r2
 80080fe:	9302      	str	r3, [sp, #8]
 8008100:	3301      	adds	r3, #1
 8008102:	2b01      	cmp	r3, #1
 8008104:	9303      	str	r3, [sp, #12]
 8008106:	bfb8      	it	lt
 8008108:	2301      	movlt	r3, #1
 800810a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800810c:	2200      	movs	r2, #0
 800810e:	6042      	str	r2, [r0, #4]
 8008110:	2204      	movs	r2, #4
 8008112:	f102 0614 	add.w	r6, r2, #20
 8008116:	429e      	cmp	r6, r3
 8008118:	6841      	ldr	r1, [r0, #4]
 800811a:	d93d      	bls.n	8008198 <_dtoa_r+0x318>
 800811c:	4620      	mov	r0, r4
 800811e:	f001 f84b 	bl	80091b8 <_Balloc>
 8008122:	9001      	str	r0, [sp, #4]
 8008124:	2800      	cmp	r0, #0
 8008126:	d13b      	bne.n	80081a0 <_dtoa_r+0x320>
 8008128:	4b11      	ldr	r3, [pc, #68]	; (8008170 <_dtoa_r+0x2f0>)
 800812a:	4602      	mov	r2, r0
 800812c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008130:	e6c0      	b.n	8007eb4 <_dtoa_r+0x34>
 8008132:	2301      	movs	r3, #1
 8008134:	e7df      	b.n	80080f6 <_dtoa_r+0x276>
 8008136:	bf00      	nop
 8008138:	636f4361 	.word	0x636f4361
 800813c:	3fd287a7 	.word	0x3fd287a7
 8008140:	8b60c8b3 	.word	0x8b60c8b3
 8008144:	3fc68a28 	.word	0x3fc68a28
 8008148:	509f79fb 	.word	0x509f79fb
 800814c:	3fd34413 	.word	0x3fd34413
 8008150:	0800cd5e 	.word	0x0800cd5e
 8008154:	0800cd75 	.word	0x0800cd75
 8008158:	7ff00000 	.word	0x7ff00000
 800815c:	0800cd5a 	.word	0x0800cd5a
 8008160:	0800cd51 	.word	0x0800cd51
 8008164:	0800cfca 	.word	0x0800cfca
 8008168:	3ff80000 	.word	0x3ff80000
 800816c:	0800cee0 	.word	0x0800cee0
 8008170:	0800cdd0 	.word	0x0800cdd0
 8008174:	2501      	movs	r5, #1
 8008176:	2300      	movs	r3, #0
 8008178:	9306      	str	r3, [sp, #24]
 800817a:	9508      	str	r5, [sp, #32]
 800817c:	f04f 33ff 	mov.w	r3, #4294967295
 8008180:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008184:	2200      	movs	r2, #0
 8008186:	2312      	movs	r3, #18
 8008188:	e7b0      	b.n	80080ec <_dtoa_r+0x26c>
 800818a:	2301      	movs	r3, #1
 800818c:	9308      	str	r3, [sp, #32]
 800818e:	e7f5      	b.n	800817c <_dtoa_r+0x2fc>
 8008190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008192:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008196:	e7b8      	b.n	800810a <_dtoa_r+0x28a>
 8008198:	3101      	adds	r1, #1
 800819a:	6041      	str	r1, [r0, #4]
 800819c:	0052      	lsls	r2, r2, #1
 800819e:	e7b8      	b.n	8008112 <_dtoa_r+0x292>
 80081a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081a2:	9a01      	ldr	r2, [sp, #4]
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	2b0e      	cmp	r3, #14
 80081aa:	f200 809d 	bhi.w	80082e8 <_dtoa_r+0x468>
 80081ae:	2d00      	cmp	r5, #0
 80081b0:	f000 809a 	beq.w	80082e8 <_dtoa_r+0x468>
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	dd32      	ble.n	8008220 <_dtoa_r+0x3a0>
 80081ba:	4ab7      	ldr	r2, [pc, #732]	; (8008498 <_dtoa_r+0x618>)
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081c8:	9b00      	ldr	r3, [sp, #0]
 80081ca:	05d8      	lsls	r0, r3, #23
 80081cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80081d0:	d516      	bpl.n	8008200 <_dtoa_r+0x380>
 80081d2:	4bb2      	ldr	r3, [pc, #712]	; (800849c <_dtoa_r+0x61c>)
 80081d4:	ec51 0b19 	vmov	r0, r1, d9
 80081d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081dc:	f7f8 fb4e 	bl	800087c <__aeabi_ddiv>
 80081e0:	f007 070f 	and.w	r7, r7, #15
 80081e4:	4682      	mov	sl, r0
 80081e6:	468b      	mov	fp, r1
 80081e8:	2503      	movs	r5, #3
 80081ea:	4eac      	ldr	r6, [pc, #688]	; (800849c <_dtoa_r+0x61c>)
 80081ec:	b957      	cbnz	r7, 8008204 <_dtoa_r+0x384>
 80081ee:	4642      	mov	r2, r8
 80081f0:	464b      	mov	r3, r9
 80081f2:	4650      	mov	r0, sl
 80081f4:	4659      	mov	r1, fp
 80081f6:	f7f8 fb41 	bl	800087c <__aeabi_ddiv>
 80081fa:	4682      	mov	sl, r0
 80081fc:	468b      	mov	fp, r1
 80081fe:	e028      	b.n	8008252 <_dtoa_r+0x3d2>
 8008200:	2502      	movs	r5, #2
 8008202:	e7f2      	b.n	80081ea <_dtoa_r+0x36a>
 8008204:	07f9      	lsls	r1, r7, #31
 8008206:	d508      	bpl.n	800821a <_dtoa_r+0x39a>
 8008208:	4640      	mov	r0, r8
 800820a:	4649      	mov	r1, r9
 800820c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008210:	f7f8 fa0a 	bl	8000628 <__aeabi_dmul>
 8008214:	3501      	adds	r5, #1
 8008216:	4680      	mov	r8, r0
 8008218:	4689      	mov	r9, r1
 800821a:	107f      	asrs	r7, r7, #1
 800821c:	3608      	adds	r6, #8
 800821e:	e7e5      	b.n	80081ec <_dtoa_r+0x36c>
 8008220:	f000 809b 	beq.w	800835a <_dtoa_r+0x4da>
 8008224:	9b00      	ldr	r3, [sp, #0]
 8008226:	4f9d      	ldr	r7, [pc, #628]	; (800849c <_dtoa_r+0x61c>)
 8008228:	425e      	negs	r6, r3
 800822a:	4b9b      	ldr	r3, [pc, #620]	; (8008498 <_dtoa_r+0x618>)
 800822c:	f006 020f 	and.w	r2, r6, #15
 8008230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	ec51 0b19 	vmov	r0, r1, d9
 800823c:	f7f8 f9f4 	bl	8000628 <__aeabi_dmul>
 8008240:	1136      	asrs	r6, r6, #4
 8008242:	4682      	mov	sl, r0
 8008244:	468b      	mov	fp, r1
 8008246:	2300      	movs	r3, #0
 8008248:	2502      	movs	r5, #2
 800824a:	2e00      	cmp	r6, #0
 800824c:	d17a      	bne.n	8008344 <_dtoa_r+0x4c4>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1d3      	bne.n	80081fa <_dtoa_r+0x37a>
 8008252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 8082 	beq.w	800835e <_dtoa_r+0x4de>
 800825a:	4b91      	ldr	r3, [pc, #580]	; (80084a0 <_dtoa_r+0x620>)
 800825c:	2200      	movs	r2, #0
 800825e:	4650      	mov	r0, sl
 8008260:	4659      	mov	r1, fp
 8008262:	f7f8 fc53 	bl	8000b0c <__aeabi_dcmplt>
 8008266:	2800      	cmp	r0, #0
 8008268:	d079      	beq.n	800835e <_dtoa_r+0x4de>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d076      	beq.n	800835e <_dtoa_r+0x4de>
 8008270:	9b02      	ldr	r3, [sp, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	dd36      	ble.n	80082e4 <_dtoa_r+0x464>
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	4650      	mov	r0, sl
 800827a:	4659      	mov	r1, fp
 800827c:	1e5f      	subs	r7, r3, #1
 800827e:	2200      	movs	r2, #0
 8008280:	4b88      	ldr	r3, [pc, #544]	; (80084a4 <_dtoa_r+0x624>)
 8008282:	f7f8 f9d1 	bl	8000628 <__aeabi_dmul>
 8008286:	9e02      	ldr	r6, [sp, #8]
 8008288:	4682      	mov	sl, r0
 800828a:	468b      	mov	fp, r1
 800828c:	3501      	adds	r5, #1
 800828e:	4628      	mov	r0, r5
 8008290:	f7f8 f960 	bl	8000554 <__aeabi_i2d>
 8008294:	4652      	mov	r2, sl
 8008296:	465b      	mov	r3, fp
 8008298:	f7f8 f9c6 	bl	8000628 <__aeabi_dmul>
 800829c:	4b82      	ldr	r3, [pc, #520]	; (80084a8 <_dtoa_r+0x628>)
 800829e:	2200      	movs	r2, #0
 80082a0:	f7f8 f80c 	bl	80002bc <__adddf3>
 80082a4:	46d0      	mov	r8, sl
 80082a6:	46d9      	mov	r9, fp
 80082a8:	4682      	mov	sl, r0
 80082aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80082ae:	2e00      	cmp	r6, #0
 80082b0:	d158      	bne.n	8008364 <_dtoa_r+0x4e4>
 80082b2:	4b7e      	ldr	r3, [pc, #504]	; (80084ac <_dtoa_r+0x62c>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	4640      	mov	r0, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	f7f7 fffd 	bl	80002b8 <__aeabi_dsub>
 80082be:	4652      	mov	r2, sl
 80082c0:	465b      	mov	r3, fp
 80082c2:	4680      	mov	r8, r0
 80082c4:	4689      	mov	r9, r1
 80082c6:	f7f8 fc3f 	bl	8000b48 <__aeabi_dcmpgt>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	f040 8295 	bne.w	80087fa <_dtoa_r+0x97a>
 80082d0:	4652      	mov	r2, sl
 80082d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80082d6:	4640      	mov	r0, r8
 80082d8:	4649      	mov	r1, r9
 80082da:	f7f8 fc17 	bl	8000b0c <__aeabi_dcmplt>
 80082de:	2800      	cmp	r0, #0
 80082e0:	f040 8289 	bne.w	80087f6 <_dtoa_r+0x976>
 80082e4:	ec5b ab19 	vmov	sl, fp, d9
 80082e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f2c0 8148 	blt.w	8008580 <_dtoa_r+0x700>
 80082f0:	9a00      	ldr	r2, [sp, #0]
 80082f2:	2a0e      	cmp	r2, #14
 80082f4:	f300 8144 	bgt.w	8008580 <_dtoa_r+0x700>
 80082f8:	4b67      	ldr	r3, [pc, #412]	; (8008498 <_dtoa_r+0x618>)
 80082fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	f280 80d5 	bge.w	80084b4 <_dtoa_r+0x634>
 800830a:	9b03      	ldr	r3, [sp, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f300 80d1 	bgt.w	80084b4 <_dtoa_r+0x634>
 8008312:	f040 826f 	bne.w	80087f4 <_dtoa_r+0x974>
 8008316:	4b65      	ldr	r3, [pc, #404]	; (80084ac <_dtoa_r+0x62c>)
 8008318:	2200      	movs	r2, #0
 800831a:	4640      	mov	r0, r8
 800831c:	4649      	mov	r1, r9
 800831e:	f7f8 f983 	bl	8000628 <__aeabi_dmul>
 8008322:	4652      	mov	r2, sl
 8008324:	465b      	mov	r3, fp
 8008326:	f7f8 fc05 	bl	8000b34 <__aeabi_dcmpge>
 800832a:	9e03      	ldr	r6, [sp, #12]
 800832c:	4637      	mov	r7, r6
 800832e:	2800      	cmp	r0, #0
 8008330:	f040 8245 	bne.w	80087be <_dtoa_r+0x93e>
 8008334:	9d01      	ldr	r5, [sp, #4]
 8008336:	2331      	movs	r3, #49	; 0x31
 8008338:	f805 3b01 	strb.w	r3, [r5], #1
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	3301      	adds	r3, #1
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	e240      	b.n	80087c6 <_dtoa_r+0x946>
 8008344:	07f2      	lsls	r2, r6, #31
 8008346:	d505      	bpl.n	8008354 <_dtoa_r+0x4d4>
 8008348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800834c:	f7f8 f96c 	bl	8000628 <__aeabi_dmul>
 8008350:	3501      	adds	r5, #1
 8008352:	2301      	movs	r3, #1
 8008354:	1076      	asrs	r6, r6, #1
 8008356:	3708      	adds	r7, #8
 8008358:	e777      	b.n	800824a <_dtoa_r+0x3ca>
 800835a:	2502      	movs	r5, #2
 800835c:	e779      	b.n	8008252 <_dtoa_r+0x3d2>
 800835e:	9f00      	ldr	r7, [sp, #0]
 8008360:	9e03      	ldr	r6, [sp, #12]
 8008362:	e794      	b.n	800828e <_dtoa_r+0x40e>
 8008364:	9901      	ldr	r1, [sp, #4]
 8008366:	4b4c      	ldr	r3, [pc, #304]	; (8008498 <_dtoa_r+0x618>)
 8008368:	4431      	add	r1, r6
 800836a:	910d      	str	r1, [sp, #52]	; 0x34
 800836c:	9908      	ldr	r1, [sp, #32]
 800836e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008372:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008376:	2900      	cmp	r1, #0
 8008378:	d043      	beq.n	8008402 <_dtoa_r+0x582>
 800837a:	494d      	ldr	r1, [pc, #308]	; (80084b0 <_dtoa_r+0x630>)
 800837c:	2000      	movs	r0, #0
 800837e:	f7f8 fa7d 	bl	800087c <__aeabi_ddiv>
 8008382:	4652      	mov	r2, sl
 8008384:	465b      	mov	r3, fp
 8008386:	f7f7 ff97 	bl	80002b8 <__aeabi_dsub>
 800838a:	9d01      	ldr	r5, [sp, #4]
 800838c:	4682      	mov	sl, r0
 800838e:	468b      	mov	fp, r1
 8008390:	4649      	mov	r1, r9
 8008392:	4640      	mov	r0, r8
 8008394:	f7f8 fbf8 	bl	8000b88 <__aeabi_d2iz>
 8008398:	4606      	mov	r6, r0
 800839a:	f7f8 f8db 	bl	8000554 <__aeabi_i2d>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4640      	mov	r0, r8
 80083a4:	4649      	mov	r1, r9
 80083a6:	f7f7 ff87 	bl	80002b8 <__aeabi_dsub>
 80083aa:	3630      	adds	r6, #48	; 0x30
 80083ac:	f805 6b01 	strb.w	r6, [r5], #1
 80083b0:	4652      	mov	r2, sl
 80083b2:	465b      	mov	r3, fp
 80083b4:	4680      	mov	r8, r0
 80083b6:	4689      	mov	r9, r1
 80083b8:	f7f8 fba8 	bl	8000b0c <__aeabi_dcmplt>
 80083bc:	2800      	cmp	r0, #0
 80083be:	d163      	bne.n	8008488 <_dtoa_r+0x608>
 80083c0:	4642      	mov	r2, r8
 80083c2:	464b      	mov	r3, r9
 80083c4:	4936      	ldr	r1, [pc, #216]	; (80084a0 <_dtoa_r+0x620>)
 80083c6:	2000      	movs	r0, #0
 80083c8:	f7f7 ff76 	bl	80002b8 <__aeabi_dsub>
 80083cc:	4652      	mov	r2, sl
 80083ce:	465b      	mov	r3, fp
 80083d0:	f7f8 fb9c 	bl	8000b0c <__aeabi_dcmplt>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f040 80b5 	bne.w	8008544 <_dtoa_r+0x6c4>
 80083da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083dc:	429d      	cmp	r5, r3
 80083de:	d081      	beq.n	80082e4 <_dtoa_r+0x464>
 80083e0:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <_dtoa_r+0x624>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	4650      	mov	r0, sl
 80083e6:	4659      	mov	r1, fp
 80083e8:	f7f8 f91e 	bl	8000628 <__aeabi_dmul>
 80083ec:	4b2d      	ldr	r3, [pc, #180]	; (80084a4 <_dtoa_r+0x624>)
 80083ee:	4682      	mov	sl, r0
 80083f0:	468b      	mov	fp, r1
 80083f2:	4640      	mov	r0, r8
 80083f4:	4649      	mov	r1, r9
 80083f6:	2200      	movs	r2, #0
 80083f8:	f7f8 f916 	bl	8000628 <__aeabi_dmul>
 80083fc:	4680      	mov	r8, r0
 80083fe:	4689      	mov	r9, r1
 8008400:	e7c6      	b.n	8008390 <_dtoa_r+0x510>
 8008402:	4650      	mov	r0, sl
 8008404:	4659      	mov	r1, fp
 8008406:	f7f8 f90f 	bl	8000628 <__aeabi_dmul>
 800840a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800840c:	9d01      	ldr	r5, [sp, #4]
 800840e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008410:	4682      	mov	sl, r0
 8008412:	468b      	mov	fp, r1
 8008414:	4649      	mov	r1, r9
 8008416:	4640      	mov	r0, r8
 8008418:	f7f8 fbb6 	bl	8000b88 <__aeabi_d2iz>
 800841c:	4606      	mov	r6, r0
 800841e:	f7f8 f899 	bl	8000554 <__aeabi_i2d>
 8008422:	3630      	adds	r6, #48	; 0x30
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4640      	mov	r0, r8
 800842a:	4649      	mov	r1, r9
 800842c:	f7f7 ff44 	bl	80002b8 <__aeabi_dsub>
 8008430:	f805 6b01 	strb.w	r6, [r5], #1
 8008434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008436:	429d      	cmp	r5, r3
 8008438:	4680      	mov	r8, r0
 800843a:	4689      	mov	r9, r1
 800843c:	f04f 0200 	mov.w	r2, #0
 8008440:	d124      	bne.n	800848c <_dtoa_r+0x60c>
 8008442:	4b1b      	ldr	r3, [pc, #108]	; (80084b0 <_dtoa_r+0x630>)
 8008444:	4650      	mov	r0, sl
 8008446:	4659      	mov	r1, fp
 8008448:	f7f7 ff38 	bl	80002bc <__adddf3>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4640      	mov	r0, r8
 8008452:	4649      	mov	r1, r9
 8008454:	f7f8 fb78 	bl	8000b48 <__aeabi_dcmpgt>
 8008458:	2800      	cmp	r0, #0
 800845a:	d173      	bne.n	8008544 <_dtoa_r+0x6c4>
 800845c:	4652      	mov	r2, sl
 800845e:	465b      	mov	r3, fp
 8008460:	4913      	ldr	r1, [pc, #76]	; (80084b0 <_dtoa_r+0x630>)
 8008462:	2000      	movs	r0, #0
 8008464:	f7f7 ff28 	bl	80002b8 <__aeabi_dsub>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4640      	mov	r0, r8
 800846e:	4649      	mov	r1, r9
 8008470:	f7f8 fb4c 	bl	8000b0c <__aeabi_dcmplt>
 8008474:	2800      	cmp	r0, #0
 8008476:	f43f af35 	beq.w	80082e4 <_dtoa_r+0x464>
 800847a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800847c:	1e6b      	subs	r3, r5, #1
 800847e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008480:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008484:	2b30      	cmp	r3, #48	; 0x30
 8008486:	d0f8      	beq.n	800847a <_dtoa_r+0x5fa>
 8008488:	9700      	str	r7, [sp, #0]
 800848a:	e049      	b.n	8008520 <_dtoa_r+0x6a0>
 800848c:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <_dtoa_r+0x624>)
 800848e:	f7f8 f8cb 	bl	8000628 <__aeabi_dmul>
 8008492:	4680      	mov	r8, r0
 8008494:	4689      	mov	r9, r1
 8008496:	e7bd      	b.n	8008414 <_dtoa_r+0x594>
 8008498:	0800cee0 	.word	0x0800cee0
 800849c:	0800ceb8 	.word	0x0800ceb8
 80084a0:	3ff00000 	.word	0x3ff00000
 80084a4:	40240000 	.word	0x40240000
 80084a8:	401c0000 	.word	0x401c0000
 80084ac:	40140000 	.word	0x40140000
 80084b0:	3fe00000 	.word	0x3fe00000
 80084b4:	9d01      	ldr	r5, [sp, #4]
 80084b6:	4656      	mov	r6, sl
 80084b8:	465f      	mov	r7, fp
 80084ba:	4642      	mov	r2, r8
 80084bc:	464b      	mov	r3, r9
 80084be:	4630      	mov	r0, r6
 80084c0:	4639      	mov	r1, r7
 80084c2:	f7f8 f9db 	bl	800087c <__aeabi_ddiv>
 80084c6:	f7f8 fb5f 	bl	8000b88 <__aeabi_d2iz>
 80084ca:	4682      	mov	sl, r0
 80084cc:	f7f8 f842 	bl	8000554 <__aeabi_i2d>
 80084d0:	4642      	mov	r2, r8
 80084d2:	464b      	mov	r3, r9
 80084d4:	f7f8 f8a8 	bl	8000628 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80084e4:	f7f7 fee8 	bl	80002b8 <__aeabi_dsub>
 80084e8:	f805 6b01 	strb.w	r6, [r5], #1
 80084ec:	9e01      	ldr	r6, [sp, #4]
 80084ee:	9f03      	ldr	r7, [sp, #12]
 80084f0:	1bae      	subs	r6, r5, r6
 80084f2:	42b7      	cmp	r7, r6
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	d135      	bne.n	8008566 <_dtoa_r+0x6e6>
 80084fa:	f7f7 fedf 	bl	80002bc <__adddf3>
 80084fe:	4642      	mov	r2, r8
 8008500:	464b      	mov	r3, r9
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	f7f8 fb1f 	bl	8000b48 <__aeabi_dcmpgt>
 800850a:	b9d0      	cbnz	r0, 8008542 <_dtoa_r+0x6c2>
 800850c:	4642      	mov	r2, r8
 800850e:	464b      	mov	r3, r9
 8008510:	4630      	mov	r0, r6
 8008512:	4639      	mov	r1, r7
 8008514:	f7f8 faf0 	bl	8000af8 <__aeabi_dcmpeq>
 8008518:	b110      	cbz	r0, 8008520 <_dtoa_r+0x6a0>
 800851a:	f01a 0f01 	tst.w	sl, #1
 800851e:	d110      	bne.n	8008542 <_dtoa_r+0x6c2>
 8008520:	4620      	mov	r0, r4
 8008522:	ee18 1a10 	vmov	r1, s16
 8008526:	f000 fe87 	bl	8009238 <_Bfree>
 800852a:	2300      	movs	r3, #0
 800852c:	9800      	ldr	r0, [sp, #0]
 800852e:	702b      	strb	r3, [r5, #0]
 8008530:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008532:	3001      	adds	r0, #1
 8008534:	6018      	str	r0, [r3, #0]
 8008536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008538:	2b00      	cmp	r3, #0
 800853a:	f43f acf1 	beq.w	8007f20 <_dtoa_r+0xa0>
 800853e:	601d      	str	r5, [r3, #0]
 8008540:	e4ee      	b.n	8007f20 <_dtoa_r+0xa0>
 8008542:	9f00      	ldr	r7, [sp, #0]
 8008544:	462b      	mov	r3, r5
 8008546:	461d      	mov	r5, r3
 8008548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800854c:	2a39      	cmp	r2, #57	; 0x39
 800854e:	d106      	bne.n	800855e <_dtoa_r+0x6de>
 8008550:	9a01      	ldr	r2, [sp, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d1f7      	bne.n	8008546 <_dtoa_r+0x6c6>
 8008556:	9901      	ldr	r1, [sp, #4]
 8008558:	2230      	movs	r2, #48	; 0x30
 800855a:	3701      	adds	r7, #1
 800855c:	700a      	strb	r2, [r1, #0]
 800855e:	781a      	ldrb	r2, [r3, #0]
 8008560:	3201      	adds	r2, #1
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e790      	b.n	8008488 <_dtoa_r+0x608>
 8008566:	4ba6      	ldr	r3, [pc, #664]	; (8008800 <_dtoa_r+0x980>)
 8008568:	2200      	movs	r2, #0
 800856a:	f7f8 f85d 	bl	8000628 <__aeabi_dmul>
 800856e:	2200      	movs	r2, #0
 8008570:	2300      	movs	r3, #0
 8008572:	4606      	mov	r6, r0
 8008574:	460f      	mov	r7, r1
 8008576:	f7f8 fabf 	bl	8000af8 <__aeabi_dcmpeq>
 800857a:	2800      	cmp	r0, #0
 800857c:	d09d      	beq.n	80084ba <_dtoa_r+0x63a>
 800857e:	e7cf      	b.n	8008520 <_dtoa_r+0x6a0>
 8008580:	9a08      	ldr	r2, [sp, #32]
 8008582:	2a00      	cmp	r2, #0
 8008584:	f000 80d7 	beq.w	8008736 <_dtoa_r+0x8b6>
 8008588:	9a06      	ldr	r2, [sp, #24]
 800858a:	2a01      	cmp	r2, #1
 800858c:	f300 80ba 	bgt.w	8008704 <_dtoa_r+0x884>
 8008590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008592:	2a00      	cmp	r2, #0
 8008594:	f000 80b2 	beq.w	80086fc <_dtoa_r+0x87c>
 8008598:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800859c:	9e07      	ldr	r6, [sp, #28]
 800859e:	9d04      	ldr	r5, [sp, #16]
 80085a0:	9a04      	ldr	r2, [sp, #16]
 80085a2:	441a      	add	r2, r3
 80085a4:	9204      	str	r2, [sp, #16]
 80085a6:	9a05      	ldr	r2, [sp, #20]
 80085a8:	2101      	movs	r1, #1
 80085aa:	441a      	add	r2, r3
 80085ac:	4620      	mov	r0, r4
 80085ae:	9205      	str	r2, [sp, #20]
 80085b0:	f000 ff44 	bl	800943c <__i2b>
 80085b4:	4607      	mov	r7, r0
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	dd0c      	ble.n	80085d4 <_dtoa_r+0x754>
 80085ba:	9b05      	ldr	r3, [sp, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd09      	ble.n	80085d4 <_dtoa_r+0x754>
 80085c0:	42ab      	cmp	r3, r5
 80085c2:	9a04      	ldr	r2, [sp, #16]
 80085c4:	bfa8      	it	ge
 80085c6:	462b      	movge	r3, r5
 80085c8:	1ad2      	subs	r2, r2, r3
 80085ca:	9204      	str	r2, [sp, #16]
 80085cc:	9a05      	ldr	r2, [sp, #20]
 80085ce:	1aed      	subs	r5, r5, r3
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	b31b      	cbz	r3, 8008620 <_dtoa_r+0x7a0>
 80085d8:	9b08      	ldr	r3, [sp, #32]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80af 	beq.w	800873e <_dtoa_r+0x8be>
 80085e0:	2e00      	cmp	r6, #0
 80085e2:	dd13      	ble.n	800860c <_dtoa_r+0x78c>
 80085e4:	4639      	mov	r1, r7
 80085e6:	4632      	mov	r2, r6
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 ffe7 	bl	80095bc <__pow5mult>
 80085ee:	ee18 2a10 	vmov	r2, s16
 80085f2:	4601      	mov	r1, r0
 80085f4:	4607      	mov	r7, r0
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 ff36 	bl	8009468 <__multiply>
 80085fc:	ee18 1a10 	vmov	r1, s16
 8008600:	4680      	mov	r8, r0
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fe18 	bl	8009238 <_Bfree>
 8008608:	ee08 8a10 	vmov	s16, r8
 800860c:	9b07      	ldr	r3, [sp, #28]
 800860e:	1b9a      	subs	r2, r3, r6
 8008610:	d006      	beq.n	8008620 <_dtoa_r+0x7a0>
 8008612:	ee18 1a10 	vmov	r1, s16
 8008616:	4620      	mov	r0, r4
 8008618:	f000 ffd0 	bl	80095bc <__pow5mult>
 800861c:	ee08 0a10 	vmov	s16, r0
 8008620:	2101      	movs	r1, #1
 8008622:	4620      	mov	r0, r4
 8008624:	f000 ff0a 	bl	800943c <__i2b>
 8008628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862a:	2b00      	cmp	r3, #0
 800862c:	4606      	mov	r6, r0
 800862e:	f340 8088 	ble.w	8008742 <_dtoa_r+0x8c2>
 8008632:	461a      	mov	r2, r3
 8008634:	4601      	mov	r1, r0
 8008636:	4620      	mov	r0, r4
 8008638:	f000 ffc0 	bl	80095bc <__pow5mult>
 800863c:	9b06      	ldr	r3, [sp, #24]
 800863e:	2b01      	cmp	r3, #1
 8008640:	4606      	mov	r6, r0
 8008642:	f340 8081 	ble.w	8008748 <_dtoa_r+0x8c8>
 8008646:	f04f 0800 	mov.w	r8, #0
 800864a:	6933      	ldr	r3, [r6, #16]
 800864c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008650:	6918      	ldr	r0, [r3, #16]
 8008652:	f000 fea3 	bl	800939c <__hi0bits>
 8008656:	f1c0 0020 	rsb	r0, r0, #32
 800865a:	9b05      	ldr	r3, [sp, #20]
 800865c:	4418      	add	r0, r3
 800865e:	f010 001f 	ands.w	r0, r0, #31
 8008662:	f000 8092 	beq.w	800878a <_dtoa_r+0x90a>
 8008666:	f1c0 0320 	rsb	r3, r0, #32
 800866a:	2b04      	cmp	r3, #4
 800866c:	f340 808a 	ble.w	8008784 <_dtoa_r+0x904>
 8008670:	f1c0 001c 	rsb	r0, r0, #28
 8008674:	9b04      	ldr	r3, [sp, #16]
 8008676:	4403      	add	r3, r0
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	9b05      	ldr	r3, [sp, #20]
 800867c:	4403      	add	r3, r0
 800867e:	4405      	add	r5, r0
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	9b04      	ldr	r3, [sp, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	dd07      	ble.n	8008698 <_dtoa_r+0x818>
 8008688:	ee18 1a10 	vmov	r1, s16
 800868c:	461a      	mov	r2, r3
 800868e:	4620      	mov	r0, r4
 8008690:	f000 ffee 	bl	8009670 <__lshift>
 8008694:	ee08 0a10 	vmov	s16, r0
 8008698:	9b05      	ldr	r3, [sp, #20]
 800869a:	2b00      	cmp	r3, #0
 800869c:	dd05      	ble.n	80086aa <_dtoa_r+0x82a>
 800869e:	4631      	mov	r1, r6
 80086a0:	461a      	mov	r2, r3
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 ffe4 	bl	8009670 <__lshift>
 80086a8:	4606      	mov	r6, r0
 80086aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d06e      	beq.n	800878e <_dtoa_r+0x90e>
 80086b0:	ee18 0a10 	vmov	r0, s16
 80086b4:	4631      	mov	r1, r6
 80086b6:	f001 f84b 	bl	8009750 <__mcmp>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	da67      	bge.n	800878e <_dtoa_r+0x90e>
 80086be:	9b00      	ldr	r3, [sp, #0]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	ee18 1a10 	vmov	r1, s16
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	220a      	movs	r2, #10
 80086ca:	2300      	movs	r3, #0
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 fdd5 	bl	800927c <__multadd>
 80086d2:	9b08      	ldr	r3, [sp, #32]
 80086d4:	ee08 0a10 	vmov	s16, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 81b1 	beq.w	8008a40 <_dtoa_r+0xbc0>
 80086de:	2300      	movs	r3, #0
 80086e0:	4639      	mov	r1, r7
 80086e2:	220a      	movs	r2, #10
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fdc9 	bl	800927c <__multadd>
 80086ea:	9b02      	ldr	r3, [sp, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	4607      	mov	r7, r0
 80086f0:	f300 808e 	bgt.w	8008810 <_dtoa_r+0x990>
 80086f4:	9b06      	ldr	r3, [sp, #24]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	dc51      	bgt.n	800879e <_dtoa_r+0x91e>
 80086fa:	e089      	b.n	8008810 <_dtoa_r+0x990>
 80086fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008702:	e74b      	b.n	800859c <_dtoa_r+0x71c>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	1e5e      	subs	r6, r3, #1
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	42b3      	cmp	r3, r6
 800870c:	bfbf      	itttt	lt
 800870e:	9b07      	ldrlt	r3, [sp, #28]
 8008710:	9607      	strlt	r6, [sp, #28]
 8008712:	1af2      	sublt	r2, r6, r3
 8008714:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008716:	bfb6      	itet	lt
 8008718:	189b      	addlt	r3, r3, r2
 800871a:	1b9e      	subge	r6, r3, r6
 800871c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	bfb8      	it	lt
 8008722:	2600      	movlt	r6, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	bfb7      	itett	lt
 8008728:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800872c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008730:	1a9d      	sublt	r5, r3, r2
 8008732:	2300      	movlt	r3, #0
 8008734:	e734      	b.n	80085a0 <_dtoa_r+0x720>
 8008736:	9e07      	ldr	r6, [sp, #28]
 8008738:	9d04      	ldr	r5, [sp, #16]
 800873a:	9f08      	ldr	r7, [sp, #32]
 800873c:	e73b      	b.n	80085b6 <_dtoa_r+0x736>
 800873e:	9a07      	ldr	r2, [sp, #28]
 8008740:	e767      	b.n	8008612 <_dtoa_r+0x792>
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	2b01      	cmp	r3, #1
 8008746:	dc18      	bgt.n	800877a <_dtoa_r+0x8fa>
 8008748:	f1ba 0f00 	cmp.w	sl, #0
 800874c:	d115      	bne.n	800877a <_dtoa_r+0x8fa>
 800874e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008752:	b993      	cbnz	r3, 800877a <_dtoa_r+0x8fa>
 8008754:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008758:	0d1b      	lsrs	r3, r3, #20
 800875a:	051b      	lsls	r3, r3, #20
 800875c:	b183      	cbz	r3, 8008780 <_dtoa_r+0x900>
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	3301      	adds	r3, #1
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	9b05      	ldr	r3, [sp, #20]
 8008766:	3301      	adds	r3, #1
 8008768:	9305      	str	r3, [sp, #20]
 800876a:	f04f 0801 	mov.w	r8, #1
 800876e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008770:	2b00      	cmp	r3, #0
 8008772:	f47f af6a 	bne.w	800864a <_dtoa_r+0x7ca>
 8008776:	2001      	movs	r0, #1
 8008778:	e76f      	b.n	800865a <_dtoa_r+0x7da>
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	e7f6      	b.n	800876e <_dtoa_r+0x8ee>
 8008780:	4698      	mov	r8, r3
 8008782:	e7f4      	b.n	800876e <_dtoa_r+0x8ee>
 8008784:	f43f af7d 	beq.w	8008682 <_dtoa_r+0x802>
 8008788:	4618      	mov	r0, r3
 800878a:	301c      	adds	r0, #28
 800878c:	e772      	b.n	8008674 <_dtoa_r+0x7f4>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dc37      	bgt.n	8008804 <_dtoa_r+0x984>
 8008794:	9b06      	ldr	r3, [sp, #24]
 8008796:	2b02      	cmp	r3, #2
 8008798:	dd34      	ble.n	8008804 <_dtoa_r+0x984>
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	9302      	str	r3, [sp, #8]
 800879e:	9b02      	ldr	r3, [sp, #8]
 80087a0:	b96b      	cbnz	r3, 80087be <_dtoa_r+0x93e>
 80087a2:	4631      	mov	r1, r6
 80087a4:	2205      	movs	r2, #5
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 fd68 	bl	800927c <__multadd>
 80087ac:	4601      	mov	r1, r0
 80087ae:	4606      	mov	r6, r0
 80087b0:	ee18 0a10 	vmov	r0, s16
 80087b4:	f000 ffcc 	bl	8009750 <__mcmp>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f73f adbb 	bgt.w	8008334 <_dtoa_r+0x4b4>
 80087be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c0:	9d01      	ldr	r5, [sp, #4]
 80087c2:	43db      	mvns	r3, r3
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	f04f 0800 	mov.w	r8, #0
 80087ca:	4631      	mov	r1, r6
 80087cc:	4620      	mov	r0, r4
 80087ce:	f000 fd33 	bl	8009238 <_Bfree>
 80087d2:	2f00      	cmp	r7, #0
 80087d4:	f43f aea4 	beq.w	8008520 <_dtoa_r+0x6a0>
 80087d8:	f1b8 0f00 	cmp.w	r8, #0
 80087dc:	d005      	beq.n	80087ea <_dtoa_r+0x96a>
 80087de:	45b8      	cmp	r8, r7
 80087e0:	d003      	beq.n	80087ea <_dtoa_r+0x96a>
 80087e2:	4641      	mov	r1, r8
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fd27 	bl	8009238 <_Bfree>
 80087ea:	4639      	mov	r1, r7
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 fd23 	bl	8009238 <_Bfree>
 80087f2:	e695      	b.n	8008520 <_dtoa_r+0x6a0>
 80087f4:	2600      	movs	r6, #0
 80087f6:	4637      	mov	r7, r6
 80087f8:	e7e1      	b.n	80087be <_dtoa_r+0x93e>
 80087fa:	9700      	str	r7, [sp, #0]
 80087fc:	4637      	mov	r7, r6
 80087fe:	e599      	b.n	8008334 <_dtoa_r+0x4b4>
 8008800:	40240000 	.word	0x40240000
 8008804:	9b08      	ldr	r3, [sp, #32]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80ca 	beq.w	80089a0 <_dtoa_r+0xb20>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	9302      	str	r3, [sp, #8]
 8008810:	2d00      	cmp	r5, #0
 8008812:	dd05      	ble.n	8008820 <_dtoa_r+0x9a0>
 8008814:	4639      	mov	r1, r7
 8008816:	462a      	mov	r2, r5
 8008818:	4620      	mov	r0, r4
 800881a:	f000 ff29 	bl	8009670 <__lshift>
 800881e:	4607      	mov	r7, r0
 8008820:	f1b8 0f00 	cmp.w	r8, #0
 8008824:	d05b      	beq.n	80088de <_dtoa_r+0xa5e>
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fcc5 	bl	80091b8 <_Balloc>
 800882e:	4605      	mov	r5, r0
 8008830:	b928      	cbnz	r0, 800883e <_dtoa_r+0x9be>
 8008832:	4b87      	ldr	r3, [pc, #540]	; (8008a50 <_dtoa_r+0xbd0>)
 8008834:	4602      	mov	r2, r0
 8008836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800883a:	f7ff bb3b 	b.w	8007eb4 <_dtoa_r+0x34>
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	3202      	adds	r2, #2
 8008842:	0092      	lsls	r2, r2, #2
 8008844:	f107 010c 	add.w	r1, r7, #12
 8008848:	300c      	adds	r0, #12
 800884a:	f000 fca7 	bl	800919c <memcpy>
 800884e:	2201      	movs	r2, #1
 8008850:	4629      	mov	r1, r5
 8008852:	4620      	mov	r0, r4
 8008854:	f000 ff0c 	bl	8009670 <__lshift>
 8008858:	9b01      	ldr	r3, [sp, #4]
 800885a:	f103 0901 	add.w	r9, r3, #1
 800885e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008862:	4413      	add	r3, r2
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	f00a 0301 	and.w	r3, sl, #1
 800886a:	46b8      	mov	r8, r7
 800886c:	9304      	str	r3, [sp, #16]
 800886e:	4607      	mov	r7, r0
 8008870:	4631      	mov	r1, r6
 8008872:	ee18 0a10 	vmov	r0, s16
 8008876:	f7ff fa75 	bl	8007d64 <quorem>
 800887a:	4641      	mov	r1, r8
 800887c:	9002      	str	r0, [sp, #8]
 800887e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008882:	ee18 0a10 	vmov	r0, s16
 8008886:	f000 ff63 	bl	8009750 <__mcmp>
 800888a:	463a      	mov	r2, r7
 800888c:	9003      	str	r0, [sp, #12]
 800888e:	4631      	mov	r1, r6
 8008890:	4620      	mov	r0, r4
 8008892:	f000 ff79 	bl	8009788 <__mdiff>
 8008896:	68c2      	ldr	r2, [r0, #12]
 8008898:	f109 3bff 	add.w	fp, r9, #4294967295
 800889c:	4605      	mov	r5, r0
 800889e:	bb02      	cbnz	r2, 80088e2 <_dtoa_r+0xa62>
 80088a0:	4601      	mov	r1, r0
 80088a2:	ee18 0a10 	vmov	r0, s16
 80088a6:	f000 ff53 	bl	8009750 <__mcmp>
 80088aa:	4602      	mov	r2, r0
 80088ac:	4629      	mov	r1, r5
 80088ae:	4620      	mov	r0, r4
 80088b0:	9207      	str	r2, [sp, #28]
 80088b2:	f000 fcc1 	bl	8009238 <_Bfree>
 80088b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80088ba:	ea43 0102 	orr.w	r1, r3, r2
 80088be:	9b04      	ldr	r3, [sp, #16]
 80088c0:	430b      	orrs	r3, r1
 80088c2:	464d      	mov	r5, r9
 80088c4:	d10f      	bne.n	80088e6 <_dtoa_r+0xa66>
 80088c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088ca:	d02a      	beq.n	8008922 <_dtoa_r+0xaa2>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dd02      	ble.n	80088d8 <_dtoa_r+0xa58>
 80088d2:	9b02      	ldr	r3, [sp, #8]
 80088d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80088d8:	f88b a000 	strb.w	sl, [fp]
 80088dc:	e775      	b.n	80087ca <_dtoa_r+0x94a>
 80088de:	4638      	mov	r0, r7
 80088e0:	e7ba      	b.n	8008858 <_dtoa_r+0x9d8>
 80088e2:	2201      	movs	r2, #1
 80088e4:	e7e2      	b.n	80088ac <_dtoa_r+0xa2c>
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	db04      	blt.n	80088f6 <_dtoa_r+0xa76>
 80088ec:	9906      	ldr	r1, [sp, #24]
 80088ee:	430b      	orrs	r3, r1
 80088f0:	9904      	ldr	r1, [sp, #16]
 80088f2:	430b      	orrs	r3, r1
 80088f4:	d122      	bne.n	800893c <_dtoa_r+0xabc>
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	ddee      	ble.n	80088d8 <_dtoa_r+0xa58>
 80088fa:	ee18 1a10 	vmov	r1, s16
 80088fe:	2201      	movs	r2, #1
 8008900:	4620      	mov	r0, r4
 8008902:	f000 feb5 	bl	8009670 <__lshift>
 8008906:	4631      	mov	r1, r6
 8008908:	ee08 0a10 	vmov	s16, r0
 800890c:	f000 ff20 	bl	8009750 <__mcmp>
 8008910:	2800      	cmp	r0, #0
 8008912:	dc03      	bgt.n	800891c <_dtoa_r+0xa9c>
 8008914:	d1e0      	bne.n	80088d8 <_dtoa_r+0xa58>
 8008916:	f01a 0f01 	tst.w	sl, #1
 800891a:	d0dd      	beq.n	80088d8 <_dtoa_r+0xa58>
 800891c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008920:	d1d7      	bne.n	80088d2 <_dtoa_r+0xa52>
 8008922:	2339      	movs	r3, #57	; 0x39
 8008924:	f88b 3000 	strb.w	r3, [fp]
 8008928:	462b      	mov	r3, r5
 800892a:	461d      	mov	r5, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008932:	2a39      	cmp	r2, #57	; 0x39
 8008934:	d071      	beq.n	8008a1a <_dtoa_r+0xb9a>
 8008936:	3201      	adds	r2, #1
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e746      	b.n	80087ca <_dtoa_r+0x94a>
 800893c:	2a00      	cmp	r2, #0
 800893e:	dd07      	ble.n	8008950 <_dtoa_r+0xad0>
 8008940:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008944:	d0ed      	beq.n	8008922 <_dtoa_r+0xaa2>
 8008946:	f10a 0301 	add.w	r3, sl, #1
 800894a:	f88b 3000 	strb.w	r3, [fp]
 800894e:	e73c      	b.n	80087ca <_dtoa_r+0x94a>
 8008950:	9b05      	ldr	r3, [sp, #20]
 8008952:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008956:	4599      	cmp	r9, r3
 8008958:	d047      	beq.n	80089ea <_dtoa_r+0xb6a>
 800895a:	ee18 1a10 	vmov	r1, s16
 800895e:	2300      	movs	r3, #0
 8008960:	220a      	movs	r2, #10
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fc8a 	bl	800927c <__multadd>
 8008968:	45b8      	cmp	r8, r7
 800896a:	ee08 0a10 	vmov	s16, r0
 800896e:	f04f 0300 	mov.w	r3, #0
 8008972:	f04f 020a 	mov.w	r2, #10
 8008976:	4641      	mov	r1, r8
 8008978:	4620      	mov	r0, r4
 800897a:	d106      	bne.n	800898a <_dtoa_r+0xb0a>
 800897c:	f000 fc7e 	bl	800927c <__multadd>
 8008980:	4680      	mov	r8, r0
 8008982:	4607      	mov	r7, r0
 8008984:	f109 0901 	add.w	r9, r9, #1
 8008988:	e772      	b.n	8008870 <_dtoa_r+0x9f0>
 800898a:	f000 fc77 	bl	800927c <__multadd>
 800898e:	4639      	mov	r1, r7
 8008990:	4680      	mov	r8, r0
 8008992:	2300      	movs	r3, #0
 8008994:	220a      	movs	r2, #10
 8008996:	4620      	mov	r0, r4
 8008998:	f000 fc70 	bl	800927c <__multadd>
 800899c:	4607      	mov	r7, r0
 800899e:	e7f1      	b.n	8008984 <_dtoa_r+0xb04>
 80089a0:	9b03      	ldr	r3, [sp, #12]
 80089a2:	9302      	str	r3, [sp, #8]
 80089a4:	9d01      	ldr	r5, [sp, #4]
 80089a6:	ee18 0a10 	vmov	r0, s16
 80089aa:	4631      	mov	r1, r6
 80089ac:	f7ff f9da 	bl	8007d64 <quorem>
 80089b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	f805 ab01 	strb.w	sl, [r5], #1
 80089ba:	1aea      	subs	r2, r5, r3
 80089bc:	9b02      	ldr	r3, [sp, #8]
 80089be:	4293      	cmp	r3, r2
 80089c0:	dd09      	ble.n	80089d6 <_dtoa_r+0xb56>
 80089c2:	ee18 1a10 	vmov	r1, s16
 80089c6:	2300      	movs	r3, #0
 80089c8:	220a      	movs	r2, #10
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 fc56 	bl	800927c <__multadd>
 80089d0:	ee08 0a10 	vmov	s16, r0
 80089d4:	e7e7      	b.n	80089a6 <_dtoa_r+0xb26>
 80089d6:	9b02      	ldr	r3, [sp, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bfc8      	it	gt
 80089dc:	461d      	movgt	r5, r3
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	bfd8      	it	le
 80089e2:	2501      	movle	r5, #1
 80089e4:	441d      	add	r5, r3
 80089e6:	f04f 0800 	mov.w	r8, #0
 80089ea:	ee18 1a10 	vmov	r1, s16
 80089ee:	2201      	movs	r2, #1
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fe3d 	bl	8009670 <__lshift>
 80089f6:	4631      	mov	r1, r6
 80089f8:	ee08 0a10 	vmov	s16, r0
 80089fc:	f000 fea8 	bl	8009750 <__mcmp>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	dc91      	bgt.n	8008928 <_dtoa_r+0xaa8>
 8008a04:	d102      	bne.n	8008a0c <_dtoa_r+0xb8c>
 8008a06:	f01a 0f01 	tst.w	sl, #1
 8008a0a:	d18d      	bne.n	8008928 <_dtoa_r+0xaa8>
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	461d      	mov	r5, r3
 8008a10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a14:	2a30      	cmp	r2, #48	; 0x30
 8008a16:	d0fa      	beq.n	8008a0e <_dtoa_r+0xb8e>
 8008a18:	e6d7      	b.n	80087ca <_dtoa_r+0x94a>
 8008a1a:	9a01      	ldr	r2, [sp, #4]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d184      	bne.n	800892a <_dtoa_r+0xaaa>
 8008a20:	9b00      	ldr	r3, [sp, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	2331      	movs	r3, #49	; 0x31
 8008a28:	7013      	strb	r3, [r2, #0]
 8008a2a:	e6ce      	b.n	80087ca <_dtoa_r+0x94a>
 8008a2c:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <_dtoa_r+0xbd4>)
 8008a2e:	f7ff ba95 	b.w	8007f5c <_dtoa_r+0xdc>
 8008a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f47f aa6e 	bne.w	8007f16 <_dtoa_r+0x96>
 8008a3a:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <_dtoa_r+0xbd8>)
 8008a3c:	f7ff ba8e 	b.w	8007f5c <_dtoa_r+0xdc>
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	dcae      	bgt.n	80089a4 <_dtoa_r+0xb24>
 8008a46:	9b06      	ldr	r3, [sp, #24]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	f73f aea8 	bgt.w	800879e <_dtoa_r+0x91e>
 8008a4e:	e7a9      	b.n	80089a4 <_dtoa_r+0xb24>
 8008a50:	0800cdd0 	.word	0x0800cdd0
 8008a54:	0800cfc9 	.word	0x0800cfc9
 8008a58:	0800cd51 	.word	0x0800cd51

08008a5c <rshift>:
 8008a5c:	6903      	ldr	r3, [r0, #16]
 8008a5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a6a:	f100 0414 	add.w	r4, r0, #20
 8008a6e:	dd45      	ble.n	8008afc <rshift+0xa0>
 8008a70:	f011 011f 	ands.w	r1, r1, #31
 8008a74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a7c:	d10c      	bne.n	8008a98 <rshift+0x3c>
 8008a7e:	f100 0710 	add.w	r7, r0, #16
 8008a82:	4629      	mov	r1, r5
 8008a84:	42b1      	cmp	r1, r6
 8008a86:	d334      	bcc.n	8008af2 <rshift+0x96>
 8008a88:	1a9b      	subs	r3, r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	1eea      	subs	r2, r5, #3
 8008a8e:	4296      	cmp	r6, r2
 8008a90:	bf38      	it	cc
 8008a92:	2300      	movcc	r3, #0
 8008a94:	4423      	add	r3, r4
 8008a96:	e015      	b.n	8008ac4 <rshift+0x68>
 8008a98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a9c:	f1c1 0820 	rsb	r8, r1, #32
 8008aa0:	40cf      	lsrs	r7, r1
 8008aa2:	f105 0e04 	add.w	lr, r5, #4
 8008aa6:	46a1      	mov	r9, r4
 8008aa8:	4576      	cmp	r6, lr
 8008aaa:	46f4      	mov	ip, lr
 8008aac:	d815      	bhi.n	8008ada <rshift+0x7e>
 8008aae:	1a9a      	subs	r2, r3, r2
 8008ab0:	0092      	lsls	r2, r2, #2
 8008ab2:	3a04      	subs	r2, #4
 8008ab4:	3501      	adds	r5, #1
 8008ab6:	42ae      	cmp	r6, r5
 8008ab8:	bf38      	it	cc
 8008aba:	2200      	movcc	r2, #0
 8008abc:	18a3      	adds	r3, r4, r2
 8008abe:	50a7      	str	r7, [r4, r2]
 8008ac0:	b107      	cbz	r7, 8008ac4 <rshift+0x68>
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	1b1a      	subs	r2, r3, r4
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008acc:	bf08      	it	eq
 8008ace:	2300      	moveq	r3, #0
 8008ad0:	6102      	str	r2, [r0, #16]
 8008ad2:	bf08      	it	eq
 8008ad4:	6143      	streq	r3, [r0, #20]
 8008ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ada:	f8dc c000 	ldr.w	ip, [ip]
 8008ade:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ae2:	ea4c 0707 	orr.w	r7, ip, r7
 8008ae6:	f849 7b04 	str.w	r7, [r9], #4
 8008aea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008aee:	40cf      	lsrs	r7, r1
 8008af0:	e7da      	b.n	8008aa8 <rshift+0x4c>
 8008af2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008af6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008afa:	e7c3      	b.n	8008a84 <rshift+0x28>
 8008afc:	4623      	mov	r3, r4
 8008afe:	e7e1      	b.n	8008ac4 <rshift+0x68>

08008b00 <__hexdig_fun>:
 8008b00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	d802      	bhi.n	8008b0e <__hexdig_fun+0xe>
 8008b08:	3820      	subs	r0, #32
 8008b0a:	b2c0      	uxtb	r0, r0
 8008b0c:	4770      	bx	lr
 8008b0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b12:	2b05      	cmp	r3, #5
 8008b14:	d801      	bhi.n	8008b1a <__hexdig_fun+0x1a>
 8008b16:	3847      	subs	r0, #71	; 0x47
 8008b18:	e7f7      	b.n	8008b0a <__hexdig_fun+0xa>
 8008b1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b1e:	2b05      	cmp	r3, #5
 8008b20:	d801      	bhi.n	8008b26 <__hexdig_fun+0x26>
 8008b22:	3827      	subs	r0, #39	; 0x27
 8008b24:	e7f1      	b.n	8008b0a <__hexdig_fun+0xa>
 8008b26:	2000      	movs	r0, #0
 8008b28:	4770      	bx	lr
	...

08008b2c <__gethex>:
 8008b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b30:	ed2d 8b02 	vpush	{d8}
 8008b34:	b089      	sub	sp, #36	; 0x24
 8008b36:	ee08 0a10 	vmov	s16, r0
 8008b3a:	9304      	str	r3, [sp, #16]
 8008b3c:	4bb4      	ldr	r3, [pc, #720]	; (8008e10 <__gethex+0x2e4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	4618      	mov	r0, r3
 8008b44:	468b      	mov	fp, r1
 8008b46:	4690      	mov	r8, r2
 8008b48:	f7f7 fb54 	bl	80001f4 <strlen>
 8008b4c:	9b01      	ldr	r3, [sp, #4]
 8008b4e:	f8db 2000 	ldr.w	r2, [fp]
 8008b52:	4403      	add	r3, r0
 8008b54:	4682      	mov	sl, r0
 8008b56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008b5a:	9305      	str	r3, [sp, #20]
 8008b5c:	1c93      	adds	r3, r2, #2
 8008b5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008b62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008b66:	32fe      	adds	r2, #254	; 0xfe
 8008b68:	18d1      	adds	r1, r2, r3
 8008b6a:	461f      	mov	r7, r3
 8008b6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b70:	9100      	str	r1, [sp, #0]
 8008b72:	2830      	cmp	r0, #48	; 0x30
 8008b74:	d0f8      	beq.n	8008b68 <__gethex+0x3c>
 8008b76:	f7ff ffc3 	bl	8008b00 <__hexdig_fun>
 8008b7a:	4604      	mov	r4, r0
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d13a      	bne.n	8008bf6 <__gethex+0xca>
 8008b80:	9901      	ldr	r1, [sp, #4]
 8008b82:	4652      	mov	r2, sl
 8008b84:	4638      	mov	r0, r7
 8008b86:	f001 fdb3 	bl	800a6f0 <strncmp>
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d168      	bne.n	8008c62 <__gethex+0x136>
 8008b90:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008b94:	eb07 060a 	add.w	r6, r7, sl
 8008b98:	f7ff ffb2 	bl	8008b00 <__hexdig_fun>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d062      	beq.n	8008c66 <__gethex+0x13a>
 8008ba0:	4633      	mov	r3, r6
 8008ba2:	7818      	ldrb	r0, [r3, #0]
 8008ba4:	2830      	cmp	r0, #48	; 0x30
 8008ba6:	461f      	mov	r7, r3
 8008ba8:	f103 0301 	add.w	r3, r3, #1
 8008bac:	d0f9      	beq.n	8008ba2 <__gethex+0x76>
 8008bae:	f7ff ffa7 	bl	8008b00 <__hexdig_fun>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	fab0 f480 	clz	r4, r0
 8008bb8:	0964      	lsrs	r4, r4, #5
 8008bba:	4635      	mov	r5, r6
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	463a      	mov	r2, r7
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	7830      	ldrb	r0, [r6, #0]
 8008bc6:	f7ff ff9b 	bl	8008b00 <__hexdig_fun>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d1f8      	bne.n	8008bc0 <__gethex+0x94>
 8008bce:	9901      	ldr	r1, [sp, #4]
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f001 fd8c 	bl	800a6f0 <strncmp>
 8008bd8:	b980      	cbnz	r0, 8008bfc <__gethex+0xd0>
 8008bda:	b94d      	cbnz	r5, 8008bf0 <__gethex+0xc4>
 8008bdc:	eb06 050a 	add.w	r5, r6, sl
 8008be0:	462a      	mov	r2, r5
 8008be2:	4616      	mov	r6, r2
 8008be4:	3201      	adds	r2, #1
 8008be6:	7830      	ldrb	r0, [r6, #0]
 8008be8:	f7ff ff8a 	bl	8008b00 <__hexdig_fun>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	d1f8      	bne.n	8008be2 <__gethex+0xb6>
 8008bf0:	1bad      	subs	r5, r5, r6
 8008bf2:	00ad      	lsls	r5, r5, #2
 8008bf4:	e004      	b.n	8008c00 <__gethex+0xd4>
 8008bf6:	2400      	movs	r4, #0
 8008bf8:	4625      	mov	r5, r4
 8008bfa:	e7e0      	b.n	8008bbe <__gethex+0x92>
 8008bfc:	2d00      	cmp	r5, #0
 8008bfe:	d1f7      	bne.n	8008bf0 <__gethex+0xc4>
 8008c00:	7833      	ldrb	r3, [r6, #0]
 8008c02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c06:	2b50      	cmp	r3, #80	; 0x50
 8008c08:	d13b      	bne.n	8008c82 <__gethex+0x156>
 8008c0a:	7873      	ldrb	r3, [r6, #1]
 8008c0c:	2b2b      	cmp	r3, #43	; 0x2b
 8008c0e:	d02c      	beq.n	8008c6a <__gethex+0x13e>
 8008c10:	2b2d      	cmp	r3, #45	; 0x2d
 8008c12:	d02e      	beq.n	8008c72 <__gethex+0x146>
 8008c14:	1c71      	adds	r1, r6, #1
 8008c16:	f04f 0900 	mov.w	r9, #0
 8008c1a:	7808      	ldrb	r0, [r1, #0]
 8008c1c:	f7ff ff70 	bl	8008b00 <__hexdig_fun>
 8008c20:	1e43      	subs	r3, r0, #1
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	2b18      	cmp	r3, #24
 8008c26:	d82c      	bhi.n	8008c82 <__gethex+0x156>
 8008c28:	f1a0 0210 	sub.w	r2, r0, #16
 8008c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c30:	f7ff ff66 	bl	8008b00 <__hexdig_fun>
 8008c34:	1e43      	subs	r3, r0, #1
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b18      	cmp	r3, #24
 8008c3a:	d91d      	bls.n	8008c78 <__gethex+0x14c>
 8008c3c:	f1b9 0f00 	cmp.w	r9, #0
 8008c40:	d000      	beq.n	8008c44 <__gethex+0x118>
 8008c42:	4252      	negs	r2, r2
 8008c44:	4415      	add	r5, r2
 8008c46:	f8cb 1000 	str.w	r1, [fp]
 8008c4a:	b1e4      	cbz	r4, 8008c86 <__gethex+0x15a>
 8008c4c:	9b00      	ldr	r3, [sp, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bf14      	ite	ne
 8008c52:	2700      	movne	r7, #0
 8008c54:	2706      	moveq	r7, #6
 8008c56:	4638      	mov	r0, r7
 8008c58:	b009      	add	sp, #36	; 0x24
 8008c5a:	ecbd 8b02 	vpop	{d8}
 8008c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c62:	463e      	mov	r6, r7
 8008c64:	4625      	mov	r5, r4
 8008c66:	2401      	movs	r4, #1
 8008c68:	e7ca      	b.n	8008c00 <__gethex+0xd4>
 8008c6a:	f04f 0900 	mov.w	r9, #0
 8008c6e:	1cb1      	adds	r1, r6, #2
 8008c70:	e7d3      	b.n	8008c1a <__gethex+0xee>
 8008c72:	f04f 0901 	mov.w	r9, #1
 8008c76:	e7fa      	b.n	8008c6e <__gethex+0x142>
 8008c78:	230a      	movs	r3, #10
 8008c7a:	fb03 0202 	mla	r2, r3, r2, r0
 8008c7e:	3a10      	subs	r2, #16
 8008c80:	e7d4      	b.n	8008c2c <__gethex+0x100>
 8008c82:	4631      	mov	r1, r6
 8008c84:	e7df      	b.n	8008c46 <__gethex+0x11a>
 8008c86:	1bf3      	subs	r3, r6, r7
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	2b07      	cmp	r3, #7
 8008c8e:	dc0b      	bgt.n	8008ca8 <__gethex+0x17c>
 8008c90:	ee18 0a10 	vmov	r0, s16
 8008c94:	f000 fa90 	bl	80091b8 <_Balloc>
 8008c98:	4604      	mov	r4, r0
 8008c9a:	b940      	cbnz	r0, 8008cae <__gethex+0x182>
 8008c9c:	4b5d      	ldr	r3, [pc, #372]	; (8008e14 <__gethex+0x2e8>)
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	21de      	movs	r1, #222	; 0xde
 8008ca2:	485d      	ldr	r0, [pc, #372]	; (8008e18 <__gethex+0x2ec>)
 8008ca4:	f001 fdf4 	bl	800a890 <__assert_func>
 8008ca8:	3101      	adds	r1, #1
 8008caa:	105b      	asrs	r3, r3, #1
 8008cac:	e7ee      	b.n	8008c8c <__gethex+0x160>
 8008cae:	f100 0914 	add.w	r9, r0, #20
 8008cb2:	f04f 0b00 	mov.w	fp, #0
 8008cb6:	f1ca 0301 	rsb	r3, sl, #1
 8008cba:	f8cd 9008 	str.w	r9, [sp, #8]
 8008cbe:	f8cd b000 	str.w	fp, [sp]
 8008cc2:	9306      	str	r3, [sp, #24]
 8008cc4:	42b7      	cmp	r7, r6
 8008cc6:	d340      	bcc.n	8008d4a <__gethex+0x21e>
 8008cc8:	9802      	ldr	r0, [sp, #8]
 8008cca:	9b00      	ldr	r3, [sp, #0]
 8008ccc:	f840 3b04 	str.w	r3, [r0], #4
 8008cd0:	eba0 0009 	sub.w	r0, r0, r9
 8008cd4:	1080      	asrs	r0, r0, #2
 8008cd6:	0146      	lsls	r6, r0, #5
 8008cd8:	6120      	str	r0, [r4, #16]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fb5e 	bl	800939c <__hi0bits>
 8008ce0:	1a30      	subs	r0, r6, r0
 8008ce2:	f8d8 6000 	ldr.w	r6, [r8]
 8008ce6:	42b0      	cmp	r0, r6
 8008ce8:	dd63      	ble.n	8008db2 <__gethex+0x286>
 8008cea:	1b87      	subs	r7, r0, r6
 8008cec:	4639      	mov	r1, r7
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f000 ff02 	bl	8009af8 <__any_on>
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	b1a8      	cbz	r0, 8008d24 <__gethex+0x1f8>
 8008cf8:	1e7b      	subs	r3, r7, #1
 8008cfa:	1159      	asrs	r1, r3, #5
 8008cfc:	f003 021f 	and.w	r2, r3, #31
 8008d00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d04:	f04f 0a01 	mov.w	sl, #1
 8008d08:	fa0a f202 	lsl.w	r2, sl, r2
 8008d0c:	420a      	tst	r2, r1
 8008d0e:	d009      	beq.n	8008d24 <__gethex+0x1f8>
 8008d10:	4553      	cmp	r3, sl
 8008d12:	dd05      	ble.n	8008d20 <__gethex+0x1f4>
 8008d14:	1eb9      	subs	r1, r7, #2
 8008d16:	4620      	mov	r0, r4
 8008d18:	f000 feee 	bl	8009af8 <__any_on>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	d145      	bne.n	8008dac <__gethex+0x280>
 8008d20:	f04f 0a02 	mov.w	sl, #2
 8008d24:	4639      	mov	r1, r7
 8008d26:	4620      	mov	r0, r4
 8008d28:	f7ff fe98 	bl	8008a5c <rshift>
 8008d2c:	443d      	add	r5, r7
 8008d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d32:	42ab      	cmp	r3, r5
 8008d34:	da4c      	bge.n	8008dd0 <__gethex+0x2a4>
 8008d36:	ee18 0a10 	vmov	r0, s16
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	f000 fa7c 	bl	8009238 <_Bfree>
 8008d40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d42:	2300      	movs	r3, #0
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	27a3      	movs	r7, #163	; 0xa3
 8008d48:	e785      	b.n	8008c56 <__gethex+0x12a>
 8008d4a:	1e73      	subs	r3, r6, #1
 8008d4c:	9a05      	ldr	r2, [sp, #20]
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d019      	beq.n	8008d8c <__gethex+0x260>
 8008d58:	f1bb 0f20 	cmp.w	fp, #32
 8008d5c:	d107      	bne.n	8008d6e <__gethex+0x242>
 8008d5e:	9b02      	ldr	r3, [sp, #8]
 8008d60:	9a00      	ldr	r2, [sp, #0]
 8008d62:	f843 2b04 	str.w	r2, [r3], #4
 8008d66:	9302      	str	r3, [sp, #8]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	469b      	mov	fp, r3
 8008d6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008d72:	f7ff fec5 	bl	8008b00 <__hexdig_fun>
 8008d76:	9b00      	ldr	r3, [sp, #0]
 8008d78:	f000 000f 	and.w	r0, r0, #15
 8008d7c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008d80:	4303      	orrs	r3, r0
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	f10b 0b04 	add.w	fp, fp, #4
 8008d88:	9b03      	ldr	r3, [sp, #12]
 8008d8a:	e00d      	b.n	8008da8 <__gethex+0x27c>
 8008d8c:	9b03      	ldr	r3, [sp, #12]
 8008d8e:	9a06      	ldr	r2, [sp, #24]
 8008d90:	4413      	add	r3, r2
 8008d92:	42bb      	cmp	r3, r7
 8008d94:	d3e0      	bcc.n	8008d58 <__gethex+0x22c>
 8008d96:	4618      	mov	r0, r3
 8008d98:	9901      	ldr	r1, [sp, #4]
 8008d9a:	9307      	str	r3, [sp, #28]
 8008d9c:	4652      	mov	r2, sl
 8008d9e:	f001 fca7 	bl	800a6f0 <strncmp>
 8008da2:	9b07      	ldr	r3, [sp, #28]
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d1d7      	bne.n	8008d58 <__gethex+0x22c>
 8008da8:	461e      	mov	r6, r3
 8008daa:	e78b      	b.n	8008cc4 <__gethex+0x198>
 8008dac:	f04f 0a03 	mov.w	sl, #3
 8008db0:	e7b8      	b.n	8008d24 <__gethex+0x1f8>
 8008db2:	da0a      	bge.n	8008dca <__gethex+0x29e>
 8008db4:	1a37      	subs	r7, r6, r0
 8008db6:	4621      	mov	r1, r4
 8008db8:	ee18 0a10 	vmov	r0, s16
 8008dbc:	463a      	mov	r2, r7
 8008dbe:	f000 fc57 	bl	8009670 <__lshift>
 8008dc2:	1bed      	subs	r5, r5, r7
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	f100 0914 	add.w	r9, r0, #20
 8008dca:	f04f 0a00 	mov.w	sl, #0
 8008dce:	e7ae      	b.n	8008d2e <__gethex+0x202>
 8008dd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008dd4:	42a8      	cmp	r0, r5
 8008dd6:	dd72      	ble.n	8008ebe <__gethex+0x392>
 8008dd8:	1b45      	subs	r5, r0, r5
 8008dda:	42ae      	cmp	r6, r5
 8008ddc:	dc36      	bgt.n	8008e4c <__gethex+0x320>
 8008dde:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d02a      	beq.n	8008e3c <__gethex+0x310>
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d02c      	beq.n	8008e44 <__gethex+0x318>
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d11c      	bne.n	8008e28 <__gethex+0x2fc>
 8008dee:	42ae      	cmp	r6, r5
 8008df0:	d11a      	bne.n	8008e28 <__gethex+0x2fc>
 8008df2:	2e01      	cmp	r6, #1
 8008df4:	d112      	bne.n	8008e1c <__gethex+0x2f0>
 8008df6:	9a04      	ldr	r2, [sp, #16]
 8008df8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	6123      	str	r3, [r4, #16]
 8008e02:	f8c9 3000 	str.w	r3, [r9]
 8008e06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e08:	2762      	movs	r7, #98	; 0x62
 8008e0a:	601c      	str	r4, [r3, #0]
 8008e0c:	e723      	b.n	8008c56 <__gethex+0x12a>
 8008e0e:	bf00      	nop
 8008e10:	0800ce48 	.word	0x0800ce48
 8008e14:	0800cdd0 	.word	0x0800cdd0
 8008e18:	0800cde1 	.word	0x0800cde1
 8008e1c:	1e71      	subs	r1, r6, #1
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 fe6a 	bl	8009af8 <__any_on>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d1e6      	bne.n	8008df6 <__gethex+0x2ca>
 8008e28:	ee18 0a10 	vmov	r0, s16
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	f000 fa03 	bl	8009238 <_Bfree>
 8008e32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e34:	2300      	movs	r3, #0
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	2750      	movs	r7, #80	; 0x50
 8008e3a:	e70c      	b.n	8008c56 <__gethex+0x12a>
 8008e3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1f2      	bne.n	8008e28 <__gethex+0x2fc>
 8008e42:	e7d8      	b.n	8008df6 <__gethex+0x2ca>
 8008e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1d5      	bne.n	8008df6 <__gethex+0x2ca>
 8008e4a:	e7ed      	b.n	8008e28 <__gethex+0x2fc>
 8008e4c:	1e6f      	subs	r7, r5, #1
 8008e4e:	f1ba 0f00 	cmp.w	sl, #0
 8008e52:	d131      	bne.n	8008eb8 <__gethex+0x38c>
 8008e54:	b127      	cbz	r7, 8008e60 <__gethex+0x334>
 8008e56:	4639      	mov	r1, r7
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f000 fe4d 	bl	8009af8 <__any_on>
 8008e5e:	4682      	mov	sl, r0
 8008e60:	117b      	asrs	r3, r7, #5
 8008e62:	2101      	movs	r1, #1
 8008e64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008e68:	f007 071f 	and.w	r7, r7, #31
 8008e6c:	fa01 f707 	lsl.w	r7, r1, r7
 8008e70:	421f      	tst	r7, r3
 8008e72:	4629      	mov	r1, r5
 8008e74:	4620      	mov	r0, r4
 8008e76:	bf18      	it	ne
 8008e78:	f04a 0a02 	orrne.w	sl, sl, #2
 8008e7c:	1b76      	subs	r6, r6, r5
 8008e7e:	f7ff fded 	bl	8008a5c <rshift>
 8008e82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008e86:	2702      	movs	r7, #2
 8008e88:	f1ba 0f00 	cmp.w	sl, #0
 8008e8c:	d048      	beq.n	8008f20 <__gethex+0x3f4>
 8008e8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d015      	beq.n	8008ec2 <__gethex+0x396>
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d017      	beq.n	8008eca <__gethex+0x39e>
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d109      	bne.n	8008eb2 <__gethex+0x386>
 8008e9e:	f01a 0f02 	tst.w	sl, #2
 8008ea2:	d006      	beq.n	8008eb2 <__gethex+0x386>
 8008ea4:	f8d9 0000 	ldr.w	r0, [r9]
 8008ea8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008eac:	f01a 0f01 	tst.w	sl, #1
 8008eb0:	d10e      	bne.n	8008ed0 <__gethex+0x3a4>
 8008eb2:	f047 0710 	orr.w	r7, r7, #16
 8008eb6:	e033      	b.n	8008f20 <__gethex+0x3f4>
 8008eb8:	f04f 0a01 	mov.w	sl, #1
 8008ebc:	e7d0      	b.n	8008e60 <__gethex+0x334>
 8008ebe:	2701      	movs	r7, #1
 8008ec0:	e7e2      	b.n	8008e88 <__gethex+0x35c>
 8008ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ec4:	f1c3 0301 	rsb	r3, r3, #1
 8008ec8:	9315      	str	r3, [sp, #84]	; 0x54
 8008eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0f0      	beq.n	8008eb2 <__gethex+0x386>
 8008ed0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ed4:	f104 0314 	add.w	r3, r4, #20
 8008ed8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008edc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ee0:	f04f 0c00 	mov.w	ip, #0
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eea:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008eee:	d01c      	beq.n	8008f2a <__gethex+0x3fe>
 8008ef0:	3201      	adds	r2, #1
 8008ef2:	6002      	str	r2, [r0, #0]
 8008ef4:	2f02      	cmp	r7, #2
 8008ef6:	f104 0314 	add.w	r3, r4, #20
 8008efa:	d13f      	bne.n	8008f7c <__gethex+0x450>
 8008efc:	f8d8 2000 	ldr.w	r2, [r8]
 8008f00:	3a01      	subs	r2, #1
 8008f02:	42b2      	cmp	r2, r6
 8008f04:	d10a      	bne.n	8008f1c <__gethex+0x3f0>
 8008f06:	1171      	asrs	r1, r6, #5
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f0e:	f006 061f 	and.w	r6, r6, #31
 8008f12:	fa02 f606 	lsl.w	r6, r2, r6
 8008f16:	421e      	tst	r6, r3
 8008f18:	bf18      	it	ne
 8008f1a:	4617      	movne	r7, r2
 8008f1c:	f047 0720 	orr.w	r7, r7, #32
 8008f20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f22:	601c      	str	r4, [r3, #0]
 8008f24:	9b04      	ldr	r3, [sp, #16]
 8008f26:	601d      	str	r5, [r3, #0]
 8008f28:	e695      	b.n	8008c56 <__gethex+0x12a>
 8008f2a:	4299      	cmp	r1, r3
 8008f2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f30:	d8d8      	bhi.n	8008ee4 <__gethex+0x3b8>
 8008f32:	68a3      	ldr	r3, [r4, #8]
 8008f34:	459b      	cmp	fp, r3
 8008f36:	db19      	blt.n	8008f6c <__gethex+0x440>
 8008f38:	6861      	ldr	r1, [r4, #4]
 8008f3a:	ee18 0a10 	vmov	r0, s16
 8008f3e:	3101      	adds	r1, #1
 8008f40:	f000 f93a 	bl	80091b8 <_Balloc>
 8008f44:	4681      	mov	r9, r0
 8008f46:	b918      	cbnz	r0, 8008f50 <__gethex+0x424>
 8008f48:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <__gethex+0x488>)
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	2184      	movs	r1, #132	; 0x84
 8008f4e:	e6a8      	b.n	8008ca2 <__gethex+0x176>
 8008f50:	6922      	ldr	r2, [r4, #16]
 8008f52:	3202      	adds	r2, #2
 8008f54:	f104 010c 	add.w	r1, r4, #12
 8008f58:	0092      	lsls	r2, r2, #2
 8008f5a:	300c      	adds	r0, #12
 8008f5c:	f000 f91e 	bl	800919c <memcpy>
 8008f60:	4621      	mov	r1, r4
 8008f62:	ee18 0a10 	vmov	r0, s16
 8008f66:	f000 f967 	bl	8009238 <_Bfree>
 8008f6a:	464c      	mov	r4, r9
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f74:	6122      	str	r2, [r4, #16]
 8008f76:	2201      	movs	r2, #1
 8008f78:	615a      	str	r2, [r3, #20]
 8008f7a:	e7bb      	b.n	8008ef4 <__gethex+0x3c8>
 8008f7c:	6922      	ldr	r2, [r4, #16]
 8008f7e:	455a      	cmp	r2, fp
 8008f80:	dd0b      	ble.n	8008f9a <__gethex+0x46e>
 8008f82:	2101      	movs	r1, #1
 8008f84:	4620      	mov	r0, r4
 8008f86:	f7ff fd69 	bl	8008a5c <rshift>
 8008f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f8e:	3501      	adds	r5, #1
 8008f90:	42ab      	cmp	r3, r5
 8008f92:	f6ff aed0 	blt.w	8008d36 <__gethex+0x20a>
 8008f96:	2701      	movs	r7, #1
 8008f98:	e7c0      	b.n	8008f1c <__gethex+0x3f0>
 8008f9a:	f016 061f 	ands.w	r6, r6, #31
 8008f9e:	d0fa      	beq.n	8008f96 <__gethex+0x46a>
 8008fa0:	4453      	add	r3, sl
 8008fa2:	f1c6 0620 	rsb	r6, r6, #32
 8008fa6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008faa:	f000 f9f7 	bl	800939c <__hi0bits>
 8008fae:	42b0      	cmp	r0, r6
 8008fb0:	dbe7      	blt.n	8008f82 <__gethex+0x456>
 8008fb2:	e7f0      	b.n	8008f96 <__gethex+0x46a>
 8008fb4:	0800cdd0 	.word	0x0800cdd0

08008fb8 <L_shift>:
 8008fb8:	f1c2 0208 	rsb	r2, r2, #8
 8008fbc:	0092      	lsls	r2, r2, #2
 8008fbe:	b570      	push	{r4, r5, r6, lr}
 8008fc0:	f1c2 0620 	rsb	r6, r2, #32
 8008fc4:	6843      	ldr	r3, [r0, #4]
 8008fc6:	6804      	ldr	r4, [r0, #0]
 8008fc8:	fa03 f506 	lsl.w	r5, r3, r6
 8008fcc:	432c      	orrs	r4, r5
 8008fce:	40d3      	lsrs	r3, r2
 8008fd0:	6004      	str	r4, [r0, #0]
 8008fd2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fd6:	4288      	cmp	r0, r1
 8008fd8:	d3f4      	bcc.n	8008fc4 <L_shift+0xc>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}

08008fdc <__match>:
 8008fdc:	b530      	push	{r4, r5, lr}
 8008fde:	6803      	ldr	r3, [r0, #0]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fe6:	b914      	cbnz	r4, 8008fee <__match+0x12>
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	2001      	movs	r0, #1
 8008fec:	bd30      	pop	{r4, r5, pc}
 8008fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008ff6:	2d19      	cmp	r5, #25
 8008ff8:	bf98      	it	ls
 8008ffa:	3220      	addls	r2, #32
 8008ffc:	42a2      	cmp	r2, r4
 8008ffe:	d0f0      	beq.n	8008fe2 <__match+0x6>
 8009000:	2000      	movs	r0, #0
 8009002:	e7f3      	b.n	8008fec <__match+0x10>

08009004 <__hexnan>:
 8009004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009008:	680b      	ldr	r3, [r1, #0]
 800900a:	115e      	asrs	r6, r3, #5
 800900c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009010:	f013 031f 	ands.w	r3, r3, #31
 8009014:	b087      	sub	sp, #28
 8009016:	bf18      	it	ne
 8009018:	3604      	addne	r6, #4
 800901a:	2500      	movs	r5, #0
 800901c:	1f37      	subs	r7, r6, #4
 800901e:	4690      	mov	r8, r2
 8009020:	6802      	ldr	r2, [r0, #0]
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	4682      	mov	sl, r0
 8009026:	f846 5c04 	str.w	r5, [r6, #-4]
 800902a:	46b9      	mov	r9, r7
 800902c:	463c      	mov	r4, r7
 800902e:	9502      	str	r5, [sp, #8]
 8009030:	46ab      	mov	fp, r5
 8009032:	7851      	ldrb	r1, [r2, #1]
 8009034:	1c53      	adds	r3, r2, #1
 8009036:	9303      	str	r3, [sp, #12]
 8009038:	b341      	cbz	r1, 800908c <__hexnan+0x88>
 800903a:	4608      	mov	r0, r1
 800903c:	9205      	str	r2, [sp, #20]
 800903e:	9104      	str	r1, [sp, #16]
 8009040:	f7ff fd5e 	bl	8008b00 <__hexdig_fun>
 8009044:	2800      	cmp	r0, #0
 8009046:	d14f      	bne.n	80090e8 <__hexnan+0xe4>
 8009048:	9904      	ldr	r1, [sp, #16]
 800904a:	9a05      	ldr	r2, [sp, #20]
 800904c:	2920      	cmp	r1, #32
 800904e:	d818      	bhi.n	8009082 <__hexnan+0x7e>
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	459b      	cmp	fp, r3
 8009054:	dd13      	ble.n	800907e <__hexnan+0x7a>
 8009056:	454c      	cmp	r4, r9
 8009058:	d206      	bcs.n	8009068 <__hexnan+0x64>
 800905a:	2d07      	cmp	r5, #7
 800905c:	dc04      	bgt.n	8009068 <__hexnan+0x64>
 800905e:	462a      	mov	r2, r5
 8009060:	4649      	mov	r1, r9
 8009062:	4620      	mov	r0, r4
 8009064:	f7ff ffa8 	bl	8008fb8 <L_shift>
 8009068:	4544      	cmp	r4, r8
 800906a:	d950      	bls.n	800910e <__hexnan+0x10a>
 800906c:	2300      	movs	r3, #0
 800906e:	f1a4 0904 	sub.w	r9, r4, #4
 8009072:	f844 3c04 	str.w	r3, [r4, #-4]
 8009076:	f8cd b008 	str.w	fp, [sp, #8]
 800907a:	464c      	mov	r4, r9
 800907c:	461d      	mov	r5, r3
 800907e:	9a03      	ldr	r2, [sp, #12]
 8009080:	e7d7      	b.n	8009032 <__hexnan+0x2e>
 8009082:	2929      	cmp	r1, #41	; 0x29
 8009084:	d156      	bne.n	8009134 <__hexnan+0x130>
 8009086:	3202      	adds	r2, #2
 8009088:	f8ca 2000 	str.w	r2, [sl]
 800908c:	f1bb 0f00 	cmp.w	fp, #0
 8009090:	d050      	beq.n	8009134 <__hexnan+0x130>
 8009092:	454c      	cmp	r4, r9
 8009094:	d206      	bcs.n	80090a4 <__hexnan+0xa0>
 8009096:	2d07      	cmp	r5, #7
 8009098:	dc04      	bgt.n	80090a4 <__hexnan+0xa0>
 800909a:	462a      	mov	r2, r5
 800909c:	4649      	mov	r1, r9
 800909e:	4620      	mov	r0, r4
 80090a0:	f7ff ff8a 	bl	8008fb8 <L_shift>
 80090a4:	4544      	cmp	r4, r8
 80090a6:	d934      	bls.n	8009112 <__hexnan+0x10e>
 80090a8:	f1a8 0204 	sub.w	r2, r8, #4
 80090ac:	4623      	mov	r3, r4
 80090ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80090b2:	f842 1f04 	str.w	r1, [r2, #4]!
 80090b6:	429f      	cmp	r7, r3
 80090b8:	d2f9      	bcs.n	80090ae <__hexnan+0xaa>
 80090ba:	1b3b      	subs	r3, r7, r4
 80090bc:	f023 0303 	bic.w	r3, r3, #3
 80090c0:	3304      	adds	r3, #4
 80090c2:	3401      	adds	r4, #1
 80090c4:	3e03      	subs	r6, #3
 80090c6:	42b4      	cmp	r4, r6
 80090c8:	bf88      	it	hi
 80090ca:	2304      	movhi	r3, #4
 80090cc:	4443      	add	r3, r8
 80090ce:	2200      	movs	r2, #0
 80090d0:	f843 2b04 	str.w	r2, [r3], #4
 80090d4:	429f      	cmp	r7, r3
 80090d6:	d2fb      	bcs.n	80090d0 <__hexnan+0xcc>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	b91b      	cbnz	r3, 80090e4 <__hexnan+0xe0>
 80090dc:	4547      	cmp	r7, r8
 80090de:	d127      	bne.n	8009130 <__hexnan+0x12c>
 80090e0:	2301      	movs	r3, #1
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	2005      	movs	r0, #5
 80090e6:	e026      	b.n	8009136 <__hexnan+0x132>
 80090e8:	3501      	adds	r5, #1
 80090ea:	2d08      	cmp	r5, #8
 80090ec:	f10b 0b01 	add.w	fp, fp, #1
 80090f0:	dd06      	ble.n	8009100 <__hexnan+0xfc>
 80090f2:	4544      	cmp	r4, r8
 80090f4:	d9c3      	bls.n	800907e <__hexnan+0x7a>
 80090f6:	2300      	movs	r3, #0
 80090f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80090fc:	2501      	movs	r5, #1
 80090fe:	3c04      	subs	r4, #4
 8009100:	6822      	ldr	r2, [r4, #0]
 8009102:	f000 000f 	and.w	r0, r0, #15
 8009106:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800910a:	6022      	str	r2, [r4, #0]
 800910c:	e7b7      	b.n	800907e <__hexnan+0x7a>
 800910e:	2508      	movs	r5, #8
 8009110:	e7b5      	b.n	800907e <__hexnan+0x7a>
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0df      	beq.n	80090d8 <__hexnan+0xd4>
 8009118:	f04f 32ff 	mov.w	r2, #4294967295
 800911c:	f1c3 0320 	rsb	r3, r3, #32
 8009120:	fa22 f303 	lsr.w	r3, r2, r3
 8009124:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009128:	401a      	ands	r2, r3
 800912a:	f846 2c04 	str.w	r2, [r6, #-4]
 800912e:	e7d3      	b.n	80090d8 <__hexnan+0xd4>
 8009130:	3f04      	subs	r7, #4
 8009132:	e7d1      	b.n	80090d8 <__hexnan+0xd4>
 8009134:	2004      	movs	r0, #4
 8009136:	b007      	add	sp, #28
 8009138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800913c <_localeconv_r>:
 800913c:	4800      	ldr	r0, [pc, #0]	; (8009140 <_localeconv_r+0x4>)
 800913e:	4770      	bx	lr
 8009140:	20000170 	.word	0x20000170

08009144 <_lseek_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	; (8009164 <_lseek_r+0x20>)
 8009148:	4604      	mov	r4, r0
 800914a:	4608      	mov	r0, r1
 800914c:	4611      	mov	r1, r2
 800914e:	2200      	movs	r2, #0
 8009150:	602a      	str	r2, [r5, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	f7fa f87f 	bl	8003256 <_lseek>
 8009158:	1c43      	adds	r3, r0, #1
 800915a:	d102      	bne.n	8009162 <_lseek_r+0x1e>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	b103      	cbz	r3, 8009162 <_lseek_r+0x1e>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	bd38      	pop	{r3, r4, r5, pc}
 8009164:	20000d60 	.word	0x20000d60

08009168 <malloc>:
 8009168:	4b02      	ldr	r3, [pc, #8]	; (8009174 <malloc+0xc>)
 800916a:	4601      	mov	r1, r0
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	f000 bd67 	b.w	8009c40 <_malloc_r>
 8009172:	bf00      	nop
 8009174:	20000018 	.word	0x20000018

08009178 <__ascii_mbtowc>:
 8009178:	b082      	sub	sp, #8
 800917a:	b901      	cbnz	r1, 800917e <__ascii_mbtowc+0x6>
 800917c:	a901      	add	r1, sp, #4
 800917e:	b142      	cbz	r2, 8009192 <__ascii_mbtowc+0x1a>
 8009180:	b14b      	cbz	r3, 8009196 <__ascii_mbtowc+0x1e>
 8009182:	7813      	ldrb	r3, [r2, #0]
 8009184:	600b      	str	r3, [r1, #0]
 8009186:	7812      	ldrb	r2, [r2, #0]
 8009188:	1e10      	subs	r0, r2, #0
 800918a:	bf18      	it	ne
 800918c:	2001      	movne	r0, #1
 800918e:	b002      	add	sp, #8
 8009190:	4770      	bx	lr
 8009192:	4610      	mov	r0, r2
 8009194:	e7fb      	b.n	800918e <__ascii_mbtowc+0x16>
 8009196:	f06f 0001 	mvn.w	r0, #1
 800919a:	e7f8      	b.n	800918e <__ascii_mbtowc+0x16>

0800919c <memcpy>:
 800919c:	440a      	add	r2, r1
 800919e:	4291      	cmp	r1, r2
 80091a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80091a4:	d100      	bne.n	80091a8 <memcpy+0xc>
 80091a6:	4770      	bx	lr
 80091a8:	b510      	push	{r4, lr}
 80091aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091b2:	4291      	cmp	r1, r2
 80091b4:	d1f9      	bne.n	80091aa <memcpy+0xe>
 80091b6:	bd10      	pop	{r4, pc}

080091b8 <_Balloc>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091bc:	4604      	mov	r4, r0
 80091be:	460d      	mov	r5, r1
 80091c0:	b976      	cbnz	r6, 80091e0 <_Balloc+0x28>
 80091c2:	2010      	movs	r0, #16
 80091c4:	f7ff ffd0 	bl	8009168 <malloc>
 80091c8:	4602      	mov	r2, r0
 80091ca:	6260      	str	r0, [r4, #36]	; 0x24
 80091cc:	b920      	cbnz	r0, 80091d8 <_Balloc+0x20>
 80091ce:	4b18      	ldr	r3, [pc, #96]	; (8009230 <_Balloc+0x78>)
 80091d0:	4818      	ldr	r0, [pc, #96]	; (8009234 <_Balloc+0x7c>)
 80091d2:	2166      	movs	r1, #102	; 0x66
 80091d4:	f001 fb5c 	bl	800a890 <__assert_func>
 80091d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091dc:	6006      	str	r6, [r0, #0]
 80091de:	60c6      	str	r6, [r0, #12]
 80091e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091e2:	68f3      	ldr	r3, [r6, #12]
 80091e4:	b183      	cbz	r3, 8009208 <_Balloc+0x50>
 80091e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091ee:	b9b8      	cbnz	r0, 8009220 <_Balloc+0x68>
 80091f0:	2101      	movs	r1, #1
 80091f2:	fa01 f605 	lsl.w	r6, r1, r5
 80091f6:	1d72      	adds	r2, r6, #5
 80091f8:	0092      	lsls	r2, r2, #2
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 fc9d 	bl	8009b3a <_calloc_r>
 8009200:	b160      	cbz	r0, 800921c <_Balloc+0x64>
 8009202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009206:	e00e      	b.n	8009226 <_Balloc+0x6e>
 8009208:	2221      	movs	r2, #33	; 0x21
 800920a:	2104      	movs	r1, #4
 800920c:	4620      	mov	r0, r4
 800920e:	f000 fc94 	bl	8009b3a <_calloc_r>
 8009212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009214:	60f0      	str	r0, [r6, #12]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e4      	bne.n	80091e6 <_Balloc+0x2e>
 800921c:	2000      	movs	r0, #0
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	6802      	ldr	r2, [r0, #0]
 8009222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009226:	2300      	movs	r3, #0
 8009228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800922c:	e7f7      	b.n	800921e <_Balloc+0x66>
 800922e:	bf00      	nop
 8009230:	0800cd5e 	.word	0x0800cd5e
 8009234:	0800ce5c 	.word	0x0800ce5c

08009238 <_Bfree>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800923c:	4605      	mov	r5, r0
 800923e:	460c      	mov	r4, r1
 8009240:	b976      	cbnz	r6, 8009260 <_Bfree+0x28>
 8009242:	2010      	movs	r0, #16
 8009244:	f7ff ff90 	bl	8009168 <malloc>
 8009248:	4602      	mov	r2, r0
 800924a:	6268      	str	r0, [r5, #36]	; 0x24
 800924c:	b920      	cbnz	r0, 8009258 <_Bfree+0x20>
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <_Bfree+0x3c>)
 8009250:	4809      	ldr	r0, [pc, #36]	; (8009278 <_Bfree+0x40>)
 8009252:	218a      	movs	r1, #138	; 0x8a
 8009254:	f001 fb1c 	bl	800a890 <__assert_func>
 8009258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800925c:	6006      	str	r6, [r0, #0]
 800925e:	60c6      	str	r6, [r0, #12]
 8009260:	b13c      	cbz	r4, 8009272 <_Bfree+0x3a>
 8009262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009264:	6862      	ldr	r2, [r4, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800926c:	6021      	str	r1, [r4, #0]
 800926e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	0800cd5e 	.word	0x0800cd5e
 8009278:	0800ce5c 	.word	0x0800ce5c

0800927c <__multadd>:
 800927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009280:	690d      	ldr	r5, [r1, #16]
 8009282:	4607      	mov	r7, r0
 8009284:	460c      	mov	r4, r1
 8009286:	461e      	mov	r6, r3
 8009288:	f101 0c14 	add.w	ip, r1, #20
 800928c:	2000      	movs	r0, #0
 800928e:	f8dc 3000 	ldr.w	r3, [ip]
 8009292:	b299      	uxth	r1, r3
 8009294:	fb02 6101 	mla	r1, r2, r1, r6
 8009298:	0c1e      	lsrs	r6, r3, #16
 800929a:	0c0b      	lsrs	r3, r1, #16
 800929c:	fb02 3306 	mla	r3, r2, r6, r3
 80092a0:	b289      	uxth	r1, r1
 80092a2:	3001      	adds	r0, #1
 80092a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092a8:	4285      	cmp	r5, r0
 80092aa:	f84c 1b04 	str.w	r1, [ip], #4
 80092ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092b2:	dcec      	bgt.n	800928e <__multadd+0x12>
 80092b4:	b30e      	cbz	r6, 80092fa <__multadd+0x7e>
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	dc19      	bgt.n	80092f0 <__multadd+0x74>
 80092bc:	6861      	ldr	r1, [r4, #4]
 80092be:	4638      	mov	r0, r7
 80092c0:	3101      	adds	r1, #1
 80092c2:	f7ff ff79 	bl	80091b8 <_Balloc>
 80092c6:	4680      	mov	r8, r0
 80092c8:	b928      	cbnz	r0, 80092d6 <__multadd+0x5a>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <__multadd+0x84>)
 80092ce:	480d      	ldr	r0, [pc, #52]	; (8009304 <__multadd+0x88>)
 80092d0:	21b5      	movs	r1, #181	; 0xb5
 80092d2:	f001 fadd 	bl	800a890 <__assert_func>
 80092d6:	6922      	ldr	r2, [r4, #16]
 80092d8:	3202      	adds	r2, #2
 80092da:	f104 010c 	add.w	r1, r4, #12
 80092de:	0092      	lsls	r2, r2, #2
 80092e0:	300c      	adds	r0, #12
 80092e2:	f7ff ff5b 	bl	800919c <memcpy>
 80092e6:	4621      	mov	r1, r4
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ffa5 	bl	8009238 <_Bfree>
 80092ee:	4644      	mov	r4, r8
 80092f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092f4:	3501      	adds	r5, #1
 80092f6:	615e      	str	r6, [r3, #20]
 80092f8:	6125      	str	r5, [r4, #16]
 80092fa:	4620      	mov	r0, r4
 80092fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009300:	0800cdd0 	.word	0x0800cdd0
 8009304:	0800ce5c 	.word	0x0800ce5c

08009308 <__s2b>:
 8009308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930c:	460c      	mov	r4, r1
 800930e:	4615      	mov	r5, r2
 8009310:	461f      	mov	r7, r3
 8009312:	2209      	movs	r2, #9
 8009314:	3308      	adds	r3, #8
 8009316:	4606      	mov	r6, r0
 8009318:	fb93 f3f2 	sdiv	r3, r3, r2
 800931c:	2100      	movs	r1, #0
 800931e:	2201      	movs	r2, #1
 8009320:	429a      	cmp	r2, r3
 8009322:	db09      	blt.n	8009338 <__s2b+0x30>
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff ff47 	bl	80091b8 <_Balloc>
 800932a:	b940      	cbnz	r0, 800933e <__s2b+0x36>
 800932c:	4602      	mov	r2, r0
 800932e:	4b19      	ldr	r3, [pc, #100]	; (8009394 <__s2b+0x8c>)
 8009330:	4819      	ldr	r0, [pc, #100]	; (8009398 <__s2b+0x90>)
 8009332:	21ce      	movs	r1, #206	; 0xce
 8009334:	f001 faac 	bl	800a890 <__assert_func>
 8009338:	0052      	lsls	r2, r2, #1
 800933a:	3101      	adds	r1, #1
 800933c:	e7f0      	b.n	8009320 <__s2b+0x18>
 800933e:	9b08      	ldr	r3, [sp, #32]
 8009340:	6143      	str	r3, [r0, #20]
 8009342:	2d09      	cmp	r5, #9
 8009344:	f04f 0301 	mov.w	r3, #1
 8009348:	6103      	str	r3, [r0, #16]
 800934a:	dd16      	ble.n	800937a <__s2b+0x72>
 800934c:	f104 0909 	add.w	r9, r4, #9
 8009350:	46c8      	mov	r8, r9
 8009352:	442c      	add	r4, r5
 8009354:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009358:	4601      	mov	r1, r0
 800935a:	3b30      	subs	r3, #48	; 0x30
 800935c:	220a      	movs	r2, #10
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff ff8c 	bl	800927c <__multadd>
 8009364:	45a0      	cmp	r8, r4
 8009366:	d1f5      	bne.n	8009354 <__s2b+0x4c>
 8009368:	f1a5 0408 	sub.w	r4, r5, #8
 800936c:	444c      	add	r4, r9
 800936e:	1b2d      	subs	r5, r5, r4
 8009370:	1963      	adds	r3, r4, r5
 8009372:	42bb      	cmp	r3, r7
 8009374:	db04      	blt.n	8009380 <__s2b+0x78>
 8009376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937a:	340a      	adds	r4, #10
 800937c:	2509      	movs	r5, #9
 800937e:	e7f6      	b.n	800936e <__s2b+0x66>
 8009380:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009384:	4601      	mov	r1, r0
 8009386:	3b30      	subs	r3, #48	; 0x30
 8009388:	220a      	movs	r2, #10
 800938a:	4630      	mov	r0, r6
 800938c:	f7ff ff76 	bl	800927c <__multadd>
 8009390:	e7ee      	b.n	8009370 <__s2b+0x68>
 8009392:	bf00      	nop
 8009394:	0800cdd0 	.word	0x0800cdd0
 8009398:	0800ce5c 	.word	0x0800ce5c

0800939c <__hi0bits>:
 800939c:	0c03      	lsrs	r3, r0, #16
 800939e:	041b      	lsls	r3, r3, #16
 80093a0:	b9d3      	cbnz	r3, 80093d8 <__hi0bits+0x3c>
 80093a2:	0400      	lsls	r0, r0, #16
 80093a4:	2310      	movs	r3, #16
 80093a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80093aa:	bf04      	itt	eq
 80093ac:	0200      	lsleq	r0, r0, #8
 80093ae:	3308      	addeq	r3, #8
 80093b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80093b4:	bf04      	itt	eq
 80093b6:	0100      	lsleq	r0, r0, #4
 80093b8:	3304      	addeq	r3, #4
 80093ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80093be:	bf04      	itt	eq
 80093c0:	0080      	lsleq	r0, r0, #2
 80093c2:	3302      	addeq	r3, #2
 80093c4:	2800      	cmp	r0, #0
 80093c6:	db05      	blt.n	80093d4 <__hi0bits+0x38>
 80093c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80093cc:	f103 0301 	add.w	r3, r3, #1
 80093d0:	bf08      	it	eq
 80093d2:	2320      	moveq	r3, #32
 80093d4:	4618      	mov	r0, r3
 80093d6:	4770      	bx	lr
 80093d8:	2300      	movs	r3, #0
 80093da:	e7e4      	b.n	80093a6 <__hi0bits+0xa>

080093dc <__lo0bits>:
 80093dc:	6803      	ldr	r3, [r0, #0]
 80093de:	f013 0207 	ands.w	r2, r3, #7
 80093e2:	4601      	mov	r1, r0
 80093e4:	d00b      	beq.n	80093fe <__lo0bits+0x22>
 80093e6:	07da      	lsls	r2, r3, #31
 80093e8:	d423      	bmi.n	8009432 <__lo0bits+0x56>
 80093ea:	0798      	lsls	r0, r3, #30
 80093ec:	bf49      	itett	mi
 80093ee:	085b      	lsrmi	r3, r3, #1
 80093f0:	089b      	lsrpl	r3, r3, #2
 80093f2:	2001      	movmi	r0, #1
 80093f4:	600b      	strmi	r3, [r1, #0]
 80093f6:	bf5c      	itt	pl
 80093f8:	600b      	strpl	r3, [r1, #0]
 80093fa:	2002      	movpl	r0, #2
 80093fc:	4770      	bx	lr
 80093fe:	b298      	uxth	r0, r3
 8009400:	b9a8      	cbnz	r0, 800942e <__lo0bits+0x52>
 8009402:	0c1b      	lsrs	r3, r3, #16
 8009404:	2010      	movs	r0, #16
 8009406:	b2da      	uxtb	r2, r3
 8009408:	b90a      	cbnz	r2, 800940e <__lo0bits+0x32>
 800940a:	3008      	adds	r0, #8
 800940c:	0a1b      	lsrs	r3, r3, #8
 800940e:	071a      	lsls	r2, r3, #28
 8009410:	bf04      	itt	eq
 8009412:	091b      	lsreq	r3, r3, #4
 8009414:	3004      	addeq	r0, #4
 8009416:	079a      	lsls	r2, r3, #30
 8009418:	bf04      	itt	eq
 800941a:	089b      	lsreq	r3, r3, #2
 800941c:	3002      	addeq	r0, #2
 800941e:	07da      	lsls	r2, r3, #31
 8009420:	d403      	bmi.n	800942a <__lo0bits+0x4e>
 8009422:	085b      	lsrs	r3, r3, #1
 8009424:	f100 0001 	add.w	r0, r0, #1
 8009428:	d005      	beq.n	8009436 <__lo0bits+0x5a>
 800942a:	600b      	str	r3, [r1, #0]
 800942c:	4770      	bx	lr
 800942e:	4610      	mov	r0, r2
 8009430:	e7e9      	b.n	8009406 <__lo0bits+0x2a>
 8009432:	2000      	movs	r0, #0
 8009434:	4770      	bx	lr
 8009436:	2020      	movs	r0, #32
 8009438:	4770      	bx	lr
	...

0800943c <__i2b>:
 800943c:	b510      	push	{r4, lr}
 800943e:	460c      	mov	r4, r1
 8009440:	2101      	movs	r1, #1
 8009442:	f7ff feb9 	bl	80091b8 <_Balloc>
 8009446:	4602      	mov	r2, r0
 8009448:	b928      	cbnz	r0, 8009456 <__i2b+0x1a>
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <__i2b+0x24>)
 800944c:	4805      	ldr	r0, [pc, #20]	; (8009464 <__i2b+0x28>)
 800944e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009452:	f001 fa1d 	bl	800a890 <__assert_func>
 8009456:	2301      	movs	r3, #1
 8009458:	6144      	str	r4, [r0, #20]
 800945a:	6103      	str	r3, [r0, #16]
 800945c:	bd10      	pop	{r4, pc}
 800945e:	bf00      	nop
 8009460:	0800cdd0 	.word	0x0800cdd0
 8009464:	0800ce5c 	.word	0x0800ce5c

08009468 <__multiply>:
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946c:	4691      	mov	r9, r2
 800946e:	690a      	ldr	r2, [r1, #16]
 8009470:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009474:	429a      	cmp	r2, r3
 8009476:	bfb8      	it	lt
 8009478:	460b      	movlt	r3, r1
 800947a:	460c      	mov	r4, r1
 800947c:	bfbc      	itt	lt
 800947e:	464c      	movlt	r4, r9
 8009480:	4699      	movlt	r9, r3
 8009482:	6927      	ldr	r7, [r4, #16]
 8009484:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009488:	68a3      	ldr	r3, [r4, #8]
 800948a:	6861      	ldr	r1, [r4, #4]
 800948c:	eb07 060a 	add.w	r6, r7, sl
 8009490:	42b3      	cmp	r3, r6
 8009492:	b085      	sub	sp, #20
 8009494:	bfb8      	it	lt
 8009496:	3101      	addlt	r1, #1
 8009498:	f7ff fe8e 	bl	80091b8 <_Balloc>
 800949c:	b930      	cbnz	r0, 80094ac <__multiply+0x44>
 800949e:	4602      	mov	r2, r0
 80094a0:	4b44      	ldr	r3, [pc, #272]	; (80095b4 <__multiply+0x14c>)
 80094a2:	4845      	ldr	r0, [pc, #276]	; (80095b8 <__multiply+0x150>)
 80094a4:	f240 115d 	movw	r1, #349	; 0x15d
 80094a8:	f001 f9f2 	bl	800a890 <__assert_func>
 80094ac:	f100 0514 	add.w	r5, r0, #20
 80094b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094b4:	462b      	mov	r3, r5
 80094b6:	2200      	movs	r2, #0
 80094b8:	4543      	cmp	r3, r8
 80094ba:	d321      	bcc.n	8009500 <__multiply+0x98>
 80094bc:	f104 0314 	add.w	r3, r4, #20
 80094c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80094c4:	f109 0314 	add.w	r3, r9, #20
 80094c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80094cc:	9202      	str	r2, [sp, #8]
 80094ce:	1b3a      	subs	r2, r7, r4
 80094d0:	3a15      	subs	r2, #21
 80094d2:	f022 0203 	bic.w	r2, r2, #3
 80094d6:	3204      	adds	r2, #4
 80094d8:	f104 0115 	add.w	r1, r4, #21
 80094dc:	428f      	cmp	r7, r1
 80094de:	bf38      	it	cc
 80094e0:	2204      	movcc	r2, #4
 80094e2:	9201      	str	r2, [sp, #4]
 80094e4:	9a02      	ldr	r2, [sp, #8]
 80094e6:	9303      	str	r3, [sp, #12]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d80c      	bhi.n	8009506 <__multiply+0x9e>
 80094ec:	2e00      	cmp	r6, #0
 80094ee:	dd03      	ble.n	80094f8 <__multiply+0x90>
 80094f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d05a      	beq.n	80095ae <__multiply+0x146>
 80094f8:	6106      	str	r6, [r0, #16]
 80094fa:	b005      	add	sp, #20
 80094fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009500:	f843 2b04 	str.w	r2, [r3], #4
 8009504:	e7d8      	b.n	80094b8 <__multiply+0x50>
 8009506:	f8b3 a000 	ldrh.w	sl, [r3]
 800950a:	f1ba 0f00 	cmp.w	sl, #0
 800950e:	d024      	beq.n	800955a <__multiply+0xf2>
 8009510:	f104 0e14 	add.w	lr, r4, #20
 8009514:	46a9      	mov	r9, r5
 8009516:	f04f 0c00 	mov.w	ip, #0
 800951a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800951e:	f8d9 1000 	ldr.w	r1, [r9]
 8009522:	fa1f fb82 	uxth.w	fp, r2
 8009526:	b289      	uxth	r1, r1
 8009528:	fb0a 110b 	mla	r1, sl, fp, r1
 800952c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009530:	f8d9 2000 	ldr.w	r2, [r9]
 8009534:	4461      	add	r1, ip
 8009536:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800953a:	fb0a c20b 	mla	r2, sl, fp, ip
 800953e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009542:	b289      	uxth	r1, r1
 8009544:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009548:	4577      	cmp	r7, lr
 800954a:	f849 1b04 	str.w	r1, [r9], #4
 800954e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009552:	d8e2      	bhi.n	800951a <__multiply+0xb2>
 8009554:	9a01      	ldr	r2, [sp, #4]
 8009556:	f845 c002 	str.w	ip, [r5, r2]
 800955a:	9a03      	ldr	r2, [sp, #12]
 800955c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009560:	3304      	adds	r3, #4
 8009562:	f1b9 0f00 	cmp.w	r9, #0
 8009566:	d020      	beq.n	80095aa <__multiply+0x142>
 8009568:	6829      	ldr	r1, [r5, #0]
 800956a:	f104 0c14 	add.w	ip, r4, #20
 800956e:	46ae      	mov	lr, r5
 8009570:	f04f 0a00 	mov.w	sl, #0
 8009574:	f8bc b000 	ldrh.w	fp, [ip]
 8009578:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800957c:	fb09 220b 	mla	r2, r9, fp, r2
 8009580:	4492      	add	sl, r2
 8009582:	b289      	uxth	r1, r1
 8009584:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009588:	f84e 1b04 	str.w	r1, [lr], #4
 800958c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009590:	f8be 1000 	ldrh.w	r1, [lr]
 8009594:	0c12      	lsrs	r2, r2, #16
 8009596:	fb09 1102 	mla	r1, r9, r2, r1
 800959a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800959e:	4567      	cmp	r7, ip
 80095a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80095a4:	d8e6      	bhi.n	8009574 <__multiply+0x10c>
 80095a6:	9a01      	ldr	r2, [sp, #4]
 80095a8:	50a9      	str	r1, [r5, r2]
 80095aa:	3504      	adds	r5, #4
 80095ac:	e79a      	b.n	80094e4 <__multiply+0x7c>
 80095ae:	3e01      	subs	r6, #1
 80095b0:	e79c      	b.n	80094ec <__multiply+0x84>
 80095b2:	bf00      	nop
 80095b4:	0800cdd0 	.word	0x0800cdd0
 80095b8:	0800ce5c 	.word	0x0800ce5c

080095bc <__pow5mult>:
 80095bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c0:	4615      	mov	r5, r2
 80095c2:	f012 0203 	ands.w	r2, r2, #3
 80095c6:	4606      	mov	r6, r0
 80095c8:	460f      	mov	r7, r1
 80095ca:	d007      	beq.n	80095dc <__pow5mult+0x20>
 80095cc:	4c25      	ldr	r4, [pc, #148]	; (8009664 <__pow5mult+0xa8>)
 80095ce:	3a01      	subs	r2, #1
 80095d0:	2300      	movs	r3, #0
 80095d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095d6:	f7ff fe51 	bl	800927c <__multadd>
 80095da:	4607      	mov	r7, r0
 80095dc:	10ad      	asrs	r5, r5, #2
 80095de:	d03d      	beq.n	800965c <__pow5mult+0xa0>
 80095e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095e2:	b97c      	cbnz	r4, 8009604 <__pow5mult+0x48>
 80095e4:	2010      	movs	r0, #16
 80095e6:	f7ff fdbf 	bl	8009168 <malloc>
 80095ea:	4602      	mov	r2, r0
 80095ec:	6270      	str	r0, [r6, #36]	; 0x24
 80095ee:	b928      	cbnz	r0, 80095fc <__pow5mult+0x40>
 80095f0:	4b1d      	ldr	r3, [pc, #116]	; (8009668 <__pow5mult+0xac>)
 80095f2:	481e      	ldr	r0, [pc, #120]	; (800966c <__pow5mult+0xb0>)
 80095f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80095f8:	f001 f94a 	bl	800a890 <__assert_func>
 80095fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009600:	6004      	str	r4, [r0, #0]
 8009602:	60c4      	str	r4, [r0, #12]
 8009604:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800960c:	b94c      	cbnz	r4, 8009622 <__pow5mult+0x66>
 800960e:	f240 2171 	movw	r1, #625	; 0x271
 8009612:	4630      	mov	r0, r6
 8009614:	f7ff ff12 	bl	800943c <__i2b>
 8009618:	2300      	movs	r3, #0
 800961a:	f8c8 0008 	str.w	r0, [r8, #8]
 800961e:	4604      	mov	r4, r0
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	f04f 0900 	mov.w	r9, #0
 8009626:	07eb      	lsls	r3, r5, #31
 8009628:	d50a      	bpl.n	8009640 <__pow5mult+0x84>
 800962a:	4639      	mov	r1, r7
 800962c:	4622      	mov	r2, r4
 800962e:	4630      	mov	r0, r6
 8009630:	f7ff ff1a 	bl	8009468 <__multiply>
 8009634:	4639      	mov	r1, r7
 8009636:	4680      	mov	r8, r0
 8009638:	4630      	mov	r0, r6
 800963a:	f7ff fdfd 	bl	8009238 <_Bfree>
 800963e:	4647      	mov	r7, r8
 8009640:	106d      	asrs	r5, r5, #1
 8009642:	d00b      	beq.n	800965c <__pow5mult+0xa0>
 8009644:	6820      	ldr	r0, [r4, #0]
 8009646:	b938      	cbnz	r0, 8009658 <__pow5mult+0x9c>
 8009648:	4622      	mov	r2, r4
 800964a:	4621      	mov	r1, r4
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff ff0b 	bl	8009468 <__multiply>
 8009652:	6020      	str	r0, [r4, #0]
 8009654:	f8c0 9000 	str.w	r9, [r0]
 8009658:	4604      	mov	r4, r0
 800965a:	e7e4      	b.n	8009626 <__pow5mult+0x6a>
 800965c:	4638      	mov	r0, r7
 800965e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009662:	bf00      	nop
 8009664:	0800cfa8 	.word	0x0800cfa8
 8009668:	0800cd5e 	.word	0x0800cd5e
 800966c:	0800ce5c 	.word	0x0800ce5c

08009670 <__lshift>:
 8009670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009674:	460c      	mov	r4, r1
 8009676:	6849      	ldr	r1, [r1, #4]
 8009678:	6923      	ldr	r3, [r4, #16]
 800967a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800967e:	68a3      	ldr	r3, [r4, #8]
 8009680:	4607      	mov	r7, r0
 8009682:	4691      	mov	r9, r2
 8009684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009688:	f108 0601 	add.w	r6, r8, #1
 800968c:	42b3      	cmp	r3, r6
 800968e:	db0b      	blt.n	80096a8 <__lshift+0x38>
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff fd91 	bl	80091b8 <_Balloc>
 8009696:	4605      	mov	r5, r0
 8009698:	b948      	cbnz	r0, 80096ae <__lshift+0x3e>
 800969a:	4602      	mov	r2, r0
 800969c:	4b2a      	ldr	r3, [pc, #168]	; (8009748 <__lshift+0xd8>)
 800969e:	482b      	ldr	r0, [pc, #172]	; (800974c <__lshift+0xdc>)
 80096a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80096a4:	f001 f8f4 	bl	800a890 <__assert_func>
 80096a8:	3101      	adds	r1, #1
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	e7ee      	b.n	800968c <__lshift+0x1c>
 80096ae:	2300      	movs	r3, #0
 80096b0:	f100 0114 	add.w	r1, r0, #20
 80096b4:	f100 0210 	add.w	r2, r0, #16
 80096b8:	4618      	mov	r0, r3
 80096ba:	4553      	cmp	r3, sl
 80096bc:	db37      	blt.n	800972e <__lshift+0xbe>
 80096be:	6920      	ldr	r0, [r4, #16]
 80096c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096c4:	f104 0314 	add.w	r3, r4, #20
 80096c8:	f019 091f 	ands.w	r9, r9, #31
 80096cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80096d4:	d02f      	beq.n	8009736 <__lshift+0xc6>
 80096d6:	f1c9 0e20 	rsb	lr, r9, #32
 80096da:	468a      	mov	sl, r1
 80096dc:	f04f 0c00 	mov.w	ip, #0
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	fa02 f209 	lsl.w	r2, r2, r9
 80096e6:	ea42 020c 	orr.w	r2, r2, ip
 80096ea:	f84a 2b04 	str.w	r2, [sl], #4
 80096ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f2:	4298      	cmp	r0, r3
 80096f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80096f8:	d8f2      	bhi.n	80096e0 <__lshift+0x70>
 80096fa:	1b03      	subs	r3, r0, r4
 80096fc:	3b15      	subs	r3, #21
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	3304      	adds	r3, #4
 8009704:	f104 0215 	add.w	r2, r4, #21
 8009708:	4290      	cmp	r0, r2
 800970a:	bf38      	it	cc
 800970c:	2304      	movcc	r3, #4
 800970e:	f841 c003 	str.w	ip, [r1, r3]
 8009712:	f1bc 0f00 	cmp.w	ip, #0
 8009716:	d001      	beq.n	800971c <__lshift+0xac>
 8009718:	f108 0602 	add.w	r6, r8, #2
 800971c:	3e01      	subs	r6, #1
 800971e:	4638      	mov	r0, r7
 8009720:	612e      	str	r6, [r5, #16]
 8009722:	4621      	mov	r1, r4
 8009724:	f7ff fd88 	bl	8009238 <_Bfree>
 8009728:	4628      	mov	r0, r5
 800972a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009732:	3301      	adds	r3, #1
 8009734:	e7c1      	b.n	80096ba <__lshift+0x4a>
 8009736:	3904      	subs	r1, #4
 8009738:	f853 2b04 	ldr.w	r2, [r3], #4
 800973c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009740:	4298      	cmp	r0, r3
 8009742:	d8f9      	bhi.n	8009738 <__lshift+0xc8>
 8009744:	e7ea      	b.n	800971c <__lshift+0xac>
 8009746:	bf00      	nop
 8009748:	0800cdd0 	.word	0x0800cdd0
 800974c:	0800ce5c 	.word	0x0800ce5c

08009750 <__mcmp>:
 8009750:	b530      	push	{r4, r5, lr}
 8009752:	6902      	ldr	r2, [r0, #16]
 8009754:	690c      	ldr	r4, [r1, #16]
 8009756:	1b12      	subs	r2, r2, r4
 8009758:	d10e      	bne.n	8009778 <__mcmp+0x28>
 800975a:	f100 0314 	add.w	r3, r0, #20
 800975e:	3114      	adds	r1, #20
 8009760:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009764:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009768:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800976c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009770:	42a5      	cmp	r5, r4
 8009772:	d003      	beq.n	800977c <__mcmp+0x2c>
 8009774:	d305      	bcc.n	8009782 <__mcmp+0x32>
 8009776:	2201      	movs	r2, #1
 8009778:	4610      	mov	r0, r2
 800977a:	bd30      	pop	{r4, r5, pc}
 800977c:	4283      	cmp	r3, r0
 800977e:	d3f3      	bcc.n	8009768 <__mcmp+0x18>
 8009780:	e7fa      	b.n	8009778 <__mcmp+0x28>
 8009782:	f04f 32ff 	mov.w	r2, #4294967295
 8009786:	e7f7      	b.n	8009778 <__mcmp+0x28>

08009788 <__mdiff>:
 8009788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	460c      	mov	r4, r1
 800978e:	4606      	mov	r6, r0
 8009790:	4611      	mov	r1, r2
 8009792:	4620      	mov	r0, r4
 8009794:	4690      	mov	r8, r2
 8009796:	f7ff ffdb 	bl	8009750 <__mcmp>
 800979a:	1e05      	subs	r5, r0, #0
 800979c:	d110      	bne.n	80097c0 <__mdiff+0x38>
 800979e:	4629      	mov	r1, r5
 80097a0:	4630      	mov	r0, r6
 80097a2:	f7ff fd09 	bl	80091b8 <_Balloc>
 80097a6:	b930      	cbnz	r0, 80097b6 <__mdiff+0x2e>
 80097a8:	4b3a      	ldr	r3, [pc, #232]	; (8009894 <__mdiff+0x10c>)
 80097aa:	4602      	mov	r2, r0
 80097ac:	f240 2132 	movw	r1, #562	; 0x232
 80097b0:	4839      	ldr	r0, [pc, #228]	; (8009898 <__mdiff+0x110>)
 80097b2:	f001 f86d 	bl	800a890 <__assert_func>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c0:	bfa4      	itt	ge
 80097c2:	4643      	movge	r3, r8
 80097c4:	46a0      	movge	r8, r4
 80097c6:	4630      	mov	r0, r6
 80097c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097cc:	bfa6      	itte	ge
 80097ce:	461c      	movge	r4, r3
 80097d0:	2500      	movge	r5, #0
 80097d2:	2501      	movlt	r5, #1
 80097d4:	f7ff fcf0 	bl	80091b8 <_Balloc>
 80097d8:	b920      	cbnz	r0, 80097e4 <__mdiff+0x5c>
 80097da:	4b2e      	ldr	r3, [pc, #184]	; (8009894 <__mdiff+0x10c>)
 80097dc:	4602      	mov	r2, r0
 80097de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80097e2:	e7e5      	b.n	80097b0 <__mdiff+0x28>
 80097e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097e8:	6926      	ldr	r6, [r4, #16]
 80097ea:	60c5      	str	r5, [r0, #12]
 80097ec:	f104 0914 	add.w	r9, r4, #20
 80097f0:	f108 0514 	add.w	r5, r8, #20
 80097f4:	f100 0e14 	add.w	lr, r0, #20
 80097f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80097fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009800:	f108 0210 	add.w	r2, r8, #16
 8009804:	46f2      	mov	sl, lr
 8009806:	2100      	movs	r1, #0
 8009808:	f859 3b04 	ldr.w	r3, [r9], #4
 800980c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009810:	fa1f f883 	uxth.w	r8, r3
 8009814:	fa11 f18b 	uxtah	r1, r1, fp
 8009818:	0c1b      	lsrs	r3, r3, #16
 800981a:	eba1 0808 	sub.w	r8, r1, r8
 800981e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009822:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009826:	fa1f f888 	uxth.w	r8, r8
 800982a:	1419      	asrs	r1, r3, #16
 800982c:	454e      	cmp	r6, r9
 800982e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009832:	f84a 3b04 	str.w	r3, [sl], #4
 8009836:	d8e7      	bhi.n	8009808 <__mdiff+0x80>
 8009838:	1b33      	subs	r3, r6, r4
 800983a:	3b15      	subs	r3, #21
 800983c:	f023 0303 	bic.w	r3, r3, #3
 8009840:	3304      	adds	r3, #4
 8009842:	3415      	adds	r4, #21
 8009844:	42a6      	cmp	r6, r4
 8009846:	bf38      	it	cc
 8009848:	2304      	movcc	r3, #4
 800984a:	441d      	add	r5, r3
 800984c:	4473      	add	r3, lr
 800984e:	469e      	mov	lr, r3
 8009850:	462e      	mov	r6, r5
 8009852:	4566      	cmp	r6, ip
 8009854:	d30e      	bcc.n	8009874 <__mdiff+0xec>
 8009856:	f10c 0203 	add.w	r2, ip, #3
 800985a:	1b52      	subs	r2, r2, r5
 800985c:	f022 0203 	bic.w	r2, r2, #3
 8009860:	3d03      	subs	r5, #3
 8009862:	45ac      	cmp	ip, r5
 8009864:	bf38      	it	cc
 8009866:	2200      	movcc	r2, #0
 8009868:	441a      	add	r2, r3
 800986a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800986e:	b17b      	cbz	r3, 8009890 <__mdiff+0x108>
 8009870:	6107      	str	r7, [r0, #16]
 8009872:	e7a3      	b.n	80097bc <__mdiff+0x34>
 8009874:	f856 8b04 	ldr.w	r8, [r6], #4
 8009878:	fa11 f288 	uxtah	r2, r1, r8
 800987c:	1414      	asrs	r4, r2, #16
 800987e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009882:	b292      	uxth	r2, r2
 8009884:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009888:	f84e 2b04 	str.w	r2, [lr], #4
 800988c:	1421      	asrs	r1, r4, #16
 800988e:	e7e0      	b.n	8009852 <__mdiff+0xca>
 8009890:	3f01      	subs	r7, #1
 8009892:	e7ea      	b.n	800986a <__mdiff+0xe2>
 8009894:	0800cdd0 	.word	0x0800cdd0
 8009898:	0800ce5c 	.word	0x0800ce5c

0800989c <__ulp>:
 800989c:	b082      	sub	sp, #8
 800989e:	ed8d 0b00 	vstr	d0, [sp]
 80098a2:	9b01      	ldr	r3, [sp, #4]
 80098a4:	4912      	ldr	r1, [pc, #72]	; (80098f0 <__ulp+0x54>)
 80098a6:	4019      	ands	r1, r3
 80098a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80098ac:	2900      	cmp	r1, #0
 80098ae:	dd05      	ble.n	80098bc <__ulp+0x20>
 80098b0:	2200      	movs	r2, #0
 80098b2:	460b      	mov	r3, r1
 80098b4:	ec43 2b10 	vmov	d0, r2, r3
 80098b8:	b002      	add	sp, #8
 80098ba:	4770      	bx	lr
 80098bc:	4249      	negs	r1, r1
 80098be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80098c2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80098c6:	f04f 0200 	mov.w	r2, #0
 80098ca:	f04f 0300 	mov.w	r3, #0
 80098ce:	da04      	bge.n	80098da <__ulp+0x3e>
 80098d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80098d4:	fa41 f300 	asr.w	r3, r1, r0
 80098d8:	e7ec      	b.n	80098b4 <__ulp+0x18>
 80098da:	f1a0 0114 	sub.w	r1, r0, #20
 80098de:	291e      	cmp	r1, #30
 80098e0:	bfda      	itte	le
 80098e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80098e6:	fa20 f101 	lsrle.w	r1, r0, r1
 80098ea:	2101      	movgt	r1, #1
 80098ec:	460a      	mov	r2, r1
 80098ee:	e7e1      	b.n	80098b4 <__ulp+0x18>
 80098f0:	7ff00000 	.word	0x7ff00000

080098f4 <__b2d>:
 80098f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f6:	6905      	ldr	r5, [r0, #16]
 80098f8:	f100 0714 	add.w	r7, r0, #20
 80098fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009900:	1f2e      	subs	r6, r5, #4
 8009902:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009906:	4620      	mov	r0, r4
 8009908:	f7ff fd48 	bl	800939c <__hi0bits>
 800990c:	f1c0 0320 	rsb	r3, r0, #32
 8009910:	280a      	cmp	r0, #10
 8009912:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009990 <__b2d+0x9c>
 8009916:	600b      	str	r3, [r1, #0]
 8009918:	dc14      	bgt.n	8009944 <__b2d+0x50>
 800991a:	f1c0 0e0b 	rsb	lr, r0, #11
 800991e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009922:	42b7      	cmp	r7, r6
 8009924:	ea41 030c 	orr.w	r3, r1, ip
 8009928:	bf34      	ite	cc
 800992a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800992e:	2100      	movcs	r1, #0
 8009930:	3015      	adds	r0, #21
 8009932:	fa04 f000 	lsl.w	r0, r4, r0
 8009936:	fa21 f10e 	lsr.w	r1, r1, lr
 800993a:	ea40 0201 	orr.w	r2, r0, r1
 800993e:	ec43 2b10 	vmov	d0, r2, r3
 8009942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009944:	42b7      	cmp	r7, r6
 8009946:	bf3a      	itte	cc
 8009948:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800994c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009950:	2100      	movcs	r1, #0
 8009952:	380b      	subs	r0, #11
 8009954:	d017      	beq.n	8009986 <__b2d+0x92>
 8009956:	f1c0 0c20 	rsb	ip, r0, #32
 800995a:	fa04 f500 	lsl.w	r5, r4, r0
 800995e:	42be      	cmp	r6, r7
 8009960:	fa21 f40c 	lsr.w	r4, r1, ip
 8009964:	ea45 0504 	orr.w	r5, r5, r4
 8009968:	bf8c      	ite	hi
 800996a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800996e:	2400      	movls	r4, #0
 8009970:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009974:	fa01 f000 	lsl.w	r0, r1, r0
 8009978:	fa24 f40c 	lsr.w	r4, r4, ip
 800997c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009980:	ea40 0204 	orr.w	r2, r0, r4
 8009984:	e7db      	b.n	800993e <__b2d+0x4a>
 8009986:	ea44 030c 	orr.w	r3, r4, ip
 800998a:	460a      	mov	r2, r1
 800998c:	e7d7      	b.n	800993e <__b2d+0x4a>
 800998e:	bf00      	nop
 8009990:	3ff00000 	.word	0x3ff00000

08009994 <__d2b>:
 8009994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009998:	4689      	mov	r9, r1
 800999a:	2101      	movs	r1, #1
 800999c:	ec57 6b10 	vmov	r6, r7, d0
 80099a0:	4690      	mov	r8, r2
 80099a2:	f7ff fc09 	bl	80091b8 <_Balloc>
 80099a6:	4604      	mov	r4, r0
 80099a8:	b930      	cbnz	r0, 80099b8 <__d2b+0x24>
 80099aa:	4602      	mov	r2, r0
 80099ac:	4b25      	ldr	r3, [pc, #148]	; (8009a44 <__d2b+0xb0>)
 80099ae:	4826      	ldr	r0, [pc, #152]	; (8009a48 <__d2b+0xb4>)
 80099b0:	f240 310a 	movw	r1, #778	; 0x30a
 80099b4:	f000 ff6c 	bl	800a890 <__assert_func>
 80099b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099c0:	bb35      	cbnz	r5, 8009a10 <__d2b+0x7c>
 80099c2:	2e00      	cmp	r6, #0
 80099c4:	9301      	str	r3, [sp, #4]
 80099c6:	d028      	beq.n	8009a1a <__d2b+0x86>
 80099c8:	4668      	mov	r0, sp
 80099ca:	9600      	str	r6, [sp, #0]
 80099cc:	f7ff fd06 	bl	80093dc <__lo0bits>
 80099d0:	9900      	ldr	r1, [sp, #0]
 80099d2:	b300      	cbz	r0, 8009a16 <__d2b+0x82>
 80099d4:	9a01      	ldr	r2, [sp, #4]
 80099d6:	f1c0 0320 	rsb	r3, r0, #32
 80099da:	fa02 f303 	lsl.w	r3, r2, r3
 80099de:	430b      	orrs	r3, r1
 80099e0:	40c2      	lsrs	r2, r0
 80099e2:	6163      	str	r3, [r4, #20]
 80099e4:	9201      	str	r2, [sp, #4]
 80099e6:	9b01      	ldr	r3, [sp, #4]
 80099e8:	61a3      	str	r3, [r4, #24]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bf14      	ite	ne
 80099ee:	2202      	movne	r2, #2
 80099f0:	2201      	moveq	r2, #1
 80099f2:	6122      	str	r2, [r4, #16]
 80099f4:	b1d5      	cbz	r5, 8009a2c <__d2b+0x98>
 80099f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099fa:	4405      	add	r5, r0
 80099fc:	f8c9 5000 	str.w	r5, [r9]
 8009a00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a04:	f8c8 0000 	str.w	r0, [r8]
 8009a08:	4620      	mov	r0, r4
 8009a0a:	b003      	add	sp, #12
 8009a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a14:	e7d5      	b.n	80099c2 <__d2b+0x2e>
 8009a16:	6161      	str	r1, [r4, #20]
 8009a18:	e7e5      	b.n	80099e6 <__d2b+0x52>
 8009a1a:	a801      	add	r0, sp, #4
 8009a1c:	f7ff fcde 	bl	80093dc <__lo0bits>
 8009a20:	9b01      	ldr	r3, [sp, #4]
 8009a22:	6163      	str	r3, [r4, #20]
 8009a24:	2201      	movs	r2, #1
 8009a26:	6122      	str	r2, [r4, #16]
 8009a28:	3020      	adds	r0, #32
 8009a2a:	e7e3      	b.n	80099f4 <__d2b+0x60>
 8009a2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a34:	f8c9 0000 	str.w	r0, [r9]
 8009a38:	6918      	ldr	r0, [r3, #16]
 8009a3a:	f7ff fcaf 	bl	800939c <__hi0bits>
 8009a3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a42:	e7df      	b.n	8009a04 <__d2b+0x70>
 8009a44:	0800cdd0 	.word	0x0800cdd0
 8009a48:	0800ce5c 	.word	0x0800ce5c

08009a4c <__ratio>:
 8009a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	4688      	mov	r8, r1
 8009a52:	4669      	mov	r1, sp
 8009a54:	4681      	mov	r9, r0
 8009a56:	f7ff ff4d 	bl	80098f4 <__b2d>
 8009a5a:	a901      	add	r1, sp, #4
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	ec55 4b10 	vmov	r4, r5, d0
 8009a62:	f7ff ff47 	bl	80098f4 <__b2d>
 8009a66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a6e:	eba3 0c02 	sub.w	ip, r3, r2
 8009a72:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a7c:	ec51 0b10 	vmov	r0, r1, d0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	bfd6      	itet	le
 8009a84:	460a      	movle	r2, r1
 8009a86:	462a      	movgt	r2, r5
 8009a88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a8c:	468b      	mov	fp, r1
 8009a8e:	462f      	mov	r7, r5
 8009a90:	bfd4      	ite	le
 8009a92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009a96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	ee10 2a10 	vmov	r2, s0
 8009aa0:	465b      	mov	r3, fp
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	f7f6 feea 	bl	800087c <__aeabi_ddiv>
 8009aa8:	ec41 0b10 	vmov	d0, r0, r1
 8009aac:	b003      	add	sp, #12
 8009aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ab2 <__copybits>:
 8009ab2:	3901      	subs	r1, #1
 8009ab4:	b570      	push	{r4, r5, r6, lr}
 8009ab6:	1149      	asrs	r1, r1, #5
 8009ab8:	6914      	ldr	r4, [r2, #16]
 8009aba:	3101      	adds	r1, #1
 8009abc:	f102 0314 	add.w	r3, r2, #20
 8009ac0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ac4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ac8:	1f05      	subs	r5, r0, #4
 8009aca:	42a3      	cmp	r3, r4
 8009acc:	d30c      	bcc.n	8009ae8 <__copybits+0x36>
 8009ace:	1aa3      	subs	r3, r4, r2
 8009ad0:	3b11      	subs	r3, #17
 8009ad2:	f023 0303 	bic.w	r3, r3, #3
 8009ad6:	3211      	adds	r2, #17
 8009ad8:	42a2      	cmp	r2, r4
 8009ada:	bf88      	it	hi
 8009adc:	2300      	movhi	r3, #0
 8009ade:	4418      	add	r0, r3
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4288      	cmp	r0, r1
 8009ae4:	d305      	bcc.n	8009af2 <__copybits+0x40>
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}
 8009ae8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009aec:	f845 6f04 	str.w	r6, [r5, #4]!
 8009af0:	e7eb      	b.n	8009aca <__copybits+0x18>
 8009af2:	f840 3b04 	str.w	r3, [r0], #4
 8009af6:	e7f4      	b.n	8009ae2 <__copybits+0x30>

08009af8 <__any_on>:
 8009af8:	f100 0214 	add.w	r2, r0, #20
 8009afc:	6900      	ldr	r0, [r0, #16]
 8009afe:	114b      	asrs	r3, r1, #5
 8009b00:	4298      	cmp	r0, r3
 8009b02:	b510      	push	{r4, lr}
 8009b04:	db11      	blt.n	8009b2a <__any_on+0x32>
 8009b06:	dd0a      	ble.n	8009b1e <__any_on+0x26>
 8009b08:	f011 011f 	ands.w	r1, r1, #31
 8009b0c:	d007      	beq.n	8009b1e <__any_on+0x26>
 8009b0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b12:	fa24 f001 	lsr.w	r0, r4, r1
 8009b16:	fa00 f101 	lsl.w	r1, r0, r1
 8009b1a:	428c      	cmp	r4, r1
 8009b1c:	d10b      	bne.n	8009b36 <__any_on+0x3e>
 8009b1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d803      	bhi.n	8009b2e <__any_on+0x36>
 8009b26:	2000      	movs	r0, #0
 8009b28:	bd10      	pop	{r4, pc}
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	e7f7      	b.n	8009b1e <__any_on+0x26>
 8009b2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b32:	2900      	cmp	r1, #0
 8009b34:	d0f5      	beq.n	8009b22 <__any_on+0x2a>
 8009b36:	2001      	movs	r0, #1
 8009b38:	e7f6      	b.n	8009b28 <__any_on+0x30>

08009b3a <_calloc_r>:
 8009b3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b3c:	fba1 2402 	umull	r2, r4, r1, r2
 8009b40:	b94c      	cbnz	r4, 8009b56 <_calloc_r+0x1c>
 8009b42:	4611      	mov	r1, r2
 8009b44:	9201      	str	r2, [sp, #4]
 8009b46:	f000 f87b 	bl	8009c40 <_malloc_r>
 8009b4a:	9a01      	ldr	r2, [sp, #4]
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	b930      	cbnz	r0, 8009b5e <_calloc_r+0x24>
 8009b50:	4628      	mov	r0, r5
 8009b52:	b003      	add	sp, #12
 8009b54:	bd30      	pop	{r4, r5, pc}
 8009b56:	220c      	movs	r2, #12
 8009b58:	6002      	str	r2, [r0, #0]
 8009b5a:	2500      	movs	r5, #0
 8009b5c:	e7f8      	b.n	8009b50 <_calloc_r+0x16>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	f7fc fb18 	bl	8006194 <memset>
 8009b64:	e7f4      	b.n	8009b50 <_calloc_r+0x16>
	...

08009b68 <_free_r>:
 8009b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b6a:	2900      	cmp	r1, #0
 8009b6c:	d044      	beq.n	8009bf8 <_free_r+0x90>
 8009b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b72:	9001      	str	r0, [sp, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f1a1 0404 	sub.w	r4, r1, #4
 8009b7a:	bfb8      	it	lt
 8009b7c:	18e4      	addlt	r4, r4, r3
 8009b7e:	f001 f88b 	bl	800ac98 <__malloc_lock>
 8009b82:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <_free_r+0x94>)
 8009b84:	9801      	ldr	r0, [sp, #4]
 8009b86:	6813      	ldr	r3, [r2, #0]
 8009b88:	b933      	cbnz	r3, 8009b98 <_free_r+0x30>
 8009b8a:	6063      	str	r3, [r4, #4]
 8009b8c:	6014      	str	r4, [r2, #0]
 8009b8e:	b003      	add	sp, #12
 8009b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b94:	f001 b886 	b.w	800aca4 <__malloc_unlock>
 8009b98:	42a3      	cmp	r3, r4
 8009b9a:	d908      	bls.n	8009bae <_free_r+0x46>
 8009b9c:	6825      	ldr	r5, [r4, #0]
 8009b9e:	1961      	adds	r1, r4, r5
 8009ba0:	428b      	cmp	r3, r1
 8009ba2:	bf01      	itttt	eq
 8009ba4:	6819      	ldreq	r1, [r3, #0]
 8009ba6:	685b      	ldreq	r3, [r3, #4]
 8009ba8:	1949      	addeq	r1, r1, r5
 8009baa:	6021      	streq	r1, [r4, #0]
 8009bac:	e7ed      	b.n	8009b8a <_free_r+0x22>
 8009bae:	461a      	mov	r2, r3
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	b10b      	cbz	r3, 8009bb8 <_free_r+0x50>
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	d9fa      	bls.n	8009bae <_free_r+0x46>
 8009bb8:	6811      	ldr	r1, [r2, #0]
 8009bba:	1855      	adds	r5, r2, r1
 8009bbc:	42a5      	cmp	r5, r4
 8009bbe:	d10b      	bne.n	8009bd8 <_free_r+0x70>
 8009bc0:	6824      	ldr	r4, [r4, #0]
 8009bc2:	4421      	add	r1, r4
 8009bc4:	1854      	adds	r4, r2, r1
 8009bc6:	42a3      	cmp	r3, r4
 8009bc8:	6011      	str	r1, [r2, #0]
 8009bca:	d1e0      	bne.n	8009b8e <_free_r+0x26>
 8009bcc:	681c      	ldr	r4, [r3, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	6053      	str	r3, [r2, #4]
 8009bd2:	4421      	add	r1, r4
 8009bd4:	6011      	str	r1, [r2, #0]
 8009bd6:	e7da      	b.n	8009b8e <_free_r+0x26>
 8009bd8:	d902      	bls.n	8009be0 <_free_r+0x78>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	6003      	str	r3, [r0, #0]
 8009bde:	e7d6      	b.n	8009b8e <_free_r+0x26>
 8009be0:	6825      	ldr	r5, [r4, #0]
 8009be2:	1961      	adds	r1, r4, r5
 8009be4:	428b      	cmp	r3, r1
 8009be6:	bf04      	itt	eq
 8009be8:	6819      	ldreq	r1, [r3, #0]
 8009bea:	685b      	ldreq	r3, [r3, #4]
 8009bec:	6063      	str	r3, [r4, #4]
 8009bee:	bf04      	itt	eq
 8009bf0:	1949      	addeq	r1, r1, r5
 8009bf2:	6021      	streq	r1, [r4, #0]
 8009bf4:	6054      	str	r4, [r2, #4]
 8009bf6:	e7ca      	b.n	8009b8e <_free_r+0x26>
 8009bf8:	b003      	add	sp, #12
 8009bfa:	bd30      	pop	{r4, r5, pc}
 8009bfc:	20000d58 	.word	0x20000d58

08009c00 <sbrk_aligned>:
 8009c00:	b570      	push	{r4, r5, r6, lr}
 8009c02:	4e0e      	ldr	r6, [pc, #56]	; (8009c3c <sbrk_aligned+0x3c>)
 8009c04:	460c      	mov	r4, r1
 8009c06:	6831      	ldr	r1, [r6, #0]
 8009c08:	4605      	mov	r5, r0
 8009c0a:	b911      	cbnz	r1, 8009c12 <sbrk_aligned+0x12>
 8009c0c:	f000 fd28 	bl	800a660 <_sbrk_r>
 8009c10:	6030      	str	r0, [r6, #0]
 8009c12:	4621      	mov	r1, r4
 8009c14:	4628      	mov	r0, r5
 8009c16:	f000 fd23 	bl	800a660 <_sbrk_r>
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	d00a      	beq.n	8009c34 <sbrk_aligned+0x34>
 8009c1e:	1cc4      	adds	r4, r0, #3
 8009c20:	f024 0403 	bic.w	r4, r4, #3
 8009c24:	42a0      	cmp	r0, r4
 8009c26:	d007      	beq.n	8009c38 <sbrk_aligned+0x38>
 8009c28:	1a21      	subs	r1, r4, r0
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 fd18 	bl	800a660 <_sbrk_r>
 8009c30:	3001      	adds	r0, #1
 8009c32:	d101      	bne.n	8009c38 <sbrk_aligned+0x38>
 8009c34:	f04f 34ff 	mov.w	r4, #4294967295
 8009c38:	4620      	mov	r0, r4
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}
 8009c3c:	20000d5c 	.word	0x20000d5c

08009c40 <_malloc_r>:
 8009c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c44:	1ccd      	adds	r5, r1, #3
 8009c46:	f025 0503 	bic.w	r5, r5, #3
 8009c4a:	3508      	adds	r5, #8
 8009c4c:	2d0c      	cmp	r5, #12
 8009c4e:	bf38      	it	cc
 8009c50:	250c      	movcc	r5, #12
 8009c52:	2d00      	cmp	r5, #0
 8009c54:	4607      	mov	r7, r0
 8009c56:	db01      	blt.n	8009c5c <_malloc_r+0x1c>
 8009c58:	42a9      	cmp	r1, r5
 8009c5a:	d905      	bls.n	8009c68 <_malloc_r+0x28>
 8009c5c:	230c      	movs	r3, #12
 8009c5e:	603b      	str	r3, [r7, #0]
 8009c60:	2600      	movs	r6, #0
 8009c62:	4630      	mov	r0, r6
 8009c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c68:	4e2e      	ldr	r6, [pc, #184]	; (8009d24 <_malloc_r+0xe4>)
 8009c6a:	f001 f815 	bl	800ac98 <__malloc_lock>
 8009c6e:	6833      	ldr	r3, [r6, #0]
 8009c70:	461c      	mov	r4, r3
 8009c72:	bb34      	cbnz	r4, 8009cc2 <_malloc_r+0x82>
 8009c74:	4629      	mov	r1, r5
 8009c76:	4638      	mov	r0, r7
 8009c78:	f7ff ffc2 	bl	8009c00 <sbrk_aligned>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	4604      	mov	r4, r0
 8009c80:	d14d      	bne.n	8009d1e <_malloc_r+0xde>
 8009c82:	6834      	ldr	r4, [r6, #0]
 8009c84:	4626      	mov	r6, r4
 8009c86:	2e00      	cmp	r6, #0
 8009c88:	d140      	bne.n	8009d0c <_malloc_r+0xcc>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4638      	mov	r0, r7
 8009c90:	eb04 0803 	add.w	r8, r4, r3
 8009c94:	f000 fce4 	bl	800a660 <_sbrk_r>
 8009c98:	4580      	cmp	r8, r0
 8009c9a:	d13a      	bne.n	8009d12 <_malloc_r+0xd2>
 8009c9c:	6821      	ldr	r1, [r4, #0]
 8009c9e:	3503      	adds	r5, #3
 8009ca0:	1a6d      	subs	r5, r5, r1
 8009ca2:	f025 0503 	bic.w	r5, r5, #3
 8009ca6:	3508      	adds	r5, #8
 8009ca8:	2d0c      	cmp	r5, #12
 8009caa:	bf38      	it	cc
 8009cac:	250c      	movcc	r5, #12
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	f7ff ffa5 	bl	8009c00 <sbrk_aligned>
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	d02b      	beq.n	8009d12 <_malloc_r+0xd2>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	442b      	add	r3, r5
 8009cbe:	6023      	str	r3, [r4, #0]
 8009cc0:	e00e      	b.n	8009ce0 <_malloc_r+0xa0>
 8009cc2:	6822      	ldr	r2, [r4, #0]
 8009cc4:	1b52      	subs	r2, r2, r5
 8009cc6:	d41e      	bmi.n	8009d06 <_malloc_r+0xc6>
 8009cc8:	2a0b      	cmp	r2, #11
 8009cca:	d916      	bls.n	8009cfa <_malloc_r+0xba>
 8009ccc:	1961      	adds	r1, r4, r5
 8009cce:	42a3      	cmp	r3, r4
 8009cd0:	6025      	str	r5, [r4, #0]
 8009cd2:	bf18      	it	ne
 8009cd4:	6059      	strne	r1, [r3, #4]
 8009cd6:	6863      	ldr	r3, [r4, #4]
 8009cd8:	bf08      	it	eq
 8009cda:	6031      	streq	r1, [r6, #0]
 8009cdc:	5162      	str	r2, [r4, r5]
 8009cde:	604b      	str	r3, [r1, #4]
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f104 060b 	add.w	r6, r4, #11
 8009ce6:	f000 ffdd 	bl	800aca4 <__malloc_unlock>
 8009cea:	f026 0607 	bic.w	r6, r6, #7
 8009cee:	1d23      	adds	r3, r4, #4
 8009cf0:	1af2      	subs	r2, r6, r3
 8009cf2:	d0b6      	beq.n	8009c62 <_malloc_r+0x22>
 8009cf4:	1b9b      	subs	r3, r3, r6
 8009cf6:	50a3      	str	r3, [r4, r2]
 8009cf8:	e7b3      	b.n	8009c62 <_malloc_r+0x22>
 8009cfa:	6862      	ldr	r2, [r4, #4]
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	bf0c      	ite	eq
 8009d00:	6032      	streq	r2, [r6, #0]
 8009d02:	605a      	strne	r2, [r3, #4]
 8009d04:	e7ec      	b.n	8009ce0 <_malloc_r+0xa0>
 8009d06:	4623      	mov	r3, r4
 8009d08:	6864      	ldr	r4, [r4, #4]
 8009d0a:	e7b2      	b.n	8009c72 <_malloc_r+0x32>
 8009d0c:	4634      	mov	r4, r6
 8009d0e:	6876      	ldr	r6, [r6, #4]
 8009d10:	e7b9      	b.n	8009c86 <_malloc_r+0x46>
 8009d12:	230c      	movs	r3, #12
 8009d14:	603b      	str	r3, [r7, #0]
 8009d16:	4638      	mov	r0, r7
 8009d18:	f000 ffc4 	bl	800aca4 <__malloc_unlock>
 8009d1c:	e7a1      	b.n	8009c62 <_malloc_r+0x22>
 8009d1e:	6025      	str	r5, [r4, #0]
 8009d20:	e7de      	b.n	8009ce0 <_malloc_r+0xa0>
 8009d22:	bf00      	nop
 8009d24:	20000d58 	.word	0x20000d58

08009d28 <__ssputs_r>:
 8009d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	688e      	ldr	r6, [r1, #8]
 8009d2e:	429e      	cmp	r6, r3
 8009d30:	4682      	mov	sl, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	4690      	mov	r8, r2
 8009d36:	461f      	mov	r7, r3
 8009d38:	d838      	bhi.n	8009dac <__ssputs_r+0x84>
 8009d3a:	898a      	ldrh	r2, [r1, #12]
 8009d3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d40:	d032      	beq.n	8009da8 <__ssputs_r+0x80>
 8009d42:	6825      	ldr	r5, [r4, #0]
 8009d44:	6909      	ldr	r1, [r1, #16]
 8009d46:	eba5 0901 	sub.w	r9, r5, r1
 8009d4a:	6965      	ldr	r5, [r4, #20]
 8009d4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d54:	3301      	adds	r3, #1
 8009d56:	444b      	add	r3, r9
 8009d58:	106d      	asrs	r5, r5, #1
 8009d5a:	429d      	cmp	r5, r3
 8009d5c:	bf38      	it	cc
 8009d5e:	461d      	movcc	r5, r3
 8009d60:	0553      	lsls	r3, r2, #21
 8009d62:	d531      	bpl.n	8009dc8 <__ssputs_r+0xa0>
 8009d64:	4629      	mov	r1, r5
 8009d66:	f7ff ff6b 	bl	8009c40 <_malloc_r>
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	b950      	cbnz	r0, 8009d84 <__ssputs_r+0x5c>
 8009d6e:	230c      	movs	r3, #12
 8009d70:	f8ca 3000 	str.w	r3, [sl]
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d84:	6921      	ldr	r1, [r4, #16]
 8009d86:	464a      	mov	r2, r9
 8009d88:	f7ff fa08 	bl	800919c <memcpy>
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d96:	81a3      	strh	r3, [r4, #12]
 8009d98:	6126      	str	r6, [r4, #16]
 8009d9a:	6165      	str	r5, [r4, #20]
 8009d9c:	444e      	add	r6, r9
 8009d9e:	eba5 0509 	sub.w	r5, r5, r9
 8009da2:	6026      	str	r6, [r4, #0]
 8009da4:	60a5      	str	r5, [r4, #8]
 8009da6:	463e      	mov	r6, r7
 8009da8:	42be      	cmp	r6, r7
 8009daa:	d900      	bls.n	8009dae <__ssputs_r+0x86>
 8009dac:	463e      	mov	r6, r7
 8009dae:	6820      	ldr	r0, [r4, #0]
 8009db0:	4632      	mov	r2, r6
 8009db2:	4641      	mov	r1, r8
 8009db4:	f000 ff56 	bl	800ac64 <memmove>
 8009db8:	68a3      	ldr	r3, [r4, #8]
 8009dba:	1b9b      	subs	r3, r3, r6
 8009dbc:	60a3      	str	r3, [r4, #8]
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	4433      	add	r3, r6
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e7db      	b.n	8009d80 <__ssputs_r+0x58>
 8009dc8:	462a      	mov	r2, r5
 8009dca:	f000 ff71 	bl	800acb0 <_realloc_r>
 8009dce:	4606      	mov	r6, r0
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d1e1      	bne.n	8009d98 <__ssputs_r+0x70>
 8009dd4:	6921      	ldr	r1, [r4, #16]
 8009dd6:	4650      	mov	r0, sl
 8009dd8:	f7ff fec6 	bl	8009b68 <_free_r>
 8009ddc:	e7c7      	b.n	8009d6e <__ssputs_r+0x46>
	...

08009de0 <_svfiprintf_r>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	4698      	mov	r8, r3
 8009de6:	898b      	ldrh	r3, [r1, #12]
 8009de8:	061b      	lsls	r3, r3, #24
 8009dea:	b09d      	sub	sp, #116	; 0x74
 8009dec:	4607      	mov	r7, r0
 8009dee:	460d      	mov	r5, r1
 8009df0:	4614      	mov	r4, r2
 8009df2:	d50e      	bpl.n	8009e12 <_svfiprintf_r+0x32>
 8009df4:	690b      	ldr	r3, [r1, #16]
 8009df6:	b963      	cbnz	r3, 8009e12 <_svfiprintf_r+0x32>
 8009df8:	2140      	movs	r1, #64	; 0x40
 8009dfa:	f7ff ff21 	bl	8009c40 <_malloc_r>
 8009dfe:	6028      	str	r0, [r5, #0]
 8009e00:	6128      	str	r0, [r5, #16]
 8009e02:	b920      	cbnz	r0, 8009e0e <_svfiprintf_r+0x2e>
 8009e04:	230c      	movs	r3, #12
 8009e06:	603b      	str	r3, [r7, #0]
 8009e08:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0c:	e0d1      	b.n	8009fb2 <_svfiprintf_r+0x1d2>
 8009e0e:	2340      	movs	r3, #64	; 0x40
 8009e10:	616b      	str	r3, [r5, #20]
 8009e12:	2300      	movs	r3, #0
 8009e14:	9309      	str	r3, [sp, #36]	; 0x24
 8009e16:	2320      	movs	r3, #32
 8009e18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e20:	2330      	movs	r3, #48	; 0x30
 8009e22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009fcc <_svfiprintf_r+0x1ec>
 8009e26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2a:	f04f 0901 	mov.w	r9, #1
 8009e2e:	4623      	mov	r3, r4
 8009e30:	469a      	mov	sl, r3
 8009e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e36:	b10a      	cbz	r2, 8009e3c <_svfiprintf_r+0x5c>
 8009e38:	2a25      	cmp	r2, #37	; 0x25
 8009e3a:	d1f9      	bne.n	8009e30 <_svfiprintf_r+0x50>
 8009e3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e40:	d00b      	beq.n	8009e5a <_svfiprintf_r+0x7a>
 8009e42:	465b      	mov	r3, fp
 8009e44:	4622      	mov	r2, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	4638      	mov	r0, r7
 8009e4a:	f7ff ff6d 	bl	8009d28 <__ssputs_r>
 8009e4e:	3001      	adds	r0, #1
 8009e50:	f000 80aa 	beq.w	8009fa8 <_svfiprintf_r+0x1c8>
 8009e54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e56:	445a      	add	r2, fp
 8009e58:	9209      	str	r2, [sp, #36]	; 0x24
 8009e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 80a2 	beq.w	8009fa8 <_svfiprintf_r+0x1c8>
 8009e64:	2300      	movs	r3, #0
 8009e66:	f04f 32ff 	mov.w	r2, #4294967295
 8009e6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e6e:	f10a 0a01 	add.w	sl, sl, #1
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	9307      	str	r3, [sp, #28]
 8009e76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e7c:	4654      	mov	r4, sl
 8009e7e:	2205      	movs	r2, #5
 8009e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e84:	4851      	ldr	r0, [pc, #324]	; (8009fcc <_svfiprintf_r+0x1ec>)
 8009e86:	f7f6 f9c3 	bl	8000210 <memchr>
 8009e8a:	9a04      	ldr	r2, [sp, #16]
 8009e8c:	b9d8      	cbnz	r0, 8009ec6 <_svfiprintf_r+0xe6>
 8009e8e:	06d0      	lsls	r0, r2, #27
 8009e90:	bf44      	itt	mi
 8009e92:	2320      	movmi	r3, #32
 8009e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e98:	0711      	lsls	r1, r2, #28
 8009e9a:	bf44      	itt	mi
 8009e9c:	232b      	movmi	r3, #43	; 0x2b
 8009e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea8:	d015      	beq.n	8009ed6 <_svfiprintf_r+0xf6>
 8009eaa:	9a07      	ldr	r2, [sp, #28]
 8009eac:	4654      	mov	r4, sl
 8009eae:	2000      	movs	r0, #0
 8009eb0:	f04f 0c0a 	mov.w	ip, #10
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eba:	3b30      	subs	r3, #48	; 0x30
 8009ebc:	2b09      	cmp	r3, #9
 8009ebe:	d94e      	bls.n	8009f5e <_svfiprintf_r+0x17e>
 8009ec0:	b1b0      	cbz	r0, 8009ef0 <_svfiprintf_r+0x110>
 8009ec2:	9207      	str	r2, [sp, #28]
 8009ec4:	e014      	b.n	8009ef0 <_svfiprintf_r+0x110>
 8009ec6:	eba0 0308 	sub.w	r3, r0, r8
 8009eca:	fa09 f303 	lsl.w	r3, r9, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	9304      	str	r3, [sp, #16]
 8009ed2:	46a2      	mov	sl, r4
 8009ed4:	e7d2      	b.n	8009e7c <_svfiprintf_r+0x9c>
 8009ed6:	9b03      	ldr	r3, [sp, #12]
 8009ed8:	1d19      	adds	r1, r3, #4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	9103      	str	r1, [sp, #12]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	bfbb      	ittet	lt
 8009ee2:	425b      	neglt	r3, r3
 8009ee4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee8:	9307      	strge	r3, [sp, #28]
 8009eea:	9307      	strlt	r3, [sp, #28]
 8009eec:	bfb8      	it	lt
 8009eee:	9204      	strlt	r2, [sp, #16]
 8009ef0:	7823      	ldrb	r3, [r4, #0]
 8009ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef4:	d10c      	bne.n	8009f10 <_svfiprintf_r+0x130>
 8009ef6:	7863      	ldrb	r3, [r4, #1]
 8009ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8009efa:	d135      	bne.n	8009f68 <_svfiprintf_r+0x188>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	1d1a      	adds	r2, r3, #4
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	9203      	str	r2, [sp, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bfb8      	it	lt
 8009f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f0c:	3402      	adds	r4, #2
 8009f0e:	9305      	str	r3, [sp, #20]
 8009f10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009fdc <_svfiprintf_r+0x1fc>
 8009f14:	7821      	ldrb	r1, [r4, #0]
 8009f16:	2203      	movs	r2, #3
 8009f18:	4650      	mov	r0, sl
 8009f1a:	f7f6 f979 	bl	8000210 <memchr>
 8009f1e:	b140      	cbz	r0, 8009f32 <_svfiprintf_r+0x152>
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	eba0 000a 	sub.w	r0, r0, sl
 8009f26:	fa03 f000 	lsl.w	r0, r3, r0
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	4303      	orrs	r3, r0
 8009f2e:	3401      	adds	r4, #1
 8009f30:	9304      	str	r3, [sp, #16]
 8009f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f36:	4826      	ldr	r0, [pc, #152]	; (8009fd0 <_svfiprintf_r+0x1f0>)
 8009f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f3c:	2206      	movs	r2, #6
 8009f3e:	f7f6 f967 	bl	8000210 <memchr>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d038      	beq.n	8009fb8 <_svfiprintf_r+0x1d8>
 8009f46:	4b23      	ldr	r3, [pc, #140]	; (8009fd4 <_svfiprintf_r+0x1f4>)
 8009f48:	bb1b      	cbnz	r3, 8009f92 <_svfiprintf_r+0x1b2>
 8009f4a:	9b03      	ldr	r3, [sp, #12]
 8009f4c:	3307      	adds	r3, #7
 8009f4e:	f023 0307 	bic.w	r3, r3, #7
 8009f52:	3308      	adds	r3, #8
 8009f54:	9303      	str	r3, [sp, #12]
 8009f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f58:	4433      	add	r3, r6
 8009f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5c:	e767      	b.n	8009e2e <_svfiprintf_r+0x4e>
 8009f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f62:	460c      	mov	r4, r1
 8009f64:	2001      	movs	r0, #1
 8009f66:	e7a5      	b.n	8009eb4 <_svfiprintf_r+0xd4>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	3401      	adds	r4, #1
 8009f6c:	9305      	str	r3, [sp, #20]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	f04f 0c0a 	mov.w	ip, #10
 8009f74:	4620      	mov	r0, r4
 8009f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f7a:	3a30      	subs	r2, #48	; 0x30
 8009f7c:	2a09      	cmp	r2, #9
 8009f7e:	d903      	bls.n	8009f88 <_svfiprintf_r+0x1a8>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d0c5      	beq.n	8009f10 <_svfiprintf_r+0x130>
 8009f84:	9105      	str	r1, [sp, #20]
 8009f86:	e7c3      	b.n	8009f10 <_svfiprintf_r+0x130>
 8009f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7f0      	b.n	8009f74 <_svfiprintf_r+0x194>
 8009f92:	ab03      	add	r3, sp, #12
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	462a      	mov	r2, r5
 8009f98:	4b0f      	ldr	r3, [pc, #60]	; (8009fd8 <_svfiprintf_r+0x1f8>)
 8009f9a:	a904      	add	r1, sp, #16
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f7fc f9a1 	bl	80062e4 <_printf_float>
 8009fa2:	1c42      	adds	r2, r0, #1
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	d1d6      	bne.n	8009f56 <_svfiprintf_r+0x176>
 8009fa8:	89ab      	ldrh	r3, [r5, #12]
 8009faa:	065b      	lsls	r3, r3, #25
 8009fac:	f53f af2c 	bmi.w	8009e08 <_svfiprintf_r+0x28>
 8009fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fb2:	b01d      	add	sp, #116	; 0x74
 8009fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb8:	ab03      	add	r3, sp, #12
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	462a      	mov	r2, r5
 8009fbe:	4b06      	ldr	r3, [pc, #24]	; (8009fd8 <_svfiprintf_r+0x1f8>)
 8009fc0:	a904      	add	r1, sp, #16
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	f7fc fc32 	bl	800682c <_printf_i>
 8009fc8:	e7eb      	b.n	8009fa2 <_svfiprintf_r+0x1c2>
 8009fca:	bf00      	nop
 8009fcc:	0800cfb4 	.word	0x0800cfb4
 8009fd0:	0800cfbe 	.word	0x0800cfbe
 8009fd4:	080062e5 	.word	0x080062e5
 8009fd8:	08009d29 	.word	0x08009d29
 8009fdc:	0800cfba 	.word	0x0800cfba

08009fe0 <_sungetc_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	1c4b      	adds	r3, r1, #1
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	d103      	bne.n	8009ff0 <_sungetc_r+0x10>
 8009fe8:	f04f 35ff 	mov.w	r5, #4294967295
 8009fec:	4628      	mov	r0, r5
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	8993      	ldrh	r3, [r2, #12]
 8009ff2:	f023 0320 	bic.w	r3, r3, #32
 8009ff6:	8193      	strh	r3, [r2, #12]
 8009ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ffa:	6852      	ldr	r2, [r2, #4]
 8009ffc:	b2cd      	uxtb	r5, r1
 8009ffe:	b18b      	cbz	r3, 800a024 <_sungetc_r+0x44>
 800a000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a002:	4293      	cmp	r3, r2
 800a004:	dd08      	ble.n	800a018 <_sungetc_r+0x38>
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	1e5a      	subs	r2, r3, #1
 800a00a:	6022      	str	r2, [r4, #0]
 800a00c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a010:	6863      	ldr	r3, [r4, #4]
 800a012:	3301      	adds	r3, #1
 800a014:	6063      	str	r3, [r4, #4]
 800a016:	e7e9      	b.n	8009fec <_sungetc_r+0xc>
 800a018:	4621      	mov	r1, r4
 800a01a:	f000 fbf1 	bl	800a800 <__submore>
 800a01e:	2800      	cmp	r0, #0
 800a020:	d0f1      	beq.n	800a006 <_sungetc_r+0x26>
 800a022:	e7e1      	b.n	8009fe8 <_sungetc_r+0x8>
 800a024:	6921      	ldr	r1, [r4, #16]
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	b151      	cbz	r1, 800a040 <_sungetc_r+0x60>
 800a02a:	4299      	cmp	r1, r3
 800a02c:	d208      	bcs.n	800a040 <_sungetc_r+0x60>
 800a02e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a032:	42a9      	cmp	r1, r5
 800a034:	d104      	bne.n	800a040 <_sungetc_r+0x60>
 800a036:	3b01      	subs	r3, #1
 800a038:	3201      	adds	r2, #1
 800a03a:	6023      	str	r3, [r4, #0]
 800a03c:	6062      	str	r2, [r4, #4]
 800a03e:	e7d5      	b.n	8009fec <_sungetc_r+0xc>
 800a040:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a048:	6363      	str	r3, [r4, #52]	; 0x34
 800a04a:	2303      	movs	r3, #3
 800a04c:	63a3      	str	r3, [r4, #56]	; 0x38
 800a04e:	4623      	mov	r3, r4
 800a050:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	2301      	movs	r3, #1
 800a058:	e7dc      	b.n	800a014 <_sungetc_r+0x34>

0800a05a <__ssrefill_r>:
 800a05a:	b510      	push	{r4, lr}
 800a05c:	460c      	mov	r4, r1
 800a05e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a060:	b169      	cbz	r1, 800a07e <__ssrefill_r+0x24>
 800a062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a066:	4299      	cmp	r1, r3
 800a068:	d001      	beq.n	800a06e <__ssrefill_r+0x14>
 800a06a:	f7ff fd7d 	bl	8009b68 <_free_r>
 800a06e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a070:	6063      	str	r3, [r4, #4]
 800a072:	2000      	movs	r0, #0
 800a074:	6360      	str	r0, [r4, #52]	; 0x34
 800a076:	b113      	cbz	r3, 800a07e <__ssrefill_r+0x24>
 800a078:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a07a:	6023      	str	r3, [r4, #0]
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	6923      	ldr	r3, [r4, #16]
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	2300      	movs	r3, #0
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	89a3      	ldrh	r3, [r4, #12]
 800a088:	f043 0320 	orr.w	r3, r3, #32
 800a08c:	81a3      	strh	r3, [r4, #12]
 800a08e:	f04f 30ff 	mov.w	r0, #4294967295
 800a092:	e7f3      	b.n	800a07c <__ssrefill_r+0x22>

0800a094 <__ssvfiscanf_r>:
 800a094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	460c      	mov	r4, r1
 800a09a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a09e:	2100      	movs	r1, #0
 800a0a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a0a4:	49a6      	ldr	r1, [pc, #664]	; (800a340 <__ssvfiscanf_r+0x2ac>)
 800a0a6:	91a0      	str	r1, [sp, #640]	; 0x280
 800a0a8:	f10d 0804 	add.w	r8, sp, #4
 800a0ac:	49a5      	ldr	r1, [pc, #660]	; (800a344 <__ssvfiscanf_r+0x2b0>)
 800a0ae:	4fa6      	ldr	r7, [pc, #664]	; (800a348 <__ssvfiscanf_r+0x2b4>)
 800a0b0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a34c <__ssvfiscanf_r+0x2b8>
 800a0b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	91a1      	str	r1, [sp, #644]	; 0x284
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	7813      	ldrb	r3, [r2, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 815a 	beq.w	800a37a <__ssvfiscanf_r+0x2e6>
 800a0c6:	5dd9      	ldrb	r1, [r3, r7]
 800a0c8:	f011 0108 	ands.w	r1, r1, #8
 800a0cc:	f102 0501 	add.w	r5, r2, #1
 800a0d0:	d019      	beq.n	800a106 <__ssvfiscanf_r+0x72>
 800a0d2:	6863      	ldr	r3, [r4, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	dd0f      	ble.n	800a0f8 <__ssvfiscanf_r+0x64>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	781a      	ldrb	r2, [r3, #0]
 800a0dc:	5cba      	ldrb	r2, [r7, r2]
 800a0de:	0712      	lsls	r2, r2, #28
 800a0e0:	d401      	bmi.n	800a0e6 <__ssvfiscanf_r+0x52>
 800a0e2:	462a      	mov	r2, r5
 800a0e4:	e7eb      	b.n	800a0be <__ssvfiscanf_r+0x2a>
 800a0e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a0e8:	3201      	adds	r2, #1
 800a0ea:	9245      	str	r2, [sp, #276]	; 0x114
 800a0ec:	6862      	ldr	r2, [r4, #4]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	3a01      	subs	r2, #1
 800a0f2:	6062      	str	r2, [r4, #4]
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	e7ec      	b.n	800a0d2 <__ssvfiscanf_r+0x3e>
 800a0f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	4798      	blx	r3
 800a100:	2800      	cmp	r0, #0
 800a102:	d0e9      	beq.n	800a0d8 <__ssvfiscanf_r+0x44>
 800a104:	e7ed      	b.n	800a0e2 <__ssvfiscanf_r+0x4e>
 800a106:	2b25      	cmp	r3, #37	; 0x25
 800a108:	d012      	beq.n	800a130 <__ssvfiscanf_r+0x9c>
 800a10a:	469a      	mov	sl, r3
 800a10c:	6863      	ldr	r3, [r4, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f340 8091 	ble.w	800a236 <__ssvfiscanf_r+0x1a2>
 800a114:	6822      	ldr	r2, [r4, #0]
 800a116:	7813      	ldrb	r3, [r2, #0]
 800a118:	4553      	cmp	r3, sl
 800a11a:	f040 812e 	bne.w	800a37a <__ssvfiscanf_r+0x2e6>
 800a11e:	6863      	ldr	r3, [r4, #4]
 800a120:	3b01      	subs	r3, #1
 800a122:	6063      	str	r3, [r4, #4]
 800a124:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a126:	3201      	adds	r2, #1
 800a128:	3301      	adds	r3, #1
 800a12a:	6022      	str	r2, [r4, #0]
 800a12c:	9345      	str	r3, [sp, #276]	; 0x114
 800a12e:	e7d8      	b.n	800a0e2 <__ssvfiscanf_r+0x4e>
 800a130:	9141      	str	r1, [sp, #260]	; 0x104
 800a132:	9143      	str	r1, [sp, #268]	; 0x10c
 800a134:	7853      	ldrb	r3, [r2, #1]
 800a136:	2b2a      	cmp	r3, #42	; 0x2a
 800a138:	bf02      	ittt	eq
 800a13a:	2310      	moveq	r3, #16
 800a13c:	1c95      	addeq	r5, r2, #2
 800a13e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a140:	220a      	movs	r2, #10
 800a142:	46aa      	mov	sl, r5
 800a144:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a148:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	d91d      	bls.n	800a18c <__ssvfiscanf_r+0xf8>
 800a150:	487e      	ldr	r0, [pc, #504]	; (800a34c <__ssvfiscanf_r+0x2b8>)
 800a152:	2203      	movs	r2, #3
 800a154:	f7f6 f85c 	bl	8000210 <memchr>
 800a158:	b140      	cbz	r0, 800a16c <__ssvfiscanf_r+0xd8>
 800a15a:	2301      	movs	r3, #1
 800a15c:	eba0 0009 	sub.w	r0, r0, r9
 800a160:	fa03 f000 	lsl.w	r0, r3, r0
 800a164:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a166:	4318      	orrs	r0, r3
 800a168:	9041      	str	r0, [sp, #260]	; 0x104
 800a16a:	4655      	mov	r5, sl
 800a16c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a170:	2b78      	cmp	r3, #120	; 0x78
 800a172:	d806      	bhi.n	800a182 <__ssvfiscanf_r+0xee>
 800a174:	2b57      	cmp	r3, #87	; 0x57
 800a176:	d810      	bhi.n	800a19a <__ssvfiscanf_r+0x106>
 800a178:	2b25      	cmp	r3, #37	; 0x25
 800a17a:	d0c6      	beq.n	800a10a <__ssvfiscanf_r+0x76>
 800a17c:	d856      	bhi.n	800a22c <__ssvfiscanf_r+0x198>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d064      	beq.n	800a24c <__ssvfiscanf_r+0x1b8>
 800a182:	2303      	movs	r3, #3
 800a184:	9347      	str	r3, [sp, #284]	; 0x11c
 800a186:	230a      	movs	r3, #10
 800a188:	9342      	str	r3, [sp, #264]	; 0x108
 800a18a:	e071      	b.n	800a270 <__ssvfiscanf_r+0x1dc>
 800a18c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a18e:	fb02 1103 	mla	r1, r2, r3, r1
 800a192:	3930      	subs	r1, #48	; 0x30
 800a194:	9143      	str	r1, [sp, #268]	; 0x10c
 800a196:	4655      	mov	r5, sl
 800a198:	e7d3      	b.n	800a142 <__ssvfiscanf_r+0xae>
 800a19a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a19e:	2a20      	cmp	r2, #32
 800a1a0:	d8ef      	bhi.n	800a182 <__ssvfiscanf_r+0xee>
 800a1a2:	a101      	add	r1, pc, #4	; (adr r1, 800a1a8 <__ssvfiscanf_r+0x114>)
 800a1a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1a8:	0800a25b 	.word	0x0800a25b
 800a1ac:	0800a183 	.word	0x0800a183
 800a1b0:	0800a183 	.word	0x0800a183
 800a1b4:	0800a2b9 	.word	0x0800a2b9
 800a1b8:	0800a183 	.word	0x0800a183
 800a1bc:	0800a183 	.word	0x0800a183
 800a1c0:	0800a183 	.word	0x0800a183
 800a1c4:	0800a183 	.word	0x0800a183
 800a1c8:	0800a183 	.word	0x0800a183
 800a1cc:	0800a183 	.word	0x0800a183
 800a1d0:	0800a183 	.word	0x0800a183
 800a1d4:	0800a2cf 	.word	0x0800a2cf
 800a1d8:	0800a2a5 	.word	0x0800a2a5
 800a1dc:	0800a233 	.word	0x0800a233
 800a1e0:	0800a233 	.word	0x0800a233
 800a1e4:	0800a233 	.word	0x0800a233
 800a1e8:	0800a183 	.word	0x0800a183
 800a1ec:	0800a2a9 	.word	0x0800a2a9
 800a1f0:	0800a183 	.word	0x0800a183
 800a1f4:	0800a183 	.word	0x0800a183
 800a1f8:	0800a183 	.word	0x0800a183
 800a1fc:	0800a183 	.word	0x0800a183
 800a200:	0800a2df 	.word	0x0800a2df
 800a204:	0800a2b1 	.word	0x0800a2b1
 800a208:	0800a253 	.word	0x0800a253
 800a20c:	0800a183 	.word	0x0800a183
 800a210:	0800a183 	.word	0x0800a183
 800a214:	0800a2db 	.word	0x0800a2db
 800a218:	0800a183 	.word	0x0800a183
 800a21c:	0800a2a5 	.word	0x0800a2a5
 800a220:	0800a183 	.word	0x0800a183
 800a224:	0800a183 	.word	0x0800a183
 800a228:	0800a25b 	.word	0x0800a25b
 800a22c:	3b45      	subs	r3, #69	; 0x45
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d8a7      	bhi.n	800a182 <__ssvfiscanf_r+0xee>
 800a232:	2305      	movs	r3, #5
 800a234:	e01b      	b.n	800a26e <__ssvfiscanf_r+0x1da>
 800a236:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a238:	4621      	mov	r1, r4
 800a23a:	4630      	mov	r0, r6
 800a23c:	4798      	blx	r3
 800a23e:	2800      	cmp	r0, #0
 800a240:	f43f af68 	beq.w	800a114 <__ssvfiscanf_r+0x80>
 800a244:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a246:	2800      	cmp	r0, #0
 800a248:	f040 808d 	bne.w	800a366 <__ssvfiscanf_r+0x2d2>
 800a24c:	f04f 30ff 	mov.w	r0, #4294967295
 800a250:	e08f      	b.n	800a372 <__ssvfiscanf_r+0x2de>
 800a252:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a254:	f042 0220 	orr.w	r2, r2, #32
 800a258:	9241      	str	r2, [sp, #260]	; 0x104
 800a25a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a25c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a260:	9241      	str	r2, [sp, #260]	; 0x104
 800a262:	2210      	movs	r2, #16
 800a264:	2b6f      	cmp	r3, #111	; 0x6f
 800a266:	9242      	str	r2, [sp, #264]	; 0x108
 800a268:	bf34      	ite	cc
 800a26a:	2303      	movcc	r3, #3
 800a26c:	2304      	movcs	r3, #4
 800a26e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a270:	6863      	ldr	r3, [r4, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	dd42      	ble.n	800a2fc <__ssvfiscanf_r+0x268>
 800a276:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a278:	0659      	lsls	r1, r3, #25
 800a27a:	d404      	bmi.n	800a286 <__ssvfiscanf_r+0x1f2>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	781a      	ldrb	r2, [r3, #0]
 800a280:	5cba      	ldrb	r2, [r7, r2]
 800a282:	0712      	lsls	r2, r2, #28
 800a284:	d441      	bmi.n	800a30a <__ssvfiscanf_r+0x276>
 800a286:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a288:	2b02      	cmp	r3, #2
 800a28a:	dc50      	bgt.n	800a32e <__ssvfiscanf_r+0x29a>
 800a28c:	466b      	mov	r3, sp
 800a28e:	4622      	mov	r2, r4
 800a290:	a941      	add	r1, sp, #260	; 0x104
 800a292:	4630      	mov	r0, r6
 800a294:	f000 f876 	bl	800a384 <_scanf_chars>
 800a298:	2801      	cmp	r0, #1
 800a29a:	d06e      	beq.n	800a37a <__ssvfiscanf_r+0x2e6>
 800a29c:	2802      	cmp	r0, #2
 800a29e:	f47f af20 	bne.w	800a0e2 <__ssvfiscanf_r+0x4e>
 800a2a2:	e7cf      	b.n	800a244 <__ssvfiscanf_r+0x1b0>
 800a2a4:	220a      	movs	r2, #10
 800a2a6:	e7dd      	b.n	800a264 <__ssvfiscanf_r+0x1d0>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9342      	str	r3, [sp, #264]	; 0x108
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e7de      	b.n	800a26e <__ssvfiscanf_r+0x1da>
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	9342      	str	r3, [sp, #264]	; 0x108
 800a2b4:	2304      	movs	r3, #4
 800a2b6:	e7da      	b.n	800a26e <__ssvfiscanf_r+0x1da>
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	f000 f9e0 	bl	800a680 <__sccl>
 800a2c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2c6:	9341      	str	r3, [sp, #260]	; 0x104
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e7cf      	b.n	800a26e <__ssvfiscanf_r+0x1da>
 800a2ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d4:	9341      	str	r3, [sp, #260]	; 0x104
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	e7c9      	b.n	800a26e <__ssvfiscanf_r+0x1da>
 800a2da:	2302      	movs	r3, #2
 800a2dc:	e7c7      	b.n	800a26e <__ssvfiscanf_r+0x1da>
 800a2de:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a2e0:	06c3      	lsls	r3, r0, #27
 800a2e2:	f53f aefe 	bmi.w	800a0e2 <__ssvfiscanf_r+0x4e>
 800a2e6:	9b00      	ldr	r3, [sp, #0]
 800a2e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a2ea:	1d19      	adds	r1, r3, #4
 800a2ec:	9100      	str	r1, [sp, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f010 0f01 	tst.w	r0, #1
 800a2f4:	bf14      	ite	ne
 800a2f6:	801a      	strhne	r2, [r3, #0]
 800a2f8:	601a      	streq	r2, [r3, #0]
 800a2fa:	e6f2      	b.n	800a0e2 <__ssvfiscanf_r+0x4e>
 800a2fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2fe:	4621      	mov	r1, r4
 800a300:	4630      	mov	r0, r6
 800a302:	4798      	blx	r3
 800a304:	2800      	cmp	r0, #0
 800a306:	d0b6      	beq.n	800a276 <__ssvfiscanf_r+0x1e2>
 800a308:	e79c      	b.n	800a244 <__ssvfiscanf_r+0x1b0>
 800a30a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a30c:	3201      	adds	r2, #1
 800a30e:	9245      	str	r2, [sp, #276]	; 0x114
 800a310:	6862      	ldr	r2, [r4, #4]
 800a312:	3a01      	subs	r2, #1
 800a314:	2a00      	cmp	r2, #0
 800a316:	6062      	str	r2, [r4, #4]
 800a318:	dd02      	ble.n	800a320 <__ssvfiscanf_r+0x28c>
 800a31a:	3301      	adds	r3, #1
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	e7ad      	b.n	800a27c <__ssvfiscanf_r+0x1e8>
 800a320:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a322:	4621      	mov	r1, r4
 800a324:	4630      	mov	r0, r6
 800a326:	4798      	blx	r3
 800a328:	2800      	cmp	r0, #0
 800a32a:	d0a7      	beq.n	800a27c <__ssvfiscanf_r+0x1e8>
 800a32c:	e78a      	b.n	800a244 <__ssvfiscanf_r+0x1b0>
 800a32e:	2b04      	cmp	r3, #4
 800a330:	dc0e      	bgt.n	800a350 <__ssvfiscanf_r+0x2bc>
 800a332:	466b      	mov	r3, sp
 800a334:	4622      	mov	r2, r4
 800a336:	a941      	add	r1, sp, #260	; 0x104
 800a338:	4630      	mov	r0, r6
 800a33a:	f000 f87d 	bl	800a438 <_scanf_i>
 800a33e:	e7ab      	b.n	800a298 <__ssvfiscanf_r+0x204>
 800a340:	08009fe1 	.word	0x08009fe1
 800a344:	0800a05b 	.word	0x0800a05b
 800a348:	0800cc51 	.word	0x0800cc51
 800a34c:	0800cfba 	.word	0x0800cfba
 800a350:	4b0b      	ldr	r3, [pc, #44]	; (800a380 <__ssvfiscanf_r+0x2ec>)
 800a352:	2b00      	cmp	r3, #0
 800a354:	f43f aec5 	beq.w	800a0e2 <__ssvfiscanf_r+0x4e>
 800a358:	466b      	mov	r3, sp
 800a35a:	4622      	mov	r2, r4
 800a35c:	a941      	add	r1, sp, #260	; 0x104
 800a35e:	4630      	mov	r0, r6
 800a360:	f7fc fb8a 	bl	8006a78 <_scanf_float>
 800a364:	e798      	b.n	800a298 <__ssvfiscanf_r+0x204>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a36c:	bf18      	it	ne
 800a36e:	f04f 30ff 	movne.w	r0, #4294967295
 800a372:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a37c:	e7f9      	b.n	800a372 <__ssvfiscanf_r+0x2de>
 800a37e:	bf00      	nop
 800a380:	08006a79 	.word	0x08006a79

0800a384 <_scanf_chars>:
 800a384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a388:	4615      	mov	r5, r2
 800a38a:	688a      	ldr	r2, [r1, #8]
 800a38c:	4680      	mov	r8, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	b932      	cbnz	r2, 800a3a0 <_scanf_chars+0x1c>
 800a392:	698a      	ldr	r2, [r1, #24]
 800a394:	2a00      	cmp	r2, #0
 800a396:	bf0c      	ite	eq
 800a398:	2201      	moveq	r2, #1
 800a39a:	f04f 32ff 	movne.w	r2, #4294967295
 800a39e:	608a      	str	r2, [r1, #8]
 800a3a0:	6822      	ldr	r2, [r4, #0]
 800a3a2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a434 <_scanf_chars+0xb0>
 800a3a6:	06d1      	lsls	r1, r2, #27
 800a3a8:	bf5f      	itttt	pl
 800a3aa:	681a      	ldrpl	r2, [r3, #0]
 800a3ac:	1d11      	addpl	r1, r2, #4
 800a3ae:	6019      	strpl	r1, [r3, #0]
 800a3b0:	6816      	ldrpl	r6, [r2, #0]
 800a3b2:	2700      	movs	r7, #0
 800a3b4:	69a0      	ldr	r0, [r4, #24]
 800a3b6:	b188      	cbz	r0, 800a3dc <_scanf_chars+0x58>
 800a3b8:	2801      	cmp	r0, #1
 800a3ba:	d107      	bne.n	800a3cc <_scanf_chars+0x48>
 800a3bc:	682a      	ldr	r2, [r5, #0]
 800a3be:	7811      	ldrb	r1, [r2, #0]
 800a3c0:	6962      	ldr	r2, [r4, #20]
 800a3c2:	5c52      	ldrb	r2, [r2, r1]
 800a3c4:	b952      	cbnz	r2, 800a3dc <_scanf_chars+0x58>
 800a3c6:	2f00      	cmp	r7, #0
 800a3c8:	d031      	beq.n	800a42e <_scanf_chars+0xaa>
 800a3ca:	e022      	b.n	800a412 <_scanf_chars+0x8e>
 800a3cc:	2802      	cmp	r0, #2
 800a3ce:	d120      	bne.n	800a412 <_scanf_chars+0x8e>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a3d8:	071b      	lsls	r3, r3, #28
 800a3da:	d41a      	bmi.n	800a412 <_scanf_chars+0x8e>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	06da      	lsls	r2, r3, #27
 800a3e0:	bf5e      	ittt	pl
 800a3e2:	682b      	ldrpl	r3, [r5, #0]
 800a3e4:	781b      	ldrbpl	r3, [r3, #0]
 800a3e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a3ea:	682a      	ldr	r2, [r5, #0]
 800a3ec:	686b      	ldr	r3, [r5, #4]
 800a3ee:	3201      	adds	r2, #1
 800a3f0:	602a      	str	r2, [r5, #0]
 800a3f2:	68a2      	ldr	r2, [r4, #8]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	3a01      	subs	r2, #1
 800a3f8:	606b      	str	r3, [r5, #4]
 800a3fa:	3701      	adds	r7, #1
 800a3fc:	60a2      	str	r2, [r4, #8]
 800a3fe:	b142      	cbz	r2, 800a412 <_scanf_chars+0x8e>
 800a400:	2b00      	cmp	r3, #0
 800a402:	dcd7      	bgt.n	800a3b4 <_scanf_chars+0x30>
 800a404:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a408:	4629      	mov	r1, r5
 800a40a:	4640      	mov	r0, r8
 800a40c:	4798      	blx	r3
 800a40e:	2800      	cmp	r0, #0
 800a410:	d0d0      	beq.n	800a3b4 <_scanf_chars+0x30>
 800a412:	6823      	ldr	r3, [r4, #0]
 800a414:	f013 0310 	ands.w	r3, r3, #16
 800a418:	d105      	bne.n	800a426 <_scanf_chars+0xa2>
 800a41a:	68e2      	ldr	r2, [r4, #12]
 800a41c:	3201      	adds	r2, #1
 800a41e:	60e2      	str	r2, [r4, #12]
 800a420:	69a2      	ldr	r2, [r4, #24]
 800a422:	b102      	cbz	r2, 800a426 <_scanf_chars+0xa2>
 800a424:	7033      	strb	r3, [r6, #0]
 800a426:	6923      	ldr	r3, [r4, #16]
 800a428:	443b      	add	r3, r7
 800a42a:	6123      	str	r3, [r4, #16]
 800a42c:	2000      	movs	r0, #0
 800a42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a432:	bf00      	nop
 800a434:	0800cc51 	.word	0x0800cc51

0800a438 <_scanf_i>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	4698      	mov	r8, r3
 800a43e:	4b76      	ldr	r3, [pc, #472]	; (800a618 <_scanf_i+0x1e0>)
 800a440:	460c      	mov	r4, r1
 800a442:	4682      	mov	sl, r0
 800a444:	4616      	mov	r6, r2
 800a446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a44a:	b087      	sub	sp, #28
 800a44c:	ab03      	add	r3, sp, #12
 800a44e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a452:	4b72      	ldr	r3, [pc, #456]	; (800a61c <_scanf_i+0x1e4>)
 800a454:	69a1      	ldr	r1, [r4, #24]
 800a456:	4a72      	ldr	r2, [pc, #456]	; (800a620 <_scanf_i+0x1e8>)
 800a458:	2903      	cmp	r1, #3
 800a45a:	bf18      	it	ne
 800a45c:	461a      	movne	r2, r3
 800a45e:	68a3      	ldr	r3, [r4, #8]
 800a460:	9201      	str	r2, [sp, #4]
 800a462:	1e5a      	subs	r2, r3, #1
 800a464:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a468:	bf88      	it	hi
 800a46a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a46e:	4627      	mov	r7, r4
 800a470:	bf82      	ittt	hi
 800a472:	eb03 0905 	addhi.w	r9, r3, r5
 800a476:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a47a:	60a3      	strhi	r3, [r4, #8]
 800a47c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a480:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a484:	bf98      	it	ls
 800a486:	f04f 0900 	movls.w	r9, #0
 800a48a:	6023      	str	r3, [r4, #0]
 800a48c:	463d      	mov	r5, r7
 800a48e:	f04f 0b00 	mov.w	fp, #0
 800a492:	6831      	ldr	r1, [r6, #0]
 800a494:	ab03      	add	r3, sp, #12
 800a496:	7809      	ldrb	r1, [r1, #0]
 800a498:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a49c:	2202      	movs	r2, #2
 800a49e:	f7f5 feb7 	bl	8000210 <memchr>
 800a4a2:	b328      	cbz	r0, 800a4f0 <_scanf_i+0xb8>
 800a4a4:	f1bb 0f01 	cmp.w	fp, #1
 800a4a8:	d159      	bne.n	800a55e <_scanf_i+0x126>
 800a4aa:	6862      	ldr	r2, [r4, #4]
 800a4ac:	b92a      	cbnz	r2, 800a4ba <_scanf_i+0x82>
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	2308      	movs	r3, #8
 800a4b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4b6:	6063      	str	r3, [r4, #4]
 800a4b8:	6022      	str	r2, [r4, #0]
 800a4ba:	6822      	ldr	r2, [r4, #0]
 800a4bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a4c0:	6022      	str	r2, [r4, #0]
 800a4c2:	68a2      	ldr	r2, [r4, #8]
 800a4c4:	1e51      	subs	r1, r2, #1
 800a4c6:	60a1      	str	r1, [r4, #8]
 800a4c8:	b192      	cbz	r2, 800a4f0 <_scanf_i+0xb8>
 800a4ca:	6832      	ldr	r2, [r6, #0]
 800a4cc:	1c51      	adds	r1, r2, #1
 800a4ce:	6031      	str	r1, [r6, #0]
 800a4d0:	7812      	ldrb	r2, [r2, #0]
 800a4d2:	f805 2b01 	strb.w	r2, [r5], #1
 800a4d6:	6872      	ldr	r2, [r6, #4]
 800a4d8:	3a01      	subs	r2, #1
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	6072      	str	r2, [r6, #4]
 800a4de:	dc07      	bgt.n	800a4f0 <_scanf_i+0xb8>
 800a4e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a4e4:	4631      	mov	r1, r6
 800a4e6:	4650      	mov	r0, sl
 800a4e8:	4790      	blx	r2
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	f040 8085 	bne.w	800a5fa <_scanf_i+0x1c2>
 800a4f0:	f10b 0b01 	add.w	fp, fp, #1
 800a4f4:	f1bb 0f03 	cmp.w	fp, #3
 800a4f8:	d1cb      	bne.n	800a492 <_scanf_i+0x5a>
 800a4fa:	6863      	ldr	r3, [r4, #4]
 800a4fc:	b90b      	cbnz	r3, 800a502 <_scanf_i+0xca>
 800a4fe:	230a      	movs	r3, #10
 800a500:	6063      	str	r3, [r4, #4]
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	4947      	ldr	r1, [pc, #284]	; (800a624 <_scanf_i+0x1ec>)
 800a506:	6960      	ldr	r0, [r4, #20]
 800a508:	1ac9      	subs	r1, r1, r3
 800a50a:	f000 f8b9 	bl	800a680 <__sccl>
 800a50e:	f04f 0b00 	mov.w	fp, #0
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	6822      	ldr	r2, [r4, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d03d      	beq.n	800a596 <_scanf_i+0x15e>
 800a51a:	6831      	ldr	r1, [r6, #0]
 800a51c:	6960      	ldr	r0, [r4, #20]
 800a51e:	f891 c000 	ldrb.w	ip, [r1]
 800a522:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a526:	2800      	cmp	r0, #0
 800a528:	d035      	beq.n	800a596 <_scanf_i+0x15e>
 800a52a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a52e:	d124      	bne.n	800a57a <_scanf_i+0x142>
 800a530:	0510      	lsls	r0, r2, #20
 800a532:	d522      	bpl.n	800a57a <_scanf_i+0x142>
 800a534:	f10b 0b01 	add.w	fp, fp, #1
 800a538:	f1b9 0f00 	cmp.w	r9, #0
 800a53c:	d003      	beq.n	800a546 <_scanf_i+0x10e>
 800a53e:	3301      	adds	r3, #1
 800a540:	f109 39ff 	add.w	r9, r9, #4294967295
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	6873      	ldr	r3, [r6, #4]
 800a548:	3b01      	subs	r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	6073      	str	r3, [r6, #4]
 800a54e:	dd1b      	ble.n	800a588 <_scanf_i+0x150>
 800a550:	6833      	ldr	r3, [r6, #0]
 800a552:	3301      	adds	r3, #1
 800a554:	6033      	str	r3, [r6, #0]
 800a556:	68a3      	ldr	r3, [r4, #8]
 800a558:	3b01      	subs	r3, #1
 800a55a:	60a3      	str	r3, [r4, #8]
 800a55c:	e7d9      	b.n	800a512 <_scanf_i+0xda>
 800a55e:	f1bb 0f02 	cmp.w	fp, #2
 800a562:	d1ae      	bne.n	800a4c2 <_scanf_i+0x8a>
 800a564:	6822      	ldr	r2, [r4, #0]
 800a566:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a56a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a56e:	d1bf      	bne.n	800a4f0 <_scanf_i+0xb8>
 800a570:	2310      	movs	r3, #16
 800a572:	6063      	str	r3, [r4, #4]
 800a574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a578:	e7a2      	b.n	800a4c0 <_scanf_i+0x88>
 800a57a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a57e:	6022      	str	r2, [r4, #0]
 800a580:	780b      	ldrb	r3, [r1, #0]
 800a582:	f805 3b01 	strb.w	r3, [r5], #1
 800a586:	e7de      	b.n	800a546 <_scanf_i+0x10e>
 800a588:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a58c:	4631      	mov	r1, r6
 800a58e:	4650      	mov	r0, sl
 800a590:	4798      	blx	r3
 800a592:	2800      	cmp	r0, #0
 800a594:	d0df      	beq.n	800a556 <_scanf_i+0x11e>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	05db      	lsls	r3, r3, #23
 800a59a:	d50d      	bpl.n	800a5b8 <_scanf_i+0x180>
 800a59c:	42bd      	cmp	r5, r7
 800a59e:	d909      	bls.n	800a5b4 <_scanf_i+0x17c>
 800a5a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a5a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	4798      	blx	r3
 800a5ae:	f105 39ff 	add.w	r9, r5, #4294967295
 800a5b2:	464d      	mov	r5, r9
 800a5b4:	42bd      	cmp	r5, r7
 800a5b6:	d02d      	beq.n	800a614 <_scanf_i+0x1dc>
 800a5b8:	6822      	ldr	r2, [r4, #0]
 800a5ba:	f012 0210 	ands.w	r2, r2, #16
 800a5be:	d113      	bne.n	800a5e8 <_scanf_i+0x1b0>
 800a5c0:	702a      	strb	r2, [r5, #0]
 800a5c2:	6863      	ldr	r3, [r4, #4]
 800a5c4:	9e01      	ldr	r6, [sp, #4]
 800a5c6:	4639      	mov	r1, r7
 800a5c8:	4650      	mov	r0, sl
 800a5ca:	47b0      	blx	r6
 800a5cc:	6821      	ldr	r1, [r4, #0]
 800a5ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a5d2:	f011 0f20 	tst.w	r1, #32
 800a5d6:	d013      	beq.n	800a600 <_scanf_i+0x1c8>
 800a5d8:	1d1a      	adds	r2, r3, #4
 800a5da:	f8c8 2000 	str.w	r2, [r8]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6018      	str	r0, [r3, #0]
 800a5e2:	68e3      	ldr	r3, [r4, #12]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	60e3      	str	r3, [r4, #12]
 800a5e8:	1bed      	subs	r5, r5, r7
 800a5ea:	44ab      	add	fp, r5
 800a5ec:	6925      	ldr	r5, [r4, #16]
 800a5ee:	445d      	add	r5, fp
 800a5f0:	6125      	str	r5, [r4, #16]
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	b007      	add	sp, #28
 800a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fa:	f04f 0b00 	mov.w	fp, #0
 800a5fe:	e7ca      	b.n	800a596 <_scanf_i+0x15e>
 800a600:	1d1a      	adds	r2, r3, #4
 800a602:	f8c8 2000 	str.w	r2, [r8]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f011 0f01 	tst.w	r1, #1
 800a60c:	bf14      	ite	ne
 800a60e:	8018      	strhne	r0, [r3, #0]
 800a610:	6018      	streq	r0, [r3, #0]
 800a612:	e7e6      	b.n	800a5e2 <_scanf_i+0x1aa>
 800a614:	2001      	movs	r0, #1
 800a616:	e7ed      	b.n	800a5f4 <_scanf_i+0x1bc>
 800a618:	0800cbb8 	.word	0x0800cbb8
 800a61c:	0800a7fd 	.word	0x0800a7fd
 800a620:	08007d1d 	.word	0x08007d1d
 800a624:	0800cfde 	.word	0x0800cfde

0800a628 <_read_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d07      	ldr	r5, [pc, #28]	; (800a648 <_read_r+0x20>)
 800a62c:	4604      	mov	r4, r0
 800a62e:	4608      	mov	r0, r1
 800a630:	4611      	mov	r1, r2
 800a632:	2200      	movs	r2, #0
 800a634:	602a      	str	r2, [r5, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	f7f8 fdad 	bl	8003196 <_read>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_read_r+0x1e>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_read_r+0x1e>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	20000d60 	.word	0x20000d60
 800a64c:	00000000 	.word	0x00000000

0800a650 <nan>:
 800a650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a658 <nan+0x8>
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	00000000 	.word	0x00000000
 800a65c:	7ff80000 	.word	0x7ff80000

0800a660 <_sbrk_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d06      	ldr	r5, [pc, #24]	; (800a67c <_sbrk_r+0x1c>)
 800a664:	2300      	movs	r3, #0
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	602b      	str	r3, [r5, #0]
 800a66c:	f7f8 fe00 	bl	8003270 <_sbrk>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_sbrk_r+0x1a>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_sbrk_r+0x1a>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	20000d60 	.word	0x20000d60

0800a680 <__sccl>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	780b      	ldrb	r3, [r1, #0]
 800a684:	4604      	mov	r4, r0
 800a686:	2b5e      	cmp	r3, #94	; 0x5e
 800a688:	bf0b      	itete	eq
 800a68a:	784b      	ldrbeq	r3, [r1, #1]
 800a68c:	1c48      	addne	r0, r1, #1
 800a68e:	1c88      	addeq	r0, r1, #2
 800a690:	2200      	movne	r2, #0
 800a692:	bf08      	it	eq
 800a694:	2201      	moveq	r2, #1
 800a696:	1e61      	subs	r1, r4, #1
 800a698:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a69c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a6a0:	42a9      	cmp	r1, r5
 800a6a2:	d1fb      	bne.n	800a69c <__sccl+0x1c>
 800a6a4:	b90b      	cbnz	r3, 800a6aa <__sccl+0x2a>
 800a6a6:	3801      	subs	r0, #1
 800a6a8:	bd70      	pop	{r4, r5, r6, pc}
 800a6aa:	f082 0201 	eor.w	r2, r2, #1
 800a6ae:	54e2      	strb	r2, [r4, r3]
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a6b8:	292d      	cmp	r1, #45	; 0x2d
 800a6ba:	d006      	beq.n	800a6ca <__sccl+0x4a>
 800a6bc:	295d      	cmp	r1, #93	; 0x5d
 800a6be:	d0f3      	beq.n	800a6a8 <__sccl+0x28>
 800a6c0:	b909      	cbnz	r1, 800a6c6 <__sccl+0x46>
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	e7f0      	b.n	800a6a8 <__sccl+0x28>
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	e7f1      	b.n	800a6ae <__sccl+0x2e>
 800a6ca:	786e      	ldrb	r6, [r5, #1]
 800a6cc:	2e5d      	cmp	r6, #93	; 0x5d
 800a6ce:	d0fa      	beq.n	800a6c6 <__sccl+0x46>
 800a6d0:	42b3      	cmp	r3, r6
 800a6d2:	dcf8      	bgt.n	800a6c6 <__sccl+0x46>
 800a6d4:	3502      	adds	r5, #2
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	3101      	adds	r1, #1
 800a6da:	428e      	cmp	r6, r1
 800a6dc:	5462      	strb	r2, [r4, r1]
 800a6de:	dcfb      	bgt.n	800a6d8 <__sccl+0x58>
 800a6e0:	1af1      	subs	r1, r6, r3
 800a6e2:	3901      	subs	r1, #1
 800a6e4:	1c58      	adds	r0, r3, #1
 800a6e6:	42b3      	cmp	r3, r6
 800a6e8:	bfa8      	it	ge
 800a6ea:	2100      	movge	r1, #0
 800a6ec:	1843      	adds	r3, r0, r1
 800a6ee:	e7e0      	b.n	800a6b2 <__sccl+0x32>

0800a6f0 <strncmp>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	b17a      	cbz	r2, 800a714 <strncmp+0x24>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	3901      	subs	r1, #1
 800a6f8:	1884      	adds	r4, r0, r2
 800a6fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a6fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a702:	4290      	cmp	r0, r2
 800a704:	d101      	bne.n	800a70a <strncmp+0x1a>
 800a706:	42a3      	cmp	r3, r4
 800a708:	d101      	bne.n	800a70e <strncmp+0x1e>
 800a70a:	1a80      	subs	r0, r0, r2
 800a70c:	bd10      	pop	{r4, pc}
 800a70e:	2800      	cmp	r0, #0
 800a710:	d1f3      	bne.n	800a6fa <strncmp+0xa>
 800a712:	e7fa      	b.n	800a70a <strncmp+0x1a>
 800a714:	4610      	mov	r0, r2
 800a716:	e7f9      	b.n	800a70c <strncmp+0x1c>

0800a718 <_strtoul_l.constprop.0>:
 800a718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a71c:	4f36      	ldr	r7, [pc, #216]	; (800a7f8 <_strtoul_l.constprop.0+0xe0>)
 800a71e:	4686      	mov	lr, r0
 800a720:	460d      	mov	r5, r1
 800a722:	4628      	mov	r0, r5
 800a724:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a728:	5de6      	ldrb	r6, [r4, r7]
 800a72a:	f016 0608 	ands.w	r6, r6, #8
 800a72e:	d1f8      	bne.n	800a722 <_strtoul_l.constprop.0+0xa>
 800a730:	2c2d      	cmp	r4, #45	; 0x2d
 800a732:	d12f      	bne.n	800a794 <_strtoul_l.constprop.0+0x7c>
 800a734:	782c      	ldrb	r4, [r5, #0]
 800a736:	2601      	movs	r6, #1
 800a738:	1c85      	adds	r5, r0, #2
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d057      	beq.n	800a7ee <_strtoul_l.constprop.0+0xd6>
 800a73e:	2b10      	cmp	r3, #16
 800a740:	d109      	bne.n	800a756 <_strtoul_l.constprop.0+0x3e>
 800a742:	2c30      	cmp	r4, #48	; 0x30
 800a744:	d107      	bne.n	800a756 <_strtoul_l.constprop.0+0x3e>
 800a746:	7828      	ldrb	r0, [r5, #0]
 800a748:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a74c:	2858      	cmp	r0, #88	; 0x58
 800a74e:	d149      	bne.n	800a7e4 <_strtoul_l.constprop.0+0xcc>
 800a750:	786c      	ldrb	r4, [r5, #1]
 800a752:	2310      	movs	r3, #16
 800a754:	3502      	adds	r5, #2
 800a756:	f04f 38ff 	mov.w	r8, #4294967295
 800a75a:	2700      	movs	r7, #0
 800a75c:	fbb8 f8f3 	udiv	r8, r8, r3
 800a760:	fb03 f908 	mul.w	r9, r3, r8
 800a764:	ea6f 0909 	mvn.w	r9, r9
 800a768:	4638      	mov	r0, r7
 800a76a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a76e:	f1bc 0f09 	cmp.w	ip, #9
 800a772:	d814      	bhi.n	800a79e <_strtoul_l.constprop.0+0x86>
 800a774:	4664      	mov	r4, ip
 800a776:	42a3      	cmp	r3, r4
 800a778:	dd22      	ble.n	800a7c0 <_strtoul_l.constprop.0+0xa8>
 800a77a:	2f00      	cmp	r7, #0
 800a77c:	db1d      	blt.n	800a7ba <_strtoul_l.constprop.0+0xa2>
 800a77e:	4580      	cmp	r8, r0
 800a780:	d31b      	bcc.n	800a7ba <_strtoul_l.constprop.0+0xa2>
 800a782:	d101      	bne.n	800a788 <_strtoul_l.constprop.0+0x70>
 800a784:	45a1      	cmp	r9, r4
 800a786:	db18      	blt.n	800a7ba <_strtoul_l.constprop.0+0xa2>
 800a788:	fb00 4003 	mla	r0, r0, r3, r4
 800a78c:	2701      	movs	r7, #1
 800a78e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a792:	e7ea      	b.n	800a76a <_strtoul_l.constprop.0+0x52>
 800a794:	2c2b      	cmp	r4, #43	; 0x2b
 800a796:	bf04      	itt	eq
 800a798:	782c      	ldrbeq	r4, [r5, #0]
 800a79a:	1c85      	addeq	r5, r0, #2
 800a79c:	e7cd      	b.n	800a73a <_strtoul_l.constprop.0+0x22>
 800a79e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a7a2:	f1bc 0f19 	cmp.w	ip, #25
 800a7a6:	d801      	bhi.n	800a7ac <_strtoul_l.constprop.0+0x94>
 800a7a8:	3c37      	subs	r4, #55	; 0x37
 800a7aa:	e7e4      	b.n	800a776 <_strtoul_l.constprop.0+0x5e>
 800a7ac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a7b0:	f1bc 0f19 	cmp.w	ip, #25
 800a7b4:	d804      	bhi.n	800a7c0 <_strtoul_l.constprop.0+0xa8>
 800a7b6:	3c57      	subs	r4, #87	; 0x57
 800a7b8:	e7dd      	b.n	800a776 <_strtoul_l.constprop.0+0x5e>
 800a7ba:	f04f 37ff 	mov.w	r7, #4294967295
 800a7be:	e7e6      	b.n	800a78e <_strtoul_l.constprop.0+0x76>
 800a7c0:	2f00      	cmp	r7, #0
 800a7c2:	da07      	bge.n	800a7d4 <_strtoul_l.constprop.0+0xbc>
 800a7c4:	2322      	movs	r3, #34	; 0x22
 800a7c6:	f8ce 3000 	str.w	r3, [lr]
 800a7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ce:	b932      	cbnz	r2, 800a7de <_strtoul_l.constprop.0+0xc6>
 800a7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7d4:	b106      	cbz	r6, 800a7d8 <_strtoul_l.constprop.0+0xc0>
 800a7d6:	4240      	negs	r0, r0
 800a7d8:	2a00      	cmp	r2, #0
 800a7da:	d0f9      	beq.n	800a7d0 <_strtoul_l.constprop.0+0xb8>
 800a7dc:	b107      	cbz	r7, 800a7e0 <_strtoul_l.constprop.0+0xc8>
 800a7de:	1e69      	subs	r1, r5, #1
 800a7e0:	6011      	str	r1, [r2, #0]
 800a7e2:	e7f5      	b.n	800a7d0 <_strtoul_l.constprop.0+0xb8>
 800a7e4:	2430      	movs	r4, #48	; 0x30
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1b5      	bne.n	800a756 <_strtoul_l.constprop.0+0x3e>
 800a7ea:	2308      	movs	r3, #8
 800a7ec:	e7b3      	b.n	800a756 <_strtoul_l.constprop.0+0x3e>
 800a7ee:	2c30      	cmp	r4, #48	; 0x30
 800a7f0:	d0a9      	beq.n	800a746 <_strtoul_l.constprop.0+0x2e>
 800a7f2:	230a      	movs	r3, #10
 800a7f4:	e7af      	b.n	800a756 <_strtoul_l.constprop.0+0x3e>
 800a7f6:	bf00      	nop
 800a7f8:	0800cc51 	.word	0x0800cc51

0800a7fc <_strtoul_r>:
 800a7fc:	f7ff bf8c 	b.w	800a718 <_strtoul_l.constprop.0>

0800a800 <__submore>:
 800a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a804:	460c      	mov	r4, r1
 800a806:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a80c:	4299      	cmp	r1, r3
 800a80e:	d11d      	bne.n	800a84c <__submore+0x4c>
 800a810:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a814:	f7ff fa14 	bl	8009c40 <_malloc_r>
 800a818:	b918      	cbnz	r0, 800a822 <__submore+0x22>
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295
 800a81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a826:	63a3      	str	r3, [r4, #56]	; 0x38
 800a828:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a82c:	6360      	str	r0, [r4, #52]	; 0x34
 800a82e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a832:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a836:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a83a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a83e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a842:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a846:	6020      	str	r0, [r4, #0]
 800a848:	2000      	movs	r0, #0
 800a84a:	e7e8      	b.n	800a81e <__submore+0x1e>
 800a84c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a84e:	0077      	lsls	r7, r6, #1
 800a850:	463a      	mov	r2, r7
 800a852:	f000 fa2d 	bl	800acb0 <_realloc_r>
 800a856:	4605      	mov	r5, r0
 800a858:	2800      	cmp	r0, #0
 800a85a:	d0de      	beq.n	800a81a <__submore+0x1a>
 800a85c:	eb00 0806 	add.w	r8, r0, r6
 800a860:	4601      	mov	r1, r0
 800a862:	4632      	mov	r2, r6
 800a864:	4640      	mov	r0, r8
 800a866:	f7fe fc99 	bl	800919c <memcpy>
 800a86a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a86e:	f8c4 8000 	str.w	r8, [r4]
 800a872:	e7e9      	b.n	800a848 <__submore+0x48>

0800a874 <__ascii_wctomb>:
 800a874:	b149      	cbz	r1, 800a88a <__ascii_wctomb+0x16>
 800a876:	2aff      	cmp	r2, #255	; 0xff
 800a878:	bf85      	ittet	hi
 800a87a:	238a      	movhi	r3, #138	; 0x8a
 800a87c:	6003      	strhi	r3, [r0, #0]
 800a87e:	700a      	strbls	r2, [r1, #0]
 800a880:	f04f 30ff 	movhi.w	r0, #4294967295
 800a884:	bf98      	it	ls
 800a886:	2001      	movls	r0, #1
 800a888:	4770      	bx	lr
 800a88a:	4608      	mov	r0, r1
 800a88c:	4770      	bx	lr
	...

0800a890 <__assert_func>:
 800a890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a892:	4614      	mov	r4, r2
 800a894:	461a      	mov	r2, r3
 800a896:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <__assert_func+0x2c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4605      	mov	r5, r0
 800a89c:	68d8      	ldr	r0, [r3, #12]
 800a89e:	b14c      	cbz	r4, 800a8b4 <__assert_func+0x24>
 800a8a0:	4b07      	ldr	r3, [pc, #28]	; (800a8c0 <__assert_func+0x30>)
 800a8a2:	9100      	str	r1, [sp, #0]
 800a8a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8a8:	4906      	ldr	r1, [pc, #24]	; (800a8c4 <__assert_func+0x34>)
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	f000 f9a6 	bl	800abfc <fiprintf>
 800a8b0:	f000 fc46 	bl	800b140 <abort>
 800a8b4:	4b04      	ldr	r3, [pc, #16]	; (800a8c8 <__assert_func+0x38>)
 800a8b6:	461c      	mov	r4, r3
 800a8b8:	e7f3      	b.n	800a8a2 <__assert_func+0x12>
 800a8ba:	bf00      	nop
 800a8bc:	20000018 	.word	0x20000018
 800a8c0:	0800cfe0 	.word	0x0800cfe0
 800a8c4:	0800cfed 	.word	0x0800cfed
 800a8c8:	0800d01b 	.word	0x0800d01b

0800a8cc <__sflush_r>:
 800a8cc:	898a      	ldrh	r2, [r1, #12]
 800a8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	0710      	lsls	r0, r2, #28
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	d458      	bmi.n	800a98c <__sflush_r+0xc0>
 800a8da:	684b      	ldr	r3, [r1, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dc05      	bgt.n	800a8ec <__sflush_r+0x20>
 800a8e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dc02      	bgt.n	800a8ec <__sflush_r+0x20>
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	d0f9      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8f8:	682f      	ldr	r7, [r5, #0]
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	d032      	beq.n	800a964 <__sflush_r+0x98>
 800a8fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	075a      	lsls	r2, r3, #29
 800a904:	d505      	bpl.n	800a912 <__sflush_r+0x46>
 800a906:	6863      	ldr	r3, [r4, #4]
 800a908:	1ac0      	subs	r0, r0, r3
 800a90a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a90c:	b10b      	cbz	r3, 800a912 <__sflush_r+0x46>
 800a90e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a910:	1ac0      	subs	r0, r0, r3
 800a912:	2300      	movs	r3, #0
 800a914:	4602      	mov	r2, r0
 800a916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a918:	6a21      	ldr	r1, [r4, #32]
 800a91a:	4628      	mov	r0, r5
 800a91c:	47b0      	blx	r6
 800a91e:	1c43      	adds	r3, r0, #1
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	d106      	bne.n	800a932 <__sflush_r+0x66>
 800a924:	6829      	ldr	r1, [r5, #0]
 800a926:	291d      	cmp	r1, #29
 800a928:	d82c      	bhi.n	800a984 <__sflush_r+0xb8>
 800a92a:	4a2a      	ldr	r2, [pc, #168]	; (800a9d4 <__sflush_r+0x108>)
 800a92c:	40ca      	lsrs	r2, r1
 800a92e:	07d6      	lsls	r6, r2, #31
 800a930:	d528      	bpl.n	800a984 <__sflush_r+0xb8>
 800a932:	2200      	movs	r2, #0
 800a934:	6062      	str	r2, [r4, #4]
 800a936:	04d9      	lsls	r1, r3, #19
 800a938:	6922      	ldr	r2, [r4, #16]
 800a93a:	6022      	str	r2, [r4, #0]
 800a93c:	d504      	bpl.n	800a948 <__sflush_r+0x7c>
 800a93e:	1c42      	adds	r2, r0, #1
 800a940:	d101      	bne.n	800a946 <__sflush_r+0x7a>
 800a942:	682b      	ldr	r3, [r5, #0]
 800a944:	b903      	cbnz	r3, 800a948 <__sflush_r+0x7c>
 800a946:	6560      	str	r0, [r4, #84]	; 0x54
 800a948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94a:	602f      	str	r7, [r5, #0]
 800a94c:	2900      	cmp	r1, #0
 800a94e:	d0ca      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a954:	4299      	cmp	r1, r3
 800a956:	d002      	beq.n	800a95e <__sflush_r+0x92>
 800a958:	4628      	mov	r0, r5
 800a95a:	f7ff f905 	bl	8009b68 <_free_r>
 800a95e:	2000      	movs	r0, #0
 800a960:	6360      	str	r0, [r4, #52]	; 0x34
 800a962:	e7c1      	b.n	800a8e8 <__sflush_r+0x1c>
 800a964:	6a21      	ldr	r1, [r4, #32]
 800a966:	2301      	movs	r3, #1
 800a968:	4628      	mov	r0, r5
 800a96a:	47b0      	blx	r6
 800a96c:	1c41      	adds	r1, r0, #1
 800a96e:	d1c7      	bne.n	800a900 <__sflush_r+0x34>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0c4      	beq.n	800a900 <__sflush_r+0x34>
 800a976:	2b1d      	cmp	r3, #29
 800a978:	d001      	beq.n	800a97e <__sflush_r+0xb2>
 800a97a:	2b16      	cmp	r3, #22
 800a97c:	d101      	bne.n	800a982 <__sflush_r+0xb6>
 800a97e:	602f      	str	r7, [r5, #0]
 800a980:	e7b1      	b.n	800a8e6 <__sflush_r+0x1a>
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	e7ad      	b.n	800a8e8 <__sflush_r+0x1c>
 800a98c:	690f      	ldr	r7, [r1, #16]
 800a98e:	2f00      	cmp	r7, #0
 800a990:	d0a9      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a992:	0793      	lsls	r3, r2, #30
 800a994:	680e      	ldr	r6, [r1, #0]
 800a996:	bf08      	it	eq
 800a998:	694b      	ldreq	r3, [r1, #20]
 800a99a:	600f      	str	r7, [r1, #0]
 800a99c:	bf18      	it	ne
 800a99e:	2300      	movne	r3, #0
 800a9a0:	eba6 0807 	sub.w	r8, r6, r7
 800a9a4:	608b      	str	r3, [r1, #8]
 800a9a6:	f1b8 0f00 	cmp.w	r8, #0
 800a9aa:	dd9c      	ble.n	800a8e6 <__sflush_r+0x1a>
 800a9ac:	6a21      	ldr	r1, [r4, #32]
 800a9ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9b0:	4643      	mov	r3, r8
 800a9b2:	463a      	mov	r2, r7
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b0      	blx	r6
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	dc06      	bgt.n	800a9ca <__sflush_r+0xfe>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	e78e      	b.n	800a8e8 <__sflush_r+0x1c>
 800a9ca:	4407      	add	r7, r0
 800a9cc:	eba8 0800 	sub.w	r8, r8, r0
 800a9d0:	e7e9      	b.n	800a9a6 <__sflush_r+0xda>
 800a9d2:	bf00      	nop
 800a9d4:	20400001 	.word	0x20400001

0800a9d8 <_fflush_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	690b      	ldr	r3, [r1, #16]
 800a9dc:	4605      	mov	r5, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	b913      	cbnz	r3, 800a9e8 <_fflush_r+0x10>
 800a9e2:	2500      	movs	r5, #0
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	b118      	cbz	r0, 800a9f2 <_fflush_r+0x1a>
 800a9ea:	6983      	ldr	r3, [r0, #24]
 800a9ec:	b90b      	cbnz	r3, 800a9f2 <_fflush_r+0x1a>
 800a9ee:	f000 f887 	bl	800ab00 <__sinit>
 800a9f2:	4b14      	ldr	r3, [pc, #80]	; (800aa44 <_fflush_r+0x6c>)
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d11b      	bne.n	800aa30 <_fflush_r+0x58>
 800a9f8:	686c      	ldr	r4, [r5, #4]
 800a9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0ef      	beq.n	800a9e2 <_fflush_r+0xa>
 800aa02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa04:	07d0      	lsls	r0, r2, #31
 800aa06:	d404      	bmi.n	800aa12 <_fflush_r+0x3a>
 800aa08:	0599      	lsls	r1, r3, #22
 800aa0a:	d402      	bmi.n	800aa12 <_fflush_r+0x3a>
 800aa0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa0e:	f000 f927 	bl	800ac60 <__retarget_lock_acquire_recursive>
 800aa12:	4628      	mov	r0, r5
 800aa14:	4621      	mov	r1, r4
 800aa16:	f7ff ff59 	bl	800a8cc <__sflush_r>
 800aa1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa1c:	07da      	lsls	r2, r3, #31
 800aa1e:	4605      	mov	r5, r0
 800aa20:	d4e0      	bmi.n	800a9e4 <_fflush_r+0xc>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	059b      	lsls	r3, r3, #22
 800aa26:	d4dd      	bmi.n	800a9e4 <_fflush_r+0xc>
 800aa28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa2a:	f000 f91a 	bl	800ac62 <__retarget_lock_release_recursive>
 800aa2e:	e7d9      	b.n	800a9e4 <_fflush_r+0xc>
 800aa30:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <_fflush_r+0x70>)
 800aa32:	429c      	cmp	r4, r3
 800aa34:	d101      	bne.n	800aa3a <_fflush_r+0x62>
 800aa36:	68ac      	ldr	r4, [r5, #8]
 800aa38:	e7df      	b.n	800a9fa <_fflush_r+0x22>
 800aa3a:	4b04      	ldr	r3, [pc, #16]	; (800aa4c <_fflush_r+0x74>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	bf08      	it	eq
 800aa40:	68ec      	ldreq	r4, [r5, #12]
 800aa42:	e7da      	b.n	800a9fa <_fflush_r+0x22>
 800aa44:	0800d03c 	.word	0x0800d03c
 800aa48:	0800d05c 	.word	0x0800d05c
 800aa4c:	0800d01c 	.word	0x0800d01c

0800aa50 <std>:
 800aa50:	2300      	movs	r3, #0
 800aa52:	b510      	push	{r4, lr}
 800aa54:	4604      	mov	r4, r0
 800aa56:	e9c0 3300 	strd	r3, r3, [r0]
 800aa5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa5e:	6083      	str	r3, [r0, #8]
 800aa60:	8181      	strh	r1, [r0, #12]
 800aa62:	6643      	str	r3, [r0, #100]	; 0x64
 800aa64:	81c2      	strh	r2, [r0, #14]
 800aa66:	6183      	str	r3, [r0, #24]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	2208      	movs	r2, #8
 800aa6c:	305c      	adds	r0, #92	; 0x5c
 800aa6e:	f7fb fb91 	bl	8006194 <memset>
 800aa72:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <std+0x38>)
 800aa74:	6263      	str	r3, [r4, #36]	; 0x24
 800aa76:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <std+0x3c>)
 800aa78:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa7a:	4b05      	ldr	r3, [pc, #20]	; (800aa90 <std+0x40>)
 800aa7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <std+0x44>)
 800aa80:	6224      	str	r4, [r4, #32]
 800aa82:	6323      	str	r3, [r4, #48]	; 0x30
 800aa84:	bd10      	pop	{r4, pc}
 800aa86:	bf00      	nop
 800aa88:	08006f3d 	.word	0x08006f3d
 800aa8c:	08006f63 	.word	0x08006f63
 800aa90:	08006f9b 	.word	0x08006f9b
 800aa94:	08006fbf 	.word	0x08006fbf

0800aa98 <_cleanup_r>:
 800aa98:	4901      	ldr	r1, [pc, #4]	; (800aaa0 <_cleanup_r+0x8>)
 800aa9a:	f000 b8c1 	b.w	800ac20 <_fwalk_reent>
 800aa9e:	bf00      	nop
 800aaa0:	0800a9d9 	.word	0x0800a9d9

0800aaa4 <__sfmoreglue>:
 800aaa4:	b570      	push	{r4, r5, r6, lr}
 800aaa6:	2268      	movs	r2, #104	; 0x68
 800aaa8:	1e4d      	subs	r5, r1, #1
 800aaaa:	4355      	muls	r5, r2
 800aaac:	460e      	mov	r6, r1
 800aaae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aab2:	f7ff f8c5 	bl	8009c40 <_malloc_r>
 800aab6:	4604      	mov	r4, r0
 800aab8:	b140      	cbz	r0, 800aacc <__sfmoreglue+0x28>
 800aaba:	2100      	movs	r1, #0
 800aabc:	e9c0 1600 	strd	r1, r6, [r0]
 800aac0:	300c      	adds	r0, #12
 800aac2:	60a0      	str	r0, [r4, #8]
 800aac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aac8:	f7fb fb64 	bl	8006194 <memset>
 800aacc:	4620      	mov	r0, r4
 800aace:	bd70      	pop	{r4, r5, r6, pc}

0800aad0 <__sfp_lock_acquire>:
 800aad0:	4801      	ldr	r0, [pc, #4]	; (800aad8 <__sfp_lock_acquire+0x8>)
 800aad2:	f000 b8c5 	b.w	800ac60 <__retarget_lock_acquire_recursive>
 800aad6:	bf00      	nop
 800aad8:	20000d65 	.word	0x20000d65

0800aadc <__sfp_lock_release>:
 800aadc:	4801      	ldr	r0, [pc, #4]	; (800aae4 <__sfp_lock_release+0x8>)
 800aade:	f000 b8c0 	b.w	800ac62 <__retarget_lock_release_recursive>
 800aae2:	bf00      	nop
 800aae4:	20000d65 	.word	0x20000d65

0800aae8 <__sinit_lock_acquire>:
 800aae8:	4801      	ldr	r0, [pc, #4]	; (800aaf0 <__sinit_lock_acquire+0x8>)
 800aaea:	f000 b8b9 	b.w	800ac60 <__retarget_lock_acquire_recursive>
 800aaee:	bf00      	nop
 800aaf0:	20000d66 	.word	0x20000d66

0800aaf4 <__sinit_lock_release>:
 800aaf4:	4801      	ldr	r0, [pc, #4]	; (800aafc <__sinit_lock_release+0x8>)
 800aaf6:	f000 b8b4 	b.w	800ac62 <__retarget_lock_release_recursive>
 800aafa:	bf00      	nop
 800aafc:	20000d66 	.word	0x20000d66

0800ab00 <__sinit>:
 800ab00:	b510      	push	{r4, lr}
 800ab02:	4604      	mov	r4, r0
 800ab04:	f7ff fff0 	bl	800aae8 <__sinit_lock_acquire>
 800ab08:	69a3      	ldr	r3, [r4, #24]
 800ab0a:	b11b      	cbz	r3, 800ab14 <__sinit+0x14>
 800ab0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab10:	f7ff bff0 	b.w	800aaf4 <__sinit_lock_release>
 800ab14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab18:	6523      	str	r3, [r4, #80]	; 0x50
 800ab1a:	4b13      	ldr	r3, [pc, #76]	; (800ab68 <__sinit+0x68>)
 800ab1c:	4a13      	ldr	r2, [pc, #76]	; (800ab6c <__sinit+0x6c>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab22:	42a3      	cmp	r3, r4
 800ab24:	bf04      	itt	eq
 800ab26:	2301      	moveq	r3, #1
 800ab28:	61a3      	streq	r3, [r4, #24]
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 f820 	bl	800ab70 <__sfp>
 800ab30:	6060      	str	r0, [r4, #4]
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 f81c 	bl	800ab70 <__sfp>
 800ab38:	60a0      	str	r0, [r4, #8]
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f000 f818 	bl	800ab70 <__sfp>
 800ab40:	2200      	movs	r2, #0
 800ab42:	60e0      	str	r0, [r4, #12]
 800ab44:	2104      	movs	r1, #4
 800ab46:	6860      	ldr	r0, [r4, #4]
 800ab48:	f7ff ff82 	bl	800aa50 <std>
 800ab4c:	68a0      	ldr	r0, [r4, #8]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	2109      	movs	r1, #9
 800ab52:	f7ff ff7d 	bl	800aa50 <std>
 800ab56:	68e0      	ldr	r0, [r4, #12]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	2112      	movs	r1, #18
 800ab5c:	f7ff ff78 	bl	800aa50 <std>
 800ab60:	2301      	movs	r3, #1
 800ab62:	61a3      	str	r3, [r4, #24]
 800ab64:	e7d2      	b.n	800ab0c <__sinit+0xc>
 800ab66:	bf00      	nop
 800ab68:	0800cbc4 	.word	0x0800cbc4
 800ab6c:	0800aa99 	.word	0x0800aa99

0800ab70 <__sfp>:
 800ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab72:	4607      	mov	r7, r0
 800ab74:	f7ff ffac 	bl	800aad0 <__sfp_lock_acquire>
 800ab78:	4b1e      	ldr	r3, [pc, #120]	; (800abf4 <__sfp+0x84>)
 800ab7a:	681e      	ldr	r6, [r3, #0]
 800ab7c:	69b3      	ldr	r3, [r6, #24]
 800ab7e:	b913      	cbnz	r3, 800ab86 <__sfp+0x16>
 800ab80:	4630      	mov	r0, r6
 800ab82:	f7ff ffbd 	bl	800ab00 <__sinit>
 800ab86:	3648      	adds	r6, #72	; 0x48
 800ab88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	d503      	bpl.n	800ab98 <__sfp+0x28>
 800ab90:	6833      	ldr	r3, [r6, #0]
 800ab92:	b30b      	cbz	r3, 800abd8 <__sfp+0x68>
 800ab94:	6836      	ldr	r6, [r6, #0]
 800ab96:	e7f7      	b.n	800ab88 <__sfp+0x18>
 800ab98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab9c:	b9d5      	cbnz	r5, 800abd4 <__sfp+0x64>
 800ab9e:	4b16      	ldr	r3, [pc, #88]	; (800abf8 <__sfp+0x88>)
 800aba0:	60e3      	str	r3, [r4, #12]
 800aba2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aba6:	6665      	str	r5, [r4, #100]	; 0x64
 800aba8:	f000 f859 	bl	800ac5e <__retarget_lock_init_recursive>
 800abac:	f7ff ff96 	bl	800aadc <__sfp_lock_release>
 800abb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abb8:	6025      	str	r5, [r4, #0]
 800abba:	61a5      	str	r5, [r4, #24]
 800abbc:	2208      	movs	r2, #8
 800abbe:	4629      	mov	r1, r5
 800abc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abc4:	f7fb fae6 	bl	8006194 <memset>
 800abc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abd0:	4620      	mov	r0, r4
 800abd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd4:	3468      	adds	r4, #104	; 0x68
 800abd6:	e7d9      	b.n	800ab8c <__sfp+0x1c>
 800abd8:	2104      	movs	r1, #4
 800abda:	4638      	mov	r0, r7
 800abdc:	f7ff ff62 	bl	800aaa4 <__sfmoreglue>
 800abe0:	4604      	mov	r4, r0
 800abe2:	6030      	str	r0, [r6, #0]
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d1d5      	bne.n	800ab94 <__sfp+0x24>
 800abe8:	f7ff ff78 	bl	800aadc <__sfp_lock_release>
 800abec:	230c      	movs	r3, #12
 800abee:	603b      	str	r3, [r7, #0]
 800abf0:	e7ee      	b.n	800abd0 <__sfp+0x60>
 800abf2:	bf00      	nop
 800abf4:	0800cbc4 	.word	0x0800cbc4
 800abf8:	ffff0001 	.word	0xffff0001

0800abfc <fiprintf>:
 800abfc:	b40e      	push	{r1, r2, r3}
 800abfe:	b503      	push	{r0, r1, lr}
 800ac00:	4601      	mov	r1, r0
 800ac02:	ab03      	add	r3, sp, #12
 800ac04:	4805      	ldr	r0, [pc, #20]	; (800ac1c <fiprintf+0x20>)
 800ac06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0a:	6800      	ldr	r0, [r0, #0]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	f000 f8a7 	bl	800ad60 <_vfiprintf_r>
 800ac12:	b002      	add	sp, #8
 800ac14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac18:	b003      	add	sp, #12
 800ac1a:	4770      	bx	lr
 800ac1c:	20000018 	.word	0x20000018

0800ac20 <_fwalk_reent>:
 800ac20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac24:	4606      	mov	r6, r0
 800ac26:	4688      	mov	r8, r1
 800ac28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac2c:	2700      	movs	r7, #0
 800ac2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac32:	f1b9 0901 	subs.w	r9, r9, #1
 800ac36:	d505      	bpl.n	800ac44 <_fwalk_reent+0x24>
 800ac38:	6824      	ldr	r4, [r4, #0]
 800ac3a:	2c00      	cmp	r4, #0
 800ac3c:	d1f7      	bne.n	800ac2e <_fwalk_reent+0xe>
 800ac3e:	4638      	mov	r0, r7
 800ac40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac44:	89ab      	ldrh	r3, [r5, #12]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d907      	bls.n	800ac5a <_fwalk_reent+0x3a>
 800ac4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	d003      	beq.n	800ac5a <_fwalk_reent+0x3a>
 800ac52:	4629      	mov	r1, r5
 800ac54:	4630      	mov	r0, r6
 800ac56:	47c0      	blx	r8
 800ac58:	4307      	orrs	r7, r0
 800ac5a:	3568      	adds	r5, #104	; 0x68
 800ac5c:	e7e9      	b.n	800ac32 <_fwalk_reent+0x12>

0800ac5e <__retarget_lock_init_recursive>:
 800ac5e:	4770      	bx	lr

0800ac60 <__retarget_lock_acquire_recursive>:
 800ac60:	4770      	bx	lr

0800ac62 <__retarget_lock_release_recursive>:
 800ac62:	4770      	bx	lr

0800ac64 <memmove>:
 800ac64:	4288      	cmp	r0, r1
 800ac66:	b510      	push	{r4, lr}
 800ac68:	eb01 0402 	add.w	r4, r1, r2
 800ac6c:	d902      	bls.n	800ac74 <memmove+0x10>
 800ac6e:	4284      	cmp	r4, r0
 800ac70:	4623      	mov	r3, r4
 800ac72:	d807      	bhi.n	800ac84 <memmove+0x20>
 800ac74:	1e43      	subs	r3, r0, #1
 800ac76:	42a1      	cmp	r1, r4
 800ac78:	d008      	beq.n	800ac8c <memmove+0x28>
 800ac7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac82:	e7f8      	b.n	800ac76 <memmove+0x12>
 800ac84:	4402      	add	r2, r0
 800ac86:	4601      	mov	r1, r0
 800ac88:	428a      	cmp	r2, r1
 800ac8a:	d100      	bne.n	800ac8e <memmove+0x2a>
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac96:	e7f7      	b.n	800ac88 <memmove+0x24>

0800ac98 <__malloc_lock>:
 800ac98:	4801      	ldr	r0, [pc, #4]	; (800aca0 <__malloc_lock+0x8>)
 800ac9a:	f7ff bfe1 	b.w	800ac60 <__retarget_lock_acquire_recursive>
 800ac9e:	bf00      	nop
 800aca0:	20000d64 	.word	0x20000d64

0800aca4 <__malloc_unlock>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__malloc_unlock+0x8>)
 800aca6:	f7ff bfdc 	b.w	800ac62 <__retarget_lock_release_recursive>
 800acaa:	bf00      	nop
 800acac:	20000d64 	.word	0x20000d64

0800acb0 <_realloc_r>:
 800acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb4:	4680      	mov	r8, r0
 800acb6:	4614      	mov	r4, r2
 800acb8:	460e      	mov	r6, r1
 800acba:	b921      	cbnz	r1, 800acc6 <_realloc_r+0x16>
 800acbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acc0:	4611      	mov	r1, r2
 800acc2:	f7fe bfbd 	b.w	8009c40 <_malloc_r>
 800acc6:	b92a      	cbnz	r2, 800acd4 <_realloc_r+0x24>
 800acc8:	f7fe ff4e 	bl	8009b68 <_free_r>
 800accc:	4625      	mov	r5, r4
 800acce:	4628      	mov	r0, r5
 800acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd4:	f000 faa0 	bl	800b218 <_malloc_usable_size_r>
 800acd8:	4284      	cmp	r4, r0
 800acda:	4607      	mov	r7, r0
 800acdc:	d802      	bhi.n	800ace4 <_realloc_r+0x34>
 800acde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ace2:	d812      	bhi.n	800ad0a <_realloc_r+0x5a>
 800ace4:	4621      	mov	r1, r4
 800ace6:	4640      	mov	r0, r8
 800ace8:	f7fe ffaa 	bl	8009c40 <_malloc_r>
 800acec:	4605      	mov	r5, r0
 800acee:	2800      	cmp	r0, #0
 800acf0:	d0ed      	beq.n	800acce <_realloc_r+0x1e>
 800acf2:	42bc      	cmp	r4, r7
 800acf4:	4622      	mov	r2, r4
 800acf6:	4631      	mov	r1, r6
 800acf8:	bf28      	it	cs
 800acfa:	463a      	movcs	r2, r7
 800acfc:	f7fe fa4e 	bl	800919c <memcpy>
 800ad00:	4631      	mov	r1, r6
 800ad02:	4640      	mov	r0, r8
 800ad04:	f7fe ff30 	bl	8009b68 <_free_r>
 800ad08:	e7e1      	b.n	800acce <_realloc_r+0x1e>
 800ad0a:	4635      	mov	r5, r6
 800ad0c:	e7df      	b.n	800acce <_realloc_r+0x1e>

0800ad0e <__sfputc_r>:
 800ad0e:	6893      	ldr	r3, [r2, #8]
 800ad10:	3b01      	subs	r3, #1
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	b410      	push	{r4}
 800ad16:	6093      	str	r3, [r2, #8]
 800ad18:	da08      	bge.n	800ad2c <__sfputc_r+0x1e>
 800ad1a:	6994      	ldr	r4, [r2, #24]
 800ad1c:	42a3      	cmp	r3, r4
 800ad1e:	db01      	blt.n	800ad24 <__sfputc_r+0x16>
 800ad20:	290a      	cmp	r1, #10
 800ad22:	d103      	bne.n	800ad2c <__sfputc_r+0x1e>
 800ad24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad28:	f000 b94a 	b.w	800afc0 <__swbuf_r>
 800ad2c:	6813      	ldr	r3, [r2, #0]
 800ad2e:	1c58      	adds	r0, r3, #1
 800ad30:	6010      	str	r0, [r2, #0]
 800ad32:	7019      	strb	r1, [r3, #0]
 800ad34:	4608      	mov	r0, r1
 800ad36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <__sfputs_r>:
 800ad3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad3e:	4606      	mov	r6, r0
 800ad40:	460f      	mov	r7, r1
 800ad42:	4614      	mov	r4, r2
 800ad44:	18d5      	adds	r5, r2, r3
 800ad46:	42ac      	cmp	r4, r5
 800ad48:	d101      	bne.n	800ad4e <__sfputs_r+0x12>
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e007      	b.n	800ad5e <__sfputs_r+0x22>
 800ad4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad52:	463a      	mov	r2, r7
 800ad54:	4630      	mov	r0, r6
 800ad56:	f7ff ffda 	bl	800ad0e <__sfputc_r>
 800ad5a:	1c43      	adds	r3, r0, #1
 800ad5c:	d1f3      	bne.n	800ad46 <__sfputs_r+0xa>
 800ad5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad60 <_vfiprintf_r>:
 800ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	460d      	mov	r5, r1
 800ad66:	b09d      	sub	sp, #116	; 0x74
 800ad68:	4614      	mov	r4, r2
 800ad6a:	4698      	mov	r8, r3
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	b118      	cbz	r0, 800ad78 <_vfiprintf_r+0x18>
 800ad70:	6983      	ldr	r3, [r0, #24]
 800ad72:	b90b      	cbnz	r3, 800ad78 <_vfiprintf_r+0x18>
 800ad74:	f7ff fec4 	bl	800ab00 <__sinit>
 800ad78:	4b89      	ldr	r3, [pc, #548]	; (800afa0 <_vfiprintf_r+0x240>)
 800ad7a:	429d      	cmp	r5, r3
 800ad7c:	d11b      	bne.n	800adb6 <_vfiprintf_r+0x56>
 800ad7e:	6875      	ldr	r5, [r6, #4]
 800ad80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad82:	07d9      	lsls	r1, r3, #31
 800ad84:	d405      	bmi.n	800ad92 <_vfiprintf_r+0x32>
 800ad86:	89ab      	ldrh	r3, [r5, #12]
 800ad88:	059a      	lsls	r2, r3, #22
 800ad8a:	d402      	bmi.n	800ad92 <_vfiprintf_r+0x32>
 800ad8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad8e:	f7ff ff67 	bl	800ac60 <__retarget_lock_acquire_recursive>
 800ad92:	89ab      	ldrh	r3, [r5, #12]
 800ad94:	071b      	lsls	r3, r3, #28
 800ad96:	d501      	bpl.n	800ad9c <_vfiprintf_r+0x3c>
 800ad98:	692b      	ldr	r3, [r5, #16]
 800ad9a:	b9eb      	cbnz	r3, 800add8 <_vfiprintf_r+0x78>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f000 f960 	bl	800b064 <__swsetup_r>
 800ada4:	b1c0      	cbz	r0, 800add8 <_vfiprintf_r+0x78>
 800ada6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ada8:	07dc      	lsls	r4, r3, #31
 800adaa:	d50e      	bpl.n	800adca <_vfiprintf_r+0x6a>
 800adac:	f04f 30ff 	mov.w	r0, #4294967295
 800adb0:	b01d      	add	sp, #116	; 0x74
 800adb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb6:	4b7b      	ldr	r3, [pc, #492]	; (800afa4 <_vfiprintf_r+0x244>)
 800adb8:	429d      	cmp	r5, r3
 800adba:	d101      	bne.n	800adc0 <_vfiprintf_r+0x60>
 800adbc:	68b5      	ldr	r5, [r6, #8]
 800adbe:	e7df      	b.n	800ad80 <_vfiprintf_r+0x20>
 800adc0:	4b79      	ldr	r3, [pc, #484]	; (800afa8 <_vfiprintf_r+0x248>)
 800adc2:	429d      	cmp	r5, r3
 800adc4:	bf08      	it	eq
 800adc6:	68f5      	ldreq	r5, [r6, #12]
 800adc8:	e7da      	b.n	800ad80 <_vfiprintf_r+0x20>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	0598      	lsls	r0, r3, #22
 800adce:	d4ed      	bmi.n	800adac <_vfiprintf_r+0x4c>
 800add0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add2:	f7ff ff46 	bl	800ac62 <__retarget_lock_release_recursive>
 800add6:	e7e9      	b.n	800adac <_vfiprintf_r+0x4c>
 800add8:	2300      	movs	r3, #0
 800adda:	9309      	str	r3, [sp, #36]	; 0x24
 800addc:	2320      	movs	r3, #32
 800adde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ade2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ade6:	2330      	movs	r3, #48	; 0x30
 800ade8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afac <_vfiprintf_r+0x24c>
 800adec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adf0:	f04f 0901 	mov.w	r9, #1
 800adf4:	4623      	mov	r3, r4
 800adf6:	469a      	mov	sl, r3
 800adf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adfc:	b10a      	cbz	r2, 800ae02 <_vfiprintf_r+0xa2>
 800adfe:	2a25      	cmp	r2, #37	; 0x25
 800ae00:	d1f9      	bne.n	800adf6 <_vfiprintf_r+0x96>
 800ae02:	ebba 0b04 	subs.w	fp, sl, r4
 800ae06:	d00b      	beq.n	800ae20 <_vfiprintf_r+0xc0>
 800ae08:	465b      	mov	r3, fp
 800ae0a:	4622      	mov	r2, r4
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7ff ff94 	bl	800ad3c <__sfputs_r>
 800ae14:	3001      	adds	r0, #1
 800ae16:	f000 80aa 	beq.w	800af6e <_vfiprintf_r+0x20e>
 800ae1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae1c:	445a      	add	r2, fp
 800ae1e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae20:	f89a 3000 	ldrb.w	r3, [sl]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 80a2 	beq.w	800af6e <_vfiprintf_r+0x20e>
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae34:	f10a 0a01 	add.w	sl, sl, #1
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	9307      	str	r3, [sp, #28]
 800ae3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae40:	931a      	str	r3, [sp, #104]	; 0x68
 800ae42:	4654      	mov	r4, sl
 800ae44:	2205      	movs	r2, #5
 800ae46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4a:	4858      	ldr	r0, [pc, #352]	; (800afac <_vfiprintf_r+0x24c>)
 800ae4c:	f7f5 f9e0 	bl	8000210 <memchr>
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	b9d8      	cbnz	r0, 800ae8c <_vfiprintf_r+0x12c>
 800ae54:	06d1      	lsls	r1, r2, #27
 800ae56:	bf44      	itt	mi
 800ae58:	2320      	movmi	r3, #32
 800ae5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae5e:	0713      	lsls	r3, r2, #28
 800ae60:	bf44      	itt	mi
 800ae62:	232b      	movmi	r3, #43	; 0x2b
 800ae64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae68:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae6e:	d015      	beq.n	800ae9c <_vfiprintf_r+0x13c>
 800ae70:	9a07      	ldr	r2, [sp, #28]
 800ae72:	4654      	mov	r4, sl
 800ae74:	2000      	movs	r0, #0
 800ae76:	f04f 0c0a 	mov.w	ip, #10
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae80:	3b30      	subs	r3, #48	; 0x30
 800ae82:	2b09      	cmp	r3, #9
 800ae84:	d94e      	bls.n	800af24 <_vfiprintf_r+0x1c4>
 800ae86:	b1b0      	cbz	r0, 800aeb6 <_vfiprintf_r+0x156>
 800ae88:	9207      	str	r2, [sp, #28]
 800ae8a:	e014      	b.n	800aeb6 <_vfiprintf_r+0x156>
 800ae8c:	eba0 0308 	sub.w	r3, r0, r8
 800ae90:	fa09 f303 	lsl.w	r3, r9, r3
 800ae94:	4313      	orrs	r3, r2
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	46a2      	mov	sl, r4
 800ae9a:	e7d2      	b.n	800ae42 <_vfiprintf_r+0xe2>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	1d19      	adds	r1, r3, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	9103      	str	r1, [sp, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	bfbb      	ittet	lt
 800aea8:	425b      	neglt	r3, r3
 800aeaa:	f042 0202 	orrlt.w	r2, r2, #2
 800aeae:	9307      	strge	r3, [sp, #28]
 800aeb0:	9307      	strlt	r3, [sp, #28]
 800aeb2:	bfb8      	it	lt
 800aeb4:	9204      	strlt	r2, [sp, #16]
 800aeb6:	7823      	ldrb	r3, [r4, #0]
 800aeb8:	2b2e      	cmp	r3, #46	; 0x2e
 800aeba:	d10c      	bne.n	800aed6 <_vfiprintf_r+0x176>
 800aebc:	7863      	ldrb	r3, [r4, #1]
 800aebe:	2b2a      	cmp	r3, #42	; 0x2a
 800aec0:	d135      	bne.n	800af2e <_vfiprintf_r+0x1ce>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	1d1a      	adds	r2, r3, #4
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	9203      	str	r2, [sp, #12]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	bfb8      	it	lt
 800aece:	f04f 33ff 	movlt.w	r3, #4294967295
 800aed2:	3402      	adds	r4, #2
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800afbc <_vfiprintf_r+0x25c>
 800aeda:	7821      	ldrb	r1, [r4, #0]
 800aedc:	2203      	movs	r2, #3
 800aede:	4650      	mov	r0, sl
 800aee0:	f7f5 f996 	bl	8000210 <memchr>
 800aee4:	b140      	cbz	r0, 800aef8 <_vfiprintf_r+0x198>
 800aee6:	2340      	movs	r3, #64	; 0x40
 800aee8:	eba0 000a 	sub.w	r0, r0, sl
 800aeec:	fa03 f000 	lsl.w	r0, r3, r0
 800aef0:	9b04      	ldr	r3, [sp, #16]
 800aef2:	4303      	orrs	r3, r0
 800aef4:	3401      	adds	r4, #1
 800aef6:	9304      	str	r3, [sp, #16]
 800aef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefc:	482c      	ldr	r0, [pc, #176]	; (800afb0 <_vfiprintf_r+0x250>)
 800aefe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af02:	2206      	movs	r2, #6
 800af04:	f7f5 f984 	bl	8000210 <memchr>
 800af08:	2800      	cmp	r0, #0
 800af0a:	d03f      	beq.n	800af8c <_vfiprintf_r+0x22c>
 800af0c:	4b29      	ldr	r3, [pc, #164]	; (800afb4 <_vfiprintf_r+0x254>)
 800af0e:	bb1b      	cbnz	r3, 800af58 <_vfiprintf_r+0x1f8>
 800af10:	9b03      	ldr	r3, [sp, #12]
 800af12:	3307      	adds	r3, #7
 800af14:	f023 0307 	bic.w	r3, r3, #7
 800af18:	3308      	adds	r3, #8
 800af1a:	9303      	str	r3, [sp, #12]
 800af1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1e:	443b      	add	r3, r7
 800af20:	9309      	str	r3, [sp, #36]	; 0x24
 800af22:	e767      	b.n	800adf4 <_vfiprintf_r+0x94>
 800af24:	fb0c 3202 	mla	r2, ip, r2, r3
 800af28:	460c      	mov	r4, r1
 800af2a:	2001      	movs	r0, #1
 800af2c:	e7a5      	b.n	800ae7a <_vfiprintf_r+0x11a>
 800af2e:	2300      	movs	r3, #0
 800af30:	3401      	adds	r4, #1
 800af32:	9305      	str	r3, [sp, #20]
 800af34:	4619      	mov	r1, r3
 800af36:	f04f 0c0a 	mov.w	ip, #10
 800af3a:	4620      	mov	r0, r4
 800af3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af40:	3a30      	subs	r2, #48	; 0x30
 800af42:	2a09      	cmp	r2, #9
 800af44:	d903      	bls.n	800af4e <_vfiprintf_r+0x1ee>
 800af46:	2b00      	cmp	r3, #0
 800af48:	d0c5      	beq.n	800aed6 <_vfiprintf_r+0x176>
 800af4a:	9105      	str	r1, [sp, #20]
 800af4c:	e7c3      	b.n	800aed6 <_vfiprintf_r+0x176>
 800af4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af52:	4604      	mov	r4, r0
 800af54:	2301      	movs	r3, #1
 800af56:	e7f0      	b.n	800af3a <_vfiprintf_r+0x1da>
 800af58:	ab03      	add	r3, sp, #12
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	462a      	mov	r2, r5
 800af5e:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <_vfiprintf_r+0x258>)
 800af60:	a904      	add	r1, sp, #16
 800af62:	4630      	mov	r0, r6
 800af64:	f7fb f9be 	bl	80062e4 <_printf_float>
 800af68:	4607      	mov	r7, r0
 800af6a:	1c78      	adds	r0, r7, #1
 800af6c:	d1d6      	bne.n	800af1c <_vfiprintf_r+0x1bc>
 800af6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af70:	07d9      	lsls	r1, r3, #31
 800af72:	d405      	bmi.n	800af80 <_vfiprintf_r+0x220>
 800af74:	89ab      	ldrh	r3, [r5, #12]
 800af76:	059a      	lsls	r2, r3, #22
 800af78:	d402      	bmi.n	800af80 <_vfiprintf_r+0x220>
 800af7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af7c:	f7ff fe71 	bl	800ac62 <__retarget_lock_release_recursive>
 800af80:	89ab      	ldrh	r3, [r5, #12]
 800af82:	065b      	lsls	r3, r3, #25
 800af84:	f53f af12 	bmi.w	800adac <_vfiprintf_r+0x4c>
 800af88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af8a:	e711      	b.n	800adb0 <_vfiprintf_r+0x50>
 800af8c:	ab03      	add	r3, sp, #12
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	462a      	mov	r2, r5
 800af92:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <_vfiprintf_r+0x258>)
 800af94:	a904      	add	r1, sp, #16
 800af96:	4630      	mov	r0, r6
 800af98:	f7fb fc48 	bl	800682c <_printf_i>
 800af9c:	e7e4      	b.n	800af68 <_vfiprintf_r+0x208>
 800af9e:	bf00      	nop
 800afa0:	0800d03c 	.word	0x0800d03c
 800afa4:	0800d05c 	.word	0x0800d05c
 800afa8:	0800d01c 	.word	0x0800d01c
 800afac:	0800cfb4 	.word	0x0800cfb4
 800afb0:	0800cfbe 	.word	0x0800cfbe
 800afb4:	080062e5 	.word	0x080062e5
 800afb8:	0800ad3d 	.word	0x0800ad3d
 800afbc:	0800cfba 	.word	0x0800cfba

0800afc0 <__swbuf_r>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	460e      	mov	r6, r1
 800afc4:	4614      	mov	r4, r2
 800afc6:	4605      	mov	r5, r0
 800afc8:	b118      	cbz	r0, 800afd2 <__swbuf_r+0x12>
 800afca:	6983      	ldr	r3, [r0, #24]
 800afcc:	b90b      	cbnz	r3, 800afd2 <__swbuf_r+0x12>
 800afce:	f7ff fd97 	bl	800ab00 <__sinit>
 800afd2:	4b21      	ldr	r3, [pc, #132]	; (800b058 <__swbuf_r+0x98>)
 800afd4:	429c      	cmp	r4, r3
 800afd6:	d12b      	bne.n	800b030 <__swbuf_r+0x70>
 800afd8:	686c      	ldr	r4, [r5, #4]
 800afda:	69a3      	ldr	r3, [r4, #24]
 800afdc:	60a3      	str	r3, [r4, #8]
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	071a      	lsls	r2, r3, #28
 800afe2:	d52f      	bpl.n	800b044 <__swbuf_r+0x84>
 800afe4:	6923      	ldr	r3, [r4, #16]
 800afe6:	b36b      	cbz	r3, 800b044 <__swbuf_r+0x84>
 800afe8:	6923      	ldr	r3, [r4, #16]
 800afea:	6820      	ldr	r0, [r4, #0]
 800afec:	1ac0      	subs	r0, r0, r3
 800afee:	6963      	ldr	r3, [r4, #20]
 800aff0:	b2f6      	uxtb	r6, r6
 800aff2:	4283      	cmp	r3, r0
 800aff4:	4637      	mov	r7, r6
 800aff6:	dc04      	bgt.n	800b002 <__swbuf_r+0x42>
 800aff8:	4621      	mov	r1, r4
 800affa:	4628      	mov	r0, r5
 800affc:	f7ff fcec 	bl	800a9d8 <_fflush_r>
 800b000:	bb30      	cbnz	r0, 800b050 <__swbuf_r+0x90>
 800b002:	68a3      	ldr	r3, [r4, #8]
 800b004:	3b01      	subs	r3, #1
 800b006:	60a3      	str	r3, [r4, #8]
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	1c5a      	adds	r2, r3, #1
 800b00c:	6022      	str	r2, [r4, #0]
 800b00e:	701e      	strb	r6, [r3, #0]
 800b010:	6963      	ldr	r3, [r4, #20]
 800b012:	3001      	adds	r0, #1
 800b014:	4283      	cmp	r3, r0
 800b016:	d004      	beq.n	800b022 <__swbuf_r+0x62>
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	07db      	lsls	r3, r3, #31
 800b01c:	d506      	bpl.n	800b02c <__swbuf_r+0x6c>
 800b01e:	2e0a      	cmp	r6, #10
 800b020:	d104      	bne.n	800b02c <__swbuf_r+0x6c>
 800b022:	4621      	mov	r1, r4
 800b024:	4628      	mov	r0, r5
 800b026:	f7ff fcd7 	bl	800a9d8 <_fflush_r>
 800b02a:	b988      	cbnz	r0, 800b050 <__swbuf_r+0x90>
 800b02c:	4638      	mov	r0, r7
 800b02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <__swbuf_r+0x9c>)
 800b032:	429c      	cmp	r4, r3
 800b034:	d101      	bne.n	800b03a <__swbuf_r+0x7a>
 800b036:	68ac      	ldr	r4, [r5, #8]
 800b038:	e7cf      	b.n	800afda <__swbuf_r+0x1a>
 800b03a:	4b09      	ldr	r3, [pc, #36]	; (800b060 <__swbuf_r+0xa0>)
 800b03c:	429c      	cmp	r4, r3
 800b03e:	bf08      	it	eq
 800b040:	68ec      	ldreq	r4, [r5, #12]
 800b042:	e7ca      	b.n	800afda <__swbuf_r+0x1a>
 800b044:	4621      	mov	r1, r4
 800b046:	4628      	mov	r0, r5
 800b048:	f000 f80c 	bl	800b064 <__swsetup_r>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d0cb      	beq.n	800afe8 <__swbuf_r+0x28>
 800b050:	f04f 37ff 	mov.w	r7, #4294967295
 800b054:	e7ea      	b.n	800b02c <__swbuf_r+0x6c>
 800b056:	bf00      	nop
 800b058:	0800d03c 	.word	0x0800d03c
 800b05c:	0800d05c 	.word	0x0800d05c
 800b060:	0800d01c 	.word	0x0800d01c

0800b064 <__swsetup_r>:
 800b064:	4b32      	ldr	r3, [pc, #200]	; (800b130 <__swsetup_r+0xcc>)
 800b066:	b570      	push	{r4, r5, r6, lr}
 800b068:	681d      	ldr	r5, [r3, #0]
 800b06a:	4606      	mov	r6, r0
 800b06c:	460c      	mov	r4, r1
 800b06e:	b125      	cbz	r5, 800b07a <__swsetup_r+0x16>
 800b070:	69ab      	ldr	r3, [r5, #24]
 800b072:	b913      	cbnz	r3, 800b07a <__swsetup_r+0x16>
 800b074:	4628      	mov	r0, r5
 800b076:	f7ff fd43 	bl	800ab00 <__sinit>
 800b07a:	4b2e      	ldr	r3, [pc, #184]	; (800b134 <__swsetup_r+0xd0>)
 800b07c:	429c      	cmp	r4, r3
 800b07e:	d10f      	bne.n	800b0a0 <__swsetup_r+0x3c>
 800b080:	686c      	ldr	r4, [r5, #4]
 800b082:	89a3      	ldrh	r3, [r4, #12]
 800b084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b088:	0719      	lsls	r1, r3, #28
 800b08a:	d42c      	bmi.n	800b0e6 <__swsetup_r+0x82>
 800b08c:	06dd      	lsls	r5, r3, #27
 800b08e:	d411      	bmi.n	800b0b4 <__swsetup_r+0x50>
 800b090:	2309      	movs	r3, #9
 800b092:	6033      	str	r3, [r6, #0]
 800b094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b098:	81a3      	strh	r3, [r4, #12]
 800b09a:	f04f 30ff 	mov.w	r0, #4294967295
 800b09e:	e03e      	b.n	800b11e <__swsetup_r+0xba>
 800b0a0:	4b25      	ldr	r3, [pc, #148]	; (800b138 <__swsetup_r+0xd4>)
 800b0a2:	429c      	cmp	r4, r3
 800b0a4:	d101      	bne.n	800b0aa <__swsetup_r+0x46>
 800b0a6:	68ac      	ldr	r4, [r5, #8]
 800b0a8:	e7eb      	b.n	800b082 <__swsetup_r+0x1e>
 800b0aa:	4b24      	ldr	r3, [pc, #144]	; (800b13c <__swsetup_r+0xd8>)
 800b0ac:	429c      	cmp	r4, r3
 800b0ae:	bf08      	it	eq
 800b0b0:	68ec      	ldreq	r4, [r5, #12]
 800b0b2:	e7e6      	b.n	800b082 <__swsetup_r+0x1e>
 800b0b4:	0758      	lsls	r0, r3, #29
 800b0b6:	d512      	bpl.n	800b0de <__swsetup_r+0x7a>
 800b0b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0ba:	b141      	cbz	r1, 800b0ce <__swsetup_r+0x6a>
 800b0bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0c0:	4299      	cmp	r1, r3
 800b0c2:	d002      	beq.n	800b0ca <__swsetup_r+0x66>
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f7fe fd4f 	bl	8009b68 <_free_r>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	6363      	str	r3, [r4, #52]	; 0x34
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0d4:	81a3      	strh	r3, [r4, #12]
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	6063      	str	r3, [r4, #4]
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	f043 0308 	orr.w	r3, r3, #8
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	6923      	ldr	r3, [r4, #16]
 800b0e8:	b94b      	cbnz	r3, 800b0fe <__swsetup_r+0x9a>
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b0f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b0f4:	d003      	beq.n	800b0fe <__swsetup_r+0x9a>
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f000 f84d 	bl	800b198 <__smakebuf_r>
 800b0fe:	89a0      	ldrh	r0, [r4, #12]
 800b100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b104:	f010 0301 	ands.w	r3, r0, #1
 800b108:	d00a      	beq.n	800b120 <__swsetup_r+0xbc>
 800b10a:	2300      	movs	r3, #0
 800b10c:	60a3      	str	r3, [r4, #8]
 800b10e:	6963      	ldr	r3, [r4, #20]
 800b110:	425b      	negs	r3, r3
 800b112:	61a3      	str	r3, [r4, #24]
 800b114:	6923      	ldr	r3, [r4, #16]
 800b116:	b943      	cbnz	r3, 800b12a <__swsetup_r+0xc6>
 800b118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b11c:	d1ba      	bne.n	800b094 <__swsetup_r+0x30>
 800b11e:	bd70      	pop	{r4, r5, r6, pc}
 800b120:	0781      	lsls	r1, r0, #30
 800b122:	bf58      	it	pl
 800b124:	6963      	ldrpl	r3, [r4, #20]
 800b126:	60a3      	str	r3, [r4, #8]
 800b128:	e7f4      	b.n	800b114 <__swsetup_r+0xb0>
 800b12a:	2000      	movs	r0, #0
 800b12c:	e7f7      	b.n	800b11e <__swsetup_r+0xba>
 800b12e:	bf00      	nop
 800b130:	20000018 	.word	0x20000018
 800b134:	0800d03c 	.word	0x0800d03c
 800b138:	0800d05c 	.word	0x0800d05c
 800b13c:	0800d01c 	.word	0x0800d01c

0800b140 <abort>:
 800b140:	b508      	push	{r3, lr}
 800b142:	2006      	movs	r0, #6
 800b144:	f000 f898 	bl	800b278 <raise>
 800b148:	2001      	movs	r0, #1
 800b14a:	f7f8 f81a 	bl	8003182 <_exit>

0800b14e <__swhatbuf_r>:
 800b14e:	b570      	push	{r4, r5, r6, lr}
 800b150:	460e      	mov	r6, r1
 800b152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b156:	2900      	cmp	r1, #0
 800b158:	b096      	sub	sp, #88	; 0x58
 800b15a:	4614      	mov	r4, r2
 800b15c:	461d      	mov	r5, r3
 800b15e:	da08      	bge.n	800b172 <__swhatbuf_r+0x24>
 800b160:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	602a      	str	r2, [r5, #0]
 800b168:	061a      	lsls	r2, r3, #24
 800b16a:	d410      	bmi.n	800b18e <__swhatbuf_r+0x40>
 800b16c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b170:	e00e      	b.n	800b190 <__swhatbuf_r+0x42>
 800b172:	466a      	mov	r2, sp
 800b174:	f000 f89c 	bl	800b2b0 <_fstat_r>
 800b178:	2800      	cmp	r0, #0
 800b17a:	dbf1      	blt.n	800b160 <__swhatbuf_r+0x12>
 800b17c:	9a01      	ldr	r2, [sp, #4]
 800b17e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b182:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b186:	425a      	negs	r2, r3
 800b188:	415a      	adcs	r2, r3
 800b18a:	602a      	str	r2, [r5, #0]
 800b18c:	e7ee      	b.n	800b16c <__swhatbuf_r+0x1e>
 800b18e:	2340      	movs	r3, #64	; 0x40
 800b190:	2000      	movs	r0, #0
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	b016      	add	sp, #88	; 0x58
 800b196:	bd70      	pop	{r4, r5, r6, pc}

0800b198 <__smakebuf_r>:
 800b198:	898b      	ldrh	r3, [r1, #12]
 800b19a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b19c:	079d      	lsls	r5, r3, #30
 800b19e:	4606      	mov	r6, r0
 800b1a0:	460c      	mov	r4, r1
 800b1a2:	d507      	bpl.n	800b1b4 <__smakebuf_r+0x1c>
 800b1a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	6123      	str	r3, [r4, #16]
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	6163      	str	r3, [r4, #20]
 800b1b0:	b002      	add	sp, #8
 800b1b2:	bd70      	pop	{r4, r5, r6, pc}
 800b1b4:	ab01      	add	r3, sp, #4
 800b1b6:	466a      	mov	r2, sp
 800b1b8:	f7ff ffc9 	bl	800b14e <__swhatbuf_r>
 800b1bc:	9900      	ldr	r1, [sp, #0]
 800b1be:	4605      	mov	r5, r0
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7fe fd3d 	bl	8009c40 <_malloc_r>
 800b1c6:	b948      	cbnz	r0, 800b1dc <__smakebuf_r+0x44>
 800b1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1cc:	059a      	lsls	r2, r3, #22
 800b1ce:	d4ef      	bmi.n	800b1b0 <__smakebuf_r+0x18>
 800b1d0:	f023 0303 	bic.w	r3, r3, #3
 800b1d4:	f043 0302 	orr.w	r3, r3, #2
 800b1d8:	81a3      	strh	r3, [r4, #12]
 800b1da:	e7e3      	b.n	800b1a4 <__smakebuf_r+0xc>
 800b1dc:	4b0d      	ldr	r3, [pc, #52]	; (800b214 <__smakebuf_r+0x7c>)
 800b1de:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1e0:	89a3      	ldrh	r3, [r4, #12]
 800b1e2:	6020      	str	r0, [r4, #0]
 800b1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1e8:	81a3      	strh	r3, [r4, #12]
 800b1ea:	9b00      	ldr	r3, [sp, #0]
 800b1ec:	6163      	str	r3, [r4, #20]
 800b1ee:	9b01      	ldr	r3, [sp, #4]
 800b1f0:	6120      	str	r0, [r4, #16]
 800b1f2:	b15b      	cbz	r3, 800b20c <__smakebuf_r+0x74>
 800b1f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f000 f86b 	bl	800b2d4 <_isatty_r>
 800b1fe:	b128      	cbz	r0, 800b20c <__smakebuf_r+0x74>
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	f023 0303 	bic.w	r3, r3, #3
 800b206:	f043 0301 	orr.w	r3, r3, #1
 800b20a:	81a3      	strh	r3, [r4, #12]
 800b20c:	89a0      	ldrh	r0, [r4, #12]
 800b20e:	4305      	orrs	r5, r0
 800b210:	81a5      	strh	r5, [r4, #12]
 800b212:	e7cd      	b.n	800b1b0 <__smakebuf_r+0x18>
 800b214:	0800aa99 	.word	0x0800aa99

0800b218 <_malloc_usable_size_r>:
 800b218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b21c:	1f18      	subs	r0, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bfbc      	itt	lt
 800b222:	580b      	ldrlt	r3, [r1, r0]
 800b224:	18c0      	addlt	r0, r0, r3
 800b226:	4770      	bx	lr

0800b228 <_raise_r>:
 800b228:	291f      	cmp	r1, #31
 800b22a:	b538      	push	{r3, r4, r5, lr}
 800b22c:	4604      	mov	r4, r0
 800b22e:	460d      	mov	r5, r1
 800b230:	d904      	bls.n	800b23c <_raise_r+0x14>
 800b232:	2316      	movs	r3, #22
 800b234:	6003      	str	r3, [r0, #0]
 800b236:	f04f 30ff 	mov.w	r0, #4294967295
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b23e:	b112      	cbz	r2, 800b246 <_raise_r+0x1e>
 800b240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b244:	b94b      	cbnz	r3, 800b25a <_raise_r+0x32>
 800b246:	4620      	mov	r0, r4
 800b248:	f000 f830 	bl	800b2ac <_getpid_r>
 800b24c:	462a      	mov	r2, r5
 800b24e:	4601      	mov	r1, r0
 800b250:	4620      	mov	r0, r4
 800b252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b256:	f000 b817 	b.w	800b288 <_kill_r>
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d00a      	beq.n	800b274 <_raise_r+0x4c>
 800b25e:	1c59      	adds	r1, r3, #1
 800b260:	d103      	bne.n	800b26a <_raise_r+0x42>
 800b262:	2316      	movs	r3, #22
 800b264:	6003      	str	r3, [r0, #0]
 800b266:	2001      	movs	r0, #1
 800b268:	e7e7      	b.n	800b23a <_raise_r+0x12>
 800b26a:	2400      	movs	r4, #0
 800b26c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b270:	4628      	mov	r0, r5
 800b272:	4798      	blx	r3
 800b274:	2000      	movs	r0, #0
 800b276:	e7e0      	b.n	800b23a <_raise_r+0x12>

0800b278 <raise>:
 800b278:	4b02      	ldr	r3, [pc, #8]	; (800b284 <raise+0xc>)
 800b27a:	4601      	mov	r1, r0
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f7ff bfd3 	b.w	800b228 <_raise_r>
 800b282:	bf00      	nop
 800b284:	20000018 	.word	0x20000018

0800b288 <_kill_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d07      	ldr	r5, [pc, #28]	; (800b2a8 <_kill_r+0x20>)
 800b28c:	2300      	movs	r3, #0
 800b28e:	4604      	mov	r4, r0
 800b290:	4608      	mov	r0, r1
 800b292:	4611      	mov	r1, r2
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	f7f7 ff64 	bl	8003162 <_kill>
 800b29a:	1c43      	adds	r3, r0, #1
 800b29c:	d102      	bne.n	800b2a4 <_kill_r+0x1c>
 800b29e:	682b      	ldr	r3, [r5, #0]
 800b2a0:	b103      	cbz	r3, 800b2a4 <_kill_r+0x1c>
 800b2a2:	6023      	str	r3, [r4, #0]
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000d60 	.word	0x20000d60

0800b2ac <_getpid_r>:
 800b2ac:	f7f7 bf51 	b.w	8003152 <_getpid>

0800b2b0 <_fstat_r>:
 800b2b0:	b538      	push	{r3, r4, r5, lr}
 800b2b2:	4d07      	ldr	r5, [pc, #28]	; (800b2d0 <_fstat_r+0x20>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	4608      	mov	r0, r1
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	602b      	str	r3, [r5, #0]
 800b2be:	f7f7 ffaf 	bl	8003220 <_fstat>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	d102      	bne.n	800b2cc <_fstat_r+0x1c>
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	b103      	cbz	r3, 800b2cc <_fstat_r+0x1c>
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	bd38      	pop	{r3, r4, r5, pc}
 800b2ce:	bf00      	nop
 800b2d0:	20000d60 	.word	0x20000d60

0800b2d4 <_isatty_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4d06      	ldr	r5, [pc, #24]	; (800b2f0 <_isatty_r+0x1c>)
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4604      	mov	r4, r0
 800b2dc:	4608      	mov	r0, r1
 800b2de:	602b      	str	r3, [r5, #0]
 800b2e0:	f7f7 ffae 	bl	8003240 <_isatty>
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	d102      	bne.n	800b2ee <_isatty_r+0x1a>
 800b2e8:	682b      	ldr	r3, [r5, #0]
 800b2ea:	b103      	cbz	r3, 800b2ee <_isatty_r+0x1a>
 800b2ec:	6023      	str	r3, [r4, #0]
 800b2ee:	bd38      	pop	{r3, r4, r5, pc}
 800b2f0:	20000d60 	.word	0x20000d60
 800b2f4:	00000000 	.word	0x00000000

0800b2f8 <cos>:
 800b2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2fa:	ec53 2b10 	vmov	r2, r3, d0
 800b2fe:	4826      	ldr	r0, [pc, #152]	; (800b398 <cos+0xa0>)
 800b300:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b304:	4281      	cmp	r1, r0
 800b306:	dc06      	bgt.n	800b316 <cos+0x1e>
 800b308:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b390 <cos+0x98>
 800b30c:	b005      	add	sp, #20
 800b30e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b312:	f000 bb79 	b.w	800ba08 <__kernel_cos>
 800b316:	4821      	ldr	r0, [pc, #132]	; (800b39c <cos+0xa4>)
 800b318:	4281      	cmp	r1, r0
 800b31a:	dd09      	ble.n	800b330 <cos+0x38>
 800b31c:	ee10 0a10 	vmov	r0, s0
 800b320:	4619      	mov	r1, r3
 800b322:	f7f4 ffc9 	bl	80002b8 <__aeabi_dsub>
 800b326:	ec41 0b10 	vmov	d0, r0, r1
 800b32a:	b005      	add	sp, #20
 800b32c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b330:	4668      	mov	r0, sp
 800b332:	f000 f95d 	bl	800b5f0 <__ieee754_rem_pio2>
 800b336:	f000 0003 	and.w	r0, r0, #3
 800b33a:	2801      	cmp	r0, #1
 800b33c:	d00b      	beq.n	800b356 <cos+0x5e>
 800b33e:	2802      	cmp	r0, #2
 800b340:	d016      	beq.n	800b370 <cos+0x78>
 800b342:	b9e0      	cbnz	r0, 800b37e <cos+0x86>
 800b344:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b348:	ed9d 0b00 	vldr	d0, [sp]
 800b34c:	f000 fb5c 	bl	800ba08 <__kernel_cos>
 800b350:	ec51 0b10 	vmov	r0, r1, d0
 800b354:	e7e7      	b.n	800b326 <cos+0x2e>
 800b356:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b35a:	ed9d 0b00 	vldr	d0, [sp]
 800b35e:	f000 ff6b 	bl	800c238 <__kernel_sin>
 800b362:	ec53 2b10 	vmov	r2, r3, d0
 800b366:	ee10 0a10 	vmov	r0, s0
 800b36a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b36e:	e7da      	b.n	800b326 <cos+0x2e>
 800b370:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b374:	ed9d 0b00 	vldr	d0, [sp]
 800b378:	f000 fb46 	bl	800ba08 <__kernel_cos>
 800b37c:	e7f1      	b.n	800b362 <cos+0x6a>
 800b37e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b382:	ed9d 0b00 	vldr	d0, [sp]
 800b386:	2001      	movs	r0, #1
 800b388:	f000 ff56 	bl	800c238 <__kernel_sin>
 800b38c:	e7e0      	b.n	800b350 <cos+0x58>
 800b38e:	bf00      	nop
	...
 800b398:	3fe921fb 	.word	0x3fe921fb
 800b39c:	7fefffff 	.word	0x7fefffff

0800b3a0 <sin>:
 800b3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3a2:	ec53 2b10 	vmov	r2, r3, d0
 800b3a6:	4828      	ldr	r0, [pc, #160]	; (800b448 <sin+0xa8>)
 800b3a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b3ac:	4281      	cmp	r1, r0
 800b3ae:	dc07      	bgt.n	800b3c0 <sin+0x20>
 800b3b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b440 <sin+0xa0>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	b005      	add	sp, #20
 800b3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3bc:	f000 bf3c 	b.w	800c238 <__kernel_sin>
 800b3c0:	4822      	ldr	r0, [pc, #136]	; (800b44c <sin+0xac>)
 800b3c2:	4281      	cmp	r1, r0
 800b3c4:	dd09      	ble.n	800b3da <sin+0x3a>
 800b3c6:	ee10 0a10 	vmov	r0, s0
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	f7f4 ff74 	bl	80002b8 <__aeabi_dsub>
 800b3d0:	ec41 0b10 	vmov	d0, r0, r1
 800b3d4:	b005      	add	sp, #20
 800b3d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3da:	4668      	mov	r0, sp
 800b3dc:	f000 f908 	bl	800b5f0 <__ieee754_rem_pio2>
 800b3e0:	f000 0003 	and.w	r0, r0, #3
 800b3e4:	2801      	cmp	r0, #1
 800b3e6:	d00c      	beq.n	800b402 <sin+0x62>
 800b3e8:	2802      	cmp	r0, #2
 800b3ea:	d011      	beq.n	800b410 <sin+0x70>
 800b3ec:	b9f0      	cbnz	r0, 800b42c <sin+0x8c>
 800b3ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3f2:	ed9d 0b00 	vldr	d0, [sp]
 800b3f6:	2001      	movs	r0, #1
 800b3f8:	f000 ff1e 	bl	800c238 <__kernel_sin>
 800b3fc:	ec51 0b10 	vmov	r0, r1, d0
 800b400:	e7e6      	b.n	800b3d0 <sin+0x30>
 800b402:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b406:	ed9d 0b00 	vldr	d0, [sp]
 800b40a:	f000 fafd 	bl	800ba08 <__kernel_cos>
 800b40e:	e7f5      	b.n	800b3fc <sin+0x5c>
 800b410:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b414:	ed9d 0b00 	vldr	d0, [sp]
 800b418:	2001      	movs	r0, #1
 800b41a:	f000 ff0d 	bl	800c238 <__kernel_sin>
 800b41e:	ec53 2b10 	vmov	r2, r3, d0
 800b422:	ee10 0a10 	vmov	r0, s0
 800b426:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b42a:	e7d1      	b.n	800b3d0 <sin+0x30>
 800b42c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b430:	ed9d 0b00 	vldr	d0, [sp]
 800b434:	f000 fae8 	bl	800ba08 <__kernel_cos>
 800b438:	e7f1      	b.n	800b41e <sin+0x7e>
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w
	...
 800b448:	3fe921fb 	.word	0x3fe921fb
 800b44c:	7fefffff 	.word	0x7fefffff

0800b450 <atan2>:
 800b450:	f000 b802 	b.w	800b458 <__ieee754_atan2>
 800b454:	0000      	movs	r0, r0
	...

0800b458 <__ieee754_atan2>:
 800b458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b45c:	ec57 6b11 	vmov	r6, r7, d1
 800b460:	4273      	negs	r3, r6
 800b462:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b5e8 <__ieee754_atan2+0x190>
 800b466:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b46a:	4333      	orrs	r3, r6
 800b46c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b470:	4573      	cmp	r3, lr
 800b472:	ec51 0b10 	vmov	r0, r1, d0
 800b476:	ee11 8a10 	vmov	r8, s2
 800b47a:	d80a      	bhi.n	800b492 <__ieee754_atan2+0x3a>
 800b47c:	4244      	negs	r4, r0
 800b47e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b482:	4304      	orrs	r4, r0
 800b484:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b488:	4574      	cmp	r4, lr
 800b48a:	ee10 9a10 	vmov	r9, s0
 800b48e:	468c      	mov	ip, r1
 800b490:	d907      	bls.n	800b4a2 <__ieee754_atan2+0x4a>
 800b492:	4632      	mov	r2, r6
 800b494:	463b      	mov	r3, r7
 800b496:	f7f4 ff11 	bl	80002bc <__adddf3>
 800b49a:	ec41 0b10 	vmov	d0, r0, r1
 800b49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b4a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b4aa:	4334      	orrs	r4, r6
 800b4ac:	d103      	bne.n	800b4b6 <__ieee754_atan2+0x5e>
 800b4ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b2:	f000 bf81 	b.w	800c3b8 <atan>
 800b4b6:	17bc      	asrs	r4, r7, #30
 800b4b8:	f004 0402 	and.w	r4, r4, #2
 800b4bc:	ea53 0909 	orrs.w	r9, r3, r9
 800b4c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b4c4:	d107      	bne.n	800b4d6 <__ieee754_atan2+0x7e>
 800b4c6:	2c02      	cmp	r4, #2
 800b4c8:	d060      	beq.n	800b58c <__ieee754_atan2+0x134>
 800b4ca:	2c03      	cmp	r4, #3
 800b4cc:	d1e5      	bne.n	800b49a <__ieee754_atan2+0x42>
 800b4ce:	a142      	add	r1, pc, #264	; (adr r1, 800b5d8 <__ieee754_atan2+0x180>)
 800b4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4d4:	e7e1      	b.n	800b49a <__ieee754_atan2+0x42>
 800b4d6:	ea52 0808 	orrs.w	r8, r2, r8
 800b4da:	d106      	bne.n	800b4ea <__ieee754_atan2+0x92>
 800b4dc:	f1bc 0f00 	cmp.w	ip, #0
 800b4e0:	da5f      	bge.n	800b5a2 <__ieee754_atan2+0x14a>
 800b4e2:	a13f      	add	r1, pc, #252	; (adr r1, 800b5e0 <__ieee754_atan2+0x188>)
 800b4e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4e8:	e7d7      	b.n	800b49a <__ieee754_atan2+0x42>
 800b4ea:	4572      	cmp	r2, lr
 800b4ec:	d10f      	bne.n	800b50e <__ieee754_atan2+0xb6>
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	f104 34ff 	add.w	r4, r4, #4294967295
 800b4f4:	d107      	bne.n	800b506 <__ieee754_atan2+0xae>
 800b4f6:	2c02      	cmp	r4, #2
 800b4f8:	d84c      	bhi.n	800b594 <__ieee754_atan2+0x13c>
 800b4fa:	4b35      	ldr	r3, [pc, #212]	; (800b5d0 <__ieee754_atan2+0x178>)
 800b4fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b500:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b504:	e7c9      	b.n	800b49a <__ieee754_atan2+0x42>
 800b506:	2c02      	cmp	r4, #2
 800b508:	d848      	bhi.n	800b59c <__ieee754_atan2+0x144>
 800b50a:	4b32      	ldr	r3, [pc, #200]	; (800b5d4 <__ieee754_atan2+0x17c>)
 800b50c:	e7f6      	b.n	800b4fc <__ieee754_atan2+0xa4>
 800b50e:	4573      	cmp	r3, lr
 800b510:	d0e4      	beq.n	800b4dc <__ieee754_atan2+0x84>
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b518:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b51c:	da1e      	bge.n	800b55c <__ieee754_atan2+0x104>
 800b51e:	2f00      	cmp	r7, #0
 800b520:	da01      	bge.n	800b526 <__ieee754_atan2+0xce>
 800b522:	323c      	adds	r2, #60	; 0x3c
 800b524:	db1e      	blt.n	800b564 <__ieee754_atan2+0x10c>
 800b526:	4632      	mov	r2, r6
 800b528:	463b      	mov	r3, r7
 800b52a:	f7f5 f9a7 	bl	800087c <__aeabi_ddiv>
 800b52e:	ec41 0b10 	vmov	d0, r0, r1
 800b532:	f001 f8e1 	bl	800c6f8 <fabs>
 800b536:	f000 ff3f 	bl	800c3b8 <atan>
 800b53a:	ec51 0b10 	vmov	r0, r1, d0
 800b53e:	2c01      	cmp	r4, #1
 800b540:	d013      	beq.n	800b56a <__ieee754_atan2+0x112>
 800b542:	2c02      	cmp	r4, #2
 800b544:	d015      	beq.n	800b572 <__ieee754_atan2+0x11a>
 800b546:	2c00      	cmp	r4, #0
 800b548:	d0a7      	beq.n	800b49a <__ieee754_atan2+0x42>
 800b54a:	a319      	add	r3, pc, #100	; (adr r3, 800b5b0 <__ieee754_atan2+0x158>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f7f4 feb2 	bl	80002b8 <__aeabi_dsub>
 800b554:	a318      	add	r3, pc, #96	; (adr r3, 800b5b8 <__ieee754_atan2+0x160>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	e014      	b.n	800b586 <__ieee754_atan2+0x12e>
 800b55c:	a118      	add	r1, pc, #96	; (adr r1, 800b5c0 <__ieee754_atan2+0x168>)
 800b55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b562:	e7ec      	b.n	800b53e <__ieee754_atan2+0xe6>
 800b564:	2000      	movs	r0, #0
 800b566:	2100      	movs	r1, #0
 800b568:	e7e9      	b.n	800b53e <__ieee754_atan2+0xe6>
 800b56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b56e:	4619      	mov	r1, r3
 800b570:	e793      	b.n	800b49a <__ieee754_atan2+0x42>
 800b572:	a30f      	add	r3, pc, #60	; (adr r3, 800b5b0 <__ieee754_atan2+0x158>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f7f4 fe9e 	bl	80002b8 <__aeabi_dsub>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	a10d      	add	r1, pc, #52	; (adr r1, 800b5b8 <__ieee754_atan2+0x160>)
 800b582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b586:	f7f4 fe97 	bl	80002b8 <__aeabi_dsub>
 800b58a:	e786      	b.n	800b49a <__ieee754_atan2+0x42>
 800b58c:	a10a      	add	r1, pc, #40	; (adr r1, 800b5b8 <__ieee754_atan2+0x160>)
 800b58e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b592:	e782      	b.n	800b49a <__ieee754_atan2+0x42>
 800b594:	a10c      	add	r1, pc, #48	; (adr r1, 800b5c8 <__ieee754_atan2+0x170>)
 800b596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b59a:	e77e      	b.n	800b49a <__ieee754_atan2+0x42>
 800b59c:	2000      	movs	r0, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	e77b      	b.n	800b49a <__ieee754_atan2+0x42>
 800b5a2:	a107      	add	r1, pc, #28	; (adr r1, 800b5c0 <__ieee754_atan2+0x168>)
 800b5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a8:	e777      	b.n	800b49a <__ieee754_atan2+0x42>
 800b5aa:	bf00      	nop
 800b5ac:	f3af 8000 	nop.w
 800b5b0:	33145c07 	.word	0x33145c07
 800b5b4:	3ca1a626 	.word	0x3ca1a626
 800b5b8:	54442d18 	.word	0x54442d18
 800b5bc:	400921fb 	.word	0x400921fb
 800b5c0:	54442d18 	.word	0x54442d18
 800b5c4:	3ff921fb 	.word	0x3ff921fb
 800b5c8:	54442d18 	.word	0x54442d18
 800b5cc:	3fe921fb 	.word	0x3fe921fb
 800b5d0:	0800d080 	.word	0x0800d080
 800b5d4:	0800d098 	.word	0x0800d098
 800b5d8:	54442d18 	.word	0x54442d18
 800b5dc:	c00921fb 	.word	0xc00921fb
 800b5e0:	54442d18 	.word	0x54442d18
 800b5e4:	bff921fb 	.word	0xbff921fb
 800b5e8:	7ff00000 	.word	0x7ff00000
 800b5ec:	00000000 	.word	0x00000000

0800b5f0 <__ieee754_rem_pio2>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	ed2d 8b02 	vpush	{d8}
 800b5f8:	ec55 4b10 	vmov	r4, r5, d0
 800b5fc:	4bca      	ldr	r3, [pc, #808]	; (800b928 <__ieee754_rem_pio2+0x338>)
 800b5fe:	b08b      	sub	sp, #44	; 0x2c
 800b600:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b604:	4598      	cmp	r8, r3
 800b606:	4682      	mov	sl, r0
 800b608:	9502      	str	r5, [sp, #8]
 800b60a:	dc08      	bgt.n	800b61e <__ieee754_rem_pio2+0x2e>
 800b60c:	2200      	movs	r2, #0
 800b60e:	2300      	movs	r3, #0
 800b610:	ed80 0b00 	vstr	d0, [r0]
 800b614:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b618:	f04f 0b00 	mov.w	fp, #0
 800b61c:	e028      	b.n	800b670 <__ieee754_rem_pio2+0x80>
 800b61e:	4bc3      	ldr	r3, [pc, #780]	; (800b92c <__ieee754_rem_pio2+0x33c>)
 800b620:	4598      	cmp	r8, r3
 800b622:	dc78      	bgt.n	800b716 <__ieee754_rem_pio2+0x126>
 800b624:	9b02      	ldr	r3, [sp, #8]
 800b626:	4ec2      	ldr	r6, [pc, #776]	; (800b930 <__ieee754_rem_pio2+0x340>)
 800b628:	2b00      	cmp	r3, #0
 800b62a:	ee10 0a10 	vmov	r0, s0
 800b62e:	a3b0      	add	r3, pc, #704	; (adr r3, 800b8f0 <__ieee754_rem_pio2+0x300>)
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	4629      	mov	r1, r5
 800b636:	dd39      	ble.n	800b6ac <__ieee754_rem_pio2+0xbc>
 800b638:	f7f4 fe3e 	bl	80002b8 <__aeabi_dsub>
 800b63c:	45b0      	cmp	r8, r6
 800b63e:	4604      	mov	r4, r0
 800b640:	460d      	mov	r5, r1
 800b642:	d01b      	beq.n	800b67c <__ieee754_rem_pio2+0x8c>
 800b644:	a3ac      	add	r3, pc, #688	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x308>)
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	f7f4 fe35 	bl	80002b8 <__aeabi_dsub>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	e9ca 2300 	strd	r2, r3, [sl]
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f4 fe2d 	bl	80002b8 <__aeabi_dsub>
 800b65e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x308>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	f7f4 fe28 	bl	80002b8 <__aeabi_dsub>
 800b668:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b66c:	f04f 0b01 	mov.w	fp, #1
 800b670:	4658      	mov	r0, fp
 800b672:	b00b      	add	sp, #44	; 0x2c
 800b674:	ecbd 8b02 	vpop	{d8}
 800b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	a3a0      	add	r3, pc, #640	; (adr r3, 800b900 <__ieee754_rem_pio2+0x310>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 fe19 	bl	80002b8 <__aeabi_dsub>
 800b686:	a3a0      	add	r3, pc, #640	; (adr r3, 800b908 <__ieee754_rem_pio2+0x318>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	4604      	mov	r4, r0
 800b68e:	460d      	mov	r5, r1
 800b690:	f7f4 fe12 	bl	80002b8 <__aeabi_dsub>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	e9ca 2300 	strd	r2, r3, [sl]
 800b69c:	4620      	mov	r0, r4
 800b69e:	4629      	mov	r1, r5
 800b6a0:	f7f4 fe0a 	bl	80002b8 <__aeabi_dsub>
 800b6a4:	a398      	add	r3, pc, #608	; (adr r3, 800b908 <__ieee754_rem_pio2+0x318>)
 800b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6aa:	e7db      	b.n	800b664 <__ieee754_rem_pio2+0x74>
 800b6ac:	f7f4 fe06 	bl	80002bc <__adddf3>
 800b6b0:	45b0      	cmp	r8, r6
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	460d      	mov	r5, r1
 800b6b6:	d016      	beq.n	800b6e6 <__ieee754_rem_pio2+0xf6>
 800b6b8:	a38f      	add	r3, pc, #572	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x308>)
 800b6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6be:	f7f4 fdfd 	bl	80002bc <__adddf3>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	e9ca 2300 	strd	r2, r3, [sl]
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	f7f4 fdf3 	bl	80002b8 <__aeabi_dsub>
 800b6d2:	a389      	add	r3, pc, #548	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x308>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f7f4 fdf0 	bl	80002bc <__adddf3>
 800b6dc:	f04f 3bff 	mov.w	fp, #4294967295
 800b6e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6e4:	e7c4      	b.n	800b670 <__ieee754_rem_pio2+0x80>
 800b6e6:	a386      	add	r3, pc, #536	; (adr r3, 800b900 <__ieee754_rem_pio2+0x310>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 fde6 	bl	80002bc <__adddf3>
 800b6f0:	a385      	add	r3, pc, #532	; (adr r3, 800b908 <__ieee754_rem_pio2+0x318>)
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	460d      	mov	r5, r1
 800b6fa:	f7f4 fddf 	bl	80002bc <__adddf3>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	e9ca 2300 	strd	r2, r3, [sl]
 800b706:	4620      	mov	r0, r4
 800b708:	4629      	mov	r1, r5
 800b70a:	f7f4 fdd5 	bl	80002b8 <__aeabi_dsub>
 800b70e:	a37e      	add	r3, pc, #504	; (adr r3, 800b908 <__ieee754_rem_pio2+0x318>)
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	e7e0      	b.n	800b6d8 <__ieee754_rem_pio2+0xe8>
 800b716:	4b87      	ldr	r3, [pc, #540]	; (800b934 <__ieee754_rem_pio2+0x344>)
 800b718:	4598      	cmp	r8, r3
 800b71a:	f300 80d9 	bgt.w	800b8d0 <__ieee754_rem_pio2+0x2e0>
 800b71e:	f000 ffeb 	bl	800c6f8 <fabs>
 800b722:	ec55 4b10 	vmov	r4, r5, d0
 800b726:	ee10 0a10 	vmov	r0, s0
 800b72a:	a379      	add	r3, pc, #484	; (adr r3, 800b910 <__ieee754_rem_pio2+0x320>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	4629      	mov	r1, r5
 800b732:	f7f4 ff79 	bl	8000628 <__aeabi_dmul>
 800b736:	4b80      	ldr	r3, [pc, #512]	; (800b938 <__ieee754_rem_pio2+0x348>)
 800b738:	2200      	movs	r2, #0
 800b73a:	f7f4 fdbf 	bl	80002bc <__adddf3>
 800b73e:	f7f5 fa23 	bl	8000b88 <__aeabi_d2iz>
 800b742:	4683      	mov	fp, r0
 800b744:	f7f4 ff06 	bl	8000554 <__aeabi_i2d>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	ec43 2b18 	vmov	d8, r2, r3
 800b750:	a367      	add	r3, pc, #412	; (adr r3, 800b8f0 <__ieee754_rem_pio2+0x300>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	f7f4 ff67 	bl	8000628 <__aeabi_dmul>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	4620      	mov	r0, r4
 800b760:	4629      	mov	r1, r5
 800b762:	f7f4 fda9 	bl	80002b8 <__aeabi_dsub>
 800b766:	a364      	add	r3, pc, #400	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x308>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	4606      	mov	r6, r0
 800b76e:	460f      	mov	r7, r1
 800b770:	ec51 0b18 	vmov	r0, r1, d8
 800b774:	f7f4 ff58 	bl	8000628 <__aeabi_dmul>
 800b778:	f1bb 0f1f 	cmp.w	fp, #31
 800b77c:	4604      	mov	r4, r0
 800b77e:	460d      	mov	r5, r1
 800b780:	dc0d      	bgt.n	800b79e <__ieee754_rem_pio2+0x1ae>
 800b782:	4b6e      	ldr	r3, [pc, #440]	; (800b93c <__ieee754_rem_pio2+0x34c>)
 800b784:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b78c:	4543      	cmp	r3, r8
 800b78e:	d006      	beq.n	800b79e <__ieee754_rem_pio2+0x1ae>
 800b790:	4622      	mov	r2, r4
 800b792:	462b      	mov	r3, r5
 800b794:	4630      	mov	r0, r6
 800b796:	4639      	mov	r1, r7
 800b798:	f7f4 fd8e 	bl	80002b8 <__aeabi_dsub>
 800b79c:	e00f      	b.n	800b7be <__ieee754_rem_pio2+0x1ce>
 800b79e:	462b      	mov	r3, r5
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	f7f4 fd87 	bl	80002b8 <__aeabi_dsub>
 800b7aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b7ae:	9303      	str	r3, [sp, #12]
 800b7b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b7b8:	f1b8 0f10 	cmp.w	r8, #16
 800b7bc:	dc02      	bgt.n	800b7c4 <__ieee754_rem_pio2+0x1d4>
 800b7be:	e9ca 0100 	strd	r0, r1, [sl]
 800b7c2:	e039      	b.n	800b838 <__ieee754_rem_pio2+0x248>
 800b7c4:	a34e      	add	r3, pc, #312	; (adr r3, 800b900 <__ieee754_rem_pio2+0x310>)
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	ec51 0b18 	vmov	r0, r1, d8
 800b7ce:	f7f4 ff2b 	bl	8000628 <__aeabi_dmul>
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	460d      	mov	r5, r1
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	4630      	mov	r0, r6
 800b7dc:	4639      	mov	r1, r7
 800b7de:	f7f4 fd6b 	bl	80002b8 <__aeabi_dsub>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4689      	mov	r9, r1
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f4 fd63 	bl	80002b8 <__aeabi_dsub>
 800b7f2:	4622      	mov	r2, r4
 800b7f4:	462b      	mov	r3, r5
 800b7f6:	f7f4 fd5f 	bl	80002b8 <__aeabi_dsub>
 800b7fa:	a343      	add	r3, pc, #268	; (adr r3, 800b908 <__ieee754_rem_pio2+0x318>)
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	4604      	mov	r4, r0
 800b802:	460d      	mov	r5, r1
 800b804:	ec51 0b18 	vmov	r0, r1, d8
 800b808:	f7f4 ff0e 	bl	8000628 <__aeabi_dmul>
 800b80c:	4622      	mov	r2, r4
 800b80e:	462b      	mov	r3, r5
 800b810:	f7f4 fd52 	bl	80002b8 <__aeabi_dsub>
 800b814:	4602      	mov	r2, r0
 800b816:	460b      	mov	r3, r1
 800b818:	4604      	mov	r4, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	4640      	mov	r0, r8
 800b81e:	4649      	mov	r1, r9
 800b820:	f7f4 fd4a 	bl	80002b8 <__aeabi_dsub>
 800b824:	9a03      	ldr	r2, [sp, #12]
 800b826:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	2b31      	cmp	r3, #49	; 0x31
 800b82e:	dc24      	bgt.n	800b87a <__ieee754_rem_pio2+0x28a>
 800b830:	e9ca 0100 	strd	r0, r1, [sl]
 800b834:	4646      	mov	r6, r8
 800b836:	464f      	mov	r7, r9
 800b838:	e9da 8900 	ldrd	r8, r9, [sl]
 800b83c:	4630      	mov	r0, r6
 800b83e:	4642      	mov	r2, r8
 800b840:	464b      	mov	r3, r9
 800b842:	4639      	mov	r1, r7
 800b844:	f7f4 fd38 	bl	80002b8 <__aeabi_dsub>
 800b848:	462b      	mov	r3, r5
 800b84a:	4622      	mov	r2, r4
 800b84c:	f7f4 fd34 	bl	80002b8 <__aeabi_dsub>
 800b850:	9b02      	ldr	r3, [sp, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b858:	f6bf af0a 	bge.w	800b670 <__ieee754_rem_pio2+0x80>
 800b85c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b860:	f8ca 3004 	str.w	r3, [sl, #4]
 800b864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b868:	f8ca 8000 	str.w	r8, [sl]
 800b86c:	f8ca 0008 	str.w	r0, [sl, #8]
 800b870:	f8ca 300c 	str.w	r3, [sl, #12]
 800b874:	f1cb 0b00 	rsb	fp, fp, #0
 800b878:	e6fa      	b.n	800b670 <__ieee754_rem_pio2+0x80>
 800b87a:	a327      	add	r3, pc, #156	; (adr r3, 800b918 <__ieee754_rem_pio2+0x328>)
 800b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b880:	ec51 0b18 	vmov	r0, r1, d8
 800b884:	f7f4 fed0 	bl	8000628 <__aeabi_dmul>
 800b888:	4604      	mov	r4, r0
 800b88a:	460d      	mov	r5, r1
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	4640      	mov	r0, r8
 800b892:	4649      	mov	r1, r9
 800b894:	f7f4 fd10 	bl	80002b8 <__aeabi_dsub>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4606      	mov	r6, r0
 800b89e:	460f      	mov	r7, r1
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	4649      	mov	r1, r9
 800b8a4:	f7f4 fd08 	bl	80002b8 <__aeabi_dsub>
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	462b      	mov	r3, r5
 800b8ac:	f7f4 fd04 	bl	80002b8 <__aeabi_dsub>
 800b8b0:	a31b      	add	r3, pc, #108	; (adr r3, 800b920 <__ieee754_rem_pio2+0x330>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	ec51 0b18 	vmov	r0, r1, d8
 800b8be:	f7f4 feb3 	bl	8000628 <__aeabi_dmul>
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	462b      	mov	r3, r5
 800b8c6:	f7f4 fcf7 	bl	80002b8 <__aeabi_dsub>
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	460d      	mov	r5, r1
 800b8ce:	e75f      	b.n	800b790 <__ieee754_rem_pio2+0x1a0>
 800b8d0:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <__ieee754_rem_pio2+0x350>)
 800b8d2:	4598      	cmp	r8, r3
 800b8d4:	dd36      	ble.n	800b944 <__ieee754_rem_pio2+0x354>
 800b8d6:	ee10 2a10 	vmov	r2, s0
 800b8da:	462b      	mov	r3, r5
 800b8dc:	4620      	mov	r0, r4
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f7f4 fcea 	bl	80002b8 <__aeabi_dsub>
 800b8e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b8e8:	e9ca 0100 	strd	r0, r1, [sl]
 800b8ec:	e694      	b.n	800b618 <__ieee754_rem_pio2+0x28>
 800b8ee:	bf00      	nop
 800b8f0:	54400000 	.word	0x54400000
 800b8f4:	3ff921fb 	.word	0x3ff921fb
 800b8f8:	1a626331 	.word	0x1a626331
 800b8fc:	3dd0b461 	.word	0x3dd0b461
 800b900:	1a600000 	.word	0x1a600000
 800b904:	3dd0b461 	.word	0x3dd0b461
 800b908:	2e037073 	.word	0x2e037073
 800b90c:	3ba3198a 	.word	0x3ba3198a
 800b910:	6dc9c883 	.word	0x6dc9c883
 800b914:	3fe45f30 	.word	0x3fe45f30
 800b918:	2e000000 	.word	0x2e000000
 800b91c:	3ba3198a 	.word	0x3ba3198a
 800b920:	252049c1 	.word	0x252049c1
 800b924:	397b839a 	.word	0x397b839a
 800b928:	3fe921fb 	.word	0x3fe921fb
 800b92c:	4002d97b 	.word	0x4002d97b
 800b930:	3ff921fb 	.word	0x3ff921fb
 800b934:	413921fb 	.word	0x413921fb
 800b938:	3fe00000 	.word	0x3fe00000
 800b93c:	0800d0b0 	.word	0x0800d0b0
 800b940:	7fefffff 	.word	0x7fefffff
 800b944:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b948:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b94c:	ee10 0a10 	vmov	r0, s0
 800b950:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b954:	ee10 6a10 	vmov	r6, s0
 800b958:	460f      	mov	r7, r1
 800b95a:	f7f5 f915 	bl	8000b88 <__aeabi_d2iz>
 800b95e:	f7f4 fdf9 	bl	8000554 <__aeabi_i2d>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4630      	mov	r0, r6
 800b968:	4639      	mov	r1, r7
 800b96a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b96e:	f7f4 fca3 	bl	80002b8 <__aeabi_dsub>
 800b972:	4b23      	ldr	r3, [pc, #140]	; (800ba00 <__ieee754_rem_pio2+0x410>)
 800b974:	2200      	movs	r2, #0
 800b976:	f7f4 fe57 	bl	8000628 <__aeabi_dmul>
 800b97a:	460f      	mov	r7, r1
 800b97c:	4606      	mov	r6, r0
 800b97e:	f7f5 f903 	bl	8000b88 <__aeabi_d2iz>
 800b982:	f7f4 fde7 	bl	8000554 <__aeabi_i2d>
 800b986:	4602      	mov	r2, r0
 800b988:	460b      	mov	r3, r1
 800b98a:	4630      	mov	r0, r6
 800b98c:	4639      	mov	r1, r7
 800b98e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b992:	f7f4 fc91 	bl	80002b8 <__aeabi_dsub>
 800b996:	4b1a      	ldr	r3, [pc, #104]	; (800ba00 <__ieee754_rem_pio2+0x410>)
 800b998:	2200      	movs	r2, #0
 800b99a:	f7f4 fe45 	bl	8000628 <__aeabi_dmul>
 800b99e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9a2:	ad04      	add	r5, sp, #16
 800b9a4:	f04f 0803 	mov.w	r8, #3
 800b9a8:	46a9      	mov	r9, r5
 800b9aa:	2600      	movs	r6, #0
 800b9ac:	2700      	movs	r7, #0
 800b9ae:	4632      	mov	r2, r6
 800b9b0:	463b      	mov	r3, r7
 800b9b2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b9b6:	46c3      	mov	fp, r8
 800b9b8:	3d08      	subs	r5, #8
 800b9ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9be:	f7f5 f89b 	bl	8000af8 <__aeabi_dcmpeq>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d1f3      	bne.n	800b9ae <__ieee754_rem_pio2+0x3be>
 800b9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <__ieee754_rem_pio2+0x414>)
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	465b      	mov	r3, fp
 800b9d2:	4651      	mov	r1, sl
 800b9d4:	4648      	mov	r0, r9
 800b9d6:	f000 f8df 	bl	800bb98 <__kernel_rem_pio2>
 800b9da:	9b02      	ldr	r3, [sp, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	4683      	mov	fp, r0
 800b9e0:	f6bf ae46 	bge.w	800b670 <__ieee754_rem_pio2+0x80>
 800b9e4:	e9da 2100 	ldrd	r2, r1, [sl]
 800b9e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9ec:	e9ca 2300 	strd	r2, r3, [sl]
 800b9f0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b9f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9f8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b9fc:	e73a      	b.n	800b874 <__ieee754_rem_pio2+0x284>
 800b9fe:	bf00      	nop
 800ba00:	41700000 	.word	0x41700000
 800ba04:	0800d130 	.word	0x0800d130

0800ba08 <__kernel_cos>:
 800ba08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	ec57 6b10 	vmov	r6, r7, d0
 800ba10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ba14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ba18:	ed8d 1b00 	vstr	d1, [sp]
 800ba1c:	da07      	bge.n	800ba2e <__kernel_cos+0x26>
 800ba1e:	ee10 0a10 	vmov	r0, s0
 800ba22:	4639      	mov	r1, r7
 800ba24:	f7f5 f8b0 	bl	8000b88 <__aeabi_d2iz>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	f000 8088 	beq.w	800bb3e <__kernel_cos+0x136>
 800ba2e:	4632      	mov	r2, r6
 800ba30:	463b      	mov	r3, r7
 800ba32:	4630      	mov	r0, r6
 800ba34:	4639      	mov	r1, r7
 800ba36:	f7f4 fdf7 	bl	8000628 <__aeabi_dmul>
 800ba3a:	4b51      	ldr	r3, [pc, #324]	; (800bb80 <__kernel_cos+0x178>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	460d      	mov	r5, r1
 800ba42:	f7f4 fdf1 	bl	8000628 <__aeabi_dmul>
 800ba46:	a340      	add	r3, pc, #256	; (adr r3, 800bb48 <__kernel_cos+0x140>)
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	4682      	mov	sl, r0
 800ba4e:	468b      	mov	fp, r1
 800ba50:	4620      	mov	r0, r4
 800ba52:	4629      	mov	r1, r5
 800ba54:	f7f4 fde8 	bl	8000628 <__aeabi_dmul>
 800ba58:	a33d      	add	r3, pc, #244	; (adr r3, 800bb50 <__kernel_cos+0x148>)
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f7f4 fc2d 	bl	80002bc <__adddf3>
 800ba62:	4622      	mov	r2, r4
 800ba64:	462b      	mov	r3, r5
 800ba66:	f7f4 fddf 	bl	8000628 <__aeabi_dmul>
 800ba6a:	a33b      	add	r3, pc, #236	; (adr r3, 800bb58 <__kernel_cos+0x150>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f7f4 fc22 	bl	80002b8 <__aeabi_dsub>
 800ba74:	4622      	mov	r2, r4
 800ba76:	462b      	mov	r3, r5
 800ba78:	f7f4 fdd6 	bl	8000628 <__aeabi_dmul>
 800ba7c:	a338      	add	r3, pc, #224	; (adr r3, 800bb60 <__kernel_cos+0x158>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f7f4 fc1b 	bl	80002bc <__adddf3>
 800ba86:	4622      	mov	r2, r4
 800ba88:	462b      	mov	r3, r5
 800ba8a:	f7f4 fdcd 	bl	8000628 <__aeabi_dmul>
 800ba8e:	a336      	add	r3, pc, #216	; (adr r3, 800bb68 <__kernel_cos+0x160>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	f7f4 fc10 	bl	80002b8 <__aeabi_dsub>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	462b      	mov	r3, r5
 800ba9c:	f7f4 fdc4 	bl	8000628 <__aeabi_dmul>
 800baa0:	a333      	add	r3, pc, #204	; (adr r3, 800bb70 <__kernel_cos+0x168>)
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	f7f4 fc09 	bl	80002bc <__adddf3>
 800baaa:	4622      	mov	r2, r4
 800baac:	462b      	mov	r3, r5
 800baae:	f7f4 fdbb 	bl	8000628 <__aeabi_dmul>
 800bab2:	4622      	mov	r2, r4
 800bab4:	462b      	mov	r3, r5
 800bab6:	f7f4 fdb7 	bl	8000628 <__aeabi_dmul>
 800baba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800babe:	4604      	mov	r4, r0
 800bac0:	460d      	mov	r5, r1
 800bac2:	4630      	mov	r0, r6
 800bac4:	4639      	mov	r1, r7
 800bac6:	f7f4 fdaf 	bl	8000628 <__aeabi_dmul>
 800baca:	460b      	mov	r3, r1
 800bacc:	4602      	mov	r2, r0
 800bace:	4629      	mov	r1, r5
 800bad0:	4620      	mov	r0, r4
 800bad2:	f7f4 fbf1 	bl	80002b8 <__aeabi_dsub>
 800bad6:	4b2b      	ldr	r3, [pc, #172]	; (800bb84 <__kernel_cos+0x17c>)
 800bad8:	4598      	cmp	r8, r3
 800bada:	4606      	mov	r6, r0
 800badc:	460f      	mov	r7, r1
 800bade:	dc10      	bgt.n	800bb02 <__kernel_cos+0xfa>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	4650      	mov	r0, sl
 800bae6:	4659      	mov	r1, fp
 800bae8:	f7f4 fbe6 	bl	80002b8 <__aeabi_dsub>
 800baec:	460b      	mov	r3, r1
 800baee:	4926      	ldr	r1, [pc, #152]	; (800bb88 <__kernel_cos+0x180>)
 800baf0:	4602      	mov	r2, r0
 800baf2:	2000      	movs	r0, #0
 800baf4:	f7f4 fbe0 	bl	80002b8 <__aeabi_dsub>
 800baf8:	ec41 0b10 	vmov	d0, r0, r1
 800bafc:	b003      	add	sp, #12
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb02:	4b22      	ldr	r3, [pc, #136]	; (800bb8c <__kernel_cos+0x184>)
 800bb04:	4920      	ldr	r1, [pc, #128]	; (800bb88 <__kernel_cos+0x180>)
 800bb06:	4598      	cmp	r8, r3
 800bb08:	bfcc      	ite	gt
 800bb0a:	4d21      	ldrgt	r5, [pc, #132]	; (800bb90 <__kernel_cos+0x188>)
 800bb0c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bb10:	2400      	movs	r4, #0
 800bb12:	4622      	mov	r2, r4
 800bb14:	462b      	mov	r3, r5
 800bb16:	2000      	movs	r0, #0
 800bb18:	f7f4 fbce 	bl	80002b8 <__aeabi_dsub>
 800bb1c:	4622      	mov	r2, r4
 800bb1e:	4680      	mov	r8, r0
 800bb20:	4689      	mov	r9, r1
 800bb22:	462b      	mov	r3, r5
 800bb24:	4650      	mov	r0, sl
 800bb26:	4659      	mov	r1, fp
 800bb28:	f7f4 fbc6 	bl	80002b8 <__aeabi_dsub>
 800bb2c:	4632      	mov	r2, r6
 800bb2e:	463b      	mov	r3, r7
 800bb30:	f7f4 fbc2 	bl	80002b8 <__aeabi_dsub>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	4640      	mov	r0, r8
 800bb3a:	4649      	mov	r1, r9
 800bb3c:	e7da      	b.n	800baf4 <__kernel_cos+0xec>
 800bb3e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bb78 <__kernel_cos+0x170>
 800bb42:	e7db      	b.n	800bafc <__kernel_cos+0xf4>
 800bb44:	f3af 8000 	nop.w
 800bb48:	be8838d4 	.word	0xbe8838d4
 800bb4c:	bda8fae9 	.word	0xbda8fae9
 800bb50:	bdb4b1c4 	.word	0xbdb4b1c4
 800bb54:	3e21ee9e 	.word	0x3e21ee9e
 800bb58:	809c52ad 	.word	0x809c52ad
 800bb5c:	3e927e4f 	.word	0x3e927e4f
 800bb60:	19cb1590 	.word	0x19cb1590
 800bb64:	3efa01a0 	.word	0x3efa01a0
 800bb68:	16c15177 	.word	0x16c15177
 800bb6c:	3f56c16c 	.word	0x3f56c16c
 800bb70:	5555554c 	.word	0x5555554c
 800bb74:	3fa55555 	.word	0x3fa55555
 800bb78:	00000000 	.word	0x00000000
 800bb7c:	3ff00000 	.word	0x3ff00000
 800bb80:	3fe00000 	.word	0x3fe00000
 800bb84:	3fd33332 	.word	0x3fd33332
 800bb88:	3ff00000 	.word	0x3ff00000
 800bb8c:	3fe90000 	.word	0x3fe90000
 800bb90:	3fd20000 	.word	0x3fd20000
 800bb94:	00000000 	.word	0x00000000

0800bb98 <__kernel_rem_pio2>:
 800bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9c:	ed2d 8b02 	vpush	{d8}
 800bba0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800bba4:	f112 0f14 	cmn.w	r2, #20
 800bba8:	9308      	str	r3, [sp, #32]
 800bbaa:	9101      	str	r1, [sp, #4]
 800bbac:	4bc4      	ldr	r3, [pc, #784]	; (800bec0 <__kernel_rem_pio2+0x328>)
 800bbae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bbb0:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bbb6:	9302      	str	r3, [sp, #8]
 800bbb8:	9b08      	ldr	r3, [sp, #32]
 800bbba:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbbe:	bfa8      	it	ge
 800bbc0:	1ed4      	subge	r4, r2, #3
 800bbc2:	9306      	str	r3, [sp, #24]
 800bbc4:	bfb2      	itee	lt
 800bbc6:	2400      	movlt	r4, #0
 800bbc8:	2318      	movge	r3, #24
 800bbca:	fb94 f4f3 	sdivge	r4, r4, r3
 800bbce:	f06f 0317 	mvn.w	r3, #23
 800bbd2:	fb04 3303 	mla	r3, r4, r3, r3
 800bbd6:	eb03 0a02 	add.w	sl, r3, r2
 800bbda:	9b02      	ldr	r3, [sp, #8]
 800bbdc:	9a06      	ldr	r2, [sp, #24]
 800bbde:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800beb0 <__kernel_rem_pio2+0x318>
 800bbe2:	eb03 0802 	add.w	r8, r3, r2
 800bbe6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bbe8:	1aa7      	subs	r7, r4, r2
 800bbea:	ae22      	add	r6, sp, #136	; 0x88
 800bbec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bbf0:	2500      	movs	r5, #0
 800bbf2:	4545      	cmp	r5, r8
 800bbf4:	dd13      	ble.n	800bc1e <__kernel_rem_pio2+0x86>
 800bbf6:	9b08      	ldr	r3, [sp, #32]
 800bbf8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800beb0 <__kernel_rem_pio2+0x318>
 800bbfc:	aa22      	add	r2, sp, #136	; 0x88
 800bbfe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bc02:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bc06:	f04f 0800 	mov.w	r8, #0
 800bc0a:	9b02      	ldr	r3, [sp, #8]
 800bc0c:	4598      	cmp	r8, r3
 800bc0e:	dc2f      	bgt.n	800bc70 <__kernel_rem_pio2+0xd8>
 800bc10:	ed8d 8b04 	vstr	d8, [sp, #16]
 800bc14:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800bc18:	462f      	mov	r7, r5
 800bc1a:	2600      	movs	r6, #0
 800bc1c:	e01b      	b.n	800bc56 <__kernel_rem_pio2+0xbe>
 800bc1e:	42ef      	cmn	r7, r5
 800bc20:	d407      	bmi.n	800bc32 <__kernel_rem_pio2+0x9a>
 800bc22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bc26:	f7f4 fc95 	bl	8000554 <__aeabi_i2d>
 800bc2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bc2e:	3501      	adds	r5, #1
 800bc30:	e7df      	b.n	800bbf2 <__kernel_rem_pio2+0x5a>
 800bc32:	ec51 0b18 	vmov	r0, r1, d8
 800bc36:	e7f8      	b.n	800bc2a <__kernel_rem_pio2+0x92>
 800bc38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc3c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bc40:	f7f4 fcf2 	bl	8000628 <__aeabi_dmul>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc4c:	f7f4 fb36 	bl	80002bc <__adddf3>
 800bc50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc54:	3601      	adds	r6, #1
 800bc56:	9b06      	ldr	r3, [sp, #24]
 800bc58:	429e      	cmp	r6, r3
 800bc5a:	f1a7 0708 	sub.w	r7, r7, #8
 800bc5e:	ddeb      	ble.n	800bc38 <__kernel_rem_pio2+0xa0>
 800bc60:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bc64:	f108 0801 	add.w	r8, r8, #1
 800bc68:	ecab 7b02 	vstmia	fp!, {d7}
 800bc6c:	3508      	adds	r5, #8
 800bc6e:	e7cc      	b.n	800bc0a <__kernel_rem_pio2+0x72>
 800bc70:	9b02      	ldr	r3, [sp, #8]
 800bc72:	aa0e      	add	r2, sp, #56	; 0x38
 800bc74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc78:	930d      	str	r3, [sp, #52]	; 0x34
 800bc7a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bc7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bc80:	9c02      	ldr	r4, [sp, #8]
 800bc82:	930c      	str	r3, [sp, #48]	; 0x30
 800bc84:	00e3      	lsls	r3, r4, #3
 800bc86:	930a      	str	r3, [sp, #40]	; 0x28
 800bc88:	ab9a      	add	r3, sp, #616	; 0x268
 800bc8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc8e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bc92:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bc96:	ab72      	add	r3, sp, #456	; 0x1c8
 800bc98:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bc9c:	46c3      	mov	fp, r8
 800bc9e:	46a1      	mov	r9, r4
 800bca0:	f1b9 0f00 	cmp.w	r9, #0
 800bca4:	f1a5 0508 	sub.w	r5, r5, #8
 800bca8:	dc77      	bgt.n	800bd9a <__kernel_rem_pio2+0x202>
 800bcaa:	ec47 6b10 	vmov	d0, r6, r7
 800bcae:	4650      	mov	r0, sl
 800bcb0:	f000 fdae 	bl	800c810 <scalbn>
 800bcb4:	ec57 6b10 	vmov	r6, r7, d0
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bcbe:	ee10 0a10 	vmov	r0, s0
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	f7f4 fcb0 	bl	8000628 <__aeabi_dmul>
 800bcc8:	ec41 0b10 	vmov	d0, r0, r1
 800bccc:	f000 fd20 	bl	800c710 <floor>
 800bcd0:	4b7c      	ldr	r3, [pc, #496]	; (800bec4 <__kernel_rem_pio2+0x32c>)
 800bcd2:	ec51 0b10 	vmov	r0, r1, d0
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f7f4 fca6 	bl	8000628 <__aeabi_dmul>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	460b      	mov	r3, r1
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	f7f4 fae8 	bl	80002b8 <__aeabi_dsub>
 800bce8:	460f      	mov	r7, r1
 800bcea:	4606      	mov	r6, r0
 800bcec:	f7f4 ff4c 	bl	8000b88 <__aeabi_d2iz>
 800bcf0:	9004      	str	r0, [sp, #16]
 800bcf2:	f7f4 fc2f 	bl	8000554 <__aeabi_i2d>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	f7f4 fadb 	bl	80002b8 <__aeabi_dsub>
 800bd02:	f1ba 0f00 	cmp.w	sl, #0
 800bd06:	4606      	mov	r6, r0
 800bd08:	460f      	mov	r7, r1
 800bd0a:	dd6d      	ble.n	800bde8 <__kernel_rem_pio2+0x250>
 800bd0c:	1e62      	subs	r2, r4, #1
 800bd0e:	ab0e      	add	r3, sp, #56	; 0x38
 800bd10:	9d04      	ldr	r5, [sp, #16]
 800bd12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bd16:	f1ca 0118 	rsb	r1, sl, #24
 800bd1a:	fa40 f301 	asr.w	r3, r0, r1
 800bd1e:	441d      	add	r5, r3
 800bd20:	408b      	lsls	r3, r1
 800bd22:	1ac0      	subs	r0, r0, r3
 800bd24:	ab0e      	add	r3, sp, #56	; 0x38
 800bd26:	9504      	str	r5, [sp, #16]
 800bd28:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bd2c:	f1ca 0317 	rsb	r3, sl, #23
 800bd30:	fa40 fb03 	asr.w	fp, r0, r3
 800bd34:	f1bb 0f00 	cmp.w	fp, #0
 800bd38:	dd65      	ble.n	800be06 <__kernel_rem_pio2+0x26e>
 800bd3a:	9b04      	ldr	r3, [sp, #16]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	3301      	adds	r3, #1
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	4615      	mov	r5, r2
 800bd44:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bd48:	4294      	cmp	r4, r2
 800bd4a:	f300 809c 	bgt.w	800be86 <__kernel_rem_pio2+0x2ee>
 800bd4e:	f1ba 0f00 	cmp.w	sl, #0
 800bd52:	dd07      	ble.n	800bd64 <__kernel_rem_pio2+0x1cc>
 800bd54:	f1ba 0f01 	cmp.w	sl, #1
 800bd58:	f000 80c0 	beq.w	800bedc <__kernel_rem_pio2+0x344>
 800bd5c:	f1ba 0f02 	cmp.w	sl, #2
 800bd60:	f000 80c6 	beq.w	800bef0 <__kernel_rem_pio2+0x358>
 800bd64:	f1bb 0f02 	cmp.w	fp, #2
 800bd68:	d14d      	bne.n	800be06 <__kernel_rem_pio2+0x26e>
 800bd6a:	4632      	mov	r2, r6
 800bd6c:	463b      	mov	r3, r7
 800bd6e:	4956      	ldr	r1, [pc, #344]	; (800bec8 <__kernel_rem_pio2+0x330>)
 800bd70:	2000      	movs	r0, #0
 800bd72:	f7f4 faa1 	bl	80002b8 <__aeabi_dsub>
 800bd76:	4606      	mov	r6, r0
 800bd78:	460f      	mov	r7, r1
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	d043      	beq.n	800be06 <__kernel_rem_pio2+0x26e>
 800bd7e:	4650      	mov	r0, sl
 800bd80:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800beb8 <__kernel_rem_pio2+0x320>
 800bd84:	f000 fd44 	bl	800c810 <scalbn>
 800bd88:	4630      	mov	r0, r6
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	ec53 2b10 	vmov	r2, r3, d0
 800bd90:	f7f4 fa92 	bl	80002b8 <__aeabi_dsub>
 800bd94:	4606      	mov	r6, r0
 800bd96:	460f      	mov	r7, r1
 800bd98:	e035      	b.n	800be06 <__kernel_rem_pio2+0x26e>
 800bd9a:	4b4c      	ldr	r3, [pc, #304]	; (800becc <__kernel_rem_pio2+0x334>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	4630      	mov	r0, r6
 800bda0:	4639      	mov	r1, r7
 800bda2:	f7f4 fc41 	bl	8000628 <__aeabi_dmul>
 800bda6:	f7f4 feef 	bl	8000b88 <__aeabi_d2iz>
 800bdaa:	f7f4 fbd3 	bl	8000554 <__aeabi_i2d>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	ec43 2b18 	vmov	d8, r2, r3
 800bdb6:	4b46      	ldr	r3, [pc, #280]	; (800bed0 <__kernel_rem_pio2+0x338>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f7f4 fc35 	bl	8000628 <__aeabi_dmul>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	f7f4 fa77 	bl	80002b8 <__aeabi_dsub>
 800bdca:	f7f4 fedd 	bl	8000b88 <__aeabi_d2iz>
 800bdce:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdd2:	f84b 0b04 	str.w	r0, [fp], #4
 800bdd6:	ec51 0b18 	vmov	r0, r1, d8
 800bdda:	f7f4 fa6f 	bl	80002bc <__adddf3>
 800bdde:	f109 39ff 	add.w	r9, r9, #4294967295
 800bde2:	4606      	mov	r6, r0
 800bde4:	460f      	mov	r7, r1
 800bde6:	e75b      	b.n	800bca0 <__kernel_rem_pio2+0x108>
 800bde8:	d106      	bne.n	800bdf8 <__kernel_rem_pio2+0x260>
 800bdea:	1e63      	subs	r3, r4, #1
 800bdec:	aa0e      	add	r2, sp, #56	; 0x38
 800bdee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bdf2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bdf6:	e79d      	b.n	800bd34 <__kernel_rem_pio2+0x19c>
 800bdf8:	4b36      	ldr	r3, [pc, #216]	; (800bed4 <__kernel_rem_pio2+0x33c>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f7f4 fe9a 	bl	8000b34 <__aeabi_dcmpge>
 800be00:	2800      	cmp	r0, #0
 800be02:	d13d      	bne.n	800be80 <__kernel_rem_pio2+0x2e8>
 800be04:	4683      	mov	fp, r0
 800be06:	2200      	movs	r2, #0
 800be08:	2300      	movs	r3, #0
 800be0a:	4630      	mov	r0, r6
 800be0c:	4639      	mov	r1, r7
 800be0e:	f7f4 fe73 	bl	8000af8 <__aeabi_dcmpeq>
 800be12:	2800      	cmp	r0, #0
 800be14:	f000 80c0 	beq.w	800bf98 <__kernel_rem_pio2+0x400>
 800be18:	1e65      	subs	r5, r4, #1
 800be1a:	462b      	mov	r3, r5
 800be1c:	2200      	movs	r2, #0
 800be1e:	9902      	ldr	r1, [sp, #8]
 800be20:	428b      	cmp	r3, r1
 800be22:	da6c      	bge.n	800befe <__kernel_rem_pio2+0x366>
 800be24:	2a00      	cmp	r2, #0
 800be26:	f000 8089 	beq.w	800bf3c <__kernel_rem_pio2+0x3a4>
 800be2a:	ab0e      	add	r3, sp, #56	; 0x38
 800be2c:	f1aa 0a18 	sub.w	sl, sl, #24
 800be30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 80ad 	beq.w	800bf94 <__kernel_rem_pio2+0x3fc>
 800be3a:	4650      	mov	r0, sl
 800be3c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800beb8 <__kernel_rem_pio2+0x320>
 800be40:	f000 fce6 	bl	800c810 <scalbn>
 800be44:	ab9a      	add	r3, sp, #616	; 0x268
 800be46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800be4a:	ec57 6b10 	vmov	r6, r7, d0
 800be4e:	00ec      	lsls	r4, r5, #3
 800be50:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800be54:	46aa      	mov	sl, r5
 800be56:	f1ba 0f00 	cmp.w	sl, #0
 800be5a:	f280 80d6 	bge.w	800c00a <__kernel_rem_pio2+0x472>
 800be5e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800beb0 <__kernel_rem_pio2+0x318>
 800be62:	462e      	mov	r6, r5
 800be64:	2e00      	cmp	r6, #0
 800be66:	f2c0 8104 	blt.w	800c072 <__kernel_rem_pio2+0x4da>
 800be6a:	ab72      	add	r3, sp, #456	; 0x1c8
 800be6c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800be70:	f8df a064 	ldr.w	sl, [pc, #100]	; 800bed8 <__kernel_rem_pio2+0x340>
 800be74:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800be78:	f04f 0800 	mov.w	r8, #0
 800be7c:	1baf      	subs	r7, r5, r6
 800be7e:	e0ea      	b.n	800c056 <__kernel_rem_pio2+0x4be>
 800be80:	f04f 0b02 	mov.w	fp, #2
 800be84:	e759      	b.n	800bd3a <__kernel_rem_pio2+0x1a2>
 800be86:	f8d8 3000 	ldr.w	r3, [r8]
 800be8a:	b955      	cbnz	r5, 800bea2 <__kernel_rem_pio2+0x30a>
 800be8c:	b123      	cbz	r3, 800be98 <__kernel_rem_pio2+0x300>
 800be8e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800be92:	f8c8 3000 	str.w	r3, [r8]
 800be96:	2301      	movs	r3, #1
 800be98:	3201      	adds	r2, #1
 800be9a:	f108 0804 	add.w	r8, r8, #4
 800be9e:	461d      	mov	r5, r3
 800bea0:	e752      	b.n	800bd48 <__kernel_rem_pio2+0x1b0>
 800bea2:	1acb      	subs	r3, r1, r3
 800bea4:	f8c8 3000 	str.w	r3, [r8]
 800bea8:	462b      	mov	r3, r5
 800beaa:	e7f5      	b.n	800be98 <__kernel_rem_pio2+0x300>
 800beac:	f3af 8000 	nop.w
	...
 800bebc:	3ff00000 	.word	0x3ff00000
 800bec0:	0800d278 	.word	0x0800d278
 800bec4:	40200000 	.word	0x40200000
 800bec8:	3ff00000 	.word	0x3ff00000
 800becc:	3e700000 	.word	0x3e700000
 800bed0:	41700000 	.word	0x41700000
 800bed4:	3fe00000 	.word	0x3fe00000
 800bed8:	0800d238 	.word	0x0800d238
 800bedc:	1e62      	subs	r2, r4, #1
 800bede:	ab0e      	add	r3, sp, #56	; 0x38
 800bee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bee8:	a90e      	add	r1, sp, #56	; 0x38
 800beea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800beee:	e739      	b.n	800bd64 <__kernel_rem_pio2+0x1cc>
 800bef0:	1e62      	subs	r2, r4, #1
 800bef2:	ab0e      	add	r3, sp, #56	; 0x38
 800bef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800befc:	e7f4      	b.n	800bee8 <__kernel_rem_pio2+0x350>
 800befe:	a90e      	add	r1, sp, #56	; 0x38
 800bf00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	430a      	orrs	r2, r1
 800bf08:	e789      	b.n	800be1e <__kernel_rem_pio2+0x286>
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bf10:	2900      	cmp	r1, #0
 800bf12:	d0fa      	beq.n	800bf0a <__kernel_rem_pio2+0x372>
 800bf14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf16:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800bf1a:	446a      	add	r2, sp
 800bf1c:	3a98      	subs	r2, #152	; 0x98
 800bf1e:	920a      	str	r2, [sp, #40]	; 0x28
 800bf20:	9a08      	ldr	r2, [sp, #32]
 800bf22:	18e3      	adds	r3, r4, r3
 800bf24:	18a5      	adds	r5, r4, r2
 800bf26:	aa22      	add	r2, sp, #136	; 0x88
 800bf28:	f104 0801 	add.w	r8, r4, #1
 800bf2c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	9b04      	ldr	r3, [sp, #16]
 800bf34:	4543      	cmp	r3, r8
 800bf36:	da04      	bge.n	800bf42 <__kernel_rem_pio2+0x3aa>
 800bf38:	461c      	mov	r4, r3
 800bf3a:	e6a3      	b.n	800bc84 <__kernel_rem_pio2+0xec>
 800bf3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e7e4      	b.n	800bf0c <__kernel_rem_pio2+0x374>
 800bf42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bf48:	f7f4 fb04 	bl	8000554 <__aeabi_i2d>
 800bf4c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bf50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf52:	46ab      	mov	fp, r5
 800bf54:	461c      	mov	r4, r3
 800bf56:	f04f 0900 	mov.w	r9, #0
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	2700      	movs	r7, #0
 800bf5e:	9b06      	ldr	r3, [sp, #24]
 800bf60:	4599      	cmp	r9, r3
 800bf62:	dd06      	ble.n	800bf72 <__kernel_rem_pio2+0x3da>
 800bf64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf66:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bf6a:	f108 0801 	add.w	r8, r8, #1
 800bf6e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf70:	e7df      	b.n	800bf32 <__kernel_rem_pio2+0x39a>
 800bf72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bf76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bf7a:	f7f4 fb55 	bl	8000628 <__aeabi_dmul>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4630      	mov	r0, r6
 800bf84:	4639      	mov	r1, r7
 800bf86:	f7f4 f999 	bl	80002bc <__adddf3>
 800bf8a:	f109 0901 	add.w	r9, r9, #1
 800bf8e:	4606      	mov	r6, r0
 800bf90:	460f      	mov	r7, r1
 800bf92:	e7e4      	b.n	800bf5e <__kernel_rem_pio2+0x3c6>
 800bf94:	3d01      	subs	r5, #1
 800bf96:	e748      	b.n	800be2a <__kernel_rem_pio2+0x292>
 800bf98:	ec47 6b10 	vmov	d0, r6, r7
 800bf9c:	f1ca 0000 	rsb	r0, sl, #0
 800bfa0:	f000 fc36 	bl	800c810 <scalbn>
 800bfa4:	ec57 6b10 	vmov	r6, r7, d0
 800bfa8:	4ba0      	ldr	r3, [pc, #640]	; (800c22c <__kernel_rem_pio2+0x694>)
 800bfaa:	ee10 0a10 	vmov	r0, s0
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4639      	mov	r1, r7
 800bfb2:	f7f4 fdbf 	bl	8000b34 <__aeabi_dcmpge>
 800bfb6:	b1f8      	cbz	r0, 800bff8 <__kernel_rem_pio2+0x460>
 800bfb8:	4b9d      	ldr	r3, [pc, #628]	; (800c230 <__kernel_rem_pio2+0x698>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	f7f4 fb32 	bl	8000628 <__aeabi_dmul>
 800bfc4:	f7f4 fde0 	bl	8000b88 <__aeabi_d2iz>
 800bfc8:	4680      	mov	r8, r0
 800bfca:	f7f4 fac3 	bl	8000554 <__aeabi_i2d>
 800bfce:	4b97      	ldr	r3, [pc, #604]	; (800c22c <__kernel_rem_pio2+0x694>)
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f7f4 fb29 	bl	8000628 <__aeabi_dmul>
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4602      	mov	r2, r0
 800bfda:	4639      	mov	r1, r7
 800bfdc:	4630      	mov	r0, r6
 800bfde:	f7f4 f96b 	bl	80002b8 <__aeabi_dsub>
 800bfe2:	f7f4 fdd1 	bl	8000b88 <__aeabi_d2iz>
 800bfe6:	1c65      	adds	r5, r4, #1
 800bfe8:	ab0e      	add	r3, sp, #56	; 0x38
 800bfea:	f10a 0a18 	add.w	sl, sl, #24
 800bfee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bff2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bff6:	e720      	b.n	800be3a <__kernel_rem_pio2+0x2a2>
 800bff8:	4630      	mov	r0, r6
 800bffa:	4639      	mov	r1, r7
 800bffc:	f7f4 fdc4 	bl	8000b88 <__aeabi_d2iz>
 800c000:	ab0e      	add	r3, sp, #56	; 0x38
 800c002:	4625      	mov	r5, r4
 800c004:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c008:	e717      	b.n	800be3a <__kernel_rem_pio2+0x2a2>
 800c00a:	ab0e      	add	r3, sp, #56	; 0x38
 800c00c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c010:	f7f4 faa0 	bl	8000554 <__aeabi_i2d>
 800c014:	4632      	mov	r2, r6
 800c016:	463b      	mov	r3, r7
 800c018:	f7f4 fb06 	bl	8000628 <__aeabi_dmul>
 800c01c:	4b84      	ldr	r3, [pc, #528]	; (800c230 <__kernel_rem_pio2+0x698>)
 800c01e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c022:	2200      	movs	r2, #0
 800c024:	4630      	mov	r0, r6
 800c026:	4639      	mov	r1, r7
 800c028:	f7f4 fafe 	bl	8000628 <__aeabi_dmul>
 800c02c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c030:	4606      	mov	r6, r0
 800c032:	460f      	mov	r7, r1
 800c034:	e70f      	b.n	800be56 <__kernel_rem_pio2+0x2be>
 800c036:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c03a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c03e:	f7f4 faf3 	bl	8000628 <__aeabi_dmul>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c04a:	f7f4 f937 	bl	80002bc <__adddf3>
 800c04e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c052:	f108 0801 	add.w	r8, r8, #1
 800c056:	9b02      	ldr	r3, [sp, #8]
 800c058:	4598      	cmp	r8, r3
 800c05a:	dc01      	bgt.n	800c060 <__kernel_rem_pio2+0x4c8>
 800c05c:	45b8      	cmp	r8, r7
 800c05e:	ddea      	ble.n	800c036 <__kernel_rem_pio2+0x49e>
 800c060:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c064:	ab4a      	add	r3, sp, #296	; 0x128
 800c066:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c06a:	ed87 7b00 	vstr	d7, [r7]
 800c06e:	3e01      	subs	r6, #1
 800c070:	e6f8      	b.n	800be64 <__kernel_rem_pio2+0x2cc>
 800c072:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c074:	2b02      	cmp	r3, #2
 800c076:	dc0b      	bgt.n	800c090 <__kernel_rem_pio2+0x4f8>
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc35      	bgt.n	800c0e8 <__kernel_rem_pio2+0x550>
 800c07c:	d059      	beq.n	800c132 <__kernel_rem_pio2+0x59a>
 800c07e:	9b04      	ldr	r3, [sp, #16]
 800c080:	f003 0007 	and.w	r0, r3, #7
 800c084:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c088:	ecbd 8b02 	vpop	{d8}
 800c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c090:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c092:	2b03      	cmp	r3, #3
 800c094:	d1f3      	bne.n	800c07e <__kernel_rem_pio2+0x4e6>
 800c096:	ab4a      	add	r3, sp, #296	; 0x128
 800c098:	4423      	add	r3, r4
 800c09a:	9306      	str	r3, [sp, #24]
 800c09c:	461c      	mov	r4, r3
 800c09e:	469a      	mov	sl, r3
 800c0a0:	9502      	str	r5, [sp, #8]
 800c0a2:	9b02      	ldr	r3, [sp, #8]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f1aa 0a08 	sub.w	sl, sl, #8
 800c0aa:	dc6b      	bgt.n	800c184 <__kernel_rem_pio2+0x5ec>
 800c0ac:	46aa      	mov	sl, r5
 800c0ae:	f1ba 0f01 	cmp.w	sl, #1
 800c0b2:	f1a4 0408 	sub.w	r4, r4, #8
 800c0b6:	f300 8085 	bgt.w	800c1c4 <__kernel_rem_pio2+0x62c>
 800c0ba:	9c06      	ldr	r4, [sp, #24]
 800c0bc:	2000      	movs	r0, #0
 800c0be:	3408      	adds	r4, #8
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	2d01      	cmp	r5, #1
 800c0c4:	f300 809d 	bgt.w	800c202 <__kernel_rem_pio2+0x66a>
 800c0c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c0cc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c0d0:	f1bb 0f00 	cmp.w	fp, #0
 800c0d4:	f040 809b 	bne.w	800c20e <__kernel_rem_pio2+0x676>
 800c0d8:	9b01      	ldr	r3, [sp, #4]
 800c0da:	e9c3 5600 	strd	r5, r6, [r3]
 800c0de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c0e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c0e6:	e7ca      	b.n	800c07e <__kernel_rem_pio2+0x4e6>
 800c0e8:	3408      	adds	r4, #8
 800c0ea:	ab4a      	add	r3, sp, #296	; 0x128
 800c0ec:	441c      	add	r4, r3
 800c0ee:	462e      	mov	r6, r5
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	2e00      	cmp	r6, #0
 800c0f6:	da36      	bge.n	800c166 <__kernel_rem_pio2+0x5ce>
 800c0f8:	f1bb 0f00 	cmp.w	fp, #0
 800c0fc:	d039      	beq.n	800c172 <__kernel_rem_pio2+0x5da>
 800c0fe:	4602      	mov	r2, r0
 800c100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c104:	9c01      	ldr	r4, [sp, #4]
 800c106:	e9c4 2300 	strd	r2, r3, [r4]
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c112:	f7f4 f8d1 	bl	80002b8 <__aeabi_dsub>
 800c116:	ae4c      	add	r6, sp, #304	; 0x130
 800c118:	2401      	movs	r4, #1
 800c11a:	42a5      	cmp	r5, r4
 800c11c:	da2c      	bge.n	800c178 <__kernel_rem_pio2+0x5e0>
 800c11e:	f1bb 0f00 	cmp.w	fp, #0
 800c122:	d002      	beq.n	800c12a <__kernel_rem_pio2+0x592>
 800c124:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c128:	4619      	mov	r1, r3
 800c12a:	9b01      	ldr	r3, [sp, #4]
 800c12c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c130:	e7a5      	b.n	800c07e <__kernel_rem_pio2+0x4e6>
 800c132:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c136:	eb0d 0403 	add.w	r4, sp, r3
 800c13a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c13e:	2000      	movs	r0, #0
 800c140:	2100      	movs	r1, #0
 800c142:	2d00      	cmp	r5, #0
 800c144:	da09      	bge.n	800c15a <__kernel_rem_pio2+0x5c2>
 800c146:	f1bb 0f00 	cmp.w	fp, #0
 800c14a:	d002      	beq.n	800c152 <__kernel_rem_pio2+0x5ba>
 800c14c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c150:	4619      	mov	r1, r3
 800c152:	9b01      	ldr	r3, [sp, #4]
 800c154:	e9c3 0100 	strd	r0, r1, [r3]
 800c158:	e791      	b.n	800c07e <__kernel_rem_pio2+0x4e6>
 800c15a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c15e:	f7f4 f8ad 	bl	80002bc <__adddf3>
 800c162:	3d01      	subs	r5, #1
 800c164:	e7ed      	b.n	800c142 <__kernel_rem_pio2+0x5aa>
 800c166:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c16a:	f7f4 f8a7 	bl	80002bc <__adddf3>
 800c16e:	3e01      	subs	r6, #1
 800c170:	e7c0      	b.n	800c0f4 <__kernel_rem_pio2+0x55c>
 800c172:	4602      	mov	r2, r0
 800c174:	460b      	mov	r3, r1
 800c176:	e7c5      	b.n	800c104 <__kernel_rem_pio2+0x56c>
 800c178:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c17c:	f7f4 f89e 	bl	80002bc <__adddf3>
 800c180:	3401      	adds	r4, #1
 800c182:	e7ca      	b.n	800c11a <__kernel_rem_pio2+0x582>
 800c184:	e9da 8900 	ldrd	r8, r9, [sl]
 800c188:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c18c:	9b02      	ldr	r3, [sp, #8]
 800c18e:	3b01      	subs	r3, #1
 800c190:	9302      	str	r3, [sp, #8]
 800c192:	4632      	mov	r2, r6
 800c194:	463b      	mov	r3, r7
 800c196:	4640      	mov	r0, r8
 800c198:	4649      	mov	r1, r9
 800c19a:	f7f4 f88f 	bl	80002bc <__adddf3>
 800c19e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	f7f4 f885 	bl	80002b8 <__aeabi_dsub>
 800c1ae:	4632      	mov	r2, r6
 800c1b0:	463b      	mov	r3, r7
 800c1b2:	f7f4 f883 	bl	80002bc <__adddf3>
 800c1b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c1ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c1be:	ed8a 7b00 	vstr	d7, [sl]
 800c1c2:	e76e      	b.n	800c0a2 <__kernel_rem_pio2+0x50a>
 800c1c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c1c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	4632      	mov	r2, r6
 800c1d0:	463b      	mov	r3, r7
 800c1d2:	4649      	mov	r1, r9
 800c1d4:	f7f4 f872 	bl	80002bc <__adddf3>
 800c1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	f7f4 f868 	bl	80002b8 <__aeabi_dsub>
 800c1e8:	4632      	mov	r2, r6
 800c1ea:	463b      	mov	r3, r7
 800c1ec:	f7f4 f866 	bl	80002bc <__adddf3>
 800c1f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c1f8:	ed84 7b00 	vstr	d7, [r4]
 800c1fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c200:	e755      	b.n	800c0ae <__kernel_rem_pio2+0x516>
 800c202:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c206:	f7f4 f859 	bl	80002bc <__adddf3>
 800c20a:	3d01      	subs	r5, #1
 800c20c:	e759      	b.n	800c0c2 <__kernel_rem_pio2+0x52a>
 800c20e:	9b01      	ldr	r3, [sp, #4]
 800c210:	9a01      	ldr	r2, [sp, #4]
 800c212:	601d      	str	r5, [r3, #0]
 800c214:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c218:	605c      	str	r4, [r3, #4]
 800c21a:	609f      	str	r7, [r3, #8]
 800c21c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c220:	60d3      	str	r3, [r2, #12]
 800c222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c226:	6110      	str	r0, [r2, #16]
 800c228:	6153      	str	r3, [r2, #20]
 800c22a:	e728      	b.n	800c07e <__kernel_rem_pio2+0x4e6>
 800c22c:	41700000 	.word	0x41700000
 800c230:	3e700000 	.word	0x3e700000
 800c234:	00000000 	.word	0x00000000

0800c238 <__kernel_sin>:
 800c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	ed2d 8b04 	vpush	{d8-d9}
 800c240:	eeb0 8a41 	vmov.f32	s16, s2
 800c244:	eef0 8a61 	vmov.f32	s17, s3
 800c248:	ec55 4b10 	vmov	r4, r5, d0
 800c24c:	b083      	sub	sp, #12
 800c24e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c252:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c256:	9001      	str	r0, [sp, #4]
 800c258:	da06      	bge.n	800c268 <__kernel_sin+0x30>
 800c25a:	ee10 0a10 	vmov	r0, s0
 800c25e:	4629      	mov	r1, r5
 800c260:	f7f4 fc92 	bl	8000b88 <__aeabi_d2iz>
 800c264:	2800      	cmp	r0, #0
 800c266:	d051      	beq.n	800c30c <__kernel_sin+0xd4>
 800c268:	4622      	mov	r2, r4
 800c26a:	462b      	mov	r3, r5
 800c26c:	4620      	mov	r0, r4
 800c26e:	4629      	mov	r1, r5
 800c270:	f7f4 f9da 	bl	8000628 <__aeabi_dmul>
 800c274:	4682      	mov	sl, r0
 800c276:	468b      	mov	fp, r1
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	4620      	mov	r0, r4
 800c27e:	4629      	mov	r1, r5
 800c280:	f7f4 f9d2 	bl	8000628 <__aeabi_dmul>
 800c284:	a341      	add	r3, pc, #260	; (adr r3, 800c38c <__kernel_sin+0x154>)
 800c286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28a:	4680      	mov	r8, r0
 800c28c:	4689      	mov	r9, r1
 800c28e:	4650      	mov	r0, sl
 800c290:	4659      	mov	r1, fp
 800c292:	f7f4 f9c9 	bl	8000628 <__aeabi_dmul>
 800c296:	a33f      	add	r3, pc, #252	; (adr r3, 800c394 <__kernel_sin+0x15c>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	f7f4 f80c 	bl	80002b8 <__aeabi_dsub>
 800c2a0:	4652      	mov	r2, sl
 800c2a2:	465b      	mov	r3, fp
 800c2a4:	f7f4 f9c0 	bl	8000628 <__aeabi_dmul>
 800c2a8:	a33c      	add	r3, pc, #240	; (adr r3, 800c39c <__kernel_sin+0x164>)
 800c2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ae:	f7f4 f805 	bl	80002bc <__adddf3>
 800c2b2:	4652      	mov	r2, sl
 800c2b4:	465b      	mov	r3, fp
 800c2b6:	f7f4 f9b7 	bl	8000628 <__aeabi_dmul>
 800c2ba:	a33a      	add	r3, pc, #232	; (adr r3, 800c3a4 <__kernel_sin+0x16c>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f7f3 fffa 	bl	80002b8 <__aeabi_dsub>
 800c2c4:	4652      	mov	r2, sl
 800c2c6:	465b      	mov	r3, fp
 800c2c8:	f7f4 f9ae 	bl	8000628 <__aeabi_dmul>
 800c2cc:	a337      	add	r3, pc, #220	; (adr r3, 800c3ac <__kernel_sin+0x174>)
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	f7f3 fff3 	bl	80002bc <__adddf3>
 800c2d6:	9b01      	ldr	r3, [sp, #4]
 800c2d8:	4606      	mov	r6, r0
 800c2da:	460f      	mov	r7, r1
 800c2dc:	b9eb      	cbnz	r3, 800c31a <__kernel_sin+0xe2>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4650      	mov	r0, sl
 800c2e4:	4659      	mov	r1, fp
 800c2e6:	f7f4 f99f 	bl	8000628 <__aeabi_dmul>
 800c2ea:	a325      	add	r3, pc, #148	; (adr r3, 800c380 <__kernel_sin+0x148>)
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f7f3 ffe2 	bl	80002b8 <__aeabi_dsub>
 800c2f4:	4642      	mov	r2, r8
 800c2f6:	464b      	mov	r3, r9
 800c2f8:	f7f4 f996 	bl	8000628 <__aeabi_dmul>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	4620      	mov	r0, r4
 800c302:	4629      	mov	r1, r5
 800c304:	f7f3 ffda 	bl	80002bc <__adddf3>
 800c308:	4604      	mov	r4, r0
 800c30a:	460d      	mov	r5, r1
 800c30c:	ec45 4b10 	vmov	d0, r4, r5
 800c310:	b003      	add	sp, #12
 800c312:	ecbd 8b04 	vpop	{d8-d9}
 800c316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31a:	4b1b      	ldr	r3, [pc, #108]	; (800c388 <__kernel_sin+0x150>)
 800c31c:	ec51 0b18 	vmov	r0, r1, d8
 800c320:	2200      	movs	r2, #0
 800c322:	f7f4 f981 	bl	8000628 <__aeabi_dmul>
 800c326:	4632      	mov	r2, r6
 800c328:	ec41 0b19 	vmov	d9, r0, r1
 800c32c:	463b      	mov	r3, r7
 800c32e:	4640      	mov	r0, r8
 800c330:	4649      	mov	r1, r9
 800c332:	f7f4 f979 	bl	8000628 <__aeabi_dmul>
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	ec51 0b19 	vmov	r0, r1, d9
 800c33e:	f7f3 ffbb 	bl	80002b8 <__aeabi_dsub>
 800c342:	4652      	mov	r2, sl
 800c344:	465b      	mov	r3, fp
 800c346:	f7f4 f96f 	bl	8000628 <__aeabi_dmul>
 800c34a:	ec53 2b18 	vmov	r2, r3, d8
 800c34e:	f7f3 ffb3 	bl	80002b8 <__aeabi_dsub>
 800c352:	a30b      	add	r3, pc, #44	; (adr r3, 800c380 <__kernel_sin+0x148>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	4606      	mov	r6, r0
 800c35a:	460f      	mov	r7, r1
 800c35c:	4640      	mov	r0, r8
 800c35e:	4649      	mov	r1, r9
 800c360:	f7f4 f962 	bl	8000628 <__aeabi_dmul>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4630      	mov	r0, r6
 800c36a:	4639      	mov	r1, r7
 800c36c:	f7f3 ffa6 	bl	80002bc <__adddf3>
 800c370:	4602      	mov	r2, r0
 800c372:	460b      	mov	r3, r1
 800c374:	4620      	mov	r0, r4
 800c376:	4629      	mov	r1, r5
 800c378:	f7f3 ff9e 	bl	80002b8 <__aeabi_dsub>
 800c37c:	e7c4      	b.n	800c308 <__kernel_sin+0xd0>
 800c37e:	bf00      	nop
 800c380:	55555549 	.word	0x55555549
 800c384:	3fc55555 	.word	0x3fc55555
 800c388:	3fe00000 	.word	0x3fe00000
 800c38c:	5acfd57c 	.word	0x5acfd57c
 800c390:	3de5d93a 	.word	0x3de5d93a
 800c394:	8a2b9ceb 	.word	0x8a2b9ceb
 800c398:	3e5ae5e6 	.word	0x3e5ae5e6
 800c39c:	57b1fe7d 	.word	0x57b1fe7d
 800c3a0:	3ec71de3 	.word	0x3ec71de3
 800c3a4:	19c161d5 	.word	0x19c161d5
 800c3a8:	3f2a01a0 	.word	0x3f2a01a0
 800c3ac:	1110f8a6 	.word	0x1110f8a6
 800c3b0:	3f811111 	.word	0x3f811111
 800c3b4:	00000000 	.word	0x00000000

0800c3b8 <atan>:
 800c3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	ec55 4b10 	vmov	r4, r5, d0
 800c3c0:	4bc3      	ldr	r3, [pc, #780]	; (800c6d0 <atan+0x318>)
 800c3c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c3c6:	429e      	cmp	r6, r3
 800c3c8:	46ab      	mov	fp, r5
 800c3ca:	dd18      	ble.n	800c3fe <atan+0x46>
 800c3cc:	4bc1      	ldr	r3, [pc, #772]	; (800c6d4 <atan+0x31c>)
 800c3ce:	429e      	cmp	r6, r3
 800c3d0:	dc01      	bgt.n	800c3d6 <atan+0x1e>
 800c3d2:	d109      	bne.n	800c3e8 <atan+0x30>
 800c3d4:	b144      	cbz	r4, 800c3e8 <atan+0x30>
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	462b      	mov	r3, r5
 800c3da:	4620      	mov	r0, r4
 800c3dc:	4629      	mov	r1, r5
 800c3de:	f7f3 ff6d 	bl	80002bc <__adddf3>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	e006      	b.n	800c3f6 <atan+0x3e>
 800c3e8:	f1bb 0f00 	cmp.w	fp, #0
 800c3ec:	f300 8131 	bgt.w	800c652 <atan+0x29a>
 800c3f0:	a59b      	add	r5, pc, #620	; (adr r5, 800c660 <atan+0x2a8>)
 800c3f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c3f6:	ec45 4b10 	vmov	d0, r4, r5
 800c3fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	4bb6      	ldr	r3, [pc, #728]	; (800c6d8 <atan+0x320>)
 800c400:	429e      	cmp	r6, r3
 800c402:	dc14      	bgt.n	800c42e <atan+0x76>
 800c404:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c408:	429e      	cmp	r6, r3
 800c40a:	dc0d      	bgt.n	800c428 <atan+0x70>
 800c40c:	a396      	add	r3, pc, #600	; (adr r3, 800c668 <atan+0x2b0>)
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	ee10 0a10 	vmov	r0, s0
 800c416:	4629      	mov	r1, r5
 800c418:	f7f3 ff50 	bl	80002bc <__adddf3>
 800c41c:	4baf      	ldr	r3, [pc, #700]	; (800c6dc <atan+0x324>)
 800c41e:	2200      	movs	r2, #0
 800c420:	f7f4 fb92 	bl	8000b48 <__aeabi_dcmpgt>
 800c424:	2800      	cmp	r0, #0
 800c426:	d1e6      	bne.n	800c3f6 <atan+0x3e>
 800c428:	f04f 3aff 	mov.w	sl, #4294967295
 800c42c:	e02b      	b.n	800c486 <atan+0xce>
 800c42e:	f000 f963 	bl	800c6f8 <fabs>
 800c432:	4bab      	ldr	r3, [pc, #684]	; (800c6e0 <atan+0x328>)
 800c434:	429e      	cmp	r6, r3
 800c436:	ec55 4b10 	vmov	r4, r5, d0
 800c43a:	f300 80bf 	bgt.w	800c5bc <atan+0x204>
 800c43e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c442:	429e      	cmp	r6, r3
 800c444:	f300 80a0 	bgt.w	800c588 <atan+0x1d0>
 800c448:	ee10 2a10 	vmov	r2, s0
 800c44c:	ee10 0a10 	vmov	r0, s0
 800c450:	462b      	mov	r3, r5
 800c452:	4629      	mov	r1, r5
 800c454:	f7f3 ff32 	bl	80002bc <__adddf3>
 800c458:	4ba0      	ldr	r3, [pc, #640]	; (800c6dc <atan+0x324>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	f7f3 ff2c 	bl	80002b8 <__aeabi_dsub>
 800c460:	2200      	movs	r2, #0
 800c462:	4606      	mov	r6, r0
 800c464:	460f      	mov	r7, r1
 800c466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c46a:	4620      	mov	r0, r4
 800c46c:	4629      	mov	r1, r5
 800c46e:	f7f3 ff25 	bl	80002bc <__adddf3>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4630      	mov	r0, r6
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f4 f9ff 	bl	800087c <__aeabi_ddiv>
 800c47e:	f04f 0a00 	mov.w	sl, #0
 800c482:	4604      	mov	r4, r0
 800c484:	460d      	mov	r5, r1
 800c486:	4622      	mov	r2, r4
 800c488:	462b      	mov	r3, r5
 800c48a:	4620      	mov	r0, r4
 800c48c:	4629      	mov	r1, r5
 800c48e:	f7f4 f8cb 	bl	8000628 <__aeabi_dmul>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4680      	mov	r8, r0
 800c498:	4689      	mov	r9, r1
 800c49a:	f7f4 f8c5 	bl	8000628 <__aeabi_dmul>
 800c49e:	a374      	add	r3, pc, #464	; (adr r3, 800c670 <atan+0x2b8>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	460f      	mov	r7, r1
 800c4a8:	f7f4 f8be 	bl	8000628 <__aeabi_dmul>
 800c4ac:	a372      	add	r3, pc, #456	; (adr r3, 800c678 <atan+0x2c0>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	f7f3 ff03 	bl	80002bc <__adddf3>
 800c4b6:	4632      	mov	r2, r6
 800c4b8:	463b      	mov	r3, r7
 800c4ba:	f7f4 f8b5 	bl	8000628 <__aeabi_dmul>
 800c4be:	a370      	add	r3, pc, #448	; (adr r3, 800c680 <atan+0x2c8>)
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	f7f3 fefa 	bl	80002bc <__adddf3>
 800c4c8:	4632      	mov	r2, r6
 800c4ca:	463b      	mov	r3, r7
 800c4cc:	f7f4 f8ac 	bl	8000628 <__aeabi_dmul>
 800c4d0:	a36d      	add	r3, pc, #436	; (adr r3, 800c688 <atan+0x2d0>)
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	f7f3 fef1 	bl	80002bc <__adddf3>
 800c4da:	4632      	mov	r2, r6
 800c4dc:	463b      	mov	r3, r7
 800c4de:	f7f4 f8a3 	bl	8000628 <__aeabi_dmul>
 800c4e2:	a36b      	add	r3, pc, #428	; (adr r3, 800c690 <atan+0x2d8>)
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	f7f3 fee8 	bl	80002bc <__adddf3>
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	f7f4 f89a 	bl	8000628 <__aeabi_dmul>
 800c4f4:	a368      	add	r3, pc, #416	; (adr r3, 800c698 <atan+0x2e0>)
 800c4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fa:	f7f3 fedf 	bl	80002bc <__adddf3>
 800c4fe:	4642      	mov	r2, r8
 800c500:	464b      	mov	r3, r9
 800c502:	f7f4 f891 	bl	8000628 <__aeabi_dmul>
 800c506:	a366      	add	r3, pc, #408	; (adr r3, 800c6a0 <atan+0x2e8>)
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	4680      	mov	r8, r0
 800c50e:	4689      	mov	r9, r1
 800c510:	4630      	mov	r0, r6
 800c512:	4639      	mov	r1, r7
 800c514:	f7f4 f888 	bl	8000628 <__aeabi_dmul>
 800c518:	a363      	add	r3, pc, #396	; (adr r3, 800c6a8 <atan+0x2f0>)
 800c51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51e:	f7f3 fecb 	bl	80002b8 <__aeabi_dsub>
 800c522:	4632      	mov	r2, r6
 800c524:	463b      	mov	r3, r7
 800c526:	f7f4 f87f 	bl	8000628 <__aeabi_dmul>
 800c52a:	a361      	add	r3, pc, #388	; (adr r3, 800c6b0 <atan+0x2f8>)
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	f7f3 fec2 	bl	80002b8 <__aeabi_dsub>
 800c534:	4632      	mov	r2, r6
 800c536:	463b      	mov	r3, r7
 800c538:	f7f4 f876 	bl	8000628 <__aeabi_dmul>
 800c53c:	a35e      	add	r3, pc, #376	; (adr r3, 800c6b8 <atan+0x300>)
 800c53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c542:	f7f3 feb9 	bl	80002b8 <__aeabi_dsub>
 800c546:	4632      	mov	r2, r6
 800c548:	463b      	mov	r3, r7
 800c54a:	f7f4 f86d 	bl	8000628 <__aeabi_dmul>
 800c54e:	a35c      	add	r3, pc, #368	; (adr r3, 800c6c0 <atan+0x308>)
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	f7f3 feb0 	bl	80002b8 <__aeabi_dsub>
 800c558:	4632      	mov	r2, r6
 800c55a:	463b      	mov	r3, r7
 800c55c:	f7f4 f864 	bl	8000628 <__aeabi_dmul>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4640      	mov	r0, r8
 800c566:	4649      	mov	r1, r9
 800c568:	f7f3 fea8 	bl	80002bc <__adddf3>
 800c56c:	4622      	mov	r2, r4
 800c56e:	462b      	mov	r3, r5
 800c570:	f7f4 f85a 	bl	8000628 <__aeabi_dmul>
 800c574:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c578:	4602      	mov	r2, r0
 800c57a:	460b      	mov	r3, r1
 800c57c:	d14b      	bne.n	800c616 <atan+0x25e>
 800c57e:	4620      	mov	r0, r4
 800c580:	4629      	mov	r1, r5
 800c582:	f7f3 fe99 	bl	80002b8 <__aeabi_dsub>
 800c586:	e72c      	b.n	800c3e2 <atan+0x2a>
 800c588:	ee10 0a10 	vmov	r0, s0
 800c58c:	4b53      	ldr	r3, [pc, #332]	; (800c6dc <atan+0x324>)
 800c58e:	2200      	movs	r2, #0
 800c590:	4629      	mov	r1, r5
 800c592:	f7f3 fe91 	bl	80002b8 <__aeabi_dsub>
 800c596:	4b51      	ldr	r3, [pc, #324]	; (800c6dc <atan+0x324>)
 800c598:	4606      	mov	r6, r0
 800c59a:	460f      	mov	r7, r1
 800c59c:	2200      	movs	r2, #0
 800c59e:	4620      	mov	r0, r4
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	f7f3 fe8b 	bl	80002bc <__adddf3>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	f7f4 f965 	bl	800087c <__aeabi_ddiv>
 800c5b2:	f04f 0a01 	mov.w	sl, #1
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	460d      	mov	r5, r1
 800c5ba:	e764      	b.n	800c486 <atan+0xce>
 800c5bc:	4b49      	ldr	r3, [pc, #292]	; (800c6e4 <atan+0x32c>)
 800c5be:	429e      	cmp	r6, r3
 800c5c0:	da1d      	bge.n	800c5fe <atan+0x246>
 800c5c2:	ee10 0a10 	vmov	r0, s0
 800c5c6:	4b48      	ldr	r3, [pc, #288]	; (800c6e8 <atan+0x330>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f7f3 fe74 	bl	80002b8 <__aeabi_dsub>
 800c5d0:	4b45      	ldr	r3, [pc, #276]	; (800c6e8 <atan+0x330>)
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	460f      	mov	r7, r1
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	4620      	mov	r0, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	f7f4 f824 	bl	8000628 <__aeabi_dmul>
 800c5e0:	4b3e      	ldr	r3, [pc, #248]	; (800c6dc <atan+0x324>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f7f3 fe6a 	bl	80002bc <__adddf3>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	4639      	mov	r1, r7
 800c5f0:	f7f4 f944 	bl	800087c <__aeabi_ddiv>
 800c5f4:	f04f 0a02 	mov.w	sl, #2
 800c5f8:	4604      	mov	r4, r0
 800c5fa:	460d      	mov	r5, r1
 800c5fc:	e743      	b.n	800c486 <atan+0xce>
 800c5fe:	462b      	mov	r3, r5
 800c600:	ee10 2a10 	vmov	r2, s0
 800c604:	4939      	ldr	r1, [pc, #228]	; (800c6ec <atan+0x334>)
 800c606:	2000      	movs	r0, #0
 800c608:	f7f4 f938 	bl	800087c <__aeabi_ddiv>
 800c60c:	f04f 0a03 	mov.w	sl, #3
 800c610:	4604      	mov	r4, r0
 800c612:	460d      	mov	r5, r1
 800c614:	e737      	b.n	800c486 <atan+0xce>
 800c616:	4b36      	ldr	r3, [pc, #216]	; (800c6f0 <atan+0x338>)
 800c618:	4e36      	ldr	r6, [pc, #216]	; (800c6f4 <atan+0x33c>)
 800c61a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c61e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c622:	e9da 2300 	ldrd	r2, r3, [sl]
 800c626:	f7f3 fe47 	bl	80002b8 <__aeabi_dsub>
 800c62a:	4622      	mov	r2, r4
 800c62c:	462b      	mov	r3, r5
 800c62e:	f7f3 fe43 	bl	80002b8 <__aeabi_dsub>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c63a:	f7f3 fe3d 	bl	80002b8 <__aeabi_dsub>
 800c63e:	f1bb 0f00 	cmp.w	fp, #0
 800c642:	4604      	mov	r4, r0
 800c644:	460d      	mov	r5, r1
 800c646:	f6bf aed6 	bge.w	800c3f6 <atan+0x3e>
 800c64a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c64e:	461d      	mov	r5, r3
 800c650:	e6d1      	b.n	800c3f6 <atan+0x3e>
 800c652:	a51d      	add	r5, pc, #116	; (adr r5, 800c6c8 <atan+0x310>)
 800c654:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c658:	e6cd      	b.n	800c3f6 <atan+0x3e>
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w
 800c660:	54442d18 	.word	0x54442d18
 800c664:	bff921fb 	.word	0xbff921fb
 800c668:	8800759c 	.word	0x8800759c
 800c66c:	7e37e43c 	.word	0x7e37e43c
 800c670:	e322da11 	.word	0xe322da11
 800c674:	3f90ad3a 	.word	0x3f90ad3a
 800c678:	24760deb 	.word	0x24760deb
 800c67c:	3fa97b4b 	.word	0x3fa97b4b
 800c680:	a0d03d51 	.word	0xa0d03d51
 800c684:	3fb10d66 	.word	0x3fb10d66
 800c688:	c54c206e 	.word	0xc54c206e
 800c68c:	3fb745cd 	.word	0x3fb745cd
 800c690:	920083ff 	.word	0x920083ff
 800c694:	3fc24924 	.word	0x3fc24924
 800c698:	5555550d 	.word	0x5555550d
 800c69c:	3fd55555 	.word	0x3fd55555
 800c6a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c6a4:	bfa2b444 	.word	0xbfa2b444
 800c6a8:	52defd9a 	.word	0x52defd9a
 800c6ac:	3fadde2d 	.word	0x3fadde2d
 800c6b0:	af749a6d 	.word	0xaf749a6d
 800c6b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c6b8:	fe231671 	.word	0xfe231671
 800c6bc:	3fbc71c6 	.word	0x3fbc71c6
 800c6c0:	9998ebc4 	.word	0x9998ebc4
 800c6c4:	3fc99999 	.word	0x3fc99999
 800c6c8:	54442d18 	.word	0x54442d18
 800c6cc:	3ff921fb 	.word	0x3ff921fb
 800c6d0:	440fffff 	.word	0x440fffff
 800c6d4:	7ff00000 	.word	0x7ff00000
 800c6d8:	3fdbffff 	.word	0x3fdbffff
 800c6dc:	3ff00000 	.word	0x3ff00000
 800c6e0:	3ff2ffff 	.word	0x3ff2ffff
 800c6e4:	40038000 	.word	0x40038000
 800c6e8:	3ff80000 	.word	0x3ff80000
 800c6ec:	bff00000 	.word	0xbff00000
 800c6f0:	0800d2a8 	.word	0x0800d2a8
 800c6f4:	0800d288 	.word	0x0800d288

0800c6f8 <fabs>:
 800c6f8:	ec51 0b10 	vmov	r0, r1, d0
 800c6fc:	ee10 2a10 	vmov	r2, s0
 800c700:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c704:	ec43 2b10 	vmov	d0, r2, r3
 800c708:	4770      	bx	lr
 800c70a:	0000      	movs	r0, r0
 800c70c:	0000      	movs	r0, r0
	...

0800c710 <floor>:
 800c710:	ec51 0b10 	vmov	r0, r1, d0
 800c714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c718:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c71c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c720:	2e13      	cmp	r6, #19
 800c722:	ee10 5a10 	vmov	r5, s0
 800c726:	ee10 8a10 	vmov	r8, s0
 800c72a:	460c      	mov	r4, r1
 800c72c:	dc32      	bgt.n	800c794 <floor+0x84>
 800c72e:	2e00      	cmp	r6, #0
 800c730:	da14      	bge.n	800c75c <floor+0x4c>
 800c732:	a333      	add	r3, pc, #204	; (adr r3, 800c800 <floor+0xf0>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f3 fdc0 	bl	80002bc <__adddf3>
 800c73c:	2200      	movs	r2, #0
 800c73e:	2300      	movs	r3, #0
 800c740:	f7f4 fa02 	bl	8000b48 <__aeabi_dcmpgt>
 800c744:	b138      	cbz	r0, 800c756 <floor+0x46>
 800c746:	2c00      	cmp	r4, #0
 800c748:	da57      	bge.n	800c7fa <floor+0xea>
 800c74a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c74e:	431d      	orrs	r5, r3
 800c750:	d001      	beq.n	800c756 <floor+0x46>
 800c752:	4c2d      	ldr	r4, [pc, #180]	; (800c808 <floor+0xf8>)
 800c754:	2500      	movs	r5, #0
 800c756:	4621      	mov	r1, r4
 800c758:	4628      	mov	r0, r5
 800c75a:	e025      	b.n	800c7a8 <floor+0x98>
 800c75c:	4f2b      	ldr	r7, [pc, #172]	; (800c80c <floor+0xfc>)
 800c75e:	4137      	asrs	r7, r6
 800c760:	ea01 0307 	and.w	r3, r1, r7
 800c764:	4303      	orrs	r3, r0
 800c766:	d01f      	beq.n	800c7a8 <floor+0x98>
 800c768:	a325      	add	r3, pc, #148	; (adr r3, 800c800 <floor+0xf0>)
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	f7f3 fda5 	bl	80002bc <__adddf3>
 800c772:	2200      	movs	r2, #0
 800c774:	2300      	movs	r3, #0
 800c776:	f7f4 f9e7 	bl	8000b48 <__aeabi_dcmpgt>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d0eb      	beq.n	800c756 <floor+0x46>
 800c77e:	2c00      	cmp	r4, #0
 800c780:	bfbe      	ittt	lt
 800c782:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c786:	fa43 f606 	asrlt.w	r6, r3, r6
 800c78a:	19a4      	addlt	r4, r4, r6
 800c78c:	ea24 0407 	bic.w	r4, r4, r7
 800c790:	2500      	movs	r5, #0
 800c792:	e7e0      	b.n	800c756 <floor+0x46>
 800c794:	2e33      	cmp	r6, #51	; 0x33
 800c796:	dd0b      	ble.n	800c7b0 <floor+0xa0>
 800c798:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c79c:	d104      	bne.n	800c7a8 <floor+0x98>
 800c79e:	ee10 2a10 	vmov	r2, s0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	f7f3 fd8a 	bl	80002bc <__adddf3>
 800c7a8:	ec41 0b10 	vmov	d0, r0, r1
 800c7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c7b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b8:	fa23 f707 	lsr.w	r7, r3, r7
 800c7bc:	4207      	tst	r7, r0
 800c7be:	d0f3      	beq.n	800c7a8 <floor+0x98>
 800c7c0:	a30f      	add	r3, pc, #60	; (adr r3, 800c800 <floor+0xf0>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f7f3 fd79 	bl	80002bc <__adddf3>
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f7f4 f9bb 	bl	8000b48 <__aeabi_dcmpgt>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d0bf      	beq.n	800c756 <floor+0x46>
 800c7d6:	2c00      	cmp	r4, #0
 800c7d8:	da02      	bge.n	800c7e0 <floor+0xd0>
 800c7da:	2e14      	cmp	r6, #20
 800c7dc:	d103      	bne.n	800c7e6 <floor+0xd6>
 800c7de:	3401      	adds	r4, #1
 800c7e0:	ea25 0507 	bic.w	r5, r5, r7
 800c7e4:	e7b7      	b.n	800c756 <floor+0x46>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c7ec:	fa03 f606 	lsl.w	r6, r3, r6
 800c7f0:	4435      	add	r5, r6
 800c7f2:	4545      	cmp	r5, r8
 800c7f4:	bf38      	it	cc
 800c7f6:	18e4      	addcc	r4, r4, r3
 800c7f8:	e7f2      	b.n	800c7e0 <floor+0xd0>
 800c7fa:	2500      	movs	r5, #0
 800c7fc:	462c      	mov	r4, r5
 800c7fe:	e7aa      	b.n	800c756 <floor+0x46>
 800c800:	8800759c 	.word	0x8800759c
 800c804:	7e37e43c 	.word	0x7e37e43c
 800c808:	bff00000 	.word	0xbff00000
 800c80c:	000fffff 	.word	0x000fffff

0800c810 <scalbn>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	ec55 4b10 	vmov	r4, r5, d0
 800c816:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c81a:	4606      	mov	r6, r0
 800c81c:	462b      	mov	r3, r5
 800c81e:	b99a      	cbnz	r2, 800c848 <scalbn+0x38>
 800c820:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c824:	4323      	orrs	r3, r4
 800c826:	d036      	beq.n	800c896 <scalbn+0x86>
 800c828:	4b39      	ldr	r3, [pc, #228]	; (800c910 <scalbn+0x100>)
 800c82a:	4629      	mov	r1, r5
 800c82c:	ee10 0a10 	vmov	r0, s0
 800c830:	2200      	movs	r2, #0
 800c832:	f7f3 fef9 	bl	8000628 <__aeabi_dmul>
 800c836:	4b37      	ldr	r3, [pc, #220]	; (800c914 <scalbn+0x104>)
 800c838:	429e      	cmp	r6, r3
 800c83a:	4604      	mov	r4, r0
 800c83c:	460d      	mov	r5, r1
 800c83e:	da10      	bge.n	800c862 <scalbn+0x52>
 800c840:	a32b      	add	r3, pc, #172	; (adr r3, 800c8f0 <scalbn+0xe0>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	e03a      	b.n	800c8be <scalbn+0xae>
 800c848:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c84c:	428a      	cmp	r2, r1
 800c84e:	d10c      	bne.n	800c86a <scalbn+0x5a>
 800c850:	ee10 2a10 	vmov	r2, s0
 800c854:	4620      	mov	r0, r4
 800c856:	4629      	mov	r1, r5
 800c858:	f7f3 fd30 	bl	80002bc <__adddf3>
 800c85c:	4604      	mov	r4, r0
 800c85e:	460d      	mov	r5, r1
 800c860:	e019      	b.n	800c896 <scalbn+0x86>
 800c862:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c866:	460b      	mov	r3, r1
 800c868:	3a36      	subs	r2, #54	; 0x36
 800c86a:	4432      	add	r2, r6
 800c86c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c870:	428a      	cmp	r2, r1
 800c872:	dd08      	ble.n	800c886 <scalbn+0x76>
 800c874:	2d00      	cmp	r5, #0
 800c876:	a120      	add	r1, pc, #128	; (adr r1, 800c8f8 <scalbn+0xe8>)
 800c878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c87c:	da1c      	bge.n	800c8b8 <scalbn+0xa8>
 800c87e:	a120      	add	r1, pc, #128	; (adr r1, 800c900 <scalbn+0xf0>)
 800c880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c884:	e018      	b.n	800c8b8 <scalbn+0xa8>
 800c886:	2a00      	cmp	r2, #0
 800c888:	dd08      	ble.n	800c89c <scalbn+0x8c>
 800c88a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c88e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c892:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c896:	ec45 4b10 	vmov	d0, r4, r5
 800c89a:	bd70      	pop	{r4, r5, r6, pc}
 800c89c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c8a0:	da19      	bge.n	800c8d6 <scalbn+0xc6>
 800c8a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c8a6:	429e      	cmp	r6, r3
 800c8a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c8ac:	dd0a      	ble.n	800c8c4 <scalbn+0xb4>
 800c8ae:	a112      	add	r1, pc, #72	; (adr r1, 800c8f8 <scalbn+0xe8>)
 800c8b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e2      	bne.n	800c87e <scalbn+0x6e>
 800c8b8:	a30f      	add	r3, pc, #60	; (adr r3, 800c8f8 <scalbn+0xe8>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	f7f3 feb3 	bl	8000628 <__aeabi_dmul>
 800c8c2:	e7cb      	b.n	800c85c <scalbn+0x4c>
 800c8c4:	a10a      	add	r1, pc, #40	; (adr r1, 800c8f0 <scalbn+0xe0>)
 800c8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d0b8      	beq.n	800c840 <scalbn+0x30>
 800c8ce:	a10e      	add	r1, pc, #56	; (adr r1, 800c908 <scalbn+0xf8>)
 800c8d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8d4:	e7b4      	b.n	800c840 <scalbn+0x30>
 800c8d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c8da:	3236      	adds	r2, #54	; 0x36
 800c8dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4b0c      	ldr	r3, [pc, #48]	; (800c918 <scalbn+0x108>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	e7e8      	b.n	800c8be <scalbn+0xae>
 800c8ec:	f3af 8000 	nop.w
 800c8f0:	c2f8f359 	.word	0xc2f8f359
 800c8f4:	01a56e1f 	.word	0x01a56e1f
 800c8f8:	8800759c 	.word	0x8800759c
 800c8fc:	7e37e43c 	.word	0x7e37e43c
 800c900:	8800759c 	.word	0x8800759c
 800c904:	fe37e43c 	.word	0xfe37e43c
 800c908:	c2f8f359 	.word	0xc2f8f359
 800c90c:	81a56e1f 	.word	0x81a56e1f
 800c910:	43500000 	.word	0x43500000
 800c914:	ffff3cb0 	.word	0xffff3cb0
 800c918:	3c900000 	.word	0x3c900000

0800c91c <_init>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	bf00      	nop
 800c920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c922:	bc08      	pop	{r3}
 800c924:	469e      	mov	lr, r3
 800c926:	4770      	bx	lr

0800c928 <_fini>:
 800c928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c92a:	bf00      	nop
 800c92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c92e:	bc08      	pop	{r3}
 800c930:	469e      	mov	lr, r3
 800c932:	4770      	bx	lr
