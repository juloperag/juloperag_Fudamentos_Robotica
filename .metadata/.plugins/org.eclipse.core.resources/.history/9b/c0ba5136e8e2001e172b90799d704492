/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 */

//----------------------Librerias
//Sistema
#include "stdio.h"
#include <stdint.h>
//FreeRTOS
#include "FreeRTOS.h"
#include "task.h"
//CMSIS
#include <stm32f411xe.h>
//PeripheralDrivers
#include <GPIOxDriver.h>

//#if !defined(__SOFT_FP__) && defined(__ARM_FP)
//  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
//#endif

GPIO_Handler_t GPIO_Handler_Led = {0};
GPIO_Handler_t GPIO_Handler_Button = {0};


void initSystem(void);


//Definicion de variables del sistema
uint32_t SystemCoreClock = 16E6;
//Variables del programa
#define  STACK_SIZE 200
//Cabeceras de las funciones del programa
void vTask_blink_led( void * pvParameters );
void vTaskTwo( void * pvParameters );
//Le indicamos al sistema que hay una funcion para inicio de la comunicacion del SEGGER por UART
extern void SEGGER_UART_init(uint32_t);

BaseType_t xReturned;
TaskHandle_t xHandleTask1 = NULL;
TaskHandle_t xHandleTask2 = NULL;

int main(void)
{
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
	configPLL(clock);
	//Configuracion inicial del sistema
	initSystem();
	//Activamos la unidad de punto flotante (FPU)
	SCB->CPACR    |= (0xF << 20);
	//Activamos del contador de Ticks
	DWT->CTRL    |= (1 << 0);

	//---------------------Inicio de uso de funciones para el funcionamiento del SEGGER----------------------
	//Necesaria para el SEGGER
	vInitPrioGroupValue();
	//Configuramos el puerto Serial para trabajar  con el SEGGER
	SEGGER_UART_init(500000);
	/* Primero configuramos */
	SEGGER_SYSVIEW_Conf();
	/* Despues activamos el sistema */
	//SEGGER_SYSVIEW_Start();
	//-----------------------Fin de uso de funciones para el funcionamiento del SEGGER----------------------

	//Configuracion tarea 1
	xReturned = xTaskCreate(
						vTask_blink_led,       /* Function that implements the task. */
	                    "Task1",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Blinky",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask1);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);

	//configuracion tarea 2
	xReturned = xTaskCreate(
						vTaskTwo,       /* Function that implements the task. */
	                    "Task2",          /* Text name for the task. */
	                    STACK_SIZE,      /* Stack size in words, not bytes. */
						"Hola Mundo desde la tarea-2",    /* Parameter passed into the task. */
	                    2,/* Priority at which the task is created. */
	                    &xHandleTask2);      /* Used to pass out the created task's handle. */

	configASSERT(xReturned == pdPASS);

	/* Start the created tasks running. */
	vTaskStartScheduler();

	while(1)
	{
	}
}

//Funcion para definir la configuracion inicial del sistema
void initSystem(void)
{
	//Definimos el pin a utilziar
	GPIO_Handler_Led.pGPIOx = GPIOA;
	GPIO_Handler_Led.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
	//Definimos la configuracion para el PIN del GPIO
	GPIO_PIN_Config(&GPIO_Handler_Led,GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_LOW,GPIO_PUPDR_NOTHING, AF0);
	//Cargamos la configuracion
	GPIO_Config(&GPIO_Handler_Led);


	//Definimos el pin a utilziar
	GPIO_Handler_Button.pGPIOx = GPIOC;
	GPIO_Handler_Button.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
	//Definimos la configuracion para el PIN del GPIO
	GPIO_PIN_Config(&GPIO_Handler_Button,GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_LOW,GPIO_PUPDR_NOTHING, AF0);
	//Cargamos la configuracion
	GPIO_Config(&GPIO_Handler_Button);

}

/* Funcion que gobierna a la tarea 1*/
void vTask_blink_led( void * pvParameters )
{
	 BaseType_t notify_state = 0;
	 uint8_t change_state = 0;

	while(1)
	{
		if(notify_state == pdTRUE)
		{
			change_state = !change_state;
		}
		if(change_state == 1)
		{
			GPIOxTooglePin(&GPIO_Handler_Led);
		}
		else
		{
			GPIO_writePin(&GPIO_Handler_Led, RESET);
		}

		notify_state = xTaskNotifyWait(0,
		                           	   0,
									   NULL,
									   pdMS_TO_TICKS(250));
		//vTaskDelayUntil(&xHandleTask1, pdMS_TO_TICKS(250));
	}
}

/* Funcion que gobierna a la tarea 2*/
void vTaskTwo( void * pvParameters )
{
	int8_t button_state = 0;
	uint8_t prev_button_state = 0;
	while(1)
	{
		button_state =  GPIO_RedPin (&GPIO_Handler_Button);
		if(button_state==1)
		{
			if(!prev_button_state)
			{
				xTaskNotify(xHandleTask1,0,eNoAction);
			}
		}

		prev_button_state = button_state;

		vTaskDelay(pdMS_TO_TICKS(10));
	}
}

