
Prueba_Giroscopio_ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007470  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08007610  08007610  00017610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad4  08007ad4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007adc  08007adc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  200001d8  08007cb8  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b30  08007cb8  00020b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004507  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000112f  00000000  00000000  0002470b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f8  00000000  00000000  00025840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000350  00000000  00000000  00025c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010768  00000000  00000000  00025f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000055ca  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056cf2  00000000  00000000  0003bcba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000929ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002450  00000000  00000000  000929fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075f8 	.word	0x080075f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080075f8 	.word	0x080075f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9dd 	b.w	8001074 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f86b 	bl	8000da4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f85e 	bl	8000da4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f84d 	bl	8000da4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f83f 	bl	8000da4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fed3 	bl	8000aec <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc49 	bl	8000608 <__aeabi_dmul>
 8000d76:	f7ff ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbca 	bl	8000514 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc40 	bl	8000608 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa82 	bl	8000298 <__aeabi_dsub>
 8000d94:	f7ff ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	468e      	mov	lr, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14d      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db2:	428a      	cmp	r2, r1
 8000db4:	4694      	mov	ip, r2
 8000db6:	d969      	bls.n	8000e8c <__udivmoddi4+0xe8>
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b152      	cbz	r2, 8000dd4 <__udivmoddi4+0x30>
 8000dbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc2:	f1c2 0120 	rsb	r1, r2, #32
 8000dc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dce:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd2:	4094      	lsls	r4, r2
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	0c21      	lsrs	r1, r4, #16
 8000dda:	fbbe f6f8 	udiv	r6, lr, r8
 8000dde:	fa1f f78c 	uxth.w	r7, ip
 8000de2:	fb08 e316 	mls	r3, r8, r6, lr
 8000de6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dea:	fb06 f107 	mul.w	r1, r6, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfa:	f080 811f 	bcs.w	800103c <__udivmoddi4+0x298>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 811c 	bls.w	800103c <__udivmoddi4+0x298>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb00 f707 	mul.w	r7, r0, r7
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x92>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	f080 810a 	bcs.w	8001040 <__udivmoddi4+0x29c>
 8000e2c:	42a7      	cmp	r7, r4
 8000e2e:	f240 8107 	bls.w	8001040 <__udivmoddi4+0x29c>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	1be4      	subs	r4, r4, r7
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	b11d      	cbz	r5, 8000e48 <__udivmoddi4+0xa4>
 8000e40:	40d4      	lsrs	r4, r2
 8000e42:	2300      	movs	r3, #0
 8000e44:	e9c5 4300 	strd	r4, r3, [r5]
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0xc2>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80ef 	beq.w	8001036 <__udivmoddi4+0x292>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x160>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xd4>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80f9 	bhi.w	800106a <__udivmoddi4+0x2c6>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	469e      	mov	lr, r3
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0e0      	beq.n	8000e48 <__udivmoddi4+0xa4>
 8000e86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8a:	e7dd      	b.n	8000e48 <__udivmoddi4+0xa4>
 8000e8c:	b902      	cbnz	r2, 8000e90 <__udivmoddi4+0xec>
 8000e8e:	deff      	udf	#255	; 0xff
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f040 8092 	bne.w	8000fbe <__udivmoddi4+0x21a>
 8000e9a:	eba1 010c 	sub.w	r1, r1, ip
 8000e9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	0c20      	lsrs	r0, r4, #16
 8000eaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eae:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb6:	fb0e f003 	mul.w	r0, lr, r3
 8000eba:	4288      	cmp	r0, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x12c>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x12a>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f200 80cb 	bhi.w	8001064 <__udivmoddi4+0x2c0>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1110 	mls	r1, r7, r0, r1
 8000edc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee4:	45a6      	cmp	lr, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x156>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef0:	d202      	bcs.n	8000ef8 <__udivmoddi4+0x154>
 8000ef2:	45a6      	cmp	lr, r4
 8000ef4:	f200 80bb 	bhi.w	800106e <__udivmoddi4+0x2ca>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f02:	e79c      	b.n	8000e3e <__udivmoddi4+0x9a>
 8000f04:	f1c6 0720 	rsb	r7, r6, #32
 8000f08:	40b3      	lsls	r3, r6
 8000f0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f12:	fa20 f407 	lsr.w	r4, r0, r7
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	40f9      	lsrs	r1, r7
 8000f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f22:	fa00 f306 	lsl.w	r3, r0, r6
 8000f26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2a:	0c20      	lsrs	r0, r4, #16
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	fb09 1118 	mls	r1, r9, r8, r1
 8000f34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f38:	fb08 f00e 	mul.w	r0, r8, lr
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f42:	d90b      	bls.n	8000f5c <__udivmoddi4+0x1b8>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f4c:	f080 8088 	bcs.w	8001060 <__udivmoddi4+0x2bc>
 8000f50:	4288      	cmp	r0, r1
 8000f52:	f240 8085 	bls.w	8001060 <__udivmoddi4+0x2bc>
 8000f56:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	1a09      	subs	r1, r1, r0
 8000f5e:	b2a4      	uxth	r4, r4
 8000f60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f64:	fb09 1110 	mls	r1, r9, r0, r1
 8000f68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f70:	458e      	cmp	lr, r1
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1e2>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7c:	d26c      	bcs.n	8001058 <__udivmoddi4+0x2b4>
 8000f7e:	458e      	cmp	lr, r1
 8000f80:	d96a      	bls.n	8001058 <__udivmoddi4+0x2b4>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4461      	add	r1, ip
 8000f86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f8e:	eba1 010e 	sub.w	r1, r1, lr
 8000f92:	42a1      	cmp	r1, r4
 8000f94:	46c8      	mov	r8, r9
 8000f96:	46a6      	mov	lr, r4
 8000f98:	d356      	bcc.n	8001048 <__udivmoddi4+0x2a4>
 8000f9a:	d053      	beq.n	8001044 <__udivmoddi4+0x2a0>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x212>
 8000f9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000faa:	fa22 f306 	lsr.w	r3, r2, r6
 8000fae:	40f1      	lsrs	r1, r6
 8000fb0:	431f      	orrs	r7, r3
 8000fb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	4631      	mov	r1, r6
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1c2 0320 	rsb	r3, r2, #32
 8000fc2:	40d8      	lsrs	r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	4301      	orrs	r1, r0
 8000fd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd4:	fa1f fe8c 	uxth.w	lr, ip
 8000fd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe0:	0c0b      	lsrs	r3, r1, #16
 8000fe2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fe6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fea:	429e      	cmp	r6, r3
 8000fec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x260>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffa:	d22f      	bcs.n	800105c <__udivmoddi4+0x2b8>
 8000ffc:	429e      	cmp	r6, r3
 8000ffe:	d92d      	bls.n	800105c <__udivmoddi4+0x2b8>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	b289      	uxth	r1, r1
 8001008:	fbb3 f6f7 	udiv	r6, r3, r7
 800100c:	fb07 3316 	mls	r3, r7, r6, r3
 8001010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001014:	fb06 f30e 	mul.w	r3, r6, lr
 8001018:	428b      	cmp	r3, r1
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x28a>
 800101c:	eb1c 0101 	adds.w	r1, ip, r1
 8001020:	f106 38ff 	add.w	r8, r6, #4294967295
 8001024:	d216      	bcs.n	8001054 <__udivmoddi4+0x2b0>
 8001026:	428b      	cmp	r3, r1
 8001028:	d914      	bls.n	8001054 <__udivmoddi4+0x2b0>
 800102a:	3e02      	subs	r6, #2
 800102c:	4461      	add	r1, ip
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001034:	e738      	b.n	8000ea8 <__udivmoddi4+0x104>
 8001036:	462e      	mov	r6, r5
 8001038:	4628      	mov	r0, r5
 800103a:	e705      	b.n	8000e48 <__udivmoddi4+0xa4>
 800103c:	4606      	mov	r6, r0
 800103e:	e6e3      	b.n	8000e08 <__udivmoddi4+0x64>
 8001040:	4618      	mov	r0, r3
 8001042:	e6f8      	b.n	8000e36 <__udivmoddi4+0x92>
 8001044:	454b      	cmp	r3, r9
 8001046:	d2a9      	bcs.n	8000f9c <__udivmoddi4+0x1f8>
 8001048:	ebb9 0802 	subs.w	r8, r9, r2
 800104c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001050:	3801      	subs	r0, #1
 8001052:	e7a3      	b.n	8000f9c <__udivmoddi4+0x1f8>
 8001054:	4646      	mov	r6, r8
 8001056:	e7ea      	b.n	800102e <__udivmoddi4+0x28a>
 8001058:	4620      	mov	r0, r4
 800105a:	e794      	b.n	8000f86 <__udivmoddi4+0x1e2>
 800105c:	4640      	mov	r0, r8
 800105e:	e7d1      	b.n	8001004 <__udivmoddi4+0x260>
 8001060:	46d0      	mov	r8, sl
 8001062:	e77b      	b.n	8000f5c <__udivmoddi4+0x1b8>
 8001064:	3b02      	subs	r3, #2
 8001066:	4461      	add	r1, ip
 8001068:	e732      	b.n	8000ed0 <__udivmoddi4+0x12c>
 800106a:	4630      	mov	r0, r6
 800106c:	e709      	b.n	8000e82 <__udivmoddi4+0xde>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	e742      	b.n	8000efa <__udivmoddi4+0x156>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <readMPU>:
}


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
 8001084:	4613      	mov	r3, r2
 8001086:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d82d      	bhi.n	8001104 <readMPU+0x8c>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <readMPU+0x38>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010c9 	.word	0x080010c9
 80010b4:	080010d3 	.word	0x080010d3
 80010b8:	080010dd 	.word	0x080010dd
 80010bc:	080010e7 	.word	0x080010e7
 80010c0:	080010f1 	.word	0x080010f1
 80010c4:	080010fb 	.word	0x080010fb
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 80010c8:	2332      	movs	r3, #50	; 0x32
 80010ca:	75fb      	strb	r3, [r7, #23]
 80010cc:	2333      	movs	r3, #51	; 0x33
 80010ce:	75bb      	strb	r3, [r7, #22]
 80010d0:	e019      	b.n	8001106 <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 80010d2:	233d      	movs	r3, #61	; 0x3d
 80010d4:	75fb      	strb	r3, [r7, #23]
 80010d6:	233e      	movs	r3, #62	; 0x3e
 80010d8:	75bb      	strb	r3, [r7, #22]
 80010da:	e014      	b.n	8001106 <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80010dc:	233f      	movs	r3, #63	; 0x3f
 80010de:	75fb      	strb	r3, [r7, #23]
 80010e0:	2340      	movs	r3, #64	; 0x40
 80010e2:	75bb      	strb	r3, [r7, #22]
 80010e4:	e00f      	b.n	8001106 <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80010e6:	2343      	movs	r3, #67	; 0x43
 80010e8:	75fb      	strb	r3, [r7, #23]
 80010ea:	2344      	movs	r3, #68	; 0x44
 80010ec:	75bb      	strb	r3, [r7, #22]
 80010ee:	e00a      	b.n	8001106 <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80010f0:	2345      	movs	r3, #69	; 0x45
 80010f2:	75fb      	strb	r3, [r7, #23]
 80010f4:	2346      	movs	r3, #70	; 0x46
 80010f6:	75bb      	strb	r3, [r7, #22]
 80010f8:	e005      	b.n	8001106 <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80010fa:	2347      	movs	r3, #71	; 0x47
 80010fc:	75fb      	strb	r3, [r7, #23]
 80010fe:	2348      	movs	r3, #72	; 0x48
 8001100:	75bb      	strb	r3, [r7, #22]
 8001102:	e000      	b.n	8001106 <readMPU+0x8e>
		default:{ break; }
 8001104:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	7dfa      	ldrb	r2, [r7, #23]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ffe8 	bl	80020e4 <i2c_ReadSingleRegister>
 8001114:	4603      	mov	r3, r0
 8001116:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	7dba      	ldrb	r2, [r7, #22]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f000 ffdf 	bl	80020e4 <i2c_ReadSingleRegister>
 8001126:	4603      	mov	r3, r0
 8001128:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 800112a:	89fb      	ldrh	r3, [r7, #14]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	b21b      	sxth	r3, r3
 8001138:	b29a      	uxth	r2, r3
 800113a:	883b      	ldrh	r3, [r7, #0]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b29b      	uxth	r3, r3
 8001140:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	2b02      	cmp	r3, #2
 8001146:	dc02      	bgt.n	800114e <readMPU+0xd6>
 8001148:	2b00      	cmp	r3, #0
 800114a:	da05      	bge.n	8001158 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 800114c:	e0d6      	b.n	80012fc <readMPU+0x284>
 800114e:	3b03      	subs	r3, #3
	switch(elementRead)
 8001150:	2b02      	cmp	r3, #2
 8001152:	f200 80d3 	bhi.w	80012fc <readMPU+0x284>
 8001156:	e081      	b.n	800125c <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d87b      	bhi.n	8001258 <readMPU+0x1e0>
 8001160:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <readMPU+0xf0>)
 8001162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001166:	bf00      	nop
 8001168:	08001179 	.word	0x08001179
 800116c:	080011b1 	.word	0x080011b1
 8001170:	080011e9 	.word	0x080011e9
 8001174:	08001221 	.word	0x08001221
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 8001178:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9d9 	bl	8000534 <__aeabi_i2d>
 8001182:	a363      	add	r3, pc, #396	; (adr r3, 8001310 <readMPU+0x298>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa3e 	bl	8000608 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <readMPU+0x2a0>)
 800119a:	f7ff fb5f 	bl	800085c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fd27 	bl	8000bf8 <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	e054      	b.n	800125a <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 80011b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9bd 	bl	8000534 <__aeabi_i2d>
 80011ba:	a355      	add	r3, pc, #340	; (adr r3, 8001310 <readMPU+0x298>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fa22 	bl	8000608 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b52      	ldr	r3, [pc, #328]	; (800131c <readMPU+0x2a4>)
 80011d2:	f7ff fb43 	bl	800085c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fd0b 	bl	8000bf8 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	e038      	b.n	800125a <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 80011e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9a1 	bl	8000534 <__aeabi_i2d>
 80011f2:	a347      	add	r3, pc, #284	; (adr r3, 8001310 <readMPU+0x298>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fa06 	bl	8000608 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b45      	ldr	r3, [pc, #276]	; (8001320 <readMPU+0x2a8>)
 800120a:	f7ff fb27 	bl	800085c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fcef 	bl	8000bf8 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	e01c      	b.n	800125a <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 8001220:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f985 	bl	8000534 <__aeabi_i2d>
 800122a:	a339      	add	r3, pc, #228	; (adr r3, 8001310 <readMPU+0x298>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff f9ea 	bl	8000608 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b38      	ldr	r3, [pc, #224]	; (8001324 <readMPU+0x2ac>)
 8001242:	f7ff fb0b 	bl	800085c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fcd3 	bl	8000bf8 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	e000      	b.n	800125a <readMPU+0x1e2>
				default:{ break; }
 8001258:	bf00      	nop
			break;
 800125a:	e050      	b.n	80012fe <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	785b      	ldrb	r3, [r3, #1]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d849      	bhi.n	80012f8 <readMPU+0x280>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <readMPU+0x1f4>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	0800127d 	.word	0x0800127d
 8001270:	0800129d 	.word	0x0800129d
 8001274:	080012bd 	.word	0x080012bd
 8001278:	080012dd 	.word	0x080012dd
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 800127c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001280:	4a29      	ldr	r2, [pc, #164]	; (8001328 <readMPU+0x2b0>)
 8001282:	fb82 1203 	smull	r1, r2, r2, r3
 8001286:	1152      	asrs	r2, r2, #5
 8001288:	17db      	asrs	r3, r3, #31
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	b21b      	sxth	r3, r3
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	edc7 7a04 	vstr	s15, [r7, #16]
 800129a:	e02e      	b.n	80012fa <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 800129c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012a0:	4a22      	ldr	r2, [pc, #136]	; (800132c <readMPU+0x2b4>)
 80012a2:	fb82 1203 	smull	r1, r2, r2, r3
 80012a6:	1112      	asrs	r2, r2, #4
 80012a8:	17db      	asrs	r3, r3, #31
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	edc7 7a04 	vstr	s15, [r7, #16]
 80012ba:	e01e      	b.n	80012fa <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 80012bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <readMPU+0x2b4>)
 80012c2:	fb82 1203 	smull	r1, r2, r2, r3
 80012c6:	10d2      	asrs	r2, r2, #3
 80012c8:	17db      	asrs	r3, r3, #31
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	edc7 7a04 	vstr	s15, [r7, #16]
 80012da:	e00e      	b.n	80012fa <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 80012dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da00      	bge.n	80012e6 <readMPU+0x26e>
 80012e4:	330f      	adds	r3, #15
 80012e6:	111b      	asrs	r3, r3, #4
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f2:	edc7 7a04 	vstr	s15, [r7, #16]
 80012f6:	e000      	b.n	80012fa <readMPU+0x282>
				default:{ break; }
 80012f8:	bf00      	nop
			break;
 80012fa:	e000      	b.n	80012fe <readMPU+0x286>
		default:{ break; }
 80012fc:	bf00      	nop
	}
	//Retornamos valor
	return res;
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	ee07 3a90 	vmov	s15, r3
}
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	70a3d70a 	.word	0x70a3d70a
 8001314:	40238a3d 	.word	0x40238a3d
 8001318:	40d00000 	.word	0x40d00000
 800131c:	40c00000 	.word	0x40c00000
 8001320:	40b00000 	.word	0x40b00000
 8001324:	40a00000 	.word	0x40a00000
 8001328:	3e88cb3d 	.word	0x3e88cb3d
 800132c:	3e0f83e1 	.word	0x3e0f83e1

08001330 <main>:
uint64_t time_preview = 0;
#define ACCEL_ADDRESSS  0x53;             //Definicion de la direccion del Sclave


int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8001336:	2364      	movs	r3, #100	; 0x64
 8001338:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 ff03 	bl	8002148 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001342:	f000 f85f 	bl	8001404 <int_Hardware>
	//Activamos el Systick
	config_SysTick_ms();
 8001346:	f000 ffcf 	bl	80022e8 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <main+0xa8>)
 800134c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <main+0xa8>)
 8001352:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001356:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos para el PIN un 1 logico,
	GPIO_writePin (&handler_BlinkyPin, SET);
 800135a:	2101      	movs	r1, #1
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <main+0xac>)
 800135e:	f000 fce5 	bl	8001d2c <GPIO_writePin>

	while(1)
	{
		if(charRead != '\0' || flag_ang == 1)
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <main+0xb0>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d103      	bne.n	8001372 <main+0x42>
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <main+0xb4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d130      	bne.n	80013d4 <main+0xa4>
		{
			//Obtener angulo
			angulo =  readMPU(&handler_MPUAccel_MPU6050, READ_ACCEL_X, gyro_offset);
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <main+0xb8>)
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	461a      	mov	r2, r3
 800137a:	2100      	movs	r1, #0
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <main+0xbc>)
 800137e:	f7ff fe7b 	bl	8001078 <readMPU>
 8001382:	eef0 7a40 	vmov.f32	s15, s0
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <main+0xc0>)
 8001388:	edc3 7a00 	vstr	s15, [r3]
			//Contador para visualizar los datos en un tiempo dado
			if(counting_view>50)
 800138c:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <main+0xc4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b32      	cmp	r3, #50	; 0x32
 8001392:	d912      	bls.n	80013ba <main+0x8a>
			{
				//ese tiempo lo volvemos un string
				sprintf(bufferMsg,"Aceleracion: %#.2f grados \n", angulo);
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <main+0xc0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f8dd 	bl	8000558 <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4915      	ldr	r1, [pc, #84]	; (80013f8 <main+0xc8>)
 80013a4:	4815      	ldr	r0, [pc, #84]	; (80013fc <main+0xcc>)
 80013a6:	f002 fb37 	bl	8003a18 <siprintf>
				//Enviamos por puerto serial dicho string
				writeMsg(&handler_USART_USB, bufferMsg);
 80013aa:	4914      	ldr	r1, [pc, #80]	; (80013fc <main+0xcc>)
 80013ac:	4814      	ldr	r0, [pc, #80]	; (8001400 <main+0xd0>)
 80013ae:	f001 fa98 	bl	80028e2 <writeMsg>
				//Reiniciamos variable
				counting_view = 0;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <main+0xc4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e005      	b.n	80013c6 <main+0x96>
			}
			else{ counting_view++; }
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <main+0xc4>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <main+0xc4>)
 80013c4:	701a      	strb	r2, [r3, #0]
			//Reiniciamos variable
			charRead = '\0';
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <main+0xb0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
			flag_ang = 0;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <main+0xb4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	e000      	b.n	80013d6 <main+0xa6>
		}
		else { __NOP(); }
 80013d4:	bf00      	nop
		if(charRead != '\0' || flag_ang == 1)
 80013d6:	e7c4      	b.n	8001362 <main+0x32>
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	200001f4 	.word	0x200001f4
 80013e0:	20000234 	.word	0x20000234
 80013e4:	200002b6 	.word	0x200002b6
 80013e8:	200002b4 	.word	0x200002b4
 80013ec:	20000298 	.word	0x20000298
 80013f0:	200002b0 	.word	0x200002b0
 80013f4:	200002b7 	.word	0x200002b7
 80013f8:	08007610 	.word	0x08007610
 80013fc:	20000238 	.word	0x20000238
 8001400:	20000228 	.word	0x20000228

08001404 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 800140a:	4b56      	ldr	r3, [pc, #344]	; (8001564 <int_Hardware+0x160>)
 800140c:	4a56      	ldr	r2, [pc, #344]	; (8001568 <int_Hardware+0x164>)
 800140e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001410:	4b54      	ldr	r3, [pc, #336]	; (8001564 <int_Hardware+0x160>)
 8001412:	2205      	movs	r2, #5
 8001414:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001416:	2300      	movs	r3, #0
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2300      	movs	r3, #0
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	2200      	movs	r2, #0
 8001422:	2101      	movs	r1, #1
 8001424:	484f      	ldr	r0, [pc, #316]	; (8001564 <int_Hardware+0x160>)
 8001426:	f000 fb35 	bl	8001a94 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 800142a:	484e      	ldr	r0, [pc, #312]	; (8001564 <int_Hardware+0x160>)
 800142c:	f000 fb54 	bl	8001ad8 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <int_Hardware+0x168>)
 8001432:	4a4d      	ldr	r2, [pc, #308]	; (8001568 <int_Hardware+0x164>)
 8001434:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001436:	4b4d      	ldr	r3, [pc, #308]	; (800156c <int_Hardware+0x168>)
 8001438:	2202      	movs	r2, #2
 800143a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800143c:	2307      	movs	r3, #7
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	2200      	movs	r2, #0
 8001448:	2102      	movs	r1, #2
 800144a:	4848      	ldr	r0, [pc, #288]	; (800156c <int_Hardware+0x168>)
 800144c:	f000 fb22 	bl	8001a94 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001450:	4846      	ldr	r0, [pc, #280]	; (800156c <int_Hardware+0x168>)
 8001452:	f000 fb41 	bl	8001ad8 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8001456:	4b46      	ldr	r3, [pc, #280]	; (8001570 <int_Hardware+0x16c>)
 8001458:	4a43      	ldr	r2, [pc, #268]	; (8001568 <int_Hardware+0x164>)
 800145a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 800145c:	4b44      	ldr	r3, [pc, #272]	; (8001570 <int_Hardware+0x16c>)
 800145e:	2203      	movs	r2, #3
 8001460:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001462:	2307      	movs	r3, #7
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2301      	movs	r3, #1
 800146c:	2200      	movs	r2, #0
 800146e:	2102      	movs	r1, #2
 8001470:	483f      	ldr	r0, [pc, #252]	; (8001570 <int_Hardware+0x16c>)
 8001472:	f000 fb0f 	bl	8001a94 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001476:	483e      	ldr	r0, [pc, #248]	; (8001570 <int_Hardware+0x16c>)
 8001478:	f000 fb2e 	bl	8001ad8 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 800147c:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <int_Hardware+0x170>)
 800147e:	4a3e      	ldr	r2, [pc, #248]	; (8001578 <int_Hardware+0x174>)
 8001480:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8001482:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <int_Hardware+0x170>)
 8001484:	2208      	movs	r2, #8
 8001486:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8001488:	2304      	movs	r3, #4
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	2300      	movs	r3, #0
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2302      	movs	r3, #2
 8001492:	2201      	movs	r2, #1
 8001494:	2102      	movs	r1, #2
 8001496:	4837      	ldr	r0, [pc, #220]	; (8001574 <int_Hardware+0x170>)
 8001498:	f000 fafc 	bl	8001a94 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 800149c:	4835      	ldr	r0, [pc, #212]	; (8001574 <int_Hardware+0x170>)
 800149e:	f000 fb1b 	bl	8001ad8 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <int_Hardware+0x178>)
 80014a4:	4a34      	ldr	r2, [pc, #208]	; (8001578 <int_Hardware+0x174>)
 80014a6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80014a8:	4b34      	ldr	r3, [pc, #208]	; (800157c <int_Hardware+0x178>)
 80014aa:	2209      	movs	r2, #9
 80014ac:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 80014ae:	2304      	movs	r3, #4
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	2300      	movs	r3, #0
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2302      	movs	r3, #2
 80014b8:	2201      	movs	r2, #1
 80014ba:	2102      	movs	r1, #2
 80014bc:	482f      	ldr	r0, [pc, #188]	; (800157c <int_Hardware+0x178>)
 80014be:	f000 fae9 	bl	8001a94 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 80014c2:	482e      	ldr	r0, [pc, #184]	; (800157c <int_Hardware+0x178>)
 80014c4:	f000 fb08 	bl	8001ad8 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <int_Hardware+0x17c>)
 80014ca:	4a2e      	ldr	r2, [pc, #184]	; (8001584 <int_Hardware+0x180>)
 80014cc:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <int_Hardware+0x17c>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_9600;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <int_Hardware+0x17c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <int_Hardware+0x17c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <int_Hardware+0x17c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <int_Hardware+0x17c>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <int_Hardware+0x17c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 80014f2:	4823      	ldr	r0, [pc, #140]	; (8001580 <int_Hardware+0x17c>)
 80014f4:	f000 ff70 	bl	80023d8 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <int_Hardware+0x184>)
 80014fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014fe:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <int_Hardware+0x184>)
 8001502:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001506:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <int_Hardware+0x184>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <int_Hardware+0x184>)
 8001510:	22fa      	movs	r2, #250	; 0xfa
 8001512:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <int_Hardware+0x184>)
 8001516:	2201      	movs	r2, #1
 8001518:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 800151a:	481b      	ldr	r0, [pc, #108]	; (8001588 <int_Hardware+0x184>)
 800151c:	f000 f96c 	bl	80017f8 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIME_sampling.ptrTIMx = TIM3;
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <int_Hardware+0x188>)
 8001522:	4a1b      	ldr	r2, [pc, #108]	; (8001590 <int_Hardware+0x18c>)
 8001524:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIME_sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <int_Hardware+0x188>)
 8001528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800152c:	805a      	strh	r2, [r3, #2]
	handler_TIME_sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <int_Hardware+0x188>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
	handler_TIME_sampling.TIMx_Config.TIMX_period = 20;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <int_Hardware+0x188>)
 8001536:	2214      	movs	r2, #20
 8001538:	605a      	str	r2, [r3, #4]
	handler_TIME_sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <int_Hardware+0x188>)
 800153c:	2201      	movs	r2, #1
 800153e:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIME_sampling);
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <int_Hardware+0x188>)
 8001542:	f000 f959 	bl	80017f8 <BasicTimer_Config>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <int_Hardware+0x190>)
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <int_Hardware+0x194>)
 800154a:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <int_Hardware+0x190>)
 800154e:	2201      	movs	r2, #1
 8001550:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ACCEL_ADDRESSS;         //Direccion del Sclave
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <int_Hardware+0x190>)
 8001554:	2253      	movs	r2, #83	; 0x53
 8001556:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <int_Hardware+0x190>)
 800155a:	f000 fc29 	bl	8001db0 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200001f4 	.word	0x200001f4
 8001568:	40020000 	.word	0x40020000
 800156c:	20000210 	.word	0x20000210
 8001570:	2000021c 	.word	0x2000021c
 8001574:	20000278 	.word	0x20000278
 8001578:	40020400 	.word	0x40020400
 800157c:	20000284 	.word	0x20000284
 8001580:	20000228 	.word	0x20000228
 8001584:	40004400 	.word	0x40004400
 8001588:	20000200 	.word	0x20000200
 800158c:	200002a0 	.word	0x200002a0
 8001590:	40000400 	.word	0x40000400
 8001594:	20000290 	.word	0x20000290
 8001598:	40005400 	.word	0x40005400

0800159c <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <BasicTimer2_Callback+0x10>)
 80015a2:	f000 fbee 	bl	8001d82 <GPIOxTooglePin>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200001f4 	.word	0x200001f4

080015b0 <BasicTimer3_Callback>:

//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM3
void BasicTimer3_Callback(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	flag_ang = 1;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <BasicTimer3_Callback+0x14>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	200002b6 	.word	0x200002b6

080015c8 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	charRead = getRxData();
 80015cc:	f001 f9a8 	bl	8002920 <getRxData>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b01      	ldr	r3, [pc, #4]	; (80015dc <BasicUSART2_Callback+0x14>)
 80015d6:	701a      	strb	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000234 	.word	0x20000234

080015e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015e0:	480d      	ldr	r0, [pc, #52]	; (8001618 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <LoopForever+0x6>)
  ldr r1, =_edata
 80015ea:	490d      	ldr	r1, [pc, #52]	; (8001620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <LoopForever+0xe>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f0:	e002      	b.n	80015f8 <LoopCopyDataInit>

080015f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f6:	3304      	adds	r3, #4

080015f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015fc:	d3f9      	bcc.n	80015f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001600:	4c0a      	ldr	r4, [pc, #40]	; (800162c <LoopForever+0x16>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001604:	e001      	b.n	800160a <LoopFillZerobss>

08001606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001608:	3204      	adds	r2, #4

0800160a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800160c:	d3fb      	bcc.n	8001606 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800160e:	f001 fb57 	bl	8002cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001612:	f7ff fe8d 	bl	8001330 <main>

08001616 <LoopForever>:

LoopForever:
    b LoopForever
 8001616:	e7fe      	b.n	8001616 <LoopForever>
  ldr   r0, =_estack
 8001618:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001624:	08007ae4 	.word	0x08007ae4
  ldr r2, =_sbss
 8001628:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800162c:	20000b30 	.word	0x20000b30

08001630 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>

08001632 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
	return 1;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_kill>:

int _kill(int pid, int sig)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800164c:	f001 fb32 	bl	8002cb4 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	2216      	movs	r2, #22
 8001654:	601a      	str	r2, [r3, #0]
	return -1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <_exit>:

void _exit (int status)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800166a:	f04f 31ff 	mov.w	r1, #4294967295
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ffe7 	bl	8001642 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001674:	e7fe      	b.n	8001674 <_exit+0x12>

08001676 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e00a      	b.n	800169e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001688:	f3af 8000 	nop.w
 800168c:	4601      	mov	r1, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	60ba      	str	r2, [r7, #8]
 8001694:	b2ca      	uxtb	r2, r1
 8001696:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	dbf0      	blt.n	8001688 <_read+0x12>
	}

return len;
 80016a6:	687b      	ldr	r3, [r7, #4]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e009      	b.n	80016d6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	60ba      	str	r2, [r7, #8]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbf1      	blt.n	80016c2 <_write+0x12>
	}
	return len;
 80016de:	687b      	ldr	r3, [r7, #4]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_close>:

int _close(int file)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	return -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001710:	605a      	str	r2, [r3, #4]
	return 0;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_isatty>:

int _isatty(int file)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	return 1;
 8001728:	2301      	movs	r3, #1
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
	return 0;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f001 fa98 	bl	8002cb4 <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20020000 	.word	0x20020000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	200002b8 	.word	0x200002b8
 80017b8:	20000b30 	.word	0x20000b30

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d10a      	bne.n	8001820 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800180a:	4b62      	ldr	r3, [pc, #392]	; (8001994 <BasicTimer_Config+0x19c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a61      	ldr	r2, [pc, #388]	; (8001994 <BasicTimer_Config+0x19c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4a5f      	ldr	r2, [pc, #380]	; (8001998 <BasicTimer_Config+0x1a0>)
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e02e      	b.n	800187e <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a5d      	ldr	r2, [pc, #372]	; (800199c <BasicTimer_Config+0x1a4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d10a      	bne.n	8001840 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800182a:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <BasicTimer_Config+0x19c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a59      	ldr	r2, [pc, #356]	; (8001994 <BasicTimer_Config+0x19c>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4a59      	ldr	r2, [pc, #356]	; (80019a0 <BasicTimer_Config+0x1a8>)
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e01e      	b.n	800187e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a57      	ldr	r2, [pc, #348]	; (80019a4 <BasicTimer_Config+0x1ac>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10a      	bne.n	8001860 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800184a:	4b52      	ldr	r3, [pc, #328]	; (8001994 <BasicTimer_Config+0x19c>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a51      	ldr	r2, [pc, #324]	; (8001994 <BasicTimer_Config+0x19c>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a53      	ldr	r2, [pc, #332]	; (80019a8 <BasicTimer_Config+0x1b0>)
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00e      	b.n	800187e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a51      	ldr	r2, [pc, #324]	; (80019ac <BasicTimer_Config+0x1b4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d109      	bne.n	800187e <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <BasicTimer_Config+0x19c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a49      	ldr	r2, [pc, #292]	; (8001994 <BasicTimer_Config+0x19c>)
 8001870:	f043 0308 	orr.w	r3, r3, #8
 8001874:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	4a4d      	ldr	r2, [pc, #308]	; (80019b0 <BasicTimer_Config+0x1b8>)
 800187c:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 800187e:	f000 fce1 	bl	8002244 <getConfigPLL>
 8001882:	4603      	mov	r3, r0
 8001884:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001886:	f000 fcf9 	bl	800227c <getClockAPB1>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 800188e:	7bbb      	ldrb	r3, [r7, #14]
 8001890:	2b31      	cmp	r3, #49	; 0x31
 8001892:	d903      	bls.n	800189c <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e000      	b.n	800189e <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 800189c:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	8852      	ldrh	r2, [r2, #2]
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	1e5a      	subs	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d112      	bne.n	80018de <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f022 0210 	bic.w	r2, r2, #16
 80018c6:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	3201      	adds	r2, #1
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
 80018dc:	e018      	b.n	8001910 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	f022 0210 	bic.w	r2, r2, #16
 80018ec:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f042 0210 	orr.w	r2, r2, #16
 80018fc:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6852      	ldr	r2, [r2, #4]
 800190e:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d103      	bne.n	8001926 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800191e:	201c      	movs	r0, #28
 8001920:	f7ff ff4c 	bl	80017bc <__NVIC_EnableIRQ>
 8001924:	e019      	b.n	800195a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	4a1c      	ldr	r2, [pc, #112]	; (800199c <BasicTimer_Config+0x1a4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d103      	bne.n	8001938 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001930:	201d      	movs	r0, #29
 8001932:	f7ff ff43 	bl	80017bc <__NVIC_EnableIRQ>
 8001936:	e010      	b.n	800195a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <BasicTimer_Config+0x1ac>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d103      	bne.n	800194a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001942:	201e      	movs	r0, #30
 8001944:	f7ff ff3a 	bl	80017bc <__NVIC_EnableIRQ>
 8001948:	e007      	b.n	800195a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <BasicTimer_Config+0x1b4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d102      	bne.n	800195a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001954:	2032      	movs	r0, #50	; 0x32
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800195a:	b662      	cpsie	i
}
 800195c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7a1b      	ldrb	r3, [r3, #8]
 8001962:	4619      	mov	r1, r3
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f875 	bl	8001a54 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	601a      	str	r2, [r3, #0]
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	200002bc 	.word	0x200002bc
 800199c:	40000400 	.word	0x40000400
 80019a0:	200002c0 	.word	0x200002c0
 80019a4:	40000800 	.word	0x40000800
 80019a8:	200002c4 	.word	0x200002c4
 80019ac:	40000c00 	.word	0x40000c00
 80019b0:	200002c8 	.word	0x200002c8

080019b4 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	__NOP();
 80019b8:	bf00      	nop
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
	__NOP();
 80019c8:	bf00      	nop
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <TIM2_IRQHandler+0x1c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <TIM2_IRQHandler+0x1c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0201 	bic.w	r2, r2, #1
 80019e6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 80019e8:	f7ff fdd8 	bl	800159c <BasicTimer2_Callback>

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200002bc 	.word	0x200002bc

080019f4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <TIM3_IRQHandler+0x1c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <TIM3_IRQHandler+0x1c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8001a08:	f7ff fdd2 	bl	80015b0 <BasicTimer3_Callback>

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200002c0 	.word	0x200002c0

08001a14 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <TIM4_IRQHandler+0x1c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <TIM4_IRQHandler+0x1c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0201 	bic.w	r2, r2, #1
 8001a26:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8001a28:	f7ff ffc4 	bl	80019b4 <BasicTimer4_Callback>

}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200002c4 	.word	0x200002c4

08001a34 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <TIM5_IRQHandler+0x1c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <TIM5_IRQHandler+0x1c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 0201 	bic.w	r2, r2, #1
 8001a46:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8001a48:	f7ff ffbc 	bl	80019c4 <BasicTimer5_Callback>

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200002c8 	.word	0x200002c8

08001a54 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8001a76:	e007      	b.n	8001a88 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	60da      	str	r2, [r3, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	70fb      	strb	r3, [r7, #3]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70bb      	strb	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	78ba      	ldrb	r2, [r7, #2]
 8001ab8:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	787a      	ldrb	r2, [r7, #1]
 8001abe:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7c3a      	ldrb	r2, [r7, #16]
 8001ac4:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7d3a      	ldrb	r2, [r7, #20]
 8001aca:	715a      	strb	r2, [r3, #5]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a88      	ldr	r2, [pc, #544]	; (8001d10 <GPIO_Config+0x238>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d106      	bne.n	8001b00 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8001af2:	4b88      	ldr	r3, [pc, #544]	; (8001d14 <GPIO_Config+0x23c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a87      	ldr	r2, [pc, #540]	; (8001d14 <GPIO_Config+0x23c>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	e03a      	b.n	8001b76 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a84      	ldr	r2, [pc, #528]	; (8001d18 <GPIO_Config+0x240>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d106      	bne.n	8001b18 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8001b0a:	4b82      	ldr	r3, [pc, #520]	; (8001d14 <GPIO_Config+0x23c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a81      	ldr	r2, [pc, #516]	; (8001d14 <GPIO_Config+0x23c>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	e02e      	b.n	8001b76 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a7f      	ldr	r2, [pc, #508]	; (8001d1c <GPIO_Config+0x244>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d106      	bne.n	8001b30 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8001b22:	4b7c      	ldr	r3, [pc, #496]	; (8001d14 <GPIO_Config+0x23c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a7b      	ldr	r2, [pc, #492]	; (8001d14 <GPIO_Config+0x23c>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	e022      	b.n	8001b76 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a7a      	ldr	r2, [pc, #488]	; (8001d20 <GPIO_Config+0x248>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d106      	bne.n	8001b48 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8001b3a:	4b76      	ldr	r3, [pc, #472]	; (8001d14 <GPIO_Config+0x23c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a75      	ldr	r2, [pc, #468]	; (8001d14 <GPIO_Config+0x23c>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	e016      	b.n	8001b76 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a75      	ldr	r2, [pc, #468]	; (8001d24 <GPIO_Config+0x24c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d106      	bne.n	8001b60 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8001b52:	4b70      	ldr	r3, [pc, #448]	; (8001d14 <GPIO_Config+0x23c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a6f      	ldr	r2, [pc, #444]	; (8001d14 <GPIO_Config+0x23c>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	e00a      	b.n	8001b76 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	4a70      	ldr	r2, [pc, #448]	; (8001d28 <GPIO_Config+0x250>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d105      	bne.n	8001b76 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8001b6a:	4b6a      	ldr	r3, [pc, #424]	; (8001d14 <GPIO_Config+0x23c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a69      	ldr	r2, [pc, #420]	; (8001d14 <GPIO_Config+0x23c>)
 8001b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2103      	movs	r1, #3
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	6819      	ldr	r1, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	789b      	ldrb	r3, [r3, #2]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	408b      	lsls	r3, r1
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	4619      	mov	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	400a      	ands	r2, r1
 8001be0:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	78db      	ldrb	r3, [r3, #3]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2103      	movs	r1, #3
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	4619      	mov	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	791b      	ldrb	r3, [r3, #4]
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	2103      	movs	r1, #3
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	400a      	ands	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	68d9      	ldr	r1, [r3, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d143      	bne.n	8001d02 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b07      	cmp	r3, #7
 8001c80:	d81f      	bhi.n	8001cc2 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	6a1a      	ldr	r2, [r3, #32]
 8001c90:	210f      	movs	r1, #15
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	6a1a      	ldr	r2, [r3, #32]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	795b      	ldrb	r3, [r3, #5]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8001cc0:	e01f      	b.n	8001d02 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	4619      	mov	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	795b      	ldrb	r3, [r3, #5]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40020000 	.word	0x40020000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020400 	.word	0x40020400
 8001d1c:	40020800 	.word	0x40020800
 8001d20:	40020c00 	.word	0x40020c00
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40021c00 	.word	0x40021c00

08001d2c <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10d      	bne.n	8001d5a <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	408b      	lsls	r3, r1
 8001d4e:	4619      	mov	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8001d58:	e00d      	b.n	8001d76 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	3310      	adds	r3, #16
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	619a      	str	r2, [r3, #24]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	695a      	ldr	r2, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	2301      	movs	r3, #1
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	404a      	eors	r2, r1
 8001da2:	615a      	str	r2, [r3, #20]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 8001db8:	f000 fa60 	bl	800227c <getClockAPB1>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a60      	ldr	r2, [pc, #384]	; (8001f48 <i2c_Config+0x198>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d106      	bne.n	8001dd8 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001dca:	4b60      	ldr	r3, [pc, #384]	; (8001f4c <i2c_Config+0x19c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a5f      	ldr	r2, [pc, #380]	; (8001f4c <i2c_Config+0x19c>)
 8001dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	e016      	b.n	8001e06 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5c      	ldr	r2, [pc, #368]	; (8001f50 <i2c_Config+0x1a0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d106      	bne.n	8001df0 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8001de2:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <i2c_Config+0x19c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a59      	ldr	r2, [pc, #356]	; (8001f4c <i2c_Config+0x19c>)
 8001de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	e00a      	b.n	8001e06 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a57      	ldr	r2, [pc, #348]	; (8001f54 <i2c_Config+0x1a4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d105      	bne.n	8001e06 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8001dfa:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <i2c_Config+0x19c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a53      	ldr	r2, [pc, #332]	; (8001f4c <i2c_Config+0x19c>)
 8001e00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e14:	601a      	str	r2, [r3, #0]
	__NOP();
 8001e16:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e26:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001e36:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	795b      	ldrb	r3, [r3, #5]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d121      	bne.n	8001eac <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e76:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	0092      	lsls	r2, r2, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69d9      	ldr	r1, [r3, #28]
 8001e8a:	89ba      	ldrh	r2, [r7, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	3301      	adds	r3, #1
 8001e98:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a19      	ldr	r1, [r3, #32]
 8001ea0:	7afa      	ldrb	r2, [r7, #11]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	621a      	str	r2, [r3, #32]
 8001eaa:	e039      	b.n	8001f20 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eba:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eca:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <i2c_Config+0x1a8>)
 8001ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8001edc:	1192      	asrs	r2, r2, #6
 8001ede:	17db      	asrs	r3, r3, #31
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69d9      	ldr	r1, [r3, #28]
 8001eea:	89ba      	ldrh	r2, [r7, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <i2c_Config+0x1ac>)
 8001f00:	fb82 1203 	smull	r1, r2, r2, r3
 8001f04:	1192      	asrs	r2, r2, #6
 8001f06:	17db      	asrs	r3, r3, #31
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a19      	ldr	r1, [r3, #32]
 8001f16:	7afa      	ldrb	r2, [r7, #11]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40005400 	.word	0x40005400
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40005800 	.word	0x40005800
 8001f54:	40005c00 	.word	0x40005c00
 8001f58:	057619f1 	.word	0x057619f1
 8001f5c:	10624dd3 	.word	0x10624dd3

08001f60 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8001f68:	e000      	b.n	8001f6c <i2c_StartTrasaction+0xc>
	{
		__NOP();
 8001f6a:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f7      	bne.n	8001f6a <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f88:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8001f8a:	e000      	b.n	8001f8e <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8001f8c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f7      	beq.n	8001f8c <i2c_StartTrasaction+0x2c>
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc0:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8001fc2:	e000      	b.n	8001fc6 <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 8001fc4:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f7      	beq.n	8001fc4 <i2c_ReStartTrasaction+0x1a>
	}
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	005a      	lsls	r2, r3, #1
 8001ffa:	78bb      	ldrb	r3, [r7, #2]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8002004:	e000      	b.n	8002008 <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 8002006:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f7      	beq.n	8002006 <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	73fb      	strb	r3, [r7, #15]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8002046:	e000      	b.n	800204a <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 8002048:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f7      	beq.n	8002048 <i2c_SendMemoryAddress+0x16>
	}
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <i2c_ReadDataByte>:
	}
}

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 800206e:	e000      	b.n	8002072 <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8002070:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f7      	beq.n	8002070 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	799b      	ldrb	r3, [r3, #6]
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b2:	601a      	str	r2, [r3, #0]

}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d6:	601a      	str	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff33 	bl	8001f60 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff6d 	bl	8001fe2 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff90 	bl	8002032 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff49 	bl	8001faa <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	4619      	mov	r1, r3
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff5e 	bl	8001fe2 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff9d 	bl	8002066 <i2c_ReadDataByte>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ffb3 	bl	800209c <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffc2 	bl	80020c0 <i2c_StopTrasaction>

	return auxRead;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8002152:	4a39      	ldr	r2, [pc, #228]	; (8002238 <configPLL+0xf0>)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b31      	cmp	r3, #49	; 0x31
 800215c:	d804      	bhi.n	8002168 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800215e:	4b37      	ldr	r3, [pc, #220]	; (800223c <configPLL+0xf4>)
 8002160:	4a36      	ldr	r2, [pc, #216]	; (800223c <configPLL+0xf4>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	6093      	str	r3, [r2, #8]
 8002166:	e005      	b.n	8002174 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002168:	4b34      	ldr	r3, [pc, #208]	; (800223c <configPLL+0xf4>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a33      	ldr	r2, [pc, #204]	; (800223c <configPLL+0xf4>)
 800216e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002172:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8002174:	4b31      	ldr	r3, [pc, #196]	; (800223c <configPLL+0xf4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a30      	ldr	r2, [pc, #192]	; (800223c <configPLL+0xf4>)
 800217a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800217e:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <configPLL+0xf4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a2d      	ldr	r2, [pc, #180]	; (800223c <configPLL+0xf4>)
 8002186:	f043 0312 	orr.w	r3, r3, #18
 800218a:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <configPLL+0xf4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	3a0e      	subs	r2, #14
 8002196:	0192      	lsls	r2, r2, #6
 8002198:	4611      	mov	r1, r2
 800219a:	4a28      	ldr	r2, [pc, #160]	; (800223c <configPLL+0xf4>)
 800219c:	430b      	orrs	r3, r1
 800219e:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <configPLL+0xf4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a25      	ldr	r2, [pc, #148]	; (800223c <configPLL+0xf4>)
 80021a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021aa:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <configPLL+0xf4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a22      	ldr	r2, [pc, #136]	; (800223c <configPLL+0xf4>)
 80021b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b6:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80021b8:	e000      	b.n	80021bc <configPLL+0x74>
	{
		__NOP();
 80021ba:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80021bc:	4b1f      	ldr	r3, [pc, #124]	; (800223c <configPLL+0xf4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f8      	beq.n	80021ba <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	2b5a      	cmp	r3, #90	; 0x5a
 80021cc:	d909      	bls.n	80021e2 <configPLL+0x9a>
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d806      	bhi.n	80021e2 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <configPLL+0xf8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <configPLL+0xf8>)
 80021da:	f043 0303 	orr.w	r3, r3, #3
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e01d      	b.n	800221e <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d909      	bls.n	80021fc <configPLL+0xb4>
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	2b5a      	cmp	r3, #90	; 0x5a
 80021ec:	d806      	bhi.n	80021fc <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <configPLL+0xf8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <configPLL+0xf8>)
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e010      	b.n	800221e <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	2b1e      	cmp	r3, #30
 8002200:	d909      	bls.n	8002216 <configPLL+0xce>
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	2b40      	cmp	r3, #64	; 0x40
 8002206:	d806      	bhi.n	8002216 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <configPLL+0xf8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <configPLL+0xf8>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	e003      	b.n	800221e <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <configPLL+0xf8>)
 8002218:	4a09      	ldr	r2, [pc, #36]	; (8002240 <configPLL+0xf8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <configPLL+0xf4>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4a06      	ldr	r2, [pc, #24]	; (800223c <configPLL+0xf4>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6093      	str	r3, [r2, #8]

}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	200002cc 	.word	0x200002cc
 800223c:	40023800 	.word	0x40023800
 8002240:	40023c00 	.word	0x40023c00

08002244 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <getConfigPLL+0x30>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d103      	bne.n	8002262 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <getConfigPLL+0x34>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
 8002260:	e001      	b.n	8002266 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8002262:	2310      	movs	r3, #16
 8002264:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8002266:	79fb      	ldrb	r3, [r7, #7]
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40023800 	.word	0x40023800
 8002278:	200002cc 	.word	0x200002cc

0800227c <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8002282:	f7ff ffdf 	bl	8002244 <getConfigPLL>
 8002286:	4603      	mov	r3, r0
 8002288:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 800228a:	2300      	movs	r3, #0
 800228c:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 800228e:	79bb      	ldrb	r3, [r7, #6]
 8002290:	2b31      	cmp	r3, #49	; 0x31
 8002292:	d802      	bhi.n	800229a <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8002294:	79bb      	ldrb	r3, [r7, #6]
 8002296:	71fb      	strb	r3, [r7, #7]
 8002298:	e002      	b.n	80022a0 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 80022a0:	79fb      	ldrb	r3, [r7, #7]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <__NVIC_EnableIRQ>:
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 80022ee:	4919      	ldr	r1, [pc, #100]	; (8002354 <config_SysTick_ms+0x6c>)
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80022fc:	f7ff ffa2 	bl	8002244 <getConfigPLL>
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800230a:	fb03 f202 	mul.w	r2, r3, r2
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <config_SysTick_ms+0x70>)
 8002310:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <config_SysTick_ms+0x70>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <config_SysTick_ms+0x70>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <config_SysTick_ms+0x70>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f7ff ffbe 	bl	80022ac <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <config_SysTick_ms+0x70>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a08      	ldr	r2, [pc, #32]	; (8002358 <config_SysTick_ms+0x70>)
 8002336:	f043 0302 	orr.w	r3, r3, #2
 800233a:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <config_SysTick_ms+0x70>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a05      	ldr	r2, [pc, #20]	; (8002358 <config_SysTick_ms+0x70>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002348:	b662      	cpsie	i
}
 800234a:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200002d0 	.word	0x200002d0
 8002358:	e000e010 	.word	0xe000e010

0800235c <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <SysTick_Handler+0x38>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00e      	beq.n	800238a <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <SysTick_Handler+0x38>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a08      	ldr	r2, [pc, #32]	; (8002394 <SysTick_Handler+0x38>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <SysTick_Handler+0x3c>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	1c50      	adds	r0, r2, #1
 8002380:	f143 0100 	adc.w	r1, r3, #0
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <SysTick_Handler+0x3c>)
 8002386:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e010 	.word	0xe000e010
 8002398:	200002d0 	.word	0x200002d0

0800239c <__NVIC_EnableIRQ>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a8f      	ldr	r2, [pc, #572]	; (8002624 <USART_Config+0x24c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d107      	bne.n	80023fa <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 80023ea:	4b8f      	ldr	r3, [pc, #572]	; (8002628 <USART_Config+0x250>)
 80023ec:	2210      	movs	r2, #16
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a8d      	ldr	r2, [pc, #564]	; (800262c <USART_Config+0x254>)
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e019      	b.n	800242e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4a8c      	ldr	r2, [pc, #560]	; (8002630 <USART_Config+0x258>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d108      	bne.n	8002416 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8002404:	4b88      	ldr	r3, [pc, #544]	; (8002628 <USART_Config+0x250>)
 8002406:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800240a:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	4a88      	ldr	r2, [pc, #544]	; (8002634 <USART_Config+0x25c>)
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e00b      	b.n	800242e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4a87      	ldr	r2, [pc, #540]	; (8002638 <USART_Config+0x260>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d106      	bne.n	800242e <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8002420:	4b81      	ldr	r3, [pc, #516]	; (8002628 <USART_Config+0x250>)
 8002422:	2220      	movs	r2, #32
 8002424:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	4a84      	ldr	r2, [pc, #528]	; (800263c <USART_Config+0x264>)
 800242c:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	789b      	ldrb	r3, [r3, #2]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d03d      	beq.n	80024c2 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002454:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002464:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002474:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002484:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	789b      	ldrb	r3, [r3, #2]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d110      	bne.n	80024b0 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800249c:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	e018      	b.n	80024e2 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	e00f      	b.n	80024e2 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d0:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024e0:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	78db      	ldrb	r3, [r3, #3]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d84c      	bhi.n	8002584 <USART_Config+0x1ac>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <USART_Config+0x118>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002501 	.word	0x08002501
 80024f4:	0800251f 	.word	0x0800251f
 80024f8:	08002541 	.word	0x08002541
 80024fc:	08002563 	.word	0x08002563
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800250e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	6912      	ldr	r2, [r2, #16]
 800251a:	611a      	str	r2, [r3, #16]
		break;
 800251c:	e041      	b.n	80025a2 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800252c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800253c:	611a      	str	r2, [r3, #16]
		break;
 800253e:	e030      	b.n	80025a2 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800254e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800255e:	611a      	str	r2, [r3, #16]
		break;
 8002560:	e01f      	b.n	80025a2 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002570:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8002580:	611a      	str	r2, [r3, #16]
		break;
 8002582:	e00e      	b.n	80025a2 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002592:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	6912      	ldr	r2, [r2, #16]
 800259e:	611a      	str	r2, [r3, #16]
		break;
 80025a0:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <USART_Config+0x258>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d104      	bne.n	80025ba <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80025b0:	f7ff fe64 	bl	800227c <getClockAPB1>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e003      	b.n	80025c2 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 80025ba:	f7ff fe43 	bl	8002244 <getConfigPLL>
 80025be:	4603      	mov	r3, r0
 80025c0:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	785b      	ldrb	r3, [r3, #1]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 f91f 	bl	8002814 <getValueBaudRate>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e02f      	b.n	8002642 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d10b      	bne.n	8002602 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 f90f 	bl	8002814 <getValueBaudRate>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e01f      	b.n	8002642 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d11a      	bne.n	8002640 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8002610:	4618      	mov	r0, r3
 8002612:	f000 f8ff 	bl	8002814 <getValueBaudRate>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	e00f      	b.n	8002642 <USART_Config+0x26a>
 8002622:	bf00      	nop
 8002624:	40011000 	.word	0x40011000
 8002628:	40023800 	.word	0x40023800
 800262c:	200002d8 	.word	0x200002d8
 8002630:	40004400 	.word	0x40004400
 8002634:	200002dc 	.word	0x200002dc
 8002638:	40011400 	.word	0x40011400
 800263c:	200002e0 	.word	0x200002e0
	}
	else
	{
		__NOP();
 8002640:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d866      	bhi.n	8002718 <USART_Config+0x340>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <USART_Config+0x278>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002661 	.word	0x08002661
 8002654:	08002683 	.word	0x08002683
 8002658:	080026a5 	.word	0x080026a5
 800265c:	080026e7 	.word	0x080026e7
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f022 0208 	bic.w	r2, r2, #8
 800266e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f042 0208 	orr.w	r2, r2, #8
 800267e:	60da      	str	r2, [r3, #12]

		break;
 8002680:	e063      	b.n	800274a <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f022 0204 	bic.w	r2, r2, #4
 8002690:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f042 0204 	orr.w	r2, r2, #4
 80026a0:	60da      	str	r2, [r3, #12]

		break;
 80026a2:	e052      	b.n	800274a <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f022 0208 	bic.w	r2, r2, #8
 80026b2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f022 0204 	bic.w	r2, r2, #4
 80026d2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f042 0204 	orr.w	r2, r2, #4
 80026e2:	60da      	str	r2, [r3, #12]


		break;
 80026e4:	e031      	b.n	800274a <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f022 0208 	bic.w	r2, r2, #8
 8002704:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f022 0204 	bic.w	r2, r2, #4
 8002714:	60da      	str	r2, [r3, #12]
		break;
 8002716:	e018      	b.n	800274a <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002726:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f022 0208 	bic.w	r2, r2, #8
 8002736:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	60da      	str	r2, [r3, #12]
		break;
 8002748:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800274a:	b672      	cpsid	i
}
 800274c:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	791b      	ldrb	r3, [r3, #4]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d110      	bne.n	8002778 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f022 0220 	bic.w	r2, r2, #32
 8002764:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f042 0220 	orr.w	r2, r2, #32
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	e007      	b.n	8002788 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f022 0220 	bic.w	r2, r2, #32
 8002786:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	791b      	ldrb	r3, [r3, #4]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d003      	beq.n	8002798 <USART_Config+0x3c0>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	795b      	ldrb	r3, [r3, #5]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d11a      	bne.n	80027ce <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <USART_Config+0x430>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d103      	bne.n	80027aa <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80027a2:	2025      	movs	r0, #37	; 0x25
 80027a4:	f7ff fdfa 	bl	800239c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80027a8:	e013      	b.n	80027d2 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <USART_Config+0x434>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d103      	bne.n	80027bc <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80027b4:	2026      	movs	r0, #38	; 0x26
 80027b6:	f7ff fdf1 	bl	800239c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80027ba:	e00a      	b.n	80027d2 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a13      	ldr	r2, [pc, #76]	; (8002810 <USART_Config+0x438>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d105      	bne.n	80027d2 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80027c6:	2047      	movs	r0, #71	; 0x47
 80027c8:	f7ff fde8 	bl	800239c <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80027cc:	e001      	b.n	80027d2 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80027d2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80027d4:	b662      	cpsie	i
}
 80027d6:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d00f      	beq.n	8002800 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ee:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027fe:	60da      	str	r2, [r3, #12]
	}
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40011000 	.word	0x40011000
 800280c:	40004400 	.word	0x40004400
 8002810:	40011400 	.word	0x40011400

08002814 <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8002814:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	4601      	mov	r1, r0
 8002820:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8002822:	79f9      	ldrb	r1, [r7, #7]
 8002824:	2000      	movs	r0, #0
 8002826:	460a      	mov	r2, r1
 8002828:	4603      	mov	r3, r0
 800282a:	491f      	ldr	r1, [pc, #124]	; (80028a8 <getValueBaudRate+0x94>)
 800282c:	fb01 f003 	mul.w	r0, r1, r3
 8002830:	2102      	movs	r1, #2
 8002832:	fb02 f101 	mul.w	r1, r2, r1
 8002836:	4401      	add	r1, r0
 8002838:	481b      	ldr	r0, [pc, #108]	; (80028a8 <getValueBaudRate+0x94>)
 800283a:	fba2 4500 	umull	r4, r5, r2, r0
 800283e:	194b      	adds	r3, r1, r5
 8002840:	461d      	mov	r5, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	2200      	movs	r2, #0
 8002848:	4698      	mov	r8, r3
 800284a:	4691      	mov	r9, r2
 800284c:	4642      	mov	r2, r8
 800284e:	464b      	mov	r3, r9
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fe fa20 	bl	8000c98 <__aeabi_ldivmod>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4613      	mov	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <getValueBaudRate+0x98>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	0b5b      	lsrs	r3, r3, #13
 800286a:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <getValueBaudRate+0x98>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	0a5b      	lsrs	r3, r3, #9
 800288a:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	b29b      	uxth	r3, r3
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	b29a      	uxth	r2, r3
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4313      	orrs	r3, r2
 800289a:	813b      	strh	r3, [r7, #8]

    return value;
 800289c:	893b      	ldrh	r3, [r7, #8]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028a8:	540be400 	.word	0x540be400
 80028ac:	d1b71759 	.word	0xd1b71759

080028b0 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 80028bc:	e000      	b.n	80028c0 <writeChar+0x10>
	{
		__NOP();
 80028be:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f7      	beq.n	80028be <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	605a      	str	r2, [r3, #4]

}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 80028f0:	e00a      	b.n	8002908 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ffd7 	bl	80028b0 <writeChar>
		i++;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	3301      	adds	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4413      	add	r3, r2
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ee      	bne.n	80028f2 <writeMsg+0x10>
	}
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
	return auxRxData;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <getRxData+0x14>)
 8002926:	781b      	ldrb	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	200002e4 	.word	0x200002e4

08002938 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10c      	bne.n	8002964 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8002962:	e005      	b.n	8002970 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60da      	str	r2, [r3, #12]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
	__NOP();
 8002980:	bf00      	nop
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
	__NOP();
 8002990:	bf00      	nop
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80029a0:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <USART1_IRQHandler+0xe4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <USART1_IRQHandler+0xe4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <USART1_IRQHandler+0xe8>)
 80029b8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80029ba:	f7ff ffdf 	bl	800297c <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80029be:	e05d      	b.n	8002a7c <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <USART1_IRQHandler+0xe4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d055      	beq.n	8002a7a <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <USART1_IRQHandler+0xec>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <USART1_IRQHandler+0xf0>)
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <USART1_IRQHandler+0xe4>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <USART1_IRQHandler+0xe4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ffa6 	bl	8002938 <interruptionTX>
}
 80029ec:	e046      	b.n	8002a7c <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <USART1_IRQHandler+0xec>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d142      	bne.n	8002a7c <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80029f6:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <USART1_IRQHandler+0xf4>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <USART1_IRQHandler+0xf8>)
 80029fe:	5c9b      	ldrb	r3, [r3, r2]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <USART1_IRQHandler+0xf4>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <USART1_IRQHandler+0xf8>)
 8002a0c:	5c9a      	ldrb	r2, [r3, r2]
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <USART1_IRQHandler+0xe4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
				posChar++;
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <USART1_IRQHandler+0xf4>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <USART1_IRQHandler+0xf4>)
 8002a1e:	701a      	strb	r2, [r3, #0]
}
 8002a20:	e02c      	b.n	8002a7c <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <USART1_IRQHandler+0xfc>)
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <USART1_IRQHandler+0x100>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d215      	bcs.n	8002a5a <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <USART1_IRQHandler+0xfc>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	2364      	movs	r3, #100	; 0x64
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a19      	ldr	r2, [pc, #100]	; (8002aa0 <USART1_IRQHandler+0x104>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4814      	ldr	r0, [pc, #80]	; (8002a94 <USART1_IRQHandler+0xf8>)
 8002a42:	f000 ffe9 	bl	8003a18 <siprintf>
					posChar = 0;
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <USART1_IRQHandler+0xf4>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <USART1_IRQHandler+0xfc>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <USART1_IRQHandler+0xfc>)
 8002a56:	701a      	strb	r2, [r3, #0]
}
 8002a58:	e010      	b.n	8002a7c <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <USART1_IRQHandler+0xe4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff69 	bl	8002938 <interruptionTX>
					posChar = 0;
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <USART1_IRQHandler+0xf4>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <USART1_IRQHandler+0xfc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <USART1_IRQHandler+0x100>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
}
 8002a78:	e000      	b.n	8002a7c <USART1_IRQHandler+0xe0>
		__NOP();
 8002a7a:	bf00      	nop
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200002d8 	.word	0x200002d8
 8002a84:	200002e4 	.word	0x200002e4
 8002a88:	20000b1f 	.word	0x20000b1f
 8002a8c:	200002e5 	.word	0x200002e5
 8002a90:	20000b1e 	.word	0x20000b1e
 8002a94:	200002e8 	.word	0x200002e8
 8002a98:	20000b1d 	.word	0x20000b1d
 8002a9c:	20000b1c 	.word	0x20000b1c
 8002aa0:	2000034c 	.word	0x2000034c

08002aa4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8002aa8:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <USART2_IRQHandler+0xe4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8002ab6:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <USART2_IRQHandler+0xe4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <USART2_IRQHandler+0xe8>)
 8002ac0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8002ac2:	f7fe fd81 	bl	80015c8 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8002ac6:	e05d      	b.n	8002b84 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	; (8002b88 <USART2_IRQHandler+0xe4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d055      	beq.n	8002b82 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <USART2_IRQHandler+0xec>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <USART2_IRQHandler+0xf0>)
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <USART2_IRQHandler+0xe4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <USART2_IRQHandler+0xe4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff22 	bl	8002938 <interruptionTX>
}
 8002af4:	e046      	b.n	8002b84 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <USART2_IRQHandler+0xec>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d142      	bne.n	8002b84 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <USART2_IRQHandler+0xf4>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <USART2_IRQHandler+0xf8>)
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <USART2_IRQHandler+0xf4>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <USART2_IRQHandler+0xf8>)
 8002b14:	5c9a      	ldrb	r2, [r3, r2]
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <USART2_IRQHandler+0xe4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
				posChar++;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <USART2_IRQHandler+0xf4>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	3301      	adds	r3, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <USART2_IRQHandler+0xf4>)
 8002b26:	701a      	strb	r2, [r3, #0]
}
 8002b28:	e02c      	b.n	8002b84 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <USART2_IRQHandler+0xfc>)
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <USART2_IRQHandler+0x100>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d215      	bcs.n	8002b62 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8002b36:	4b1a      	ldr	r3, [pc, #104]	; (8002ba0 <USART2_IRQHandler+0xfc>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2364      	movs	r3, #100	; 0x64
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <USART2_IRQHandler+0x104>)
 8002b44:	4413      	add	r3, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	4814      	ldr	r0, [pc, #80]	; (8002b9c <USART2_IRQHandler+0xf8>)
 8002b4a:	f000 ff65 	bl	8003a18 <siprintf>
					posChar = 0;
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <USART2_IRQHandler+0xf4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <USART2_IRQHandler+0xfc>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <USART2_IRQHandler+0xfc>)
 8002b5e:	701a      	strb	r2, [r3, #0]
}
 8002b60:	e010      	b.n	8002b84 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <USART2_IRQHandler+0xe4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fee5 	bl	8002938 <interruptionTX>
					posChar = 0;
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <USART2_IRQHandler+0xf4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <USART2_IRQHandler+0xfc>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <USART2_IRQHandler+0x100>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
}
 8002b80:	e000      	b.n	8002b84 <USART2_IRQHandler+0xe0>
		__NOP();
 8002b82:	bf00      	nop
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200002dc 	.word	0x200002dc
 8002b8c:	200002e4 	.word	0x200002e4
 8002b90:	20000b1f 	.word	0x20000b1f
 8002b94:	200002e5 	.word	0x200002e5
 8002b98:	20000b1e 	.word	0x20000b1e
 8002b9c:	200002e8 	.word	0x200002e8
 8002ba0:	20000b1d 	.word	0x20000b1d
 8002ba4:	20000b1c 	.word	0x20000b1c
 8002ba8:	2000034c 	.word	0x2000034c

08002bac <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <USART6_IRQHandler+0xe4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <USART6_IRQHandler+0xe4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b33      	ldr	r3, [pc, #204]	; (8002c94 <USART6_IRQHandler+0xe8>)
 8002bc8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8002bca:	f7ff fedf 	bl	800298c <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8002bce:	e05d      	b.n	8002c8c <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8002bd0:	4b2f      	ldr	r3, [pc, #188]	; (8002c90 <USART6_IRQHandler+0xe4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d055      	beq.n	8002c8a <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <USART6_IRQHandler+0xec>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <USART6_IRQHandler+0xf0>)
 8002be8:	781a      	ldrb	r2, [r3, #0]
 8002bea:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <USART6_IRQHandler+0xe4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <USART6_IRQHandler+0xe4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fe9e 	bl	8002938 <interruptionTX>
}
 8002bfc:	e046      	b.n	8002c8c <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8002bfe:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <USART6_IRQHandler+0xec>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d142      	bne.n	8002c8c <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <USART6_IRQHandler+0xf4>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <USART6_IRQHandler+0xf8>)
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <USART6_IRQHandler+0xf4>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <USART6_IRQHandler+0xf8>)
 8002c1c:	5c9a      	ldrb	r2, [r3, r2]
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <USART6_IRQHandler+0xe4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	605a      	str	r2, [r3, #4]
				posChar++;
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <USART6_IRQHandler+0xf4>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <USART6_IRQHandler+0xf4>)
 8002c2e:	701a      	strb	r2, [r3, #0]
}
 8002c30:	e02c      	b.n	8002c8c <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <USART6_IRQHandler+0xfc>)
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <USART6_IRQHandler+0x100>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d215      	bcs.n	8002c6a <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <USART6_IRQHandler+0xfc>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	2364      	movs	r3, #100	; 0x64
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <USART6_IRQHandler+0x104>)
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4814      	ldr	r0, [pc, #80]	; (8002ca4 <USART6_IRQHandler+0xf8>)
 8002c52:	f000 fee1 	bl	8003a18 <siprintf>
					posChar = 0;
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <USART6_IRQHandler+0xf4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <USART6_IRQHandler+0xfc>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <USART6_IRQHandler+0xfc>)
 8002c66:	701a      	strb	r2, [r3, #0]
}
 8002c68:	e010      	b.n	8002c8c <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <USART6_IRQHandler+0xe4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fe61 	bl	8002938 <interruptionTX>
					posChar = 0;
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <USART6_IRQHandler+0xf4>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <USART6_IRQHandler+0xfc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <USART6_IRQHandler+0x100>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
}
 8002c88:	e000      	b.n	8002c8c <USART6_IRQHandler+0xe0>
		__NOP();
 8002c8a:	bf00      	nop
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200002e0 	.word	0x200002e0
 8002c94:	200002e4 	.word	0x200002e4
 8002c98:	20000b1f 	.word	0x20000b1f
 8002c9c:	200002e5 	.word	0x200002e5
 8002ca0:	20000b1e 	.word	0x20000b1e
 8002ca4:	200002e8 	.word	0x200002e8
 8002ca8:	20000b1d 	.word	0x20000b1d
 8002cac:	20000b1c 	.word	0x20000b1c
 8002cb0:	2000034c 	.word	0x2000034c

08002cb4 <__errno>:
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <__errno+0x8>)
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <__libc_init_array>:
 8002cc0:	b570      	push	{r4, r5, r6, lr}
 8002cc2:	4d0d      	ldr	r5, [pc, #52]	; (8002cf8 <__libc_init_array+0x38>)
 8002cc4:	4c0d      	ldr	r4, [pc, #52]	; (8002cfc <__libc_init_array+0x3c>)
 8002cc6:	1b64      	subs	r4, r4, r5
 8002cc8:	10a4      	asrs	r4, r4, #2
 8002cca:	2600      	movs	r6, #0
 8002ccc:	42a6      	cmp	r6, r4
 8002cce:	d109      	bne.n	8002ce4 <__libc_init_array+0x24>
 8002cd0:	4d0b      	ldr	r5, [pc, #44]	; (8002d00 <__libc_init_array+0x40>)
 8002cd2:	4c0c      	ldr	r4, [pc, #48]	; (8002d04 <__libc_init_array+0x44>)
 8002cd4:	f004 fc90 	bl	80075f8 <_init>
 8002cd8:	1b64      	subs	r4, r4, r5
 8002cda:	10a4      	asrs	r4, r4, #2
 8002cdc:	2600      	movs	r6, #0
 8002cde:	42a6      	cmp	r6, r4
 8002ce0:	d105      	bne.n	8002cee <__libc_init_array+0x2e>
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce8:	4798      	blx	r3
 8002cea:	3601      	adds	r6, #1
 8002cec:	e7ee      	b.n	8002ccc <__libc_init_array+0xc>
 8002cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf2:	4798      	blx	r3
 8002cf4:	3601      	adds	r6, #1
 8002cf6:	e7f2      	b.n	8002cde <__libc_init_array+0x1e>
 8002cf8:	08007adc 	.word	0x08007adc
 8002cfc:	08007adc 	.word	0x08007adc
 8002d00:	08007adc 	.word	0x08007adc
 8002d04:	08007ae0 	.word	0x08007ae0

08002d08 <memset>:
 8002d08:	4402      	add	r2, r0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <memset+0xa>
 8002d10:	4770      	bx	lr
 8002d12:	f803 1b01 	strb.w	r1, [r3], #1
 8002d16:	e7f9      	b.n	8002d0c <memset+0x4>

08002d18 <__cvt>:
 8002d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d1c:	ec55 4b10 	vmov	r4, r5, d0
 8002d20:	2d00      	cmp	r5, #0
 8002d22:	460e      	mov	r6, r1
 8002d24:	4619      	mov	r1, r3
 8002d26:	462b      	mov	r3, r5
 8002d28:	bfbb      	ittet	lt
 8002d2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002d2e:	461d      	movlt	r5, r3
 8002d30:	2300      	movge	r3, #0
 8002d32:	232d      	movlt	r3, #45	; 0x2d
 8002d34:	700b      	strb	r3, [r1, #0]
 8002d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002d3c:	4691      	mov	r9, r2
 8002d3e:	f023 0820 	bic.w	r8, r3, #32
 8002d42:	bfbc      	itt	lt
 8002d44:	4622      	movlt	r2, r4
 8002d46:	4614      	movlt	r4, r2
 8002d48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d4c:	d005      	beq.n	8002d5a <__cvt+0x42>
 8002d4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002d52:	d100      	bne.n	8002d56 <__cvt+0x3e>
 8002d54:	3601      	adds	r6, #1
 8002d56:	2102      	movs	r1, #2
 8002d58:	e000      	b.n	8002d5c <__cvt+0x44>
 8002d5a:	2103      	movs	r1, #3
 8002d5c:	ab03      	add	r3, sp, #12
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	ab02      	add	r3, sp, #8
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	ec45 4b10 	vmov	d0, r4, r5
 8002d68:	4653      	mov	r3, sl
 8002d6a:	4632      	mov	r2, r6
 8002d6c:	f001 fdac 	bl	80048c8 <_dtoa_r>
 8002d70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d74:	4607      	mov	r7, r0
 8002d76:	d102      	bne.n	8002d7e <__cvt+0x66>
 8002d78:	f019 0f01 	tst.w	r9, #1
 8002d7c:	d022      	beq.n	8002dc4 <__cvt+0xac>
 8002d7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d82:	eb07 0906 	add.w	r9, r7, r6
 8002d86:	d110      	bne.n	8002daa <__cvt+0x92>
 8002d88:	783b      	ldrb	r3, [r7, #0]
 8002d8a:	2b30      	cmp	r3, #48	; 0x30
 8002d8c:	d10a      	bne.n	8002da4 <__cvt+0x8c>
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2300      	movs	r3, #0
 8002d92:	4620      	mov	r0, r4
 8002d94:	4629      	mov	r1, r5
 8002d96:	f7fd fe9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8002d9a:	b918      	cbnz	r0, 8002da4 <__cvt+0x8c>
 8002d9c:	f1c6 0601 	rsb	r6, r6, #1
 8002da0:	f8ca 6000 	str.w	r6, [sl]
 8002da4:	f8da 3000 	ldr.w	r3, [sl]
 8002da8:	4499      	add	r9, r3
 8002daa:	2200      	movs	r2, #0
 8002dac:	2300      	movs	r3, #0
 8002dae:	4620      	mov	r0, r4
 8002db0:	4629      	mov	r1, r5
 8002db2:	f7fd fe91 	bl	8000ad8 <__aeabi_dcmpeq>
 8002db6:	b108      	cbz	r0, 8002dbc <__cvt+0xa4>
 8002db8:	f8cd 900c 	str.w	r9, [sp, #12]
 8002dbc:	2230      	movs	r2, #48	; 0x30
 8002dbe:	9b03      	ldr	r3, [sp, #12]
 8002dc0:	454b      	cmp	r3, r9
 8002dc2:	d307      	bcc.n	8002dd4 <__cvt+0xbc>
 8002dc4:	9b03      	ldr	r3, [sp, #12]
 8002dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dc8:	1bdb      	subs	r3, r3, r7
 8002dca:	4638      	mov	r0, r7
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	b004      	add	sp, #16
 8002dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd4:	1c59      	adds	r1, r3, #1
 8002dd6:	9103      	str	r1, [sp, #12]
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e7f0      	b.n	8002dbe <__cvt+0xa6>

08002ddc <__exponent>:
 8002ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dde:	4603      	mov	r3, r0
 8002de0:	2900      	cmp	r1, #0
 8002de2:	bfb8      	it	lt
 8002de4:	4249      	neglt	r1, r1
 8002de6:	f803 2b02 	strb.w	r2, [r3], #2
 8002dea:	bfb4      	ite	lt
 8002dec:	222d      	movlt	r2, #45	; 0x2d
 8002dee:	222b      	movge	r2, #43	; 0x2b
 8002df0:	2909      	cmp	r1, #9
 8002df2:	7042      	strb	r2, [r0, #1]
 8002df4:	dd2a      	ble.n	8002e4c <__exponent+0x70>
 8002df6:	f10d 0407 	add.w	r4, sp, #7
 8002dfa:	46a4      	mov	ip, r4
 8002dfc:	270a      	movs	r7, #10
 8002dfe:	46a6      	mov	lr, r4
 8002e00:	460a      	mov	r2, r1
 8002e02:	fb91 f6f7 	sdiv	r6, r1, r7
 8002e06:	fb07 1516 	mls	r5, r7, r6, r1
 8002e0a:	3530      	adds	r5, #48	; 0x30
 8002e0c:	2a63      	cmp	r2, #99	; 0x63
 8002e0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002e12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002e16:	4631      	mov	r1, r6
 8002e18:	dcf1      	bgt.n	8002dfe <__exponent+0x22>
 8002e1a:	3130      	adds	r1, #48	; 0x30
 8002e1c:	f1ae 0502 	sub.w	r5, lr, #2
 8002e20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002e24:	1c44      	adds	r4, r0, #1
 8002e26:	4629      	mov	r1, r5
 8002e28:	4561      	cmp	r1, ip
 8002e2a:	d30a      	bcc.n	8002e42 <__exponent+0x66>
 8002e2c:	f10d 0209 	add.w	r2, sp, #9
 8002e30:	eba2 020e 	sub.w	r2, r2, lr
 8002e34:	4565      	cmp	r5, ip
 8002e36:	bf88      	it	hi
 8002e38:	2200      	movhi	r2, #0
 8002e3a:	4413      	add	r3, r2
 8002e3c:	1a18      	subs	r0, r3, r0
 8002e3e:	b003      	add	sp, #12
 8002e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002e4a:	e7ed      	b.n	8002e28 <__exponent+0x4c>
 8002e4c:	2330      	movs	r3, #48	; 0x30
 8002e4e:	3130      	adds	r1, #48	; 0x30
 8002e50:	7083      	strb	r3, [r0, #2]
 8002e52:	70c1      	strb	r1, [r0, #3]
 8002e54:	1d03      	adds	r3, r0, #4
 8002e56:	e7f1      	b.n	8002e3c <__exponent+0x60>

08002e58 <_printf_float>:
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	ed2d 8b02 	vpush	{d8}
 8002e60:	b08d      	sub	sp, #52	; 0x34
 8002e62:	460c      	mov	r4, r1
 8002e64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002e68:	4616      	mov	r6, r2
 8002e6a:	461f      	mov	r7, r3
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	f002 fe89 	bl	8005b84 <_localeconv_r>
 8002e72:	f8d0 a000 	ldr.w	sl, [r0]
 8002e76:	4650      	mov	r0, sl
 8002e78:	f7fd f9b2 	bl	80001e0 <strlen>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8002e80:	6823      	ldr	r3, [r4, #0]
 8002e82:	9305      	str	r3, [sp, #20]
 8002e84:	f8d8 3000 	ldr.w	r3, [r8]
 8002e88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002e8c:	3307      	adds	r3, #7
 8002e8e:	f023 0307 	bic.w	r3, r3, #7
 8002e92:	f103 0208 	add.w	r2, r3, #8
 8002e96:	f8c8 2000 	str.w	r2, [r8]
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002ea2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002ea6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002eaa:	9307      	str	r3, [sp, #28]
 8002eac:	f8cd 8018 	str.w	r8, [sp, #24]
 8002eb0:	ee08 0a10 	vmov	s16, r0
 8002eb4:	4b9f      	ldr	r3, [pc, #636]	; (8003134 <_printf_float+0x2dc>)
 8002eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	f7fd fe3d 	bl	8000b3c <__aeabi_dcmpun>
 8002ec2:	bb88      	cbnz	r0, 8002f28 <_printf_float+0xd0>
 8002ec4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002ec8:	4b9a      	ldr	r3, [pc, #616]	; (8003134 <_printf_float+0x2dc>)
 8002eca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ece:	f7fd fe17 	bl	8000b00 <__aeabi_dcmple>
 8002ed2:	bb48      	cbnz	r0, 8002f28 <_printf_float+0xd0>
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	4640      	mov	r0, r8
 8002eda:	4649      	mov	r1, r9
 8002edc:	f7fd fe06 	bl	8000aec <__aeabi_dcmplt>
 8002ee0:	b110      	cbz	r0, 8002ee8 <_printf_float+0x90>
 8002ee2:	232d      	movs	r3, #45	; 0x2d
 8002ee4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ee8:	4b93      	ldr	r3, [pc, #588]	; (8003138 <_printf_float+0x2e0>)
 8002eea:	4894      	ldr	r0, [pc, #592]	; (800313c <_printf_float+0x2e4>)
 8002eec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002ef0:	bf94      	ite	ls
 8002ef2:	4698      	movls	r8, r3
 8002ef4:	4680      	movhi	r8, r0
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	6123      	str	r3, [r4, #16]
 8002efa:	9b05      	ldr	r3, [sp, #20]
 8002efc:	f023 0204 	bic.w	r2, r3, #4
 8002f00:	6022      	str	r2, [r4, #0]
 8002f02:	f04f 0900 	mov.w	r9, #0
 8002f06:	9700      	str	r7, [sp, #0]
 8002f08:	4633      	mov	r3, r6
 8002f0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002f0c:	4621      	mov	r1, r4
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f000 f9d8 	bl	80032c4 <_printf_common>
 8002f14:	3001      	adds	r0, #1
 8002f16:	f040 8090 	bne.w	800303a <_printf_float+0x1e2>
 8002f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1e:	b00d      	add	sp, #52	; 0x34
 8002f20:	ecbd 8b02 	vpop	{d8}
 8002f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f28:	4642      	mov	r2, r8
 8002f2a:	464b      	mov	r3, r9
 8002f2c:	4640      	mov	r0, r8
 8002f2e:	4649      	mov	r1, r9
 8002f30:	f7fd fe04 	bl	8000b3c <__aeabi_dcmpun>
 8002f34:	b140      	cbz	r0, 8002f48 <_printf_float+0xf0>
 8002f36:	464b      	mov	r3, r9
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bfbc      	itt	lt
 8002f3c:	232d      	movlt	r3, #45	; 0x2d
 8002f3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002f42:	487f      	ldr	r0, [pc, #508]	; (8003140 <_printf_float+0x2e8>)
 8002f44:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <_printf_float+0x2ec>)
 8002f46:	e7d1      	b.n	8002eec <_printf_float+0x94>
 8002f48:	6863      	ldr	r3, [r4, #4]
 8002f4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002f4e:	9206      	str	r2, [sp, #24]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	d13f      	bne.n	8002fd4 <_printf_float+0x17c>
 8002f54:	2306      	movs	r3, #6
 8002f56:	6063      	str	r3, [r4, #4]
 8002f58:	9b05      	ldr	r3, [sp, #20]
 8002f5a:	6861      	ldr	r1, [r4, #4]
 8002f5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f60:	2300      	movs	r3, #0
 8002f62:	9303      	str	r3, [sp, #12]
 8002f64:	ab0a      	add	r3, sp, #40	; 0x28
 8002f66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002f6a:	ab09      	add	r3, sp, #36	; 0x24
 8002f6c:	ec49 8b10 	vmov	d0, r8, r9
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	6022      	str	r2, [r4, #0]
 8002f74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f7ff fecd 	bl	8002d18 <__cvt>
 8002f7e:	9b06      	ldr	r3, [sp, #24]
 8002f80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f82:	2b47      	cmp	r3, #71	; 0x47
 8002f84:	4680      	mov	r8, r0
 8002f86:	d108      	bne.n	8002f9a <_printf_float+0x142>
 8002f88:	1cc8      	adds	r0, r1, #3
 8002f8a:	db02      	blt.n	8002f92 <_printf_float+0x13a>
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	4299      	cmp	r1, r3
 8002f90:	dd41      	ble.n	8003016 <_printf_float+0x1be>
 8002f92:	f1ab 0b02 	sub.w	fp, fp, #2
 8002f96:	fa5f fb8b 	uxtb.w	fp, fp
 8002f9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002f9e:	d820      	bhi.n	8002fe2 <_printf_float+0x18a>
 8002fa0:	3901      	subs	r1, #1
 8002fa2:	465a      	mov	r2, fp
 8002fa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002fa8:	9109      	str	r1, [sp, #36]	; 0x24
 8002faa:	f7ff ff17 	bl	8002ddc <__exponent>
 8002fae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002fb0:	1813      	adds	r3, r2, r0
 8002fb2:	2a01      	cmp	r2, #1
 8002fb4:	4681      	mov	r9, r0
 8002fb6:	6123      	str	r3, [r4, #16]
 8002fb8:	dc02      	bgt.n	8002fc0 <_printf_float+0x168>
 8002fba:	6822      	ldr	r2, [r4, #0]
 8002fbc:	07d2      	lsls	r2, r2, #31
 8002fbe:	d501      	bpl.n	8002fc4 <_printf_float+0x16c>
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	6123      	str	r3, [r4, #16]
 8002fc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d09c      	beq.n	8002f06 <_printf_float+0xae>
 8002fcc:	232d      	movs	r3, #45	; 0x2d
 8002fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd2:	e798      	b.n	8002f06 <_printf_float+0xae>
 8002fd4:	9a06      	ldr	r2, [sp, #24]
 8002fd6:	2a47      	cmp	r2, #71	; 0x47
 8002fd8:	d1be      	bne.n	8002f58 <_printf_float+0x100>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1bc      	bne.n	8002f58 <_printf_float+0x100>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e7b9      	b.n	8002f56 <_printf_float+0xfe>
 8002fe2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002fe6:	d118      	bne.n	800301a <_printf_float+0x1c2>
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	6863      	ldr	r3, [r4, #4]
 8002fec:	dd0b      	ble.n	8003006 <_printf_float+0x1ae>
 8002fee:	6121      	str	r1, [r4, #16]
 8002ff0:	b913      	cbnz	r3, 8002ff8 <_printf_float+0x1a0>
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	07d0      	lsls	r0, r2, #31
 8002ff6:	d502      	bpl.n	8002ffe <_printf_float+0x1a6>
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	440b      	add	r3, r1
 8002ffc:	6123      	str	r3, [r4, #16]
 8002ffe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003000:	f04f 0900 	mov.w	r9, #0
 8003004:	e7de      	b.n	8002fc4 <_printf_float+0x16c>
 8003006:	b913      	cbnz	r3, 800300e <_printf_float+0x1b6>
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	07d2      	lsls	r2, r2, #31
 800300c:	d501      	bpl.n	8003012 <_printf_float+0x1ba>
 800300e:	3302      	adds	r3, #2
 8003010:	e7f4      	b.n	8002ffc <_printf_float+0x1a4>
 8003012:	2301      	movs	r3, #1
 8003014:	e7f2      	b.n	8002ffc <_printf_float+0x1a4>
 8003016:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800301a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800301c:	4299      	cmp	r1, r3
 800301e:	db05      	blt.n	800302c <_printf_float+0x1d4>
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	6121      	str	r1, [r4, #16]
 8003024:	07d8      	lsls	r0, r3, #31
 8003026:	d5ea      	bpl.n	8002ffe <_printf_float+0x1a6>
 8003028:	1c4b      	adds	r3, r1, #1
 800302a:	e7e7      	b.n	8002ffc <_printf_float+0x1a4>
 800302c:	2900      	cmp	r1, #0
 800302e:	bfd4      	ite	le
 8003030:	f1c1 0202 	rsble	r2, r1, #2
 8003034:	2201      	movgt	r2, #1
 8003036:	4413      	add	r3, r2
 8003038:	e7e0      	b.n	8002ffc <_printf_float+0x1a4>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	055a      	lsls	r2, r3, #21
 800303e:	d407      	bmi.n	8003050 <_printf_float+0x1f8>
 8003040:	6923      	ldr	r3, [r4, #16]
 8003042:	4642      	mov	r2, r8
 8003044:	4631      	mov	r1, r6
 8003046:	4628      	mov	r0, r5
 8003048:	47b8      	blx	r7
 800304a:	3001      	adds	r0, #1
 800304c:	d12c      	bne.n	80030a8 <_printf_float+0x250>
 800304e:	e764      	b.n	8002f1a <_printf_float+0xc2>
 8003050:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003054:	f240 80e0 	bls.w	8003218 <_printf_float+0x3c0>
 8003058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800305c:	2200      	movs	r2, #0
 800305e:	2300      	movs	r3, #0
 8003060:	f7fd fd3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003064:	2800      	cmp	r0, #0
 8003066:	d034      	beq.n	80030d2 <_printf_float+0x27a>
 8003068:	4a37      	ldr	r2, [pc, #220]	; (8003148 <_printf_float+0x2f0>)
 800306a:	2301      	movs	r3, #1
 800306c:	4631      	mov	r1, r6
 800306e:	4628      	mov	r0, r5
 8003070:	47b8      	blx	r7
 8003072:	3001      	adds	r0, #1
 8003074:	f43f af51 	beq.w	8002f1a <_printf_float+0xc2>
 8003078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800307c:	429a      	cmp	r2, r3
 800307e:	db02      	blt.n	8003086 <_printf_float+0x22e>
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	07d8      	lsls	r0, r3, #31
 8003084:	d510      	bpl.n	80030a8 <_printf_float+0x250>
 8003086:	ee18 3a10 	vmov	r3, s16
 800308a:	4652      	mov	r2, sl
 800308c:	4631      	mov	r1, r6
 800308e:	4628      	mov	r0, r5
 8003090:	47b8      	blx	r7
 8003092:	3001      	adds	r0, #1
 8003094:	f43f af41 	beq.w	8002f1a <_printf_float+0xc2>
 8003098:	f04f 0800 	mov.w	r8, #0
 800309c:	f104 091a 	add.w	r9, r4, #26
 80030a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	4543      	cmp	r3, r8
 80030a6:	dc09      	bgt.n	80030bc <_printf_float+0x264>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	079b      	lsls	r3, r3, #30
 80030ac:	f100 8105 	bmi.w	80032ba <_printf_float+0x462>
 80030b0:	68e0      	ldr	r0, [r4, #12]
 80030b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030b4:	4298      	cmp	r0, r3
 80030b6:	bfb8      	it	lt
 80030b8:	4618      	movlt	r0, r3
 80030ba:	e730      	b.n	8002f1e <_printf_float+0xc6>
 80030bc:	2301      	movs	r3, #1
 80030be:	464a      	mov	r2, r9
 80030c0:	4631      	mov	r1, r6
 80030c2:	4628      	mov	r0, r5
 80030c4:	47b8      	blx	r7
 80030c6:	3001      	adds	r0, #1
 80030c8:	f43f af27 	beq.w	8002f1a <_printf_float+0xc2>
 80030cc:	f108 0801 	add.w	r8, r8, #1
 80030d0:	e7e6      	b.n	80030a0 <_printf_float+0x248>
 80030d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	dc39      	bgt.n	800314c <_printf_float+0x2f4>
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <_printf_float+0x2f0>)
 80030da:	2301      	movs	r3, #1
 80030dc:	4631      	mov	r1, r6
 80030de:	4628      	mov	r0, r5
 80030e0:	47b8      	blx	r7
 80030e2:	3001      	adds	r0, #1
 80030e4:	f43f af19 	beq.w	8002f1a <_printf_float+0xc2>
 80030e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030ec:	4313      	orrs	r3, r2
 80030ee:	d102      	bne.n	80030f6 <_printf_float+0x29e>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	07d9      	lsls	r1, r3, #31
 80030f4:	d5d8      	bpl.n	80030a8 <_printf_float+0x250>
 80030f6:	ee18 3a10 	vmov	r3, s16
 80030fa:	4652      	mov	r2, sl
 80030fc:	4631      	mov	r1, r6
 80030fe:	4628      	mov	r0, r5
 8003100:	47b8      	blx	r7
 8003102:	3001      	adds	r0, #1
 8003104:	f43f af09 	beq.w	8002f1a <_printf_float+0xc2>
 8003108:	f04f 0900 	mov.w	r9, #0
 800310c:	f104 0a1a 	add.w	sl, r4, #26
 8003110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003112:	425b      	negs	r3, r3
 8003114:	454b      	cmp	r3, r9
 8003116:	dc01      	bgt.n	800311c <_printf_float+0x2c4>
 8003118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800311a:	e792      	b.n	8003042 <_printf_float+0x1ea>
 800311c:	2301      	movs	r3, #1
 800311e:	4652      	mov	r2, sl
 8003120:	4631      	mov	r1, r6
 8003122:	4628      	mov	r0, r5
 8003124:	47b8      	blx	r7
 8003126:	3001      	adds	r0, #1
 8003128:	f43f aef7 	beq.w	8002f1a <_printf_float+0xc2>
 800312c:	f109 0901 	add.w	r9, r9, #1
 8003130:	e7ee      	b.n	8003110 <_printf_float+0x2b8>
 8003132:	bf00      	nop
 8003134:	7fefffff 	.word	0x7fefffff
 8003138:	08007630 	.word	0x08007630
 800313c:	08007634 	.word	0x08007634
 8003140:	0800763c 	.word	0x0800763c
 8003144:	08007638 	.word	0x08007638
 8003148:	08007640 	.word	0x08007640
 800314c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800314e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003150:	429a      	cmp	r2, r3
 8003152:	bfa8      	it	ge
 8003154:	461a      	movge	r2, r3
 8003156:	2a00      	cmp	r2, #0
 8003158:	4691      	mov	r9, r2
 800315a:	dc37      	bgt.n	80031cc <_printf_float+0x374>
 800315c:	f04f 0b00 	mov.w	fp, #0
 8003160:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003164:	f104 021a 	add.w	r2, r4, #26
 8003168:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800316a:	9305      	str	r3, [sp, #20]
 800316c:	eba3 0309 	sub.w	r3, r3, r9
 8003170:	455b      	cmp	r3, fp
 8003172:	dc33      	bgt.n	80031dc <_printf_float+0x384>
 8003174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003178:	429a      	cmp	r2, r3
 800317a:	db3b      	blt.n	80031f4 <_printf_float+0x39c>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	07da      	lsls	r2, r3, #31
 8003180:	d438      	bmi.n	80031f4 <_printf_float+0x39c>
 8003182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003184:	9a05      	ldr	r2, [sp, #20]
 8003186:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003188:	1a9a      	subs	r2, r3, r2
 800318a:	eba3 0901 	sub.w	r9, r3, r1
 800318e:	4591      	cmp	r9, r2
 8003190:	bfa8      	it	ge
 8003192:	4691      	movge	r9, r2
 8003194:	f1b9 0f00 	cmp.w	r9, #0
 8003198:	dc35      	bgt.n	8003206 <_printf_float+0x3ae>
 800319a:	f04f 0800 	mov.w	r8, #0
 800319e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80031a2:	f104 0a1a 	add.w	sl, r4, #26
 80031a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	eba3 0309 	sub.w	r3, r3, r9
 80031b0:	4543      	cmp	r3, r8
 80031b2:	f77f af79 	ble.w	80030a8 <_printf_float+0x250>
 80031b6:	2301      	movs	r3, #1
 80031b8:	4652      	mov	r2, sl
 80031ba:	4631      	mov	r1, r6
 80031bc:	4628      	mov	r0, r5
 80031be:	47b8      	blx	r7
 80031c0:	3001      	adds	r0, #1
 80031c2:	f43f aeaa 	beq.w	8002f1a <_printf_float+0xc2>
 80031c6:	f108 0801 	add.w	r8, r8, #1
 80031ca:	e7ec      	b.n	80031a6 <_printf_float+0x34e>
 80031cc:	4613      	mov	r3, r2
 80031ce:	4631      	mov	r1, r6
 80031d0:	4642      	mov	r2, r8
 80031d2:	4628      	mov	r0, r5
 80031d4:	47b8      	blx	r7
 80031d6:	3001      	adds	r0, #1
 80031d8:	d1c0      	bne.n	800315c <_printf_float+0x304>
 80031da:	e69e      	b.n	8002f1a <_printf_float+0xc2>
 80031dc:	2301      	movs	r3, #1
 80031de:	4631      	mov	r1, r6
 80031e0:	4628      	mov	r0, r5
 80031e2:	9205      	str	r2, [sp, #20]
 80031e4:	47b8      	blx	r7
 80031e6:	3001      	adds	r0, #1
 80031e8:	f43f ae97 	beq.w	8002f1a <_printf_float+0xc2>
 80031ec:	9a05      	ldr	r2, [sp, #20]
 80031ee:	f10b 0b01 	add.w	fp, fp, #1
 80031f2:	e7b9      	b.n	8003168 <_printf_float+0x310>
 80031f4:	ee18 3a10 	vmov	r3, s16
 80031f8:	4652      	mov	r2, sl
 80031fa:	4631      	mov	r1, r6
 80031fc:	4628      	mov	r0, r5
 80031fe:	47b8      	blx	r7
 8003200:	3001      	adds	r0, #1
 8003202:	d1be      	bne.n	8003182 <_printf_float+0x32a>
 8003204:	e689      	b.n	8002f1a <_printf_float+0xc2>
 8003206:	9a05      	ldr	r2, [sp, #20]
 8003208:	464b      	mov	r3, r9
 800320a:	4442      	add	r2, r8
 800320c:	4631      	mov	r1, r6
 800320e:	4628      	mov	r0, r5
 8003210:	47b8      	blx	r7
 8003212:	3001      	adds	r0, #1
 8003214:	d1c1      	bne.n	800319a <_printf_float+0x342>
 8003216:	e680      	b.n	8002f1a <_printf_float+0xc2>
 8003218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800321a:	2a01      	cmp	r2, #1
 800321c:	dc01      	bgt.n	8003222 <_printf_float+0x3ca>
 800321e:	07db      	lsls	r3, r3, #31
 8003220:	d538      	bpl.n	8003294 <_printf_float+0x43c>
 8003222:	2301      	movs	r3, #1
 8003224:	4642      	mov	r2, r8
 8003226:	4631      	mov	r1, r6
 8003228:	4628      	mov	r0, r5
 800322a:	47b8      	blx	r7
 800322c:	3001      	adds	r0, #1
 800322e:	f43f ae74 	beq.w	8002f1a <_printf_float+0xc2>
 8003232:	ee18 3a10 	vmov	r3, s16
 8003236:	4652      	mov	r2, sl
 8003238:	4631      	mov	r1, r6
 800323a:	4628      	mov	r0, r5
 800323c:	47b8      	blx	r7
 800323e:	3001      	adds	r0, #1
 8003240:	f43f ae6b 	beq.w	8002f1a <_printf_float+0xc2>
 8003244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003248:	2200      	movs	r2, #0
 800324a:	2300      	movs	r3, #0
 800324c:	f7fd fc44 	bl	8000ad8 <__aeabi_dcmpeq>
 8003250:	b9d8      	cbnz	r0, 800328a <_printf_float+0x432>
 8003252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003254:	f108 0201 	add.w	r2, r8, #1
 8003258:	3b01      	subs	r3, #1
 800325a:	4631      	mov	r1, r6
 800325c:	4628      	mov	r0, r5
 800325e:	47b8      	blx	r7
 8003260:	3001      	adds	r0, #1
 8003262:	d10e      	bne.n	8003282 <_printf_float+0x42a>
 8003264:	e659      	b.n	8002f1a <_printf_float+0xc2>
 8003266:	2301      	movs	r3, #1
 8003268:	4652      	mov	r2, sl
 800326a:	4631      	mov	r1, r6
 800326c:	4628      	mov	r0, r5
 800326e:	47b8      	blx	r7
 8003270:	3001      	adds	r0, #1
 8003272:	f43f ae52 	beq.w	8002f1a <_printf_float+0xc2>
 8003276:	f108 0801 	add.w	r8, r8, #1
 800327a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	4543      	cmp	r3, r8
 8003280:	dcf1      	bgt.n	8003266 <_printf_float+0x40e>
 8003282:	464b      	mov	r3, r9
 8003284:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003288:	e6dc      	b.n	8003044 <_printf_float+0x1ec>
 800328a:	f04f 0800 	mov.w	r8, #0
 800328e:	f104 0a1a 	add.w	sl, r4, #26
 8003292:	e7f2      	b.n	800327a <_printf_float+0x422>
 8003294:	2301      	movs	r3, #1
 8003296:	4642      	mov	r2, r8
 8003298:	e7df      	b.n	800325a <_printf_float+0x402>
 800329a:	2301      	movs	r3, #1
 800329c:	464a      	mov	r2, r9
 800329e:	4631      	mov	r1, r6
 80032a0:	4628      	mov	r0, r5
 80032a2:	47b8      	blx	r7
 80032a4:	3001      	adds	r0, #1
 80032a6:	f43f ae38 	beq.w	8002f1a <_printf_float+0xc2>
 80032aa:	f108 0801 	add.w	r8, r8, #1
 80032ae:	68e3      	ldr	r3, [r4, #12]
 80032b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032b2:	1a5b      	subs	r3, r3, r1
 80032b4:	4543      	cmp	r3, r8
 80032b6:	dcf0      	bgt.n	800329a <_printf_float+0x442>
 80032b8:	e6fa      	b.n	80030b0 <_printf_float+0x258>
 80032ba:	f04f 0800 	mov.w	r8, #0
 80032be:	f104 0919 	add.w	r9, r4, #25
 80032c2:	e7f4      	b.n	80032ae <_printf_float+0x456>

080032c4 <_printf_common>:
 80032c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032c8:	4616      	mov	r6, r2
 80032ca:	4699      	mov	r9, r3
 80032cc:	688a      	ldr	r2, [r1, #8]
 80032ce:	690b      	ldr	r3, [r1, #16]
 80032d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bfb8      	it	lt
 80032d8:	4613      	movlt	r3, r2
 80032da:	6033      	str	r3, [r6, #0]
 80032dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032e0:	4607      	mov	r7, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	b10a      	cbz	r2, 80032ea <_printf_common+0x26>
 80032e6:	3301      	adds	r3, #1
 80032e8:	6033      	str	r3, [r6, #0]
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	0699      	lsls	r1, r3, #26
 80032ee:	bf42      	ittt	mi
 80032f0:	6833      	ldrmi	r3, [r6, #0]
 80032f2:	3302      	addmi	r3, #2
 80032f4:	6033      	strmi	r3, [r6, #0]
 80032f6:	6825      	ldr	r5, [r4, #0]
 80032f8:	f015 0506 	ands.w	r5, r5, #6
 80032fc:	d106      	bne.n	800330c <_printf_common+0x48>
 80032fe:	f104 0a19 	add.w	sl, r4, #25
 8003302:	68e3      	ldr	r3, [r4, #12]
 8003304:	6832      	ldr	r2, [r6, #0]
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	42ab      	cmp	r3, r5
 800330a:	dc26      	bgt.n	800335a <_printf_common+0x96>
 800330c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003310:	1e13      	subs	r3, r2, #0
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	bf18      	it	ne
 8003316:	2301      	movne	r3, #1
 8003318:	0692      	lsls	r2, r2, #26
 800331a:	d42b      	bmi.n	8003374 <_printf_common+0xb0>
 800331c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003320:	4649      	mov	r1, r9
 8003322:	4638      	mov	r0, r7
 8003324:	47c0      	blx	r8
 8003326:	3001      	adds	r0, #1
 8003328:	d01e      	beq.n	8003368 <_printf_common+0xa4>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	68e5      	ldr	r5, [r4, #12]
 800332e:	6832      	ldr	r2, [r6, #0]
 8003330:	f003 0306 	and.w	r3, r3, #6
 8003334:	2b04      	cmp	r3, #4
 8003336:	bf08      	it	eq
 8003338:	1aad      	subeq	r5, r5, r2
 800333a:	68a3      	ldr	r3, [r4, #8]
 800333c:	6922      	ldr	r2, [r4, #16]
 800333e:	bf0c      	ite	eq
 8003340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003344:	2500      	movne	r5, #0
 8003346:	4293      	cmp	r3, r2
 8003348:	bfc4      	itt	gt
 800334a:	1a9b      	subgt	r3, r3, r2
 800334c:	18ed      	addgt	r5, r5, r3
 800334e:	2600      	movs	r6, #0
 8003350:	341a      	adds	r4, #26
 8003352:	42b5      	cmp	r5, r6
 8003354:	d11a      	bne.n	800338c <_printf_common+0xc8>
 8003356:	2000      	movs	r0, #0
 8003358:	e008      	b.n	800336c <_printf_common+0xa8>
 800335a:	2301      	movs	r3, #1
 800335c:	4652      	mov	r2, sl
 800335e:	4649      	mov	r1, r9
 8003360:	4638      	mov	r0, r7
 8003362:	47c0      	blx	r8
 8003364:	3001      	adds	r0, #1
 8003366:	d103      	bne.n	8003370 <_printf_common+0xac>
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003370:	3501      	adds	r5, #1
 8003372:	e7c6      	b.n	8003302 <_printf_common+0x3e>
 8003374:	18e1      	adds	r1, r4, r3
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	2030      	movs	r0, #48	; 0x30
 800337a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800337e:	4422      	add	r2, r4
 8003380:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003384:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003388:	3302      	adds	r3, #2
 800338a:	e7c7      	b.n	800331c <_printf_common+0x58>
 800338c:	2301      	movs	r3, #1
 800338e:	4622      	mov	r2, r4
 8003390:	4649      	mov	r1, r9
 8003392:	4638      	mov	r0, r7
 8003394:	47c0      	blx	r8
 8003396:	3001      	adds	r0, #1
 8003398:	d0e6      	beq.n	8003368 <_printf_common+0xa4>
 800339a:	3601      	adds	r6, #1
 800339c:	e7d9      	b.n	8003352 <_printf_common+0x8e>
	...

080033a0 <_printf_i>:
 80033a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a4:	7e0f      	ldrb	r7, [r1, #24]
 80033a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033a8:	2f78      	cmp	r7, #120	; 0x78
 80033aa:	4691      	mov	r9, r2
 80033ac:	4680      	mov	r8, r0
 80033ae:	460c      	mov	r4, r1
 80033b0:	469a      	mov	sl, r3
 80033b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033b6:	d807      	bhi.n	80033c8 <_printf_i+0x28>
 80033b8:	2f62      	cmp	r7, #98	; 0x62
 80033ba:	d80a      	bhi.n	80033d2 <_printf_i+0x32>
 80033bc:	2f00      	cmp	r7, #0
 80033be:	f000 80d8 	beq.w	8003572 <_printf_i+0x1d2>
 80033c2:	2f58      	cmp	r7, #88	; 0x58
 80033c4:	f000 80a3 	beq.w	800350e <_printf_i+0x16e>
 80033c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033d0:	e03a      	b.n	8003448 <_printf_i+0xa8>
 80033d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033d6:	2b15      	cmp	r3, #21
 80033d8:	d8f6      	bhi.n	80033c8 <_printf_i+0x28>
 80033da:	a101      	add	r1, pc, #4	; (adr r1, 80033e0 <_printf_i+0x40>)
 80033dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033e0:	08003439 	.word	0x08003439
 80033e4:	0800344d 	.word	0x0800344d
 80033e8:	080033c9 	.word	0x080033c9
 80033ec:	080033c9 	.word	0x080033c9
 80033f0:	080033c9 	.word	0x080033c9
 80033f4:	080033c9 	.word	0x080033c9
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	080033c9 	.word	0x080033c9
 8003400:	080033c9 	.word	0x080033c9
 8003404:	080033c9 	.word	0x080033c9
 8003408:	080033c9 	.word	0x080033c9
 800340c:	08003559 	.word	0x08003559
 8003410:	0800347d 	.word	0x0800347d
 8003414:	0800353b 	.word	0x0800353b
 8003418:	080033c9 	.word	0x080033c9
 800341c:	080033c9 	.word	0x080033c9
 8003420:	0800357b 	.word	0x0800357b
 8003424:	080033c9 	.word	0x080033c9
 8003428:	0800347d 	.word	0x0800347d
 800342c:	080033c9 	.word	0x080033c9
 8003430:	080033c9 	.word	0x080033c9
 8003434:	08003543 	.word	0x08003543
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	1d1a      	adds	r2, r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	602a      	str	r2, [r5, #0]
 8003440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003448:	2301      	movs	r3, #1
 800344a:	e0a3      	b.n	8003594 <_printf_i+0x1f4>
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	6829      	ldr	r1, [r5, #0]
 8003450:	0606      	lsls	r6, r0, #24
 8003452:	f101 0304 	add.w	r3, r1, #4
 8003456:	d50a      	bpl.n	800346e <_printf_i+0xce>
 8003458:	680e      	ldr	r6, [r1, #0]
 800345a:	602b      	str	r3, [r5, #0]
 800345c:	2e00      	cmp	r6, #0
 800345e:	da03      	bge.n	8003468 <_printf_i+0xc8>
 8003460:	232d      	movs	r3, #45	; 0x2d
 8003462:	4276      	negs	r6, r6
 8003464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003468:	485e      	ldr	r0, [pc, #376]	; (80035e4 <_printf_i+0x244>)
 800346a:	230a      	movs	r3, #10
 800346c:	e019      	b.n	80034a2 <_printf_i+0x102>
 800346e:	680e      	ldr	r6, [r1, #0]
 8003470:	602b      	str	r3, [r5, #0]
 8003472:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003476:	bf18      	it	ne
 8003478:	b236      	sxthne	r6, r6
 800347a:	e7ef      	b.n	800345c <_printf_i+0xbc>
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	6820      	ldr	r0, [r4, #0]
 8003480:	1d19      	adds	r1, r3, #4
 8003482:	6029      	str	r1, [r5, #0]
 8003484:	0601      	lsls	r1, r0, #24
 8003486:	d501      	bpl.n	800348c <_printf_i+0xec>
 8003488:	681e      	ldr	r6, [r3, #0]
 800348a:	e002      	b.n	8003492 <_printf_i+0xf2>
 800348c:	0646      	lsls	r6, r0, #25
 800348e:	d5fb      	bpl.n	8003488 <_printf_i+0xe8>
 8003490:	881e      	ldrh	r6, [r3, #0]
 8003492:	4854      	ldr	r0, [pc, #336]	; (80035e4 <_printf_i+0x244>)
 8003494:	2f6f      	cmp	r7, #111	; 0x6f
 8003496:	bf0c      	ite	eq
 8003498:	2308      	moveq	r3, #8
 800349a:	230a      	movne	r3, #10
 800349c:	2100      	movs	r1, #0
 800349e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034a2:	6865      	ldr	r5, [r4, #4]
 80034a4:	60a5      	str	r5, [r4, #8]
 80034a6:	2d00      	cmp	r5, #0
 80034a8:	bfa2      	ittt	ge
 80034aa:	6821      	ldrge	r1, [r4, #0]
 80034ac:	f021 0104 	bicge.w	r1, r1, #4
 80034b0:	6021      	strge	r1, [r4, #0]
 80034b2:	b90e      	cbnz	r6, 80034b8 <_printf_i+0x118>
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	d04d      	beq.n	8003554 <_printf_i+0x1b4>
 80034b8:	4615      	mov	r5, r2
 80034ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80034be:	fb03 6711 	mls	r7, r3, r1, r6
 80034c2:	5dc7      	ldrb	r7, [r0, r7]
 80034c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034c8:	4637      	mov	r7, r6
 80034ca:	42bb      	cmp	r3, r7
 80034cc:	460e      	mov	r6, r1
 80034ce:	d9f4      	bls.n	80034ba <_printf_i+0x11a>
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d10b      	bne.n	80034ec <_printf_i+0x14c>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	07de      	lsls	r6, r3, #31
 80034d8:	d508      	bpl.n	80034ec <_printf_i+0x14c>
 80034da:	6923      	ldr	r3, [r4, #16]
 80034dc:	6861      	ldr	r1, [r4, #4]
 80034de:	4299      	cmp	r1, r3
 80034e0:	bfde      	ittt	le
 80034e2:	2330      	movle	r3, #48	; 0x30
 80034e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034ec:	1b52      	subs	r2, r2, r5
 80034ee:	6122      	str	r2, [r4, #16]
 80034f0:	f8cd a000 	str.w	sl, [sp]
 80034f4:	464b      	mov	r3, r9
 80034f6:	aa03      	add	r2, sp, #12
 80034f8:	4621      	mov	r1, r4
 80034fa:	4640      	mov	r0, r8
 80034fc:	f7ff fee2 	bl	80032c4 <_printf_common>
 8003500:	3001      	adds	r0, #1
 8003502:	d14c      	bne.n	800359e <_printf_i+0x1fe>
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	b004      	add	sp, #16
 800350a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800350e:	4835      	ldr	r0, [pc, #212]	; (80035e4 <_printf_i+0x244>)
 8003510:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003514:	6829      	ldr	r1, [r5, #0]
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	f851 6b04 	ldr.w	r6, [r1], #4
 800351c:	6029      	str	r1, [r5, #0]
 800351e:	061d      	lsls	r5, r3, #24
 8003520:	d514      	bpl.n	800354c <_printf_i+0x1ac>
 8003522:	07df      	lsls	r7, r3, #31
 8003524:	bf44      	itt	mi
 8003526:	f043 0320 	orrmi.w	r3, r3, #32
 800352a:	6023      	strmi	r3, [r4, #0]
 800352c:	b91e      	cbnz	r6, 8003536 <_printf_i+0x196>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	f023 0320 	bic.w	r3, r3, #32
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	2310      	movs	r3, #16
 8003538:	e7b0      	b.n	800349c <_printf_i+0xfc>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	2378      	movs	r3, #120	; 0x78
 8003544:	4828      	ldr	r0, [pc, #160]	; (80035e8 <_printf_i+0x248>)
 8003546:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800354a:	e7e3      	b.n	8003514 <_printf_i+0x174>
 800354c:	0659      	lsls	r1, r3, #25
 800354e:	bf48      	it	mi
 8003550:	b2b6      	uxthmi	r6, r6
 8003552:	e7e6      	b.n	8003522 <_printf_i+0x182>
 8003554:	4615      	mov	r5, r2
 8003556:	e7bb      	b.n	80034d0 <_printf_i+0x130>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	6826      	ldr	r6, [r4, #0]
 800355c:	6961      	ldr	r1, [r4, #20]
 800355e:	1d18      	adds	r0, r3, #4
 8003560:	6028      	str	r0, [r5, #0]
 8003562:	0635      	lsls	r5, r6, #24
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	d501      	bpl.n	800356c <_printf_i+0x1cc>
 8003568:	6019      	str	r1, [r3, #0]
 800356a:	e002      	b.n	8003572 <_printf_i+0x1d2>
 800356c:	0670      	lsls	r0, r6, #25
 800356e:	d5fb      	bpl.n	8003568 <_printf_i+0x1c8>
 8003570:	8019      	strh	r1, [r3, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	6123      	str	r3, [r4, #16]
 8003576:	4615      	mov	r5, r2
 8003578:	e7ba      	b.n	80034f0 <_printf_i+0x150>
 800357a:	682b      	ldr	r3, [r5, #0]
 800357c:	1d1a      	adds	r2, r3, #4
 800357e:	602a      	str	r2, [r5, #0]
 8003580:	681d      	ldr	r5, [r3, #0]
 8003582:	6862      	ldr	r2, [r4, #4]
 8003584:	2100      	movs	r1, #0
 8003586:	4628      	mov	r0, r5
 8003588:	f7fc fe32 	bl	80001f0 <memchr>
 800358c:	b108      	cbz	r0, 8003592 <_printf_i+0x1f2>
 800358e:	1b40      	subs	r0, r0, r5
 8003590:	6060      	str	r0, [r4, #4]
 8003592:	6863      	ldr	r3, [r4, #4]
 8003594:	6123      	str	r3, [r4, #16]
 8003596:	2300      	movs	r3, #0
 8003598:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800359c:	e7a8      	b.n	80034f0 <_printf_i+0x150>
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	462a      	mov	r2, r5
 80035a2:	4649      	mov	r1, r9
 80035a4:	4640      	mov	r0, r8
 80035a6:	47d0      	blx	sl
 80035a8:	3001      	adds	r0, #1
 80035aa:	d0ab      	beq.n	8003504 <_printf_i+0x164>
 80035ac:	6823      	ldr	r3, [r4, #0]
 80035ae:	079b      	lsls	r3, r3, #30
 80035b0:	d413      	bmi.n	80035da <_printf_i+0x23a>
 80035b2:	68e0      	ldr	r0, [r4, #12]
 80035b4:	9b03      	ldr	r3, [sp, #12]
 80035b6:	4298      	cmp	r0, r3
 80035b8:	bfb8      	it	lt
 80035ba:	4618      	movlt	r0, r3
 80035bc:	e7a4      	b.n	8003508 <_printf_i+0x168>
 80035be:	2301      	movs	r3, #1
 80035c0:	4632      	mov	r2, r6
 80035c2:	4649      	mov	r1, r9
 80035c4:	4640      	mov	r0, r8
 80035c6:	47d0      	blx	sl
 80035c8:	3001      	adds	r0, #1
 80035ca:	d09b      	beq.n	8003504 <_printf_i+0x164>
 80035cc:	3501      	adds	r5, #1
 80035ce:	68e3      	ldr	r3, [r4, #12]
 80035d0:	9903      	ldr	r1, [sp, #12]
 80035d2:	1a5b      	subs	r3, r3, r1
 80035d4:	42ab      	cmp	r3, r5
 80035d6:	dcf2      	bgt.n	80035be <_printf_i+0x21e>
 80035d8:	e7eb      	b.n	80035b2 <_printf_i+0x212>
 80035da:	2500      	movs	r5, #0
 80035dc:	f104 0619 	add.w	r6, r4, #25
 80035e0:	e7f5      	b.n	80035ce <_printf_i+0x22e>
 80035e2:	bf00      	nop
 80035e4:	08007642 	.word	0x08007642
 80035e8:	08007653 	.word	0x08007653

080035ec <_scanf_float>:
 80035ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f0:	b087      	sub	sp, #28
 80035f2:	4617      	mov	r7, r2
 80035f4:	9303      	str	r3, [sp, #12]
 80035f6:	688b      	ldr	r3, [r1, #8]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80035fe:	bf83      	ittte	hi
 8003600:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003604:	195b      	addhi	r3, r3, r5
 8003606:	9302      	strhi	r3, [sp, #8]
 8003608:	2300      	movls	r3, #0
 800360a:	bf86      	itte	hi
 800360c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003610:	608b      	strhi	r3, [r1, #8]
 8003612:	9302      	strls	r3, [sp, #8]
 8003614:	680b      	ldr	r3, [r1, #0]
 8003616:	468b      	mov	fp, r1
 8003618:	2500      	movs	r5, #0
 800361a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800361e:	f84b 3b1c 	str.w	r3, [fp], #28
 8003622:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003626:	4680      	mov	r8, r0
 8003628:	460c      	mov	r4, r1
 800362a:	465e      	mov	r6, fp
 800362c:	46aa      	mov	sl, r5
 800362e:	46a9      	mov	r9, r5
 8003630:	9501      	str	r5, [sp, #4]
 8003632:	68a2      	ldr	r2, [r4, #8]
 8003634:	b152      	cbz	r2, 800364c <_scanf_float+0x60>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b4e      	cmp	r3, #78	; 0x4e
 800363c:	d864      	bhi.n	8003708 <_scanf_float+0x11c>
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d83c      	bhi.n	80036bc <_scanf_float+0xd0>
 8003642:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003646:	b2c8      	uxtb	r0, r1
 8003648:	280e      	cmp	r0, #14
 800364a:	d93a      	bls.n	80036c2 <_scanf_float+0xd6>
 800364c:	f1b9 0f00 	cmp.w	r9, #0
 8003650:	d003      	beq.n	800365a <_scanf_float+0x6e>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800365e:	f1ba 0f01 	cmp.w	sl, #1
 8003662:	f200 8113 	bhi.w	800388c <_scanf_float+0x2a0>
 8003666:	455e      	cmp	r6, fp
 8003668:	f200 8105 	bhi.w	8003876 <_scanf_float+0x28a>
 800366c:	2501      	movs	r5, #1
 800366e:	4628      	mov	r0, r5
 8003670:	b007      	add	sp, #28
 8003672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003676:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800367a:	2a0d      	cmp	r2, #13
 800367c:	d8e6      	bhi.n	800364c <_scanf_float+0x60>
 800367e:	a101      	add	r1, pc, #4	; (adr r1, 8003684 <_scanf_float+0x98>)
 8003680:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003684:	080037c3 	.word	0x080037c3
 8003688:	0800364d 	.word	0x0800364d
 800368c:	0800364d 	.word	0x0800364d
 8003690:	0800364d 	.word	0x0800364d
 8003694:	08003823 	.word	0x08003823
 8003698:	080037fb 	.word	0x080037fb
 800369c:	0800364d 	.word	0x0800364d
 80036a0:	0800364d 	.word	0x0800364d
 80036a4:	080037d1 	.word	0x080037d1
 80036a8:	0800364d 	.word	0x0800364d
 80036ac:	0800364d 	.word	0x0800364d
 80036b0:	0800364d 	.word	0x0800364d
 80036b4:	0800364d 	.word	0x0800364d
 80036b8:	08003789 	.word	0x08003789
 80036bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80036c0:	e7db      	b.n	800367a <_scanf_float+0x8e>
 80036c2:	290e      	cmp	r1, #14
 80036c4:	d8c2      	bhi.n	800364c <_scanf_float+0x60>
 80036c6:	a001      	add	r0, pc, #4	; (adr r0, 80036cc <_scanf_float+0xe0>)
 80036c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80036cc:	0800377b 	.word	0x0800377b
 80036d0:	0800364d 	.word	0x0800364d
 80036d4:	0800377b 	.word	0x0800377b
 80036d8:	0800380f 	.word	0x0800380f
 80036dc:	0800364d 	.word	0x0800364d
 80036e0:	08003729 	.word	0x08003729
 80036e4:	08003765 	.word	0x08003765
 80036e8:	08003765 	.word	0x08003765
 80036ec:	08003765 	.word	0x08003765
 80036f0:	08003765 	.word	0x08003765
 80036f4:	08003765 	.word	0x08003765
 80036f8:	08003765 	.word	0x08003765
 80036fc:	08003765 	.word	0x08003765
 8003700:	08003765 	.word	0x08003765
 8003704:	08003765 	.word	0x08003765
 8003708:	2b6e      	cmp	r3, #110	; 0x6e
 800370a:	d809      	bhi.n	8003720 <_scanf_float+0x134>
 800370c:	2b60      	cmp	r3, #96	; 0x60
 800370e:	d8b2      	bhi.n	8003676 <_scanf_float+0x8a>
 8003710:	2b54      	cmp	r3, #84	; 0x54
 8003712:	d077      	beq.n	8003804 <_scanf_float+0x218>
 8003714:	2b59      	cmp	r3, #89	; 0x59
 8003716:	d199      	bne.n	800364c <_scanf_float+0x60>
 8003718:	2d07      	cmp	r5, #7
 800371a:	d197      	bne.n	800364c <_scanf_float+0x60>
 800371c:	2508      	movs	r5, #8
 800371e:	e029      	b.n	8003774 <_scanf_float+0x188>
 8003720:	2b74      	cmp	r3, #116	; 0x74
 8003722:	d06f      	beq.n	8003804 <_scanf_float+0x218>
 8003724:	2b79      	cmp	r3, #121	; 0x79
 8003726:	e7f6      	b.n	8003716 <_scanf_float+0x12a>
 8003728:	6821      	ldr	r1, [r4, #0]
 800372a:	05c8      	lsls	r0, r1, #23
 800372c:	d51a      	bpl.n	8003764 <_scanf_float+0x178>
 800372e:	9b02      	ldr	r3, [sp, #8]
 8003730:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003734:	6021      	str	r1, [r4, #0]
 8003736:	f109 0901 	add.w	r9, r9, #1
 800373a:	b11b      	cbz	r3, 8003744 <_scanf_float+0x158>
 800373c:	3b01      	subs	r3, #1
 800373e:	3201      	adds	r2, #1
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	60a2      	str	r2, [r4, #8]
 8003744:	68a3      	ldr	r3, [r4, #8]
 8003746:	3b01      	subs	r3, #1
 8003748:	60a3      	str	r3, [r4, #8]
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	3301      	adds	r3, #1
 800374e:	6123      	str	r3, [r4, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	f340 8084 	ble.w	8003864 <_scanf_float+0x278>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	3301      	adds	r3, #1
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	e766      	b.n	8003632 <_scanf_float+0x46>
 8003764:	eb1a 0f05 	cmn.w	sl, r5
 8003768:	f47f af70 	bne.w	800364c <_scanf_float+0x60>
 800376c:	6822      	ldr	r2, [r4, #0]
 800376e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003772:	6022      	str	r2, [r4, #0]
 8003774:	f806 3b01 	strb.w	r3, [r6], #1
 8003778:	e7e4      	b.n	8003744 <_scanf_float+0x158>
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	0610      	lsls	r0, r2, #24
 800377e:	f57f af65 	bpl.w	800364c <_scanf_float+0x60>
 8003782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003786:	e7f4      	b.n	8003772 <_scanf_float+0x186>
 8003788:	f1ba 0f00 	cmp.w	sl, #0
 800378c:	d10e      	bne.n	80037ac <_scanf_float+0x1c0>
 800378e:	f1b9 0f00 	cmp.w	r9, #0
 8003792:	d10e      	bne.n	80037b2 <_scanf_float+0x1c6>
 8003794:	6822      	ldr	r2, [r4, #0]
 8003796:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800379a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800379e:	d108      	bne.n	80037b2 <_scanf_float+0x1c6>
 80037a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80037a4:	6022      	str	r2, [r4, #0]
 80037a6:	f04f 0a01 	mov.w	sl, #1
 80037aa:	e7e3      	b.n	8003774 <_scanf_float+0x188>
 80037ac:	f1ba 0f02 	cmp.w	sl, #2
 80037b0:	d055      	beq.n	800385e <_scanf_float+0x272>
 80037b2:	2d01      	cmp	r5, #1
 80037b4:	d002      	beq.n	80037bc <_scanf_float+0x1d0>
 80037b6:	2d04      	cmp	r5, #4
 80037b8:	f47f af48 	bne.w	800364c <_scanf_float+0x60>
 80037bc:	3501      	adds	r5, #1
 80037be:	b2ed      	uxtb	r5, r5
 80037c0:	e7d8      	b.n	8003774 <_scanf_float+0x188>
 80037c2:	f1ba 0f01 	cmp.w	sl, #1
 80037c6:	f47f af41 	bne.w	800364c <_scanf_float+0x60>
 80037ca:	f04f 0a02 	mov.w	sl, #2
 80037ce:	e7d1      	b.n	8003774 <_scanf_float+0x188>
 80037d0:	b97d      	cbnz	r5, 80037f2 <_scanf_float+0x206>
 80037d2:	f1b9 0f00 	cmp.w	r9, #0
 80037d6:	f47f af3c 	bne.w	8003652 <_scanf_float+0x66>
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80037e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80037e4:	f47f af39 	bne.w	800365a <_scanf_float+0x6e>
 80037e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80037ec:	6022      	str	r2, [r4, #0]
 80037ee:	2501      	movs	r5, #1
 80037f0:	e7c0      	b.n	8003774 <_scanf_float+0x188>
 80037f2:	2d03      	cmp	r5, #3
 80037f4:	d0e2      	beq.n	80037bc <_scanf_float+0x1d0>
 80037f6:	2d05      	cmp	r5, #5
 80037f8:	e7de      	b.n	80037b8 <_scanf_float+0x1cc>
 80037fa:	2d02      	cmp	r5, #2
 80037fc:	f47f af26 	bne.w	800364c <_scanf_float+0x60>
 8003800:	2503      	movs	r5, #3
 8003802:	e7b7      	b.n	8003774 <_scanf_float+0x188>
 8003804:	2d06      	cmp	r5, #6
 8003806:	f47f af21 	bne.w	800364c <_scanf_float+0x60>
 800380a:	2507      	movs	r5, #7
 800380c:	e7b2      	b.n	8003774 <_scanf_float+0x188>
 800380e:	6822      	ldr	r2, [r4, #0]
 8003810:	0591      	lsls	r1, r2, #22
 8003812:	f57f af1b 	bpl.w	800364c <_scanf_float+0x60>
 8003816:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800381a:	6022      	str	r2, [r4, #0]
 800381c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003820:	e7a8      	b.n	8003774 <_scanf_float+0x188>
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003828:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800382c:	d006      	beq.n	800383c <_scanf_float+0x250>
 800382e:	0550      	lsls	r0, r2, #21
 8003830:	f57f af0c 	bpl.w	800364c <_scanf_float+0x60>
 8003834:	f1b9 0f00 	cmp.w	r9, #0
 8003838:	f43f af0f 	beq.w	800365a <_scanf_float+0x6e>
 800383c:	0591      	lsls	r1, r2, #22
 800383e:	bf58      	it	pl
 8003840:	9901      	ldrpl	r1, [sp, #4]
 8003842:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003846:	bf58      	it	pl
 8003848:	eba9 0101 	subpl.w	r1, r9, r1
 800384c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003850:	bf58      	it	pl
 8003852:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003856:	6022      	str	r2, [r4, #0]
 8003858:	f04f 0900 	mov.w	r9, #0
 800385c:	e78a      	b.n	8003774 <_scanf_float+0x188>
 800385e:	f04f 0a03 	mov.w	sl, #3
 8003862:	e787      	b.n	8003774 <_scanf_float+0x188>
 8003864:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003868:	4639      	mov	r1, r7
 800386a:	4640      	mov	r0, r8
 800386c:	4798      	blx	r3
 800386e:	2800      	cmp	r0, #0
 8003870:	f43f aedf 	beq.w	8003632 <_scanf_float+0x46>
 8003874:	e6ea      	b.n	800364c <_scanf_float+0x60>
 8003876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800387a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800387e:	463a      	mov	r2, r7
 8003880:	4640      	mov	r0, r8
 8003882:	4798      	blx	r3
 8003884:	6923      	ldr	r3, [r4, #16]
 8003886:	3b01      	subs	r3, #1
 8003888:	6123      	str	r3, [r4, #16]
 800388a:	e6ec      	b.n	8003666 <_scanf_float+0x7a>
 800388c:	1e6b      	subs	r3, r5, #1
 800388e:	2b06      	cmp	r3, #6
 8003890:	d825      	bhi.n	80038de <_scanf_float+0x2f2>
 8003892:	2d02      	cmp	r5, #2
 8003894:	d836      	bhi.n	8003904 <_scanf_float+0x318>
 8003896:	455e      	cmp	r6, fp
 8003898:	f67f aee8 	bls.w	800366c <_scanf_float+0x80>
 800389c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80038a4:	463a      	mov	r2, r7
 80038a6:	4640      	mov	r0, r8
 80038a8:	4798      	blx	r3
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	6123      	str	r3, [r4, #16]
 80038b0:	e7f1      	b.n	8003896 <_scanf_float+0x2aa>
 80038b2:	9802      	ldr	r0, [sp, #8]
 80038b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80038bc:	9002      	str	r0, [sp, #8]
 80038be:	463a      	mov	r2, r7
 80038c0:	4640      	mov	r0, r8
 80038c2:	4798      	blx	r3
 80038c4:	6923      	ldr	r3, [r4, #16]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6123      	str	r3, [r4, #16]
 80038ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80038ce:	fa5f fa8a 	uxtb.w	sl, sl
 80038d2:	f1ba 0f02 	cmp.w	sl, #2
 80038d6:	d1ec      	bne.n	80038b2 <_scanf_float+0x2c6>
 80038d8:	3d03      	subs	r5, #3
 80038da:	b2ed      	uxtb	r5, r5
 80038dc:	1b76      	subs	r6, r6, r5
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	05da      	lsls	r2, r3, #23
 80038e2:	d52f      	bpl.n	8003944 <_scanf_float+0x358>
 80038e4:	055b      	lsls	r3, r3, #21
 80038e6:	d510      	bpl.n	800390a <_scanf_float+0x31e>
 80038e8:	455e      	cmp	r6, fp
 80038ea:	f67f aebf 	bls.w	800366c <_scanf_float+0x80>
 80038ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80038f6:	463a      	mov	r2, r7
 80038f8:	4640      	mov	r0, r8
 80038fa:	4798      	blx	r3
 80038fc:	6923      	ldr	r3, [r4, #16]
 80038fe:	3b01      	subs	r3, #1
 8003900:	6123      	str	r3, [r4, #16]
 8003902:	e7f1      	b.n	80038e8 <_scanf_float+0x2fc>
 8003904:	46aa      	mov	sl, r5
 8003906:	9602      	str	r6, [sp, #8]
 8003908:	e7df      	b.n	80038ca <_scanf_float+0x2de>
 800390a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800390e:	6923      	ldr	r3, [r4, #16]
 8003910:	2965      	cmp	r1, #101	; 0x65
 8003912:	f103 33ff 	add.w	r3, r3, #4294967295
 8003916:	f106 35ff 	add.w	r5, r6, #4294967295
 800391a:	6123      	str	r3, [r4, #16]
 800391c:	d00c      	beq.n	8003938 <_scanf_float+0x34c>
 800391e:	2945      	cmp	r1, #69	; 0x45
 8003920:	d00a      	beq.n	8003938 <_scanf_float+0x34c>
 8003922:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003926:	463a      	mov	r2, r7
 8003928:	4640      	mov	r0, r8
 800392a:	4798      	blx	r3
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003932:	3b01      	subs	r3, #1
 8003934:	1eb5      	subs	r5, r6, #2
 8003936:	6123      	str	r3, [r4, #16]
 8003938:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800393c:	463a      	mov	r2, r7
 800393e:	4640      	mov	r0, r8
 8003940:	4798      	blx	r3
 8003942:	462e      	mov	r6, r5
 8003944:	6825      	ldr	r5, [r4, #0]
 8003946:	f015 0510 	ands.w	r5, r5, #16
 800394a:	d159      	bne.n	8003a00 <_scanf_float+0x414>
 800394c:	7035      	strb	r5, [r6, #0]
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003958:	d11b      	bne.n	8003992 <_scanf_float+0x3a6>
 800395a:	9b01      	ldr	r3, [sp, #4]
 800395c:	454b      	cmp	r3, r9
 800395e:	eba3 0209 	sub.w	r2, r3, r9
 8003962:	d123      	bne.n	80039ac <_scanf_float+0x3c0>
 8003964:	2200      	movs	r2, #0
 8003966:	4659      	mov	r1, fp
 8003968:	4640      	mov	r0, r8
 800396a:	f000 fe97 	bl	800469c <_strtod_r>
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	9b03      	ldr	r3, [sp, #12]
 8003972:	f012 0f02 	tst.w	r2, #2
 8003976:	ec57 6b10 	vmov	r6, r7, d0
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	d021      	beq.n	80039c2 <_scanf_float+0x3d6>
 800397e:	9903      	ldr	r1, [sp, #12]
 8003980:	1d1a      	adds	r2, r3, #4
 8003982:	600a      	str	r2, [r1, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	e9c3 6700 	strd	r6, r7, [r3]
 800398a:	68e3      	ldr	r3, [r4, #12]
 800398c:	3301      	adds	r3, #1
 800398e:	60e3      	str	r3, [r4, #12]
 8003990:	e66d      	b.n	800366e <_scanf_float+0x82>
 8003992:	9b04      	ldr	r3, [sp, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0e5      	beq.n	8003964 <_scanf_float+0x378>
 8003998:	9905      	ldr	r1, [sp, #20]
 800399a:	230a      	movs	r3, #10
 800399c:	462a      	mov	r2, r5
 800399e:	3101      	adds	r1, #1
 80039a0:	4640      	mov	r0, r8
 80039a2:	f000 ff03 	bl	80047ac <_strtol_r>
 80039a6:	9b04      	ldr	r3, [sp, #16]
 80039a8:	9e05      	ldr	r6, [sp, #20]
 80039aa:	1ac2      	subs	r2, r0, r3
 80039ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80039b0:	429e      	cmp	r6, r3
 80039b2:	bf28      	it	cs
 80039b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80039b8:	4912      	ldr	r1, [pc, #72]	; (8003a04 <_scanf_float+0x418>)
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 f82c 	bl	8003a18 <siprintf>
 80039c0:	e7d0      	b.n	8003964 <_scanf_float+0x378>
 80039c2:	9903      	ldr	r1, [sp, #12]
 80039c4:	f012 0f04 	tst.w	r2, #4
 80039c8:	f103 0204 	add.w	r2, r3, #4
 80039cc:	600a      	str	r2, [r1, #0]
 80039ce:	d1d9      	bne.n	8003984 <_scanf_float+0x398>
 80039d0:	f8d3 8000 	ldr.w	r8, [r3]
 80039d4:	ee10 2a10 	vmov	r2, s0
 80039d8:	ee10 0a10 	vmov	r0, s0
 80039dc:	463b      	mov	r3, r7
 80039de:	4639      	mov	r1, r7
 80039e0:	f7fd f8ac 	bl	8000b3c <__aeabi_dcmpun>
 80039e4:	b128      	cbz	r0, 80039f2 <_scanf_float+0x406>
 80039e6:	4808      	ldr	r0, [pc, #32]	; (8003a08 <_scanf_float+0x41c>)
 80039e8:	f000 f810 	bl	8003a0c <nanf>
 80039ec:	ed88 0a00 	vstr	s0, [r8]
 80039f0:	e7cb      	b.n	800398a <_scanf_float+0x39e>
 80039f2:	4630      	mov	r0, r6
 80039f4:	4639      	mov	r1, r7
 80039f6:	f7fd f8ff 	bl	8000bf8 <__aeabi_d2f>
 80039fa:	f8c8 0000 	str.w	r0, [r8]
 80039fe:	e7c4      	b.n	800398a <_scanf_float+0x39e>
 8003a00:	2500      	movs	r5, #0
 8003a02:	e634      	b.n	800366e <_scanf_float+0x82>
 8003a04:	08007664 	.word	0x08007664
 8003a08:	08007a70 	.word	0x08007a70

08003a0c <nanf>:
 8003a0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003a14 <nanf+0x8>
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	7fc00000 	.word	0x7fc00000

08003a18 <siprintf>:
 8003a18:	b40e      	push	{r1, r2, r3}
 8003a1a:	b500      	push	{lr}
 8003a1c:	b09c      	sub	sp, #112	; 0x70
 8003a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8003a20:	9002      	str	r0, [sp, #8]
 8003a22:	9006      	str	r0, [sp, #24]
 8003a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a28:	4809      	ldr	r0, [pc, #36]	; (8003a50 <siprintf+0x38>)
 8003a2a:	9107      	str	r1, [sp, #28]
 8003a2c:	9104      	str	r1, [sp, #16]
 8003a2e:	4909      	ldr	r1, [pc, #36]	; (8003a54 <siprintf+0x3c>)
 8003a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a34:	9105      	str	r1, [sp, #20]
 8003a36:	6800      	ldr	r0, [r0, #0]
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	a902      	add	r1, sp, #8
 8003a3c:	f002 fee2 	bl	8006804 <_svfiprintf_r>
 8003a40:	9b02      	ldr	r3, [sp, #8]
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	b01c      	add	sp, #112	; 0x70
 8003a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a4c:	b003      	add	sp, #12
 8003a4e:	4770      	bx	lr
 8003a50:	20000000 	.word	0x20000000
 8003a54:	ffff0208 	.word	0xffff0208

08003a58 <sulp>:
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	460d      	mov	r5, r1
 8003a5e:	ec45 4b10 	vmov	d0, r4, r5
 8003a62:	4616      	mov	r6, r2
 8003a64:	f002 fc2c 	bl	80062c0 <__ulp>
 8003a68:	ec51 0b10 	vmov	r0, r1, d0
 8003a6c:	b17e      	cbz	r6, 8003a8e <sulp+0x36>
 8003a6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003a72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	dd09      	ble.n	8003a8e <sulp+0x36>
 8003a7a:	051b      	lsls	r3, r3, #20
 8003a7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003a80:	2400      	movs	r4, #0
 8003a82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003a86:	4622      	mov	r2, r4
 8003a88:	462b      	mov	r3, r5
 8003a8a:	f7fc fdbd 	bl	8000608 <__aeabi_dmul>
 8003a8e:	bd70      	pop	{r4, r5, r6, pc}

08003a90 <_strtod_l>:
 8003a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a94:	ed2d 8b02 	vpush	{d8}
 8003a98:	b09d      	sub	sp, #116	; 0x74
 8003a9a:	461f      	mov	r7, r3
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	9318      	str	r3, [sp, #96]	; 0x60
 8003aa0:	4ba2      	ldr	r3, [pc, #648]	; (8003d2c <_strtod_l+0x29c>)
 8003aa2:	9213      	str	r2, [sp, #76]	; 0x4c
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	9305      	str	r3, [sp, #20]
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	4688      	mov	r8, r1
 8003aae:	f7fc fb97 	bl	80001e0 <strlen>
 8003ab2:	f04f 0a00 	mov.w	sl, #0
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	f04f 0b00 	mov.w	fp, #0
 8003abc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	2a2b      	cmp	r2, #43	; 0x2b
 8003ac6:	d04e      	beq.n	8003b66 <_strtod_l+0xd6>
 8003ac8:	d83b      	bhi.n	8003b42 <_strtod_l+0xb2>
 8003aca:	2a0d      	cmp	r2, #13
 8003acc:	d834      	bhi.n	8003b38 <_strtod_l+0xa8>
 8003ace:	2a08      	cmp	r2, #8
 8003ad0:	d834      	bhi.n	8003b3c <_strtod_l+0xac>
 8003ad2:	2a00      	cmp	r2, #0
 8003ad4:	d03e      	beq.n	8003b54 <_strtod_l+0xc4>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	930a      	str	r3, [sp, #40]	; 0x28
 8003ada:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8003adc:	7833      	ldrb	r3, [r6, #0]
 8003ade:	2b30      	cmp	r3, #48	; 0x30
 8003ae0:	f040 80b0 	bne.w	8003c44 <_strtod_l+0x1b4>
 8003ae4:	7873      	ldrb	r3, [r6, #1]
 8003ae6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003aea:	2b58      	cmp	r3, #88	; 0x58
 8003aec:	d168      	bne.n	8003bc0 <_strtod_l+0x130>
 8003aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	ab18      	add	r3, sp, #96	; 0x60
 8003af4:	9702      	str	r7, [sp, #8]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	4a8d      	ldr	r2, [pc, #564]	; (8003d30 <_strtod_l+0x2a0>)
 8003afa:	ab19      	add	r3, sp, #100	; 0x64
 8003afc:	a917      	add	r1, sp, #92	; 0x5c
 8003afe:	4620      	mov	r0, r4
 8003b00:	f001 fd38 	bl	8005574 <__gethex>
 8003b04:	f010 0707 	ands.w	r7, r0, #7
 8003b08:	4605      	mov	r5, r0
 8003b0a:	d005      	beq.n	8003b18 <_strtod_l+0x88>
 8003b0c:	2f06      	cmp	r7, #6
 8003b0e:	d12c      	bne.n	8003b6a <_strtod_l+0xda>
 8003b10:	3601      	adds	r6, #1
 8003b12:	2300      	movs	r3, #0
 8003b14:	9617      	str	r6, [sp, #92]	; 0x5c
 8003b16:	930a      	str	r3, [sp, #40]	; 0x28
 8003b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f040 8590 	bne.w	8004640 <_strtod_l+0xbb0>
 8003b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b22:	b1eb      	cbz	r3, 8003b60 <_strtod_l+0xd0>
 8003b24:	4652      	mov	r2, sl
 8003b26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003b2a:	ec43 2b10 	vmov	d0, r2, r3
 8003b2e:	b01d      	add	sp, #116	; 0x74
 8003b30:	ecbd 8b02 	vpop	{d8}
 8003b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b38:	2a20      	cmp	r2, #32
 8003b3a:	d1cc      	bne.n	8003ad6 <_strtod_l+0x46>
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8003b40:	e7be      	b.n	8003ac0 <_strtod_l+0x30>
 8003b42:	2a2d      	cmp	r2, #45	; 0x2d
 8003b44:	d1c7      	bne.n	8003ad6 <_strtod_l+0x46>
 8003b46:	2201      	movs	r2, #1
 8003b48:	920a      	str	r2, [sp, #40]	; 0x28
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8003b4e:	785b      	ldrb	r3, [r3, #1]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1c2      	bne.n	8003ada <_strtod_l+0x4a>
 8003b54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003b56:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 856e 	bne.w	800463c <_strtod_l+0xbac>
 8003b60:	4652      	mov	r2, sl
 8003b62:	465b      	mov	r3, fp
 8003b64:	e7e1      	b.n	8003b2a <_strtod_l+0x9a>
 8003b66:	2200      	movs	r2, #0
 8003b68:	e7ee      	b.n	8003b48 <_strtod_l+0xb8>
 8003b6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003b6c:	b13a      	cbz	r2, 8003b7e <_strtod_l+0xee>
 8003b6e:	2135      	movs	r1, #53	; 0x35
 8003b70:	a81a      	add	r0, sp, #104	; 0x68
 8003b72:	f002 fcb0 	bl	80064d6 <__copybits>
 8003b76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f002 f86f 	bl	8005c5c <_Bfree>
 8003b7e:	3f01      	subs	r7, #1
 8003b80:	2f04      	cmp	r7, #4
 8003b82:	d806      	bhi.n	8003b92 <_strtod_l+0x102>
 8003b84:	e8df f007 	tbb	[pc, r7]
 8003b88:	1714030a 	.word	0x1714030a
 8003b8c:	0a          	.byte	0x0a
 8003b8d:	00          	.byte	0x00
 8003b8e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8003b92:	0728      	lsls	r0, r5, #28
 8003b94:	d5c0      	bpl.n	8003b18 <_strtod_l+0x88>
 8003b96:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003b9a:	e7bd      	b.n	8003b18 <_strtod_l+0x88>
 8003b9c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8003ba0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003ba2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003ba6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003baa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003bae:	e7f0      	b.n	8003b92 <_strtod_l+0x102>
 8003bb0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8003d34 <_strtod_l+0x2a4>
 8003bb4:	e7ed      	b.n	8003b92 <_strtod_l+0x102>
 8003bb6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003bba:	f04f 3aff 	mov.w	sl, #4294967295
 8003bbe:	e7e8      	b.n	8003b92 <_strtod_l+0x102>
 8003bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b30      	cmp	r3, #48	; 0x30
 8003bca:	d0f9      	beq.n	8003bc0 <_strtod_l+0x130>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0a3      	beq.n	8003b18 <_strtod_l+0x88>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f04f 0900 	mov.w	r9, #0
 8003bd6:	9304      	str	r3, [sp, #16]
 8003bd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003bda:	9308      	str	r3, [sp, #32]
 8003bdc:	f8cd 901c 	str.w	r9, [sp, #28]
 8003be0:	464f      	mov	r7, r9
 8003be2:	220a      	movs	r2, #10
 8003be4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003be6:	7806      	ldrb	r6, [r0, #0]
 8003be8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003bec:	b2d9      	uxtb	r1, r3
 8003bee:	2909      	cmp	r1, #9
 8003bf0:	d92a      	bls.n	8003c48 <_strtod_l+0x1b8>
 8003bf2:	9905      	ldr	r1, [sp, #20]
 8003bf4:	462a      	mov	r2, r5
 8003bf6:	f002 ff1f 	bl	8006a38 <strncmp>
 8003bfa:	b398      	cbz	r0, 8003c64 <_strtod_l+0x1d4>
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	4632      	mov	r2, r6
 8003c00:	463d      	mov	r5, r7
 8003c02:	9005      	str	r0, [sp, #20]
 8003c04:	4603      	mov	r3, r0
 8003c06:	2a65      	cmp	r2, #101	; 0x65
 8003c08:	d001      	beq.n	8003c0e <_strtod_l+0x17e>
 8003c0a:	2a45      	cmp	r2, #69	; 0x45
 8003c0c:	d118      	bne.n	8003c40 <_strtod_l+0x1b0>
 8003c0e:	b91d      	cbnz	r5, 8003c18 <_strtod_l+0x188>
 8003c10:	9a04      	ldr	r2, [sp, #16]
 8003c12:	4302      	orrs	r2, r0
 8003c14:	d09e      	beq.n	8003b54 <_strtod_l+0xc4>
 8003c16:	2500      	movs	r5, #0
 8003c18:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8003c1c:	f108 0201 	add.w	r2, r8, #1
 8003c20:	9217      	str	r2, [sp, #92]	; 0x5c
 8003c22:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003c26:	2a2b      	cmp	r2, #43	; 0x2b
 8003c28:	d075      	beq.n	8003d16 <_strtod_l+0x286>
 8003c2a:	2a2d      	cmp	r2, #45	; 0x2d
 8003c2c:	d07b      	beq.n	8003d26 <_strtod_l+0x296>
 8003c2e:	f04f 0c00 	mov.w	ip, #0
 8003c32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003c36:	2909      	cmp	r1, #9
 8003c38:	f240 8082 	bls.w	8003d40 <_strtod_l+0x2b0>
 8003c3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003c40:	2600      	movs	r6, #0
 8003c42:	e09d      	b.n	8003d80 <_strtod_l+0x2f0>
 8003c44:	2300      	movs	r3, #0
 8003c46:	e7c4      	b.n	8003bd2 <_strtod_l+0x142>
 8003c48:	2f08      	cmp	r7, #8
 8003c4a:	bfd8      	it	le
 8003c4c:	9907      	ldrle	r1, [sp, #28]
 8003c4e:	f100 0001 	add.w	r0, r0, #1
 8003c52:	bfda      	itte	le
 8003c54:	fb02 3301 	mlale	r3, r2, r1, r3
 8003c58:	9307      	strle	r3, [sp, #28]
 8003c5a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003c5e:	3701      	adds	r7, #1
 8003c60:	9017      	str	r0, [sp, #92]	; 0x5c
 8003c62:	e7bf      	b.n	8003be4 <_strtod_l+0x154>
 8003c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c66:	195a      	adds	r2, r3, r5
 8003c68:	9217      	str	r2, [sp, #92]	; 0x5c
 8003c6a:	5d5a      	ldrb	r2, [r3, r5]
 8003c6c:	2f00      	cmp	r7, #0
 8003c6e:	d037      	beq.n	8003ce0 <_strtod_l+0x250>
 8003c70:	9005      	str	r0, [sp, #20]
 8003c72:	463d      	mov	r5, r7
 8003c74:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003c78:	2b09      	cmp	r3, #9
 8003c7a:	d912      	bls.n	8003ca2 <_strtod_l+0x212>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e7c2      	b.n	8003c06 <_strtod_l+0x176>
 8003c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	9217      	str	r2, [sp, #92]	; 0x5c
 8003c86:	785a      	ldrb	r2, [r3, #1]
 8003c88:	3001      	adds	r0, #1
 8003c8a:	2a30      	cmp	r2, #48	; 0x30
 8003c8c:	d0f8      	beq.n	8003c80 <_strtod_l+0x1f0>
 8003c8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	f200 84d9 	bhi.w	800464a <_strtod_l+0xbba>
 8003c98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003c9a:	9005      	str	r0, [sp, #20]
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	9308      	str	r3, [sp, #32]
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	3a30      	subs	r2, #48	; 0x30
 8003ca4:	f100 0301 	add.w	r3, r0, #1
 8003ca8:	d014      	beq.n	8003cd4 <_strtod_l+0x244>
 8003caa:	9905      	ldr	r1, [sp, #20]
 8003cac:	4419      	add	r1, r3
 8003cae:	9105      	str	r1, [sp, #20]
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	eb00 0e05 	add.w	lr, r0, r5
 8003cb6:	210a      	movs	r1, #10
 8003cb8:	4573      	cmp	r3, lr
 8003cba:	d113      	bne.n	8003ce4 <_strtod_l+0x254>
 8003cbc:	182b      	adds	r3, r5, r0
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	f105 0501 	add.w	r5, r5, #1
 8003cc4:	4405      	add	r5, r0
 8003cc6:	dc1c      	bgt.n	8003d02 <_strtod_l+0x272>
 8003cc8:	9907      	ldr	r1, [sp, #28]
 8003cca:	230a      	movs	r3, #10
 8003ccc:	fb03 2301 	mla	r3, r3, r1, r2
 8003cd0:	9307      	str	r3, [sp, #28]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003cd6:	1c51      	adds	r1, r2, #1
 8003cd8:	9117      	str	r1, [sp, #92]	; 0x5c
 8003cda:	7852      	ldrb	r2, [r2, #1]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	e7c9      	b.n	8003c74 <_strtod_l+0x1e4>
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	e7d2      	b.n	8003c8a <_strtod_l+0x1fa>
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	dc04      	bgt.n	8003cf2 <_strtod_l+0x262>
 8003ce8:	9e07      	ldr	r6, [sp, #28]
 8003cea:	434e      	muls	r6, r1
 8003cec:	9607      	str	r6, [sp, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	e7e2      	b.n	8003cb8 <_strtod_l+0x228>
 8003cf2:	f103 0c01 	add.w	ip, r3, #1
 8003cf6:	f1bc 0f10 	cmp.w	ip, #16
 8003cfa:	bfd8      	it	le
 8003cfc:	fb01 f909 	mulle.w	r9, r1, r9
 8003d00:	e7f5      	b.n	8003cee <_strtod_l+0x25e>
 8003d02:	2d10      	cmp	r5, #16
 8003d04:	bfdc      	itt	le
 8003d06:	230a      	movle	r3, #10
 8003d08:	fb03 2909 	mlale	r9, r3, r9, r2
 8003d0c:	e7e1      	b.n	8003cd2 <_strtod_l+0x242>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9305      	str	r3, [sp, #20]
 8003d12:	2301      	movs	r3, #1
 8003d14:	e77c      	b.n	8003c10 <_strtod_l+0x180>
 8003d16:	f04f 0c00 	mov.w	ip, #0
 8003d1a:	f108 0202 	add.w	r2, r8, #2
 8003d1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003d20:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003d24:	e785      	b.n	8003c32 <_strtod_l+0x1a2>
 8003d26:	f04f 0c01 	mov.w	ip, #1
 8003d2a:	e7f6      	b.n	8003d1a <_strtod_l+0x28a>
 8003d2c:	080078b8 	.word	0x080078b8
 8003d30:	0800766c 	.word	0x0800766c
 8003d34:	7ff00000 	.word	0x7ff00000
 8003d38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003d3a:	1c51      	adds	r1, r2, #1
 8003d3c:	9117      	str	r1, [sp, #92]	; 0x5c
 8003d3e:	7852      	ldrb	r2, [r2, #1]
 8003d40:	2a30      	cmp	r2, #48	; 0x30
 8003d42:	d0f9      	beq.n	8003d38 <_strtod_l+0x2a8>
 8003d44:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003d48:	2908      	cmp	r1, #8
 8003d4a:	f63f af79 	bhi.w	8003c40 <_strtod_l+0x1b0>
 8003d4e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003d52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003d54:	9206      	str	r2, [sp, #24]
 8003d56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003d58:	1c51      	adds	r1, r2, #1
 8003d5a:	9117      	str	r1, [sp, #92]	; 0x5c
 8003d5c:	7852      	ldrb	r2, [r2, #1]
 8003d5e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8003d62:	2e09      	cmp	r6, #9
 8003d64:	d937      	bls.n	8003dd6 <_strtod_l+0x346>
 8003d66:	9e06      	ldr	r6, [sp, #24]
 8003d68:	1b89      	subs	r1, r1, r6
 8003d6a:	2908      	cmp	r1, #8
 8003d6c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003d70:	dc02      	bgt.n	8003d78 <_strtod_l+0x2e8>
 8003d72:	4576      	cmp	r6, lr
 8003d74:	bfa8      	it	ge
 8003d76:	4676      	movge	r6, lr
 8003d78:	f1bc 0f00 	cmp.w	ip, #0
 8003d7c:	d000      	beq.n	8003d80 <_strtod_l+0x2f0>
 8003d7e:	4276      	negs	r6, r6
 8003d80:	2d00      	cmp	r5, #0
 8003d82:	d14d      	bne.n	8003e20 <_strtod_l+0x390>
 8003d84:	9904      	ldr	r1, [sp, #16]
 8003d86:	4301      	orrs	r1, r0
 8003d88:	f47f aec6 	bne.w	8003b18 <_strtod_l+0x88>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f47f aee1 	bne.w	8003b54 <_strtod_l+0xc4>
 8003d92:	2a69      	cmp	r2, #105	; 0x69
 8003d94:	d027      	beq.n	8003de6 <_strtod_l+0x356>
 8003d96:	dc24      	bgt.n	8003de2 <_strtod_l+0x352>
 8003d98:	2a49      	cmp	r2, #73	; 0x49
 8003d9a:	d024      	beq.n	8003de6 <_strtod_l+0x356>
 8003d9c:	2a4e      	cmp	r2, #78	; 0x4e
 8003d9e:	f47f aed9 	bne.w	8003b54 <_strtod_l+0xc4>
 8003da2:	499f      	ldr	r1, [pc, #636]	; (8004020 <_strtod_l+0x590>)
 8003da4:	a817      	add	r0, sp, #92	; 0x5c
 8003da6:	f001 fe3d 	bl	8005a24 <__match>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	f43f aed2 	beq.w	8003b54 <_strtod_l+0xc4>
 8003db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b28      	cmp	r3, #40	; 0x28
 8003db6:	d12d      	bne.n	8003e14 <_strtod_l+0x384>
 8003db8:	499a      	ldr	r1, [pc, #616]	; (8004024 <_strtod_l+0x594>)
 8003dba:	aa1a      	add	r2, sp, #104	; 0x68
 8003dbc:	a817      	add	r0, sp, #92	; 0x5c
 8003dbe:	f001 fe45 	bl	8005a4c <__hexnan>
 8003dc2:	2805      	cmp	r0, #5
 8003dc4:	d126      	bne.n	8003e14 <_strtod_l+0x384>
 8003dc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003dc8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003dcc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003dd0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003dd4:	e6a0      	b.n	8003b18 <_strtod_l+0x88>
 8003dd6:	210a      	movs	r1, #10
 8003dd8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8003ddc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003de0:	e7b9      	b.n	8003d56 <_strtod_l+0x2c6>
 8003de2:	2a6e      	cmp	r2, #110	; 0x6e
 8003de4:	e7db      	b.n	8003d9e <_strtod_l+0x30e>
 8003de6:	4990      	ldr	r1, [pc, #576]	; (8004028 <_strtod_l+0x598>)
 8003de8:	a817      	add	r0, sp, #92	; 0x5c
 8003dea:	f001 fe1b 	bl	8005a24 <__match>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	f43f aeb0 	beq.w	8003b54 <_strtod_l+0xc4>
 8003df4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003df6:	498d      	ldr	r1, [pc, #564]	; (800402c <_strtod_l+0x59c>)
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	a817      	add	r0, sp, #92	; 0x5c
 8003dfc:	9317      	str	r3, [sp, #92]	; 0x5c
 8003dfe:	f001 fe11 	bl	8005a24 <__match>
 8003e02:	b910      	cbnz	r0, 8003e0a <_strtod_l+0x37a>
 8003e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003e06:	3301      	adds	r3, #1
 8003e08:	9317      	str	r3, [sp, #92]	; 0x5c
 8003e0a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800403c <_strtod_l+0x5ac>
 8003e0e:	f04f 0a00 	mov.w	sl, #0
 8003e12:	e681      	b.n	8003b18 <_strtod_l+0x88>
 8003e14:	4886      	ldr	r0, [pc, #536]	; (8004030 <_strtod_l+0x5a0>)
 8003e16:	f002 fdf7 	bl	8006a08 <nan>
 8003e1a:	ec5b ab10 	vmov	sl, fp, d0
 8003e1e:	e67b      	b.n	8003b18 <_strtod_l+0x88>
 8003e20:	9b05      	ldr	r3, [sp, #20]
 8003e22:	9807      	ldr	r0, [sp, #28]
 8003e24:	1af3      	subs	r3, r6, r3
 8003e26:	2f00      	cmp	r7, #0
 8003e28:	bf08      	it	eq
 8003e2a:	462f      	moveq	r7, r5
 8003e2c:	2d10      	cmp	r5, #16
 8003e2e:	9306      	str	r3, [sp, #24]
 8003e30:	46a8      	mov	r8, r5
 8003e32:	bfa8      	it	ge
 8003e34:	f04f 0810 	movge.w	r8, #16
 8003e38:	f7fc fb6c 	bl	8000514 <__aeabi_ui2d>
 8003e3c:	2d09      	cmp	r5, #9
 8003e3e:	4682      	mov	sl, r0
 8003e40:	468b      	mov	fp, r1
 8003e42:	dd13      	ble.n	8003e6c <_strtod_l+0x3dc>
 8003e44:	4b7b      	ldr	r3, [pc, #492]	; (8004034 <_strtod_l+0x5a4>)
 8003e46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003e4a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003e4e:	f7fc fbdb 	bl	8000608 <__aeabi_dmul>
 8003e52:	4682      	mov	sl, r0
 8003e54:	4648      	mov	r0, r9
 8003e56:	468b      	mov	fp, r1
 8003e58:	f7fc fb5c 	bl	8000514 <__aeabi_ui2d>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4650      	mov	r0, sl
 8003e62:	4659      	mov	r1, fp
 8003e64:	f7fc fa1a 	bl	800029c <__adddf3>
 8003e68:	4682      	mov	sl, r0
 8003e6a:	468b      	mov	fp, r1
 8003e6c:	2d0f      	cmp	r5, #15
 8003e6e:	dc38      	bgt.n	8003ee2 <_strtod_l+0x452>
 8003e70:	9b06      	ldr	r3, [sp, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f43f ae50 	beq.w	8003b18 <_strtod_l+0x88>
 8003e78:	dd24      	ble.n	8003ec4 <_strtod_l+0x434>
 8003e7a:	2b16      	cmp	r3, #22
 8003e7c:	dc0b      	bgt.n	8003e96 <_strtod_l+0x406>
 8003e7e:	496d      	ldr	r1, [pc, #436]	; (8004034 <_strtod_l+0x5a4>)
 8003e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e88:	4652      	mov	r2, sl
 8003e8a:	465b      	mov	r3, fp
 8003e8c:	f7fc fbbc 	bl	8000608 <__aeabi_dmul>
 8003e90:	4682      	mov	sl, r0
 8003e92:	468b      	mov	fp, r1
 8003e94:	e640      	b.n	8003b18 <_strtod_l+0x88>
 8003e96:	9a06      	ldr	r2, [sp, #24]
 8003e98:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	db20      	blt.n	8003ee2 <_strtod_l+0x452>
 8003ea0:	4c64      	ldr	r4, [pc, #400]	; (8004034 <_strtod_l+0x5a4>)
 8003ea2:	f1c5 050f 	rsb	r5, r5, #15
 8003ea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003eaa:	4652      	mov	r2, sl
 8003eac:	465b      	mov	r3, fp
 8003eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003eb2:	f7fc fba9 	bl	8000608 <__aeabi_dmul>
 8003eb6:	9b06      	ldr	r3, [sp, #24]
 8003eb8:	1b5d      	subs	r5, r3, r5
 8003eba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003ebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003ec2:	e7e3      	b.n	8003e8c <_strtod_l+0x3fc>
 8003ec4:	9b06      	ldr	r3, [sp, #24]
 8003ec6:	3316      	adds	r3, #22
 8003ec8:	db0b      	blt.n	8003ee2 <_strtod_l+0x452>
 8003eca:	9b05      	ldr	r3, [sp, #20]
 8003ecc:	1b9e      	subs	r6, r3, r6
 8003ece:	4b59      	ldr	r3, [pc, #356]	; (8004034 <_strtod_l+0x5a4>)
 8003ed0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003ed4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ed8:	4650      	mov	r0, sl
 8003eda:	4659      	mov	r1, fp
 8003edc:	f7fc fcbe 	bl	800085c <__aeabi_ddiv>
 8003ee0:	e7d6      	b.n	8003e90 <_strtod_l+0x400>
 8003ee2:	9b06      	ldr	r3, [sp, #24]
 8003ee4:	eba5 0808 	sub.w	r8, r5, r8
 8003ee8:	4498      	add	r8, r3
 8003eea:	f1b8 0f00 	cmp.w	r8, #0
 8003eee:	dd74      	ble.n	8003fda <_strtod_l+0x54a>
 8003ef0:	f018 030f 	ands.w	r3, r8, #15
 8003ef4:	d00a      	beq.n	8003f0c <_strtod_l+0x47c>
 8003ef6:	494f      	ldr	r1, [pc, #316]	; (8004034 <_strtod_l+0x5a4>)
 8003ef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003efc:	4652      	mov	r2, sl
 8003efe:	465b      	mov	r3, fp
 8003f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f04:	f7fc fb80 	bl	8000608 <__aeabi_dmul>
 8003f08:	4682      	mov	sl, r0
 8003f0a:	468b      	mov	fp, r1
 8003f0c:	f038 080f 	bics.w	r8, r8, #15
 8003f10:	d04f      	beq.n	8003fb2 <_strtod_l+0x522>
 8003f12:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003f16:	dd22      	ble.n	8003f5e <_strtod_l+0x4ce>
 8003f18:	2500      	movs	r5, #0
 8003f1a:	462e      	mov	r6, r5
 8003f1c:	9507      	str	r5, [sp, #28]
 8003f1e:	9505      	str	r5, [sp, #20]
 8003f20:	2322      	movs	r3, #34	; 0x22
 8003f22:	f8df b118 	ldr.w	fp, [pc, #280]	; 800403c <_strtod_l+0x5ac>
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	f04f 0a00 	mov.w	sl, #0
 8003f2c:	9b07      	ldr	r3, [sp, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f43f adf2 	beq.w	8003b18 <_strtod_l+0x88>
 8003f34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003f36:	4620      	mov	r0, r4
 8003f38:	f001 fe90 	bl	8005c5c <_Bfree>
 8003f3c:	9905      	ldr	r1, [sp, #20]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f001 fe8c 	bl	8005c5c <_Bfree>
 8003f44:	4631      	mov	r1, r6
 8003f46:	4620      	mov	r0, r4
 8003f48:	f001 fe88 	bl	8005c5c <_Bfree>
 8003f4c:	9907      	ldr	r1, [sp, #28]
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f001 fe84 	bl	8005c5c <_Bfree>
 8003f54:	4629      	mov	r1, r5
 8003f56:	4620      	mov	r0, r4
 8003f58:	f001 fe80 	bl	8005c5c <_Bfree>
 8003f5c:	e5dc      	b.n	8003b18 <_strtod_l+0x88>
 8003f5e:	4b36      	ldr	r3, [pc, #216]	; (8004038 <_strtod_l+0x5a8>)
 8003f60:	9304      	str	r3, [sp, #16]
 8003f62:	2300      	movs	r3, #0
 8003f64:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003f68:	4650      	mov	r0, sl
 8003f6a:	4659      	mov	r1, fp
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	f1b8 0f01 	cmp.w	r8, #1
 8003f72:	dc21      	bgt.n	8003fb8 <_strtod_l+0x528>
 8003f74:	b10b      	cbz	r3, 8003f7a <_strtod_l+0x4ea>
 8003f76:	4682      	mov	sl, r0
 8003f78:	468b      	mov	fp, r1
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <_strtod_l+0x5a8>)
 8003f7c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003f80:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003f84:	4652      	mov	r2, sl
 8003f86:	465b      	mov	r3, fp
 8003f88:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003f8c:	f7fc fb3c 	bl	8000608 <__aeabi_dmul>
 8003f90:	4b2a      	ldr	r3, [pc, #168]	; (800403c <_strtod_l+0x5ac>)
 8003f92:	460a      	mov	r2, r1
 8003f94:	400b      	ands	r3, r1
 8003f96:	492a      	ldr	r1, [pc, #168]	; (8004040 <_strtod_l+0x5b0>)
 8003f98:	428b      	cmp	r3, r1
 8003f9a:	4682      	mov	sl, r0
 8003f9c:	d8bc      	bhi.n	8003f18 <_strtod_l+0x488>
 8003f9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	bf86      	itte	hi
 8003fa6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004044 <_strtod_l+0x5b4>
 8003faa:	f04f 3aff 	movhi.w	sl, #4294967295
 8003fae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9304      	str	r3, [sp, #16]
 8003fb6:	e084      	b.n	80040c2 <_strtod_l+0x632>
 8003fb8:	f018 0f01 	tst.w	r8, #1
 8003fbc:	d005      	beq.n	8003fca <_strtod_l+0x53a>
 8003fbe:	9b04      	ldr	r3, [sp, #16]
 8003fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc4:	f7fc fb20 	bl	8000608 <__aeabi_dmul>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	9a04      	ldr	r2, [sp, #16]
 8003fcc:	3208      	adds	r2, #8
 8003fce:	f109 0901 	add.w	r9, r9, #1
 8003fd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003fd6:	9204      	str	r2, [sp, #16]
 8003fd8:	e7c9      	b.n	8003f6e <_strtod_l+0x4de>
 8003fda:	d0ea      	beq.n	8003fb2 <_strtod_l+0x522>
 8003fdc:	f1c8 0800 	rsb	r8, r8, #0
 8003fe0:	f018 020f 	ands.w	r2, r8, #15
 8003fe4:	d00a      	beq.n	8003ffc <_strtod_l+0x56c>
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <_strtod_l+0x5a4>)
 8003fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fec:	4650      	mov	r0, sl
 8003fee:	4659      	mov	r1, fp
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc fc32 	bl	800085c <__aeabi_ddiv>
 8003ff8:	4682      	mov	sl, r0
 8003ffa:	468b      	mov	fp, r1
 8003ffc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004000:	d0d7      	beq.n	8003fb2 <_strtod_l+0x522>
 8004002:	f1b8 0f1f 	cmp.w	r8, #31
 8004006:	dd1f      	ble.n	8004048 <_strtod_l+0x5b8>
 8004008:	2500      	movs	r5, #0
 800400a:	462e      	mov	r6, r5
 800400c:	9507      	str	r5, [sp, #28]
 800400e:	9505      	str	r5, [sp, #20]
 8004010:	2322      	movs	r3, #34	; 0x22
 8004012:	f04f 0a00 	mov.w	sl, #0
 8004016:	f04f 0b00 	mov.w	fp, #0
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	e786      	b.n	8003f2c <_strtod_l+0x49c>
 800401e:	bf00      	nop
 8004020:	0800763d 	.word	0x0800763d
 8004024:	08007680 	.word	0x08007680
 8004028:	08007635 	.word	0x08007635
 800402c:	080077c4 	.word	0x080077c4
 8004030:	08007a70 	.word	0x08007a70
 8004034:	08007950 	.word	0x08007950
 8004038:	08007928 	.word	0x08007928
 800403c:	7ff00000 	.word	0x7ff00000
 8004040:	7ca00000 	.word	0x7ca00000
 8004044:	7fefffff 	.word	0x7fefffff
 8004048:	f018 0310 	ands.w	r3, r8, #16
 800404c:	bf18      	it	ne
 800404e:	236a      	movne	r3, #106	; 0x6a
 8004050:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004400 <_strtod_l+0x970>
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	4650      	mov	r0, sl
 8004058:	4659      	mov	r1, fp
 800405a:	2300      	movs	r3, #0
 800405c:	f018 0f01 	tst.w	r8, #1
 8004060:	d004      	beq.n	800406c <_strtod_l+0x5dc>
 8004062:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004066:	f7fc facf 	bl	8000608 <__aeabi_dmul>
 800406a:	2301      	movs	r3, #1
 800406c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004070:	f109 0908 	add.w	r9, r9, #8
 8004074:	d1f2      	bne.n	800405c <_strtod_l+0x5cc>
 8004076:	b10b      	cbz	r3, 800407c <_strtod_l+0x5ec>
 8004078:	4682      	mov	sl, r0
 800407a:	468b      	mov	fp, r1
 800407c:	9b04      	ldr	r3, [sp, #16]
 800407e:	b1c3      	cbz	r3, 80040b2 <_strtod_l+0x622>
 8004080:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004084:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004088:	2b00      	cmp	r3, #0
 800408a:	4659      	mov	r1, fp
 800408c:	dd11      	ble.n	80040b2 <_strtod_l+0x622>
 800408e:	2b1f      	cmp	r3, #31
 8004090:	f340 8124 	ble.w	80042dc <_strtod_l+0x84c>
 8004094:	2b34      	cmp	r3, #52	; 0x34
 8004096:	bfde      	ittt	le
 8004098:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800409c:	f04f 33ff 	movle.w	r3, #4294967295
 80040a0:	fa03 f202 	lslle.w	r2, r3, r2
 80040a4:	f04f 0a00 	mov.w	sl, #0
 80040a8:	bfcc      	ite	gt
 80040aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80040ae:	ea02 0b01 	andle.w	fp, r2, r1
 80040b2:	2200      	movs	r2, #0
 80040b4:	2300      	movs	r3, #0
 80040b6:	4650      	mov	r0, sl
 80040b8:	4659      	mov	r1, fp
 80040ba:	f7fc fd0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d1a2      	bne.n	8004008 <_strtod_l+0x578>
 80040c2:	9b07      	ldr	r3, [sp, #28]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	9908      	ldr	r1, [sp, #32]
 80040c8:	462b      	mov	r3, r5
 80040ca:	463a      	mov	r2, r7
 80040cc:	4620      	mov	r0, r4
 80040ce:	f001 fe2d 	bl	8005d2c <__s2b>
 80040d2:	9007      	str	r0, [sp, #28]
 80040d4:	2800      	cmp	r0, #0
 80040d6:	f43f af1f 	beq.w	8003f18 <_strtod_l+0x488>
 80040da:	9b05      	ldr	r3, [sp, #20]
 80040dc:	1b9e      	subs	r6, r3, r6
 80040de:	9b06      	ldr	r3, [sp, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bfb4      	ite	lt
 80040e4:	4633      	movlt	r3, r6
 80040e6:	2300      	movge	r3, #0
 80040e8:	930c      	str	r3, [sp, #48]	; 0x30
 80040ea:	9b06      	ldr	r3, [sp, #24]
 80040ec:	2500      	movs	r5, #0
 80040ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80040f2:	9312      	str	r3, [sp, #72]	; 0x48
 80040f4:	462e      	mov	r6, r5
 80040f6:	9b07      	ldr	r3, [sp, #28]
 80040f8:	4620      	mov	r0, r4
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	f001 fd6e 	bl	8005bdc <_Balloc>
 8004100:	9005      	str	r0, [sp, #20]
 8004102:	2800      	cmp	r0, #0
 8004104:	f43f af0c 	beq.w	8003f20 <_strtod_l+0x490>
 8004108:	9b07      	ldr	r3, [sp, #28]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	3202      	adds	r2, #2
 800410e:	f103 010c 	add.w	r1, r3, #12
 8004112:	0092      	lsls	r2, r2, #2
 8004114:	300c      	adds	r0, #12
 8004116:	f001 fd53 	bl	8005bc0 <memcpy>
 800411a:	ec4b ab10 	vmov	d0, sl, fp
 800411e:	aa1a      	add	r2, sp, #104	; 0x68
 8004120:	a919      	add	r1, sp, #100	; 0x64
 8004122:	4620      	mov	r0, r4
 8004124:	f002 f948 	bl	80063b8 <__d2b>
 8004128:	ec4b ab18 	vmov	d8, sl, fp
 800412c:	9018      	str	r0, [sp, #96]	; 0x60
 800412e:	2800      	cmp	r0, #0
 8004130:	f43f aef6 	beq.w	8003f20 <_strtod_l+0x490>
 8004134:	2101      	movs	r1, #1
 8004136:	4620      	mov	r0, r4
 8004138:	f001 fe92 	bl	8005e60 <__i2b>
 800413c:	4606      	mov	r6, r0
 800413e:	2800      	cmp	r0, #0
 8004140:	f43f aeee 	beq.w	8003f20 <_strtod_l+0x490>
 8004144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004146:	9904      	ldr	r1, [sp, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	bfab      	itete	ge
 800414c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800414e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004150:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004152:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004156:	bfac      	ite	ge
 8004158:	eb03 0902 	addge.w	r9, r3, r2
 800415c:	1ad7      	sublt	r7, r2, r3
 800415e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004160:	eba3 0801 	sub.w	r8, r3, r1
 8004164:	4490      	add	r8, r2
 8004166:	4ba1      	ldr	r3, [pc, #644]	; (80043ec <_strtod_l+0x95c>)
 8004168:	f108 38ff 	add.w	r8, r8, #4294967295
 800416c:	4598      	cmp	r8, r3
 800416e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004172:	f280 80c7 	bge.w	8004304 <_strtod_l+0x874>
 8004176:	eba3 0308 	sub.w	r3, r3, r8
 800417a:	2b1f      	cmp	r3, #31
 800417c:	eba2 0203 	sub.w	r2, r2, r3
 8004180:	f04f 0101 	mov.w	r1, #1
 8004184:	f300 80b1 	bgt.w	80042ea <_strtod_l+0x85a>
 8004188:	fa01 f303 	lsl.w	r3, r1, r3
 800418c:	930d      	str	r3, [sp, #52]	; 0x34
 800418e:	2300      	movs	r3, #0
 8004190:	9308      	str	r3, [sp, #32]
 8004192:	eb09 0802 	add.w	r8, r9, r2
 8004196:	9b04      	ldr	r3, [sp, #16]
 8004198:	45c1      	cmp	r9, r8
 800419a:	4417      	add	r7, r2
 800419c:	441f      	add	r7, r3
 800419e:	464b      	mov	r3, r9
 80041a0:	bfa8      	it	ge
 80041a2:	4643      	movge	r3, r8
 80041a4:	42bb      	cmp	r3, r7
 80041a6:	bfa8      	it	ge
 80041a8:	463b      	movge	r3, r7
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	bfc2      	ittt	gt
 80041ae:	eba8 0803 	subgt.w	r8, r8, r3
 80041b2:	1aff      	subgt	r7, r7, r3
 80041b4:	eba9 0903 	subgt.w	r9, r9, r3
 80041b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	dd17      	ble.n	80041ee <_strtod_l+0x75e>
 80041be:	4631      	mov	r1, r6
 80041c0:	461a      	mov	r2, r3
 80041c2:	4620      	mov	r0, r4
 80041c4:	f001 ff0c 	bl	8005fe0 <__pow5mult>
 80041c8:	4606      	mov	r6, r0
 80041ca:	2800      	cmp	r0, #0
 80041cc:	f43f aea8 	beq.w	8003f20 <_strtod_l+0x490>
 80041d0:	4601      	mov	r1, r0
 80041d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80041d4:	4620      	mov	r0, r4
 80041d6:	f001 fe59 	bl	8005e8c <__multiply>
 80041da:	900b      	str	r0, [sp, #44]	; 0x2c
 80041dc:	2800      	cmp	r0, #0
 80041de:	f43f ae9f 	beq.w	8003f20 <_strtod_l+0x490>
 80041e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80041e4:	4620      	mov	r0, r4
 80041e6:	f001 fd39 	bl	8005c5c <_Bfree>
 80041ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041ec:	9318      	str	r3, [sp, #96]	; 0x60
 80041ee:	f1b8 0f00 	cmp.w	r8, #0
 80041f2:	f300 808c 	bgt.w	800430e <_strtod_l+0x87e>
 80041f6:	9b06      	ldr	r3, [sp, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	dd08      	ble.n	800420e <_strtod_l+0x77e>
 80041fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041fe:	9905      	ldr	r1, [sp, #20]
 8004200:	4620      	mov	r0, r4
 8004202:	f001 feed 	bl	8005fe0 <__pow5mult>
 8004206:	9005      	str	r0, [sp, #20]
 8004208:	2800      	cmp	r0, #0
 800420a:	f43f ae89 	beq.w	8003f20 <_strtod_l+0x490>
 800420e:	2f00      	cmp	r7, #0
 8004210:	dd08      	ble.n	8004224 <_strtod_l+0x794>
 8004212:	9905      	ldr	r1, [sp, #20]
 8004214:	463a      	mov	r2, r7
 8004216:	4620      	mov	r0, r4
 8004218:	f001 ff3c 	bl	8006094 <__lshift>
 800421c:	9005      	str	r0, [sp, #20]
 800421e:	2800      	cmp	r0, #0
 8004220:	f43f ae7e 	beq.w	8003f20 <_strtod_l+0x490>
 8004224:	f1b9 0f00 	cmp.w	r9, #0
 8004228:	dd08      	ble.n	800423c <_strtod_l+0x7ac>
 800422a:	4631      	mov	r1, r6
 800422c:	464a      	mov	r2, r9
 800422e:	4620      	mov	r0, r4
 8004230:	f001 ff30 	bl	8006094 <__lshift>
 8004234:	4606      	mov	r6, r0
 8004236:	2800      	cmp	r0, #0
 8004238:	f43f ae72 	beq.w	8003f20 <_strtod_l+0x490>
 800423c:	9a05      	ldr	r2, [sp, #20]
 800423e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004240:	4620      	mov	r0, r4
 8004242:	f001 ffb3 	bl	80061ac <__mdiff>
 8004246:	4605      	mov	r5, r0
 8004248:	2800      	cmp	r0, #0
 800424a:	f43f ae69 	beq.w	8003f20 <_strtod_l+0x490>
 800424e:	68c3      	ldr	r3, [r0, #12]
 8004250:	930b      	str	r3, [sp, #44]	; 0x2c
 8004252:	2300      	movs	r3, #0
 8004254:	60c3      	str	r3, [r0, #12]
 8004256:	4631      	mov	r1, r6
 8004258:	f001 ff8c 	bl	8006174 <__mcmp>
 800425c:	2800      	cmp	r0, #0
 800425e:	da60      	bge.n	8004322 <_strtod_l+0x892>
 8004260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004262:	ea53 030a 	orrs.w	r3, r3, sl
 8004266:	f040 8082 	bne.w	800436e <_strtod_l+0x8de>
 800426a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800426e:	2b00      	cmp	r3, #0
 8004270:	d17d      	bne.n	800436e <_strtod_l+0x8de>
 8004272:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004276:	0d1b      	lsrs	r3, r3, #20
 8004278:	051b      	lsls	r3, r3, #20
 800427a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800427e:	d976      	bls.n	800436e <_strtod_l+0x8de>
 8004280:	696b      	ldr	r3, [r5, #20]
 8004282:	b913      	cbnz	r3, 800428a <_strtod_l+0x7fa>
 8004284:	692b      	ldr	r3, [r5, #16]
 8004286:	2b01      	cmp	r3, #1
 8004288:	dd71      	ble.n	800436e <_strtod_l+0x8de>
 800428a:	4629      	mov	r1, r5
 800428c:	2201      	movs	r2, #1
 800428e:	4620      	mov	r0, r4
 8004290:	f001 ff00 	bl	8006094 <__lshift>
 8004294:	4631      	mov	r1, r6
 8004296:	4605      	mov	r5, r0
 8004298:	f001 ff6c 	bl	8006174 <__mcmp>
 800429c:	2800      	cmp	r0, #0
 800429e:	dd66      	ble.n	800436e <_strtod_l+0x8de>
 80042a0:	9904      	ldr	r1, [sp, #16]
 80042a2:	4a53      	ldr	r2, [pc, #332]	; (80043f0 <_strtod_l+0x960>)
 80042a4:	465b      	mov	r3, fp
 80042a6:	2900      	cmp	r1, #0
 80042a8:	f000 8081 	beq.w	80043ae <_strtod_l+0x91e>
 80042ac:	ea02 010b 	and.w	r1, r2, fp
 80042b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80042b4:	dc7b      	bgt.n	80043ae <_strtod_l+0x91e>
 80042b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80042ba:	f77f aea9 	ble.w	8004010 <_strtod_l+0x580>
 80042be:	4b4d      	ldr	r3, [pc, #308]	; (80043f4 <_strtod_l+0x964>)
 80042c0:	4650      	mov	r0, sl
 80042c2:	4659      	mov	r1, fp
 80042c4:	2200      	movs	r2, #0
 80042c6:	f7fc f99f 	bl	8000608 <__aeabi_dmul>
 80042ca:	460b      	mov	r3, r1
 80042cc:	4303      	orrs	r3, r0
 80042ce:	bf08      	it	eq
 80042d0:	2322      	moveq	r3, #34	; 0x22
 80042d2:	4682      	mov	sl, r0
 80042d4:	468b      	mov	fp, r1
 80042d6:	bf08      	it	eq
 80042d8:	6023      	streq	r3, [r4, #0]
 80042da:	e62b      	b.n	8003f34 <_strtod_l+0x4a4>
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	ea03 0a0a 	and.w	sl, r3, sl
 80042e8:	e6e3      	b.n	80040b2 <_strtod_l+0x622>
 80042ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80042ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80042f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80042f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80042fa:	fa01 f308 	lsl.w	r3, r1, r8
 80042fe:	9308      	str	r3, [sp, #32]
 8004300:	910d      	str	r1, [sp, #52]	; 0x34
 8004302:	e746      	b.n	8004192 <_strtod_l+0x702>
 8004304:	2300      	movs	r3, #0
 8004306:	9308      	str	r3, [sp, #32]
 8004308:	2301      	movs	r3, #1
 800430a:	930d      	str	r3, [sp, #52]	; 0x34
 800430c:	e741      	b.n	8004192 <_strtod_l+0x702>
 800430e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004310:	4642      	mov	r2, r8
 8004312:	4620      	mov	r0, r4
 8004314:	f001 febe 	bl	8006094 <__lshift>
 8004318:	9018      	str	r0, [sp, #96]	; 0x60
 800431a:	2800      	cmp	r0, #0
 800431c:	f47f af6b 	bne.w	80041f6 <_strtod_l+0x766>
 8004320:	e5fe      	b.n	8003f20 <_strtod_l+0x490>
 8004322:	465f      	mov	r7, fp
 8004324:	d16e      	bne.n	8004404 <_strtod_l+0x974>
 8004326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004328:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800432c:	b342      	cbz	r2, 8004380 <_strtod_l+0x8f0>
 800432e:	4a32      	ldr	r2, [pc, #200]	; (80043f8 <_strtod_l+0x968>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d128      	bne.n	8004386 <_strtod_l+0x8f6>
 8004334:	9b04      	ldr	r3, [sp, #16]
 8004336:	4651      	mov	r1, sl
 8004338:	b1eb      	cbz	r3, 8004376 <_strtod_l+0x8e6>
 800433a:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <_strtod_l+0x960>)
 800433c:	403b      	ands	r3, r7
 800433e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	d819      	bhi.n	800437c <_strtod_l+0x8ec>
 8004348:	0d1b      	lsrs	r3, r3, #20
 800434a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	4299      	cmp	r1, r3
 8004354:	d117      	bne.n	8004386 <_strtod_l+0x8f6>
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <_strtod_l+0x96c>)
 8004358:	429f      	cmp	r7, r3
 800435a:	d102      	bne.n	8004362 <_strtod_l+0x8d2>
 800435c:	3101      	adds	r1, #1
 800435e:	f43f addf 	beq.w	8003f20 <_strtod_l+0x490>
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <_strtod_l+0x960>)
 8004364:	403b      	ands	r3, r7
 8004366:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800436a:	f04f 0a00 	mov.w	sl, #0
 800436e:	9b04      	ldr	r3, [sp, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1a4      	bne.n	80042be <_strtod_l+0x82e>
 8004374:	e5de      	b.n	8003f34 <_strtod_l+0x4a4>
 8004376:	f04f 33ff 	mov.w	r3, #4294967295
 800437a:	e7ea      	b.n	8004352 <_strtod_l+0x8c2>
 800437c:	4613      	mov	r3, r2
 800437e:	e7e8      	b.n	8004352 <_strtod_l+0x8c2>
 8004380:	ea53 030a 	orrs.w	r3, r3, sl
 8004384:	d08c      	beq.n	80042a0 <_strtod_l+0x810>
 8004386:	9b08      	ldr	r3, [sp, #32]
 8004388:	b1db      	cbz	r3, 80043c2 <_strtod_l+0x932>
 800438a:	423b      	tst	r3, r7
 800438c:	d0ef      	beq.n	800436e <_strtod_l+0x8de>
 800438e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004390:	9a04      	ldr	r2, [sp, #16]
 8004392:	4650      	mov	r0, sl
 8004394:	4659      	mov	r1, fp
 8004396:	b1c3      	cbz	r3, 80043ca <_strtod_l+0x93a>
 8004398:	f7ff fb5e 	bl	8003a58 <sulp>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	ec51 0b18 	vmov	r0, r1, d8
 80043a4:	f7fb ff7a 	bl	800029c <__adddf3>
 80043a8:	4682      	mov	sl, r0
 80043aa:	468b      	mov	fp, r1
 80043ac:	e7df      	b.n	800436e <_strtod_l+0x8de>
 80043ae:	4013      	ands	r3, r2
 80043b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80043b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80043b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80043bc:	f04f 3aff 	mov.w	sl, #4294967295
 80043c0:	e7d5      	b.n	800436e <_strtod_l+0x8de>
 80043c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043c4:	ea13 0f0a 	tst.w	r3, sl
 80043c8:	e7e0      	b.n	800438c <_strtod_l+0x8fc>
 80043ca:	f7ff fb45 	bl	8003a58 <sulp>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	ec51 0b18 	vmov	r0, r1, d8
 80043d6:	f7fb ff5f 	bl	8000298 <__aeabi_dsub>
 80043da:	2200      	movs	r2, #0
 80043dc:	2300      	movs	r3, #0
 80043de:	4682      	mov	sl, r0
 80043e0:	468b      	mov	fp, r1
 80043e2:	f7fc fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d0c1      	beq.n	800436e <_strtod_l+0x8de>
 80043ea:	e611      	b.n	8004010 <_strtod_l+0x580>
 80043ec:	fffffc02 	.word	0xfffffc02
 80043f0:	7ff00000 	.word	0x7ff00000
 80043f4:	39500000 	.word	0x39500000
 80043f8:	000fffff 	.word	0x000fffff
 80043fc:	7fefffff 	.word	0x7fefffff
 8004400:	08007698 	.word	0x08007698
 8004404:	4631      	mov	r1, r6
 8004406:	4628      	mov	r0, r5
 8004408:	f002 f832 	bl	8006470 <__ratio>
 800440c:	ec59 8b10 	vmov	r8, r9, d0
 8004410:	ee10 0a10 	vmov	r0, s0
 8004414:	2200      	movs	r2, #0
 8004416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800441a:	4649      	mov	r1, r9
 800441c:	f7fc fb70 	bl	8000b00 <__aeabi_dcmple>
 8004420:	2800      	cmp	r0, #0
 8004422:	d07a      	beq.n	800451a <_strtod_l+0xa8a>
 8004424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d04a      	beq.n	80044c0 <_strtod_l+0xa30>
 800442a:	4b95      	ldr	r3, [pc, #596]	; (8004680 <_strtod_l+0xbf0>)
 800442c:	2200      	movs	r2, #0
 800442e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004432:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004680 <_strtod_l+0xbf0>
 8004436:	f04f 0800 	mov.w	r8, #0
 800443a:	4b92      	ldr	r3, [pc, #584]	; (8004684 <_strtod_l+0xbf4>)
 800443c:	403b      	ands	r3, r7
 800443e:	930d      	str	r3, [sp, #52]	; 0x34
 8004440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004442:	4b91      	ldr	r3, [pc, #580]	; (8004688 <_strtod_l+0xbf8>)
 8004444:	429a      	cmp	r2, r3
 8004446:	f040 80b0 	bne.w	80045aa <_strtod_l+0xb1a>
 800444a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800444e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004452:	ec4b ab10 	vmov	d0, sl, fp
 8004456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800445a:	f001 ff31 	bl	80062c0 <__ulp>
 800445e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004462:	ec53 2b10 	vmov	r2, r3, d0
 8004466:	f7fc f8cf 	bl	8000608 <__aeabi_dmul>
 800446a:	4652      	mov	r2, sl
 800446c:	465b      	mov	r3, fp
 800446e:	f7fb ff15 	bl	800029c <__adddf3>
 8004472:	460b      	mov	r3, r1
 8004474:	4983      	ldr	r1, [pc, #524]	; (8004684 <_strtod_l+0xbf4>)
 8004476:	4a85      	ldr	r2, [pc, #532]	; (800468c <_strtod_l+0xbfc>)
 8004478:	4019      	ands	r1, r3
 800447a:	4291      	cmp	r1, r2
 800447c:	4682      	mov	sl, r0
 800447e:	d960      	bls.n	8004542 <_strtod_l+0xab2>
 8004480:	ee18 3a90 	vmov	r3, s17
 8004484:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004488:	4293      	cmp	r3, r2
 800448a:	d104      	bne.n	8004496 <_strtod_l+0xa06>
 800448c:	ee18 3a10 	vmov	r3, s16
 8004490:	3301      	adds	r3, #1
 8004492:	f43f ad45 	beq.w	8003f20 <_strtod_l+0x490>
 8004496:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004698 <_strtod_l+0xc08>
 800449a:	f04f 3aff 	mov.w	sl, #4294967295
 800449e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80044a0:	4620      	mov	r0, r4
 80044a2:	f001 fbdb 	bl	8005c5c <_Bfree>
 80044a6:	9905      	ldr	r1, [sp, #20]
 80044a8:	4620      	mov	r0, r4
 80044aa:	f001 fbd7 	bl	8005c5c <_Bfree>
 80044ae:	4631      	mov	r1, r6
 80044b0:	4620      	mov	r0, r4
 80044b2:	f001 fbd3 	bl	8005c5c <_Bfree>
 80044b6:	4629      	mov	r1, r5
 80044b8:	4620      	mov	r0, r4
 80044ba:	f001 fbcf 	bl	8005c5c <_Bfree>
 80044be:	e61a      	b.n	80040f6 <_strtod_l+0x666>
 80044c0:	f1ba 0f00 	cmp.w	sl, #0
 80044c4:	d11b      	bne.n	80044fe <_strtod_l+0xa6e>
 80044c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80044ca:	b9f3      	cbnz	r3, 800450a <_strtod_l+0xa7a>
 80044cc:	4b6c      	ldr	r3, [pc, #432]	; (8004680 <_strtod_l+0xbf0>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	4640      	mov	r0, r8
 80044d2:	4649      	mov	r1, r9
 80044d4:	f7fc fb0a 	bl	8000aec <__aeabi_dcmplt>
 80044d8:	b9d0      	cbnz	r0, 8004510 <_strtod_l+0xa80>
 80044da:	4640      	mov	r0, r8
 80044dc:	4649      	mov	r1, r9
 80044de:	4b6c      	ldr	r3, [pc, #432]	; (8004690 <_strtod_l+0xc00>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	f7fc f891 	bl	8000608 <__aeabi_dmul>
 80044e6:	4680      	mov	r8, r0
 80044e8:	4689      	mov	r9, r1
 80044ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80044ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80044f2:	9315      	str	r3, [sp, #84]	; 0x54
 80044f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80044f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80044fc:	e79d      	b.n	800443a <_strtod_l+0x9aa>
 80044fe:	f1ba 0f01 	cmp.w	sl, #1
 8004502:	d102      	bne.n	800450a <_strtod_l+0xa7a>
 8004504:	2f00      	cmp	r7, #0
 8004506:	f43f ad83 	beq.w	8004010 <_strtod_l+0x580>
 800450a:	4b62      	ldr	r3, [pc, #392]	; (8004694 <_strtod_l+0xc04>)
 800450c:	2200      	movs	r2, #0
 800450e:	e78e      	b.n	800442e <_strtod_l+0x99e>
 8004510:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004690 <_strtod_l+0xc00>
 8004514:	f04f 0800 	mov.w	r8, #0
 8004518:	e7e7      	b.n	80044ea <_strtod_l+0xa5a>
 800451a:	4b5d      	ldr	r3, [pc, #372]	; (8004690 <_strtod_l+0xc00>)
 800451c:	4640      	mov	r0, r8
 800451e:	4649      	mov	r1, r9
 8004520:	2200      	movs	r2, #0
 8004522:	f7fc f871 	bl	8000608 <__aeabi_dmul>
 8004526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004528:	4680      	mov	r8, r0
 800452a:	4689      	mov	r9, r1
 800452c:	b933      	cbnz	r3, 800453c <_strtod_l+0xaac>
 800452e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004532:	900e      	str	r0, [sp, #56]	; 0x38
 8004534:	930f      	str	r3, [sp, #60]	; 0x3c
 8004536:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800453a:	e7dd      	b.n	80044f8 <_strtod_l+0xa68>
 800453c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004540:	e7f9      	b.n	8004536 <_strtod_l+0xaa6>
 8004542:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004546:	9b04      	ldr	r3, [sp, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1a8      	bne.n	800449e <_strtod_l+0xa0e>
 800454c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004550:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004552:	0d1b      	lsrs	r3, r3, #20
 8004554:	051b      	lsls	r3, r3, #20
 8004556:	429a      	cmp	r2, r3
 8004558:	d1a1      	bne.n	800449e <_strtod_l+0xa0e>
 800455a:	4640      	mov	r0, r8
 800455c:	4649      	mov	r1, r9
 800455e:	f7fc fbeb 	bl	8000d38 <__aeabi_d2lz>
 8004562:	f7fc f823 	bl	80005ac <__aeabi_l2d>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f7fb fe93 	bl	8000298 <__aeabi_dsub>
 8004572:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004574:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004578:	ea43 030a 	orr.w	r3, r3, sl
 800457c:	4313      	orrs	r3, r2
 800457e:	4680      	mov	r8, r0
 8004580:	4689      	mov	r9, r1
 8004582:	d055      	beq.n	8004630 <_strtod_l+0xba0>
 8004584:	a336      	add	r3, pc, #216	; (adr r3, 8004660 <_strtod_l+0xbd0>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f7fc faaf 	bl	8000aec <__aeabi_dcmplt>
 800458e:	2800      	cmp	r0, #0
 8004590:	f47f acd0 	bne.w	8003f34 <_strtod_l+0x4a4>
 8004594:	a334      	add	r3, pc, #208	; (adr r3, 8004668 <_strtod_l+0xbd8>)
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	4640      	mov	r0, r8
 800459c:	4649      	mov	r1, r9
 800459e:	f7fc fac3 	bl	8000b28 <__aeabi_dcmpgt>
 80045a2:	2800      	cmp	r0, #0
 80045a4:	f43f af7b 	beq.w	800449e <_strtod_l+0xa0e>
 80045a8:	e4c4      	b.n	8003f34 <_strtod_l+0x4a4>
 80045aa:	9b04      	ldr	r3, [sp, #16]
 80045ac:	b333      	cbz	r3, 80045fc <_strtod_l+0xb6c>
 80045ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80045b4:	d822      	bhi.n	80045fc <_strtod_l+0xb6c>
 80045b6:	a32e      	add	r3, pc, #184	; (adr r3, 8004670 <_strtod_l+0xbe0>)
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	4640      	mov	r0, r8
 80045be:	4649      	mov	r1, r9
 80045c0:	f7fc fa9e 	bl	8000b00 <__aeabi_dcmple>
 80045c4:	b1a0      	cbz	r0, 80045f0 <_strtod_l+0xb60>
 80045c6:	4649      	mov	r1, r9
 80045c8:	4640      	mov	r0, r8
 80045ca:	f7fc faf5 	bl	8000bb8 <__aeabi_d2uiz>
 80045ce:	2801      	cmp	r0, #1
 80045d0:	bf38      	it	cc
 80045d2:	2001      	movcc	r0, #1
 80045d4:	f7fb ff9e 	bl	8000514 <__aeabi_ui2d>
 80045d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045da:	4680      	mov	r8, r0
 80045dc:	4689      	mov	r9, r1
 80045de:	bb23      	cbnz	r3, 800462a <_strtod_l+0xb9a>
 80045e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045e4:	9010      	str	r0, [sp, #64]	; 0x40
 80045e6:	9311      	str	r3, [sp, #68]	; 0x44
 80045e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80045ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80045f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	9309      	str	r3, [sp, #36]	; 0x24
 80045fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004600:	eeb0 0a48 	vmov.f32	s0, s16
 8004604:	eef0 0a68 	vmov.f32	s1, s17
 8004608:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800460c:	f001 fe58 	bl	80062c0 <__ulp>
 8004610:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004614:	ec53 2b10 	vmov	r2, r3, d0
 8004618:	f7fb fff6 	bl	8000608 <__aeabi_dmul>
 800461c:	ec53 2b18 	vmov	r2, r3, d8
 8004620:	f7fb fe3c 	bl	800029c <__adddf3>
 8004624:	4682      	mov	sl, r0
 8004626:	468b      	mov	fp, r1
 8004628:	e78d      	b.n	8004546 <_strtod_l+0xab6>
 800462a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800462e:	e7db      	b.n	80045e8 <_strtod_l+0xb58>
 8004630:	a311      	add	r3, pc, #68	; (adr r3, 8004678 <_strtod_l+0xbe8>)
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f7fc fa59 	bl	8000aec <__aeabi_dcmplt>
 800463a:	e7b2      	b.n	80045a2 <_strtod_l+0xb12>
 800463c:	2300      	movs	r3, #0
 800463e:	930a      	str	r3, [sp, #40]	; 0x28
 8004640:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	f7ff ba6b 	b.w	8003b20 <_strtod_l+0x90>
 800464a:	2a65      	cmp	r2, #101	; 0x65
 800464c:	f43f ab5f 	beq.w	8003d0e <_strtod_l+0x27e>
 8004650:	2a45      	cmp	r2, #69	; 0x45
 8004652:	f43f ab5c 	beq.w	8003d0e <_strtod_l+0x27e>
 8004656:	2301      	movs	r3, #1
 8004658:	f7ff bb94 	b.w	8003d84 <_strtod_l+0x2f4>
 800465c:	f3af 8000 	nop.w
 8004660:	94a03595 	.word	0x94a03595
 8004664:	3fdfffff 	.word	0x3fdfffff
 8004668:	35afe535 	.word	0x35afe535
 800466c:	3fe00000 	.word	0x3fe00000
 8004670:	ffc00000 	.word	0xffc00000
 8004674:	41dfffff 	.word	0x41dfffff
 8004678:	94a03595 	.word	0x94a03595
 800467c:	3fcfffff 	.word	0x3fcfffff
 8004680:	3ff00000 	.word	0x3ff00000
 8004684:	7ff00000 	.word	0x7ff00000
 8004688:	7fe00000 	.word	0x7fe00000
 800468c:	7c9fffff 	.word	0x7c9fffff
 8004690:	3fe00000 	.word	0x3fe00000
 8004694:	bff00000 	.word	0xbff00000
 8004698:	7fefffff 	.word	0x7fefffff

0800469c <_strtod_r>:
 800469c:	4b01      	ldr	r3, [pc, #4]	; (80046a4 <_strtod_r+0x8>)
 800469e:	f7ff b9f7 	b.w	8003a90 <_strtod_l>
 80046a2:	bf00      	nop
 80046a4:	20000068 	.word	0x20000068

080046a8 <_strtol_l.constprop.0>:
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046ae:	d001      	beq.n	80046b4 <_strtol_l.constprop.0+0xc>
 80046b0:	2b24      	cmp	r3, #36	; 0x24
 80046b2:	d906      	bls.n	80046c2 <_strtol_l.constprop.0+0x1a>
 80046b4:	f7fe fafe 	bl	8002cb4 <__errno>
 80046b8:	2316      	movs	r3, #22
 80046ba:	6003      	str	r3, [r0, #0]
 80046bc:	2000      	movs	r0, #0
 80046be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80047a8 <_strtol_l.constprop.0+0x100>
 80046c6:	460d      	mov	r5, r1
 80046c8:	462e      	mov	r6, r5
 80046ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046ce:	f814 700c 	ldrb.w	r7, [r4, ip]
 80046d2:	f017 0708 	ands.w	r7, r7, #8
 80046d6:	d1f7      	bne.n	80046c8 <_strtol_l.constprop.0+0x20>
 80046d8:	2c2d      	cmp	r4, #45	; 0x2d
 80046da:	d132      	bne.n	8004742 <_strtol_l.constprop.0+0x9a>
 80046dc:	782c      	ldrb	r4, [r5, #0]
 80046de:	2701      	movs	r7, #1
 80046e0:	1cb5      	adds	r5, r6, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d05b      	beq.n	800479e <_strtol_l.constprop.0+0xf6>
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d109      	bne.n	80046fe <_strtol_l.constprop.0+0x56>
 80046ea:	2c30      	cmp	r4, #48	; 0x30
 80046ec:	d107      	bne.n	80046fe <_strtol_l.constprop.0+0x56>
 80046ee:	782c      	ldrb	r4, [r5, #0]
 80046f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80046f4:	2c58      	cmp	r4, #88	; 0x58
 80046f6:	d14d      	bne.n	8004794 <_strtol_l.constprop.0+0xec>
 80046f8:	786c      	ldrb	r4, [r5, #1]
 80046fa:	2310      	movs	r3, #16
 80046fc:	3502      	adds	r5, #2
 80046fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004702:	f108 38ff 	add.w	r8, r8, #4294967295
 8004706:	f04f 0c00 	mov.w	ip, #0
 800470a:	fbb8 f9f3 	udiv	r9, r8, r3
 800470e:	4666      	mov	r6, ip
 8004710:	fb03 8a19 	mls	sl, r3, r9, r8
 8004714:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004718:	f1be 0f09 	cmp.w	lr, #9
 800471c:	d816      	bhi.n	800474c <_strtol_l.constprop.0+0xa4>
 800471e:	4674      	mov	r4, lr
 8004720:	42a3      	cmp	r3, r4
 8004722:	dd24      	ble.n	800476e <_strtol_l.constprop.0+0xc6>
 8004724:	f1bc 0f00 	cmp.w	ip, #0
 8004728:	db1e      	blt.n	8004768 <_strtol_l.constprop.0+0xc0>
 800472a:	45b1      	cmp	r9, r6
 800472c:	d31c      	bcc.n	8004768 <_strtol_l.constprop.0+0xc0>
 800472e:	d101      	bne.n	8004734 <_strtol_l.constprop.0+0x8c>
 8004730:	45a2      	cmp	sl, r4
 8004732:	db19      	blt.n	8004768 <_strtol_l.constprop.0+0xc0>
 8004734:	fb06 4603 	mla	r6, r6, r3, r4
 8004738:	f04f 0c01 	mov.w	ip, #1
 800473c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004740:	e7e8      	b.n	8004714 <_strtol_l.constprop.0+0x6c>
 8004742:	2c2b      	cmp	r4, #43	; 0x2b
 8004744:	bf04      	itt	eq
 8004746:	782c      	ldrbeq	r4, [r5, #0]
 8004748:	1cb5      	addeq	r5, r6, #2
 800474a:	e7ca      	b.n	80046e2 <_strtol_l.constprop.0+0x3a>
 800474c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004750:	f1be 0f19 	cmp.w	lr, #25
 8004754:	d801      	bhi.n	800475a <_strtol_l.constprop.0+0xb2>
 8004756:	3c37      	subs	r4, #55	; 0x37
 8004758:	e7e2      	b.n	8004720 <_strtol_l.constprop.0+0x78>
 800475a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800475e:	f1be 0f19 	cmp.w	lr, #25
 8004762:	d804      	bhi.n	800476e <_strtol_l.constprop.0+0xc6>
 8004764:	3c57      	subs	r4, #87	; 0x57
 8004766:	e7db      	b.n	8004720 <_strtol_l.constprop.0+0x78>
 8004768:	f04f 3cff 	mov.w	ip, #4294967295
 800476c:	e7e6      	b.n	800473c <_strtol_l.constprop.0+0x94>
 800476e:	f1bc 0f00 	cmp.w	ip, #0
 8004772:	da05      	bge.n	8004780 <_strtol_l.constprop.0+0xd8>
 8004774:	2322      	movs	r3, #34	; 0x22
 8004776:	6003      	str	r3, [r0, #0]
 8004778:	4646      	mov	r6, r8
 800477a:	b942      	cbnz	r2, 800478e <_strtol_l.constprop.0+0xe6>
 800477c:	4630      	mov	r0, r6
 800477e:	e79e      	b.n	80046be <_strtol_l.constprop.0+0x16>
 8004780:	b107      	cbz	r7, 8004784 <_strtol_l.constprop.0+0xdc>
 8004782:	4276      	negs	r6, r6
 8004784:	2a00      	cmp	r2, #0
 8004786:	d0f9      	beq.n	800477c <_strtol_l.constprop.0+0xd4>
 8004788:	f1bc 0f00 	cmp.w	ip, #0
 800478c:	d000      	beq.n	8004790 <_strtol_l.constprop.0+0xe8>
 800478e:	1e69      	subs	r1, r5, #1
 8004790:	6011      	str	r1, [r2, #0]
 8004792:	e7f3      	b.n	800477c <_strtol_l.constprop.0+0xd4>
 8004794:	2430      	movs	r4, #48	; 0x30
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1b1      	bne.n	80046fe <_strtol_l.constprop.0+0x56>
 800479a:	2308      	movs	r3, #8
 800479c:	e7af      	b.n	80046fe <_strtol_l.constprop.0+0x56>
 800479e:	2c30      	cmp	r4, #48	; 0x30
 80047a0:	d0a5      	beq.n	80046ee <_strtol_l.constprop.0+0x46>
 80047a2:	230a      	movs	r3, #10
 80047a4:	e7ab      	b.n	80046fe <_strtol_l.constprop.0+0x56>
 80047a6:	bf00      	nop
 80047a8:	080076c1 	.word	0x080076c1

080047ac <_strtol_r>:
 80047ac:	f7ff bf7c 	b.w	80046a8 <_strtol_l.constprop.0>

080047b0 <quorem>:
 80047b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	6903      	ldr	r3, [r0, #16]
 80047b6:	690c      	ldr	r4, [r1, #16]
 80047b8:	42a3      	cmp	r3, r4
 80047ba:	4607      	mov	r7, r0
 80047bc:	f2c0 8081 	blt.w	80048c2 <quorem+0x112>
 80047c0:	3c01      	subs	r4, #1
 80047c2:	f101 0814 	add.w	r8, r1, #20
 80047c6:	f100 0514 	add.w	r5, r0, #20
 80047ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80047d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047d8:	3301      	adds	r3, #1
 80047da:	429a      	cmp	r2, r3
 80047dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80047e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80047e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80047e8:	d331      	bcc.n	800484e <quorem+0x9e>
 80047ea:	f04f 0e00 	mov.w	lr, #0
 80047ee:	4640      	mov	r0, r8
 80047f0:	46ac      	mov	ip, r5
 80047f2:	46f2      	mov	sl, lr
 80047f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80047f8:	b293      	uxth	r3, r2
 80047fa:	fb06 e303 	mla	r3, r6, r3, lr
 80047fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004802:	b29b      	uxth	r3, r3
 8004804:	ebaa 0303 	sub.w	r3, sl, r3
 8004808:	f8dc a000 	ldr.w	sl, [ip]
 800480c:	0c12      	lsrs	r2, r2, #16
 800480e:	fa13 f38a 	uxtah	r3, r3, sl
 8004812:	fb06 e202 	mla	r2, r6, r2, lr
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	9b00      	ldr	r3, [sp, #0]
 800481a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800481e:	b292      	uxth	r2, r2
 8004820:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004828:	f8bd 3000 	ldrh.w	r3, [sp]
 800482c:	4581      	cmp	r9, r0
 800482e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004832:	f84c 3b04 	str.w	r3, [ip], #4
 8004836:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800483a:	d2db      	bcs.n	80047f4 <quorem+0x44>
 800483c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004840:	b92b      	cbnz	r3, 800484e <quorem+0x9e>
 8004842:	9b01      	ldr	r3, [sp, #4]
 8004844:	3b04      	subs	r3, #4
 8004846:	429d      	cmp	r5, r3
 8004848:	461a      	mov	r2, r3
 800484a:	d32e      	bcc.n	80048aa <quorem+0xfa>
 800484c:	613c      	str	r4, [r7, #16]
 800484e:	4638      	mov	r0, r7
 8004850:	f001 fc90 	bl	8006174 <__mcmp>
 8004854:	2800      	cmp	r0, #0
 8004856:	db24      	blt.n	80048a2 <quorem+0xf2>
 8004858:	3601      	adds	r6, #1
 800485a:	4628      	mov	r0, r5
 800485c:	f04f 0c00 	mov.w	ip, #0
 8004860:	f858 2b04 	ldr.w	r2, [r8], #4
 8004864:	f8d0 e000 	ldr.w	lr, [r0]
 8004868:	b293      	uxth	r3, r2
 800486a:	ebac 0303 	sub.w	r3, ip, r3
 800486e:	0c12      	lsrs	r2, r2, #16
 8004870:	fa13 f38e 	uxtah	r3, r3, lr
 8004874:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800487c:	b29b      	uxth	r3, r3
 800487e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004882:	45c1      	cmp	r9, r8
 8004884:	f840 3b04 	str.w	r3, [r0], #4
 8004888:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800488c:	d2e8      	bcs.n	8004860 <quorem+0xb0>
 800488e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004896:	b922      	cbnz	r2, 80048a2 <quorem+0xf2>
 8004898:	3b04      	subs	r3, #4
 800489a:	429d      	cmp	r5, r3
 800489c:	461a      	mov	r2, r3
 800489e:	d30a      	bcc.n	80048b6 <quorem+0x106>
 80048a0:	613c      	str	r4, [r7, #16]
 80048a2:	4630      	mov	r0, r6
 80048a4:	b003      	add	sp, #12
 80048a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	3b04      	subs	r3, #4
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	d1cc      	bne.n	800484c <quorem+0x9c>
 80048b2:	3c01      	subs	r4, #1
 80048b4:	e7c7      	b.n	8004846 <quorem+0x96>
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	d1f0      	bne.n	80048a0 <quorem+0xf0>
 80048be:	3c01      	subs	r4, #1
 80048c0:	e7eb      	b.n	800489a <quorem+0xea>
 80048c2:	2000      	movs	r0, #0
 80048c4:	e7ee      	b.n	80048a4 <quorem+0xf4>
	...

080048c8 <_dtoa_r>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	ed2d 8b04 	vpush	{d8-d9}
 80048d0:	ec57 6b10 	vmov	r6, r7, d0
 80048d4:	b093      	sub	sp, #76	; 0x4c
 80048d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80048dc:	9106      	str	r1, [sp, #24]
 80048de:	ee10 aa10 	vmov	sl, s0
 80048e2:	4604      	mov	r4, r0
 80048e4:	9209      	str	r2, [sp, #36]	; 0x24
 80048e6:	930c      	str	r3, [sp, #48]	; 0x30
 80048e8:	46bb      	mov	fp, r7
 80048ea:	b975      	cbnz	r5, 800490a <_dtoa_r+0x42>
 80048ec:	2010      	movs	r0, #16
 80048ee:	f001 f94d 	bl	8005b8c <malloc>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6260      	str	r0, [r4, #36]	; 0x24
 80048f6:	b920      	cbnz	r0, 8004902 <_dtoa_r+0x3a>
 80048f8:	4ba7      	ldr	r3, [pc, #668]	; (8004b98 <_dtoa_r+0x2d0>)
 80048fa:	21ea      	movs	r1, #234	; 0xea
 80048fc:	48a7      	ldr	r0, [pc, #668]	; (8004b9c <_dtoa_r+0x2d4>)
 80048fe:	f002 f8bd 	bl	8006a7c <__assert_func>
 8004902:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004906:	6005      	str	r5, [r0, #0]
 8004908:	60c5      	str	r5, [r0, #12]
 800490a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	b151      	cbz	r1, 8004926 <_dtoa_r+0x5e>
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	604a      	str	r2, [r1, #4]
 8004914:	2301      	movs	r3, #1
 8004916:	4093      	lsls	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
 800491a:	4620      	mov	r0, r4
 800491c:	f001 f99e 	bl	8005c5c <_Bfree>
 8004920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	1e3b      	subs	r3, r7, #0
 8004928:	bfaa      	itet	ge
 800492a:	2300      	movge	r3, #0
 800492c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004930:	f8c8 3000 	strge.w	r3, [r8]
 8004934:	4b9a      	ldr	r3, [pc, #616]	; (8004ba0 <_dtoa_r+0x2d8>)
 8004936:	bfbc      	itt	lt
 8004938:	2201      	movlt	r2, #1
 800493a:	f8c8 2000 	strlt.w	r2, [r8]
 800493e:	ea33 030b 	bics.w	r3, r3, fp
 8004942:	d11b      	bne.n	800497c <_dtoa_r+0xb4>
 8004944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004946:	f242 730f 	movw	r3, #9999	; 0x270f
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004950:	4333      	orrs	r3, r6
 8004952:	f000 8592 	beq.w	800547a <_dtoa_r+0xbb2>
 8004956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004958:	b963      	cbnz	r3, 8004974 <_dtoa_r+0xac>
 800495a:	4b92      	ldr	r3, [pc, #584]	; (8004ba4 <_dtoa_r+0x2dc>)
 800495c:	e022      	b.n	80049a4 <_dtoa_r+0xdc>
 800495e:	4b92      	ldr	r3, [pc, #584]	; (8004ba8 <_dtoa_r+0x2e0>)
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	3308      	adds	r3, #8
 8004964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	9801      	ldr	r0, [sp, #4]
 800496a:	b013      	add	sp, #76	; 0x4c
 800496c:	ecbd 8b04 	vpop	{d8-d9}
 8004970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004974:	4b8b      	ldr	r3, [pc, #556]	; (8004ba4 <_dtoa_r+0x2dc>)
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	3303      	adds	r3, #3
 800497a:	e7f3      	b.n	8004964 <_dtoa_r+0x9c>
 800497c:	2200      	movs	r2, #0
 800497e:	2300      	movs	r3, #0
 8004980:	4650      	mov	r0, sl
 8004982:	4659      	mov	r1, fp
 8004984:	f7fc f8a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004988:	ec4b ab19 	vmov	d9, sl, fp
 800498c:	4680      	mov	r8, r0
 800498e:	b158      	cbz	r0, 80049a8 <_dtoa_r+0xe0>
 8004990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004992:	2301      	movs	r3, #1
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 856b 	beq.w	8005474 <_dtoa_r+0xbac>
 800499e:	4883      	ldr	r0, [pc, #524]	; (8004bac <_dtoa_r+0x2e4>)
 80049a0:	6018      	str	r0, [r3, #0]
 80049a2:	1e43      	subs	r3, r0, #1
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	e7df      	b.n	8004968 <_dtoa_r+0xa0>
 80049a8:	ec4b ab10 	vmov	d0, sl, fp
 80049ac:	aa10      	add	r2, sp, #64	; 0x40
 80049ae:	a911      	add	r1, sp, #68	; 0x44
 80049b0:	4620      	mov	r0, r4
 80049b2:	f001 fd01 	bl	80063b8 <__d2b>
 80049b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80049ba:	ee08 0a10 	vmov	s16, r0
 80049be:	2d00      	cmp	r5, #0
 80049c0:	f000 8084 	beq.w	8004acc <_dtoa_r+0x204>
 80049c4:	ee19 3a90 	vmov	r3, s19
 80049c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80049d0:	4656      	mov	r6, sl
 80049d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80049d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80049da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80049de:	4b74      	ldr	r3, [pc, #464]	; (8004bb0 <_dtoa_r+0x2e8>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	4630      	mov	r0, r6
 80049e4:	4639      	mov	r1, r7
 80049e6:	f7fb fc57 	bl	8000298 <__aeabi_dsub>
 80049ea:	a365      	add	r3, pc, #404	; (adr r3, 8004b80 <_dtoa_r+0x2b8>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fe0a 	bl	8000608 <__aeabi_dmul>
 80049f4:	a364      	add	r3, pc, #400	; (adr r3, 8004b88 <_dtoa_r+0x2c0>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f7fb fc4f 	bl	800029c <__adddf3>
 80049fe:	4606      	mov	r6, r0
 8004a00:	4628      	mov	r0, r5
 8004a02:	460f      	mov	r7, r1
 8004a04:	f7fb fd96 	bl	8000534 <__aeabi_i2d>
 8004a08:	a361      	add	r3, pc, #388	; (adr r3, 8004b90 <_dtoa_r+0x2c8>)
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f7fb fdfb 	bl	8000608 <__aeabi_dmul>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4630      	mov	r0, r6
 8004a18:	4639      	mov	r1, r7
 8004a1a:	f7fb fc3f 	bl	800029c <__adddf3>
 8004a1e:	4606      	mov	r6, r0
 8004a20:	460f      	mov	r7, r1
 8004a22:	f7fc f8a1 	bl	8000b68 <__aeabi_d2iz>
 8004a26:	2200      	movs	r2, #0
 8004a28:	9000      	str	r0, [sp, #0]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4639      	mov	r1, r7
 8004a30:	f7fc f85c 	bl	8000aec <__aeabi_dcmplt>
 8004a34:	b150      	cbz	r0, 8004a4c <_dtoa_r+0x184>
 8004a36:	9800      	ldr	r0, [sp, #0]
 8004a38:	f7fb fd7c 	bl	8000534 <__aeabi_i2d>
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	463b      	mov	r3, r7
 8004a40:	f7fc f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a44:	b910      	cbnz	r0, 8004a4c <_dtoa_r+0x184>
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	9b00      	ldr	r3, [sp, #0]
 8004a4e:	2b16      	cmp	r3, #22
 8004a50:	d85a      	bhi.n	8004b08 <_dtoa_r+0x240>
 8004a52:	9a00      	ldr	r2, [sp, #0]
 8004a54:	4b57      	ldr	r3, [pc, #348]	; (8004bb4 <_dtoa_r+0x2ec>)
 8004a56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	ec51 0b19 	vmov	r0, r1, d9
 8004a62:	f7fc f843 	bl	8000aec <__aeabi_dcmplt>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d050      	beq.n	8004b0c <_dtoa_r+0x244>
 8004a6a:	9b00      	ldr	r3, [sp, #0]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2300      	movs	r3, #0
 8004a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a76:	1b5d      	subs	r5, r3, r5
 8004a78:	1e6b      	subs	r3, r5, #1
 8004a7a:	9305      	str	r3, [sp, #20]
 8004a7c:	bf45      	ittet	mi
 8004a7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004a82:	9304      	strmi	r3, [sp, #16]
 8004a84:	2300      	movpl	r3, #0
 8004a86:	2300      	movmi	r3, #0
 8004a88:	bf4c      	ite	mi
 8004a8a:	9305      	strmi	r3, [sp, #20]
 8004a8c:	9304      	strpl	r3, [sp, #16]
 8004a8e:	9b00      	ldr	r3, [sp, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	db3d      	blt.n	8004b10 <_dtoa_r+0x248>
 8004a94:	9b05      	ldr	r3, [sp, #20]
 8004a96:	9a00      	ldr	r2, [sp, #0]
 8004a98:	920a      	str	r2, [sp, #40]	; 0x28
 8004a9a:	4413      	add	r3, r2
 8004a9c:	9305      	str	r3, [sp, #20]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9307      	str	r3, [sp, #28]
 8004aa2:	9b06      	ldr	r3, [sp, #24]
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	f200 8089 	bhi.w	8004bbc <_dtoa_r+0x2f4>
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	bfc4      	itt	gt
 8004aae:	3b04      	subgt	r3, #4
 8004ab0:	9306      	strgt	r3, [sp, #24]
 8004ab2:	9b06      	ldr	r3, [sp, #24]
 8004ab4:	f1a3 0302 	sub.w	r3, r3, #2
 8004ab8:	bfcc      	ite	gt
 8004aba:	2500      	movgt	r5, #0
 8004abc:	2501      	movle	r5, #1
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	f200 8087 	bhi.w	8004bd2 <_dtoa_r+0x30a>
 8004ac4:	e8df f003 	tbb	[pc, r3]
 8004ac8:	59383a2d 	.word	0x59383a2d
 8004acc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004ad0:	441d      	add	r5, r3
 8004ad2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	bfc1      	itttt	gt
 8004ada:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ade:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004ae2:	fa0b f303 	lslgt.w	r3, fp, r3
 8004ae6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004aea:	bfda      	itte	le
 8004aec:	f1c3 0320 	rsble	r3, r3, #32
 8004af0:	fa06 f003 	lslle.w	r0, r6, r3
 8004af4:	4318      	orrgt	r0, r3
 8004af6:	f7fb fd0d 	bl	8000514 <__aeabi_ui2d>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4606      	mov	r6, r0
 8004afe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004b02:	3d01      	subs	r5, #1
 8004b04:	930e      	str	r3, [sp, #56]	; 0x38
 8004b06:	e76a      	b.n	80049de <_dtoa_r+0x116>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e7b2      	b.n	8004a72 <_dtoa_r+0x1aa>
 8004b0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004b0e:	e7b1      	b.n	8004a74 <_dtoa_r+0x1ac>
 8004b10:	9b04      	ldr	r3, [sp, #16]
 8004b12:	9a00      	ldr	r2, [sp, #0]
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	4253      	negs	r3, r2
 8004b1a:	9307      	str	r3, [sp, #28]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b20:	e7bf      	b.n	8004aa2 <_dtoa_r+0x1da>
 8004b22:	2300      	movs	r3, #0
 8004b24:	9308      	str	r3, [sp, #32]
 8004b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dc55      	bgt.n	8004bd8 <_dtoa_r+0x310>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b32:	461a      	mov	r2, r3
 8004b34:	9209      	str	r2, [sp, #36]	; 0x24
 8004b36:	e00c      	b.n	8004b52 <_dtoa_r+0x28a>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e7f3      	b.n	8004b24 <_dtoa_r+0x25c>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b40:	9308      	str	r3, [sp, #32]
 8004b42:	9b00      	ldr	r3, [sp, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	9302      	str	r3, [sp, #8]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	bfb8      	it	lt
 8004b50:	2301      	movlt	r3, #1
 8004b52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004b54:	2200      	movs	r2, #0
 8004b56:	6042      	str	r2, [r0, #4]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	f102 0614 	add.w	r6, r2, #20
 8004b5e:	429e      	cmp	r6, r3
 8004b60:	6841      	ldr	r1, [r0, #4]
 8004b62:	d93d      	bls.n	8004be0 <_dtoa_r+0x318>
 8004b64:	4620      	mov	r0, r4
 8004b66:	f001 f839 	bl	8005bdc <_Balloc>
 8004b6a:	9001      	str	r0, [sp, #4]
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d13b      	bne.n	8004be8 <_dtoa_r+0x320>
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <_dtoa_r+0x2f0>)
 8004b72:	4602      	mov	r2, r0
 8004b74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b78:	e6c0      	b.n	80048fc <_dtoa_r+0x34>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7df      	b.n	8004b3e <_dtoa_r+0x276>
 8004b7e:	bf00      	nop
 8004b80:	636f4361 	.word	0x636f4361
 8004b84:	3fd287a7 	.word	0x3fd287a7
 8004b88:	8b60c8b3 	.word	0x8b60c8b3
 8004b8c:	3fc68a28 	.word	0x3fc68a28
 8004b90:	509f79fb 	.word	0x509f79fb
 8004b94:	3fd34413 	.word	0x3fd34413
 8004b98:	080077ce 	.word	0x080077ce
 8004b9c:	080077e5 	.word	0x080077e5
 8004ba0:	7ff00000 	.word	0x7ff00000
 8004ba4:	080077ca 	.word	0x080077ca
 8004ba8:	080077c1 	.word	0x080077c1
 8004bac:	08007641 	.word	0x08007641
 8004bb0:	3ff80000 	.word	0x3ff80000
 8004bb4:	08007950 	.word	0x08007950
 8004bb8:	08007840 	.word	0x08007840
 8004bbc:	2501      	movs	r5, #1
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9306      	str	r3, [sp, #24]
 8004bc2:	9508      	str	r5, [sp, #32]
 8004bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2312      	movs	r3, #18
 8004bd0:	e7b0      	b.n	8004b34 <_dtoa_r+0x26c>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	9308      	str	r3, [sp, #32]
 8004bd6:	e7f5      	b.n	8004bc4 <_dtoa_r+0x2fc>
 8004bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004bde:	e7b8      	b.n	8004b52 <_dtoa_r+0x28a>
 8004be0:	3101      	adds	r1, #1
 8004be2:	6041      	str	r1, [r0, #4]
 8004be4:	0052      	lsls	r2, r2, #1
 8004be6:	e7b8      	b.n	8004b5a <_dtoa_r+0x292>
 8004be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bea:	9a01      	ldr	r2, [sp, #4]
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	2b0e      	cmp	r3, #14
 8004bf2:	f200 809d 	bhi.w	8004d30 <_dtoa_r+0x468>
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	f000 809a 	beq.w	8004d30 <_dtoa_r+0x468>
 8004bfc:	9b00      	ldr	r3, [sp, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd32      	ble.n	8004c68 <_dtoa_r+0x3a0>
 8004c02:	4ab7      	ldr	r2, [pc, #732]	; (8004ee0 <_dtoa_r+0x618>)
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c10:	9b00      	ldr	r3, [sp, #0]
 8004c12:	05d8      	lsls	r0, r3, #23
 8004c14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004c18:	d516      	bpl.n	8004c48 <_dtoa_r+0x380>
 8004c1a:	4bb2      	ldr	r3, [pc, #712]	; (8004ee4 <_dtoa_r+0x61c>)
 8004c1c:	ec51 0b19 	vmov	r0, r1, d9
 8004c20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c24:	f7fb fe1a 	bl	800085c <__aeabi_ddiv>
 8004c28:	f007 070f 	and.w	r7, r7, #15
 8004c2c:	4682      	mov	sl, r0
 8004c2e:	468b      	mov	fp, r1
 8004c30:	2503      	movs	r5, #3
 8004c32:	4eac      	ldr	r6, [pc, #688]	; (8004ee4 <_dtoa_r+0x61c>)
 8004c34:	b957      	cbnz	r7, 8004c4c <_dtoa_r+0x384>
 8004c36:	4642      	mov	r2, r8
 8004c38:	464b      	mov	r3, r9
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	f7fb fe0d 	bl	800085c <__aeabi_ddiv>
 8004c42:	4682      	mov	sl, r0
 8004c44:	468b      	mov	fp, r1
 8004c46:	e028      	b.n	8004c9a <_dtoa_r+0x3d2>
 8004c48:	2502      	movs	r5, #2
 8004c4a:	e7f2      	b.n	8004c32 <_dtoa_r+0x36a>
 8004c4c:	07f9      	lsls	r1, r7, #31
 8004c4e:	d508      	bpl.n	8004c62 <_dtoa_r+0x39a>
 8004c50:	4640      	mov	r0, r8
 8004c52:	4649      	mov	r1, r9
 8004c54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c58:	f7fb fcd6 	bl	8000608 <__aeabi_dmul>
 8004c5c:	3501      	adds	r5, #1
 8004c5e:	4680      	mov	r8, r0
 8004c60:	4689      	mov	r9, r1
 8004c62:	107f      	asrs	r7, r7, #1
 8004c64:	3608      	adds	r6, #8
 8004c66:	e7e5      	b.n	8004c34 <_dtoa_r+0x36c>
 8004c68:	f000 809b 	beq.w	8004da2 <_dtoa_r+0x4da>
 8004c6c:	9b00      	ldr	r3, [sp, #0]
 8004c6e:	4f9d      	ldr	r7, [pc, #628]	; (8004ee4 <_dtoa_r+0x61c>)
 8004c70:	425e      	negs	r6, r3
 8004c72:	4b9b      	ldr	r3, [pc, #620]	; (8004ee0 <_dtoa_r+0x618>)
 8004c74:	f006 020f 	and.w	r2, r6, #15
 8004c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	ec51 0b19 	vmov	r0, r1, d9
 8004c84:	f7fb fcc0 	bl	8000608 <__aeabi_dmul>
 8004c88:	1136      	asrs	r6, r6, #4
 8004c8a:	4682      	mov	sl, r0
 8004c8c:	468b      	mov	fp, r1
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2502      	movs	r5, #2
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d17a      	bne.n	8004d8c <_dtoa_r+0x4c4>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1d3      	bne.n	8004c42 <_dtoa_r+0x37a>
 8004c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8082 	beq.w	8004da6 <_dtoa_r+0x4de>
 8004ca2:	4b91      	ldr	r3, [pc, #580]	; (8004ee8 <_dtoa_r+0x620>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	4659      	mov	r1, fp
 8004caa:	f7fb ff1f 	bl	8000aec <__aeabi_dcmplt>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d079      	beq.n	8004da6 <_dtoa_r+0x4de>
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d076      	beq.n	8004da6 <_dtoa_r+0x4de>
 8004cb8:	9b02      	ldr	r3, [sp, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dd36      	ble.n	8004d2c <_dtoa_r+0x464>
 8004cbe:	9b00      	ldr	r3, [sp, #0]
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	4659      	mov	r1, fp
 8004cc4:	1e5f      	subs	r7, r3, #1
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4b88      	ldr	r3, [pc, #544]	; (8004eec <_dtoa_r+0x624>)
 8004cca:	f7fb fc9d 	bl	8000608 <__aeabi_dmul>
 8004cce:	9e02      	ldr	r6, [sp, #8]
 8004cd0:	4682      	mov	sl, r0
 8004cd2:	468b      	mov	fp, r1
 8004cd4:	3501      	adds	r5, #1
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f7fb fc2c 	bl	8000534 <__aeabi_i2d>
 8004cdc:	4652      	mov	r2, sl
 8004cde:	465b      	mov	r3, fp
 8004ce0:	f7fb fc92 	bl	8000608 <__aeabi_dmul>
 8004ce4:	4b82      	ldr	r3, [pc, #520]	; (8004ef0 <_dtoa_r+0x628>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f7fb fad8 	bl	800029c <__adddf3>
 8004cec:	46d0      	mov	r8, sl
 8004cee:	46d9      	mov	r9, fp
 8004cf0:	4682      	mov	sl, r0
 8004cf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	d158      	bne.n	8004dac <_dtoa_r+0x4e4>
 8004cfa:	4b7e      	ldr	r3, [pc, #504]	; (8004ef4 <_dtoa_r+0x62c>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4640      	mov	r0, r8
 8004d00:	4649      	mov	r1, r9
 8004d02:	f7fb fac9 	bl	8000298 <__aeabi_dsub>
 8004d06:	4652      	mov	r2, sl
 8004d08:	465b      	mov	r3, fp
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	4689      	mov	r9, r1
 8004d0e:	f7fb ff0b 	bl	8000b28 <__aeabi_dcmpgt>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f040 8295 	bne.w	8005242 <_dtoa_r+0x97a>
 8004d18:	4652      	mov	r2, sl
 8004d1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004d1e:	4640      	mov	r0, r8
 8004d20:	4649      	mov	r1, r9
 8004d22:	f7fb fee3 	bl	8000aec <__aeabi_dcmplt>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f040 8289 	bne.w	800523e <_dtoa_r+0x976>
 8004d2c:	ec5b ab19 	vmov	sl, fp, d9
 8004d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f2c0 8148 	blt.w	8004fc8 <_dtoa_r+0x700>
 8004d38:	9a00      	ldr	r2, [sp, #0]
 8004d3a:	2a0e      	cmp	r2, #14
 8004d3c:	f300 8144 	bgt.w	8004fc8 <_dtoa_r+0x700>
 8004d40:	4b67      	ldr	r3, [pc, #412]	; (8004ee0 <_dtoa_r+0x618>)
 8004d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f280 80d5 	bge.w	8004efc <_dtoa_r+0x634>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f300 80d1 	bgt.w	8004efc <_dtoa_r+0x634>
 8004d5a:	f040 826f 	bne.w	800523c <_dtoa_r+0x974>
 8004d5e:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <_dtoa_r+0x62c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	4640      	mov	r0, r8
 8004d64:	4649      	mov	r1, r9
 8004d66:	f7fb fc4f 	bl	8000608 <__aeabi_dmul>
 8004d6a:	4652      	mov	r2, sl
 8004d6c:	465b      	mov	r3, fp
 8004d6e:	f7fb fed1 	bl	8000b14 <__aeabi_dcmpge>
 8004d72:	9e03      	ldr	r6, [sp, #12]
 8004d74:	4637      	mov	r7, r6
 8004d76:	2800      	cmp	r0, #0
 8004d78:	f040 8245 	bne.w	8005206 <_dtoa_r+0x93e>
 8004d7c:	9d01      	ldr	r5, [sp, #4]
 8004d7e:	2331      	movs	r3, #49	; 0x31
 8004d80:	f805 3b01 	strb.w	r3, [r5], #1
 8004d84:	9b00      	ldr	r3, [sp, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	e240      	b.n	800520e <_dtoa_r+0x946>
 8004d8c:	07f2      	lsls	r2, r6, #31
 8004d8e:	d505      	bpl.n	8004d9c <_dtoa_r+0x4d4>
 8004d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d94:	f7fb fc38 	bl	8000608 <__aeabi_dmul>
 8004d98:	3501      	adds	r5, #1
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	1076      	asrs	r6, r6, #1
 8004d9e:	3708      	adds	r7, #8
 8004da0:	e777      	b.n	8004c92 <_dtoa_r+0x3ca>
 8004da2:	2502      	movs	r5, #2
 8004da4:	e779      	b.n	8004c9a <_dtoa_r+0x3d2>
 8004da6:	9f00      	ldr	r7, [sp, #0]
 8004da8:	9e03      	ldr	r6, [sp, #12]
 8004daa:	e794      	b.n	8004cd6 <_dtoa_r+0x40e>
 8004dac:	9901      	ldr	r1, [sp, #4]
 8004dae:	4b4c      	ldr	r3, [pc, #304]	; (8004ee0 <_dtoa_r+0x618>)
 8004db0:	4431      	add	r1, r6
 8004db2:	910d      	str	r1, [sp, #52]	; 0x34
 8004db4:	9908      	ldr	r1, [sp, #32]
 8004db6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004dba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	d043      	beq.n	8004e4a <_dtoa_r+0x582>
 8004dc2:	494d      	ldr	r1, [pc, #308]	; (8004ef8 <_dtoa_r+0x630>)
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7fb fd49 	bl	800085c <__aeabi_ddiv>
 8004dca:	4652      	mov	r2, sl
 8004dcc:	465b      	mov	r3, fp
 8004dce:	f7fb fa63 	bl	8000298 <__aeabi_dsub>
 8004dd2:	9d01      	ldr	r5, [sp, #4]
 8004dd4:	4682      	mov	sl, r0
 8004dd6:	468b      	mov	fp, r1
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f7fb fec4 	bl	8000b68 <__aeabi_d2iz>
 8004de0:	4606      	mov	r6, r0
 8004de2:	f7fb fba7 	bl	8000534 <__aeabi_i2d>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4640      	mov	r0, r8
 8004dec:	4649      	mov	r1, r9
 8004dee:	f7fb fa53 	bl	8000298 <__aeabi_dsub>
 8004df2:	3630      	adds	r6, #48	; 0x30
 8004df4:	f805 6b01 	strb.w	r6, [r5], #1
 8004df8:	4652      	mov	r2, sl
 8004dfa:	465b      	mov	r3, fp
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	4689      	mov	r9, r1
 8004e00:	f7fb fe74 	bl	8000aec <__aeabi_dcmplt>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d163      	bne.n	8004ed0 <_dtoa_r+0x608>
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	4936      	ldr	r1, [pc, #216]	; (8004ee8 <_dtoa_r+0x620>)
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f7fb fa42 	bl	8000298 <__aeabi_dsub>
 8004e14:	4652      	mov	r2, sl
 8004e16:	465b      	mov	r3, fp
 8004e18:	f7fb fe68 	bl	8000aec <__aeabi_dcmplt>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f040 80b5 	bne.w	8004f8c <_dtoa_r+0x6c4>
 8004e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e24:	429d      	cmp	r5, r3
 8004e26:	d081      	beq.n	8004d2c <_dtoa_r+0x464>
 8004e28:	4b30      	ldr	r3, [pc, #192]	; (8004eec <_dtoa_r+0x624>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	4659      	mov	r1, fp
 8004e30:	f7fb fbea 	bl	8000608 <__aeabi_dmul>
 8004e34:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <_dtoa_r+0x624>)
 8004e36:	4682      	mov	sl, r0
 8004e38:	468b      	mov	fp, r1
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f7fb fbe2 	bl	8000608 <__aeabi_dmul>
 8004e44:	4680      	mov	r8, r0
 8004e46:	4689      	mov	r9, r1
 8004e48:	e7c6      	b.n	8004dd8 <_dtoa_r+0x510>
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	f7fb fbdb 	bl	8000608 <__aeabi_dmul>
 8004e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e54:	9d01      	ldr	r5, [sp, #4]
 8004e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e58:	4682      	mov	sl, r0
 8004e5a:	468b      	mov	fp, r1
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	4640      	mov	r0, r8
 8004e60:	f7fb fe82 	bl	8000b68 <__aeabi_d2iz>
 8004e64:	4606      	mov	r6, r0
 8004e66:	f7fb fb65 	bl	8000534 <__aeabi_i2d>
 8004e6a:	3630      	adds	r6, #48	; 0x30
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fa10 	bl	8000298 <__aeabi_dsub>
 8004e78:	f805 6b01 	strb.w	r6, [r5], #1
 8004e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e7e:	429d      	cmp	r5, r3
 8004e80:	4680      	mov	r8, r0
 8004e82:	4689      	mov	r9, r1
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	d124      	bne.n	8004ed4 <_dtoa_r+0x60c>
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <_dtoa_r+0x630>)
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	4659      	mov	r1, fp
 8004e90:	f7fb fa04 	bl	800029c <__adddf3>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	f7fb fe44 	bl	8000b28 <__aeabi_dcmpgt>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d173      	bne.n	8004f8c <_dtoa_r+0x6c4>
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	465b      	mov	r3, fp
 8004ea8:	4913      	ldr	r1, [pc, #76]	; (8004ef8 <_dtoa_r+0x630>)
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7fb f9f4 	bl	8000298 <__aeabi_dsub>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	f7fb fe18 	bl	8000aec <__aeabi_dcmplt>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f43f af35 	beq.w	8004d2c <_dtoa_r+0x464>
 8004ec2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004ec4:	1e6b      	subs	r3, r5, #1
 8004ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ec8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ecc:	2b30      	cmp	r3, #48	; 0x30
 8004ece:	d0f8      	beq.n	8004ec2 <_dtoa_r+0x5fa>
 8004ed0:	9700      	str	r7, [sp, #0]
 8004ed2:	e049      	b.n	8004f68 <_dtoa_r+0x6a0>
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <_dtoa_r+0x624>)
 8004ed6:	f7fb fb97 	bl	8000608 <__aeabi_dmul>
 8004eda:	4680      	mov	r8, r0
 8004edc:	4689      	mov	r9, r1
 8004ede:	e7bd      	b.n	8004e5c <_dtoa_r+0x594>
 8004ee0:	08007950 	.word	0x08007950
 8004ee4:	08007928 	.word	0x08007928
 8004ee8:	3ff00000 	.word	0x3ff00000
 8004eec:	40240000 	.word	0x40240000
 8004ef0:	401c0000 	.word	0x401c0000
 8004ef4:	40140000 	.word	0x40140000
 8004ef8:	3fe00000 	.word	0x3fe00000
 8004efc:	9d01      	ldr	r5, [sp, #4]
 8004efe:	4656      	mov	r6, sl
 8004f00:	465f      	mov	r7, fp
 8004f02:	4642      	mov	r2, r8
 8004f04:	464b      	mov	r3, r9
 8004f06:	4630      	mov	r0, r6
 8004f08:	4639      	mov	r1, r7
 8004f0a:	f7fb fca7 	bl	800085c <__aeabi_ddiv>
 8004f0e:	f7fb fe2b 	bl	8000b68 <__aeabi_d2iz>
 8004f12:	4682      	mov	sl, r0
 8004f14:	f7fb fb0e 	bl	8000534 <__aeabi_i2d>
 8004f18:	4642      	mov	r2, r8
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	f7fb fb74 	bl	8000608 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4630      	mov	r0, r6
 8004f26:	4639      	mov	r1, r7
 8004f28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004f2c:	f7fb f9b4 	bl	8000298 <__aeabi_dsub>
 8004f30:	f805 6b01 	strb.w	r6, [r5], #1
 8004f34:	9e01      	ldr	r6, [sp, #4]
 8004f36:	9f03      	ldr	r7, [sp, #12]
 8004f38:	1bae      	subs	r6, r5, r6
 8004f3a:	42b7      	cmp	r7, r6
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	d135      	bne.n	8004fae <_dtoa_r+0x6e6>
 8004f42:	f7fb f9ab 	bl	800029c <__adddf3>
 8004f46:	4642      	mov	r2, r8
 8004f48:	464b      	mov	r3, r9
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1
 8004f4e:	f7fb fdeb 	bl	8000b28 <__aeabi_dcmpgt>
 8004f52:	b9d0      	cbnz	r0, 8004f8a <_dtoa_r+0x6c2>
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f60:	b110      	cbz	r0, 8004f68 <_dtoa_r+0x6a0>
 8004f62:	f01a 0f01 	tst.w	sl, #1
 8004f66:	d110      	bne.n	8004f8a <_dtoa_r+0x6c2>
 8004f68:	4620      	mov	r0, r4
 8004f6a:	ee18 1a10 	vmov	r1, s16
 8004f6e:	f000 fe75 	bl	8005c5c <_Bfree>
 8004f72:	2300      	movs	r3, #0
 8004f74:	9800      	ldr	r0, [sp, #0]
 8004f76:	702b      	strb	r3, [r5, #0]
 8004f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	6018      	str	r0, [r3, #0]
 8004f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f43f acf1 	beq.w	8004968 <_dtoa_r+0xa0>
 8004f86:	601d      	str	r5, [r3, #0]
 8004f88:	e4ee      	b.n	8004968 <_dtoa_r+0xa0>
 8004f8a:	9f00      	ldr	r7, [sp, #0]
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	461d      	mov	r5, r3
 8004f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f94:	2a39      	cmp	r2, #57	; 0x39
 8004f96:	d106      	bne.n	8004fa6 <_dtoa_r+0x6de>
 8004f98:	9a01      	ldr	r2, [sp, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d1f7      	bne.n	8004f8e <_dtoa_r+0x6c6>
 8004f9e:	9901      	ldr	r1, [sp, #4]
 8004fa0:	2230      	movs	r2, #48	; 0x30
 8004fa2:	3701      	adds	r7, #1
 8004fa4:	700a      	strb	r2, [r1, #0]
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	3201      	adds	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e790      	b.n	8004ed0 <_dtoa_r+0x608>
 8004fae:	4ba6      	ldr	r3, [pc, #664]	; (8005248 <_dtoa_r+0x980>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f7fb fb29 	bl	8000608 <__aeabi_dmul>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	f7fb fd8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d09d      	beq.n	8004f02 <_dtoa_r+0x63a>
 8004fc6:	e7cf      	b.n	8004f68 <_dtoa_r+0x6a0>
 8004fc8:	9a08      	ldr	r2, [sp, #32]
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	f000 80d7 	beq.w	800517e <_dtoa_r+0x8b6>
 8004fd0:	9a06      	ldr	r2, [sp, #24]
 8004fd2:	2a01      	cmp	r2, #1
 8004fd4:	f300 80ba 	bgt.w	800514c <_dtoa_r+0x884>
 8004fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fda:	2a00      	cmp	r2, #0
 8004fdc:	f000 80b2 	beq.w	8005144 <_dtoa_r+0x87c>
 8004fe0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004fe4:	9e07      	ldr	r6, [sp, #28]
 8004fe6:	9d04      	ldr	r5, [sp, #16]
 8004fe8:	9a04      	ldr	r2, [sp, #16]
 8004fea:	441a      	add	r2, r3
 8004fec:	9204      	str	r2, [sp, #16]
 8004fee:	9a05      	ldr	r2, [sp, #20]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	441a      	add	r2, r3
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	9205      	str	r2, [sp, #20]
 8004ff8:	f000 ff32 	bl	8005e60 <__i2b>
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	dd0c      	ble.n	800501c <_dtoa_r+0x754>
 8005002:	9b05      	ldr	r3, [sp, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	dd09      	ble.n	800501c <_dtoa_r+0x754>
 8005008:	42ab      	cmp	r3, r5
 800500a:	9a04      	ldr	r2, [sp, #16]
 800500c:	bfa8      	it	ge
 800500e:	462b      	movge	r3, r5
 8005010:	1ad2      	subs	r2, r2, r3
 8005012:	9204      	str	r2, [sp, #16]
 8005014:	9a05      	ldr	r2, [sp, #20]
 8005016:	1aed      	subs	r5, r5, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	9305      	str	r3, [sp, #20]
 800501c:	9b07      	ldr	r3, [sp, #28]
 800501e:	b31b      	cbz	r3, 8005068 <_dtoa_r+0x7a0>
 8005020:	9b08      	ldr	r3, [sp, #32]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80af 	beq.w	8005186 <_dtoa_r+0x8be>
 8005028:	2e00      	cmp	r6, #0
 800502a:	dd13      	ble.n	8005054 <_dtoa_r+0x78c>
 800502c:	4639      	mov	r1, r7
 800502e:	4632      	mov	r2, r6
 8005030:	4620      	mov	r0, r4
 8005032:	f000 ffd5 	bl	8005fe0 <__pow5mult>
 8005036:	ee18 2a10 	vmov	r2, s16
 800503a:	4601      	mov	r1, r0
 800503c:	4607      	mov	r7, r0
 800503e:	4620      	mov	r0, r4
 8005040:	f000 ff24 	bl	8005e8c <__multiply>
 8005044:	ee18 1a10 	vmov	r1, s16
 8005048:	4680      	mov	r8, r0
 800504a:	4620      	mov	r0, r4
 800504c:	f000 fe06 	bl	8005c5c <_Bfree>
 8005050:	ee08 8a10 	vmov	s16, r8
 8005054:	9b07      	ldr	r3, [sp, #28]
 8005056:	1b9a      	subs	r2, r3, r6
 8005058:	d006      	beq.n	8005068 <_dtoa_r+0x7a0>
 800505a:	ee18 1a10 	vmov	r1, s16
 800505e:	4620      	mov	r0, r4
 8005060:	f000 ffbe 	bl	8005fe0 <__pow5mult>
 8005064:	ee08 0a10 	vmov	s16, r0
 8005068:	2101      	movs	r1, #1
 800506a:	4620      	mov	r0, r4
 800506c:	f000 fef8 	bl	8005e60 <__i2b>
 8005070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	4606      	mov	r6, r0
 8005076:	f340 8088 	ble.w	800518a <_dtoa_r+0x8c2>
 800507a:	461a      	mov	r2, r3
 800507c:	4601      	mov	r1, r0
 800507e:	4620      	mov	r0, r4
 8005080:	f000 ffae 	bl	8005fe0 <__pow5mult>
 8005084:	9b06      	ldr	r3, [sp, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	4606      	mov	r6, r0
 800508a:	f340 8081 	ble.w	8005190 <_dtoa_r+0x8c8>
 800508e:	f04f 0800 	mov.w	r8, #0
 8005092:	6933      	ldr	r3, [r6, #16]
 8005094:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005098:	6918      	ldr	r0, [r3, #16]
 800509a:	f000 fe91 	bl	8005dc0 <__hi0bits>
 800509e:	f1c0 0020 	rsb	r0, r0, #32
 80050a2:	9b05      	ldr	r3, [sp, #20]
 80050a4:	4418      	add	r0, r3
 80050a6:	f010 001f 	ands.w	r0, r0, #31
 80050aa:	f000 8092 	beq.w	80051d2 <_dtoa_r+0x90a>
 80050ae:	f1c0 0320 	rsb	r3, r0, #32
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	f340 808a 	ble.w	80051cc <_dtoa_r+0x904>
 80050b8:	f1c0 001c 	rsb	r0, r0, #28
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	4403      	add	r3, r0
 80050c0:	9304      	str	r3, [sp, #16]
 80050c2:	9b05      	ldr	r3, [sp, #20]
 80050c4:	4403      	add	r3, r0
 80050c6:	4405      	add	r5, r0
 80050c8:	9305      	str	r3, [sp, #20]
 80050ca:	9b04      	ldr	r3, [sp, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dd07      	ble.n	80050e0 <_dtoa_r+0x818>
 80050d0:	ee18 1a10 	vmov	r1, s16
 80050d4:	461a      	mov	r2, r3
 80050d6:	4620      	mov	r0, r4
 80050d8:	f000 ffdc 	bl	8006094 <__lshift>
 80050dc:	ee08 0a10 	vmov	s16, r0
 80050e0:	9b05      	ldr	r3, [sp, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dd05      	ble.n	80050f2 <_dtoa_r+0x82a>
 80050e6:	4631      	mov	r1, r6
 80050e8:	461a      	mov	r2, r3
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 ffd2 	bl	8006094 <__lshift>
 80050f0:	4606      	mov	r6, r0
 80050f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d06e      	beq.n	80051d6 <_dtoa_r+0x90e>
 80050f8:	ee18 0a10 	vmov	r0, s16
 80050fc:	4631      	mov	r1, r6
 80050fe:	f001 f839 	bl	8006174 <__mcmp>
 8005102:	2800      	cmp	r0, #0
 8005104:	da67      	bge.n	80051d6 <_dtoa_r+0x90e>
 8005106:	9b00      	ldr	r3, [sp, #0]
 8005108:	3b01      	subs	r3, #1
 800510a:	ee18 1a10 	vmov	r1, s16
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	220a      	movs	r2, #10
 8005112:	2300      	movs	r3, #0
 8005114:	4620      	mov	r0, r4
 8005116:	f000 fdc3 	bl	8005ca0 <__multadd>
 800511a:	9b08      	ldr	r3, [sp, #32]
 800511c:	ee08 0a10 	vmov	s16, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 81b1 	beq.w	8005488 <_dtoa_r+0xbc0>
 8005126:	2300      	movs	r3, #0
 8005128:	4639      	mov	r1, r7
 800512a:	220a      	movs	r2, #10
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fdb7 	bl	8005ca0 <__multadd>
 8005132:	9b02      	ldr	r3, [sp, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	4607      	mov	r7, r0
 8005138:	f300 808e 	bgt.w	8005258 <_dtoa_r+0x990>
 800513c:	9b06      	ldr	r3, [sp, #24]
 800513e:	2b02      	cmp	r3, #2
 8005140:	dc51      	bgt.n	80051e6 <_dtoa_r+0x91e>
 8005142:	e089      	b.n	8005258 <_dtoa_r+0x990>
 8005144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800514a:	e74b      	b.n	8004fe4 <_dtoa_r+0x71c>
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	1e5e      	subs	r6, r3, #1
 8005150:	9b07      	ldr	r3, [sp, #28]
 8005152:	42b3      	cmp	r3, r6
 8005154:	bfbf      	itttt	lt
 8005156:	9b07      	ldrlt	r3, [sp, #28]
 8005158:	9607      	strlt	r6, [sp, #28]
 800515a:	1af2      	sublt	r2, r6, r3
 800515c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800515e:	bfb6      	itet	lt
 8005160:	189b      	addlt	r3, r3, r2
 8005162:	1b9e      	subge	r6, r3, r6
 8005164:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	bfb8      	it	lt
 800516a:	2600      	movlt	r6, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	bfb7      	itett	lt
 8005170:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005174:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005178:	1a9d      	sublt	r5, r3, r2
 800517a:	2300      	movlt	r3, #0
 800517c:	e734      	b.n	8004fe8 <_dtoa_r+0x720>
 800517e:	9e07      	ldr	r6, [sp, #28]
 8005180:	9d04      	ldr	r5, [sp, #16]
 8005182:	9f08      	ldr	r7, [sp, #32]
 8005184:	e73b      	b.n	8004ffe <_dtoa_r+0x736>
 8005186:	9a07      	ldr	r2, [sp, #28]
 8005188:	e767      	b.n	800505a <_dtoa_r+0x792>
 800518a:	9b06      	ldr	r3, [sp, #24]
 800518c:	2b01      	cmp	r3, #1
 800518e:	dc18      	bgt.n	80051c2 <_dtoa_r+0x8fa>
 8005190:	f1ba 0f00 	cmp.w	sl, #0
 8005194:	d115      	bne.n	80051c2 <_dtoa_r+0x8fa>
 8005196:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800519a:	b993      	cbnz	r3, 80051c2 <_dtoa_r+0x8fa>
 800519c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80051a0:	0d1b      	lsrs	r3, r3, #20
 80051a2:	051b      	lsls	r3, r3, #20
 80051a4:	b183      	cbz	r3, 80051c8 <_dtoa_r+0x900>
 80051a6:	9b04      	ldr	r3, [sp, #16]
 80051a8:	3301      	adds	r3, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	9b05      	ldr	r3, [sp, #20]
 80051ae:	3301      	adds	r3, #1
 80051b0:	9305      	str	r3, [sp, #20]
 80051b2:	f04f 0801 	mov.w	r8, #1
 80051b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f47f af6a 	bne.w	8005092 <_dtoa_r+0x7ca>
 80051be:	2001      	movs	r0, #1
 80051c0:	e76f      	b.n	80050a2 <_dtoa_r+0x7da>
 80051c2:	f04f 0800 	mov.w	r8, #0
 80051c6:	e7f6      	b.n	80051b6 <_dtoa_r+0x8ee>
 80051c8:	4698      	mov	r8, r3
 80051ca:	e7f4      	b.n	80051b6 <_dtoa_r+0x8ee>
 80051cc:	f43f af7d 	beq.w	80050ca <_dtoa_r+0x802>
 80051d0:	4618      	mov	r0, r3
 80051d2:	301c      	adds	r0, #28
 80051d4:	e772      	b.n	80050bc <_dtoa_r+0x7f4>
 80051d6:	9b03      	ldr	r3, [sp, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dc37      	bgt.n	800524c <_dtoa_r+0x984>
 80051dc:	9b06      	ldr	r3, [sp, #24]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	dd34      	ble.n	800524c <_dtoa_r+0x984>
 80051e2:	9b03      	ldr	r3, [sp, #12]
 80051e4:	9302      	str	r3, [sp, #8]
 80051e6:	9b02      	ldr	r3, [sp, #8]
 80051e8:	b96b      	cbnz	r3, 8005206 <_dtoa_r+0x93e>
 80051ea:	4631      	mov	r1, r6
 80051ec:	2205      	movs	r2, #5
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 fd56 	bl	8005ca0 <__multadd>
 80051f4:	4601      	mov	r1, r0
 80051f6:	4606      	mov	r6, r0
 80051f8:	ee18 0a10 	vmov	r0, s16
 80051fc:	f000 ffba 	bl	8006174 <__mcmp>
 8005200:	2800      	cmp	r0, #0
 8005202:	f73f adbb 	bgt.w	8004d7c <_dtoa_r+0x4b4>
 8005206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005208:	9d01      	ldr	r5, [sp, #4]
 800520a:	43db      	mvns	r3, r3
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	f04f 0800 	mov.w	r8, #0
 8005212:	4631      	mov	r1, r6
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fd21 	bl	8005c5c <_Bfree>
 800521a:	2f00      	cmp	r7, #0
 800521c:	f43f aea4 	beq.w	8004f68 <_dtoa_r+0x6a0>
 8005220:	f1b8 0f00 	cmp.w	r8, #0
 8005224:	d005      	beq.n	8005232 <_dtoa_r+0x96a>
 8005226:	45b8      	cmp	r8, r7
 8005228:	d003      	beq.n	8005232 <_dtoa_r+0x96a>
 800522a:	4641      	mov	r1, r8
 800522c:	4620      	mov	r0, r4
 800522e:	f000 fd15 	bl	8005c5c <_Bfree>
 8005232:	4639      	mov	r1, r7
 8005234:	4620      	mov	r0, r4
 8005236:	f000 fd11 	bl	8005c5c <_Bfree>
 800523a:	e695      	b.n	8004f68 <_dtoa_r+0x6a0>
 800523c:	2600      	movs	r6, #0
 800523e:	4637      	mov	r7, r6
 8005240:	e7e1      	b.n	8005206 <_dtoa_r+0x93e>
 8005242:	9700      	str	r7, [sp, #0]
 8005244:	4637      	mov	r7, r6
 8005246:	e599      	b.n	8004d7c <_dtoa_r+0x4b4>
 8005248:	40240000 	.word	0x40240000
 800524c:	9b08      	ldr	r3, [sp, #32]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80ca 	beq.w	80053e8 <_dtoa_r+0xb20>
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	9302      	str	r3, [sp, #8]
 8005258:	2d00      	cmp	r5, #0
 800525a:	dd05      	ble.n	8005268 <_dtoa_r+0x9a0>
 800525c:	4639      	mov	r1, r7
 800525e:	462a      	mov	r2, r5
 8005260:	4620      	mov	r0, r4
 8005262:	f000 ff17 	bl	8006094 <__lshift>
 8005266:	4607      	mov	r7, r0
 8005268:	f1b8 0f00 	cmp.w	r8, #0
 800526c:	d05b      	beq.n	8005326 <_dtoa_r+0xa5e>
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4620      	mov	r0, r4
 8005272:	f000 fcb3 	bl	8005bdc <_Balloc>
 8005276:	4605      	mov	r5, r0
 8005278:	b928      	cbnz	r0, 8005286 <_dtoa_r+0x9be>
 800527a:	4b87      	ldr	r3, [pc, #540]	; (8005498 <_dtoa_r+0xbd0>)
 800527c:	4602      	mov	r2, r0
 800527e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005282:	f7ff bb3b 	b.w	80048fc <_dtoa_r+0x34>
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	3202      	adds	r2, #2
 800528a:	0092      	lsls	r2, r2, #2
 800528c:	f107 010c 	add.w	r1, r7, #12
 8005290:	300c      	adds	r0, #12
 8005292:	f000 fc95 	bl	8005bc0 <memcpy>
 8005296:	2201      	movs	r2, #1
 8005298:	4629      	mov	r1, r5
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fefa 	bl	8006094 <__lshift>
 80052a0:	9b01      	ldr	r3, [sp, #4]
 80052a2:	f103 0901 	add.w	r9, r3, #1
 80052a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80052aa:	4413      	add	r3, r2
 80052ac:	9305      	str	r3, [sp, #20]
 80052ae:	f00a 0301 	and.w	r3, sl, #1
 80052b2:	46b8      	mov	r8, r7
 80052b4:	9304      	str	r3, [sp, #16]
 80052b6:	4607      	mov	r7, r0
 80052b8:	4631      	mov	r1, r6
 80052ba:	ee18 0a10 	vmov	r0, s16
 80052be:	f7ff fa77 	bl	80047b0 <quorem>
 80052c2:	4641      	mov	r1, r8
 80052c4:	9002      	str	r0, [sp, #8]
 80052c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80052ca:	ee18 0a10 	vmov	r0, s16
 80052ce:	f000 ff51 	bl	8006174 <__mcmp>
 80052d2:	463a      	mov	r2, r7
 80052d4:	9003      	str	r0, [sp, #12]
 80052d6:	4631      	mov	r1, r6
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 ff67 	bl	80061ac <__mdiff>
 80052de:	68c2      	ldr	r2, [r0, #12]
 80052e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80052e4:	4605      	mov	r5, r0
 80052e6:	bb02      	cbnz	r2, 800532a <_dtoa_r+0xa62>
 80052e8:	4601      	mov	r1, r0
 80052ea:	ee18 0a10 	vmov	r0, s16
 80052ee:	f000 ff41 	bl	8006174 <__mcmp>
 80052f2:	4602      	mov	r2, r0
 80052f4:	4629      	mov	r1, r5
 80052f6:	4620      	mov	r0, r4
 80052f8:	9207      	str	r2, [sp, #28]
 80052fa:	f000 fcaf 	bl	8005c5c <_Bfree>
 80052fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005302:	ea43 0102 	orr.w	r1, r3, r2
 8005306:	9b04      	ldr	r3, [sp, #16]
 8005308:	430b      	orrs	r3, r1
 800530a:	464d      	mov	r5, r9
 800530c:	d10f      	bne.n	800532e <_dtoa_r+0xa66>
 800530e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005312:	d02a      	beq.n	800536a <_dtoa_r+0xaa2>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	dd02      	ble.n	8005320 <_dtoa_r+0xa58>
 800531a:	9b02      	ldr	r3, [sp, #8]
 800531c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005320:	f88b a000 	strb.w	sl, [fp]
 8005324:	e775      	b.n	8005212 <_dtoa_r+0x94a>
 8005326:	4638      	mov	r0, r7
 8005328:	e7ba      	b.n	80052a0 <_dtoa_r+0x9d8>
 800532a:	2201      	movs	r2, #1
 800532c:	e7e2      	b.n	80052f4 <_dtoa_r+0xa2c>
 800532e:	9b03      	ldr	r3, [sp, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db04      	blt.n	800533e <_dtoa_r+0xa76>
 8005334:	9906      	ldr	r1, [sp, #24]
 8005336:	430b      	orrs	r3, r1
 8005338:	9904      	ldr	r1, [sp, #16]
 800533a:	430b      	orrs	r3, r1
 800533c:	d122      	bne.n	8005384 <_dtoa_r+0xabc>
 800533e:	2a00      	cmp	r2, #0
 8005340:	ddee      	ble.n	8005320 <_dtoa_r+0xa58>
 8005342:	ee18 1a10 	vmov	r1, s16
 8005346:	2201      	movs	r2, #1
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fea3 	bl	8006094 <__lshift>
 800534e:	4631      	mov	r1, r6
 8005350:	ee08 0a10 	vmov	s16, r0
 8005354:	f000 ff0e 	bl	8006174 <__mcmp>
 8005358:	2800      	cmp	r0, #0
 800535a:	dc03      	bgt.n	8005364 <_dtoa_r+0xa9c>
 800535c:	d1e0      	bne.n	8005320 <_dtoa_r+0xa58>
 800535e:	f01a 0f01 	tst.w	sl, #1
 8005362:	d0dd      	beq.n	8005320 <_dtoa_r+0xa58>
 8005364:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005368:	d1d7      	bne.n	800531a <_dtoa_r+0xa52>
 800536a:	2339      	movs	r3, #57	; 0x39
 800536c:	f88b 3000 	strb.w	r3, [fp]
 8005370:	462b      	mov	r3, r5
 8005372:	461d      	mov	r5, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800537a:	2a39      	cmp	r2, #57	; 0x39
 800537c:	d071      	beq.n	8005462 <_dtoa_r+0xb9a>
 800537e:	3201      	adds	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e746      	b.n	8005212 <_dtoa_r+0x94a>
 8005384:	2a00      	cmp	r2, #0
 8005386:	dd07      	ble.n	8005398 <_dtoa_r+0xad0>
 8005388:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800538c:	d0ed      	beq.n	800536a <_dtoa_r+0xaa2>
 800538e:	f10a 0301 	add.w	r3, sl, #1
 8005392:	f88b 3000 	strb.w	r3, [fp]
 8005396:	e73c      	b.n	8005212 <_dtoa_r+0x94a>
 8005398:	9b05      	ldr	r3, [sp, #20]
 800539a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800539e:	4599      	cmp	r9, r3
 80053a0:	d047      	beq.n	8005432 <_dtoa_r+0xb6a>
 80053a2:	ee18 1a10 	vmov	r1, s16
 80053a6:	2300      	movs	r3, #0
 80053a8:	220a      	movs	r2, #10
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 fc78 	bl	8005ca0 <__multadd>
 80053b0:	45b8      	cmp	r8, r7
 80053b2:	ee08 0a10 	vmov	s16, r0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	f04f 020a 	mov.w	r2, #10
 80053be:	4641      	mov	r1, r8
 80053c0:	4620      	mov	r0, r4
 80053c2:	d106      	bne.n	80053d2 <_dtoa_r+0xb0a>
 80053c4:	f000 fc6c 	bl	8005ca0 <__multadd>
 80053c8:	4680      	mov	r8, r0
 80053ca:	4607      	mov	r7, r0
 80053cc:	f109 0901 	add.w	r9, r9, #1
 80053d0:	e772      	b.n	80052b8 <_dtoa_r+0x9f0>
 80053d2:	f000 fc65 	bl	8005ca0 <__multadd>
 80053d6:	4639      	mov	r1, r7
 80053d8:	4680      	mov	r8, r0
 80053da:	2300      	movs	r3, #0
 80053dc:	220a      	movs	r2, #10
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 fc5e 	bl	8005ca0 <__multadd>
 80053e4:	4607      	mov	r7, r0
 80053e6:	e7f1      	b.n	80053cc <_dtoa_r+0xb04>
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	9d01      	ldr	r5, [sp, #4]
 80053ee:	ee18 0a10 	vmov	r0, s16
 80053f2:	4631      	mov	r1, r6
 80053f4:	f7ff f9dc 	bl	80047b0 <quorem>
 80053f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80053fc:	9b01      	ldr	r3, [sp, #4]
 80053fe:	f805 ab01 	strb.w	sl, [r5], #1
 8005402:	1aea      	subs	r2, r5, r3
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	4293      	cmp	r3, r2
 8005408:	dd09      	ble.n	800541e <_dtoa_r+0xb56>
 800540a:	ee18 1a10 	vmov	r1, s16
 800540e:	2300      	movs	r3, #0
 8005410:	220a      	movs	r2, #10
 8005412:	4620      	mov	r0, r4
 8005414:	f000 fc44 	bl	8005ca0 <__multadd>
 8005418:	ee08 0a10 	vmov	s16, r0
 800541c:	e7e7      	b.n	80053ee <_dtoa_r+0xb26>
 800541e:	9b02      	ldr	r3, [sp, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfc8      	it	gt
 8005424:	461d      	movgt	r5, r3
 8005426:	9b01      	ldr	r3, [sp, #4]
 8005428:	bfd8      	it	le
 800542a:	2501      	movle	r5, #1
 800542c:	441d      	add	r5, r3
 800542e:	f04f 0800 	mov.w	r8, #0
 8005432:	ee18 1a10 	vmov	r1, s16
 8005436:	2201      	movs	r2, #1
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fe2b 	bl	8006094 <__lshift>
 800543e:	4631      	mov	r1, r6
 8005440:	ee08 0a10 	vmov	s16, r0
 8005444:	f000 fe96 	bl	8006174 <__mcmp>
 8005448:	2800      	cmp	r0, #0
 800544a:	dc91      	bgt.n	8005370 <_dtoa_r+0xaa8>
 800544c:	d102      	bne.n	8005454 <_dtoa_r+0xb8c>
 800544e:	f01a 0f01 	tst.w	sl, #1
 8005452:	d18d      	bne.n	8005370 <_dtoa_r+0xaa8>
 8005454:	462b      	mov	r3, r5
 8005456:	461d      	mov	r5, r3
 8005458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800545c:	2a30      	cmp	r2, #48	; 0x30
 800545e:	d0fa      	beq.n	8005456 <_dtoa_r+0xb8e>
 8005460:	e6d7      	b.n	8005212 <_dtoa_r+0x94a>
 8005462:	9a01      	ldr	r2, [sp, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d184      	bne.n	8005372 <_dtoa_r+0xaaa>
 8005468:	9b00      	ldr	r3, [sp, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2331      	movs	r3, #49	; 0x31
 8005470:	7013      	strb	r3, [r2, #0]
 8005472:	e6ce      	b.n	8005212 <_dtoa_r+0x94a>
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <_dtoa_r+0xbd4>)
 8005476:	f7ff ba95 	b.w	80049a4 <_dtoa_r+0xdc>
 800547a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800547c:	2b00      	cmp	r3, #0
 800547e:	f47f aa6e 	bne.w	800495e <_dtoa_r+0x96>
 8005482:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <_dtoa_r+0xbd8>)
 8005484:	f7ff ba8e 	b.w	80049a4 <_dtoa_r+0xdc>
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	dcae      	bgt.n	80053ec <_dtoa_r+0xb24>
 800548e:	9b06      	ldr	r3, [sp, #24]
 8005490:	2b02      	cmp	r3, #2
 8005492:	f73f aea8 	bgt.w	80051e6 <_dtoa_r+0x91e>
 8005496:	e7a9      	b.n	80053ec <_dtoa_r+0xb24>
 8005498:	08007840 	.word	0x08007840
 800549c:	08007640 	.word	0x08007640
 80054a0:	080077c1 	.word	0x080077c1

080054a4 <rshift>:
 80054a4:	6903      	ldr	r3, [r0, #16]
 80054a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80054aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80054b2:	f100 0414 	add.w	r4, r0, #20
 80054b6:	dd45      	ble.n	8005544 <rshift+0xa0>
 80054b8:	f011 011f 	ands.w	r1, r1, #31
 80054bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80054c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80054c4:	d10c      	bne.n	80054e0 <rshift+0x3c>
 80054c6:	f100 0710 	add.w	r7, r0, #16
 80054ca:	4629      	mov	r1, r5
 80054cc:	42b1      	cmp	r1, r6
 80054ce:	d334      	bcc.n	800553a <rshift+0x96>
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	1eea      	subs	r2, r5, #3
 80054d6:	4296      	cmp	r6, r2
 80054d8:	bf38      	it	cc
 80054da:	2300      	movcc	r3, #0
 80054dc:	4423      	add	r3, r4
 80054de:	e015      	b.n	800550c <rshift+0x68>
 80054e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80054e4:	f1c1 0820 	rsb	r8, r1, #32
 80054e8:	40cf      	lsrs	r7, r1
 80054ea:	f105 0e04 	add.w	lr, r5, #4
 80054ee:	46a1      	mov	r9, r4
 80054f0:	4576      	cmp	r6, lr
 80054f2:	46f4      	mov	ip, lr
 80054f4:	d815      	bhi.n	8005522 <rshift+0x7e>
 80054f6:	1a9a      	subs	r2, r3, r2
 80054f8:	0092      	lsls	r2, r2, #2
 80054fa:	3a04      	subs	r2, #4
 80054fc:	3501      	adds	r5, #1
 80054fe:	42ae      	cmp	r6, r5
 8005500:	bf38      	it	cc
 8005502:	2200      	movcc	r2, #0
 8005504:	18a3      	adds	r3, r4, r2
 8005506:	50a7      	str	r7, [r4, r2]
 8005508:	b107      	cbz	r7, 800550c <rshift+0x68>
 800550a:	3304      	adds	r3, #4
 800550c:	1b1a      	subs	r2, r3, r4
 800550e:	42a3      	cmp	r3, r4
 8005510:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005514:	bf08      	it	eq
 8005516:	2300      	moveq	r3, #0
 8005518:	6102      	str	r2, [r0, #16]
 800551a:	bf08      	it	eq
 800551c:	6143      	streq	r3, [r0, #20]
 800551e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005522:	f8dc c000 	ldr.w	ip, [ip]
 8005526:	fa0c fc08 	lsl.w	ip, ip, r8
 800552a:	ea4c 0707 	orr.w	r7, ip, r7
 800552e:	f849 7b04 	str.w	r7, [r9], #4
 8005532:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005536:	40cf      	lsrs	r7, r1
 8005538:	e7da      	b.n	80054f0 <rshift+0x4c>
 800553a:	f851 cb04 	ldr.w	ip, [r1], #4
 800553e:	f847 cf04 	str.w	ip, [r7, #4]!
 8005542:	e7c3      	b.n	80054cc <rshift+0x28>
 8005544:	4623      	mov	r3, r4
 8005546:	e7e1      	b.n	800550c <rshift+0x68>

08005548 <__hexdig_fun>:
 8005548:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800554c:	2b09      	cmp	r3, #9
 800554e:	d802      	bhi.n	8005556 <__hexdig_fun+0xe>
 8005550:	3820      	subs	r0, #32
 8005552:	b2c0      	uxtb	r0, r0
 8005554:	4770      	bx	lr
 8005556:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800555a:	2b05      	cmp	r3, #5
 800555c:	d801      	bhi.n	8005562 <__hexdig_fun+0x1a>
 800555e:	3847      	subs	r0, #71	; 0x47
 8005560:	e7f7      	b.n	8005552 <__hexdig_fun+0xa>
 8005562:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005566:	2b05      	cmp	r3, #5
 8005568:	d801      	bhi.n	800556e <__hexdig_fun+0x26>
 800556a:	3827      	subs	r0, #39	; 0x27
 800556c:	e7f1      	b.n	8005552 <__hexdig_fun+0xa>
 800556e:	2000      	movs	r0, #0
 8005570:	4770      	bx	lr
	...

08005574 <__gethex>:
 8005574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	ed2d 8b02 	vpush	{d8}
 800557c:	b089      	sub	sp, #36	; 0x24
 800557e:	ee08 0a10 	vmov	s16, r0
 8005582:	9304      	str	r3, [sp, #16]
 8005584:	4bb4      	ldr	r3, [pc, #720]	; (8005858 <__gethex+0x2e4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	4618      	mov	r0, r3
 800558c:	468b      	mov	fp, r1
 800558e:	4690      	mov	r8, r2
 8005590:	f7fa fe26 	bl	80001e0 <strlen>
 8005594:	9b01      	ldr	r3, [sp, #4]
 8005596:	f8db 2000 	ldr.w	r2, [fp]
 800559a:	4403      	add	r3, r0
 800559c:	4682      	mov	sl, r0
 800559e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80055a2:	9305      	str	r3, [sp, #20]
 80055a4:	1c93      	adds	r3, r2, #2
 80055a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80055aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80055ae:	32fe      	adds	r2, #254	; 0xfe
 80055b0:	18d1      	adds	r1, r2, r3
 80055b2:	461f      	mov	r7, r3
 80055b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80055b8:	9100      	str	r1, [sp, #0]
 80055ba:	2830      	cmp	r0, #48	; 0x30
 80055bc:	d0f8      	beq.n	80055b0 <__gethex+0x3c>
 80055be:	f7ff ffc3 	bl	8005548 <__hexdig_fun>
 80055c2:	4604      	mov	r4, r0
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d13a      	bne.n	800563e <__gethex+0xca>
 80055c8:	9901      	ldr	r1, [sp, #4]
 80055ca:	4652      	mov	r2, sl
 80055cc:	4638      	mov	r0, r7
 80055ce:	f001 fa33 	bl	8006a38 <strncmp>
 80055d2:	4605      	mov	r5, r0
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d168      	bne.n	80056aa <__gethex+0x136>
 80055d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80055dc:	eb07 060a 	add.w	r6, r7, sl
 80055e0:	f7ff ffb2 	bl	8005548 <__hexdig_fun>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d062      	beq.n	80056ae <__gethex+0x13a>
 80055e8:	4633      	mov	r3, r6
 80055ea:	7818      	ldrb	r0, [r3, #0]
 80055ec:	2830      	cmp	r0, #48	; 0x30
 80055ee:	461f      	mov	r7, r3
 80055f0:	f103 0301 	add.w	r3, r3, #1
 80055f4:	d0f9      	beq.n	80055ea <__gethex+0x76>
 80055f6:	f7ff ffa7 	bl	8005548 <__hexdig_fun>
 80055fa:	2301      	movs	r3, #1
 80055fc:	fab0 f480 	clz	r4, r0
 8005600:	0964      	lsrs	r4, r4, #5
 8005602:	4635      	mov	r5, r6
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	463a      	mov	r2, r7
 8005608:	4616      	mov	r6, r2
 800560a:	3201      	adds	r2, #1
 800560c:	7830      	ldrb	r0, [r6, #0]
 800560e:	f7ff ff9b 	bl	8005548 <__hexdig_fun>
 8005612:	2800      	cmp	r0, #0
 8005614:	d1f8      	bne.n	8005608 <__gethex+0x94>
 8005616:	9901      	ldr	r1, [sp, #4]
 8005618:	4652      	mov	r2, sl
 800561a:	4630      	mov	r0, r6
 800561c:	f001 fa0c 	bl	8006a38 <strncmp>
 8005620:	b980      	cbnz	r0, 8005644 <__gethex+0xd0>
 8005622:	b94d      	cbnz	r5, 8005638 <__gethex+0xc4>
 8005624:	eb06 050a 	add.w	r5, r6, sl
 8005628:	462a      	mov	r2, r5
 800562a:	4616      	mov	r6, r2
 800562c:	3201      	adds	r2, #1
 800562e:	7830      	ldrb	r0, [r6, #0]
 8005630:	f7ff ff8a 	bl	8005548 <__hexdig_fun>
 8005634:	2800      	cmp	r0, #0
 8005636:	d1f8      	bne.n	800562a <__gethex+0xb6>
 8005638:	1bad      	subs	r5, r5, r6
 800563a:	00ad      	lsls	r5, r5, #2
 800563c:	e004      	b.n	8005648 <__gethex+0xd4>
 800563e:	2400      	movs	r4, #0
 8005640:	4625      	mov	r5, r4
 8005642:	e7e0      	b.n	8005606 <__gethex+0x92>
 8005644:	2d00      	cmp	r5, #0
 8005646:	d1f7      	bne.n	8005638 <__gethex+0xc4>
 8005648:	7833      	ldrb	r3, [r6, #0]
 800564a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800564e:	2b50      	cmp	r3, #80	; 0x50
 8005650:	d13b      	bne.n	80056ca <__gethex+0x156>
 8005652:	7873      	ldrb	r3, [r6, #1]
 8005654:	2b2b      	cmp	r3, #43	; 0x2b
 8005656:	d02c      	beq.n	80056b2 <__gethex+0x13e>
 8005658:	2b2d      	cmp	r3, #45	; 0x2d
 800565a:	d02e      	beq.n	80056ba <__gethex+0x146>
 800565c:	1c71      	adds	r1, r6, #1
 800565e:	f04f 0900 	mov.w	r9, #0
 8005662:	7808      	ldrb	r0, [r1, #0]
 8005664:	f7ff ff70 	bl	8005548 <__hexdig_fun>
 8005668:	1e43      	subs	r3, r0, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b18      	cmp	r3, #24
 800566e:	d82c      	bhi.n	80056ca <__gethex+0x156>
 8005670:	f1a0 0210 	sub.w	r2, r0, #16
 8005674:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005678:	f7ff ff66 	bl	8005548 <__hexdig_fun>
 800567c:	1e43      	subs	r3, r0, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b18      	cmp	r3, #24
 8005682:	d91d      	bls.n	80056c0 <__gethex+0x14c>
 8005684:	f1b9 0f00 	cmp.w	r9, #0
 8005688:	d000      	beq.n	800568c <__gethex+0x118>
 800568a:	4252      	negs	r2, r2
 800568c:	4415      	add	r5, r2
 800568e:	f8cb 1000 	str.w	r1, [fp]
 8005692:	b1e4      	cbz	r4, 80056ce <__gethex+0x15a>
 8005694:	9b00      	ldr	r3, [sp, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	bf14      	ite	ne
 800569a:	2700      	movne	r7, #0
 800569c:	2706      	moveq	r7, #6
 800569e:	4638      	mov	r0, r7
 80056a0:	b009      	add	sp, #36	; 0x24
 80056a2:	ecbd 8b02 	vpop	{d8}
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	463e      	mov	r6, r7
 80056ac:	4625      	mov	r5, r4
 80056ae:	2401      	movs	r4, #1
 80056b0:	e7ca      	b.n	8005648 <__gethex+0xd4>
 80056b2:	f04f 0900 	mov.w	r9, #0
 80056b6:	1cb1      	adds	r1, r6, #2
 80056b8:	e7d3      	b.n	8005662 <__gethex+0xee>
 80056ba:	f04f 0901 	mov.w	r9, #1
 80056be:	e7fa      	b.n	80056b6 <__gethex+0x142>
 80056c0:	230a      	movs	r3, #10
 80056c2:	fb03 0202 	mla	r2, r3, r2, r0
 80056c6:	3a10      	subs	r2, #16
 80056c8:	e7d4      	b.n	8005674 <__gethex+0x100>
 80056ca:	4631      	mov	r1, r6
 80056cc:	e7df      	b.n	800568e <__gethex+0x11a>
 80056ce:	1bf3      	subs	r3, r6, r7
 80056d0:	3b01      	subs	r3, #1
 80056d2:	4621      	mov	r1, r4
 80056d4:	2b07      	cmp	r3, #7
 80056d6:	dc0b      	bgt.n	80056f0 <__gethex+0x17c>
 80056d8:	ee18 0a10 	vmov	r0, s16
 80056dc:	f000 fa7e 	bl	8005bdc <_Balloc>
 80056e0:	4604      	mov	r4, r0
 80056e2:	b940      	cbnz	r0, 80056f6 <__gethex+0x182>
 80056e4:	4b5d      	ldr	r3, [pc, #372]	; (800585c <__gethex+0x2e8>)
 80056e6:	4602      	mov	r2, r0
 80056e8:	21de      	movs	r1, #222	; 0xde
 80056ea:	485d      	ldr	r0, [pc, #372]	; (8005860 <__gethex+0x2ec>)
 80056ec:	f001 f9c6 	bl	8006a7c <__assert_func>
 80056f0:	3101      	adds	r1, #1
 80056f2:	105b      	asrs	r3, r3, #1
 80056f4:	e7ee      	b.n	80056d4 <__gethex+0x160>
 80056f6:	f100 0914 	add.w	r9, r0, #20
 80056fa:	f04f 0b00 	mov.w	fp, #0
 80056fe:	f1ca 0301 	rsb	r3, sl, #1
 8005702:	f8cd 9008 	str.w	r9, [sp, #8]
 8005706:	f8cd b000 	str.w	fp, [sp]
 800570a:	9306      	str	r3, [sp, #24]
 800570c:	42b7      	cmp	r7, r6
 800570e:	d340      	bcc.n	8005792 <__gethex+0x21e>
 8005710:	9802      	ldr	r0, [sp, #8]
 8005712:	9b00      	ldr	r3, [sp, #0]
 8005714:	f840 3b04 	str.w	r3, [r0], #4
 8005718:	eba0 0009 	sub.w	r0, r0, r9
 800571c:	1080      	asrs	r0, r0, #2
 800571e:	0146      	lsls	r6, r0, #5
 8005720:	6120      	str	r0, [r4, #16]
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fb4c 	bl	8005dc0 <__hi0bits>
 8005728:	1a30      	subs	r0, r6, r0
 800572a:	f8d8 6000 	ldr.w	r6, [r8]
 800572e:	42b0      	cmp	r0, r6
 8005730:	dd63      	ble.n	80057fa <__gethex+0x286>
 8005732:	1b87      	subs	r7, r0, r6
 8005734:	4639      	mov	r1, r7
 8005736:	4620      	mov	r0, r4
 8005738:	f000 fef0 	bl	800651c <__any_on>
 800573c:	4682      	mov	sl, r0
 800573e:	b1a8      	cbz	r0, 800576c <__gethex+0x1f8>
 8005740:	1e7b      	subs	r3, r7, #1
 8005742:	1159      	asrs	r1, r3, #5
 8005744:	f003 021f 	and.w	r2, r3, #31
 8005748:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800574c:	f04f 0a01 	mov.w	sl, #1
 8005750:	fa0a f202 	lsl.w	r2, sl, r2
 8005754:	420a      	tst	r2, r1
 8005756:	d009      	beq.n	800576c <__gethex+0x1f8>
 8005758:	4553      	cmp	r3, sl
 800575a:	dd05      	ble.n	8005768 <__gethex+0x1f4>
 800575c:	1eb9      	subs	r1, r7, #2
 800575e:	4620      	mov	r0, r4
 8005760:	f000 fedc 	bl	800651c <__any_on>
 8005764:	2800      	cmp	r0, #0
 8005766:	d145      	bne.n	80057f4 <__gethex+0x280>
 8005768:	f04f 0a02 	mov.w	sl, #2
 800576c:	4639      	mov	r1, r7
 800576e:	4620      	mov	r0, r4
 8005770:	f7ff fe98 	bl	80054a4 <rshift>
 8005774:	443d      	add	r5, r7
 8005776:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800577a:	42ab      	cmp	r3, r5
 800577c:	da4c      	bge.n	8005818 <__gethex+0x2a4>
 800577e:	ee18 0a10 	vmov	r0, s16
 8005782:	4621      	mov	r1, r4
 8005784:	f000 fa6a 	bl	8005c5c <_Bfree>
 8005788:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800578a:	2300      	movs	r3, #0
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	27a3      	movs	r7, #163	; 0xa3
 8005790:	e785      	b.n	800569e <__gethex+0x12a>
 8005792:	1e73      	subs	r3, r6, #1
 8005794:	9a05      	ldr	r2, [sp, #20]
 8005796:	9303      	str	r3, [sp, #12]
 8005798:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800579c:	4293      	cmp	r3, r2
 800579e:	d019      	beq.n	80057d4 <__gethex+0x260>
 80057a0:	f1bb 0f20 	cmp.w	fp, #32
 80057a4:	d107      	bne.n	80057b6 <__gethex+0x242>
 80057a6:	9b02      	ldr	r3, [sp, #8]
 80057a8:	9a00      	ldr	r2, [sp, #0]
 80057aa:	f843 2b04 	str.w	r2, [r3], #4
 80057ae:	9302      	str	r3, [sp, #8]
 80057b0:	2300      	movs	r3, #0
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	469b      	mov	fp, r3
 80057b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80057ba:	f7ff fec5 	bl	8005548 <__hexdig_fun>
 80057be:	9b00      	ldr	r3, [sp, #0]
 80057c0:	f000 000f 	and.w	r0, r0, #15
 80057c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80057c8:	4303      	orrs	r3, r0
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	f10b 0b04 	add.w	fp, fp, #4
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	e00d      	b.n	80057f0 <__gethex+0x27c>
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	9a06      	ldr	r2, [sp, #24]
 80057d8:	4413      	add	r3, r2
 80057da:	42bb      	cmp	r3, r7
 80057dc:	d3e0      	bcc.n	80057a0 <__gethex+0x22c>
 80057de:	4618      	mov	r0, r3
 80057e0:	9901      	ldr	r1, [sp, #4]
 80057e2:	9307      	str	r3, [sp, #28]
 80057e4:	4652      	mov	r2, sl
 80057e6:	f001 f927 	bl	8006a38 <strncmp>
 80057ea:	9b07      	ldr	r3, [sp, #28]
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d1d7      	bne.n	80057a0 <__gethex+0x22c>
 80057f0:	461e      	mov	r6, r3
 80057f2:	e78b      	b.n	800570c <__gethex+0x198>
 80057f4:	f04f 0a03 	mov.w	sl, #3
 80057f8:	e7b8      	b.n	800576c <__gethex+0x1f8>
 80057fa:	da0a      	bge.n	8005812 <__gethex+0x29e>
 80057fc:	1a37      	subs	r7, r6, r0
 80057fe:	4621      	mov	r1, r4
 8005800:	ee18 0a10 	vmov	r0, s16
 8005804:	463a      	mov	r2, r7
 8005806:	f000 fc45 	bl	8006094 <__lshift>
 800580a:	1bed      	subs	r5, r5, r7
 800580c:	4604      	mov	r4, r0
 800580e:	f100 0914 	add.w	r9, r0, #20
 8005812:	f04f 0a00 	mov.w	sl, #0
 8005816:	e7ae      	b.n	8005776 <__gethex+0x202>
 8005818:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800581c:	42a8      	cmp	r0, r5
 800581e:	dd72      	ble.n	8005906 <__gethex+0x392>
 8005820:	1b45      	subs	r5, r0, r5
 8005822:	42ae      	cmp	r6, r5
 8005824:	dc36      	bgt.n	8005894 <__gethex+0x320>
 8005826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800582a:	2b02      	cmp	r3, #2
 800582c:	d02a      	beq.n	8005884 <__gethex+0x310>
 800582e:	2b03      	cmp	r3, #3
 8005830:	d02c      	beq.n	800588c <__gethex+0x318>
 8005832:	2b01      	cmp	r3, #1
 8005834:	d11c      	bne.n	8005870 <__gethex+0x2fc>
 8005836:	42ae      	cmp	r6, r5
 8005838:	d11a      	bne.n	8005870 <__gethex+0x2fc>
 800583a:	2e01      	cmp	r6, #1
 800583c:	d112      	bne.n	8005864 <__gethex+0x2f0>
 800583e:	9a04      	ldr	r2, [sp, #16]
 8005840:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	2301      	movs	r3, #1
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	f8c9 3000 	str.w	r3, [r9]
 800584e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005850:	2762      	movs	r7, #98	; 0x62
 8005852:	601c      	str	r4, [r3, #0]
 8005854:	e723      	b.n	800569e <__gethex+0x12a>
 8005856:	bf00      	nop
 8005858:	080078b8 	.word	0x080078b8
 800585c:	08007840 	.word	0x08007840
 8005860:	08007851 	.word	0x08007851
 8005864:	1e71      	subs	r1, r6, #1
 8005866:	4620      	mov	r0, r4
 8005868:	f000 fe58 	bl	800651c <__any_on>
 800586c:	2800      	cmp	r0, #0
 800586e:	d1e6      	bne.n	800583e <__gethex+0x2ca>
 8005870:	ee18 0a10 	vmov	r0, s16
 8005874:	4621      	mov	r1, r4
 8005876:	f000 f9f1 	bl	8005c5c <_Bfree>
 800587a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800587c:	2300      	movs	r3, #0
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	2750      	movs	r7, #80	; 0x50
 8005882:	e70c      	b.n	800569e <__gethex+0x12a>
 8005884:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f2      	bne.n	8005870 <__gethex+0x2fc>
 800588a:	e7d8      	b.n	800583e <__gethex+0x2ca>
 800588c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1d5      	bne.n	800583e <__gethex+0x2ca>
 8005892:	e7ed      	b.n	8005870 <__gethex+0x2fc>
 8005894:	1e6f      	subs	r7, r5, #1
 8005896:	f1ba 0f00 	cmp.w	sl, #0
 800589a:	d131      	bne.n	8005900 <__gethex+0x38c>
 800589c:	b127      	cbz	r7, 80058a8 <__gethex+0x334>
 800589e:	4639      	mov	r1, r7
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fe3b 	bl	800651c <__any_on>
 80058a6:	4682      	mov	sl, r0
 80058a8:	117b      	asrs	r3, r7, #5
 80058aa:	2101      	movs	r1, #1
 80058ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80058b0:	f007 071f 	and.w	r7, r7, #31
 80058b4:	fa01 f707 	lsl.w	r7, r1, r7
 80058b8:	421f      	tst	r7, r3
 80058ba:	4629      	mov	r1, r5
 80058bc:	4620      	mov	r0, r4
 80058be:	bf18      	it	ne
 80058c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80058c4:	1b76      	subs	r6, r6, r5
 80058c6:	f7ff fded 	bl	80054a4 <rshift>
 80058ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80058ce:	2702      	movs	r7, #2
 80058d0:	f1ba 0f00 	cmp.w	sl, #0
 80058d4:	d048      	beq.n	8005968 <__gethex+0x3f4>
 80058d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d015      	beq.n	800590a <__gethex+0x396>
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d017      	beq.n	8005912 <__gethex+0x39e>
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d109      	bne.n	80058fa <__gethex+0x386>
 80058e6:	f01a 0f02 	tst.w	sl, #2
 80058ea:	d006      	beq.n	80058fa <__gethex+0x386>
 80058ec:	f8d9 0000 	ldr.w	r0, [r9]
 80058f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80058f4:	f01a 0f01 	tst.w	sl, #1
 80058f8:	d10e      	bne.n	8005918 <__gethex+0x3a4>
 80058fa:	f047 0710 	orr.w	r7, r7, #16
 80058fe:	e033      	b.n	8005968 <__gethex+0x3f4>
 8005900:	f04f 0a01 	mov.w	sl, #1
 8005904:	e7d0      	b.n	80058a8 <__gethex+0x334>
 8005906:	2701      	movs	r7, #1
 8005908:	e7e2      	b.n	80058d0 <__gethex+0x35c>
 800590a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800590c:	f1c3 0301 	rsb	r3, r3, #1
 8005910:	9315      	str	r3, [sp, #84]	; 0x54
 8005912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0f0      	beq.n	80058fa <__gethex+0x386>
 8005918:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800591c:	f104 0314 	add.w	r3, r4, #20
 8005920:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005924:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005928:	f04f 0c00 	mov.w	ip, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005932:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005936:	d01c      	beq.n	8005972 <__gethex+0x3fe>
 8005938:	3201      	adds	r2, #1
 800593a:	6002      	str	r2, [r0, #0]
 800593c:	2f02      	cmp	r7, #2
 800593e:	f104 0314 	add.w	r3, r4, #20
 8005942:	d13f      	bne.n	80059c4 <__gethex+0x450>
 8005944:	f8d8 2000 	ldr.w	r2, [r8]
 8005948:	3a01      	subs	r2, #1
 800594a:	42b2      	cmp	r2, r6
 800594c:	d10a      	bne.n	8005964 <__gethex+0x3f0>
 800594e:	1171      	asrs	r1, r6, #5
 8005950:	2201      	movs	r2, #1
 8005952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005956:	f006 061f 	and.w	r6, r6, #31
 800595a:	fa02 f606 	lsl.w	r6, r2, r6
 800595e:	421e      	tst	r6, r3
 8005960:	bf18      	it	ne
 8005962:	4617      	movne	r7, r2
 8005964:	f047 0720 	orr.w	r7, r7, #32
 8005968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800596a:	601c      	str	r4, [r3, #0]
 800596c:	9b04      	ldr	r3, [sp, #16]
 800596e:	601d      	str	r5, [r3, #0]
 8005970:	e695      	b.n	800569e <__gethex+0x12a>
 8005972:	4299      	cmp	r1, r3
 8005974:	f843 cc04 	str.w	ip, [r3, #-4]
 8005978:	d8d8      	bhi.n	800592c <__gethex+0x3b8>
 800597a:	68a3      	ldr	r3, [r4, #8]
 800597c:	459b      	cmp	fp, r3
 800597e:	db19      	blt.n	80059b4 <__gethex+0x440>
 8005980:	6861      	ldr	r1, [r4, #4]
 8005982:	ee18 0a10 	vmov	r0, s16
 8005986:	3101      	adds	r1, #1
 8005988:	f000 f928 	bl	8005bdc <_Balloc>
 800598c:	4681      	mov	r9, r0
 800598e:	b918      	cbnz	r0, 8005998 <__gethex+0x424>
 8005990:	4b1a      	ldr	r3, [pc, #104]	; (80059fc <__gethex+0x488>)
 8005992:	4602      	mov	r2, r0
 8005994:	2184      	movs	r1, #132	; 0x84
 8005996:	e6a8      	b.n	80056ea <__gethex+0x176>
 8005998:	6922      	ldr	r2, [r4, #16]
 800599a:	3202      	adds	r2, #2
 800599c:	f104 010c 	add.w	r1, r4, #12
 80059a0:	0092      	lsls	r2, r2, #2
 80059a2:	300c      	adds	r0, #12
 80059a4:	f000 f90c 	bl	8005bc0 <memcpy>
 80059a8:	4621      	mov	r1, r4
 80059aa:	ee18 0a10 	vmov	r0, s16
 80059ae:	f000 f955 	bl	8005c5c <_Bfree>
 80059b2:	464c      	mov	r4, r9
 80059b4:	6923      	ldr	r3, [r4, #16]
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80059bc:	6122      	str	r2, [r4, #16]
 80059be:	2201      	movs	r2, #1
 80059c0:	615a      	str	r2, [r3, #20]
 80059c2:	e7bb      	b.n	800593c <__gethex+0x3c8>
 80059c4:	6922      	ldr	r2, [r4, #16]
 80059c6:	455a      	cmp	r2, fp
 80059c8:	dd0b      	ble.n	80059e2 <__gethex+0x46e>
 80059ca:	2101      	movs	r1, #1
 80059cc:	4620      	mov	r0, r4
 80059ce:	f7ff fd69 	bl	80054a4 <rshift>
 80059d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80059d6:	3501      	adds	r5, #1
 80059d8:	42ab      	cmp	r3, r5
 80059da:	f6ff aed0 	blt.w	800577e <__gethex+0x20a>
 80059de:	2701      	movs	r7, #1
 80059e0:	e7c0      	b.n	8005964 <__gethex+0x3f0>
 80059e2:	f016 061f 	ands.w	r6, r6, #31
 80059e6:	d0fa      	beq.n	80059de <__gethex+0x46a>
 80059e8:	4453      	add	r3, sl
 80059ea:	f1c6 0620 	rsb	r6, r6, #32
 80059ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80059f2:	f000 f9e5 	bl	8005dc0 <__hi0bits>
 80059f6:	42b0      	cmp	r0, r6
 80059f8:	dbe7      	blt.n	80059ca <__gethex+0x456>
 80059fa:	e7f0      	b.n	80059de <__gethex+0x46a>
 80059fc:	08007840 	.word	0x08007840

08005a00 <L_shift>:
 8005a00:	f1c2 0208 	rsb	r2, r2, #8
 8005a04:	0092      	lsls	r2, r2, #2
 8005a06:	b570      	push	{r4, r5, r6, lr}
 8005a08:	f1c2 0620 	rsb	r6, r2, #32
 8005a0c:	6843      	ldr	r3, [r0, #4]
 8005a0e:	6804      	ldr	r4, [r0, #0]
 8005a10:	fa03 f506 	lsl.w	r5, r3, r6
 8005a14:	432c      	orrs	r4, r5
 8005a16:	40d3      	lsrs	r3, r2
 8005a18:	6004      	str	r4, [r0, #0]
 8005a1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005a1e:	4288      	cmp	r0, r1
 8005a20:	d3f4      	bcc.n	8005a0c <L_shift+0xc>
 8005a22:	bd70      	pop	{r4, r5, r6, pc}

08005a24 <__match>:
 8005a24:	b530      	push	{r4, r5, lr}
 8005a26:	6803      	ldr	r3, [r0, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2e:	b914      	cbnz	r4, 8005a36 <__match+0x12>
 8005a30:	6003      	str	r3, [r0, #0]
 8005a32:	2001      	movs	r0, #1
 8005a34:	bd30      	pop	{r4, r5, pc}
 8005a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005a3e:	2d19      	cmp	r5, #25
 8005a40:	bf98      	it	ls
 8005a42:	3220      	addls	r2, #32
 8005a44:	42a2      	cmp	r2, r4
 8005a46:	d0f0      	beq.n	8005a2a <__match+0x6>
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e7f3      	b.n	8005a34 <__match+0x10>

08005a4c <__hexnan>:
 8005a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a50:	680b      	ldr	r3, [r1, #0]
 8005a52:	115e      	asrs	r6, r3, #5
 8005a54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005a58:	f013 031f 	ands.w	r3, r3, #31
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	bf18      	it	ne
 8005a60:	3604      	addne	r6, #4
 8005a62:	2500      	movs	r5, #0
 8005a64:	1f37      	subs	r7, r6, #4
 8005a66:	4690      	mov	r8, r2
 8005a68:	6802      	ldr	r2, [r0, #0]
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	4682      	mov	sl, r0
 8005a6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005a72:	46b9      	mov	r9, r7
 8005a74:	463c      	mov	r4, r7
 8005a76:	9502      	str	r5, [sp, #8]
 8005a78:	46ab      	mov	fp, r5
 8005a7a:	7851      	ldrb	r1, [r2, #1]
 8005a7c:	1c53      	adds	r3, r2, #1
 8005a7e:	9303      	str	r3, [sp, #12]
 8005a80:	b341      	cbz	r1, 8005ad4 <__hexnan+0x88>
 8005a82:	4608      	mov	r0, r1
 8005a84:	9205      	str	r2, [sp, #20]
 8005a86:	9104      	str	r1, [sp, #16]
 8005a88:	f7ff fd5e 	bl	8005548 <__hexdig_fun>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d14f      	bne.n	8005b30 <__hexnan+0xe4>
 8005a90:	9904      	ldr	r1, [sp, #16]
 8005a92:	9a05      	ldr	r2, [sp, #20]
 8005a94:	2920      	cmp	r1, #32
 8005a96:	d818      	bhi.n	8005aca <__hexnan+0x7e>
 8005a98:	9b02      	ldr	r3, [sp, #8]
 8005a9a:	459b      	cmp	fp, r3
 8005a9c:	dd13      	ble.n	8005ac6 <__hexnan+0x7a>
 8005a9e:	454c      	cmp	r4, r9
 8005aa0:	d206      	bcs.n	8005ab0 <__hexnan+0x64>
 8005aa2:	2d07      	cmp	r5, #7
 8005aa4:	dc04      	bgt.n	8005ab0 <__hexnan+0x64>
 8005aa6:	462a      	mov	r2, r5
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f7ff ffa8 	bl	8005a00 <L_shift>
 8005ab0:	4544      	cmp	r4, r8
 8005ab2:	d950      	bls.n	8005b56 <__hexnan+0x10a>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f1a4 0904 	sub.w	r9, r4, #4
 8005aba:	f844 3c04 	str.w	r3, [r4, #-4]
 8005abe:	f8cd b008 	str.w	fp, [sp, #8]
 8005ac2:	464c      	mov	r4, r9
 8005ac4:	461d      	mov	r5, r3
 8005ac6:	9a03      	ldr	r2, [sp, #12]
 8005ac8:	e7d7      	b.n	8005a7a <__hexnan+0x2e>
 8005aca:	2929      	cmp	r1, #41	; 0x29
 8005acc:	d156      	bne.n	8005b7c <__hexnan+0x130>
 8005ace:	3202      	adds	r2, #2
 8005ad0:	f8ca 2000 	str.w	r2, [sl]
 8005ad4:	f1bb 0f00 	cmp.w	fp, #0
 8005ad8:	d050      	beq.n	8005b7c <__hexnan+0x130>
 8005ada:	454c      	cmp	r4, r9
 8005adc:	d206      	bcs.n	8005aec <__hexnan+0xa0>
 8005ade:	2d07      	cmp	r5, #7
 8005ae0:	dc04      	bgt.n	8005aec <__hexnan+0xa0>
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f7ff ff8a 	bl	8005a00 <L_shift>
 8005aec:	4544      	cmp	r4, r8
 8005aee:	d934      	bls.n	8005b5a <__hexnan+0x10e>
 8005af0:	f1a8 0204 	sub.w	r2, r8, #4
 8005af4:	4623      	mov	r3, r4
 8005af6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005afa:	f842 1f04 	str.w	r1, [r2, #4]!
 8005afe:	429f      	cmp	r7, r3
 8005b00:	d2f9      	bcs.n	8005af6 <__hexnan+0xaa>
 8005b02:	1b3b      	subs	r3, r7, r4
 8005b04:	f023 0303 	bic.w	r3, r3, #3
 8005b08:	3304      	adds	r3, #4
 8005b0a:	3401      	adds	r4, #1
 8005b0c:	3e03      	subs	r6, #3
 8005b0e:	42b4      	cmp	r4, r6
 8005b10:	bf88      	it	hi
 8005b12:	2304      	movhi	r3, #4
 8005b14:	4443      	add	r3, r8
 8005b16:	2200      	movs	r2, #0
 8005b18:	f843 2b04 	str.w	r2, [r3], #4
 8005b1c:	429f      	cmp	r7, r3
 8005b1e:	d2fb      	bcs.n	8005b18 <__hexnan+0xcc>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	b91b      	cbnz	r3, 8005b2c <__hexnan+0xe0>
 8005b24:	4547      	cmp	r7, r8
 8005b26:	d127      	bne.n	8005b78 <__hexnan+0x12c>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	2005      	movs	r0, #5
 8005b2e:	e026      	b.n	8005b7e <__hexnan+0x132>
 8005b30:	3501      	adds	r5, #1
 8005b32:	2d08      	cmp	r5, #8
 8005b34:	f10b 0b01 	add.w	fp, fp, #1
 8005b38:	dd06      	ble.n	8005b48 <__hexnan+0xfc>
 8005b3a:	4544      	cmp	r4, r8
 8005b3c:	d9c3      	bls.n	8005ac6 <__hexnan+0x7a>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f844 3c04 	str.w	r3, [r4, #-4]
 8005b44:	2501      	movs	r5, #1
 8005b46:	3c04      	subs	r4, #4
 8005b48:	6822      	ldr	r2, [r4, #0]
 8005b4a:	f000 000f 	and.w	r0, r0, #15
 8005b4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005b52:	6022      	str	r2, [r4, #0]
 8005b54:	e7b7      	b.n	8005ac6 <__hexnan+0x7a>
 8005b56:	2508      	movs	r5, #8
 8005b58:	e7b5      	b.n	8005ac6 <__hexnan+0x7a>
 8005b5a:	9b01      	ldr	r3, [sp, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0df      	beq.n	8005b20 <__hexnan+0xd4>
 8005b60:	f04f 32ff 	mov.w	r2, #4294967295
 8005b64:	f1c3 0320 	rsb	r3, r3, #32
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
 8005b6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005b70:	401a      	ands	r2, r3
 8005b72:	f846 2c04 	str.w	r2, [r6, #-4]
 8005b76:	e7d3      	b.n	8005b20 <__hexnan+0xd4>
 8005b78:	3f04      	subs	r7, #4
 8005b7a:	e7d1      	b.n	8005b20 <__hexnan+0xd4>
 8005b7c:	2004      	movs	r0, #4
 8005b7e:	b007      	add	sp, #28
 8005b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b84 <_localeconv_r>:
 8005b84:	4800      	ldr	r0, [pc, #0]	; (8005b88 <_localeconv_r+0x4>)
 8005b86:	4770      	bx	lr
 8005b88:	20000158 	.word	0x20000158

08005b8c <malloc>:
 8005b8c:	4b02      	ldr	r3, [pc, #8]	; (8005b98 <malloc+0xc>)
 8005b8e:	4601      	mov	r1, r0
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	f000 bd67 	b.w	8006664 <_malloc_r>
 8005b96:	bf00      	nop
 8005b98:	20000000 	.word	0x20000000

08005b9c <__ascii_mbtowc>:
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	b901      	cbnz	r1, 8005ba2 <__ascii_mbtowc+0x6>
 8005ba0:	a901      	add	r1, sp, #4
 8005ba2:	b142      	cbz	r2, 8005bb6 <__ascii_mbtowc+0x1a>
 8005ba4:	b14b      	cbz	r3, 8005bba <__ascii_mbtowc+0x1e>
 8005ba6:	7813      	ldrb	r3, [r2, #0]
 8005ba8:	600b      	str	r3, [r1, #0]
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	1e10      	subs	r0, r2, #0
 8005bae:	bf18      	it	ne
 8005bb0:	2001      	movne	r0, #1
 8005bb2:	b002      	add	sp, #8
 8005bb4:	4770      	bx	lr
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	e7fb      	b.n	8005bb2 <__ascii_mbtowc+0x16>
 8005bba:	f06f 0001 	mvn.w	r0, #1
 8005bbe:	e7f8      	b.n	8005bb2 <__ascii_mbtowc+0x16>

08005bc0 <memcpy>:
 8005bc0:	440a      	add	r2, r1
 8005bc2:	4291      	cmp	r1, r2
 8005bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bc8:	d100      	bne.n	8005bcc <memcpy+0xc>
 8005bca:	4770      	bx	lr
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bd6:	4291      	cmp	r1, r2
 8005bd8:	d1f9      	bne.n	8005bce <memcpy+0xe>
 8005bda:	bd10      	pop	{r4, pc}

08005bdc <_Balloc>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005be0:	4604      	mov	r4, r0
 8005be2:	460d      	mov	r5, r1
 8005be4:	b976      	cbnz	r6, 8005c04 <_Balloc+0x28>
 8005be6:	2010      	movs	r0, #16
 8005be8:	f7ff ffd0 	bl	8005b8c <malloc>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6260      	str	r0, [r4, #36]	; 0x24
 8005bf0:	b920      	cbnz	r0, 8005bfc <_Balloc+0x20>
 8005bf2:	4b18      	ldr	r3, [pc, #96]	; (8005c54 <_Balloc+0x78>)
 8005bf4:	4818      	ldr	r0, [pc, #96]	; (8005c58 <_Balloc+0x7c>)
 8005bf6:	2166      	movs	r1, #102	; 0x66
 8005bf8:	f000 ff40 	bl	8006a7c <__assert_func>
 8005bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c00:	6006      	str	r6, [r0, #0]
 8005c02:	60c6      	str	r6, [r0, #12]
 8005c04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c06:	68f3      	ldr	r3, [r6, #12]
 8005c08:	b183      	cbz	r3, 8005c2c <_Balloc+0x50>
 8005c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c12:	b9b8      	cbnz	r0, 8005c44 <_Balloc+0x68>
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f605 	lsl.w	r6, r1, r5
 8005c1a:	1d72      	adds	r2, r6, #5
 8005c1c:	0092      	lsls	r2, r2, #2
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f000 fc9d 	bl	800655e <_calloc_r>
 8005c24:	b160      	cbz	r0, 8005c40 <_Balloc+0x64>
 8005c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c2a:	e00e      	b.n	8005c4a <_Balloc+0x6e>
 8005c2c:	2221      	movs	r2, #33	; 0x21
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4620      	mov	r0, r4
 8005c32:	f000 fc94 	bl	800655e <_calloc_r>
 8005c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c38:	60f0      	str	r0, [r6, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e4      	bne.n	8005c0a <_Balloc+0x2e>
 8005c40:	2000      	movs	r0, #0
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	6802      	ldr	r2, [r0, #0]
 8005c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c50:	e7f7      	b.n	8005c42 <_Balloc+0x66>
 8005c52:	bf00      	nop
 8005c54:	080077ce 	.word	0x080077ce
 8005c58:	080078cc 	.word	0x080078cc

08005c5c <_Bfree>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c60:	4605      	mov	r5, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	b976      	cbnz	r6, 8005c84 <_Bfree+0x28>
 8005c66:	2010      	movs	r0, #16
 8005c68:	f7ff ff90 	bl	8005b8c <malloc>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6268      	str	r0, [r5, #36]	; 0x24
 8005c70:	b920      	cbnz	r0, 8005c7c <_Bfree+0x20>
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <_Bfree+0x3c>)
 8005c74:	4809      	ldr	r0, [pc, #36]	; (8005c9c <_Bfree+0x40>)
 8005c76:	218a      	movs	r1, #138	; 0x8a
 8005c78:	f000 ff00 	bl	8006a7c <__assert_func>
 8005c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c80:	6006      	str	r6, [r0, #0]
 8005c82:	60c6      	str	r6, [r0, #12]
 8005c84:	b13c      	cbz	r4, 8005c96 <_Bfree+0x3a>
 8005c86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c88:	6862      	ldr	r2, [r4, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c90:	6021      	str	r1, [r4, #0]
 8005c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	080077ce 	.word	0x080077ce
 8005c9c:	080078cc 	.word	0x080078cc

08005ca0 <__multadd>:
 8005ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca4:	690d      	ldr	r5, [r1, #16]
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	461e      	mov	r6, r3
 8005cac:	f101 0c14 	add.w	ip, r1, #20
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f8dc 3000 	ldr.w	r3, [ip]
 8005cb6:	b299      	uxth	r1, r3
 8005cb8:	fb02 6101 	mla	r1, r2, r1, r6
 8005cbc:	0c1e      	lsrs	r6, r3, #16
 8005cbe:	0c0b      	lsrs	r3, r1, #16
 8005cc0:	fb02 3306 	mla	r3, r2, r6, r3
 8005cc4:	b289      	uxth	r1, r1
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ccc:	4285      	cmp	r5, r0
 8005cce:	f84c 1b04 	str.w	r1, [ip], #4
 8005cd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cd6:	dcec      	bgt.n	8005cb2 <__multadd+0x12>
 8005cd8:	b30e      	cbz	r6, 8005d1e <__multadd+0x7e>
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dc19      	bgt.n	8005d14 <__multadd+0x74>
 8005ce0:	6861      	ldr	r1, [r4, #4]
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	f7ff ff79 	bl	8005bdc <_Balloc>
 8005cea:	4680      	mov	r8, r0
 8005cec:	b928      	cbnz	r0, 8005cfa <__multadd+0x5a>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <__multadd+0x84>)
 8005cf2:	480d      	ldr	r0, [pc, #52]	; (8005d28 <__multadd+0x88>)
 8005cf4:	21b5      	movs	r1, #181	; 0xb5
 8005cf6:	f000 fec1 	bl	8006a7c <__assert_func>
 8005cfa:	6922      	ldr	r2, [r4, #16]
 8005cfc:	3202      	adds	r2, #2
 8005cfe:	f104 010c 	add.w	r1, r4, #12
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	300c      	adds	r0, #12
 8005d06:	f7ff ff5b 	bl	8005bc0 <memcpy>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ffa5 	bl	8005c5c <_Bfree>
 8005d12:	4644      	mov	r4, r8
 8005d14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d18:	3501      	adds	r5, #1
 8005d1a:	615e      	str	r6, [r3, #20]
 8005d1c:	6125      	str	r5, [r4, #16]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d24:	08007840 	.word	0x08007840
 8005d28:	080078cc 	.word	0x080078cc

08005d2c <__s2b>:
 8005d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d30:	460c      	mov	r4, r1
 8005d32:	4615      	mov	r5, r2
 8005d34:	461f      	mov	r7, r3
 8005d36:	2209      	movs	r2, #9
 8005d38:	3308      	adds	r3, #8
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d40:	2100      	movs	r1, #0
 8005d42:	2201      	movs	r2, #1
 8005d44:	429a      	cmp	r2, r3
 8005d46:	db09      	blt.n	8005d5c <__s2b+0x30>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7ff ff47 	bl	8005bdc <_Balloc>
 8005d4e:	b940      	cbnz	r0, 8005d62 <__s2b+0x36>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <__s2b+0x8c>)
 8005d54:	4819      	ldr	r0, [pc, #100]	; (8005dbc <__s2b+0x90>)
 8005d56:	21ce      	movs	r1, #206	; 0xce
 8005d58:	f000 fe90 	bl	8006a7c <__assert_func>
 8005d5c:	0052      	lsls	r2, r2, #1
 8005d5e:	3101      	adds	r1, #1
 8005d60:	e7f0      	b.n	8005d44 <__s2b+0x18>
 8005d62:	9b08      	ldr	r3, [sp, #32]
 8005d64:	6143      	str	r3, [r0, #20]
 8005d66:	2d09      	cmp	r5, #9
 8005d68:	f04f 0301 	mov.w	r3, #1
 8005d6c:	6103      	str	r3, [r0, #16]
 8005d6e:	dd16      	ble.n	8005d9e <__s2b+0x72>
 8005d70:	f104 0909 	add.w	r9, r4, #9
 8005d74:	46c8      	mov	r8, r9
 8005d76:	442c      	add	r4, r5
 8005d78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	3b30      	subs	r3, #48	; 0x30
 8005d80:	220a      	movs	r2, #10
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff ff8c 	bl	8005ca0 <__multadd>
 8005d88:	45a0      	cmp	r8, r4
 8005d8a:	d1f5      	bne.n	8005d78 <__s2b+0x4c>
 8005d8c:	f1a5 0408 	sub.w	r4, r5, #8
 8005d90:	444c      	add	r4, r9
 8005d92:	1b2d      	subs	r5, r5, r4
 8005d94:	1963      	adds	r3, r4, r5
 8005d96:	42bb      	cmp	r3, r7
 8005d98:	db04      	blt.n	8005da4 <__s2b+0x78>
 8005d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d9e:	340a      	adds	r4, #10
 8005da0:	2509      	movs	r5, #9
 8005da2:	e7f6      	b.n	8005d92 <__s2b+0x66>
 8005da4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005da8:	4601      	mov	r1, r0
 8005daa:	3b30      	subs	r3, #48	; 0x30
 8005dac:	220a      	movs	r2, #10
 8005dae:	4630      	mov	r0, r6
 8005db0:	f7ff ff76 	bl	8005ca0 <__multadd>
 8005db4:	e7ee      	b.n	8005d94 <__s2b+0x68>
 8005db6:	bf00      	nop
 8005db8:	08007840 	.word	0x08007840
 8005dbc:	080078cc 	.word	0x080078cc

08005dc0 <__hi0bits>:
 8005dc0:	0c03      	lsrs	r3, r0, #16
 8005dc2:	041b      	lsls	r3, r3, #16
 8005dc4:	b9d3      	cbnz	r3, 8005dfc <__hi0bits+0x3c>
 8005dc6:	0400      	lsls	r0, r0, #16
 8005dc8:	2310      	movs	r3, #16
 8005dca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005dce:	bf04      	itt	eq
 8005dd0:	0200      	lsleq	r0, r0, #8
 8005dd2:	3308      	addeq	r3, #8
 8005dd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005dd8:	bf04      	itt	eq
 8005dda:	0100      	lsleq	r0, r0, #4
 8005ddc:	3304      	addeq	r3, #4
 8005dde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005de2:	bf04      	itt	eq
 8005de4:	0080      	lsleq	r0, r0, #2
 8005de6:	3302      	addeq	r3, #2
 8005de8:	2800      	cmp	r0, #0
 8005dea:	db05      	blt.n	8005df8 <__hi0bits+0x38>
 8005dec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005df0:	f103 0301 	add.w	r3, r3, #1
 8005df4:	bf08      	it	eq
 8005df6:	2320      	moveq	r3, #32
 8005df8:	4618      	mov	r0, r3
 8005dfa:	4770      	bx	lr
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e7e4      	b.n	8005dca <__hi0bits+0xa>

08005e00 <__lo0bits>:
 8005e00:	6803      	ldr	r3, [r0, #0]
 8005e02:	f013 0207 	ands.w	r2, r3, #7
 8005e06:	4601      	mov	r1, r0
 8005e08:	d00b      	beq.n	8005e22 <__lo0bits+0x22>
 8005e0a:	07da      	lsls	r2, r3, #31
 8005e0c:	d423      	bmi.n	8005e56 <__lo0bits+0x56>
 8005e0e:	0798      	lsls	r0, r3, #30
 8005e10:	bf49      	itett	mi
 8005e12:	085b      	lsrmi	r3, r3, #1
 8005e14:	089b      	lsrpl	r3, r3, #2
 8005e16:	2001      	movmi	r0, #1
 8005e18:	600b      	strmi	r3, [r1, #0]
 8005e1a:	bf5c      	itt	pl
 8005e1c:	600b      	strpl	r3, [r1, #0]
 8005e1e:	2002      	movpl	r0, #2
 8005e20:	4770      	bx	lr
 8005e22:	b298      	uxth	r0, r3
 8005e24:	b9a8      	cbnz	r0, 8005e52 <__lo0bits+0x52>
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	2010      	movs	r0, #16
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	b90a      	cbnz	r2, 8005e32 <__lo0bits+0x32>
 8005e2e:	3008      	adds	r0, #8
 8005e30:	0a1b      	lsrs	r3, r3, #8
 8005e32:	071a      	lsls	r2, r3, #28
 8005e34:	bf04      	itt	eq
 8005e36:	091b      	lsreq	r3, r3, #4
 8005e38:	3004      	addeq	r0, #4
 8005e3a:	079a      	lsls	r2, r3, #30
 8005e3c:	bf04      	itt	eq
 8005e3e:	089b      	lsreq	r3, r3, #2
 8005e40:	3002      	addeq	r0, #2
 8005e42:	07da      	lsls	r2, r3, #31
 8005e44:	d403      	bmi.n	8005e4e <__lo0bits+0x4e>
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	f100 0001 	add.w	r0, r0, #1
 8005e4c:	d005      	beq.n	8005e5a <__lo0bits+0x5a>
 8005e4e:	600b      	str	r3, [r1, #0]
 8005e50:	4770      	bx	lr
 8005e52:	4610      	mov	r0, r2
 8005e54:	e7e9      	b.n	8005e2a <__lo0bits+0x2a>
 8005e56:	2000      	movs	r0, #0
 8005e58:	4770      	bx	lr
 8005e5a:	2020      	movs	r0, #32
 8005e5c:	4770      	bx	lr
	...

08005e60 <__i2b>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	460c      	mov	r4, r1
 8005e64:	2101      	movs	r1, #1
 8005e66:	f7ff feb9 	bl	8005bdc <_Balloc>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	b928      	cbnz	r0, 8005e7a <__i2b+0x1a>
 8005e6e:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <__i2b+0x24>)
 8005e70:	4805      	ldr	r0, [pc, #20]	; (8005e88 <__i2b+0x28>)
 8005e72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e76:	f000 fe01 	bl	8006a7c <__assert_func>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	6144      	str	r4, [r0, #20]
 8005e7e:	6103      	str	r3, [r0, #16]
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	bf00      	nop
 8005e84:	08007840 	.word	0x08007840
 8005e88:	080078cc 	.word	0x080078cc

08005e8c <__multiply>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	4691      	mov	r9, r2
 8005e92:	690a      	ldr	r2, [r1, #16]
 8005e94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	bfb8      	it	lt
 8005e9c:	460b      	movlt	r3, r1
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	bfbc      	itt	lt
 8005ea2:	464c      	movlt	r4, r9
 8005ea4:	4699      	movlt	r9, r3
 8005ea6:	6927      	ldr	r7, [r4, #16]
 8005ea8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005eac:	68a3      	ldr	r3, [r4, #8]
 8005eae:	6861      	ldr	r1, [r4, #4]
 8005eb0:	eb07 060a 	add.w	r6, r7, sl
 8005eb4:	42b3      	cmp	r3, r6
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	bfb8      	it	lt
 8005eba:	3101      	addlt	r1, #1
 8005ebc:	f7ff fe8e 	bl	8005bdc <_Balloc>
 8005ec0:	b930      	cbnz	r0, 8005ed0 <__multiply+0x44>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	4b44      	ldr	r3, [pc, #272]	; (8005fd8 <__multiply+0x14c>)
 8005ec6:	4845      	ldr	r0, [pc, #276]	; (8005fdc <__multiply+0x150>)
 8005ec8:	f240 115d 	movw	r1, #349	; 0x15d
 8005ecc:	f000 fdd6 	bl	8006a7c <__assert_func>
 8005ed0:	f100 0514 	add.w	r5, r0, #20
 8005ed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ed8:	462b      	mov	r3, r5
 8005eda:	2200      	movs	r2, #0
 8005edc:	4543      	cmp	r3, r8
 8005ede:	d321      	bcc.n	8005f24 <__multiply+0x98>
 8005ee0:	f104 0314 	add.w	r3, r4, #20
 8005ee4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ee8:	f109 0314 	add.w	r3, r9, #20
 8005eec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ef0:	9202      	str	r2, [sp, #8]
 8005ef2:	1b3a      	subs	r2, r7, r4
 8005ef4:	3a15      	subs	r2, #21
 8005ef6:	f022 0203 	bic.w	r2, r2, #3
 8005efa:	3204      	adds	r2, #4
 8005efc:	f104 0115 	add.w	r1, r4, #21
 8005f00:	428f      	cmp	r7, r1
 8005f02:	bf38      	it	cc
 8005f04:	2204      	movcc	r2, #4
 8005f06:	9201      	str	r2, [sp, #4]
 8005f08:	9a02      	ldr	r2, [sp, #8]
 8005f0a:	9303      	str	r3, [sp, #12]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d80c      	bhi.n	8005f2a <__multiply+0x9e>
 8005f10:	2e00      	cmp	r6, #0
 8005f12:	dd03      	ble.n	8005f1c <__multiply+0x90>
 8005f14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d05a      	beq.n	8005fd2 <__multiply+0x146>
 8005f1c:	6106      	str	r6, [r0, #16]
 8005f1e:	b005      	add	sp, #20
 8005f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f24:	f843 2b04 	str.w	r2, [r3], #4
 8005f28:	e7d8      	b.n	8005edc <__multiply+0x50>
 8005f2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f2e:	f1ba 0f00 	cmp.w	sl, #0
 8005f32:	d024      	beq.n	8005f7e <__multiply+0xf2>
 8005f34:	f104 0e14 	add.w	lr, r4, #20
 8005f38:	46a9      	mov	r9, r5
 8005f3a:	f04f 0c00 	mov.w	ip, #0
 8005f3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f42:	f8d9 1000 	ldr.w	r1, [r9]
 8005f46:	fa1f fb82 	uxth.w	fp, r2
 8005f4a:	b289      	uxth	r1, r1
 8005f4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f54:	f8d9 2000 	ldr.w	r2, [r9]
 8005f58:	4461      	add	r1, ip
 8005f5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f66:	b289      	uxth	r1, r1
 8005f68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f6c:	4577      	cmp	r7, lr
 8005f6e:	f849 1b04 	str.w	r1, [r9], #4
 8005f72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f76:	d8e2      	bhi.n	8005f3e <__multiply+0xb2>
 8005f78:	9a01      	ldr	r2, [sp, #4]
 8005f7a:	f845 c002 	str.w	ip, [r5, r2]
 8005f7e:	9a03      	ldr	r2, [sp, #12]
 8005f80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f84:	3304      	adds	r3, #4
 8005f86:	f1b9 0f00 	cmp.w	r9, #0
 8005f8a:	d020      	beq.n	8005fce <__multiply+0x142>
 8005f8c:	6829      	ldr	r1, [r5, #0]
 8005f8e:	f104 0c14 	add.w	ip, r4, #20
 8005f92:	46ae      	mov	lr, r5
 8005f94:	f04f 0a00 	mov.w	sl, #0
 8005f98:	f8bc b000 	ldrh.w	fp, [ip]
 8005f9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fa0:	fb09 220b 	mla	r2, r9, fp, r2
 8005fa4:	4492      	add	sl, r2
 8005fa6:	b289      	uxth	r1, r1
 8005fa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005fac:	f84e 1b04 	str.w	r1, [lr], #4
 8005fb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005fb4:	f8be 1000 	ldrh.w	r1, [lr]
 8005fb8:	0c12      	lsrs	r2, r2, #16
 8005fba:	fb09 1102 	mla	r1, r9, r2, r1
 8005fbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005fc2:	4567      	cmp	r7, ip
 8005fc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fc8:	d8e6      	bhi.n	8005f98 <__multiply+0x10c>
 8005fca:	9a01      	ldr	r2, [sp, #4]
 8005fcc:	50a9      	str	r1, [r5, r2]
 8005fce:	3504      	adds	r5, #4
 8005fd0:	e79a      	b.n	8005f08 <__multiply+0x7c>
 8005fd2:	3e01      	subs	r6, #1
 8005fd4:	e79c      	b.n	8005f10 <__multiply+0x84>
 8005fd6:	bf00      	nop
 8005fd8:	08007840 	.word	0x08007840
 8005fdc:	080078cc 	.word	0x080078cc

08005fe0 <__pow5mult>:
 8005fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	4615      	mov	r5, r2
 8005fe6:	f012 0203 	ands.w	r2, r2, #3
 8005fea:	4606      	mov	r6, r0
 8005fec:	460f      	mov	r7, r1
 8005fee:	d007      	beq.n	8006000 <__pow5mult+0x20>
 8005ff0:	4c25      	ldr	r4, [pc, #148]	; (8006088 <__pow5mult+0xa8>)
 8005ff2:	3a01      	subs	r2, #1
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ffa:	f7ff fe51 	bl	8005ca0 <__multadd>
 8005ffe:	4607      	mov	r7, r0
 8006000:	10ad      	asrs	r5, r5, #2
 8006002:	d03d      	beq.n	8006080 <__pow5mult+0xa0>
 8006004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006006:	b97c      	cbnz	r4, 8006028 <__pow5mult+0x48>
 8006008:	2010      	movs	r0, #16
 800600a:	f7ff fdbf 	bl	8005b8c <malloc>
 800600e:	4602      	mov	r2, r0
 8006010:	6270      	str	r0, [r6, #36]	; 0x24
 8006012:	b928      	cbnz	r0, 8006020 <__pow5mult+0x40>
 8006014:	4b1d      	ldr	r3, [pc, #116]	; (800608c <__pow5mult+0xac>)
 8006016:	481e      	ldr	r0, [pc, #120]	; (8006090 <__pow5mult+0xb0>)
 8006018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800601c:	f000 fd2e 	bl	8006a7c <__assert_func>
 8006020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006024:	6004      	str	r4, [r0, #0]
 8006026:	60c4      	str	r4, [r0, #12]
 8006028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800602c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006030:	b94c      	cbnz	r4, 8006046 <__pow5mult+0x66>
 8006032:	f240 2171 	movw	r1, #625	; 0x271
 8006036:	4630      	mov	r0, r6
 8006038:	f7ff ff12 	bl	8005e60 <__i2b>
 800603c:	2300      	movs	r3, #0
 800603e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006042:	4604      	mov	r4, r0
 8006044:	6003      	str	r3, [r0, #0]
 8006046:	f04f 0900 	mov.w	r9, #0
 800604a:	07eb      	lsls	r3, r5, #31
 800604c:	d50a      	bpl.n	8006064 <__pow5mult+0x84>
 800604e:	4639      	mov	r1, r7
 8006050:	4622      	mov	r2, r4
 8006052:	4630      	mov	r0, r6
 8006054:	f7ff ff1a 	bl	8005e8c <__multiply>
 8006058:	4639      	mov	r1, r7
 800605a:	4680      	mov	r8, r0
 800605c:	4630      	mov	r0, r6
 800605e:	f7ff fdfd 	bl	8005c5c <_Bfree>
 8006062:	4647      	mov	r7, r8
 8006064:	106d      	asrs	r5, r5, #1
 8006066:	d00b      	beq.n	8006080 <__pow5mult+0xa0>
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	b938      	cbnz	r0, 800607c <__pow5mult+0x9c>
 800606c:	4622      	mov	r2, r4
 800606e:	4621      	mov	r1, r4
 8006070:	4630      	mov	r0, r6
 8006072:	f7ff ff0b 	bl	8005e8c <__multiply>
 8006076:	6020      	str	r0, [r4, #0]
 8006078:	f8c0 9000 	str.w	r9, [r0]
 800607c:	4604      	mov	r4, r0
 800607e:	e7e4      	b.n	800604a <__pow5mult+0x6a>
 8006080:	4638      	mov	r0, r7
 8006082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006086:	bf00      	nop
 8006088:	08007a18 	.word	0x08007a18
 800608c:	080077ce 	.word	0x080077ce
 8006090:	080078cc 	.word	0x080078cc

08006094 <__lshift>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	460c      	mov	r4, r1
 800609a:	6849      	ldr	r1, [r1, #4]
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	4607      	mov	r7, r0
 80060a6:	4691      	mov	r9, r2
 80060a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060ac:	f108 0601 	add.w	r6, r8, #1
 80060b0:	42b3      	cmp	r3, r6
 80060b2:	db0b      	blt.n	80060cc <__lshift+0x38>
 80060b4:	4638      	mov	r0, r7
 80060b6:	f7ff fd91 	bl	8005bdc <_Balloc>
 80060ba:	4605      	mov	r5, r0
 80060bc:	b948      	cbnz	r0, 80060d2 <__lshift+0x3e>
 80060be:	4602      	mov	r2, r0
 80060c0:	4b2a      	ldr	r3, [pc, #168]	; (800616c <__lshift+0xd8>)
 80060c2:	482b      	ldr	r0, [pc, #172]	; (8006170 <__lshift+0xdc>)
 80060c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80060c8:	f000 fcd8 	bl	8006a7c <__assert_func>
 80060cc:	3101      	adds	r1, #1
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	e7ee      	b.n	80060b0 <__lshift+0x1c>
 80060d2:	2300      	movs	r3, #0
 80060d4:	f100 0114 	add.w	r1, r0, #20
 80060d8:	f100 0210 	add.w	r2, r0, #16
 80060dc:	4618      	mov	r0, r3
 80060de:	4553      	cmp	r3, sl
 80060e0:	db37      	blt.n	8006152 <__lshift+0xbe>
 80060e2:	6920      	ldr	r0, [r4, #16]
 80060e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060e8:	f104 0314 	add.w	r3, r4, #20
 80060ec:	f019 091f 	ands.w	r9, r9, #31
 80060f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80060f8:	d02f      	beq.n	800615a <__lshift+0xc6>
 80060fa:	f1c9 0e20 	rsb	lr, r9, #32
 80060fe:	468a      	mov	sl, r1
 8006100:	f04f 0c00 	mov.w	ip, #0
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	fa02 f209 	lsl.w	r2, r2, r9
 800610a:	ea42 020c 	orr.w	r2, r2, ip
 800610e:	f84a 2b04 	str.w	r2, [sl], #4
 8006112:	f853 2b04 	ldr.w	r2, [r3], #4
 8006116:	4298      	cmp	r0, r3
 8006118:	fa22 fc0e 	lsr.w	ip, r2, lr
 800611c:	d8f2      	bhi.n	8006104 <__lshift+0x70>
 800611e:	1b03      	subs	r3, r0, r4
 8006120:	3b15      	subs	r3, #21
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	3304      	adds	r3, #4
 8006128:	f104 0215 	add.w	r2, r4, #21
 800612c:	4290      	cmp	r0, r2
 800612e:	bf38      	it	cc
 8006130:	2304      	movcc	r3, #4
 8006132:	f841 c003 	str.w	ip, [r1, r3]
 8006136:	f1bc 0f00 	cmp.w	ip, #0
 800613a:	d001      	beq.n	8006140 <__lshift+0xac>
 800613c:	f108 0602 	add.w	r6, r8, #2
 8006140:	3e01      	subs	r6, #1
 8006142:	4638      	mov	r0, r7
 8006144:	612e      	str	r6, [r5, #16]
 8006146:	4621      	mov	r1, r4
 8006148:	f7ff fd88 	bl	8005c5c <_Bfree>
 800614c:	4628      	mov	r0, r5
 800614e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006152:	f842 0f04 	str.w	r0, [r2, #4]!
 8006156:	3301      	adds	r3, #1
 8006158:	e7c1      	b.n	80060de <__lshift+0x4a>
 800615a:	3904      	subs	r1, #4
 800615c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006160:	f841 2f04 	str.w	r2, [r1, #4]!
 8006164:	4298      	cmp	r0, r3
 8006166:	d8f9      	bhi.n	800615c <__lshift+0xc8>
 8006168:	e7ea      	b.n	8006140 <__lshift+0xac>
 800616a:	bf00      	nop
 800616c:	08007840 	.word	0x08007840
 8006170:	080078cc 	.word	0x080078cc

08006174 <__mcmp>:
 8006174:	b530      	push	{r4, r5, lr}
 8006176:	6902      	ldr	r2, [r0, #16]
 8006178:	690c      	ldr	r4, [r1, #16]
 800617a:	1b12      	subs	r2, r2, r4
 800617c:	d10e      	bne.n	800619c <__mcmp+0x28>
 800617e:	f100 0314 	add.w	r3, r0, #20
 8006182:	3114      	adds	r1, #20
 8006184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800618c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006194:	42a5      	cmp	r5, r4
 8006196:	d003      	beq.n	80061a0 <__mcmp+0x2c>
 8006198:	d305      	bcc.n	80061a6 <__mcmp+0x32>
 800619a:	2201      	movs	r2, #1
 800619c:	4610      	mov	r0, r2
 800619e:	bd30      	pop	{r4, r5, pc}
 80061a0:	4283      	cmp	r3, r0
 80061a2:	d3f3      	bcc.n	800618c <__mcmp+0x18>
 80061a4:	e7fa      	b.n	800619c <__mcmp+0x28>
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	e7f7      	b.n	800619c <__mcmp+0x28>

080061ac <__mdiff>:
 80061ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	460c      	mov	r4, r1
 80061b2:	4606      	mov	r6, r0
 80061b4:	4611      	mov	r1, r2
 80061b6:	4620      	mov	r0, r4
 80061b8:	4690      	mov	r8, r2
 80061ba:	f7ff ffdb 	bl	8006174 <__mcmp>
 80061be:	1e05      	subs	r5, r0, #0
 80061c0:	d110      	bne.n	80061e4 <__mdiff+0x38>
 80061c2:	4629      	mov	r1, r5
 80061c4:	4630      	mov	r0, r6
 80061c6:	f7ff fd09 	bl	8005bdc <_Balloc>
 80061ca:	b930      	cbnz	r0, 80061da <__mdiff+0x2e>
 80061cc:	4b3a      	ldr	r3, [pc, #232]	; (80062b8 <__mdiff+0x10c>)
 80061ce:	4602      	mov	r2, r0
 80061d0:	f240 2132 	movw	r1, #562	; 0x232
 80061d4:	4839      	ldr	r0, [pc, #228]	; (80062bc <__mdiff+0x110>)
 80061d6:	f000 fc51 	bl	8006a7c <__assert_func>
 80061da:	2301      	movs	r3, #1
 80061dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	bfa4      	itt	ge
 80061e6:	4643      	movge	r3, r8
 80061e8:	46a0      	movge	r8, r4
 80061ea:	4630      	mov	r0, r6
 80061ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061f0:	bfa6      	itte	ge
 80061f2:	461c      	movge	r4, r3
 80061f4:	2500      	movge	r5, #0
 80061f6:	2501      	movlt	r5, #1
 80061f8:	f7ff fcf0 	bl	8005bdc <_Balloc>
 80061fc:	b920      	cbnz	r0, 8006208 <__mdiff+0x5c>
 80061fe:	4b2e      	ldr	r3, [pc, #184]	; (80062b8 <__mdiff+0x10c>)
 8006200:	4602      	mov	r2, r0
 8006202:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006206:	e7e5      	b.n	80061d4 <__mdiff+0x28>
 8006208:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800620c:	6926      	ldr	r6, [r4, #16]
 800620e:	60c5      	str	r5, [r0, #12]
 8006210:	f104 0914 	add.w	r9, r4, #20
 8006214:	f108 0514 	add.w	r5, r8, #20
 8006218:	f100 0e14 	add.w	lr, r0, #20
 800621c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006224:	f108 0210 	add.w	r2, r8, #16
 8006228:	46f2      	mov	sl, lr
 800622a:	2100      	movs	r1, #0
 800622c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006234:	fa1f f883 	uxth.w	r8, r3
 8006238:	fa11 f18b 	uxtah	r1, r1, fp
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	eba1 0808 	sub.w	r8, r1, r8
 8006242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006246:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800624a:	fa1f f888 	uxth.w	r8, r8
 800624e:	1419      	asrs	r1, r3, #16
 8006250:	454e      	cmp	r6, r9
 8006252:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006256:	f84a 3b04 	str.w	r3, [sl], #4
 800625a:	d8e7      	bhi.n	800622c <__mdiff+0x80>
 800625c:	1b33      	subs	r3, r6, r4
 800625e:	3b15      	subs	r3, #21
 8006260:	f023 0303 	bic.w	r3, r3, #3
 8006264:	3304      	adds	r3, #4
 8006266:	3415      	adds	r4, #21
 8006268:	42a6      	cmp	r6, r4
 800626a:	bf38      	it	cc
 800626c:	2304      	movcc	r3, #4
 800626e:	441d      	add	r5, r3
 8006270:	4473      	add	r3, lr
 8006272:	469e      	mov	lr, r3
 8006274:	462e      	mov	r6, r5
 8006276:	4566      	cmp	r6, ip
 8006278:	d30e      	bcc.n	8006298 <__mdiff+0xec>
 800627a:	f10c 0203 	add.w	r2, ip, #3
 800627e:	1b52      	subs	r2, r2, r5
 8006280:	f022 0203 	bic.w	r2, r2, #3
 8006284:	3d03      	subs	r5, #3
 8006286:	45ac      	cmp	ip, r5
 8006288:	bf38      	it	cc
 800628a:	2200      	movcc	r2, #0
 800628c:	441a      	add	r2, r3
 800628e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006292:	b17b      	cbz	r3, 80062b4 <__mdiff+0x108>
 8006294:	6107      	str	r7, [r0, #16]
 8006296:	e7a3      	b.n	80061e0 <__mdiff+0x34>
 8006298:	f856 8b04 	ldr.w	r8, [r6], #4
 800629c:	fa11 f288 	uxtah	r2, r1, r8
 80062a0:	1414      	asrs	r4, r2, #16
 80062a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062a6:	b292      	uxth	r2, r2
 80062a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80062ac:	f84e 2b04 	str.w	r2, [lr], #4
 80062b0:	1421      	asrs	r1, r4, #16
 80062b2:	e7e0      	b.n	8006276 <__mdiff+0xca>
 80062b4:	3f01      	subs	r7, #1
 80062b6:	e7ea      	b.n	800628e <__mdiff+0xe2>
 80062b8:	08007840 	.word	0x08007840
 80062bc:	080078cc 	.word	0x080078cc

080062c0 <__ulp>:
 80062c0:	b082      	sub	sp, #8
 80062c2:	ed8d 0b00 	vstr	d0, [sp]
 80062c6:	9b01      	ldr	r3, [sp, #4]
 80062c8:	4912      	ldr	r1, [pc, #72]	; (8006314 <__ulp+0x54>)
 80062ca:	4019      	ands	r1, r3
 80062cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80062d0:	2900      	cmp	r1, #0
 80062d2:	dd05      	ble.n	80062e0 <__ulp+0x20>
 80062d4:	2200      	movs	r2, #0
 80062d6:	460b      	mov	r3, r1
 80062d8:	ec43 2b10 	vmov	d0, r2, r3
 80062dc:	b002      	add	sp, #8
 80062de:	4770      	bx	lr
 80062e0:	4249      	negs	r1, r1
 80062e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80062e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	da04      	bge.n	80062fe <__ulp+0x3e>
 80062f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80062f8:	fa41 f300 	asr.w	r3, r1, r0
 80062fc:	e7ec      	b.n	80062d8 <__ulp+0x18>
 80062fe:	f1a0 0114 	sub.w	r1, r0, #20
 8006302:	291e      	cmp	r1, #30
 8006304:	bfda      	itte	le
 8006306:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800630a:	fa20 f101 	lsrle.w	r1, r0, r1
 800630e:	2101      	movgt	r1, #1
 8006310:	460a      	mov	r2, r1
 8006312:	e7e1      	b.n	80062d8 <__ulp+0x18>
 8006314:	7ff00000 	.word	0x7ff00000

08006318 <__b2d>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	6905      	ldr	r5, [r0, #16]
 800631c:	f100 0714 	add.w	r7, r0, #20
 8006320:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006324:	1f2e      	subs	r6, r5, #4
 8006326:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800632a:	4620      	mov	r0, r4
 800632c:	f7ff fd48 	bl	8005dc0 <__hi0bits>
 8006330:	f1c0 0320 	rsb	r3, r0, #32
 8006334:	280a      	cmp	r0, #10
 8006336:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80063b4 <__b2d+0x9c>
 800633a:	600b      	str	r3, [r1, #0]
 800633c:	dc14      	bgt.n	8006368 <__b2d+0x50>
 800633e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006342:	fa24 f10e 	lsr.w	r1, r4, lr
 8006346:	42b7      	cmp	r7, r6
 8006348:	ea41 030c 	orr.w	r3, r1, ip
 800634c:	bf34      	ite	cc
 800634e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006352:	2100      	movcs	r1, #0
 8006354:	3015      	adds	r0, #21
 8006356:	fa04 f000 	lsl.w	r0, r4, r0
 800635a:	fa21 f10e 	lsr.w	r1, r1, lr
 800635e:	ea40 0201 	orr.w	r2, r0, r1
 8006362:	ec43 2b10 	vmov	d0, r2, r3
 8006366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006368:	42b7      	cmp	r7, r6
 800636a:	bf3a      	itte	cc
 800636c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006370:	f1a5 0608 	subcc.w	r6, r5, #8
 8006374:	2100      	movcs	r1, #0
 8006376:	380b      	subs	r0, #11
 8006378:	d017      	beq.n	80063aa <__b2d+0x92>
 800637a:	f1c0 0c20 	rsb	ip, r0, #32
 800637e:	fa04 f500 	lsl.w	r5, r4, r0
 8006382:	42be      	cmp	r6, r7
 8006384:	fa21 f40c 	lsr.w	r4, r1, ip
 8006388:	ea45 0504 	orr.w	r5, r5, r4
 800638c:	bf8c      	ite	hi
 800638e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006392:	2400      	movls	r4, #0
 8006394:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006398:	fa01 f000 	lsl.w	r0, r1, r0
 800639c:	fa24 f40c 	lsr.w	r4, r4, ip
 80063a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063a4:	ea40 0204 	orr.w	r2, r0, r4
 80063a8:	e7db      	b.n	8006362 <__b2d+0x4a>
 80063aa:	ea44 030c 	orr.w	r3, r4, ip
 80063ae:	460a      	mov	r2, r1
 80063b0:	e7d7      	b.n	8006362 <__b2d+0x4a>
 80063b2:	bf00      	nop
 80063b4:	3ff00000 	.word	0x3ff00000

080063b8 <__d2b>:
 80063b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063bc:	4689      	mov	r9, r1
 80063be:	2101      	movs	r1, #1
 80063c0:	ec57 6b10 	vmov	r6, r7, d0
 80063c4:	4690      	mov	r8, r2
 80063c6:	f7ff fc09 	bl	8005bdc <_Balloc>
 80063ca:	4604      	mov	r4, r0
 80063cc:	b930      	cbnz	r0, 80063dc <__d2b+0x24>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4b25      	ldr	r3, [pc, #148]	; (8006468 <__d2b+0xb0>)
 80063d2:	4826      	ldr	r0, [pc, #152]	; (800646c <__d2b+0xb4>)
 80063d4:	f240 310a 	movw	r1, #778	; 0x30a
 80063d8:	f000 fb50 	bl	8006a7c <__assert_func>
 80063dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80063e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063e4:	bb35      	cbnz	r5, 8006434 <__d2b+0x7c>
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	d028      	beq.n	800643e <__d2b+0x86>
 80063ec:	4668      	mov	r0, sp
 80063ee:	9600      	str	r6, [sp, #0]
 80063f0:	f7ff fd06 	bl	8005e00 <__lo0bits>
 80063f4:	9900      	ldr	r1, [sp, #0]
 80063f6:	b300      	cbz	r0, 800643a <__d2b+0x82>
 80063f8:	9a01      	ldr	r2, [sp, #4]
 80063fa:	f1c0 0320 	rsb	r3, r0, #32
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	430b      	orrs	r3, r1
 8006404:	40c2      	lsrs	r2, r0
 8006406:	6163      	str	r3, [r4, #20]
 8006408:	9201      	str	r2, [sp, #4]
 800640a:	9b01      	ldr	r3, [sp, #4]
 800640c:	61a3      	str	r3, [r4, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	bf14      	ite	ne
 8006412:	2202      	movne	r2, #2
 8006414:	2201      	moveq	r2, #1
 8006416:	6122      	str	r2, [r4, #16]
 8006418:	b1d5      	cbz	r5, 8006450 <__d2b+0x98>
 800641a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800641e:	4405      	add	r5, r0
 8006420:	f8c9 5000 	str.w	r5, [r9]
 8006424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006428:	f8c8 0000 	str.w	r0, [r8]
 800642c:	4620      	mov	r0, r4
 800642e:	b003      	add	sp, #12
 8006430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006438:	e7d5      	b.n	80063e6 <__d2b+0x2e>
 800643a:	6161      	str	r1, [r4, #20]
 800643c:	e7e5      	b.n	800640a <__d2b+0x52>
 800643e:	a801      	add	r0, sp, #4
 8006440:	f7ff fcde 	bl	8005e00 <__lo0bits>
 8006444:	9b01      	ldr	r3, [sp, #4]
 8006446:	6163      	str	r3, [r4, #20]
 8006448:	2201      	movs	r2, #1
 800644a:	6122      	str	r2, [r4, #16]
 800644c:	3020      	adds	r0, #32
 800644e:	e7e3      	b.n	8006418 <__d2b+0x60>
 8006450:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006454:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006458:	f8c9 0000 	str.w	r0, [r9]
 800645c:	6918      	ldr	r0, [r3, #16]
 800645e:	f7ff fcaf 	bl	8005dc0 <__hi0bits>
 8006462:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006466:	e7df      	b.n	8006428 <__d2b+0x70>
 8006468:	08007840 	.word	0x08007840
 800646c:	080078cc 	.word	0x080078cc

08006470 <__ratio>:
 8006470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	4688      	mov	r8, r1
 8006476:	4669      	mov	r1, sp
 8006478:	4681      	mov	r9, r0
 800647a:	f7ff ff4d 	bl	8006318 <__b2d>
 800647e:	a901      	add	r1, sp, #4
 8006480:	4640      	mov	r0, r8
 8006482:	ec55 4b10 	vmov	r4, r5, d0
 8006486:	f7ff ff47 	bl	8006318 <__b2d>
 800648a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800648e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006492:	eba3 0c02 	sub.w	ip, r3, r2
 8006496:	e9dd 3200 	ldrd	r3, r2, [sp]
 800649a:	1a9b      	subs	r3, r3, r2
 800649c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80064a0:	ec51 0b10 	vmov	r0, r1, d0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bfd6      	itet	le
 80064a8:	460a      	movle	r2, r1
 80064aa:	462a      	movgt	r2, r5
 80064ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064b0:	468b      	mov	fp, r1
 80064b2:	462f      	mov	r7, r5
 80064b4:	bfd4      	ite	le
 80064b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80064ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80064be:	4620      	mov	r0, r4
 80064c0:	ee10 2a10 	vmov	r2, s0
 80064c4:	465b      	mov	r3, fp
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7fa f9c8 	bl	800085c <__aeabi_ddiv>
 80064cc:	ec41 0b10 	vmov	d0, r0, r1
 80064d0:	b003      	add	sp, #12
 80064d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064d6 <__copybits>:
 80064d6:	3901      	subs	r1, #1
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	1149      	asrs	r1, r1, #5
 80064dc:	6914      	ldr	r4, [r2, #16]
 80064de:	3101      	adds	r1, #1
 80064e0:	f102 0314 	add.w	r3, r2, #20
 80064e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064ec:	1f05      	subs	r5, r0, #4
 80064ee:	42a3      	cmp	r3, r4
 80064f0:	d30c      	bcc.n	800650c <__copybits+0x36>
 80064f2:	1aa3      	subs	r3, r4, r2
 80064f4:	3b11      	subs	r3, #17
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	3211      	adds	r2, #17
 80064fc:	42a2      	cmp	r2, r4
 80064fe:	bf88      	it	hi
 8006500:	2300      	movhi	r3, #0
 8006502:	4418      	add	r0, r3
 8006504:	2300      	movs	r3, #0
 8006506:	4288      	cmp	r0, r1
 8006508:	d305      	bcc.n	8006516 <__copybits+0x40>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006510:	f845 6f04 	str.w	r6, [r5, #4]!
 8006514:	e7eb      	b.n	80064ee <__copybits+0x18>
 8006516:	f840 3b04 	str.w	r3, [r0], #4
 800651a:	e7f4      	b.n	8006506 <__copybits+0x30>

0800651c <__any_on>:
 800651c:	f100 0214 	add.w	r2, r0, #20
 8006520:	6900      	ldr	r0, [r0, #16]
 8006522:	114b      	asrs	r3, r1, #5
 8006524:	4298      	cmp	r0, r3
 8006526:	b510      	push	{r4, lr}
 8006528:	db11      	blt.n	800654e <__any_on+0x32>
 800652a:	dd0a      	ble.n	8006542 <__any_on+0x26>
 800652c:	f011 011f 	ands.w	r1, r1, #31
 8006530:	d007      	beq.n	8006542 <__any_on+0x26>
 8006532:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006536:	fa24 f001 	lsr.w	r0, r4, r1
 800653a:	fa00 f101 	lsl.w	r1, r0, r1
 800653e:	428c      	cmp	r4, r1
 8006540:	d10b      	bne.n	800655a <__any_on+0x3e>
 8006542:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006546:	4293      	cmp	r3, r2
 8006548:	d803      	bhi.n	8006552 <__any_on+0x36>
 800654a:	2000      	movs	r0, #0
 800654c:	bd10      	pop	{r4, pc}
 800654e:	4603      	mov	r3, r0
 8006550:	e7f7      	b.n	8006542 <__any_on+0x26>
 8006552:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006556:	2900      	cmp	r1, #0
 8006558:	d0f5      	beq.n	8006546 <__any_on+0x2a>
 800655a:	2001      	movs	r0, #1
 800655c:	e7f6      	b.n	800654c <__any_on+0x30>

0800655e <_calloc_r>:
 800655e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006560:	fba1 2402 	umull	r2, r4, r1, r2
 8006564:	b94c      	cbnz	r4, 800657a <_calloc_r+0x1c>
 8006566:	4611      	mov	r1, r2
 8006568:	9201      	str	r2, [sp, #4]
 800656a:	f000 f87b 	bl	8006664 <_malloc_r>
 800656e:	9a01      	ldr	r2, [sp, #4]
 8006570:	4605      	mov	r5, r0
 8006572:	b930      	cbnz	r0, 8006582 <_calloc_r+0x24>
 8006574:	4628      	mov	r0, r5
 8006576:	b003      	add	sp, #12
 8006578:	bd30      	pop	{r4, r5, pc}
 800657a:	220c      	movs	r2, #12
 800657c:	6002      	str	r2, [r0, #0]
 800657e:	2500      	movs	r5, #0
 8006580:	e7f8      	b.n	8006574 <_calloc_r+0x16>
 8006582:	4621      	mov	r1, r4
 8006584:	f7fc fbc0 	bl	8002d08 <memset>
 8006588:	e7f4      	b.n	8006574 <_calloc_r+0x16>
	...

0800658c <_free_r>:
 800658c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800658e:	2900      	cmp	r1, #0
 8006590:	d044      	beq.n	800661c <_free_r+0x90>
 8006592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006596:	9001      	str	r0, [sp, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f1a1 0404 	sub.w	r4, r1, #4
 800659e:	bfb8      	it	lt
 80065a0:	18e4      	addlt	r4, r4, r3
 80065a2:	f000 fab5 	bl	8006b10 <__malloc_lock>
 80065a6:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <_free_r+0x94>)
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	b933      	cbnz	r3, 80065bc <_free_r+0x30>
 80065ae:	6063      	str	r3, [r4, #4]
 80065b0:	6014      	str	r4, [r2, #0]
 80065b2:	b003      	add	sp, #12
 80065b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065b8:	f000 bab0 	b.w	8006b1c <__malloc_unlock>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d908      	bls.n	80065d2 <_free_r+0x46>
 80065c0:	6825      	ldr	r5, [r4, #0]
 80065c2:	1961      	adds	r1, r4, r5
 80065c4:	428b      	cmp	r3, r1
 80065c6:	bf01      	itttt	eq
 80065c8:	6819      	ldreq	r1, [r3, #0]
 80065ca:	685b      	ldreq	r3, [r3, #4]
 80065cc:	1949      	addeq	r1, r1, r5
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	e7ed      	b.n	80065ae <_free_r+0x22>
 80065d2:	461a      	mov	r2, r3
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	b10b      	cbz	r3, 80065dc <_free_r+0x50>
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d9fa      	bls.n	80065d2 <_free_r+0x46>
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	1855      	adds	r5, r2, r1
 80065e0:	42a5      	cmp	r5, r4
 80065e2:	d10b      	bne.n	80065fc <_free_r+0x70>
 80065e4:	6824      	ldr	r4, [r4, #0]
 80065e6:	4421      	add	r1, r4
 80065e8:	1854      	adds	r4, r2, r1
 80065ea:	42a3      	cmp	r3, r4
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	d1e0      	bne.n	80065b2 <_free_r+0x26>
 80065f0:	681c      	ldr	r4, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	6053      	str	r3, [r2, #4]
 80065f6:	4421      	add	r1, r4
 80065f8:	6011      	str	r1, [r2, #0]
 80065fa:	e7da      	b.n	80065b2 <_free_r+0x26>
 80065fc:	d902      	bls.n	8006604 <_free_r+0x78>
 80065fe:	230c      	movs	r3, #12
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	e7d6      	b.n	80065b2 <_free_r+0x26>
 8006604:	6825      	ldr	r5, [r4, #0]
 8006606:	1961      	adds	r1, r4, r5
 8006608:	428b      	cmp	r3, r1
 800660a:	bf04      	itt	eq
 800660c:	6819      	ldreq	r1, [r3, #0]
 800660e:	685b      	ldreq	r3, [r3, #4]
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	bf04      	itt	eq
 8006614:	1949      	addeq	r1, r1, r5
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	6054      	str	r4, [r2, #4]
 800661a:	e7ca      	b.n	80065b2 <_free_r+0x26>
 800661c:	b003      	add	sp, #12
 800661e:	bd30      	pop	{r4, r5, pc}
 8006620:	20000b20 	.word	0x20000b20

08006624 <sbrk_aligned>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	4e0e      	ldr	r6, [pc, #56]	; (8006660 <sbrk_aligned+0x3c>)
 8006628:	460c      	mov	r4, r1
 800662a:	6831      	ldr	r1, [r6, #0]
 800662c:	4605      	mov	r5, r0
 800662e:	b911      	cbnz	r1, 8006636 <sbrk_aligned+0x12>
 8006630:	f000 f9f2 	bl	8006a18 <_sbrk_r>
 8006634:	6030      	str	r0, [r6, #0]
 8006636:	4621      	mov	r1, r4
 8006638:	4628      	mov	r0, r5
 800663a:	f000 f9ed 	bl	8006a18 <_sbrk_r>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d00a      	beq.n	8006658 <sbrk_aligned+0x34>
 8006642:	1cc4      	adds	r4, r0, #3
 8006644:	f024 0403 	bic.w	r4, r4, #3
 8006648:	42a0      	cmp	r0, r4
 800664a:	d007      	beq.n	800665c <sbrk_aligned+0x38>
 800664c:	1a21      	subs	r1, r4, r0
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f9e2 	bl	8006a18 <_sbrk_r>
 8006654:	3001      	adds	r0, #1
 8006656:	d101      	bne.n	800665c <sbrk_aligned+0x38>
 8006658:	f04f 34ff 	mov.w	r4, #4294967295
 800665c:	4620      	mov	r0, r4
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	20000b24 	.word	0x20000b24

08006664 <_malloc_r>:
 8006664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006668:	1ccd      	adds	r5, r1, #3
 800666a:	f025 0503 	bic.w	r5, r5, #3
 800666e:	3508      	adds	r5, #8
 8006670:	2d0c      	cmp	r5, #12
 8006672:	bf38      	it	cc
 8006674:	250c      	movcc	r5, #12
 8006676:	2d00      	cmp	r5, #0
 8006678:	4607      	mov	r7, r0
 800667a:	db01      	blt.n	8006680 <_malloc_r+0x1c>
 800667c:	42a9      	cmp	r1, r5
 800667e:	d905      	bls.n	800668c <_malloc_r+0x28>
 8006680:	230c      	movs	r3, #12
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	2600      	movs	r6, #0
 8006686:	4630      	mov	r0, r6
 8006688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668c:	4e2e      	ldr	r6, [pc, #184]	; (8006748 <_malloc_r+0xe4>)
 800668e:	f000 fa3f 	bl	8006b10 <__malloc_lock>
 8006692:	6833      	ldr	r3, [r6, #0]
 8006694:	461c      	mov	r4, r3
 8006696:	bb34      	cbnz	r4, 80066e6 <_malloc_r+0x82>
 8006698:	4629      	mov	r1, r5
 800669a:	4638      	mov	r0, r7
 800669c:	f7ff ffc2 	bl	8006624 <sbrk_aligned>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	4604      	mov	r4, r0
 80066a4:	d14d      	bne.n	8006742 <_malloc_r+0xde>
 80066a6:	6834      	ldr	r4, [r6, #0]
 80066a8:	4626      	mov	r6, r4
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d140      	bne.n	8006730 <_malloc_r+0xcc>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	4631      	mov	r1, r6
 80066b2:	4638      	mov	r0, r7
 80066b4:	eb04 0803 	add.w	r8, r4, r3
 80066b8:	f000 f9ae 	bl	8006a18 <_sbrk_r>
 80066bc:	4580      	cmp	r8, r0
 80066be:	d13a      	bne.n	8006736 <_malloc_r+0xd2>
 80066c0:	6821      	ldr	r1, [r4, #0]
 80066c2:	3503      	adds	r5, #3
 80066c4:	1a6d      	subs	r5, r5, r1
 80066c6:	f025 0503 	bic.w	r5, r5, #3
 80066ca:	3508      	adds	r5, #8
 80066cc:	2d0c      	cmp	r5, #12
 80066ce:	bf38      	it	cc
 80066d0:	250c      	movcc	r5, #12
 80066d2:	4629      	mov	r1, r5
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7ff ffa5 	bl	8006624 <sbrk_aligned>
 80066da:	3001      	adds	r0, #1
 80066dc:	d02b      	beq.n	8006736 <_malloc_r+0xd2>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	442b      	add	r3, r5
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	e00e      	b.n	8006704 <_malloc_r+0xa0>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	1b52      	subs	r2, r2, r5
 80066ea:	d41e      	bmi.n	800672a <_malloc_r+0xc6>
 80066ec:	2a0b      	cmp	r2, #11
 80066ee:	d916      	bls.n	800671e <_malloc_r+0xba>
 80066f0:	1961      	adds	r1, r4, r5
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	6025      	str	r5, [r4, #0]
 80066f6:	bf18      	it	ne
 80066f8:	6059      	strne	r1, [r3, #4]
 80066fa:	6863      	ldr	r3, [r4, #4]
 80066fc:	bf08      	it	eq
 80066fe:	6031      	streq	r1, [r6, #0]
 8006700:	5162      	str	r2, [r4, r5]
 8006702:	604b      	str	r3, [r1, #4]
 8006704:	4638      	mov	r0, r7
 8006706:	f104 060b 	add.w	r6, r4, #11
 800670a:	f000 fa07 	bl	8006b1c <__malloc_unlock>
 800670e:	f026 0607 	bic.w	r6, r6, #7
 8006712:	1d23      	adds	r3, r4, #4
 8006714:	1af2      	subs	r2, r6, r3
 8006716:	d0b6      	beq.n	8006686 <_malloc_r+0x22>
 8006718:	1b9b      	subs	r3, r3, r6
 800671a:	50a3      	str	r3, [r4, r2]
 800671c:	e7b3      	b.n	8006686 <_malloc_r+0x22>
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	42a3      	cmp	r3, r4
 8006722:	bf0c      	ite	eq
 8006724:	6032      	streq	r2, [r6, #0]
 8006726:	605a      	strne	r2, [r3, #4]
 8006728:	e7ec      	b.n	8006704 <_malloc_r+0xa0>
 800672a:	4623      	mov	r3, r4
 800672c:	6864      	ldr	r4, [r4, #4]
 800672e:	e7b2      	b.n	8006696 <_malloc_r+0x32>
 8006730:	4634      	mov	r4, r6
 8006732:	6876      	ldr	r6, [r6, #4]
 8006734:	e7b9      	b.n	80066aa <_malloc_r+0x46>
 8006736:	230c      	movs	r3, #12
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	4638      	mov	r0, r7
 800673c:	f000 f9ee 	bl	8006b1c <__malloc_unlock>
 8006740:	e7a1      	b.n	8006686 <_malloc_r+0x22>
 8006742:	6025      	str	r5, [r4, #0]
 8006744:	e7de      	b.n	8006704 <_malloc_r+0xa0>
 8006746:	bf00      	nop
 8006748:	20000b20 	.word	0x20000b20

0800674c <__ssputs_r>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	688e      	ldr	r6, [r1, #8]
 8006752:	429e      	cmp	r6, r3
 8006754:	4682      	mov	sl, r0
 8006756:	460c      	mov	r4, r1
 8006758:	4690      	mov	r8, r2
 800675a:	461f      	mov	r7, r3
 800675c:	d838      	bhi.n	80067d0 <__ssputs_r+0x84>
 800675e:	898a      	ldrh	r2, [r1, #12]
 8006760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006764:	d032      	beq.n	80067cc <__ssputs_r+0x80>
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	6909      	ldr	r1, [r1, #16]
 800676a:	eba5 0901 	sub.w	r9, r5, r1
 800676e:	6965      	ldr	r5, [r4, #20]
 8006770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006778:	3301      	adds	r3, #1
 800677a:	444b      	add	r3, r9
 800677c:	106d      	asrs	r5, r5, #1
 800677e:	429d      	cmp	r5, r3
 8006780:	bf38      	it	cc
 8006782:	461d      	movcc	r5, r3
 8006784:	0553      	lsls	r3, r2, #21
 8006786:	d531      	bpl.n	80067ec <__ssputs_r+0xa0>
 8006788:	4629      	mov	r1, r5
 800678a:	f7ff ff6b 	bl	8006664 <_malloc_r>
 800678e:	4606      	mov	r6, r0
 8006790:	b950      	cbnz	r0, 80067a8 <__ssputs_r+0x5c>
 8006792:	230c      	movs	r3, #12
 8006794:	f8ca 3000 	str.w	r3, [sl]
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a8:	6921      	ldr	r1, [r4, #16]
 80067aa:	464a      	mov	r2, r9
 80067ac:	f7ff fa08 	bl	8005bc0 <memcpy>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	6126      	str	r6, [r4, #16]
 80067be:	6165      	str	r5, [r4, #20]
 80067c0:	444e      	add	r6, r9
 80067c2:	eba5 0509 	sub.w	r5, r5, r9
 80067c6:	6026      	str	r6, [r4, #0]
 80067c8:	60a5      	str	r5, [r4, #8]
 80067ca:	463e      	mov	r6, r7
 80067cc:	42be      	cmp	r6, r7
 80067ce:	d900      	bls.n	80067d2 <__ssputs_r+0x86>
 80067d0:	463e      	mov	r6, r7
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	4632      	mov	r2, r6
 80067d6:	4641      	mov	r1, r8
 80067d8:	f000 f980 	bl	8006adc <memmove>
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	1b9b      	subs	r3, r3, r6
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	4433      	add	r3, r6
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	2000      	movs	r0, #0
 80067ea:	e7db      	b.n	80067a4 <__ssputs_r+0x58>
 80067ec:	462a      	mov	r2, r5
 80067ee:	f000 f99b 	bl	8006b28 <_realloc_r>
 80067f2:	4606      	mov	r6, r0
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d1e1      	bne.n	80067bc <__ssputs_r+0x70>
 80067f8:	6921      	ldr	r1, [r4, #16]
 80067fa:	4650      	mov	r0, sl
 80067fc:	f7ff fec6 	bl	800658c <_free_r>
 8006800:	e7c7      	b.n	8006792 <__ssputs_r+0x46>
	...

08006804 <_svfiprintf_r>:
 8006804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006808:	4698      	mov	r8, r3
 800680a:	898b      	ldrh	r3, [r1, #12]
 800680c:	061b      	lsls	r3, r3, #24
 800680e:	b09d      	sub	sp, #116	; 0x74
 8006810:	4607      	mov	r7, r0
 8006812:	460d      	mov	r5, r1
 8006814:	4614      	mov	r4, r2
 8006816:	d50e      	bpl.n	8006836 <_svfiprintf_r+0x32>
 8006818:	690b      	ldr	r3, [r1, #16]
 800681a:	b963      	cbnz	r3, 8006836 <_svfiprintf_r+0x32>
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	f7ff ff21 	bl	8006664 <_malloc_r>
 8006822:	6028      	str	r0, [r5, #0]
 8006824:	6128      	str	r0, [r5, #16]
 8006826:	b920      	cbnz	r0, 8006832 <_svfiprintf_r+0x2e>
 8006828:	230c      	movs	r3, #12
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	e0d1      	b.n	80069d6 <_svfiprintf_r+0x1d2>
 8006832:	2340      	movs	r3, #64	; 0x40
 8006834:	616b      	str	r3, [r5, #20]
 8006836:	2300      	movs	r3, #0
 8006838:	9309      	str	r3, [sp, #36]	; 0x24
 800683a:	2320      	movs	r3, #32
 800683c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006840:	f8cd 800c 	str.w	r8, [sp, #12]
 8006844:	2330      	movs	r3, #48	; 0x30
 8006846:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069f0 <_svfiprintf_r+0x1ec>
 800684a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800684e:	f04f 0901 	mov.w	r9, #1
 8006852:	4623      	mov	r3, r4
 8006854:	469a      	mov	sl, r3
 8006856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800685a:	b10a      	cbz	r2, 8006860 <_svfiprintf_r+0x5c>
 800685c:	2a25      	cmp	r2, #37	; 0x25
 800685e:	d1f9      	bne.n	8006854 <_svfiprintf_r+0x50>
 8006860:	ebba 0b04 	subs.w	fp, sl, r4
 8006864:	d00b      	beq.n	800687e <_svfiprintf_r+0x7a>
 8006866:	465b      	mov	r3, fp
 8006868:	4622      	mov	r2, r4
 800686a:	4629      	mov	r1, r5
 800686c:	4638      	mov	r0, r7
 800686e:	f7ff ff6d 	bl	800674c <__ssputs_r>
 8006872:	3001      	adds	r0, #1
 8006874:	f000 80aa 	beq.w	80069cc <_svfiprintf_r+0x1c8>
 8006878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800687a:	445a      	add	r2, fp
 800687c:	9209      	str	r2, [sp, #36]	; 0x24
 800687e:	f89a 3000 	ldrb.w	r3, [sl]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80a2 	beq.w	80069cc <_svfiprintf_r+0x1c8>
 8006888:	2300      	movs	r3, #0
 800688a:	f04f 32ff 	mov.w	r2, #4294967295
 800688e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006892:	f10a 0a01 	add.w	sl, sl, #1
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	9307      	str	r3, [sp, #28]
 800689a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800689e:	931a      	str	r3, [sp, #104]	; 0x68
 80068a0:	4654      	mov	r4, sl
 80068a2:	2205      	movs	r2, #5
 80068a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a8:	4851      	ldr	r0, [pc, #324]	; (80069f0 <_svfiprintf_r+0x1ec>)
 80068aa:	f7f9 fca1 	bl	80001f0 <memchr>
 80068ae:	9a04      	ldr	r2, [sp, #16]
 80068b0:	b9d8      	cbnz	r0, 80068ea <_svfiprintf_r+0xe6>
 80068b2:	06d0      	lsls	r0, r2, #27
 80068b4:	bf44      	itt	mi
 80068b6:	2320      	movmi	r3, #32
 80068b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068bc:	0711      	lsls	r1, r2, #28
 80068be:	bf44      	itt	mi
 80068c0:	232b      	movmi	r3, #43	; 0x2b
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068c6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ca:	2b2a      	cmp	r3, #42	; 0x2a
 80068cc:	d015      	beq.n	80068fa <_svfiprintf_r+0xf6>
 80068ce:	9a07      	ldr	r2, [sp, #28]
 80068d0:	4654      	mov	r4, sl
 80068d2:	2000      	movs	r0, #0
 80068d4:	f04f 0c0a 	mov.w	ip, #10
 80068d8:	4621      	mov	r1, r4
 80068da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068de:	3b30      	subs	r3, #48	; 0x30
 80068e0:	2b09      	cmp	r3, #9
 80068e2:	d94e      	bls.n	8006982 <_svfiprintf_r+0x17e>
 80068e4:	b1b0      	cbz	r0, 8006914 <_svfiprintf_r+0x110>
 80068e6:	9207      	str	r2, [sp, #28]
 80068e8:	e014      	b.n	8006914 <_svfiprintf_r+0x110>
 80068ea:	eba0 0308 	sub.w	r3, r0, r8
 80068ee:	fa09 f303 	lsl.w	r3, r9, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	46a2      	mov	sl, r4
 80068f8:	e7d2      	b.n	80068a0 <_svfiprintf_r+0x9c>
 80068fa:	9b03      	ldr	r3, [sp, #12]
 80068fc:	1d19      	adds	r1, r3, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	9103      	str	r1, [sp, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	bfbb      	ittet	lt
 8006906:	425b      	neglt	r3, r3
 8006908:	f042 0202 	orrlt.w	r2, r2, #2
 800690c:	9307      	strge	r3, [sp, #28]
 800690e:	9307      	strlt	r3, [sp, #28]
 8006910:	bfb8      	it	lt
 8006912:	9204      	strlt	r2, [sp, #16]
 8006914:	7823      	ldrb	r3, [r4, #0]
 8006916:	2b2e      	cmp	r3, #46	; 0x2e
 8006918:	d10c      	bne.n	8006934 <_svfiprintf_r+0x130>
 800691a:	7863      	ldrb	r3, [r4, #1]
 800691c:	2b2a      	cmp	r3, #42	; 0x2a
 800691e:	d135      	bne.n	800698c <_svfiprintf_r+0x188>
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	1d1a      	adds	r2, r3, #4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	9203      	str	r2, [sp, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	bfb8      	it	lt
 800692c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006930:	3402      	adds	r4, #2
 8006932:	9305      	str	r3, [sp, #20]
 8006934:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a00 <_svfiprintf_r+0x1fc>
 8006938:	7821      	ldrb	r1, [r4, #0]
 800693a:	2203      	movs	r2, #3
 800693c:	4650      	mov	r0, sl
 800693e:	f7f9 fc57 	bl	80001f0 <memchr>
 8006942:	b140      	cbz	r0, 8006956 <_svfiprintf_r+0x152>
 8006944:	2340      	movs	r3, #64	; 0x40
 8006946:	eba0 000a 	sub.w	r0, r0, sl
 800694a:	fa03 f000 	lsl.w	r0, r3, r0
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	4303      	orrs	r3, r0
 8006952:	3401      	adds	r4, #1
 8006954:	9304      	str	r3, [sp, #16]
 8006956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695a:	4826      	ldr	r0, [pc, #152]	; (80069f4 <_svfiprintf_r+0x1f0>)
 800695c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006960:	2206      	movs	r2, #6
 8006962:	f7f9 fc45 	bl	80001f0 <memchr>
 8006966:	2800      	cmp	r0, #0
 8006968:	d038      	beq.n	80069dc <_svfiprintf_r+0x1d8>
 800696a:	4b23      	ldr	r3, [pc, #140]	; (80069f8 <_svfiprintf_r+0x1f4>)
 800696c:	bb1b      	cbnz	r3, 80069b6 <_svfiprintf_r+0x1b2>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	3307      	adds	r3, #7
 8006972:	f023 0307 	bic.w	r3, r3, #7
 8006976:	3308      	adds	r3, #8
 8006978:	9303      	str	r3, [sp, #12]
 800697a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697c:	4433      	add	r3, r6
 800697e:	9309      	str	r3, [sp, #36]	; 0x24
 8006980:	e767      	b.n	8006852 <_svfiprintf_r+0x4e>
 8006982:	fb0c 3202 	mla	r2, ip, r2, r3
 8006986:	460c      	mov	r4, r1
 8006988:	2001      	movs	r0, #1
 800698a:	e7a5      	b.n	80068d8 <_svfiprintf_r+0xd4>
 800698c:	2300      	movs	r3, #0
 800698e:	3401      	adds	r4, #1
 8006990:	9305      	str	r3, [sp, #20]
 8006992:	4619      	mov	r1, r3
 8006994:	f04f 0c0a 	mov.w	ip, #10
 8006998:	4620      	mov	r0, r4
 800699a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800699e:	3a30      	subs	r2, #48	; 0x30
 80069a0:	2a09      	cmp	r2, #9
 80069a2:	d903      	bls.n	80069ac <_svfiprintf_r+0x1a8>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0c5      	beq.n	8006934 <_svfiprintf_r+0x130>
 80069a8:	9105      	str	r1, [sp, #20]
 80069aa:	e7c3      	b.n	8006934 <_svfiprintf_r+0x130>
 80069ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b0:	4604      	mov	r4, r0
 80069b2:	2301      	movs	r3, #1
 80069b4:	e7f0      	b.n	8006998 <_svfiprintf_r+0x194>
 80069b6:	ab03      	add	r3, sp, #12
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	462a      	mov	r2, r5
 80069bc:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <_svfiprintf_r+0x1f8>)
 80069be:	a904      	add	r1, sp, #16
 80069c0:	4638      	mov	r0, r7
 80069c2:	f7fc fa49 	bl	8002e58 <_printf_float>
 80069c6:	1c42      	adds	r2, r0, #1
 80069c8:	4606      	mov	r6, r0
 80069ca:	d1d6      	bne.n	800697a <_svfiprintf_r+0x176>
 80069cc:	89ab      	ldrh	r3, [r5, #12]
 80069ce:	065b      	lsls	r3, r3, #25
 80069d0:	f53f af2c 	bmi.w	800682c <_svfiprintf_r+0x28>
 80069d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069d6:	b01d      	add	sp, #116	; 0x74
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	ab03      	add	r3, sp, #12
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	462a      	mov	r2, r5
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <_svfiprintf_r+0x1f8>)
 80069e4:	a904      	add	r1, sp, #16
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7fc fcda 	bl	80033a0 <_printf_i>
 80069ec:	e7eb      	b.n	80069c6 <_svfiprintf_r+0x1c2>
 80069ee:	bf00      	nop
 80069f0:	08007a24 	.word	0x08007a24
 80069f4:	08007a2e 	.word	0x08007a2e
 80069f8:	08002e59 	.word	0x08002e59
 80069fc:	0800674d 	.word	0x0800674d
 8006a00:	08007a2a 	.word	0x08007a2a
 8006a04:	00000000 	.word	0x00000000

08006a08 <nan>:
 8006a08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006a10 <nan+0x8>
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	00000000 	.word	0x00000000
 8006a14:	7ff80000 	.word	0x7ff80000

08006a18 <_sbrk_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4d06      	ldr	r5, [pc, #24]	; (8006a34 <_sbrk_r+0x1c>)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4608      	mov	r0, r1
 8006a22:	602b      	str	r3, [r5, #0]
 8006a24:	f7fa fe94 	bl	8001750 <_sbrk>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d102      	bne.n	8006a32 <_sbrk_r+0x1a>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b103      	cbz	r3, 8006a32 <_sbrk_r+0x1a>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	20000b28 	.word	0x20000b28

08006a38 <strncmp>:
 8006a38:	b510      	push	{r4, lr}
 8006a3a:	b17a      	cbz	r2, 8006a5c <strncmp+0x24>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	3901      	subs	r1, #1
 8006a40:	1884      	adds	r4, r0, r2
 8006a42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006a4a:	4290      	cmp	r0, r2
 8006a4c:	d101      	bne.n	8006a52 <strncmp+0x1a>
 8006a4e:	42a3      	cmp	r3, r4
 8006a50:	d101      	bne.n	8006a56 <strncmp+0x1e>
 8006a52:	1a80      	subs	r0, r0, r2
 8006a54:	bd10      	pop	{r4, pc}
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1f3      	bne.n	8006a42 <strncmp+0xa>
 8006a5a:	e7fa      	b.n	8006a52 <strncmp+0x1a>
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	e7f9      	b.n	8006a54 <strncmp+0x1c>

08006a60 <__ascii_wctomb>:
 8006a60:	b149      	cbz	r1, 8006a76 <__ascii_wctomb+0x16>
 8006a62:	2aff      	cmp	r2, #255	; 0xff
 8006a64:	bf85      	ittet	hi
 8006a66:	238a      	movhi	r3, #138	; 0x8a
 8006a68:	6003      	strhi	r3, [r0, #0]
 8006a6a:	700a      	strbls	r2, [r1, #0]
 8006a6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006a70:	bf98      	it	ls
 8006a72:	2001      	movls	r0, #1
 8006a74:	4770      	bx	lr
 8006a76:	4608      	mov	r0, r1
 8006a78:	4770      	bx	lr
	...

08006a7c <__assert_func>:
 8006a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a7e:	4614      	mov	r4, r2
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <__assert_func+0x2c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4605      	mov	r5, r0
 8006a88:	68d8      	ldr	r0, [r3, #12]
 8006a8a:	b14c      	cbz	r4, 8006aa0 <__assert_func+0x24>
 8006a8c:	4b07      	ldr	r3, [pc, #28]	; (8006aac <__assert_func+0x30>)
 8006a8e:	9100      	str	r1, [sp, #0]
 8006a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a94:	4906      	ldr	r1, [pc, #24]	; (8006ab0 <__assert_func+0x34>)
 8006a96:	462b      	mov	r3, r5
 8006a98:	f000 f80e 	bl	8006ab8 <fiprintf>
 8006a9c:	f000 fa8c 	bl	8006fb8 <abort>
 8006aa0:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <__assert_func+0x38>)
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	e7f3      	b.n	8006a8e <__assert_func+0x12>
 8006aa6:	bf00      	nop
 8006aa8:	20000000 	.word	0x20000000
 8006aac:	08007a35 	.word	0x08007a35
 8006ab0:	08007a42 	.word	0x08007a42
 8006ab4:	08007a70 	.word	0x08007a70

08006ab8 <fiprintf>:
 8006ab8:	b40e      	push	{r1, r2, r3}
 8006aba:	b503      	push	{r0, r1, lr}
 8006abc:	4601      	mov	r1, r0
 8006abe:	ab03      	add	r3, sp, #12
 8006ac0:	4805      	ldr	r0, [pc, #20]	; (8006ad8 <fiprintf+0x20>)
 8006ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac6:	6800      	ldr	r0, [r0, #0]
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	f000 f885 	bl	8006bd8 <_vfiprintf_r>
 8006ace:	b002      	add	sp, #8
 8006ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad4:	b003      	add	sp, #12
 8006ad6:	4770      	bx	lr
 8006ad8:	20000000 	.word	0x20000000

08006adc <memmove>:
 8006adc:	4288      	cmp	r0, r1
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	eb01 0402 	add.w	r4, r1, r2
 8006ae4:	d902      	bls.n	8006aec <memmove+0x10>
 8006ae6:	4284      	cmp	r4, r0
 8006ae8:	4623      	mov	r3, r4
 8006aea:	d807      	bhi.n	8006afc <memmove+0x20>
 8006aec:	1e43      	subs	r3, r0, #1
 8006aee:	42a1      	cmp	r1, r4
 8006af0:	d008      	beq.n	8006b04 <memmove+0x28>
 8006af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006afa:	e7f8      	b.n	8006aee <memmove+0x12>
 8006afc:	4402      	add	r2, r0
 8006afe:	4601      	mov	r1, r0
 8006b00:	428a      	cmp	r2, r1
 8006b02:	d100      	bne.n	8006b06 <memmove+0x2a>
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b0e:	e7f7      	b.n	8006b00 <memmove+0x24>

08006b10 <__malloc_lock>:
 8006b10:	4801      	ldr	r0, [pc, #4]	; (8006b18 <__malloc_lock+0x8>)
 8006b12:	f000 bc11 	b.w	8007338 <__retarget_lock_acquire_recursive>
 8006b16:	bf00      	nop
 8006b18:	20000b2c 	.word	0x20000b2c

08006b1c <__malloc_unlock>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	; (8006b24 <__malloc_unlock+0x8>)
 8006b1e:	f000 bc0c 	b.w	800733a <__retarget_lock_release_recursive>
 8006b22:	bf00      	nop
 8006b24:	20000b2c 	.word	0x20000b2c

08006b28 <_realloc_r>:
 8006b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2c:	4680      	mov	r8, r0
 8006b2e:	4614      	mov	r4, r2
 8006b30:	460e      	mov	r6, r1
 8006b32:	b921      	cbnz	r1, 8006b3e <_realloc_r+0x16>
 8006b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b38:	4611      	mov	r1, r2
 8006b3a:	f7ff bd93 	b.w	8006664 <_malloc_r>
 8006b3e:	b92a      	cbnz	r2, 8006b4c <_realloc_r+0x24>
 8006b40:	f7ff fd24 	bl	800658c <_free_r>
 8006b44:	4625      	mov	r5, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b4c:	f000 fc5c 	bl	8007408 <_malloc_usable_size_r>
 8006b50:	4284      	cmp	r4, r0
 8006b52:	4607      	mov	r7, r0
 8006b54:	d802      	bhi.n	8006b5c <_realloc_r+0x34>
 8006b56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b5a:	d812      	bhi.n	8006b82 <_realloc_r+0x5a>
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	4640      	mov	r0, r8
 8006b60:	f7ff fd80 	bl	8006664 <_malloc_r>
 8006b64:	4605      	mov	r5, r0
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d0ed      	beq.n	8006b46 <_realloc_r+0x1e>
 8006b6a:	42bc      	cmp	r4, r7
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	4631      	mov	r1, r6
 8006b70:	bf28      	it	cs
 8006b72:	463a      	movcs	r2, r7
 8006b74:	f7ff f824 	bl	8005bc0 <memcpy>
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	f7ff fd06 	bl	800658c <_free_r>
 8006b80:	e7e1      	b.n	8006b46 <_realloc_r+0x1e>
 8006b82:	4635      	mov	r5, r6
 8006b84:	e7df      	b.n	8006b46 <_realloc_r+0x1e>

08006b86 <__sfputc_r>:
 8006b86:	6893      	ldr	r3, [r2, #8]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	b410      	push	{r4}
 8006b8e:	6093      	str	r3, [r2, #8]
 8006b90:	da08      	bge.n	8006ba4 <__sfputc_r+0x1e>
 8006b92:	6994      	ldr	r4, [r2, #24]
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	db01      	blt.n	8006b9c <__sfputc_r+0x16>
 8006b98:	290a      	cmp	r1, #10
 8006b9a:	d103      	bne.n	8006ba4 <__sfputc_r+0x1e>
 8006b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba0:	f000 b94a 	b.w	8006e38 <__swbuf_r>
 8006ba4:	6813      	ldr	r3, [r2, #0]
 8006ba6:	1c58      	adds	r0, r3, #1
 8006ba8:	6010      	str	r0, [r2, #0]
 8006baa:	7019      	strb	r1, [r3, #0]
 8006bac:	4608      	mov	r0, r1
 8006bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <__sfputs_r>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	460f      	mov	r7, r1
 8006bba:	4614      	mov	r4, r2
 8006bbc:	18d5      	adds	r5, r2, r3
 8006bbe:	42ac      	cmp	r4, r5
 8006bc0:	d101      	bne.n	8006bc6 <__sfputs_r+0x12>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	e007      	b.n	8006bd6 <__sfputs_r+0x22>
 8006bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bca:	463a      	mov	r2, r7
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f7ff ffda 	bl	8006b86 <__sfputc_r>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	d1f3      	bne.n	8006bbe <__sfputs_r+0xa>
 8006bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006bd8 <_vfiprintf_r>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	460d      	mov	r5, r1
 8006bde:	b09d      	sub	sp, #116	; 0x74
 8006be0:	4614      	mov	r4, r2
 8006be2:	4698      	mov	r8, r3
 8006be4:	4606      	mov	r6, r0
 8006be6:	b118      	cbz	r0, 8006bf0 <_vfiprintf_r+0x18>
 8006be8:	6983      	ldr	r3, [r0, #24]
 8006bea:	b90b      	cbnz	r3, 8006bf0 <_vfiprintf_r+0x18>
 8006bec:	f000 fb06 	bl	80071fc <__sinit>
 8006bf0:	4b89      	ldr	r3, [pc, #548]	; (8006e18 <_vfiprintf_r+0x240>)
 8006bf2:	429d      	cmp	r5, r3
 8006bf4:	d11b      	bne.n	8006c2e <_vfiprintf_r+0x56>
 8006bf6:	6875      	ldr	r5, [r6, #4]
 8006bf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bfa:	07d9      	lsls	r1, r3, #31
 8006bfc:	d405      	bmi.n	8006c0a <_vfiprintf_r+0x32>
 8006bfe:	89ab      	ldrh	r3, [r5, #12]
 8006c00:	059a      	lsls	r2, r3, #22
 8006c02:	d402      	bmi.n	8006c0a <_vfiprintf_r+0x32>
 8006c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c06:	f000 fb97 	bl	8007338 <__retarget_lock_acquire_recursive>
 8006c0a:	89ab      	ldrh	r3, [r5, #12]
 8006c0c:	071b      	lsls	r3, r3, #28
 8006c0e:	d501      	bpl.n	8006c14 <_vfiprintf_r+0x3c>
 8006c10:	692b      	ldr	r3, [r5, #16]
 8006c12:	b9eb      	cbnz	r3, 8006c50 <_vfiprintf_r+0x78>
 8006c14:	4629      	mov	r1, r5
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f960 	bl	8006edc <__swsetup_r>
 8006c1c:	b1c0      	cbz	r0, 8006c50 <_vfiprintf_r+0x78>
 8006c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c20:	07dc      	lsls	r4, r3, #31
 8006c22:	d50e      	bpl.n	8006c42 <_vfiprintf_r+0x6a>
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	b01d      	add	sp, #116	; 0x74
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	4b7b      	ldr	r3, [pc, #492]	; (8006e1c <_vfiprintf_r+0x244>)
 8006c30:	429d      	cmp	r5, r3
 8006c32:	d101      	bne.n	8006c38 <_vfiprintf_r+0x60>
 8006c34:	68b5      	ldr	r5, [r6, #8]
 8006c36:	e7df      	b.n	8006bf8 <_vfiprintf_r+0x20>
 8006c38:	4b79      	ldr	r3, [pc, #484]	; (8006e20 <_vfiprintf_r+0x248>)
 8006c3a:	429d      	cmp	r5, r3
 8006c3c:	bf08      	it	eq
 8006c3e:	68f5      	ldreq	r5, [r6, #12]
 8006c40:	e7da      	b.n	8006bf8 <_vfiprintf_r+0x20>
 8006c42:	89ab      	ldrh	r3, [r5, #12]
 8006c44:	0598      	lsls	r0, r3, #22
 8006c46:	d4ed      	bmi.n	8006c24 <_vfiprintf_r+0x4c>
 8006c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c4a:	f000 fb76 	bl	800733a <__retarget_lock_release_recursive>
 8006c4e:	e7e9      	b.n	8006c24 <_vfiprintf_r+0x4c>
 8006c50:	2300      	movs	r3, #0
 8006c52:	9309      	str	r3, [sp, #36]	; 0x24
 8006c54:	2320      	movs	r3, #32
 8006c56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c5e:	2330      	movs	r3, #48	; 0x30
 8006c60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e24 <_vfiprintf_r+0x24c>
 8006c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c68:	f04f 0901 	mov.w	r9, #1
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	469a      	mov	sl, r3
 8006c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c74:	b10a      	cbz	r2, 8006c7a <_vfiprintf_r+0xa2>
 8006c76:	2a25      	cmp	r2, #37	; 0x25
 8006c78:	d1f9      	bne.n	8006c6e <_vfiprintf_r+0x96>
 8006c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c7e:	d00b      	beq.n	8006c98 <_vfiprintf_r+0xc0>
 8006c80:	465b      	mov	r3, fp
 8006c82:	4622      	mov	r2, r4
 8006c84:	4629      	mov	r1, r5
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7ff ff94 	bl	8006bb4 <__sfputs_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f000 80aa 	beq.w	8006de6 <_vfiprintf_r+0x20e>
 8006c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c94:	445a      	add	r2, fp
 8006c96:	9209      	str	r2, [sp, #36]	; 0x24
 8006c98:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80a2 	beq.w	8006de6 <_vfiprintf_r+0x20e>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cac:	f10a 0a01 	add.w	sl, sl, #1
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	9307      	str	r3, [sp, #28]
 8006cb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8006cba:	4654      	mov	r4, sl
 8006cbc:	2205      	movs	r2, #5
 8006cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc2:	4858      	ldr	r0, [pc, #352]	; (8006e24 <_vfiprintf_r+0x24c>)
 8006cc4:	f7f9 fa94 	bl	80001f0 <memchr>
 8006cc8:	9a04      	ldr	r2, [sp, #16]
 8006cca:	b9d8      	cbnz	r0, 8006d04 <_vfiprintf_r+0x12c>
 8006ccc:	06d1      	lsls	r1, r2, #27
 8006cce:	bf44      	itt	mi
 8006cd0:	2320      	movmi	r3, #32
 8006cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cd6:	0713      	lsls	r3, r2, #28
 8006cd8:	bf44      	itt	mi
 8006cda:	232b      	movmi	r3, #43	; 0x2b
 8006cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce6:	d015      	beq.n	8006d14 <_vfiprintf_r+0x13c>
 8006ce8:	9a07      	ldr	r2, [sp, #28]
 8006cea:	4654      	mov	r4, sl
 8006cec:	2000      	movs	r0, #0
 8006cee:	f04f 0c0a 	mov.w	ip, #10
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cf8:	3b30      	subs	r3, #48	; 0x30
 8006cfa:	2b09      	cmp	r3, #9
 8006cfc:	d94e      	bls.n	8006d9c <_vfiprintf_r+0x1c4>
 8006cfe:	b1b0      	cbz	r0, 8006d2e <_vfiprintf_r+0x156>
 8006d00:	9207      	str	r2, [sp, #28]
 8006d02:	e014      	b.n	8006d2e <_vfiprintf_r+0x156>
 8006d04:	eba0 0308 	sub.w	r3, r0, r8
 8006d08:	fa09 f303 	lsl.w	r3, r9, r3
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	9304      	str	r3, [sp, #16]
 8006d10:	46a2      	mov	sl, r4
 8006d12:	e7d2      	b.n	8006cba <_vfiprintf_r+0xe2>
 8006d14:	9b03      	ldr	r3, [sp, #12]
 8006d16:	1d19      	adds	r1, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	9103      	str	r1, [sp, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	bfbb      	ittet	lt
 8006d20:	425b      	neglt	r3, r3
 8006d22:	f042 0202 	orrlt.w	r2, r2, #2
 8006d26:	9307      	strge	r3, [sp, #28]
 8006d28:	9307      	strlt	r3, [sp, #28]
 8006d2a:	bfb8      	it	lt
 8006d2c:	9204      	strlt	r2, [sp, #16]
 8006d2e:	7823      	ldrb	r3, [r4, #0]
 8006d30:	2b2e      	cmp	r3, #46	; 0x2e
 8006d32:	d10c      	bne.n	8006d4e <_vfiprintf_r+0x176>
 8006d34:	7863      	ldrb	r3, [r4, #1]
 8006d36:	2b2a      	cmp	r3, #42	; 0x2a
 8006d38:	d135      	bne.n	8006da6 <_vfiprintf_r+0x1ce>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	1d1a      	adds	r2, r3, #4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	9203      	str	r2, [sp, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	bfb8      	it	lt
 8006d46:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d4a:	3402      	adds	r4, #2
 8006d4c:	9305      	str	r3, [sp, #20]
 8006d4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e34 <_vfiprintf_r+0x25c>
 8006d52:	7821      	ldrb	r1, [r4, #0]
 8006d54:	2203      	movs	r2, #3
 8006d56:	4650      	mov	r0, sl
 8006d58:	f7f9 fa4a 	bl	80001f0 <memchr>
 8006d5c:	b140      	cbz	r0, 8006d70 <_vfiprintf_r+0x198>
 8006d5e:	2340      	movs	r3, #64	; 0x40
 8006d60:	eba0 000a 	sub.w	r0, r0, sl
 8006d64:	fa03 f000 	lsl.w	r0, r3, r0
 8006d68:	9b04      	ldr	r3, [sp, #16]
 8006d6a:	4303      	orrs	r3, r0
 8006d6c:	3401      	adds	r4, #1
 8006d6e:	9304      	str	r3, [sp, #16]
 8006d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d74:	482c      	ldr	r0, [pc, #176]	; (8006e28 <_vfiprintf_r+0x250>)
 8006d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d7a:	2206      	movs	r2, #6
 8006d7c:	f7f9 fa38 	bl	80001f0 <memchr>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d03f      	beq.n	8006e04 <_vfiprintf_r+0x22c>
 8006d84:	4b29      	ldr	r3, [pc, #164]	; (8006e2c <_vfiprintf_r+0x254>)
 8006d86:	bb1b      	cbnz	r3, 8006dd0 <_vfiprintf_r+0x1f8>
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	3307      	adds	r3, #7
 8006d8c:	f023 0307 	bic.w	r3, r3, #7
 8006d90:	3308      	adds	r3, #8
 8006d92:	9303      	str	r3, [sp, #12]
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	443b      	add	r3, r7
 8006d98:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9a:	e767      	b.n	8006c6c <_vfiprintf_r+0x94>
 8006d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006da0:	460c      	mov	r4, r1
 8006da2:	2001      	movs	r0, #1
 8006da4:	e7a5      	b.n	8006cf2 <_vfiprintf_r+0x11a>
 8006da6:	2300      	movs	r3, #0
 8006da8:	3401      	adds	r4, #1
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	4619      	mov	r1, r3
 8006dae:	f04f 0c0a 	mov.w	ip, #10
 8006db2:	4620      	mov	r0, r4
 8006db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006db8:	3a30      	subs	r2, #48	; 0x30
 8006dba:	2a09      	cmp	r2, #9
 8006dbc:	d903      	bls.n	8006dc6 <_vfiprintf_r+0x1ee>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0c5      	beq.n	8006d4e <_vfiprintf_r+0x176>
 8006dc2:	9105      	str	r1, [sp, #20]
 8006dc4:	e7c3      	b.n	8006d4e <_vfiprintf_r+0x176>
 8006dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dca:	4604      	mov	r4, r0
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e7f0      	b.n	8006db2 <_vfiprintf_r+0x1da>
 8006dd0:	ab03      	add	r3, sp, #12
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <_vfiprintf_r+0x258>)
 8006dd8:	a904      	add	r1, sp, #16
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7fc f83c 	bl	8002e58 <_printf_float>
 8006de0:	4607      	mov	r7, r0
 8006de2:	1c78      	adds	r0, r7, #1
 8006de4:	d1d6      	bne.n	8006d94 <_vfiprintf_r+0x1bc>
 8006de6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006de8:	07d9      	lsls	r1, r3, #31
 8006dea:	d405      	bmi.n	8006df8 <_vfiprintf_r+0x220>
 8006dec:	89ab      	ldrh	r3, [r5, #12]
 8006dee:	059a      	lsls	r2, r3, #22
 8006df0:	d402      	bmi.n	8006df8 <_vfiprintf_r+0x220>
 8006df2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df4:	f000 faa1 	bl	800733a <__retarget_lock_release_recursive>
 8006df8:	89ab      	ldrh	r3, [r5, #12]
 8006dfa:	065b      	lsls	r3, r3, #25
 8006dfc:	f53f af12 	bmi.w	8006c24 <_vfiprintf_r+0x4c>
 8006e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e02:	e711      	b.n	8006c28 <_vfiprintf_r+0x50>
 8006e04:	ab03      	add	r3, sp, #12
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <_vfiprintf_r+0x258>)
 8006e0c:	a904      	add	r1, sp, #16
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7fc fac6 	bl	80033a0 <_printf_i>
 8006e14:	e7e4      	b.n	8006de0 <_vfiprintf_r+0x208>
 8006e16:	bf00      	nop
 8006e18:	08007a94 	.word	0x08007a94
 8006e1c:	08007ab4 	.word	0x08007ab4
 8006e20:	08007a74 	.word	0x08007a74
 8006e24:	08007a24 	.word	0x08007a24
 8006e28:	08007a2e 	.word	0x08007a2e
 8006e2c:	08002e59 	.word	0x08002e59
 8006e30:	08006bb5 	.word	0x08006bb5
 8006e34:	08007a2a 	.word	0x08007a2a

08006e38 <__swbuf_r>:
 8006e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e3a:	460e      	mov	r6, r1
 8006e3c:	4614      	mov	r4, r2
 8006e3e:	4605      	mov	r5, r0
 8006e40:	b118      	cbz	r0, 8006e4a <__swbuf_r+0x12>
 8006e42:	6983      	ldr	r3, [r0, #24]
 8006e44:	b90b      	cbnz	r3, 8006e4a <__swbuf_r+0x12>
 8006e46:	f000 f9d9 	bl	80071fc <__sinit>
 8006e4a:	4b21      	ldr	r3, [pc, #132]	; (8006ed0 <__swbuf_r+0x98>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	d12b      	bne.n	8006ea8 <__swbuf_r+0x70>
 8006e50:	686c      	ldr	r4, [r5, #4]
 8006e52:	69a3      	ldr	r3, [r4, #24]
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	071a      	lsls	r2, r3, #28
 8006e5a:	d52f      	bpl.n	8006ebc <__swbuf_r+0x84>
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	b36b      	cbz	r3, 8006ebc <__swbuf_r+0x84>
 8006e60:	6923      	ldr	r3, [r4, #16]
 8006e62:	6820      	ldr	r0, [r4, #0]
 8006e64:	1ac0      	subs	r0, r0, r3
 8006e66:	6963      	ldr	r3, [r4, #20]
 8006e68:	b2f6      	uxtb	r6, r6
 8006e6a:	4283      	cmp	r3, r0
 8006e6c:	4637      	mov	r7, r6
 8006e6e:	dc04      	bgt.n	8006e7a <__swbuf_r+0x42>
 8006e70:	4621      	mov	r1, r4
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 f92e 	bl	80070d4 <_fflush_r>
 8006e78:	bb30      	cbnz	r0, 8006ec8 <__swbuf_r+0x90>
 8006e7a:	68a3      	ldr	r3, [r4, #8]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	60a3      	str	r3, [r4, #8]
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	701e      	strb	r6, [r3, #0]
 8006e88:	6963      	ldr	r3, [r4, #20]
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	4283      	cmp	r3, r0
 8006e8e:	d004      	beq.n	8006e9a <__swbuf_r+0x62>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	07db      	lsls	r3, r3, #31
 8006e94:	d506      	bpl.n	8006ea4 <__swbuf_r+0x6c>
 8006e96:	2e0a      	cmp	r6, #10
 8006e98:	d104      	bne.n	8006ea4 <__swbuf_r+0x6c>
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f000 f919 	bl	80070d4 <_fflush_r>
 8006ea2:	b988      	cbnz	r0, 8006ec8 <__swbuf_r+0x90>
 8006ea4:	4638      	mov	r0, r7
 8006ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <__swbuf_r+0x9c>)
 8006eaa:	429c      	cmp	r4, r3
 8006eac:	d101      	bne.n	8006eb2 <__swbuf_r+0x7a>
 8006eae:	68ac      	ldr	r4, [r5, #8]
 8006eb0:	e7cf      	b.n	8006e52 <__swbuf_r+0x1a>
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <__swbuf_r+0xa0>)
 8006eb4:	429c      	cmp	r4, r3
 8006eb6:	bf08      	it	eq
 8006eb8:	68ec      	ldreq	r4, [r5, #12]
 8006eba:	e7ca      	b.n	8006e52 <__swbuf_r+0x1a>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 f80c 	bl	8006edc <__swsetup_r>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d0cb      	beq.n	8006e60 <__swbuf_r+0x28>
 8006ec8:	f04f 37ff 	mov.w	r7, #4294967295
 8006ecc:	e7ea      	b.n	8006ea4 <__swbuf_r+0x6c>
 8006ece:	bf00      	nop
 8006ed0:	08007a94 	.word	0x08007a94
 8006ed4:	08007ab4 	.word	0x08007ab4
 8006ed8:	08007a74 	.word	0x08007a74

08006edc <__swsetup_r>:
 8006edc:	4b32      	ldr	r3, [pc, #200]	; (8006fa8 <__swsetup_r+0xcc>)
 8006ede:	b570      	push	{r4, r5, r6, lr}
 8006ee0:	681d      	ldr	r5, [r3, #0]
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	b125      	cbz	r5, 8006ef2 <__swsetup_r+0x16>
 8006ee8:	69ab      	ldr	r3, [r5, #24]
 8006eea:	b913      	cbnz	r3, 8006ef2 <__swsetup_r+0x16>
 8006eec:	4628      	mov	r0, r5
 8006eee:	f000 f985 	bl	80071fc <__sinit>
 8006ef2:	4b2e      	ldr	r3, [pc, #184]	; (8006fac <__swsetup_r+0xd0>)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	d10f      	bne.n	8006f18 <__swsetup_r+0x3c>
 8006ef8:	686c      	ldr	r4, [r5, #4]
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f00:	0719      	lsls	r1, r3, #28
 8006f02:	d42c      	bmi.n	8006f5e <__swsetup_r+0x82>
 8006f04:	06dd      	lsls	r5, r3, #27
 8006f06:	d411      	bmi.n	8006f2c <__swsetup_r+0x50>
 8006f08:	2309      	movs	r3, #9
 8006f0a:	6033      	str	r3, [r6, #0]
 8006f0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f10:	81a3      	strh	r3, [r4, #12]
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
 8006f16:	e03e      	b.n	8006f96 <__swsetup_r+0xba>
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <__swsetup_r+0xd4>)
 8006f1a:	429c      	cmp	r4, r3
 8006f1c:	d101      	bne.n	8006f22 <__swsetup_r+0x46>
 8006f1e:	68ac      	ldr	r4, [r5, #8]
 8006f20:	e7eb      	b.n	8006efa <__swsetup_r+0x1e>
 8006f22:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <__swsetup_r+0xd8>)
 8006f24:	429c      	cmp	r4, r3
 8006f26:	bf08      	it	eq
 8006f28:	68ec      	ldreq	r4, [r5, #12]
 8006f2a:	e7e6      	b.n	8006efa <__swsetup_r+0x1e>
 8006f2c:	0758      	lsls	r0, r3, #29
 8006f2e:	d512      	bpl.n	8006f56 <__swsetup_r+0x7a>
 8006f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f32:	b141      	cbz	r1, 8006f46 <__swsetup_r+0x6a>
 8006f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f38:	4299      	cmp	r1, r3
 8006f3a:	d002      	beq.n	8006f42 <__swsetup_r+0x66>
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f7ff fb25 	bl	800658c <_free_r>
 8006f42:	2300      	movs	r3, #0
 8006f44:	6363      	str	r3, [r4, #52]	; 0x34
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	6063      	str	r3, [r4, #4]
 8006f52:	6923      	ldr	r3, [r4, #16]
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	f043 0308 	orr.w	r3, r3, #8
 8006f5c:	81a3      	strh	r3, [r4, #12]
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	b94b      	cbnz	r3, 8006f76 <__swsetup_r+0x9a>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f6c:	d003      	beq.n	8006f76 <__swsetup_r+0x9a>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4630      	mov	r0, r6
 8006f72:	f000 fa09 	bl	8007388 <__smakebuf_r>
 8006f76:	89a0      	ldrh	r0, [r4, #12]
 8006f78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f7c:	f010 0301 	ands.w	r3, r0, #1
 8006f80:	d00a      	beq.n	8006f98 <__swsetup_r+0xbc>
 8006f82:	2300      	movs	r3, #0
 8006f84:	60a3      	str	r3, [r4, #8]
 8006f86:	6963      	ldr	r3, [r4, #20]
 8006f88:	425b      	negs	r3, r3
 8006f8a:	61a3      	str	r3, [r4, #24]
 8006f8c:	6923      	ldr	r3, [r4, #16]
 8006f8e:	b943      	cbnz	r3, 8006fa2 <__swsetup_r+0xc6>
 8006f90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f94:	d1ba      	bne.n	8006f0c <__swsetup_r+0x30>
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	0781      	lsls	r1, r0, #30
 8006f9a:	bf58      	it	pl
 8006f9c:	6963      	ldrpl	r3, [r4, #20]
 8006f9e:	60a3      	str	r3, [r4, #8]
 8006fa0:	e7f4      	b.n	8006f8c <__swsetup_r+0xb0>
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e7f7      	b.n	8006f96 <__swsetup_r+0xba>
 8006fa6:	bf00      	nop
 8006fa8:	20000000 	.word	0x20000000
 8006fac:	08007a94 	.word	0x08007a94
 8006fb0:	08007ab4 	.word	0x08007ab4
 8006fb4:	08007a74 	.word	0x08007a74

08006fb8 <abort>:
 8006fb8:	b508      	push	{r3, lr}
 8006fba:	2006      	movs	r0, #6
 8006fbc:	f000 fa54 	bl	8007468 <raise>
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	f7fa fb4e 	bl	8001662 <_exit>
	...

08006fc8 <__sflush_r>:
 8006fc8:	898a      	ldrh	r2, [r1, #12]
 8006fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fce:	4605      	mov	r5, r0
 8006fd0:	0710      	lsls	r0, r2, #28
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	d458      	bmi.n	8007088 <__sflush_r+0xc0>
 8006fd6:	684b      	ldr	r3, [r1, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	dc05      	bgt.n	8006fe8 <__sflush_r+0x20>
 8006fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	dc02      	bgt.n	8006fe8 <__sflush_r+0x20>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fea:	2e00      	cmp	r6, #0
 8006fec:	d0f9      	beq.n	8006fe2 <__sflush_r+0x1a>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ff4:	682f      	ldr	r7, [r5, #0]
 8006ff6:	602b      	str	r3, [r5, #0]
 8006ff8:	d032      	beq.n	8007060 <__sflush_r+0x98>
 8006ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	075a      	lsls	r2, r3, #29
 8007000:	d505      	bpl.n	800700e <__sflush_r+0x46>
 8007002:	6863      	ldr	r3, [r4, #4]
 8007004:	1ac0      	subs	r0, r0, r3
 8007006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007008:	b10b      	cbz	r3, 800700e <__sflush_r+0x46>
 800700a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800700c:	1ac0      	subs	r0, r0, r3
 800700e:	2300      	movs	r3, #0
 8007010:	4602      	mov	r2, r0
 8007012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007014:	6a21      	ldr	r1, [r4, #32]
 8007016:	4628      	mov	r0, r5
 8007018:	47b0      	blx	r6
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	d106      	bne.n	800702e <__sflush_r+0x66>
 8007020:	6829      	ldr	r1, [r5, #0]
 8007022:	291d      	cmp	r1, #29
 8007024:	d82c      	bhi.n	8007080 <__sflush_r+0xb8>
 8007026:	4a2a      	ldr	r2, [pc, #168]	; (80070d0 <__sflush_r+0x108>)
 8007028:	40ca      	lsrs	r2, r1
 800702a:	07d6      	lsls	r6, r2, #31
 800702c:	d528      	bpl.n	8007080 <__sflush_r+0xb8>
 800702e:	2200      	movs	r2, #0
 8007030:	6062      	str	r2, [r4, #4]
 8007032:	04d9      	lsls	r1, r3, #19
 8007034:	6922      	ldr	r2, [r4, #16]
 8007036:	6022      	str	r2, [r4, #0]
 8007038:	d504      	bpl.n	8007044 <__sflush_r+0x7c>
 800703a:	1c42      	adds	r2, r0, #1
 800703c:	d101      	bne.n	8007042 <__sflush_r+0x7a>
 800703e:	682b      	ldr	r3, [r5, #0]
 8007040:	b903      	cbnz	r3, 8007044 <__sflush_r+0x7c>
 8007042:	6560      	str	r0, [r4, #84]	; 0x54
 8007044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007046:	602f      	str	r7, [r5, #0]
 8007048:	2900      	cmp	r1, #0
 800704a:	d0ca      	beq.n	8006fe2 <__sflush_r+0x1a>
 800704c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007050:	4299      	cmp	r1, r3
 8007052:	d002      	beq.n	800705a <__sflush_r+0x92>
 8007054:	4628      	mov	r0, r5
 8007056:	f7ff fa99 	bl	800658c <_free_r>
 800705a:	2000      	movs	r0, #0
 800705c:	6360      	str	r0, [r4, #52]	; 0x34
 800705e:	e7c1      	b.n	8006fe4 <__sflush_r+0x1c>
 8007060:	6a21      	ldr	r1, [r4, #32]
 8007062:	2301      	movs	r3, #1
 8007064:	4628      	mov	r0, r5
 8007066:	47b0      	blx	r6
 8007068:	1c41      	adds	r1, r0, #1
 800706a:	d1c7      	bne.n	8006ffc <__sflush_r+0x34>
 800706c:	682b      	ldr	r3, [r5, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0c4      	beq.n	8006ffc <__sflush_r+0x34>
 8007072:	2b1d      	cmp	r3, #29
 8007074:	d001      	beq.n	800707a <__sflush_r+0xb2>
 8007076:	2b16      	cmp	r3, #22
 8007078:	d101      	bne.n	800707e <__sflush_r+0xb6>
 800707a:	602f      	str	r7, [r5, #0]
 800707c:	e7b1      	b.n	8006fe2 <__sflush_r+0x1a>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	e7ad      	b.n	8006fe4 <__sflush_r+0x1c>
 8007088:	690f      	ldr	r7, [r1, #16]
 800708a:	2f00      	cmp	r7, #0
 800708c:	d0a9      	beq.n	8006fe2 <__sflush_r+0x1a>
 800708e:	0793      	lsls	r3, r2, #30
 8007090:	680e      	ldr	r6, [r1, #0]
 8007092:	bf08      	it	eq
 8007094:	694b      	ldreq	r3, [r1, #20]
 8007096:	600f      	str	r7, [r1, #0]
 8007098:	bf18      	it	ne
 800709a:	2300      	movne	r3, #0
 800709c:	eba6 0807 	sub.w	r8, r6, r7
 80070a0:	608b      	str	r3, [r1, #8]
 80070a2:	f1b8 0f00 	cmp.w	r8, #0
 80070a6:	dd9c      	ble.n	8006fe2 <__sflush_r+0x1a>
 80070a8:	6a21      	ldr	r1, [r4, #32]
 80070aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070ac:	4643      	mov	r3, r8
 80070ae:	463a      	mov	r2, r7
 80070b0:	4628      	mov	r0, r5
 80070b2:	47b0      	blx	r6
 80070b4:	2800      	cmp	r0, #0
 80070b6:	dc06      	bgt.n	80070c6 <__sflush_r+0xfe>
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	e78e      	b.n	8006fe4 <__sflush_r+0x1c>
 80070c6:	4407      	add	r7, r0
 80070c8:	eba8 0800 	sub.w	r8, r8, r0
 80070cc:	e7e9      	b.n	80070a2 <__sflush_r+0xda>
 80070ce:	bf00      	nop
 80070d0:	20400001 	.word	0x20400001

080070d4 <_fflush_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	690b      	ldr	r3, [r1, #16]
 80070d8:	4605      	mov	r5, r0
 80070da:	460c      	mov	r4, r1
 80070dc:	b913      	cbnz	r3, 80070e4 <_fflush_r+0x10>
 80070de:	2500      	movs	r5, #0
 80070e0:	4628      	mov	r0, r5
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	b118      	cbz	r0, 80070ee <_fflush_r+0x1a>
 80070e6:	6983      	ldr	r3, [r0, #24]
 80070e8:	b90b      	cbnz	r3, 80070ee <_fflush_r+0x1a>
 80070ea:	f000 f887 	bl	80071fc <__sinit>
 80070ee:	4b14      	ldr	r3, [pc, #80]	; (8007140 <_fflush_r+0x6c>)
 80070f0:	429c      	cmp	r4, r3
 80070f2:	d11b      	bne.n	800712c <_fflush_r+0x58>
 80070f4:	686c      	ldr	r4, [r5, #4]
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0ef      	beq.n	80070de <_fflush_r+0xa>
 80070fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007100:	07d0      	lsls	r0, r2, #31
 8007102:	d404      	bmi.n	800710e <_fflush_r+0x3a>
 8007104:	0599      	lsls	r1, r3, #22
 8007106:	d402      	bmi.n	800710e <_fflush_r+0x3a>
 8007108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800710a:	f000 f915 	bl	8007338 <__retarget_lock_acquire_recursive>
 800710e:	4628      	mov	r0, r5
 8007110:	4621      	mov	r1, r4
 8007112:	f7ff ff59 	bl	8006fc8 <__sflush_r>
 8007116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007118:	07da      	lsls	r2, r3, #31
 800711a:	4605      	mov	r5, r0
 800711c:	d4e0      	bmi.n	80070e0 <_fflush_r+0xc>
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	059b      	lsls	r3, r3, #22
 8007122:	d4dd      	bmi.n	80070e0 <_fflush_r+0xc>
 8007124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007126:	f000 f908 	bl	800733a <__retarget_lock_release_recursive>
 800712a:	e7d9      	b.n	80070e0 <_fflush_r+0xc>
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <_fflush_r+0x70>)
 800712e:	429c      	cmp	r4, r3
 8007130:	d101      	bne.n	8007136 <_fflush_r+0x62>
 8007132:	68ac      	ldr	r4, [r5, #8]
 8007134:	e7df      	b.n	80070f6 <_fflush_r+0x22>
 8007136:	4b04      	ldr	r3, [pc, #16]	; (8007148 <_fflush_r+0x74>)
 8007138:	429c      	cmp	r4, r3
 800713a:	bf08      	it	eq
 800713c:	68ec      	ldreq	r4, [r5, #12]
 800713e:	e7da      	b.n	80070f6 <_fflush_r+0x22>
 8007140:	08007a94 	.word	0x08007a94
 8007144:	08007ab4 	.word	0x08007ab4
 8007148:	08007a74 	.word	0x08007a74

0800714c <std>:
 800714c:	2300      	movs	r3, #0
 800714e:	b510      	push	{r4, lr}
 8007150:	4604      	mov	r4, r0
 8007152:	e9c0 3300 	strd	r3, r3, [r0]
 8007156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800715a:	6083      	str	r3, [r0, #8]
 800715c:	8181      	strh	r1, [r0, #12]
 800715e:	6643      	str	r3, [r0, #100]	; 0x64
 8007160:	81c2      	strh	r2, [r0, #14]
 8007162:	6183      	str	r3, [r0, #24]
 8007164:	4619      	mov	r1, r3
 8007166:	2208      	movs	r2, #8
 8007168:	305c      	adds	r0, #92	; 0x5c
 800716a:	f7fb fdcd 	bl	8002d08 <memset>
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <std+0x38>)
 8007170:	6263      	str	r3, [r4, #36]	; 0x24
 8007172:	4b05      	ldr	r3, [pc, #20]	; (8007188 <std+0x3c>)
 8007174:	62a3      	str	r3, [r4, #40]	; 0x28
 8007176:	4b05      	ldr	r3, [pc, #20]	; (800718c <std+0x40>)
 8007178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <std+0x44>)
 800717c:	6224      	str	r4, [r4, #32]
 800717e:	6323      	str	r3, [r4, #48]	; 0x30
 8007180:	bd10      	pop	{r4, pc}
 8007182:	bf00      	nop
 8007184:	080074a1 	.word	0x080074a1
 8007188:	080074c3 	.word	0x080074c3
 800718c:	080074fb 	.word	0x080074fb
 8007190:	0800751f 	.word	0x0800751f

08007194 <_cleanup_r>:
 8007194:	4901      	ldr	r1, [pc, #4]	; (800719c <_cleanup_r+0x8>)
 8007196:	f000 b8af 	b.w	80072f8 <_fwalk_reent>
 800719a:	bf00      	nop
 800719c:	080070d5 	.word	0x080070d5

080071a0 <__sfmoreglue>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	2268      	movs	r2, #104	; 0x68
 80071a4:	1e4d      	subs	r5, r1, #1
 80071a6:	4355      	muls	r5, r2
 80071a8:	460e      	mov	r6, r1
 80071aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071ae:	f7ff fa59 	bl	8006664 <_malloc_r>
 80071b2:	4604      	mov	r4, r0
 80071b4:	b140      	cbz	r0, 80071c8 <__sfmoreglue+0x28>
 80071b6:	2100      	movs	r1, #0
 80071b8:	e9c0 1600 	strd	r1, r6, [r0]
 80071bc:	300c      	adds	r0, #12
 80071be:	60a0      	str	r0, [r4, #8]
 80071c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071c4:	f7fb fda0 	bl	8002d08 <memset>
 80071c8:	4620      	mov	r0, r4
 80071ca:	bd70      	pop	{r4, r5, r6, pc}

080071cc <__sfp_lock_acquire>:
 80071cc:	4801      	ldr	r0, [pc, #4]	; (80071d4 <__sfp_lock_acquire+0x8>)
 80071ce:	f000 b8b3 	b.w	8007338 <__retarget_lock_acquire_recursive>
 80071d2:	bf00      	nop
 80071d4:	20000b2d 	.word	0x20000b2d

080071d8 <__sfp_lock_release>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__sfp_lock_release+0x8>)
 80071da:	f000 b8ae 	b.w	800733a <__retarget_lock_release_recursive>
 80071de:	bf00      	nop
 80071e0:	20000b2d 	.word	0x20000b2d

080071e4 <__sinit_lock_acquire>:
 80071e4:	4801      	ldr	r0, [pc, #4]	; (80071ec <__sinit_lock_acquire+0x8>)
 80071e6:	f000 b8a7 	b.w	8007338 <__retarget_lock_acquire_recursive>
 80071ea:	bf00      	nop
 80071ec:	20000b2e 	.word	0x20000b2e

080071f0 <__sinit_lock_release>:
 80071f0:	4801      	ldr	r0, [pc, #4]	; (80071f8 <__sinit_lock_release+0x8>)
 80071f2:	f000 b8a2 	b.w	800733a <__retarget_lock_release_recursive>
 80071f6:	bf00      	nop
 80071f8:	20000b2e 	.word	0x20000b2e

080071fc <__sinit>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	4604      	mov	r4, r0
 8007200:	f7ff fff0 	bl	80071e4 <__sinit_lock_acquire>
 8007204:	69a3      	ldr	r3, [r4, #24]
 8007206:	b11b      	cbz	r3, 8007210 <__sinit+0x14>
 8007208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800720c:	f7ff bff0 	b.w	80071f0 <__sinit_lock_release>
 8007210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007214:	6523      	str	r3, [r4, #80]	; 0x50
 8007216:	4b13      	ldr	r3, [pc, #76]	; (8007264 <__sinit+0x68>)
 8007218:	4a13      	ldr	r2, [pc, #76]	; (8007268 <__sinit+0x6c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	62a2      	str	r2, [r4, #40]	; 0x28
 800721e:	42a3      	cmp	r3, r4
 8007220:	bf04      	itt	eq
 8007222:	2301      	moveq	r3, #1
 8007224:	61a3      	streq	r3, [r4, #24]
 8007226:	4620      	mov	r0, r4
 8007228:	f000 f820 	bl	800726c <__sfp>
 800722c:	6060      	str	r0, [r4, #4]
 800722e:	4620      	mov	r0, r4
 8007230:	f000 f81c 	bl	800726c <__sfp>
 8007234:	60a0      	str	r0, [r4, #8]
 8007236:	4620      	mov	r0, r4
 8007238:	f000 f818 	bl	800726c <__sfp>
 800723c:	2200      	movs	r2, #0
 800723e:	60e0      	str	r0, [r4, #12]
 8007240:	2104      	movs	r1, #4
 8007242:	6860      	ldr	r0, [r4, #4]
 8007244:	f7ff ff82 	bl	800714c <std>
 8007248:	68a0      	ldr	r0, [r4, #8]
 800724a:	2201      	movs	r2, #1
 800724c:	2109      	movs	r1, #9
 800724e:	f7ff ff7d 	bl	800714c <std>
 8007252:	68e0      	ldr	r0, [r4, #12]
 8007254:	2202      	movs	r2, #2
 8007256:	2112      	movs	r1, #18
 8007258:	f7ff ff78 	bl	800714c <std>
 800725c:	2301      	movs	r3, #1
 800725e:	61a3      	str	r3, [r4, #24]
 8007260:	e7d2      	b.n	8007208 <__sinit+0xc>
 8007262:	bf00      	nop
 8007264:	0800762c 	.word	0x0800762c
 8007268:	08007195 	.word	0x08007195

0800726c <__sfp>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	4607      	mov	r7, r0
 8007270:	f7ff ffac 	bl	80071cc <__sfp_lock_acquire>
 8007274:	4b1e      	ldr	r3, [pc, #120]	; (80072f0 <__sfp+0x84>)
 8007276:	681e      	ldr	r6, [r3, #0]
 8007278:	69b3      	ldr	r3, [r6, #24]
 800727a:	b913      	cbnz	r3, 8007282 <__sfp+0x16>
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff ffbd 	bl	80071fc <__sinit>
 8007282:	3648      	adds	r6, #72	; 0x48
 8007284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007288:	3b01      	subs	r3, #1
 800728a:	d503      	bpl.n	8007294 <__sfp+0x28>
 800728c:	6833      	ldr	r3, [r6, #0]
 800728e:	b30b      	cbz	r3, 80072d4 <__sfp+0x68>
 8007290:	6836      	ldr	r6, [r6, #0]
 8007292:	e7f7      	b.n	8007284 <__sfp+0x18>
 8007294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007298:	b9d5      	cbnz	r5, 80072d0 <__sfp+0x64>
 800729a:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <__sfp+0x88>)
 800729c:	60e3      	str	r3, [r4, #12]
 800729e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072a2:	6665      	str	r5, [r4, #100]	; 0x64
 80072a4:	f000 f847 	bl	8007336 <__retarget_lock_init_recursive>
 80072a8:	f7ff ff96 	bl	80071d8 <__sfp_lock_release>
 80072ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072b4:	6025      	str	r5, [r4, #0]
 80072b6:	61a5      	str	r5, [r4, #24]
 80072b8:	2208      	movs	r2, #8
 80072ba:	4629      	mov	r1, r5
 80072bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072c0:	f7fb fd22 	bl	8002d08 <memset>
 80072c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072cc:	4620      	mov	r0, r4
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	3468      	adds	r4, #104	; 0x68
 80072d2:	e7d9      	b.n	8007288 <__sfp+0x1c>
 80072d4:	2104      	movs	r1, #4
 80072d6:	4638      	mov	r0, r7
 80072d8:	f7ff ff62 	bl	80071a0 <__sfmoreglue>
 80072dc:	4604      	mov	r4, r0
 80072de:	6030      	str	r0, [r6, #0]
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d1d5      	bne.n	8007290 <__sfp+0x24>
 80072e4:	f7ff ff78 	bl	80071d8 <__sfp_lock_release>
 80072e8:	230c      	movs	r3, #12
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	e7ee      	b.n	80072cc <__sfp+0x60>
 80072ee:	bf00      	nop
 80072f0:	0800762c 	.word	0x0800762c
 80072f4:	ffff0001 	.word	0xffff0001

080072f8 <_fwalk_reent>:
 80072f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072fc:	4606      	mov	r6, r0
 80072fe:	4688      	mov	r8, r1
 8007300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007304:	2700      	movs	r7, #0
 8007306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800730a:	f1b9 0901 	subs.w	r9, r9, #1
 800730e:	d505      	bpl.n	800731c <_fwalk_reent+0x24>
 8007310:	6824      	ldr	r4, [r4, #0]
 8007312:	2c00      	cmp	r4, #0
 8007314:	d1f7      	bne.n	8007306 <_fwalk_reent+0xe>
 8007316:	4638      	mov	r0, r7
 8007318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800731c:	89ab      	ldrh	r3, [r5, #12]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d907      	bls.n	8007332 <_fwalk_reent+0x3a>
 8007322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007326:	3301      	adds	r3, #1
 8007328:	d003      	beq.n	8007332 <_fwalk_reent+0x3a>
 800732a:	4629      	mov	r1, r5
 800732c:	4630      	mov	r0, r6
 800732e:	47c0      	blx	r8
 8007330:	4307      	orrs	r7, r0
 8007332:	3568      	adds	r5, #104	; 0x68
 8007334:	e7e9      	b.n	800730a <_fwalk_reent+0x12>

08007336 <__retarget_lock_init_recursive>:
 8007336:	4770      	bx	lr

08007338 <__retarget_lock_acquire_recursive>:
 8007338:	4770      	bx	lr

0800733a <__retarget_lock_release_recursive>:
 800733a:	4770      	bx	lr

0800733c <__swhatbuf_r>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	460e      	mov	r6, r1
 8007340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007344:	2900      	cmp	r1, #0
 8007346:	b096      	sub	sp, #88	; 0x58
 8007348:	4614      	mov	r4, r2
 800734a:	461d      	mov	r5, r3
 800734c:	da08      	bge.n	8007360 <__swhatbuf_r+0x24>
 800734e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	602a      	str	r2, [r5, #0]
 8007356:	061a      	lsls	r2, r3, #24
 8007358:	d410      	bmi.n	800737c <__swhatbuf_r+0x40>
 800735a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800735e:	e00e      	b.n	800737e <__swhatbuf_r+0x42>
 8007360:	466a      	mov	r2, sp
 8007362:	f000 f903 	bl	800756c <_fstat_r>
 8007366:	2800      	cmp	r0, #0
 8007368:	dbf1      	blt.n	800734e <__swhatbuf_r+0x12>
 800736a:	9a01      	ldr	r2, [sp, #4]
 800736c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007370:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007374:	425a      	negs	r2, r3
 8007376:	415a      	adcs	r2, r3
 8007378:	602a      	str	r2, [r5, #0]
 800737a:	e7ee      	b.n	800735a <__swhatbuf_r+0x1e>
 800737c:	2340      	movs	r3, #64	; 0x40
 800737e:	2000      	movs	r0, #0
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	b016      	add	sp, #88	; 0x58
 8007384:	bd70      	pop	{r4, r5, r6, pc}
	...

08007388 <__smakebuf_r>:
 8007388:	898b      	ldrh	r3, [r1, #12]
 800738a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800738c:	079d      	lsls	r5, r3, #30
 800738e:	4606      	mov	r6, r0
 8007390:	460c      	mov	r4, r1
 8007392:	d507      	bpl.n	80073a4 <__smakebuf_r+0x1c>
 8007394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	6123      	str	r3, [r4, #16]
 800739c:	2301      	movs	r3, #1
 800739e:	6163      	str	r3, [r4, #20]
 80073a0:	b002      	add	sp, #8
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	ab01      	add	r3, sp, #4
 80073a6:	466a      	mov	r2, sp
 80073a8:	f7ff ffc8 	bl	800733c <__swhatbuf_r>
 80073ac:	9900      	ldr	r1, [sp, #0]
 80073ae:	4605      	mov	r5, r0
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7ff f957 	bl	8006664 <_malloc_r>
 80073b6:	b948      	cbnz	r0, 80073cc <__smakebuf_r+0x44>
 80073b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073bc:	059a      	lsls	r2, r3, #22
 80073be:	d4ef      	bmi.n	80073a0 <__smakebuf_r+0x18>
 80073c0:	f023 0303 	bic.w	r3, r3, #3
 80073c4:	f043 0302 	orr.w	r3, r3, #2
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	e7e3      	b.n	8007394 <__smakebuf_r+0xc>
 80073cc:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <__smakebuf_r+0x7c>)
 80073ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	6020      	str	r0, [r4, #0]
 80073d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d8:	81a3      	strh	r3, [r4, #12]
 80073da:	9b00      	ldr	r3, [sp, #0]
 80073dc:	6163      	str	r3, [r4, #20]
 80073de:	9b01      	ldr	r3, [sp, #4]
 80073e0:	6120      	str	r0, [r4, #16]
 80073e2:	b15b      	cbz	r3, 80073fc <__smakebuf_r+0x74>
 80073e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073e8:	4630      	mov	r0, r6
 80073ea:	f000 f8d1 	bl	8007590 <_isatty_r>
 80073ee:	b128      	cbz	r0, 80073fc <__smakebuf_r+0x74>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	89a0      	ldrh	r0, [r4, #12]
 80073fe:	4305      	orrs	r5, r0
 8007400:	81a5      	strh	r5, [r4, #12]
 8007402:	e7cd      	b.n	80073a0 <__smakebuf_r+0x18>
 8007404:	08007195 	.word	0x08007195

08007408 <_malloc_usable_size_r>:
 8007408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800740c:	1f18      	subs	r0, r3, #4
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfbc      	itt	lt
 8007412:	580b      	ldrlt	r3, [r1, r0]
 8007414:	18c0      	addlt	r0, r0, r3
 8007416:	4770      	bx	lr

08007418 <_raise_r>:
 8007418:	291f      	cmp	r1, #31
 800741a:	b538      	push	{r3, r4, r5, lr}
 800741c:	4604      	mov	r4, r0
 800741e:	460d      	mov	r5, r1
 8007420:	d904      	bls.n	800742c <_raise_r+0x14>
 8007422:	2316      	movs	r3, #22
 8007424:	6003      	str	r3, [r0, #0]
 8007426:	f04f 30ff 	mov.w	r0, #4294967295
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800742e:	b112      	cbz	r2, 8007436 <_raise_r+0x1e>
 8007430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007434:	b94b      	cbnz	r3, 800744a <_raise_r+0x32>
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f830 	bl	800749c <_getpid_r>
 800743c:	462a      	mov	r2, r5
 800743e:	4601      	mov	r1, r0
 8007440:	4620      	mov	r0, r4
 8007442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007446:	f000 b817 	b.w	8007478 <_kill_r>
 800744a:	2b01      	cmp	r3, #1
 800744c:	d00a      	beq.n	8007464 <_raise_r+0x4c>
 800744e:	1c59      	adds	r1, r3, #1
 8007450:	d103      	bne.n	800745a <_raise_r+0x42>
 8007452:	2316      	movs	r3, #22
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	2001      	movs	r0, #1
 8007458:	e7e7      	b.n	800742a <_raise_r+0x12>
 800745a:	2400      	movs	r4, #0
 800745c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007460:	4628      	mov	r0, r5
 8007462:	4798      	blx	r3
 8007464:	2000      	movs	r0, #0
 8007466:	e7e0      	b.n	800742a <_raise_r+0x12>

08007468 <raise>:
 8007468:	4b02      	ldr	r3, [pc, #8]	; (8007474 <raise+0xc>)
 800746a:	4601      	mov	r1, r0
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	f7ff bfd3 	b.w	8007418 <_raise_r>
 8007472:	bf00      	nop
 8007474:	20000000 	.word	0x20000000

08007478 <_kill_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4d07      	ldr	r5, [pc, #28]	; (8007498 <_kill_r+0x20>)
 800747c:	2300      	movs	r3, #0
 800747e:	4604      	mov	r4, r0
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f7fa f8dc 	bl	8001642 <_kill>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d102      	bne.n	8007494 <_kill_r+0x1c>
 800748e:	682b      	ldr	r3, [r5, #0]
 8007490:	b103      	cbz	r3, 8007494 <_kill_r+0x1c>
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	bd38      	pop	{r3, r4, r5, pc}
 8007496:	bf00      	nop
 8007498:	20000b28 	.word	0x20000b28

0800749c <_getpid_r>:
 800749c:	f7fa b8c9 	b.w	8001632 <_getpid>

080074a0 <__sread>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	460c      	mov	r4, r1
 80074a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a8:	f000 f894 	bl	80075d4 <_read_r>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	bfab      	itete	ge
 80074b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074b2:	89a3      	ldrhlt	r3, [r4, #12]
 80074b4:	181b      	addge	r3, r3, r0
 80074b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ba:	bfac      	ite	ge
 80074bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074be:	81a3      	strhlt	r3, [r4, #12]
 80074c0:	bd10      	pop	{r4, pc}

080074c2 <__swrite>:
 80074c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c6:	461f      	mov	r7, r3
 80074c8:	898b      	ldrh	r3, [r1, #12]
 80074ca:	05db      	lsls	r3, r3, #23
 80074cc:	4605      	mov	r5, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	4616      	mov	r6, r2
 80074d2:	d505      	bpl.n	80074e0 <__swrite+0x1e>
 80074d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d8:	2302      	movs	r3, #2
 80074da:	2200      	movs	r2, #0
 80074dc:	f000 f868 	bl	80075b0 <_lseek_r>
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ea:	81a3      	strh	r3, [r4, #12]
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	4628      	mov	r0, r5
 80074f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074f6:	f000 b817 	b.w	8007528 <_write_r>

080074fa <__sseek>:
 80074fa:	b510      	push	{r4, lr}
 80074fc:	460c      	mov	r4, r1
 80074fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007502:	f000 f855 	bl	80075b0 <_lseek_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	bf15      	itete	ne
 800750c:	6560      	strne	r0, [r4, #84]	; 0x54
 800750e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007516:	81a3      	strheq	r3, [r4, #12]
 8007518:	bf18      	it	ne
 800751a:	81a3      	strhne	r3, [r4, #12]
 800751c:	bd10      	pop	{r4, pc}

0800751e <__sclose>:
 800751e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007522:	f000 b813 	b.w	800754c <_close_r>
	...

08007528 <_write_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	; (8007548 <_write_r+0x20>)
 800752c:	4604      	mov	r4, r0
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	2200      	movs	r2, #0
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7fa f8ba 	bl	80016b0 <_write>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_write_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_write_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20000b28 	.word	0x20000b28

0800754c <_close_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d06      	ldr	r5, [pc, #24]	; (8007568 <_close_r+0x1c>)
 8007550:	2300      	movs	r3, #0
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	f7fa f8c6 	bl	80016e8 <_close>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_close_r+0x1a>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_close_r+0x1a>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20000b28 	.word	0x20000b28

0800756c <_fstat_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d07      	ldr	r5, [pc, #28]	; (800758c <_fstat_r+0x20>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	4611      	mov	r1, r2
 8007578:	602b      	str	r3, [r5, #0]
 800757a:	f7fa f8c1 	bl	8001700 <_fstat>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	d102      	bne.n	8007588 <_fstat_r+0x1c>
 8007582:	682b      	ldr	r3, [r5, #0]
 8007584:	b103      	cbz	r3, 8007588 <_fstat_r+0x1c>
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	bd38      	pop	{r3, r4, r5, pc}
 800758a:	bf00      	nop
 800758c:	20000b28 	.word	0x20000b28

08007590 <_isatty_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d06      	ldr	r5, [pc, #24]	; (80075ac <_isatty_r+0x1c>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7fa f8c0 	bl	8001720 <_isatty>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_isatty_r+0x1a>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_isatty_r+0x1a>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20000b28 	.word	0x20000b28

080075b0 <_lseek_r>:
 80075b0:	b538      	push	{r3, r4, r5, lr}
 80075b2:	4d07      	ldr	r5, [pc, #28]	; (80075d0 <_lseek_r+0x20>)
 80075b4:	4604      	mov	r4, r0
 80075b6:	4608      	mov	r0, r1
 80075b8:	4611      	mov	r1, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	602a      	str	r2, [r5, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	f7fa f8b9 	bl	8001736 <_lseek>
 80075c4:	1c43      	adds	r3, r0, #1
 80075c6:	d102      	bne.n	80075ce <_lseek_r+0x1e>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	b103      	cbz	r3, 80075ce <_lseek_r+0x1e>
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	bd38      	pop	{r3, r4, r5, pc}
 80075d0:	20000b28 	.word	0x20000b28

080075d4 <_read_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	4d07      	ldr	r5, [pc, #28]	; (80075f4 <_read_r+0x20>)
 80075d8:	4604      	mov	r4, r0
 80075da:	4608      	mov	r0, r1
 80075dc:	4611      	mov	r1, r2
 80075de:	2200      	movs	r2, #0
 80075e0:	602a      	str	r2, [r5, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	f7fa f847 	bl	8001676 <_read>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_read_r+0x1e>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_read_r+0x1e>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	20000b28 	.word	0x20000b28

080075f8 <_init>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	bf00      	nop
 80075fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fe:	bc08      	pop	{r3}
 8007600:	469e      	mov	lr, r3
 8007602:	4770      	bx	lr

08007604 <_fini>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	bf00      	nop
 8007608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760a:	bc08      	pop	{r3}
 800760c:	469e      	mov	lr, r3
 800760e:	4770      	bx	lr
