
Control_Robot_v3.8_PID_Distance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  0800c670  0800c670  0001c670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d000  0800d000  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d000  0800d000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d008  0800d008  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d008  0800d008  0001d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d00c  0800d00c  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b88  200001e8  0800d1f8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d70  0800d1f8  00020d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069c0  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001695  00000000  00000000  00026bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00028270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004e8  00000000  00000000  00028830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011595  00000000  00000000  00028d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008595  00000000  00000000  0003a2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000591ce  00000000  00000000  00042842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009ba10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  0009ba60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c654 	.word	0x0800c654

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800c654 	.word	0x0800c654

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_ldivmod>:
 8000ed4:	b97b      	cbnz	r3, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed6:	b972      	cbnz	r2, 8000ef6 <__aeabi_ldivmod+0x22>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bfbe      	ittt	lt
 8000edc:	2000      	movlt	r0, #0
 8000ede:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ee2:	e006      	blt.n	8000ef2 <__aeabi_ldivmod+0x1e>
 8000ee4:	bf08      	it	eq
 8000ee6:	2800      	cmpeq	r0, #0
 8000ee8:	bf1c      	itt	ne
 8000eea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000eee:	f04f 30ff 	movne.w	r0, #4294967295
 8000ef2:	f000 b9dd 	b.w	80012b0 <__aeabi_idiv0>
 8000ef6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000efa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000efe:	2900      	cmp	r1, #0
 8000f00:	db09      	blt.n	8000f16 <__aeabi_ldivmod+0x42>
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db1a      	blt.n	8000f3c <__aeabi_ldivmod+0x68>
 8000f06:	f000 f86b 	bl	8000fe0 <__udivmoddi4>
 8000f0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f12:	b004      	add	sp, #16
 8000f14:	4770      	bx	lr
 8000f16:	4240      	negs	r0, r0
 8000f18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db1b      	blt.n	8000f58 <__aeabi_ldivmod+0x84>
 8000f20:	f000 f85e 	bl	8000fe0 <__udivmoddi4>
 8000f24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f2c:	b004      	add	sp, #16
 8000f2e:	4240      	negs	r0, r0
 8000f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f34:	4252      	negs	r2, r2
 8000f36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f3a:	4770      	bx	lr
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f42:	f000 f84d 	bl	8000fe0 <__udivmoddi4>
 8000f46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f4e:	b004      	add	sp, #16
 8000f50:	4240      	negs	r0, r0
 8000f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f56:	4770      	bx	lr
 8000f58:	4252      	negs	r2, r2
 8000f5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f5e:	f000 f83f 	bl	8000fe0 <__udivmoddi4>
 8000f62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f6a:	b004      	add	sp, #16
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f72:	4770      	bx	lr

08000f74 <__aeabi_d2lz>:
 8000f74:	b538      	push	{r3, r4, r5, lr}
 8000f76:	2200      	movs	r2, #0
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	f7ff fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8000f82:	b928      	cbnz	r0, 8000f90 <__aeabi_d2lz+0x1c>
 8000f84:	4620      	mov	r0, r4
 8000f86:	4629      	mov	r1, r5
 8000f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f8c:	f000 b80a 	b.w	8000fa4 <__aeabi_d2ulz>
 8000f90:	4620      	mov	r0, r4
 8000f92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f96:	f000 f805 	bl	8000fa4 <__aeabi_d2ulz>
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_d2ulz>:
 8000fa4:	b5d0      	push	{r4, r6, r7, lr}
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__aeabi_d2ulz+0x34>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4606      	mov	r6, r0
 8000fac:	460f      	mov	r7, r1
 8000fae:	f7ff fb3b 	bl	8000628 <__aeabi_dmul>
 8000fb2:	f7ff fe11 	bl	8000bd8 <__aeabi_d2uiz>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	f7ff fabc 	bl	8000534 <__aeabi_ui2d>
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <__aeabi_d2ulz+0x38>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f7ff fb32 	bl	8000628 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4630      	mov	r0, r6
 8000fca:	4639      	mov	r1, r7
 8000fcc:	f7ff f974 	bl	80002b8 <__aeabi_dsub>
 8000fd0:	f7ff fe02 	bl	8000bd8 <__aeabi_d2uiz>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fd8:	3df00000 	.word	0x3df00000
 8000fdc:	41f00000 	.word	0x41f00000

08000fe0 <__udivmoddi4>:
 8000fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fe4:	9d08      	ldr	r5, [sp, #32]
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	468e      	mov	lr, r1
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d14d      	bne.n	800108a <__udivmoddi4+0xaa>
 8000fee:	428a      	cmp	r2, r1
 8000ff0:	4694      	mov	ip, r2
 8000ff2:	d969      	bls.n	80010c8 <__udivmoddi4+0xe8>
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	b152      	cbz	r2, 8001010 <__udivmoddi4+0x30>
 8000ffa:	fa01 f302 	lsl.w	r3, r1, r2
 8000ffe:	f1c2 0120 	rsb	r1, r2, #32
 8001002:	fa20 f101 	lsr.w	r1, r0, r1
 8001006:	fa0c fc02 	lsl.w	ip, ip, r2
 800100a:	ea41 0e03 	orr.w	lr, r1, r3
 800100e:	4094      	lsls	r4, r2
 8001010:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001014:	0c21      	lsrs	r1, r4, #16
 8001016:	fbbe f6f8 	udiv	r6, lr, r8
 800101a:	fa1f f78c 	uxth.w	r7, ip
 800101e:	fb08 e316 	mls	r3, r8, r6, lr
 8001022:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001026:	fb06 f107 	mul.w	r1, r6, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d90a      	bls.n	8001044 <__udivmoddi4+0x64>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f106 30ff 	add.w	r0, r6, #4294967295
 8001036:	f080 811f 	bcs.w	8001278 <__udivmoddi4+0x298>
 800103a:	4299      	cmp	r1, r3
 800103c:	f240 811c 	bls.w	8001278 <__udivmoddi4+0x298>
 8001040:	3e02      	subs	r6, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a5b      	subs	r3, r3, r1
 8001046:	b2a4      	uxth	r4, r4
 8001048:	fbb3 f0f8 	udiv	r0, r3, r8
 800104c:	fb08 3310 	mls	r3, r8, r0, r3
 8001050:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001054:	fb00 f707 	mul.w	r7, r0, r7
 8001058:	42a7      	cmp	r7, r4
 800105a:	d90a      	bls.n	8001072 <__udivmoddi4+0x92>
 800105c:	eb1c 0404 	adds.w	r4, ip, r4
 8001060:	f100 33ff 	add.w	r3, r0, #4294967295
 8001064:	f080 810a 	bcs.w	800127c <__udivmoddi4+0x29c>
 8001068:	42a7      	cmp	r7, r4
 800106a:	f240 8107 	bls.w	800127c <__udivmoddi4+0x29c>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001076:	1be4      	subs	r4, r4, r7
 8001078:	2600      	movs	r6, #0
 800107a:	b11d      	cbz	r5, 8001084 <__udivmoddi4+0xa4>
 800107c:	40d4      	lsrs	r4, r2
 800107e:	2300      	movs	r3, #0
 8001080:	e9c5 4300 	strd	r4, r3, [r5]
 8001084:	4631      	mov	r1, r6
 8001086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800108a:	428b      	cmp	r3, r1
 800108c:	d909      	bls.n	80010a2 <__udivmoddi4+0xc2>
 800108e:	2d00      	cmp	r5, #0
 8001090:	f000 80ef 	beq.w	8001272 <__udivmoddi4+0x292>
 8001094:	2600      	movs	r6, #0
 8001096:	e9c5 0100 	strd	r0, r1, [r5]
 800109a:	4630      	mov	r0, r6
 800109c:	4631      	mov	r1, r6
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	fab3 f683 	clz	r6, r3
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d14a      	bne.n	8001140 <__udivmoddi4+0x160>
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d302      	bcc.n	80010b4 <__udivmoddi4+0xd4>
 80010ae:	4282      	cmp	r2, r0
 80010b0:	f200 80f9 	bhi.w	80012a6 <__udivmoddi4+0x2c6>
 80010b4:	1a84      	subs	r4, r0, r2
 80010b6:	eb61 0303 	sbc.w	r3, r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	469e      	mov	lr, r3
 80010be:	2d00      	cmp	r5, #0
 80010c0:	d0e0      	beq.n	8001084 <__udivmoddi4+0xa4>
 80010c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80010c6:	e7dd      	b.n	8001084 <__udivmoddi4+0xa4>
 80010c8:	b902      	cbnz	r2, 80010cc <__udivmoddi4+0xec>
 80010ca:	deff      	udf	#255	; 0xff
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	2a00      	cmp	r2, #0
 80010d2:	f040 8092 	bne.w	80011fa <__udivmoddi4+0x21a>
 80010d6:	eba1 010c 	sub.w	r1, r1, ip
 80010da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010de:	fa1f fe8c 	uxth.w	lr, ip
 80010e2:	2601      	movs	r6, #1
 80010e4:	0c20      	lsrs	r0, r4, #16
 80010e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80010ea:	fb07 1113 	mls	r1, r7, r3, r1
 80010ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010f2:	fb0e f003 	mul.w	r0, lr, r3
 80010f6:	4288      	cmp	r0, r1
 80010f8:	d908      	bls.n	800110c <__udivmoddi4+0x12c>
 80010fa:	eb1c 0101 	adds.w	r1, ip, r1
 80010fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8001102:	d202      	bcs.n	800110a <__udivmoddi4+0x12a>
 8001104:	4288      	cmp	r0, r1
 8001106:	f200 80cb 	bhi.w	80012a0 <__udivmoddi4+0x2c0>
 800110a:	4643      	mov	r3, r8
 800110c:	1a09      	subs	r1, r1, r0
 800110e:	b2a4      	uxth	r4, r4
 8001110:	fbb1 f0f7 	udiv	r0, r1, r7
 8001114:	fb07 1110 	mls	r1, r7, r0, r1
 8001118:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800111c:	fb0e fe00 	mul.w	lr, lr, r0
 8001120:	45a6      	cmp	lr, r4
 8001122:	d908      	bls.n	8001136 <__udivmoddi4+0x156>
 8001124:	eb1c 0404 	adds.w	r4, ip, r4
 8001128:	f100 31ff 	add.w	r1, r0, #4294967295
 800112c:	d202      	bcs.n	8001134 <__udivmoddi4+0x154>
 800112e:	45a6      	cmp	lr, r4
 8001130:	f200 80bb 	bhi.w	80012aa <__udivmoddi4+0x2ca>
 8001134:	4608      	mov	r0, r1
 8001136:	eba4 040e 	sub.w	r4, r4, lr
 800113a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800113e:	e79c      	b.n	800107a <__udivmoddi4+0x9a>
 8001140:	f1c6 0720 	rsb	r7, r6, #32
 8001144:	40b3      	lsls	r3, r6
 8001146:	fa22 fc07 	lsr.w	ip, r2, r7
 800114a:	ea4c 0c03 	orr.w	ip, ip, r3
 800114e:	fa20 f407 	lsr.w	r4, r0, r7
 8001152:	fa01 f306 	lsl.w	r3, r1, r6
 8001156:	431c      	orrs	r4, r3
 8001158:	40f9      	lsrs	r1, r7
 800115a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800115e:	fa00 f306 	lsl.w	r3, r0, r6
 8001162:	fbb1 f8f9 	udiv	r8, r1, r9
 8001166:	0c20      	lsrs	r0, r4, #16
 8001168:	fa1f fe8c 	uxth.w	lr, ip
 800116c:	fb09 1118 	mls	r1, r9, r8, r1
 8001170:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001174:	fb08 f00e 	mul.w	r0, r8, lr
 8001178:	4288      	cmp	r0, r1
 800117a:	fa02 f206 	lsl.w	r2, r2, r6
 800117e:	d90b      	bls.n	8001198 <__udivmoddi4+0x1b8>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f108 3aff 	add.w	sl, r8, #4294967295
 8001188:	f080 8088 	bcs.w	800129c <__udivmoddi4+0x2bc>
 800118c:	4288      	cmp	r0, r1
 800118e:	f240 8085 	bls.w	800129c <__udivmoddi4+0x2bc>
 8001192:	f1a8 0802 	sub.w	r8, r8, #2
 8001196:	4461      	add	r1, ip
 8001198:	1a09      	subs	r1, r1, r0
 800119a:	b2a4      	uxth	r4, r4
 800119c:	fbb1 f0f9 	udiv	r0, r1, r9
 80011a0:	fb09 1110 	mls	r1, r9, r0, r1
 80011a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80011a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80011ac:	458e      	cmp	lr, r1
 80011ae:	d908      	bls.n	80011c2 <__udivmoddi4+0x1e2>
 80011b0:	eb1c 0101 	adds.w	r1, ip, r1
 80011b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80011b8:	d26c      	bcs.n	8001294 <__udivmoddi4+0x2b4>
 80011ba:	458e      	cmp	lr, r1
 80011bc:	d96a      	bls.n	8001294 <__udivmoddi4+0x2b4>
 80011be:	3802      	subs	r0, #2
 80011c0:	4461      	add	r1, ip
 80011c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80011c6:	fba0 9402 	umull	r9, r4, r0, r2
 80011ca:	eba1 010e 	sub.w	r1, r1, lr
 80011ce:	42a1      	cmp	r1, r4
 80011d0:	46c8      	mov	r8, r9
 80011d2:	46a6      	mov	lr, r4
 80011d4:	d356      	bcc.n	8001284 <__udivmoddi4+0x2a4>
 80011d6:	d053      	beq.n	8001280 <__udivmoddi4+0x2a0>
 80011d8:	b15d      	cbz	r5, 80011f2 <__udivmoddi4+0x212>
 80011da:	ebb3 0208 	subs.w	r2, r3, r8
 80011de:	eb61 010e 	sbc.w	r1, r1, lr
 80011e2:	fa01 f707 	lsl.w	r7, r1, r7
 80011e6:	fa22 f306 	lsr.w	r3, r2, r6
 80011ea:	40f1      	lsrs	r1, r6
 80011ec:	431f      	orrs	r7, r3
 80011ee:	e9c5 7100 	strd	r7, r1, [r5]
 80011f2:	2600      	movs	r6, #0
 80011f4:	4631      	mov	r1, r6
 80011f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011fa:	f1c2 0320 	rsb	r3, r2, #32
 80011fe:	40d8      	lsrs	r0, r3
 8001200:	fa0c fc02 	lsl.w	ip, ip, r2
 8001204:	fa21 f303 	lsr.w	r3, r1, r3
 8001208:	4091      	lsls	r1, r2
 800120a:	4301      	orrs	r1, r0
 800120c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001210:	fa1f fe8c 	uxth.w	lr, ip
 8001214:	fbb3 f0f7 	udiv	r0, r3, r7
 8001218:	fb07 3610 	mls	r6, r7, r0, r3
 800121c:	0c0b      	lsrs	r3, r1, #16
 800121e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001222:	fb00 f60e 	mul.w	r6, r0, lr
 8001226:	429e      	cmp	r6, r3
 8001228:	fa04 f402 	lsl.w	r4, r4, r2
 800122c:	d908      	bls.n	8001240 <__udivmoddi4+0x260>
 800122e:	eb1c 0303 	adds.w	r3, ip, r3
 8001232:	f100 38ff 	add.w	r8, r0, #4294967295
 8001236:	d22f      	bcs.n	8001298 <__udivmoddi4+0x2b8>
 8001238:	429e      	cmp	r6, r3
 800123a:	d92d      	bls.n	8001298 <__udivmoddi4+0x2b8>
 800123c:	3802      	subs	r0, #2
 800123e:	4463      	add	r3, ip
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	b289      	uxth	r1, r1
 8001244:	fbb3 f6f7 	udiv	r6, r3, r7
 8001248:	fb07 3316 	mls	r3, r7, r6, r3
 800124c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001250:	fb06 f30e 	mul.w	r3, r6, lr
 8001254:	428b      	cmp	r3, r1
 8001256:	d908      	bls.n	800126a <__udivmoddi4+0x28a>
 8001258:	eb1c 0101 	adds.w	r1, ip, r1
 800125c:	f106 38ff 	add.w	r8, r6, #4294967295
 8001260:	d216      	bcs.n	8001290 <__udivmoddi4+0x2b0>
 8001262:	428b      	cmp	r3, r1
 8001264:	d914      	bls.n	8001290 <__udivmoddi4+0x2b0>
 8001266:	3e02      	subs	r6, #2
 8001268:	4461      	add	r1, ip
 800126a:	1ac9      	subs	r1, r1, r3
 800126c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001270:	e738      	b.n	80010e4 <__udivmoddi4+0x104>
 8001272:	462e      	mov	r6, r5
 8001274:	4628      	mov	r0, r5
 8001276:	e705      	b.n	8001084 <__udivmoddi4+0xa4>
 8001278:	4606      	mov	r6, r0
 800127a:	e6e3      	b.n	8001044 <__udivmoddi4+0x64>
 800127c:	4618      	mov	r0, r3
 800127e:	e6f8      	b.n	8001072 <__udivmoddi4+0x92>
 8001280:	454b      	cmp	r3, r9
 8001282:	d2a9      	bcs.n	80011d8 <__udivmoddi4+0x1f8>
 8001284:	ebb9 0802 	subs.w	r8, r9, r2
 8001288:	eb64 0e0c 	sbc.w	lr, r4, ip
 800128c:	3801      	subs	r0, #1
 800128e:	e7a3      	b.n	80011d8 <__udivmoddi4+0x1f8>
 8001290:	4646      	mov	r6, r8
 8001292:	e7ea      	b.n	800126a <__udivmoddi4+0x28a>
 8001294:	4620      	mov	r0, r4
 8001296:	e794      	b.n	80011c2 <__udivmoddi4+0x1e2>
 8001298:	4640      	mov	r0, r8
 800129a:	e7d1      	b.n	8001240 <__udivmoddi4+0x260>
 800129c:	46d0      	mov	r8, sl
 800129e:	e77b      	b.n	8001198 <__udivmoddi4+0x1b8>
 80012a0:	3b02      	subs	r3, #2
 80012a2:	4461      	add	r1, ip
 80012a4:	e732      	b.n	800110c <__udivmoddi4+0x12c>
 80012a6:	4630      	mov	r0, r6
 80012a8:	e709      	b.n	80010be <__udivmoddi4+0xde>
 80012aa:	4464      	add	r4, ip
 80012ac:	3802      	subs	r0, #2
 80012ae:	e742      	b.n	8001136 <__udivmoddi4+0x156>

080012b0 <__aeabi_idiv0>:
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop

080012b4 <configMPUAccel>:
//Importacio de librerias
#include "MPUAccel.h"
#include <SysTickDriver.h>

void configMPUAccel (MPUAccel_Handler_t *ptrMPUAccel){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	uint8_t rdy  = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
	uint8_t byte = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73bb      	strb	r3, [r7, #14]

	//------------Verificamos comunicacion con el MPU----------------
	while(!rdy){
 80012c4:	e004      	b.n	80012d0 <configMPUAccel+0x1c>

		rdy = WHOIAM(ptrMPUAccel);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f84f 	bl	800136a <WHOIAM>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]
	while(!rdy){
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f7      	beq.n	80012c6 <configMPUAccel+0x12>
	}

	//------------------Reiniciamos el MPU--------------------------
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, PWR_MGMT_l, 0x00);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	216b      	movs	r1, #107	; 0x6b
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fc4d 	bl	8004b7e <i2c_WriteSingleRegister>
	//Pausa
	delay_ms(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f004 f8df 	bl	80054a8 <delay_ms>

	//---------------Configuracion Accel----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	211c      	movs	r1, #28
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fc13 	bl	8004b1c <i2c_ReadSingleRegister>
 80012f6:	4603      	mov	r3, r0
 80012f8:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	f023 0318 	bic.w	r3, r3, #24
 8001300:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 8001302:	2001      	movs	r0, #1
 8001304:	f004 f8d0 	bl	80054a8 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, ACCEL_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL<<3));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6858      	ldr	r0, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	b25a      	sxtb	r2, r3
 8001314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001318:	4313      	orrs	r3, r2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	211c      	movs	r1, #28
 8001322:	f003 fc2c 	bl	8004b7e <i2c_WriteSingleRegister>

	//---------------Configuracion Giro----------------------------
	byte =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	211b      	movs	r1, #27
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fbf5 	bl	8004b1c <i2c_ReadSingleRegister>
 8001332:	4603      	mov	r3, r0
 8001334:	73bb      	strb	r3, [r7, #14]
	byte &= ~(0b00011000);
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	f023 0318 	bic.w	r3, r3, #24
 800133c:	73bb      	strb	r3, [r7, #14]
	//Pausa
	delay_ms(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f004 f8b2 	bl	80054a8 <delay_ms>
	//Deacuerdo al valor predeterminado se carga una configuracion
	i2c_WriteSingleRegister(ptrMPUAccel->ptrI2Chandler, GIRO_CONFIG, (byte) | (ptrMPUAccel->fullScaleACCEL <<3));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6858      	ldr	r0, [r3, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	b25a      	sxtb	r2, r3
 8001350:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001354:	4313      	orrs	r3, r2
 8001356:	b25b      	sxtb	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	211b      	movs	r1, #27
 800135e:	f003 fc0e 	bl	8004b7e <i2c_WriteSingleRegister>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <WHOIAM>:



//Esta funcion permite verificar comunicacion correcta con el MPU
uint8_t WHOIAM (MPUAccel_Handler_t *ptrMPUAccel){
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
	//Variables auxiliares
	uint8_t whoami = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	73fb      	strb	r3, [r7, #15]
	uint8_t rdy    = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	73bb      	strb	r3, [r7, #14]
	//leemos el registro WHO_AM_I correspondiente
	whoami =  i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, WHO_AM_I);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2175      	movs	r1, #117	; 0x75
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fbcb 	bl	8004b1c <i2c_ReadSingleRegister>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
	//verificamos la transacción
	whoami &= ~(0b10000001);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001390:	73fb      	strb	r3, [r7, #15]
	rdy = (ADDRESS_DOWN >> 1) && (whoami >> 1);
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73bb      	strb	r3, [r7, #14]

	return rdy;
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <readMPU>:


//Funcion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
float readMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead, int16_t offset)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
 80013bc:	4613      	mov	r3, r2
 80013be:	803b      	strh	r3, [r7, #0]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
	uint8_t address_L = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	75bb      	strb	r3, [r7, #22]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_L = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	81bb      	strh	r3, [r7, #12]
	int16_t   aux  = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	817b      	strh	r3, [r7, #10]
	float res  = 0;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	2b05      	cmp	r3, #5
 80013de:	d82d      	bhi.n	800143c <readMPU+0x8c>
 80013e0:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <readMPU+0x38>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	08001401 	.word	0x08001401
 80013ec:	0800140b 	.word	0x0800140b
 80013f0:	08001415 	.word	0x08001415
 80013f4:	0800141f 	.word	0x0800141f
 80013f8:	08001429 	.word	0x08001429
 80013fc:	08001433 	.word	0x08001433
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 8001400:	233b      	movs	r3, #59	; 0x3b
 8001402:	75fb      	strb	r3, [r7, #23]
 8001404:	233c      	movs	r3, #60	; 0x3c
 8001406:	75bb      	strb	r3, [r7, #22]
 8001408:	e019      	b.n	800143e <readMPU+0x8e>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 800140a:	233d      	movs	r3, #61	; 0x3d
 800140c:	75fb      	strb	r3, [r7, #23]
 800140e:	233e      	movs	r3, #62	; 0x3e
 8001410:	75bb      	strb	r3, [r7, #22]
 8001412:	e014      	b.n	800143e <readMPU+0x8e>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 8001414:	233f      	movs	r3, #63	; 0x3f
 8001416:	75fb      	strb	r3, [r7, #23]
 8001418:	2340      	movs	r3, #64	; 0x40
 800141a:	75bb      	strb	r3, [r7, #22]
 800141c:	e00f      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 800141e:	2343      	movs	r3, #67	; 0x43
 8001420:	75fb      	strb	r3, [r7, #23]
 8001422:	2344      	movs	r3, #68	; 0x44
 8001424:	75bb      	strb	r3, [r7, #22]
 8001426:	e00a      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 8001428:	2345      	movs	r3, #69	; 0x45
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	2346      	movs	r3, #70	; 0x46
 800142e:	75bb      	strb	r3, [r7, #22]
 8001430:	e005      	b.n	800143e <readMPU+0x8e>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 8001432:	2347      	movs	r3, #71	; 0x47
 8001434:	75fb      	strb	r3, [r7, #23]
 8001436:	2348      	movs	r3, #72	; 0x48
 8001438:	75bb      	strb	r3, [r7, #22]
 800143a:	e000      	b.n	800143e <readMPU+0x8e>
		default:{ break; }
 800143c:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	7dfa      	ldrb	r2, [r7, #23]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fb68 	bl	8004b1c <i2c_ReadSingleRegister>
 800144c:	4603      	mov	r3, r0
 800144e:	81fb      	strh	r3, [r7, #14]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	7dba      	ldrb	r2, [r7, #22]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fb5f 	bl	8004b1c <i2c_ReadSingleRegister>
 800145e:	4603      	mov	r3, r0
 8001460:	81bb      	strh	r3, [r7, #12]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = ((int16_t) ((aux_H << 8) | (aux_L))) - offset;
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	b29a      	uxth	r2, r3
 8001472:	883b      	ldrh	r3, [r7, #0]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	b29b      	uxth	r3, r3
 8001478:	817b      	strh	r3, [r7, #10]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje
	switch(elementRead)
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2b02      	cmp	r3, #2
 800147e:	dc02      	bgt.n	8001486 <readMPU+0xd6>
 8001480:	2b00      	cmp	r3, #0
 8001482:	da05      	bge.n	8001490 <readMPU+0xe0>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
				default:{ break; }
			}
			break;
		}
		default:{ break; }
 8001484:	e0d6      	b.n	8001634 <readMPU+0x284>
 8001486:	3b03      	subs	r3, #3
	switch(elementRead)
 8001488:	2b02      	cmp	r3, #2
 800148a:	f200 80d3 	bhi.w	8001634 <readMPU+0x284>
 800148e:	e081      	b.n	8001594 <readMPU+0x1e4>
			switch (ptrMPUAccel->fullScaleACCEL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d87b      	bhi.n	8001590 <readMPU+0x1e0>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <readMPU+0xf0>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014e9 	.word	0x080014e9
 80014a8:	08001521 	.word	0x08001521
 80014ac:	08001559 	.word	0x08001559
				case ACCEL_2G :{res = (aux*9.77)/ACCEL_2G_SENS; break;}
 80014b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f84d 	bl	8000554 <__aeabi_i2d>
 80014ba:	a363      	add	r3, pc, #396	; (adr r3, 8001648 <readMPU+0x298>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7ff f8b2 	bl	8000628 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <readMPU+0x2a0>)
 80014d2:	f7ff f9d3 	bl	800087c <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb9b 	bl	8000c18 <__aeabi_d2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	e054      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_4G :{res = (aux*9.77)/ACCEL_4G_SENS; break;}
 80014e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	a355      	add	r3, pc, #340	; (adr r3, 8001648 <readMPU+0x298>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f896 	bl	8000628 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b52      	ldr	r3, [pc, #328]	; (8001654 <readMPU+0x2a4>)
 800150a:	f7ff f9b7 	bl	800087c <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fb7f 	bl	8000c18 <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	e038      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_8G :{res = (aux*9.77)/ACCEL_8G_SENS; break;}
 8001520:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f815 	bl	8000554 <__aeabi_i2d>
 800152a:	a347      	add	r3, pc, #284	; (adr r3, 8001648 <readMPU+0x298>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7ff f87a 	bl	8000628 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <readMPU+0x2a8>)
 8001542:	f7ff f99b 	bl	800087c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fb63 	bl	8000c18 <__aeabi_d2f>
 8001552:	4603      	mov	r3, r0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	e01c      	b.n	8001592 <readMPU+0x1e2>
				case ACCEL_16G :{res = (aux*9.77)/ACCEL_16G_SENS; break;}
 8001558:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fff9 	bl	8000554 <__aeabi_i2d>
 8001562:	a339      	add	r3, pc, #228	; (adr r3, 8001648 <readMPU+0x298>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f85e 	bl	8000628 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <readMPU+0x2ac>)
 800157a:	f7ff f97f 	bl	800087c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fb47 	bl	8000c18 <__aeabi_d2f>
 800158a:	4603      	mov	r3, r0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e000      	b.n	8001592 <readMPU+0x1e2>
				default:{ break; }
 8001590:	bf00      	nop
			break;
 8001592:	e050      	b.n	8001636 <readMPU+0x286>
			switch (ptrMPUAccel->fullScaleGYRO)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	2b03      	cmp	r3, #3
 800159a:	d849      	bhi.n	8001630 <readMPU+0x280>
 800159c:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <readMPU+0x1f4>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015b5 	.word	0x080015b5
 80015a8:	080015d5 	.word	0x080015d5
 80015ac:	080015f5 	.word	0x080015f5
 80015b0:	08001615 	.word	0x08001615
				case GYRO_250 :{ res = aux/GYRO_250_SENS; break;}
 80015b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <readMPU+0x2b0>)
 80015ba:	fb82 1203 	smull	r1, r2, r2, r3
 80015be:	1152      	asrs	r2, r2, #5
 80015c0:	17db      	asrs	r3, r3, #31
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	ee07 3a90 	vmov	s15, r3
 80015ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ce:	edc7 7a04 	vstr	s15, [r7, #16]
 80015d2:	e02e      	b.n	8001632 <readMPU+0x282>
				case GYRO_500 :{ res = aux/GYRO_500_SENS; break;}
 80015d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <readMPU+0x2b4>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1112      	asrs	r2, r2, #4
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	edc7 7a04 	vstr	s15, [r7, #16]
 80015f2:	e01e      	b.n	8001632 <readMPU+0x282>
				case GYRO_1000 :{ res = aux/GYRO_1000_SENS; break;}
 80015f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <readMPU+0x2b4>)
 80015fa:	fb82 1203 	smull	r1, r2, r2, r3
 80015fe:	10d2      	asrs	r2, r2, #3
 8001600:	17db      	asrs	r3, r3, #31
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b21b      	sxth	r3, r3
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160e:	edc7 7a04 	vstr	s15, [r7, #16]
 8001612:	e00e      	b.n	8001632 <readMPU+0x282>
				case GYRO_2000 :{ res = aux/GYRO_2000_SENS; break;}
 8001614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001618:	2b00      	cmp	r3, #0
 800161a:	da00      	bge.n	800161e <readMPU+0x26e>
 800161c:	330f      	adds	r3, #15
 800161e:	111b      	asrs	r3, r3, #4
 8001620:	b21b      	sxth	r3, r3
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162a:	edc7 7a04 	vstr	s15, [r7, #16]
 800162e:	e000      	b.n	8001632 <readMPU+0x282>
				default:{ break; }
 8001630:	bf00      	nop
			break;
 8001632:	e000      	b.n	8001636 <readMPU+0x286>
		default:{ break; }
 8001634:	bf00      	nop
	}
	//Retornamos valor
	return res;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	ee07 3a90 	vmov	s15, r3
}
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	70a3d70a 	.word	0x70a3d70a
 800164c:	40238a3d 	.word	0x40238a3d
 8001650:	40d00000 	.word	0x40d00000
 8001654:	40c00000 	.word	0x40c00000
 8001658:	40b00000 	.word	0x40b00000
 800165c:	40a00000 	.word	0x40a00000
 8001660:	3e88cb3d 	.word	0x3e88cb3d
 8001664:	3e0f83e1 	.word	0x3e0f83e1

08001668 <readCalibrationMPU>:

//Funcion para en el modo de calibracion para la lectura de dos registros que compone uno de los ejes de acelerometro o del giroscopio
int16_t readCalibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementRead)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	70fb      	strb	r3, [r7, #3]
	//Variable para guardar la  direccion de los dos registros a leer
	uint8_t address_H = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
	uint8_t address_L = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	73bb      	strb	r3, [r7, #14]
	//Creamos las variables donde almacenamos todos los datos
	uint16_t aux_H = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	81bb      	strh	r3, [r7, #12]
	uint16_t aux_L = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	817b      	strh	r3, [r7, #10]
	int16_t   aux  = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	813b      	strh	r3, [r7, #8]
	//Seleccionamos la direccion de los registros a Leer
	switch(elementRead)
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	2b05      	cmp	r3, #5
 800168c:	d82c      	bhi.n	80016e8 <readCalibrationMPU+0x80>
 800168e:	a201      	add	r2, pc, #4	; (adr r2, 8001694 <readCalibrationMPU+0x2c>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016b7 	.word	0x080016b7
 800169c:	080016c1 	.word	0x080016c1
 80016a0:	080016cb 	.word	0x080016cb
 80016a4:	080016d5 	.word	0x080016d5
 80016a8:	080016df 	.word	0x080016df
	{
		case READ_ACCEL_X:{address_H = ACCEL_XOUT_H, address_L = ACCEL_XOUT_L; break;}
 80016ac:	233b      	movs	r3, #59	; 0x3b
 80016ae:	73fb      	strb	r3, [r7, #15]
 80016b0:	233c      	movs	r3, #60	; 0x3c
 80016b2:	73bb      	strb	r3, [r7, #14]
 80016b4:	e019      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_ACCEL_Y:{address_H = ACCEL_YOUT_H, address_L = ACCEL_YOUT_L; break;}
 80016b6:	233d      	movs	r3, #61	; 0x3d
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	233e      	movs	r3, #62	; 0x3e
 80016bc:	73bb      	strb	r3, [r7, #14]
 80016be:	e014      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_ACCEL_Z:{address_H = ACCEL_ZOUT_H, address_L = ACCEL_ZOUT_L; break;}
 80016c0:	233f      	movs	r3, #63	; 0x3f
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	73bb      	strb	r3, [r7, #14]
 80016c8:	e00f      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_X:{address_H = GIRO_XOUT_H, address_L = GIRO_XOUT_L; break;}
 80016ca:	2343      	movs	r3, #67	; 0x43
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	2344      	movs	r3, #68	; 0x44
 80016d0:	73bb      	strb	r3, [r7, #14]
 80016d2:	e00a      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_Y:{address_H = GIRO_YOUT_H, address_L = GIRO_YOUT_L; break;}
 80016d4:	2345      	movs	r3, #69	; 0x45
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	2346      	movs	r3, #70	; 0x46
 80016da:	73bb      	strb	r3, [r7, #14]
 80016dc:	e005      	b.n	80016ea <readCalibrationMPU+0x82>
		case READ_GYRO_Z:{address_H = GIRO_ZOUT_H, address_L = GIRO_ZOUT_L; break;}
 80016de:	2347      	movs	r3, #71	; 0x47
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	2348      	movs	r3, #72	; 0x48
 80016e4:	73bb      	strb	r3, [r7, #14]
 80016e6:	e000      	b.n	80016ea <readCalibrationMPU+0x82>
		default:{ break; }
 80016e8:	bf00      	nop
	}
	//Realizamos la medicion de la magnitud fisica en el respectivo eje
	aux_H = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_H);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fa12 	bl	8004b1c <i2c_ReadSingleRegister>
 80016f8:	4603      	mov	r3, r0
 80016fa:	81bb      	strh	r3, [r7, #12]
	aux_L = i2c_ReadSingleRegister(ptrMPUAccel->ptrI2Chandler, address_L);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	7bba      	ldrb	r2, [r7, #14]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fa09 	bl	8004b1c <i2c_ReadSingleRegister>
 800170a:	4603      	mov	r3, r0
 800170c:	817b      	strh	r3, [r7, #10]
	//Juntamos ambos bytes en un solo numero para tener la lectura completa
	aux = (int16_t) ((aux_H << 8) | (aux_L));
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001718:	4313      	orrs	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
	//Realizamos la conversion de los bytes al valor de magnitud fisica en el respectivo eje

	//Retornamos valor
	return aux;
 800171c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <calibrationMPU>:


//Funcion para la calibracion de las mediciones realizadas
float calibrationMPU(MPUAccel_Handler_t *ptrMPUAccel, uint8_t elementCalibration)
{
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b088      	sub	sp, #32
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	460b      	mov	r3, r1
 8001734:	70fb      	strb	r3, [r7, #3]
	//Variables la ejecucion de la calibracion
	int64_t aux_sum = 0;
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t num_samples = 200;
 8001742:	23c8      	movs	r3, #200	; 0xc8
 8001744:	827b      	strh	r3, [r7, #18]
	float offset = 0;
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
	//Realizacion acumulacion de valores
	for (int i = 0; i < num_samples; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e017      	b.n	8001782 <calibrationMPU+0x5a>
	{
		//Lectura del registro respectivo y acumulacion
		aux_sum += readCalibrationMPU(ptrMPUAccel, elementCalibration);
 8001752:	78fb      	ldrb	r3, [r7, #3]
 8001754:	4619      	mov	r1, r3
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff86 	bl	8001668 <readCalibrationMPU>
 800175c:	4603      	mov	r3, r0
 800175e:	b21b      	sxth	r3, r3
 8001760:	17da      	asrs	r2, r3, #31
 8001762:	461c      	mov	r4, r3
 8001764:	4615      	mov	r5, r2
 8001766:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800176a:	eb12 0804 	adds.w	r8, r2, r4
 800176e:	eb43 0905 	adc.w	r9, r3, r5
 8001772:	e9c7 8906 	strd	r8, r9, [r7, #24]
		//Pausa
		delay_ms(1);
 8001776:	2001      	movs	r0, #1
 8001778:	f003 fe96 	bl	80054a8 <delay_ms>
	for (int i = 0; i < num_samples; i++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	8a7b      	ldrh	r3, [r7, #18]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbe3      	blt.n	8001752 <calibrationMPU+0x2a>
	}
	//Promedio del eje medido
	 offset = aux_sum/num_samples;
 800178a:	8a7b      	ldrh	r3, [r7, #18]
 800178c:	2200      	movs	r2, #0
 800178e:	469a      	mov	sl, r3
 8001790:	4693      	mov	fp, r2
 8001792:	4652      	mov	r2, sl
 8001794:	465b      	mov	r3, fp
 8001796:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800179a:	f7ff fb9b 	bl	8000ed4 <__aeabi_ldivmod>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff fb57 	bl	8000e58 <__aeabi_l2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	60fb      	str	r3, [r7, #12]
	//Retornar valor
	return offset;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	ee07 3a90 	vmov	s15, r3
}
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017c0 <getAngle>:


//Funcion para calcular el nuevo angulo de uno de los ejes del girsocopio
float getAngle(MPUAccel_Handler_t *ptrMPUAccel, MPUTimerSample_t *timer, float ang_init, uint8_t axis, int16_t offset_Axis)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	; 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	460b      	mov	r3, r1
 80017d4:	70fb      	strb	r3, [r7, #3]
 80017d6:	4613      	mov	r3, r2
 80017d8:	803b      	strh	r3, [r7, #0]
	//Lectura velocidad angular
	float w_Angular= readMPU(ptrMPUAccel, axis, offset_Axis);
 80017da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	4619      	mov	r1, r3
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f7ff fde4 	bl	80013b0 <readMPU>
 80017e8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	//Calculo del tiempo trascurrido tras el ultima leida
	uint64_t time_now = getTicksMs();
 80017ec:	f003 fe4e 	bl	800548c <getTicksMs>
 80017f0:	e9c7 0106 	strd	r0, r1, [r7, #24]
	timer->delta_timer =  time_now - timer->timer_prev;
 80017f4:	8b39      	ldrh	r1, [r7, #24]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	b293      	uxth	r3, r2
 80017fe:	1acb      	subs	r3, r1, r3
 8001800:	b29a      	uxth	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	811a      	strh	r2, [r3, #8]
	timer->timer_prev = time_now;
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800180c:	e9c1 2300 	strd	r2, r3, [r1]
	//Calculo angulo
	float ang = ang_init + (w_Angular*timer->delta_timer)/1000;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	891b      	ldrh	r3, [r3, #8]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001820:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001824:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001848 <getAngle+0x88>
 8001828:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	edc7 7a05 	vstr	s15, [r7, #20]

	return ang;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	ee07 3a90 	vmov	s15, r3
}
 800183e:	eeb0 0a67 	vmov.f32	s0, s15
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	447a0000 	.word	0x447a0000

0800184c <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	4610      	mov	r0, r2
 800186e:	f003 fd8f 	bl	8005390 <updateDuttyCyclePercentageFloat>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f002 ff3d 	bl	8004730 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f003 fc9b 	bl	8005204 <statusPolarityPWM>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <main>:


float corr=0;

int main(void)
{
 80018d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af02      	add	r7, sp, #8
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema

	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 80018e0:	2364      	movs	r3, #100	; 0x64
 80018e2:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f96c 	bl	8004bc4 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 80018ec:	f000 f95c 	bl	8001ba8 <int_Hardware>
	//Activamos el Systick
	config_SysTick_ms();
 80018f0:	f003 fd92 	bl	8005418 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 80018f4:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <main+0x264>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <main+0x264>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 8001904:	f000 fb1e 	bl	8001f44 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 8001908:	2101      	movs	r1, #1
 800190a:	488d      	ldr	r0, [pc, #564]	; (8001b40 <main+0x268>)
 800190c:	f002 ff10 	bl	8004730 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001910:	2101      	movs	r1, #1
 8001912:	488c      	ldr	r0, [pc, #560]	; (8001b44 <main+0x26c>)
 8001914:	f002 ff0c 	bl	8004730 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 8001918:	2101      	movs	r1, #1
 800191a:	488b      	ldr	r0, [pc, #556]	; (8001b48 <main+0x270>)
 800191c:	f002 ff08 	bl	8004730 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001920:	2101      	movs	r1, #1
 8001922:	488a      	ldr	r0, [pc, #552]	; (8001b4c <main+0x274>)
 8001924:	f002 ff04 	bl	8004730 <GPIO_writePin>
	int_Config_Motor();
 8001928:	f000 fb2a 	bl	8001f80 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 800192c:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <main+0x278>)
 800192e:	4a89      	ldr	r2, [pc, #548]	; (8001b54 <main+0x27c>)
 8001930:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001932:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <main+0x280>)
 8001934:	4a89      	ldr	r2, [pc, #548]	; (8001b5c <main+0x284>)
 8001936:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 8001938:	4b89      	ldr	r3, [pc, #548]	; (8001b60 <main+0x288>)
 800193a:	4a8a      	ldr	r2, [pc, #552]	; (8001b64 <main+0x28c>)
 800193c:	601a      	str	r2, [r3, #0]

	//--------------------------Configuramos inicia el MPU----------------------
	//Configuracion MPU
	int_MPU();
 800193e:	f000 fb0b 	bl	8001f58 <int_MPU>


	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001942:	4b89      	ldr	r3, [pc, #548]	; (8001b68 <main+0x290>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d106      	bne.n	8001958 <main+0x80>
		{
			runCommand(bufferRecepcion);
 800194a:	4888      	ldr	r0, [pc, #544]	; (8001b6c <main+0x294>)
 800194c:	f000 feaa 	bl	80026a4 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001950:	4b85      	ldr	r3, [pc, #532]	; (8001b68 <main+0x290>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e000      	b.n	800195a <main+0x82>
		}
		else
		{ __NOP(); }
 8001958:	bf00      	nop
		//Calculo de odometry y aplicacion PID
		if(flag_count_odometry == 1)
 800195a:	4b85      	ldr	r3, [pc, #532]	; (8001b70 <main+0x298>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b01      	cmp	r3, #1
 8001960:	f040 80ea 	bne.w	8001b38 <main+0x260>
		{
			//Calculo odometria
			distance_c = (handler_Motor_L.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	   //[mm]
 8001964:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <main+0x29c>)
 8001966:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800196a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800196e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001976:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <main+0x2a0>)
 8001978:	edc3 7a00 	vstr	s15, [r3]
			//w_angular_c = ((handler_Motor_R.parametersMotor.velocity-handler_Motor_L.parametersMotor.velocity)*100000)/b; //[rad/s]
			parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.xr_position + (distance_c*(cos(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 800197c:	4b7f      	ldr	r3, [pc, #508]	; (8001b7c <main+0x2a4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdf9 	bl	8000578 <__aeabi_f2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
 800198a:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <main+0x2a0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdf2 	bl	8000578 <__aeabi_f2d>
 8001994:	4680      	mov	r8, r0
 8001996:	4689      	mov	r9, r1
 8001998:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <main+0x2a4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdeb 	bl	8000578 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b10 	vmov	d0, r2, r3
 80019aa:	f009 fb41 	bl	800b030 <cos>
 80019ae:	ec53 2b10 	vmov	r2, r3, d0
 80019b2:	4640      	mov	r0, r8
 80019b4:	4649      	mov	r1, r9
 80019b6:	f7fe fe37 	bl	8000628 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4620      	mov	r0, r4
 80019c0:	4629      	mov	r1, r5
 80019c2:	f7fe fc7b 	bl	80002bc <__adddf3>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f923 	bl	8000c18 <__aeabi_d2f>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a69      	ldr	r2, [pc, #420]	; (8001b7c <main+0x2a4>)
 80019d6:	6053      	str	r3, [r2, #4]
			parameter_Posicion_Robot.yr_position  = parameter_Posicion_Robot.yr_position  + (distance_c*(sin(parameter_Posicion_Robot.phi_relativo)));       //[mm]
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <main+0x2a4>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fdcb 	bl	8000578 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <main+0x2a0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdc4 	bl	8000578 <__aeabi_f2d>
 80019f0:	4680      	mov	r8, r0
 80019f2:	4689      	mov	r9, r1
 80019f4:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <main+0x2a4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fdbd 	bl	8000578 <__aeabi_f2d>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	ec43 2b10 	vmov	d0, r2, r3
 8001a06:	f009 fb67 	bl	800b0d8 <sin>
 8001a0a:	ec53 2b10 	vmov	r2, r3, d0
 8001a0e:	4640      	mov	r0, r8
 8001a10:	4649      	mov	r1, r9
 8001a12:	f7fe fe09 	bl	8000628 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7fe fc4d 	bl	80002bc <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f8f5 	bl	8000c18 <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <main+0x2a4>)
 8001a32:	6093      	str	r3, [r2, #8]
			//Paso de c.relativa a c.globales
			parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal + parameter_Posicion_Robot.xr_position*sin_cal;
 8001a34:	4b51      	ldr	r3, [pc, #324]	; (8001b7c <main+0x2a4>)
 8001a36:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a3a:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <main+0x2a4>)
 8001a3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <main+0x2a8>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a4e:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <main+0x2a4>)
 8001a50:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <main+0x2ac>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <main+0x2a4>)
 8001a64:	edc3 7a05 	vstr	s15, [r3, #20]
			parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial - parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <main+0x2a4>)
 8001a6a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <main+0x2a4>)
 8001a70:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a74:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <main+0x2ac>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a82:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <main+0x2a4>)
 8001a84:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <main+0x2a8>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a96:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <main+0x2a4>)
 8001a98:	edc3 7a06 	vstr	s15, [r3, #24]
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 8001a9c:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <main+0x2a4>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fd69 	bl	8000578 <__aeabi_f2d>
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	4b34      	ldr	r3, [pc, #208]	; (8001b7c <main+0x2a4>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd62 	bl	8000578 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	e9cd 2300 	strd	r2, r3, [sp]
 8001abc:	4622      	mov	r2, r4
 8001abe:	462b      	mov	r3, r5
 8001ac0:	4931      	ldr	r1, [pc, #196]	; (8001b88 <main+0x2b0>)
 8001ac2:	4832      	ldr	r0, [pc, #200]	; (8001b8c <main+0x2b4>)
 8001ac4:	f005 f88a 	bl	8006bdc <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001ac8:	4930      	ldr	r1, [pc, #192]	; (8001b8c <main+0x2b4>)
 8001aca:	4831      	ldr	r0, [pc, #196]	; (8001b90 <main+0x2b8>)
 8001acc:	f003 ffcc 	bl	8005a68 <writeMsgForTXE>
			//calculo a la distancia de la recta
			distance_punto_recta = (parameter_Posicion_Robot.yr_position/1000);
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <main+0x2a4>)
 8001ad2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ad6:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001b94 <main+0x2bc>
 8001ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ade:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <main+0x2c0>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
			//Control PID para la distancia
			PID(&parameter_PID_distace, 0, distance_punto_recta);
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <main+0x2c0>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	eef0 0a67 	vmov.f32	s1, s15
 8001aee:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001b9c <main+0x2c4>
 8001af2:	482b      	ldr	r0, [pc, #172]	; (8001ba0 <main+0x2c8>)
 8001af4:	f001 f818 	bl	8002b28 <PID>
			//velRef_R = 2*uRef-velRef_L;
			//Conversion de velocidad a dutty
			//handler_Motor_L.configMotor.dutty= 478*velRef_L  - 18;
			//handler_Motor_R.configMotor.dutty = 563*velRef_R  - 26;
			//Correccion del dutty
			handler_Motor_L.configMotor.dutty = duttyInicial + parameter_PID_distace.u;
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <main+0x2c8>)
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <main+0x2cc>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <main+0x29c>)
 8001b0a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			handler_Motor_R.configMotor.dutty = duttyInicial - parameter_PID_distace.u;
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <main+0x2cc>)
 8001b10:	ed93 7a00 	vldr	s14, [r3]
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <main+0x2c8>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <main+0x27c>)
 8001b20:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			correction(&handler_Motor_L);
 8001b24:	4813      	ldr	r0, [pc, #76]	; (8001b74 <main+0x29c>)
 8001b26:	f001 f871 	bl	8002c0c <correction>
			correction(&handler_Motor_R);
 8001b2a:	480a      	ldr	r0, [pc, #40]	; (8001b54 <main+0x27c>)
 8001b2c:	f001 f86e 	bl	8002c0c <correction>
			//Restablecemos valores
			flag_count_odometry = 0;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <main+0x298>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
 8001b36:	e704      	b.n	8001942 <main+0x6a>
		}
		else
		{ __NOP(); }
 8001b38:	bf00      	nop
		if(commandComplete==1)
 8001b3a:	e702      	b.n	8001942 <main+0x6a>
 8001b3c:	e000ed00 	.word	0xe000ed00
 8001b40:	200002ec 	.word	0x200002ec
 8001b44:	20000368 	.word	0x20000368
 8001b48:	200002f8 	.word	0x200002f8
 8001b4c:	20000374 	.word	0x20000374
 8001b50:	20000478 	.word	0x20000478
 8001b54:	20000310 	.word	0x20000310
 8001b58:	2000046c 	.word	0x2000046c
 8001b5c:	40105fa7 	.word	0x40105fa7
 8001b60:	20000470 	.word	0x20000470
 8001b64:	400facee 	.word	0x400facee
 8001b68:	20000010 	.word	0x20000010
 8001b6c:	200004a4 	.word	0x200004a4
 8001b70:	20000468 	.word	0x20000468
 8001b74:	2000038c 	.word	0x2000038c
 8001b78:	20000474 	.word	0x20000474
 8001b7c:	20000424 	.word	0x20000424
 8001b80:	2000045c 	.word	0x2000045c
 8001b84:	20000460 	.word	0x20000460
 8001b88:	0800c670 	.word	0x0800c670
 8001b8c:	200002a0 	.word	0x200002a0
 8001b90:	20000294 	.word	0x20000294
 8001b94:	447a0000 	.word	0x447a0000
 8001b98:	20000498 	.word	0x20000498
 8001b9c:	00000000 	.word	0x00000000
 8001ba0:	20000400 	.word	0x20000400
 8001ba4:	20000484 	.word	0x20000484

08001ba8 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 8001bae:	4bae      	ldr	r3, [pc, #696]	; (8001e68 <int_Hardware+0x2c0>)
 8001bb0:	4aae      	ldr	r2, [pc, #696]	; (8001e6c <int_Hardware+0x2c4>)
 8001bb2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8001bb4:	4bac      	ldr	r3, [pc, #688]	; (8001e68 <int_Hardware+0x2c0>)
 8001bb6:	2209      	movs	r2, #9
 8001bb8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	48a7      	ldr	r0, [pc, #668]	; (8001e68 <int_Hardware+0x2c0>)
 8001bca:	f002 fc65 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 8001bce:	48a6      	ldr	r0, [pc, #664]	; (8001e68 <int_Hardware+0x2c0>)
 8001bd0:	f002 fc84 	bl	80044dc <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001bd4:	4ba6      	ldr	r3, [pc, #664]	; (8001e70 <int_Hardware+0x2c8>)
 8001bd6:	4aa7      	ldr	r2, [pc, #668]	; (8001e74 <int_Hardware+0x2cc>)
 8001bd8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001bda:	4ba5      	ldr	r3, [pc, #660]	; (8001e70 <int_Hardware+0x2c8>)
 8001bdc:	2205      	movs	r2, #5
 8001bde:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2300      	movs	r3, #0
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2301      	movs	r3, #1
 8001bea:	2200      	movs	r2, #0
 8001bec:	2101      	movs	r1, #1
 8001bee:	48a0      	ldr	r0, [pc, #640]	; (8001e70 <int_Hardware+0x2c8>)
 8001bf0:	f002 fc52 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001bf4:	489e      	ldr	r0, [pc, #632]	; (8001e70 <int_Hardware+0x2c8>)
 8001bf6:	f002 fc71 	bl	80044dc <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001bfa:	4b9f      	ldr	r3, [pc, #636]	; (8001e78 <int_Hardware+0x2d0>)
 8001bfc:	4a9d      	ldr	r2, [pc, #628]	; (8001e74 <int_Hardware+0x2cc>)
 8001bfe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8001c00:	4b9d      	ldr	r3, [pc, #628]	; (8001e78 <int_Hardware+0x2d0>)
 8001c02:	2209      	movs	r2, #9
 8001c04:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001c06:	2307      	movs	r3, #7
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	2200      	movs	r2, #0
 8001c12:	2102      	movs	r1, #2
 8001c14:	4898      	ldr	r0, [pc, #608]	; (8001e78 <int_Hardware+0x2d0>)
 8001c16:	f002 fc3f 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001c1a:	4897      	ldr	r0, [pc, #604]	; (8001e78 <int_Hardware+0x2d0>)
 8001c1c:	f002 fc5e 	bl	80044dc <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8001c20:	4b96      	ldr	r3, [pc, #600]	; (8001e7c <int_Hardware+0x2d4>)
 8001c22:	4a94      	ldr	r2, [pc, #592]	; (8001e74 <int_Hardware+0x2cc>)
 8001c24:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001c26:	4b95      	ldr	r3, [pc, #596]	; (8001e7c <int_Hardware+0x2d4>)
 8001c28:	220a      	movs	r2, #10
 8001c2a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001c2c:	2307      	movs	r3, #7
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2300      	movs	r3, #0
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2301      	movs	r3, #1
 8001c36:	2200      	movs	r2, #0
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4890      	ldr	r0, [pc, #576]	; (8001e7c <int_Hardware+0x2d4>)
 8001c3c:	f002 fc2c 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001c40:	488e      	ldr	r0, [pc, #568]	; (8001e7c <int_Hardware+0x2d4>)
 8001c42:	f002 fc4b 	bl	80044dc <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <int_Hardware+0x2d8>)
 8001c48:	4a8a      	ldr	r2, [pc, #552]	; (8001e74 <int_Hardware+0x2cc>)
 8001c4a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001c4c:	4b8c      	ldr	r3, [pc, #560]	; (8001e80 <int_Hardware+0x2d8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001c52:	2302      	movs	r3, #2
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	2300      	movs	r3, #0
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2102      	movs	r1, #2
 8001c60:	4887      	ldr	r0, [pc, #540]	; (8001e80 <int_Hardware+0x2d8>)
 8001c62:	f002 fc19 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001c66:	4886      	ldr	r0, [pc, #536]	; (8001e80 <int_Hardware+0x2d8>)
 8001c68:	f002 fc38 	bl	80044dc <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001c6c:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <int_Hardware+0x2dc>)
 8001c6e:	4a7f      	ldr	r2, [pc, #508]	; (8001e6c <int_Hardware+0x2c4>)
 8001c70:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 8001c72:	4b84      	ldr	r3, [pc, #528]	; (8001e84 <int_Hardware+0x2dc>)
 8001c74:	220c      	movs	r2, #12
 8001c76:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2301      	movs	r3, #1
 8001c82:	2200      	movs	r2, #0
 8001c84:	2101      	movs	r1, #1
 8001c86:	487f      	ldr	r0, [pc, #508]	; (8001e84 <int_Hardware+0x2dc>)
 8001c88:	f002 fc06 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 8001c8c:	487d      	ldr	r0, [pc, #500]	; (8001e84 <int_Hardware+0x2dc>)
 8001c8e:	f002 fc25 	bl	80044dc <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 8001c92:	4b7d      	ldr	r3, [pc, #500]	; (8001e88 <int_Hardware+0x2e0>)
 8001c94:	4a75      	ldr	r2, [pc, #468]	; (8001e6c <int_Hardware+0x2c4>)
 8001c96:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001c98:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <int_Hardware+0x2e0>)
 8001c9a:	220a      	movs	r2, #10
 8001c9c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2101      	movs	r1, #1
 8001cac:	4876      	ldr	r0, [pc, #472]	; (8001e88 <int_Hardware+0x2e0>)
 8001cae:	f002 fbf3 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 8001cb2:	4875      	ldr	r0, [pc, #468]	; (8001e88 <int_Hardware+0x2e0>)
 8001cb4:	f002 fc12 	bl	80044dc <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 8001cb8:	4b74      	ldr	r3, [pc, #464]	; (8001e8c <int_Hardware+0x2e4>)
 8001cba:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <int_Hardware+0x2cc>)
 8001cbc:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <int_Hardware+0x2e4>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	486e      	ldr	r0, [pc, #440]	; (8001e8c <int_Hardware+0x2e4>)
 8001cd4:	f002 fbe0 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001cd8:	486c      	ldr	r0, [pc, #432]	; (8001e8c <int_Hardware+0x2e4>)
 8001cda:	f002 fbff 	bl	80044dc <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8001cde:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <int_Hardware+0x2e8>)
 8001ce0:	4a6c      	ldr	r2, [pc, #432]	; (8001e94 <int_Hardware+0x2ec>)
 8001ce2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <int_Hardware+0x2e8>)
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001cea:	2300      	movs	r3, #0
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4865      	ldr	r0, [pc, #404]	; (8001e90 <int_Hardware+0x2e8>)
 8001cfa:	f002 fbcd 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8001cfe:	4864      	ldr	r0, [pc, #400]	; (8001e90 <int_Hardware+0x2e8>)
 8001d00:	f002 fbec 	bl	80044dc <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001d04:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <int_Hardware+0x2f0>)
 8001d06:	4a59      	ldr	r2, [pc, #356]	; (8001e6c <int_Hardware+0x2c4>)
 8001d08:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <int_Hardware+0x2f0>)
 8001d0c:	220b      	movs	r2, #11
 8001d0e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001d10:	2300      	movs	r3, #0
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	485e      	ldr	r0, [pc, #376]	; (8001e98 <int_Hardware+0x2f0>)
 8001d20:	f002 fbba 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001d24:	485c      	ldr	r0, [pc, #368]	; (8001e98 <int_Hardware+0x2f0>)
 8001d26:	f002 fbd9 	bl	80044dc <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_MPU6050.pGPIOx = GPIOB;
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <int_Hardware+0x2f4>)
 8001d2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <int_Hardware+0x2f8>)
 8001d2e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8001d30:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <int_Hardware+0x2f4>)
 8001d32:	2208      	movs	r2, #8
 8001d34:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8001d36:	2304      	movs	r3, #4
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	2201      	movs	r2, #1
 8001d42:	2102      	movs	r1, #2
 8001d44:	4855      	ldr	r0, [pc, #340]	; (8001e9c <int_Hardware+0x2f4>)
 8001d46:	f002 fba7 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_MPU6050);
 8001d4a:	4854      	ldr	r0, [pc, #336]	; (8001e9c <int_Hardware+0x2f4>)
 8001d4c:	f002 fbc6 	bl	80044dc <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_MPU6050.pGPIOx = GPIOB;
 8001d50:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <int_Hardware+0x2fc>)
 8001d52:	4a53      	ldr	r2, [pc, #332]	; (8001ea0 <int_Hardware+0x2f8>)
 8001d54:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_MPU6050.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 8001d56:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <int_Hardware+0x2fc>)
 8001d58:	2209      	movs	r2, #9
 8001d5a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_MPU6050, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8001d5c:	2304      	movs	r3, #4
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	2300      	movs	r3, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	2302      	movs	r3, #2
 8001d66:	2201      	movs	r2, #1
 8001d68:	2102      	movs	r1, #2
 8001d6a:	484e      	ldr	r0, [pc, #312]	; (8001ea4 <int_Hardware+0x2fc>)
 8001d6c:	f002 fb94 	bl	8004498 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_MPU6050);
 8001d70:	484c      	ldr	r0, [pc, #304]	; (8001ea4 <int_Hardware+0x2fc>)
 8001d72:	f002 fbb3 	bl	80044dc <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 8001d76:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <int_Hardware+0x300>)
 8001d78:	4a4c      	ldr	r2, [pc, #304]	; (8001eac <int_Hardware+0x304>)
 8001d7a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <int_Hardware+0x300>)
 8001d7e:	2202      	movs	r2, #2
 8001d80:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001d82:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <int_Hardware+0x300>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001d88:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <int_Hardware+0x300>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <int_Hardware+0x300>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001d94:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <int_Hardware+0x300>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8001d9a:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <int_Hardware+0x300>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8001da0:	4841      	ldr	r0, [pc, #260]	; (8001ea8 <int_Hardware+0x300>)
 8001da2:	f003 fbf5 	bl	8005590 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001da6:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <int_Hardware+0x308>)
 8001da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dac:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <int_Hardware+0x308>)
 8001db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001db4:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001db6:	4b3e      	ldr	r3, [pc, #248]	; (8001eb0 <int_Hardware+0x308>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001dbc:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <int_Hardware+0x308>)
 8001dbe:	22fa      	movs	r2, #250	; 0xfa
 8001dc0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <int_Hardware+0x308>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 8001dc8:	4839      	ldr	r0, [pc, #228]	; (8001eb0 <int_Hardware+0x308>)
 8001dca:	f001 f941 	bl	8003050 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Sampling.ptrTIMx = TIM3;
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <int_Hardware+0x30c>)
 8001dd0:	4a39      	ldr	r2, [pc, #228]	; (8001eb8 <int_Hardware+0x310>)
 8001dd2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Sampling.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001dd4:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <int_Hardware+0x30c>)
 8001dd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001dda:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Sampling.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <int_Hardware+0x30c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Sampling.TIMx_Config.TIMX_period = 20;   //Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001de2:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <int_Hardware+0x30c>)
 8001de4:	2214      	movs	r2, #20
 8001de6:	605a      	str	r2, [r3, #4]
	handler_TIMER_Sampling.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <int_Hardware+0x30c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Sampling);
 8001dee:	4831      	ldr	r0, [pc, #196]	; (8001eb4 <int_Hardware+0x30c>)
 8001df0:	f001 f92e 	bl	8003050 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 8001df4:	4b31      	ldr	r3, [pc, #196]	; (8001ebc <int_Hardware+0x314>)
 8001df6:	4a32      	ldr	r2, [pc, #200]	; (8001ec0 <int_Hardware+0x318>)
 8001df8:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <int_Hardware+0x314>)
 8001dfc:	220a      	movs	r2, #10
 8001dfe:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001e00:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <int_Hardware+0x314>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <int_Hardware+0x314>)
 8001e08:	2264      	movs	r2, #100	; 0x64
 8001e0a:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <int_Hardware+0x314>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 8001e12:	482a      	ldr	r0, [pc, #168]	; (8001ebc <int_Hardware+0x314>)
 8001e14:	f001 f91c 	bl	8003050 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <int_Hardware+0x31c>)
 8001e1a:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <int_Hardware+0x2c4>)
 8001e1c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001e1e:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <int_Hardware+0x31c>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <int_Hardware+0x320>)
 8001e26:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <int_Hardware+0x31c>)
 8001e28:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8001e2a:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <int_Hardware+0x320>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001e30:	4825      	ldr	r0, [pc, #148]	; (8001ec8 <int_Hardware+0x320>)
 8001e32:	f001 fa91 	bl	8003358 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <int_Hardware+0x324>)
 8001e38:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <int_Hardware+0x2c4>)
 8001e3a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <int_Hardware+0x324>)
 8001e3e:	2203      	movs	r2, #3
 8001e40:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <int_Hardware+0x328>)
 8001e44:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <int_Hardware+0x324>)
 8001e46:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <int_Hardware+0x328>)
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8001e4e:	4820      	ldr	r0, [pc, #128]	; (8001ed0 <int_Hardware+0x328>)
 8001e50:	f001 fa82 	bl	8003358 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <int_Hardware+0x32c>)
 8001e56:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <int_Hardware+0x318>)
 8001e58:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <int_Hardware+0x32c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <int_Hardware+0x32c>)
 8001e62:	220a      	movs	r2, #10
 8001e64:	805a      	strh	r2, [r3, #2]
 8001e66:	e037      	b.n	8001ed8 <int_Hardware+0x330>
 8001e68:	20000220 	.word	0x20000220
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	20000204 	.word	0x20000204
 8001e74:	40020000 	.word	0x40020000
 8001e78:	2000027c 	.word	0x2000027c
 8001e7c:	20000288 	.word	0x20000288
 8001e80:	200002e0 	.word	0x200002e0
 8001e84:	200002ec 	.word	0x200002ec
 8001e88:	200002f8 	.word	0x200002f8
 8001e8c:	2000035c 	.word	0x2000035c
 8001e90:	20000368 	.word	0x20000368
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	20000374 	.word	0x20000374
 8001e9c:	20000254 	.word	0x20000254
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	20000260 	.word	0x20000260
 8001ea8:	20000294 	.word	0x20000294
 8001eac:	40011000 	.word	0x40011000
 8001eb0:	20000210 	.word	0x20000210
 8001eb4:	200003e8 	.word	0x200003e8
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	200003d8 	.word	0x200003d8
 8001ec0:	40000c00 	.word	0x40000c00
 8001ec4:	2000022c 	.word	0x2000022c
 8001ec8:	20000238 	.word	0x20000238
 8001ecc:	20000240 	.word	0x20000240
 8001ed0:	2000024c 	.word	0x2000024c
 8001ed4:	20000304 	.word	0x20000304
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <int_Hardware+0x388>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 8001ede:	4814      	ldr	r0, [pc, #80]	; (8001f30 <int_Hardware+0x388>)
 8001ee0:	f002 ff9e 	bl	8004e20 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4812      	ldr	r0, [pc, #72]	; (8001f30 <int_Hardware+0x388>)
 8001ee8:	f003 f8fa 	bl	80050e0 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 8001eec:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <int_Hardware+0x38c>)
 8001eee:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <int_Hardware+0x390>)
 8001ef0:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <int_Hardware+0x38c>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <int_Hardware+0x38c>)
 8001efa:	220a      	movs	r2, #10
 8001efc:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <int_Hardware+0x38c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001f04:	480b      	ldr	r0, [pc, #44]	; (8001f34 <int_Hardware+0x38c>)
 8001f06:	f002 ff8b 	bl	8004e20 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <int_Hardware+0x38c>)
 8001f0e:	f003 f8e7 	bl	80050e0 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_MPU6050.prtI2Cx = I2C1;
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <int_Hardware+0x394>)
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <int_Hardware+0x398>)
 8001f16:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_MPU6050.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <int_Hardware+0x394>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	715a      	strb	r2, [r3, #5]
	handler_I2C_MPU6050.slaveAddress = ADDRESS_DOWN;         //Direccion del Sclave
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <int_Hardware+0x394>)
 8001f20:	2268      	movs	r2, #104	; 0x68
 8001f22:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_MPU6050);
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <int_Hardware+0x394>)
 8001f26:	f002 fc45 	bl	80047b4 <i2c_Config>

	//---------------------Fin de Configuracion I2Cx----------------------

}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000304 	.word	0x20000304
 8001f34:	20000380 	.word	0x20000380
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	2000026c 	.word	0x2000026c
 8001f40:	40005400 	.word	0x40005400

08001f44 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f002 feed 	bl	8004d28 <configMCO2>
	configMCO2PRE(4);
 8001f4e:	2004      	movs	r0, #4
 8001f50:	f002 ff06 	bl	8004d60 <configMCO2PRE>
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <int_MPU>:
//------------------------------Fin configuracion MCO1------------------------------------------

//------------------------------Inicio configuracion del MPU------------------------------------------
void int_MPU(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	//Definimos la escala de las diferentes magnitudes fisicas
	handler_MPUAccel_MPU6050.fullScaleACCEL = ACCEL_2G;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <int_MPU+0x20>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
	handler_MPUAccel_MPU6050.fullScaleGYRO = GYRO_250;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <int_MPU+0x20>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	705a      	strb	r2, [r3, #1]
	//Definimos el handler correspondiente al I2C
	handler_MPUAccel_MPU6050.ptrI2Chandler = &handler_I2C_MPU6050;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <int_MPU+0x20>)
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <int_MPU+0x24>)
 8001f6c:	605a      	str	r2, [r3, #4]
	//Cargamos configuracion
	configMPUAccel(&handler_MPUAccel_MPU6050);
 8001f6e:	4802      	ldr	r0, [pc, #8]	; (8001f78 <int_MPU+0x20>)
 8001f70:	f7ff f9a0 	bl	80012b4 <configMPUAccel>

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000274 	.word	0x20000274
 8001f7c:	2000026c 	.word	0x2000026c

08001f80 <int_Config_Motor>:



//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 8001f84:	4b22      	ldr	r3, [pc, #136]	; (8002010 <int_Config_Motor+0x90>)
 8001f86:	4a23      	ldr	r2, [pc, #140]	; (8002014 <int_Config_Motor+0x94>)
 8001f88:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.configMotor.frecuency = &value_period;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <int_Config_Motor+0x90>)
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <int_Config_Motor+0x98>)
 8001f8e:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_R.configMotor.dir = SET;
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <int_Config_Motor+0x90>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <int_Config_Motor+0x90>)
 8001f9a:	4a20      	ldr	r2, [pc, #128]	; (800201c <int_Config_Motor+0x9c>)
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <int_Config_Motor+0x90>)
 8001fa0:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <int_Config_Motor+0xa0>)
 8001fa2:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <int_Config_Motor+0x90>)
 8001fa6:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <int_Config_Motor+0xa4>)
 8001fa8:	649a      	str	r2, [r3, #72]	; 0x48

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <int_Config_Motor+0xa8>)
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <int_Config_Motor+0x94>)
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.configMotor.frecuency = &value_period;
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <int_Config_Motor+0xa8>)
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <int_Config_Motor+0x98>)
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_L.configMotor.dir = SET;
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <int_Config_Motor+0xa8>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <int_Config_Motor+0xa8>)
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <int_Config_Motor+0xac>)
 8001fc2:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <int_Config_Motor+0xa8>)
 8001fc6:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <int_Config_Motor+0xb0>)
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <int_Config_Motor+0xa8>)
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <int_Config_Motor+0xb4>)
 8001fce:	649a      	str	r2, [r3, #72]	; 0x48

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distace.e = parameter_PID_distace.e_1 = parameter_PID_distace.e_2 = 0;
 8001fd0:	4b19      	ldr	r3, [pc, #100]	; (8002038 <int_Config_Motor+0xb8>)
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <int_Config_Motor+0xb8>)
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4a16      	ldr	r2, [pc, #88]	; (8002038 <int_Config_Motor+0xb8>)
 8001fde:	60d3      	str	r3, [r2, #12]
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <int_Config_Motor+0xb8>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <int_Config_Motor+0xb8>)
 8001fe6:	6093      	str	r3, [r2, #8]
	parameter_PID_distace.u = parameter_PID_distace.u_1 = 0;
 8001fe8:	4b13      	ldr	r3, [pc, #76]	; (8002038 <int_Config_Motor+0xb8>)
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	4b11      	ldr	r3, [pc, #68]	; (8002038 <int_Config_Motor+0xb8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a10      	ldr	r2, [pc, #64]	; (8002038 <int_Config_Motor+0xb8>)
 8001ff6:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&parameter_PID_distace, 3, 0, 0);   //kp,ti,td
 8001ff8:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800203c <int_Config_Motor+0xbc>
 8001ffc:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800203c <int_Config_Motor+0xbc>
 8002000:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <int_Config_Motor+0xb8>)
 8002006:	f000 f81b 	bl	8002040 <constains_calculator>

};
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000310 	.word	0x20000310
 8002014:	41a00000 	.word	0x41a00000
 8002018:	20000002 	.word	0x20000002
 800201c:	200002f8 	.word	0x200002f8
 8002020:	200002ec 	.word	0x200002ec
 8002024:	20000304 	.word	0x20000304
 8002028:	2000038c 	.word	0x2000038c
 800202c:	20000374 	.word	0x20000374
 8002030:	20000368 	.word	0x20000368
 8002034:	20000380 	.word	0x20000380
 8002038:	20000400 	.word	0x20000400
 800203c:	00000000 	.word	0x00000000

08002040 <constains_calculator>:


void constains_calculator(Parameters_PID_t *ptrPIDHandler,float kp, float ti, float td)   //kp,ti,td
{
 8002040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	ed87 0a02 	vstr	s0, [r7, #8]
 800204e:	edc7 0a01 	vstr	s1, [r7, #4]
 8002052:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo do controle PID digital
	   ptrPIDHandler->q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 8002056:	68b8      	ldr	r0, [r7, #8]
 8002058:	f7fe fa8e 	bl	8000578 <__aeabi_f2d>
 800205c:	4604      	mov	r4, r0
 800205e:	460d      	mov	r5, r1
 8002060:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <constains_calculator+0x174>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa87 	bl	8000578 <__aeabi_f2d>
 800206a:	4680      	mov	r8, r0
 800206c:	4689      	mov	r9, r1
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fa82 	bl	8000578 <__aeabi_f2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	f7fe f920 	bl	80002bc <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4640      	mov	r0, r8
 8002082:	4649      	mov	r1, r9
 8002084:	f7fe fbfa 	bl	800087c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <constains_calculator+0x178>)
 8002096:	f7fe f911 	bl	80002bc <__adddf3>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4690      	mov	r8, r2
 80020a0:	4699      	mov	r9, r3
 80020a2:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <constains_calculator+0x174>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ed97 7a00 	vldr	s14, [r7]
 80020ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020b0:	ee16 0a90 	vmov	r0, s13
 80020b4:	f7fe fa60 	bl	8000578 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4640      	mov	r0, r8
 80020be:	4649      	mov	r1, r9
 80020c0:	f7fe f8fc 	bl	80002bc <__adddf3>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe faac 	bl	8000628 <__aeabi_dmul>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fd9e 	bl	8000c18 <__aeabi_d2f>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	615a      	str	r2, [r3, #20]
	   ptrPIDHandler->q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 80020e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020e6:	eef1 7a67 	vneg.f32	s15, s15
 80020ea:	ee17 3a90 	vmov	r3, s15
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa42 	bl	8000578 <__aeabi_f2d>
 80020f4:	4604      	mov	r4, r0
 80020f6:	460d      	mov	r5, r1
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <constains_calculator+0x174>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa3b 	bl	8000578 <__aeabi_f2d>
 8002102:	4680      	mov	r8, r0
 8002104:	4689      	mov	r9, r1
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe fa36 	bl	8000578 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	f7fe f8d4 	bl	80002bc <__adddf3>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4640      	mov	r0, r8
 800211a:	4649      	mov	r1, r9
 800211c:	f7fe fbae 	bl	800087c <__aeabi_ddiv>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	4923      	ldr	r1, [pc, #140]	; (80021b8 <constains_calculator+0x178>)
 800212a:	f7fe f8c5 	bl	80002b8 <__aeabi_dsub>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	6838      	ldr	r0, [r7, #0]
 8002138:	f7fe fa1e 	bl	8000578 <__aeabi_f2d>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	f7fe f8bc 	bl	80002bc <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4692      	mov	sl, r2
 800214a:	469b      	mov	fp, r3
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <constains_calculator+0x174>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fa11 	bl	8000578 <__aeabi_f2d>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4650      	mov	r0, sl
 800215c:	4659      	mov	r1, fp
 800215e:	f7fe fb8d 	bl	800087c <__aeabi_ddiv>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4640      	mov	r0, r8
 8002168:	4649      	mov	r1, r9
 800216a:	f7fe f8a7 	bl	80002bc <__adddf3>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe fa57 	bl	8000628 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fd49 	bl	8000c18 <__aeabi_d2f>
 8002186:	4602      	mov	r2, r0
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	619a      	str	r2, [r3, #24]
	   ptrPIDHandler->q2 = (kp*td)/Ts;
 800218c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002190:	edd7 7a00 	vldr	s15, [r7]
 8002194:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <constains_calculator+0x174>)
 800219a:	ed93 7a00 	vldr	s14, [r3]
 800219e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021b2:	bf00      	nop
 80021b4:	20000004 	.word	0x20000004
 80021b8:	3ff00000 	.word	0x3ff00000

080021bc <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <BasicTimer2_Callback+0x10>)
 80021c2:	f002 fae0 	bl	8004786 <GPIOxTooglePin>
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000204 	.word	0x20000204

080021d0 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	ed2d 8b02 	vpush	{d8}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af04      	add	r7, sp, #16
	//----------------Accion a Realizar con el tiempo del TIMER--------------------
	if(flag_motor==1)
 80021da:	4bab      	ldr	r3, [pc, #684]	; (8002488 <BasicTimer3_Callback+0x2b8>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d11e      	bne.n	8002220 <BasicTimer3_Callback+0x50>
	{
		//Calculamos el angulo
		ang_Row = getAngle(&handler_MPUAccel_MPU6050, &sample_Gyro, ang_Row, READ_GYRO_Z, gyro_offset);
 80021e2:	4baa      	ldr	r3, [pc, #680]	; (800248c <BasicTimer3_Callback+0x2bc>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	4ba9      	ldr	r3, [pc, #676]	; (8002490 <BasicTimer3_Callback+0x2c0>)
 80021ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ee:	2205      	movs	r2, #5
 80021f0:	eeb0 0a67 	vmov.f32	s0, s15
 80021f4:	49a7      	ldr	r1, [pc, #668]	; (8002494 <BasicTimer3_Callback+0x2c4>)
 80021f6:	48a8      	ldr	r0, [pc, #672]	; (8002498 <BasicTimer3_Callback+0x2c8>)
 80021f8:	f7ff fae2 	bl	80017c0 <getAngle>
 80021fc:	eef0 7a40 	vmov.f32	s15, s0
 8002200:	4ba2      	ldr	r3, [pc, #648]	; (800248c <BasicTimer3_Callback+0x2bc>)
 8002202:	edc3 7a00 	vstr	s15, [r3]
		//Acumulamos los angulos
		sum_ang = ang_Row;
 8002206:	4ba1      	ldr	r3, [pc, #644]	; (800248c <BasicTimer3_Callback+0x2bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4aa4      	ldr	r2, [pc, #656]	; (800249c <BasicTimer3_Callback+0x2cc>)
 800220c:	6013      	str	r3, [r2, #0]
		//Se acumula el tiempo
		time_accumulated += sample_Gyro.delta_timer;
 800220e:	4ba1      	ldr	r3, [pc, #644]	; (8002494 <BasicTimer3_Callback+0x2c4>)
 8002210:	891a      	ldrh	r2, [r3, #8]
 8002212:	4ba3      	ldr	r3, [pc, #652]	; (80024a0 <BasicTimer3_Callback+0x2d0>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	b29a      	uxth	r2, r3
 800221a:	4ba1      	ldr	r3, [pc, #644]	; (80024a0 <BasicTimer3_Callback+0x2d0>)
 800221c:	801a      	strh	r2, [r3, #0]
 800221e:	e000      	b.n	8002222 <BasicTimer3_Callback+0x52>
	}
	else{ __NOP(); }
 8002220:	bf00      	nop

	//----------------Accion a realizar con un tiempo especifico--------------------
	if(counting_action>=timeAction_TIMER_Sampling)
 8002222:	4ba0      	ldr	r3, [pc, #640]	; (80024a4 <BasicTimer3_Callback+0x2d4>)
 8002224:	881a      	ldrh	r2, [r3, #0]
 8002226:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <BasicTimer3_Callback+0x2d8>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	f0c0 811b 	bcc.w	8002466 <BasicTimer3_Callback+0x296>
	{
		if(flag_motor==1)
 8002230:	4b95      	ldr	r3, [pc, #596]	; (8002488 <BasicTimer3_Callback+0x2b8>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	f040 80a1 	bne.w	800237c <BasicTimer3_Callback+0x1ac>
		{
			//Calculamos el angulo promedio y la establecemis como el angulo relativo
			float prom_ang = sum_ang/counting_action;
 800223a:	4b98      	ldr	r3, [pc, #608]	; (800249c <BasicTimer3_Callback+0x2cc>)
 800223c:	edd3 6a00 	vldr	s13, [r3]
 8002240:	4b98      	ldr	r3, [pc, #608]	; (80024a4 <BasicTimer3_Callback+0x2d4>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002250:	edc7 7a01 	vstr	s15, [r7, #4]
			parameter_Posicion_Robot.phi_relativo = (prom_ang*PI)/180;          //[rad]
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7fe f98f 	bl	8000578 <__aeabi_f2d>
 800225a:	a389      	add	r3, pc, #548	; (adr r3, 8002480 <BasicTimer3_Callback+0x2b0>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fe f9e2 	bl	8000628 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	4b8e      	ldr	r3, [pc, #568]	; (80024ac <BasicTimer3_Callback+0x2dc>)
 8002272:	f7fe fb03 	bl	800087c <__aeabi_ddiv>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f7fe fccb 	bl	8000c18 <__aeabi_d2f>
 8002282:	4603      	mov	r3, r0
 8002284:	4a8a      	ldr	r2, [pc, #552]	; (80024b0 <BasicTimer3_Callback+0x2e0>)
 8002286:	6013      	str	r3, [r2, #0]
			parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 8002288:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <BasicTimer3_Callback+0x2e0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f973 	bl	8000578 <__aeabi_f2d>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	ec43 2b10 	vmov	d0, r2, r3
 800229a:	f008 ff1d 	bl	800b0d8 <sin>
 800229e:	eeb0 8a40 	vmov.f32	s16, s0
 80022a2:	eef0 8a60 	vmov.f32	s17, s1
 80022a6:	4b82      	ldr	r3, [pc, #520]	; (80024b0 <BasicTimer3_Callback+0x2e0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f964 	bl	8000578 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	ec43 2b10 	vmov	d0, r2, r3
 80022b8:	f008 feba 	bl	800b030 <cos>
 80022bc:	eeb0 7a40 	vmov.f32	s14, s0
 80022c0:	eef0 7a60 	vmov.f32	s15, s1
 80022c4:	eeb0 1a47 	vmov.f32	s2, s14
 80022c8:	eef0 1a67 	vmov.f32	s3, s15
 80022cc:	eeb0 0a48 	vmov.f32	s0, s16
 80022d0:	eef0 0a68 	vmov.f32	s1, s17
 80022d4:	f008 ff58 	bl	800b188 <atan2>
 80022d8:	ec53 2b10 	vmov	r2, r3, d0
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fc9a 	bl	8000c18 <__aeabi_d2f>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4a72      	ldr	r2, [pc, #456]	; (80024b0 <BasicTimer3_Callback+0x2e0>)
 80022e8:	6013      	str	r3, [r2, #0]
			//Calculamos la velocidad
			handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 80022ec:	8c1b      	ldrh	r3, [r3, #32]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f6:	4b70      	ldr	r3, [pc, #448]	; (80024b8 <BasicTimer3_Callback+0x2e8>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002300:	4b6c      	ldr	r3, [pc, #432]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 8002302:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 8002306:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 8002308:	8c1b      	ldrh	r3, [r3, #32]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002312:	4b6b      	ldr	r3, [pc, #428]	; (80024c0 <BasicTimer3_Callback+0x2f0>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231c:	4b67      	ldr	r3, [pc, #412]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 800231e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/time_accumulated;      //[m/s]
 8002322:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 8002324:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002328:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <BasicTimer3_Callback+0x2d0>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002338:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 800233a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/time_accumulated;      //[m/s]
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 8002340:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002344:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <BasicTimer3_Callback+0x2d0>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 8002356:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 800235a:	4b58      	ldr	r3, [pc, #352]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 800235c:	2200      	movs	r2, #0
 800235e:	841a      	strh	r2, [r3, #32]
			handler_Motor_L.parametersMotor.count = 0;
 8002360:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 8002362:	2200      	movs	r2, #0
 8002364:	841a      	strh	r2, [r3, #32]
			//Subimos Bandera
			flag_count_odometry = 1;
 8002366:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <BasicTimer3_Callback+0x2f4>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
			//Reiniciamos tiempo
			time_accumulated = 0;
 800236c:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <BasicTimer3_Callback+0x2d0>)
 800236e:	2200      	movs	r2, #0
 8002370:	801a      	strh	r2, [r3, #0]
			//Reiniciamos variable
			sum_ang = 0;
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <BasicTimer3_Callback+0x2cc>)
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e070      	b.n	800245e <BasicTimer3_Callback+0x28e>
		}
		else if(flag_motor==3)
 800237c:	4b42      	ldr	r3, [pc, #264]	; (8002488 <BasicTimer3_Callback+0x2b8>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d120      	bne.n	80023c6 <BasicTimer3_Callback+0x1f6>
		{
			//Aumentamos el contador de tiempo
			count_time = count_time + timeAction_TIMER_Sampling;       //Tiempo en ms
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <BasicTimer3_Callback+0x2f8>)
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <BasicTimer3_Callback+0x2d8>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	4413      	add	r3, r2
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <BasicTimer3_Callback+0x2f8>)
 8002392:	801a      	strh	r2, [r3, #0]
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 8002394:	4b4c      	ldr	r3, [pc, #304]	; (80024c8 <BasicTimer3_Callback+0x2f8>)
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b48      	ldr	r3, [pc, #288]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 800239c:	8c1b      	ldrh	r3, [r3, #32]
 800239e:	4619      	mov	r1, r3
 80023a0:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 80023a2:	8c1b      	ldrh	r3, [r3, #32]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	460b      	mov	r3, r1
 80023a8:	4948      	ldr	r1, [pc, #288]	; (80024cc <BasicTimer3_Callback+0x2fc>)
 80023aa:	4849      	ldr	r0, [pc, #292]	; (80024d0 <BasicTimer3_Callback+0x300>)
 80023ac:	f004 fc16 	bl	8006bdc <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80023b0:	4947      	ldr	r1, [pc, #284]	; (80024d0 <BasicTimer3_Callback+0x300>)
 80023b2:	4848      	ldr	r0, [pc, #288]	; (80024d4 <BasicTimer3_Callback+0x304>)
 80023b4:	f003 fb58 	bl	8005a68 <writeMsgForTXE>
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 80023b8:	4b40      	ldr	r3, [pc, #256]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	841a      	strh	r2, [r3, #32]
			handler_Motor_L.parametersMotor.count = 0;
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	841a      	strh	r2, [r3, #32]
 80023c4:	e04b      	b.n	800245e <BasicTimer3_Callback+0x28e>
		}
		else if(flag_motor==4)
 80023c6:	4b30      	ldr	r3, [pc, #192]	; (8002488 <BasicTimer3_Callback+0x2b8>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d147      	bne.n	800245e <BasicTimer3_Callback+0x28e>
		{
			//Calculamos la velocidad
			handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/timeAction_TIMER_Sampling;   //[m/s]
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 80023d0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <BasicTimer3_Callback+0x2d8>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e4:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 80023e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/timeAction_TIMER_Sampling;   //[m/s]
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 80023ec:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <BasicTimer3_Callback+0x2d8>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002400:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 8002402:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			//Aumentamos el contador de tiempo
			count_time = count_time + timeAction_TIMER_Sampling;       //Tiempo en ms
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <BasicTimer3_Callback+0x2f8>)
 8002408:	881a      	ldrh	r2, [r3, #0]
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <BasicTimer3_Callback+0x2d8>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <BasicTimer3_Callback+0x2f8>)
 8002414:	801a      	strh	r2, [r3, #0]
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, handler_Motor_L.parametersMotor.velocity , handler_Motor_R.parametersMotor.velocity);
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <BasicTimer3_Callback+0x2f8>)
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	461e      	mov	r6, r3
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f8a9 	bl	8000578 <__aeabi_f2d>
 8002426:	4604      	mov	r4, r0
 8002428:	460d      	mov	r5, r1
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f8a2 	bl	8000578 <__aeabi_f2d>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800243c:	e9cd 4500 	strd	r4, r5, [sp]
 8002440:	4632      	mov	r2, r6
 8002442:	4925      	ldr	r1, [pc, #148]	; (80024d8 <BasicTimer3_Callback+0x308>)
 8002444:	4822      	ldr	r0, [pc, #136]	; (80024d0 <BasicTimer3_Callback+0x300>)
 8002446:	f004 fbc9 	bl	8006bdc <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 800244a:	4921      	ldr	r1, [pc, #132]	; (80024d0 <BasicTimer3_Callback+0x300>)
 800244c:	4821      	ldr	r0, [pc, #132]	; (80024d4 <BasicTimer3_Callback+0x304>)
 800244e:	f003 fb0b 	bl	8005a68 <writeMsgForTXE>
			//Reiniciamos el numero de conteos
			handler_Motor_R.parametersMotor.count = 0;
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <BasicTimer3_Callback+0x2ec>)
 8002454:	2200      	movs	r2, #0
 8002456:	841a      	strh	r2, [r3, #32]
			handler_Motor_L.parametersMotor.count = 0;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <BasicTimer3_Callback+0x2e4>)
 800245a:	2200      	movs	r2, #0
 800245c:	841a      	strh	r2, [r3, #32]
		}
		//Reiniciamos el contador de accion
		counting_action = 0;
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <BasicTimer3_Callback+0x2d4>)
 8002460:	2200      	movs	r2, #0
 8002462:	801a      	strh	r2, [r3, #0]

	}
	else{ counting_action++; }

}
 8002464:	e005      	b.n	8002472 <BasicTimer3_Callback+0x2a2>
	else{ counting_action++; }
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <BasicTimer3_Callback+0x2d4>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <BasicTimer3_Callback+0x2d4>)
 8002470:	801a      	strh	r2, [r3, #0]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	ecbd 8b02 	vpop	{d8}
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	bf00      	nop
 8002480:	54442d18 	.word	0x54442d18
 8002484:	400921fb 	.word	0x400921fb
 8002488:	2000047c 	.word	0x2000047c
 800248c:	200003f8 	.word	0x200003f8
 8002490:	200003fc 	.word	0x200003fc
 8002494:	20000448 	.word	0x20000448
 8002498:	20000274 	.word	0x20000274
 800249c:	20000458 	.word	0x20000458
 80024a0:	2000049c 	.word	0x2000049c
 80024a4:	2000049e 	.word	0x2000049e
 80024a8:	20000008 	.word	0x20000008
 80024ac:	40668000 	.word	0x40668000
 80024b0:	20000424 	.word	0x20000424
 80024b4:	2000038c 	.word	0x2000038c
 80024b8:	2000046c 	.word	0x2000046c
 80024bc:	20000310 	.word	0x20000310
 80024c0:	20000470 	.word	0x20000470
 80024c4:	20000468 	.word	0x20000468
 80024c8:	2000047e 	.word	0x2000047e
 80024cc:	0800c680 	.word	0x0800c680
 80024d0:	200002a0 	.word	0x200002a0
 80024d4:	20000294 	.word	0x20000294
 80024d8:	0800c68c 	.word	0x0800c68c

080024dc <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 80024e0:	f003 fb00 	bl	8005ae4 <getRxData>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b02      	ldr	r3, [pc, #8]	; (80024f4 <BasicUSART1_Callback+0x18>)
 80024ea:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 80024ec:	f000 f8ac 	bl	8002648 <recepcionCommand>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000000 	.word	0x20000000

080024f8 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <callback_extInt1+0x8c>)
 80024fe:	8c1b      	ldrh	r3, [r3, #32]
 8002500:	3301      	adds	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <callback_extInt1+0x8c>)
 8002506:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <callback_extInt1+0x8c>)
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	3301      	adds	r3, #1
 800250e:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <callback_extInt1+0x8c>)
 8002510:	6253      	str	r3, [r2, #36]	; 0x24
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8002512:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <callback_extInt1+0x90>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d112      	bne.n	8002540 <callback_extInt1+0x48>
 800251a:	4b1c      	ldr	r3, [pc, #112]	; (800258c <callback_extInt1+0x94>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d10e      	bne.n	8002540 <callback_extInt1+0x48>
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <callback_extInt1+0x8c>)
 8002524:	8c1a      	ldrh	r2, [r3, #32]
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <callback_extInt1+0x98>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d908      	bls.n	8002540 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 800252e:	2080      	movs	r0, #128	; 0x80
 8002530:	f000 fbb4 	bl	8002c9c <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <callback_extInt1+0x9c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f99e 	bl	800187a <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 800253e:	e01e      	b.n	800257e <callback_extInt1+0x86>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <callback_extInt1+0x90>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d11a      	bne.n	800257e <callback_extInt1+0x86>
 8002548:	4b13      	ldr	r3, [pc, #76]	; (8002598 <callback_extInt1+0xa0>)
 800254a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <callback_extInt1+0x8c>)
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <callback_extInt1+0xa4>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d400      	bmi.n	8002578 <callback_extInt1+0x80>
}
 8002576:	e002      	b.n	800257e <callback_extInt1+0x86>
		status_motor(RESET);
 8002578:	2080      	movs	r0, #128	; 0x80
 800257a:	f000 fb8f 	bl	8002c9c <status_motor>
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000310 	.word	0x20000310
 8002588:	2000047c 	.word	0x2000047c
 800258c:	2000047d 	.word	0x2000047d
 8002590:	20000480 	.word	0x20000480
 8002594:	20000478 	.word	0x20000478
 8002598:	20000482 	.word	0x20000482
 800259c:	20000470 	.word	0x20000470

080025a0 <callback_extInt3>:
void callback_extInt3(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <callback_extInt3+0x8c>)
 80025a6:	8c1b      	ldrh	r3, [r3, #32]
 80025a8:	3301      	adds	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <callback_extInt3+0x8c>)
 80025ae:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <callback_extInt3+0x8c>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	3301      	adds	r3, #1
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <callback_extInt3+0x8c>)
 80025b8:	6253      	str	r3, [r2, #36]	; 0x24
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <callback_extInt3+0x90>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d112      	bne.n	80025e8 <callback_extInt3+0x48>
 80025c2:	4b1c      	ldr	r3, [pc, #112]	; (8002634 <callback_extInt3+0x94>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d10e      	bne.n	80025e8 <callback_extInt3+0x48>
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <callback_extInt3+0x8c>)
 80025cc:	8c1a      	ldrh	r2, [r3, #32]
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <callback_extInt3+0x98>)
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d908      	bls.n	80025e8 <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 80025d6:	2080      	movs	r0, #128	; 0x80
 80025d8:	f000 fb60 	bl	8002c9c <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 80025dc:	4b17      	ldr	r3, [pc, #92]	; (800263c <callback_extInt3+0x9c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff f94a 	bl	800187a <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 80025e6:	e01e      	b.n	8002626 <callback_extInt3+0x86>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <callback_extInt3+0x90>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d11a      	bne.n	8002626 <callback_extInt3+0x86>
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <callback_extInt3+0xa0>)
 80025f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <callback_extInt3+0x8c>)
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <callback_extInt3+0xa4>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	d400      	bmi.n	8002620 <callback_extInt3+0x80>
}
 800261e:	e002      	b.n	8002626 <callback_extInt3+0x86>
		status_motor(RESET);
 8002620:	2080      	movs	r0, #128	; 0x80
 8002622:	f000 fb3b 	bl	8002c9c <status_motor>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2000038c 	.word	0x2000038c
 8002630:	2000047c 	.word	0x2000047c
 8002634:	2000047d 	.word	0x2000047d
 8002638:	20000480 	.word	0x20000480
 800263c:	20000478 	.word	0x20000478
 8002640:	20000482 	.word	0x20000482
 8002644:	2000046c 	.word	0x2000046c

08002648 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
	if(charRead == '@')
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <recepcionCommand+0x4c>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d10c      	bne.n	800266e <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <recepcionCommand+0x50>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b10      	ldr	r3, [pc, #64]	; (800269c <recepcionCommand+0x54>)
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <recepcionCommand+0x58>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <recepcionCommand+0x50>)
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 800266c:	e00c      	b.n	8002688 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <recepcionCommand+0x50>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b07      	ldr	r3, [pc, #28]	; (8002694 <recepcionCommand+0x4c>)
 8002676:	7819      	ldrb	r1, [r3, #0]
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <recepcionCommand+0x54>)
 800267a:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <recepcionCommand+0x50>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	3301      	adds	r3, #1
 8002682:	b2da      	uxtb	r2, r3
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <recepcionCommand+0x50>)
 8002686:	701a      	strb	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000000 	.word	0x20000000
 8002698:	200004a0 	.word	0x200004a0
 800269c:	200004a4 	.word	0x200004a4
 80026a0:	20000010 	.word	0x20000010

080026a4 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b09a      	sub	sp, #104	; 0x68
 80026a8:	af04      	add	r7, sp, #16
 80026aa:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	223c      	movs	r2, #60	; 0x3c
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fc07 	bl	8005ecc <memset>
	int firtsParameter = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 80026ce:	f107 0114 	add.w	r1, r7, #20
 80026d2:	f107 0218 	add.w	r2, r7, #24
 80026d6:	f107 0308 	add.w	r3, r7, #8
 80026da:	9302      	str	r3, [sp, #8]
 80026dc:	f107 030c 	add.w	r3, r7, #12
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	49b6      	ldr	r1, [pc, #728]	; (80029c4 <runCommand+0x320>)
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f004 fa95 	bl	8006c1c <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	49b4      	ldr	r1, [pc, #720]	; (80029c8 <runCommand+0x324>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fd71 	bl	80001e0 <strcmp>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d120      	bne.n	8002746 <runCommand+0xa2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8002704:	49b1      	ldr	r1, [pc, #708]	; (80029cc <runCommand+0x328>)
 8002706:	48b2      	ldr	r0, [pc, #712]	; (80029d0 <runCommand+0x32c>)
 8002708:	f003 f9ae 	bl	8005a68 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 800270c:	49b1      	ldr	r1, [pc, #708]	; (80029d4 <runCommand+0x330>)
 800270e:	48b0      	ldr	r0, [pc, #704]	; (80029d0 <runCommand+0x32c>)
 8002710:	f003 f9aa 	bl	8005a68 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 8002714:	49b0      	ldr	r1, [pc, #704]	; (80029d8 <runCommand+0x334>)
 8002716:	48ae      	ldr	r0, [pc, #696]	; (80029d0 <runCommand+0x32c>)
 8002718:	f003 f9a6 	bl	8005a68 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # ---Inicia Linea recta, #: dist [mm], #: dutty inicial \n");
 800271c:	49af      	ldr	r1, [pc, #700]	; (80029dc <runCommand+0x338>)
 800271e:	48ac      	ldr	r0, [pc, #688]	; (80029d0 <runCommand+0x32c>)
 8002720:	f003 f9a2 	bl	8005a68 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 8002724:	49ae      	ldr	r1, [pc, #696]	; (80029e0 <runCommand+0x33c>)
 8002726:	48aa      	ldr	r0, [pc, #680]	; (80029d0 <runCommand+0x32c>)
 8002728:	f003 f99e 	bl	8005a68 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) stop ---Para el estudio en medio de la ejecucion \n");
 800272c:	49ad      	ldr	r1, [pc, #692]	; (80029e4 <runCommand+0x340>)
 800272e:	48a8      	ldr	r0, [pc, #672]	; (80029d0 <runCommand+0x32c>)
 8002730:	f003 f99a 	bl	8005a68 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: kp,ti,td \n");
 8002734:	49ac      	ldr	r1, [pc, #688]	; (80029e8 <runCommand+0x344>)
 8002736:	48a6      	ldr	r0, [pc, #664]	; (80029d0 <runCommand+0x32c>)
 8002738:	f003 f996 	bl	8005a68 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 800273c:	49ab      	ldr	r1, [pc, #684]	; (80029ec <runCommand+0x348>)
 800273e:	48a4      	ldr	r0, [pc, #656]	; (80029d0 <runCommand+0x32c>)
 8002740:	f003 f992 	bl	8005a68 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8002744:	e1d7      	b.n	8002af6 <runCommand+0x452>
	else if (strcmp(cmd, "frequency") == 0)
 8002746:	f107 0318 	add.w	r3, r7, #24
 800274a:	49a9      	ldr	r1, [pc, #676]	; (80029f0 <runCommand+0x34c>)
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fd47 	bl	80001e0 <strcmp>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <runCommand+0xc4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	4aa6      	ldr	r2, [pc, #664]	; (80029f4 <runCommand+0x350>)
 800275c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002760:	b29a      	uxth	r2, r3
 8002762:	4ba5      	ldr	r3, [pc, #660]	; (80029f8 <runCommand+0x354>)
 8002764:	801a      	strh	r2, [r3, #0]
}
 8002766:	e1c6      	b.n	8002af6 <runCommand+0x452>
	else if (strcmp(cmd, "line") == 0)
 8002768:	f107 0318 	add.w	r3, r7, #24
 800276c:	49a3      	ldr	r1, [pc, #652]	; (80029fc <runCommand+0x358>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7fd fd36 	bl	80001e0 <strcmp>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 80b9 	bne.w	80028ee <runCommand+0x24a>
		parameter_Posicion_Robot.xg_position = 0;
 800277c:	4ba0      	ldr	r3, [pc, #640]	; (8002a00 <runCommand+0x35c>)
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	615a      	str	r2, [r3, #20]
		parameter_Posicion_Robot.yg_position = 0;
 8002784:	4b9e      	ldr	r3, [pc, #632]	; (8002a00 <runCommand+0x35c>)
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
		parameter_Posicion_Robot.ang_Giro += turn;
 800278c:	4b9c      	ldr	r3, [pc, #624]	; (8002a00 <runCommand+0x35c>)
 800278e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002792:	4b9c      	ldr	r3, [pc, #624]	; (8002a04 <runCommand+0x360>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279c:	4b98      	ldr	r3, [pc, #608]	; (8002a00 <runCommand+0x35c>)
 800279e:	edc3 7a07 	vstr	s15, [r3, #28]
		parameter_Posicion_Robot.xr_position = 0;
 80027a2:	4b97      	ldr	r3, [pc, #604]	; (8002a00 <runCommand+0x35c>)
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
		parameter_Posicion_Robot.yr_position = 0;
 80027aa:	4b95      	ldr	r3, [pc, #596]	; (8002a00 <runCommand+0x35c>)
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
		ang_Row = 0;
 80027b2:	4b95      	ldr	r3, [pc, #596]	; (8002a08 <runCommand+0x364>)
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
		cos_cal = cos(parameter_Posicion_Robot.ang_Giro);
 80027ba:	4b91      	ldr	r3, [pc, #580]	; (8002a00 <runCommand+0x35c>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd feda 	bl	8000578 <__aeabi_f2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	ec43 2b10 	vmov	d0, r2, r3
 80027cc:	f008 fc30 	bl	800b030 <cos>
 80027d0:	ec53 2b10 	vmov	r2, r3, d0
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe fa1e 	bl	8000c18 <__aeabi_d2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	4a8b      	ldr	r2, [pc, #556]	; (8002a0c <runCommand+0x368>)
 80027e0:	6013      	str	r3, [r2, #0]
		sin_cal = sin(parameter_Posicion_Robot.ang_Giro);
 80027e2:	4b87      	ldr	r3, [pc, #540]	; (8002a00 <runCommand+0x35c>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd fec6 	bl	8000578 <__aeabi_f2d>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	ec43 2b10 	vmov	d0, r2, r3
 80027f4:	f008 fc70 	bl	800b0d8 <sin>
 80027f8:	ec53 2b10 	vmov	r2, r3, d0
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe fa0a 	bl	8000c18 <__aeabi_d2f>
 8002804:	4603      	mov	r3, r0
 8002806:	4a82      	ldr	r2, [pc, #520]	; (8002a10 <runCommand+0x36c>)
 8002808:	6013      	str	r3, [r2, #0]
		timeAction_TIMER_Sampling = (Ts/20);
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <runCommand+0x370>)
 800280c:	ed93 7a00 	vldr	s14, [r3]
 8002810:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281c:	ee17 3a90 	vmov	r3, s15
 8002820:	b29a      	uxth	r2, r3
 8002822:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <runCommand+0x374>)
 8002824:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	b21a      	sxth	r2, r3
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <runCommand+0x378>)
 800282c:	801a      	strh	r2, [r3, #0]
		duttyInicial = secondParameter;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002838:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <runCommand+0x37c>)
 800283a:	edc3 7a00 	vstr	s15, [r3]
		uRef = (duttyInicial+26)/563;
 800283e:	4b78      	ldr	r3, [pc, #480]	; (8002a20 <runCommand+0x37c>)
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800284c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002a24 <runCommand+0x380>
 8002850:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002854:	ee16 0a90 	vmov	r0, s13
 8002858:	f7fd fe8e 	bl	8000578 <__aeabi_f2d>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4971      	ldr	r1, [pc, #452]	; (8002a28 <runCommand+0x384>)
 8002862:	e9c1 2300 	strd	r2, r3, [r1]
		parameter_PID_distace.e = parameter_PID_distace.e_1 = parameter_PID_distace.e_2 = parameter_PID_distace.u_1 = 0;
 8002866:	4b71      	ldr	r3, [pc, #452]	; (8002a2c <runCommand+0x388>)
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	4b6f      	ldr	r3, [pc, #444]	; (8002a2c <runCommand+0x388>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4a6e      	ldr	r2, [pc, #440]	; (8002a2c <runCommand+0x388>)
 8002874:	6113      	str	r3, [r2, #16]
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <runCommand+0x388>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	4a6c      	ldr	r2, [pc, #432]	; (8002a2c <runCommand+0x388>)
 800287c:	60d3      	str	r3, [r2, #12]
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <runCommand+0x388>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <runCommand+0x388>)
 8002884:	6093      	str	r3, [r2, #8]
		config_motor(1, timeAction_TIMER_Sampling, duttyInicial, duttyInicial, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002886:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <runCommand+0x374>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	4619      	mov	r1, r3
 800288c:	4b64      	ldr	r3, [pc, #400]	; (8002a20 <runCommand+0x37c>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <runCommand+0x37c>)
 8002894:	ed93 7a00 	vldr	s14, [r3]
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <runCommand+0x354>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	eef0 0a47 	vmov.f32	s1, s14
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	2001      	movs	r0, #1
 80028a8:	f000 fa80 	bl	8002dac <config_motor>
		status_motor(SET);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f000 f9f5 	bl	8002c9c <status_motor>
		sample_Gyro.timer_prev = getTicksMs();
 80028b2:	f002 fdeb 	bl	800548c <getTicksMs>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	495d      	ldr	r1, [pc, #372]	; (8002a30 <runCommand+0x38c>)
 80028bc:	e9c1 2300 	strd	r2, r3, [r1]
		gyro_offset = calibrationMPU(&handler_MPUAccel_MPU6050, CAL_GYRO_Z);
 80028c0:	2105      	movs	r1, #5
 80028c2:	485c      	ldr	r0, [pc, #368]	; (8002a34 <runCommand+0x390>)
 80028c4:	f7fe ff30 	bl	8001728 <calibrationMPU>
 80028c8:	eef0 7a40 	vmov.f32	s15, s0
 80028cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d0:	ee17 3a90 	vmov	r3, s15
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <runCommand+0x394>)
 80028d8:	801a      	strh	r2, [r3, #0]
		flag_PID = 0;
 80028da:	4b58      	ldr	r3, [pc, #352]	; (8002a3c <runCommand+0x398>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
		time_accumulated = 0;
 80028e0:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <runCommand+0x39c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	801a      	strh	r2, [r3, #0]
		counting_action = 0;
 80028e6:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <runCommand+0x3a0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	801a      	strh	r2, [r3, #0]
}
 80028ec:	e103      	b.n	8002af6 <runCommand+0x452>
	else if (strcmp(cmd, "const") == 0)
 80028ee:	f107 0318 	add.w	r3, r7, #24
 80028f2:	4955      	ldr	r1, [pc, #340]	; (8002a48 <runCommand+0x3a4>)
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fc73 	bl	80001e0 <strcmp>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d118      	bne.n	8002932 <runCommand+0x28e>
			constains_calculator(&parameter_PID_distace, firtsParameter, secondParameter, thirdParameter);   //kp,ti,td
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	ee07 3a10 	vmov	s14, r3
 8002910:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	ee06 3a90 	vmov	s13, r3
 800291a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800291e:	eeb0 1a66 	vmov.f32	s2, s13
 8002922:	eef0 0a47 	vmov.f32	s1, s14
 8002926:	eeb0 0a67 	vmov.f32	s0, s15
 800292a:	4840      	ldr	r0, [pc, #256]	; (8002a2c <runCommand+0x388>)
 800292c:	f7ff fb88 	bl	8002040 <constains_calculator>
}
 8002930:	e0e1      	b.n	8002af6 <runCommand+0x452>
	else if (strcmp(cmd, "equation") == 0)
 8002932:	f107 0318 	add.w	r3, r7, #24
 8002936:	4945      	ldr	r1, [pc, #276]	; (8002a4c <runCommand+0x3a8>)
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fc51 	bl	80001e0 <strcmp>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d118      	bne.n	8002976 <runCommand+0x2d2>
			m = ((float) firtsParameter)/100;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800294e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002a50 <runCommand+0x3ac>
 8002952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <runCommand+0x3b0>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
			bl = ((float) secondParameter)/100;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002966:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8002a50 <runCommand+0x3ac>
 800296a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800296e:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <runCommand+0x3b4>)
 8002970:	edc3 7a00 	vstr	s15, [r3]
}
 8002974:	e0bf      	b.n	8002af6 <runCommand+0x452>
	else if (strcmp(cmd, "turn") == 0)
 8002976:	f107 0318 	add.w	r3, r7, #24
 800297a:	4938      	ldr	r1, [pc, #224]	; (8002a5c <runCommand+0x3b8>)
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fc2f 	bl	80001e0 <strcmp>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	f040 80a1 	bne.w	8002acc <runCommand+0x428>
		flag_turn = secondParameter;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <runCommand+0x3bc>)
 8002990:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 8002992:	4b33      	ldr	r3, [pc, #204]	; (8002a60 <runCommand+0x3bc>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d16c      	bne.n	8002a74 <runCommand+0x3d0>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	4a31      	ldr	r2, [pc, #196]	; (8002a64 <runCommand+0x3c0>)
 800299e:	fb82 1203 	smull	r1, r2, r2, r3
 80029a2:	1052      	asrs	r2, r2, #1
 80029a4:	17db      	asrs	r3, r3, #31
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	4b2e      	ldr	r3, [pc, #184]	; (8002a68 <runCommand+0x3c4>)
 80029b0:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 80029b2:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <runCommand+0x3c8>)
 80029b4:	4a2e      	ldr	r2, [pc, #184]	; (8002a70 <runCommand+0x3cc>)
 80029b6:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <runCommand+0x3c8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe ff5c 	bl	800187a <updateDirMotor>
 80029c2:	e06b      	b.n	8002a9c <runCommand+0x3f8>
 80029c4:	0800c69c 	.word	0x0800c69c
 80029c8:	0800c6ac 	.word	0x0800c6ac
 80029cc:	0800c6b4 	.word	0x0800c6b4
 80029d0:	20000294 	.word	0x20000294
 80029d4:	0800c6c4 	.word	0x0800c6c4
 80029d8:	0800c6f0 	.word	0x0800c6f0
 80029dc:	0800c740 	.word	0x0800c740
 80029e0:	0800c784 	.word	0x0800c784
 80029e4:	0800c7cc 	.word	0x0800c7cc
 80029e8:	0800c804 	.word	0x0800c804
 80029ec:	0800c838 	.word	0x0800c838
 80029f0:	0800c888 	.word	0x0800c888
 80029f4:	000186a0 	.word	0x000186a0
 80029f8:	2000000a 	.word	0x2000000a
 80029fc:	0800c894 	.word	0x0800c894
 8002a00:	20000424 	.word	0x20000424
 8002a04:	20000464 	.word	0x20000464
 8002a08:	200003f8 	.word	0x200003f8
 8002a0c:	2000045c 	.word	0x2000045c
 8002a10:	20000460 	.word	0x20000460
 8002a14:	20000004 	.word	0x20000004
 8002a18:	20000008 	.word	0x20000008
 8002a1c:	20000482 	.word	0x20000482
 8002a20:	20000484 	.word	0x20000484
 8002a24:	440cc000 	.word	0x440cc000
 8002a28:	20000490 	.word	0x20000490
 8002a2c:	20000400 	.word	0x20000400
 8002a30:	20000448 	.word	0x20000448
 8002a34:	20000274 	.word	0x20000274
 8002a38:	200003fc 	.word	0x200003fc
 8002a3c:	20000420 	.word	0x20000420
 8002a40:	2000049c 	.word	0x2000049c
 8002a44:	2000049e 	.word	0x2000049e
 8002a48:	0800c89c 	.word	0x0800c89c
 8002a4c:	0800c8a4 	.word	0x0800c8a4
 8002a50:	42c80000 	.word	0x42c80000
 8002a54:	2000000c 	.word	0x2000000c
 8002a58:	20000488 	.word	0x20000488
 8002a5c:	0800c8b0 	.word	0x0800c8b0
 8002a60:	2000047d 	.word	0x2000047d
 8002a64:	66666667 	.word	0x66666667
 8002a68:	20000480 	.word	0x20000480
 8002a6c:	20000478 	.word	0x20000478
 8002a70:	20000310 	.word	0x20000310
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <runCommand+0x45c>)
 8002a78:	fb82 1203 	smull	r1, r2, r2, r3
 8002a7c:	1052      	asrs	r2, r2, #1
 8002a7e:	17db      	asrs	r3, r3, #31
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <runCommand+0x460>)
 8002a8a:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <runCommand+0x464>)
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <runCommand+0x468>)
 8002a90:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <runCommand+0x464>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe feef 	bl	800187a <updateDirMotor>
		config_motor(2, timeAction_TIMER_Sampling, thirdParameter, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002a9c:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <runCommand+0x46c>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	ee07 3a90 	vmov	s15, r3
 8002aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	ee07 3a10 	vmov	s14, r3
 8002ab2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <runCommand+0x470>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	eef0 0a47 	vmov.f32	s1, s14
 8002ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f000 f971 	bl	8002dac <config_motor>
}
 8002aca:	e014      	b.n	8002af6 <runCommand+0x452>
	else if (strcmp(cmd, "stop") == 0)
 8002acc:	f107 0318 	add.w	r3, r7, #24
 8002ad0:	4911      	ldr	r1, [pc, #68]	; (8002b18 <runCommand+0x474>)
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fb84 	bl	80001e0 <strcmp>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d107      	bne.n	8002aee <runCommand+0x44a>
		status_motor(RESET);
 8002ade:	2080      	movs	r0, #128	; 0x80
 8002ae0:	f000 f8dc 	bl	8002c9c <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 8002ae4:	490d      	ldr	r1, [pc, #52]	; (8002b1c <runCommand+0x478>)
 8002ae6:	480e      	ldr	r0, [pc, #56]	; (8002b20 <runCommand+0x47c>)
 8002ae8:	f002 ffbe 	bl	8005a68 <writeMsgForTXE>
}
 8002aec:	e003      	b.n	8002af6 <runCommand+0x452>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8002aee:	490d      	ldr	r1, [pc, #52]	; (8002b24 <runCommand+0x480>)
 8002af0:	480b      	ldr	r0, [pc, #44]	; (8002b20 <runCommand+0x47c>)
 8002af2:	f002 ffb9 	bl	8005a68 <writeMsgForTXE>
}
 8002af6:	bf00      	nop
 8002af8:	3758      	adds	r7, #88	; 0x58
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	66666667 	.word	0x66666667
 8002b04:	20000480 	.word	0x20000480
 8002b08:	20000478 	.word	0x20000478
 8002b0c:	2000038c 	.word	0x2000038c
 8002b10:	20000008 	.word	0x20000008
 8002b14:	2000000a 	.word	0x2000000a
 8002b18:	0800c8b8 	.word	0x0800c8b8
 8002b1c:	0800c8c0 	.word	0x0800c8c0
 8002b20:	20000294 	.word	0x20000294
 8002b24:	0800c8d8 	.word	0x0800c8d8

08002b28 <PID>:
//----------------------------Inicio de la definicion de las funciones-----------------------------------------


//--------------------PID----------------------
void PID(Parameters_PID_t *ptrPIDHandler, float setpoint, float measure)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b34:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8002b38:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	edc3 7a02 	vstr	s15, [r3, #8]
    // Controle PID
	float p0 =  ptrPIDHandler->q0*ptrPIDHandler->e;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	edc7 7a07 	vstr	s15, [r7, #28]
	float p1 =  ptrPIDHandler->q1*ptrPIDHandler->e_1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	edc7 7a06 	vstr	s15, [r7, #24]
	float p2 =  ptrPIDHandler->q2*ptrPIDHandler->e_2;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = ptrPIDHandler->u_1 + p0 + p1 + p2;        //Ley del controlador PID discreto
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b94:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	edc3 7a00 	vstr	s15, [r3]

	//Saturamos la accion de control
	if(ptrPIDHandler->u>5)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002bb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	dd03      	ble.n	8002bc6 <PID+0x9e>
	{
		ptrPIDHandler->u = 5;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <PID+0xdc>)
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e00c      	b.n	8002be0 <PID+0xb8>
	}
	else if(ptrPIDHandler->u < -5)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd8:	d502      	bpl.n	8002be0 <PID+0xb8>
	{
		ptrPIDHandler->u = -5;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <PID+0xe0>)
 8002bde:	601a      	str	r2, [r3, #0]
	}
     //Retorno a los valores reales
	ptrPIDHandler->e_2 = ptrPIDHandler->e_1;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->e_1 = ptrPIDHandler->e;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	60da      	str	r2, [r3, #12]
	ptrPIDHandler->u_1 = ptrPIDHandler->u;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]

}
 8002bf8:	bf00      	nop
 8002bfa:	3724      	adds	r7, #36	; 0x24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40a00000 	.word	0x40a00000
 8002c08:	c0a00000 	.word	0xc0a00000

08002c0c <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

	//Definimos variables auxiliares
	float port_dutty = 0;
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
	//Conversion ley de control->velocidad->valor dutty
	if(ptrMotorHandler == &handler_Motor_L)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <correction+0x80>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d103      	bne.n	8002c2a <correction+0x1e>
	{
		//Conversion a dutty
		//port_dutty = (0.9234*(ptrMotorHandler->configMotor.dutty) - 3) ;
		port_dutty = ptrMotorHandler->configMotor.dutty;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e002      	b.n	8002c30 <correction+0x24>
	}
	else
	{
		//Conversion a dutty
		port_dutty = ptrMotorHandler->configMotor.dutty;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	60fb      	str	r3, [r7, #12]
	}

    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 50)
 8002c30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c34:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002c90 <correction+0x84>
 8002c38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c40:	db02      	blt.n	8002c48 <correction+0x3c>
    {
    	port_dutty = 50;
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <correction+0x88>)
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e018      	b.n	8002c7a <correction+0x6e>
    }
    else if(port_dutty <= duttyInicial-5)
 8002c48:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <correction+0x8c>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c56:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	d809      	bhi.n	8002c78 <correction+0x6c>
    {
    	port_dutty = duttyInicial-5;
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <correction+0x8c>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002c6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c72:	edc7 7a03 	vstr	s15, [r7, #12]
 8002c76:	e000      	b.n	8002c7a <correction+0x6e>
    }
    else
    {
    	__NOP();
 8002c78:	bf00      	nop
    }

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 8002c7a:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe fde4 	bl	800184c <updateDuttyMotor>
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	2000038c 	.word	0x2000038c
 8002c90:	42480000 	.word	0x42480000
 8002c94:	42480000 	.word	0x42480000
 8002c98:	20000484 	.word	0x20000484

08002c9c <status_motor>:

void status_motor(uint8_t status)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d138      	bne.n	8002d1e <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <status_motor+0x100>)
 8002cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fa14 	bl	80050e0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8002cb8:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <status_motor+0x104>)
 8002cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 fa0e 	bl	80050e0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <status_motor+0x100>)
 8002cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc8:	4b34      	ldr	r3, [pc, #208]	; (8002d9c <status_motor+0x100>)
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f001 fd2a 	bl	8004730 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8002cdc:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <status_motor+0x104>)
 8002cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <status_motor+0x104>)
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f001 fd1e 	bl	8004730 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <status_motor+0x100>)
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	2180      	movs	r1, #128	; 0x80
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 fd18 	bl	8004730 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <status_motor+0x104>)
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 fd12 	bl	8004730 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <status_motor+0x108>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d03f      	beq.n	8002d94 <status_motor+0xf8>
		{
			statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_ENABLE);
 8002d14:	2101      	movs	r1, #1
 8002d16:	4824      	ldr	r0, [pc, #144]	; (8002da8 <status_motor+0x10c>)
 8002d18:	f000 fac8 	bl	80032ac <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 8002d1c:	e03a      	b.n	8002d94 <status_motor+0xf8>
		if(flag_motor!=2)
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <status_motor+0x108>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Sampling, INTERRUPTION_DISABLE);
 8002d26:	2100      	movs	r1, #0
 8002d28:	481f      	ldr	r0, [pc, #124]	; (8002da8 <status_motor+0x10c>)
 8002d2a:	f000 fabf 	bl	80032ac <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <status_motor+0x100>)
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 f9d3 	bl	80050e0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8002d3a:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <status_motor+0x104>)
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 f9cd 	bl	80050e0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <status_motor+0x100>)
 8002d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <status_motor+0x100>)
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f001 fce9 	bl	8004730 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <status_motor+0x104>)
 8002d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <status_motor+0x104>)
 8002d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	f001 fcdd 	bl	8004730 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <status_motor+0x100>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f001 fcd7 	bl	8004730 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <status_motor+0x104>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fcd1 	bl	8004730 <GPIO_writePin>
		flag_motor = 0;
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <status_motor+0x108>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	2000038c 	.word	0x2000038c
 8002da0:	20000310 	.word	0x20000310
 8002da4:	2000047c 	.word	0x2000047c
 8002da8:	200003e8 	.word	0x200003e8

08002dac <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	6139      	str	r1, [r7, #16]
 8002db6:	ed87 0a03 	vstr	s0, [r7, #12]
 8002dba:	edc7 0a02 	vstr	s1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	//updateFrequencyTimer(&handler_TIMER_Sampling, firth);
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <config_motor+0x70>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <config_motor+0x74>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <config_motor+0x70>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <config_motor+0x74>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <config_motor+0x78>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 8002de0:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <config_motor+0x7c>)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <config_motor+0x80>)
 8002dec:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <config_motor+0x80>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	4619      	mov	r1, r3
 8002df4:	480e      	ldr	r0, [pc, #56]	; (8002e30 <config_motor+0x84>)
 8002df6:	f000 fa79 	bl	80032ec <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 8002dfa:	ed97 0a02 	vldr	s0, [r7, #8]
 8002dfe:	4807      	ldr	r0, [pc, #28]	; (8002e1c <config_motor+0x70>)
 8002e00:	f7fe fd24 	bl	800184c <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8002e04:	ed97 0a03 	vldr	s0, [r7, #12]
 8002e08:	4805      	ldr	r0, [pc, #20]	; (8002e20 <config_motor+0x74>)
 8002e0a:	f7fe fd1f 	bl	800184c <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <config_motor+0x88>)
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	7013      	strb	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000310 	.word	0x20000310
 8002e20:	2000038c 	.word	0x2000038c
 8002e24:	2000047e 	.word	0x2000047e
 8002e28:	000186a0 	.word	0x000186a0
 8002e2c:	20000002 	.word	0x20000002
 8002e30:	200003d8 	.word	0x200003d8
 8002e34:	2000047c 	.word	0x2000047c

08002e38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e38:	480d      	ldr	r0, [pc, #52]	; (8002e70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e3c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e42:	490d      	ldr	r1, [pc, #52]	; (8002e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <LoopForever+0xe>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <LoopForever+0x16>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e66:	f003 f80d 	bl	8005e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e6a:	f7fe fd35 	bl	80018d8 <main>

08002e6e <LoopForever>:

LoopForever:
    b LoopForever
 8002e6e:	e7fe      	b.n	8002e6e <LoopForever>
  ldr   r0, =_estack
 8002e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e78:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002e7c:	0800d010 	.word	0x0800d010
  ldr r2, =_sbss
 8002e80:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002e84:	20000d70 	.word	0x20000d70

08002e88 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC_IRQHandler>

08002e8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0
	return 1;
 8002e8e:	2301      	movs	r3, #1
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <_kill>:

int _kill(int pid, int sig)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ea4:	f002 ffe8 	bl	8005e78 <__errno>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2216      	movs	r2, #22
 8002eac:	601a      	str	r2, [r3, #0]
	return -1;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <_exit>:

void _exit (int status)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ffe7 	bl	8002e9a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ecc:	e7fe      	b.n	8002ecc <_exit+0x12>

08002ece <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	e00a      	b.n	8002ef6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ee0:	f3af 8000 	nop.w
 8002ee4:	4601      	mov	r1, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	60ba      	str	r2, [r7, #8]
 8002eec:	b2ca      	uxtb	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	dbf0      	blt.n	8002ee0 <_read+0x12>
	}

return len;
 8002efe:	687b      	ldr	r3, [r7, #4]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e009      	b.n	8002f2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	60ba      	str	r2, [r7, #8]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	dbf1      	blt.n	8002f1a <_write+0x12>
	}
	return len;
 8002f36:	687b      	ldr	r3, [r7, #4]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_close>:

int _close(int file)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	return -1;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f68:	605a      	str	r2, [r3, #4]
	return 0;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_isatty>:

int _isatty(int file)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	return 1;
 8002f80:	2301      	movs	r3, #1
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
	return 0;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb0:	4a14      	ldr	r2, [pc, #80]	; (8003004 <_sbrk+0x5c>)
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <_sbrk+0x60>)
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc4:	4b11      	ldr	r3, [pc, #68]	; (800300c <_sbrk+0x64>)
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <_sbrk+0x68>)
 8002fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <_sbrk+0x64>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d207      	bcs.n	8002fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fd8:	f002 ff4e 	bl	8005e78 <__errno>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	220c      	movs	r2, #12
 8002fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	e009      	b.n	8002ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <_sbrk+0x64>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	4a05      	ldr	r2, [pc, #20]	; (800300c <_sbrk+0x64>)
 8002ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20020000 	.word	0x20020000
 8003008:	00000400 	.word	0x00000400
 800300c:	200004e4 	.word	0x200004e4
 8003010:	20000d70 	.word	0x20000d70

08003014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db0b      	blt.n	800303e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4907      	ldr	r1, [pc, #28]	; (800304c <__NVIC_EnableIRQ+0x38>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000e100 	.word	0xe000e100

08003050 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d10a      	bne.n	8003078 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003062:	4b62      	ldr	r3, [pc, #392]	; (80031ec <BasicTimer_Config+0x19c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a61      	ldr	r2, [pc, #388]	; (80031ec <BasicTimer_Config+0x19c>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4a5f      	ldr	r2, [pc, #380]	; (80031f0 <BasicTimer_Config+0x1a0>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e02e      	b.n	80030d6 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a5d      	ldr	r2, [pc, #372]	; (80031f4 <BasicTimer_Config+0x1a4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d10a      	bne.n	8003098 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003082:	4b5a      	ldr	r3, [pc, #360]	; (80031ec <BasicTimer_Config+0x19c>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a59      	ldr	r2, [pc, #356]	; (80031ec <BasicTimer_Config+0x19c>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	4a59      	ldr	r2, [pc, #356]	; (80031f8 <BasicTimer_Config+0x1a8>)
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01e      	b.n	80030d6 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a57      	ldr	r2, [pc, #348]	; (80031fc <BasicTimer_Config+0x1ac>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d10a      	bne.n	80030b8 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80030a2:	4b52      	ldr	r3, [pc, #328]	; (80031ec <BasicTimer_Config+0x19c>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	4a51      	ldr	r2, [pc, #324]	; (80031ec <BasicTimer_Config+0x19c>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a53      	ldr	r2, [pc, #332]	; (8003200 <BasicTimer_Config+0x1b0>)
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00e      	b.n	80030d6 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4a51      	ldr	r2, [pc, #324]	; (8003204 <BasicTimer_Config+0x1b4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d109      	bne.n	80030d6 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <BasicTimer_Config+0x19c>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4a49      	ldr	r2, [pc, #292]	; (80031ec <BasicTimer_Config+0x19c>)
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4a4d      	ldr	r2, [pc, #308]	; (8003208 <BasicTimer_Config+0x1b8>)
 80030d4:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80030d6:	f001 fdf3 	bl	8004cc0 <getConfigPLL>
 80030da:	4603      	mov	r3, r0
 80030dc:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80030de:	f001 fe0b 	bl	8004cf8 <getClockAPB1>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80030e6:	7bbb      	ldrb	r3, [r7, #14]
 80030e8:	2b31      	cmp	r3, #49	; 0x31
 80030ea:	d903      	bls.n	80030f4 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
 80030f2:	e000      	b.n	80030f6 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80030f4:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	8852      	ldrh	r2, [r2, #2]
 80030fc:	fb02 f303 	mul.w	r3, r2, r3
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d112      	bne.n	8003136 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f022 0210 	bic.w	r2, r2, #16
 800311e:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	3201      	adds	r2, #1
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
 8003134:	e018      	b.n	8003168 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f022 0210 	bic.w	r2, r2, #16
 8003144:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f042 0210 	orr.w	r2, r2, #16
 8003154:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6852      	ldr	r2, [r2, #4]
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003174:	d103      	bne.n	800317e <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8003176:	201c      	movs	r0, #28
 8003178:	f7ff ff4c 	bl	8003014 <__NVIC_EnableIRQ>
 800317c:	e019      	b.n	80031b2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <BasicTimer_Config+0x1a4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d103      	bne.n	8003190 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8003188:	201d      	movs	r0, #29
 800318a:	f7ff ff43 	bl	8003014 <__NVIC_EnableIRQ>
 800318e:	e010      	b.n	80031b2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a19      	ldr	r2, [pc, #100]	; (80031fc <BasicTimer_Config+0x1ac>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d103      	bne.n	80031a2 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800319a:	201e      	movs	r0, #30
 800319c:	f7ff ff3a 	bl	8003014 <__NVIC_EnableIRQ>
 80031a0:	e007      	b.n	80031b2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4a17      	ldr	r2, [pc, #92]	; (8003204 <BasicTimer_Config+0x1b4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d102      	bne.n	80031b2 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 80031ac:	2032      	movs	r0, #50	; 0x32
 80031ae:	f7ff ff31 	bl	8003014 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80031b2:	b662      	cpsie	i
}
 80031b4:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7a1b      	ldrb	r3, [r3, #8]
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f875 	bl	80032ac <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	200004e8 	.word	0x200004e8
 80031f4:	40000400 	.word	0x40000400
 80031f8:	200004ec 	.word	0x200004ec
 80031fc:	40000800 	.word	0x40000800
 8003200:	200004f0 	.word	0x200004f0
 8003204:	40000c00 	.word	0x40000c00
 8003208:	200004f4 	.word	0x200004f4

0800320c <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
	__NOP();
 8003210:	bf00      	nop
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
	__NOP();
 8003220:	bf00      	nop
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <TIM2_IRQHandler+0x1c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	4b04      	ldr	r3, [pc, #16]	; (8003248 <TIM2_IRQHandler+0x1c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0201 	bic.w	r2, r2, #1
 800323e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8003240:	f7fe ffbc 	bl	80021bc <BasicTimer2_Callback>

}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200004e8 	.word	0x200004e8

0800324c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <TIM3_IRQHandler+0x1c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <TIM3_IRQHandler+0x1c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8003260:	f7fe ffb6 	bl	80021d0 <BasicTimer3_Callback>

}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	200004ec 	.word	0x200004ec

0800326c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <TIM4_IRQHandler+0x1c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <TIM4_IRQHandler+0x1c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8003280:	f7ff ffc4 	bl	800320c <BasicTimer4_Callback>

}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}
 8003288:	200004f0 	.word	0x200004f0

0800328c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <TIM5_IRQHandler+0x1c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <TIM5_IRQHandler+0x1c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 80032a0:	f7ff ffbc 	bl	800321c <BasicTimer5_Callback>

}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	200004f4 	.word	0x200004f4

080032ac <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 80032ce:	e007      	b.n	80032e0 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	60da      	str	r2, [r3, #12]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 80032f8:	887a      	ldrh	r2, [r7, #2]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6852      	ldr	r2, [r2, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <__NVIC_EnableIRQ>:
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6818      	ldr	r0, [r3, #0]
 8003364:	2300      	movs	r3, #0
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	2300      	movs	r3, #0
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2301      	movs	r3, #1
 800336e:	2200      	movs	r2, #0
 8003370:	2100      	movs	r1, #0
 8003372:	f001 f891 	bl	8004498 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f001 f8ae 	bl	80044dc <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8003380:	4b97      	ldr	r3, [pc, #604]	; (80035e0 <extInt_Config+0x288>)
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	4a96      	ldr	r2, [pc, #600]	; (80035e0 <extInt_Config+0x288>)
 8003386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338a:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b0f      	cmp	r3, #15
 8003394:	f200 85cf 	bhi.w	8003f36 <extInt_Config+0xbde>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <extInt_Config+0x48>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033e1 	.word	0x080033e1
 80033a4:	08003497 	.word	0x08003497
 80033a8:	0800354d 	.word	0x0800354d
 80033ac:	08003623 	.word	0x08003623
 80033b0:	080036d9 	.word	0x080036d9
 80033b4:	08003787 	.word	0x08003787
 80033b8:	0800384d 	.word	0x0800384d
 80033bc:	080038f5 	.word	0x080038f5
 80033c0:	0800399d 	.word	0x0800399d
 80033c4:	08003a45 	.word	0x08003a45
 80033c8:	08003b0b 	.word	0x08003b0b
 80033cc:	08003bb3 	.word	0x08003bb3
 80033d0:	08003c5b 	.word	0x08003c5b
 80033d4:	08003d21 	.word	0x08003d21
 80033d8:	08003dc9 	.word	0x08003dc9
 80033dc:	08003e71 	.word	0x08003e71
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80033e0:	4b80      	ldr	r3, [pc, #512]	; (80035e4 <extInt_Config+0x28c>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a7f      	ldr	r2, [pc, #508]	; (80035e4 <extInt_Config+0x28c>)
 80033e6:	f023 030f 	bic.w	r3, r3, #15
 80033ea:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4a7d      	ldr	r2, [pc, #500]	; (80035e8 <extInt_Config+0x290>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d105      	bne.n	8003404 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80033f8:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <extInt_Config+0x28c>)
 80033fa:	4a7a      	ldr	r2, [pc, #488]	; (80035e4 <extInt_Config+0x28c>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003400:	f000 bd9b 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	4a78      	ldr	r2, [pc, #480]	; (80035ec <extInt_Config+0x294>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d107      	bne.n	8003420 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8003410:	4b74      	ldr	r3, [pc, #464]	; (80035e4 <extInt_Config+0x28c>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a73      	ldr	r2, [pc, #460]	; (80035e4 <extInt_Config+0x28c>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6093      	str	r3, [r2, #8]
		break;
 800341c:	f000 bd8d 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4a72      	ldr	r2, [pc, #456]	; (80035f0 <extInt_Config+0x298>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d107      	bne.n	800343c <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800342c:	4b6d      	ldr	r3, [pc, #436]	; (80035e4 <extInt_Config+0x28c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a6c      	ldr	r2, [pc, #432]	; (80035e4 <extInt_Config+0x28c>)
 8003432:	f043 0302 	orr.w	r3, r3, #2
 8003436:	6093      	str	r3, [r2, #8]
		break;
 8003438:	f000 bd7f 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	4a6c      	ldr	r2, [pc, #432]	; (80035f4 <extInt_Config+0x29c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d107      	bne.n	8003458 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8003448:	4b66      	ldr	r3, [pc, #408]	; (80035e4 <extInt_Config+0x28c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a65      	ldr	r2, [pc, #404]	; (80035e4 <extInt_Config+0x28c>)
 800344e:	f043 0303 	orr.w	r3, r3, #3
 8003452:	6093      	str	r3, [r2, #8]
		break;
 8003454:	f000 bd71 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a66      	ldr	r2, [pc, #408]	; (80035f8 <extInt_Config+0x2a0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d107      	bne.n	8003474 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8003464:	4b5f      	ldr	r3, [pc, #380]	; (80035e4 <extInt_Config+0x28c>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a5e      	ldr	r2, [pc, #376]	; (80035e4 <extInt_Config+0x28c>)
 800346a:	f043 0304 	orr.w	r3, r3, #4
 800346e:	6093      	str	r3, [r2, #8]
		break;
 8003470:	f000 bd63 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4a60      	ldr	r2, [pc, #384]	; (80035fc <extInt_Config+0x2a4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d107      	bne.n	8003490 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8003480:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <extInt_Config+0x28c>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a57      	ldr	r2, [pc, #348]	; (80035e4 <extInt_Config+0x28c>)
 8003486:	f043 0307 	orr.w	r3, r3, #7
 800348a:	6093      	str	r3, [r2, #8]
		break;
 800348c:	f000 bd55 	b.w	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003490:	bf00      	nop
		break;
 8003492:	f000 bd52 	b.w	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8003496:	4b53      	ldr	r3, [pc, #332]	; (80035e4 <extInt_Config+0x28c>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	4a52      	ldr	r2, [pc, #328]	; (80035e4 <extInt_Config+0x28c>)
 800349c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a0:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a4f      	ldr	r2, [pc, #316]	; (80035e8 <extInt_Config+0x290>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d105      	bne.n	80034ba <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80034ae:	4b4d      	ldr	r3, [pc, #308]	; (80035e4 <extInt_Config+0x28c>)
 80034b0:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <extInt_Config+0x28c>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80034b6:	f000 bd40 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <extInt_Config+0x294>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d107      	bne.n	80034d6 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80034c6:	4b47      	ldr	r3, [pc, #284]	; (80035e4 <extInt_Config+0x28c>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	4a46      	ldr	r2, [pc, #280]	; (80035e4 <extInt_Config+0x28c>)
 80034cc:	f043 0310 	orr.w	r3, r3, #16
 80034d0:	6093      	str	r3, [r2, #8]
		break;
 80034d2:	f000 bd32 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a44      	ldr	r2, [pc, #272]	; (80035f0 <extInt_Config+0x298>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d107      	bne.n	80034f2 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80034e2:	4b40      	ldr	r3, [pc, #256]	; (80035e4 <extInt_Config+0x28c>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4a3f      	ldr	r2, [pc, #252]	; (80035e4 <extInt_Config+0x28c>)
 80034e8:	f043 0320 	orr.w	r3, r3, #32
 80034ec:	6093      	str	r3, [r2, #8]
		break;
 80034ee:	f000 bd24 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	4a3e      	ldr	r2, [pc, #248]	; (80035f4 <extInt_Config+0x29c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d107      	bne.n	800350e <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80034fe:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <extInt_Config+0x28c>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <extInt_Config+0x28c>)
 8003504:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003508:	6093      	str	r3, [r2, #8]
		break;
 800350a:	f000 bd16 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a38      	ldr	r2, [pc, #224]	; (80035f8 <extInt_Config+0x2a0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d107      	bne.n	800352a <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 800351a:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <extInt_Config+0x28c>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	4a31      	ldr	r2, [pc, #196]	; (80035e4 <extInt_Config+0x28c>)
 8003520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003524:	6093      	str	r3, [r2, #8]
		break;
 8003526:	f000 bd08 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a32      	ldr	r2, [pc, #200]	; (80035fc <extInt_Config+0x2a4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d107      	bne.n	8003546 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8003536:	4b2b      	ldr	r3, [pc, #172]	; (80035e4 <extInt_Config+0x28c>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4a2a      	ldr	r2, [pc, #168]	; (80035e4 <extInt_Config+0x28c>)
 800353c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003540:	6093      	str	r3, [r2, #8]
		break;
 8003542:	f000 bcfa 	b.w	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003546:	bf00      	nop
		break;
 8003548:	f000 bcf7 	b.w	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <extInt_Config+0x28c>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <extInt_Config+0x28c>)
 8003552:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003556:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <extInt_Config+0x290>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d105      	bne.n	8003570 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8003564:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <extInt_Config+0x28c>)
 8003566:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <extInt_Config+0x28c>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800356c:	f000 bce5 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4a1d      	ldr	r2, [pc, #116]	; (80035ec <extInt_Config+0x294>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d107      	bne.n	800358c <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <extInt_Config+0x28c>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <extInt_Config+0x28c>)
 8003582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003586:	6093      	str	r3, [r2, #8]
		break;
 8003588:	f000 bcd7 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <extInt_Config+0x298>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d107      	bne.n	80035a8 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <extInt_Config+0x28c>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a11      	ldr	r2, [pc, #68]	; (80035e4 <extInt_Config+0x28c>)
 800359e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a2:	6093      	str	r3, [r2, #8]
		break;
 80035a4:	f000 bcc9 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <extInt_Config+0x29c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d107      	bne.n	80035c4 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <extInt_Config+0x28c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	; (80035e4 <extInt_Config+0x28c>)
 80035ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80035be:	6093      	str	r3, [r2, #8]
		break;
 80035c0:	f000 bcbb 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <extInt_Config+0x2a0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d117      	bne.n	8003600 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <extInt_Config+0x28c>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <extInt_Config+0x28c>)
 80035d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035da:	6093      	str	r3, [r2, #8]
		break;
 80035dc:	f000 bcad 	b.w	8003f3a <extInt_Config+0xbe2>
 80035e0:	40023800 	.word	0x40023800
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40020000 	.word	0x40020000
 80035ec:	40020400 	.word	0x40020400
 80035f0:	40020800 	.word	0x40020800
 80035f4:	40020c00 	.word	0x40020c00
 80035f8:	40021000 	.word	0x40021000
 80035fc:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4a8a      	ldr	r2, [pc, #552]	; (8003830 <extInt_Config+0x4d8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d107      	bne.n	800361c <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 800360c:	4b89      	ldr	r3, [pc, #548]	; (8003834 <extInt_Config+0x4dc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a88      	ldr	r2, [pc, #544]	; (8003834 <extInt_Config+0x4dc>)
 8003612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003616:	6093      	str	r3, [r2, #8]
		break;
 8003618:	f000 bc8f 	b.w	8003f3a <extInt_Config+0xbe2>
			__NOP();
 800361c:	bf00      	nop
		break;
 800361e:	f000 bc8c 	b.w	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8003622:	4b84      	ldr	r3, [pc, #528]	; (8003834 <extInt_Config+0x4dc>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4a83      	ldr	r2, [pc, #524]	; (8003834 <extInt_Config+0x4dc>)
 8003628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800362c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	4a80      	ldr	r2, [pc, #512]	; (8003838 <extInt_Config+0x4e0>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d105      	bne.n	8003646 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800363a:	4b7e      	ldr	r3, [pc, #504]	; (8003834 <extInt_Config+0x4dc>)
 800363c:	4a7d      	ldr	r2, [pc, #500]	; (8003834 <extInt_Config+0x4dc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003642:	f000 bc7a 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a7b      	ldr	r2, [pc, #492]	; (800383c <extInt_Config+0x4e4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d107      	bne.n	8003662 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8003652:	4b78      	ldr	r3, [pc, #480]	; (8003834 <extInt_Config+0x4dc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4a77      	ldr	r2, [pc, #476]	; (8003834 <extInt_Config+0x4dc>)
 8003658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800365c:	6093      	str	r3, [r2, #8]
		break;
 800365e:	f000 bc6c 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a75      	ldr	r2, [pc, #468]	; (8003840 <extInt_Config+0x4e8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d107      	bne.n	800367e <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 800366e:	4b71      	ldr	r3, [pc, #452]	; (8003834 <extInt_Config+0x4dc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4a70      	ldr	r2, [pc, #448]	; (8003834 <extInt_Config+0x4dc>)
 8003674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003678:	6093      	str	r3, [r2, #8]
		break;
 800367a:	f000 bc5e 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4a6f      	ldr	r2, [pc, #444]	; (8003844 <extInt_Config+0x4ec>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d107      	bne.n	800369a <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800368a:	4b6a      	ldr	r3, [pc, #424]	; (8003834 <extInt_Config+0x4dc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4a69      	ldr	r2, [pc, #420]	; (8003834 <extInt_Config+0x4dc>)
 8003690:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003694:	6093      	str	r3, [r2, #8]
		break;
 8003696:	f000 bc50 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a69      	ldr	r2, [pc, #420]	; (8003848 <extInt_Config+0x4f0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d107      	bne.n	80036b6 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <extInt_Config+0x4dc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4a62      	ldr	r2, [pc, #392]	; (8003834 <extInt_Config+0x4dc>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b0:	6093      	str	r3, [r2, #8]
		break;
 80036b2:	f000 bc42 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a5c      	ldr	r2, [pc, #368]	; (8003830 <extInt_Config+0x4d8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d107      	bne.n	80036d2 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80036c2:	4b5c      	ldr	r3, [pc, #368]	; (8003834 <extInt_Config+0x4dc>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	4a5b      	ldr	r2, [pc, #364]	; (8003834 <extInt_Config+0x4dc>)
 80036c8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80036cc:	6093      	str	r3, [r2, #8]
		break;
 80036ce:	f000 bc34 	b.w	8003f3a <extInt_Config+0xbe2>
			__NOP();
 80036d2:	bf00      	nop
		break;
 80036d4:	f000 bc31 	b.w	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80036d8:	4b56      	ldr	r3, [pc, #344]	; (8003834 <extInt_Config+0x4dc>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a55      	ldr	r2, [pc, #340]	; (8003834 <extInt_Config+0x4dc>)
 80036de:	f023 030f 	bic.w	r3, r3, #15
 80036e2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4a53      	ldr	r2, [pc, #332]	; (8003838 <extInt_Config+0x4e0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d105      	bne.n	80036fc <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80036f0:	4b50      	ldr	r3, [pc, #320]	; (8003834 <extInt_Config+0x4dc>)
 80036f2:	4a50      	ldr	r2, [pc, #320]	; (8003834 <extInt_Config+0x4dc>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80036f8:	f000 bc1f 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4a4e      	ldr	r2, [pc, #312]	; (800383c <extInt_Config+0x4e4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d107      	bne.n	8003718 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8003708:	4b4a      	ldr	r3, [pc, #296]	; (8003834 <extInt_Config+0x4dc>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a49      	ldr	r2, [pc, #292]	; (8003834 <extInt_Config+0x4dc>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	60d3      	str	r3, [r2, #12]
		break;
 8003714:	f000 bc11 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4a48      	ldr	r2, [pc, #288]	; (8003840 <extInt_Config+0x4e8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d107      	bne.n	8003734 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8003724:	4b43      	ldr	r3, [pc, #268]	; (8003834 <extInt_Config+0x4dc>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a42      	ldr	r2, [pc, #264]	; (8003834 <extInt_Config+0x4dc>)
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	60d3      	str	r3, [r2, #12]
		break;
 8003730:	f000 bc03 	b.w	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4a42      	ldr	r2, [pc, #264]	; (8003844 <extInt_Config+0x4ec>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d106      	bne.n	800374e <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003740:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <extInt_Config+0x4dc>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a3b      	ldr	r2, [pc, #236]	; (8003834 <extInt_Config+0x4dc>)
 8003746:	f043 0303 	orr.w	r3, r3, #3
 800374a:	60d3      	str	r3, [r2, #12]
		break;
 800374c:	e3f5      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <extInt_Config+0x4f0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d106      	bne.n	8003768 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800375a:	4b36      	ldr	r3, [pc, #216]	; (8003834 <extInt_Config+0x4dc>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4a35      	ldr	r2, [pc, #212]	; (8003834 <extInt_Config+0x4dc>)
 8003760:	f043 0304 	orr.w	r3, r3, #4
 8003764:	60d3      	str	r3, [r2, #12]
		break;
 8003766:	e3e8      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4a30      	ldr	r2, [pc, #192]	; (8003830 <extInt_Config+0x4d8>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d106      	bne.n	8003782 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8003774:	4b2f      	ldr	r3, [pc, #188]	; (8003834 <extInt_Config+0x4dc>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <extInt_Config+0x4dc>)
 800377a:	f043 0307 	orr.w	r3, r3, #7
 800377e:	60d3      	str	r3, [r2, #12]
		break;
 8003780:	e3db      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003782:	bf00      	nop
		break;
 8003784:	e3d9      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8003786:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <extInt_Config+0x4dc>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	4a2a      	ldr	r2, [pc, #168]	; (8003834 <extInt_Config+0x4dc>)
 800378c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003790:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a27      	ldr	r2, [pc, #156]	; (8003838 <extInt_Config+0x4e0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d104      	bne.n	80037a8 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 800379e:	4b25      	ldr	r3, [pc, #148]	; (8003834 <extInt_Config+0x4dc>)
 80037a0:	4a24      	ldr	r2, [pc, #144]	; (8003834 <extInt_Config+0x4dc>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80037a6:	e3c8      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4a23      	ldr	r2, [pc, #140]	; (800383c <extInt_Config+0x4e4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d106      	bne.n	80037c2 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80037b4:	4b1f      	ldr	r3, [pc, #124]	; (8003834 <extInt_Config+0x4dc>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a1e      	ldr	r2, [pc, #120]	; (8003834 <extInt_Config+0x4dc>)
 80037ba:	f043 0310 	orr.w	r3, r3, #16
 80037be:	60d3      	str	r3, [r2, #12]
		break;
 80037c0:	e3bb      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4a1d      	ldr	r2, [pc, #116]	; (8003840 <extInt_Config+0x4e8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d106      	bne.n	80037dc <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80037ce:	4b19      	ldr	r3, [pc, #100]	; (8003834 <extInt_Config+0x4dc>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <extInt_Config+0x4dc>)
 80037d4:	f043 0320 	orr.w	r3, r3, #32
 80037d8:	60d3      	str	r3, [r2, #12]
		break;
 80037da:	e3ae      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <extInt_Config+0x4ec>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d106      	bne.n	80037f6 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <extInt_Config+0x4dc>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a11      	ldr	r2, [pc, #68]	; (8003834 <extInt_Config+0x4dc>)
 80037ee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80037f2:	60d3      	str	r3, [r2, #12]
		break;
 80037f4:	e3a1      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a12      	ldr	r2, [pc, #72]	; (8003848 <extInt_Config+0x4f0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d106      	bne.n	8003810 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <extInt_Config+0x4dc>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <extInt_Config+0x4dc>)
 8003808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800380c:	60d3      	str	r3, [r2, #12]
		break;
 800380e:	e394      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4a06      	ldr	r2, [pc, #24]	; (8003830 <extInt_Config+0x4d8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d106      	bne.n	800382a <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <extInt_Config+0x4dc>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <extInt_Config+0x4dc>)
 8003822:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003826:	60d3      	str	r3, [r2, #12]
		break;
 8003828:	e387      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 800382a:	bf00      	nop
		break;
 800382c:	e385      	b.n	8003f3a <extInt_Config+0xbe2>
 800382e:	bf00      	nop
 8003830:	40021c00 	.word	0x40021c00
 8003834:	40013800 	.word	0x40013800
 8003838:	40020000 	.word	0x40020000
 800383c:	40020400 	.word	0x40020400
 8003840:	40020800 	.word	0x40020800
 8003844:	40020c00 	.word	0x40020c00
 8003848:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 800384c:	4b86      	ldr	r3, [pc, #536]	; (8003a68 <extInt_Config+0x710>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a85      	ldr	r2, [pc, #532]	; (8003a68 <extInt_Config+0x710>)
 8003852:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003856:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a83      	ldr	r2, [pc, #524]	; (8003a6c <extInt_Config+0x714>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d104      	bne.n	800386e <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8003864:	4b80      	ldr	r3, [pc, #512]	; (8003a68 <extInt_Config+0x710>)
 8003866:	4a80      	ldr	r2, [pc, #512]	; (8003a68 <extInt_Config+0x710>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800386c:	e365      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a7e      	ldr	r2, [pc, #504]	; (8003a70 <extInt_Config+0x718>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d106      	bne.n	8003888 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800387a:	4b7b      	ldr	r3, [pc, #492]	; (8003a68 <extInt_Config+0x710>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4a7a      	ldr	r2, [pc, #488]	; (8003a68 <extInt_Config+0x710>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	60d3      	str	r3, [r2, #12]
		break;
 8003886:	e358      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	4a79      	ldr	r2, [pc, #484]	; (8003a74 <extInt_Config+0x71c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d106      	bne.n	80038a2 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003894:	4b74      	ldr	r3, [pc, #464]	; (8003a68 <extInt_Config+0x710>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	4a73      	ldr	r2, [pc, #460]	; (8003a68 <extInt_Config+0x710>)
 800389a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389e:	60d3      	str	r3, [r2, #12]
		break;
 80038a0:	e34b      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a73      	ldr	r2, [pc, #460]	; (8003a78 <extInt_Config+0x720>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d106      	bne.n	80038bc <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 80038ae:	4b6e      	ldr	r3, [pc, #440]	; (8003a68 <extInt_Config+0x710>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	4a6d      	ldr	r2, [pc, #436]	; (8003a68 <extInt_Config+0x710>)
 80038b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80038b8:	60d3      	str	r3, [r2, #12]
		break;
 80038ba:	e33e      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4a6e      	ldr	r2, [pc, #440]	; (8003a7c <extInt_Config+0x724>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d106      	bne.n	80038d6 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80038c8:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <extInt_Config+0x710>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a66      	ldr	r2, [pc, #408]	; (8003a68 <extInt_Config+0x710>)
 80038ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d2:	60d3      	str	r3, [r2, #12]
		break;
 80038d4:	e331      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a68      	ldr	r2, [pc, #416]	; (8003a80 <extInt_Config+0x728>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d106      	bne.n	80038f0 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80038e2:	4b61      	ldr	r3, [pc, #388]	; (8003a68 <extInt_Config+0x710>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	4a60      	ldr	r2, [pc, #384]	; (8003a68 <extInt_Config+0x710>)
 80038e8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ec:	60d3      	str	r3, [r2, #12]
		break;
 80038ee:	e324      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 80038f0:	bf00      	nop
		break;
 80038f2:	e322      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 80038f4:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <extInt_Config+0x710>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a5b      	ldr	r2, [pc, #364]	; (8003a68 <extInt_Config+0x710>)
 80038fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038fe:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4a59      	ldr	r2, [pc, #356]	; (8003a6c <extInt_Config+0x714>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d104      	bne.n	8003916 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 800390c:	4b56      	ldr	r3, [pc, #344]	; (8003a68 <extInt_Config+0x710>)
 800390e:	4a56      	ldr	r2, [pc, #344]	; (8003a68 <extInt_Config+0x710>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003914:	e311      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a54      	ldr	r2, [pc, #336]	; (8003a70 <extInt_Config+0x718>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d106      	bne.n	8003930 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8003922:	4b51      	ldr	r3, [pc, #324]	; (8003a68 <extInt_Config+0x710>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <extInt_Config+0x710>)
 8003928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800392c:	60d3      	str	r3, [r2, #12]
		break;
 800392e:	e304      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4a4f      	ldr	r2, [pc, #316]	; (8003a74 <extInt_Config+0x71c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d106      	bne.n	800394a <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <extInt_Config+0x710>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a49      	ldr	r2, [pc, #292]	; (8003a68 <extInt_Config+0x710>)
 8003942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003946:	60d3      	str	r3, [r2, #12]
		break;
 8003948:	e2f7      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a49      	ldr	r2, [pc, #292]	; (8003a78 <extInt_Config+0x720>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d106      	bne.n	8003964 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8003956:	4b44      	ldr	r3, [pc, #272]	; (8003a68 <extInt_Config+0x710>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4a43      	ldr	r2, [pc, #268]	; (8003a68 <extInt_Config+0x710>)
 800395c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003960:	60d3      	str	r3, [r2, #12]
		break;
 8003962:	e2ea      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4a44      	ldr	r2, [pc, #272]	; (8003a7c <extInt_Config+0x724>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d106      	bne.n	800397e <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003970:	4b3d      	ldr	r3, [pc, #244]	; (8003a68 <extInt_Config+0x710>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a3c      	ldr	r2, [pc, #240]	; (8003a68 <extInt_Config+0x710>)
 8003976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800397a:	60d3      	str	r3, [r2, #12]
		break;
 800397c:	e2dd      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a3e      	ldr	r2, [pc, #248]	; (8003a80 <extInt_Config+0x728>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d106      	bne.n	8003998 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <extInt_Config+0x710>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4a36      	ldr	r2, [pc, #216]	; (8003a68 <extInt_Config+0x710>)
 8003990:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003994:	60d3      	str	r3, [r2, #12]
		break;
 8003996:	e2d0      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003998:	bf00      	nop
		break;
 800399a:	e2ce      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 800399c:	4b32      	ldr	r3, [pc, #200]	; (8003a68 <extInt_Config+0x710>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	4a31      	ldr	r2, [pc, #196]	; (8003a68 <extInt_Config+0x710>)
 80039a2:	f023 030f 	bic.w	r3, r3, #15
 80039a6:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <extInt_Config+0x714>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d104      	bne.n	80039be <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80039b4:	4b2c      	ldr	r3, [pc, #176]	; (8003a68 <extInt_Config+0x710>)
 80039b6:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <extInt_Config+0x710>)
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80039bc:	e2bd      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a2a      	ldr	r2, [pc, #168]	; (8003a70 <extInt_Config+0x718>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d106      	bne.n	80039d8 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <extInt_Config+0x710>)
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	4a26      	ldr	r2, [pc, #152]	; (8003a68 <extInt_Config+0x710>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6113      	str	r3, [r2, #16]
		break;
 80039d6:	e2b0      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <extInt_Config+0x71c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d106      	bne.n	80039f2 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80039e4:	4b20      	ldr	r3, [pc, #128]	; (8003a68 <extInt_Config+0x710>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <extInt_Config+0x710>)
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	6113      	str	r3, [r2, #16]
		break;
 80039f0:	e2a3      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <extInt_Config+0x720>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d106      	bne.n	8003a0c <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80039fe:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <extInt_Config+0x710>)
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <extInt_Config+0x710>)
 8003a04:	f043 0303 	orr.w	r3, r3, #3
 8003a08:	6113      	str	r3, [r2, #16]
		break;
 8003a0a:	e296      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	4a1a      	ldr	r2, [pc, #104]	; (8003a7c <extInt_Config+0x724>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d106      	bne.n	8003a26 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8003a18:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <extInt_Config+0x710>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <extInt_Config+0x710>)
 8003a1e:	f043 0304 	orr.w	r3, r3, #4
 8003a22:	6113      	str	r3, [r2, #16]
		break;
 8003a24:	e289      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <extInt_Config+0x728>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d106      	bne.n	8003a40 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <extInt_Config+0x710>)
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <extInt_Config+0x710>)
 8003a38:	f043 0307 	orr.w	r3, r3, #7
 8003a3c:	6113      	str	r3, [r2, #16]
		break;
 8003a3e:	e27c      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003a40:	bf00      	nop
		break;
 8003a42:	e27a      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <extInt_Config+0x710>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <extInt_Config+0x710>)
 8003a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a4e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <extInt_Config+0x714>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d113      	bne.n	8003a84 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8003a5c:	4b02      	ldr	r3, [pc, #8]	; (8003a68 <extInt_Config+0x710>)
 8003a5e:	4a02      	ldr	r2, [pc, #8]	; (8003a68 <extInt_Config+0x710>)
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003a64:	e269      	b.n	8003f3a <extInt_Config+0xbe2>
 8003a66:	bf00      	nop
 8003a68:	40013800 	.word	0x40013800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	40020400 	.word	0x40020400
 8003a74:	40020800 	.word	0x40020800
 8003a78:	40020c00 	.word	0x40020c00
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4a83      	ldr	r2, [pc, #524]	; (8003c98 <extInt_Config+0x940>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d106      	bne.n	8003a9e <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003a90:	4b82      	ldr	r3, [pc, #520]	; (8003c9c <extInt_Config+0x944>)
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	4a81      	ldr	r2, [pc, #516]	; (8003c9c <extInt_Config+0x944>)
 8003a96:	f043 0310 	orr.w	r3, r3, #16
 8003a9a:	6113      	str	r3, [r2, #16]
		break;
 8003a9c:	e24d      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a7e      	ldr	r2, [pc, #504]	; (8003ca0 <extInt_Config+0x948>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d106      	bne.n	8003ab8 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8003aaa:	4b7c      	ldr	r3, [pc, #496]	; (8003c9c <extInt_Config+0x944>)
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	4a7b      	ldr	r2, [pc, #492]	; (8003c9c <extInt_Config+0x944>)
 8003ab0:	f043 0320 	orr.w	r3, r3, #32
 8003ab4:	6113      	str	r3, [r2, #16]
		break;
 8003ab6:	e240      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4a79      	ldr	r2, [pc, #484]	; (8003ca4 <extInt_Config+0x94c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d106      	bne.n	8003ad2 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003ac4:	4b75      	ldr	r3, [pc, #468]	; (8003c9c <extInt_Config+0x944>)
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	4a74      	ldr	r2, [pc, #464]	; (8003c9c <extInt_Config+0x944>)
 8003aca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003ace:	6113      	str	r3, [r2, #16]
		break;
 8003ad0:	e233      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a73      	ldr	r2, [pc, #460]	; (8003ca8 <extInt_Config+0x950>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d106      	bne.n	8003aec <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8003ade:	4b6f      	ldr	r3, [pc, #444]	; (8003c9c <extInt_Config+0x944>)
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	4a6e      	ldr	r2, [pc, #440]	; (8003c9c <extInt_Config+0x944>)
 8003ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ae8:	6113      	str	r3, [r2, #16]
		break;
 8003aea:	e226      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4a6e      	ldr	r2, [pc, #440]	; (8003cac <extInt_Config+0x954>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d106      	bne.n	8003b06 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8003af8:	4b68      	ldr	r3, [pc, #416]	; (8003c9c <extInt_Config+0x944>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	4a67      	ldr	r2, [pc, #412]	; (8003c9c <extInt_Config+0x944>)
 8003afe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003b02:	6113      	str	r3, [r2, #16]
		break;
 8003b04:	e219      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003b06:	bf00      	nop
		break;
 8003b08:	e217      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 8003b0a:	4b64      	ldr	r3, [pc, #400]	; (8003c9c <extInt_Config+0x944>)
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	4a63      	ldr	r2, [pc, #396]	; (8003c9c <extInt_Config+0x944>)
 8003b10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b14:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a64      	ldr	r2, [pc, #400]	; (8003cb0 <extInt_Config+0x958>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d104      	bne.n	8003b2c <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003b22:	4b5e      	ldr	r3, [pc, #376]	; (8003c9c <extInt_Config+0x944>)
 8003b24:	4a5d      	ldr	r2, [pc, #372]	; (8003c9c <extInt_Config+0x944>)
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003b2a:	e206      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	4a59      	ldr	r2, [pc, #356]	; (8003c98 <extInt_Config+0x940>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d106      	bne.n	8003b46 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003b38:	4b58      	ldr	r3, [pc, #352]	; (8003c9c <extInt_Config+0x944>)
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	4a57      	ldr	r2, [pc, #348]	; (8003c9c <extInt_Config+0x944>)
 8003b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b42:	6113      	str	r3, [r2, #16]
		break;
 8003b44:	e1f9      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a54      	ldr	r2, [pc, #336]	; (8003ca0 <extInt_Config+0x948>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d106      	bne.n	8003b60 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003b52:	4b52      	ldr	r3, [pc, #328]	; (8003c9c <extInt_Config+0x944>)
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	4a51      	ldr	r2, [pc, #324]	; (8003c9c <extInt_Config+0x944>)
 8003b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b5c:	6113      	str	r3, [r2, #16]
		break;
 8003b5e:	e1ec      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	4a4f      	ldr	r2, [pc, #316]	; (8003ca4 <extInt_Config+0x94c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d106      	bne.n	8003b7a <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	; (8003c9c <extInt_Config+0x944>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	4a4a      	ldr	r2, [pc, #296]	; (8003c9c <extInt_Config+0x944>)
 8003b72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003b76:	6113      	str	r3, [r2, #16]
		break;
 8003b78:	e1df      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a49      	ldr	r2, [pc, #292]	; (8003ca8 <extInt_Config+0x950>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d106      	bne.n	8003b94 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <extInt_Config+0x944>)
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	4a44      	ldr	r2, [pc, #272]	; (8003c9c <extInt_Config+0x944>)
 8003b8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b90:	6113      	str	r3, [r2, #16]
		break;
 8003b92:	e1d2      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	4a44      	ldr	r2, [pc, #272]	; (8003cac <extInt_Config+0x954>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d106      	bne.n	8003bae <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003ba0:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <extInt_Config+0x944>)
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	4a3d      	ldr	r2, [pc, #244]	; (8003c9c <extInt_Config+0x944>)
 8003ba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003baa:	6113      	str	r3, [r2, #16]
		break;
 8003bac:	e1c5      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003bae:	bf00      	nop
		break;
 8003bb0:	e1c3      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8003bb2:	4b3a      	ldr	r3, [pc, #232]	; (8003c9c <extInt_Config+0x944>)
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	4a39      	ldr	r2, [pc, #228]	; (8003c9c <extInt_Config+0x944>)
 8003bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bbc:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a3a      	ldr	r2, [pc, #232]	; (8003cb0 <extInt_Config+0x958>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d104      	bne.n	8003bd4 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <extInt_Config+0x944>)
 8003bcc:	4a33      	ldr	r2, [pc, #204]	; (8003c9c <extInt_Config+0x944>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003bd2:	e1b2      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	4a2f      	ldr	r2, [pc, #188]	; (8003c98 <extInt_Config+0x940>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d106      	bne.n	8003bee <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8003be0:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <extInt_Config+0x944>)
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	4a2d      	ldr	r2, [pc, #180]	; (8003c9c <extInt_Config+0x944>)
 8003be6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bea:	6113      	str	r3, [r2, #16]
		break;
 8003bec:	e1a5      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <extInt_Config+0x948>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d106      	bne.n	8003c08 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8003bfa:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <extInt_Config+0x944>)
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	4a27      	ldr	r2, [pc, #156]	; (8003c9c <extInt_Config+0x944>)
 8003c00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c04:	6113      	str	r3, [r2, #16]
		break;
 8003c06:	e198      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4a25      	ldr	r2, [pc, #148]	; (8003ca4 <extInt_Config+0x94c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d106      	bne.n	8003c22 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003c14:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <extInt_Config+0x944>)
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <extInt_Config+0x944>)
 8003c1a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003c1e:	6113      	str	r3, [r2, #16]
		break;
 8003c20:	e18b      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <extInt_Config+0x950>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d106      	bne.n	8003c3c <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <extInt_Config+0x944>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <extInt_Config+0x944>)
 8003c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c38:	6113      	str	r3, [r2, #16]
		break;
 8003c3a:	e17e      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <extInt_Config+0x954>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d106      	bne.n	8003c56 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003c48:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <extInt_Config+0x944>)
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	; (8003c9c <extInt_Config+0x944>)
 8003c4e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003c52:	6113      	str	r3, [r2, #16]
		break;
 8003c54:	e171      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003c56:	bf00      	nop
		break;
 8003c58:	e16f      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <extInt_Config+0x944>)
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <extInt_Config+0x944>)
 8003c60:	f023 030f 	bic.w	r3, r3, #15
 8003c64:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <extInt_Config+0x958>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d104      	bne.n	8003c7c <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003c72:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <extInt_Config+0x944>)
 8003c74:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <extInt_Config+0x944>)
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003c7a:	e15e      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <extInt_Config+0x940>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d115      	bne.n	8003cb4 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <extInt_Config+0x944>)
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	4a03      	ldr	r2, [pc, #12]	; (8003c9c <extInt_Config+0x944>)
 8003c8e:	f043 0301 	orr.w	r3, r3, #1
 8003c92:	6153      	str	r3, [r2, #20]
		break;
 8003c94:	e151      	b.n	8003f3a <extInt_Config+0xbe2>
 8003c96:	bf00      	nop
 8003c98:	40020400 	.word	0x40020400
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40020800 	.word	0x40020800
 8003ca4:	40020c00 	.word	0x40020c00
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40021c00 	.word	0x40021c00
 8003cb0:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4a83      	ldr	r2, [pc, #524]	; (8003ec8 <extInt_Config+0xb70>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d106      	bne.n	8003cce <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003cc0:	4b82      	ldr	r3, [pc, #520]	; (8003ecc <extInt_Config+0xb74>)
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	4a81      	ldr	r2, [pc, #516]	; (8003ecc <extInt_Config+0xb74>)
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	6153      	str	r3, [r2, #20]
		break;
 8003ccc:	e135      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a7e      	ldr	r2, [pc, #504]	; (8003ed0 <extInt_Config+0xb78>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d106      	bne.n	8003ce8 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8003cda:	4b7c      	ldr	r3, [pc, #496]	; (8003ecc <extInt_Config+0xb74>)
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	4a7b      	ldr	r2, [pc, #492]	; (8003ecc <extInt_Config+0xb74>)
 8003ce0:	f043 0303 	orr.w	r3, r3, #3
 8003ce4:	6153      	str	r3, [r2, #20]
		break;
 8003ce6:	e128      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4a79      	ldr	r2, [pc, #484]	; (8003ed4 <extInt_Config+0xb7c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d106      	bne.n	8003d02 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8003cf4:	4b75      	ldr	r3, [pc, #468]	; (8003ecc <extInt_Config+0xb74>)
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	4a74      	ldr	r2, [pc, #464]	; (8003ecc <extInt_Config+0xb74>)
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6153      	str	r3, [r2, #20]
		break;
 8003d00:	e11b      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a73      	ldr	r2, [pc, #460]	; (8003ed8 <extInt_Config+0xb80>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d106      	bne.n	8003d1c <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8003d0e:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <extInt_Config+0xb74>)
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <extInt_Config+0xb74>)
 8003d14:	f043 0307 	orr.w	r3, r3, #7
 8003d18:	6153      	str	r3, [r2, #20]
		break;
 8003d1a:	e10e      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003d1c:	bf00      	nop
		break;
 8003d1e:	e10c      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8003d20:	4b6a      	ldr	r3, [pc, #424]	; (8003ecc <extInt_Config+0xb74>)
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	4a69      	ldr	r2, [pc, #420]	; (8003ecc <extInt_Config+0xb74>)
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	4a6a      	ldr	r2, [pc, #424]	; (8003edc <extInt_Config+0xb84>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d104      	bne.n	8003d42 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8003d38:	4b64      	ldr	r3, [pc, #400]	; (8003ecc <extInt_Config+0xb74>)
 8003d3a:	4a64      	ldr	r2, [pc, #400]	; (8003ecc <extInt_Config+0xb74>)
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003d40:	e0fb      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a65      	ldr	r2, [pc, #404]	; (8003ee0 <extInt_Config+0xb88>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d106      	bne.n	8003d5c <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8003d4e:	4b5f      	ldr	r3, [pc, #380]	; (8003ecc <extInt_Config+0xb74>)
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	4a5e      	ldr	r2, [pc, #376]	; (8003ecc <extInt_Config+0xb74>)
 8003d54:	f043 0310 	orr.w	r3, r3, #16
 8003d58:	6153      	str	r3, [r2, #20]
		break;
 8003d5a:	e0ee      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4a59      	ldr	r2, [pc, #356]	; (8003ec8 <extInt_Config+0xb70>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d106      	bne.n	8003d76 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8003d68:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <extInt_Config+0xb74>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	4a57      	ldr	r2, [pc, #348]	; (8003ecc <extInt_Config+0xb74>)
 8003d6e:	f043 0320 	orr.w	r3, r3, #32
 8003d72:	6153      	str	r3, [r2, #20]
		break;
 8003d74:	e0e1      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a54      	ldr	r2, [pc, #336]	; (8003ed0 <extInt_Config+0xb78>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d106      	bne.n	8003d90 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8003d82:	4b52      	ldr	r3, [pc, #328]	; (8003ecc <extInt_Config+0xb74>)
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	4a51      	ldr	r2, [pc, #324]	; (8003ecc <extInt_Config+0xb74>)
 8003d88:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003d8c:	6153      	str	r3, [r2, #20]
		break;
 8003d8e:	e0d4      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4a4f      	ldr	r2, [pc, #316]	; (8003ed4 <extInt_Config+0xb7c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d106      	bne.n	8003daa <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <extInt_Config+0xb74>)
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	4a4a      	ldr	r2, [pc, #296]	; (8003ecc <extInt_Config+0xb74>)
 8003da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da6:	6153      	str	r3, [r2, #20]
		break;
 8003da8:	e0c7      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a49      	ldr	r2, [pc, #292]	; (8003ed8 <extInt_Config+0xb80>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d106      	bne.n	8003dc4 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8003db6:	4b45      	ldr	r3, [pc, #276]	; (8003ecc <extInt_Config+0xb74>)
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4a44      	ldr	r2, [pc, #272]	; (8003ecc <extInt_Config+0xb74>)
 8003dbc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003dc0:	6153      	str	r3, [r2, #20]
		break;
 8003dc2:	e0ba      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003dc4:	bf00      	nop
		break;
 8003dc6:	e0b8      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8003dc8:	4b40      	ldr	r3, [pc, #256]	; (8003ecc <extInt_Config+0xb74>)
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	4a3f      	ldr	r2, [pc, #252]	; (8003ecc <extInt_Config+0xb74>)
 8003dce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003dd2:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4a40      	ldr	r2, [pc, #256]	; (8003edc <extInt_Config+0xb84>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d104      	bne.n	8003dea <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8003de0:	4b3a      	ldr	r3, [pc, #232]	; (8003ecc <extInt_Config+0xb74>)
 8003de2:	4a3a      	ldr	r2, [pc, #232]	; (8003ecc <extInt_Config+0xb74>)
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003de8:	e0a7      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a3b      	ldr	r2, [pc, #236]	; (8003ee0 <extInt_Config+0xb88>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d106      	bne.n	8003e04 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8003df6:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <extInt_Config+0xb74>)
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4a34      	ldr	r2, [pc, #208]	; (8003ecc <extInt_Config+0xb74>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6153      	str	r3, [r2, #20]
		break;
 8003e02:	e09a      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <extInt_Config+0xb70>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d106      	bne.n	8003e1e <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003e10:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <extInt_Config+0xb74>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <extInt_Config+0xb74>)
 8003e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e1a:	6153      	str	r3, [r2, #20]
		break;
 8003e1c:	e08d      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <extInt_Config+0xb78>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d106      	bne.n	8003e38 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8003e2a:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <extInt_Config+0xb74>)
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <extInt_Config+0xb74>)
 8003e30:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003e34:	6153      	str	r3, [r2, #20]
		break;
 8003e36:	e080      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	4a25      	ldr	r2, [pc, #148]	; (8003ed4 <extInt_Config+0xb7c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d106      	bne.n	8003e52 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <extInt_Config+0xb74>)
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	4a20      	ldr	r2, [pc, #128]	; (8003ecc <extInt_Config+0xb74>)
 8003e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4e:	6153      	str	r3, [r2, #20]
		break;
 8003e50:	e073      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <extInt_Config+0xb80>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d106      	bne.n	8003e6c <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <extInt_Config+0xb74>)
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4a1a      	ldr	r2, [pc, #104]	; (8003ecc <extInt_Config+0xb74>)
 8003e64:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e68:	6153      	str	r3, [r2, #20]
		break;
 8003e6a:	e066      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003e6c:	bf00      	nop
		break;
 8003e6e:	e064      	b.n	8003f3a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <extInt_Config+0xb74>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <extInt_Config+0xb74>)
 8003e76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e7a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <extInt_Config+0xb84>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d104      	bne.n	8003e92 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <extInt_Config+0xb74>)
 8003e8a:	4a10      	ldr	r2, [pc, #64]	; (8003ecc <extInt_Config+0xb74>)
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003e90:	e053      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <extInt_Config+0xb88>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d106      	bne.n	8003eac <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <extInt_Config+0xb74>)
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <extInt_Config+0xb74>)
 8003ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ea8:	6153      	str	r3, [r2, #20]
		break;
 8003eaa:	e046      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <extInt_Config+0xb70>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d115      	bne.n	8003ee4 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <extInt_Config+0xb74>)
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <extInt_Config+0xb74>)
 8003ebe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ec2:	6153      	str	r3, [r2, #20]
		break;
 8003ec4:	e039      	b.n	8003f3a <extInt_Config+0xbe2>
 8003ec6:	bf00      	nop
 8003ec8:	40020800 	.word	0x40020800
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40021c00 	.word	0x40021c00
 8003edc:	40020000 	.word	0x40020000
 8003ee0:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	4a9d      	ldr	r2, [pc, #628]	; (8004160 <extInt_Config+0xe08>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d106      	bne.n	8003efe <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8003ef0:	4b9c      	ldr	r3, [pc, #624]	; (8004164 <extInt_Config+0xe0c>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	4a9b      	ldr	r2, [pc, #620]	; (8004164 <extInt_Config+0xe0c>)
 8003ef6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003efa:	6153      	str	r3, [r2, #20]
		break;
 8003efc:	e01d      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a98      	ldr	r2, [pc, #608]	; (8004168 <extInt_Config+0xe10>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d106      	bne.n	8003f18 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8003f0a:	4b96      	ldr	r3, [pc, #600]	; (8004164 <extInt_Config+0xe0c>)
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	4a95      	ldr	r2, [pc, #596]	; (8004164 <extInt_Config+0xe0c>)
 8003f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f14:	6153      	str	r3, [r2, #20]
		break;
 8003f16:	e010      	b.n	8003f3a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	4a93      	ldr	r2, [pc, #588]	; (800416c <extInt_Config+0xe14>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d106      	bne.n	8003f32 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003f24:	4b8f      	ldr	r3, [pc, #572]	; (8004164 <extInt_Config+0xe0c>)
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	4a8e      	ldr	r2, [pc, #568]	; (8004164 <extInt_Config+0xe0c>)
 8003f2a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003f2e:	6153      	str	r3, [r2, #20]
		break;
 8003f30:	e003      	b.n	8003f3a <extInt_Config+0xbe2>
			__NOP();
 8003f32:	bf00      	nop
		break;
 8003f34:	e001      	b.n	8003f3a <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8003f36:	bf00      	nop
		break;
 8003f38:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	791b      	ldrb	r3, [r3, #4]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d126      	bne.n	8003f90 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f42:	4b8b      	ldr	r3, [pc, #556]	; (8004170 <extInt_Config+0xe18>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	7812      	ldrb	r2, [r2, #0]
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	2201      	movs	r2, #1
 8003f50:	408a      	lsls	r2, r1
 8003f52:	43d2      	mvns	r2, r2
 8003f54:	4611      	mov	r1, r2
 8003f56:	4a86      	ldr	r2, [pc, #536]	; (8004170 <extInt_Config+0xe18>)
 8003f58:	400b      	ands	r3, r1
 8003f5a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f5c:	4b84      	ldr	r3, [pc, #528]	; (8004170 <extInt_Config+0xe18>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	7812      	ldrb	r2, [r2, #0]
 8003f66:	4611      	mov	r1, r2
 8003f68:	2201      	movs	r2, #1
 8003f6a:	408a      	lsls	r2, r1
 8003f6c:	43d2      	mvns	r2, r2
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4a7f      	ldr	r2, [pc, #508]	; (8004170 <extInt_Config+0xe18>)
 8003f72:	400b      	ands	r3, r1
 8003f74:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f76:	4b7e      	ldr	r3, [pc, #504]	; (8004170 <extInt_Config+0xe18>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	7812      	ldrb	r2, [r2, #0]
 8003f80:	4611      	mov	r1, r2
 8003f82:	2201      	movs	r2, #1
 8003f84:	408a      	lsls	r2, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	4a79      	ldr	r2, [pc, #484]	; (8004170 <extInt_Config+0xe18>)
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	6093      	str	r3, [r2, #8]
 8003f8e:	e05c      	b.n	800404a <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	791b      	ldrb	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d126      	bne.n	8003fe6 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003f98:	4b75      	ldr	r3, [pc, #468]	; (8004170 <extInt_Config+0xe18>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	408a      	lsls	r2, r1
 8003fa8:	43d2      	mvns	r2, r2
 8003faa:	4611      	mov	r1, r2
 8003fac:	4a70      	ldr	r2, [pc, #448]	; (8004170 <extInt_Config+0xe18>)
 8003fae:	400b      	ands	r3, r1
 8003fb0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fb2:	4b6f      	ldr	r3, [pc, #444]	; (8004170 <extInt_Config+0xe18>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	7812      	ldrb	r2, [r2, #0]
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	408a      	lsls	r2, r1
 8003fc2:	43d2      	mvns	r2, r2
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4a6a      	ldr	r2, [pc, #424]	; (8004170 <extInt_Config+0xe18>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <extInt_Config+0xe18>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	7812      	ldrb	r2, [r2, #0]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	2201      	movs	r2, #1
 8003fda:	408a      	lsls	r2, r1
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4a64      	ldr	r2, [pc, #400]	; (8004170 <extInt_Config+0xe18>)
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	60d3      	str	r3, [r2, #12]
 8003fe4:	e031      	b.n	800404a <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003fe6:	4b62      	ldr	r3, [pc, #392]	; (8004170 <extInt_Config+0xe18>)
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	7812      	ldrb	r2, [r2, #0]
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	408a      	lsls	r2, r1
 8003ff6:	43d2      	mvns	r2, r2
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4a5d      	ldr	r2, [pc, #372]	; (8004170 <extInt_Config+0xe18>)
 8003ffc:	400b      	ands	r3, r1
 8003ffe:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004000:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <extInt_Config+0xe18>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	7812      	ldrb	r2, [r2, #0]
 800400a:	4611      	mov	r1, r2
 800400c:	2201      	movs	r2, #1
 800400e:	408a      	lsls	r2, r1
 8004010:	43d2      	mvns	r2, r2
 8004012:	4611      	mov	r1, r2
 8004014:	4a56      	ldr	r2, [pc, #344]	; (8004170 <extInt_Config+0xe18>)
 8004016:	400b      	ands	r3, r1
 8004018:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800401a:	4b55      	ldr	r3, [pc, #340]	; (8004170 <extInt_Config+0xe18>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	7812      	ldrb	r2, [r2, #0]
 8004024:	4611      	mov	r1, r2
 8004026:	2201      	movs	r2, #1
 8004028:	408a      	lsls	r2, r1
 800402a:	4611      	mov	r1, r2
 800402c:	4a50      	ldr	r2, [pc, #320]	; (8004170 <extInt_Config+0xe18>)
 800402e:	430b      	orrs	r3, r1
 8004030:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004032:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <extInt_Config+0xe18>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	7812      	ldrb	r2, [r2, #0]
 800403c:	4611      	mov	r1, r2
 800403e:	2201      	movs	r2, #1
 8004040:	408a      	lsls	r2, r1
 8004042:	4611      	mov	r1, r2
 8004044:	4a4a      	ldr	r2, [pc, #296]	; (8004170 <extInt_Config+0xe18>)
 8004046:	430b      	orrs	r3, r1
 8004048:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800404a:	4b49      	ldr	r3, [pc, #292]	; (8004170 <extInt_Config+0xe18>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	7812      	ldrb	r2, [r2, #0]
 8004054:	4611      	mov	r1, r2
 8004056:	2201      	movs	r2, #1
 8004058:	408a      	lsls	r2, r1
 800405a:	43d2      	mvns	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	4a44      	ldr	r2, [pc, #272]	; (8004170 <extInt_Config+0xe18>)
 8004060:	400b      	ands	r3, r1
 8004062:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <extInt_Config+0xe18>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	4611      	mov	r1, r2
 8004070:	2201      	movs	r2, #1
 8004072:	408a      	lsls	r2, r1
 8004074:	4611      	mov	r1, r2
 8004076:	4a3e      	ldr	r2, [pc, #248]	; (8004170 <extInt_Config+0xe18>)
 8004078:	430b      	orrs	r3, r1
 800407a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800407c:	b672      	cpsid	i
}
 800407e:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	d862      	bhi.n	8004150 <extInt_Config+0xdf8>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <extInt_Config+0xd38>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040d1 	.word	0x080040d1
 8004094:	080040d9 	.word	0x080040d9
 8004098:	080040e1 	.word	0x080040e1
 800409c:	080040e9 	.word	0x080040e9
 80040a0:	080040f1 	.word	0x080040f1
 80040a4:	080040f9 	.word	0x080040f9
 80040a8:	08004101 	.word	0x08004101
 80040ac:	08004109 	.word	0x08004109
 80040b0:	08004111 	.word	0x08004111
 80040b4:	08004119 	.word	0x08004119
 80040b8:	08004121 	.word	0x08004121
 80040bc:	08004129 	.word	0x08004129
 80040c0:	08004131 	.word	0x08004131
 80040c4:	08004139 	.word	0x08004139
 80040c8:	08004141 	.word	0x08004141
 80040cc:	08004149 	.word	0x08004149
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 80040d0:	2006      	movs	r0, #6
 80040d2:	f7ff f923 	bl	800331c <__NVIC_EnableIRQ>
		break;
 80040d6:	e03c      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 80040d8:	2007      	movs	r0, #7
 80040da:	f7ff f91f 	bl	800331c <__NVIC_EnableIRQ>
		break;
 80040de:	e038      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80040e0:	2008      	movs	r0, #8
 80040e2:	f7ff f91b 	bl	800331c <__NVIC_EnableIRQ>
		break;
 80040e6:	e034      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80040e8:	2009      	movs	r0, #9
 80040ea:	f7ff f917 	bl	800331c <__NVIC_EnableIRQ>
		break;
 80040ee:	e030      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80040f0:	200a      	movs	r0, #10
 80040f2:	f7ff f913 	bl	800331c <__NVIC_EnableIRQ>
		break;
 80040f6:	e02c      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80040f8:	2017      	movs	r0, #23
 80040fa:	f7ff f90f 	bl	800331c <__NVIC_EnableIRQ>
		break;
 80040fe:	e028      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004100:	2017      	movs	r0, #23
 8004102:	f7ff f90b 	bl	800331c <__NVIC_EnableIRQ>
		break;
 8004106:	e024      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004108:	2017      	movs	r0, #23
 800410a:	f7ff f907 	bl	800331c <__NVIC_EnableIRQ>
		break;
 800410e:	e020      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004110:	2017      	movs	r0, #23
 8004112:	f7ff f903 	bl	800331c <__NVIC_EnableIRQ>
		break;
 8004116:	e01c      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004118:	2017      	movs	r0, #23
 800411a:	f7ff f8ff 	bl	800331c <__NVIC_EnableIRQ>
		break;
 800411e:	e018      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004120:	2028      	movs	r0, #40	; 0x28
 8004122:	f7ff f8fb 	bl	800331c <__NVIC_EnableIRQ>
		break;
 8004126:	e014      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004128:	2028      	movs	r0, #40	; 0x28
 800412a:	f7ff f8f7 	bl	800331c <__NVIC_EnableIRQ>
		break;
 800412e:	e010      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004130:	2028      	movs	r0, #40	; 0x28
 8004132:	f7ff f8f3 	bl	800331c <__NVIC_EnableIRQ>
		break;
 8004136:	e00c      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004138:	2028      	movs	r0, #40	; 0x28
 800413a:	f7ff f8ef 	bl	800331c <__NVIC_EnableIRQ>
		break;
 800413e:	e008      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004140:	2028      	movs	r0, #40	; 0x28
 8004142:	f7ff f8eb 	bl	800331c <__NVIC_EnableIRQ>
		break;
 8004146:	e004      	b.n	8004152 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004148:	2028      	movs	r0, #40	; 0x28
 800414a:	f7ff f8e7 	bl	800331c <__NVIC_EnableIRQ>
		break;
 800414e:	e000      	b.n	8004152 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8004150:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004152:	b662      	cpsie	i
}
 8004154:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40020c00 	.word	0x40020c00
 8004164:	40013800 	.word	0x40013800
 8004168:	40021000 	.word	0x40021000
 800416c:	40021c00 	.word	0x40021c00
 8004170:	40013c00 	.word	0x40013c00

08004174 <callback_extInt0>:
	__enable_irq();
}


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
	__NOP();
 8004178:	bf00      	nop
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
	__NOP();
 8004188:	bf00      	nop
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
	__NOP();
 8004198:	bf00      	nop
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
	__NOP();
 80041a8:	bf00      	nop
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
	__NOP();
 80041b8:	bf00      	nop
}
 80041ba:	bf00      	nop
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
	__NOP();
 80041c8:	bf00      	nop
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	__NOP();
 80041d8:	bf00      	nop
}
 80041da:	bf00      	nop
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
	__NOP();
 80041e8:	bf00      	nop
}
 80041ea:	bf00      	nop
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
	__NOP();
 80041f8:	bf00      	nop
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
	__NOP();
 8004208:	bf00      	nop
}
 800420a:	bf00      	nop
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
	__NOP();
 8004218:	bf00      	nop
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
	__NOP();
 8004228:	bf00      	nop
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
	__NOP();
 8004238:	bf00      	nop
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
	__NOP();
 8004248:	bf00      	nop
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <EXTI0_IRQHandler+0x28>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <EXTI0_IRQHandler+0x28>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <EXTI0_IRQHandler+0x28>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8004270:	f7ff ff80 	bl	8004174 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8004274:	e000      	b.n	8004278 <EXTI0_IRQHandler+0x24>
		__NOP();
 8004276:	bf00      	nop
}
 8004278:	bf00      	nop
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40013c00 	.word	0x40013c00

08004280 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <EXTI1_IRQHandler+0x28>)
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8004290:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <EXTI1_IRQHandler+0x28>)
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <EXTI1_IRQHandler+0x28>)
 8004296:	f043 0302 	orr.w	r3, r3, #2
 800429a:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 800429c:	f7fe f92c 	bl	80024f8 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 80042a0:	e000      	b.n	80042a4 <EXTI1_IRQHandler+0x24>
		__NOP();
 80042a2:	bf00      	nop
}
 80042a4:	bf00      	nop
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40013c00 	.word	0x40013c00

080042ac <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 80042b0:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <EXTI2_IRQHandler+0x28>)
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <EXTI2_IRQHandler+0x28>)
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <EXTI2_IRQHandler+0x28>)
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 80042c8:	f7ff ff5c 	bl	8004184 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 80042cc:	e000      	b.n	80042d0 <EXTI2_IRQHandler+0x24>
		__NOP();
 80042ce:	bf00      	nop
}
 80042d0:	bf00      	nop
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40013c00 	.word	0x40013c00

080042d8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <EXTI3_IRQHandler+0x28>)
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <EXTI3_IRQHandler+0x28>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	4a04      	ldr	r2, [pc, #16]	; (8004300 <EXTI3_IRQHandler+0x28>)
 80042ee:	f043 0308 	orr.w	r3, r3, #8
 80042f2:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80042f4:	f7fe f954 	bl	80025a0 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80042f8:	e000      	b.n	80042fc <EXTI3_IRQHandler+0x24>
		__NOP();
 80042fa:	bf00      	nop
}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40013c00 	.word	0x40013c00

08004304 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <EXTI4_IRQHandler+0x28>)
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <EXTI4_IRQHandler+0x28>)
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	4a04      	ldr	r2, [pc, #16]	; (800432c <EXTI4_IRQHandler+0x28>)
 800431a:	f043 0310 	orr.w	r3, r3, #16
 800431e:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8004320:	f7ff ff38 	bl	8004194 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8004324:	e000      	b.n	8004328 <EXTI4_IRQHandler+0x24>
		__NOP();
 8004326:	bf00      	nop
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40013c00 	.word	0x40013c00

08004330 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8004334:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8004340:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004346:	f043 0320 	orr.w	r3, r3, #32
 800434a:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 800434c:	f7ff ff2a 	bl	80041a4 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8004350:	e03c      	b.n	80043cc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8004352:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800435e:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004368:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800436a:	f7ff ff23 	bl	80041b4 <callback_extInt6>
}
 800436e:	e02d      	b.n	80043cc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8004370:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800437c:	4b14      	ldr	r3, [pc, #80]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004386:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8004388:	f7ff ff1c 	bl	80041c4 <callback_extInt7>
}
 800438c:	e01e      	b.n	80043cc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800439a:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 80043a6:	f7ff ff15 	bl	80041d4 <callback_extInt8>
}
 80043aa:	e00f      	b.n	80043cc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <EXTI9_5_IRQHandler+0xa0>)
 80043be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043c2:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 80043c4:	f7ff ff0e 	bl	80041e4 <callback_extInt9>
}
 80043c8:	e000      	b.n	80043cc <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80043ca:	bf00      	nop
}
 80043cc:	bf00      	nop
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40013c00 	.word	0x40013c00

080043d4 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 80043d8:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80043e4:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	4a2a      	ldr	r2, [pc, #168]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 80043ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ee:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80043f0:	f7ff ff00 	bl	80041f4 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80043f4:	e04b      	b.n	800448e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d008      	beq.n	8004414 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8004402:	4b24      	ldr	r3, [pc, #144]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	4a23      	ldr	r2, [pc, #140]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800440c:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 800440e:	f7ff fef9 	bl	8004204 <callback_extInt11>
}
 8004412:	e03c      	b.n	800448e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8004414:	4b1f      	ldr	r3, [pc, #124]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800442a:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 800442c:	f7ff fef2 	bl	8004214 <callback_extInt12>
}
 8004430:	e02d      	b.n	800448e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8004432:	4b18      	ldr	r3, [pc, #96]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	4a14      	ldr	r2, [pc, #80]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004448:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800444a:	f7ff feeb 	bl	8004224 <callback_extInt13>
}
 800444e:	e01e      	b.n	800448e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	4a0c      	ldr	r2, [pc, #48]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004466:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8004468:	f7ff fee4 	bl	8004234 <callback_extInt14>
}
 800446c:	e00f      	b.n	800448e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800447a:	4b06      	ldr	r3, [pc, #24]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	4a05      	ldr	r2, [pc, #20]	; (8004494 <EXTI15_10_IRQHandler+0xc0>)
 8004480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004484:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8004486:	f7ff fedd 	bl	8004244 <callback_extInt15>
}
 800448a:	e000      	b.n	800448e <EXTI15_10_IRQHandler+0xba>
		__NOP();
 800448c:	bf00      	nop
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40013c00 	.word	0x40013c00

08004498 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	70fb      	strb	r3, [r7, #3]
 80044aa:	460b      	mov	r3, r1
 80044ac:	70bb      	strb	r3, [r7, #2]
 80044ae:	4613      	mov	r3, r2
 80044b0:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	78ba      	ldrb	r2, [r7, #2]
 80044bc:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	787a      	ldrb	r2, [r7, #1]
 80044c2:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	7c3a      	ldrb	r2, [r7, #16]
 80044c8:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	7d3a      	ldrb	r2, [r7, #20]
 80044ce:	715a      	strb	r2, [r3, #5]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4a88      	ldr	r2, [pc, #544]	; (8004714 <GPIO_Config+0x238>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d106      	bne.n	8004504 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80044f6:	4b88      	ldr	r3, [pc, #544]	; (8004718 <GPIO_Config+0x23c>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	4a87      	ldr	r2, [pc, #540]	; (8004718 <GPIO_Config+0x23c>)
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	6313      	str	r3, [r2, #48]	; 0x30
 8004502:	e03a      	b.n	800457a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a84      	ldr	r2, [pc, #528]	; (800471c <GPIO_Config+0x240>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d106      	bne.n	800451c <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 800450e:	4b82      	ldr	r3, [pc, #520]	; (8004718 <GPIO_Config+0x23c>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a81      	ldr	r2, [pc, #516]	; (8004718 <GPIO_Config+0x23c>)
 8004514:	f043 0302 	orr.w	r3, r3, #2
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	e02e      	b.n	800457a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a7f      	ldr	r2, [pc, #508]	; (8004720 <GPIO_Config+0x244>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d106      	bne.n	8004534 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8004526:	4b7c      	ldr	r3, [pc, #496]	; (8004718 <GPIO_Config+0x23c>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a7b      	ldr	r2, [pc, #492]	; (8004718 <GPIO_Config+0x23c>)
 800452c:	f043 0304 	orr.w	r3, r3, #4
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	e022      	b.n	800457a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4a7a      	ldr	r2, [pc, #488]	; (8004724 <GPIO_Config+0x248>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d106      	bne.n	800454c <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 800453e:	4b76      	ldr	r3, [pc, #472]	; (8004718 <GPIO_Config+0x23c>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	4a75      	ldr	r2, [pc, #468]	; (8004718 <GPIO_Config+0x23c>)
 8004544:	f043 0308 	orr.w	r3, r3, #8
 8004548:	6313      	str	r3, [r2, #48]	; 0x30
 800454a:	e016      	b.n	800457a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	4a75      	ldr	r2, [pc, #468]	; (8004728 <GPIO_Config+0x24c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d106      	bne.n	8004564 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8004556:	4b70      	ldr	r3, [pc, #448]	; (8004718 <GPIO_Config+0x23c>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	4a6f      	ldr	r2, [pc, #444]	; (8004718 <GPIO_Config+0x23c>)
 800455c:	f043 0310 	orr.w	r3, r3, #16
 8004560:	6313      	str	r3, [r2, #48]	; 0x30
 8004562:	e00a      	b.n	800457a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4a70      	ldr	r2, [pc, #448]	; (800472c <GPIO_Config+0x250>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d105      	bne.n	800457a <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 800456e:	4b6a      	ldr	r3, [pc, #424]	; (8004718 <GPIO_Config+0x23c>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	4a69      	ldr	r2, [pc, #420]	; (8004718 <GPIO_Config+0x23c>)
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	461a      	mov	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	2103      	movs	r1, #3
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	400a      	ands	r2, r1
 80045a8:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	789b      	ldrb	r3, [r3, #2]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	2301      	movs	r3, #1
 80045d8:	408b      	lsls	r3, r1
 80045da:	43db      	mvns	r3, r3
 80045dc:	4619      	mov	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	400a      	ands	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	6859      	ldr	r1, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	78db      	ldrb	r3, [r3, #3]
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	2103      	movs	r1, #3
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	4619      	mov	r1, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	400a      	ands	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	430a      	orrs	r2, r1
 8004634:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	791b      	ldrb	r3, [r3, #4]
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	2103      	movs	r1, #3
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	400a      	ands	r2, r1
 8004664:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	68d9      	ldr	r1, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	430a      	orrs	r2, r1
 8004674:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	785b      	ldrb	r3, [r3, #1]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d143      	bne.n	8004706 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b07      	cmp	r3, #7
 8004684:	d81f      	bhi.n	80046c6 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	6a1a      	ldr	r2, [r3, #32]
 8004694:	210f      	movs	r1, #15
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	4619      	mov	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	400a      	ands	r2, r1
 80046a6:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	6a1a      	ldr	r2, [r3, #32]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	795b      	ldrb	r3, [r3, #5]
 80046b2:	4619      	mov	r1, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ba:	4619      	mov	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 80046c4:	e01f      	b.n	8004706 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	3b08      	subs	r3, #8
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d6:	210f      	movs	r1, #15
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	fa01 f303 	lsl.w	r3, r1, r3
 80046de:	43db      	mvns	r3, r3
 80046e0:	4619      	mov	r1, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	400a      	ands	r2, r1
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	795b      	ldrb	r3, [r3, #5]
 80046f4:	4619      	mov	r1, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	4619      	mov	r1, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	430a      	orrs	r2, r1
 8004704:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004706:	bf00      	nop
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40020000 	.word	0x40020000
 8004718:	40023800 	.word	0x40023800
 800471c:	40020400 	.word	0x40020400
 8004720:	40020800 	.word	0x40020800
 8004724:	40020c00 	.word	0x40020c00
 8004728:	40021000 	.word	0x40021000
 800472c:	40021c00 	.word	0x40021c00

08004730 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 800473c:	78fb      	ldrb	r3, [r7, #3]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10d      	bne.n	800475e <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	2301      	movs	r3, #1
 8004750:	408b      	lsls	r3, r1
 8004752:	4619      	mov	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 800475c:	e00d      	b.n	800477a <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	699a      	ldr	r2, [r3, #24]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	3310      	adds	r3, #16
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	4619      	mov	r1, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	430a      	orrs	r2, r1
 8004778:	619a      	str	r2, [r3, #24]
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	2301      	movs	r3, #1
 800479c:	408b      	lsls	r3, r1
 800479e:	4619      	mov	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	404a      	eors	r2, r1
 80047a6:	615a      	str	r2, [r3, #20]
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 80047bc:	f000 fa9c 	bl	8004cf8 <getClockAPB1>
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a60      	ldr	r2, [pc, #384]	; (800494c <i2c_Config+0x198>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d106      	bne.n	80047dc <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80047ce:	4b60      	ldr	r3, [pc, #384]	; (8004950 <i2c_Config+0x19c>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	4a5f      	ldr	r2, [pc, #380]	; (8004950 <i2c_Config+0x19c>)
 80047d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047d8:	6413      	str	r3, [r2, #64]	; 0x40
 80047da:	e016      	b.n	800480a <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5c      	ldr	r2, [pc, #368]	; (8004954 <i2c_Config+0x1a0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d106      	bne.n	80047f4 <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80047e6:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <i2c_Config+0x19c>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	4a59      	ldr	r2, [pc, #356]	; (8004950 <i2c_Config+0x19c>)
 80047ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047f0:	6413      	str	r3, [r2, #64]	; 0x40
 80047f2:	e00a      	b.n	800480a <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a57      	ldr	r2, [pc, #348]	; (8004958 <i2c_Config+0x1a4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d105      	bne.n	800480a <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80047fe:	4b54      	ldr	r3, [pc, #336]	; (8004950 <i2c_Config+0x19c>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	4a53      	ldr	r2, [pc, #332]	; (8004950 <i2c_Config+0x19c>)
 8004804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004808:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004818:	601a      	str	r2, [r3, #0]
	__NOP();
 800481a:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800482a:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800483a:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8004850:	2300      	movs	r3, #0
 8004852:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2200      	movs	r2, #0
 800485a:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	795b      	ldrb	r3, [r3, #5]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d121      	bne.n	80048b0 <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69da      	ldr	r2, [r3, #28]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800487a:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 800487c:	7bfb      	ldrb	r3, [r7, #15]
 800487e:	b29b      	uxth	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	0092      	lsls	r2, r2, #2
 8004884:	4413      	add	r3, r2
 8004886:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69d9      	ldr	r1, [r3, #28]
 800488e:	89ba      	ldrh	r2, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	3301      	adds	r3, #1
 800489c:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6a19      	ldr	r1, [r3, #32]
 80048a4:	7afa      	ldrb	r2, [r7, #11]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	621a      	str	r2, [r3, #32]
 80048ae:	e039      	b.n	8004924 <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048be:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69da      	ldr	r2, [r3, #28]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ce:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80048d6:	fb02 f303 	mul.w	r3, r2, r3
 80048da:	4a20      	ldr	r2, [pc, #128]	; (800495c <i2c_Config+0x1a8>)
 80048dc:	fb82 1203 	smull	r1, r2, r2, r3
 80048e0:	1192      	asrs	r2, r2, #6
 80048e2:	17db      	asrs	r3, r3, #31
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69d9      	ldr	r1, [r3, #28]
 80048ee:	89ba      	ldrh	r2, [r7, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	4a17      	ldr	r2, [pc, #92]	; (8004960 <i2c_Config+0x1ac>)
 8004904:	fb82 1203 	smull	r1, r2, r2, r3
 8004908:	1192      	asrs	r2, r2, #6
 800490a:	17db      	asrs	r3, r3, #31
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	b2db      	uxtb	r3, r3
 8004910:	3301      	adds	r3, #1
 8004912:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a19      	ldr	r1, [r3, #32]
 800491a:	7afa      	ldrb	r2, [r7, #11]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40005400 	.word	0x40005400
 8004950:	40023800 	.word	0x40023800
 8004954:	40005800 	.word	0x40005800
 8004958:	40005c00 	.word	0x40005c00
 800495c:	057619f1 	.word	0x057619f1
 8004960:	10624dd3 	.word	0x10624dd3

08004964 <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 800496c:	e000      	b.n	8004970 <i2c_StartTrasaction+0xc>
	{
		__NOP();
 800496e:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f7      	bne.n	800496e <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498c:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 800498e:	e000      	b.n	8004992 <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 8004990:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f7      	beq.n	8004990 <i2c_StartTrasaction+0x2c>
	}
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c4:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 80049c6:	e000      	b.n	80049ca <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 80049c8:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f7      	beq.n	80049c8 <i2c_ReStartTrasaction+0x1a>
	}
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b085      	sub	sp, #20
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	70fb      	strb	r3, [r7, #3]
 80049f2:	4613      	mov	r3, r2
 80049f4:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	005a      	lsls	r2, r3, #1
 80049fe:	78bb      	ldrb	r3, [r7, #2]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8004a08:	e000      	b.n	8004a0c <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 8004a0a:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f7      	beq.n	8004a0a <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	73fb      	strb	r3, [r7, #15]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8004a4a:	e000      	b.n	8004a4e <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 8004a4c:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f7      	beq.n	8004a4c <i2c_SendMemoryAddress+0x16>
	}
}
 8004a5c:	bf00      	nop
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	460b      	mov	r3, r1
 8004a74:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	78fa      	ldrb	r2, [r7, #3]
 8004a7c:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8004a7e:	e000      	b.n	8004a82 <i2c_SendDataByte+0x18>
	{
		__NOP();
 8004a80:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f7      	beq.n	8004a80 <i2c_SendDataByte+0x16>
	}
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8004aa6:	e000      	b.n	8004aaa <i2c_ReadDataByte+0xc>
	{
		__NOP();
 8004aa8:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f7      	beq.n	8004aa8 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	799b      	ldrb	r3, [r3, #6]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aea:	601a      	str	r2, [r3, #0]

}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0e:	601a      	str	r2, [r3, #0]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff19 	bl	8004964 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	791b      	ldrb	r3, [r3, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff53 	bl	80049e6 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff76 	bl	8004a36 <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff ff2f 	bl	80049ae <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	791b      	ldrb	r3, [r3, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ff44 	bl	80049e6 <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff ff9d 	bl	8004a9e <i2c_ReadDataByte>
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ffb3 	bl	8004ad4 <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ffc2 	bl	8004af8 <i2c_StopTrasaction>

	return auxRead;
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fee8 	bl	8004964 <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	791b      	ldrb	r3, [r3, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff22 	bl	80049e6 <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff ff45 	bl	8004a36 <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 8004bac:	78bb      	ldrb	r3, [r7, #2]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff ff5a 	bl	8004a6a <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ff9e 	bl	8004af8 <i2c_StopTrasaction>
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8004bce:	4a39      	ldr	r2, [pc, #228]	; (8004cb4 <configPLL+0xf0>)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	2b31      	cmp	r3, #49	; 0x31
 8004bd8:	d804      	bhi.n	8004be4 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8004bda:	4b37      	ldr	r3, [pc, #220]	; (8004cb8 <configPLL+0xf4>)
 8004bdc:	4a36      	ldr	r2, [pc, #216]	; (8004cb8 <configPLL+0xf4>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	6093      	str	r3, [r2, #8]
 8004be2:	e005      	b.n	8004bf0 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004be4:	4b34      	ldr	r3, [pc, #208]	; (8004cb8 <configPLL+0xf4>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a33      	ldr	r2, [pc, #204]	; (8004cb8 <configPLL+0xf4>)
 8004bea:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004bee:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8004bf0:	4b31      	ldr	r3, [pc, #196]	; (8004cb8 <configPLL+0xf4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4a30      	ldr	r2, [pc, #192]	; (8004cb8 <configPLL+0xf4>)
 8004bf6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004bfa:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8004bfc:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <configPLL+0xf4>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4a2d      	ldr	r2, [pc, #180]	; (8004cb8 <configPLL+0xf4>)
 8004c02:	f043 0312 	orr.w	r3, r3, #18
 8004c06:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8004c08:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <configPLL+0xf4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	79fa      	ldrb	r2, [r7, #7]
 8004c0e:	0092      	lsls	r2, r2, #2
 8004c10:	3a0e      	subs	r2, #14
 8004c12:	0192      	lsls	r2, r2, #6
 8004c14:	4611      	mov	r1, r2
 8004c16:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <configPLL+0xf4>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8004c1c:	4b26      	ldr	r3, [pc, #152]	; (8004cb8 <configPLL+0xf4>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <configPLL+0xf4>)
 8004c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c26:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8004c28:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <configPLL+0xf4>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <configPLL+0xf4>)
 8004c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c32:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004c34:	e000      	b.n	8004c38 <configPLL+0x74>
	{
		__NOP();
 8004c36:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8004c38:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <configPLL+0xf4>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f8      	beq.n	8004c36 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	2b5a      	cmp	r3, #90	; 0x5a
 8004c48:	d909      	bls.n	8004c5e <configPLL+0x9a>
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b64      	cmp	r3, #100	; 0x64
 8004c4e:	d806      	bhi.n	8004c5e <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8004c50:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <configPLL+0xf8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <configPLL+0xf8>)
 8004c56:	f043 0303 	orr.w	r3, r3, #3
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e01d      	b.n	8004c9a <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8004c5e:	79fb      	ldrb	r3, [r7, #7]
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d909      	bls.n	8004c78 <configPLL+0xb4>
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	2b5a      	cmp	r3, #90	; 0x5a
 8004c68:	d806      	bhi.n	8004c78 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <configPLL+0xf8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <configPLL+0xf8>)
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e010      	b.n	8004c9a <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	2b1e      	cmp	r3, #30
 8004c7c:	d909      	bls.n	8004c92 <configPLL+0xce>
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d806      	bhi.n	8004c92 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8004c84:	4b0d      	ldr	r3, [pc, #52]	; (8004cbc <configPLL+0xf8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <configPLL+0xf8>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	e003      	b.n	8004c9a <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <configPLL+0xf8>)
 8004c94:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <configPLL+0xf8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8004c9a:	4b07      	ldr	r3, [pc, #28]	; (8004cb8 <configPLL+0xf4>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <configPLL+0xf4>)
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	6093      	str	r3, [r2, #8]

}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	200004f8 	.word	0x200004f8
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	40023c00 	.word	0x40023c00

08004cc0 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8004cca:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <getConfigPLL+0x30>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d103      	bne.n	8004cde <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <getConfigPLL+0x34>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	71fb      	strb	r3, [r7, #7]
 8004cdc:	e001      	b.n	8004ce2 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8004cde:	2310      	movs	r3, #16
 8004ce0:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	200004f8 	.word	0x200004f8

08004cf8 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8004cfe:	f7ff ffdf 	bl	8004cc0 <getConfigPLL>
 8004d02:	4603      	mov	r3, r0
 8004d04:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8004d06:	2300      	movs	r3, #0
 8004d08:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8004d0a:	79bb      	ldrb	r3, [r7, #6]
 8004d0c:	2b31      	cmp	r3, #49	; 0x31
 8004d0e:	d802      	bhi.n	8004d16 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8004d10:	79bb      	ldrb	r3, [r7, #6]
 8004d12:	71fb      	strb	r3, [r7, #7]
 8004d14:	e002      	b.n	8004d1c <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8004d16:	79bb      	ldrb	r3, [r7, #6]
 8004d18:	089b      	lsrs	r3, r3, #2
 8004d1a:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <configMCO2+0x34>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <configMCO2+0x34>)
 8004d38:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004d3c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <configMCO2+0x34>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	79fa      	ldrb	r2, [r7, #7]
 8004d44:	0792      	lsls	r2, r2, #30
 8004d46:	4611      	mov	r1, r2
 8004d48:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <configMCO2+0x34>)
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	6093      	str	r3, [r2, #8]
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800

08004d60 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d84b      	bhi.n	8004e0a <configMCO2PRE+0xaa>
 8004d72:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <configMCO2PRE+0x18>)
 8004d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d78:	08004d8d 	.word	0x08004d8d
 8004d7c:	08004da3 	.word	0x08004da3
 8004d80:	08004dbd 	.word	0x08004dbd
 8004d84:	08004dd7 	.word	0x08004dd7
 8004d88:	08004df1 	.word	0x08004df1
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004d8c:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <configMCO2PRE+0xbc>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <configMCO2PRE+0xbc>)
 8004d92:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004d96:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8004d98:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <configMCO2PRE+0xbc>)
 8004d9a:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <configMCO2PRE+0xbc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	6093      	str	r3, [r2, #8]
			break;
 8004da0:	e035      	b.n	8004e0e <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004da2:	4b1e      	ldr	r3, [pc, #120]	; (8004e1c <configMCO2PRE+0xbc>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <configMCO2PRE+0xbc>)
 8004da8:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004dac:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8004dae:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <configMCO2PRE+0xbc>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	4a1a      	ldr	r2, [pc, #104]	; (8004e1c <configMCO2PRE+0xbc>)
 8004db4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004db8:	6093      	str	r3, [r2, #8]
			break;
 8004dba:	e028      	b.n	8004e0e <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004dbc:	4b17      	ldr	r3, [pc, #92]	; (8004e1c <configMCO2PRE+0xbc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <configMCO2PRE+0xbc>)
 8004dc2:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004dc6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <configMCO2PRE+0xbc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a13      	ldr	r2, [pc, #76]	; (8004e1c <configMCO2PRE+0xbc>)
 8004dce:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8004dd2:	6093      	str	r3, [r2, #8]
			break;
 8004dd4:	e01b      	b.n	8004e0e <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <configMCO2PRE+0xbc>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <configMCO2PRE+0xbc>)
 8004ddc:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004de0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8004de2:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <configMCO2PRE+0xbc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4a0d      	ldr	r2, [pc, #52]	; (8004e1c <configMCO2PRE+0xbc>)
 8004de8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8004dec:	6093      	str	r3, [r2, #8]
			break;
 8004dee:	e00e      	b.n	8004e0e <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004df0:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <configMCO2PRE+0xbc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4a09      	ldr	r2, [pc, #36]	; (8004e1c <configMCO2PRE+0xbc>)
 8004df6:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004dfa:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004dfc:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <configMCO2PRE+0xbc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	4a06      	ldr	r2, [pc, #24]	; (8004e1c <configMCO2PRE+0xbc>)
 8004e02:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004e06:	6093      	str	r3, [r2, #8]
			break;
 8004e08:	e001      	b.n	8004e0e <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8004e0a:	bf00      	nop
			break;
 8004e0c:	bf00      	nop
		}
	}

}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40023800 	.word	0x40023800

08004e20 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d106      	bne.n	8004e40 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8004e32:	4b81      	ldr	r3, [pc, #516]	; (8005038 <pwm_Config+0x218>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	4a80      	ldr	r2, [pc, #512]	; (8005038 <pwm_Config+0x218>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e3e:	e024      	b.n	8004e8a <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a7d      	ldr	r2, [pc, #500]	; (800503c <pwm_Config+0x21c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d106      	bne.n	8004e58 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8004e4a:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <pwm_Config+0x218>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	4a7a      	ldr	r2, [pc, #488]	; (8005038 <pwm_Config+0x218>)
 8004e50:	f043 0302 	orr.w	r3, r3, #2
 8004e54:	6413      	str	r3, [r2, #64]	; 0x40
 8004e56:	e018      	b.n	8004e8a <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a78      	ldr	r2, [pc, #480]	; (8005040 <pwm_Config+0x220>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d106      	bne.n	8004e70 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004e62:	4b75      	ldr	r3, [pc, #468]	; (8005038 <pwm_Config+0x218>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a74      	ldr	r2, [pc, #464]	; (8005038 <pwm_Config+0x218>)
 8004e68:	f043 0304 	orr.w	r3, r3, #4
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	e00c      	b.n	8004e8a <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	4a73      	ldr	r2, [pc, #460]	; (8005044 <pwm_Config+0x224>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d106      	bne.n	8004e88 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8004e7a:	4b6f      	ldr	r3, [pc, #444]	; (8005038 <pwm_Config+0x218>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a6e      	ldr	r2, [pc, #440]	; (8005038 <pwm_Config+0x218>)
 8004e80:	f043 0308 	orr.w	r3, r3, #8
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
 8004e86:	e000      	b.n	8004e8a <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8004e88:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fa4c 	bl	8005328 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	f200 8118 	bhi.w	80050ca <pwm_Config+0x2aa>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <pwm_Config+0x80>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004f33 	.word	0x08004f33
 8004ea8:	08004fb5 	.word	0x08004fb5
 8004eac:	08005049 	.word	0x08005049
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f022 0203 	bic.w	r2, r2, #3
 8004ebe:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ece:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004ede:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f022 0208 	bic.w	r2, r2, #8
 8004eee:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f042 0208 	orr.w	r2, r2, #8
 8004efe:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f042 0204 	orr.w	r2, r2, #4
 8004f1e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f2e:	619a      	str	r2, [r3, #24]

		break;
 8004f30:	e0cc      	b.n	80050cc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f022 0203 	bic.w	r2, r2, #3
 8004f40:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004f50:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	699a      	ldr	r2, [r3, #24]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004f60:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f70:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	699a      	ldr	r2, [r3, #24]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f80:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f90:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fa0:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	699a      	ldr	r2, [r3, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fb0:	619a      	str	r2, [r3, #24]

		break;
 8004fb2:	e08b      	b.n	80050cc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	69da      	ldr	r2, [r3, #28]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f022 0203 	bic.w	r2, r2, #3
 8004fc2:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	69da      	ldr	r2, [r3, #28]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fd2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004fe2:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f022 0208 	bic.w	r2, r2, #8
 8004ff2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f022 0204 	bic.w	r2, r2, #4
 8005012:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	69da      	ldr	r2, [r3, #28]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f042 0204 	orr.w	r2, r2, #4
 8005022:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	69da      	ldr	r2, [r3, #28]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005032:	61da      	str	r2, [r3, #28]

		break;
 8005034:	e04a      	b.n	80050cc <pwm_Config+0x2ac>
 8005036:	bf00      	nop
 8005038:	40023800 	.word	0x40023800
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005056:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005066:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8005076:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	69da      	ldr	r2, [r3, #28]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005086:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005096:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050b6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	69da      	ldr	r2, [r3, #28]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050c6:	61da      	str	r2, [r3, #28]

		break;
 80050c8:	e000      	b.n	80050cc <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 80050ca:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	791b      	ldrb	r3, [r3, #4]
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f896 	bl	8005204 <statusPolarityPWM>

}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	460b      	mov	r3, r1
 80050ea:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d87f      	bhi.n	80051f4 <statusInOutPWM+0x114>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <statusInOutPWM+0x1c>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	08005147 	.word	0x08005147
 8005104:	08005181 	.word	0x08005181
 8005108:	080051bb 	.word	0x080051bb
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d110      	bne.n	8005134 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	6a1a      	ldr	r2, [r3, #32]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8005132:	e060      	b.n	80051f6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	6a1a      	ldr	r2, [r3, #32]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	621a      	str	r2, [r3, #32]
		break;
 8005144:	e057      	b.n	80051f6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d110      	bne.n	800516e <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	6a1a      	ldr	r2, [r3, #32]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f022 0210 	bic.w	r2, r2, #16
 800515a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	6a1a      	ldr	r2, [r3, #32]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f042 0210 	orr.w	r2, r2, #16
 800516a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 800516c:	e043      	b.n	80051f6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	6a1a      	ldr	r2, [r3, #32]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f022 0210 	bic.w	r2, r2, #16
 800517c:	621a      	str	r2, [r3, #32]
		break;
 800517e:	e03a      	b.n	80051f6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d110      	bne.n	80051a8 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005194:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a4:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 80051a6:	e026      	b.n	80051f6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b6:	621a      	str	r2, [r3, #32]
		break;
 80051b8:	e01d      	b.n	80051f6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d110      	bne.n	80051e2 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	6a1a      	ldr	r2, [r3, #32]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ce:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	6a1a      	ldr	r2, [r3, #32]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051de:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 80051e0:	e009      	b.n	80051f6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051f0:	621a      	str	r2, [r3, #32]
		break;
 80051f2:	e000      	b.n	80051f6 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 80051f4:	bf00      	nop
	}
	}
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop

08005204 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b03      	cmp	r3, #3
 8005216:	d87f      	bhi.n	8005318 <statusPolarityPWM+0x114>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <statusPolarityPWM+0x1c>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	08005231 	.word	0x08005231
 8005224:	0800526b 	.word	0x0800526b
 8005228:	080052a5 	.word	0x080052a5
 800522c:	080052df 	.word	0x080052df
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d110      	bne.n	8005258 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f022 0202 	bic.w	r2, r2, #2
 8005244:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	6a1a      	ldr	r2, [r3, #32]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f042 0202 	orr.w	r2, r2, #2
 8005254:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8005256:	e060      	b.n	800531a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f022 0202 	bic.w	r2, r2, #2
 8005266:	621a      	str	r2, [r3, #32]
		break;
 8005268:	e057      	b.n	800531a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d110      	bne.n	8005292 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	6a1a      	ldr	r2, [r3, #32]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f022 0220 	bic.w	r2, r2, #32
 800527e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	6a1a      	ldr	r2, [r3, #32]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f042 0220 	orr.w	r2, r2, #32
 800528e:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8005290:	e043      	b.n	800531a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f022 0220 	bic.w	r2, r2, #32
 80052a0:	621a      	str	r2, [r3, #32]
		break;
 80052a2:	e03a      	b.n	800531a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d110      	bne.n	80052cc <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052b8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	6a1a      	ldr	r2, [r3, #32]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052c8:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 80052ca:	e026      	b.n	800531a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	6a1a      	ldr	r2, [r3, #32]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052da:	621a      	str	r2, [r3, #32]
		break;
 80052dc:	e01d      	b.n	800531a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d110      	bne.n	8005306 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052f2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	6a1a      	ldr	r2, [r3, #32]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005302:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8005304:	e009      	b.n	800531a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005314:	621a      	str	r2, [r3, #32]
		break;
 8005316:	e000      	b.n	800531a <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8005318:	bf00      	nop
	}
	}

}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop

08005328 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	2b03      	cmp	r3, #3
 8005336:	d823      	bhi.n	8005380 <setDuttyCycle+0x58>
 8005338:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <setDuttyCycle+0x18>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	08005351 	.word	0x08005351
 8005344:	0800535d 	.word	0x0800535d
 8005348:	08005369 	.word	0x08005369
 800534c:	08005375 	.word	0x08005375
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	885a      	ldrh	r2, [r3, #2]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800535a:	e012      	b.n	8005382 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	885a      	ldrh	r2, [r3, #2]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8005366:	e00c      	b.n	8005382 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	885a      	ldrh	r2, [r3, #2]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8005372:	e006      	b.n	8005382 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	885a      	ldrh	r2, [r3, #2]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800537e:	e000      	b.n	8005382 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8005380:	bf00      	nop
	}
	}

}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop

08005390 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4a0d      	ldr	r2, [pc, #52]	; (80053d8 <updateDuttyCyclePercentageFloat+0x48>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	095b      	lsrs	r3, r3, #5
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ee07 3a90 	vmov	s15, r3
 80053b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b4:	edd7 7a00 	vldr	s15, [r7]
 80053b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c0:	ee17 3a90 	vmov	r3, s15
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ffac 	bl	8005328 <setDuttyCycle>
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	51eb851f 	.word	0x51eb851f

080053dc <__NVIC_EnableIRQ>:
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4907      	ldr	r1, [pc, #28]	; (8005414 <__NVIC_EnableIRQ+0x38>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 800541e:	4919      	ldr	r1, [pc, #100]	; (8005484 <config_SysTick_ms+0x6c>)
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 800542c:	f7ff fc48 	bl	8004cc0 <getConfigPLL>
 8005430:	4603      	mov	r3, r0
 8005432:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 8005434:	79fb      	ldrb	r3, [r7, #7]
 8005436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800543a:	fb03 f202 	mul.w	r2, r3, r2
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <config_SysTick_ms+0x70>)
 8005440:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <config_SysTick_ms+0x70>)
 8005444:	2200      	movs	r2, #0
 8005446:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8005448:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <config_SysTick_ms+0x70>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0e      	ldr	r2, [pc, #56]	; (8005488 <config_SysTick_ms+0x70>)
 800544e:	f043 0304 	orr.w	r3, r3, #4
 8005452:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005454:	b672      	cpsid	i
}
 8005456:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8005458:	f04f 30ff 	mov.w	r0, #4294967295
 800545c:	f7ff ffbe 	bl	80053dc <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <config_SysTick_ms+0x70>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <config_SysTick_ms+0x70>)
 8005466:	f043 0302 	orr.w	r3, r3, #2
 800546a:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <config_SysTick_ms+0x70>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a05      	ldr	r2, [pc, #20]	; (8005488 <config_SysTick_ms+0x70>)
 8005472:	f043 0301 	orr.w	r3, r3, #1
 8005476:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005478:	b662      	cpsie	i
}
 800547a:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000500 	.word	0x20000500
 8005488:	e000e010 	.word	0xe000e010

0800548c <getTicksMs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksMs(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
	return ticks;
 8005490:	4b04      	ldr	r3, [pc, #16]	; (80054a4 <getTicksMs+0x18>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000500 	.word	0x20000500

080054a8 <delay_ms>:

//Funcion que genera un delay de ms
void delay_ms(uint32_t wait_time_ms)
{
 80054a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
	//Guardamos el valor de ticks transcurridos hasta el momento
	ticks_start = getTicksMs();
 80054b2:	f7ff ffeb 	bl	800548c <getTicksMs>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4914      	ldr	r1, [pc, #80]	; (800550c <delay_ms+0x64>)
 80054bc:	e9c1 2300 	strd	r2, r3, [r1]
	//Guardamos tambien el valor de ticks transcurridos hasta el momento en una nueva variable
	ticks_counting = getTicksMs();
 80054c0:	f7ff ffe4 	bl	800548c <getTicksMs>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4911      	ldr	r1, [pc, #68]	; (8005510 <delay_ms+0x68>)
 80054ca:	e9c1 2300 	strd	r2, r3, [r1]

	//Realizamos un while que espera que se cumpla el tiempo asignado
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 80054ce:	e006      	b.n	80054de <delay_ms+0x36>
	{
		//Actualizamos el valor
		ticks_counting = getTicksMs();
 80054d0:	f7ff ffdc 	bl	800548c <getTicksMs>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	490d      	ldr	r1, [pc, #52]	; (8005510 <delay_ms+0x68>)
 80054da:	e9c1 2300 	strd	r2, r3, [r1]
	while(ticks_counting<(ticks_start+(uint64_t)wait_time_ms))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	4698      	mov	r8, r3
 80054e4:	4691      	mov	r9, r2
 80054e6:	4b09      	ldr	r3, [pc, #36]	; (800550c <delay_ms+0x64>)
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	eb18 0402 	adds.w	r4, r8, r2
 80054f0:	eb49 0503 	adc.w	r5, r9, r3
 80054f4:	4b06      	ldr	r3, [pc, #24]	; (8005510 <delay_ms+0x68>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	42a2      	cmp	r2, r4
 80054fc:	41ab      	sbcs	r3, r5
 80054fe:	d3e7      	bcc.n	80054d0 <delay_ms+0x28>
	}
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800550c:	20000508 	.word	0x20000508
 8005510:	20000510 	.word	0x20000510

08005514 <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <SysTick_Handler+0x38>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <SysTick_Handler+0x38>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a08      	ldr	r2, [pc, #32]	; (800554c <SysTick_Handler+0x38>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <SysTick_Handler+0x3c>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	1c50      	adds	r0, r2, #1
 8005538:	f143 0100 	adc.w	r1, r3, #0
 800553c:	4b04      	ldr	r3, [pc, #16]	; (8005550 <SysTick_Handler+0x3c>)
 800553e:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8005542:	bf00      	nop
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	e000e010 	.word	0xe000e010
 8005550:	20000500 	.word	0x20000500

08005554 <__NVIC_EnableIRQ>:
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800555e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005562:	2b00      	cmp	r3, #0
 8005564:	db0b      	blt.n	800557e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	f003 021f 	and.w	r2, r3, #31
 800556c:	4907      	ldr	r1, [pc, #28]	; (800558c <__NVIC_EnableIRQ+0x38>)
 800556e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	2001      	movs	r0, #1
 8005576:	fa00 f202 	lsl.w	r2, r0, r2
 800557a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	e000e100 	.word	0xe000e100

08005590 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	4a8f      	ldr	r2, [pc, #572]	; (80057dc <USART_Config+0x24c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d107      	bne.n	80055b2 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 80055a2:	4b8f      	ldr	r3, [pc, #572]	; (80057e0 <USART_Config+0x250>)
 80055a4:	2210      	movs	r2, #16
 80055a6:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	4a8d      	ldr	r2, [pc, #564]	; (80057e4 <USART_Config+0x254>)
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	e019      	b.n	80055e6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4a8c      	ldr	r2, [pc, #560]	; (80057e8 <USART_Config+0x258>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 80055bc:	4b88      	ldr	r3, [pc, #544]	; (80057e0 <USART_Config+0x250>)
 80055be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a88      	ldr	r2, [pc, #544]	; (80057ec <USART_Config+0x25c>)
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e00b      	b.n	80055e6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	4a87      	ldr	r2, [pc, #540]	; (80057f0 <USART_Config+0x260>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d106      	bne.n	80055e6 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 80055d8:	4b81      	ldr	r3, [pc, #516]	; (80057e0 <USART_Config+0x250>)
 80055da:	2220      	movs	r2, #32
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	4a84      	ldr	r2, [pc, #528]	; (80057f4 <USART_Config+0x264>)
 80055e4:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2200      	movs	r2, #0
 80055ec:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2200      	movs	r2, #0
 80055f4:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	789b      	ldrb	r3, [r3, #2]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d03d      	beq.n	800567a <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800561c:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800562c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800563c:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	789b      	ldrb	r3, [r3, #2]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d110      	bne.n	8005668 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005654:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005664:	60da      	str	r2, [r3, #12]
 8005666:	e018      	b.n	800569a <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	e00f      	b.n	800569a <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005688:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005698:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	78db      	ldrb	r3, [r3, #3]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d84c      	bhi.n	800573c <USART_Config+0x1ac>
 80056a2:	a201      	add	r2, pc, #4	; (adr r2, 80056a8 <USART_Config+0x118>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056b9 	.word	0x080056b9
 80056ac:	080056d7 	.word	0x080056d7
 80056b0:	080056f9 	.word	0x080056f9
 80056b4:	0800571b 	.word	0x0800571b
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80056c6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	6912      	ldr	r2, [r2, #16]
 80056d2:	611a      	str	r2, [r3, #16]
		break;
 80056d4:	e041      	b.n	800575a <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80056e4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056f4:	611a      	str	r2, [r3, #16]
		break;
 80056f6:	e030      	b.n	800575a <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005706:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005716:	611a      	str	r2, [r3, #16]
		break;
 8005718:	e01f      	b.n	800575a <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005728:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8005738:	611a      	str	r2, [r3, #16]
		break;
 800573a:	e00e      	b.n	800575a <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800574a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	6912      	ldr	r2, [r2, #16]
 8005756:	611a      	str	r2, [r3, #16]
		break;
 8005758:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	4a21      	ldr	r2, [pc, #132]	; (80057e8 <USART_Config+0x258>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d104      	bne.n	8005772 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8005768:	f7ff fac6 	bl	8004cf8 <getClockAPB1>
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
 8005770:	e003      	b.n	800577a <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8005772:	f7ff faa5 	bl	8004cc0 <getConfigPLL>
 8005776:	4603      	mov	r3, r0
 8005778:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	785b      	ldrb	r3, [r3, #1]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10b      	bne.n	800579a <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f91f 	bl	80059cc <getValueBaudRate>
 800578e:	4603      	mov	r3, r0
 8005790:	461a      	mov	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	609a      	str	r2, [r3, #8]
 8005798:	e02f      	b.n	80057fa <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10b      	bne.n	80057ba <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 f90f 	bl	80059cc <getValueBaudRate>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	609a      	str	r2, [r3, #8]
 80057b8:	e01f      	b.n	80057fa <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d11a      	bne.n	80057f8 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 f8ff 	bl	80059cc <getValueBaudRate>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	e00f      	b.n	80057fa <USART_Config+0x26a>
 80057da:	bf00      	nop
 80057dc:	40011000 	.word	0x40011000
 80057e0:	40023800 	.word	0x40023800
 80057e4:	20000518 	.word	0x20000518
 80057e8:	40004400 	.word	0x40004400
 80057ec:	2000051c 	.word	0x2000051c
 80057f0:	40011400 	.word	0x40011400
 80057f4:	20000520 	.word	0x20000520
	}
	else
	{
		__NOP();
 80057f8:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d866      	bhi.n	80058d0 <USART_Config+0x340>
 8005802:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <USART_Config+0x278>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005819 	.word	0x08005819
 800580c:	0800583b 	.word	0x0800583b
 8005810:	0800585d 	.word	0x0800585d
 8005814:	0800589f 	.word	0x0800589f
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f022 0208 	bic.w	r2, r2, #8
 8005826:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	60da      	str	r2, [r3, #12]

		break;
 8005838:	e063      	b.n	8005902 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f022 0204 	bic.w	r2, r2, #4
 8005848:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f042 0204 	orr.w	r2, r2, #4
 8005858:	60da      	str	r2, [r3, #12]

		break;
 800585a:	e052      	b.n	8005902 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	68da      	ldr	r2, [r3, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f022 0208 	bic.w	r2, r2, #8
 800586a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f042 0208 	orr.w	r2, r2, #8
 800587a:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f022 0204 	bic.w	r2, r2, #4
 800588a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f042 0204 	orr.w	r2, r2, #4
 800589a:	60da      	str	r2, [r3, #12]


		break;
 800589c:	e031      	b.n	8005902 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ac:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f022 0208 	bic.w	r2, r2, #8
 80058bc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f022 0204 	bic.w	r2, r2, #4
 80058cc:	60da      	str	r2, [r3, #12]
		break;
 80058ce:	e018      	b.n	8005902 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058de:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f022 0208 	bic.w	r2, r2, #8
 80058ee:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f022 0204 	bic.w	r2, r2, #4
 80058fe:	60da      	str	r2, [r3, #12]
		break;
 8005900:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8005902:	b672      	cpsid	i
}
 8005904:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	791b      	ldrb	r3, [r3, #4]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d110      	bne.n	8005930 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f022 0220 	bic.w	r2, r2, #32
 800591c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f042 0220 	orr.w	r2, r2, #32
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e007      	b.n	8005940 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f022 0220 	bic.w	r2, r2, #32
 800593e:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	791b      	ldrb	r3, [r3, #4]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d003      	beq.n	8005950 <USART_Config+0x3c0>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	795b      	ldrb	r3, [r3, #5]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d11a      	bne.n	8005986 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4a1a      	ldr	r2, [pc, #104]	; (80059c0 <USART_Config+0x430>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d103      	bne.n	8005962 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 800595a:	2025      	movs	r0, #37	; 0x25
 800595c:	f7ff fdfa 	bl	8005554 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005960:	e013      	b.n	800598a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <USART_Config+0x434>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d103      	bne.n	8005974 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 800596c:	2026      	movs	r0, #38	; 0x26
 800596e:	f7ff fdf1 	bl	8005554 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005972:	e00a      	b.n	800598a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	4a13      	ldr	r2, [pc, #76]	; (80059c8 <USART_Config+0x438>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d105      	bne.n	800598a <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800597e:	2047      	movs	r0, #71	; 0x47
 8005980:	f7ff fde8 	bl	8005554 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8005984:	e001      	b.n	800598a <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800598a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800598c:	b662      	cpsie	i
}
 800598e:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d00f      	beq.n	80059b8 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059b6:	60da      	str	r2, [r3, #12]
	}
}
 80059b8:	bf00      	nop
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40011000 	.word	0x40011000
 80059c4:	40004400 	.word	0x40004400
 80059c8:	40011400 	.word	0x40011400

080059cc <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 80059cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6039      	str	r1, [r7, #0]
 80059d6:	4601      	mov	r1, r0
 80059d8:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 80059da:	79f9      	ldrb	r1, [r7, #7]
 80059dc:	2000      	movs	r0, #0
 80059de:	460a      	mov	r2, r1
 80059e0:	4603      	mov	r3, r0
 80059e2:	491f      	ldr	r1, [pc, #124]	; (8005a60 <getValueBaudRate+0x94>)
 80059e4:	fb01 f003 	mul.w	r0, r1, r3
 80059e8:	2102      	movs	r1, #2
 80059ea:	fb02 f101 	mul.w	r1, r2, r1
 80059ee:	4401      	add	r1, r0
 80059f0:	481b      	ldr	r0, [pc, #108]	; (8005a60 <getValueBaudRate+0x94>)
 80059f2:	fba2 4500 	umull	r4, r5, r2, r0
 80059f6:	194b      	adds	r3, r1, r5
 80059f8:	461d      	mov	r5, r3
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	2200      	movs	r2, #0
 8005a00:	4698      	mov	r8, r3
 8005a02:	4691      	mov	r9, r2
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	4620      	mov	r0, r4
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f7fb fa62 	bl	8000ed4 <__aeabi_ldivmod>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4613      	mov	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4a12      	ldr	r2, [pc, #72]	; (8005a64 <getValueBaudRate+0x98>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	0b5b      	lsrs	r3, r3, #13
 8005a22:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <getValueBaudRate+0x98>)
 8005a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a40:	0a5b      	lsrs	r3, r3, #9
 8005a42:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	4313      	orrs	r3, r2
 8005a52:	813b      	strh	r3, [r7, #8]

    return value;
 8005a54:	893b      	ldrh	r3, [r7, #8]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005a60:	540be400 	.word	0x540be400
 8005a64:	d1b71759 	.word	0xd1b71759

08005a68 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <writeMsgForTXE+0x64>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d111      	bne.n	8005a9e <writeMsgForTXE+0x36>
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <writeMsgForTXE+0x68>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10d      	bne.n	8005a9e <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	4813      	ldr	r0, [pc, #76]	; (8005ad4 <writeMsgForTXE+0x6c>)
 8005a86:	f001 f8a9 	bl	8006bdc <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8005a8a:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <writeMsgForTXE+0x70>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2101      	movs	r1, #1
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f830 	bl	8005afc <interruptionTX>
 8005a9c:	e012      	b.n	8005ac4 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8005a9e:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <writeMsgForTXE+0x74>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2364      	movs	r3, #100	; 0x64
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	4a0d      	ldr	r2, [pc, #52]	; (8005ae0 <writeMsgForTXE+0x78>)
 8005aac:	4413      	add	r3, r2
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f893 	bl	8006bdc <siprintf>
		inLine++;
 8005ab6:	4b09      	ldr	r3, [pc, #36]	; (8005adc <writeMsgForTXE+0x74>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <writeMsgForTXE+0x74>)
 8005ac0:	701a      	strb	r2, [r3, #0]
	}
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000d5e 	.word	0x20000d5e
 8005ad0:	20000d5d 	.word	0x20000d5d
 8005ad4:	20000528 	.word	0x20000528
 8005ad8:	20000d5f 	.word	0x20000d5f
 8005adc:	20000d5c 	.word	0x20000d5c
 8005ae0:	2000058c 	.word	0x2000058c

08005ae4 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
	return auxRxData;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <getRxData+0x14>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20000524 	.word	0x20000524

08005afc <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d10c      	bne.n	8005b28 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8005b26:	e005      	b.n	8005b34 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60da      	str	r2, [r3, #12]
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
	__NOP();
 8005b44:	bf00      	nop
}
 8005b46:	bf00      	nop
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
	__NOP();
 8005b54:	bf00      	nop
}
 8005b56:	bf00      	nop
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8005b64:	4b37      	ldr	r3, [pc, #220]	; (8005c44 <USART1_IRQHandler+0xe4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d008      	beq.n	8005b84 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8005b72:	4b34      	ldr	r3, [pc, #208]	; (8005c44 <USART1_IRQHandler+0xe4>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	4b33      	ldr	r3, [pc, #204]	; (8005c48 <USART1_IRQHandler+0xe8>)
 8005b7c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8005b7e:	f7fc fcad 	bl	80024dc <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8005b82:	e05d      	b.n	8005c40 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8005b84:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <USART1_IRQHandler+0xe4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d055      	beq.n	8005c3e <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005b92:	4b2e      	ldr	r3, [pc, #184]	; (8005c4c <USART1_IRQHandler+0xec>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8005b9a:	4b2d      	ldr	r3, [pc, #180]	; (8005c50 <USART1_IRQHandler+0xf0>)
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <USART1_IRQHandler+0xe4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8005ba4:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <USART1_IRQHandler+0xe4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff ffa6 	bl	8005afc <interruptionTX>
}
 8005bb0:	e046      	b.n	8005c40 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8005bb2:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <USART1_IRQHandler+0xec>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d142      	bne.n	8005c40 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005bba:	4b26      	ldr	r3, [pc, #152]	; (8005c54 <USART1_IRQHandler+0xf4>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4b25      	ldr	r3, [pc, #148]	; (8005c58 <USART1_IRQHandler+0xf8>)
 8005bc2:	5c9b      	ldrb	r3, [r3, r2]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8005bc8:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <USART1_IRQHandler+0xf4>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <USART1_IRQHandler+0xf8>)
 8005bd0:	5c9a      	ldrb	r2, [r3, r2]
 8005bd2:	4b1c      	ldr	r3, [pc, #112]	; (8005c44 <USART1_IRQHandler+0xe4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
				posChar++;
 8005bd8:	4b1e      	ldr	r3, [pc, #120]	; (8005c54 <USART1_IRQHandler+0xf4>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	4b1c      	ldr	r3, [pc, #112]	; (8005c54 <USART1_IRQHandler+0xf4>)
 8005be2:	701a      	strb	r2, [r3, #0]
}
 8005be4:	e02c      	b.n	8005c40 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005be6:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <USART1_IRQHandler+0xfc>)
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <USART1_IRQHandler+0x100>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d215      	bcs.n	8005c1e <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8005bf2:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <USART1_IRQHandler+0xfc>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2364      	movs	r3, #100	; 0x64
 8005bfa:	fb02 f303 	mul.w	r3, r2, r3
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <USART1_IRQHandler+0x104>)
 8005c00:	4413      	add	r3, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	4814      	ldr	r0, [pc, #80]	; (8005c58 <USART1_IRQHandler+0xf8>)
 8005c06:	f000 ffe9 	bl	8006bdc <siprintf>
					posChar = 0;
 8005c0a:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <USART1_IRQHandler+0xf4>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005c10:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <USART1_IRQHandler+0xfc>)
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	3301      	adds	r3, #1
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <USART1_IRQHandler+0xfc>)
 8005c1a:	701a      	strb	r2, [r3, #0]
}
 8005c1c:	e010      	b.n	8005c40 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8005c1e:	4b09      	ldr	r3, [pc, #36]	; (8005c44 <USART1_IRQHandler+0xe4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2100      	movs	r1, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ff69 	bl	8005afc <interruptionTX>
					posChar = 0;
 8005c2a:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <USART1_IRQHandler+0xf4>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <USART1_IRQHandler+0xfc>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005c36:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <USART1_IRQHandler+0x100>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
}
 8005c3c:	e000      	b.n	8005c40 <USART1_IRQHandler+0xe0>
		__NOP();
 8005c3e:	bf00      	nop
}
 8005c40:	bf00      	nop
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20000518 	.word	0x20000518
 8005c48:	20000524 	.word	0x20000524
 8005c4c:	20000d5f 	.word	0x20000d5f
 8005c50:	20000525 	.word	0x20000525
 8005c54:	20000d5e 	.word	0x20000d5e
 8005c58:	20000528 	.word	0x20000528
 8005c5c:	20000d5d 	.word	0x20000d5d
 8005c60:	20000d5c 	.word	0x20000d5c
 8005c64:	2000058c 	.word	0x2000058c

08005c68 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8005c6c:	4b37      	ldr	r3, [pc, #220]	; (8005d4c <USART2_IRQHandler+0xe4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8005c7a:	4b34      	ldr	r3, [pc, #208]	; (8005d4c <USART2_IRQHandler+0xe4>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b33      	ldr	r3, [pc, #204]	; (8005d50 <USART2_IRQHandler+0xe8>)
 8005c84:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8005c86:	f7ff ff5b 	bl	8005b40 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8005c8a:	e05d      	b.n	8005d48 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8005c8c:	4b2f      	ldr	r3, [pc, #188]	; (8005d4c <USART2_IRQHandler+0xe4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d055      	beq.n	8005d46 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005c9a:	4b2e      	ldr	r3, [pc, #184]	; (8005d54 <USART2_IRQHandler+0xec>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8005ca2:	4b2d      	ldr	r3, [pc, #180]	; (8005d58 <USART2_IRQHandler+0xf0>)
 8005ca4:	781a      	ldrb	r2, [r3, #0]
 8005ca6:	4b29      	ldr	r3, [pc, #164]	; (8005d4c <USART2_IRQHandler+0xe4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005cac:	4b27      	ldr	r3, [pc, #156]	; (8005d4c <USART2_IRQHandler+0xe4>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff ff22 	bl	8005afc <interruptionTX>
}
 8005cb8:	e046      	b.n	8005d48 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8005cba:	4b26      	ldr	r3, [pc, #152]	; (8005d54 <USART2_IRQHandler+0xec>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d142      	bne.n	8005d48 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005cc2:	4b26      	ldr	r3, [pc, #152]	; (8005d5c <USART2_IRQHandler+0xf4>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <USART2_IRQHandler+0xf8>)
 8005cca:	5c9b      	ldrb	r3, [r3, r2]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00e      	beq.n	8005cee <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8005cd0:	4b22      	ldr	r3, [pc, #136]	; (8005d5c <USART2_IRQHandler+0xf4>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <USART2_IRQHandler+0xf8>)
 8005cd8:	5c9a      	ldrb	r2, [r3, r2]
 8005cda:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <USART2_IRQHandler+0xe4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	605a      	str	r2, [r3, #4]
				posChar++;
 8005ce0:	4b1e      	ldr	r3, [pc, #120]	; (8005d5c <USART2_IRQHandler+0xf4>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <USART2_IRQHandler+0xf4>)
 8005cea:	701a      	strb	r2, [r3, #0]
}
 8005cec:	e02c      	b.n	8005d48 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005cee:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <USART2_IRQHandler+0xfc>)
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <USART2_IRQHandler+0x100>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d215      	bcs.n	8005d26 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <USART2_IRQHandler+0xfc>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	2364      	movs	r3, #100	; 0x64
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	4a19      	ldr	r2, [pc, #100]	; (8005d6c <USART2_IRQHandler+0x104>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4814      	ldr	r0, [pc, #80]	; (8005d60 <USART2_IRQHandler+0xf8>)
 8005d0e:	f000 ff65 	bl	8006bdc <siprintf>
					posChar = 0;
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <USART2_IRQHandler+0xf4>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005d18:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <USART2_IRQHandler+0xfc>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <USART2_IRQHandler+0xfc>)
 8005d22:	701a      	strb	r2, [r3, #0]
}
 8005d24:	e010      	b.n	8005d48 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005d26:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <USART2_IRQHandler+0xe4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff fee5 	bl	8005afc <interruptionTX>
					posChar = 0;
 8005d32:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <USART2_IRQHandler+0xf4>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <USART2_IRQHandler+0xfc>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <USART2_IRQHandler+0x100>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	701a      	strb	r2, [r3, #0]
}
 8005d44:	e000      	b.n	8005d48 <USART2_IRQHandler+0xe0>
		__NOP();
 8005d46:	bf00      	nop
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	2000051c 	.word	0x2000051c
 8005d50:	20000524 	.word	0x20000524
 8005d54:	20000d5f 	.word	0x20000d5f
 8005d58:	20000525 	.word	0x20000525
 8005d5c:	20000d5e 	.word	0x20000d5e
 8005d60:	20000528 	.word	0x20000528
 8005d64:	20000d5d 	.word	0x20000d5d
 8005d68:	20000d5c 	.word	0x20000d5c
 8005d6c:	2000058c 	.word	0x2000058c

08005d70 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8005d74:	4b37      	ldr	r3, [pc, #220]	; (8005e54 <USART6_IRQHandler+0xe4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d008      	beq.n	8005d94 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8005d82:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <USART6_IRQHandler+0xe4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4b33      	ldr	r3, [pc, #204]	; (8005e58 <USART6_IRQHandler+0xe8>)
 8005d8c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8005d8e:	f7ff fedf 	bl	8005b50 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8005d92:	e05d      	b.n	8005e50 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8005d94:	4b2f      	ldr	r3, [pc, #188]	; (8005e54 <USART6_IRQHandler+0xe4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d055      	beq.n	8005e4e <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8005da2:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <USART6_IRQHandler+0xec>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10b      	bne.n	8005dc2 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8005daa:	4b2d      	ldr	r3, [pc, #180]	; (8005e60 <USART6_IRQHandler+0xf0>)
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	4b29      	ldr	r3, [pc, #164]	; (8005e54 <USART6_IRQHandler+0xe4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8005db4:	4b27      	ldr	r3, [pc, #156]	; (8005e54 <USART6_IRQHandler+0xe4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff fe9e 	bl	8005afc <interruptionTX>
}
 8005dc0:	e046      	b.n	8005e50 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8005dc2:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <USART6_IRQHandler+0xec>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d142      	bne.n	8005e50 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005dca:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <USART6_IRQHandler+0xf4>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <USART6_IRQHandler+0xf8>)
 8005dd2:	5c9b      	ldrb	r3, [r3, r2]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8005dd8:	4b22      	ldr	r3, [pc, #136]	; (8005e64 <USART6_IRQHandler+0xf4>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b22      	ldr	r3, [pc, #136]	; (8005e68 <USART6_IRQHandler+0xf8>)
 8005de0:	5c9a      	ldrb	r2, [r3, r2]
 8005de2:	4b1c      	ldr	r3, [pc, #112]	; (8005e54 <USART6_IRQHandler+0xe4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	605a      	str	r2, [r3, #4]
				posChar++;
 8005de8:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <USART6_IRQHandler+0xf4>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <USART6_IRQHandler+0xf4>)
 8005df2:	701a      	strb	r2, [r3, #0]
}
 8005df4:	e02c      	b.n	8005e50 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <USART6_IRQHandler+0xfc>)
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <USART6_IRQHandler+0x100>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d215      	bcs.n	8005e2e <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8005e02:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <USART6_IRQHandler+0xfc>)
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	2364      	movs	r3, #100	; 0x64
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	4a19      	ldr	r2, [pc, #100]	; (8005e74 <USART6_IRQHandler+0x104>)
 8005e10:	4413      	add	r3, r2
 8005e12:	4619      	mov	r1, r3
 8005e14:	4814      	ldr	r0, [pc, #80]	; (8005e68 <USART6_IRQHandler+0xf8>)
 8005e16:	f000 fee1 	bl	8006bdc <siprintf>
					posChar = 0;
 8005e1a:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <USART6_IRQHandler+0xf4>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005e20:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <USART6_IRQHandler+0xfc>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	3301      	adds	r3, #1
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <USART6_IRQHandler+0xfc>)
 8005e2a:	701a      	strb	r2, [r3, #0]
}
 8005e2c:	e010      	b.n	8005e50 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <USART6_IRQHandler+0xe4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fe61 	bl	8005afc <interruptionTX>
					posChar = 0;
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <USART6_IRQHandler+0xf4>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005e40:	4b0a      	ldr	r3, [pc, #40]	; (8005e6c <USART6_IRQHandler+0xfc>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <USART6_IRQHandler+0x100>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	701a      	strb	r2, [r3, #0]
}
 8005e4c:	e000      	b.n	8005e50 <USART6_IRQHandler+0xe0>
		__NOP();
 8005e4e:	bf00      	nop
}
 8005e50:	bf00      	nop
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20000520 	.word	0x20000520
 8005e58:	20000524 	.word	0x20000524
 8005e5c:	20000d5f 	.word	0x20000d5f
 8005e60:	20000525 	.word	0x20000525
 8005e64:	20000d5e 	.word	0x20000d5e
 8005e68:	20000528 	.word	0x20000528
 8005e6c:	20000d5d 	.word	0x20000d5d
 8005e70:	20000d5c 	.word	0x20000d5c
 8005e74:	2000058c 	.word	0x2000058c

08005e78 <__errno>:
 8005e78:	4b01      	ldr	r3, [pc, #4]	; (8005e80 <__errno+0x8>)
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	20000014 	.word	0x20000014

08005e84 <__libc_init_array>:
 8005e84:	b570      	push	{r4, r5, r6, lr}
 8005e86:	4d0d      	ldr	r5, [pc, #52]	; (8005ebc <__libc_init_array+0x38>)
 8005e88:	4c0d      	ldr	r4, [pc, #52]	; (8005ec0 <__libc_init_array+0x3c>)
 8005e8a:	1b64      	subs	r4, r4, r5
 8005e8c:	10a4      	asrs	r4, r4, #2
 8005e8e:	2600      	movs	r6, #0
 8005e90:	42a6      	cmp	r6, r4
 8005e92:	d109      	bne.n	8005ea8 <__libc_init_array+0x24>
 8005e94:	4d0b      	ldr	r5, [pc, #44]	; (8005ec4 <__libc_init_array+0x40>)
 8005e96:	4c0c      	ldr	r4, [pc, #48]	; (8005ec8 <__libc_init_array+0x44>)
 8005e98:	f006 fbdc 	bl	800c654 <_init>
 8005e9c:	1b64      	subs	r4, r4, r5
 8005e9e:	10a4      	asrs	r4, r4, #2
 8005ea0:	2600      	movs	r6, #0
 8005ea2:	42a6      	cmp	r6, r4
 8005ea4:	d105      	bne.n	8005eb2 <__libc_init_array+0x2e>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eac:	4798      	blx	r3
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7ee      	b.n	8005e90 <__libc_init_array+0xc>
 8005eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb6:	4798      	blx	r3
 8005eb8:	3601      	adds	r6, #1
 8005eba:	e7f2      	b.n	8005ea2 <__libc_init_array+0x1e>
 8005ebc:	0800d008 	.word	0x0800d008
 8005ec0:	0800d008 	.word	0x0800d008
 8005ec4:	0800d008 	.word	0x0800d008
 8005ec8:	0800d00c 	.word	0x0800d00c

08005ecc <memset>:
 8005ecc:	4402      	add	r2, r0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d100      	bne.n	8005ed6 <memset+0xa>
 8005ed4:	4770      	bx	lr
 8005ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eda:	e7f9      	b.n	8005ed0 <memset+0x4>

08005edc <__cvt>:
 8005edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee0:	ec55 4b10 	vmov	r4, r5, d0
 8005ee4:	2d00      	cmp	r5, #0
 8005ee6:	460e      	mov	r6, r1
 8005ee8:	4619      	mov	r1, r3
 8005eea:	462b      	mov	r3, r5
 8005eec:	bfbb      	ittet	lt
 8005eee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ef2:	461d      	movlt	r5, r3
 8005ef4:	2300      	movge	r3, #0
 8005ef6:	232d      	movlt	r3, #45	; 0x2d
 8005ef8:	700b      	strb	r3, [r1, #0]
 8005efa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005efc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f00:	4691      	mov	r9, r2
 8005f02:	f023 0820 	bic.w	r8, r3, #32
 8005f06:	bfbc      	itt	lt
 8005f08:	4622      	movlt	r2, r4
 8005f0a:	4614      	movlt	r4, r2
 8005f0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f10:	d005      	beq.n	8005f1e <__cvt+0x42>
 8005f12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f16:	d100      	bne.n	8005f1a <__cvt+0x3e>
 8005f18:	3601      	adds	r6, #1
 8005f1a:	2102      	movs	r1, #2
 8005f1c:	e000      	b.n	8005f20 <__cvt+0x44>
 8005f1e:	2103      	movs	r1, #3
 8005f20:	ab03      	add	r3, sp, #12
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	ab02      	add	r3, sp, #8
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	ec45 4b10 	vmov	d0, r4, r5
 8005f2c:	4653      	mov	r3, sl
 8005f2e:	4632      	mov	r2, r6
 8005f30:	f001 fe42 	bl	8007bb8 <_dtoa_r>
 8005f34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f38:	4607      	mov	r7, r0
 8005f3a:	d102      	bne.n	8005f42 <__cvt+0x66>
 8005f3c:	f019 0f01 	tst.w	r9, #1
 8005f40:	d022      	beq.n	8005f88 <__cvt+0xac>
 8005f42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f46:	eb07 0906 	add.w	r9, r7, r6
 8005f4a:	d110      	bne.n	8005f6e <__cvt+0x92>
 8005f4c:	783b      	ldrb	r3, [r7, #0]
 8005f4e:	2b30      	cmp	r3, #48	; 0x30
 8005f50:	d10a      	bne.n	8005f68 <__cvt+0x8c>
 8005f52:	2200      	movs	r2, #0
 8005f54:	2300      	movs	r3, #0
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f7fa fdcd 	bl	8000af8 <__aeabi_dcmpeq>
 8005f5e:	b918      	cbnz	r0, 8005f68 <__cvt+0x8c>
 8005f60:	f1c6 0601 	rsb	r6, r6, #1
 8005f64:	f8ca 6000 	str.w	r6, [sl]
 8005f68:	f8da 3000 	ldr.w	r3, [sl]
 8005f6c:	4499      	add	r9, r3
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2300      	movs	r3, #0
 8005f72:	4620      	mov	r0, r4
 8005f74:	4629      	mov	r1, r5
 8005f76:	f7fa fdbf 	bl	8000af8 <__aeabi_dcmpeq>
 8005f7a:	b108      	cbz	r0, 8005f80 <__cvt+0xa4>
 8005f7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f80:	2230      	movs	r2, #48	; 0x30
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	454b      	cmp	r3, r9
 8005f86:	d307      	bcc.n	8005f98 <__cvt+0xbc>
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f8c:	1bdb      	subs	r3, r3, r7
 8005f8e:	4638      	mov	r0, r7
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	b004      	add	sp, #16
 8005f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f98:	1c59      	adds	r1, r3, #1
 8005f9a:	9103      	str	r1, [sp, #12]
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e7f0      	b.n	8005f82 <__cvt+0xa6>

08005fa0 <__exponent>:
 8005fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	bfb8      	it	lt
 8005fa8:	4249      	neglt	r1, r1
 8005faa:	f803 2b02 	strb.w	r2, [r3], #2
 8005fae:	bfb4      	ite	lt
 8005fb0:	222d      	movlt	r2, #45	; 0x2d
 8005fb2:	222b      	movge	r2, #43	; 0x2b
 8005fb4:	2909      	cmp	r1, #9
 8005fb6:	7042      	strb	r2, [r0, #1]
 8005fb8:	dd2a      	ble.n	8006010 <__exponent+0x70>
 8005fba:	f10d 0407 	add.w	r4, sp, #7
 8005fbe:	46a4      	mov	ip, r4
 8005fc0:	270a      	movs	r7, #10
 8005fc2:	46a6      	mov	lr, r4
 8005fc4:	460a      	mov	r2, r1
 8005fc6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005fca:	fb07 1516 	mls	r5, r7, r6, r1
 8005fce:	3530      	adds	r5, #48	; 0x30
 8005fd0:	2a63      	cmp	r2, #99	; 0x63
 8005fd2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005fd6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005fda:	4631      	mov	r1, r6
 8005fdc:	dcf1      	bgt.n	8005fc2 <__exponent+0x22>
 8005fde:	3130      	adds	r1, #48	; 0x30
 8005fe0:	f1ae 0502 	sub.w	r5, lr, #2
 8005fe4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005fe8:	1c44      	adds	r4, r0, #1
 8005fea:	4629      	mov	r1, r5
 8005fec:	4561      	cmp	r1, ip
 8005fee:	d30a      	bcc.n	8006006 <__exponent+0x66>
 8005ff0:	f10d 0209 	add.w	r2, sp, #9
 8005ff4:	eba2 020e 	sub.w	r2, r2, lr
 8005ff8:	4565      	cmp	r5, ip
 8005ffa:	bf88      	it	hi
 8005ffc:	2200      	movhi	r2, #0
 8005ffe:	4413      	add	r3, r2
 8006000:	1a18      	subs	r0, r3, r0
 8006002:	b003      	add	sp, #12
 8006004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800600a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800600e:	e7ed      	b.n	8005fec <__exponent+0x4c>
 8006010:	2330      	movs	r3, #48	; 0x30
 8006012:	3130      	adds	r1, #48	; 0x30
 8006014:	7083      	strb	r3, [r0, #2]
 8006016:	70c1      	strb	r1, [r0, #3]
 8006018:	1d03      	adds	r3, r0, #4
 800601a:	e7f1      	b.n	8006000 <__exponent+0x60>

0800601c <_printf_float>:
 800601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006020:	ed2d 8b02 	vpush	{d8}
 8006024:	b08d      	sub	sp, #52	; 0x34
 8006026:	460c      	mov	r4, r1
 8006028:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800602c:	4616      	mov	r6, r2
 800602e:	461f      	mov	r7, r3
 8006030:	4605      	mov	r5, r0
 8006032:	f002 ff1f 	bl	8008e74 <_localeconv_r>
 8006036:	f8d0 a000 	ldr.w	sl, [r0]
 800603a:	4650      	mov	r0, sl
 800603c:	f7fa f8da 	bl	80001f4 <strlen>
 8006040:	2300      	movs	r3, #0
 8006042:	930a      	str	r3, [sp, #40]	; 0x28
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	9305      	str	r3, [sp, #20]
 8006048:	f8d8 3000 	ldr.w	r3, [r8]
 800604c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006050:	3307      	adds	r3, #7
 8006052:	f023 0307 	bic.w	r3, r3, #7
 8006056:	f103 0208 	add.w	r2, r3, #8
 800605a:	f8c8 2000 	str.w	r2, [r8]
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006066:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800606a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800606e:	9307      	str	r3, [sp, #28]
 8006070:	f8cd 8018 	str.w	r8, [sp, #24]
 8006074:	ee08 0a10 	vmov	s16, r0
 8006078:	4b9f      	ldr	r3, [pc, #636]	; (80062f8 <_printf_float+0x2dc>)
 800607a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800607e:	f04f 32ff 	mov.w	r2, #4294967295
 8006082:	f7fa fd6b 	bl	8000b5c <__aeabi_dcmpun>
 8006086:	bb88      	cbnz	r0, 80060ec <_printf_float+0xd0>
 8006088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800608c:	4b9a      	ldr	r3, [pc, #616]	; (80062f8 <_printf_float+0x2dc>)
 800608e:	f04f 32ff 	mov.w	r2, #4294967295
 8006092:	f7fa fd45 	bl	8000b20 <__aeabi_dcmple>
 8006096:	bb48      	cbnz	r0, 80060ec <_printf_float+0xd0>
 8006098:	2200      	movs	r2, #0
 800609a:	2300      	movs	r3, #0
 800609c:	4640      	mov	r0, r8
 800609e:	4649      	mov	r1, r9
 80060a0:	f7fa fd34 	bl	8000b0c <__aeabi_dcmplt>
 80060a4:	b110      	cbz	r0, 80060ac <_printf_float+0x90>
 80060a6:	232d      	movs	r3, #45	; 0x2d
 80060a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ac:	4b93      	ldr	r3, [pc, #588]	; (80062fc <_printf_float+0x2e0>)
 80060ae:	4894      	ldr	r0, [pc, #592]	; (8006300 <_printf_float+0x2e4>)
 80060b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060b4:	bf94      	ite	ls
 80060b6:	4698      	movls	r8, r3
 80060b8:	4680      	movhi	r8, r0
 80060ba:	2303      	movs	r3, #3
 80060bc:	6123      	str	r3, [r4, #16]
 80060be:	9b05      	ldr	r3, [sp, #20]
 80060c0:	f023 0204 	bic.w	r2, r3, #4
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	f04f 0900 	mov.w	r9, #0
 80060ca:	9700      	str	r7, [sp, #0]
 80060cc:	4633      	mov	r3, r6
 80060ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80060d0:	4621      	mov	r1, r4
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 f9d8 	bl	8006488 <_printf_common>
 80060d8:	3001      	adds	r0, #1
 80060da:	f040 8090 	bne.w	80061fe <_printf_float+0x1e2>
 80060de:	f04f 30ff 	mov.w	r0, #4294967295
 80060e2:	b00d      	add	sp, #52	; 0x34
 80060e4:	ecbd 8b02 	vpop	{d8}
 80060e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ec:	4642      	mov	r2, r8
 80060ee:	464b      	mov	r3, r9
 80060f0:	4640      	mov	r0, r8
 80060f2:	4649      	mov	r1, r9
 80060f4:	f7fa fd32 	bl	8000b5c <__aeabi_dcmpun>
 80060f8:	b140      	cbz	r0, 800610c <_printf_float+0xf0>
 80060fa:	464b      	mov	r3, r9
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bfbc      	itt	lt
 8006100:	232d      	movlt	r3, #45	; 0x2d
 8006102:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006106:	487f      	ldr	r0, [pc, #508]	; (8006304 <_printf_float+0x2e8>)
 8006108:	4b7f      	ldr	r3, [pc, #508]	; (8006308 <_printf_float+0x2ec>)
 800610a:	e7d1      	b.n	80060b0 <_printf_float+0x94>
 800610c:	6863      	ldr	r3, [r4, #4]
 800610e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006112:	9206      	str	r2, [sp, #24]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	d13f      	bne.n	8006198 <_printf_float+0x17c>
 8006118:	2306      	movs	r3, #6
 800611a:	6063      	str	r3, [r4, #4]
 800611c:	9b05      	ldr	r3, [sp, #20]
 800611e:	6861      	ldr	r1, [r4, #4]
 8006120:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006124:	2300      	movs	r3, #0
 8006126:	9303      	str	r3, [sp, #12]
 8006128:	ab0a      	add	r3, sp, #40	; 0x28
 800612a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800612e:	ab09      	add	r3, sp, #36	; 0x24
 8006130:	ec49 8b10 	vmov	d0, r8, r9
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	6022      	str	r2, [r4, #0]
 8006138:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800613c:	4628      	mov	r0, r5
 800613e:	f7ff fecd 	bl	8005edc <__cvt>
 8006142:	9b06      	ldr	r3, [sp, #24]
 8006144:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006146:	2b47      	cmp	r3, #71	; 0x47
 8006148:	4680      	mov	r8, r0
 800614a:	d108      	bne.n	800615e <_printf_float+0x142>
 800614c:	1cc8      	adds	r0, r1, #3
 800614e:	db02      	blt.n	8006156 <_printf_float+0x13a>
 8006150:	6863      	ldr	r3, [r4, #4]
 8006152:	4299      	cmp	r1, r3
 8006154:	dd41      	ble.n	80061da <_printf_float+0x1be>
 8006156:	f1ab 0b02 	sub.w	fp, fp, #2
 800615a:	fa5f fb8b 	uxtb.w	fp, fp
 800615e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006162:	d820      	bhi.n	80061a6 <_printf_float+0x18a>
 8006164:	3901      	subs	r1, #1
 8006166:	465a      	mov	r2, fp
 8006168:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800616c:	9109      	str	r1, [sp, #36]	; 0x24
 800616e:	f7ff ff17 	bl	8005fa0 <__exponent>
 8006172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006174:	1813      	adds	r3, r2, r0
 8006176:	2a01      	cmp	r2, #1
 8006178:	4681      	mov	r9, r0
 800617a:	6123      	str	r3, [r4, #16]
 800617c:	dc02      	bgt.n	8006184 <_printf_float+0x168>
 800617e:	6822      	ldr	r2, [r4, #0]
 8006180:	07d2      	lsls	r2, r2, #31
 8006182:	d501      	bpl.n	8006188 <_printf_float+0x16c>
 8006184:	3301      	adds	r3, #1
 8006186:	6123      	str	r3, [r4, #16]
 8006188:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800618c:	2b00      	cmp	r3, #0
 800618e:	d09c      	beq.n	80060ca <_printf_float+0xae>
 8006190:	232d      	movs	r3, #45	; 0x2d
 8006192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006196:	e798      	b.n	80060ca <_printf_float+0xae>
 8006198:	9a06      	ldr	r2, [sp, #24]
 800619a:	2a47      	cmp	r2, #71	; 0x47
 800619c:	d1be      	bne.n	800611c <_printf_float+0x100>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1bc      	bne.n	800611c <_printf_float+0x100>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e7b9      	b.n	800611a <_printf_float+0xfe>
 80061a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80061aa:	d118      	bne.n	80061de <_printf_float+0x1c2>
 80061ac:	2900      	cmp	r1, #0
 80061ae:	6863      	ldr	r3, [r4, #4]
 80061b0:	dd0b      	ble.n	80061ca <_printf_float+0x1ae>
 80061b2:	6121      	str	r1, [r4, #16]
 80061b4:	b913      	cbnz	r3, 80061bc <_printf_float+0x1a0>
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	07d0      	lsls	r0, r2, #31
 80061ba:	d502      	bpl.n	80061c2 <_printf_float+0x1a6>
 80061bc:	3301      	adds	r3, #1
 80061be:	440b      	add	r3, r1
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80061c4:	f04f 0900 	mov.w	r9, #0
 80061c8:	e7de      	b.n	8006188 <_printf_float+0x16c>
 80061ca:	b913      	cbnz	r3, 80061d2 <_printf_float+0x1b6>
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	07d2      	lsls	r2, r2, #31
 80061d0:	d501      	bpl.n	80061d6 <_printf_float+0x1ba>
 80061d2:	3302      	adds	r3, #2
 80061d4:	e7f4      	b.n	80061c0 <_printf_float+0x1a4>
 80061d6:	2301      	movs	r3, #1
 80061d8:	e7f2      	b.n	80061c0 <_printf_float+0x1a4>
 80061da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e0:	4299      	cmp	r1, r3
 80061e2:	db05      	blt.n	80061f0 <_printf_float+0x1d4>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	6121      	str	r1, [r4, #16]
 80061e8:	07d8      	lsls	r0, r3, #31
 80061ea:	d5ea      	bpl.n	80061c2 <_printf_float+0x1a6>
 80061ec:	1c4b      	adds	r3, r1, #1
 80061ee:	e7e7      	b.n	80061c0 <_printf_float+0x1a4>
 80061f0:	2900      	cmp	r1, #0
 80061f2:	bfd4      	ite	le
 80061f4:	f1c1 0202 	rsble	r2, r1, #2
 80061f8:	2201      	movgt	r2, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	e7e0      	b.n	80061c0 <_printf_float+0x1a4>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	055a      	lsls	r2, r3, #21
 8006202:	d407      	bmi.n	8006214 <_printf_float+0x1f8>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	4642      	mov	r2, r8
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	d12c      	bne.n	800626c <_printf_float+0x250>
 8006212:	e764      	b.n	80060de <_printf_float+0xc2>
 8006214:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006218:	f240 80e0 	bls.w	80063dc <_printf_float+0x3c0>
 800621c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006220:	2200      	movs	r2, #0
 8006222:	2300      	movs	r3, #0
 8006224:	f7fa fc68 	bl	8000af8 <__aeabi_dcmpeq>
 8006228:	2800      	cmp	r0, #0
 800622a:	d034      	beq.n	8006296 <_printf_float+0x27a>
 800622c:	4a37      	ldr	r2, [pc, #220]	; (800630c <_printf_float+0x2f0>)
 800622e:	2301      	movs	r3, #1
 8006230:	4631      	mov	r1, r6
 8006232:	4628      	mov	r0, r5
 8006234:	47b8      	blx	r7
 8006236:	3001      	adds	r0, #1
 8006238:	f43f af51 	beq.w	80060de <_printf_float+0xc2>
 800623c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006240:	429a      	cmp	r2, r3
 8006242:	db02      	blt.n	800624a <_printf_float+0x22e>
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	07d8      	lsls	r0, r3, #31
 8006248:	d510      	bpl.n	800626c <_printf_float+0x250>
 800624a:	ee18 3a10 	vmov	r3, s16
 800624e:	4652      	mov	r2, sl
 8006250:	4631      	mov	r1, r6
 8006252:	4628      	mov	r0, r5
 8006254:	47b8      	blx	r7
 8006256:	3001      	adds	r0, #1
 8006258:	f43f af41 	beq.w	80060de <_printf_float+0xc2>
 800625c:	f04f 0800 	mov.w	r8, #0
 8006260:	f104 091a 	add.w	r9, r4, #26
 8006264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006266:	3b01      	subs	r3, #1
 8006268:	4543      	cmp	r3, r8
 800626a:	dc09      	bgt.n	8006280 <_printf_float+0x264>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	079b      	lsls	r3, r3, #30
 8006270:	f100 8105 	bmi.w	800647e <_printf_float+0x462>
 8006274:	68e0      	ldr	r0, [r4, #12]
 8006276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006278:	4298      	cmp	r0, r3
 800627a:	bfb8      	it	lt
 800627c:	4618      	movlt	r0, r3
 800627e:	e730      	b.n	80060e2 <_printf_float+0xc6>
 8006280:	2301      	movs	r3, #1
 8006282:	464a      	mov	r2, r9
 8006284:	4631      	mov	r1, r6
 8006286:	4628      	mov	r0, r5
 8006288:	47b8      	blx	r7
 800628a:	3001      	adds	r0, #1
 800628c:	f43f af27 	beq.w	80060de <_printf_float+0xc2>
 8006290:	f108 0801 	add.w	r8, r8, #1
 8006294:	e7e6      	b.n	8006264 <_printf_float+0x248>
 8006296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006298:	2b00      	cmp	r3, #0
 800629a:	dc39      	bgt.n	8006310 <_printf_float+0x2f4>
 800629c:	4a1b      	ldr	r2, [pc, #108]	; (800630c <_printf_float+0x2f0>)
 800629e:	2301      	movs	r3, #1
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	f43f af19 	beq.w	80060de <_printf_float+0xc2>
 80062ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062b0:	4313      	orrs	r3, r2
 80062b2:	d102      	bne.n	80062ba <_printf_float+0x29e>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	07d9      	lsls	r1, r3, #31
 80062b8:	d5d8      	bpl.n	800626c <_printf_float+0x250>
 80062ba:	ee18 3a10 	vmov	r3, s16
 80062be:	4652      	mov	r2, sl
 80062c0:	4631      	mov	r1, r6
 80062c2:	4628      	mov	r0, r5
 80062c4:	47b8      	blx	r7
 80062c6:	3001      	adds	r0, #1
 80062c8:	f43f af09 	beq.w	80060de <_printf_float+0xc2>
 80062cc:	f04f 0900 	mov.w	r9, #0
 80062d0:	f104 0a1a 	add.w	sl, r4, #26
 80062d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d6:	425b      	negs	r3, r3
 80062d8:	454b      	cmp	r3, r9
 80062da:	dc01      	bgt.n	80062e0 <_printf_float+0x2c4>
 80062dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062de:	e792      	b.n	8006206 <_printf_float+0x1ea>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4652      	mov	r2, sl
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	f43f aef7 	beq.w	80060de <_printf_float+0xc2>
 80062f0:	f109 0901 	add.w	r9, r9, #1
 80062f4:	e7ee      	b.n	80062d4 <_printf_float+0x2b8>
 80062f6:	bf00      	nop
 80062f8:	7fefffff 	.word	0x7fefffff
 80062fc:	0800c900 	.word	0x0800c900
 8006300:	0800c904 	.word	0x0800c904
 8006304:	0800c90c 	.word	0x0800c90c
 8006308:	0800c908 	.word	0x0800c908
 800630c:	0800cd01 	.word	0x0800cd01
 8006310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006312:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006314:	429a      	cmp	r2, r3
 8006316:	bfa8      	it	ge
 8006318:	461a      	movge	r2, r3
 800631a:	2a00      	cmp	r2, #0
 800631c:	4691      	mov	r9, r2
 800631e:	dc37      	bgt.n	8006390 <_printf_float+0x374>
 8006320:	f04f 0b00 	mov.w	fp, #0
 8006324:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006328:	f104 021a 	add.w	r2, r4, #26
 800632c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800632e:	9305      	str	r3, [sp, #20]
 8006330:	eba3 0309 	sub.w	r3, r3, r9
 8006334:	455b      	cmp	r3, fp
 8006336:	dc33      	bgt.n	80063a0 <_printf_float+0x384>
 8006338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800633c:	429a      	cmp	r2, r3
 800633e:	db3b      	blt.n	80063b8 <_printf_float+0x39c>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	07da      	lsls	r2, r3, #31
 8006344:	d438      	bmi.n	80063b8 <_printf_float+0x39c>
 8006346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006348:	9a05      	ldr	r2, [sp, #20]
 800634a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800634c:	1a9a      	subs	r2, r3, r2
 800634e:	eba3 0901 	sub.w	r9, r3, r1
 8006352:	4591      	cmp	r9, r2
 8006354:	bfa8      	it	ge
 8006356:	4691      	movge	r9, r2
 8006358:	f1b9 0f00 	cmp.w	r9, #0
 800635c:	dc35      	bgt.n	80063ca <_printf_float+0x3ae>
 800635e:	f04f 0800 	mov.w	r8, #0
 8006362:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006366:	f104 0a1a 	add.w	sl, r4, #26
 800636a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	eba3 0309 	sub.w	r3, r3, r9
 8006374:	4543      	cmp	r3, r8
 8006376:	f77f af79 	ble.w	800626c <_printf_float+0x250>
 800637a:	2301      	movs	r3, #1
 800637c:	4652      	mov	r2, sl
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	f43f aeaa 	beq.w	80060de <_printf_float+0xc2>
 800638a:	f108 0801 	add.w	r8, r8, #1
 800638e:	e7ec      	b.n	800636a <_printf_float+0x34e>
 8006390:	4613      	mov	r3, r2
 8006392:	4631      	mov	r1, r6
 8006394:	4642      	mov	r2, r8
 8006396:	4628      	mov	r0, r5
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	d1c0      	bne.n	8006320 <_printf_float+0x304>
 800639e:	e69e      	b.n	80060de <_printf_float+0xc2>
 80063a0:	2301      	movs	r3, #1
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	9205      	str	r2, [sp, #20]
 80063a8:	47b8      	blx	r7
 80063aa:	3001      	adds	r0, #1
 80063ac:	f43f ae97 	beq.w	80060de <_printf_float+0xc2>
 80063b0:	9a05      	ldr	r2, [sp, #20]
 80063b2:	f10b 0b01 	add.w	fp, fp, #1
 80063b6:	e7b9      	b.n	800632c <_printf_float+0x310>
 80063b8:	ee18 3a10 	vmov	r3, s16
 80063bc:	4652      	mov	r2, sl
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	47b8      	blx	r7
 80063c4:	3001      	adds	r0, #1
 80063c6:	d1be      	bne.n	8006346 <_printf_float+0x32a>
 80063c8:	e689      	b.n	80060de <_printf_float+0xc2>
 80063ca:	9a05      	ldr	r2, [sp, #20]
 80063cc:	464b      	mov	r3, r9
 80063ce:	4442      	add	r2, r8
 80063d0:	4631      	mov	r1, r6
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	d1c1      	bne.n	800635e <_printf_float+0x342>
 80063da:	e680      	b.n	80060de <_printf_float+0xc2>
 80063dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063de:	2a01      	cmp	r2, #1
 80063e0:	dc01      	bgt.n	80063e6 <_printf_float+0x3ca>
 80063e2:	07db      	lsls	r3, r3, #31
 80063e4:	d538      	bpl.n	8006458 <_printf_float+0x43c>
 80063e6:	2301      	movs	r3, #1
 80063e8:	4642      	mov	r2, r8
 80063ea:	4631      	mov	r1, r6
 80063ec:	4628      	mov	r0, r5
 80063ee:	47b8      	blx	r7
 80063f0:	3001      	adds	r0, #1
 80063f2:	f43f ae74 	beq.w	80060de <_printf_float+0xc2>
 80063f6:	ee18 3a10 	vmov	r3, s16
 80063fa:	4652      	mov	r2, sl
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	f43f ae6b 	beq.w	80060de <_printf_float+0xc2>
 8006408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	f7fa fb72 	bl	8000af8 <__aeabi_dcmpeq>
 8006414:	b9d8      	cbnz	r0, 800644e <_printf_float+0x432>
 8006416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006418:	f108 0201 	add.w	r2, r8, #1
 800641c:	3b01      	subs	r3, #1
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	d10e      	bne.n	8006446 <_printf_float+0x42a>
 8006428:	e659      	b.n	80060de <_printf_float+0xc2>
 800642a:	2301      	movs	r3, #1
 800642c:	4652      	mov	r2, sl
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f ae52 	beq.w	80060de <_printf_float+0xc2>
 800643a:	f108 0801 	add.w	r8, r8, #1
 800643e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006440:	3b01      	subs	r3, #1
 8006442:	4543      	cmp	r3, r8
 8006444:	dcf1      	bgt.n	800642a <_printf_float+0x40e>
 8006446:	464b      	mov	r3, r9
 8006448:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800644c:	e6dc      	b.n	8006208 <_printf_float+0x1ec>
 800644e:	f04f 0800 	mov.w	r8, #0
 8006452:	f104 0a1a 	add.w	sl, r4, #26
 8006456:	e7f2      	b.n	800643e <_printf_float+0x422>
 8006458:	2301      	movs	r3, #1
 800645a:	4642      	mov	r2, r8
 800645c:	e7df      	b.n	800641e <_printf_float+0x402>
 800645e:	2301      	movs	r3, #1
 8006460:	464a      	mov	r2, r9
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	f43f ae38 	beq.w	80060de <_printf_float+0xc2>
 800646e:	f108 0801 	add.w	r8, r8, #1
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006476:	1a5b      	subs	r3, r3, r1
 8006478:	4543      	cmp	r3, r8
 800647a:	dcf0      	bgt.n	800645e <_printf_float+0x442>
 800647c:	e6fa      	b.n	8006274 <_printf_float+0x258>
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	f104 0919 	add.w	r9, r4, #25
 8006486:	e7f4      	b.n	8006472 <_printf_float+0x456>

08006488 <_printf_common>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	4616      	mov	r6, r2
 800648e:	4699      	mov	r9, r3
 8006490:	688a      	ldr	r2, [r1, #8]
 8006492:	690b      	ldr	r3, [r1, #16]
 8006494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006498:	4293      	cmp	r3, r2
 800649a:	bfb8      	it	lt
 800649c:	4613      	movlt	r3, r2
 800649e:	6033      	str	r3, [r6, #0]
 80064a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064a4:	4607      	mov	r7, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	b10a      	cbz	r2, 80064ae <_printf_common+0x26>
 80064aa:	3301      	adds	r3, #1
 80064ac:	6033      	str	r3, [r6, #0]
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	0699      	lsls	r1, r3, #26
 80064b2:	bf42      	ittt	mi
 80064b4:	6833      	ldrmi	r3, [r6, #0]
 80064b6:	3302      	addmi	r3, #2
 80064b8:	6033      	strmi	r3, [r6, #0]
 80064ba:	6825      	ldr	r5, [r4, #0]
 80064bc:	f015 0506 	ands.w	r5, r5, #6
 80064c0:	d106      	bne.n	80064d0 <_printf_common+0x48>
 80064c2:	f104 0a19 	add.w	sl, r4, #25
 80064c6:	68e3      	ldr	r3, [r4, #12]
 80064c8:	6832      	ldr	r2, [r6, #0]
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	dc26      	bgt.n	800651e <_printf_common+0x96>
 80064d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064d4:	1e13      	subs	r3, r2, #0
 80064d6:	6822      	ldr	r2, [r4, #0]
 80064d8:	bf18      	it	ne
 80064da:	2301      	movne	r3, #1
 80064dc:	0692      	lsls	r2, r2, #26
 80064de:	d42b      	bmi.n	8006538 <_printf_common+0xb0>
 80064e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064e4:	4649      	mov	r1, r9
 80064e6:	4638      	mov	r0, r7
 80064e8:	47c0      	blx	r8
 80064ea:	3001      	adds	r0, #1
 80064ec:	d01e      	beq.n	800652c <_printf_common+0xa4>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	68e5      	ldr	r5, [r4, #12]
 80064f2:	6832      	ldr	r2, [r6, #0]
 80064f4:	f003 0306 	and.w	r3, r3, #6
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	bf08      	it	eq
 80064fc:	1aad      	subeq	r5, r5, r2
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	6922      	ldr	r2, [r4, #16]
 8006502:	bf0c      	ite	eq
 8006504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006508:	2500      	movne	r5, #0
 800650a:	4293      	cmp	r3, r2
 800650c:	bfc4      	itt	gt
 800650e:	1a9b      	subgt	r3, r3, r2
 8006510:	18ed      	addgt	r5, r5, r3
 8006512:	2600      	movs	r6, #0
 8006514:	341a      	adds	r4, #26
 8006516:	42b5      	cmp	r5, r6
 8006518:	d11a      	bne.n	8006550 <_printf_common+0xc8>
 800651a:	2000      	movs	r0, #0
 800651c:	e008      	b.n	8006530 <_printf_common+0xa8>
 800651e:	2301      	movs	r3, #1
 8006520:	4652      	mov	r2, sl
 8006522:	4649      	mov	r1, r9
 8006524:	4638      	mov	r0, r7
 8006526:	47c0      	blx	r8
 8006528:	3001      	adds	r0, #1
 800652a:	d103      	bne.n	8006534 <_printf_common+0xac>
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006534:	3501      	adds	r5, #1
 8006536:	e7c6      	b.n	80064c6 <_printf_common+0x3e>
 8006538:	18e1      	adds	r1, r4, r3
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	2030      	movs	r0, #48	; 0x30
 800653e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006542:	4422      	add	r2, r4
 8006544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800654c:	3302      	adds	r3, #2
 800654e:	e7c7      	b.n	80064e0 <_printf_common+0x58>
 8006550:	2301      	movs	r3, #1
 8006552:	4622      	mov	r2, r4
 8006554:	4649      	mov	r1, r9
 8006556:	4638      	mov	r0, r7
 8006558:	47c0      	blx	r8
 800655a:	3001      	adds	r0, #1
 800655c:	d0e6      	beq.n	800652c <_printf_common+0xa4>
 800655e:	3601      	adds	r6, #1
 8006560:	e7d9      	b.n	8006516 <_printf_common+0x8e>
	...

08006564 <_printf_i>:
 8006564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006568:	7e0f      	ldrb	r7, [r1, #24]
 800656a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800656c:	2f78      	cmp	r7, #120	; 0x78
 800656e:	4691      	mov	r9, r2
 8006570:	4680      	mov	r8, r0
 8006572:	460c      	mov	r4, r1
 8006574:	469a      	mov	sl, r3
 8006576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800657a:	d807      	bhi.n	800658c <_printf_i+0x28>
 800657c:	2f62      	cmp	r7, #98	; 0x62
 800657e:	d80a      	bhi.n	8006596 <_printf_i+0x32>
 8006580:	2f00      	cmp	r7, #0
 8006582:	f000 80d8 	beq.w	8006736 <_printf_i+0x1d2>
 8006586:	2f58      	cmp	r7, #88	; 0x58
 8006588:	f000 80a3 	beq.w	80066d2 <_printf_i+0x16e>
 800658c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006594:	e03a      	b.n	800660c <_printf_i+0xa8>
 8006596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800659a:	2b15      	cmp	r3, #21
 800659c:	d8f6      	bhi.n	800658c <_printf_i+0x28>
 800659e:	a101      	add	r1, pc, #4	; (adr r1, 80065a4 <_printf_i+0x40>)
 80065a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065a4:	080065fd 	.word	0x080065fd
 80065a8:	08006611 	.word	0x08006611
 80065ac:	0800658d 	.word	0x0800658d
 80065b0:	0800658d 	.word	0x0800658d
 80065b4:	0800658d 	.word	0x0800658d
 80065b8:	0800658d 	.word	0x0800658d
 80065bc:	08006611 	.word	0x08006611
 80065c0:	0800658d 	.word	0x0800658d
 80065c4:	0800658d 	.word	0x0800658d
 80065c8:	0800658d 	.word	0x0800658d
 80065cc:	0800658d 	.word	0x0800658d
 80065d0:	0800671d 	.word	0x0800671d
 80065d4:	08006641 	.word	0x08006641
 80065d8:	080066ff 	.word	0x080066ff
 80065dc:	0800658d 	.word	0x0800658d
 80065e0:	0800658d 	.word	0x0800658d
 80065e4:	0800673f 	.word	0x0800673f
 80065e8:	0800658d 	.word	0x0800658d
 80065ec:	08006641 	.word	0x08006641
 80065f0:	0800658d 	.word	0x0800658d
 80065f4:	0800658d 	.word	0x0800658d
 80065f8:	08006707 	.word	0x08006707
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	1d1a      	adds	r2, r3, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	602a      	str	r2, [r5, #0]
 8006604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800660c:	2301      	movs	r3, #1
 800660e:	e0a3      	b.n	8006758 <_printf_i+0x1f4>
 8006610:	6820      	ldr	r0, [r4, #0]
 8006612:	6829      	ldr	r1, [r5, #0]
 8006614:	0606      	lsls	r6, r0, #24
 8006616:	f101 0304 	add.w	r3, r1, #4
 800661a:	d50a      	bpl.n	8006632 <_printf_i+0xce>
 800661c:	680e      	ldr	r6, [r1, #0]
 800661e:	602b      	str	r3, [r5, #0]
 8006620:	2e00      	cmp	r6, #0
 8006622:	da03      	bge.n	800662c <_printf_i+0xc8>
 8006624:	232d      	movs	r3, #45	; 0x2d
 8006626:	4276      	negs	r6, r6
 8006628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800662c:	485e      	ldr	r0, [pc, #376]	; (80067a8 <_printf_i+0x244>)
 800662e:	230a      	movs	r3, #10
 8006630:	e019      	b.n	8006666 <_printf_i+0x102>
 8006632:	680e      	ldr	r6, [r1, #0]
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	f010 0f40 	tst.w	r0, #64	; 0x40
 800663a:	bf18      	it	ne
 800663c:	b236      	sxthne	r6, r6
 800663e:	e7ef      	b.n	8006620 <_printf_i+0xbc>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	6820      	ldr	r0, [r4, #0]
 8006644:	1d19      	adds	r1, r3, #4
 8006646:	6029      	str	r1, [r5, #0]
 8006648:	0601      	lsls	r1, r0, #24
 800664a:	d501      	bpl.n	8006650 <_printf_i+0xec>
 800664c:	681e      	ldr	r6, [r3, #0]
 800664e:	e002      	b.n	8006656 <_printf_i+0xf2>
 8006650:	0646      	lsls	r6, r0, #25
 8006652:	d5fb      	bpl.n	800664c <_printf_i+0xe8>
 8006654:	881e      	ldrh	r6, [r3, #0]
 8006656:	4854      	ldr	r0, [pc, #336]	; (80067a8 <_printf_i+0x244>)
 8006658:	2f6f      	cmp	r7, #111	; 0x6f
 800665a:	bf0c      	ite	eq
 800665c:	2308      	moveq	r3, #8
 800665e:	230a      	movne	r3, #10
 8006660:	2100      	movs	r1, #0
 8006662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006666:	6865      	ldr	r5, [r4, #4]
 8006668:	60a5      	str	r5, [r4, #8]
 800666a:	2d00      	cmp	r5, #0
 800666c:	bfa2      	ittt	ge
 800666e:	6821      	ldrge	r1, [r4, #0]
 8006670:	f021 0104 	bicge.w	r1, r1, #4
 8006674:	6021      	strge	r1, [r4, #0]
 8006676:	b90e      	cbnz	r6, 800667c <_printf_i+0x118>
 8006678:	2d00      	cmp	r5, #0
 800667a:	d04d      	beq.n	8006718 <_printf_i+0x1b4>
 800667c:	4615      	mov	r5, r2
 800667e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006682:	fb03 6711 	mls	r7, r3, r1, r6
 8006686:	5dc7      	ldrb	r7, [r0, r7]
 8006688:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800668c:	4637      	mov	r7, r6
 800668e:	42bb      	cmp	r3, r7
 8006690:	460e      	mov	r6, r1
 8006692:	d9f4      	bls.n	800667e <_printf_i+0x11a>
 8006694:	2b08      	cmp	r3, #8
 8006696:	d10b      	bne.n	80066b0 <_printf_i+0x14c>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	07de      	lsls	r6, r3, #31
 800669c:	d508      	bpl.n	80066b0 <_printf_i+0x14c>
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	6861      	ldr	r1, [r4, #4]
 80066a2:	4299      	cmp	r1, r3
 80066a4:	bfde      	ittt	le
 80066a6:	2330      	movle	r3, #48	; 0x30
 80066a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066b0:	1b52      	subs	r2, r2, r5
 80066b2:	6122      	str	r2, [r4, #16]
 80066b4:	f8cd a000 	str.w	sl, [sp]
 80066b8:	464b      	mov	r3, r9
 80066ba:	aa03      	add	r2, sp, #12
 80066bc:	4621      	mov	r1, r4
 80066be:	4640      	mov	r0, r8
 80066c0:	f7ff fee2 	bl	8006488 <_printf_common>
 80066c4:	3001      	adds	r0, #1
 80066c6:	d14c      	bne.n	8006762 <_printf_i+0x1fe>
 80066c8:	f04f 30ff 	mov.w	r0, #4294967295
 80066cc:	b004      	add	sp, #16
 80066ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066d2:	4835      	ldr	r0, [pc, #212]	; (80067a8 <_printf_i+0x244>)
 80066d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066d8:	6829      	ldr	r1, [r5, #0]
 80066da:	6823      	ldr	r3, [r4, #0]
 80066dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80066e0:	6029      	str	r1, [r5, #0]
 80066e2:	061d      	lsls	r5, r3, #24
 80066e4:	d514      	bpl.n	8006710 <_printf_i+0x1ac>
 80066e6:	07df      	lsls	r7, r3, #31
 80066e8:	bf44      	itt	mi
 80066ea:	f043 0320 	orrmi.w	r3, r3, #32
 80066ee:	6023      	strmi	r3, [r4, #0]
 80066f0:	b91e      	cbnz	r6, 80066fa <_printf_i+0x196>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	f023 0320 	bic.w	r3, r3, #32
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	2310      	movs	r3, #16
 80066fc:	e7b0      	b.n	8006660 <_printf_i+0xfc>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f043 0320 	orr.w	r3, r3, #32
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	2378      	movs	r3, #120	; 0x78
 8006708:	4828      	ldr	r0, [pc, #160]	; (80067ac <_printf_i+0x248>)
 800670a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800670e:	e7e3      	b.n	80066d8 <_printf_i+0x174>
 8006710:	0659      	lsls	r1, r3, #25
 8006712:	bf48      	it	mi
 8006714:	b2b6      	uxthmi	r6, r6
 8006716:	e7e6      	b.n	80066e6 <_printf_i+0x182>
 8006718:	4615      	mov	r5, r2
 800671a:	e7bb      	b.n	8006694 <_printf_i+0x130>
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	6826      	ldr	r6, [r4, #0]
 8006720:	6961      	ldr	r1, [r4, #20]
 8006722:	1d18      	adds	r0, r3, #4
 8006724:	6028      	str	r0, [r5, #0]
 8006726:	0635      	lsls	r5, r6, #24
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	d501      	bpl.n	8006730 <_printf_i+0x1cc>
 800672c:	6019      	str	r1, [r3, #0]
 800672e:	e002      	b.n	8006736 <_printf_i+0x1d2>
 8006730:	0670      	lsls	r0, r6, #25
 8006732:	d5fb      	bpl.n	800672c <_printf_i+0x1c8>
 8006734:	8019      	strh	r1, [r3, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	6123      	str	r3, [r4, #16]
 800673a:	4615      	mov	r5, r2
 800673c:	e7ba      	b.n	80066b4 <_printf_i+0x150>
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	1d1a      	adds	r2, r3, #4
 8006742:	602a      	str	r2, [r5, #0]
 8006744:	681d      	ldr	r5, [r3, #0]
 8006746:	6862      	ldr	r2, [r4, #4]
 8006748:	2100      	movs	r1, #0
 800674a:	4628      	mov	r0, r5
 800674c:	f7f9 fd60 	bl	8000210 <memchr>
 8006750:	b108      	cbz	r0, 8006756 <_printf_i+0x1f2>
 8006752:	1b40      	subs	r0, r0, r5
 8006754:	6060      	str	r0, [r4, #4]
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	6123      	str	r3, [r4, #16]
 800675a:	2300      	movs	r3, #0
 800675c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006760:	e7a8      	b.n	80066b4 <_printf_i+0x150>
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	462a      	mov	r2, r5
 8006766:	4649      	mov	r1, r9
 8006768:	4640      	mov	r0, r8
 800676a:	47d0      	blx	sl
 800676c:	3001      	adds	r0, #1
 800676e:	d0ab      	beq.n	80066c8 <_printf_i+0x164>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	079b      	lsls	r3, r3, #30
 8006774:	d413      	bmi.n	800679e <_printf_i+0x23a>
 8006776:	68e0      	ldr	r0, [r4, #12]
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	4298      	cmp	r0, r3
 800677c:	bfb8      	it	lt
 800677e:	4618      	movlt	r0, r3
 8006780:	e7a4      	b.n	80066cc <_printf_i+0x168>
 8006782:	2301      	movs	r3, #1
 8006784:	4632      	mov	r2, r6
 8006786:	4649      	mov	r1, r9
 8006788:	4640      	mov	r0, r8
 800678a:	47d0      	blx	sl
 800678c:	3001      	adds	r0, #1
 800678e:	d09b      	beq.n	80066c8 <_printf_i+0x164>
 8006790:	3501      	adds	r5, #1
 8006792:	68e3      	ldr	r3, [r4, #12]
 8006794:	9903      	ldr	r1, [sp, #12]
 8006796:	1a5b      	subs	r3, r3, r1
 8006798:	42ab      	cmp	r3, r5
 800679a:	dcf2      	bgt.n	8006782 <_printf_i+0x21e>
 800679c:	e7eb      	b.n	8006776 <_printf_i+0x212>
 800679e:	2500      	movs	r5, #0
 80067a0:	f104 0619 	add.w	r6, r4, #25
 80067a4:	e7f5      	b.n	8006792 <_printf_i+0x22e>
 80067a6:	bf00      	nop
 80067a8:	0800c910 	.word	0x0800c910
 80067ac:	0800c921 	.word	0x0800c921

080067b0 <_scanf_float>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	b087      	sub	sp, #28
 80067b6:	4617      	mov	r7, r2
 80067b8:	9303      	str	r3, [sp, #12]
 80067ba:	688b      	ldr	r3, [r1, #8]
 80067bc:	1e5a      	subs	r2, r3, #1
 80067be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80067c2:	bf83      	ittte	hi
 80067c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80067c8:	195b      	addhi	r3, r3, r5
 80067ca:	9302      	strhi	r3, [sp, #8]
 80067cc:	2300      	movls	r3, #0
 80067ce:	bf86      	itte	hi
 80067d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80067d4:	608b      	strhi	r3, [r1, #8]
 80067d6:	9302      	strls	r3, [sp, #8]
 80067d8:	680b      	ldr	r3, [r1, #0]
 80067da:	468b      	mov	fp, r1
 80067dc:	2500      	movs	r5, #0
 80067de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80067e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80067e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80067ea:	4680      	mov	r8, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	465e      	mov	r6, fp
 80067f0:	46aa      	mov	sl, r5
 80067f2:	46a9      	mov	r9, r5
 80067f4:	9501      	str	r5, [sp, #4]
 80067f6:	68a2      	ldr	r2, [r4, #8]
 80067f8:	b152      	cbz	r2, 8006810 <_scanf_float+0x60>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b4e      	cmp	r3, #78	; 0x4e
 8006800:	d864      	bhi.n	80068cc <_scanf_float+0x11c>
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d83c      	bhi.n	8006880 <_scanf_float+0xd0>
 8006806:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800680a:	b2c8      	uxtb	r0, r1
 800680c:	280e      	cmp	r0, #14
 800680e:	d93a      	bls.n	8006886 <_scanf_float+0xd6>
 8006810:	f1b9 0f00 	cmp.w	r9, #0
 8006814:	d003      	beq.n	800681e <_scanf_float+0x6e>
 8006816:	6823      	ldr	r3, [r4, #0]
 8006818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006822:	f1ba 0f01 	cmp.w	sl, #1
 8006826:	f200 8113 	bhi.w	8006a50 <_scanf_float+0x2a0>
 800682a:	455e      	cmp	r6, fp
 800682c:	f200 8105 	bhi.w	8006a3a <_scanf_float+0x28a>
 8006830:	2501      	movs	r5, #1
 8006832:	4628      	mov	r0, r5
 8006834:	b007      	add	sp, #28
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800683e:	2a0d      	cmp	r2, #13
 8006840:	d8e6      	bhi.n	8006810 <_scanf_float+0x60>
 8006842:	a101      	add	r1, pc, #4	; (adr r1, 8006848 <_scanf_float+0x98>)
 8006844:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006848:	08006987 	.word	0x08006987
 800684c:	08006811 	.word	0x08006811
 8006850:	08006811 	.word	0x08006811
 8006854:	08006811 	.word	0x08006811
 8006858:	080069e7 	.word	0x080069e7
 800685c:	080069bf 	.word	0x080069bf
 8006860:	08006811 	.word	0x08006811
 8006864:	08006811 	.word	0x08006811
 8006868:	08006995 	.word	0x08006995
 800686c:	08006811 	.word	0x08006811
 8006870:	08006811 	.word	0x08006811
 8006874:	08006811 	.word	0x08006811
 8006878:	08006811 	.word	0x08006811
 800687c:	0800694d 	.word	0x0800694d
 8006880:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006884:	e7db      	b.n	800683e <_scanf_float+0x8e>
 8006886:	290e      	cmp	r1, #14
 8006888:	d8c2      	bhi.n	8006810 <_scanf_float+0x60>
 800688a:	a001      	add	r0, pc, #4	; (adr r0, 8006890 <_scanf_float+0xe0>)
 800688c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006890:	0800693f 	.word	0x0800693f
 8006894:	08006811 	.word	0x08006811
 8006898:	0800693f 	.word	0x0800693f
 800689c:	080069d3 	.word	0x080069d3
 80068a0:	08006811 	.word	0x08006811
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	08006929 	.word	0x08006929
 80068ac:	08006929 	.word	0x08006929
 80068b0:	08006929 	.word	0x08006929
 80068b4:	08006929 	.word	0x08006929
 80068b8:	08006929 	.word	0x08006929
 80068bc:	08006929 	.word	0x08006929
 80068c0:	08006929 	.word	0x08006929
 80068c4:	08006929 	.word	0x08006929
 80068c8:	08006929 	.word	0x08006929
 80068cc:	2b6e      	cmp	r3, #110	; 0x6e
 80068ce:	d809      	bhi.n	80068e4 <_scanf_float+0x134>
 80068d0:	2b60      	cmp	r3, #96	; 0x60
 80068d2:	d8b2      	bhi.n	800683a <_scanf_float+0x8a>
 80068d4:	2b54      	cmp	r3, #84	; 0x54
 80068d6:	d077      	beq.n	80069c8 <_scanf_float+0x218>
 80068d8:	2b59      	cmp	r3, #89	; 0x59
 80068da:	d199      	bne.n	8006810 <_scanf_float+0x60>
 80068dc:	2d07      	cmp	r5, #7
 80068de:	d197      	bne.n	8006810 <_scanf_float+0x60>
 80068e0:	2508      	movs	r5, #8
 80068e2:	e029      	b.n	8006938 <_scanf_float+0x188>
 80068e4:	2b74      	cmp	r3, #116	; 0x74
 80068e6:	d06f      	beq.n	80069c8 <_scanf_float+0x218>
 80068e8:	2b79      	cmp	r3, #121	; 0x79
 80068ea:	e7f6      	b.n	80068da <_scanf_float+0x12a>
 80068ec:	6821      	ldr	r1, [r4, #0]
 80068ee:	05c8      	lsls	r0, r1, #23
 80068f0:	d51a      	bpl.n	8006928 <_scanf_float+0x178>
 80068f2:	9b02      	ldr	r3, [sp, #8]
 80068f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80068f8:	6021      	str	r1, [r4, #0]
 80068fa:	f109 0901 	add.w	r9, r9, #1
 80068fe:	b11b      	cbz	r3, 8006908 <_scanf_float+0x158>
 8006900:	3b01      	subs	r3, #1
 8006902:	3201      	adds	r2, #1
 8006904:	9302      	str	r3, [sp, #8]
 8006906:	60a2      	str	r2, [r4, #8]
 8006908:	68a3      	ldr	r3, [r4, #8]
 800690a:	3b01      	subs	r3, #1
 800690c:	60a3      	str	r3, [r4, #8]
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	3301      	adds	r3, #1
 8006912:	6123      	str	r3, [r4, #16]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3b01      	subs	r3, #1
 8006918:	2b00      	cmp	r3, #0
 800691a:	607b      	str	r3, [r7, #4]
 800691c:	f340 8084 	ble.w	8006a28 <_scanf_float+0x278>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	e766      	b.n	80067f6 <_scanf_float+0x46>
 8006928:	eb1a 0f05 	cmn.w	sl, r5
 800692c:	f47f af70 	bne.w	8006810 <_scanf_float+0x60>
 8006930:	6822      	ldr	r2, [r4, #0]
 8006932:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006936:	6022      	str	r2, [r4, #0]
 8006938:	f806 3b01 	strb.w	r3, [r6], #1
 800693c:	e7e4      	b.n	8006908 <_scanf_float+0x158>
 800693e:	6822      	ldr	r2, [r4, #0]
 8006940:	0610      	lsls	r0, r2, #24
 8006942:	f57f af65 	bpl.w	8006810 <_scanf_float+0x60>
 8006946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800694a:	e7f4      	b.n	8006936 <_scanf_float+0x186>
 800694c:	f1ba 0f00 	cmp.w	sl, #0
 8006950:	d10e      	bne.n	8006970 <_scanf_float+0x1c0>
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	d10e      	bne.n	8006976 <_scanf_float+0x1c6>
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800695e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006962:	d108      	bne.n	8006976 <_scanf_float+0x1c6>
 8006964:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006968:	6022      	str	r2, [r4, #0]
 800696a:	f04f 0a01 	mov.w	sl, #1
 800696e:	e7e3      	b.n	8006938 <_scanf_float+0x188>
 8006970:	f1ba 0f02 	cmp.w	sl, #2
 8006974:	d055      	beq.n	8006a22 <_scanf_float+0x272>
 8006976:	2d01      	cmp	r5, #1
 8006978:	d002      	beq.n	8006980 <_scanf_float+0x1d0>
 800697a:	2d04      	cmp	r5, #4
 800697c:	f47f af48 	bne.w	8006810 <_scanf_float+0x60>
 8006980:	3501      	adds	r5, #1
 8006982:	b2ed      	uxtb	r5, r5
 8006984:	e7d8      	b.n	8006938 <_scanf_float+0x188>
 8006986:	f1ba 0f01 	cmp.w	sl, #1
 800698a:	f47f af41 	bne.w	8006810 <_scanf_float+0x60>
 800698e:	f04f 0a02 	mov.w	sl, #2
 8006992:	e7d1      	b.n	8006938 <_scanf_float+0x188>
 8006994:	b97d      	cbnz	r5, 80069b6 <_scanf_float+0x206>
 8006996:	f1b9 0f00 	cmp.w	r9, #0
 800699a:	f47f af3c 	bne.w	8006816 <_scanf_float+0x66>
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069a8:	f47f af39 	bne.w	800681e <_scanf_float+0x6e>
 80069ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069b0:	6022      	str	r2, [r4, #0]
 80069b2:	2501      	movs	r5, #1
 80069b4:	e7c0      	b.n	8006938 <_scanf_float+0x188>
 80069b6:	2d03      	cmp	r5, #3
 80069b8:	d0e2      	beq.n	8006980 <_scanf_float+0x1d0>
 80069ba:	2d05      	cmp	r5, #5
 80069bc:	e7de      	b.n	800697c <_scanf_float+0x1cc>
 80069be:	2d02      	cmp	r5, #2
 80069c0:	f47f af26 	bne.w	8006810 <_scanf_float+0x60>
 80069c4:	2503      	movs	r5, #3
 80069c6:	e7b7      	b.n	8006938 <_scanf_float+0x188>
 80069c8:	2d06      	cmp	r5, #6
 80069ca:	f47f af21 	bne.w	8006810 <_scanf_float+0x60>
 80069ce:	2507      	movs	r5, #7
 80069d0:	e7b2      	b.n	8006938 <_scanf_float+0x188>
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	0591      	lsls	r1, r2, #22
 80069d6:	f57f af1b 	bpl.w	8006810 <_scanf_float+0x60>
 80069da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80069e4:	e7a8      	b.n	8006938 <_scanf_float+0x188>
 80069e6:	6822      	ldr	r2, [r4, #0]
 80069e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80069ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80069f0:	d006      	beq.n	8006a00 <_scanf_float+0x250>
 80069f2:	0550      	lsls	r0, r2, #21
 80069f4:	f57f af0c 	bpl.w	8006810 <_scanf_float+0x60>
 80069f8:	f1b9 0f00 	cmp.w	r9, #0
 80069fc:	f43f af0f 	beq.w	800681e <_scanf_float+0x6e>
 8006a00:	0591      	lsls	r1, r2, #22
 8006a02:	bf58      	it	pl
 8006a04:	9901      	ldrpl	r1, [sp, #4]
 8006a06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a0a:	bf58      	it	pl
 8006a0c:	eba9 0101 	subpl.w	r1, r9, r1
 8006a10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a14:	bf58      	it	pl
 8006a16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	f04f 0900 	mov.w	r9, #0
 8006a20:	e78a      	b.n	8006938 <_scanf_float+0x188>
 8006a22:	f04f 0a03 	mov.w	sl, #3
 8006a26:	e787      	b.n	8006938 <_scanf_float+0x188>
 8006a28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4798      	blx	r3
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f43f aedf 	beq.w	80067f6 <_scanf_float+0x46>
 8006a38:	e6ea      	b.n	8006810 <_scanf_float+0x60>
 8006a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a42:	463a      	mov	r2, r7
 8006a44:	4640      	mov	r0, r8
 8006a46:	4798      	blx	r3
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	6123      	str	r3, [r4, #16]
 8006a4e:	e6ec      	b.n	800682a <_scanf_float+0x7a>
 8006a50:	1e6b      	subs	r3, r5, #1
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d825      	bhi.n	8006aa2 <_scanf_float+0x2f2>
 8006a56:	2d02      	cmp	r5, #2
 8006a58:	d836      	bhi.n	8006ac8 <_scanf_float+0x318>
 8006a5a:	455e      	cmp	r6, fp
 8006a5c:	f67f aee8 	bls.w	8006830 <_scanf_float+0x80>
 8006a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a68:	463a      	mov	r2, r7
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4798      	blx	r3
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	6123      	str	r3, [r4, #16]
 8006a74:	e7f1      	b.n	8006a5a <_scanf_float+0x2aa>
 8006a76:	9802      	ldr	r0, [sp, #8]
 8006a78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006a80:	9002      	str	r0, [sp, #8]
 8006a82:	463a      	mov	r2, r7
 8006a84:	4640      	mov	r0, r8
 8006a86:	4798      	blx	r3
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	6123      	str	r3, [r4, #16]
 8006a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a92:	fa5f fa8a 	uxtb.w	sl, sl
 8006a96:	f1ba 0f02 	cmp.w	sl, #2
 8006a9a:	d1ec      	bne.n	8006a76 <_scanf_float+0x2c6>
 8006a9c:	3d03      	subs	r5, #3
 8006a9e:	b2ed      	uxtb	r5, r5
 8006aa0:	1b76      	subs	r6, r6, r5
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	05da      	lsls	r2, r3, #23
 8006aa6:	d52f      	bpl.n	8006b08 <_scanf_float+0x358>
 8006aa8:	055b      	lsls	r3, r3, #21
 8006aaa:	d510      	bpl.n	8006ace <_scanf_float+0x31e>
 8006aac:	455e      	cmp	r6, fp
 8006aae:	f67f aebf 	bls.w	8006830 <_scanf_float+0x80>
 8006ab2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ab6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aba:	463a      	mov	r2, r7
 8006abc:	4640      	mov	r0, r8
 8006abe:	4798      	blx	r3
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	6123      	str	r3, [r4, #16]
 8006ac6:	e7f1      	b.n	8006aac <_scanf_float+0x2fc>
 8006ac8:	46aa      	mov	sl, r5
 8006aca:	9602      	str	r6, [sp, #8]
 8006acc:	e7df      	b.n	8006a8e <_scanf_float+0x2de>
 8006ace:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	2965      	cmp	r1, #101	; 0x65
 8006ad6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ada:	f106 35ff 	add.w	r5, r6, #4294967295
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	d00c      	beq.n	8006afc <_scanf_float+0x34c>
 8006ae2:	2945      	cmp	r1, #69	; 0x45
 8006ae4:	d00a      	beq.n	8006afc <_scanf_float+0x34c>
 8006ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aea:	463a      	mov	r2, r7
 8006aec:	4640      	mov	r0, r8
 8006aee:	4798      	blx	r3
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	1eb5      	subs	r5, r6, #2
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b00:	463a      	mov	r2, r7
 8006b02:	4640      	mov	r0, r8
 8006b04:	4798      	blx	r3
 8006b06:	462e      	mov	r6, r5
 8006b08:	6825      	ldr	r5, [r4, #0]
 8006b0a:	f015 0510 	ands.w	r5, r5, #16
 8006b0e:	d159      	bne.n	8006bc4 <_scanf_float+0x414>
 8006b10:	7035      	strb	r5, [r6, #0]
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1c:	d11b      	bne.n	8006b56 <_scanf_float+0x3a6>
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	454b      	cmp	r3, r9
 8006b22:	eba3 0209 	sub.w	r2, r3, r9
 8006b26:	d123      	bne.n	8006b70 <_scanf_float+0x3c0>
 8006b28:	2200      	movs	r2, #0
 8006b2a:	4659      	mov	r1, fp
 8006b2c:	4640      	mov	r0, r8
 8006b2e:	f000 ff09 	bl	8007944 <_strtod_r>
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	9b03      	ldr	r3, [sp, #12]
 8006b36:	f012 0f02 	tst.w	r2, #2
 8006b3a:	ec57 6b10 	vmov	r6, r7, d0
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	d021      	beq.n	8006b86 <_scanf_float+0x3d6>
 8006b42:	9903      	ldr	r1, [sp, #12]
 8006b44:	1d1a      	adds	r2, r3, #4
 8006b46:	600a      	str	r2, [r1, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	e9c3 6700 	strd	r6, r7, [r3]
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60e3      	str	r3, [r4, #12]
 8006b54:	e66d      	b.n	8006832 <_scanf_float+0x82>
 8006b56:	9b04      	ldr	r3, [sp, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0e5      	beq.n	8006b28 <_scanf_float+0x378>
 8006b5c:	9905      	ldr	r1, [sp, #20]
 8006b5e:	230a      	movs	r3, #10
 8006b60:	462a      	mov	r2, r5
 8006b62:	3101      	adds	r1, #1
 8006b64:	4640      	mov	r0, r8
 8006b66:	f000 ff75 	bl	8007a54 <_strtol_r>
 8006b6a:	9b04      	ldr	r3, [sp, #16]
 8006b6c:	9e05      	ldr	r6, [sp, #20]
 8006b6e:	1ac2      	subs	r2, r0, r3
 8006b70:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006b74:	429e      	cmp	r6, r3
 8006b76:	bf28      	it	cs
 8006b78:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006b7c:	4912      	ldr	r1, [pc, #72]	; (8006bc8 <_scanf_float+0x418>)
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f82c 	bl	8006bdc <siprintf>
 8006b84:	e7d0      	b.n	8006b28 <_scanf_float+0x378>
 8006b86:	9903      	ldr	r1, [sp, #12]
 8006b88:	f012 0f04 	tst.w	r2, #4
 8006b8c:	f103 0204 	add.w	r2, r3, #4
 8006b90:	600a      	str	r2, [r1, #0]
 8006b92:	d1d9      	bne.n	8006b48 <_scanf_float+0x398>
 8006b94:	f8d3 8000 	ldr.w	r8, [r3]
 8006b98:	ee10 2a10 	vmov	r2, s0
 8006b9c:	ee10 0a10 	vmov	r0, s0
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 ffda 	bl	8000b5c <__aeabi_dcmpun>
 8006ba8:	b128      	cbz	r0, 8006bb6 <_scanf_float+0x406>
 8006baa:	4808      	ldr	r0, [pc, #32]	; (8006bcc <_scanf_float+0x41c>)
 8006bac:	f000 f810 	bl	8006bd0 <nanf>
 8006bb0:	ed88 0a00 	vstr	s0, [r8]
 8006bb4:	e7cb      	b.n	8006b4e <_scanf_float+0x39e>
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	4639      	mov	r1, r7
 8006bba:	f7fa f82d 	bl	8000c18 <__aeabi_d2f>
 8006bbe:	f8c8 0000 	str.w	r0, [r8]
 8006bc2:	e7c4      	b.n	8006b4e <_scanf_float+0x39e>
 8006bc4:	2500      	movs	r5, #0
 8006bc6:	e634      	b.n	8006832 <_scanf_float+0x82>
 8006bc8:	0800c932 	.word	0x0800c932
 8006bcc:	0800cd53 	.word	0x0800cd53

08006bd0 <nanf>:
 8006bd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006bd8 <nanf+0x8>
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	7fc00000 	.word	0x7fc00000

08006bdc <siprintf>:
 8006bdc:	b40e      	push	{r1, r2, r3}
 8006bde:	b500      	push	{lr}
 8006be0:	b09c      	sub	sp, #112	; 0x70
 8006be2:	ab1d      	add	r3, sp, #116	; 0x74
 8006be4:	9002      	str	r0, [sp, #8]
 8006be6:	9006      	str	r0, [sp, #24]
 8006be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006bec:	4809      	ldr	r0, [pc, #36]	; (8006c14 <siprintf+0x38>)
 8006bee:	9107      	str	r1, [sp, #28]
 8006bf0:	9104      	str	r1, [sp, #16]
 8006bf2:	4909      	ldr	r1, [pc, #36]	; (8006c18 <siprintf+0x3c>)
 8006bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf8:	9105      	str	r1, [sp, #20]
 8006bfa:	6800      	ldr	r0, [r0, #0]
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	a902      	add	r1, sp, #8
 8006c00:	f002 ff8a 	bl	8009b18 <_svfiprintf_r>
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	701a      	strb	r2, [r3, #0]
 8006c0a:	b01c      	add	sp, #112	; 0x70
 8006c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c10:	b003      	add	sp, #12
 8006c12:	4770      	bx	lr
 8006c14:	20000014 	.word	0x20000014
 8006c18:	ffff0208 	.word	0xffff0208

08006c1c <siscanf>:
 8006c1c:	b40e      	push	{r1, r2, r3}
 8006c1e:	b510      	push	{r4, lr}
 8006c20:	b09f      	sub	sp, #124	; 0x7c
 8006c22:	ac21      	add	r4, sp, #132	; 0x84
 8006c24:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c28:	f854 2b04 	ldr.w	r2, [r4], #4
 8006c2c:	9201      	str	r2, [sp, #4]
 8006c2e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006c32:	9004      	str	r0, [sp, #16]
 8006c34:	9008      	str	r0, [sp, #32]
 8006c36:	f7f9 fadd 	bl	80001f4 <strlen>
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <siscanf+0x50>)
 8006c3c:	9005      	str	r0, [sp, #20]
 8006c3e:	9009      	str	r0, [sp, #36]	; 0x24
 8006c40:	930d      	str	r3, [sp, #52]	; 0x34
 8006c42:	480b      	ldr	r0, [pc, #44]	; (8006c70 <siscanf+0x54>)
 8006c44:	9a01      	ldr	r2, [sp, #4]
 8006c46:	6800      	ldr	r0, [r0, #0]
 8006c48:	9403      	str	r4, [sp, #12]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9311      	str	r3, [sp, #68]	; 0x44
 8006c4e:	9316      	str	r3, [sp, #88]	; 0x58
 8006c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c54:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006c58:	a904      	add	r1, sp, #16
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	f003 f8b6 	bl	8009dcc <__ssvfiscanf_r>
 8006c60:	b01f      	add	sp, #124	; 0x7c
 8006c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c66:	b003      	add	sp, #12
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	08006c97 	.word	0x08006c97
 8006c70:	20000014 	.word	0x20000014

08006c74 <__sread>:
 8006c74:	b510      	push	{r4, lr}
 8006c76:	460c      	mov	r4, r1
 8006c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c7c:	f003 fb70 	bl	800a360 <_read_r>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	bfab      	itete	ge
 8006c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c86:	89a3      	ldrhlt	r3, [r4, #12]
 8006c88:	181b      	addge	r3, r3, r0
 8006c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c8e:	bfac      	ite	ge
 8006c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c92:	81a3      	strhlt	r3, [r4, #12]
 8006c94:	bd10      	pop	{r4, pc}

08006c96 <__seofread>:
 8006c96:	2000      	movs	r0, #0
 8006c98:	4770      	bx	lr

08006c9a <__swrite>:
 8006c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9e:	461f      	mov	r7, r3
 8006ca0:	898b      	ldrh	r3, [r1, #12]
 8006ca2:	05db      	lsls	r3, r3, #23
 8006ca4:	4605      	mov	r5, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	4616      	mov	r6, r2
 8006caa:	d505      	bpl.n	8006cb8 <__swrite+0x1e>
 8006cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f002 f8e2 	bl	8008e7c <_lseek_r>
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc2:	81a3      	strh	r3, [r4, #12]
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	4628      	mov	r0, r5
 8006cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cce:	f000 bec3 	b.w	8007a58 <_write_r>

08006cd2 <__sseek>:
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cda:	f002 f8cf 	bl	8008e7c <_lseek_r>
 8006cde:	1c43      	adds	r3, r0, #1
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	bf15      	itete	ne
 8006ce4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ce6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cee:	81a3      	strheq	r3, [r4, #12]
 8006cf0:	bf18      	it	ne
 8006cf2:	81a3      	strhne	r3, [r4, #12]
 8006cf4:	bd10      	pop	{r4, pc}

08006cf6 <__sclose>:
 8006cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfa:	f000 bebf 	b.w	8007a7c <_close_r>

08006cfe <sulp>:
 8006cfe:	b570      	push	{r4, r5, r6, lr}
 8006d00:	4604      	mov	r4, r0
 8006d02:	460d      	mov	r5, r1
 8006d04:	ec45 4b10 	vmov	d0, r4, r5
 8006d08:	4616      	mov	r6, r2
 8006d0a:	f002 fc63 	bl	80095d4 <__ulp>
 8006d0e:	ec51 0b10 	vmov	r0, r1, d0
 8006d12:	b17e      	cbz	r6, 8006d34 <sulp+0x36>
 8006d14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dd09      	ble.n	8006d34 <sulp+0x36>
 8006d20:	051b      	lsls	r3, r3, #20
 8006d22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d26:	2400      	movs	r4, #0
 8006d28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	462b      	mov	r3, r5
 8006d30:	f7f9 fc7a 	bl	8000628 <__aeabi_dmul>
 8006d34:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d38 <_strtod_l>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	ed2d 8b02 	vpush	{d8}
 8006d40:	b09d      	sub	sp, #116	; 0x74
 8006d42:	461f      	mov	r7, r3
 8006d44:	2300      	movs	r3, #0
 8006d46:	9318      	str	r3, [sp, #96]	; 0x60
 8006d48:	4ba2      	ldr	r3, [pc, #648]	; (8006fd4 <_strtod_l+0x29c>)
 8006d4a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	9305      	str	r3, [sp, #20]
 8006d50:	4604      	mov	r4, r0
 8006d52:	4618      	mov	r0, r3
 8006d54:	4688      	mov	r8, r1
 8006d56:	f7f9 fa4d 	bl	80001f4 <strlen>
 8006d5a:	f04f 0a00 	mov.w	sl, #0
 8006d5e:	4605      	mov	r5, r0
 8006d60:	f04f 0b00 	mov.w	fp, #0
 8006d64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	2a2b      	cmp	r2, #43	; 0x2b
 8006d6e:	d04e      	beq.n	8006e0e <_strtod_l+0xd6>
 8006d70:	d83b      	bhi.n	8006dea <_strtod_l+0xb2>
 8006d72:	2a0d      	cmp	r2, #13
 8006d74:	d834      	bhi.n	8006de0 <_strtod_l+0xa8>
 8006d76:	2a08      	cmp	r2, #8
 8006d78:	d834      	bhi.n	8006de4 <_strtod_l+0xac>
 8006d7a:	2a00      	cmp	r2, #0
 8006d7c:	d03e      	beq.n	8006dfc <_strtod_l+0xc4>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	930a      	str	r3, [sp, #40]	; 0x28
 8006d82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d84:	7833      	ldrb	r3, [r6, #0]
 8006d86:	2b30      	cmp	r3, #48	; 0x30
 8006d88:	f040 80b0 	bne.w	8006eec <_strtod_l+0x1b4>
 8006d8c:	7873      	ldrb	r3, [r6, #1]
 8006d8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d92:	2b58      	cmp	r3, #88	; 0x58
 8006d94:	d168      	bne.n	8006e68 <_strtod_l+0x130>
 8006d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	ab18      	add	r3, sp, #96	; 0x60
 8006d9c:	9702      	str	r7, [sp, #8]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	4a8d      	ldr	r2, [pc, #564]	; (8006fd8 <_strtod_l+0x2a0>)
 8006da2:	ab19      	add	r3, sp, #100	; 0x64
 8006da4:	a917      	add	r1, sp, #92	; 0x5c
 8006da6:	4620      	mov	r0, r4
 8006da8:	f001 fd5c 	bl	8008864 <__gethex>
 8006dac:	f010 0707 	ands.w	r7, r0, #7
 8006db0:	4605      	mov	r5, r0
 8006db2:	d005      	beq.n	8006dc0 <_strtod_l+0x88>
 8006db4:	2f06      	cmp	r7, #6
 8006db6:	d12c      	bne.n	8006e12 <_strtod_l+0xda>
 8006db8:	3601      	adds	r6, #1
 8006dba:	2300      	movs	r3, #0
 8006dbc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8006dc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f040 8590 	bne.w	80078e8 <_strtod_l+0xbb0>
 8006dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dca:	b1eb      	cbz	r3, 8006e08 <_strtod_l+0xd0>
 8006dcc:	4652      	mov	r2, sl
 8006dce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006dd2:	ec43 2b10 	vmov	d0, r2, r3
 8006dd6:	b01d      	add	sp, #116	; 0x74
 8006dd8:	ecbd 8b02 	vpop	{d8}
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	2a20      	cmp	r2, #32
 8006de2:	d1cc      	bne.n	8006d7e <_strtod_l+0x46>
 8006de4:	3301      	adds	r3, #1
 8006de6:	9317      	str	r3, [sp, #92]	; 0x5c
 8006de8:	e7be      	b.n	8006d68 <_strtod_l+0x30>
 8006dea:	2a2d      	cmp	r2, #45	; 0x2d
 8006dec:	d1c7      	bne.n	8006d7e <_strtod_l+0x46>
 8006dee:	2201      	movs	r2, #1
 8006df0:	920a      	str	r2, [sp, #40]	; 0x28
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1c2      	bne.n	8006d82 <_strtod_l+0x4a>
 8006dfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dfe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 856e 	bne.w	80078e4 <_strtod_l+0xbac>
 8006e08:	4652      	mov	r2, sl
 8006e0a:	465b      	mov	r3, fp
 8006e0c:	e7e1      	b.n	8006dd2 <_strtod_l+0x9a>
 8006e0e:	2200      	movs	r2, #0
 8006e10:	e7ee      	b.n	8006df0 <_strtod_l+0xb8>
 8006e12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e14:	b13a      	cbz	r2, 8006e26 <_strtod_l+0xee>
 8006e16:	2135      	movs	r1, #53	; 0x35
 8006e18:	a81a      	add	r0, sp, #104	; 0x68
 8006e1a:	f002 fce6 	bl	80097ea <__copybits>
 8006e1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e20:	4620      	mov	r0, r4
 8006e22:	f002 f8a5 	bl	8008f70 <_Bfree>
 8006e26:	3f01      	subs	r7, #1
 8006e28:	2f04      	cmp	r7, #4
 8006e2a:	d806      	bhi.n	8006e3a <_strtod_l+0x102>
 8006e2c:	e8df f007 	tbb	[pc, r7]
 8006e30:	1714030a 	.word	0x1714030a
 8006e34:	0a          	.byte	0x0a
 8006e35:	00          	.byte	0x00
 8006e36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006e3a:	0728      	lsls	r0, r5, #28
 8006e3c:	d5c0      	bpl.n	8006dc0 <_strtod_l+0x88>
 8006e3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006e42:	e7bd      	b.n	8006dc0 <_strtod_l+0x88>
 8006e44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006e48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e56:	e7f0      	b.n	8006e3a <_strtod_l+0x102>
 8006e58:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006fdc <_strtod_l+0x2a4>
 8006e5c:	e7ed      	b.n	8006e3a <_strtod_l+0x102>
 8006e5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e62:	f04f 3aff 	mov.w	sl, #4294967295
 8006e66:	e7e8      	b.n	8006e3a <_strtod_l+0x102>
 8006e68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e6e:	785b      	ldrb	r3, [r3, #1]
 8006e70:	2b30      	cmp	r3, #48	; 0x30
 8006e72:	d0f9      	beq.n	8006e68 <_strtod_l+0x130>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0a3      	beq.n	8006dc0 <_strtod_l+0x88>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f04f 0900 	mov.w	r9, #0
 8006e7e:	9304      	str	r3, [sp, #16]
 8006e80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e82:	9308      	str	r3, [sp, #32]
 8006e84:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e88:	464f      	mov	r7, r9
 8006e8a:	220a      	movs	r2, #10
 8006e8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e8e:	7806      	ldrb	r6, [r0, #0]
 8006e90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e94:	b2d9      	uxtb	r1, r3
 8006e96:	2909      	cmp	r1, #9
 8006e98:	d92a      	bls.n	8006ef0 <_strtod_l+0x1b8>
 8006e9a:	9905      	ldr	r1, [sp, #20]
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	f003 fac3 	bl	800a428 <strncmp>
 8006ea2:	b398      	cbz	r0, 8006f0c <_strtod_l+0x1d4>
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	4632      	mov	r2, r6
 8006ea8:	463d      	mov	r5, r7
 8006eaa:	9005      	str	r0, [sp, #20]
 8006eac:	4603      	mov	r3, r0
 8006eae:	2a65      	cmp	r2, #101	; 0x65
 8006eb0:	d001      	beq.n	8006eb6 <_strtod_l+0x17e>
 8006eb2:	2a45      	cmp	r2, #69	; 0x45
 8006eb4:	d118      	bne.n	8006ee8 <_strtod_l+0x1b0>
 8006eb6:	b91d      	cbnz	r5, 8006ec0 <_strtod_l+0x188>
 8006eb8:	9a04      	ldr	r2, [sp, #16]
 8006eba:	4302      	orrs	r2, r0
 8006ebc:	d09e      	beq.n	8006dfc <_strtod_l+0xc4>
 8006ebe:	2500      	movs	r5, #0
 8006ec0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006ec4:	f108 0201 	add.w	r2, r8, #1
 8006ec8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006ece:	2a2b      	cmp	r2, #43	; 0x2b
 8006ed0:	d075      	beq.n	8006fbe <_strtod_l+0x286>
 8006ed2:	2a2d      	cmp	r2, #45	; 0x2d
 8006ed4:	d07b      	beq.n	8006fce <_strtod_l+0x296>
 8006ed6:	f04f 0c00 	mov.w	ip, #0
 8006eda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ede:	2909      	cmp	r1, #9
 8006ee0:	f240 8082 	bls.w	8006fe8 <_strtod_l+0x2b0>
 8006ee4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ee8:	2600      	movs	r6, #0
 8006eea:	e09d      	b.n	8007028 <_strtod_l+0x2f0>
 8006eec:	2300      	movs	r3, #0
 8006eee:	e7c4      	b.n	8006e7a <_strtod_l+0x142>
 8006ef0:	2f08      	cmp	r7, #8
 8006ef2:	bfd8      	it	le
 8006ef4:	9907      	ldrle	r1, [sp, #28]
 8006ef6:	f100 0001 	add.w	r0, r0, #1
 8006efa:	bfda      	itte	le
 8006efc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f00:	9307      	strle	r3, [sp, #28]
 8006f02:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006f06:	3701      	adds	r7, #1
 8006f08:	9017      	str	r0, [sp, #92]	; 0x5c
 8006f0a:	e7bf      	b.n	8006e8c <_strtod_l+0x154>
 8006f0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f0e:	195a      	adds	r2, r3, r5
 8006f10:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f12:	5d5a      	ldrb	r2, [r3, r5]
 8006f14:	2f00      	cmp	r7, #0
 8006f16:	d037      	beq.n	8006f88 <_strtod_l+0x250>
 8006f18:	9005      	str	r0, [sp, #20]
 8006f1a:	463d      	mov	r5, r7
 8006f1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	d912      	bls.n	8006f4a <_strtod_l+0x212>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e7c2      	b.n	8006eae <_strtod_l+0x176>
 8006f28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f2e:	785a      	ldrb	r2, [r3, #1]
 8006f30:	3001      	adds	r0, #1
 8006f32:	2a30      	cmp	r2, #48	; 0x30
 8006f34:	d0f8      	beq.n	8006f28 <_strtod_l+0x1f0>
 8006f36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	f200 84d9 	bhi.w	80078f2 <_strtod_l+0xbba>
 8006f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f42:	9005      	str	r0, [sp, #20]
 8006f44:	2000      	movs	r0, #0
 8006f46:	9308      	str	r3, [sp, #32]
 8006f48:	4605      	mov	r5, r0
 8006f4a:	3a30      	subs	r2, #48	; 0x30
 8006f4c:	f100 0301 	add.w	r3, r0, #1
 8006f50:	d014      	beq.n	8006f7c <_strtod_l+0x244>
 8006f52:	9905      	ldr	r1, [sp, #20]
 8006f54:	4419      	add	r1, r3
 8006f56:	9105      	str	r1, [sp, #20]
 8006f58:	462b      	mov	r3, r5
 8006f5a:	eb00 0e05 	add.w	lr, r0, r5
 8006f5e:	210a      	movs	r1, #10
 8006f60:	4573      	cmp	r3, lr
 8006f62:	d113      	bne.n	8006f8c <_strtod_l+0x254>
 8006f64:	182b      	adds	r3, r5, r0
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	f105 0501 	add.w	r5, r5, #1
 8006f6c:	4405      	add	r5, r0
 8006f6e:	dc1c      	bgt.n	8006faa <_strtod_l+0x272>
 8006f70:	9907      	ldr	r1, [sp, #28]
 8006f72:	230a      	movs	r3, #10
 8006f74:	fb03 2301 	mla	r3, r3, r1, r2
 8006f78:	9307      	str	r3, [sp, #28]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f7e:	1c51      	adds	r1, r2, #1
 8006f80:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f82:	7852      	ldrb	r2, [r2, #1]
 8006f84:	4618      	mov	r0, r3
 8006f86:	e7c9      	b.n	8006f1c <_strtod_l+0x1e4>
 8006f88:	4638      	mov	r0, r7
 8006f8a:	e7d2      	b.n	8006f32 <_strtod_l+0x1fa>
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	dc04      	bgt.n	8006f9a <_strtod_l+0x262>
 8006f90:	9e07      	ldr	r6, [sp, #28]
 8006f92:	434e      	muls	r6, r1
 8006f94:	9607      	str	r6, [sp, #28]
 8006f96:	3301      	adds	r3, #1
 8006f98:	e7e2      	b.n	8006f60 <_strtod_l+0x228>
 8006f9a:	f103 0c01 	add.w	ip, r3, #1
 8006f9e:	f1bc 0f10 	cmp.w	ip, #16
 8006fa2:	bfd8      	it	le
 8006fa4:	fb01 f909 	mulle.w	r9, r1, r9
 8006fa8:	e7f5      	b.n	8006f96 <_strtod_l+0x25e>
 8006faa:	2d10      	cmp	r5, #16
 8006fac:	bfdc      	itt	le
 8006fae:	230a      	movle	r3, #10
 8006fb0:	fb03 2909 	mlale	r9, r3, r9, r2
 8006fb4:	e7e1      	b.n	8006f7a <_strtod_l+0x242>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	9305      	str	r3, [sp, #20]
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e77c      	b.n	8006eb8 <_strtod_l+0x180>
 8006fbe:	f04f 0c00 	mov.w	ip, #0
 8006fc2:	f108 0202 	add.w	r2, r8, #2
 8006fc6:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fc8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006fcc:	e785      	b.n	8006eda <_strtod_l+0x1a2>
 8006fce:	f04f 0c01 	mov.w	ip, #1
 8006fd2:	e7f6      	b.n	8006fc2 <_strtod_l+0x28a>
 8006fd4:	0800cb80 	.word	0x0800cb80
 8006fd8:	0800c938 	.word	0x0800c938
 8006fdc:	7ff00000 	.word	0x7ff00000
 8006fe0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fe2:	1c51      	adds	r1, r2, #1
 8006fe4:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fe6:	7852      	ldrb	r2, [r2, #1]
 8006fe8:	2a30      	cmp	r2, #48	; 0x30
 8006fea:	d0f9      	beq.n	8006fe0 <_strtod_l+0x2a8>
 8006fec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006ff0:	2908      	cmp	r1, #8
 8006ff2:	f63f af79 	bhi.w	8006ee8 <_strtod_l+0x1b0>
 8006ff6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006ffa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ffc:	9206      	str	r2, [sp, #24]
 8006ffe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007000:	1c51      	adds	r1, r2, #1
 8007002:	9117      	str	r1, [sp, #92]	; 0x5c
 8007004:	7852      	ldrb	r2, [r2, #1]
 8007006:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800700a:	2e09      	cmp	r6, #9
 800700c:	d937      	bls.n	800707e <_strtod_l+0x346>
 800700e:	9e06      	ldr	r6, [sp, #24]
 8007010:	1b89      	subs	r1, r1, r6
 8007012:	2908      	cmp	r1, #8
 8007014:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007018:	dc02      	bgt.n	8007020 <_strtod_l+0x2e8>
 800701a:	4576      	cmp	r6, lr
 800701c:	bfa8      	it	ge
 800701e:	4676      	movge	r6, lr
 8007020:	f1bc 0f00 	cmp.w	ip, #0
 8007024:	d000      	beq.n	8007028 <_strtod_l+0x2f0>
 8007026:	4276      	negs	r6, r6
 8007028:	2d00      	cmp	r5, #0
 800702a:	d14d      	bne.n	80070c8 <_strtod_l+0x390>
 800702c:	9904      	ldr	r1, [sp, #16]
 800702e:	4301      	orrs	r1, r0
 8007030:	f47f aec6 	bne.w	8006dc0 <_strtod_l+0x88>
 8007034:	2b00      	cmp	r3, #0
 8007036:	f47f aee1 	bne.w	8006dfc <_strtod_l+0xc4>
 800703a:	2a69      	cmp	r2, #105	; 0x69
 800703c:	d027      	beq.n	800708e <_strtod_l+0x356>
 800703e:	dc24      	bgt.n	800708a <_strtod_l+0x352>
 8007040:	2a49      	cmp	r2, #73	; 0x49
 8007042:	d024      	beq.n	800708e <_strtod_l+0x356>
 8007044:	2a4e      	cmp	r2, #78	; 0x4e
 8007046:	f47f aed9 	bne.w	8006dfc <_strtod_l+0xc4>
 800704a:	499f      	ldr	r1, [pc, #636]	; (80072c8 <_strtod_l+0x590>)
 800704c:	a817      	add	r0, sp, #92	; 0x5c
 800704e:	f001 fe61 	bl	8008d14 <__match>
 8007052:	2800      	cmp	r0, #0
 8007054:	f43f aed2 	beq.w	8006dfc <_strtod_l+0xc4>
 8007058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b28      	cmp	r3, #40	; 0x28
 800705e:	d12d      	bne.n	80070bc <_strtod_l+0x384>
 8007060:	499a      	ldr	r1, [pc, #616]	; (80072cc <_strtod_l+0x594>)
 8007062:	aa1a      	add	r2, sp, #104	; 0x68
 8007064:	a817      	add	r0, sp, #92	; 0x5c
 8007066:	f001 fe69 	bl	8008d3c <__hexnan>
 800706a:	2805      	cmp	r0, #5
 800706c:	d126      	bne.n	80070bc <_strtod_l+0x384>
 800706e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007070:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007074:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007078:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800707c:	e6a0      	b.n	8006dc0 <_strtod_l+0x88>
 800707e:	210a      	movs	r1, #10
 8007080:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007084:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007088:	e7b9      	b.n	8006ffe <_strtod_l+0x2c6>
 800708a:	2a6e      	cmp	r2, #110	; 0x6e
 800708c:	e7db      	b.n	8007046 <_strtod_l+0x30e>
 800708e:	4990      	ldr	r1, [pc, #576]	; (80072d0 <_strtod_l+0x598>)
 8007090:	a817      	add	r0, sp, #92	; 0x5c
 8007092:	f001 fe3f 	bl	8008d14 <__match>
 8007096:	2800      	cmp	r0, #0
 8007098:	f43f aeb0 	beq.w	8006dfc <_strtod_l+0xc4>
 800709c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800709e:	498d      	ldr	r1, [pc, #564]	; (80072d4 <_strtod_l+0x59c>)
 80070a0:	3b01      	subs	r3, #1
 80070a2:	a817      	add	r0, sp, #92	; 0x5c
 80070a4:	9317      	str	r3, [sp, #92]	; 0x5c
 80070a6:	f001 fe35 	bl	8008d14 <__match>
 80070aa:	b910      	cbnz	r0, 80070b2 <_strtod_l+0x37a>
 80070ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ae:	3301      	adds	r3, #1
 80070b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80070b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80072e4 <_strtod_l+0x5ac>
 80070b6:	f04f 0a00 	mov.w	sl, #0
 80070ba:	e681      	b.n	8006dc0 <_strtod_l+0x88>
 80070bc:	4886      	ldr	r0, [pc, #536]	; (80072d8 <_strtod_l+0x5a0>)
 80070be:	f003 f963 	bl	800a388 <nan>
 80070c2:	ec5b ab10 	vmov	sl, fp, d0
 80070c6:	e67b      	b.n	8006dc0 <_strtod_l+0x88>
 80070c8:	9b05      	ldr	r3, [sp, #20]
 80070ca:	9807      	ldr	r0, [sp, #28]
 80070cc:	1af3      	subs	r3, r6, r3
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	bf08      	it	eq
 80070d2:	462f      	moveq	r7, r5
 80070d4:	2d10      	cmp	r5, #16
 80070d6:	9306      	str	r3, [sp, #24]
 80070d8:	46a8      	mov	r8, r5
 80070da:	bfa8      	it	ge
 80070dc:	f04f 0810 	movge.w	r8, #16
 80070e0:	f7f9 fa28 	bl	8000534 <__aeabi_ui2d>
 80070e4:	2d09      	cmp	r5, #9
 80070e6:	4682      	mov	sl, r0
 80070e8:	468b      	mov	fp, r1
 80070ea:	dd13      	ble.n	8007114 <_strtod_l+0x3dc>
 80070ec:	4b7b      	ldr	r3, [pc, #492]	; (80072dc <_strtod_l+0x5a4>)
 80070ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80070f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80070f6:	f7f9 fa97 	bl	8000628 <__aeabi_dmul>
 80070fa:	4682      	mov	sl, r0
 80070fc:	4648      	mov	r0, r9
 80070fe:	468b      	mov	fp, r1
 8007100:	f7f9 fa18 	bl	8000534 <__aeabi_ui2d>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4650      	mov	r0, sl
 800710a:	4659      	mov	r1, fp
 800710c:	f7f9 f8d6 	bl	80002bc <__adddf3>
 8007110:	4682      	mov	sl, r0
 8007112:	468b      	mov	fp, r1
 8007114:	2d0f      	cmp	r5, #15
 8007116:	dc38      	bgt.n	800718a <_strtod_l+0x452>
 8007118:	9b06      	ldr	r3, [sp, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f43f ae50 	beq.w	8006dc0 <_strtod_l+0x88>
 8007120:	dd24      	ble.n	800716c <_strtod_l+0x434>
 8007122:	2b16      	cmp	r3, #22
 8007124:	dc0b      	bgt.n	800713e <_strtod_l+0x406>
 8007126:	496d      	ldr	r1, [pc, #436]	; (80072dc <_strtod_l+0x5a4>)
 8007128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800712c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007130:	4652      	mov	r2, sl
 8007132:	465b      	mov	r3, fp
 8007134:	f7f9 fa78 	bl	8000628 <__aeabi_dmul>
 8007138:	4682      	mov	sl, r0
 800713a:	468b      	mov	fp, r1
 800713c:	e640      	b.n	8006dc0 <_strtod_l+0x88>
 800713e:	9a06      	ldr	r2, [sp, #24]
 8007140:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007144:	4293      	cmp	r3, r2
 8007146:	db20      	blt.n	800718a <_strtod_l+0x452>
 8007148:	4c64      	ldr	r4, [pc, #400]	; (80072dc <_strtod_l+0x5a4>)
 800714a:	f1c5 050f 	rsb	r5, r5, #15
 800714e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007152:	4652      	mov	r2, sl
 8007154:	465b      	mov	r3, fp
 8007156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800715a:	f7f9 fa65 	bl	8000628 <__aeabi_dmul>
 800715e:	9b06      	ldr	r3, [sp, #24]
 8007160:	1b5d      	subs	r5, r3, r5
 8007162:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007166:	e9d4 2300 	ldrd	r2, r3, [r4]
 800716a:	e7e3      	b.n	8007134 <_strtod_l+0x3fc>
 800716c:	9b06      	ldr	r3, [sp, #24]
 800716e:	3316      	adds	r3, #22
 8007170:	db0b      	blt.n	800718a <_strtod_l+0x452>
 8007172:	9b05      	ldr	r3, [sp, #20]
 8007174:	1b9e      	subs	r6, r3, r6
 8007176:	4b59      	ldr	r3, [pc, #356]	; (80072dc <_strtod_l+0x5a4>)
 8007178:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800717c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007180:	4650      	mov	r0, sl
 8007182:	4659      	mov	r1, fp
 8007184:	f7f9 fb7a 	bl	800087c <__aeabi_ddiv>
 8007188:	e7d6      	b.n	8007138 <_strtod_l+0x400>
 800718a:	9b06      	ldr	r3, [sp, #24]
 800718c:	eba5 0808 	sub.w	r8, r5, r8
 8007190:	4498      	add	r8, r3
 8007192:	f1b8 0f00 	cmp.w	r8, #0
 8007196:	dd74      	ble.n	8007282 <_strtod_l+0x54a>
 8007198:	f018 030f 	ands.w	r3, r8, #15
 800719c:	d00a      	beq.n	80071b4 <_strtod_l+0x47c>
 800719e:	494f      	ldr	r1, [pc, #316]	; (80072dc <_strtod_l+0x5a4>)
 80071a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071a4:	4652      	mov	r2, sl
 80071a6:	465b      	mov	r3, fp
 80071a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ac:	f7f9 fa3c 	bl	8000628 <__aeabi_dmul>
 80071b0:	4682      	mov	sl, r0
 80071b2:	468b      	mov	fp, r1
 80071b4:	f038 080f 	bics.w	r8, r8, #15
 80071b8:	d04f      	beq.n	800725a <_strtod_l+0x522>
 80071ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80071be:	dd22      	ble.n	8007206 <_strtod_l+0x4ce>
 80071c0:	2500      	movs	r5, #0
 80071c2:	462e      	mov	r6, r5
 80071c4:	9507      	str	r5, [sp, #28]
 80071c6:	9505      	str	r5, [sp, #20]
 80071c8:	2322      	movs	r3, #34	; 0x22
 80071ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80072e4 <_strtod_l+0x5ac>
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	f04f 0a00 	mov.w	sl, #0
 80071d4:	9b07      	ldr	r3, [sp, #28]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f43f adf2 	beq.w	8006dc0 <_strtod_l+0x88>
 80071dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071de:	4620      	mov	r0, r4
 80071e0:	f001 fec6 	bl	8008f70 <_Bfree>
 80071e4:	9905      	ldr	r1, [sp, #20]
 80071e6:	4620      	mov	r0, r4
 80071e8:	f001 fec2 	bl	8008f70 <_Bfree>
 80071ec:	4631      	mov	r1, r6
 80071ee:	4620      	mov	r0, r4
 80071f0:	f001 febe 	bl	8008f70 <_Bfree>
 80071f4:	9907      	ldr	r1, [sp, #28]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f001 feba 	bl	8008f70 <_Bfree>
 80071fc:	4629      	mov	r1, r5
 80071fe:	4620      	mov	r0, r4
 8007200:	f001 feb6 	bl	8008f70 <_Bfree>
 8007204:	e5dc      	b.n	8006dc0 <_strtod_l+0x88>
 8007206:	4b36      	ldr	r3, [pc, #216]	; (80072e0 <_strtod_l+0x5a8>)
 8007208:	9304      	str	r3, [sp, #16]
 800720a:	2300      	movs	r3, #0
 800720c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007210:	4650      	mov	r0, sl
 8007212:	4659      	mov	r1, fp
 8007214:	4699      	mov	r9, r3
 8007216:	f1b8 0f01 	cmp.w	r8, #1
 800721a:	dc21      	bgt.n	8007260 <_strtod_l+0x528>
 800721c:	b10b      	cbz	r3, 8007222 <_strtod_l+0x4ea>
 800721e:	4682      	mov	sl, r0
 8007220:	468b      	mov	fp, r1
 8007222:	4b2f      	ldr	r3, [pc, #188]	; (80072e0 <_strtod_l+0x5a8>)
 8007224:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007228:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800722c:	4652      	mov	r2, sl
 800722e:	465b      	mov	r3, fp
 8007230:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007234:	f7f9 f9f8 	bl	8000628 <__aeabi_dmul>
 8007238:	4b2a      	ldr	r3, [pc, #168]	; (80072e4 <_strtod_l+0x5ac>)
 800723a:	460a      	mov	r2, r1
 800723c:	400b      	ands	r3, r1
 800723e:	492a      	ldr	r1, [pc, #168]	; (80072e8 <_strtod_l+0x5b0>)
 8007240:	428b      	cmp	r3, r1
 8007242:	4682      	mov	sl, r0
 8007244:	d8bc      	bhi.n	80071c0 <_strtod_l+0x488>
 8007246:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800724a:	428b      	cmp	r3, r1
 800724c:	bf86      	itte	hi
 800724e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80072ec <_strtod_l+0x5b4>
 8007252:	f04f 3aff 	movhi.w	sl, #4294967295
 8007256:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800725a:	2300      	movs	r3, #0
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	e084      	b.n	800736a <_strtod_l+0x632>
 8007260:	f018 0f01 	tst.w	r8, #1
 8007264:	d005      	beq.n	8007272 <_strtod_l+0x53a>
 8007266:	9b04      	ldr	r3, [sp, #16]
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f9dc 	bl	8000628 <__aeabi_dmul>
 8007270:	2301      	movs	r3, #1
 8007272:	9a04      	ldr	r2, [sp, #16]
 8007274:	3208      	adds	r2, #8
 8007276:	f109 0901 	add.w	r9, r9, #1
 800727a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800727e:	9204      	str	r2, [sp, #16]
 8007280:	e7c9      	b.n	8007216 <_strtod_l+0x4de>
 8007282:	d0ea      	beq.n	800725a <_strtod_l+0x522>
 8007284:	f1c8 0800 	rsb	r8, r8, #0
 8007288:	f018 020f 	ands.w	r2, r8, #15
 800728c:	d00a      	beq.n	80072a4 <_strtod_l+0x56c>
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <_strtod_l+0x5a4>)
 8007290:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007294:	4650      	mov	r0, sl
 8007296:	4659      	mov	r1, fp
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f7f9 faee 	bl	800087c <__aeabi_ddiv>
 80072a0:	4682      	mov	sl, r0
 80072a2:	468b      	mov	fp, r1
 80072a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80072a8:	d0d7      	beq.n	800725a <_strtod_l+0x522>
 80072aa:	f1b8 0f1f 	cmp.w	r8, #31
 80072ae:	dd1f      	ble.n	80072f0 <_strtod_l+0x5b8>
 80072b0:	2500      	movs	r5, #0
 80072b2:	462e      	mov	r6, r5
 80072b4:	9507      	str	r5, [sp, #28]
 80072b6:	9505      	str	r5, [sp, #20]
 80072b8:	2322      	movs	r3, #34	; 0x22
 80072ba:	f04f 0a00 	mov.w	sl, #0
 80072be:	f04f 0b00 	mov.w	fp, #0
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	e786      	b.n	80071d4 <_strtod_l+0x49c>
 80072c6:	bf00      	nop
 80072c8:	0800c90d 	.word	0x0800c90d
 80072cc:	0800c94c 	.word	0x0800c94c
 80072d0:	0800c905 	.word	0x0800c905
 80072d4:	0800ca8c 	.word	0x0800ca8c
 80072d8:	0800cd53 	.word	0x0800cd53
 80072dc:	0800cc18 	.word	0x0800cc18
 80072e0:	0800cbf0 	.word	0x0800cbf0
 80072e4:	7ff00000 	.word	0x7ff00000
 80072e8:	7ca00000 	.word	0x7ca00000
 80072ec:	7fefffff 	.word	0x7fefffff
 80072f0:	f018 0310 	ands.w	r3, r8, #16
 80072f4:	bf18      	it	ne
 80072f6:	236a      	movne	r3, #106	; 0x6a
 80072f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80076a8 <_strtod_l+0x970>
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	4650      	mov	r0, sl
 8007300:	4659      	mov	r1, fp
 8007302:	2300      	movs	r3, #0
 8007304:	f018 0f01 	tst.w	r8, #1
 8007308:	d004      	beq.n	8007314 <_strtod_l+0x5dc>
 800730a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800730e:	f7f9 f98b 	bl	8000628 <__aeabi_dmul>
 8007312:	2301      	movs	r3, #1
 8007314:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007318:	f109 0908 	add.w	r9, r9, #8
 800731c:	d1f2      	bne.n	8007304 <_strtod_l+0x5cc>
 800731e:	b10b      	cbz	r3, 8007324 <_strtod_l+0x5ec>
 8007320:	4682      	mov	sl, r0
 8007322:	468b      	mov	fp, r1
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	b1c3      	cbz	r3, 800735a <_strtod_l+0x622>
 8007328:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800732c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007330:	2b00      	cmp	r3, #0
 8007332:	4659      	mov	r1, fp
 8007334:	dd11      	ble.n	800735a <_strtod_l+0x622>
 8007336:	2b1f      	cmp	r3, #31
 8007338:	f340 8124 	ble.w	8007584 <_strtod_l+0x84c>
 800733c:	2b34      	cmp	r3, #52	; 0x34
 800733e:	bfde      	ittt	le
 8007340:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007344:	f04f 33ff 	movle.w	r3, #4294967295
 8007348:	fa03 f202 	lslle.w	r2, r3, r2
 800734c:	f04f 0a00 	mov.w	sl, #0
 8007350:	bfcc      	ite	gt
 8007352:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007356:	ea02 0b01 	andle.w	fp, r2, r1
 800735a:	2200      	movs	r2, #0
 800735c:	2300      	movs	r3, #0
 800735e:	4650      	mov	r0, sl
 8007360:	4659      	mov	r1, fp
 8007362:	f7f9 fbc9 	bl	8000af8 <__aeabi_dcmpeq>
 8007366:	2800      	cmp	r0, #0
 8007368:	d1a2      	bne.n	80072b0 <_strtod_l+0x578>
 800736a:	9b07      	ldr	r3, [sp, #28]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	9908      	ldr	r1, [sp, #32]
 8007370:	462b      	mov	r3, r5
 8007372:	463a      	mov	r2, r7
 8007374:	4620      	mov	r0, r4
 8007376:	f001 fe63 	bl	8009040 <__s2b>
 800737a:	9007      	str	r0, [sp, #28]
 800737c:	2800      	cmp	r0, #0
 800737e:	f43f af1f 	beq.w	80071c0 <_strtod_l+0x488>
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	1b9e      	subs	r6, r3, r6
 8007386:	9b06      	ldr	r3, [sp, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	bfb4      	ite	lt
 800738c:	4633      	movlt	r3, r6
 800738e:	2300      	movge	r3, #0
 8007390:	930c      	str	r3, [sp, #48]	; 0x30
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	2500      	movs	r5, #0
 8007396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800739a:	9312      	str	r3, [sp, #72]	; 0x48
 800739c:	462e      	mov	r6, r5
 800739e:	9b07      	ldr	r3, [sp, #28]
 80073a0:	4620      	mov	r0, r4
 80073a2:	6859      	ldr	r1, [r3, #4]
 80073a4:	f001 fda4 	bl	8008ef0 <_Balloc>
 80073a8:	9005      	str	r0, [sp, #20]
 80073aa:	2800      	cmp	r0, #0
 80073ac:	f43f af0c 	beq.w	80071c8 <_strtod_l+0x490>
 80073b0:	9b07      	ldr	r3, [sp, #28]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	3202      	adds	r2, #2
 80073b6:	f103 010c 	add.w	r1, r3, #12
 80073ba:	0092      	lsls	r2, r2, #2
 80073bc:	300c      	adds	r0, #12
 80073be:	f001 fd89 	bl	8008ed4 <memcpy>
 80073c2:	ec4b ab10 	vmov	d0, sl, fp
 80073c6:	aa1a      	add	r2, sp, #104	; 0x68
 80073c8:	a919      	add	r1, sp, #100	; 0x64
 80073ca:	4620      	mov	r0, r4
 80073cc:	f002 f97e 	bl	80096cc <__d2b>
 80073d0:	ec4b ab18 	vmov	d8, sl, fp
 80073d4:	9018      	str	r0, [sp, #96]	; 0x60
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f43f aef6 	beq.w	80071c8 <_strtod_l+0x490>
 80073dc:	2101      	movs	r1, #1
 80073de:	4620      	mov	r0, r4
 80073e0:	f001 fec8 	bl	8009174 <__i2b>
 80073e4:	4606      	mov	r6, r0
 80073e6:	2800      	cmp	r0, #0
 80073e8:	f43f aeee 	beq.w	80071c8 <_strtod_l+0x490>
 80073ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073ee:	9904      	ldr	r1, [sp, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	bfab      	itete	ge
 80073f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80073f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80073f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80073fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80073fe:	bfac      	ite	ge
 8007400:	eb03 0902 	addge.w	r9, r3, r2
 8007404:	1ad7      	sublt	r7, r2, r3
 8007406:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007408:	eba3 0801 	sub.w	r8, r3, r1
 800740c:	4490      	add	r8, r2
 800740e:	4ba1      	ldr	r3, [pc, #644]	; (8007694 <_strtod_l+0x95c>)
 8007410:	f108 38ff 	add.w	r8, r8, #4294967295
 8007414:	4598      	cmp	r8, r3
 8007416:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800741a:	f280 80c7 	bge.w	80075ac <_strtod_l+0x874>
 800741e:	eba3 0308 	sub.w	r3, r3, r8
 8007422:	2b1f      	cmp	r3, #31
 8007424:	eba2 0203 	sub.w	r2, r2, r3
 8007428:	f04f 0101 	mov.w	r1, #1
 800742c:	f300 80b1 	bgt.w	8007592 <_strtod_l+0x85a>
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	930d      	str	r3, [sp, #52]	; 0x34
 8007436:	2300      	movs	r3, #0
 8007438:	9308      	str	r3, [sp, #32]
 800743a:	eb09 0802 	add.w	r8, r9, r2
 800743e:	9b04      	ldr	r3, [sp, #16]
 8007440:	45c1      	cmp	r9, r8
 8007442:	4417      	add	r7, r2
 8007444:	441f      	add	r7, r3
 8007446:	464b      	mov	r3, r9
 8007448:	bfa8      	it	ge
 800744a:	4643      	movge	r3, r8
 800744c:	42bb      	cmp	r3, r7
 800744e:	bfa8      	it	ge
 8007450:	463b      	movge	r3, r7
 8007452:	2b00      	cmp	r3, #0
 8007454:	bfc2      	ittt	gt
 8007456:	eba8 0803 	subgt.w	r8, r8, r3
 800745a:	1aff      	subgt	r7, r7, r3
 800745c:	eba9 0903 	subgt.w	r9, r9, r3
 8007460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007462:	2b00      	cmp	r3, #0
 8007464:	dd17      	ble.n	8007496 <_strtod_l+0x75e>
 8007466:	4631      	mov	r1, r6
 8007468:	461a      	mov	r2, r3
 800746a:	4620      	mov	r0, r4
 800746c:	f001 ff42 	bl	80092f4 <__pow5mult>
 8007470:	4606      	mov	r6, r0
 8007472:	2800      	cmp	r0, #0
 8007474:	f43f aea8 	beq.w	80071c8 <_strtod_l+0x490>
 8007478:	4601      	mov	r1, r0
 800747a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800747c:	4620      	mov	r0, r4
 800747e:	f001 fe8f 	bl	80091a0 <__multiply>
 8007482:	900b      	str	r0, [sp, #44]	; 0x2c
 8007484:	2800      	cmp	r0, #0
 8007486:	f43f ae9f 	beq.w	80071c8 <_strtod_l+0x490>
 800748a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800748c:	4620      	mov	r0, r4
 800748e:	f001 fd6f 	bl	8008f70 <_Bfree>
 8007492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007494:	9318      	str	r3, [sp, #96]	; 0x60
 8007496:	f1b8 0f00 	cmp.w	r8, #0
 800749a:	f300 808c 	bgt.w	80075b6 <_strtod_l+0x87e>
 800749e:	9b06      	ldr	r3, [sp, #24]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dd08      	ble.n	80074b6 <_strtod_l+0x77e>
 80074a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074a6:	9905      	ldr	r1, [sp, #20]
 80074a8:	4620      	mov	r0, r4
 80074aa:	f001 ff23 	bl	80092f4 <__pow5mult>
 80074ae:	9005      	str	r0, [sp, #20]
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f43f ae89 	beq.w	80071c8 <_strtod_l+0x490>
 80074b6:	2f00      	cmp	r7, #0
 80074b8:	dd08      	ble.n	80074cc <_strtod_l+0x794>
 80074ba:	9905      	ldr	r1, [sp, #20]
 80074bc:	463a      	mov	r2, r7
 80074be:	4620      	mov	r0, r4
 80074c0:	f001 ff72 	bl	80093a8 <__lshift>
 80074c4:	9005      	str	r0, [sp, #20]
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f43f ae7e 	beq.w	80071c8 <_strtod_l+0x490>
 80074cc:	f1b9 0f00 	cmp.w	r9, #0
 80074d0:	dd08      	ble.n	80074e4 <_strtod_l+0x7ac>
 80074d2:	4631      	mov	r1, r6
 80074d4:	464a      	mov	r2, r9
 80074d6:	4620      	mov	r0, r4
 80074d8:	f001 ff66 	bl	80093a8 <__lshift>
 80074dc:	4606      	mov	r6, r0
 80074de:	2800      	cmp	r0, #0
 80074e0:	f43f ae72 	beq.w	80071c8 <_strtod_l+0x490>
 80074e4:	9a05      	ldr	r2, [sp, #20]
 80074e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074e8:	4620      	mov	r0, r4
 80074ea:	f001 ffe9 	bl	80094c0 <__mdiff>
 80074ee:	4605      	mov	r5, r0
 80074f0:	2800      	cmp	r0, #0
 80074f2:	f43f ae69 	beq.w	80071c8 <_strtod_l+0x490>
 80074f6:	68c3      	ldr	r3, [r0, #12]
 80074f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074fa:	2300      	movs	r3, #0
 80074fc:	60c3      	str	r3, [r0, #12]
 80074fe:	4631      	mov	r1, r6
 8007500:	f001 ffc2 	bl	8009488 <__mcmp>
 8007504:	2800      	cmp	r0, #0
 8007506:	da60      	bge.n	80075ca <_strtod_l+0x892>
 8007508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800750a:	ea53 030a 	orrs.w	r3, r3, sl
 800750e:	f040 8082 	bne.w	8007616 <_strtod_l+0x8de>
 8007512:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007516:	2b00      	cmp	r3, #0
 8007518:	d17d      	bne.n	8007616 <_strtod_l+0x8de>
 800751a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800751e:	0d1b      	lsrs	r3, r3, #20
 8007520:	051b      	lsls	r3, r3, #20
 8007522:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007526:	d976      	bls.n	8007616 <_strtod_l+0x8de>
 8007528:	696b      	ldr	r3, [r5, #20]
 800752a:	b913      	cbnz	r3, 8007532 <_strtod_l+0x7fa>
 800752c:	692b      	ldr	r3, [r5, #16]
 800752e:	2b01      	cmp	r3, #1
 8007530:	dd71      	ble.n	8007616 <_strtod_l+0x8de>
 8007532:	4629      	mov	r1, r5
 8007534:	2201      	movs	r2, #1
 8007536:	4620      	mov	r0, r4
 8007538:	f001 ff36 	bl	80093a8 <__lshift>
 800753c:	4631      	mov	r1, r6
 800753e:	4605      	mov	r5, r0
 8007540:	f001 ffa2 	bl	8009488 <__mcmp>
 8007544:	2800      	cmp	r0, #0
 8007546:	dd66      	ble.n	8007616 <_strtod_l+0x8de>
 8007548:	9904      	ldr	r1, [sp, #16]
 800754a:	4a53      	ldr	r2, [pc, #332]	; (8007698 <_strtod_l+0x960>)
 800754c:	465b      	mov	r3, fp
 800754e:	2900      	cmp	r1, #0
 8007550:	f000 8081 	beq.w	8007656 <_strtod_l+0x91e>
 8007554:	ea02 010b 	and.w	r1, r2, fp
 8007558:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800755c:	dc7b      	bgt.n	8007656 <_strtod_l+0x91e>
 800755e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007562:	f77f aea9 	ble.w	80072b8 <_strtod_l+0x580>
 8007566:	4b4d      	ldr	r3, [pc, #308]	; (800769c <_strtod_l+0x964>)
 8007568:	4650      	mov	r0, sl
 800756a:	4659      	mov	r1, fp
 800756c:	2200      	movs	r2, #0
 800756e:	f7f9 f85b 	bl	8000628 <__aeabi_dmul>
 8007572:	460b      	mov	r3, r1
 8007574:	4303      	orrs	r3, r0
 8007576:	bf08      	it	eq
 8007578:	2322      	moveq	r3, #34	; 0x22
 800757a:	4682      	mov	sl, r0
 800757c:	468b      	mov	fp, r1
 800757e:	bf08      	it	eq
 8007580:	6023      	streq	r3, [r4, #0]
 8007582:	e62b      	b.n	80071dc <_strtod_l+0x4a4>
 8007584:	f04f 32ff 	mov.w	r2, #4294967295
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	ea03 0a0a 	and.w	sl, r3, sl
 8007590:	e6e3      	b.n	800735a <_strtod_l+0x622>
 8007592:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007596:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800759a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800759e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80075a2:	fa01 f308 	lsl.w	r3, r1, r8
 80075a6:	9308      	str	r3, [sp, #32]
 80075a8:	910d      	str	r1, [sp, #52]	; 0x34
 80075aa:	e746      	b.n	800743a <_strtod_l+0x702>
 80075ac:	2300      	movs	r3, #0
 80075ae:	9308      	str	r3, [sp, #32]
 80075b0:	2301      	movs	r3, #1
 80075b2:	930d      	str	r3, [sp, #52]	; 0x34
 80075b4:	e741      	b.n	800743a <_strtod_l+0x702>
 80075b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075b8:	4642      	mov	r2, r8
 80075ba:	4620      	mov	r0, r4
 80075bc:	f001 fef4 	bl	80093a8 <__lshift>
 80075c0:	9018      	str	r0, [sp, #96]	; 0x60
 80075c2:	2800      	cmp	r0, #0
 80075c4:	f47f af6b 	bne.w	800749e <_strtod_l+0x766>
 80075c8:	e5fe      	b.n	80071c8 <_strtod_l+0x490>
 80075ca:	465f      	mov	r7, fp
 80075cc:	d16e      	bne.n	80076ac <_strtod_l+0x974>
 80075ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075d4:	b342      	cbz	r2, 8007628 <_strtod_l+0x8f0>
 80075d6:	4a32      	ldr	r2, [pc, #200]	; (80076a0 <_strtod_l+0x968>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d128      	bne.n	800762e <_strtod_l+0x8f6>
 80075dc:	9b04      	ldr	r3, [sp, #16]
 80075de:	4651      	mov	r1, sl
 80075e0:	b1eb      	cbz	r3, 800761e <_strtod_l+0x8e6>
 80075e2:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <_strtod_l+0x960>)
 80075e4:	403b      	ands	r3, r7
 80075e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075ea:	f04f 32ff 	mov.w	r2, #4294967295
 80075ee:	d819      	bhi.n	8007624 <_strtod_l+0x8ec>
 80075f0:	0d1b      	lsrs	r3, r3, #20
 80075f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	4299      	cmp	r1, r3
 80075fc:	d117      	bne.n	800762e <_strtod_l+0x8f6>
 80075fe:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <_strtod_l+0x96c>)
 8007600:	429f      	cmp	r7, r3
 8007602:	d102      	bne.n	800760a <_strtod_l+0x8d2>
 8007604:	3101      	adds	r1, #1
 8007606:	f43f addf 	beq.w	80071c8 <_strtod_l+0x490>
 800760a:	4b23      	ldr	r3, [pc, #140]	; (8007698 <_strtod_l+0x960>)
 800760c:	403b      	ands	r3, r7
 800760e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007612:	f04f 0a00 	mov.w	sl, #0
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1a4      	bne.n	8007566 <_strtod_l+0x82e>
 800761c:	e5de      	b.n	80071dc <_strtod_l+0x4a4>
 800761e:	f04f 33ff 	mov.w	r3, #4294967295
 8007622:	e7ea      	b.n	80075fa <_strtod_l+0x8c2>
 8007624:	4613      	mov	r3, r2
 8007626:	e7e8      	b.n	80075fa <_strtod_l+0x8c2>
 8007628:	ea53 030a 	orrs.w	r3, r3, sl
 800762c:	d08c      	beq.n	8007548 <_strtod_l+0x810>
 800762e:	9b08      	ldr	r3, [sp, #32]
 8007630:	b1db      	cbz	r3, 800766a <_strtod_l+0x932>
 8007632:	423b      	tst	r3, r7
 8007634:	d0ef      	beq.n	8007616 <_strtod_l+0x8de>
 8007636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007638:	9a04      	ldr	r2, [sp, #16]
 800763a:	4650      	mov	r0, sl
 800763c:	4659      	mov	r1, fp
 800763e:	b1c3      	cbz	r3, 8007672 <_strtod_l+0x93a>
 8007640:	f7ff fb5d 	bl	8006cfe <sulp>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	ec51 0b18 	vmov	r0, r1, d8
 800764c:	f7f8 fe36 	bl	80002bc <__adddf3>
 8007650:	4682      	mov	sl, r0
 8007652:	468b      	mov	fp, r1
 8007654:	e7df      	b.n	8007616 <_strtod_l+0x8de>
 8007656:	4013      	ands	r3, r2
 8007658:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800765c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007660:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007664:	f04f 3aff 	mov.w	sl, #4294967295
 8007668:	e7d5      	b.n	8007616 <_strtod_l+0x8de>
 800766a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800766c:	ea13 0f0a 	tst.w	r3, sl
 8007670:	e7e0      	b.n	8007634 <_strtod_l+0x8fc>
 8007672:	f7ff fb44 	bl	8006cfe <sulp>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	ec51 0b18 	vmov	r0, r1, d8
 800767e:	f7f8 fe1b 	bl	80002b8 <__aeabi_dsub>
 8007682:	2200      	movs	r2, #0
 8007684:	2300      	movs	r3, #0
 8007686:	4682      	mov	sl, r0
 8007688:	468b      	mov	fp, r1
 800768a:	f7f9 fa35 	bl	8000af8 <__aeabi_dcmpeq>
 800768e:	2800      	cmp	r0, #0
 8007690:	d0c1      	beq.n	8007616 <_strtod_l+0x8de>
 8007692:	e611      	b.n	80072b8 <_strtod_l+0x580>
 8007694:	fffffc02 	.word	0xfffffc02
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	39500000 	.word	0x39500000
 80076a0:	000fffff 	.word	0x000fffff
 80076a4:	7fefffff 	.word	0x7fefffff
 80076a8:	0800c960 	.word	0x0800c960
 80076ac:	4631      	mov	r1, r6
 80076ae:	4628      	mov	r0, r5
 80076b0:	f002 f868 	bl	8009784 <__ratio>
 80076b4:	ec59 8b10 	vmov	r8, r9, d0
 80076b8:	ee10 0a10 	vmov	r0, s0
 80076bc:	2200      	movs	r2, #0
 80076be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f9 fa2c 	bl	8000b20 <__aeabi_dcmple>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d07a      	beq.n	80077c2 <_strtod_l+0xa8a>
 80076cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d04a      	beq.n	8007768 <_strtod_l+0xa30>
 80076d2:	4b95      	ldr	r3, [pc, #596]	; (8007928 <_strtod_l+0xbf0>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80076da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007928 <_strtod_l+0xbf0>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	4b92      	ldr	r3, [pc, #584]	; (800792c <_strtod_l+0xbf4>)
 80076e4:	403b      	ands	r3, r7
 80076e6:	930d      	str	r3, [sp, #52]	; 0x34
 80076e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076ea:	4b91      	ldr	r3, [pc, #580]	; (8007930 <_strtod_l+0xbf8>)
 80076ec:	429a      	cmp	r2, r3
 80076ee:	f040 80b0 	bne.w	8007852 <_strtod_l+0xb1a>
 80076f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80076fa:	ec4b ab10 	vmov	d0, sl, fp
 80076fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007702:	f001 ff67 	bl	80095d4 <__ulp>
 8007706:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800770a:	ec53 2b10 	vmov	r2, r3, d0
 800770e:	f7f8 ff8b 	bl	8000628 <__aeabi_dmul>
 8007712:	4652      	mov	r2, sl
 8007714:	465b      	mov	r3, fp
 8007716:	f7f8 fdd1 	bl	80002bc <__adddf3>
 800771a:	460b      	mov	r3, r1
 800771c:	4983      	ldr	r1, [pc, #524]	; (800792c <_strtod_l+0xbf4>)
 800771e:	4a85      	ldr	r2, [pc, #532]	; (8007934 <_strtod_l+0xbfc>)
 8007720:	4019      	ands	r1, r3
 8007722:	4291      	cmp	r1, r2
 8007724:	4682      	mov	sl, r0
 8007726:	d960      	bls.n	80077ea <_strtod_l+0xab2>
 8007728:	ee18 3a90 	vmov	r3, s17
 800772c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007730:	4293      	cmp	r3, r2
 8007732:	d104      	bne.n	800773e <_strtod_l+0xa06>
 8007734:	ee18 3a10 	vmov	r3, s16
 8007738:	3301      	adds	r3, #1
 800773a:	f43f ad45 	beq.w	80071c8 <_strtod_l+0x490>
 800773e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007940 <_strtod_l+0xc08>
 8007742:	f04f 3aff 	mov.w	sl, #4294967295
 8007746:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007748:	4620      	mov	r0, r4
 800774a:	f001 fc11 	bl	8008f70 <_Bfree>
 800774e:	9905      	ldr	r1, [sp, #20]
 8007750:	4620      	mov	r0, r4
 8007752:	f001 fc0d 	bl	8008f70 <_Bfree>
 8007756:	4631      	mov	r1, r6
 8007758:	4620      	mov	r0, r4
 800775a:	f001 fc09 	bl	8008f70 <_Bfree>
 800775e:	4629      	mov	r1, r5
 8007760:	4620      	mov	r0, r4
 8007762:	f001 fc05 	bl	8008f70 <_Bfree>
 8007766:	e61a      	b.n	800739e <_strtod_l+0x666>
 8007768:	f1ba 0f00 	cmp.w	sl, #0
 800776c:	d11b      	bne.n	80077a6 <_strtod_l+0xa6e>
 800776e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007772:	b9f3      	cbnz	r3, 80077b2 <_strtod_l+0xa7a>
 8007774:	4b6c      	ldr	r3, [pc, #432]	; (8007928 <_strtod_l+0xbf0>)
 8007776:	2200      	movs	r2, #0
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f9 f9c6 	bl	8000b0c <__aeabi_dcmplt>
 8007780:	b9d0      	cbnz	r0, 80077b8 <_strtod_l+0xa80>
 8007782:	4640      	mov	r0, r8
 8007784:	4649      	mov	r1, r9
 8007786:	4b6c      	ldr	r3, [pc, #432]	; (8007938 <_strtod_l+0xc00>)
 8007788:	2200      	movs	r2, #0
 800778a:	f7f8 ff4d 	bl	8000628 <__aeabi_dmul>
 800778e:	4680      	mov	r8, r0
 8007790:	4689      	mov	r9, r1
 8007792:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007796:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800779a:	9315      	str	r3, [sp, #84]	; 0x54
 800779c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80077a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80077a4:	e79d      	b.n	80076e2 <_strtod_l+0x9aa>
 80077a6:	f1ba 0f01 	cmp.w	sl, #1
 80077aa:	d102      	bne.n	80077b2 <_strtod_l+0xa7a>
 80077ac:	2f00      	cmp	r7, #0
 80077ae:	f43f ad83 	beq.w	80072b8 <_strtod_l+0x580>
 80077b2:	4b62      	ldr	r3, [pc, #392]	; (800793c <_strtod_l+0xc04>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	e78e      	b.n	80076d6 <_strtod_l+0x99e>
 80077b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007938 <_strtod_l+0xc00>
 80077bc:	f04f 0800 	mov.w	r8, #0
 80077c0:	e7e7      	b.n	8007792 <_strtod_l+0xa5a>
 80077c2:	4b5d      	ldr	r3, [pc, #372]	; (8007938 <_strtod_l+0xc00>)
 80077c4:	4640      	mov	r0, r8
 80077c6:	4649      	mov	r1, r9
 80077c8:	2200      	movs	r2, #0
 80077ca:	f7f8 ff2d 	bl	8000628 <__aeabi_dmul>
 80077ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077d0:	4680      	mov	r8, r0
 80077d2:	4689      	mov	r9, r1
 80077d4:	b933      	cbnz	r3, 80077e4 <_strtod_l+0xaac>
 80077d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077da:	900e      	str	r0, [sp, #56]	; 0x38
 80077dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80077de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80077e2:	e7dd      	b.n	80077a0 <_strtod_l+0xa68>
 80077e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80077e8:	e7f9      	b.n	80077de <_strtod_l+0xaa6>
 80077ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80077ee:	9b04      	ldr	r3, [sp, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1a8      	bne.n	8007746 <_strtod_l+0xa0e>
 80077f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077fa:	0d1b      	lsrs	r3, r3, #20
 80077fc:	051b      	lsls	r3, r3, #20
 80077fe:	429a      	cmp	r2, r3
 8007800:	d1a1      	bne.n	8007746 <_strtod_l+0xa0e>
 8007802:	4640      	mov	r0, r8
 8007804:	4649      	mov	r1, r9
 8007806:	f7f9 fbb5 	bl	8000f74 <__aeabi_d2lz>
 800780a:	f7f8 fedf 	bl	80005cc <__aeabi_l2d>
 800780e:	4602      	mov	r2, r0
 8007810:	460b      	mov	r3, r1
 8007812:	4640      	mov	r0, r8
 8007814:	4649      	mov	r1, r9
 8007816:	f7f8 fd4f 	bl	80002b8 <__aeabi_dsub>
 800781a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800781c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007820:	ea43 030a 	orr.w	r3, r3, sl
 8007824:	4313      	orrs	r3, r2
 8007826:	4680      	mov	r8, r0
 8007828:	4689      	mov	r9, r1
 800782a:	d055      	beq.n	80078d8 <_strtod_l+0xba0>
 800782c:	a336      	add	r3, pc, #216	; (adr r3, 8007908 <_strtod_l+0xbd0>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f9 f96b 	bl	8000b0c <__aeabi_dcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	f47f acd0 	bne.w	80071dc <_strtod_l+0x4a4>
 800783c:	a334      	add	r3, pc, #208	; (adr r3, 8007910 <_strtod_l+0xbd8>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	4640      	mov	r0, r8
 8007844:	4649      	mov	r1, r9
 8007846:	f7f9 f97f 	bl	8000b48 <__aeabi_dcmpgt>
 800784a:	2800      	cmp	r0, #0
 800784c:	f43f af7b 	beq.w	8007746 <_strtod_l+0xa0e>
 8007850:	e4c4      	b.n	80071dc <_strtod_l+0x4a4>
 8007852:	9b04      	ldr	r3, [sp, #16]
 8007854:	b333      	cbz	r3, 80078a4 <_strtod_l+0xb6c>
 8007856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007858:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800785c:	d822      	bhi.n	80078a4 <_strtod_l+0xb6c>
 800785e:	a32e      	add	r3, pc, #184	; (adr r3, 8007918 <_strtod_l+0xbe0>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	4640      	mov	r0, r8
 8007866:	4649      	mov	r1, r9
 8007868:	f7f9 f95a 	bl	8000b20 <__aeabi_dcmple>
 800786c:	b1a0      	cbz	r0, 8007898 <_strtod_l+0xb60>
 800786e:	4649      	mov	r1, r9
 8007870:	4640      	mov	r0, r8
 8007872:	f7f9 f9b1 	bl	8000bd8 <__aeabi_d2uiz>
 8007876:	2801      	cmp	r0, #1
 8007878:	bf38      	it	cc
 800787a:	2001      	movcc	r0, #1
 800787c:	f7f8 fe5a 	bl	8000534 <__aeabi_ui2d>
 8007880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007882:	4680      	mov	r8, r0
 8007884:	4689      	mov	r9, r1
 8007886:	bb23      	cbnz	r3, 80078d2 <_strtod_l+0xb9a>
 8007888:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800788c:	9010      	str	r0, [sp, #64]	; 0x40
 800788e:	9311      	str	r3, [sp, #68]	; 0x44
 8007890:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007894:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800789a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800789c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80078a0:	1a9b      	subs	r3, r3, r2
 80078a2:	9309      	str	r3, [sp, #36]	; 0x24
 80078a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078a8:	eeb0 0a48 	vmov.f32	s0, s16
 80078ac:	eef0 0a68 	vmov.f32	s1, s17
 80078b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80078b4:	f001 fe8e 	bl	80095d4 <__ulp>
 80078b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078bc:	ec53 2b10 	vmov	r2, r3, d0
 80078c0:	f7f8 feb2 	bl	8000628 <__aeabi_dmul>
 80078c4:	ec53 2b18 	vmov	r2, r3, d8
 80078c8:	f7f8 fcf8 	bl	80002bc <__adddf3>
 80078cc:	4682      	mov	sl, r0
 80078ce:	468b      	mov	fp, r1
 80078d0:	e78d      	b.n	80077ee <_strtod_l+0xab6>
 80078d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80078d6:	e7db      	b.n	8007890 <_strtod_l+0xb58>
 80078d8:	a311      	add	r3, pc, #68	; (adr r3, 8007920 <_strtod_l+0xbe8>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	f7f9 f915 	bl	8000b0c <__aeabi_dcmplt>
 80078e2:	e7b2      	b.n	800784a <_strtod_l+0xb12>
 80078e4:	2300      	movs	r3, #0
 80078e6:	930a      	str	r3, [sp, #40]	; 0x28
 80078e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	f7ff ba6b 	b.w	8006dc8 <_strtod_l+0x90>
 80078f2:	2a65      	cmp	r2, #101	; 0x65
 80078f4:	f43f ab5f 	beq.w	8006fb6 <_strtod_l+0x27e>
 80078f8:	2a45      	cmp	r2, #69	; 0x45
 80078fa:	f43f ab5c 	beq.w	8006fb6 <_strtod_l+0x27e>
 80078fe:	2301      	movs	r3, #1
 8007900:	f7ff bb94 	b.w	800702c <_strtod_l+0x2f4>
 8007904:	f3af 8000 	nop.w
 8007908:	94a03595 	.word	0x94a03595
 800790c:	3fdfffff 	.word	0x3fdfffff
 8007910:	35afe535 	.word	0x35afe535
 8007914:	3fe00000 	.word	0x3fe00000
 8007918:	ffc00000 	.word	0xffc00000
 800791c:	41dfffff 	.word	0x41dfffff
 8007920:	94a03595 	.word	0x94a03595
 8007924:	3fcfffff 	.word	0x3fcfffff
 8007928:	3ff00000 	.word	0x3ff00000
 800792c:	7ff00000 	.word	0x7ff00000
 8007930:	7fe00000 	.word	0x7fe00000
 8007934:	7c9fffff 	.word	0x7c9fffff
 8007938:	3fe00000 	.word	0x3fe00000
 800793c:	bff00000 	.word	0xbff00000
 8007940:	7fefffff 	.word	0x7fefffff

08007944 <_strtod_r>:
 8007944:	4b01      	ldr	r3, [pc, #4]	; (800794c <_strtod_r+0x8>)
 8007946:	f7ff b9f7 	b.w	8006d38 <_strtod_l>
 800794a:	bf00      	nop
 800794c:	2000007c 	.word	0x2000007c

08007950 <_strtol_l.constprop.0>:
 8007950:	2b01      	cmp	r3, #1
 8007952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007956:	d001      	beq.n	800795c <_strtol_l.constprop.0+0xc>
 8007958:	2b24      	cmp	r3, #36	; 0x24
 800795a:	d906      	bls.n	800796a <_strtol_l.constprop.0+0x1a>
 800795c:	f7fe fa8c 	bl	8005e78 <__errno>
 8007960:	2316      	movs	r3, #22
 8007962:	6003      	str	r3, [r0, #0]
 8007964:	2000      	movs	r0, #0
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a50 <_strtol_l.constprop.0+0x100>
 800796e:	460d      	mov	r5, r1
 8007970:	462e      	mov	r6, r5
 8007972:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007976:	f814 700c 	ldrb.w	r7, [r4, ip]
 800797a:	f017 0708 	ands.w	r7, r7, #8
 800797e:	d1f7      	bne.n	8007970 <_strtol_l.constprop.0+0x20>
 8007980:	2c2d      	cmp	r4, #45	; 0x2d
 8007982:	d132      	bne.n	80079ea <_strtol_l.constprop.0+0x9a>
 8007984:	782c      	ldrb	r4, [r5, #0]
 8007986:	2701      	movs	r7, #1
 8007988:	1cb5      	adds	r5, r6, #2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d05b      	beq.n	8007a46 <_strtol_l.constprop.0+0xf6>
 800798e:	2b10      	cmp	r3, #16
 8007990:	d109      	bne.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007992:	2c30      	cmp	r4, #48	; 0x30
 8007994:	d107      	bne.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007996:	782c      	ldrb	r4, [r5, #0]
 8007998:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800799c:	2c58      	cmp	r4, #88	; 0x58
 800799e:	d14d      	bne.n	8007a3c <_strtol_l.constprop.0+0xec>
 80079a0:	786c      	ldrb	r4, [r5, #1]
 80079a2:	2310      	movs	r3, #16
 80079a4:	3502      	adds	r5, #2
 80079a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80079aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80079ae:	f04f 0c00 	mov.w	ip, #0
 80079b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80079b6:	4666      	mov	r6, ip
 80079b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80079bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80079c0:	f1be 0f09 	cmp.w	lr, #9
 80079c4:	d816      	bhi.n	80079f4 <_strtol_l.constprop.0+0xa4>
 80079c6:	4674      	mov	r4, lr
 80079c8:	42a3      	cmp	r3, r4
 80079ca:	dd24      	ble.n	8007a16 <_strtol_l.constprop.0+0xc6>
 80079cc:	f1bc 0f00 	cmp.w	ip, #0
 80079d0:	db1e      	blt.n	8007a10 <_strtol_l.constprop.0+0xc0>
 80079d2:	45b1      	cmp	r9, r6
 80079d4:	d31c      	bcc.n	8007a10 <_strtol_l.constprop.0+0xc0>
 80079d6:	d101      	bne.n	80079dc <_strtol_l.constprop.0+0x8c>
 80079d8:	45a2      	cmp	sl, r4
 80079da:	db19      	blt.n	8007a10 <_strtol_l.constprop.0+0xc0>
 80079dc:	fb06 4603 	mla	r6, r6, r3, r4
 80079e0:	f04f 0c01 	mov.w	ip, #1
 80079e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079e8:	e7e8      	b.n	80079bc <_strtol_l.constprop.0+0x6c>
 80079ea:	2c2b      	cmp	r4, #43	; 0x2b
 80079ec:	bf04      	itt	eq
 80079ee:	782c      	ldrbeq	r4, [r5, #0]
 80079f0:	1cb5      	addeq	r5, r6, #2
 80079f2:	e7ca      	b.n	800798a <_strtol_l.constprop.0+0x3a>
 80079f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079f8:	f1be 0f19 	cmp.w	lr, #25
 80079fc:	d801      	bhi.n	8007a02 <_strtol_l.constprop.0+0xb2>
 80079fe:	3c37      	subs	r4, #55	; 0x37
 8007a00:	e7e2      	b.n	80079c8 <_strtol_l.constprop.0+0x78>
 8007a02:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007a06:	f1be 0f19 	cmp.w	lr, #25
 8007a0a:	d804      	bhi.n	8007a16 <_strtol_l.constprop.0+0xc6>
 8007a0c:	3c57      	subs	r4, #87	; 0x57
 8007a0e:	e7db      	b.n	80079c8 <_strtol_l.constprop.0+0x78>
 8007a10:	f04f 3cff 	mov.w	ip, #4294967295
 8007a14:	e7e6      	b.n	80079e4 <_strtol_l.constprop.0+0x94>
 8007a16:	f1bc 0f00 	cmp.w	ip, #0
 8007a1a:	da05      	bge.n	8007a28 <_strtol_l.constprop.0+0xd8>
 8007a1c:	2322      	movs	r3, #34	; 0x22
 8007a1e:	6003      	str	r3, [r0, #0]
 8007a20:	4646      	mov	r6, r8
 8007a22:	b942      	cbnz	r2, 8007a36 <_strtol_l.constprop.0+0xe6>
 8007a24:	4630      	mov	r0, r6
 8007a26:	e79e      	b.n	8007966 <_strtol_l.constprop.0+0x16>
 8007a28:	b107      	cbz	r7, 8007a2c <_strtol_l.constprop.0+0xdc>
 8007a2a:	4276      	negs	r6, r6
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	d0f9      	beq.n	8007a24 <_strtol_l.constprop.0+0xd4>
 8007a30:	f1bc 0f00 	cmp.w	ip, #0
 8007a34:	d000      	beq.n	8007a38 <_strtol_l.constprop.0+0xe8>
 8007a36:	1e69      	subs	r1, r5, #1
 8007a38:	6011      	str	r1, [r2, #0]
 8007a3a:	e7f3      	b.n	8007a24 <_strtol_l.constprop.0+0xd4>
 8007a3c:	2430      	movs	r4, #48	; 0x30
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1b1      	bne.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007a42:	2308      	movs	r3, #8
 8007a44:	e7af      	b.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007a46:	2c30      	cmp	r4, #48	; 0x30
 8007a48:	d0a5      	beq.n	8007996 <_strtol_l.constprop.0+0x46>
 8007a4a:	230a      	movs	r3, #10
 8007a4c:	e7ab      	b.n	80079a6 <_strtol_l.constprop.0+0x56>
 8007a4e:	bf00      	nop
 8007a50:	0800c989 	.word	0x0800c989

08007a54 <_strtol_r>:
 8007a54:	f7ff bf7c 	b.w	8007950 <_strtol_l.constprop.0>

08007a58 <_write_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4d07      	ldr	r5, [pc, #28]	; (8007a78 <_write_r+0x20>)
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	4608      	mov	r0, r1
 8007a60:	4611      	mov	r1, r2
 8007a62:	2200      	movs	r2, #0
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7fb fa4e 	bl	8002f08 <_write>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_write_r+0x1e>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_write_r+0x1e>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20000d68 	.word	0x20000d68

08007a7c <_close_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d06      	ldr	r5, [pc, #24]	; (8007a98 <_close_r+0x1c>)
 8007a80:	2300      	movs	r3, #0
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	f7fb fa5a 	bl	8002f40 <_close>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_close_r+0x1a>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_close_r+0x1a>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	20000d68 	.word	0x20000d68

08007a9c <quorem>:
 8007a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	6903      	ldr	r3, [r0, #16]
 8007aa2:	690c      	ldr	r4, [r1, #16]
 8007aa4:	42a3      	cmp	r3, r4
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	f2c0 8081 	blt.w	8007bae <quorem+0x112>
 8007aac:	3c01      	subs	r4, #1
 8007aae:	f101 0814 	add.w	r8, r1, #20
 8007ab2:	f100 0514 	add.w	r5, r0, #20
 8007ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aba:	9301      	str	r3, [sp, #4]
 8007abc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007acc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ad0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ad4:	d331      	bcc.n	8007b3a <quorem+0x9e>
 8007ad6:	f04f 0e00 	mov.w	lr, #0
 8007ada:	4640      	mov	r0, r8
 8007adc:	46ac      	mov	ip, r5
 8007ade:	46f2      	mov	sl, lr
 8007ae0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ae4:	b293      	uxth	r3, r2
 8007ae6:	fb06 e303 	mla	r3, r6, r3, lr
 8007aea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	ebaa 0303 	sub.w	r3, sl, r3
 8007af4:	f8dc a000 	ldr.w	sl, [ip]
 8007af8:	0c12      	lsrs	r2, r2, #16
 8007afa:	fa13 f38a 	uxtah	r3, r3, sl
 8007afe:	fb06 e202 	mla	r2, r6, r2, lr
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	9b00      	ldr	r3, [sp, #0]
 8007b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b0a:	b292      	uxth	r2, r2
 8007b0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b14:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b18:	4581      	cmp	r9, r0
 8007b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b1e:	f84c 3b04 	str.w	r3, [ip], #4
 8007b22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b26:	d2db      	bcs.n	8007ae0 <quorem+0x44>
 8007b28:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b2c:	b92b      	cbnz	r3, 8007b3a <quorem+0x9e>
 8007b2e:	9b01      	ldr	r3, [sp, #4]
 8007b30:	3b04      	subs	r3, #4
 8007b32:	429d      	cmp	r5, r3
 8007b34:	461a      	mov	r2, r3
 8007b36:	d32e      	bcc.n	8007b96 <quorem+0xfa>
 8007b38:	613c      	str	r4, [r7, #16]
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	f001 fca4 	bl	8009488 <__mcmp>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	db24      	blt.n	8007b8e <quorem+0xf2>
 8007b44:	3601      	adds	r6, #1
 8007b46:	4628      	mov	r0, r5
 8007b48:	f04f 0c00 	mov.w	ip, #0
 8007b4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b50:	f8d0 e000 	ldr.w	lr, [r0]
 8007b54:	b293      	uxth	r3, r2
 8007b56:	ebac 0303 	sub.w	r3, ip, r3
 8007b5a:	0c12      	lsrs	r2, r2, #16
 8007b5c:	fa13 f38e 	uxtah	r3, r3, lr
 8007b60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b6e:	45c1      	cmp	r9, r8
 8007b70:	f840 3b04 	str.w	r3, [r0], #4
 8007b74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b78:	d2e8      	bcs.n	8007b4c <quorem+0xb0>
 8007b7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b82:	b922      	cbnz	r2, 8007b8e <quorem+0xf2>
 8007b84:	3b04      	subs	r3, #4
 8007b86:	429d      	cmp	r5, r3
 8007b88:	461a      	mov	r2, r3
 8007b8a:	d30a      	bcc.n	8007ba2 <quorem+0x106>
 8007b8c:	613c      	str	r4, [r7, #16]
 8007b8e:	4630      	mov	r0, r6
 8007b90:	b003      	add	sp, #12
 8007b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	3b04      	subs	r3, #4
 8007b9a:	2a00      	cmp	r2, #0
 8007b9c:	d1cc      	bne.n	8007b38 <quorem+0x9c>
 8007b9e:	3c01      	subs	r4, #1
 8007ba0:	e7c7      	b.n	8007b32 <quorem+0x96>
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	3b04      	subs	r3, #4
 8007ba6:	2a00      	cmp	r2, #0
 8007ba8:	d1f0      	bne.n	8007b8c <quorem+0xf0>
 8007baa:	3c01      	subs	r4, #1
 8007bac:	e7eb      	b.n	8007b86 <quorem+0xea>
 8007bae:	2000      	movs	r0, #0
 8007bb0:	e7ee      	b.n	8007b90 <quorem+0xf4>
 8007bb2:	0000      	movs	r0, r0
 8007bb4:	0000      	movs	r0, r0
	...

08007bb8 <_dtoa_r>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	ed2d 8b04 	vpush	{d8-d9}
 8007bc0:	ec57 6b10 	vmov	r6, r7, d0
 8007bc4:	b093      	sub	sp, #76	; 0x4c
 8007bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bcc:	9106      	str	r1, [sp, #24]
 8007bce:	ee10 aa10 	vmov	sl, s0
 8007bd2:	4604      	mov	r4, r0
 8007bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8007bd8:	46bb      	mov	fp, r7
 8007bda:	b975      	cbnz	r5, 8007bfa <_dtoa_r+0x42>
 8007bdc:	2010      	movs	r0, #16
 8007bde:	f001 f95f 	bl	8008ea0 <malloc>
 8007be2:	4602      	mov	r2, r0
 8007be4:	6260      	str	r0, [r4, #36]	; 0x24
 8007be6:	b920      	cbnz	r0, 8007bf2 <_dtoa_r+0x3a>
 8007be8:	4ba7      	ldr	r3, [pc, #668]	; (8007e88 <_dtoa_r+0x2d0>)
 8007bea:	21ea      	movs	r1, #234	; 0xea
 8007bec:	48a7      	ldr	r0, [pc, #668]	; (8007e8c <_dtoa_r+0x2d4>)
 8007bee:	f002 fceb 	bl	800a5c8 <__assert_func>
 8007bf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bf6:	6005      	str	r5, [r0, #0]
 8007bf8:	60c5      	str	r5, [r0, #12]
 8007bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bfc:	6819      	ldr	r1, [r3, #0]
 8007bfe:	b151      	cbz	r1, 8007c16 <_dtoa_r+0x5e>
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	604a      	str	r2, [r1, #4]
 8007c04:	2301      	movs	r3, #1
 8007c06:	4093      	lsls	r3, r2
 8007c08:	608b      	str	r3, [r1, #8]
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f001 f9b0 	bl	8008f70 <_Bfree>
 8007c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	1e3b      	subs	r3, r7, #0
 8007c18:	bfaa      	itet	ge
 8007c1a:	2300      	movge	r3, #0
 8007c1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c20:	f8c8 3000 	strge.w	r3, [r8]
 8007c24:	4b9a      	ldr	r3, [pc, #616]	; (8007e90 <_dtoa_r+0x2d8>)
 8007c26:	bfbc      	itt	lt
 8007c28:	2201      	movlt	r2, #1
 8007c2a:	f8c8 2000 	strlt.w	r2, [r8]
 8007c2e:	ea33 030b 	bics.w	r3, r3, fp
 8007c32:	d11b      	bne.n	8007c6c <_dtoa_r+0xb4>
 8007c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c36:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c40:	4333      	orrs	r3, r6
 8007c42:	f000 8592 	beq.w	800876a <_dtoa_r+0xbb2>
 8007c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c48:	b963      	cbnz	r3, 8007c64 <_dtoa_r+0xac>
 8007c4a:	4b92      	ldr	r3, [pc, #584]	; (8007e94 <_dtoa_r+0x2dc>)
 8007c4c:	e022      	b.n	8007c94 <_dtoa_r+0xdc>
 8007c4e:	4b92      	ldr	r3, [pc, #584]	; (8007e98 <_dtoa_r+0x2e0>)
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	3308      	adds	r3, #8
 8007c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	9801      	ldr	r0, [sp, #4]
 8007c5a:	b013      	add	sp, #76	; 0x4c
 8007c5c:	ecbd 8b04 	vpop	{d8-d9}
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	4b8b      	ldr	r3, [pc, #556]	; (8007e94 <_dtoa_r+0x2dc>)
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	3303      	adds	r3, #3
 8007c6a:	e7f3      	b.n	8007c54 <_dtoa_r+0x9c>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4650      	mov	r0, sl
 8007c72:	4659      	mov	r1, fp
 8007c74:	f7f8 ff40 	bl	8000af8 <__aeabi_dcmpeq>
 8007c78:	ec4b ab19 	vmov	d9, sl, fp
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	b158      	cbz	r0, 8007c98 <_dtoa_r+0xe0>
 8007c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c82:	2301      	movs	r3, #1
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 856b 	beq.w	8008764 <_dtoa_r+0xbac>
 8007c8e:	4883      	ldr	r0, [pc, #524]	; (8007e9c <_dtoa_r+0x2e4>)
 8007c90:	6018      	str	r0, [r3, #0]
 8007c92:	1e43      	subs	r3, r0, #1
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	e7df      	b.n	8007c58 <_dtoa_r+0xa0>
 8007c98:	ec4b ab10 	vmov	d0, sl, fp
 8007c9c:	aa10      	add	r2, sp, #64	; 0x40
 8007c9e:	a911      	add	r1, sp, #68	; 0x44
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f001 fd13 	bl	80096cc <__d2b>
 8007ca6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007caa:	ee08 0a10 	vmov	s16, r0
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	f000 8084 	beq.w	8007dbc <_dtoa_r+0x204>
 8007cb4:	ee19 3a90 	vmov	r3, s19
 8007cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cc0:	4656      	mov	r6, sl
 8007cc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007cce:	4b74      	ldr	r3, [pc, #464]	; (8007ea0 <_dtoa_r+0x2e8>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 faef 	bl	80002b8 <__aeabi_dsub>
 8007cda:	a365      	add	r3, pc, #404	; (adr r3, 8007e70 <_dtoa_r+0x2b8>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7f8 fca2 	bl	8000628 <__aeabi_dmul>
 8007ce4:	a364      	add	r3, pc, #400	; (adr r3, 8007e78 <_dtoa_r+0x2c0>)
 8007ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cea:	f7f8 fae7 	bl	80002bc <__adddf3>
 8007cee:	4606      	mov	r6, r0
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	460f      	mov	r7, r1
 8007cf4:	f7f8 fc2e 	bl	8000554 <__aeabi_i2d>
 8007cf8:	a361      	add	r3, pc, #388	; (adr r3, 8007e80 <_dtoa_r+0x2c8>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fc93 	bl	8000628 <__aeabi_dmul>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fad7 	bl	80002bc <__adddf3>
 8007d0e:	4606      	mov	r6, r0
 8007d10:	460f      	mov	r7, r1
 8007d12:	f7f8 ff39 	bl	8000b88 <__aeabi_d2iz>
 8007d16:	2200      	movs	r2, #0
 8007d18:	9000      	str	r0, [sp, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	4639      	mov	r1, r7
 8007d20:	f7f8 fef4 	bl	8000b0c <__aeabi_dcmplt>
 8007d24:	b150      	cbz	r0, 8007d3c <_dtoa_r+0x184>
 8007d26:	9800      	ldr	r0, [sp, #0]
 8007d28:	f7f8 fc14 	bl	8000554 <__aeabi_i2d>
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	463b      	mov	r3, r7
 8007d30:	f7f8 fee2 	bl	8000af8 <__aeabi_dcmpeq>
 8007d34:	b910      	cbnz	r0, 8007d3c <_dtoa_r+0x184>
 8007d36:	9b00      	ldr	r3, [sp, #0]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	9b00      	ldr	r3, [sp, #0]
 8007d3e:	2b16      	cmp	r3, #22
 8007d40:	d85a      	bhi.n	8007df8 <_dtoa_r+0x240>
 8007d42:	9a00      	ldr	r2, [sp, #0]
 8007d44:	4b57      	ldr	r3, [pc, #348]	; (8007ea4 <_dtoa_r+0x2ec>)
 8007d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	ec51 0b19 	vmov	r0, r1, d9
 8007d52:	f7f8 fedb 	bl	8000b0c <__aeabi_dcmplt>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d050      	beq.n	8007dfc <_dtoa_r+0x244>
 8007d5a:	9b00      	ldr	r3, [sp, #0]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	2300      	movs	r3, #0
 8007d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d66:	1b5d      	subs	r5, r3, r5
 8007d68:	1e6b      	subs	r3, r5, #1
 8007d6a:	9305      	str	r3, [sp, #20]
 8007d6c:	bf45      	ittet	mi
 8007d6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d72:	9304      	strmi	r3, [sp, #16]
 8007d74:	2300      	movpl	r3, #0
 8007d76:	2300      	movmi	r3, #0
 8007d78:	bf4c      	ite	mi
 8007d7a:	9305      	strmi	r3, [sp, #20]
 8007d7c:	9304      	strpl	r3, [sp, #16]
 8007d7e:	9b00      	ldr	r3, [sp, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	db3d      	blt.n	8007e00 <_dtoa_r+0x248>
 8007d84:	9b05      	ldr	r3, [sp, #20]
 8007d86:	9a00      	ldr	r2, [sp, #0]
 8007d88:	920a      	str	r2, [sp, #40]	; 0x28
 8007d8a:	4413      	add	r3, r2
 8007d8c:	9305      	str	r3, [sp, #20]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9307      	str	r3, [sp, #28]
 8007d92:	9b06      	ldr	r3, [sp, #24]
 8007d94:	2b09      	cmp	r3, #9
 8007d96:	f200 8089 	bhi.w	8007eac <_dtoa_r+0x2f4>
 8007d9a:	2b05      	cmp	r3, #5
 8007d9c:	bfc4      	itt	gt
 8007d9e:	3b04      	subgt	r3, #4
 8007da0:	9306      	strgt	r3, [sp, #24]
 8007da2:	9b06      	ldr	r3, [sp, #24]
 8007da4:	f1a3 0302 	sub.w	r3, r3, #2
 8007da8:	bfcc      	ite	gt
 8007daa:	2500      	movgt	r5, #0
 8007dac:	2501      	movle	r5, #1
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	f200 8087 	bhi.w	8007ec2 <_dtoa_r+0x30a>
 8007db4:	e8df f003 	tbb	[pc, r3]
 8007db8:	59383a2d 	.word	0x59383a2d
 8007dbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007dc0:	441d      	add	r5, r3
 8007dc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	bfc1      	itttt	gt
 8007dca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007dd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007dd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007dda:	bfda      	itte	le
 8007ddc:	f1c3 0320 	rsble	r3, r3, #32
 8007de0:	fa06 f003 	lslle.w	r0, r6, r3
 8007de4:	4318      	orrgt	r0, r3
 8007de6:	f7f8 fba5 	bl	8000534 <__aeabi_ui2d>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4606      	mov	r6, r0
 8007dee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007df2:	3d01      	subs	r5, #1
 8007df4:	930e      	str	r3, [sp, #56]	; 0x38
 8007df6:	e76a      	b.n	8007cce <_dtoa_r+0x116>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e7b2      	b.n	8007d62 <_dtoa_r+0x1aa>
 8007dfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dfe:	e7b1      	b.n	8007d64 <_dtoa_r+0x1ac>
 8007e00:	9b04      	ldr	r3, [sp, #16]
 8007e02:	9a00      	ldr	r2, [sp, #0]
 8007e04:	1a9b      	subs	r3, r3, r2
 8007e06:	9304      	str	r3, [sp, #16]
 8007e08:	4253      	negs	r3, r2
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e10:	e7bf      	b.n	8007d92 <_dtoa_r+0x1da>
 8007e12:	2300      	movs	r3, #0
 8007e14:	9308      	str	r3, [sp, #32]
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dc55      	bgt.n	8007ec8 <_dtoa_r+0x310>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e22:	461a      	mov	r2, r3
 8007e24:	9209      	str	r2, [sp, #36]	; 0x24
 8007e26:	e00c      	b.n	8007e42 <_dtoa_r+0x28a>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e7f3      	b.n	8007e14 <_dtoa_r+0x25c>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e30:	9308      	str	r3, [sp, #32]
 8007e32:	9b00      	ldr	r3, [sp, #0]
 8007e34:	4413      	add	r3, r2
 8007e36:	9302      	str	r3, [sp, #8]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	9303      	str	r3, [sp, #12]
 8007e3e:	bfb8      	it	lt
 8007e40:	2301      	movlt	r3, #1
 8007e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e44:	2200      	movs	r2, #0
 8007e46:	6042      	str	r2, [r0, #4]
 8007e48:	2204      	movs	r2, #4
 8007e4a:	f102 0614 	add.w	r6, r2, #20
 8007e4e:	429e      	cmp	r6, r3
 8007e50:	6841      	ldr	r1, [r0, #4]
 8007e52:	d93d      	bls.n	8007ed0 <_dtoa_r+0x318>
 8007e54:	4620      	mov	r0, r4
 8007e56:	f001 f84b 	bl	8008ef0 <_Balloc>
 8007e5a:	9001      	str	r0, [sp, #4]
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d13b      	bne.n	8007ed8 <_dtoa_r+0x320>
 8007e60:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <_dtoa_r+0x2f0>)
 8007e62:	4602      	mov	r2, r0
 8007e64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e68:	e6c0      	b.n	8007bec <_dtoa_r+0x34>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e7df      	b.n	8007e2e <_dtoa_r+0x276>
 8007e6e:	bf00      	nop
 8007e70:	636f4361 	.word	0x636f4361
 8007e74:	3fd287a7 	.word	0x3fd287a7
 8007e78:	8b60c8b3 	.word	0x8b60c8b3
 8007e7c:	3fc68a28 	.word	0x3fc68a28
 8007e80:	509f79fb 	.word	0x509f79fb
 8007e84:	3fd34413 	.word	0x3fd34413
 8007e88:	0800ca96 	.word	0x0800ca96
 8007e8c:	0800caad 	.word	0x0800caad
 8007e90:	7ff00000 	.word	0x7ff00000
 8007e94:	0800ca92 	.word	0x0800ca92
 8007e98:	0800ca89 	.word	0x0800ca89
 8007e9c:	0800cd02 	.word	0x0800cd02
 8007ea0:	3ff80000 	.word	0x3ff80000
 8007ea4:	0800cc18 	.word	0x0800cc18
 8007ea8:	0800cb08 	.word	0x0800cb08
 8007eac:	2501      	movs	r5, #1
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9306      	str	r3, [sp, #24]
 8007eb2:	9508      	str	r5, [sp, #32]
 8007eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2312      	movs	r3, #18
 8007ec0:	e7b0      	b.n	8007e24 <_dtoa_r+0x26c>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	9308      	str	r3, [sp, #32]
 8007ec6:	e7f5      	b.n	8007eb4 <_dtoa_r+0x2fc>
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ece:	e7b8      	b.n	8007e42 <_dtoa_r+0x28a>
 8007ed0:	3101      	adds	r1, #1
 8007ed2:	6041      	str	r1, [r0, #4]
 8007ed4:	0052      	lsls	r2, r2, #1
 8007ed6:	e7b8      	b.n	8007e4a <_dtoa_r+0x292>
 8007ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eda:	9a01      	ldr	r2, [sp, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	9b03      	ldr	r3, [sp, #12]
 8007ee0:	2b0e      	cmp	r3, #14
 8007ee2:	f200 809d 	bhi.w	8008020 <_dtoa_r+0x468>
 8007ee6:	2d00      	cmp	r5, #0
 8007ee8:	f000 809a 	beq.w	8008020 <_dtoa_r+0x468>
 8007eec:	9b00      	ldr	r3, [sp, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dd32      	ble.n	8007f58 <_dtoa_r+0x3a0>
 8007ef2:	4ab7      	ldr	r2, [pc, #732]	; (80081d0 <_dtoa_r+0x618>)
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f00:	9b00      	ldr	r3, [sp, #0]
 8007f02:	05d8      	lsls	r0, r3, #23
 8007f04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f08:	d516      	bpl.n	8007f38 <_dtoa_r+0x380>
 8007f0a:	4bb2      	ldr	r3, [pc, #712]	; (80081d4 <_dtoa_r+0x61c>)
 8007f0c:	ec51 0b19 	vmov	r0, r1, d9
 8007f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f14:	f7f8 fcb2 	bl	800087c <__aeabi_ddiv>
 8007f18:	f007 070f 	and.w	r7, r7, #15
 8007f1c:	4682      	mov	sl, r0
 8007f1e:	468b      	mov	fp, r1
 8007f20:	2503      	movs	r5, #3
 8007f22:	4eac      	ldr	r6, [pc, #688]	; (80081d4 <_dtoa_r+0x61c>)
 8007f24:	b957      	cbnz	r7, 8007f3c <_dtoa_r+0x384>
 8007f26:	4642      	mov	r2, r8
 8007f28:	464b      	mov	r3, r9
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	f7f8 fca5 	bl	800087c <__aeabi_ddiv>
 8007f32:	4682      	mov	sl, r0
 8007f34:	468b      	mov	fp, r1
 8007f36:	e028      	b.n	8007f8a <_dtoa_r+0x3d2>
 8007f38:	2502      	movs	r5, #2
 8007f3a:	e7f2      	b.n	8007f22 <_dtoa_r+0x36a>
 8007f3c:	07f9      	lsls	r1, r7, #31
 8007f3e:	d508      	bpl.n	8007f52 <_dtoa_r+0x39a>
 8007f40:	4640      	mov	r0, r8
 8007f42:	4649      	mov	r1, r9
 8007f44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f48:	f7f8 fb6e 	bl	8000628 <__aeabi_dmul>
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4689      	mov	r9, r1
 8007f52:	107f      	asrs	r7, r7, #1
 8007f54:	3608      	adds	r6, #8
 8007f56:	e7e5      	b.n	8007f24 <_dtoa_r+0x36c>
 8007f58:	f000 809b 	beq.w	8008092 <_dtoa_r+0x4da>
 8007f5c:	9b00      	ldr	r3, [sp, #0]
 8007f5e:	4f9d      	ldr	r7, [pc, #628]	; (80081d4 <_dtoa_r+0x61c>)
 8007f60:	425e      	negs	r6, r3
 8007f62:	4b9b      	ldr	r3, [pc, #620]	; (80081d0 <_dtoa_r+0x618>)
 8007f64:	f006 020f 	and.w	r2, r6, #15
 8007f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	ec51 0b19 	vmov	r0, r1, d9
 8007f74:	f7f8 fb58 	bl	8000628 <__aeabi_dmul>
 8007f78:	1136      	asrs	r6, r6, #4
 8007f7a:	4682      	mov	sl, r0
 8007f7c:	468b      	mov	fp, r1
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2502      	movs	r5, #2
 8007f82:	2e00      	cmp	r6, #0
 8007f84:	d17a      	bne.n	800807c <_dtoa_r+0x4c4>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1d3      	bne.n	8007f32 <_dtoa_r+0x37a>
 8007f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 8082 	beq.w	8008096 <_dtoa_r+0x4de>
 8007f92:	4b91      	ldr	r3, [pc, #580]	; (80081d8 <_dtoa_r+0x620>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	4650      	mov	r0, sl
 8007f98:	4659      	mov	r1, fp
 8007f9a:	f7f8 fdb7 	bl	8000b0c <__aeabi_dcmplt>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d079      	beq.n	8008096 <_dtoa_r+0x4de>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d076      	beq.n	8008096 <_dtoa_r+0x4de>
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	dd36      	ble.n	800801c <_dtoa_r+0x464>
 8007fae:	9b00      	ldr	r3, [sp, #0]
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	4659      	mov	r1, fp
 8007fb4:	1e5f      	subs	r7, r3, #1
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	4b88      	ldr	r3, [pc, #544]	; (80081dc <_dtoa_r+0x624>)
 8007fba:	f7f8 fb35 	bl	8000628 <__aeabi_dmul>
 8007fbe:	9e02      	ldr	r6, [sp, #8]
 8007fc0:	4682      	mov	sl, r0
 8007fc2:	468b      	mov	fp, r1
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f7f8 fac4 	bl	8000554 <__aeabi_i2d>
 8007fcc:	4652      	mov	r2, sl
 8007fce:	465b      	mov	r3, fp
 8007fd0:	f7f8 fb2a 	bl	8000628 <__aeabi_dmul>
 8007fd4:	4b82      	ldr	r3, [pc, #520]	; (80081e0 <_dtoa_r+0x628>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f7f8 f970 	bl	80002bc <__adddf3>
 8007fdc:	46d0      	mov	r8, sl
 8007fde:	46d9      	mov	r9, fp
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007fe6:	2e00      	cmp	r6, #0
 8007fe8:	d158      	bne.n	800809c <_dtoa_r+0x4e4>
 8007fea:	4b7e      	ldr	r3, [pc, #504]	; (80081e4 <_dtoa_r+0x62c>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 f961 	bl	80002b8 <__aeabi_dsub>
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	465b      	mov	r3, fp
 8007ffa:	4680      	mov	r8, r0
 8007ffc:	4689      	mov	r9, r1
 8007ffe:	f7f8 fda3 	bl	8000b48 <__aeabi_dcmpgt>
 8008002:	2800      	cmp	r0, #0
 8008004:	f040 8295 	bne.w	8008532 <_dtoa_r+0x97a>
 8008008:	4652      	mov	r2, sl
 800800a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fd7b 	bl	8000b0c <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	f040 8289 	bne.w	800852e <_dtoa_r+0x976>
 800801c:	ec5b ab19 	vmov	sl, fp, d9
 8008020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008022:	2b00      	cmp	r3, #0
 8008024:	f2c0 8148 	blt.w	80082b8 <_dtoa_r+0x700>
 8008028:	9a00      	ldr	r2, [sp, #0]
 800802a:	2a0e      	cmp	r2, #14
 800802c:	f300 8144 	bgt.w	80082b8 <_dtoa_r+0x700>
 8008030:	4b67      	ldr	r3, [pc, #412]	; (80081d0 <_dtoa_r+0x618>)
 8008032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008036:	e9d3 8900 	ldrd	r8, r9, [r3]
 800803a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	f280 80d5 	bge.w	80081ec <_dtoa_r+0x634>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	f300 80d1 	bgt.w	80081ec <_dtoa_r+0x634>
 800804a:	f040 826f 	bne.w	800852c <_dtoa_r+0x974>
 800804e:	4b65      	ldr	r3, [pc, #404]	; (80081e4 <_dtoa_r+0x62c>)
 8008050:	2200      	movs	r2, #0
 8008052:	4640      	mov	r0, r8
 8008054:	4649      	mov	r1, r9
 8008056:	f7f8 fae7 	bl	8000628 <__aeabi_dmul>
 800805a:	4652      	mov	r2, sl
 800805c:	465b      	mov	r3, fp
 800805e:	f7f8 fd69 	bl	8000b34 <__aeabi_dcmpge>
 8008062:	9e03      	ldr	r6, [sp, #12]
 8008064:	4637      	mov	r7, r6
 8008066:	2800      	cmp	r0, #0
 8008068:	f040 8245 	bne.w	80084f6 <_dtoa_r+0x93e>
 800806c:	9d01      	ldr	r5, [sp, #4]
 800806e:	2331      	movs	r3, #49	; 0x31
 8008070:	f805 3b01 	strb.w	r3, [r5], #1
 8008074:	9b00      	ldr	r3, [sp, #0]
 8008076:	3301      	adds	r3, #1
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	e240      	b.n	80084fe <_dtoa_r+0x946>
 800807c:	07f2      	lsls	r2, r6, #31
 800807e:	d505      	bpl.n	800808c <_dtoa_r+0x4d4>
 8008080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008084:	f7f8 fad0 	bl	8000628 <__aeabi_dmul>
 8008088:	3501      	adds	r5, #1
 800808a:	2301      	movs	r3, #1
 800808c:	1076      	asrs	r6, r6, #1
 800808e:	3708      	adds	r7, #8
 8008090:	e777      	b.n	8007f82 <_dtoa_r+0x3ca>
 8008092:	2502      	movs	r5, #2
 8008094:	e779      	b.n	8007f8a <_dtoa_r+0x3d2>
 8008096:	9f00      	ldr	r7, [sp, #0]
 8008098:	9e03      	ldr	r6, [sp, #12]
 800809a:	e794      	b.n	8007fc6 <_dtoa_r+0x40e>
 800809c:	9901      	ldr	r1, [sp, #4]
 800809e:	4b4c      	ldr	r3, [pc, #304]	; (80081d0 <_dtoa_r+0x618>)
 80080a0:	4431      	add	r1, r6
 80080a2:	910d      	str	r1, [sp, #52]	; 0x34
 80080a4:	9908      	ldr	r1, [sp, #32]
 80080a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80080aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d043      	beq.n	800813a <_dtoa_r+0x582>
 80080b2:	494d      	ldr	r1, [pc, #308]	; (80081e8 <_dtoa_r+0x630>)
 80080b4:	2000      	movs	r0, #0
 80080b6:	f7f8 fbe1 	bl	800087c <__aeabi_ddiv>
 80080ba:	4652      	mov	r2, sl
 80080bc:	465b      	mov	r3, fp
 80080be:	f7f8 f8fb 	bl	80002b8 <__aeabi_dsub>
 80080c2:	9d01      	ldr	r5, [sp, #4]
 80080c4:	4682      	mov	sl, r0
 80080c6:	468b      	mov	fp, r1
 80080c8:	4649      	mov	r1, r9
 80080ca:	4640      	mov	r0, r8
 80080cc:	f7f8 fd5c 	bl	8000b88 <__aeabi_d2iz>
 80080d0:	4606      	mov	r6, r0
 80080d2:	f7f8 fa3f 	bl	8000554 <__aeabi_i2d>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 f8eb 	bl	80002b8 <__aeabi_dsub>
 80080e2:	3630      	adds	r6, #48	; 0x30
 80080e4:	f805 6b01 	strb.w	r6, [r5], #1
 80080e8:	4652      	mov	r2, sl
 80080ea:	465b      	mov	r3, fp
 80080ec:	4680      	mov	r8, r0
 80080ee:	4689      	mov	r9, r1
 80080f0:	f7f8 fd0c 	bl	8000b0c <__aeabi_dcmplt>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d163      	bne.n	80081c0 <_dtoa_r+0x608>
 80080f8:	4642      	mov	r2, r8
 80080fa:	464b      	mov	r3, r9
 80080fc:	4936      	ldr	r1, [pc, #216]	; (80081d8 <_dtoa_r+0x620>)
 80080fe:	2000      	movs	r0, #0
 8008100:	f7f8 f8da 	bl	80002b8 <__aeabi_dsub>
 8008104:	4652      	mov	r2, sl
 8008106:	465b      	mov	r3, fp
 8008108:	f7f8 fd00 	bl	8000b0c <__aeabi_dcmplt>
 800810c:	2800      	cmp	r0, #0
 800810e:	f040 80b5 	bne.w	800827c <_dtoa_r+0x6c4>
 8008112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008114:	429d      	cmp	r5, r3
 8008116:	d081      	beq.n	800801c <_dtoa_r+0x464>
 8008118:	4b30      	ldr	r3, [pc, #192]	; (80081dc <_dtoa_r+0x624>)
 800811a:	2200      	movs	r2, #0
 800811c:	4650      	mov	r0, sl
 800811e:	4659      	mov	r1, fp
 8008120:	f7f8 fa82 	bl	8000628 <__aeabi_dmul>
 8008124:	4b2d      	ldr	r3, [pc, #180]	; (80081dc <_dtoa_r+0x624>)
 8008126:	4682      	mov	sl, r0
 8008128:	468b      	mov	fp, r1
 800812a:	4640      	mov	r0, r8
 800812c:	4649      	mov	r1, r9
 800812e:	2200      	movs	r2, #0
 8008130:	f7f8 fa7a 	bl	8000628 <__aeabi_dmul>
 8008134:	4680      	mov	r8, r0
 8008136:	4689      	mov	r9, r1
 8008138:	e7c6      	b.n	80080c8 <_dtoa_r+0x510>
 800813a:	4650      	mov	r0, sl
 800813c:	4659      	mov	r1, fp
 800813e:	f7f8 fa73 	bl	8000628 <__aeabi_dmul>
 8008142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008144:	9d01      	ldr	r5, [sp, #4]
 8008146:	930f      	str	r3, [sp, #60]	; 0x3c
 8008148:	4682      	mov	sl, r0
 800814a:	468b      	mov	fp, r1
 800814c:	4649      	mov	r1, r9
 800814e:	4640      	mov	r0, r8
 8008150:	f7f8 fd1a 	bl	8000b88 <__aeabi_d2iz>
 8008154:	4606      	mov	r6, r0
 8008156:	f7f8 f9fd 	bl	8000554 <__aeabi_i2d>
 800815a:	3630      	adds	r6, #48	; 0x30
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	4640      	mov	r0, r8
 8008162:	4649      	mov	r1, r9
 8008164:	f7f8 f8a8 	bl	80002b8 <__aeabi_dsub>
 8008168:	f805 6b01 	strb.w	r6, [r5], #1
 800816c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800816e:	429d      	cmp	r5, r3
 8008170:	4680      	mov	r8, r0
 8008172:	4689      	mov	r9, r1
 8008174:	f04f 0200 	mov.w	r2, #0
 8008178:	d124      	bne.n	80081c4 <_dtoa_r+0x60c>
 800817a:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <_dtoa_r+0x630>)
 800817c:	4650      	mov	r0, sl
 800817e:	4659      	mov	r1, fp
 8008180:	f7f8 f89c 	bl	80002bc <__adddf3>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4640      	mov	r0, r8
 800818a:	4649      	mov	r1, r9
 800818c:	f7f8 fcdc 	bl	8000b48 <__aeabi_dcmpgt>
 8008190:	2800      	cmp	r0, #0
 8008192:	d173      	bne.n	800827c <_dtoa_r+0x6c4>
 8008194:	4652      	mov	r2, sl
 8008196:	465b      	mov	r3, fp
 8008198:	4913      	ldr	r1, [pc, #76]	; (80081e8 <_dtoa_r+0x630>)
 800819a:	2000      	movs	r0, #0
 800819c:	f7f8 f88c 	bl	80002b8 <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4640      	mov	r0, r8
 80081a6:	4649      	mov	r1, r9
 80081a8:	f7f8 fcb0 	bl	8000b0c <__aeabi_dcmplt>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f43f af35 	beq.w	800801c <_dtoa_r+0x464>
 80081b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081b4:	1e6b      	subs	r3, r5, #1
 80081b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081bc:	2b30      	cmp	r3, #48	; 0x30
 80081be:	d0f8      	beq.n	80081b2 <_dtoa_r+0x5fa>
 80081c0:	9700      	str	r7, [sp, #0]
 80081c2:	e049      	b.n	8008258 <_dtoa_r+0x6a0>
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <_dtoa_r+0x624>)
 80081c6:	f7f8 fa2f 	bl	8000628 <__aeabi_dmul>
 80081ca:	4680      	mov	r8, r0
 80081cc:	4689      	mov	r9, r1
 80081ce:	e7bd      	b.n	800814c <_dtoa_r+0x594>
 80081d0:	0800cc18 	.word	0x0800cc18
 80081d4:	0800cbf0 	.word	0x0800cbf0
 80081d8:	3ff00000 	.word	0x3ff00000
 80081dc:	40240000 	.word	0x40240000
 80081e0:	401c0000 	.word	0x401c0000
 80081e4:	40140000 	.word	0x40140000
 80081e8:	3fe00000 	.word	0x3fe00000
 80081ec:	9d01      	ldr	r5, [sp, #4]
 80081ee:	4656      	mov	r6, sl
 80081f0:	465f      	mov	r7, fp
 80081f2:	4642      	mov	r2, r8
 80081f4:	464b      	mov	r3, r9
 80081f6:	4630      	mov	r0, r6
 80081f8:	4639      	mov	r1, r7
 80081fa:	f7f8 fb3f 	bl	800087c <__aeabi_ddiv>
 80081fe:	f7f8 fcc3 	bl	8000b88 <__aeabi_d2iz>
 8008202:	4682      	mov	sl, r0
 8008204:	f7f8 f9a6 	bl	8000554 <__aeabi_i2d>
 8008208:	4642      	mov	r2, r8
 800820a:	464b      	mov	r3, r9
 800820c:	f7f8 fa0c 	bl	8000628 <__aeabi_dmul>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4630      	mov	r0, r6
 8008216:	4639      	mov	r1, r7
 8008218:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800821c:	f7f8 f84c 	bl	80002b8 <__aeabi_dsub>
 8008220:	f805 6b01 	strb.w	r6, [r5], #1
 8008224:	9e01      	ldr	r6, [sp, #4]
 8008226:	9f03      	ldr	r7, [sp, #12]
 8008228:	1bae      	subs	r6, r5, r6
 800822a:	42b7      	cmp	r7, r6
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	d135      	bne.n	800829e <_dtoa_r+0x6e6>
 8008232:	f7f8 f843 	bl	80002bc <__adddf3>
 8008236:	4642      	mov	r2, r8
 8008238:	464b      	mov	r3, r9
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	f7f8 fc83 	bl	8000b48 <__aeabi_dcmpgt>
 8008242:	b9d0      	cbnz	r0, 800827a <_dtoa_r+0x6c2>
 8008244:	4642      	mov	r2, r8
 8008246:	464b      	mov	r3, r9
 8008248:	4630      	mov	r0, r6
 800824a:	4639      	mov	r1, r7
 800824c:	f7f8 fc54 	bl	8000af8 <__aeabi_dcmpeq>
 8008250:	b110      	cbz	r0, 8008258 <_dtoa_r+0x6a0>
 8008252:	f01a 0f01 	tst.w	sl, #1
 8008256:	d110      	bne.n	800827a <_dtoa_r+0x6c2>
 8008258:	4620      	mov	r0, r4
 800825a:	ee18 1a10 	vmov	r1, s16
 800825e:	f000 fe87 	bl	8008f70 <_Bfree>
 8008262:	2300      	movs	r3, #0
 8008264:	9800      	ldr	r0, [sp, #0]
 8008266:	702b      	strb	r3, [r5, #0]
 8008268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800826a:	3001      	adds	r0, #1
 800826c:	6018      	str	r0, [r3, #0]
 800826e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008270:	2b00      	cmp	r3, #0
 8008272:	f43f acf1 	beq.w	8007c58 <_dtoa_r+0xa0>
 8008276:	601d      	str	r5, [r3, #0]
 8008278:	e4ee      	b.n	8007c58 <_dtoa_r+0xa0>
 800827a:	9f00      	ldr	r7, [sp, #0]
 800827c:	462b      	mov	r3, r5
 800827e:	461d      	mov	r5, r3
 8008280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008284:	2a39      	cmp	r2, #57	; 0x39
 8008286:	d106      	bne.n	8008296 <_dtoa_r+0x6de>
 8008288:	9a01      	ldr	r2, [sp, #4]
 800828a:	429a      	cmp	r2, r3
 800828c:	d1f7      	bne.n	800827e <_dtoa_r+0x6c6>
 800828e:	9901      	ldr	r1, [sp, #4]
 8008290:	2230      	movs	r2, #48	; 0x30
 8008292:	3701      	adds	r7, #1
 8008294:	700a      	strb	r2, [r1, #0]
 8008296:	781a      	ldrb	r2, [r3, #0]
 8008298:	3201      	adds	r2, #1
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	e790      	b.n	80081c0 <_dtoa_r+0x608>
 800829e:	4ba6      	ldr	r3, [pc, #664]	; (8008538 <_dtoa_r+0x980>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	f7f8 f9c1 	bl	8000628 <__aeabi_dmul>
 80082a6:	2200      	movs	r2, #0
 80082a8:	2300      	movs	r3, #0
 80082aa:	4606      	mov	r6, r0
 80082ac:	460f      	mov	r7, r1
 80082ae:	f7f8 fc23 	bl	8000af8 <__aeabi_dcmpeq>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d09d      	beq.n	80081f2 <_dtoa_r+0x63a>
 80082b6:	e7cf      	b.n	8008258 <_dtoa_r+0x6a0>
 80082b8:	9a08      	ldr	r2, [sp, #32]
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	f000 80d7 	beq.w	800846e <_dtoa_r+0x8b6>
 80082c0:	9a06      	ldr	r2, [sp, #24]
 80082c2:	2a01      	cmp	r2, #1
 80082c4:	f300 80ba 	bgt.w	800843c <_dtoa_r+0x884>
 80082c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ca:	2a00      	cmp	r2, #0
 80082cc:	f000 80b2 	beq.w	8008434 <_dtoa_r+0x87c>
 80082d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082d4:	9e07      	ldr	r6, [sp, #28]
 80082d6:	9d04      	ldr	r5, [sp, #16]
 80082d8:	9a04      	ldr	r2, [sp, #16]
 80082da:	441a      	add	r2, r3
 80082dc:	9204      	str	r2, [sp, #16]
 80082de:	9a05      	ldr	r2, [sp, #20]
 80082e0:	2101      	movs	r1, #1
 80082e2:	441a      	add	r2, r3
 80082e4:	4620      	mov	r0, r4
 80082e6:	9205      	str	r2, [sp, #20]
 80082e8:	f000 ff44 	bl	8009174 <__i2b>
 80082ec:	4607      	mov	r7, r0
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	dd0c      	ble.n	800830c <_dtoa_r+0x754>
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dd09      	ble.n	800830c <_dtoa_r+0x754>
 80082f8:	42ab      	cmp	r3, r5
 80082fa:	9a04      	ldr	r2, [sp, #16]
 80082fc:	bfa8      	it	ge
 80082fe:	462b      	movge	r3, r5
 8008300:	1ad2      	subs	r2, r2, r3
 8008302:	9204      	str	r2, [sp, #16]
 8008304:	9a05      	ldr	r2, [sp, #20]
 8008306:	1aed      	subs	r5, r5, r3
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	b31b      	cbz	r3, 8008358 <_dtoa_r+0x7a0>
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 80af 	beq.w	8008476 <_dtoa_r+0x8be>
 8008318:	2e00      	cmp	r6, #0
 800831a:	dd13      	ble.n	8008344 <_dtoa_r+0x78c>
 800831c:	4639      	mov	r1, r7
 800831e:	4632      	mov	r2, r6
 8008320:	4620      	mov	r0, r4
 8008322:	f000 ffe7 	bl	80092f4 <__pow5mult>
 8008326:	ee18 2a10 	vmov	r2, s16
 800832a:	4601      	mov	r1, r0
 800832c:	4607      	mov	r7, r0
 800832e:	4620      	mov	r0, r4
 8008330:	f000 ff36 	bl	80091a0 <__multiply>
 8008334:	ee18 1a10 	vmov	r1, s16
 8008338:	4680      	mov	r8, r0
 800833a:	4620      	mov	r0, r4
 800833c:	f000 fe18 	bl	8008f70 <_Bfree>
 8008340:	ee08 8a10 	vmov	s16, r8
 8008344:	9b07      	ldr	r3, [sp, #28]
 8008346:	1b9a      	subs	r2, r3, r6
 8008348:	d006      	beq.n	8008358 <_dtoa_r+0x7a0>
 800834a:	ee18 1a10 	vmov	r1, s16
 800834e:	4620      	mov	r0, r4
 8008350:	f000 ffd0 	bl	80092f4 <__pow5mult>
 8008354:	ee08 0a10 	vmov	s16, r0
 8008358:	2101      	movs	r1, #1
 800835a:	4620      	mov	r0, r4
 800835c:	f000 ff0a 	bl	8009174 <__i2b>
 8008360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008362:	2b00      	cmp	r3, #0
 8008364:	4606      	mov	r6, r0
 8008366:	f340 8088 	ble.w	800847a <_dtoa_r+0x8c2>
 800836a:	461a      	mov	r2, r3
 800836c:	4601      	mov	r1, r0
 800836e:	4620      	mov	r0, r4
 8008370:	f000 ffc0 	bl	80092f4 <__pow5mult>
 8008374:	9b06      	ldr	r3, [sp, #24]
 8008376:	2b01      	cmp	r3, #1
 8008378:	4606      	mov	r6, r0
 800837a:	f340 8081 	ble.w	8008480 <_dtoa_r+0x8c8>
 800837e:	f04f 0800 	mov.w	r8, #0
 8008382:	6933      	ldr	r3, [r6, #16]
 8008384:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008388:	6918      	ldr	r0, [r3, #16]
 800838a:	f000 fea3 	bl	80090d4 <__hi0bits>
 800838e:	f1c0 0020 	rsb	r0, r0, #32
 8008392:	9b05      	ldr	r3, [sp, #20]
 8008394:	4418      	add	r0, r3
 8008396:	f010 001f 	ands.w	r0, r0, #31
 800839a:	f000 8092 	beq.w	80084c2 <_dtoa_r+0x90a>
 800839e:	f1c0 0320 	rsb	r3, r0, #32
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	f340 808a 	ble.w	80084bc <_dtoa_r+0x904>
 80083a8:	f1c0 001c 	rsb	r0, r0, #28
 80083ac:	9b04      	ldr	r3, [sp, #16]
 80083ae:	4403      	add	r3, r0
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	9b05      	ldr	r3, [sp, #20]
 80083b4:	4403      	add	r3, r0
 80083b6:	4405      	add	r5, r0
 80083b8:	9305      	str	r3, [sp, #20]
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dd07      	ble.n	80083d0 <_dtoa_r+0x818>
 80083c0:	ee18 1a10 	vmov	r1, s16
 80083c4:	461a      	mov	r2, r3
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 ffee 	bl	80093a8 <__lshift>
 80083cc:	ee08 0a10 	vmov	s16, r0
 80083d0:	9b05      	ldr	r3, [sp, #20]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dd05      	ble.n	80083e2 <_dtoa_r+0x82a>
 80083d6:	4631      	mov	r1, r6
 80083d8:	461a      	mov	r2, r3
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 ffe4 	bl	80093a8 <__lshift>
 80083e0:	4606      	mov	r6, r0
 80083e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d06e      	beq.n	80084c6 <_dtoa_r+0x90e>
 80083e8:	ee18 0a10 	vmov	r0, s16
 80083ec:	4631      	mov	r1, r6
 80083ee:	f001 f84b 	bl	8009488 <__mcmp>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	da67      	bge.n	80084c6 <_dtoa_r+0x90e>
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	ee18 1a10 	vmov	r1, s16
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	220a      	movs	r2, #10
 8008402:	2300      	movs	r3, #0
 8008404:	4620      	mov	r0, r4
 8008406:	f000 fdd5 	bl	8008fb4 <__multadd>
 800840a:	9b08      	ldr	r3, [sp, #32]
 800840c:	ee08 0a10 	vmov	s16, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 81b1 	beq.w	8008778 <_dtoa_r+0xbc0>
 8008416:	2300      	movs	r3, #0
 8008418:	4639      	mov	r1, r7
 800841a:	220a      	movs	r2, #10
 800841c:	4620      	mov	r0, r4
 800841e:	f000 fdc9 	bl	8008fb4 <__multadd>
 8008422:	9b02      	ldr	r3, [sp, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	4607      	mov	r7, r0
 8008428:	f300 808e 	bgt.w	8008548 <_dtoa_r+0x990>
 800842c:	9b06      	ldr	r3, [sp, #24]
 800842e:	2b02      	cmp	r3, #2
 8008430:	dc51      	bgt.n	80084d6 <_dtoa_r+0x91e>
 8008432:	e089      	b.n	8008548 <_dtoa_r+0x990>
 8008434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800843a:	e74b      	b.n	80082d4 <_dtoa_r+0x71c>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1e5e      	subs	r6, r3, #1
 8008440:	9b07      	ldr	r3, [sp, #28]
 8008442:	42b3      	cmp	r3, r6
 8008444:	bfbf      	itttt	lt
 8008446:	9b07      	ldrlt	r3, [sp, #28]
 8008448:	9607      	strlt	r6, [sp, #28]
 800844a:	1af2      	sublt	r2, r6, r3
 800844c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800844e:	bfb6      	itet	lt
 8008450:	189b      	addlt	r3, r3, r2
 8008452:	1b9e      	subge	r6, r3, r6
 8008454:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	bfb8      	it	lt
 800845a:	2600      	movlt	r6, #0
 800845c:	2b00      	cmp	r3, #0
 800845e:	bfb7      	itett	lt
 8008460:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008464:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008468:	1a9d      	sublt	r5, r3, r2
 800846a:	2300      	movlt	r3, #0
 800846c:	e734      	b.n	80082d8 <_dtoa_r+0x720>
 800846e:	9e07      	ldr	r6, [sp, #28]
 8008470:	9d04      	ldr	r5, [sp, #16]
 8008472:	9f08      	ldr	r7, [sp, #32]
 8008474:	e73b      	b.n	80082ee <_dtoa_r+0x736>
 8008476:	9a07      	ldr	r2, [sp, #28]
 8008478:	e767      	b.n	800834a <_dtoa_r+0x792>
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	2b01      	cmp	r3, #1
 800847e:	dc18      	bgt.n	80084b2 <_dtoa_r+0x8fa>
 8008480:	f1ba 0f00 	cmp.w	sl, #0
 8008484:	d115      	bne.n	80084b2 <_dtoa_r+0x8fa>
 8008486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800848a:	b993      	cbnz	r3, 80084b2 <_dtoa_r+0x8fa>
 800848c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008490:	0d1b      	lsrs	r3, r3, #20
 8008492:	051b      	lsls	r3, r3, #20
 8008494:	b183      	cbz	r3, 80084b8 <_dtoa_r+0x900>
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	3301      	adds	r3, #1
 800849a:	9304      	str	r3, [sp, #16]
 800849c:	9b05      	ldr	r3, [sp, #20]
 800849e:	3301      	adds	r3, #1
 80084a0:	9305      	str	r3, [sp, #20]
 80084a2:	f04f 0801 	mov.w	r8, #1
 80084a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f47f af6a 	bne.w	8008382 <_dtoa_r+0x7ca>
 80084ae:	2001      	movs	r0, #1
 80084b0:	e76f      	b.n	8008392 <_dtoa_r+0x7da>
 80084b2:	f04f 0800 	mov.w	r8, #0
 80084b6:	e7f6      	b.n	80084a6 <_dtoa_r+0x8ee>
 80084b8:	4698      	mov	r8, r3
 80084ba:	e7f4      	b.n	80084a6 <_dtoa_r+0x8ee>
 80084bc:	f43f af7d 	beq.w	80083ba <_dtoa_r+0x802>
 80084c0:	4618      	mov	r0, r3
 80084c2:	301c      	adds	r0, #28
 80084c4:	e772      	b.n	80083ac <_dtoa_r+0x7f4>
 80084c6:	9b03      	ldr	r3, [sp, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	dc37      	bgt.n	800853c <_dtoa_r+0x984>
 80084cc:	9b06      	ldr	r3, [sp, #24]
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	dd34      	ble.n	800853c <_dtoa_r+0x984>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	9b02      	ldr	r3, [sp, #8]
 80084d8:	b96b      	cbnz	r3, 80084f6 <_dtoa_r+0x93e>
 80084da:	4631      	mov	r1, r6
 80084dc:	2205      	movs	r2, #5
 80084de:	4620      	mov	r0, r4
 80084e0:	f000 fd68 	bl	8008fb4 <__multadd>
 80084e4:	4601      	mov	r1, r0
 80084e6:	4606      	mov	r6, r0
 80084e8:	ee18 0a10 	vmov	r0, s16
 80084ec:	f000 ffcc 	bl	8009488 <__mcmp>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	f73f adbb 	bgt.w	800806c <_dtoa_r+0x4b4>
 80084f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f8:	9d01      	ldr	r5, [sp, #4]
 80084fa:	43db      	mvns	r3, r3
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	f04f 0800 	mov.w	r8, #0
 8008502:	4631      	mov	r1, r6
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fd33 	bl	8008f70 <_Bfree>
 800850a:	2f00      	cmp	r7, #0
 800850c:	f43f aea4 	beq.w	8008258 <_dtoa_r+0x6a0>
 8008510:	f1b8 0f00 	cmp.w	r8, #0
 8008514:	d005      	beq.n	8008522 <_dtoa_r+0x96a>
 8008516:	45b8      	cmp	r8, r7
 8008518:	d003      	beq.n	8008522 <_dtoa_r+0x96a>
 800851a:	4641      	mov	r1, r8
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fd27 	bl	8008f70 <_Bfree>
 8008522:	4639      	mov	r1, r7
 8008524:	4620      	mov	r0, r4
 8008526:	f000 fd23 	bl	8008f70 <_Bfree>
 800852a:	e695      	b.n	8008258 <_dtoa_r+0x6a0>
 800852c:	2600      	movs	r6, #0
 800852e:	4637      	mov	r7, r6
 8008530:	e7e1      	b.n	80084f6 <_dtoa_r+0x93e>
 8008532:	9700      	str	r7, [sp, #0]
 8008534:	4637      	mov	r7, r6
 8008536:	e599      	b.n	800806c <_dtoa_r+0x4b4>
 8008538:	40240000 	.word	0x40240000
 800853c:	9b08      	ldr	r3, [sp, #32]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80ca 	beq.w	80086d8 <_dtoa_r+0xb20>
 8008544:	9b03      	ldr	r3, [sp, #12]
 8008546:	9302      	str	r3, [sp, #8]
 8008548:	2d00      	cmp	r5, #0
 800854a:	dd05      	ble.n	8008558 <_dtoa_r+0x9a0>
 800854c:	4639      	mov	r1, r7
 800854e:	462a      	mov	r2, r5
 8008550:	4620      	mov	r0, r4
 8008552:	f000 ff29 	bl	80093a8 <__lshift>
 8008556:	4607      	mov	r7, r0
 8008558:	f1b8 0f00 	cmp.w	r8, #0
 800855c:	d05b      	beq.n	8008616 <_dtoa_r+0xa5e>
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4620      	mov	r0, r4
 8008562:	f000 fcc5 	bl	8008ef0 <_Balloc>
 8008566:	4605      	mov	r5, r0
 8008568:	b928      	cbnz	r0, 8008576 <_dtoa_r+0x9be>
 800856a:	4b87      	ldr	r3, [pc, #540]	; (8008788 <_dtoa_r+0xbd0>)
 800856c:	4602      	mov	r2, r0
 800856e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008572:	f7ff bb3b 	b.w	8007bec <_dtoa_r+0x34>
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	3202      	adds	r2, #2
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	f107 010c 	add.w	r1, r7, #12
 8008580:	300c      	adds	r0, #12
 8008582:	f000 fca7 	bl	8008ed4 <memcpy>
 8008586:	2201      	movs	r2, #1
 8008588:	4629      	mov	r1, r5
 800858a:	4620      	mov	r0, r4
 800858c:	f000 ff0c 	bl	80093a8 <__lshift>
 8008590:	9b01      	ldr	r3, [sp, #4]
 8008592:	f103 0901 	add.w	r9, r3, #1
 8008596:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800859a:	4413      	add	r3, r2
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	f00a 0301 	and.w	r3, sl, #1
 80085a2:	46b8      	mov	r8, r7
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	4607      	mov	r7, r0
 80085a8:	4631      	mov	r1, r6
 80085aa:	ee18 0a10 	vmov	r0, s16
 80085ae:	f7ff fa75 	bl	8007a9c <quorem>
 80085b2:	4641      	mov	r1, r8
 80085b4:	9002      	str	r0, [sp, #8]
 80085b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085ba:	ee18 0a10 	vmov	r0, s16
 80085be:	f000 ff63 	bl	8009488 <__mcmp>
 80085c2:	463a      	mov	r2, r7
 80085c4:	9003      	str	r0, [sp, #12]
 80085c6:	4631      	mov	r1, r6
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 ff79 	bl	80094c0 <__mdiff>
 80085ce:	68c2      	ldr	r2, [r0, #12]
 80085d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80085d4:	4605      	mov	r5, r0
 80085d6:	bb02      	cbnz	r2, 800861a <_dtoa_r+0xa62>
 80085d8:	4601      	mov	r1, r0
 80085da:	ee18 0a10 	vmov	r0, s16
 80085de:	f000 ff53 	bl	8009488 <__mcmp>
 80085e2:	4602      	mov	r2, r0
 80085e4:	4629      	mov	r1, r5
 80085e6:	4620      	mov	r0, r4
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	f000 fcc1 	bl	8008f70 <_Bfree>
 80085ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80085f2:	ea43 0102 	orr.w	r1, r3, r2
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	430b      	orrs	r3, r1
 80085fa:	464d      	mov	r5, r9
 80085fc:	d10f      	bne.n	800861e <_dtoa_r+0xa66>
 80085fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008602:	d02a      	beq.n	800865a <_dtoa_r+0xaa2>
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dd02      	ble.n	8008610 <_dtoa_r+0xa58>
 800860a:	9b02      	ldr	r3, [sp, #8]
 800860c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008610:	f88b a000 	strb.w	sl, [fp]
 8008614:	e775      	b.n	8008502 <_dtoa_r+0x94a>
 8008616:	4638      	mov	r0, r7
 8008618:	e7ba      	b.n	8008590 <_dtoa_r+0x9d8>
 800861a:	2201      	movs	r2, #1
 800861c:	e7e2      	b.n	80085e4 <_dtoa_r+0xa2c>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	db04      	blt.n	800862e <_dtoa_r+0xa76>
 8008624:	9906      	ldr	r1, [sp, #24]
 8008626:	430b      	orrs	r3, r1
 8008628:	9904      	ldr	r1, [sp, #16]
 800862a:	430b      	orrs	r3, r1
 800862c:	d122      	bne.n	8008674 <_dtoa_r+0xabc>
 800862e:	2a00      	cmp	r2, #0
 8008630:	ddee      	ble.n	8008610 <_dtoa_r+0xa58>
 8008632:	ee18 1a10 	vmov	r1, s16
 8008636:	2201      	movs	r2, #1
 8008638:	4620      	mov	r0, r4
 800863a:	f000 feb5 	bl	80093a8 <__lshift>
 800863e:	4631      	mov	r1, r6
 8008640:	ee08 0a10 	vmov	s16, r0
 8008644:	f000 ff20 	bl	8009488 <__mcmp>
 8008648:	2800      	cmp	r0, #0
 800864a:	dc03      	bgt.n	8008654 <_dtoa_r+0xa9c>
 800864c:	d1e0      	bne.n	8008610 <_dtoa_r+0xa58>
 800864e:	f01a 0f01 	tst.w	sl, #1
 8008652:	d0dd      	beq.n	8008610 <_dtoa_r+0xa58>
 8008654:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008658:	d1d7      	bne.n	800860a <_dtoa_r+0xa52>
 800865a:	2339      	movs	r3, #57	; 0x39
 800865c:	f88b 3000 	strb.w	r3, [fp]
 8008660:	462b      	mov	r3, r5
 8008662:	461d      	mov	r5, r3
 8008664:	3b01      	subs	r3, #1
 8008666:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800866a:	2a39      	cmp	r2, #57	; 0x39
 800866c:	d071      	beq.n	8008752 <_dtoa_r+0xb9a>
 800866e:	3201      	adds	r2, #1
 8008670:	701a      	strb	r2, [r3, #0]
 8008672:	e746      	b.n	8008502 <_dtoa_r+0x94a>
 8008674:	2a00      	cmp	r2, #0
 8008676:	dd07      	ble.n	8008688 <_dtoa_r+0xad0>
 8008678:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800867c:	d0ed      	beq.n	800865a <_dtoa_r+0xaa2>
 800867e:	f10a 0301 	add.w	r3, sl, #1
 8008682:	f88b 3000 	strb.w	r3, [fp]
 8008686:	e73c      	b.n	8008502 <_dtoa_r+0x94a>
 8008688:	9b05      	ldr	r3, [sp, #20]
 800868a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800868e:	4599      	cmp	r9, r3
 8008690:	d047      	beq.n	8008722 <_dtoa_r+0xb6a>
 8008692:	ee18 1a10 	vmov	r1, s16
 8008696:	2300      	movs	r3, #0
 8008698:	220a      	movs	r2, #10
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fc8a 	bl	8008fb4 <__multadd>
 80086a0:	45b8      	cmp	r8, r7
 80086a2:	ee08 0a10 	vmov	s16, r0
 80086a6:	f04f 0300 	mov.w	r3, #0
 80086aa:	f04f 020a 	mov.w	r2, #10
 80086ae:	4641      	mov	r1, r8
 80086b0:	4620      	mov	r0, r4
 80086b2:	d106      	bne.n	80086c2 <_dtoa_r+0xb0a>
 80086b4:	f000 fc7e 	bl	8008fb4 <__multadd>
 80086b8:	4680      	mov	r8, r0
 80086ba:	4607      	mov	r7, r0
 80086bc:	f109 0901 	add.w	r9, r9, #1
 80086c0:	e772      	b.n	80085a8 <_dtoa_r+0x9f0>
 80086c2:	f000 fc77 	bl	8008fb4 <__multadd>
 80086c6:	4639      	mov	r1, r7
 80086c8:	4680      	mov	r8, r0
 80086ca:	2300      	movs	r3, #0
 80086cc:	220a      	movs	r2, #10
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 fc70 	bl	8008fb4 <__multadd>
 80086d4:	4607      	mov	r7, r0
 80086d6:	e7f1      	b.n	80086bc <_dtoa_r+0xb04>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	9302      	str	r3, [sp, #8]
 80086dc:	9d01      	ldr	r5, [sp, #4]
 80086de:	ee18 0a10 	vmov	r0, s16
 80086e2:	4631      	mov	r1, r6
 80086e4:	f7ff f9da 	bl	8007a9c <quorem>
 80086e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	f805 ab01 	strb.w	sl, [r5], #1
 80086f2:	1aea      	subs	r2, r5, r3
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	4293      	cmp	r3, r2
 80086f8:	dd09      	ble.n	800870e <_dtoa_r+0xb56>
 80086fa:	ee18 1a10 	vmov	r1, s16
 80086fe:	2300      	movs	r3, #0
 8008700:	220a      	movs	r2, #10
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fc56 	bl	8008fb4 <__multadd>
 8008708:	ee08 0a10 	vmov	s16, r0
 800870c:	e7e7      	b.n	80086de <_dtoa_r+0xb26>
 800870e:	9b02      	ldr	r3, [sp, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	bfc8      	it	gt
 8008714:	461d      	movgt	r5, r3
 8008716:	9b01      	ldr	r3, [sp, #4]
 8008718:	bfd8      	it	le
 800871a:	2501      	movle	r5, #1
 800871c:	441d      	add	r5, r3
 800871e:	f04f 0800 	mov.w	r8, #0
 8008722:	ee18 1a10 	vmov	r1, s16
 8008726:	2201      	movs	r2, #1
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fe3d 	bl	80093a8 <__lshift>
 800872e:	4631      	mov	r1, r6
 8008730:	ee08 0a10 	vmov	s16, r0
 8008734:	f000 fea8 	bl	8009488 <__mcmp>
 8008738:	2800      	cmp	r0, #0
 800873a:	dc91      	bgt.n	8008660 <_dtoa_r+0xaa8>
 800873c:	d102      	bne.n	8008744 <_dtoa_r+0xb8c>
 800873e:	f01a 0f01 	tst.w	sl, #1
 8008742:	d18d      	bne.n	8008660 <_dtoa_r+0xaa8>
 8008744:	462b      	mov	r3, r5
 8008746:	461d      	mov	r5, r3
 8008748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800874c:	2a30      	cmp	r2, #48	; 0x30
 800874e:	d0fa      	beq.n	8008746 <_dtoa_r+0xb8e>
 8008750:	e6d7      	b.n	8008502 <_dtoa_r+0x94a>
 8008752:	9a01      	ldr	r2, [sp, #4]
 8008754:	429a      	cmp	r2, r3
 8008756:	d184      	bne.n	8008662 <_dtoa_r+0xaaa>
 8008758:	9b00      	ldr	r3, [sp, #0]
 800875a:	3301      	adds	r3, #1
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	2331      	movs	r3, #49	; 0x31
 8008760:	7013      	strb	r3, [r2, #0]
 8008762:	e6ce      	b.n	8008502 <_dtoa_r+0x94a>
 8008764:	4b09      	ldr	r3, [pc, #36]	; (800878c <_dtoa_r+0xbd4>)
 8008766:	f7ff ba95 	b.w	8007c94 <_dtoa_r+0xdc>
 800876a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800876c:	2b00      	cmp	r3, #0
 800876e:	f47f aa6e 	bne.w	8007c4e <_dtoa_r+0x96>
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <_dtoa_r+0xbd8>)
 8008774:	f7ff ba8e 	b.w	8007c94 <_dtoa_r+0xdc>
 8008778:	9b02      	ldr	r3, [sp, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	dcae      	bgt.n	80086dc <_dtoa_r+0xb24>
 800877e:	9b06      	ldr	r3, [sp, #24]
 8008780:	2b02      	cmp	r3, #2
 8008782:	f73f aea8 	bgt.w	80084d6 <_dtoa_r+0x91e>
 8008786:	e7a9      	b.n	80086dc <_dtoa_r+0xb24>
 8008788:	0800cb08 	.word	0x0800cb08
 800878c:	0800cd01 	.word	0x0800cd01
 8008790:	0800ca89 	.word	0x0800ca89

08008794 <rshift>:
 8008794:	6903      	ldr	r3, [r0, #16]
 8008796:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800879a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800879e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087a2:	f100 0414 	add.w	r4, r0, #20
 80087a6:	dd45      	ble.n	8008834 <rshift+0xa0>
 80087a8:	f011 011f 	ands.w	r1, r1, #31
 80087ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087b4:	d10c      	bne.n	80087d0 <rshift+0x3c>
 80087b6:	f100 0710 	add.w	r7, r0, #16
 80087ba:	4629      	mov	r1, r5
 80087bc:	42b1      	cmp	r1, r6
 80087be:	d334      	bcc.n	800882a <rshift+0x96>
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	1eea      	subs	r2, r5, #3
 80087c6:	4296      	cmp	r6, r2
 80087c8:	bf38      	it	cc
 80087ca:	2300      	movcc	r3, #0
 80087cc:	4423      	add	r3, r4
 80087ce:	e015      	b.n	80087fc <rshift+0x68>
 80087d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087d4:	f1c1 0820 	rsb	r8, r1, #32
 80087d8:	40cf      	lsrs	r7, r1
 80087da:	f105 0e04 	add.w	lr, r5, #4
 80087de:	46a1      	mov	r9, r4
 80087e0:	4576      	cmp	r6, lr
 80087e2:	46f4      	mov	ip, lr
 80087e4:	d815      	bhi.n	8008812 <rshift+0x7e>
 80087e6:	1a9a      	subs	r2, r3, r2
 80087e8:	0092      	lsls	r2, r2, #2
 80087ea:	3a04      	subs	r2, #4
 80087ec:	3501      	adds	r5, #1
 80087ee:	42ae      	cmp	r6, r5
 80087f0:	bf38      	it	cc
 80087f2:	2200      	movcc	r2, #0
 80087f4:	18a3      	adds	r3, r4, r2
 80087f6:	50a7      	str	r7, [r4, r2]
 80087f8:	b107      	cbz	r7, 80087fc <rshift+0x68>
 80087fa:	3304      	adds	r3, #4
 80087fc:	1b1a      	subs	r2, r3, r4
 80087fe:	42a3      	cmp	r3, r4
 8008800:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008804:	bf08      	it	eq
 8008806:	2300      	moveq	r3, #0
 8008808:	6102      	str	r2, [r0, #16]
 800880a:	bf08      	it	eq
 800880c:	6143      	streq	r3, [r0, #20]
 800880e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008812:	f8dc c000 	ldr.w	ip, [ip]
 8008816:	fa0c fc08 	lsl.w	ip, ip, r8
 800881a:	ea4c 0707 	orr.w	r7, ip, r7
 800881e:	f849 7b04 	str.w	r7, [r9], #4
 8008822:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008826:	40cf      	lsrs	r7, r1
 8008828:	e7da      	b.n	80087e0 <rshift+0x4c>
 800882a:	f851 cb04 	ldr.w	ip, [r1], #4
 800882e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008832:	e7c3      	b.n	80087bc <rshift+0x28>
 8008834:	4623      	mov	r3, r4
 8008836:	e7e1      	b.n	80087fc <rshift+0x68>

08008838 <__hexdig_fun>:
 8008838:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800883c:	2b09      	cmp	r3, #9
 800883e:	d802      	bhi.n	8008846 <__hexdig_fun+0xe>
 8008840:	3820      	subs	r0, #32
 8008842:	b2c0      	uxtb	r0, r0
 8008844:	4770      	bx	lr
 8008846:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800884a:	2b05      	cmp	r3, #5
 800884c:	d801      	bhi.n	8008852 <__hexdig_fun+0x1a>
 800884e:	3847      	subs	r0, #71	; 0x47
 8008850:	e7f7      	b.n	8008842 <__hexdig_fun+0xa>
 8008852:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008856:	2b05      	cmp	r3, #5
 8008858:	d801      	bhi.n	800885e <__hexdig_fun+0x26>
 800885a:	3827      	subs	r0, #39	; 0x27
 800885c:	e7f1      	b.n	8008842 <__hexdig_fun+0xa>
 800885e:	2000      	movs	r0, #0
 8008860:	4770      	bx	lr
	...

08008864 <__gethex>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	ed2d 8b02 	vpush	{d8}
 800886c:	b089      	sub	sp, #36	; 0x24
 800886e:	ee08 0a10 	vmov	s16, r0
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	4bb4      	ldr	r3, [pc, #720]	; (8008b48 <__gethex+0x2e4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	4618      	mov	r0, r3
 800887c:	468b      	mov	fp, r1
 800887e:	4690      	mov	r8, r2
 8008880:	f7f7 fcb8 	bl	80001f4 <strlen>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	f8db 2000 	ldr.w	r2, [fp]
 800888a:	4403      	add	r3, r0
 800888c:	4682      	mov	sl, r0
 800888e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	1c93      	adds	r3, r2, #2
 8008896:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800889a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800889e:	32fe      	adds	r2, #254	; 0xfe
 80088a0:	18d1      	adds	r1, r2, r3
 80088a2:	461f      	mov	r7, r3
 80088a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088a8:	9100      	str	r1, [sp, #0]
 80088aa:	2830      	cmp	r0, #48	; 0x30
 80088ac:	d0f8      	beq.n	80088a0 <__gethex+0x3c>
 80088ae:	f7ff ffc3 	bl	8008838 <__hexdig_fun>
 80088b2:	4604      	mov	r4, r0
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d13a      	bne.n	800892e <__gethex+0xca>
 80088b8:	9901      	ldr	r1, [sp, #4]
 80088ba:	4652      	mov	r2, sl
 80088bc:	4638      	mov	r0, r7
 80088be:	f001 fdb3 	bl	800a428 <strncmp>
 80088c2:	4605      	mov	r5, r0
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d168      	bne.n	800899a <__gethex+0x136>
 80088c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80088cc:	eb07 060a 	add.w	r6, r7, sl
 80088d0:	f7ff ffb2 	bl	8008838 <__hexdig_fun>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d062      	beq.n	800899e <__gethex+0x13a>
 80088d8:	4633      	mov	r3, r6
 80088da:	7818      	ldrb	r0, [r3, #0]
 80088dc:	2830      	cmp	r0, #48	; 0x30
 80088de:	461f      	mov	r7, r3
 80088e0:	f103 0301 	add.w	r3, r3, #1
 80088e4:	d0f9      	beq.n	80088da <__gethex+0x76>
 80088e6:	f7ff ffa7 	bl	8008838 <__hexdig_fun>
 80088ea:	2301      	movs	r3, #1
 80088ec:	fab0 f480 	clz	r4, r0
 80088f0:	0964      	lsrs	r4, r4, #5
 80088f2:	4635      	mov	r5, r6
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	463a      	mov	r2, r7
 80088f8:	4616      	mov	r6, r2
 80088fa:	3201      	adds	r2, #1
 80088fc:	7830      	ldrb	r0, [r6, #0]
 80088fe:	f7ff ff9b 	bl	8008838 <__hexdig_fun>
 8008902:	2800      	cmp	r0, #0
 8008904:	d1f8      	bne.n	80088f8 <__gethex+0x94>
 8008906:	9901      	ldr	r1, [sp, #4]
 8008908:	4652      	mov	r2, sl
 800890a:	4630      	mov	r0, r6
 800890c:	f001 fd8c 	bl	800a428 <strncmp>
 8008910:	b980      	cbnz	r0, 8008934 <__gethex+0xd0>
 8008912:	b94d      	cbnz	r5, 8008928 <__gethex+0xc4>
 8008914:	eb06 050a 	add.w	r5, r6, sl
 8008918:	462a      	mov	r2, r5
 800891a:	4616      	mov	r6, r2
 800891c:	3201      	adds	r2, #1
 800891e:	7830      	ldrb	r0, [r6, #0]
 8008920:	f7ff ff8a 	bl	8008838 <__hexdig_fun>
 8008924:	2800      	cmp	r0, #0
 8008926:	d1f8      	bne.n	800891a <__gethex+0xb6>
 8008928:	1bad      	subs	r5, r5, r6
 800892a:	00ad      	lsls	r5, r5, #2
 800892c:	e004      	b.n	8008938 <__gethex+0xd4>
 800892e:	2400      	movs	r4, #0
 8008930:	4625      	mov	r5, r4
 8008932:	e7e0      	b.n	80088f6 <__gethex+0x92>
 8008934:	2d00      	cmp	r5, #0
 8008936:	d1f7      	bne.n	8008928 <__gethex+0xc4>
 8008938:	7833      	ldrb	r3, [r6, #0]
 800893a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800893e:	2b50      	cmp	r3, #80	; 0x50
 8008940:	d13b      	bne.n	80089ba <__gethex+0x156>
 8008942:	7873      	ldrb	r3, [r6, #1]
 8008944:	2b2b      	cmp	r3, #43	; 0x2b
 8008946:	d02c      	beq.n	80089a2 <__gethex+0x13e>
 8008948:	2b2d      	cmp	r3, #45	; 0x2d
 800894a:	d02e      	beq.n	80089aa <__gethex+0x146>
 800894c:	1c71      	adds	r1, r6, #1
 800894e:	f04f 0900 	mov.w	r9, #0
 8008952:	7808      	ldrb	r0, [r1, #0]
 8008954:	f7ff ff70 	bl	8008838 <__hexdig_fun>
 8008958:	1e43      	subs	r3, r0, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b18      	cmp	r3, #24
 800895e:	d82c      	bhi.n	80089ba <__gethex+0x156>
 8008960:	f1a0 0210 	sub.w	r2, r0, #16
 8008964:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008968:	f7ff ff66 	bl	8008838 <__hexdig_fun>
 800896c:	1e43      	subs	r3, r0, #1
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b18      	cmp	r3, #24
 8008972:	d91d      	bls.n	80089b0 <__gethex+0x14c>
 8008974:	f1b9 0f00 	cmp.w	r9, #0
 8008978:	d000      	beq.n	800897c <__gethex+0x118>
 800897a:	4252      	negs	r2, r2
 800897c:	4415      	add	r5, r2
 800897e:	f8cb 1000 	str.w	r1, [fp]
 8008982:	b1e4      	cbz	r4, 80089be <__gethex+0x15a>
 8008984:	9b00      	ldr	r3, [sp, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	bf14      	ite	ne
 800898a:	2700      	movne	r7, #0
 800898c:	2706      	moveq	r7, #6
 800898e:	4638      	mov	r0, r7
 8008990:	b009      	add	sp, #36	; 0x24
 8008992:	ecbd 8b02 	vpop	{d8}
 8008996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899a:	463e      	mov	r6, r7
 800899c:	4625      	mov	r5, r4
 800899e:	2401      	movs	r4, #1
 80089a0:	e7ca      	b.n	8008938 <__gethex+0xd4>
 80089a2:	f04f 0900 	mov.w	r9, #0
 80089a6:	1cb1      	adds	r1, r6, #2
 80089a8:	e7d3      	b.n	8008952 <__gethex+0xee>
 80089aa:	f04f 0901 	mov.w	r9, #1
 80089ae:	e7fa      	b.n	80089a6 <__gethex+0x142>
 80089b0:	230a      	movs	r3, #10
 80089b2:	fb03 0202 	mla	r2, r3, r2, r0
 80089b6:	3a10      	subs	r2, #16
 80089b8:	e7d4      	b.n	8008964 <__gethex+0x100>
 80089ba:	4631      	mov	r1, r6
 80089bc:	e7df      	b.n	800897e <__gethex+0x11a>
 80089be:	1bf3      	subs	r3, r6, r7
 80089c0:	3b01      	subs	r3, #1
 80089c2:	4621      	mov	r1, r4
 80089c4:	2b07      	cmp	r3, #7
 80089c6:	dc0b      	bgt.n	80089e0 <__gethex+0x17c>
 80089c8:	ee18 0a10 	vmov	r0, s16
 80089cc:	f000 fa90 	bl	8008ef0 <_Balloc>
 80089d0:	4604      	mov	r4, r0
 80089d2:	b940      	cbnz	r0, 80089e6 <__gethex+0x182>
 80089d4:	4b5d      	ldr	r3, [pc, #372]	; (8008b4c <__gethex+0x2e8>)
 80089d6:	4602      	mov	r2, r0
 80089d8:	21de      	movs	r1, #222	; 0xde
 80089da:	485d      	ldr	r0, [pc, #372]	; (8008b50 <__gethex+0x2ec>)
 80089dc:	f001 fdf4 	bl	800a5c8 <__assert_func>
 80089e0:	3101      	adds	r1, #1
 80089e2:	105b      	asrs	r3, r3, #1
 80089e4:	e7ee      	b.n	80089c4 <__gethex+0x160>
 80089e6:	f100 0914 	add.w	r9, r0, #20
 80089ea:	f04f 0b00 	mov.w	fp, #0
 80089ee:	f1ca 0301 	rsb	r3, sl, #1
 80089f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80089f6:	f8cd b000 	str.w	fp, [sp]
 80089fa:	9306      	str	r3, [sp, #24]
 80089fc:	42b7      	cmp	r7, r6
 80089fe:	d340      	bcc.n	8008a82 <__gethex+0x21e>
 8008a00:	9802      	ldr	r0, [sp, #8]
 8008a02:	9b00      	ldr	r3, [sp, #0]
 8008a04:	f840 3b04 	str.w	r3, [r0], #4
 8008a08:	eba0 0009 	sub.w	r0, r0, r9
 8008a0c:	1080      	asrs	r0, r0, #2
 8008a0e:	0146      	lsls	r6, r0, #5
 8008a10:	6120      	str	r0, [r4, #16]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fb5e 	bl	80090d4 <__hi0bits>
 8008a18:	1a30      	subs	r0, r6, r0
 8008a1a:	f8d8 6000 	ldr.w	r6, [r8]
 8008a1e:	42b0      	cmp	r0, r6
 8008a20:	dd63      	ble.n	8008aea <__gethex+0x286>
 8008a22:	1b87      	subs	r7, r0, r6
 8008a24:	4639      	mov	r1, r7
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 ff02 	bl	8009830 <__any_on>
 8008a2c:	4682      	mov	sl, r0
 8008a2e:	b1a8      	cbz	r0, 8008a5c <__gethex+0x1f8>
 8008a30:	1e7b      	subs	r3, r7, #1
 8008a32:	1159      	asrs	r1, r3, #5
 8008a34:	f003 021f 	and.w	r2, r3, #31
 8008a38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a3c:	f04f 0a01 	mov.w	sl, #1
 8008a40:	fa0a f202 	lsl.w	r2, sl, r2
 8008a44:	420a      	tst	r2, r1
 8008a46:	d009      	beq.n	8008a5c <__gethex+0x1f8>
 8008a48:	4553      	cmp	r3, sl
 8008a4a:	dd05      	ble.n	8008a58 <__gethex+0x1f4>
 8008a4c:	1eb9      	subs	r1, r7, #2
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 feee 	bl	8009830 <__any_on>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d145      	bne.n	8008ae4 <__gethex+0x280>
 8008a58:	f04f 0a02 	mov.w	sl, #2
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f7ff fe98 	bl	8008794 <rshift>
 8008a64:	443d      	add	r5, r7
 8008a66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a6a:	42ab      	cmp	r3, r5
 8008a6c:	da4c      	bge.n	8008b08 <__gethex+0x2a4>
 8008a6e:	ee18 0a10 	vmov	r0, s16
 8008a72:	4621      	mov	r1, r4
 8008a74:	f000 fa7c 	bl	8008f70 <_Bfree>
 8008a78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	27a3      	movs	r7, #163	; 0xa3
 8008a80:	e785      	b.n	800898e <__gethex+0x12a>
 8008a82:	1e73      	subs	r3, r6, #1
 8008a84:	9a05      	ldr	r2, [sp, #20]
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d019      	beq.n	8008ac4 <__gethex+0x260>
 8008a90:	f1bb 0f20 	cmp.w	fp, #32
 8008a94:	d107      	bne.n	8008aa6 <__gethex+0x242>
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	9a00      	ldr	r2, [sp, #0]
 8008a9a:	f843 2b04 	str.w	r2, [r3], #4
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	469b      	mov	fp, r3
 8008aa6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008aaa:	f7ff fec5 	bl	8008838 <__hexdig_fun>
 8008aae:	9b00      	ldr	r3, [sp, #0]
 8008ab0:	f000 000f 	and.w	r0, r0, #15
 8008ab4:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ab8:	4303      	orrs	r3, r0
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	f10b 0b04 	add.w	fp, fp, #4
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	e00d      	b.n	8008ae0 <__gethex+0x27c>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	9a06      	ldr	r2, [sp, #24]
 8008ac8:	4413      	add	r3, r2
 8008aca:	42bb      	cmp	r3, r7
 8008acc:	d3e0      	bcc.n	8008a90 <__gethex+0x22c>
 8008ace:	4618      	mov	r0, r3
 8008ad0:	9901      	ldr	r1, [sp, #4]
 8008ad2:	9307      	str	r3, [sp, #28]
 8008ad4:	4652      	mov	r2, sl
 8008ad6:	f001 fca7 	bl	800a428 <strncmp>
 8008ada:	9b07      	ldr	r3, [sp, #28]
 8008adc:	2800      	cmp	r0, #0
 8008ade:	d1d7      	bne.n	8008a90 <__gethex+0x22c>
 8008ae0:	461e      	mov	r6, r3
 8008ae2:	e78b      	b.n	80089fc <__gethex+0x198>
 8008ae4:	f04f 0a03 	mov.w	sl, #3
 8008ae8:	e7b8      	b.n	8008a5c <__gethex+0x1f8>
 8008aea:	da0a      	bge.n	8008b02 <__gethex+0x29e>
 8008aec:	1a37      	subs	r7, r6, r0
 8008aee:	4621      	mov	r1, r4
 8008af0:	ee18 0a10 	vmov	r0, s16
 8008af4:	463a      	mov	r2, r7
 8008af6:	f000 fc57 	bl	80093a8 <__lshift>
 8008afa:	1bed      	subs	r5, r5, r7
 8008afc:	4604      	mov	r4, r0
 8008afe:	f100 0914 	add.w	r9, r0, #20
 8008b02:	f04f 0a00 	mov.w	sl, #0
 8008b06:	e7ae      	b.n	8008a66 <__gethex+0x202>
 8008b08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b0c:	42a8      	cmp	r0, r5
 8008b0e:	dd72      	ble.n	8008bf6 <__gethex+0x392>
 8008b10:	1b45      	subs	r5, r0, r5
 8008b12:	42ae      	cmp	r6, r5
 8008b14:	dc36      	bgt.n	8008b84 <__gethex+0x320>
 8008b16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d02a      	beq.n	8008b74 <__gethex+0x310>
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	d02c      	beq.n	8008b7c <__gethex+0x318>
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d11c      	bne.n	8008b60 <__gethex+0x2fc>
 8008b26:	42ae      	cmp	r6, r5
 8008b28:	d11a      	bne.n	8008b60 <__gethex+0x2fc>
 8008b2a:	2e01      	cmp	r6, #1
 8008b2c:	d112      	bne.n	8008b54 <__gethex+0x2f0>
 8008b2e:	9a04      	ldr	r2, [sp, #16]
 8008b30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	2301      	movs	r3, #1
 8008b38:	6123      	str	r3, [r4, #16]
 8008b3a:	f8c9 3000 	str.w	r3, [r9]
 8008b3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b40:	2762      	movs	r7, #98	; 0x62
 8008b42:	601c      	str	r4, [r3, #0]
 8008b44:	e723      	b.n	800898e <__gethex+0x12a>
 8008b46:	bf00      	nop
 8008b48:	0800cb80 	.word	0x0800cb80
 8008b4c:	0800cb08 	.word	0x0800cb08
 8008b50:	0800cb19 	.word	0x0800cb19
 8008b54:	1e71      	subs	r1, r6, #1
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 fe6a 	bl	8009830 <__any_on>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d1e6      	bne.n	8008b2e <__gethex+0x2ca>
 8008b60:	ee18 0a10 	vmov	r0, s16
 8008b64:	4621      	mov	r1, r4
 8008b66:	f000 fa03 	bl	8008f70 <_Bfree>
 8008b6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	2750      	movs	r7, #80	; 0x50
 8008b72:	e70c      	b.n	800898e <__gethex+0x12a>
 8008b74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f2      	bne.n	8008b60 <__gethex+0x2fc>
 8008b7a:	e7d8      	b.n	8008b2e <__gethex+0x2ca>
 8008b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1d5      	bne.n	8008b2e <__gethex+0x2ca>
 8008b82:	e7ed      	b.n	8008b60 <__gethex+0x2fc>
 8008b84:	1e6f      	subs	r7, r5, #1
 8008b86:	f1ba 0f00 	cmp.w	sl, #0
 8008b8a:	d131      	bne.n	8008bf0 <__gethex+0x38c>
 8008b8c:	b127      	cbz	r7, 8008b98 <__gethex+0x334>
 8008b8e:	4639      	mov	r1, r7
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fe4d 	bl	8009830 <__any_on>
 8008b96:	4682      	mov	sl, r0
 8008b98:	117b      	asrs	r3, r7, #5
 8008b9a:	2101      	movs	r1, #1
 8008b9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ba0:	f007 071f 	and.w	r7, r7, #31
 8008ba4:	fa01 f707 	lsl.w	r7, r1, r7
 8008ba8:	421f      	tst	r7, r3
 8008baa:	4629      	mov	r1, r5
 8008bac:	4620      	mov	r0, r4
 8008bae:	bf18      	it	ne
 8008bb0:	f04a 0a02 	orrne.w	sl, sl, #2
 8008bb4:	1b76      	subs	r6, r6, r5
 8008bb6:	f7ff fded 	bl	8008794 <rshift>
 8008bba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bbe:	2702      	movs	r7, #2
 8008bc0:	f1ba 0f00 	cmp.w	sl, #0
 8008bc4:	d048      	beq.n	8008c58 <__gethex+0x3f4>
 8008bc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d015      	beq.n	8008bfa <__gethex+0x396>
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d017      	beq.n	8008c02 <__gethex+0x39e>
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d109      	bne.n	8008bea <__gethex+0x386>
 8008bd6:	f01a 0f02 	tst.w	sl, #2
 8008bda:	d006      	beq.n	8008bea <__gethex+0x386>
 8008bdc:	f8d9 0000 	ldr.w	r0, [r9]
 8008be0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008be4:	f01a 0f01 	tst.w	sl, #1
 8008be8:	d10e      	bne.n	8008c08 <__gethex+0x3a4>
 8008bea:	f047 0710 	orr.w	r7, r7, #16
 8008bee:	e033      	b.n	8008c58 <__gethex+0x3f4>
 8008bf0:	f04f 0a01 	mov.w	sl, #1
 8008bf4:	e7d0      	b.n	8008b98 <__gethex+0x334>
 8008bf6:	2701      	movs	r7, #1
 8008bf8:	e7e2      	b.n	8008bc0 <__gethex+0x35c>
 8008bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bfc:	f1c3 0301 	rsb	r3, r3, #1
 8008c00:	9315      	str	r3, [sp, #84]	; 0x54
 8008c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0f0      	beq.n	8008bea <__gethex+0x386>
 8008c08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c0c:	f104 0314 	add.w	r3, r4, #20
 8008c10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c18:	f04f 0c00 	mov.w	ip, #0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c22:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c26:	d01c      	beq.n	8008c62 <__gethex+0x3fe>
 8008c28:	3201      	adds	r2, #1
 8008c2a:	6002      	str	r2, [r0, #0]
 8008c2c:	2f02      	cmp	r7, #2
 8008c2e:	f104 0314 	add.w	r3, r4, #20
 8008c32:	d13f      	bne.n	8008cb4 <__gethex+0x450>
 8008c34:	f8d8 2000 	ldr.w	r2, [r8]
 8008c38:	3a01      	subs	r2, #1
 8008c3a:	42b2      	cmp	r2, r6
 8008c3c:	d10a      	bne.n	8008c54 <__gethex+0x3f0>
 8008c3e:	1171      	asrs	r1, r6, #5
 8008c40:	2201      	movs	r2, #1
 8008c42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c46:	f006 061f 	and.w	r6, r6, #31
 8008c4a:	fa02 f606 	lsl.w	r6, r2, r6
 8008c4e:	421e      	tst	r6, r3
 8008c50:	bf18      	it	ne
 8008c52:	4617      	movne	r7, r2
 8008c54:	f047 0720 	orr.w	r7, r7, #32
 8008c58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c5a:	601c      	str	r4, [r3, #0]
 8008c5c:	9b04      	ldr	r3, [sp, #16]
 8008c5e:	601d      	str	r5, [r3, #0]
 8008c60:	e695      	b.n	800898e <__gethex+0x12a>
 8008c62:	4299      	cmp	r1, r3
 8008c64:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c68:	d8d8      	bhi.n	8008c1c <__gethex+0x3b8>
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	459b      	cmp	fp, r3
 8008c6e:	db19      	blt.n	8008ca4 <__gethex+0x440>
 8008c70:	6861      	ldr	r1, [r4, #4]
 8008c72:	ee18 0a10 	vmov	r0, s16
 8008c76:	3101      	adds	r1, #1
 8008c78:	f000 f93a 	bl	8008ef0 <_Balloc>
 8008c7c:	4681      	mov	r9, r0
 8008c7e:	b918      	cbnz	r0, 8008c88 <__gethex+0x424>
 8008c80:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <__gethex+0x488>)
 8008c82:	4602      	mov	r2, r0
 8008c84:	2184      	movs	r1, #132	; 0x84
 8008c86:	e6a8      	b.n	80089da <__gethex+0x176>
 8008c88:	6922      	ldr	r2, [r4, #16]
 8008c8a:	3202      	adds	r2, #2
 8008c8c:	f104 010c 	add.w	r1, r4, #12
 8008c90:	0092      	lsls	r2, r2, #2
 8008c92:	300c      	adds	r0, #12
 8008c94:	f000 f91e 	bl	8008ed4 <memcpy>
 8008c98:	4621      	mov	r1, r4
 8008c9a:	ee18 0a10 	vmov	r0, s16
 8008c9e:	f000 f967 	bl	8008f70 <_Bfree>
 8008ca2:	464c      	mov	r4, r9
 8008ca4:	6923      	ldr	r3, [r4, #16]
 8008ca6:	1c5a      	adds	r2, r3, #1
 8008ca8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cac:	6122      	str	r2, [r4, #16]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	615a      	str	r2, [r3, #20]
 8008cb2:	e7bb      	b.n	8008c2c <__gethex+0x3c8>
 8008cb4:	6922      	ldr	r2, [r4, #16]
 8008cb6:	455a      	cmp	r2, fp
 8008cb8:	dd0b      	ble.n	8008cd2 <__gethex+0x46e>
 8008cba:	2101      	movs	r1, #1
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7ff fd69 	bl	8008794 <rshift>
 8008cc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cc6:	3501      	adds	r5, #1
 8008cc8:	42ab      	cmp	r3, r5
 8008cca:	f6ff aed0 	blt.w	8008a6e <__gethex+0x20a>
 8008cce:	2701      	movs	r7, #1
 8008cd0:	e7c0      	b.n	8008c54 <__gethex+0x3f0>
 8008cd2:	f016 061f 	ands.w	r6, r6, #31
 8008cd6:	d0fa      	beq.n	8008cce <__gethex+0x46a>
 8008cd8:	4453      	add	r3, sl
 8008cda:	f1c6 0620 	rsb	r6, r6, #32
 8008cde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008ce2:	f000 f9f7 	bl	80090d4 <__hi0bits>
 8008ce6:	42b0      	cmp	r0, r6
 8008ce8:	dbe7      	blt.n	8008cba <__gethex+0x456>
 8008cea:	e7f0      	b.n	8008cce <__gethex+0x46a>
 8008cec:	0800cb08 	.word	0x0800cb08

08008cf0 <L_shift>:
 8008cf0:	f1c2 0208 	rsb	r2, r2, #8
 8008cf4:	0092      	lsls	r2, r2, #2
 8008cf6:	b570      	push	{r4, r5, r6, lr}
 8008cf8:	f1c2 0620 	rsb	r6, r2, #32
 8008cfc:	6843      	ldr	r3, [r0, #4]
 8008cfe:	6804      	ldr	r4, [r0, #0]
 8008d00:	fa03 f506 	lsl.w	r5, r3, r6
 8008d04:	432c      	orrs	r4, r5
 8008d06:	40d3      	lsrs	r3, r2
 8008d08:	6004      	str	r4, [r0, #0]
 8008d0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d0e:	4288      	cmp	r0, r1
 8008d10:	d3f4      	bcc.n	8008cfc <L_shift+0xc>
 8008d12:	bd70      	pop	{r4, r5, r6, pc}

08008d14 <__match>:
 8008d14:	b530      	push	{r4, r5, lr}
 8008d16:	6803      	ldr	r3, [r0, #0]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d1e:	b914      	cbnz	r4, 8008d26 <__match+0x12>
 8008d20:	6003      	str	r3, [r0, #0]
 8008d22:	2001      	movs	r0, #1
 8008d24:	bd30      	pop	{r4, r5, pc}
 8008d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d2e:	2d19      	cmp	r5, #25
 8008d30:	bf98      	it	ls
 8008d32:	3220      	addls	r2, #32
 8008d34:	42a2      	cmp	r2, r4
 8008d36:	d0f0      	beq.n	8008d1a <__match+0x6>
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e7f3      	b.n	8008d24 <__match+0x10>

08008d3c <__hexnan>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	680b      	ldr	r3, [r1, #0]
 8008d42:	115e      	asrs	r6, r3, #5
 8008d44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d48:	f013 031f 	ands.w	r3, r3, #31
 8008d4c:	b087      	sub	sp, #28
 8008d4e:	bf18      	it	ne
 8008d50:	3604      	addne	r6, #4
 8008d52:	2500      	movs	r5, #0
 8008d54:	1f37      	subs	r7, r6, #4
 8008d56:	4690      	mov	r8, r2
 8008d58:	6802      	ldr	r2, [r0, #0]
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d62:	46b9      	mov	r9, r7
 8008d64:	463c      	mov	r4, r7
 8008d66:	9502      	str	r5, [sp, #8]
 8008d68:	46ab      	mov	fp, r5
 8008d6a:	7851      	ldrb	r1, [r2, #1]
 8008d6c:	1c53      	adds	r3, r2, #1
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	b341      	cbz	r1, 8008dc4 <__hexnan+0x88>
 8008d72:	4608      	mov	r0, r1
 8008d74:	9205      	str	r2, [sp, #20]
 8008d76:	9104      	str	r1, [sp, #16]
 8008d78:	f7ff fd5e 	bl	8008838 <__hexdig_fun>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d14f      	bne.n	8008e20 <__hexnan+0xe4>
 8008d80:	9904      	ldr	r1, [sp, #16]
 8008d82:	9a05      	ldr	r2, [sp, #20]
 8008d84:	2920      	cmp	r1, #32
 8008d86:	d818      	bhi.n	8008dba <__hexnan+0x7e>
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	459b      	cmp	fp, r3
 8008d8c:	dd13      	ble.n	8008db6 <__hexnan+0x7a>
 8008d8e:	454c      	cmp	r4, r9
 8008d90:	d206      	bcs.n	8008da0 <__hexnan+0x64>
 8008d92:	2d07      	cmp	r5, #7
 8008d94:	dc04      	bgt.n	8008da0 <__hexnan+0x64>
 8008d96:	462a      	mov	r2, r5
 8008d98:	4649      	mov	r1, r9
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f7ff ffa8 	bl	8008cf0 <L_shift>
 8008da0:	4544      	cmp	r4, r8
 8008da2:	d950      	bls.n	8008e46 <__hexnan+0x10a>
 8008da4:	2300      	movs	r3, #0
 8008da6:	f1a4 0904 	sub.w	r9, r4, #4
 8008daa:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dae:	f8cd b008 	str.w	fp, [sp, #8]
 8008db2:	464c      	mov	r4, r9
 8008db4:	461d      	mov	r5, r3
 8008db6:	9a03      	ldr	r2, [sp, #12]
 8008db8:	e7d7      	b.n	8008d6a <__hexnan+0x2e>
 8008dba:	2929      	cmp	r1, #41	; 0x29
 8008dbc:	d156      	bne.n	8008e6c <__hexnan+0x130>
 8008dbe:	3202      	adds	r2, #2
 8008dc0:	f8ca 2000 	str.w	r2, [sl]
 8008dc4:	f1bb 0f00 	cmp.w	fp, #0
 8008dc8:	d050      	beq.n	8008e6c <__hexnan+0x130>
 8008dca:	454c      	cmp	r4, r9
 8008dcc:	d206      	bcs.n	8008ddc <__hexnan+0xa0>
 8008dce:	2d07      	cmp	r5, #7
 8008dd0:	dc04      	bgt.n	8008ddc <__hexnan+0xa0>
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f7ff ff8a 	bl	8008cf0 <L_shift>
 8008ddc:	4544      	cmp	r4, r8
 8008dde:	d934      	bls.n	8008e4a <__hexnan+0x10e>
 8008de0:	f1a8 0204 	sub.w	r2, r8, #4
 8008de4:	4623      	mov	r3, r4
 8008de6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008dea:	f842 1f04 	str.w	r1, [r2, #4]!
 8008dee:	429f      	cmp	r7, r3
 8008df0:	d2f9      	bcs.n	8008de6 <__hexnan+0xaa>
 8008df2:	1b3b      	subs	r3, r7, r4
 8008df4:	f023 0303 	bic.w	r3, r3, #3
 8008df8:	3304      	adds	r3, #4
 8008dfa:	3401      	adds	r4, #1
 8008dfc:	3e03      	subs	r6, #3
 8008dfe:	42b4      	cmp	r4, r6
 8008e00:	bf88      	it	hi
 8008e02:	2304      	movhi	r3, #4
 8008e04:	4443      	add	r3, r8
 8008e06:	2200      	movs	r2, #0
 8008e08:	f843 2b04 	str.w	r2, [r3], #4
 8008e0c:	429f      	cmp	r7, r3
 8008e0e:	d2fb      	bcs.n	8008e08 <__hexnan+0xcc>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	b91b      	cbnz	r3, 8008e1c <__hexnan+0xe0>
 8008e14:	4547      	cmp	r7, r8
 8008e16:	d127      	bne.n	8008e68 <__hexnan+0x12c>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	603b      	str	r3, [r7, #0]
 8008e1c:	2005      	movs	r0, #5
 8008e1e:	e026      	b.n	8008e6e <__hexnan+0x132>
 8008e20:	3501      	adds	r5, #1
 8008e22:	2d08      	cmp	r5, #8
 8008e24:	f10b 0b01 	add.w	fp, fp, #1
 8008e28:	dd06      	ble.n	8008e38 <__hexnan+0xfc>
 8008e2a:	4544      	cmp	r4, r8
 8008e2c:	d9c3      	bls.n	8008db6 <__hexnan+0x7a>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e34:	2501      	movs	r5, #1
 8008e36:	3c04      	subs	r4, #4
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	f000 000f 	and.w	r0, r0, #15
 8008e3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e42:	6022      	str	r2, [r4, #0]
 8008e44:	e7b7      	b.n	8008db6 <__hexnan+0x7a>
 8008e46:	2508      	movs	r5, #8
 8008e48:	e7b5      	b.n	8008db6 <__hexnan+0x7a>
 8008e4a:	9b01      	ldr	r3, [sp, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d0df      	beq.n	8008e10 <__hexnan+0xd4>
 8008e50:	f04f 32ff 	mov.w	r2, #4294967295
 8008e54:	f1c3 0320 	rsb	r3, r3, #32
 8008e58:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e60:	401a      	ands	r2, r3
 8008e62:	f846 2c04 	str.w	r2, [r6, #-4]
 8008e66:	e7d3      	b.n	8008e10 <__hexnan+0xd4>
 8008e68:	3f04      	subs	r7, #4
 8008e6a:	e7d1      	b.n	8008e10 <__hexnan+0xd4>
 8008e6c:	2004      	movs	r0, #4
 8008e6e:	b007      	add	sp, #28
 8008e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e74 <_localeconv_r>:
 8008e74:	4800      	ldr	r0, [pc, #0]	; (8008e78 <_localeconv_r+0x4>)
 8008e76:	4770      	bx	lr
 8008e78:	2000016c 	.word	0x2000016c

08008e7c <_lseek_r>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	4d07      	ldr	r5, [pc, #28]	; (8008e9c <_lseek_r+0x20>)
 8008e80:	4604      	mov	r4, r0
 8008e82:	4608      	mov	r0, r1
 8008e84:	4611      	mov	r1, r2
 8008e86:	2200      	movs	r2, #0
 8008e88:	602a      	str	r2, [r5, #0]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f7fa f87f 	bl	8002f8e <_lseek>
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	d102      	bne.n	8008e9a <_lseek_r+0x1e>
 8008e94:	682b      	ldr	r3, [r5, #0]
 8008e96:	b103      	cbz	r3, 8008e9a <_lseek_r+0x1e>
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	bd38      	pop	{r3, r4, r5, pc}
 8008e9c:	20000d68 	.word	0x20000d68

08008ea0 <malloc>:
 8008ea0:	4b02      	ldr	r3, [pc, #8]	; (8008eac <malloc+0xc>)
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	6818      	ldr	r0, [r3, #0]
 8008ea6:	f000 bd67 	b.w	8009978 <_malloc_r>
 8008eaa:	bf00      	nop
 8008eac:	20000014 	.word	0x20000014

08008eb0 <__ascii_mbtowc>:
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	b901      	cbnz	r1, 8008eb6 <__ascii_mbtowc+0x6>
 8008eb4:	a901      	add	r1, sp, #4
 8008eb6:	b142      	cbz	r2, 8008eca <__ascii_mbtowc+0x1a>
 8008eb8:	b14b      	cbz	r3, 8008ece <__ascii_mbtowc+0x1e>
 8008eba:	7813      	ldrb	r3, [r2, #0]
 8008ebc:	600b      	str	r3, [r1, #0]
 8008ebe:	7812      	ldrb	r2, [r2, #0]
 8008ec0:	1e10      	subs	r0, r2, #0
 8008ec2:	bf18      	it	ne
 8008ec4:	2001      	movne	r0, #1
 8008ec6:	b002      	add	sp, #8
 8008ec8:	4770      	bx	lr
 8008eca:	4610      	mov	r0, r2
 8008ecc:	e7fb      	b.n	8008ec6 <__ascii_mbtowc+0x16>
 8008ece:	f06f 0001 	mvn.w	r0, #1
 8008ed2:	e7f8      	b.n	8008ec6 <__ascii_mbtowc+0x16>

08008ed4 <memcpy>:
 8008ed4:	440a      	add	r2, r1
 8008ed6:	4291      	cmp	r1, r2
 8008ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008edc:	d100      	bne.n	8008ee0 <memcpy+0xc>
 8008ede:	4770      	bx	lr
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eea:	4291      	cmp	r1, r2
 8008eec:	d1f9      	bne.n	8008ee2 <memcpy+0xe>
 8008eee:	bd10      	pop	{r4, pc}

08008ef0 <_Balloc>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	b976      	cbnz	r6, 8008f18 <_Balloc+0x28>
 8008efa:	2010      	movs	r0, #16
 8008efc:	f7ff ffd0 	bl	8008ea0 <malloc>
 8008f00:	4602      	mov	r2, r0
 8008f02:	6260      	str	r0, [r4, #36]	; 0x24
 8008f04:	b920      	cbnz	r0, 8008f10 <_Balloc+0x20>
 8008f06:	4b18      	ldr	r3, [pc, #96]	; (8008f68 <_Balloc+0x78>)
 8008f08:	4818      	ldr	r0, [pc, #96]	; (8008f6c <_Balloc+0x7c>)
 8008f0a:	2166      	movs	r1, #102	; 0x66
 8008f0c:	f001 fb5c 	bl	800a5c8 <__assert_func>
 8008f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f14:	6006      	str	r6, [r0, #0]
 8008f16:	60c6      	str	r6, [r0, #12]
 8008f18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f1a:	68f3      	ldr	r3, [r6, #12]
 8008f1c:	b183      	cbz	r3, 8008f40 <_Balloc+0x50>
 8008f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f26:	b9b8      	cbnz	r0, 8008f58 <_Balloc+0x68>
 8008f28:	2101      	movs	r1, #1
 8008f2a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f2e:	1d72      	adds	r2, r6, #5
 8008f30:	0092      	lsls	r2, r2, #2
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fc9d 	bl	8009872 <_calloc_r>
 8008f38:	b160      	cbz	r0, 8008f54 <_Balloc+0x64>
 8008f3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f3e:	e00e      	b.n	8008f5e <_Balloc+0x6e>
 8008f40:	2221      	movs	r2, #33	; 0x21
 8008f42:	2104      	movs	r1, #4
 8008f44:	4620      	mov	r0, r4
 8008f46:	f000 fc94 	bl	8009872 <_calloc_r>
 8008f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f4c:	60f0      	str	r0, [r6, #12]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1e4      	bne.n	8008f1e <_Balloc+0x2e>
 8008f54:	2000      	movs	r0, #0
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	6802      	ldr	r2, [r0, #0]
 8008f5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f64:	e7f7      	b.n	8008f56 <_Balloc+0x66>
 8008f66:	bf00      	nop
 8008f68:	0800ca96 	.word	0x0800ca96
 8008f6c:	0800cb94 	.word	0x0800cb94

08008f70 <_Bfree>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f74:	4605      	mov	r5, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	b976      	cbnz	r6, 8008f98 <_Bfree+0x28>
 8008f7a:	2010      	movs	r0, #16
 8008f7c:	f7ff ff90 	bl	8008ea0 <malloc>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6268      	str	r0, [r5, #36]	; 0x24
 8008f84:	b920      	cbnz	r0, 8008f90 <_Bfree+0x20>
 8008f86:	4b09      	ldr	r3, [pc, #36]	; (8008fac <_Bfree+0x3c>)
 8008f88:	4809      	ldr	r0, [pc, #36]	; (8008fb0 <_Bfree+0x40>)
 8008f8a:	218a      	movs	r1, #138	; 0x8a
 8008f8c:	f001 fb1c 	bl	800a5c8 <__assert_func>
 8008f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f94:	6006      	str	r6, [r0, #0]
 8008f96:	60c6      	str	r6, [r0, #12]
 8008f98:	b13c      	cbz	r4, 8008faa <_Bfree+0x3a>
 8008f9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f9c:	6862      	ldr	r2, [r4, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fa4:	6021      	str	r1, [r4, #0]
 8008fa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	0800ca96 	.word	0x0800ca96
 8008fb0:	0800cb94 	.word	0x0800cb94

08008fb4 <__multadd>:
 8008fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb8:	690d      	ldr	r5, [r1, #16]
 8008fba:	4607      	mov	r7, r0
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	461e      	mov	r6, r3
 8008fc0:	f101 0c14 	add.w	ip, r1, #20
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f8dc 3000 	ldr.w	r3, [ip]
 8008fca:	b299      	uxth	r1, r3
 8008fcc:	fb02 6101 	mla	r1, r2, r1, r6
 8008fd0:	0c1e      	lsrs	r6, r3, #16
 8008fd2:	0c0b      	lsrs	r3, r1, #16
 8008fd4:	fb02 3306 	mla	r3, r2, r6, r3
 8008fd8:	b289      	uxth	r1, r1
 8008fda:	3001      	adds	r0, #1
 8008fdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008fe0:	4285      	cmp	r5, r0
 8008fe2:	f84c 1b04 	str.w	r1, [ip], #4
 8008fe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008fea:	dcec      	bgt.n	8008fc6 <__multadd+0x12>
 8008fec:	b30e      	cbz	r6, 8009032 <__multadd+0x7e>
 8008fee:	68a3      	ldr	r3, [r4, #8]
 8008ff0:	42ab      	cmp	r3, r5
 8008ff2:	dc19      	bgt.n	8009028 <__multadd+0x74>
 8008ff4:	6861      	ldr	r1, [r4, #4]
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	f7ff ff79 	bl	8008ef0 <_Balloc>
 8008ffe:	4680      	mov	r8, r0
 8009000:	b928      	cbnz	r0, 800900e <__multadd+0x5a>
 8009002:	4602      	mov	r2, r0
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <__multadd+0x84>)
 8009006:	480d      	ldr	r0, [pc, #52]	; (800903c <__multadd+0x88>)
 8009008:	21b5      	movs	r1, #181	; 0xb5
 800900a:	f001 fadd 	bl	800a5c8 <__assert_func>
 800900e:	6922      	ldr	r2, [r4, #16]
 8009010:	3202      	adds	r2, #2
 8009012:	f104 010c 	add.w	r1, r4, #12
 8009016:	0092      	lsls	r2, r2, #2
 8009018:	300c      	adds	r0, #12
 800901a:	f7ff ff5b 	bl	8008ed4 <memcpy>
 800901e:	4621      	mov	r1, r4
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff ffa5 	bl	8008f70 <_Bfree>
 8009026:	4644      	mov	r4, r8
 8009028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800902c:	3501      	adds	r5, #1
 800902e:	615e      	str	r6, [r3, #20]
 8009030:	6125      	str	r5, [r4, #16]
 8009032:	4620      	mov	r0, r4
 8009034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009038:	0800cb08 	.word	0x0800cb08
 800903c:	0800cb94 	.word	0x0800cb94

08009040 <__s2b>:
 8009040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009044:	460c      	mov	r4, r1
 8009046:	4615      	mov	r5, r2
 8009048:	461f      	mov	r7, r3
 800904a:	2209      	movs	r2, #9
 800904c:	3308      	adds	r3, #8
 800904e:	4606      	mov	r6, r0
 8009050:	fb93 f3f2 	sdiv	r3, r3, r2
 8009054:	2100      	movs	r1, #0
 8009056:	2201      	movs	r2, #1
 8009058:	429a      	cmp	r2, r3
 800905a:	db09      	blt.n	8009070 <__s2b+0x30>
 800905c:	4630      	mov	r0, r6
 800905e:	f7ff ff47 	bl	8008ef0 <_Balloc>
 8009062:	b940      	cbnz	r0, 8009076 <__s2b+0x36>
 8009064:	4602      	mov	r2, r0
 8009066:	4b19      	ldr	r3, [pc, #100]	; (80090cc <__s2b+0x8c>)
 8009068:	4819      	ldr	r0, [pc, #100]	; (80090d0 <__s2b+0x90>)
 800906a:	21ce      	movs	r1, #206	; 0xce
 800906c:	f001 faac 	bl	800a5c8 <__assert_func>
 8009070:	0052      	lsls	r2, r2, #1
 8009072:	3101      	adds	r1, #1
 8009074:	e7f0      	b.n	8009058 <__s2b+0x18>
 8009076:	9b08      	ldr	r3, [sp, #32]
 8009078:	6143      	str	r3, [r0, #20]
 800907a:	2d09      	cmp	r5, #9
 800907c:	f04f 0301 	mov.w	r3, #1
 8009080:	6103      	str	r3, [r0, #16]
 8009082:	dd16      	ble.n	80090b2 <__s2b+0x72>
 8009084:	f104 0909 	add.w	r9, r4, #9
 8009088:	46c8      	mov	r8, r9
 800908a:	442c      	add	r4, r5
 800908c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009090:	4601      	mov	r1, r0
 8009092:	3b30      	subs	r3, #48	; 0x30
 8009094:	220a      	movs	r2, #10
 8009096:	4630      	mov	r0, r6
 8009098:	f7ff ff8c 	bl	8008fb4 <__multadd>
 800909c:	45a0      	cmp	r8, r4
 800909e:	d1f5      	bne.n	800908c <__s2b+0x4c>
 80090a0:	f1a5 0408 	sub.w	r4, r5, #8
 80090a4:	444c      	add	r4, r9
 80090a6:	1b2d      	subs	r5, r5, r4
 80090a8:	1963      	adds	r3, r4, r5
 80090aa:	42bb      	cmp	r3, r7
 80090ac:	db04      	blt.n	80090b8 <__s2b+0x78>
 80090ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b2:	340a      	adds	r4, #10
 80090b4:	2509      	movs	r5, #9
 80090b6:	e7f6      	b.n	80090a6 <__s2b+0x66>
 80090b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090bc:	4601      	mov	r1, r0
 80090be:	3b30      	subs	r3, #48	; 0x30
 80090c0:	220a      	movs	r2, #10
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7ff ff76 	bl	8008fb4 <__multadd>
 80090c8:	e7ee      	b.n	80090a8 <__s2b+0x68>
 80090ca:	bf00      	nop
 80090cc:	0800cb08 	.word	0x0800cb08
 80090d0:	0800cb94 	.word	0x0800cb94

080090d4 <__hi0bits>:
 80090d4:	0c03      	lsrs	r3, r0, #16
 80090d6:	041b      	lsls	r3, r3, #16
 80090d8:	b9d3      	cbnz	r3, 8009110 <__hi0bits+0x3c>
 80090da:	0400      	lsls	r0, r0, #16
 80090dc:	2310      	movs	r3, #16
 80090de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090e2:	bf04      	itt	eq
 80090e4:	0200      	lsleq	r0, r0, #8
 80090e6:	3308      	addeq	r3, #8
 80090e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090ec:	bf04      	itt	eq
 80090ee:	0100      	lsleq	r0, r0, #4
 80090f0:	3304      	addeq	r3, #4
 80090f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090f6:	bf04      	itt	eq
 80090f8:	0080      	lsleq	r0, r0, #2
 80090fa:	3302      	addeq	r3, #2
 80090fc:	2800      	cmp	r0, #0
 80090fe:	db05      	blt.n	800910c <__hi0bits+0x38>
 8009100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009104:	f103 0301 	add.w	r3, r3, #1
 8009108:	bf08      	it	eq
 800910a:	2320      	moveq	r3, #32
 800910c:	4618      	mov	r0, r3
 800910e:	4770      	bx	lr
 8009110:	2300      	movs	r3, #0
 8009112:	e7e4      	b.n	80090de <__hi0bits+0xa>

08009114 <__lo0bits>:
 8009114:	6803      	ldr	r3, [r0, #0]
 8009116:	f013 0207 	ands.w	r2, r3, #7
 800911a:	4601      	mov	r1, r0
 800911c:	d00b      	beq.n	8009136 <__lo0bits+0x22>
 800911e:	07da      	lsls	r2, r3, #31
 8009120:	d423      	bmi.n	800916a <__lo0bits+0x56>
 8009122:	0798      	lsls	r0, r3, #30
 8009124:	bf49      	itett	mi
 8009126:	085b      	lsrmi	r3, r3, #1
 8009128:	089b      	lsrpl	r3, r3, #2
 800912a:	2001      	movmi	r0, #1
 800912c:	600b      	strmi	r3, [r1, #0]
 800912e:	bf5c      	itt	pl
 8009130:	600b      	strpl	r3, [r1, #0]
 8009132:	2002      	movpl	r0, #2
 8009134:	4770      	bx	lr
 8009136:	b298      	uxth	r0, r3
 8009138:	b9a8      	cbnz	r0, 8009166 <__lo0bits+0x52>
 800913a:	0c1b      	lsrs	r3, r3, #16
 800913c:	2010      	movs	r0, #16
 800913e:	b2da      	uxtb	r2, r3
 8009140:	b90a      	cbnz	r2, 8009146 <__lo0bits+0x32>
 8009142:	3008      	adds	r0, #8
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	071a      	lsls	r2, r3, #28
 8009148:	bf04      	itt	eq
 800914a:	091b      	lsreq	r3, r3, #4
 800914c:	3004      	addeq	r0, #4
 800914e:	079a      	lsls	r2, r3, #30
 8009150:	bf04      	itt	eq
 8009152:	089b      	lsreq	r3, r3, #2
 8009154:	3002      	addeq	r0, #2
 8009156:	07da      	lsls	r2, r3, #31
 8009158:	d403      	bmi.n	8009162 <__lo0bits+0x4e>
 800915a:	085b      	lsrs	r3, r3, #1
 800915c:	f100 0001 	add.w	r0, r0, #1
 8009160:	d005      	beq.n	800916e <__lo0bits+0x5a>
 8009162:	600b      	str	r3, [r1, #0]
 8009164:	4770      	bx	lr
 8009166:	4610      	mov	r0, r2
 8009168:	e7e9      	b.n	800913e <__lo0bits+0x2a>
 800916a:	2000      	movs	r0, #0
 800916c:	4770      	bx	lr
 800916e:	2020      	movs	r0, #32
 8009170:	4770      	bx	lr
	...

08009174 <__i2b>:
 8009174:	b510      	push	{r4, lr}
 8009176:	460c      	mov	r4, r1
 8009178:	2101      	movs	r1, #1
 800917a:	f7ff feb9 	bl	8008ef0 <_Balloc>
 800917e:	4602      	mov	r2, r0
 8009180:	b928      	cbnz	r0, 800918e <__i2b+0x1a>
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <__i2b+0x24>)
 8009184:	4805      	ldr	r0, [pc, #20]	; (800919c <__i2b+0x28>)
 8009186:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800918a:	f001 fa1d 	bl	800a5c8 <__assert_func>
 800918e:	2301      	movs	r3, #1
 8009190:	6144      	str	r4, [r0, #20]
 8009192:	6103      	str	r3, [r0, #16]
 8009194:	bd10      	pop	{r4, pc}
 8009196:	bf00      	nop
 8009198:	0800cb08 	.word	0x0800cb08
 800919c:	0800cb94 	.word	0x0800cb94

080091a0 <__multiply>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	4691      	mov	r9, r2
 80091a6:	690a      	ldr	r2, [r1, #16]
 80091a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	bfb8      	it	lt
 80091b0:	460b      	movlt	r3, r1
 80091b2:	460c      	mov	r4, r1
 80091b4:	bfbc      	itt	lt
 80091b6:	464c      	movlt	r4, r9
 80091b8:	4699      	movlt	r9, r3
 80091ba:	6927      	ldr	r7, [r4, #16]
 80091bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091c0:	68a3      	ldr	r3, [r4, #8]
 80091c2:	6861      	ldr	r1, [r4, #4]
 80091c4:	eb07 060a 	add.w	r6, r7, sl
 80091c8:	42b3      	cmp	r3, r6
 80091ca:	b085      	sub	sp, #20
 80091cc:	bfb8      	it	lt
 80091ce:	3101      	addlt	r1, #1
 80091d0:	f7ff fe8e 	bl	8008ef0 <_Balloc>
 80091d4:	b930      	cbnz	r0, 80091e4 <__multiply+0x44>
 80091d6:	4602      	mov	r2, r0
 80091d8:	4b44      	ldr	r3, [pc, #272]	; (80092ec <__multiply+0x14c>)
 80091da:	4845      	ldr	r0, [pc, #276]	; (80092f0 <__multiply+0x150>)
 80091dc:	f240 115d 	movw	r1, #349	; 0x15d
 80091e0:	f001 f9f2 	bl	800a5c8 <__assert_func>
 80091e4:	f100 0514 	add.w	r5, r0, #20
 80091e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80091ec:	462b      	mov	r3, r5
 80091ee:	2200      	movs	r2, #0
 80091f0:	4543      	cmp	r3, r8
 80091f2:	d321      	bcc.n	8009238 <__multiply+0x98>
 80091f4:	f104 0314 	add.w	r3, r4, #20
 80091f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80091fc:	f109 0314 	add.w	r3, r9, #20
 8009200:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009204:	9202      	str	r2, [sp, #8]
 8009206:	1b3a      	subs	r2, r7, r4
 8009208:	3a15      	subs	r2, #21
 800920a:	f022 0203 	bic.w	r2, r2, #3
 800920e:	3204      	adds	r2, #4
 8009210:	f104 0115 	add.w	r1, r4, #21
 8009214:	428f      	cmp	r7, r1
 8009216:	bf38      	it	cc
 8009218:	2204      	movcc	r2, #4
 800921a:	9201      	str	r2, [sp, #4]
 800921c:	9a02      	ldr	r2, [sp, #8]
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	429a      	cmp	r2, r3
 8009222:	d80c      	bhi.n	800923e <__multiply+0x9e>
 8009224:	2e00      	cmp	r6, #0
 8009226:	dd03      	ble.n	8009230 <__multiply+0x90>
 8009228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800922c:	2b00      	cmp	r3, #0
 800922e:	d05a      	beq.n	80092e6 <__multiply+0x146>
 8009230:	6106      	str	r6, [r0, #16]
 8009232:	b005      	add	sp, #20
 8009234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009238:	f843 2b04 	str.w	r2, [r3], #4
 800923c:	e7d8      	b.n	80091f0 <__multiply+0x50>
 800923e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009242:	f1ba 0f00 	cmp.w	sl, #0
 8009246:	d024      	beq.n	8009292 <__multiply+0xf2>
 8009248:	f104 0e14 	add.w	lr, r4, #20
 800924c:	46a9      	mov	r9, r5
 800924e:	f04f 0c00 	mov.w	ip, #0
 8009252:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009256:	f8d9 1000 	ldr.w	r1, [r9]
 800925a:	fa1f fb82 	uxth.w	fp, r2
 800925e:	b289      	uxth	r1, r1
 8009260:	fb0a 110b 	mla	r1, sl, fp, r1
 8009264:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009268:	f8d9 2000 	ldr.w	r2, [r9]
 800926c:	4461      	add	r1, ip
 800926e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009272:	fb0a c20b 	mla	r2, sl, fp, ip
 8009276:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800927a:	b289      	uxth	r1, r1
 800927c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009280:	4577      	cmp	r7, lr
 8009282:	f849 1b04 	str.w	r1, [r9], #4
 8009286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800928a:	d8e2      	bhi.n	8009252 <__multiply+0xb2>
 800928c:	9a01      	ldr	r2, [sp, #4]
 800928e:	f845 c002 	str.w	ip, [r5, r2]
 8009292:	9a03      	ldr	r2, [sp, #12]
 8009294:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009298:	3304      	adds	r3, #4
 800929a:	f1b9 0f00 	cmp.w	r9, #0
 800929e:	d020      	beq.n	80092e2 <__multiply+0x142>
 80092a0:	6829      	ldr	r1, [r5, #0]
 80092a2:	f104 0c14 	add.w	ip, r4, #20
 80092a6:	46ae      	mov	lr, r5
 80092a8:	f04f 0a00 	mov.w	sl, #0
 80092ac:	f8bc b000 	ldrh.w	fp, [ip]
 80092b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092b4:	fb09 220b 	mla	r2, r9, fp, r2
 80092b8:	4492      	add	sl, r2
 80092ba:	b289      	uxth	r1, r1
 80092bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092c0:	f84e 1b04 	str.w	r1, [lr], #4
 80092c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092c8:	f8be 1000 	ldrh.w	r1, [lr]
 80092cc:	0c12      	lsrs	r2, r2, #16
 80092ce:	fb09 1102 	mla	r1, r9, r2, r1
 80092d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092d6:	4567      	cmp	r7, ip
 80092d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092dc:	d8e6      	bhi.n	80092ac <__multiply+0x10c>
 80092de:	9a01      	ldr	r2, [sp, #4]
 80092e0:	50a9      	str	r1, [r5, r2]
 80092e2:	3504      	adds	r5, #4
 80092e4:	e79a      	b.n	800921c <__multiply+0x7c>
 80092e6:	3e01      	subs	r6, #1
 80092e8:	e79c      	b.n	8009224 <__multiply+0x84>
 80092ea:	bf00      	nop
 80092ec:	0800cb08 	.word	0x0800cb08
 80092f0:	0800cb94 	.word	0x0800cb94

080092f4 <__pow5mult>:
 80092f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	4615      	mov	r5, r2
 80092fa:	f012 0203 	ands.w	r2, r2, #3
 80092fe:	4606      	mov	r6, r0
 8009300:	460f      	mov	r7, r1
 8009302:	d007      	beq.n	8009314 <__pow5mult+0x20>
 8009304:	4c25      	ldr	r4, [pc, #148]	; (800939c <__pow5mult+0xa8>)
 8009306:	3a01      	subs	r2, #1
 8009308:	2300      	movs	r3, #0
 800930a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800930e:	f7ff fe51 	bl	8008fb4 <__multadd>
 8009312:	4607      	mov	r7, r0
 8009314:	10ad      	asrs	r5, r5, #2
 8009316:	d03d      	beq.n	8009394 <__pow5mult+0xa0>
 8009318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800931a:	b97c      	cbnz	r4, 800933c <__pow5mult+0x48>
 800931c:	2010      	movs	r0, #16
 800931e:	f7ff fdbf 	bl	8008ea0 <malloc>
 8009322:	4602      	mov	r2, r0
 8009324:	6270      	str	r0, [r6, #36]	; 0x24
 8009326:	b928      	cbnz	r0, 8009334 <__pow5mult+0x40>
 8009328:	4b1d      	ldr	r3, [pc, #116]	; (80093a0 <__pow5mult+0xac>)
 800932a:	481e      	ldr	r0, [pc, #120]	; (80093a4 <__pow5mult+0xb0>)
 800932c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009330:	f001 f94a 	bl	800a5c8 <__assert_func>
 8009334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009338:	6004      	str	r4, [r0, #0]
 800933a:	60c4      	str	r4, [r0, #12]
 800933c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009344:	b94c      	cbnz	r4, 800935a <__pow5mult+0x66>
 8009346:	f240 2171 	movw	r1, #625	; 0x271
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ff12 	bl	8009174 <__i2b>
 8009350:	2300      	movs	r3, #0
 8009352:	f8c8 0008 	str.w	r0, [r8, #8]
 8009356:	4604      	mov	r4, r0
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	f04f 0900 	mov.w	r9, #0
 800935e:	07eb      	lsls	r3, r5, #31
 8009360:	d50a      	bpl.n	8009378 <__pow5mult+0x84>
 8009362:	4639      	mov	r1, r7
 8009364:	4622      	mov	r2, r4
 8009366:	4630      	mov	r0, r6
 8009368:	f7ff ff1a 	bl	80091a0 <__multiply>
 800936c:	4639      	mov	r1, r7
 800936e:	4680      	mov	r8, r0
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff fdfd 	bl	8008f70 <_Bfree>
 8009376:	4647      	mov	r7, r8
 8009378:	106d      	asrs	r5, r5, #1
 800937a:	d00b      	beq.n	8009394 <__pow5mult+0xa0>
 800937c:	6820      	ldr	r0, [r4, #0]
 800937e:	b938      	cbnz	r0, 8009390 <__pow5mult+0x9c>
 8009380:	4622      	mov	r2, r4
 8009382:	4621      	mov	r1, r4
 8009384:	4630      	mov	r0, r6
 8009386:	f7ff ff0b 	bl	80091a0 <__multiply>
 800938a:	6020      	str	r0, [r4, #0]
 800938c:	f8c0 9000 	str.w	r9, [r0]
 8009390:	4604      	mov	r4, r0
 8009392:	e7e4      	b.n	800935e <__pow5mult+0x6a>
 8009394:	4638      	mov	r0, r7
 8009396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800939a:	bf00      	nop
 800939c:	0800cce0 	.word	0x0800cce0
 80093a0:	0800ca96 	.word	0x0800ca96
 80093a4:	0800cb94 	.word	0x0800cb94

080093a8 <__lshift>:
 80093a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	460c      	mov	r4, r1
 80093ae:	6849      	ldr	r1, [r1, #4]
 80093b0:	6923      	ldr	r3, [r4, #16]
 80093b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	4607      	mov	r7, r0
 80093ba:	4691      	mov	r9, r2
 80093bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093c0:	f108 0601 	add.w	r6, r8, #1
 80093c4:	42b3      	cmp	r3, r6
 80093c6:	db0b      	blt.n	80093e0 <__lshift+0x38>
 80093c8:	4638      	mov	r0, r7
 80093ca:	f7ff fd91 	bl	8008ef0 <_Balloc>
 80093ce:	4605      	mov	r5, r0
 80093d0:	b948      	cbnz	r0, 80093e6 <__lshift+0x3e>
 80093d2:	4602      	mov	r2, r0
 80093d4:	4b2a      	ldr	r3, [pc, #168]	; (8009480 <__lshift+0xd8>)
 80093d6:	482b      	ldr	r0, [pc, #172]	; (8009484 <__lshift+0xdc>)
 80093d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093dc:	f001 f8f4 	bl	800a5c8 <__assert_func>
 80093e0:	3101      	adds	r1, #1
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	e7ee      	b.n	80093c4 <__lshift+0x1c>
 80093e6:	2300      	movs	r3, #0
 80093e8:	f100 0114 	add.w	r1, r0, #20
 80093ec:	f100 0210 	add.w	r2, r0, #16
 80093f0:	4618      	mov	r0, r3
 80093f2:	4553      	cmp	r3, sl
 80093f4:	db37      	blt.n	8009466 <__lshift+0xbe>
 80093f6:	6920      	ldr	r0, [r4, #16]
 80093f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093fc:	f104 0314 	add.w	r3, r4, #20
 8009400:	f019 091f 	ands.w	r9, r9, #31
 8009404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800940c:	d02f      	beq.n	800946e <__lshift+0xc6>
 800940e:	f1c9 0e20 	rsb	lr, r9, #32
 8009412:	468a      	mov	sl, r1
 8009414:	f04f 0c00 	mov.w	ip, #0
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	fa02 f209 	lsl.w	r2, r2, r9
 800941e:	ea42 020c 	orr.w	r2, r2, ip
 8009422:	f84a 2b04 	str.w	r2, [sl], #4
 8009426:	f853 2b04 	ldr.w	r2, [r3], #4
 800942a:	4298      	cmp	r0, r3
 800942c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009430:	d8f2      	bhi.n	8009418 <__lshift+0x70>
 8009432:	1b03      	subs	r3, r0, r4
 8009434:	3b15      	subs	r3, #21
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	3304      	adds	r3, #4
 800943c:	f104 0215 	add.w	r2, r4, #21
 8009440:	4290      	cmp	r0, r2
 8009442:	bf38      	it	cc
 8009444:	2304      	movcc	r3, #4
 8009446:	f841 c003 	str.w	ip, [r1, r3]
 800944a:	f1bc 0f00 	cmp.w	ip, #0
 800944e:	d001      	beq.n	8009454 <__lshift+0xac>
 8009450:	f108 0602 	add.w	r6, r8, #2
 8009454:	3e01      	subs	r6, #1
 8009456:	4638      	mov	r0, r7
 8009458:	612e      	str	r6, [r5, #16]
 800945a:	4621      	mov	r1, r4
 800945c:	f7ff fd88 	bl	8008f70 <_Bfree>
 8009460:	4628      	mov	r0, r5
 8009462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009466:	f842 0f04 	str.w	r0, [r2, #4]!
 800946a:	3301      	adds	r3, #1
 800946c:	e7c1      	b.n	80093f2 <__lshift+0x4a>
 800946e:	3904      	subs	r1, #4
 8009470:	f853 2b04 	ldr.w	r2, [r3], #4
 8009474:	f841 2f04 	str.w	r2, [r1, #4]!
 8009478:	4298      	cmp	r0, r3
 800947a:	d8f9      	bhi.n	8009470 <__lshift+0xc8>
 800947c:	e7ea      	b.n	8009454 <__lshift+0xac>
 800947e:	bf00      	nop
 8009480:	0800cb08 	.word	0x0800cb08
 8009484:	0800cb94 	.word	0x0800cb94

08009488 <__mcmp>:
 8009488:	b530      	push	{r4, r5, lr}
 800948a:	6902      	ldr	r2, [r0, #16]
 800948c:	690c      	ldr	r4, [r1, #16]
 800948e:	1b12      	subs	r2, r2, r4
 8009490:	d10e      	bne.n	80094b0 <__mcmp+0x28>
 8009492:	f100 0314 	add.w	r3, r0, #20
 8009496:	3114      	adds	r1, #20
 8009498:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800949c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094a8:	42a5      	cmp	r5, r4
 80094aa:	d003      	beq.n	80094b4 <__mcmp+0x2c>
 80094ac:	d305      	bcc.n	80094ba <__mcmp+0x32>
 80094ae:	2201      	movs	r2, #1
 80094b0:	4610      	mov	r0, r2
 80094b2:	bd30      	pop	{r4, r5, pc}
 80094b4:	4283      	cmp	r3, r0
 80094b6:	d3f3      	bcc.n	80094a0 <__mcmp+0x18>
 80094b8:	e7fa      	b.n	80094b0 <__mcmp+0x28>
 80094ba:	f04f 32ff 	mov.w	r2, #4294967295
 80094be:	e7f7      	b.n	80094b0 <__mcmp+0x28>

080094c0 <__mdiff>:
 80094c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	460c      	mov	r4, r1
 80094c6:	4606      	mov	r6, r0
 80094c8:	4611      	mov	r1, r2
 80094ca:	4620      	mov	r0, r4
 80094cc:	4690      	mov	r8, r2
 80094ce:	f7ff ffdb 	bl	8009488 <__mcmp>
 80094d2:	1e05      	subs	r5, r0, #0
 80094d4:	d110      	bne.n	80094f8 <__mdiff+0x38>
 80094d6:	4629      	mov	r1, r5
 80094d8:	4630      	mov	r0, r6
 80094da:	f7ff fd09 	bl	8008ef0 <_Balloc>
 80094de:	b930      	cbnz	r0, 80094ee <__mdiff+0x2e>
 80094e0:	4b3a      	ldr	r3, [pc, #232]	; (80095cc <__mdiff+0x10c>)
 80094e2:	4602      	mov	r2, r0
 80094e4:	f240 2132 	movw	r1, #562	; 0x232
 80094e8:	4839      	ldr	r0, [pc, #228]	; (80095d0 <__mdiff+0x110>)
 80094ea:	f001 f86d 	bl	800a5c8 <__assert_func>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f8:	bfa4      	itt	ge
 80094fa:	4643      	movge	r3, r8
 80094fc:	46a0      	movge	r8, r4
 80094fe:	4630      	mov	r0, r6
 8009500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009504:	bfa6      	itte	ge
 8009506:	461c      	movge	r4, r3
 8009508:	2500      	movge	r5, #0
 800950a:	2501      	movlt	r5, #1
 800950c:	f7ff fcf0 	bl	8008ef0 <_Balloc>
 8009510:	b920      	cbnz	r0, 800951c <__mdiff+0x5c>
 8009512:	4b2e      	ldr	r3, [pc, #184]	; (80095cc <__mdiff+0x10c>)
 8009514:	4602      	mov	r2, r0
 8009516:	f44f 7110 	mov.w	r1, #576	; 0x240
 800951a:	e7e5      	b.n	80094e8 <__mdiff+0x28>
 800951c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009520:	6926      	ldr	r6, [r4, #16]
 8009522:	60c5      	str	r5, [r0, #12]
 8009524:	f104 0914 	add.w	r9, r4, #20
 8009528:	f108 0514 	add.w	r5, r8, #20
 800952c:	f100 0e14 	add.w	lr, r0, #20
 8009530:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009534:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009538:	f108 0210 	add.w	r2, r8, #16
 800953c:	46f2      	mov	sl, lr
 800953e:	2100      	movs	r1, #0
 8009540:	f859 3b04 	ldr.w	r3, [r9], #4
 8009544:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009548:	fa1f f883 	uxth.w	r8, r3
 800954c:	fa11 f18b 	uxtah	r1, r1, fp
 8009550:	0c1b      	lsrs	r3, r3, #16
 8009552:	eba1 0808 	sub.w	r8, r1, r8
 8009556:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800955a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800955e:	fa1f f888 	uxth.w	r8, r8
 8009562:	1419      	asrs	r1, r3, #16
 8009564:	454e      	cmp	r6, r9
 8009566:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800956a:	f84a 3b04 	str.w	r3, [sl], #4
 800956e:	d8e7      	bhi.n	8009540 <__mdiff+0x80>
 8009570:	1b33      	subs	r3, r6, r4
 8009572:	3b15      	subs	r3, #21
 8009574:	f023 0303 	bic.w	r3, r3, #3
 8009578:	3304      	adds	r3, #4
 800957a:	3415      	adds	r4, #21
 800957c:	42a6      	cmp	r6, r4
 800957e:	bf38      	it	cc
 8009580:	2304      	movcc	r3, #4
 8009582:	441d      	add	r5, r3
 8009584:	4473      	add	r3, lr
 8009586:	469e      	mov	lr, r3
 8009588:	462e      	mov	r6, r5
 800958a:	4566      	cmp	r6, ip
 800958c:	d30e      	bcc.n	80095ac <__mdiff+0xec>
 800958e:	f10c 0203 	add.w	r2, ip, #3
 8009592:	1b52      	subs	r2, r2, r5
 8009594:	f022 0203 	bic.w	r2, r2, #3
 8009598:	3d03      	subs	r5, #3
 800959a:	45ac      	cmp	ip, r5
 800959c:	bf38      	it	cc
 800959e:	2200      	movcc	r2, #0
 80095a0:	441a      	add	r2, r3
 80095a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095a6:	b17b      	cbz	r3, 80095c8 <__mdiff+0x108>
 80095a8:	6107      	str	r7, [r0, #16]
 80095aa:	e7a3      	b.n	80094f4 <__mdiff+0x34>
 80095ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80095b0:	fa11 f288 	uxtah	r2, r1, r8
 80095b4:	1414      	asrs	r4, r2, #16
 80095b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095ba:	b292      	uxth	r2, r2
 80095bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095c0:	f84e 2b04 	str.w	r2, [lr], #4
 80095c4:	1421      	asrs	r1, r4, #16
 80095c6:	e7e0      	b.n	800958a <__mdiff+0xca>
 80095c8:	3f01      	subs	r7, #1
 80095ca:	e7ea      	b.n	80095a2 <__mdiff+0xe2>
 80095cc:	0800cb08 	.word	0x0800cb08
 80095d0:	0800cb94 	.word	0x0800cb94

080095d4 <__ulp>:
 80095d4:	b082      	sub	sp, #8
 80095d6:	ed8d 0b00 	vstr	d0, [sp]
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	4912      	ldr	r1, [pc, #72]	; (8009628 <__ulp+0x54>)
 80095de:	4019      	ands	r1, r3
 80095e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80095e4:	2900      	cmp	r1, #0
 80095e6:	dd05      	ble.n	80095f4 <__ulp+0x20>
 80095e8:	2200      	movs	r2, #0
 80095ea:	460b      	mov	r3, r1
 80095ec:	ec43 2b10 	vmov	d0, r2, r3
 80095f0:	b002      	add	sp, #8
 80095f2:	4770      	bx	lr
 80095f4:	4249      	negs	r1, r1
 80095f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80095fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	f04f 0300 	mov.w	r3, #0
 8009606:	da04      	bge.n	8009612 <__ulp+0x3e>
 8009608:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800960c:	fa41 f300 	asr.w	r3, r1, r0
 8009610:	e7ec      	b.n	80095ec <__ulp+0x18>
 8009612:	f1a0 0114 	sub.w	r1, r0, #20
 8009616:	291e      	cmp	r1, #30
 8009618:	bfda      	itte	le
 800961a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800961e:	fa20 f101 	lsrle.w	r1, r0, r1
 8009622:	2101      	movgt	r1, #1
 8009624:	460a      	mov	r2, r1
 8009626:	e7e1      	b.n	80095ec <__ulp+0x18>
 8009628:	7ff00000 	.word	0x7ff00000

0800962c <__b2d>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	6905      	ldr	r5, [r0, #16]
 8009630:	f100 0714 	add.w	r7, r0, #20
 8009634:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009638:	1f2e      	subs	r6, r5, #4
 800963a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800963e:	4620      	mov	r0, r4
 8009640:	f7ff fd48 	bl	80090d4 <__hi0bits>
 8009644:	f1c0 0320 	rsb	r3, r0, #32
 8009648:	280a      	cmp	r0, #10
 800964a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80096c8 <__b2d+0x9c>
 800964e:	600b      	str	r3, [r1, #0]
 8009650:	dc14      	bgt.n	800967c <__b2d+0x50>
 8009652:	f1c0 0e0b 	rsb	lr, r0, #11
 8009656:	fa24 f10e 	lsr.w	r1, r4, lr
 800965a:	42b7      	cmp	r7, r6
 800965c:	ea41 030c 	orr.w	r3, r1, ip
 8009660:	bf34      	ite	cc
 8009662:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009666:	2100      	movcs	r1, #0
 8009668:	3015      	adds	r0, #21
 800966a:	fa04 f000 	lsl.w	r0, r4, r0
 800966e:	fa21 f10e 	lsr.w	r1, r1, lr
 8009672:	ea40 0201 	orr.w	r2, r0, r1
 8009676:	ec43 2b10 	vmov	d0, r2, r3
 800967a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800967c:	42b7      	cmp	r7, r6
 800967e:	bf3a      	itte	cc
 8009680:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009684:	f1a5 0608 	subcc.w	r6, r5, #8
 8009688:	2100      	movcs	r1, #0
 800968a:	380b      	subs	r0, #11
 800968c:	d017      	beq.n	80096be <__b2d+0x92>
 800968e:	f1c0 0c20 	rsb	ip, r0, #32
 8009692:	fa04 f500 	lsl.w	r5, r4, r0
 8009696:	42be      	cmp	r6, r7
 8009698:	fa21 f40c 	lsr.w	r4, r1, ip
 800969c:	ea45 0504 	orr.w	r5, r5, r4
 80096a0:	bf8c      	ite	hi
 80096a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80096a6:	2400      	movls	r4, #0
 80096a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80096ac:	fa01 f000 	lsl.w	r0, r1, r0
 80096b0:	fa24 f40c 	lsr.w	r4, r4, ip
 80096b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80096b8:	ea40 0204 	orr.w	r2, r0, r4
 80096bc:	e7db      	b.n	8009676 <__b2d+0x4a>
 80096be:	ea44 030c 	orr.w	r3, r4, ip
 80096c2:	460a      	mov	r2, r1
 80096c4:	e7d7      	b.n	8009676 <__b2d+0x4a>
 80096c6:	bf00      	nop
 80096c8:	3ff00000 	.word	0x3ff00000

080096cc <__d2b>:
 80096cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	4689      	mov	r9, r1
 80096d2:	2101      	movs	r1, #1
 80096d4:	ec57 6b10 	vmov	r6, r7, d0
 80096d8:	4690      	mov	r8, r2
 80096da:	f7ff fc09 	bl	8008ef0 <_Balloc>
 80096de:	4604      	mov	r4, r0
 80096e0:	b930      	cbnz	r0, 80096f0 <__d2b+0x24>
 80096e2:	4602      	mov	r2, r0
 80096e4:	4b25      	ldr	r3, [pc, #148]	; (800977c <__d2b+0xb0>)
 80096e6:	4826      	ldr	r0, [pc, #152]	; (8009780 <__d2b+0xb4>)
 80096e8:	f240 310a 	movw	r1, #778	; 0x30a
 80096ec:	f000 ff6c 	bl	800a5c8 <__assert_func>
 80096f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80096f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096f8:	bb35      	cbnz	r5, 8009748 <__d2b+0x7c>
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	d028      	beq.n	8009752 <__d2b+0x86>
 8009700:	4668      	mov	r0, sp
 8009702:	9600      	str	r6, [sp, #0]
 8009704:	f7ff fd06 	bl	8009114 <__lo0bits>
 8009708:	9900      	ldr	r1, [sp, #0]
 800970a:	b300      	cbz	r0, 800974e <__d2b+0x82>
 800970c:	9a01      	ldr	r2, [sp, #4]
 800970e:	f1c0 0320 	rsb	r3, r0, #32
 8009712:	fa02 f303 	lsl.w	r3, r2, r3
 8009716:	430b      	orrs	r3, r1
 8009718:	40c2      	lsrs	r2, r0
 800971a:	6163      	str	r3, [r4, #20]
 800971c:	9201      	str	r2, [sp, #4]
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	61a3      	str	r3, [r4, #24]
 8009722:	2b00      	cmp	r3, #0
 8009724:	bf14      	ite	ne
 8009726:	2202      	movne	r2, #2
 8009728:	2201      	moveq	r2, #1
 800972a:	6122      	str	r2, [r4, #16]
 800972c:	b1d5      	cbz	r5, 8009764 <__d2b+0x98>
 800972e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009732:	4405      	add	r5, r0
 8009734:	f8c9 5000 	str.w	r5, [r9]
 8009738:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800973c:	f8c8 0000 	str.w	r0, [r8]
 8009740:	4620      	mov	r0, r4
 8009742:	b003      	add	sp, #12
 8009744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800974c:	e7d5      	b.n	80096fa <__d2b+0x2e>
 800974e:	6161      	str	r1, [r4, #20]
 8009750:	e7e5      	b.n	800971e <__d2b+0x52>
 8009752:	a801      	add	r0, sp, #4
 8009754:	f7ff fcde 	bl	8009114 <__lo0bits>
 8009758:	9b01      	ldr	r3, [sp, #4]
 800975a:	6163      	str	r3, [r4, #20]
 800975c:	2201      	movs	r2, #1
 800975e:	6122      	str	r2, [r4, #16]
 8009760:	3020      	adds	r0, #32
 8009762:	e7e3      	b.n	800972c <__d2b+0x60>
 8009764:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800976c:	f8c9 0000 	str.w	r0, [r9]
 8009770:	6918      	ldr	r0, [r3, #16]
 8009772:	f7ff fcaf 	bl	80090d4 <__hi0bits>
 8009776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800977a:	e7df      	b.n	800973c <__d2b+0x70>
 800977c:	0800cb08 	.word	0x0800cb08
 8009780:	0800cb94 	.word	0x0800cb94

08009784 <__ratio>:
 8009784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	4688      	mov	r8, r1
 800978a:	4669      	mov	r1, sp
 800978c:	4681      	mov	r9, r0
 800978e:	f7ff ff4d 	bl	800962c <__b2d>
 8009792:	a901      	add	r1, sp, #4
 8009794:	4640      	mov	r0, r8
 8009796:	ec55 4b10 	vmov	r4, r5, d0
 800979a:	f7ff ff47 	bl	800962c <__b2d>
 800979e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097a6:	eba3 0c02 	sub.w	ip, r3, r2
 80097aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097b4:	ec51 0b10 	vmov	r0, r1, d0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	bfd6      	itet	le
 80097bc:	460a      	movle	r2, r1
 80097be:	462a      	movgt	r2, r5
 80097c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097c4:	468b      	mov	fp, r1
 80097c6:	462f      	mov	r7, r5
 80097c8:	bfd4      	ite	le
 80097ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80097ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80097d2:	4620      	mov	r0, r4
 80097d4:	ee10 2a10 	vmov	r2, s0
 80097d8:	465b      	mov	r3, fp
 80097da:	4639      	mov	r1, r7
 80097dc:	f7f7 f84e 	bl	800087c <__aeabi_ddiv>
 80097e0:	ec41 0b10 	vmov	d0, r0, r1
 80097e4:	b003      	add	sp, #12
 80097e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097ea <__copybits>:
 80097ea:	3901      	subs	r1, #1
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	1149      	asrs	r1, r1, #5
 80097f0:	6914      	ldr	r4, [r2, #16]
 80097f2:	3101      	adds	r1, #1
 80097f4:	f102 0314 	add.w	r3, r2, #20
 80097f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009800:	1f05      	subs	r5, r0, #4
 8009802:	42a3      	cmp	r3, r4
 8009804:	d30c      	bcc.n	8009820 <__copybits+0x36>
 8009806:	1aa3      	subs	r3, r4, r2
 8009808:	3b11      	subs	r3, #17
 800980a:	f023 0303 	bic.w	r3, r3, #3
 800980e:	3211      	adds	r2, #17
 8009810:	42a2      	cmp	r2, r4
 8009812:	bf88      	it	hi
 8009814:	2300      	movhi	r3, #0
 8009816:	4418      	add	r0, r3
 8009818:	2300      	movs	r3, #0
 800981a:	4288      	cmp	r0, r1
 800981c:	d305      	bcc.n	800982a <__copybits+0x40>
 800981e:	bd70      	pop	{r4, r5, r6, pc}
 8009820:	f853 6b04 	ldr.w	r6, [r3], #4
 8009824:	f845 6f04 	str.w	r6, [r5, #4]!
 8009828:	e7eb      	b.n	8009802 <__copybits+0x18>
 800982a:	f840 3b04 	str.w	r3, [r0], #4
 800982e:	e7f4      	b.n	800981a <__copybits+0x30>

08009830 <__any_on>:
 8009830:	f100 0214 	add.w	r2, r0, #20
 8009834:	6900      	ldr	r0, [r0, #16]
 8009836:	114b      	asrs	r3, r1, #5
 8009838:	4298      	cmp	r0, r3
 800983a:	b510      	push	{r4, lr}
 800983c:	db11      	blt.n	8009862 <__any_on+0x32>
 800983e:	dd0a      	ble.n	8009856 <__any_on+0x26>
 8009840:	f011 011f 	ands.w	r1, r1, #31
 8009844:	d007      	beq.n	8009856 <__any_on+0x26>
 8009846:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800984a:	fa24 f001 	lsr.w	r0, r4, r1
 800984e:	fa00 f101 	lsl.w	r1, r0, r1
 8009852:	428c      	cmp	r4, r1
 8009854:	d10b      	bne.n	800986e <__any_on+0x3e>
 8009856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800985a:	4293      	cmp	r3, r2
 800985c:	d803      	bhi.n	8009866 <__any_on+0x36>
 800985e:	2000      	movs	r0, #0
 8009860:	bd10      	pop	{r4, pc}
 8009862:	4603      	mov	r3, r0
 8009864:	e7f7      	b.n	8009856 <__any_on+0x26>
 8009866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800986a:	2900      	cmp	r1, #0
 800986c:	d0f5      	beq.n	800985a <__any_on+0x2a>
 800986e:	2001      	movs	r0, #1
 8009870:	e7f6      	b.n	8009860 <__any_on+0x30>

08009872 <_calloc_r>:
 8009872:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009874:	fba1 2402 	umull	r2, r4, r1, r2
 8009878:	b94c      	cbnz	r4, 800988e <_calloc_r+0x1c>
 800987a:	4611      	mov	r1, r2
 800987c:	9201      	str	r2, [sp, #4]
 800987e:	f000 f87b 	bl	8009978 <_malloc_r>
 8009882:	9a01      	ldr	r2, [sp, #4]
 8009884:	4605      	mov	r5, r0
 8009886:	b930      	cbnz	r0, 8009896 <_calloc_r+0x24>
 8009888:	4628      	mov	r0, r5
 800988a:	b003      	add	sp, #12
 800988c:	bd30      	pop	{r4, r5, pc}
 800988e:	220c      	movs	r2, #12
 8009890:	6002      	str	r2, [r0, #0]
 8009892:	2500      	movs	r5, #0
 8009894:	e7f8      	b.n	8009888 <_calloc_r+0x16>
 8009896:	4621      	mov	r1, r4
 8009898:	f7fc fb18 	bl	8005ecc <memset>
 800989c:	e7f4      	b.n	8009888 <_calloc_r+0x16>
	...

080098a0 <_free_r>:
 80098a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098a2:	2900      	cmp	r1, #0
 80098a4:	d044      	beq.n	8009930 <_free_r+0x90>
 80098a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098aa:	9001      	str	r0, [sp, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f1a1 0404 	sub.w	r4, r1, #4
 80098b2:	bfb8      	it	lt
 80098b4:	18e4      	addlt	r4, r4, r3
 80098b6:	f001 f88b 	bl	800a9d0 <__malloc_lock>
 80098ba:	4a1e      	ldr	r2, [pc, #120]	; (8009934 <_free_r+0x94>)
 80098bc:	9801      	ldr	r0, [sp, #4]
 80098be:	6813      	ldr	r3, [r2, #0]
 80098c0:	b933      	cbnz	r3, 80098d0 <_free_r+0x30>
 80098c2:	6063      	str	r3, [r4, #4]
 80098c4:	6014      	str	r4, [r2, #0]
 80098c6:	b003      	add	sp, #12
 80098c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098cc:	f001 b886 	b.w	800a9dc <__malloc_unlock>
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	d908      	bls.n	80098e6 <_free_r+0x46>
 80098d4:	6825      	ldr	r5, [r4, #0]
 80098d6:	1961      	adds	r1, r4, r5
 80098d8:	428b      	cmp	r3, r1
 80098da:	bf01      	itttt	eq
 80098dc:	6819      	ldreq	r1, [r3, #0]
 80098de:	685b      	ldreq	r3, [r3, #4]
 80098e0:	1949      	addeq	r1, r1, r5
 80098e2:	6021      	streq	r1, [r4, #0]
 80098e4:	e7ed      	b.n	80098c2 <_free_r+0x22>
 80098e6:	461a      	mov	r2, r3
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	b10b      	cbz	r3, 80098f0 <_free_r+0x50>
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	d9fa      	bls.n	80098e6 <_free_r+0x46>
 80098f0:	6811      	ldr	r1, [r2, #0]
 80098f2:	1855      	adds	r5, r2, r1
 80098f4:	42a5      	cmp	r5, r4
 80098f6:	d10b      	bne.n	8009910 <_free_r+0x70>
 80098f8:	6824      	ldr	r4, [r4, #0]
 80098fa:	4421      	add	r1, r4
 80098fc:	1854      	adds	r4, r2, r1
 80098fe:	42a3      	cmp	r3, r4
 8009900:	6011      	str	r1, [r2, #0]
 8009902:	d1e0      	bne.n	80098c6 <_free_r+0x26>
 8009904:	681c      	ldr	r4, [r3, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	6053      	str	r3, [r2, #4]
 800990a:	4421      	add	r1, r4
 800990c:	6011      	str	r1, [r2, #0]
 800990e:	e7da      	b.n	80098c6 <_free_r+0x26>
 8009910:	d902      	bls.n	8009918 <_free_r+0x78>
 8009912:	230c      	movs	r3, #12
 8009914:	6003      	str	r3, [r0, #0]
 8009916:	e7d6      	b.n	80098c6 <_free_r+0x26>
 8009918:	6825      	ldr	r5, [r4, #0]
 800991a:	1961      	adds	r1, r4, r5
 800991c:	428b      	cmp	r3, r1
 800991e:	bf04      	itt	eq
 8009920:	6819      	ldreq	r1, [r3, #0]
 8009922:	685b      	ldreq	r3, [r3, #4]
 8009924:	6063      	str	r3, [r4, #4]
 8009926:	bf04      	itt	eq
 8009928:	1949      	addeq	r1, r1, r5
 800992a:	6021      	streq	r1, [r4, #0]
 800992c:	6054      	str	r4, [r2, #4]
 800992e:	e7ca      	b.n	80098c6 <_free_r+0x26>
 8009930:	b003      	add	sp, #12
 8009932:	bd30      	pop	{r4, r5, pc}
 8009934:	20000d60 	.word	0x20000d60

08009938 <sbrk_aligned>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	4e0e      	ldr	r6, [pc, #56]	; (8009974 <sbrk_aligned+0x3c>)
 800993c:	460c      	mov	r4, r1
 800993e:	6831      	ldr	r1, [r6, #0]
 8009940:	4605      	mov	r5, r0
 8009942:	b911      	cbnz	r1, 800994a <sbrk_aligned+0x12>
 8009944:	f000 fd28 	bl	800a398 <_sbrk_r>
 8009948:	6030      	str	r0, [r6, #0]
 800994a:	4621      	mov	r1, r4
 800994c:	4628      	mov	r0, r5
 800994e:	f000 fd23 	bl	800a398 <_sbrk_r>
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	d00a      	beq.n	800996c <sbrk_aligned+0x34>
 8009956:	1cc4      	adds	r4, r0, #3
 8009958:	f024 0403 	bic.w	r4, r4, #3
 800995c:	42a0      	cmp	r0, r4
 800995e:	d007      	beq.n	8009970 <sbrk_aligned+0x38>
 8009960:	1a21      	subs	r1, r4, r0
 8009962:	4628      	mov	r0, r5
 8009964:	f000 fd18 	bl	800a398 <_sbrk_r>
 8009968:	3001      	adds	r0, #1
 800996a:	d101      	bne.n	8009970 <sbrk_aligned+0x38>
 800996c:	f04f 34ff 	mov.w	r4, #4294967295
 8009970:	4620      	mov	r0, r4
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	20000d64 	.word	0x20000d64

08009978 <_malloc_r>:
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997c:	1ccd      	adds	r5, r1, #3
 800997e:	f025 0503 	bic.w	r5, r5, #3
 8009982:	3508      	adds	r5, #8
 8009984:	2d0c      	cmp	r5, #12
 8009986:	bf38      	it	cc
 8009988:	250c      	movcc	r5, #12
 800998a:	2d00      	cmp	r5, #0
 800998c:	4607      	mov	r7, r0
 800998e:	db01      	blt.n	8009994 <_malloc_r+0x1c>
 8009990:	42a9      	cmp	r1, r5
 8009992:	d905      	bls.n	80099a0 <_malloc_r+0x28>
 8009994:	230c      	movs	r3, #12
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	2600      	movs	r6, #0
 800999a:	4630      	mov	r0, r6
 800999c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a0:	4e2e      	ldr	r6, [pc, #184]	; (8009a5c <_malloc_r+0xe4>)
 80099a2:	f001 f815 	bl	800a9d0 <__malloc_lock>
 80099a6:	6833      	ldr	r3, [r6, #0]
 80099a8:	461c      	mov	r4, r3
 80099aa:	bb34      	cbnz	r4, 80099fa <_malloc_r+0x82>
 80099ac:	4629      	mov	r1, r5
 80099ae:	4638      	mov	r0, r7
 80099b0:	f7ff ffc2 	bl	8009938 <sbrk_aligned>
 80099b4:	1c43      	adds	r3, r0, #1
 80099b6:	4604      	mov	r4, r0
 80099b8:	d14d      	bne.n	8009a56 <_malloc_r+0xde>
 80099ba:	6834      	ldr	r4, [r6, #0]
 80099bc:	4626      	mov	r6, r4
 80099be:	2e00      	cmp	r6, #0
 80099c0:	d140      	bne.n	8009a44 <_malloc_r+0xcc>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	4631      	mov	r1, r6
 80099c6:	4638      	mov	r0, r7
 80099c8:	eb04 0803 	add.w	r8, r4, r3
 80099cc:	f000 fce4 	bl	800a398 <_sbrk_r>
 80099d0:	4580      	cmp	r8, r0
 80099d2:	d13a      	bne.n	8009a4a <_malloc_r+0xd2>
 80099d4:	6821      	ldr	r1, [r4, #0]
 80099d6:	3503      	adds	r5, #3
 80099d8:	1a6d      	subs	r5, r5, r1
 80099da:	f025 0503 	bic.w	r5, r5, #3
 80099de:	3508      	adds	r5, #8
 80099e0:	2d0c      	cmp	r5, #12
 80099e2:	bf38      	it	cc
 80099e4:	250c      	movcc	r5, #12
 80099e6:	4629      	mov	r1, r5
 80099e8:	4638      	mov	r0, r7
 80099ea:	f7ff ffa5 	bl	8009938 <sbrk_aligned>
 80099ee:	3001      	adds	r0, #1
 80099f0:	d02b      	beq.n	8009a4a <_malloc_r+0xd2>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	442b      	add	r3, r5
 80099f6:	6023      	str	r3, [r4, #0]
 80099f8:	e00e      	b.n	8009a18 <_malloc_r+0xa0>
 80099fa:	6822      	ldr	r2, [r4, #0]
 80099fc:	1b52      	subs	r2, r2, r5
 80099fe:	d41e      	bmi.n	8009a3e <_malloc_r+0xc6>
 8009a00:	2a0b      	cmp	r2, #11
 8009a02:	d916      	bls.n	8009a32 <_malloc_r+0xba>
 8009a04:	1961      	adds	r1, r4, r5
 8009a06:	42a3      	cmp	r3, r4
 8009a08:	6025      	str	r5, [r4, #0]
 8009a0a:	bf18      	it	ne
 8009a0c:	6059      	strne	r1, [r3, #4]
 8009a0e:	6863      	ldr	r3, [r4, #4]
 8009a10:	bf08      	it	eq
 8009a12:	6031      	streq	r1, [r6, #0]
 8009a14:	5162      	str	r2, [r4, r5]
 8009a16:	604b      	str	r3, [r1, #4]
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f104 060b 	add.w	r6, r4, #11
 8009a1e:	f000 ffdd 	bl	800a9dc <__malloc_unlock>
 8009a22:	f026 0607 	bic.w	r6, r6, #7
 8009a26:	1d23      	adds	r3, r4, #4
 8009a28:	1af2      	subs	r2, r6, r3
 8009a2a:	d0b6      	beq.n	800999a <_malloc_r+0x22>
 8009a2c:	1b9b      	subs	r3, r3, r6
 8009a2e:	50a3      	str	r3, [r4, r2]
 8009a30:	e7b3      	b.n	800999a <_malloc_r+0x22>
 8009a32:	6862      	ldr	r2, [r4, #4]
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	bf0c      	ite	eq
 8009a38:	6032      	streq	r2, [r6, #0]
 8009a3a:	605a      	strne	r2, [r3, #4]
 8009a3c:	e7ec      	b.n	8009a18 <_malloc_r+0xa0>
 8009a3e:	4623      	mov	r3, r4
 8009a40:	6864      	ldr	r4, [r4, #4]
 8009a42:	e7b2      	b.n	80099aa <_malloc_r+0x32>
 8009a44:	4634      	mov	r4, r6
 8009a46:	6876      	ldr	r6, [r6, #4]
 8009a48:	e7b9      	b.n	80099be <_malloc_r+0x46>
 8009a4a:	230c      	movs	r3, #12
 8009a4c:	603b      	str	r3, [r7, #0]
 8009a4e:	4638      	mov	r0, r7
 8009a50:	f000 ffc4 	bl	800a9dc <__malloc_unlock>
 8009a54:	e7a1      	b.n	800999a <_malloc_r+0x22>
 8009a56:	6025      	str	r5, [r4, #0]
 8009a58:	e7de      	b.n	8009a18 <_malloc_r+0xa0>
 8009a5a:	bf00      	nop
 8009a5c:	20000d60 	.word	0x20000d60

08009a60 <__ssputs_r>:
 8009a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a64:	688e      	ldr	r6, [r1, #8]
 8009a66:	429e      	cmp	r6, r3
 8009a68:	4682      	mov	sl, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	4690      	mov	r8, r2
 8009a6e:	461f      	mov	r7, r3
 8009a70:	d838      	bhi.n	8009ae4 <__ssputs_r+0x84>
 8009a72:	898a      	ldrh	r2, [r1, #12]
 8009a74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a78:	d032      	beq.n	8009ae0 <__ssputs_r+0x80>
 8009a7a:	6825      	ldr	r5, [r4, #0]
 8009a7c:	6909      	ldr	r1, [r1, #16]
 8009a7e:	eba5 0901 	sub.w	r9, r5, r1
 8009a82:	6965      	ldr	r5, [r4, #20]
 8009a84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	444b      	add	r3, r9
 8009a90:	106d      	asrs	r5, r5, #1
 8009a92:	429d      	cmp	r5, r3
 8009a94:	bf38      	it	cc
 8009a96:	461d      	movcc	r5, r3
 8009a98:	0553      	lsls	r3, r2, #21
 8009a9a:	d531      	bpl.n	8009b00 <__ssputs_r+0xa0>
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7ff ff6b 	bl	8009978 <_malloc_r>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	b950      	cbnz	r0, 8009abc <__ssputs_r+0x5c>
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	f8ca 3000 	str.w	r3, [sl]
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ab2:	81a3      	strh	r3, [r4, #12]
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abc:	6921      	ldr	r1, [r4, #16]
 8009abe:	464a      	mov	r2, r9
 8009ac0:	f7ff fa08 	bl	8008ed4 <memcpy>
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ace:	81a3      	strh	r3, [r4, #12]
 8009ad0:	6126      	str	r6, [r4, #16]
 8009ad2:	6165      	str	r5, [r4, #20]
 8009ad4:	444e      	add	r6, r9
 8009ad6:	eba5 0509 	sub.w	r5, r5, r9
 8009ada:	6026      	str	r6, [r4, #0]
 8009adc:	60a5      	str	r5, [r4, #8]
 8009ade:	463e      	mov	r6, r7
 8009ae0:	42be      	cmp	r6, r7
 8009ae2:	d900      	bls.n	8009ae6 <__ssputs_r+0x86>
 8009ae4:	463e      	mov	r6, r7
 8009ae6:	6820      	ldr	r0, [r4, #0]
 8009ae8:	4632      	mov	r2, r6
 8009aea:	4641      	mov	r1, r8
 8009aec:	f000 ff56 	bl	800a99c <memmove>
 8009af0:	68a3      	ldr	r3, [r4, #8]
 8009af2:	1b9b      	subs	r3, r3, r6
 8009af4:	60a3      	str	r3, [r4, #8]
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	4433      	add	r3, r6
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	2000      	movs	r0, #0
 8009afe:	e7db      	b.n	8009ab8 <__ssputs_r+0x58>
 8009b00:	462a      	mov	r2, r5
 8009b02:	f000 ff71 	bl	800a9e8 <_realloc_r>
 8009b06:	4606      	mov	r6, r0
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	d1e1      	bne.n	8009ad0 <__ssputs_r+0x70>
 8009b0c:	6921      	ldr	r1, [r4, #16]
 8009b0e:	4650      	mov	r0, sl
 8009b10:	f7ff fec6 	bl	80098a0 <_free_r>
 8009b14:	e7c7      	b.n	8009aa6 <__ssputs_r+0x46>
	...

08009b18 <_svfiprintf_r>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	4698      	mov	r8, r3
 8009b1e:	898b      	ldrh	r3, [r1, #12]
 8009b20:	061b      	lsls	r3, r3, #24
 8009b22:	b09d      	sub	sp, #116	; 0x74
 8009b24:	4607      	mov	r7, r0
 8009b26:	460d      	mov	r5, r1
 8009b28:	4614      	mov	r4, r2
 8009b2a:	d50e      	bpl.n	8009b4a <_svfiprintf_r+0x32>
 8009b2c:	690b      	ldr	r3, [r1, #16]
 8009b2e:	b963      	cbnz	r3, 8009b4a <_svfiprintf_r+0x32>
 8009b30:	2140      	movs	r1, #64	; 0x40
 8009b32:	f7ff ff21 	bl	8009978 <_malloc_r>
 8009b36:	6028      	str	r0, [r5, #0]
 8009b38:	6128      	str	r0, [r5, #16]
 8009b3a:	b920      	cbnz	r0, 8009b46 <_svfiprintf_r+0x2e>
 8009b3c:	230c      	movs	r3, #12
 8009b3e:	603b      	str	r3, [r7, #0]
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295
 8009b44:	e0d1      	b.n	8009cea <_svfiprintf_r+0x1d2>
 8009b46:	2340      	movs	r3, #64	; 0x40
 8009b48:	616b      	str	r3, [r5, #20]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b4e:	2320      	movs	r3, #32
 8009b50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b58:	2330      	movs	r3, #48	; 0x30
 8009b5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d04 <_svfiprintf_r+0x1ec>
 8009b5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b62:	f04f 0901 	mov.w	r9, #1
 8009b66:	4623      	mov	r3, r4
 8009b68:	469a      	mov	sl, r3
 8009b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b6e:	b10a      	cbz	r2, 8009b74 <_svfiprintf_r+0x5c>
 8009b70:	2a25      	cmp	r2, #37	; 0x25
 8009b72:	d1f9      	bne.n	8009b68 <_svfiprintf_r+0x50>
 8009b74:	ebba 0b04 	subs.w	fp, sl, r4
 8009b78:	d00b      	beq.n	8009b92 <_svfiprintf_r+0x7a>
 8009b7a:	465b      	mov	r3, fp
 8009b7c:	4622      	mov	r2, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4638      	mov	r0, r7
 8009b82:	f7ff ff6d 	bl	8009a60 <__ssputs_r>
 8009b86:	3001      	adds	r0, #1
 8009b88:	f000 80aa 	beq.w	8009ce0 <_svfiprintf_r+0x1c8>
 8009b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b8e:	445a      	add	r2, fp
 8009b90:	9209      	str	r2, [sp, #36]	; 0x24
 8009b92:	f89a 3000 	ldrb.w	r3, [sl]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 80a2 	beq.w	8009ce0 <_svfiprintf_r+0x1c8>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ba6:	f10a 0a01 	add.w	sl, sl, #1
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	9307      	str	r3, [sp, #28]
 8009bae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bb2:	931a      	str	r3, [sp, #104]	; 0x68
 8009bb4:	4654      	mov	r4, sl
 8009bb6:	2205      	movs	r2, #5
 8009bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbc:	4851      	ldr	r0, [pc, #324]	; (8009d04 <_svfiprintf_r+0x1ec>)
 8009bbe:	f7f6 fb27 	bl	8000210 <memchr>
 8009bc2:	9a04      	ldr	r2, [sp, #16]
 8009bc4:	b9d8      	cbnz	r0, 8009bfe <_svfiprintf_r+0xe6>
 8009bc6:	06d0      	lsls	r0, r2, #27
 8009bc8:	bf44      	itt	mi
 8009bca:	2320      	movmi	r3, #32
 8009bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd0:	0711      	lsls	r1, r2, #28
 8009bd2:	bf44      	itt	mi
 8009bd4:	232b      	movmi	r3, #43	; 0x2b
 8009bd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bda:	f89a 3000 	ldrb.w	r3, [sl]
 8009bde:	2b2a      	cmp	r3, #42	; 0x2a
 8009be0:	d015      	beq.n	8009c0e <_svfiprintf_r+0xf6>
 8009be2:	9a07      	ldr	r2, [sp, #28]
 8009be4:	4654      	mov	r4, sl
 8009be6:	2000      	movs	r0, #0
 8009be8:	f04f 0c0a 	mov.w	ip, #10
 8009bec:	4621      	mov	r1, r4
 8009bee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bf2:	3b30      	subs	r3, #48	; 0x30
 8009bf4:	2b09      	cmp	r3, #9
 8009bf6:	d94e      	bls.n	8009c96 <_svfiprintf_r+0x17e>
 8009bf8:	b1b0      	cbz	r0, 8009c28 <_svfiprintf_r+0x110>
 8009bfa:	9207      	str	r2, [sp, #28]
 8009bfc:	e014      	b.n	8009c28 <_svfiprintf_r+0x110>
 8009bfe:	eba0 0308 	sub.w	r3, r0, r8
 8009c02:	fa09 f303 	lsl.w	r3, r9, r3
 8009c06:	4313      	orrs	r3, r2
 8009c08:	9304      	str	r3, [sp, #16]
 8009c0a:	46a2      	mov	sl, r4
 8009c0c:	e7d2      	b.n	8009bb4 <_svfiprintf_r+0x9c>
 8009c0e:	9b03      	ldr	r3, [sp, #12]
 8009c10:	1d19      	adds	r1, r3, #4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	9103      	str	r1, [sp, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bfbb      	ittet	lt
 8009c1a:	425b      	neglt	r3, r3
 8009c1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009c20:	9307      	strge	r3, [sp, #28]
 8009c22:	9307      	strlt	r3, [sp, #28]
 8009c24:	bfb8      	it	lt
 8009c26:	9204      	strlt	r2, [sp, #16]
 8009c28:	7823      	ldrb	r3, [r4, #0]
 8009c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009c2c:	d10c      	bne.n	8009c48 <_svfiprintf_r+0x130>
 8009c2e:	7863      	ldrb	r3, [r4, #1]
 8009c30:	2b2a      	cmp	r3, #42	; 0x2a
 8009c32:	d135      	bne.n	8009ca0 <_svfiprintf_r+0x188>
 8009c34:	9b03      	ldr	r3, [sp, #12]
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	9203      	str	r2, [sp, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	bfb8      	it	lt
 8009c40:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c44:	3402      	adds	r4, #2
 8009c46:	9305      	str	r3, [sp, #20]
 8009c48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d14 <_svfiprintf_r+0x1fc>
 8009c4c:	7821      	ldrb	r1, [r4, #0]
 8009c4e:	2203      	movs	r2, #3
 8009c50:	4650      	mov	r0, sl
 8009c52:	f7f6 fadd 	bl	8000210 <memchr>
 8009c56:	b140      	cbz	r0, 8009c6a <_svfiprintf_r+0x152>
 8009c58:	2340      	movs	r3, #64	; 0x40
 8009c5a:	eba0 000a 	sub.w	r0, r0, sl
 8009c5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009c62:	9b04      	ldr	r3, [sp, #16]
 8009c64:	4303      	orrs	r3, r0
 8009c66:	3401      	adds	r4, #1
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6e:	4826      	ldr	r0, [pc, #152]	; (8009d08 <_svfiprintf_r+0x1f0>)
 8009c70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c74:	2206      	movs	r2, #6
 8009c76:	f7f6 facb 	bl	8000210 <memchr>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d038      	beq.n	8009cf0 <_svfiprintf_r+0x1d8>
 8009c7e:	4b23      	ldr	r3, [pc, #140]	; (8009d0c <_svfiprintf_r+0x1f4>)
 8009c80:	bb1b      	cbnz	r3, 8009cca <_svfiprintf_r+0x1b2>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	3307      	adds	r3, #7
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c90:	4433      	add	r3, r6
 8009c92:	9309      	str	r3, [sp, #36]	; 0x24
 8009c94:	e767      	b.n	8009b66 <_svfiprintf_r+0x4e>
 8009c96:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	2001      	movs	r0, #1
 8009c9e:	e7a5      	b.n	8009bec <_svfiprintf_r+0xd4>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	3401      	adds	r4, #1
 8009ca4:	9305      	str	r3, [sp, #20]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	f04f 0c0a 	mov.w	ip, #10
 8009cac:	4620      	mov	r0, r4
 8009cae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb2:	3a30      	subs	r2, #48	; 0x30
 8009cb4:	2a09      	cmp	r2, #9
 8009cb6:	d903      	bls.n	8009cc0 <_svfiprintf_r+0x1a8>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d0c5      	beq.n	8009c48 <_svfiprintf_r+0x130>
 8009cbc:	9105      	str	r1, [sp, #20]
 8009cbe:	e7c3      	b.n	8009c48 <_svfiprintf_r+0x130>
 8009cc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e7f0      	b.n	8009cac <_svfiprintf_r+0x194>
 8009cca:	ab03      	add	r3, sp, #12
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	462a      	mov	r2, r5
 8009cd0:	4b0f      	ldr	r3, [pc, #60]	; (8009d10 <_svfiprintf_r+0x1f8>)
 8009cd2:	a904      	add	r1, sp, #16
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	f7fc f9a1 	bl	800601c <_printf_float>
 8009cda:	1c42      	adds	r2, r0, #1
 8009cdc:	4606      	mov	r6, r0
 8009cde:	d1d6      	bne.n	8009c8e <_svfiprintf_r+0x176>
 8009ce0:	89ab      	ldrh	r3, [r5, #12]
 8009ce2:	065b      	lsls	r3, r3, #25
 8009ce4:	f53f af2c 	bmi.w	8009b40 <_svfiprintf_r+0x28>
 8009ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cea:	b01d      	add	sp, #116	; 0x74
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf0:	ab03      	add	r3, sp, #12
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	462a      	mov	r2, r5
 8009cf6:	4b06      	ldr	r3, [pc, #24]	; (8009d10 <_svfiprintf_r+0x1f8>)
 8009cf8:	a904      	add	r1, sp, #16
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	f7fc fc32 	bl	8006564 <_printf_i>
 8009d00:	e7eb      	b.n	8009cda <_svfiprintf_r+0x1c2>
 8009d02:	bf00      	nop
 8009d04:	0800ccec 	.word	0x0800ccec
 8009d08:	0800ccf6 	.word	0x0800ccf6
 8009d0c:	0800601d 	.word	0x0800601d
 8009d10:	08009a61 	.word	0x08009a61
 8009d14:	0800ccf2 	.word	0x0800ccf2

08009d18 <_sungetc_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	1c4b      	adds	r3, r1, #1
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	d103      	bne.n	8009d28 <_sungetc_r+0x10>
 8009d20:	f04f 35ff 	mov.w	r5, #4294967295
 8009d24:	4628      	mov	r0, r5
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	8993      	ldrh	r3, [r2, #12]
 8009d2a:	f023 0320 	bic.w	r3, r3, #32
 8009d2e:	8193      	strh	r3, [r2, #12]
 8009d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d32:	6852      	ldr	r2, [r2, #4]
 8009d34:	b2cd      	uxtb	r5, r1
 8009d36:	b18b      	cbz	r3, 8009d5c <_sungetc_r+0x44>
 8009d38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	dd08      	ble.n	8009d50 <_sungetc_r+0x38>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	1e5a      	subs	r2, r3, #1
 8009d42:	6022      	str	r2, [r4, #0]
 8009d44:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009d48:	6863      	ldr	r3, [r4, #4]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	6063      	str	r3, [r4, #4]
 8009d4e:	e7e9      	b.n	8009d24 <_sungetc_r+0xc>
 8009d50:	4621      	mov	r1, r4
 8009d52:	f000 fbf1 	bl	800a538 <__submore>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d0f1      	beq.n	8009d3e <_sungetc_r+0x26>
 8009d5a:	e7e1      	b.n	8009d20 <_sungetc_r+0x8>
 8009d5c:	6921      	ldr	r1, [r4, #16]
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	b151      	cbz	r1, 8009d78 <_sungetc_r+0x60>
 8009d62:	4299      	cmp	r1, r3
 8009d64:	d208      	bcs.n	8009d78 <_sungetc_r+0x60>
 8009d66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009d6a:	42a9      	cmp	r1, r5
 8009d6c:	d104      	bne.n	8009d78 <_sungetc_r+0x60>
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	3201      	adds	r2, #1
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	6062      	str	r2, [r4, #4]
 8009d76:	e7d5      	b.n	8009d24 <_sungetc_r+0xc>
 8009d78:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d80:	6363      	str	r3, [r4, #52]	; 0x34
 8009d82:	2303      	movs	r3, #3
 8009d84:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d86:	4623      	mov	r3, r4
 8009d88:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e7dc      	b.n	8009d4c <_sungetc_r+0x34>

08009d92 <__ssrefill_r>:
 8009d92:	b510      	push	{r4, lr}
 8009d94:	460c      	mov	r4, r1
 8009d96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009d98:	b169      	cbz	r1, 8009db6 <__ssrefill_r+0x24>
 8009d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d9e:	4299      	cmp	r1, r3
 8009da0:	d001      	beq.n	8009da6 <__ssrefill_r+0x14>
 8009da2:	f7ff fd7d 	bl	80098a0 <_free_r>
 8009da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009da8:	6063      	str	r3, [r4, #4]
 8009daa:	2000      	movs	r0, #0
 8009dac:	6360      	str	r0, [r4, #52]	; 0x34
 8009dae:	b113      	cbz	r3, 8009db6 <__ssrefill_r+0x24>
 8009db0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009db2:	6023      	str	r3, [r4, #0]
 8009db4:	bd10      	pop	{r4, pc}
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	6063      	str	r3, [r4, #4]
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	f043 0320 	orr.w	r3, r3, #32
 8009dc4:	81a3      	strh	r3, [r4, #12]
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dca:	e7f3      	b.n	8009db4 <__ssrefill_r+0x22>

08009dcc <__ssvfiscanf_r>:
 8009dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009ddc:	49a6      	ldr	r1, [pc, #664]	; (800a078 <__ssvfiscanf_r+0x2ac>)
 8009dde:	91a0      	str	r1, [sp, #640]	; 0x280
 8009de0:	f10d 0804 	add.w	r8, sp, #4
 8009de4:	49a5      	ldr	r1, [pc, #660]	; (800a07c <__ssvfiscanf_r+0x2b0>)
 8009de6:	4fa6      	ldr	r7, [pc, #664]	; (800a080 <__ssvfiscanf_r+0x2b4>)
 8009de8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a084 <__ssvfiscanf_r+0x2b8>
 8009dec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009df0:	4606      	mov	r6, r0
 8009df2:	91a1      	str	r1, [sp, #644]	; 0x284
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	7813      	ldrb	r3, [r2, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 815a 	beq.w	800a0b2 <__ssvfiscanf_r+0x2e6>
 8009dfe:	5dd9      	ldrb	r1, [r3, r7]
 8009e00:	f011 0108 	ands.w	r1, r1, #8
 8009e04:	f102 0501 	add.w	r5, r2, #1
 8009e08:	d019      	beq.n	8009e3e <__ssvfiscanf_r+0x72>
 8009e0a:	6863      	ldr	r3, [r4, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dd0f      	ble.n	8009e30 <__ssvfiscanf_r+0x64>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	781a      	ldrb	r2, [r3, #0]
 8009e14:	5cba      	ldrb	r2, [r7, r2]
 8009e16:	0712      	lsls	r2, r2, #28
 8009e18:	d401      	bmi.n	8009e1e <__ssvfiscanf_r+0x52>
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	e7eb      	b.n	8009df6 <__ssvfiscanf_r+0x2a>
 8009e1e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e20:	3201      	adds	r2, #1
 8009e22:	9245      	str	r2, [sp, #276]	; 0x114
 8009e24:	6862      	ldr	r2, [r4, #4]
 8009e26:	3301      	adds	r3, #1
 8009e28:	3a01      	subs	r2, #1
 8009e2a:	6062      	str	r2, [r4, #4]
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	e7ec      	b.n	8009e0a <__ssvfiscanf_r+0x3e>
 8009e30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e32:	4621      	mov	r1, r4
 8009e34:	4630      	mov	r0, r6
 8009e36:	4798      	blx	r3
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d0e9      	beq.n	8009e10 <__ssvfiscanf_r+0x44>
 8009e3c:	e7ed      	b.n	8009e1a <__ssvfiscanf_r+0x4e>
 8009e3e:	2b25      	cmp	r3, #37	; 0x25
 8009e40:	d012      	beq.n	8009e68 <__ssvfiscanf_r+0x9c>
 8009e42:	469a      	mov	sl, r3
 8009e44:	6863      	ldr	r3, [r4, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f340 8091 	ble.w	8009f6e <__ssvfiscanf_r+0x1a2>
 8009e4c:	6822      	ldr	r2, [r4, #0]
 8009e4e:	7813      	ldrb	r3, [r2, #0]
 8009e50:	4553      	cmp	r3, sl
 8009e52:	f040 812e 	bne.w	800a0b2 <__ssvfiscanf_r+0x2e6>
 8009e56:	6863      	ldr	r3, [r4, #4]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	6063      	str	r3, [r4, #4]
 8009e5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009e5e:	3201      	adds	r2, #1
 8009e60:	3301      	adds	r3, #1
 8009e62:	6022      	str	r2, [r4, #0]
 8009e64:	9345      	str	r3, [sp, #276]	; 0x114
 8009e66:	e7d8      	b.n	8009e1a <__ssvfiscanf_r+0x4e>
 8009e68:	9141      	str	r1, [sp, #260]	; 0x104
 8009e6a:	9143      	str	r1, [sp, #268]	; 0x10c
 8009e6c:	7853      	ldrb	r3, [r2, #1]
 8009e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e70:	bf02      	ittt	eq
 8009e72:	2310      	moveq	r3, #16
 8009e74:	1c95      	addeq	r5, r2, #2
 8009e76:	9341      	streq	r3, [sp, #260]	; 0x104
 8009e78:	220a      	movs	r2, #10
 8009e7a:	46aa      	mov	sl, r5
 8009e7c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009e80:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009e84:	2b09      	cmp	r3, #9
 8009e86:	d91d      	bls.n	8009ec4 <__ssvfiscanf_r+0xf8>
 8009e88:	487e      	ldr	r0, [pc, #504]	; (800a084 <__ssvfiscanf_r+0x2b8>)
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	f7f6 f9c0 	bl	8000210 <memchr>
 8009e90:	b140      	cbz	r0, 8009ea4 <__ssvfiscanf_r+0xd8>
 8009e92:	2301      	movs	r3, #1
 8009e94:	eba0 0009 	sub.w	r0, r0, r9
 8009e98:	fa03 f000 	lsl.w	r0, r3, r0
 8009e9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e9e:	4318      	orrs	r0, r3
 8009ea0:	9041      	str	r0, [sp, #260]	; 0x104
 8009ea2:	4655      	mov	r5, sl
 8009ea4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ea8:	2b78      	cmp	r3, #120	; 0x78
 8009eaa:	d806      	bhi.n	8009eba <__ssvfiscanf_r+0xee>
 8009eac:	2b57      	cmp	r3, #87	; 0x57
 8009eae:	d810      	bhi.n	8009ed2 <__ssvfiscanf_r+0x106>
 8009eb0:	2b25      	cmp	r3, #37	; 0x25
 8009eb2:	d0c6      	beq.n	8009e42 <__ssvfiscanf_r+0x76>
 8009eb4:	d856      	bhi.n	8009f64 <__ssvfiscanf_r+0x198>
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d064      	beq.n	8009f84 <__ssvfiscanf_r+0x1b8>
 8009eba:	2303      	movs	r3, #3
 8009ebc:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ebe:	230a      	movs	r3, #10
 8009ec0:	9342      	str	r3, [sp, #264]	; 0x108
 8009ec2:	e071      	b.n	8009fa8 <__ssvfiscanf_r+0x1dc>
 8009ec4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009ec6:	fb02 1103 	mla	r1, r2, r3, r1
 8009eca:	3930      	subs	r1, #48	; 0x30
 8009ecc:	9143      	str	r1, [sp, #268]	; 0x10c
 8009ece:	4655      	mov	r5, sl
 8009ed0:	e7d3      	b.n	8009e7a <__ssvfiscanf_r+0xae>
 8009ed2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009ed6:	2a20      	cmp	r2, #32
 8009ed8:	d8ef      	bhi.n	8009eba <__ssvfiscanf_r+0xee>
 8009eda:	a101      	add	r1, pc, #4	; (adr r1, 8009ee0 <__ssvfiscanf_r+0x114>)
 8009edc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009ee0:	08009f93 	.word	0x08009f93
 8009ee4:	08009ebb 	.word	0x08009ebb
 8009ee8:	08009ebb 	.word	0x08009ebb
 8009eec:	08009ff1 	.word	0x08009ff1
 8009ef0:	08009ebb 	.word	0x08009ebb
 8009ef4:	08009ebb 	.word	0x08009ebb
 8009ef8:	08009ebb 	.word	0x08009ebb
 8009efc:	08009ebb 	.word	0x08009ebb
 8009f00:	08009ebb 	.word	0x08009ebb
 8009f04:	08009ebb 	.word	0x08009ebb
 8009f08:	08009ebb 	.word	0x08009ebb
 8009f0c:	0800a007 	.word	0x0800a007
 8009f10:	08009fdd 	.word	0x08009fdd
 8009f14:	08009f6b 	.word	0x08009f6b
 8009f18:	08009f6b 	.word	0x08009f6b
 8009f1c:	08009f6b 	.word	0x08009f6b
 8009f20:	08009ebb 	.word	0x08009ebb
 8009f24:	08009fe1 	.word	0x08009fe1
 8009f28:	08009ebb 	.word	0x08009ebb
 8009f2c:	08009ebb 	.word	0x08009ebb
 8009f30:	08009ebb 	.word	0x08009ebb
 8009f34:	08009ebb 	.word	0x08009ebb
 8009f38:	0800a017 	.word	0x0800a017
 8009f3c:	08009fe9 	.word	0x08009fe9
 8009f40:	08009f8b 	.word	0x08009f8b
 8009f44:	08009ebb 	.word	0x08009ebb
 8009f48:	08009ebb 	.word	0x08009ebb
 8009f4c:	0800a013 	.word	0x0800a013
 8009f50:	08009ebb 	.word	0x08009ebb
 8009f54:	08009fdd 	.word	0x08009fdd
 8009f58:	08009ebb 	.word	0x08009ebb
 8009f5c:	08009ebb 	.word	0x08009ebb
 8009f60:	08009f93 	.word	0x08009f93
 8009f64:	3b45      	subs	r3, #69	; 0x45
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d8a7      	bhi.n	8009eba <__ssvfiscanf_r+0xee>
 8009f6a:	2305      	movs	r3, #5
 8009f6c:	e01b      	b.n	8009fa6 <__ssvfiscanf_r+0x1da>
 8009f6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f70:	4621      	mov	r1, r4
 8009f72:	4630      	mov	r0, r6
 8009f74:	4798      	blx	r3
 8009f76:	2800      	cmp	r0, #0
 8009f78:	f43f af68 	beq.w	8009e4c <__ssvfiscanf_r+0x80>
 8009f7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f040 808d 	bne.w	800a09e <__ssvfiscanf_r+0x2d2>
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
 8009f88:	e08f      	b.n	800a0aa <__ssvfiscanf_r+0x2de>
 8009f8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009f8c:	f042 0220 	orr.w	r2, r2, #32
 8009f90:	9241      	str	r2, [sp, #260]	; 0x104
 8009f92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009f94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f98:	9241      	str	r2, [sp, #260]	; 0x104
 8009f9a:	2210      	movs	r2, #16
 8009f9c:	2b6f      	cmp	r3, #111	; 0x6f
 8009f9e:	9242      	str	r2, [sp, #264]	; 0x108
 8009fa0:	bf34      	ite	cc
 8009fa2:	2303      	movcc	r3, #3
 8009fa4:	2304      	movcs	r3, #4
 8009fa6:	9347      	str	r3, [sp, #284]	; 0x11c
 8009fa8:	6863      	ldr	r3, [r4, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	dd42      	ble.n	800a034 <__ssvfiscanf_r+0x268>
 8009fae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009fb0:	0659      	lsls	r1, r3, #25
 8009fb2:	d404      	bmi.n	8009fbe <__ssvfiscanf_r+0x1f2>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	781a      	ldrb	r2, [r3, #0]
 8009fb8:	5cba      	ldrb	r2, [r7, r2]
 8009fba:	0712      	lsls	r2, r2, #28
 8009fbc:	d441      	bmi.n	800a042 <__ssvfiscanf_r+0x276>
 8009fbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	dc50      	bgt.n	800a066 <__ssvfiscanf_r+0x29a>
 8009fc4:	466b      	mov	r3, sp
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	a941      	add	r1, sp, #260	; 0x104
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f000 f876 	bl	800a0bc <_scanf_chars>
 8009fd0:	2801      	cmp	r0, #1
 8009fd2:	d06e      	beq.n	800a0b2 <__ssvfiscanf_r+0x2e6>
 8009fd4:	2802      	cmp	r0, #2
 8009fd6:	f47f af20 	bne.w	8009e1a <__ssvfiscanf_r+0x4e>
 8009fda:	e7cf      	b.n	8009f7c <__ssvfiscanf_r+0x1b0>
 8009fdc:	220a      	movs	r2, #10
 8009fde:	e7dd      	b.n	8009f9c <__ssvfiscanf_r+0x1d0>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9342      	str	r3, [sp, #264]	; 0x108
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e7de      	b.n	8009fa6 <__ssvfiscanf_r+0x1da>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	9342      	str	r3, [sp, #264]	; 0x108
 8009fec:	2304      	movs	r3, #4
 8009fee:	e7da      	b.n	8009fa6 <__ssvfiscanf_r+0x1da>
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	f000 f9e0 	bl	800a3b8 <__sccl>
 8009ff8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ffe:	9341      	str	r3, [sp, #260]	; 0x104
 800a000:	4605      	mov	r5, r0
 800a002:	2301      	movs	r3, #1
 800a004:	e7cf      	b.n	8009fa6 <__ssvfiscanf_r+0x1da>
 800a006:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a00c:	9341      	str	r3, [sp, #260]	; 0x104
 800a00e:	2300      	movs	r3, #0
 800a010:	e7c9      	b.n	8009fa6 <__ssvfiscanf_r+0x1da>
 800a012:	2302      	movs	r3, #2
 800a014:	e7c7      	b.n	8009fa6 <__ssvfiscanf_r+0x1da>
 800a016:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a018:	06c3      	lsls	r3, r0, #27
 800a01a:	f53f aefe 	bmi.w	8009e1a <__ssvfiscanf_r+0x4e>
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a022:	1d19      	adds	r1, r3, #4
 800a024:	9100      	str	r1, [sp, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f010 0f01 	tst.w	r0, #1
 800a02c:	bf14      	ite	ne
 800a02e:	801a      	strhne	r2, [r3, #0]
 800a030:	601a      	streq	r2, [r3, #0]
 800a032:	e6f2      	b.n	8009e1a <__ssvfiscanf_r+0x4e>
 800a034:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a036:	4621      	mov	r1, r4
 800a038:	4630      	mov	r0, r6
 800a03a:	4798      	blx	r3
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d0b6      	beq.n	8009fae <__ssvfiscanf_r+0x1e2>
 800a040:	e79c      	b.n	8009f7c <__ssvfiscanf_r+0x1b0>
 800a042:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a044:	3201      	adds	r2, #1
 800a046:	9245      	str	r2, [sp, #276]	; 0x114
 800a048:	6862      	ldr	r2, [r4, #4]
 800a04a:	3a01      	subs	r2, #1
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	6062      	str	r2, [r4, #4]
 800a050:	dd02      	ble.n	800a058 <__ssvfiscanf_r+0x28c>
 800a052:	3301      	adds	r3, #1
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	e7ad      	b.n	8009fb4 <__ssvfiscanf_r+0x1e8>
 800a058:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a05a:	4621      	mov	r1, r4
 800a05c:	4630      	mov	r0, r6
 800a05e:	4798      	blx	r3
 800a060:	2800      	cmp	r0, #0
 800a062:	d0a7      	beq.n	8009fb4 <__ssvfiscanf_r+0x1e8>
 800a064:	e78a      	b.n	8009f7c <__ssvfiscanf_r+0x1b0>
 800a066:	2b04      	cmp	r3, #4
 800a068:	dc0e      	bgt.n	800a088 <__ssvfiscanf_r+0x2bc>
 800a06a:	466b      	mov	r3, sp
 800a06c:	4622      	mov	r2, r4
 800a06e:	a941      	add	r1, sp, #260	; 0x104
 800a070:	4630      	mov	r0, r6
 800a072:	f000 f87d 	bl	800a170 <_scanf_i>
 800a076:	e7ab      	b.n	8009fd0 <__ssvfiscanf_r+0x204>
 800a078:	08009d19 	.word	0x08009d19
 800a07c:	08009d93 	.word	0x08009d93
 800a080:	0800c989 	.word	0x0800c989
 800a084:	0800ccf2 	.word	0x0800ccf2
 800a088:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <__ssvfiscanf_r+0x2ec>)
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f43f aec5 	beq.w	8009e1a <__ssvfiscanf_r+0x4e>
 800a090:	466b      	mov	r3, sp
 800a092:	4622      	mov	r2, r4
 800a094:	a941      	add	r1, sp, #260	; 0x104
 800a096:	4630      	mov	r0, r6
 800a098:	f7fc fb8a 	bl	80067b0 <_scanf_float>
 800a09c:	e798      	b.n	8009fd0 <__ssvfiscanf_r+0x204>
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a0a4:	bf18      	it	ne
 800a0a6:	f04f 30ff 	movne.w	r0, #4294967295
 800a0aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a0b4:	e7f9      	b.n	800a0aa <__ssvfiscanf_r+0x2de>
 800a0b6:	bf00      	nop
 800a0b8:	080067b1 	.word	0x080067b1

0800a0bc <_scanf_chars>:
 800a0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c0:	4615      	mov	r5, r2
 800a0c2:	688a      	ldr	r2, [r1, #8]
 800a0c4:	4680      	mov	r8, r0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	b932      	cbnz	r2, 800a0d8 <_scanf_chars+0x1c>
 800a0ca:	698a      	ldr	r2, [r1, #24]
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	bf0c      	ite	eq
 800a0d0:	2201      	moveq	r2, #1
 800a0d2:	f04f 32ff 	movne.w	r2, #4294967295
 800a0d6:	608a      	str	r2, [r1, #8]
 800a0d8:	6822      	ldr	r2, [r4, #0]
 800a0da:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a16c <_scanf_chars+0xb0>
 800a0de:	06d1      	lsls	r1, r2, #27
 800a0e0:	bf5f      	itttt	pl
 800a0e2:	681a      	ldrpl	r2, [r3, #0]
 800a0e4:	1d11      	addpl	r1, r2, #4
 800a0e6:	6019      	strpl	r1, [r3, #0]
 800a0e8:	6816      	ldrpl	r6, [r2, #0]
 800a0ea:	2700      	movs	r7, #0
 800a0ec:	69a0      	ldr	r0, [r4, #24]
 800a0ee:	b188      	cbz	r0, 800a114 <_scanf_chars+0x58>
 800a0f0:	2801      	cmp	r0, #1
 800a0f2:	d107      	bne.n	800a104 <_scanf_chars+0x48>
 800a0f4:	682a      	ldr	r2, [r5, #0]
 800a0f6:	7811      	ldrb	r1, [r2, #0]
 800a0f8:	6962      	ldr	r2, [r4, #20]
 800a0fa:	5c52      	ldrb	r2, [r2, r1]
 800a0fc:	b952      	cbnz	r2, 800a114 <_scanf_chars+0x58>
 800a0fe:	2f00      	cmp	r7, #0
 800a100:	d031      	beq.n	800a166 <_scanf_chars+0xaa>
 800a102:	e022      	b.n	800a14a <_scanf_chars+0x8e>
 800a104:	2802      	cmp	r0, #2
 800a106:	d120      	bne.n	800a14a <_scanf_chars+0x8e>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a110:	071b      	lsls	r3, r3, #28
 800a112:	d41a      	bmi.n	800a14a <_scanf_chars+0x8e>
 800a114:	6823      	ldr	r3, [r4, #0]
 800a116:	06da      	lsls	r2, r3, #27
 800a118:	bf5e      	ittt	pl
 800a11a:	682b      	ldrpl	r3, [r5, #0]
 800a11c:	781b      	ldrbpl	r3, [r3, #0]
 800a11e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a122:	682a      	ldr	r2, [r5, #0]
 800a124:	686b      	ldr	r3, [r5, #4]
 800a126:	3201      	adds	r2, #1
 800a128:	602a      	str	r2, [r5, #0]
 800a12a:	68a2      	ldr	r2, [r4, #8]
 800a12c:	3b01      	subs	r3, #1
 800a12e:	3a01      	subs	r2, #1
 800a130:	606b      	str	r3, [r5, #4]
 800a132:	3701      	adds	r7, #1
 800a134:	60a2      	str	r2, [r4, #8]
 800a136:	b142      	cbz	r2, 800a14a <_scanf_chars+0x8e>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	dcd7      	bgt.n	800a0ec <_scanf_chars+0x30>
 800a13c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a140:	4629      	mov	r1, r5
 800a142:	4640      	mov	r0, r8
 800a144:	4798      	blx	r3
 800a146:	2800      	cmp	r0, #0
 800a148:	d0d0      	beq.n	800a0ec <_scanf_chars+0x30>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	f013 0310 	ands.w	r3, r3, #16
 800a150:	d105      	bne.n	800a15e <_scanf_chars+0xa2>
 800a152:	68e2      	ldr	r2, [r4, #12]
 800a154:	3201      	adds	r2, #1
 800a156:	60e2      	str	r2, [r4, #12]
 800a158:	69a2      	ldr	r2, [r4, #24]
 800a15a:	b102      	cbz	r2, 800a15e <_scanf_chars+0xa2>
 800a15c:	7033      	strb	r3, [r6, #0]
 800a15e:	6923      	ldr	r3, [r4, #16]
 800a160:	443b      	add	r3, r7
 800a162:	6123      	str	r3, [r4, #16]
 800a164:	2000      	movs	r0, #0
 800a166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16a:	bf00      	nop
 800a16c:	0800c989 	.word	0x0800c989

0800a170 <_scanf_i>:
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a174:	4698      	mov	r8, r3
 800a176:	4b76      	ldr	r3, [pc, #472]	; (800a350 <_scanf_i+0x1e0>)
 800a178:	460c      	mov	r4, r1
 800a17a:	4682      	mov	sl, r0
 800a17c:	4616      	mov	r6, r2
 800a17e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a182:	b087      	sub	sp, #28
 800a184:	ab03      	add	r3, sp, #12
 800a186:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a18a:	4b72      	ldr	r3, [pc, #456]	; (800a354 <_scanf_i+0x1e4>)
 800a18c:	69a1      	ldr	r1, [r4, #24]
 800a18e:	4a72      	ldr	r2, [pc, #456]	; (800a358 <_scanf_i+0x1e8>)
 800a190:	2903      	cmp	r1, #3
 800a192:	bf18      	it	ne
 800a194:	461a      	movne	r2, r3
 800a196:	68a3      	ldr	r3, [r4, #8]
 800a198:	9201      	str	r2, [sp, #4]
 800a19a:	1e5a      	subs	r2, r3, #1
 800a19c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a1a0:	bf88      	it	hi
 800a1a2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a1a6:	4627      	mov	r7, r4
 800a1a8:	bf82      	ittt	hi
 800a1aa:	eb03 0905 	addhi.w	r9, r3, r5
 800a1ae:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a1b2:	60a3      	strhi	r3, [r4, #8]
 800a1b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a1b8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a1bc:	bf98      	it	ls
 800a1be:	f04f 0900 	movls.w	r9, #0
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	463d      	mov	r5, r7
 800a1c6:	f04f 0b00 	mov.w	fp, #0
 800a1ca:	6831      	ldr	r1, [r6, #0]
 800a1cc:	ab03      	add	r3, sp, #12
 800a1ce:	7809      	ldrb	r1, [r1, #0]
 800a1d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	f7f6 f81b 	bl	8000210 <memchr>
 800a1da:	b328      	cbz	r0, 800a228 <_scanf_i+0xb8>
 800a1dc:	f1bb 0f01 	cmp.w	fp, #1
 800a1e0:	d159      	bne.n	800a296 <_scanf_i+0x126>
 800a1e2:	6862      	ldr	r2, [r4, #4]
 800a1e4:	b92a      	cbnz	r2, 800a1f2 <_scanf_i+0x82>
 800a1e6:	6822      	ldr	r2, [r4, #0]
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ee:	6063      	str	r3, [r4, #4]
 800a1f0:	6022      	str	r2, [r4, #0]
 800a1f2:	6822      	ldr	r2, [r4, #0]
 800a1f4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a1f8:	6022      	str	r2, [r4, #0]
 800a1fa:	68a2      	ldr	r2, [r4, #8]
 800a1fc:	1e51      	subs	r1, r2, #1
 800a1fe:	60a1      	str	r1, [r4, #8]
 800a200:	b192      	cbz	r2, 800a228 <_scanf_i+0xb8>
 800a202:	6832      	ldr	r2, [r6, #0]
 800a204:	1c51      	adds	r1, r2, #1
 800a206:	6031      	str	r1, [r6, #0]
 800a208:	7812      	ldrb	r2, [r2, #0]
 800a20a:	f805 2b01 	strb.w	r2, [r5], #1
 800a20e:	6872      	ldr	r2, [r6, #4]
 800a210:	3a01      	subs	r2, #1
 800a212:	2a00      	cmp	r2, #0
 800a214:	6072      	str	r2, [r6, #4]
 800a216:	dc07      	bgt.n	800a228 <_scanf_i+0xb8>
 800a218:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a21c:	4631      	mov	r1, r6
 800a21e:	4650      	mov	r0, sl
 800a220:	4790      	blx	r2
 800a222:	2800      	cmp	r0, #0
 800a224:	f040 8085 	bne.w	800a332 <_scanf_i+0x1c2>
 800a228:	f10b 0b01 	add.w	fp, fp, #1
 800a22c:	f1bb 0f03 	cmp.w	fp, #3
 800a230:	d1cb      	bne.n	800a1ca <_scanf_i+0x5a>
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	b90b      	cbnz	r3, 800a23a <_scanf_i+0xca>
 800a236:	230a      	movs	r3, #10
 800a238:	6063      	str	r3, [r4, #4]
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	4947      	ldr	r1, [pc, #284]	; (800a35c <_scanf_i+0x1ec>)
 800a23e:	6960      	ldr	r0, [r4, #20]
 800a240:	1ac9      	subs	r1, r1, r3
 800a242:	f000 f8b9 	bl	800a3b8 <__sccl>
 800a246:	f04f 0b00 	mov.w	fp, #0
 800a24a:	68a3      	ldr	r3, [r4, #8]
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d03d      	beq.n	800a2ce <_scanf_i+0x15e>
 800a252:	6831      	ldr	r1, [r6, #0]
 800a254:	6960      	ldr	r0, [r4, #20]
 800a256:	f891 c000 	ldrb.w	ip, [r1]
 800a25a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a25e:	2800      	cmp	r0, #0
 800a260:	d035      	beq.n	800a2ce <_scanf_i+0x15e>
 800a262:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a266:	d124      	bne.n	800a2b2 <_scanf_i+0x142>
 800a268:	0510      	lsls	r0, r2, #20
 800a26a:	d522      	bpl.n	800a2b2 <_scanf_i+0x142>
 800a26c:	f10b 0b01 	add.w	fp, fp, #1
 800a270:	f1b9 0f00 	cmp.w	r9, #0
 800a274:	d003      	beq.n	800a27e <_scanf_i+0x10e>
 800a276:	3301      	adds	r3, #1
 800a278:	f109 39ff 	add.w	r9, r9, #4294967295
 800a27c:	60a3      	str	r3, [r4, #8]
 800a27e:	6873      	ldr	r3, [r6, #4]
 800a280:	3b01      	subs	r3, #1
 800a282:	2b00      	cmp	r3, #0
 800a284:	6073      	str	r3, [r6, #4]
 800a286:	dd1b      	ble.n	800a2c0 <_scanf_i+0x150>
 800a288:	6833      	ldr	r3, [r6, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	6033      	str	r3, [r6, #0]
 800a28e:	68a3      	ldr	r3, [r4, #8]
 800a290:	3b01      	subs	r3, #1
 800a292:	60a3      	str	r3, [r4, #8]
 800a294:	e7d9      	b.n	800a24a <_scanf_i+0xda>
 800a296:	f1bb 0f02 	cmp.w	fp, #2
 800a29a:	d1ae      	bne.n	800a1fa <_scanf_i+0x8a>
 800a29c:	6822      	ldr	r2, [r4, #0]
 800a29e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a2a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a2a6:	d1bf      	bne.n	800a228 <_scanf_i+0xb8>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	6063      	str	r3, [r4, #4]
 800a2ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2b0:	e7a2      	b.n	800a1f8 <_scanf_i+0x88>
 800a2b2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a2b6:	6022      	str	r2, [r4, #0]
 800a2b8:	780b      	ldrb	r3, [r1, #0]
 800a2ba:	f805 3b01 	strb.w	r3, [r5], #1
 800a2be:	e7de      	b.n	800a27e <_scanf_i+0x10e>
 800a2c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4798      	blx	r3
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d0df      	beq.n	800a28e <_scanf_i+0x11e>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	05db      	lsls	r3, r3, #23
 800a2d2:	d50d      	bpl.n	800a2f0 <_scanf_i+0x180>
 800a2d4:	42bd      	cmp	r5, r7
 800a2d6:	d909      	bls.n	800a2ec <_scanf_i+0x17c>
 800a2d8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a2dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2e0:	4632      	mov	r2, r6
 800a2e2:	4650      	mov	r0, sl
 800a2e4:	4798      	blx	r3
 800a2e6:	f105 39ff 	add.w	r9, r5, #4294967295
 800a2ea:	464d      	mov	r5, r9
 800a2ec:	42bd      	cmp	r5, r7
 800a2ee:	d02d      	beq.n	800a34c <_scanf_i+0x1dc>
 800a2f0:	6822      	ldr	r2, [r4, #0]
 800a2f2:	f012 0210 	ands.w	r2, r2, #16
 800a2f6:	d113      	bne.n	800a320 <_scanf_i+0x1b0>
 800a2f8:	702a      	strb	r2, [r5, #0]
 800a2fa:	6863      	ldr	r3, [r4, #4]
 800a2fc:	9e01      	ldr	r6, [sp, #4]
 800a2fe:	4639      	mov	r1, r7
 800a300:	4650      	mov	r0, sl
 800a302:	47b0      	blx	r6
 800a304:	6821      	ldr	r1, [r4, #0]
 800a306:	f8d8 3000 	ldr.w	r3, [r8]
 800a30a:	f011 0f20 	tst.w	r1, #32
 800a30e:	d013      	beq.n	800a338 <_scanf_i+0x1c8>
 800a310:	1d1a      	adds	r2, r3, #4
 800a312:	f8c8 2000 	str.w	r2, [r8]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	6018      	str	r0, [r3, #0]
 800a31a:	68e3      	ldr	r3, [r4, #12]
 800a31c:	3301      	adds	r3, #1
 800a31e:	60e3      	str	r3, [r4, #12]
 800a320:	1bed      	subs	r5, r5, r7
 800a322:	44ab      	add	fp, r5
 800a324:	6925      	ldr	r5, [r4, #16]
 800a326:	445d      	add	r5, fp
 800a328:	6125      	str	r5, [r4, #16]
 800a32a:	2000      	movs	r0, #0
 800a32c:	b007      	add	sp, #28
 800a32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a332:	f04f 0b00 	mov.w	fp, #0
 800a336:	e7ca      	b.n	800a2ce <_scanf_i+0x15e>
 800a338:	1d1a      	adds	r2, r3, #4
 800a33a:	f8c8 2000 	str.w	r2, [r8]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f011 0f01 	tst.w	r1, #1
 800a344:	bf14      	ite	ne
 800a346:	8018      	strhne	r0, [r3, #0]
 800a348:	6018      	streq	r0, [r3, #0]
 800a34a:	e7e6      	b.n	800a31a <_scanf_i+0x1aa>
 800a34c:	2001      	movs	r0, #1
 800a34e:	e7ed      	b.n	800a32c <_scanf_i+0x1bc>
 800a350:	0800c8f0 	.word	0x0800c8f0
 800a354:	0800a535 	.word	0x0800a535
 800a358:	08007a55 	.word	0x08007a55
 800a35c:	0800cd16 	.word	0x0800cd16

0800a360 <_read_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	; (800a380 <_read_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7f8 fdad 	bl	8002ece <_read>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_read_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_read_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20000d68 	.word	0x20000d68
 800a384:	00000000 	.word	0x00000000

0800a388 <nan>:
 800a388:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a390 <nan+0x8>
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	00000000 	.word	0x00000000
 800a394:	7ff80000 	.word	0x7ff80000

0800a398 <_sbrk_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d06      	ldr	r5, [pc, #24]	; (800a3b4 <_sbrk_r+0x1c>)
 800a39c:	2300      	movs	r3, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	602b      	str	r3, [r5, #0]
 800a3a4:	f7f8 fe00 	bl	8002fa8 <_sbrk>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_sbrk_r+0x1a>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_sbrk_r+0x1a>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	20000d68 	.word	0x20000d68

0800a3b8 <__sccl>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	780b      	ldrb	r3, [r1, #0]
 800a3bc:	4604      	mov	r4, r0
 800a3be:	2b5e      	cmp	r3, #94	; 0x5e
 800a3c0:	bf0b      	itete	eq
 800a3c2:	784b      	ldrbeq	r3, [r1, #1]
 800a3c4:	1c48      	addne	r0, r1, #1
 800a3c6:	1c88      	addeq	r0, r1, #2
 800a3c8:	2200      	movne	r2, #0
 800a3ca:	bf08      	it	eq
 800a3cc:	2201      	moveq	r2, #1
 800a3ce:	1e61      	subs	r1, r4, #1
 800a3d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a3d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a3d8:	42a9      	cmp	r1, r5
 800a3da:	d1fb      	bne.n	800a3d4 <__sccl+0x1c>
 800a3dc:	b90b      	cbnz	r3, 800a3e2 <__sccl+0x2a>
 800a3de:	3801      	subs	r0, #1
 800a3e0:	bd70      	pop	{r4, r5, r6, pc}
 800a3e2:	f082 0201 	eor.w	r2, r2, #1
 800a3e6:	54e2      	strb	r2, [r4, r3]
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a3f0:	292d      	cmp	r1, #45	; 0x2d
 800a3f2:	d006      	beq.n	800a402 <__sccl+0x4a>
 800a3f4:	295d      	cmp	r1, #93	; 0x5d
 800a3f6:	d0f3      	beq.n	800a3e0 <__sccl+0x28>
 800a3f8:	b909      	cbnz	r1, 800a3fe <__sccl+0x46>
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	e7f0      	b.n	800a3e0 <__sccl+0x28>
 800a3fe:	460b      	mov	r3, r1
 800a400:	e7f1      	b.n	800a3e6 <__sccl+0x2e>
 800a402:	786e      	ldrb	r6, [r5, #1]
 800a404:	2e5d      	cmp	r6, #93	; 0x5d
 800a406:	d0fa      	beq.n	800a3fe <__sccl+0x46>
 800a408:	42b3      	cmp	r3, r6
 800a40a:	dcf8      	bgt.n	800a3fe <__sccl+0x46>
 800a40c:	3502      	adds	r5, #2
 800a40e:	4619      	mov	r1, r3
 800a410:	3101      	adds	r1, #1
 800a412:	428e      	cmp	r6, r1
 800a414:	5462      	strb	r2, [r4, r1]
 800a416:	dcfb      	bgt.n	800a410 <__sccl+0x58>
 800a418:	1af1      	subs	r1, r6, r3
 800a41a:	3901      	subs	r1, #1
 800a41c:	1c58      	adds	r0, r3, #1
 800a41e:	42b3      	cmp	r3, r6
 800a420:	bfa8      	it	ge
 800a422:	2100      	movge	r1, #0
 800a424:	1843      	adds	r3, r0, r1
 800a426:	e7e0      	b.n	800a3ea <__sccl+0x32>

0800a428 <strncmp>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	b17a      	cbz	r2, 800a44c <strncmp+0x24>
 800a42c:	4603      	mov	r3, r0
 800a42e:	3901      	subs	r1, #1
 800a430:	1884      	adds	r4, r0, r2
 800a432:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a436:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a43a:	4290      	cmp	r0, r2
 800a43c:	d101      	bne.n	800a442 <strncmp+0x1a>
 800a43e:	42a3      	cmp	r3, r4
 800a440:	d101      	bne.n	800a446 <strncmp+0x1e>
 800a442:	1a80      	subs	r0, r0, r2
 800a444:	bd10      	pop	{r4, pc}
 800a446:	2800      	cmp	r0, #0
 800a448:	d1f3      	bne.n	800a432 <strncmp+0xa>
 800a44a:	e7fa      	b.n	800a442 <strncmp+0x1a>
 800a44c:	4610      	mov	r0, r2
 800a44e:	e7f9      	b.n	800a444 <strncmp+0x1c>

0800a450 <_strtoul_l.constprop.0>:
 800a450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a454:	4f36      	ldr	r7, [pc, #216]	; (800a530 <_strtoul_l.constprop.0+0xe0>)
 800a456:	4686      	mov	lr, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	4628      	mov	r0, r5
 800a45c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a460:	5de6      	ldrb	r6, [r4, r7]
 800a462:	f016 0608 	ands.w	r6, r6, #8
 800a466:	d1f8      	bne.n	800a45a <_strtoul_l.constprop.0+0xa>
 800a468:	2c2d      	cmp	r4, #45	; 0x2d
 800a46a:	d12f      	bne.n	800a4cc <_strtoul_l.constprop.0+0x7c>
 800a46c:	782c      	ldrb	r4, [r5, #0]
 800a46e:	2601      	movs	r6, #1
 800a470:	1c85      	adds	r5, r0, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d057      	beq.n	800a526 <_strtoul_l.constprop.0+0xd6>
 800a476:	2b10      	cmp	r3, #16
 800a478:	d109      	bne.n	800a48e <_strtoul_l.constprop.0+0x3e>
 800a47a:	2c30      	cmp	r4, #48	; 0x30
 800a47c:	d107      	bne.n	800a48e <_strtoul_l.constprop.0+0x3e>
 800a47e:	7828      	ldrb	r0, [r5, #0]
 800a480:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a484:	2858      	cmp	r0, #88	; 0x58
 800a486:	d149      	bne.n	800a51c <_strtoul_l.constprop.0+0xcc>
 800a488:	786c      	ldrb	r4, [r5, #1]
 800a48a:	2310      	movs	r3, #16
 800a48c:	3502      	adds	r5, #2
 800a48e:	f04f 38ff 	mov.w	r8, #4294967295
 800a492:	2700      	movs	r7, #0
 800a494:	fbb8 f8f3 	udiv	r8, r8, r3
 800a498:	fb03 f908 	mul.w	r9, r3, r8
 800a49c:	ea6f 0909 	mvn.w	r9, r9
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a4a6:	f1bc 0f09 	cmp.w	ip, #9
 800a4aa:	d814      	bhi.n	800a4d6 <_strtoul_l.constprop.0+0x86>
 800a4ac:	4664      	mov	r4, ip
 800a4ae:	42a3      	cmp	r3, r4
 800a4b0:	dd22      	ble.n	800a4f8 <_strtoul_l.constprop.0+0xa8>
 800a4b2:	2f00      	cmp	r7, #0
 800a4b4:	db1d      	blt.n	800a4f2 <_strtoul_l.constprop.0+0xa2>
 800a4b6:	4580      	cmp	r8, r0
 800a4b8:	d31b      	bcc.n	800a4f2 <_strtoul_l.constprop.0+0xa2>
 800a4ba:	d101      	bne.n	800a4c0 <_strtoul_l.constprop.0+0x70>
 800a4bc:	45a1      	cmp	r9, r4
 800a4be:	db18      	blt.n	800a4f2 <_strtoul_l.constprop.0+0xa2>
 800a4c0:	fb00 4003 	mla	r0, r0, r3, r4
 800a4c4:	2701      	movs	r7, #1
 800a4c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4ca:	e7ea      	b.n	800a4a2 <_strtoul_l.constprop.0+0x52>
 800a4cc:	2c2b      	cmp	r4, #43	; 0x2b
 800a4ce:	bf04      	itt	eq
 800a4d0:	782c      	ldrbeq	r4, [r5, #0]
 800a4d2:	1c85      	addeq	r5, r0, #2
 800a4d4:	e7cd      	b.n	800a472 <_strtoul_l.constprop.0+0x22>
 800a4d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a4da:	f1bc 0f19 	cmp.w	ip, #25
 800a4de:	d801      	bhi.n	800a4e4 <_strtoul_l.constprop.0+0x94>
 800a4e0:	3c37      	subs	r4, #55	; 0x37
 800a4e2:	e7e4      	b.n	800a4ae <_strtoul_l.constprop.0+0x5e>
 800a4e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a4e8:	f1bc 0f19 	cmp.w	ip, #25
 800a4ec:	d804      	bhi.n	800a4f8 <_strtoul_l.constprop.0+0xa8>
 800a4ee:	3c57      	subs	r4, #87	; 0x57
 800a4f0:	e7dd      	b.n	800a4ae <_strtoul_l.constprop.0+0x5e>
 800a4f2:	f04f 37ff 	mov.w	r7, #4294967295
 800a4f6:	e7e6      	b.n	800a4c6 <_strtoul_l.constprop.0+0x76>
 800a4f8:	2f00      	cmp	r7, #0
 800a4fa:	da07      	bge.n	800a50c <_strtoul_l.constprop.0+0xbc>
 800a4fc:	2322      	movs	r3, #34	; 0x22
 800a4fe:	f8ce 3000 	str.w	r3, [lr]
 800a502:	f04f 30ff 	mov.w	r0, #4294967295
 800a506:	b932      	cbnz	r2, 800a516 <_strtoul_l.constprop.0+0xc6>
 800a508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a50c:	b106      	cbz	r6, 800a510 <_strtoul_l.constprop.0+0xc0>
 800a50e:	4240      	negs	r0, r0
 800a510:	2a00      	cmp	r2, #0
 800a512:	d0f9      	beq.n	800a508 <_strtoul_l.constprop.0+0xb8>
 800a514:	b107      	cbz	r7, 800a518 <_strtoul_l.constprop.0+0xc8>
 800a516:	1e69      	subs	r1, r5, #1
 800a518:	6011      	str	r1, [r2, #0]
 800a51a:	e7f5      	b.n	800a508 <_strtoul_l.constprop.0+0xb8>
 800a51c:	2430      	movs	r4, #48	; 0x30
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1b5      	bne.n	800a48e <_strtoul_l.constprop.0+0x3e>
 800a522:	2308      	movs	r3, #8
 800a524:	e7b3      	b.n	800a48e <_strtoul_l.constprop.0+0x3e>
 800a526:	2c30      	cmp	r4, #48	; 0x30
 800a528:	d0a9      	beq.n	800a47e <_strtoul_l.constprop.0+0x2e>
 800a52a:	230a      	movs	r3, #10
 800a52c:	e7af      	b.n	800a48e <_strtoul_l.constprop.0+0x3e>
 800a52e:	bf00      	nop
 800a530:	0800c989 	.word	0x0800c989

0800a534 <_strtoul_r>:
 800a534:	f7ff bf8c 	b.w	800a450 <_strtoul_l.constprop.0>

0800a538 <__submore>:
 800a538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a53c:	460c      	mov	r4, r1
 800a53e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a544:	4299      	cmp	r1, r3
 800a546:	d11d      	bne.n	800a584 <__submore+0x4c>
 800a548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a54c:	f7ff fa14 	bl	8009978 <_malloc_r>
 800a550:	b918      	cbnz	r0, 800a55a <__submore+0x22>
 800a552:	f04f 30ff 	mov.w	r0, #4294967295
 800a556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a55a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a55e:	63a3      	str	r3, [r4, #56]	; 0x38
 800a560:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a564:	6360      	str	r0, [r4, #52]	; 0x34
 800a566:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a56a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a56e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a572:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a576:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a57a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a57e:	6020      	str	r0, [r4, #0]
 800a580:	2000      	movs	r0, #0
 800a582:	e7e8      	b.n	800a556 <__submore+0x1e>
 800a584:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a586:	0077      	lsls	r7, r6, #1
 800a588:	463a      	mov	r2, r7
 800a58a:	f000 fa2d 	bl	800a9e8 <_realloc_r>
 800a58e:	4605      	mov	r5, r0
 800a590:	2800      	cmp	r0, #0
 800a592:	d0de      	beq.n	800a552 <__submore+0x1a>
 800a594:	eb00 0806 	add.w	r8, r0, r6
 800a598:	4601      	mov	r1, r0
 800a59a:	4632      	mov	r2, r6
 800a59c:	4640      	mov	r0, r8
 800a59e:	f7fe fc99 	bl	8008ed4 <memcpy>
 800a5a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a5a6:	f8c4 8000 	str.w	r8, [r4]
 800a5aa:	e7e9      	b.n	800a580 <__submore+0x48>

0800a5ac <__ascii_wctomb>:
 800a5ac:	b149      	cbz	r1, 800a5c2 <__ascii_wctomb+0x16>
 800a5ae:	2aff      	cmp	r2, #255	; 0xff
 800a5b0:	bf85      	ittet	hi
 800a5b2:	238a      	movhi	r3, #138	; 0x8a
 800a5b4:	6003      	strhi	r3, [r0, #0]
 800a5b6:	700a      	strbls	r2, [r1, #0]
 800a5b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5bc:	bf98      	it	ls
 800a5be:	2001      	movls	r0, #1
 800a5c0:	4770      	bx	lr
 800a5c2:	4608      	mov	r0, r1
 800a5c4:	4770      	bx	lr
	...

0800a5c8 <__assert_func>:
 800a5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5ca:	4614      	mov	r4, r2
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <__assert_func+0x2c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	68d8      	ldr	r0, [r3, #12]
 800a5d6:	b14c      	cbz	r4, 800a5ec <__assert_func+0x24>
 800a5d8:	4b07      	ldr	r3, [pc, #28]	; (800a5f8 <__assert_func+0x30>)
 800a5da:	9100      	str	r1, [sp, #0]
 800a5dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5e0:	4906      	ldr	r1, [pc, #24]	; (800a5fc <__assert_func+0x34>)
 800a5e2:	462b      	mov	r3, r5
 800a5e4:	f000 f9a6 	bl	800a934 <fiprintf>
 800a5e8:	f000 fc46 	bl	800ae78 <abort>
 800a5ec:	4b04      	ldr	r3, [pc, #16]	; (800a600 <__assert_func+0x38>)
 800a5ee:	461c      	mov	r4, r3
 800a5f0:	e7f3      	b.n	800a5da <__assert_func+0x12>
 800a5f2:	bf00      	nop
 800a5f4:	20000014 	.word	0x20000014
 800a5f8:	0800cd18 	.word	0x0800cd18
 800a5fc:	0800cd25 	.word	0x0800cd25
 800a600:	0800cd53 	.word	0x0800cd53

0800a604 <__sflush_r>:
 800a604:	898a      	ldrh	r2, [r1, #12]
 800a606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60a:	4605      	mov	r5, r0
 800a60c:	0710      	lsls	r0, r2, #28
 800a60e:	460c      	mov	r4, r1
 800a610:	d458      	bmi.n	800a6c4 <__sflush_r+0xc0>
 800a612:	684b      	ldr	r3, [r1, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	dc05      	bgt.n	800a624 <__sflush_r+0x20>
 800a618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	dc02      	bgt.n	800a624 <__sflush_r+0x20>
 800a61e:	2000      	movs	r0, #0
 800a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a626:	2e00      	cmp	r6, #0
 800a628:	d0f9      	beq.n	800a61e <__sflush_r+0x1a>
 800a62a:	2300      	movs	r3, #0
 800a62c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a630:	682f      	ldr	r7, [r5, #0]
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	d032      	beq.n	800a69c <__sflush_r+0x98>
 800a636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	075a      	lsls	r2, r3, #29
 800a63c:	d505      	bpl.n	800a64a <__sflush_r+0x46>
 800a63e:	6863      	ldr	r3, [r4, #4]
 800a640:	1ac0      	subs	r0, r0, r3
 800a642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a644:	b10b      	cbz	r3, 800a64a <__sflush_r+0x46>
 800a646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a648:	1ac0      	subs	r0, r0, r3
 800a64a:	2300      	movs	r3, #0
 800a64c:	4602      	mov	r2, r0
 800a64e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a650:	6a21      	ldr	r1, [r4, #32]
 800a652:	4628      	mov	r0, r5
 800a654:	47b0      	blx	r6
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	d106      	bne.n	800a66a <__sflush_r+0x66>
 800a65c:	6829      	ldr	r1, [r5, #0]
 800a65e:	291d      	cmp	r1, #29
 800a660:	d82c      	bhi.n	800a6bc <__sflush_r+0xb8>
 800a662:	4a2a      	ldr	r2, [pc, #168]	; (800a70c <__sflush_r+0x108>)
 800a664:	40ca      	lsrs	r2, r1
 800a666:	07d6      	lsls	r6, r2, #31
 800a668:	d528      	bpl.n	800a6bc <__sflush_r+0xb8>
 800a66a:	2200      	movs	r2, #0
 800a66c:	6062      	str	r2, [r4, #4]
 800a66e:	04d9      	lsls	r1, r3, #19
 800a670:	6922      	ldr	r2, [r4, #16]
 800a672:	6022      	str	r2, [r4, #0]
 800a674:	d504      	bpl.n	800a680 <__sflush_r+0x7c>
 800a676:	1c42      	adds	r2, r0, #1
 800a678:	d101      	bne.n	800a67e <__sflush_r+0x7a>
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	b903      	cbnz	r3, 800a680 <__sflush_r+0x7c>
 800a67e:	6560      	str	r0, [r4, #84]	; 0x54
 800a680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a682:	602f      	str	r7, [r5, #0]
 800a684:	2900      	cmp	r1, #0
 800a686:	d0ca      	beq.n	800a61e <__sflush_r+0x1a>
 800a688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a68c:	4299      	cmp	r1, r3
 800a68e:	d002      	beq.n	800a696 <__sflush_r+0x92>
 800a690:	4628      	mov	r0, r5
 800a692:	f7ff f905 	bl	80098a0 <_free_r>
 800a696:	2000      	movs	r0, #0
 800a698:	6360      	str	r0, [r4, #52]	; 0x34
 800a69a:	e7c1      	b.n	800a620 <__sflush_r+0x1c>
 800a69c:	6a21      	ldr	r1, [r4, #32]
 800a69e:	2301      	movs	r3, #1
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	47b0      	blx	r6
 800a6a4:	1c41      	adds	r1, r0, #1
 800a6a6:	d1c7      	bne.n	800a638 <__sflush_r+0x34>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0c4      	beq.n	800a638 <__sflush_r+0x34>
 800a6ae:	2b1d      	cmp	r3, #29
 800a6b0:	d001      	beq.n	800a6b6 <__sflush_r+0xb2>
 800a6b2:	2b16      	cmp	r3, #22
 800a6b4:	d101      	bne.n	800a6ba <__sflush_r+0xb6>
 800a6b6:	602f      	str	r7, [r5, #0]
 800a6b8:	e7b1      	b.n	800a61e <__sflush_r+0x1a>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	e7ad      	b.n	800a620 <__sflush_r+0x1c>
 800a6c4:	690f      	ldr	r7, [r1, #16]
 800a6c6:	2f00      	cmp	r7, #0
 800a6c8:	d0a9      	beq.n	800a61e <__sflush_r+0x1a>
 800a6ca:	0793      	lsls	r3, r2, #30
 800a6cc:	680e      	ldr	r6, [r1, #0]
 800a6ce:	bf08      	it	eq
 800a6d0:	694b      	ldreq	r3, [r1, #20]
 800a6d2:	600f      	str	r7, [r1, #0]
 800a6d4:	bf18      	it	ne
 800a6d6:	2300      	movne	r3, #0
 800a6d8:	eba6 0807 	sub.w	r8, r6, r7
 800a6dc:	608b      	str	r3, [r1, #8]
 800a6de:	f1b8 0f00 	cmp.w	r8, #0
 800a6e2:	dd9c      	ble.n	800a61e <__sflush_r+0x1a>
 800a6e4:	6a21      	ldr	r1, [r4, #32]
 800a6e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6e8:	4643      	mov	r3, r8
 800a6ea:	463a      	mov	r2, r7
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	47b0      	blx	r6
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	dc06      	bgt.n	800a702 <__sflush_r+0xfe>
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	e78e      	b.n	800a620 <__sflush_r+0x1c>
 800a702:	4407      	add	r7, r0
 800a704:	eba8 0800 	sub.w	r8, r8, r0
 800a708:	e7e9      	b.n	800a6de <__sflush_r+0xda>
 800a70a:	bf00      	nop
 800a70c:	20400001 	.word	0x20400001

0800a710 <_fflush_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	690b      	ldr	r3, [r1, #16]
 800a714:	4605      	mov	r5, r0
 800a716:	460c      	mov	r4, r1
 800a718:	b913      	cbnz	r3, 800a720 <_fflush_r+0x10>
 800a71a:	2500      	movs	r5, #0
 800a71c:	4628      	mov	r0, r5
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	b118      	cbz	r0, 800a72a <_fflush_r+0x1a>
 800a722:	6983      	ldr	r3, [r0, #24]
 800a724:	b90b      	cbnz	r3, 800a72a <_fflush_r+0x1a>
 800a726:	f000 f887 	bl	800a838 <__sinit>
 800a72a:	4b14      	ldr	r3, [pc, #80]	; (800a77c <_fflush_r+0x6c>)
 800a72c:	429c      	cmp	r4, r3
 800a72e:	d11b      	bne.n	800a768 <_fflush_r+0x58>
 800a730:	686c      	ldr	r4, [r5, #4]
 800a732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0ef      	beq.n	800a71a <_fflush_r+0xa>
 800a73a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a73c:	07d0      	lsls	r0, r2, #31
 800a73e:	d404      	bmi.n	800a74a <_fflush_r+0x3a>
 800a740:	0599      	lsls	r1, r3, #22
 800a742:	d402      	bmi.n	800a74a <_fflush_r+0x3a>
 800a744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a746:	f000 f927 	bl	800a998 <__retarget_lock_acquire_recursive>
 800a74a:	4628      	mov	r0, r5
 800a74c:	4621      	mov	r1, r4
 800a74e:	f7ff ff59 	bl	800a604 <__sflush_r>
 800a752:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a754:	07da      	lsls	r2, r3, #31
 800a756:	4605      	mov	r5, r0
 800a758:	d4e0      	bmi.n	800a71c <_fflush_r+0xc>
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	059b      	lsls	r3, r3, #22
 800a75e:	d4dd      	bmi.n	800a71c <_fflush_r+0xc>
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f000 f91a 	bl	800a99a <__retarget_lock_release_recursive>
 800a766:	e7d9      	b.n	800a71c <_fflush_r+0xc>
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <_fflush_r+0x70>)
 800a76a:	429c      	cmp	r4, r3
 800a76c:	d101      	bne.n	800a772 <_fflush_r+0x62>
 800a76e:	68ac      	ldr	r4, [r5, #8]
 800a770:	e7df      	b.n	800a732 <_fflush_r+0x22>
 800a772:	4b04      	ldr	r3, [pc, #16]	; (800a784 <_fflush_r+0x74>)
 800a774:	429c      	cmp	r4, r3
 800a776:	bf08      	it	eq
 800a778:	68ec      	ldreq	r4, [r5, #12]
 800a77a:	e7da      	b.n	800a732 <_fflush_r+0x22>
 800a77c:	0800cd74 	.word	0x0800cd74
 800a780:	0800cd94 	.word	0x0800cd94
 800a784:	0800cd54 	.word	0x0800cd54

0800a788 <std>:
 800a788:	2300      	movs	r3, #0
 800a78a:	b510      	push	{r4, lr}
 800a78c:	4604      	mov	r4, r0
 800a78e:	e9c0 3300 	strd	r3, r3, [r0]
 800a792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a796:	6083      	str	r3, [r0, #8]
 800a798:	8181      	strh	r1, [r0, #12]
 800a79a:	6643      	str	r3, [r0, #100]	; 0x64
 800a79c:	81c2      	strh	r2, [r0, #14]
 800a79e:	6183      	str	r3, [r0, #24]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	2208      	movs	r2, #8
 800a7a4:	305c      	adds	r0, #92	; 0x5c
 800a7a6:	f7fb fb91 	bl	8005ecc <memset>
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <std+0x38>)
 800a7ac:	6263      	str	r3, [r4, #36]	; 0x24
 800a7ae:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <std+0x3c>)
 800a7b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7b2:	4b05      	ldr	r3, [pc, #20]	; (800a7c8 <std+0x40>)
 800a7b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7b6:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <std+0x44>)
 800a7b8:	6224      	str	r4, [r4, #32]
 800a7ba:	6323      	str	r3, [r4, #48]	; 0x30
 800a7bc:	bd10      	pop	{r4, pc}
 800a7be:	bf00      	nop
 800a7c0:	08006c75 	.word	0x08006c75
 800a7c4:	08006c9b 	.word	0x08006c9b
 800a7c8:	08006cd3 	.word	0x08006cd3
 800a7cc:	08006cf7 	.word	0x08006cf7

0800a7d0 <_cleanup_r>:
 800a7d0:	4901      	ldr	r1, [pc, #4]	; (800a7d8 <_cleanup_r+0x8>)
 800a7d2:	f000 b8c1 	b.w	800a958 <_fwalk_reent>
 800a7d6:	bf00      	nop
 800a7d8:	0800a711 	.word	0x0800a711

0800a7dc <__sfmoreglue>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	2268      	movs	r2, #104	; 0x68
 800a7e0:	1e4d      	subs	r5, r1, #1
 800a7e2:	4355      	muls	r5, r2
 800a7e4:	460e      	mov	r6, r1
 800a7e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7ea:	f7ff f8c5 	bl	8009978 <_malloc_r>
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	b140      	cbz	r0, 800a804 <__sfmoreglue+0x28>
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	e9c0 1600 	strd	r1, r6, [r0]
 800a7f8:	300c      	adds	r0, #12
 800a7fa:	60a0      	str	r0, [r4, #8]
 800a7fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a800:	f7fb fb64 	bl	8005ecc <memset>
 800a804:	4620      	mov	r0, r4
 800a806:	bd70      	pop	{r4, r5, r6, pc}

0800a808 <__sfp_lock_acquire>:
 800a808:	4801      	ldr	r0, [pc, #4]	; (800a810 <__sfp_lock_acquire+0x8>)
 800a80a:	f000 b8c5 	b.w	800a998 <__retarget_lock_acquire_recursive>
 800a80e:	bf00      	nop
 800a810:	20000d6d 	.word	0x20000d6d

0800a814 <__sfp_lock_release>:
 800a814:	4801      	ldr	r0, [pc, #4]	; (800a81c <__sfp_lock_release+0x8>)
 800a816:	f000 b8c0 	b.w	800a99a <__retarget_lock_release_recursive>
 800a81a:	bf00      	nop
 800a81c:	20000d6d 	.word	0x20000d6d

0800a820 <__sinit_lock_acquire>:
 800a820:	4801      	ldr	r0, [pc, #4]	; (800a828 <__sinit_lock_acquire+0x8>)
 800a822:	f000 b8b9 	b.w	800a998 <__retarget_lock_acquire_recursive>
 800a826:	bf00      	nop
 800a828:	20000d6e 	.word	0x20000d6e

0800a82c <__sinit_lock_release>:
 800a82c:	4801      	ldr	r0, [pc, #4]	; (800a834 <__sinit_lock_release+0x8>)
 800a82e:	f000 b8b4 	b.w	800a99a <__retarget_lock_release_recursive>
 800a832:	bf00      	nop
 800a834:	20000d6e 	.word	0x20000d6e

0800a838 <__sinit>:
 800a838:	b510      	push	{r4, lr}
 800a83a:	4604      	mov	r4, r0
 800a83c:	f7ff fff0 	bl	800a820 <__sinit_lock_acquire>
 800a840:	69a3      	ldr	r3, [r4, #24]
 800a842:	b11b      	cbz	r3, 800a84c <__sinit+0x14>
 800a844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a848:	f7ff bff0 	b.w	800a82c <__sinit_lock_release>
 800a84c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a850:	6523      	str	r3, [r4, #80]	; 0x50
 800a852:	4b13      	ldr	r3, [pc, #76]	; (800a8a0 <__sinit+0x68>)
 800a854:	4a13      	ldr	r2, [pc, #76]	; (800a8a4 <__sinit+0x6c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	62a2      	str	r2, [r4, #40]	; 0x28
 800a85a:	42a3      	cmp	r3, r4
 800a85c:	bf04      	itt	eq
 800a85e:	2301      	moveq	r3, #1
 800a860:	61a3      	streq	r3, [r4, #24]
 800a862:	4620      	mov	r0, r4
 800a864:	f000 f820 	bl	800a8a8 <__sfp>
 800a868:	6060      	str	r0, [r4, #4]
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 f81c 	bl	800a8a8 <__sfp>
 800a870:	60a0      	str	r0, [r4, #8]
 800a872:	4620      	mov	r0, r4
 800a874:	f000 f818 	bl	800a8a8 <__sfp>
 800a878:	2200      	movs	r2, #0
 800a87a:	60e0      	str	r0, [r4, #12]
 800a87c:	2104      	movs	r1, #4
 800a87e:	6860      	ldr	r0, [r4, #4]
 800a880:	f7ff ff82 	bl	800a788 <std>
 800a884:	68a0      	ldr	r0, [r4, #8]
 800a886:	2201      	movs	r2, #1
 800a888:	2109      	movs	r1, #9
 800a88a:	f7ff ff7d 	bl	800a788 <std>
 800a88e:	68e0      	ldr	r0, [r4, #12]
 800a890:	2202      	movs	r2, #2
 800a892:	2112      	movs	r1, #18
 800a894:	f7ff ff78 	bl	800a788 <std>
 800a898:	2301      	movs	r3, #1
 800a89a:	61a3      	str	r3, [r4, #24]
 800a89c:	e7d2      	b.n	800a844 <__sinit+0xc>
 800a89e:	bf00      	nop
 800a8a0:	0800c8fc 	.word	0x0800c8fc
 800a8a4:	0800a7d1 	.word	0x0800a7d1

0800a8a8 <__sfp>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	4607      	mov	r7, r0
 800a8ac:	f7ff ffac 	bl	800a808 <__sfp_lock_acquire>
 800a8b0:	4b1e      	ldr	r3, [pc, #120]	; (800a92c <__sfp+0x84>)
 800a8b2:	681e      	ldr	r6, [r3, #0]
 800a8b4:	69b3      	ldr	r3, [r6, #24]
 800a8b6:	b913      	cbnz	r3, 800a8be <__sfp+0x16>
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f7ff ffbd 	bl	800a838 <__sinit>
 800a8be:	3648      	adds	r6, #72	; 0x48
 800a8c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8c4:	3b01      	subs	r3, #1
 800a8c6:	d503      	bpl.n	800a8d0 <__sfp+0x28>
 800a8c8:	6833      	ldr	r3, [r6, #0]
 800a8ca:	b30b      	cbz	r3, 800a910 <__sfp+0x68>
 800a8cc:	6836      	ldr	r6, [r6, #0]
 800a8ce:	e7f7      	b.n	800a8c0 <__sfp+0x18>
 800a8d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8d4:	b9d5      	cbnz	r5, 800a90c <__sfp+0x64>
 800a8d6:	4b16      	ldr	r3, [pc, #88]	; (800a930 <__sfp+0x88>)
 800a8d8:	60e3      	str	r3, [r4, #12]
 800a8da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8de:	6665      	str	r5, [r4, #100]	; 0x64
 800a8e0:	f000 f859 	bl	800a996 <__retarget_lock_init_recursive>
 800a8e4:	f7ff ff96 	bl	800a814 <__sfp_lock_release>
 800a8e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8f0:	6025      	str	r5, [r4, #0]
 800a8f2:	61a5      	str	r5, [r4, #24]
 800a8f4:	2208      	movs	r2, #8
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8fc:	f7fb fae6 	bl	8005ecc <memset>
 800a900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a908:	4620      	mov	r0, r4
 800a90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90c:	3468      	adds	r4, #104	; 0x68
 800a90e:	e7d9      	b.n	800a8c4 <__sfp+0x1c>
 800a910:	2104      	movs	r1, #4
 800a912:	4638      	mov	r0, r7
 800a914:	f7ff ff62 	bl	800a7dc <__sfmoreglue>
 800a918:	4604      	mov	r4, r0
 800a91a:	6030      	str	r0, [r6, #0]
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d1d5      	bne.n	800a8cc <__sfp+0x24>
 800a920:	f7ff ff78 	bl	800a814 <__sfp_lock_release>
 800a924:	230c      	movs	r3, #12
 800a926:	603b      	str	r3, [r7, #0]
 800a928:	e7ee      	b.n	800a908 <__sfp+0x60>
 800a92a:	bf00      	nop
 800a92c:	0800c8fc 	.word	0x0800c8fc
 800a930:	ffff0001 	.word	0xffff0001

0800a934 <fiprintf>:
 800a934:	b40e      	push	{r1, r2, r3}
 800a936:	b503      	push	{r0, r1, lr}
 800a938:	4601      	mov	r1, r0
 800a93a:	ab03      	add	r3, sp, #12
 800a93c:	4805      	ldr	r0, [pc, #20]	; (800a954 <fiprintf+0x20>)
 800a93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a942:	6800      	ldr	r0, [r0, #0]
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	f000 f8a7 	bl	800aa98 <_vfiprintf_r>
 800a94a:	b002      	add	sp, #8
 800a94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a950:	b003      	add	sp, #12
 800a952:	4770      	bx	lr
 800a954:	20000014 	.word	0x20000014

0800a958 <_fwalk_reent>:
 800a958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a95c:	4606      	mov	r6, r0
 800a95e:	4688      	mov	r8, r1
 800a960:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a964:	2700      	movs	r7, #0
 800a966:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a96a:	f1b9 0901 	subs.w	r9, r9, #1
 800a96e:	d505      	bpl.n	800a97c <_fwalk_reent+0x24>
 800a970:	6824      	ldr	r4, [r4, #0]
 800a972:	2c00      	cmp	r4, #0
 800a974:	d1f7      	bne.n	800a966 <_fwalk_reent+0xe>
 800a976:	4638      	mov	r0, r7
 800a978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a97c:	89ab      	ldrh	r3, [r5, #12]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d907      	bls.n	800a992 <_fwalk_reent+0x3a>
 800a982:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a986:	3301      	adds	r3, #1
 800a988:	d003      	beq.n	800a992 <_fwalk_reent+0x3a>
 800a98a:	4629      	mov	r1, r5
 800a98c:	4630      	mov	r0, r6
 800a98e:	47c0      	blx	r8
 800a990:	4307      	orrs	r7, r0
 800a992:	3568      	adds	r5, #104	; 0x68
 800a994:	e7e9      	b.n	800a96a <_fwalk_reent+0x12>

0800a996 <__retarget_lock_init_recursive>:
 800a996:	4770      	bx	lr

0800a998 <__retarget_lock_acquire_recursive>:
 800a998:	4770      	bx	lr

0800a99a <__retarget_lock_release_recursive>:
 800a99a:	4770      	bx	lr

0800a99c <memmove>:
 800a99c:	4288      	cmp	r0, r1
 800a99e:	b510      	push	{r4, lr}
 800a9a0:	eb01 0402 	add.w	r4, r1, r2
 800a9a4:	d902      	bls.n	800a9ac <memmove+0x10>
 800a9a6:	4284      	cmp	r4, r0
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	d807      	bhi.n	800a9bc <memmove+0x20>
 800a9ac:	1e43      	subs	r3, r0, #1
 800a9ae:	42a1      	cmp	r1, r4
 800a9b0:	d008      	beq.n	800a9c4 <memmove+0x28>
 800a9b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9ba:	e7f8      	b.n	800a9ae <memmove+0x12>
 800a9bc:	4402      	add	r2, r0
 800a9be:	4601      	mov	r1, r0
 800a9c0:	428a      	cmp	r2, r1
 800a9c2:	d100      	bne.n	800a9c6 <memmove+0x2a>
 800a9c4:	bd10      	pop	{r4, pc}
 800a9c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ce:	e7f7      	b.n	800a9c0 <memmove+0x24>

0800a9d0 <__malloc_lock>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	; (800a9d8 <__malloc_lock+0x8>)
 800a9d2:	f7ff bfe1 	b.w	800a998 <__retarget_lock_acquire_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	20000d6c 	.word	0x20000d6c

0800a9dc <__malloc_unlock>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__malloc_unlock+0x8>)
 800a9de:	f7ff bfdc 	b.w	800a99a <__retarget_lock_release_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	20000d6c 	.word	0x20000d6c

0800a9e8 <_realloc_r>:
 800a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	4614      	mov	r4, r2
 800a9f0:	460e      	mov	r6, r1
 800a9f2:	b921      	cbnz	r1, 800a9fe <_realloc_r+0x16>
 800a9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	f7fe bfbd 	b.w	8009978 <_malloc_r>
 800a9fe:	b92a      	cbnz	r2, 800aa0c <_realloc_r+0x24>
 800aa00:	f7fe ff4e 	bl	80098a0 <_free_r>
 800aa04:	4625      	mov	r5, r4
 800aa06:	4628      	mov	r0, r5
 800aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0c:	f000 faa0 	bl	800af50 <_malloc_usable_size_r>
 800aa10:	4284      	cmp	r4, r0
 800aa12:	4607      	mov	r7, r0
 800aa14:	d802      	bhi.n	800aa1c <_realloc_r+0x34>
 800aa16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa1a:	d812      	bhi.n	800aa42 <_realloc_r+0x5a>
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	4640      	mov	r0, r8
 800aa20:	f7fe ffaa 	bl	8009978 <_malloc_r>
 800aa24:	4605      	mov	r5, r0
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d0ed      	beq.n	800aa06 <_realloc_r+0x1e>
 800aa2a:	42bc      	cmp	r4, r7
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	4631      	mov	r1, r6
 800aa30:	bf28      	it	cs
 800aa32:	463a      	movcs	r2, r7
 800aa34:	f7fe fa4e 	bl	8008ed4 <memcpy>
 800aa38:	4631      	mov	r1, r6
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7fe ff30 	bl	80098a0 <_free_r>
 800aa40:	e7e1      	b.n	800aa06 <_realloc_r+0x1e>
 800aa42:	4635      	mov	r5, r6
 800aa44:	e7df      	b.n	800aa06 <_realloc_r+0x1e>

0800aa46 <__sfputc_r>:
 800aa46:	6893      	ldr	r3, [r2, #8]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	b410      	push	{r4}
 800aa4e:	6093      	str	r3, [r2, #8]
 800aa50:	da08      	bge.n	800aa64 <__sfputc_r+0x1e>
 800aa52:	6994      	ldr	r4, [r2, #24]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	db01      	blt.n	800aa5c <__sfputc_r+0x16>
 800aa58:	290a      	cmp	r1, #10
 800aa5a:	d103      	bne.n	800aa64 <__sfputc_r+0x1e>
 800aa5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa60:	f000 b94a 	b.w	800acf8 <__swbuf_r>
 800aa64:	6813      	ldr	r3, [r2, #0]
 800aa66:	1c58      	adds	r0, r3, #1
 800aa68:	6010      	str	r0, [r2, #0]
 800aa6a:	7019      	strb	r1, [r3, #0]
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <__sfputs_r>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	4614      	mov	r4, r2
 800aa7c:	18d5      	adds	r5, r2, r3
 800aa7e:	42ac      	cmp	r4, r5
 800aa80:	d101      	bne.n	800aa86 <__sfputs_r+0x12>
 800aa82:	2000      	movs	r0, #0
 800aa84:	e007      	b.n	800aa96 <__sfputs_r+0x22>
 800aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8a:	463a      	mov	r2, r7
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	f7ff ffda 	bl	800aa46 <__sfputc_r>
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	d1f3      	bne.n	800aa7e <__sfputs_r+0xa>
 800aa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa98 <_vfiprintf_r>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	460d      	mov	r5, r1
 800aa9e:	b09d      	sub	sp, #116	; 0x74
 800aaa0:	4614      	mov	r4, r2
 800aaa2:	4698      	mov	r8, r3
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	b118      	cbz	r0, 800aab0 <_vfiprintf_r+0x18>
 800aaa8:	6983      	ldr	r3, [r0, #24]
 800aaaa:	b90b      	cbnz	r3, 800aab0 <_vfiprintf_r+0x18>
 800aaac:	f7ff fec4 	bl	800a838 <__sinit>
 800aab0:	4b89      	ldr	r3, [pc, #548]	; (800acd8 <_vfiprintf_r+0x240>)
 800aab2:	429d      	cmp	r5, r3
 800aab4:	d11b      	bne.n	800aaee <_vfiprintf_r+0x56>
 800aab6:	6875      	ldr	r5, [r6, #4]
 800aab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaba:	07d9      	lsls	r1, r3, #31
 800aabc:	d405      	bmi.n	800aaca <_vfiprintf_r+0x32>
 800aabe:	89ab      	ldrh	r3, [r5, #12]
 800aac0:	059a      	lsls	r2, r3, #22
 800aac2:	d402      	bmi.n	800aaca <_vfiprintf_r+0x32>
 800aac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac6:	f7ff ff67 	bl	800a998 <__retarget_lock_acquire_recursive>
 800aaca:	89ab      	ldrh	r3, [r5, #12]
 800aacc:	071b      	lsls	r3, r3, #28
 800aace:	d501      	bpl.n	800aad4 <_vfiprintf_r+0x3c>
 800aad0:	692b      	ldr	r3, [r5, #16]
 800aad2:	b9eb      	cbnz	r3, 800ab10 <_vfiprintf_r+0x78>
 800aad4:	4629      	mov	r1, r5
 800aad6:	4630      	mov	r0, r6
 800aad8:	f000 f960 	bl	800ad9c <__swsetup_r>
 800aadc:	b1c0      	cbz	r0, 800ab10 <_vfiprintf_r+0x78>
 800aade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aae0:	07dc      	lsls	r4, r3, #31
 800aae2:	d50e      	bpl.n	800ab02 <_vfiprintf_r+0x6a>
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
 800aae8:	b01d      	add	sp, #116	; 0x74
 800aaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaee:	4b7b      	ldr	r3, [pc, #492]	; (800acdc <_vfiprintf_r+0x244>)
 800aaf0:	429d      	cmp	r5, r3
 800aaf2:	d101      	bne.n	800aaf8 <_vfiprintf_r+0x60>
 800aaf4:	68b5      	ldr	r5, [r6, #8]
 800aaf6:	e7df      	b.n	800aab8 <_vfiprintf_r+0x20>
 800aaf8:	4b79      	ldr	r3, [pc, #484]	; (800ace0 <_vfiprintf_r+0x248>)
 800aafa:	429d      	cmp	r5, r3
 800aafc:	bf08      	it	eq
 800aafe:	68f5      	ldreq	r5, [r6, #12]
 800ab00:	e7da      	b.n	800aab8 <_vfiprintf_r+0x20>
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	0598      	lsls	r0, r3, #22
 800ab06:	d4ed      	bmi.n	800aae4 <_vfiprintf_r+0x4c>
 800ab08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab0a:	f7ff ff46 	bl	800a99a <__retarget_lock_release_recursive>
 800ab0e:	e7e9      	b.n	800aae4 <_vfiprintf_r+0x4c>
 800ab10:	2300      	movs	r3, #0
 800ab12:	9309      	str	r3, [sp, #36]	; 0x24
 800ab14:	2320      	movs	r3, #32
 800ab16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab1e:	2330      	movs	r3, #48	; 0x30
 800ab20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ace4 <_vfiprintf_r+0x24c>
 800ab24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab28:	f04f 0901 	mov.w	r9, #1
 800ab2c:	4623      	mov	r3, r4
 800ab2e:	469a      	mov	sl, r3
 800ab30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab34:	b10a      	cbz	r2, 800ab3a <_vfiprintf_r+0xa2>
 800ab36:	2a25      	cmp	r2, #37	; 0x25
 800ab38:	d1f9      	bne.n	800ab2e <_vfiprintf_r+0x96>
 800ab3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab3e:	d00b      	beq.n	800ab58 <_vfiprintf_r+0xc0>
 800ab40:	465b      	mov	r3, fp
 800ab42:	4622      	mov	r2, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	4630      	mov	r0, r6
 800ab48:	f7ff ff94 	bl	800aa74 <__sfputs_r>
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f000 80aa 	beq.w	800aca6 <_vfiprintf_r+0x20e>
 800ab52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab54:	445a      	add	r2, fp
 800ab56:	9209      	str	r2, [sp, #36]	; 0x24
 800ab58:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 80a2 	beq.w	800aca6 <_vfiprintf_r+0x20e>
 800ab62:	2300      	movs	r3, #0
 800ab64:	f04f 32ff 	mov.w	r2, #4294967295
 800ab68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab6c:	f10a 0a01 	add.w	sl, sl, #1
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab78:	931a      	str	r3, [sp, #104]	; 0x68
 800ab7a:	4654      	mov	r4, sl
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab82:	4858      	ldr	r0, [pc, #352]	; (800ace4 <_vfiprintf_r+0x24c>)
 800ab84:	f7f5 fb44 	bl	8000210 <memchr>
 800ab88:	9a04      	ldr	r2, [sp, #16]
 800ab8a:	b9d8      	cbnz	r0, 800abc4 <_vfiprintf_r+0x12c>
 800ab8c:	06d1      	lsls	r1, r2, #27
 800ab8e:	bf44      	itt	mi
 800ab90:	2320      	movmi	r3, #32
 800ab92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab96:	0713      	lsls	r3, r2, #28
 800ab98:	bf44      	itt	mi
 800ab9a:	232b      	movmi	r3, #43	; 0x2b
 800ab9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aba0:	f89a 3000 	ldrb.w	r3, [sl]
 800aba4:	2b2a      	cmp	r3, #42	; 0x2a
 800aba6:	d015      	beq.n	800abd4 <_vfiprintf_r+0x13c>
 800aba8:	9a07      	ldr	r2, [sp, #28]
 800abaa:	4654      	mov	r4, sl
 800abac:	2000      	movs	r0, #0
 800abae:	f04f 0c0a 	mov.w	ip, #10
 800abb2:	4621      	mov	r1, r4
 800abb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abb8:	3b30      	subs	r3, #48	; 0x30
 800abba:	2b09      	cmp	r3, #9
 800abbc:	d94e      	bls.n	800ac5c <_vfiprintf_r+0x1c4>
 800abbe:	b1b0      	cbz	r0, 800abee <_vfiprintf_r+0x156>
 800abc0:	9207      	str	r2, [sp, #28]
 800abc2:	e014      	b.n	800abee <_vfiprintf_r+0x156>
 800abc4:	eba0 0308 	sub.w	r3, r0, r8
 800abc8:	fa09 f303 	lsl.w	r3, r9, r3
 800abcc:	4313      	orrs	r3, r2
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	46a2      	mov	sl, r4
 800abd2:	e7d2      	b.n	800ab7a <_vfiprintf_r+0xe2>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1d19      	adds	r1, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	9103      	str	r1, [sp, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bfbb      	ittet	lt
 800abe0:	425b      	neglt	r3, r3
 800abe2:	f042 0202 	orrlt.w	r2, r2, #2
 800abe6:	9307      	strge	r3, [sp, #28]
 800abe8:	9307      	strlt	r3, [sp, #28]
 800abea:	bfb8      	it	lt
 800abec:	9204      	strlt	r2, [sp, #16]
 800abee:	7823      	ldrb	r3, [r4, #0]
 800abf0:	2b2e      	cmp	r3, #46	; 0x2e
 800abf2:	d10c      	bne.n	800ac0e <_vfiprintf_r+0x176>
 800abf4:	7863      	ldrb	r3, [r4, #1]
 800abf6:	2b2a      	cmp	r3, #42	; 0x2a
 800abf8:	d135      	bne.n	800ac66 <_vfiprintf_r+0x1ce>
 800abfa:	9b03      	ldr	r3, [sp, #12]
 800abfc:	1d1a      	adds	r2, r3, #4
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	9203      	str	r2, [sp, #12]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	bfb8      	it	lt
 800ac06:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac0a:	3402      	adds	r4, #2
 800ac0c:	9305      	str	r3, [sp, #20]
 800ac0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800acf4 <_vfiprintf_r+0x25c>
 800ac12:	7821      	ldrb	r1, [r4, #0]
 800ac14:	2203      	movs	r2, #3
 800ac16:	4650      	mov	r0, sl
 800ac18:	f7f5 fafa 	bl	8000210 <memchr>
 800ac1c:	b140      	cbz	r0, 800ac30 <_vfiprintf_r+0x198>
 800ac1e:	2340      	movs	r3, #64	; 0x40
 800ac20:	eba0 000a 	sub.w	r0, r0, sl
 800ac24:	fa03 f000 	lsl.w	r0, r3, r0
 800ac28:	9b04      	ldr	r3, [sp, #16]
 800ac2a:	4303      	orrs	r3, r0
 800ac2c:	3401      	adds	r4, #1
 800ac2e:	9304      	str	r3, [sp, #16]
 800ac30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac34:	482c      	ldr	r0, [pc, #176]	; (800ace8 <_vfiprintf_r+0x250>)
 800ac36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac3a:	2206      	movs	r2, #6
 800ac3c:	f7f5 fae8 	bl	8000210 <memchr>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d03f      	beq.n	800acc4 <_vfiprintf_r+0x22c>
 800ac44:	4b29      	ldr	r3, [pc, #164]	; (800acec <_vfiprintf_r+0x254>)
 800ac46:	bb1b      	cbnz	r3, 800ac90 <_vfiprintf_r+0x1f8>
 800ac48:	9b03      	ldr	r3, [sp, #12]
 800ac4a:	3307      	adds	r3, #7
 800ac4c:	f023 0307 	bic.w	r3, r3, #7
 800ac50:	3308      	adds	r3, #8
 800ac52:	9303      	str	r3, [sp, #12]
 800ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac56:	443b      	add	r3, r7
 800ac58:	9309      	str	r3, [sp, #36]	; 0x24
 800ac5a:	e767      	b.n	800ab2c <_vfiprintf_r+0x94>
 800ac5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac60:	460c      	mov	r4, r1
 800ac62:	2001      	movs	r0, #1
 800ac64:	e7a5      	b.n	800abb2 <_vfiprintf_r+0x11a>
 800ac66:	2300      	movs	r3, #0
 800ac68:	3401      	adds	r4, #1
 800ac6a:	9305      	str	r3, [sp, #20]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	f04f 0c0a 	mov.w	ip, #10
 800ac72:	4620      	mov	r0, r4
 800ac74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac78:	3a30      	subs	r2, #48	; 0x30
 800ac7a:	2a09      	cmp	r2, #9
 800ac7c:	d903      	bls.n	800ac86 <_vfiprintf_r+0x1ee>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0c5      	beq.n	800ac0e <_vfiprintf_r+0x176>
 800ac82:	9105      	str	r1, [sp, #20]
 800ac84:	e7c3      	b.n	800ac0e <_vfiprintf_r+0x176>
 800ac86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e7f0      	b.n	800ac72 <_vfiprintf_r+0x1da>
 800ac90:	ab03      	add	r3, sp, #12
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	462a      	mov	r2, r5
 800ac96:	4b16      	ldr	r3, [pc, #88]	; (800acf0 <_vfiprintf_r+0x258>)
 800ac98:	a904      	add	r1, sp, #16
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f7fb f9be 	bl	800601c <_printf_float>
 800aca0:	4607      	mov	r7, r0
 800aca2:	1c78      	adds	r0, r7, #1
 800aca4:	d1d6      	bne.n	800ac54 <_vfiprintf_r+0x1bc>
 800aca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca8:	07d9      	lsls	r1, r3, #31
 800acaa:	d405      	bmi.n	800acb8 <_vfiprintf_r+0x220>
 800acac:	89ab      	ldrh	r3, [r5, #12]
 800acae:	059a      	lsls	r2, r3, #22
 800acb0:	d402      	bmi.n	800acb8 <_vfiprintf_r+0x220>
 800acb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acb4:	f7ff fe71 	bl	800a99a <__retarget_lock_release_recursive>
 800acb8:	89ab      	ldrh	r3, [r5, #12]
 800acba:	065b      	lsls	r3, r3, #25
 800acbc:	f53f af12 	bmi.w	800aae4 <_vfiprintf_r+0x4c>
 800acc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acc2:	e711      	b.n	800aae8 <_vfiprintf_r+0x50>
 800acc4:	ab03      	add	r3, sp, #12
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	462a      	mov	r2, r5
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <_vfiprintf_r+0x258>)
 800accc:	a904      	add	r1, sp, #16
 800acce:	4630      	mov	r0, r6
 800acd0:	f7fb fc48 	bl	8006564 <_printf_i>
 800acd4:	e7e4      	b.n	800aca0 <_vfiprintf_r+0x208>
 800acd6:	bf00      	nop
 800acd8:	0800cd74 	.word	0x0800cd74
 800acdc:	0800cd94 	.word	0x0800cd94
 800ace0:	0800cd54 	.word	0x0800cd54
 800ace4:	0800ccec 	.word	0x0800ccec
 800ace8:	0800ccf6 	.word	0x0800ccf6
 800acec:	0800601d 	.word	0x0800601d
 800acf0:	0800aa75 	.word	0x0800aa75
 800acf4:	0800ccf2 	.word	0x0800ccf2

0800acf8 <__swbuf_r>:
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfa:	460e      	mov	r6, r1
 800acfc:	4614      	mov	r4, r2
 800acfe:	4605      	mov	r5, r0
 800ad00:	b118      	cbz	r0, 800ad0a <__swbuf_r+0x12>
 800ad02:	6983      	ldr	r3, [r0, #24]
 800ad04:	b90b      	cbnz	r3, 800ad0a <__swbuf_r+0x12>
 800ad06:	f7ff fd97 	bl	800a838 <__sinit>
 800ad0a:	4b21      	ldr	r3, [pc, #132]	; (800ad90 <__swbuf_r+0x98>)
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	d12b      	bne.n	800ad68 <__swbuf_r+0x70>
 800ad10:	686c      	ldr	r4, [r5, #4]
 800ad12:	69a3      	ldr	r3, [r4, #24]
 800ad14:	60a3      	str	r3, [r4, #8]
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	071a      	lsls	r2, r3, #28
 800ad1a:	d52f      	bpl.n	800ad7c <__swbuf_r+0x84>
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	b36b      	cbz	r3, 800ad7c <__swbuf_r+0x84>
 800ad20:	6923      	ldr	r3, [r4, #16]
 800ad22:	6820      	ldr	r0, [r4, #0]
 800ad24:	1ac0      	subs	r0, r0, r3
 800ad26:	6963      	ldr	r3, [r4, #20]
 800ad28:	b2f6      	uxtb	r6, r6
 800ad2a:	4283      	cmp	r3, r0
 800ad2c:	4637      	mov	r7, r6
 800ad2e:	dc04      	bgt.n	800ad3a <__swbuf_r+0x42>
 800ad30:	4621      	mov	r1, r4
 800ad32:	4628      	mov	r0, r5
 800ad34:	f7ff fcec 	bl	800a710 <_fflush_r>
 800ad38:	bb30      	cbnz	r0, 800ad88 <__swbuf_r+0x90>
 800ad3a:	68a3      	ldr	r3, [r4, #8]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	60a3      	str	r3, [r4, #8]
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	1c5a      	adds	r2, r3, #1
 800ad44:	6022      	str	r2, [r4, #0]
 800ad46:	701e      	strb	r6, [r3, #0]
 800ad48:	6963      	ldr	r3, [r4, #20]
 800ad4a:	3001      	adds	r0, #1
 800ad4c:	4283      	cmp	r3, r0
 800ad4e:	d004      	beq.n	800ad5a <__swbuf_r+0x62>
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	07db      	lsls	r3, r3, #31
 800ad54:	d506      	bpl.n	800ad64 <__swbuf_r+0x6c>
 800ad56:	2e0a      	cmp	r6, #10
 800ad58:	d104      	bne.n	800ad64 <__swbuf_r+0x6c>
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f7ff fcd7 	bl	800a710 <_fflush_r>
 800ad62:	b988      	cbnz	r0, 800ad88 <__swbuf_r+0x90>
 800ad64:	4638      	mov	r0, r7
 800ad66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad68:	4b0a      	ldr	r3, [pc, #40]	; (800ad94 <__swbuf_r+0x9c>)
 800ad6a:	429c      	cmp	r4, r3
 800ad6c:	d101      	bne.n	800ad72 <__swbuf_r+0x7a>
 800ad6e:	68ac      	ldr	r4, [r5, #8]
 800ad70:	e7cf      	b.n	800ad12 <__swbuf_r+0x1a>
 800ad72:	4b09      	ldr	r3, [pc, #36]	; (800ad98 <__swbuf_r+0xa0>)
 800ad74:	429c      	cmp	r4, r3
 800ad76:	bf08      	it	eq
 800ad78:	68ec      	ldreq	r4, [r5, #12]
 800ad7a:	e7ca      	b.n	800ad12 <__swbuf_r+0x1a>
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	4628      	mov	r0, r5
 800ad80:	f000 f80c 	bl	800ad9c <__swsetup_r>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d0cb      	beq.n	800ad20 <__swbuf_r+0x28>
 800ad88:	f04f 37ff 	mov.w	r7, #4294967295
 800ad8c:	e7ea      	b.n	800ad64 <__swbuf_r+0x6c>
 800ad8e:	bf00      	nop
 800ad90:	0800cd74 	.word	0x0800cd74
 800ad94:	0800cd94 	.word	0x0800cd94
 800ad98:	0800cd54 	.word	0x0800cd54

0800ad9c <__swsetup_r>:
 800ad9c:	4b32      	ldr	r3, [pc, #200]	; (800ae68 <__swsetup_r+0xcc>)
 800ad9e:	b570      	push	{r4, r5, r6, lr}
 800ada0:	681d      	ldr	r5, [r3, #0]
 800ada2:	4606      	mov	r6, r0
 800ada4:	460c      	mov	r4, r1
 800ada6:	b125      	cbz	r5, 800adb2 <__swsetup_r+0x16>
 800ada8:	69ab      	ldr	r3, [r5, #24]
 800adaa:	b913      	cbnz	r3, 800adb2 <__swsetup_r+0x16>
 800adac:	4628      	mov	r0, r5
 800adae:	f7ff fd43 	bl	800a838 <__sinit>
 800adb2:	4b2e      	ldr	r3, [pc, #184]	; (800ae6c <__swsetup_r+0xd0>)
 800adb4:	429c      	cmp	r4, r3
 800adb6:	d10f      	bne.n	800add8 <__swsetup_r+0x3c>
 800adb8:	686c      	ldr	r4, [r5, #4]
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adc0:	0719      	lsls	r1, r3, #28
 800adc2:	d42c      	bmi.n	800ae1e <__swsetup_r+0x82>
 800adc4:	06dd      	lsls	r5, r3, #27
 800adc6:	d411      	bmi.n	800adec <__swsetup_r+0x50>
 800adc8:	2309      	movs	r3, #9
 800adca:	6033      	str	r3, [r6, #0]
 800adcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800add0:	81a3      	strh	r3, [r4, #12]
 800add2:	f04f 30ff 	mov.w	r0, #4294967295
 800add6:	e03e      	b.n	800ae56 <__swsetup_r+0xba>
 800add8:	4b25      	ldr	r3, [pc, #148]	; (800ae70 <__swsetup_r+0xd4>)
 800adda:	429c      	cmp	r4, r3
 800addc:	d101      	bne.n	800ade2 <__swsetup_r+0x46>
 800adde:	68ac      	ldr	r4, [r5, #8]
 800ade0:	e7eb      	b.n	800adba <__swsetup_r+0x1e>
 800ade2:	4b24      	ldr	r3, [pc, #144]	; (800ae74 <__swsetup_r+0xd8>)
 800ade4:	429c      	cmp	r4, r3
 800ade6:	bf08      	it	eq
 800ade8:	68ec      	ldreq	r4, [r5, #12]
 800adea:	e7e6      	b.n	800adba <__swsetup_r+0x1e>
 800adec:	0758      	lsls	r0, r3, #29
 800adee:	d512      	bpl.n	800ae16 <__swsetup_r+0x7a>
 800adf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adf2:	b141      	cbz	r1, 800ae06 <__swsetup_r+0x6a>
 800adf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adf8:	4299      	cmp	r1, r3
 800adfa:	d002      	beq.n	800ae02 <__swsetup_r+0x66>
 800adfc:	4630      	mov	r0, r6
 800adfe:	f7fe fd4f 	bl	80098a0 <_free_r>
 800ae02:	2300      	movs	r3, #0
 800ae04:	6363      	str	r3, [r4, #52]	; 0x34
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae0c:	81a3      	strh	r3, [r4, #12]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	6063      	str	r3, [r4, #4]
 800ae12:	6923      	ldr	r3, [r4, #16]
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	f043 0308 	orr.w	r3, r3, #8
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	6923      	ldr	r3, [r4, #16]
 800ae20:	b94b      	cbnz	r3, 800ae36 <__swsetup_r+0x9a>
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae2c:	d003      	beq.n	800ae36 <__swsetup_r+0x9a>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4630      	mov	r0, r6
 800ae32:	f000 f84d 	bl	800aed0 <__smakebuf_r>
 800ae36:	89a0      	ldrh	r0, [r4, #12]
 800ae38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae3c:	f010 0301 	ands.w	r3, r0, #1
 800ae40:	d00a      	beq.n	800ae58 <__swsetup_r+0xbc>
 800ae42:	2300      	movs	r3, #0
 800ae44:	60a3      	str	r3, [r4, #8]
 800ae46:	6963      	ldr	r3, [r4, #20]
 800ae48:	425b      	negs	r3, r3
 800ae4a:	61a3      	str	r3, [r4, #24]
 800ae4c:	6923      	ldr	r3, [r4, #16]
 800ae4e:	b943      	cbnz	r3, 800ae62 <__swsetup_r+0xc6>
 800ae50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae54:	d1ba      	bne.n	800adcc <__swsetup_r+0x30>
 800ae56:	bd70      	pop	{r4, r5, r6, pc}
 800ae58:	0781      	lsls	r1, r0, #30
 800ae5a:	bf58      	it	pl
 800ae5c:	6963      	ldrpl	r3, [r4, #20]
 800ae5e:	60a3      	str	r3, [r4, #8]
 800ae60:	e7f4      	b.n	800ae4c <__swsetup_r+0xb0>
 800ae62:	2000      	movs	r0, #0
 800ae64:	e7f7      	b.n	800ae56 <__swsetup_r+0xba>
 800ae66:	bf00      	nop
 800ae68:	20000014 	.word	0x20000014
 800ae6c:	0800cd74 	.word	0x0800cd74
 800ae70:	0800cd94 	.word	0x0800cd94
 800ae74:	0800cd54 	.word	0x0800cd54

0800ae78 <abort>:
 800ae78:	b508      	push	{r3, lr}
 800ae7a:	2006      	movs	r0, #6
 800ae7c:	f000 f898 	bl	800afb0 <raise>
 800ae80:	2001      	movs	r0, #1
 800ae82:	f7f8 f81a 	bl	8002eba <_exit>

0800ae86 <__swhatbuf_r>:
 800ae86:	b570      	push	{r4, r5, r6, lr}
 800ae88:	460e      	mov	r6, r1
 800ae8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8e:	2900      	cmp	r1, #0
 800ae90:	b096      	sub	sp, #88	; 0x58
 800ae92:	4614      	mov	r4, r2
 800ae94:	461d      	mov	r5, r3
 800ae96:	da08      	bge.n	800aeaa <__swhatbuf_r+0x24>
 800ae98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	602a      	str	r2, [r5, #0]
 800aea0:	061a      	lsls	r2, r3, #24
 800aea2:	d410      	bmi.n	800aec6 <__swhatbuf_r+0x40>
 800aea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea8:	e00e      	b.n	800aec8 <__swhatbuf_r+0x42>
 800aeaa:	466a      	mov	r2, sp
 800aeac:	f000 f89c 	bl	800afe8 <_fstat_r>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	dbf1      	blt.n	800ae98 <__swhatbuf_r+0x12>
 800aeb4:	9a01      	ldr	r2, [sp, #4]
 800aeb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aeba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aebe:	425a      	negs	r2, r3
 800aec0:	415a      	adcs	r2, r3
 800aec2:	602a      	str	r2, [r5, #0]
 800aec4:	e7ee      	b.n	800aea4 <__swhatbuf_r+0x1e>
 800aec6:	2340      	movs	r3, #64	; 0x40
 800aec8:	2000      	movs	r0, #0
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	b016      	add	sp, #88	; 0x58
 800aece:	bd70      	pop	{r4, r5, r6, pc}

0800aed0 <__smakebuf_r>:
 800aed0:	898b      	ldrh	r3, [r1, #12]
 800aed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aed4:	079d      	lsls	r5, r3, #30
 800aed6:	4606      	mov	r6, r0
 800aed8:	460c      	mov	r4, r1
 800aeda:	d507      	bpl.n	800aeec <__smakebuf_r+0x1c>
 800aedc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	6123      	str	r3, [r4, #16]
 800aee4:	2301      	movs	r3, #1
 800aee6:	6163      	str	r3, [r4, #20]
 800aee8:	b002      	add	sp, #8
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	ab01      	add	r3, sp, #4
 800aeee:	466a      	mov	r2, sp
 800aef0:	f7ff ffc9 	bl	800ae86 <__swhatbuf_r>
 800aef4:	9900      	ldr	r1, [sp, #0]
 800aef6:	4605      	mov	r5, r0
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7fe fd3d 	bl	8009978 <_malloc_r>
 800aefe:	b948      	cbnz	r0, 800af14 <__smakebuf_r+0x44>
 800af00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af04:	059a      	lsls	r2, r3, #22
 800af06:	d4ef      	bmi.n	800aee8 <__smakebuf_r+0x18>
 800af08:	f023 0303 	bic.w	r3, r3, #3
 800af0c:	f043 0302 	orr.w	r3, r3, #2
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	e7e3      	b.n	800aedc <__smakebuf_r+0xc>
 800af14:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <__smakebuf_r+0x7c>)
 800af16:	62b3      	str	r3, [r6, #40]	; 0x28
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	6020      	str	r0, [r4, #0]
 800af1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	9b00      	ldr	r3, [sp, #0]
 800af24:	6163      	str	r3, [r4, #20]
 800af26:	9b01      	ldr	r3, [sp, #4]
 800af28:	6120      	str	r0, [r4, #16]
 800af2a:	b15b      	cbz	r3, 800af44 <__smakebuf_r+0x74>
 800af2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af30:	4630      	mov	r0, r6
 800af32:	f000 f86b 	bl	800b00c <_isatty_r>
 800af36:	b128      	cbz	r0, 800af44 <__smakebuf_r+0x74>
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	f023 0303 	bic.w	r3, r3, #3
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	89a0      	ldrh	r0, [r4, #12]
 800af46:	4305      	orrs	r5, r0
 800af48:	81a5      	strh	r5, [r4, #12]
 800af4a:	e7cd      	b.n	800aee8 <__smakebuf_r+0x18>
 800af4c:	0800a7d1 	.word	0x0800a7d1

0800af50 <_malloc_usable_size_r>:
 800af50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af54:	1f18      	subs	r0, r3, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	bfbc      	itt	lt
 800af5a:	580b      	ldrlt	r3, [r1, r0]
 800af5c:	18c0      	addlt	r0, r0, r3
 800af5e:	4770      	bx	lr

0800af60 <_raise_r>:
 800af60:	291f      	cmp	r1, #31
 800af62:	b538      	push	{r3, r4, r5, lr}
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	d904      	bls.n	800af74 <_raise_r+0x14>
 800af6a:	2316      	movs	r3, #22
 800af6c:	6003      	str	r3, [r0, #0]
 800af6e:	f04f 30ff 	mov.w	r0, #4294967295
 800af72:	bd38      	pop	{r3, r4, r5, pc}
 800af74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af76:	b112      	cbz	r2, 800af7e <_raise_r+0x1e>
 800af78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af7c:	b94b      	cbnz	r3, 800af92 <_raise_r+0x32>
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 f830 	bl	800afe4 <_getpid_r>
 800af84:	462a      	mov	r2, r5
 800af86:	4601      	mov	r1, r0
 800af88:	4620      	mov	r0, r4
 800af8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af8e:	f000 b817 	b.w	800afc0 <_kill_r>
 800af92:	2b01      	cmp	r3, #1
 800af94:	d00a      	beq.n	800afac <_raise_r+0x4c>
 800af96:	1c59      	adds	r1, r3, #1
 800af98:	d103      	bne.n	800afa2 <_raise_r+0x42>
 800af9a:	2316      	movs	r3, #22
 800af9c:	6003      	str	r3, [r0, #0]
 800af9e:	2001      	movs	r0, #1
 800afa0:	e7e7      	b.n	800af72 <_raise_r+0x12>
 800afa2:	2400      	movs	r4, #0
 800afa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afa8:	4628      	mov	r0, r5
 800afaa:	4798      	blx	r3
 800afac:	2000      	movs	r0, #0
 800afae:	e7e0      	b.n	800af72 <_raise_r+0x12>

0800afb0 <raise>:
 800afb0:	4b02      	ldr	r3, [pc, #8]	; (800afbc <raise+0xc>)
 800afb2:	4601      	mov	r1, r0
 800afb4:	6818      	ldr	r0, [r3, #0]
 800afb6:	f7ff bfd3 	b.w	800af60 <_raise_r>
 800afba:	bf00      	nop
 800afbc:	20000014 	.word	0x20000014

0800afc0 <_kill_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d07      	ldr	r5, [pc, #28]	; (800afe0 <_kill_r+0x20>)
 800afc4:	2300      	movs	r3, #0
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	4611      	mov	r1, r2
 800afcc:	602b      	str	r3, [r5, #0]
 800afce:	f7f7 ff64 	bl	8002e9a <_kill>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	d102      	bne.n	800afdc <_kill_r+0x1c>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	b103      	cbz	r3, 800afdc <_kill_r+0x1c>
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	bd38      	pop	{r3, r4, r5, pc}
 800afde:	bf00      	nop
 800afe0:	20000d68 	.word	0x20000d68

0800afe4 <_getpid_r>:
 800afe4:	f7f7 bf51 	b.w	8002e8a <_getpid>

0800afe8 <_fstat_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d07      	ldr	r5, [pc, #28]	; (800b008 <_fstat_r+0x20>)
 800afec:	2300      	movs	r3, #0
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	4611      	mov	r1, r2
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f7f7 ffaf 	bl	8002f58 <_fstat>
 800affa:	1c43      	adds	r3, r0, #1
 800affc:	d102      	bne.n	800b004 <_fstat_r+0x1c>
 800affe:	682b      	ldr	r3, [r5, #0]
 800b000:	b103      	cbz	r3, 800b004 <_fstat_r+0x1c>
 800b002:	6023      	str	r3, [r4, #0]
 800b004:	bd38      	pop	{r3, r4, r5, pc}
 800b006:	bf00      	nop
 800b008:	20000d68 	.word	0x20000d68

0800b00c <_isatty_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d06      	ldr	r5, [pc, #24]	; (800b028 <_isatty_r+0x1c>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	f7f7 ffae 	bl	8002f78 <_isatty>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_isatty_r+0x1a>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_isatty_r+0x1a>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	20000d68 	.word	0x20000d68
 800b02c:	00000000 	.word	0x00000000

0800b030 <cos>:
 800b030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b032:	ec53 2b10 	vmov	r2, r3, d0
 800b036:	4826      	ldr	r0, [pc, #152]	; (800b0d0 <cos+0xa0>)
 800b038:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b03c:	4281      	cmp	r1, r0
 800b03e:	dc06      	bgt.n	800b04e <cos+0x1e>
 800b040:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b0c8 <cos+0x98>
 800b044:	b005      	add	sp, #20
 800b046:	f85d eb04 	ldr.w	lr, [sp], #4
 800b04a:	f000 bb79 	b.w	800b740 <__kernel_cos>
 800b04e:	4821      	ldr	r0, [pc, #132]	; (800b0d4 <cos+0xa4>)
 800b050:	4281      	cmp	r1, r0
 800b052:	dd09      	ble.n	800b068 <cos+0x38>
 800b054:	ee10 0a10 	vmov	r0, s0
 800b058:	4619      	mov	r1, r3
 800b05a:	f7f5 f92d 	bl	80002b8 <__aeabi_dsub>
 800b05e:	ec41 0b10 	vmov	d0, r0, r1
 800b062:	b005      	add	sp, #20
 800b064:	f85d fb04 	ldr.w	pc, [sp], #4
 800b068:	4668      	mov	r0, sp
 800b06a:	f000 f95d 	bl	800b328 <__ieee754_rem_pio2>
 800b06e:	f000 0003 	and.w	r0, r0, #3
 800b072:	2801      	cmp	r0, #1
 800b074:	d00b      	beq.n	800b08e <cos+0x5e>
 800b076:	2802      	cmp	r0, #2
 800b078:	d016      	beq.n	800b0a8 <cos+0x78>
 800b07a:	b9e0      	cbnz	r0, 800b0b6 <cos+0x86>
 800b07c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b080:	ed9d 0b00 	vldr	d0, [sp]
 800b084:	f000 fb5c 	bl	800b740 <__kernel_cos>
 800b088:	ec51 0b10 	vmov	r0, r1, d0
 800b08c:	e7e7      	b.n	800b05e <cos+0x2e>
 800b08e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b092:	ed9d 0b00 	vldr	d0, [sp]
 800b096:	f000 ff6b 	bl	800bf70 <__kernel_sin>
 800b09a:	ec53 2b10 	vmov	r2, r3, d0
 800b09e:	ee10 0a10 	vmov	r0, s0
 800b0a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0a6:	e7da      	b.n	800b05e <cos+0x2e>
 800b0a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0ac:	ed9d 0b00 	vldr	d0, [sp]
 800b0b0:	f000 fb46 	bl	800b740 <__kernel_cos>
 800b0b4:	e7f1      	b.n	800b09a <cos+0x6a>
 800b0b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0ba:	ed9d 0b00 	vldr	d0, [sp]
 800b0be:	2001      	movs	r0, #1
 800b0c0:	f000 ff56 	bl	800bf70 <__kernel_sin>
 800b0c4:	e7e0      	b.n	800b088 <cos+0x58>
 800b0c6:	bf00      	nop
	...
 800b0d0:	3fe921fb 	.word	0x3fe921fb
 800b0d4:	7fefffff 	.word	0x7fefffff

0800b0d8 <sin>:
 800b0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0da:	ec53 2b10 	vmov	r2, r3, d0
 800b0de:	4828      	ldr	r0, [pc, #160]	; (800b180 <sin+0xa8>)
 800b0e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0e4:	4281      	cmp	r1, r0
 800b0e6:	dc07      	bgt.n	800b0f8 <sin+0x20>
 800b0e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b178 <sin+0xa0>
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	b005      	add	sp, #20
 800b0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0f4:	f000 bf3c 	b.w	800bf70 <__kernel_sin>
 800b0f8:	4822      	ldr	r0, [pc, #136]	; (800b184 <sin+0xac>)
 800b0fa:	4281      	cmp	r1, r0
 800b0fc:	dd09      	ble.n	800b112 <sin+0x3a>
 800b0fe:	ee10 0a10 	vmov	r0, s0
 800b102:	4619      	mov	r1, r3
 800b104:	f7f5 f8d8 	bl	80002b8 <__aeabi_dsub>
 800b108:	ec41 0b10 	vmov	d0, r0, r1
 800b10c:	b005      	add	sp, #20
 800b10e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b112:	4668      	mov	r0, sp
 800b114:	f000 f908 	bl	800b328 <__ieee754_rem_pio2>
 800b118:	f000 0003 	and.w	r0, r0, #3
 800b11c:	2801      	cmp	r0, #1
 800b11e:	d00c      	beq.n	800b13a <sin+0x62>
 800b120:	2802      	cmp	r0, #2
 800b122:	d011      	beq.n	800b148 <sin+0x70>
 800b124:	b9f0      	cbnz	r0, 800b164 <sin+0x8c>
 800b126:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b12a:	ed9d 0b00 	vldr	d0, [sp]
 800b12e:	2001      	movs	r0, #1
 800b130:	f000 ff1e 	bl	800bf70 <__kernel_sin>
 800b134:	ec51 0b10 	vmov	r0, r1, d0
 800b138:	e7e6      	b.n	800b108 <sin+0x30>
 800b13a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b13e:	ed9d 0b00 	vldr	d0, [sp]
 800b142:	f000 fafd 	bl	800b740 <__kernel_cos>
 800b146:	e7f5      	b.n	800b134 <sin+0x5c>
 800b148:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b14c:	ed9d 0b00 	vldr	d0, [sp]
 800b150:	2001      	movs	r0, #1
 800b152:	f000 ff0d 	bl	800bf70 <__kernel_sin>
 800b156:	ec53 2b10 	vmov	r2, r3, d0
 800b15a:	ee10 0a10 	vmov	r0, s0
 800b15e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b162:	e7d1      	b.n	800b108 <sin+0x30>
 800b164:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b168:	ed9d 0b00 	vldr	d0, [sp]
 800b16c:	f000 fae8 	bl	800b740 <__kernel_cos>
 800b170:	e7f1      	b.n	800b156 <sin+0x7e>
 800b172:	bf00      	nop
 800b174:	f3af 8000 	nop.w
	...
 800b180:	3fe921fb 	.word	0x3fe921fb
 800b184:	7fefffff 	.word	0x7fefffff

0800b188 <atan2>:
 800b188:	f000 b802 	b.w	800b190 <__ieee754_atan2>
 800b18c:	0000      	movs	r0, r0
	...

0800b190 <__ieee754_atan2>:
 800b190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b194:	ec57 6b11 	vmov	r6, r7, d1
 800b198:	4273      	negs	r3, r6
 800b19a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b320 <__ieee754_atan2+0x190>
 800b19e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b1a2:	4333      	orrs	r3, r6
 800b1a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b1a8:	4573      	cmp	r3, lr
 800b1aa:	ec51 0b10 	vmov	r0, r1, d0
 800b1ae:	ee11 8a10 	vmov	r8, s2
 800b1b2:	d80a      	bhi.n	800b1ca <__ieee754_atan2+0x3a>
 800b1b4:	4244      	negs	r4, r0
 800b1b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1ba:	4304      	orrs	r4, r0
 800b1bc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b1c0:	4574      	cmp	r4, lr
 800b1c2:	ee10 9a10 	vmov	r9, s0
 800b1c6:	468c      	mov	ip, r1
 800b1c8:	d907      	bls.n	800b1da <__ieee754_atan2+0x4a>
 800b1ca:	4632      	mov	r2, r6
 800b1cc:	463b      	mov	r3, r7
 800b1ce:	f7f5 f875 	bl	80002bc <__adddf3>
 800b1d2:	ec41 0b10 	vmov	d0, r0, r1
 800b1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1da:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b1de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b1e2:	4334      	orrs	r4, r6
 800b1e4:	d103      	bne.n	800b1ee <__ieee754_atan2+0x5e>
 800b1e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ea:	f000 bf81 	b.w	800c0f0 <atan>
 800b1ee:	17bc      	asrs	r4, r7, #30
 800b1f0:	f004 0402 	and.w	r4, r4, #2
 800b1f4:	ea53 0909 	orrs.w	r9, r3, r9
 800b1f8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b1fc:	d107      	bne.n	800b20e <__ieee754_atan2+0x7e>
 800b1fe:	2c02      	cmp	r4, #2
 800b200:	d060      	beq.n	800b2c4 <__ieee754_atan2+0x134>
 800b202:	2c03      	cmp	r4, #3
 800b204:	d1e5      	bne.n	800b1d2 <__ieee754_atan2+0x42>
 800b206:	a142      	add	r1, pc, #264	; (adr r1, 800b310 <__ieee754_atan2+0x180>)
 800b208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b20c:	e7e1      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b20e:	ea52 0808 	orrs.w	r8, r2, r8
 800b212:	d106      	bne.n	800b222 <__ieee754_atan2+0x92>
 800b214:	f1bc 0f00 	cmp.w	ip, #0
 800b218:	da5f      	bge.n	800b2da <__ieee754_atan2+0x14a>
 800b21a:	a13f      	add	r1, pc, #252	; (adr r1, 800b318 <__ieee754_atan2+0x188>)
 800b21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b220:	e7d7      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b222:	4572      	cmp	r2, lr
 800b224:	d10f      	bne.n	800b246 <__ieee754_atan2+0xb6>
 800b226:	4293      	cmp	r3, r2
 800b228:	f104 34ff 	add.w	r4, r4, #4294967295
 800b22c:	d107      	bne.n	800b23e <__ieee754_atan2+0xae>
 800b22e:	2c02      	cmp	r4, #2
 800b230:	d84c      	bhi.n	800b2cc <__ieee754_atan2+0x13c>
 800b232:	4b35      	ldr	r3, [pc, #212]	; (800b308 <__ieee754_atan2+0x178>)
 800b234:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b238:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b23c:	e7c9      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b23e:	2c02      	cmp	r4, #2
 800b240:	d848      	bhi.n	800b2d4 <__ieee754_atan2+0x144>
 800b242:	4b32      	ldr	r3, [pc, #200]	; (800b30c <__ieee754_atan2+0x17c>)
 800b244:	e7f6      	b.n	800b234 <__ieee754_atan2+0xa4>
 800b246:	4573      	cmp	r3, lr
 800b248:	d0e4      	beq.n	800b214 <__ieee754_atan2+0x84>
 800b24a:	1a9b      	subs	r3, r3, r2
 800b24c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b250:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b254:	da1e      	bge.n	800b294 <__ieee754_atan2+0x104>
 800b256:	2f00      	cmp	r7, #0
 800b258:	da01      	bge.n	800b25e <__ieee754_atan2+0xce>
 800b25a:	323c      	adds	r2, #60	; 0x3c
 800b25c:	db1e      	blt.n	800b29c <__ieee754_atan2+0x10c>
 800b25e:	4632      	mov	r2, r6
 800b260:	463b      	mov	r3, r7
 800b262:	f7f5 fb0b 	bl	800087c <__aeabi_ddiv>
 800b266:	ec41 0b10 	vmov	d0, r0, r1
 800b26a:	f001 f8e1 	bl	800c430 <fabs>
 800b26e:	f000 ff3f 	bl	800c0f0 <atan>
 800b272:	ec51 0b10 	vmov	r0, r1, d0
 800b276:	2c01      	cmp	r4, #1
 800b278:	d013      	beq.n	800b2a2 <__ieee754_atan2+0x112>
 800b27a:	2c02      	cmp	r4, #2
 800b27c:	d015      	beq.n	800b2aa <__ieee754_atan2+0x11a>
 800b27e:	2c00      	cmp	r4, #0
 800b280:	d0a7      	beq.n	800b1d2 <__ieee754_atan2+0x42>
 800b282:	a319      	add	r3, pc, #100	; (adr r3, 800b2e8 <__ieee754_atan2+0x158>)
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	f7f5 f816 	bl	80002b8 <__aeabi_dsub>
 800b28c:	a318      	add	r3, pc, #96	; (adr r3, 800b2f0 <__ieee754_atan2+0x160>)
 800b28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b292:	e014      	b.n	800b2be <__ieee754_atan2+0x12e>
 800b294:	a118      	add	r1, pc, #96	; (adr r1, 800b2f8 <__ieee754_atan2+0x168>)
 800b296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b29a:	e7ec      	b.n	800b276 <__ieee754_atan2+0xe6>
 800b29c:	2000      	movs	r0, #0
 800b29e:	2100      	movs	r1, #0
 800b2a0:	e7e9      	b.n	800b276 <__ieee754_atan2+0xe6>
 800b2a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	e793      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b2aa:	a30f      	add	r3, pc, #60	; (adr r3, 800b2e8 <__ieee754_atan2+0x158>)
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	f7f5 f802 	bl	80002b8 <__aeabi_dsub>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	a10d      	add	r1, pc, #52	; (adr r1, 800b2f0 <__ieee754_atan2+0x160>)
 800b2ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2be:	f7f4 fffb 	bl	80002b8 <__aeabi_dsub>
 800b2c2:	e786      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b2c4:	a10a      	add	r1, pc, #40	; (adr r1, 800b2f0 <__ieee754_atan2+0x160>)
 800b2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2ca:	e782      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b2cc:	a10c      	add	r1, pc, #48	; (adr r1, 800b300 <__ieee754_atan2+0x170>)
 800b2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d2:	e77e      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	e77b      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b2da:	a107      	add	r1, pc, #28	; (adr r1, 800b2f8 <__ieee754_atan2+0x168>)
 800b2dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2e0:	e777      	b.n	800b1d2 <__ieee754_atan2+0x42>
 800b2e2:	bf00      	nop
 800b2e4:	f3af 8000 	nop.w
 800b2e8:	33145c07 	.word	0x33145c07
 800b2ec:	3ca1a626 	.word	0x3ca1a626
 800b2f0:	54442d18 	.word	0x54442d18
 800b2f4:	400921fb 	.word	0x400921fb
 800b2f8:	54442d18 	.word	0x54442d18
 800b2fc:	3ff921fb 	.word	0x3ff921fb
 800b300:	54442d18 	.word	0x54442d18
 800b304:	3fe921fb 	.word	0x3fe921fb
 800b308:	0800cdb8 	.word	0x0800cdb8
 800b30c:	0800cdd0 	.word	0x0800cdd0
 800b310:	54442d18 	.word	0x54442d18
 800b314:	c00921fb 	.word	0xc00921fb
 800b318:	54442d18 	.word	0x54442d18
 800b31c:	bff921fb 	.word	0xbff921fb
 800b320:	7ff00000 	.word	0x7ff00000
 800b324:	00000000 	.word	0x00000000

0800b328 <__ieee754_rem_pio2>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	ed2d 8b02 	vpush	{d8}
 800b330:	ec55 4b10 	vmov	r4, r5, d0
 800b334:	4bca      	ldr	r3, [pc, #808]	; (800b660 <__ieee754_rem_pio2+0x338>)
 800b336:	b08b      	sub	sp, #44	; 0x2c
 800b338:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b33c:	4598      	cmp	r8, r3
 800b33e:	4682      	mov	sl, r0
 800b340:	9502      	str	r5, [sp, #8]
 800b342:	dc08      	bgt.n	800b356 <__ieee754_rem_pio2+0x2e>
 800b344:	2200      	movs	r2, #0
 800b346:	2300      	movs	r3, #0
 800b348:	ed80 0b00 	vstr	d0, [r0]
 800b34c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b350:	f04f 0b00 	mov.w	fp, #0
 800b354:	e028      	b.n	800b3a8 <__ieee754_rem_pio2+0x80>
 800b356:	4bc3      	ldr	r3, [pc, #780]	; (800b664 <__ieee754_rem_pio2+0x33c>)
 800b358:	4598      	cmp	r8, r3
 800b35a:	dc78      	bgt.n	800b44e <__ieee754_rem_pio2+0x126>
 800b35c:	9b02      	ldr	r3, [sp, #8]
 800b35e:	4ec2      	ldr	r6, [pc, #776]	; (800b668 <__ieee754_rem_pio2+0x340>)
 800b360:	2b00      	cmp	r3, #0
 800b362:	ee10 0a10 	vmov	r0, s0
 800b366:	a3b0      	add	r3, pc, #704	; (adr r3, 800b628 <__ieee754_rem_pio2+0x300>)
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	4629      	mov	r1, r5
 800b36e:	dd39      	ble.n	800b3e4 <__ieee754_rem_pio2+0xbc>
 800b370:	f7f4 ffa2 	bl	80002b8 <__aeabi_dsub>
 800b374:	45b0      	cmp	r8, r6
 800b376:	4604      	mov	r4, r0
 800b378:	460d      	mov	r5, r1
 800b37a:	d01b      	beq.n	800b3b4 <__ieee754_rem_pio2+0x8c>
 800b37c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b630 <__ieee754_rem_pio2+0x308>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	f7f4 ff99 	bl	80002b8 <__aeabi_dsub>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	e9ca 2300 	strd	r2, r3, [sl]
 800b38e:	4620      	mov	r0, r4
 800b390:	4629      	mov	r1, r5
 800b392:	f7f4 ff91 	bl	80002b8 <__aeabi_dsub>
 800b396:	a3a6      	add	r3, pc, #664	; (adr r3, 800b630 <__ieee754_rem_pio2+0x308>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f4 ff8c 	bl	80002b8 <__aeabi_dsub>
 800b3a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b3a4:	f04f 0b01 	mov.w	fp, #1
 800b3a8:	4658      	mov	r0, fp
 800b3aa:	b00b      	add	sp, #44	; 0x2c
 800b3ac:	ecbd 8b02 	vpop	{d8}
 800b3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b638 <__ieee754_rem_pio2+0x310>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff7d 	bl	80002b8 <__aeabi_dsub>
 800b3be:	a3a0      	add	r3, pc, #640	; (adr r3, 800b640 <__ieee754_rem_pio2+0x318>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	f7f4 ff76 	bl	80002b8 <__aeabi_dsub>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	e9ca 2300 	strd	r2, r3, [sl]
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	f7f4 ff6e 	bl	80002b8 <__aeabi_dsub>
 800b3dc:	a398      	add	r3, pc, #608	; (adr r3, 800b640 <__ieee754_rem_pio2+0x318>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	e7db      	b.n	800b39c <__ieee754_rem_pio2+0x74>
 800b3e4:	f7f4 ff6a 	bl	80002bc <__adddf3>
 800b3e8:	45b0      	cmp	r8, r6
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	460d      	mov	r5, r1
 800b3ee:	d016      	beq.n	800b41e <__ieee754_rem_pio2+0xf6>
 800b3f0:	a38f      	add	r3, pc, #572	; (adr r3, 800b630 <__ieee754_rem_pio2+0x308>)
 800b3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f6:	f7f4 ff61 	bl	80002bc <__adddf3>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	e9ca 2300 	strd	r2, r3, [sl]
 800b402:	4620      	mov	r0, r4
 800b404:	4629      	mov	r1, r5
 800b406:	f7f4 ff57 	bl	80002b8 <__aeabi_dsub>
 800b40a:	a389      	add	r3, pc, #548	; (adr r3, 800b630 <__ieee754_rem_pio2+0x308>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f7f4 ff54 	bl	80002bc <__adddf3>
 800b414:	f04f 3bff 	mov.w	fp, #4294967295
 800b418:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b41c:	e7c4      	b.n	800b3a8 <__ieee754_rem_pio2+0x80>
 800b41e:	a386      	add	r3, pc, #536	; (adr r3, 800b638 <__ieee754_rem_pio2+0x310>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f4 ff4a 	bl	80002bc <__adddf3>
 800b428:	a385      	add	r3, pc, #532	; (adr r3, 800b640 <__ieee754_rem_pio2+0x318>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	f7f4 ff43 	bl	80002bc <__adddf3>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	e9ca 2300 	strd	r2, r3, [sl]
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f4 ff39 	bl	80002b8 <__aeabi_dsub>
 800b446:	a37e      	add	r3, pc, #504	; (adr r3, 800b640 <__ieee754_rem_pio2+0x318>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	e7e0      	b.n	800b410 <__ieee754_rem_pio2+0xe8>
 800b44e:	4b87      	ldr	r3, [pc, #540]	; (800b66c <__ieee754_rem_pio2+0x344>)
 800b450:	4598      	cmp	r8, r3
 800b452:	f300 80d9 	bgt.w	800b608 <__ieee754_rem_pio2+0x2e0>
 800b456:	f000 ffeb 	bl	800c430 <fabs>
 800b45a:	ec55 4b10 	vmov	r4, r5, d0
 800b45e:	ee10 0a10 	vmov	r0, s0
 800b462:	a379      	add	r3, pc, #484	; (adr r3, 800b648 <__ieee754_rem_pio2+0x320>)
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f5 f8dd 	bl	8000628 <__aeabi_dmul>
 800b46e:	4b80      	ldr	r3, [pc, #512]	; (800b670 <__ieee754_rem_pio2+0x348>)
 800b470:	2200      	movs	r2, #0
 800b472:	f7f4 ff23 	bl	80002bc <__adddf3>
 800b476:	f7f5 fb87 	bl	8000b88 <__aeabi_d2iz>
 800b47a:	4683      	mov	fp, r0
 800b47c:	f7f5 f86a 	bl	8000554 <__aeabi_i2d>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	ec43 2b18 	vmov	d8, r2, r3
 800b488:	a367      	add	r3, pc, #412	; (adr r3, 800b628 <__ieee754_rem_pio2+0x300>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f7f5 f8cb 	bl	8000628 <__aeabi_dmul>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	4620      	mov	r0, r4
 800b498:	4629      	mov	r1, r5
 800b49a:	f7f4 ff0d 	bl	80002b8 <__aeabi_dsub>
 800b49e:	a364      	add	r3, pc, #400	; (adr r3, 800b630 <__ieee754_rem_pio2+0x308>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	460f      	mov	r7, r1
 800b4a8:	ec51 0b18 	vmov	r0, r1, d8
 800b4ac:	f7f5 f8bc 	bl	8000628 <__aeabi_dmul>
 800b4b0:	f1bb 0f1f 	cmp.w	fp, #31
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	460d      	mov	r5, r1
 800b4b8:	dc0d      	bgt.n	800b4d6 <__ieee754_rem_pio2+0x1ae>
 800b4ba:	4b6e      	ldr	r3, [pc, #440]	; (800b674 <__ieee754_rem_pio2+0x34c>)
 800b4bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c4:	4543      	cmp	r3, r8
 800b4c6:	d006      	beq.n	800b4d6 <__ieee754_rem_pio2+0x1ae>
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	f7f4 fef2 	bl	80002b8 <__aeabi_dsub>
 800b4d4:	e00f      	b.n	800b4f6 <__ieee754_rem_pio2+0x1ce>
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	4622      	mov	r2, r4
 800b4da:	4630      	mov	r0, r6
 800b4dc:	4639      	mov	r1, r7
 800b4de:	f7f4 feeb 	bl	80002b8 <__aeabi_dsub>
 800b4e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b4e6:	9303      	str	r3, [sp, #12]
 800b4e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b4ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b4f0:	f1b8 0f10 	cmp.w	r8, #16
 800b4f4:	dc02      	bgt.n	800b4fc <__ieee754_rem_pio2+0x1d4>
 800b4f6:	e9ca 0100 	strd	r0, r1, [sl]
 800b4fa:	e039      	b.n	800b570 <__ieee754_rem_pio2+0x248>
 800b4fc:	a34e      	add	r3, pc, #312	; (adr r3, 800b638 <__ieee754_rem_pio2+0x310>)
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	ec51 0b18 	vmov	r0, r1, d8
 800b506:	f7f5 f88f 	bl	8000628 <__aeabi_dmul>
 800b50a:	4604      	mov	r4, r0
 800b50c:	460d      	mov	r5, r1
 800b50e:	4602      	mov	r2, r0
 800b510:	460b      	mov	r3, r1
 800b512:	4630      	mov	r0, r6
 800b514:	4639      	mov	r1, r7
 800b516:	f7f4 fecf 	bl	80002b8 <__aeabi_dsub>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	4680      	mov	r8, r0
 800b520:	4689      	mov	r9, r1
 800b522:	4630      	mov	r0, r6
 800b524:	4639      	mov	r1, r7
 800b526:	f7f4 fec7 	bl	80002b8 <__aeabi_dsub>
 800b52a:	4622      	mov	r2, r4
 800b52c:	462b      	mov	r3, r5
 800b52e:	f7f4 fec3 	bl	80002b8 <__aeabi_dsub>
 800b532:	a343      	add	r3, pc, #268	; (adr r3, 800b640 <__ieee754_rem_pio2+0x318>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	ec51 0b18 	vmov	r0, r1, d8
 800b540:	f7f5 f872 	bl	8000628 <__aeabi_dmul>
 800b544:	4622      	mov	r2, r4
 800b546:	462b      	mov	r3, r5
 800b548:	f7f4 feb6 	bl	80002b8 <__aeabi_dsub>
 800b54c:	4602      	mov	r2, r0
 800b54e:	460b      	mov	r3, r1
 800b550:	4604      	mov	r4, r0
 800b552:	460d      	mov	r5, r1
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	f7f4 feae 	bl	80002b8 <__aeabi_dsub>
 800b55c:	9a03      	ldr	r2, [sp, #12]
 800b55e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b562:	1ad3      	subs	r3, r2, r3
 800b564:	2b31      	cmp	r3, #49	; 0x31
 800b566:	dc24      	bgt.n	800b5b2 <__ieee754_rem_pio2+0x28a>
 800b568:	e9ca 0100 	strd	r0, r1, [sl]
 800b56c:	4646      	mov	r6, r8
 800b56e:	464f      	mov	r7, r9
 800b570:	e9da 8900 	ldrd	r8, r9, [sl]
 800b574:	4630      	mov	r0, r6
 800b576:	4642      	mov	r2, r8
 800b578:	464b      	mov	r3, r9
 800b57a:	4639      	mov	r1, r7
 800b57c:	f7f4 fe9c 	bl	80002b8 <__aeabi_dsub>
 800b580:	462b      	mov	r3, r5
 800b582:	4622      	mov	r2, r4
 800b584:	f7f4 fe98 	bl	80002b8 <__aeabi_dsub>
 800b588:	9b02      	ldr	r3, [sp, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b590:	f6bf af0a 	bge.w	800b3a8 <__ieee754_rem_pio2+0x80>
 800b594:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b598:	f8ca 3004 	str.w	r3, [sl, #4]
 800b59c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5a0:	f8ca 8000 	str.w	r8, [sl]
 800b5a4:	f8ca 0008 	str.w	r0, [sl, #8]
 800b5a8:	f8ca 300c 	str.w	r3, [sl, #12]
 800b5ac:	f1cb 0b00 	rsb	fp, fp, #0
 800b5b0:	e6fa      	b.n	800b3a8 <__ieee754_rem_pio2+0x80>
 800b5b2:	a327      	add	r3, pc, #156	; (adr r3, 800b650 <__ieee754_rem_pio2+0x328>)
 800b5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b8:	ec51 0b18 	vmov	r0, r1, d8
 800b5bc:	f7f5 f834 	bl	8000628 <__aeabi_dmul>
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	460d      	mov	r5, r1
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	f7f4 fe74 	bl	80002b8 <__aeabi_dsub>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	4640      	mov	r0, r8
 800b5da:	4649      	mov	r1, r9
 800b5dc:	f7f4 fe6c 	bl	80002b8 <__aeabi_dsub>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	f7f4 fe68 	bl	80002b8 <__aeabi_dsub>
 800b5e8:	a31b      	add	r3, pc, #108	; (adr r3, 800b658 <__ieee754_rem_pio2+0x330>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	4604      	mov	r4, r0
 800b5f0:	460d      	mov	r5, r1
 800b5f2:	ec51 0b18 	vmov	r0, r1, d8
 800b5f6:	f7f5 f817 	bl	8000628 <__aeabi_dmul>
 800b5fa:	4622      	mov	r2, r4
 800b5fc:	462b      	mov	r3, r5
 800b5fe:	f7f4 fe5b 	bl	80002b8 <__aeabi_dsub>
 800b602:	4604      	mov	r4, r0
 800b604:	460d      	mov	r5, r1
 800b606:	e75f      	b.n	800b4c8 <__ieee754_rem_pio2+0x1a0>
 800b608:	4b1b      	ldr	r3, [pc, #108]	; (800b678 <__ieee754_rem_pio2+0x350>)
 800b60a:	4598      	cmp	r8, r3
 800b60c:	dd36      	ble.n	800b67c <__ieee754_rem_pio2+0x354>
 800b60e:	ee10 2a10 	vmov	r2, s0
 800b612:	462b      	mov	r3, r5
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f4 fe4e 	bl	80002b8 <__aeabi_dsub>
 800b61c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b620:	e9ca 0100 	strd	r0, r1, [sl]
 800b624:	e694      	b.n	800b350 <__ieee754_rem_pio2+0x28>
 800b626:	bf00      	nop
 800b628:	54400000 	.word	0x54400000
 800b62c:	3ff921fb 	.word	0x3ff921fb
 800b630:	1a626331 	.word	0x1a626331
 800b634:	3dd0b461 	.word	0x3dd0b461
 800b638:	1a600000 	.word	0x1a600000
 800b63c:	3dd0b461 	.word	0x3dd0b461
 800b640:	2e037073 	.word	0x2e037073
 800b644:	3ba3198a 	.word	0x3ba3198a
 800b648:	6dc9c883 	.word	0x6dc9c883
 800b64c:	3fe45f30 	.word	0x3fe45f30
 800b650:	2e000000 	.word	0x2e000000
 800b654:	3ba3198a 	.word	0x3ba3198a
 800b658:	252049c1 	.word	0x252049c1
 800b65c:	397b839a 	.word	0x397b839a
 800b660:	3fe921fb 	.word	0x3fe921fb
 800b664:	4002d97b 	.word	0x4002d97b
 800b668:	3ff921fb 	.word	0x3ff921fb
 800b66c:	413921fb 	.word	0x413921fb
 800b670:	3fe00000 	.word	0x3fe00000
 800b674:	0800cde8 	.word	0x0800cde8
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b680:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b684:	ee10 0a10 	vmov	r0, s0
 800b688:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b68c:	ee10 6a10 	vmov	r6, s0
 800b690:	460f      	mov	r7, r1
 800b692:	f7f5 fa79 	bl	8000b88 <__aeabi_d2iz>
 800b696:	f7f4 ff5d 	bl	8000554 <__aeabi_i2d>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6a6:	f7f4 fe07 	bl	80002b8 <__aeabi_dsub>
 800b6aa:	4b23      	ldr	r3, [pc, #140]	; (800b738 <__ieee754_rem_pio2+0x410>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f7f4 ffbb 	bl	8000628 <__aeabi_dmul>
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	f7f5 fa67 	bl	8000b88 <__aeabi_d2iz>
 800b6ba:	f7f4 ff4b 	bl	8000554 <__aeabi_i2d>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	4639      	mov	r1, r7
 800b6c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6ca:	f7f4 fdf5 	bl	80002b8 <__aeabi_dsub>
 800b6ce:	4b1a      	ldr	r3, [pc, #104]	; (800b738 <__ieee754_rem_pio2+0x410>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f7f4 ffa9 	bl	8000628 <__aeabi_dmul>
 800b6d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6da:	ad04      	add	r5, sp, #16
 800b6dc:	f04f 0803 	mov.w	r8, #3
 800b6e0:	46a9      	mov	r9, r5
 800b6e2:	2600      	movs	r6, #0
 800b6e4:	2700      	movs	r7, #0
 800b6e6:	4632      	mov	r2, r6
 800b6e8:	463b      	mov	r3, r7
 800b6ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b6ee:	46c3      	mov	fp, r8
 800b6f0:	3d08      	subs	r5, #8
 800b6f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6f6:	f7f5 f9ff 	bl	8000af8 <__aeabi_dcmpeq>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d1f3      	bne.n	800b6e6 <__ieee754_rem_pio2+0x3be>
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <__ieee754_rem_pio2+0x414>)
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	2302      	movs	r3, #2
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	4622      	mov	r2, r4
 800b708:	465b      	mov	r3, fp
 800b70a:	4651      	mov	r1, sl
 800b70c:	4648      	mov	r0, r9
 800b70e:	f000 f8df 	bl	800b8d0 <__kernel_rem_pio2>
 800b712:	9b02      	ldr	r3, [sp, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	4683      	mov	fp, r0
 800b718:	f6bf ae46 	bge.w	800b3a8 <__ieee754_rem_pio2+0x80>
 800b71c:	e9da 2100 	ldrd	r2, r1, [sl]
 800b720:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b724:	e9ca 2300 	strd	r2, r3, [sl]
 800b728:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b72c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b730:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b734:	e73a      	b.n	800b5ac <__ieee754_rem_pio2+0x284>
 800b736:	bf00      	nop
 800b738:	41700000 	.word	0x41700000
 800b73c:	0800ce68 	.word	0x0800ce68

0800b740 <__kernel_cos>:
 800b740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	ec57 6b10 	vmov	r6, r7, d0
 800b748:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b74c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b750:	ed8d 1b00 	vstr	d1, [sp]
 800b754:	da07      	bge.n	800b766 <__kernel_cos+0x26>
 800b756:	ee10 0a10 	vmov	r0, s0
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f5 fa14 	bl	8000b88 <__aeabi_d2iz>
 800b760:	2800      	cmp	r0, #0
 800b762:	f000 8088 	beq.w	800b876 <__kernel_cos+0x136>
 800b766:	4632      	mov	r2, r6
 800b768:	463b      	mov	r3, r7
 800b76a:	4630      	mov	r0, r6
 800b76c:	4639      	mov	r1, r7
 800b76e:	f7f4 ff5b 	bl	8000628 <__aeabi_dmul>
 800b772:	4b51      	ldr	r3, [pc, #324]	; (800b8b8 <__kernel_cos+0x178>)
 800b774:	2200      	movs	r2, #0
 800b776:	4604      	mov	r4, r0
 800b778:	460d      	mov	r5, r1
 800b77a:	f7f4 ff55 	bl	8000628 <__aeabi_dmul>
 800b77e:	a340      	add	r3, pc, #256	; (adr r3, 800b880 <__kernel_cos+0x140>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	4682      	mov	sl, r0
 800b786:	468b      	mov	fp, r1
 800b788:	4620      	mov	r0, r4
 800b78a:	4629      	mov	r1, r5
 800b78c:	f7f4 ff4c 	bl	8000628 <__aeabi_dmul>
 800b790:	a33d      	add	r3, pc, #244	; (adr r3, 800b888 <__kernel_cos+0x148>)
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f7f4 fd91 	bl	80002bc <__adddf3>
 800b79a:	4622      	mov	r2, r4
 800b79c:	462b      	mov	r3, r5
 800b79e:	f7f4 ff43 	bl	8000628 <__aeabi_dmul>
 800b7a2:	a33b      	add	r3, pc, #236	; (adr r3, 800b890 <__kernel_cos+0x150>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f7f4 fd86 	bl	80002b8 <__aeabi_dsub>
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	462b      	mov	r3, r5
 800b7b0:	f7f4 ff3a 	bl	8000628 <__aeabi_dmul>
 800b7b4:	a338      	add	r3, pc, #224	; (adr r3, 800b898 <__kernel_cos+0x158>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	f7f4 fd7f 	bl	80002bc <__adddf3>
 800b7be:	4622      	mov	r2, r4
 800b7c0:	462b      	mov	r3, r5
 800b7c2:	f7f4 ff31 	bl	8000628 <__aeabi_dmul>
 800b7c6:	a336      	add	r3, pc, #216	; (adr r3, 800b8a0 <__kernel_cos+0x160>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f7f4 fd74 	bl	80002b8 <__aeabi_dsub>
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	462b      	mov	r3, r5
 800b7d4:	f7f4 ff28 	bl	8000628 <__aeabi_dmul>
 800b7d8:	a333      	add	r3, pc, #204	; (adr r3, 800b8a8 <__kernel_cos+0x168>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	f7f4 fd6d 	bl	80002bc <__adddf3>
 800b7e2:	4622      	mov	r2, r4
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	f7f4 ff1f 	bl	8000628 <__aeabi_dmul>
 800b7ea:	4622      	mov	r2, r4
 800b7ec:	462b      	mov	r3, r5
 800b7ee:	f7f4 ff1b 	bl	8000628 <__aeabi_dmul>
 800b7f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	460d      	mov	r5, r1
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	f7f4 ff13 	bl	8000628 <__aeabi_dmul>
 800b802:	460b      	mov	r3, r1
 800b804:	4602      	mov	r2, r0
 800b806:	4629      	mov	r1, r5
 800b808:	4620      	mov	r0, r4
 800b80a:	f7f4 fd55 	bl	80002b8 <__aeabi_dsub>
 800b80e:	4b2b      	ldr	r3, [pc, #172]	; (800b8bc <__kernel_cos+0x17c>)
 800b810:	4598      	cmp	r8, r3
 800b812:	4606      	mov	r6, r0
 800b814:	460f      	mov	r7, r1
 800b816:	dc10      	bgt.n	800b83a <__kernel_cos+0xfa>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4650      	mov	r0, sl
 800b81e:	4659      	mov	r1, fp
 800b820:	f7f4 fd4a 	bl	80002b8 <__aeabi_dsub>
 800b824:	460b      	mov	r3, r1
 800b826:	4926      	ldr	r1, [pc, #152]	; (800b8c0 <__kernel_cos+0x180>)
 800b828:	4602      	mov	r2, r0
 800b82a:	2000      	movs	r0, #0
 800b82c:	f7f4 fd44 	bl	80002b8 <__aeabi_dsub>
 800b830:	ec41 0b10 	vmov	d0, r0, r1
 800b834:	b003      	add	sp, #12
 800b836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83a:	4b22      	ldr	r3, [pc, #136]	; (800b8c4 <__kernel_cos+0x184>)
 800b83c:	4920      	ldr	r1, [pc, #128]	; (800b8c0 <__kernel_cos+0x180>)
 800b83e:	4598      	cmp	r8, r3
 800b840:	bfcc      	ite	gt
 800b842:	4d21      	ldrgt	r5, [pc, #132]	; (800b8c8 <__kernel_cos+0x188>)
 800b844:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b848:	2400      	movs	r4, #0
 800b84a:	4622      	mov	r2, r4
 800b84c:	462b      	mov	r3, r5
 800b84e:	2000      	movs	r0, #0
 800b850:	f7f4 fd32 	bl	80002b8 <__aeabi_dsub>
 800b854:	4622      	mov	r2, r4
 800b856:	4680      	mov	r8, r0
 800b858:	4689      	mov	r9, r1
 800b85a:	462b      	mov	r3, r5
 800b85c:	4650      	mov	r0, sl
 800b85e:	4659      	mov	r1, fp
 800b860:	f7f4 fd2a 	bl	80002b8 <__aeabi_dsub>
 800b864:	4632      	mov	r2, r6
 800b866:	463b      	mov	r3, r7
 800b868:	f7f4 fd26 	bl	80002b8 <__aeabi_dsub>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4640      	mov	r0, r8
 800b872:	4649      	mov	r1, r9
 800b874:	e7da      	b.n	800b82c <__kernel_cos+0xec>
 800b876:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b8b0 <__kernel_cos+0x170>
 800b87a:	e7db      	b.n	800b834 <__kernel_cos+0xf4>
 800b87c:	f3af 8000 	nop.w
 800b880:	be8838d4 	.word	0xbe8838d4
 800b884:	bda8fae9 	.word	0xbda8fae9
 800b888:	bdb4b1c4 	.word	0xbdb4b1c4
 800b88c:	3e21ee9e 	.word	0x3e21ee9e
 800b890:	809c52ad 	.word	0x809c52ad
 800b894:	3e927e4f 	.word	0x3e927e4f
 800b898:	19cb1590 	.word	0x19cb1590
 800b89c:	3efa01a0 	.word	0x3efa01a0
 800b8a0:	16c15177 	.word	0x16c15177
 800b8a4:	3f56c16c 	.word	0x3f56c16c
 800b8a8:	5555554c 	.word	0x5555554c
 800b8ac:	3fa55555 	.word	0x3fa55555
 800b8b0:	00000000 	.word	0x00000000
 800b8b4:	3ff00000 	.word	0x3ff00000
 800b8b8:	3fe00000 	.word	0x3fe00000
 800b8bc:	3fd33332 	.word	0x3fd33332
 800b8c0:	3ff00000 	.word	0x3ff00000
 800b8c4:	3fe90000 	.word	0x3fe90000
 800b8c8:	3fd20000 	.word	0x3fd20000
 800b8cc:	00000000 	.word	0x00000000

0800b8d0 <__kernel_rem_pio2>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	ed2d 8b02 	vpush	{d8}
 800b8d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b8dc:	f112 0f14 	cmn.w	r2, #20
 800b8e0:	9308      	str	r3, [sp, #32]
 800b8e2:	9101      	str	r1, [sp, #4]
 800b8e4:	4bc4      	ldr	r3, [pc, #784]	; (800bbf8 <__kernel_rem_pio2+0x328>)
 800b8e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b8e8:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8ee:	9302      	str	r3, [sp, #8]
 800b8f0:	9b08      	ldr	r3, [sp, #32]
 800b8f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8f6:	bfa8      	it	ge
 800b8f8:	1ed4      	subge	r4, r2, #3
 800b8fa:	9306      	str	r3, [sp, #24]
 800b8fc:	bfb2      	itee	lt
 800b8fe:	2400      	movlt	r4, #0
 800b900:	2318      	movge	r3, #24
 800b902:	fb94 f4f3 	sdivge	r4, r4, r3
 800b906:	f06f 0317 	mvn.w	r3, #23
 800b90a:	fb04 3303 	mla	r3, r4, r3, r3
 800b90e:	eb03 0a02 	add.w	sl, r3, r2
 800b912:	9b02      	ldr	r3, [sp, #8]
 800b914:	9a06      	ldr	r2, [sp, #24]
 800b916:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800bbe8 <__kernel_rem_pio2+0x318>
 800b91a:	eb03 0802 	add.w	r8, r3, r2
 800b91e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b920:	1aa7      	subs	r7, r4, r2
 800b922:	ae22      	add	r6, sp, #136	; 0x88
 800b924:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b928:	2500      	movs	r5, #0
 800b92a:	4545      	cmp	r5, r8
 800b92c:	dd13      	ble.n	800b956 <__kernel_rem_pio2+0x86>
 800b92e:	9b08      	ldr	r3, [sp, #32]
 800b930:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800bbe8 <__kernel_rem_pio2+0x318>
 800b934:	aa22      	add	r2, sp, #136	; 0x88
 800b936:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b93a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b93e:	f04f 0800 	mov.w	r8, #0
 800b942:	9b02      	ldr	r3, [sp, #8]
 800b944:	4598      	cmp	r8, r3
 800b946:	dc2f      	bgt.n	800b9a8 <__kernel_rem_pio2+0xd8>
 800b948:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b94c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b950:	462f      	mov	r7, r5
 800b952:	2600      	movs	r6, #0
 800b954:	e01b      	b.n	800b98e <__kernel_rem_pio2+0xbe>
 800b956:	42ef      	cmn	r7, r5
 800b958:	d407      	bmi.n	800b96a <__kernel_rem_pio2+0x9a>
 800b95a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b95e:	f7f4 fdf9 	bl	8000554 <__aeabi_i2d>
 800b962:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b966:	3501      	adds	r5, #1
 800b968:	e7df      	b.n	800b92a <__kernel_rem_pio2+0x5a>
 800b96a:	ec51 0b18 	vmov	r0, r1, d8
 800b96e:	e7f8      	b.n	800b962 <__kernel_rem_pio2+0x92>
 800b970:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b974:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b978:	f7f4 fe56 	bl	8000628 <__aeabi_dmul>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b984:	f7f4 fc9a 	bl	80002bc <__adddf3>
 800b988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b98c:	3601      	adds	r6, #1
 800b98e:	9b06      	ldr	r3, [sp, #24]
 800b990:	429e      	cmp	r6, r3
 800b992:	f1a7 0708 	sub.w	r7, r7, #8
 800b996:	ddeb      	ble.n	800b970 <__kernel_rem_pio2+0xa0>
 800b998:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b99c:	f108 0801 	add.w	r8, r8, #1
 800b9a0:	ecab 7b02 	vstmia	fp!, {d7}
 800b9a4:	3508      	adds	r5, #8
 800b9a6:	e7cc      	b.n	800b942 <__kernel_rem_pio2+0x72>
 800b9a8:	9b02      	ldr	r3, [sp, #8]
 800b9aa:	aa0e      	add	r2, sp, #56	; 0x38
 800b9ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9b0:	930d      	str	r3, [sp, #52]	; 0x34
 800b9b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b9b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b9b8:	9c02      	ldr	r4, [sp, #8]
 800b9ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b9bc:	00e3      	lsls	r3, r4, #3
 800b9be:	930a      	str	r3, [sp, #40]	; 0x28
 800b9c0:	ab9a      	add	r3, sp, #616	; 0x268
 800b9c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b9c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b9ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b9ce:	ab72      	add	r3, sp, #456	; 0x1c8
 800b9d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b9d4:	46c3      	mov	fp, r8
 800b9d6:	46a1      	mov	r9, r4
 800b9d8:	f1b9 0f00 	cmp.w	r9, #0
 800b9dc:	f1a5 0508 	sub.w	r5, r5, #8
 800b9e0:	dc77      	bgt.n	800bad2 <__kernel_rem_pio2+0x202>
 800b9e2:	ec47 6b10 	vmov	d0, r6, r7
 800b9e6:	4650      	mov	r0, sl
 800b9e8:	f000 fdae 	bl	800c548 <scalbn>
 800b9ec:	ec57 6b10 	vmov	r6, r7, d0
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b9f6:	ee10 0a10 	vmov	r0, s0
 800b9fa:	4639      	mov	r1, r7
 800b9fc:	f7f4 fe14 	bl	8000628 <__aeabi_dmul>
 800ba00:	ec41 0b10 	vmov	d0, r0, r1
 800ba04:	f000 fd20 	bl	800c448 <floor>
 800ba08:	4b7c      	ldr	r3, [pc, #496]	; (800bbfc <__kernel_rem_pio2+0x32c>)
 800ba0a:	ec51 0b10 	vmov	r0, r1, d0
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f7f4 fe0a 	bl	8000628 <__aeabi_dmul>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4630      	mov	r0, r6
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	f7f4 fc4c 	bl	80002b8 <__aeabi_dsub>
 800ba20:	460f      	mov	r7, r1
 800ba22:	4606      	mov	r6, r0
 800ba24:	f7f5 f8b0 	bl	8000b88 <__aeabi_d2iz>
 800ba28:	9004      	str	r0, [sp, #16]
 800ba2a:	f7f4 fd93 	bl	8000554 <__aeabi_i2d>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	4630      	mov	r0, r6
 800ba34:	4639      	mov	r1, r7
 800ba36:	f7f4 fc3f 	bl	80002b8 <__aeabi_dsub>
 800ba3a:	f1ba 0f00 	cmp.w	sl, #0
 800ba3e:	4606      	mov	r6, r0
 800ba40:	460f      	mov	r7, r1
 800ba42:	dd6d      	ble.n	800bb20 <__kernel_rem_pio2+0x250>
 800ba44:	1e62      	subs	r2, r4, #1
 800ba46:	ab0e      	add	r3, sp, #56	; 0x38
 800ba48:	9d04      	ldr	r5, [sp, #16]
 800ba4a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ba4e:	f1ca 0118 	rsb	r1, sl, #24
 800ba52:	fa40 f301 	asr.w	r3, r0, r1
 800ba56:	441d      	add	r5, r3
 800ba58:	408b      	lsls	r3, r1
 800ba5a:	1ac0      	subs	r0, r0, r3
 800ba5c:	ab0e      	add	r3, sp, #56	; 0x38
 800ba5e:	9504      	str	r5, [sp, #16]
 800ba60:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ba64:	f1ca 0317 	rsb	r3, sl, #23
 800ba68:	fa40 fb03 	asr.w	fp, r0, r3
 800ba6c:	f1bb 0f00 	cmp.w	fp, #0
 800ba70:	dd65      	ble.n	800bb3e <__kernel_rem_pio2+0x26e>
 800ba72:	9b04      	ldr	r3, [sp, #16]
 800ba74:	2200      	movs	r2, #0
 800ba76:	3301      	adds	r3, #1
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	4615      	mov	r5, r2
 800ba7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ba80:	4294      	cmp	r4, r2
 800ba82:	f300 809c 	bgt.w	800bbbe <__kernel_rem_pio2+0x2ee>
 800ba86:	f1ba 0f00 	cmp.w	sl, #0
 800ba8a:	dd07      	ble.n	800ba9c <__kernel_rem_pio2+0x1cc>
 800ba8c:	f1ba 0f01 	cmp.w	sl, #1
 800ba90:	f000 80c0 	beq.w	800bc14 <__kernel_rem_pio2+0x344>
 800ba94:	f1ba 0f02 	cmp.w	sl, #2
 800ba98:	f000 80c6 	beq.w	800bc28 <__kernel_rem_pio2+0x358>
 800ba9c:	f1bb 0f02 	cmp.w	fp, #2
 800baa0:	d14d      	bne.n	800bb3e <__kernel_rem_pio2+0x26e>
 800baa2:	4632      	mov	r2, r6
 800baa4:	463b      	mov	r3, r7
 800baa6:	4956      	ldr	r1, [pc, #344]	; (800bc00 <__kernel_rem_pio2+0x330>)
 800baa8:	2000      	movs	r0, #0
 800baaa:	f7f4 fc05 	bl	80002b8 <__aeabi_dsub>
 800baae:	4606      	mov	r6, r0
 800bab0:	460f      	mov	r7, r1
 800bab2:	2d00      	cmp	r5, #0
 800bab4:	d043      	beq.n	800bb3e <__kernel_rem_pio2+0x26e>
 800bab6:	4650      	mov	r0, sl
 800bab8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800bbf0 <__kernel_rem_pio2+0x320>
 800babc:	f000 fd44 	bl	800c548 <scalbn>
 800bac0:	4630      	mov	r0, r6
 800bac2:	4639      	mov	r1, r7
 800bac4:	ec53 2b10 	vmov	r2, r3, d0
 800bac8:	f7f4 fbf6 	bl	80002b8 <__aeabi_dsub>
 800bacc:	4606      	mov	r6, r0
 800bace:	460f      	mov	r7, r1
 800bad0:	e035      	b.n	800bb3e <__kernel_rem_pio2+0x26e>
 800bad2:	4b4c      	ldr	r3, [pc, #304]	; (800bc04 <__kernel_rem_pio2+0x334>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	4630      	mov	r0, r6
 800bad8:	4639      	mov	r1, r7
 800bada:	f7f4 fda5 	bl	8000628 <__aeabi_dmul>
 800bade:	f7f5 f853 	bl	8000b88 <__aeabi_d2iz>
 800bae2:	f7f4 fd37 	bl	8000554 <__aeabi_i2d>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	ec43 2b18 	vmov	d8, r2, r3
 800baee:	4b46      	ldr	r3, [pc, #280]	; (800bc08 <__kernel_rem_pio2+0x338>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	f7f4 fd99 	bl	8000628 <__aeabi_dmul>
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	4630      	mov	r0, r6
 800bafc:	4639      	mov	r1, r7
 800bafe:	f7f4 fbdb 	bl	80002b8 <__aeabi_dsub>
 800bb02:	f7f5 f841 	bl	8000b88 <__aeabi_d2iz>
 800bb06:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb0a:	f84b 0b04 	str.w	r0, [fp], #4
 800bb0e:	ec51 0b18 	vmov	r0, r1, d8
 800bb12:	f7f4 fbd3 	bl	80002bc <__adddf3>
 800bb16:	f109 39ff 	add.w	r9, r9, #4294967295
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460f      	mov	r7, r1
 800bb1e:	e75b      	b.n	800b9d8 <__kernel_rem_pio2+0x108>
 800bb20:	d106      	bne.n	800bb30 <__kernel_rem_pio2+0x260>
 800bb22:	1e63      	subs	r3, r4, #1
 800bb24:	aa0e      	add	r2, sp, #56	; 0x38
 800bb26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bb2a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bb2e:	e79d      	b.n	800ba6c <__kernel_rem_pio2+0x19c>
 800bb30:	4b36      	ldr	r3, [pc, #216]	; (800bc0c <__kernel_rem_pio2+0x33c>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	f7f4 fffe 	bl	8000b34 <__aeabi_dcmpge>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d13d      	bne.n	800bbb8 <__kernel_rem_pio2+0x2e8>
 800bb3c:	4683      	mov	fp, r0
 800bb3e:	2200      	movs	r2, #0
 800bb40:	2300      	movs	r3, #0
 800bb42:	4630      	mov	r0, r6
 800bb44:	4639      	mov	r1, r7
 800bb46:	f7f4 ffd7 	bl	8000af8 <__aeabi_dcmpeq>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	f000 80c0 	beq.w	800bcd0 <__kernel_rem_pio2+0x400>
 800bb50:	1e65      	subs	r5, r4, #1
 800bb52:	462b      	mov	r3, r5
 800bb54:	2200      	movs	r2, #0
 800bb56:	9902      	ldr	r1, [sp, #8]
 800bb58:	428b      	cmp	r3, r1
 800bb5a:	da6c      	bge.n	800bc36 <__kernel_rem_pio2+0x366>
 800bb5c:	2a00      	cmp	r2, #0
 800bb5e:	f000 8089 	beq.w	800bc74 <__kernel_rem_pio2+0x3a4>
 800bb62:	ab0e      	add	r3, sp, #56	; 0x38
 800bb64:	f1aa 0a18 	sub.w	sl, sl, #24
 800bb68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 80ad 	beq.w	800bccc <__kernel_rem_pio2+0x3fc>
 800bb72:	4650      	mov	r0, sl
 800bb74:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800bbf0 <__kernel_rem_pio2+0x320>
 800bb78:	f000 fce6 	bl	800c548 <scalbn>
 800bb7c:	ab9a      	add	r3, sp, #616	; 0x268
 800bb7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb82:	ec57 6b10 	vmov	r6, r7, d0
 800bb86:	00ec      	lsls	r4, r5, #3
 800bb88:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bb8c:	46aa      	mov	sl, r5
 800bb8e:	f1ba 0f00 	cmp.w	sl, #0
 800bb92:	f280 80d6 	bge.w	800bd42 <__kernel_rem_pio2+0x472>
 800bb96:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800bbe8 <__kernel_rem_pio2+0x318>
 800bb9a:	462e      	mov	r6, r5
 800bb9c:	2e00      	cmp	r6, #0
 800bb9e:	f2c0 8104 	blt.w	800bdaa <__kernel_rem_pio2+0x4da>
 800bba2:	ab72      	add	r3, sp, #456	; 0x1c8
 800bba4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bba8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800bc10 <__kernel_rem_pio2+0x340>
 800bbac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bbb0:	f04f 0800 	mov.w	r8, #0
 800bbb4:	1baf      	subs	r7, r5, r6
 800bbb6:	e0ea      	b.n	800bd8e <__kernel_rem_pio2+0x4be>
 800bbb8:	f04f 0b02 	mov.w	fp, #2
 800bbbc:	e759      	b.n	800ba72 <__kernel_rem_pio2+0x1a2>
 800bbbe:	f8d8 3000 	ldr.w	r3, [r8]
 800bbc2:	b955      	cbnz	r5, 800bbda <__kernel_rem_pio2+0x30a>
 800bbc4:	b123      	cbz	r3, 800bbd0 <__kernel_rem_pio2+0x300>
 800bbc6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bbca:	f8c8 3000 	str.w	r3, [r8]
 800bbce:	2301      	movs	r3, #1
 800bbd0:	3201      	adds	r2, #1
 800bbd2:	f108 0804 	add.w	r8, r8, #4
 800bbd6:	461d      	mov	r5, r3
 800bbd8:	e752      	b.n	800ba80 <__kernel_rem_pio2+0x1b0>
 800bbda:	1acb      	subs	r3, r1, r3
 800bbdc:	f8c8 3000 	str.w	r3, [r8]
 800bbe0:	462b      	mov	r3, r5
 800bbe2:	e7f5      	b.n	800bbd0 <__kernel_rem_pio2+0x300>
 800bbe4:	f3af 8000 	nop.w
	...
 800bbf4:	3ff00000 	.word	0x3ff00000
 800bbf8:	0800cfb0 	.word	0x0800cfb0
 800bbfc:	40200000 	.word	0x40200000
 800bc00:	3ff00000 	.word	0x3ff00000
 800bc04:	3e700000 	.word	0x3e700000
 800bc08:	41700000 	.word	0x41700000
 800bc0c:	3fe00000 	.word	0x3fe00000
 800bc10:	0800cf70 	.word	0x0800cf70
 800bc14:	1e62      	subs	r2, r4, #1
 800bc16:	ab0e      	add	r3, sp, #56	; 0x38
 800bc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc20:	a90e      	add	r1, sp, #56	; 0x38
 800bc22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bc26:	e739      	b.n	800ba9c <__kernel_rem_pio2+0x1cc>
 800bc28:	1e62      	subs	r2, r4, #1
 800bc2a:	ab0e      	add	r3, sp, #56	; 0x38
 800bc2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc34:	e7f4      	b.n	800bc20 <__kernel_rem_pio2+0x350>
 800bc36:	a90e      	add	r1, sp, #56	; 0x38
 800bc38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	e789      	b.n	800bb56 <__kernel_rem_pio2+0x286>
 800bc42:	3301      	adds	r3, #1
 800bc44:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bc48:	2900      	cmp	r1, #0
 800bc4a:	d0fa      	beq.n	800bc42 <__kernel_rem_pio2+0x372>
 800bc4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc4e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800bc52:	446a      	add	r2, sp
 800bc54:	3a98      	subs	r2, #152	; 0x98
 800bc56:	920a      	str	r2, [sp, #40]	; 0x28
 800bc58:	9a08      	ldr	r2, [sp, #32]
 800bc5a:	18e3      	adds	r3, r4, r3
 800bc5c:	18a5      	adds	r5, r4, r2
 800bc5e:	aa22      	add	r2, sp, #136	; 0x88
 800bc60:	f104 0801 	add.w	r8, r4, #1
 800bc64:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800bc68:	9304      	str	r3, [sp, #16]
 800bc6a:	9b04      	ldr	r3, [sp, #16]
 800bc6c:	4543      	cmp	r3, r8
 800bc6e:	da04      	bge.n	800bc7a <__kernel_rem_pio2+0x3aa>
 800bc70:	461c      	mov	r4, r3
 800bc72:	e6a3      	b.n	800b9bc <__kernel_rem_pio2+0xec>
 800bc74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc76:	2301      	movs	r3, #1
 800bc78:	e7e4      	b.n	800bc44 <__kernel_rem_pio2+0x374>
 800bc7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bc80:	f7f4 fc68 	bl	8000554 <__aeabi_i2d>
 800bc84:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bc88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc8a:	46ab      	mov	fp, r5
 800bc8c:	461c      	mov	r4, r3
 800bc8e:	f04f 0900 	mov.w	r9, #0
 800bc92:	2600      	movs	r6, #0
 800bc94:	2700      	movs	r7, #0
 800bc96:	9b06      	ldr	r3, [sp, #24]
 800bc98:	4599      	cmp	r9, r3
 800bc9a:	dd06      	ble.n	800bcaa <__kernel_rem_pio2+0x3da>
 800bc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc9e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bca2:	f108 0801 	add.w	r8, r8, #1
 800bca6:	930a      	str	r3, [sp, #40]	; 0x28
 800bca8:	e7df      	b.n	800bc6a <__kernel_rem_pio2+0x39a>
 800bcaa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bcae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bcb2:	f7f4 fcb9 	bl	8000628 <__aeabi_dmul>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	460b      	mov	r3, r1
 800bcba:	4630      	mov	r0, r6
 800bcbc:	4639      	mov	r1, r7
 800bcbe:	f7f4 fafd 	bl	80002bc <__adddf3>
 800bcc2:	f109 0901 	add.w	r9, r9, #1
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	460f      	mov	r7, r1
 800bcca:	e7e4      	b.n	800bc96 <__kernel_rem_pio2+0x3c6>
 800bccc:	3d01      	subs	r5, #1
 800bcce:	e748      	b.n	800bb62 <__kernel_rem_pio2+0x292>
 800bcd0:	ec47 6b10 	vmov	d0, r6, r7
 800bcd4:	f1ca 0000 	rsb	r0, sl, #0
 800bcd8:	f000 fc36 	bl	800c548 <scalbn>
 800bcdc:	ec57 6b10 	vmov	r6, r7, d0
 800bce0:	4ba0      	ldr	r3, [pc, #640]	; (800bf64 <__kernel_rem_pio2+0x694>)
 800bce2:	ee10 0a10 	vmov	r0, s0
 800bce6:	2200      	movs	r2, #0
 800bce8:	4639      	mov	r1, r7
 800bcea:	f7f4 ff23 	bl	8000b34 <__aeabi_dcmpge>
 800bcee:	b1f8      	cbz	r0, 800bd30 <__kernel_rem_pio2+0x460>
 800bcf0:	4b9d      	ldr	r3, [pc, #628]	; (800bf68 <__kernel_rem_pio2+0x698>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	4639      	mov	r1, r7
 800bcf8:	f7f4 fc96 	bl	8000628 <__aeabi_dmul>
 800bcfc:	f7f4 ff44 	bl	8000b88 <__aeabi_d2iz>
 800bd00:	4680      	mov	r8, r0
 800bd02:	f7f4 fc27 	bl	8000554 <__aeabi_i2d>
 800bd06:	4b97      	ldr	r3, [pc, #604]	; (800bf64 <__kernel_rem_pio2+0x694>)
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f7f4 fc8d 	bl	8000628 <__aeabi_dmul>
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4602      	mov	r2, r0
 800bd12:	4639      	mov	r1, r7
 800bd14:	4630      	mov	r0, r6
 800bd16:	f7f4 facf 	bl	80002b8 <__aeabi_dsub>
 800bd1a:	f7f4 ff35 	bl	8000b88 <__aeabi_d2iz>
 800bd1e:	1c65      	adds	r5, r4, #1
 800bd20:	ab0e      	add	r3, sp, #56	; 0x38
 800bd22:	f10a 0a18 	add.w	sl, sl, #24
 800bd26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bd2a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bd2e:	e720      	b.n	800bb72 <__kernel_rem_pio2+0x2a2>
 800bd30:	4630      	mov	r0, r6
 800bd32:	4639      	mov	r1, r7
 800bd34:	f7f4 ff28 	bl	8000b88 <__aeabi_d2iz>
 800bd38:	ab0e      	add	r3, sp, #56	; 0x38
 800bd3a:	4625      	mov	r5, r4
 800bd3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bd40:	e717      	b.n	800bb72 <__kernel_rem_pio2+0x2a2>
 800bd42:	ab0e      	add	r3, sp, #56	; 0x38
 800bd44:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bd48:	f7f4 fc04 	bl	8000554 <__aeabi_i2d>
 800bd4c:	4632      	mov	r2, r6
 800bd4e:	463b      	mov	r3, r7
 800bd50:	f7f4 fc6a 	bl	8000628 <__aeabi_dmul>
 800bd54:	4b84      	ldr	r3, [pc, #528]	; (800bf68 <__kernel_rem_pio2+0x698>)
 800bd56:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	4639      	mov	r1, r7
 800bd60:	f7f4 fc62 	bl	8000628 <__aeabi_dmul>
 800bd64:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd68:	4606      	mov	r6, r0
 800bd6a:	460f      	mov	r7, r1
 800bd6c:	e70f      	b.n	800bb8e <__kernel_rem_pio2+0x2be>
 800bd6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bd72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bd76:	f7f4 fc57 	bl	8000628 <__aeabi_dmul>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd82:	f7f4 fa9b 	bl	80002bc <__adddf3>
 800bd86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd8a:	f108 0801 	add.w	r8, r8, #1
 800bd8e:	9b02      	ldr	r3, [sp, #8]
 800bd90:	4598      	cmp	r8, r3
 800bd92:	dc01      	bgt.n	800bd98 <__kernel_rem_pio2+0x4c8>
 800bd94:	45b8      	cmp	r8, r7
 800bd96:	ddea      	ble.n	800bd6e <__kernel_rem_pio2+0x49e>
 800bd98:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bd9c:	ab4a      	add	r3, sp, #296	; 0x128
 800bd9e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bda2:	ed87 7b00 	vstr	d7, [r7]
 800bda6:	3e01      	subs	r6, #1
 800bda8:	e6f8      	b.n	800bb9c <__kernel_rem_pio2+0x2cc>
 800bdaa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	dc0b      	bgt.n	800bdc8 <__kernel_rem_pio2+0x4f8>
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dc35      	bgt.n	800be20 <__kernel_rem_pio2+0x550>
 800bdb4:	d059      	beq.n	800be6a <__kernel_rem_pio2+0x59a>
 800bdb6:	9b04      	ldr	r3, [sp, #16]
 800bdb8:	f003 0007 	and.w	r0, r3, #7
 800bdbc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bdc0:	ecbd 8b02 	vpop	{d8}
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d1f3      	bne.n	800bdb6 <__kernel_rem_pio2+0x4e6>
 800bdce:	ab4a      	add	r3, sp, #296	; 0x128
 800bdd0:	4423      	add	r3, r4
 800bdd2:	9306      	str	r3, [sp, #24]
 800bdd4:	461c      	mov	r4, r3
 800bdd6:	469a      	mov	sl, r3
 800bdd8:	9502      	str	r5, [sp, #8]
 800bdda:	9b02      	ldr	r3, [sp, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f1aa 0a08 	sub.w	sl, sl, #8
 800bde2:	dc6b      	bgt.n	800bebc <__kernel_rem_pio2+0x5ec>
 800bde4:	46aa      	mov	sl, r5
 800bde6:	f1ba 0f01 	cmp.w	sl, #1
 800bdea:	f1a4 0408 	sub.w	r4, r4, #8
 800bdee:	f300 8085 	bgt.w	800befc <__kernel_rem_pio2+0x62c>
 800bdf2:	9c06      	ldr	r4, [sp, #24]
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	3408      	adds	r4, #8
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	2d01      	cmp	r5, #1
 800bdfc:	f300 809d 	bgt.w	800bf3a <__kernel_rem_pio2+0x66a>
 800be00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800be04:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800be08:	f1bb 0f00 	cmp.w	fp, #0
 800be0c:	f040 809b 	bne.w	800bf46 <__kernel_rem_pio2+0x676>
 800be10:	9b01      	ldr	r3, [sp, #4]
 800be12:	e9c3 5600 	strd	r5, r6, [r3]
 800be16:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800be1a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800be1e:	e7ca      	b.n	800bdb6 <__kernel_rem_pio2+0x4e6>
 800be20:	3408      	adds	r4, #8
 800be22:	ab4a      	add	r3, sp, #296	; 0x128
 800be24:	441c      	add	r4, r3
 800be26:	462e      	mov	r6, r5
 800be28:	2000      	movs	r0, #0
 800be2a:	2100      	movs	r1, #0
 800be2c:	2e00      	cmp	r6, #0
 800be2e:	da36      	bge.n	800be9e <__kernel_rem_pio2+0x5ce>
 800be30:	f1bb 0f00 	cmp.w	fp, #0
 800be34:	d039      	beq.n	800beaa <__kernel_rem_pio2+0x5da>
 800be36:	4602      	mov	r2, r0
 800be38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be3c:	9c01      	ldr	r4, [sp, #4]
 800be3e:	e9c4 2300 	strd	r2, r3, [r4]
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800be4a:	f7f4 fa35 	bl	80002b8 <__aeabi_dsub>
 800be4e:	ae4c      	add	r6, sp, #304	; 0x130
 800be50:	2401      	movs	r4, #1
 800be52:	42a5      	cmp	r5, r4
 800be54:	da2c      	bge.n	800beb0 <__kernel_rem_pio2+0x5e0>
 800be56:	f1bb 0f00 	cmp.w	fp, #0
 800be5a:	d002      	beq.n	800be62 <__kernel_rem_pio2+0x592>
 800be5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be60:	4619      	mov	r1, r3
 800be62:	9b01      	ldr	r3, [sp, #4]
 800be64:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800be68:	e7a5      	b.n	800bdb6 <__kernel_rem_pio2+0x4e6>
 800be6a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800be6e:	eb0d 0403 	add.w	r4, sp, r3
 800be72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800be76:	2000      	movs	r0, #0
 800be78:	2100      	movs	r1, #0
 800be7a:	2d00      	cmp	r5, #0
 800be7c:	da09      	bge.n	800be92 <__kernel_rem_pio2+0x5c2>
 800be7e:	f1bb 0f00 	cmp.w	fp, #0
 800be82:	d002      	beq.n	800be8a <__kernel_rem_pio2+0x5ba>
 800be84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be88:	4619      	mov	r1, r3
 800be8a:	9b01      	ldr	r3, [sp, #4]
 800be8c:	e9c3 0100 	strd	r0, r1, [r3]
 800be90:	e791      	b.n	800bdb6 <__kernel_rem_pio2+0x4e6>
 800be92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800be96:	f7f4 fa11 	bl	80002bc <__adddf3>
 800be9a:	3d01      	subs	r5, #1
 800be9c:	e7ed      	b.n	800be7a <__kernel_rem_pio2+0x5aa>
 800be9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bea2:	f7f4 fa0b 	bl	80002bc <__adddf3>
 800bea6:	3e01      	subs	r6, #1
 800bea8:	e7c0      	b.n	800be2c <__kernel_rem_pio2+0x55c>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	e7c5      	b.n	800be3c <__kernel_rem_pio2+0x56c>
 800beb0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800beb4:	f7f4 fa02 	bl	80002bc <__adddf3>
 800beb8:	3401      	adds	r4, #1
 800beba:	e7ca      	b.n	800be52 <__kernel_rem_pio2+0x582>
 800bebc:	e9da 8900 	ldrd	r8, r9, [sl]
 800bec0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bec4:	9b02      	ldr	r3, [sp, #8]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	9302      	str	r3, [sp, #8]
 800beca:	4632      	mov	r2, r6
 800becc:	463b      	mov	r3, r7
 800bece:	4640      	mov	r0, r8
 800bed0:	4649      	mov	r1, r9
 800bed2:	f7f4 f9f3 	bl	80002bc <__adddf3>
 800bed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	4640      	mov	r0, r8
 800bee0:	4649      	mov	r1, r9
 800bee2:	f7f4 f9e9 	bl	80002b8 <__aeabi_dsub>
 800bee6:	4632      	mov	r2, r6
 800bee8:	463b      	mov	r3, r7
 800beea:	f7f4 f9e7 	bl	80002bc <__adddf3>
 800beee:	ed9d 7b08 	vldr	d7, [sp, #32]
 800bef2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bef6:	ed8a 7b00 	vstr	d7, [sl]
 800befa:	e76e      	b.n	800bdda <__kernel_rem_pio2+0x50a>
 800befc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bf00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800bf04:	4640      	mov	r0, r8
 800bf06:	4632      	mov	r2, r6
 800bf08:	463b      	mov	r3, r7
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	f7f4 f9d6 	bl	80002bc <__adddf3>
 800bf10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4640      	mov	r0, r8
 800bf1a:	4649      	mov	r1, r9
 800bf1c:	f7f4 f9cc 	bl	80002b8 <__aeabi_dsub>
 800bf20:	4632      	mov	r2, r6
 800bf22:	463b      	mov	r3, r7
 800bf24:	f7f4 f9ca 	bl	80002bc <__adddf3>
 800bf28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf30:	ed84 7b00 	vstr	d7, [r4]
 800bf34:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf38:	e755      	b.n	800bde6 <__kernel_rem_pio2+0x516>
 800bf3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf3e:	f7f4 f9bd 	bl	80002bc <__adddf3>
 800bf42:	3d01      	subs	r5, #1
 800bf44:	e759      	b.n	800bdfa <__kernel_rem_pio2+0x52a>
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	9a01      	ldr	r2, [sp, #4]
 800bf4a:	601d      	str	r5, [r3, #0]
 800bf4c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800bf50:	605c      	str	r4, [r3, #4]
 800bf52:	609f      	str	r7, [r3, #8]
 800bf54:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bf58:	60d3      	str	r3, [r2, #12]
 800bf5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf5e:	6110      	str	r0, [r2, #16]
 800bf60:	6153      	str	r3, [r2, #20]
 800bf62:	e728      	b.n	800bdb6 <__kernel_rem_pio2+0x4e6>
 800bf64:	41700000 	.word	0x41700000
 800bf68:	3e700000 	.word	0x3e700000
 800bf6c:	00000000 	.word	0x00000000

0800bf70 <__kernel_sin>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	ed2d 8b04 	vpush	{d8-d9}
 800bf78:	eeb0 8a41 	vmov.f32	s16, s2
 800bf7c:	eef0 8a61 	vmov.f32	s17, s3
 800bf80:	ec55 4b10 	vmov	r4, r5, d0
 800bf84:	b083      	sub	sp, #12
 800bf86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bf8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bf8e:	9001      	str	r0, [sp, #4]
 800bf90:	da06      	bge.n	800bfa0 <__kernel_sin+0x30>
 800bf92:	ee10 0a10 	vmov	r0, s0
 800bf96:	4629      	mov	r1, r5
 800bf98:	f7f4 fdf6 	bl	8000b88 <__aeabi_d2iz>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d051      	beq.n	800c044 <__kernel_sin+0xd4>
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	462b      	mov	r3, r5
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f7f4 fb3e 	bl	8000628 <__aeabi_dmul>
 800bfac:	4682      	mov	sl, r0
 800bfae:	468b      	mov	fp, r1
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	f7f4 fb36 	bl	8000628 <__aeabi_dmul>
 800bfbc:	a341      	add	r3, pc, #260	; (adr r3, 800c0c4 <__kernel_sin+0x154>)
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	4680      	mov	r8, r0
 800bfc4:	4689      	mov	r9, r1
 800bfc6:	4650      	mov	r0, sl
 800bfc8:	4659      	mov	r1, fp
 800bfca:	f7f4 fb2d 	bl	8000628 <__aeabi_dmul>
 800bfce:	a33f      	add	r3, pc, #252	; (adr r3, 800c0cc <__kernel_sin+0x15c>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	f7f4 f970 	bl	80002b8 <__aeabi_dsub>
 800bfd8:	4652      	mov	r2, sl
 800bfda:	465b      	mov	r3, fp
 800bfdc:	f7f4 fb24 	bl	8000628 <__aeabi_dmul>
 800bfe0:	a33c      	add	r3, pc, #240	; (adr r3, 800c0d4 <__kernel_sin+0x164>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f7f4 f969 	bl	80002bc <__adddf3>
 800bfea:	4652      	mov	r2, sl
 800bfec:	465b      	mov	r3, fp
 800bfee:	f7f4 fb1b 	bl	8000628 <__aeabi_dmul>
 800bff2:	a33a      	add	r3, pc, #232	; (adr r3, 800c0dc <__kernel_sin+0x16c>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	f7f4 f95e 	bl	80002b8 <__aeabi_dsub>
 800bffc:	4652      	mov	r2, sl
 800bffe:	465b      	mov	r3, fp
 800c000:	f7f4 fb12 	bl	8000628 <__aeabi_dmul>
 800c004:	a337      	add	r3, pc, #220	; (adr r3, 800c0e4 <__kernel_sin+0x174>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 f957 	bl	80002bc <__adddf3>
 800c00e:	9b01      	ldr	r3, [sp, #4]
 800c010:	4606      	mov	r6, r0
 800c012:	460f      	mov	r7, r1
 800c014:	b9eb      	cbnz	r3, 800c052 <__kernel_sin+0xe2>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4650      	mov	r0, sl
 800c01c:	4659      	mov	r1, fp
 800c01e:	f7f4 fb03 	bl	8000628 <__aeabi_dmul>
 800c022:	a325      	add	r3, pc, #148	; (adr r3, 800c0b8 <__kernel_sin+0x148>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	f7f4 f946 	bl	80002b8 <__aeabi_dsub>
 800c02c:	4642      	mov	r2, r8
 800c02e:	464b      	mov	r3, r9
 800c030:	f7f4 fafa 	bl	8000628 <__aeabi_dmul>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4620      	mov	r0, r4
 800c03a:	4629      	mov	r1, r5
 800c03c:	f7f4 f93e 	bl	80002bc <__adddf3>
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	ec45 4b10 	vmov	d0, r4, r5
 800c048:	b003      	add	sp, #12
 800c04a:	ecbd 8b04 	vpop	{d8-d9}
 800c04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c052:	4b1b      	ldr	r3, [pc, #108]	; (800c0c0 <__kernel_sin+0x150>)
 800c054:	ec51 0b18 	vmov	r0, r1, d8
 800c058:	2200      	movs	r2, #0
 800c05a:	f7f4 fae5 	bl	8000628 <__aeabi_dmul>
 800c05e:	4632      	mov	r2, r6
 800c060:	ec41 0b19 	vmov	d9, r0, r1
 800c064:	463b      	mov	r3, r7
 800c066:	4640      	mov	r0, r8
 800c068:	4649      	mov	r1, r9
 800c06a:	f7f4 fadd 	bl	8000628 <__aeabi_dmul>
 800c06e:	4602      	mov	r2, r0
 800c070:	460b      	mov	r3, r1
 800c072:	ec51 0b19 	vmov	r0, r1, d9
 800c076:	f7f4 f91f 	bl	80002b8 <__aeabi_dsub>
 800c07a:	4652      	mov	r2, sl
 800c07c:	465b      	mov	r3, fp
 800c07e:	f7f4 fad3 	bl	8000628 <__aeabi_dmul>
 800c082:	ec53 2b18 	vmov	r2, r3, d8
 800c086:	f7f4 f917 	bl	80002b8 <__aeabi_dsub>
 800c08a:	a30b      	add	r3, pc, #44	; (adr r3, 800c0b8 <__kernel_sin+0x148>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	4606      	mov	r6, r0
 800c092:	460f      	mov	r7, r1
 800c094:	4640      	mov	r0, r8
 800c096:	4649      	mov	r1, r9
 800c098:	f7f4 fac6 	bl	8000628 <__aeabi_dmul>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	4639      	mov	r1, r7
 800c0a4:	f7f4 f90a 	bl	80002bc <__adddf3>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f7f4 f902 	bl	80002b8 <__aeabi_dsub>
 800c0b4:	e7c4      	b.n	800c040 <__kernel_sin+0xd0>
 800c0b6:	bf00      	nop
 800c0b8:	55555549 	.word	0x55555549
 800c0bc:	3fc55555 	.word	0x3fc55555
 800c0c0:	3fe00000 	.word	0x3fe00000
 800c0c4:	5acfd57c 	.word	0x5acfd57c
 800c0c8:	3de5d93a 	.word	0x3de5d93a
 800c0cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c0d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c0d4:	57b1fe7d 	.word	0x57b1fe7d
 800c0d8:	3ec71de3 	.word	0x3ec71de3
 800c0dc:	19c161d5 	.word	0x19c161d5
 800c0e0:	3f2a01a0 	.word	0x3f2a01a0
 800c0e4:	1110f8a6 	.word	0x1110f8a6
 800c0e8:	3f811111 	.word	0x3f811111
 800c0ec:	00000000 	.word	0x00000000

0800c0f0 <atan>:
 800c0f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	ec55 4b10 	vmov	r4, r5, d0
 800c0f8:	4bc3      	ldr	r3, [pc, #780]	; (800c408 <atan+0x318>)
 800c0fa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0fe:	429e      	cmp	r6, r3
 800c100:	46ab      	mov	fp, r5
 800c102:	dd18      	ble.n	800c136 <atan+0x46>
 800c104:	4bc1      	ldr	r3, [pc, #772]	; (800c40c <atan+0x31c>)
 800c106:	429e      	cmp	r6, r3
 800c108:	dc01      	bgt.n	800c10e <atan+0x1e>
 800c10a:	d109      	bne.n	800c120 <atan+0x30>
 800c10c:	b144      	cbz	r4, 800c120 <atan+0x30>
 800c10e:	4622      	mov	r2, r4
 800c110:	462b      	mov	r3, r5
 800c112:	4620      	mov	r0, r4
 800c114:	4629      	mov	r1, r5
 800c116:	f7f4 f8d1 	bl	80002bc <__adddf3>
 800c11a:	4604      	mov	r4, r0
 800c11c:	460d      	mov	r5, r1
 800c11e:	e006      	b.n	800c12e <atan+0x3e>
 800c120:	f1bb 0f00 	cmp.w	fp, #0
 800c124:	f300 8131 	bgt.w	800c38a <atan+0x29a>
 800c128:	a59b      	add	r5, pc, #620	; (adr r5, 800c398 <atan+0x2a8>)
 800c12a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c12e:	ec45 4b10 	vmov	d0, r4, r5
 800c132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c136:	4bb6      	ldr	r3, [pc, #728]	; (800c410 <atan+0x320>)
 800c138:	429e      	cmp	r6, r3
 800c13a:	dc14      	bgt.n	800c166 <atan+0x76>
 800c13c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c140:	429e      	cmp	r6, r3
 800c142:	dc0d      	bgt.n	800c160 <atan+0x70>
 800c144:	a396      	add	r3, pc, #600	; (adr r3, 800c3a0 <atan+0x2b0>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	ee10 0a10 	vmov	r0, s0
 800c14e:	4629      	mov	r1, r5
 800c150:	f7f4 f8b4 	bl	80002bc <__adddf3>
 800c154:	4baf      	ldr	r3, [pc, #700]	; (800c414 <atan+0x324>)
 800c156:	2200      	movs	r2, #0
 800c158:	f7f4 fcf6 	bl	8000b48 <__aeabi_dcmpgt>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d1e6      	bne.n	800c12e <atan+0x3e>
 800c160:	f04f 3aff 	mov.w	sl, #4294967295
 800c164:	e02b      	b.n	800c1be <atan+0xce>
 800c166:	f000 f963 	bl	800c430 <fabs>
 800c16a:	4bab      	ldr	r3, [pc, #684]	; (800c418 <atan+0x328>)
 800c16c:	429e      	cmp	r6, r3
 800c16e:	ec55 4b10 	vmov	r4, r5, d0
 800c172:	f300 80bf 	bgt.w	800c2f4 <atan+0x204>
 800c176:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c17a:	429e      	cmp	r6, r3
 800c17c:	f300 80a0 	bgt.w	800c2c0 <atan+0x1d0>
 800c180:	ee10 2a10 	vmov	r2, s0
 800c184:	ee10 0a10 	vmov	r0, s0
 800c188:	462b      	mov	r3, r5
 800c18a:	4629      	mov	r1, r5
 800c18c:	f7f4 f896 	bl	80002bc <__adddf3>
 800c190:	4ba0      	ldr	r3, [pc, #640]	; (800c414 <atan+0x324>)
 800c192:	2200      	movs	r2, #0
 800c194:	f7f4 f890 	bl	80002b8 <__aeabi_dsub>
 800c198:	2200      	movs	r2, #0
 800c19a:	4606      	mov	r6, r0
 800c19c:	460f      	mov	r7, r1
 800c19e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	f7f4 f889 	bl	80002bc <__adddf3>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	f7f4 fb63 	bl	800087c <__aeabi_ddiv>
 800c1b6:	f04f 0a00 	mov.w	sl, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	460d      	mov	r5, r1
 800c1be:	4622      	mov	r2, r4
 800c1c0:	462b      	mov	r3, r5
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	f7f4 fa2f 	bl	8000628 <__aeabi_dmul>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4680      	mov	r8, r0
 800c1d0:	4689      	mov	r9, r1
 800c1d2:	f7f4 fa29 	bl	8000628 <__aeabi_dmul>
 800c1d6:	a374      	add	r3, pc, #464	; (adr r3, 800c3a8 <atan+0x2b8>)
 800c1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1dc:	4606      	mov	r6, r0
 800c1de:	460f      	mov	r7, r1
 800c1e0:	f7f4 fa22 	bl	8000628 <__aeabi_dmul>
 800c1e4:	a372      	add	r3, pc, #456	; (adr r3, 800c3b0 <atan+0x2c0>)
 800c1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ea:	f7f4 f867 	bl	80002bc <__adddf3>
 800c1ee:	4632      	mov	r2, r6
 800c1f0:	463b      	mov	r3, r7
 800c1f2:	f7f4 fa19 	bl	8000628 <__aeabi_dmul>
 800c1f6:	a370      	add	r3, pc, #448	; (adr r3, 800c3b8 <atan+0x2c8>)
 800c1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fc:	f7f4 f85e 	bl	80002bc <__adddf3>
 800c200:	4632      	mov	r2, r6
 800c202:	463b      	mov	r3, r7
 800c204:	f7f4 fa10 	bl	8000628 <__aeabi_dmul>
 800c208:	a36d      	add	r3, pc, #436	; (adr r3, 800c3c0 <atan+0x2d0>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 f855 	bl	80002bc <__adddf3>
 800c212:	4632      	mov	r2, r6
 800c214:	463b      	mov	r3, r7
 800c216:	f7f4 fa07 	bl	8000628 <__aeabi_dmul>
 800c21a:	a36b      	add	r3, pc, #428	; (adr r3, 800c3c8 <atan+0x2d8>)
 800c21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c220:	f7f4 f84c 	bl	80002bc <__adddf3>
 800c224:	4632      	mov	r2, r6
 800c226:	463b      	mov	r3, r7
 800c228:	f7f4 f9fe 	bl	8000628 <__aeabi_dmul>
 800c22c:	a368      	add	r3, pc, #416	; (adr r3, 800c3d0 <atan+0x2e0>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	f7f4 f843 	bl	80002bc <__adddf3>
 800c236:	4642      	mov	r2, r8
 800c238:	464b      	mov	r3, r9
 800c23a:	f7f4 f9f5 	bl	8000628 <__aeabi_dmul>
 800c23e:	a366      	add	r3, pc, #408	; (adr r3, 800c3d8 <atan+0x2e8>)
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	4680      	mov	r8, r0
 800c246:	4689      	mov	r9, r1
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 f9ec 	bl	8000628 <__aeabi_dmul>
 800c250:	a363      	add	r3, pc, #396	; (adr r3, 800c3e0 <atan+0x2f0>)
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f7f4 f82f 	bl	80002b8 <__aeabi_dsub>
 800c25a:	4632      	mov	r2, r6
 800c25c:	463b      	mov	r3, r7
 800c25e:	f7f4 f9e3 	bl	8000628 <__aeabi_dmul>
 800c262:	a361      	add	r3, pc, #388	; (adr r3, 800c3e8 <atan+0x2f8>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f4 f826 	bl	80002b8 <__aeabi_dsub>
 800c26c:	4632      	mov	r2, r6
 800c26e:	463b      	mov	r3, r7
 800c270:	f7f4 f9da 	bl	8000628 <__aeabi_dmul>
 800c274:	a35e      	add	r3, pc, #376	; (adr r3, 800c3f0 <atan+0x300>)
 800c276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27a:	f7f4 f81d 	bl	80002b8 <__aeabi_dsub>
 800c27e:	4632      	mov	r2, r6
 800c280:	463b      	mov	r3, r7
 800c282:	f7f4 f9d1 	bl	8000628 <__aeabi_dmul>
 800c286:	a35c      	add	r3, pc, #368	; (adr r3, 800c3f8 <atan+0x308>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f4 f814 	bl	80002b8 <__aeabi_dsub>
 800c290:	4632      	mov	r2, r6
 800c292:	463b      	mov	r3, r7
 800c294:	f7f4 f9c8 	bl	8000628 <__aeabi_dmul>
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	4640      	mov	r0, r8
 800c29e:	4649      	mov	r1, r9
 800c2a0:	f7f4 f80c 	bl	80002bc <__adddf3>
 800c2a4:	4622      	mov	r2, r4
 800c2a6:	462b      	mov	r3, r5
 800c2a8:	f7f4 f9be 	bl	8000628 <__aeabi_dmul>
 800c2ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	d14b      	bne.n	800c34e <atan+0x25e>
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	f7f3 fffd 	bl	80002b8 <__aeabi_dsub>
 800c2be:	e72c      	b.n	800c11a <atan+0x2a>
 800c2c0:	ee10 0a10 	vmov	r0, s0
 800c2c4:	4b53      	ldr	r3, [pc, #332]	; (800c414 <atan+0x324>)
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	f7f3 fff5 	bl	80002b8 <__aeabi_dsub>
 800c2ce:	4b51      	ldr	r3, [pc, #324]	; (800c414 <atan+0x324>)
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	460f      	mov	r7, r1
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	4629      	mov	r1, r5
 800c2da:	f7f3 ffef 	bl	80002bc <__adddf3>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	4639      	mov	r1, r7
 800c2e6:	f7f4 fac9 	bl	800087c <__aeabi_ddiv>
 800c2ea:	f04f 0a01 	mov.w	sl, #1
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	e764      	b.n	800c1be <atan+0xce>
 800c2f4:	4b49      	ldr	r3, [pc, #292]	; (800c41c <atan+0x32c>)
 800c2f6:	429e      	cmp	r6, r3
 800c2f8:	da1d      	bge.n	800c336 <atan+0x246>
 800c2fa:	ee10 0a10 	vmov	r0, s0
 800c2fe:	4b48      	ldr	r3, [pc, #288]	; (800c420 <atan+0x330>)
 800c300:	2200      	movs	r2, #0
 800c302:	4629      	mov	r1, r5
 800c304:	f7f3 ffd8 	bl	80002b8 <__aeabi_dsub>
 800c308:	4b45      	ldr	r3, [pc, #276]	; (800c420 <atan+0x330>)
 800c30a:	4606      	mov	r6, r0
 800c30c:	460f      	mov	r7, r1
 800c30e:	2200      	movs	r2, #0
 800c310:	4620      	mov	r0, r4
 800c312:	4629      	mov	r1, r5
 800c314:	f7f4 f988 	bl	8000628 <__aeabi_dmul>
 800c318:	4b3e      	ldr	r3, [pc, #248]	; (800c414 <atan+0x324>)
 800c31a:	2200      	movs	r2, #0
 800c31c:	f7f3 ffce 	bl	80002bc <__adddf3>
 800c320:	4602      	mov	r2, r0
 800c322:	460b      	mov	r3, r1
 800c324:	4630      	mov	r0, r6
 800c326:	4639      	mov	r1, r7
 800c328:	f7f4 faa8 	bl	800087c <__aeabi_ddiv>
 800c32c:	f04f 0a02 	mov.w	sl, #2
 800c330:	4604      	mov	r4, r0
 800c332:	460d      	mov	r5, r1
 800c334:	e743      	b.n	800c1be <atan+0xce>
 800c336:	462b      	mov	r3, r5
 800c338:	ee10 2a10 	vmov	r2, s0
 800c33c:	4939      	ldr	r1, [pc, #228]	; (800c424 <atan+0x334>)
 800c33e:	2000      	movs	r0, #0
 800c340:	f7f4 fa9c 	bl	800087c <__aeabi_ddiv>
 800c344:	f04f 0a03 	mov.w	sl, #3
 800c348:	4604      	mov	r4, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	e737      	b.n	800c1be <atan+0xce>
 800c34e:	4b36      	ldr	r3, [pc, #216]	; (800c428 <atan+0x338>)
 800c350:	4e36      	ldr	r6, [pc, #216]	; (800c42c <atan+0x33c>)
 800c352:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c356:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c35a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c35e:	f7f3 ffab 	bl	80002b8 <__aeabi_dsub>
 800c362:	4622      	mov	r2, r4
 800c364:	462b      	mov	r3, r5
 800c366:	f7f3 ffa7 	bl	80002b8 <__aeabi_dsub>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c372:	f7f3 ffa1 	bl	80002b8 <__aeabi_dsub>
 800c376:	f1bb 0f00 	cmp.w	fp, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	460d      	mov	r5, r1
 800c37e:	f6bf aed6 	bge.w	800c12e <atan+0x3e>
 800c382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c386:	461d      	mov	r5, r3
 800c388:	e6d1      	b.n	800c12e <atan+0x3e>
 800c38a:	a51d      	add	r5, pc, #116	; (adr r5, 800c400 <atan+0x310>)
 800c38c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c390:	e6cd      	b.n	800c12e <atan+0x3e>
 800c392:	bf00      	nop
 800c394:	f3af 8000 	nop.w
 800c398:	54442d18 	.word	0x54442d18
 800c39c:	bff921fb 	.word	0xbff921fb
 800c3a0:	8800759c 	.word	0x8800759c
 800c3a4:	7e37e43c 	.word	0x7e37e43c
 800c3a8:	e322da11 	.word	0xe322da11
 800c3ac:	3f90ad3a 	.word	0x3f90ad3a
 800c3b0:	24760deb 	.word	0x24760deb
 800c3b4:	3fa97b4b 	.word	0x3fa97b4b
 800c3b8:	a0d03d51 	.word	0xa0d03d51
 800c3bc:	3fb10d66 	.word	0x3fb10d66
 800c3c0:	c54c206e 	.word	0xc54c206e
 800c3c4:	3fb745cd 	.word	0x3fb745cd
 800c3c8:	920083ff 	.word	0x920083ff
 800c3cc:	3fc24924 	.word	0x3fc24924
 800c3d0:	5555550d 	.word	0x5555550d
 800c3d4:	3fd55555 	.word	0x3fd55555
 800c3d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c3dc:	bfa2b444 	.word	0xbfa2b444
 800c3e0:	52defd9a 	.word	0x52defd9a
 800c3e4:	3fadde2d 	.word	0x3fadde2d
 800c3e8:	af749a6d 	.word	0xaf749a6d
 800c3ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800c3f0:	fe231671 	.word	0xfe231671
 800c3f4:	3fbc71c6 	.word	0x3fbc71c6
 800c3f8:	9998ebc4 	.word	0x9998ebc4
 800c3fc:	3fc99999 	.word	0x3fc99999
 800c400:	54442d18 	.word	0x54442d18
 800c404:	3ff921fb 	.word	0x3ff921fb
 800c408:	440fffff 	.word	0x440fffff
 800c40c:	7ff00000 	.word	0x7ff00000
 800c410:	3fdbffff 	.word	0x3fdbffff
 800c414:	3ff00000 	.word	0x3ff00000
 800c418:	3ff2ffff 	.word	0x3ff2ffff
 800c41c:	40038000 	.word	0x40038000
 800c420:	3ff80000 	.word	0x3ff80000
 800c424:	bff00000 	.word	0xbff00000
 800c428:	0800cfe0 	.word	0x0800cfe0
 800c42c:	0800cfc0 	.word	0x0800cfc0

0800c430 <fabs>:
 800c430:	ec51 0b10 	vmov	r0, r1, d0
 800c434:	ee10 2a10 	vmov	r2, s0
 800c438:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c43c:	ec43 2b10 	vmov	d0, r2, r3
 800c440:	4770      	bx	lr
 800c442:	0000      	movs	r0, r0
 800c444:	0000      	movs	r0, r0
	...

0800c448 <floor>:
 800c448:	ec51 0b10 	vmov	r0, r1, d0
 800c44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c450:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c454:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c458:	2e13      	cmp	r6, #19
 800c45a:	ee10 5a10 	vmov	r5, s0
 800c45e:	ee10 8a10 	vmov	r8, s0
 800c462:	460c      	mov	r4, r1
 800c464:	dc32      	bgt.n	800c4cc <floor+0x84>
 800c466:	2e00      	cmp	r6, #0
 800c468:	da14      	bge.n	800c494 <floor+0x4c>
 800c46a:	a333      	add	r3, pc, #204	; (adr r3, 800c538 <floor+0xf0>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f7f3 ff24 	bl	80002bc <__adddf3>
 800c474:	2200      	movs	r2, #0
 800c476:	2300      	movs	r3, #0
 800c478:	f7f4 fb66 	bl	8000b48 <__aeabi_dcmpgt>
 800c47c:	b138      	cbz	r0, 800c48e <floor+0x46>
 800c47e:	2c00      	cmp	r4, #0
 800c480:	da57      	bge.n	800c532 <floor+0xea>
 800c482:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c486:	431d      	orrs	r5, r3
 800c488:	d001      	beq.n	800c48e <floor+0x46>
 800c48a:	4c2d      	ldr	r4, [pc, #180]	; (800c540 <floor+0xf8>)
 800c48c:	2500      	movs	r5, #0
 800c48e:	4621      	mov	r1, r4
 800c490:	4628      	mov	r0, r5
 800c492:	e025      	b.n	800c4e0 <floor+0x98>
 800c494:	4f2b      	ldr	r7, [pc, #172]	; (800c544 <floor+0xfc>)
 800c496:	4137      	asrs	r7, r6
 800c498:	ea01 0307 	and.w	r3, r1, r7
 800c49c:	4303      	orrs	r3, r0
 800c49e:	d01f      	beq.n	800c4e0 <floor+0x98>
 800c4a0:	a325      	add	r3, pc, #148	; (adr r3, 800c538 <floor+0xf0>)
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	f7f3 ff09 	bl	80002bc <__adddf3>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f7f4 fb4b 	bl	8000b48 <__aeabi_dcmpgt>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d0eb      	beq.n	800c48e <floor+0x46>
 800c4b6:	2c00      	cmp	r4, #0
 800c4b8:	bfbe      	ittt	lt
 800c4ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c4be:	fa43 f606 	asrlt.w	r6, r3, r6
 800c4c2:	19a4      	addlt	r4, r4, r6
 800c4c4:	ea24 0407 	bic.w	r4, r4, r7
 800c4c8:	2500      	movs	r5, #0
 800c4ca:	e7e0      	b.n	800c48e <floor+0x46>
 800c4cc:	2e33      	cmp	r6, #51	; 0x33
 800c4ce:	dd0b      	ble.n	800c4e8 <floor+0xa0>
 800c4d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c4d4:	d104      	bne.n	800c4e0 <floor+0x98>
 800c4d6:	ee10 2a10 	vmov	r2, s0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	f7f3 feee 	bl	80002bc <__adddf3>
 800c4e0:	ec41 0b10 	vmov	d0, r0, r1
 800c4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c4f0:	fa23 f707 	lsr.w	r7, r3, r7
 800c4f4:	4207      	tst	r7, r0
 800c4f6:	d0f3      	beq.n	800c4e0 <floor+0x98>
 800c4f8:	a30f      	add	r3, pc, #60	; (adr r3, 800c538 <floor+0xf0>)
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	f7f3 fedd 	bl	80002bc <__adddf3>
 800c502:	2200      	movs	r2, #0
 800c504:	2300      	movs	r3, #0
 800c506:	f7f4 fb1f 	bl	8000b48 <__aeabi_dcmpgt>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d0bf      	beq.n	800c48e <floor+0x46>
 800c50e:	2c00      	cmp	r4, #0
 800c510:	da02      	bge.n	800c518 <floor+0xd0>
 800c512:	2e14      	cmp	r6, #20
 800c514:	d103      	bne.n	800c51e <floor+0xd6>
 800c516:	3401      	adds	r4, #1
 800c518:	ea25 0507 	bic.w	r5, r5, r7
 800c51c:	e7b7      	b.n	800c48e <floor+0x46>
 800c51e:	2301      	movs	r3, #1
 800c520:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c524:	fa03 f606 	lsl.w	r6, r3, r6
 800c528:	4435      	add	r5, r6
 800c52a:	4545      	cmp	r5, r8
 800c52c:	bf38      	it	cc
 800c52e:	18e4      	addcc	r4, r4, r3
 800c530:	e7f2      	b.n	800c518 <floor+0xd0>
 800c532:	2500      	movs	r5, #0
 800c534:	462c      	mov	r4, r5
 800c536:	e7aa      	b.n	800c48e <floor+0x46>
 800c538:	8800759c 	.word	0x8800759c
 800c53c:	7e37e43c 	.word	0x7e37e43c
 800c540:	bff00000 	.word	0xbff00000
 800c544:	000fffff 	.word	0x000fffff

0800c548 <scalbn>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	ec55 4b10 	vmov	r4, r5, d0
 800c54e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c552:	4606      	mov	r6, r0
 800c554:	462b      	mov	r3, r5
 800c556:	b99a      	cbnz	r2, 800c580 <scalbn+0x38>
 800c558:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c55c:	4323      	orrs	r3, r4
 800c55e:	d036      	beq.n	800c5ce <scalbn+0x86>
 800c560:	4b39      	ldr	r3, [pc, #228]	; (800c648 <scalbn+0x100>)
 800c562:	4629      	mov	r1, r5
 800c564:	ee10 0a10 	vmov	r0, s0
 800c568:	2200      	movs	r2, #0
 800c56a:	f7f4 f85d 	bl	8000628 <__aeabi_dmul>
 800c56e:	4b37      	ldr	r3, [pc, #220]	; (800c64c <scalbn+0x104>)
 800c570:	429e      	cmp	r6, r3
 800c572:	4604      	mov	r4, r0
 800c574:	460d      	mov	r5, r1
 800c576:	da10      	bge.n	800c59a <scalbn+0x52>
 800c578:	a32b      	add	r3, pc, #172	; (adr r3, 800c628 <scalbn+0xe0>)
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	e03a      	b.n	800c5f6 <scalbn+0xae>
 800c580:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c584:	428a      	cmp	r2, r1
 800c586:	d10c      	bne.n	800c5a2 <scalbn+0x5a>
 800c588:	ee10 2a10 	vmov	r2, s0
 800c58c:	4620      	mov	r0, r4
 800c58e:	4629      	mov	r1, r5
 800c590:	f7f3 fe94 	bl	80002bc <__adddf3>
 800c594:	4604      	mov	r4, r0
 800c596:	460d      	mov	r5, r1
 800c598:	e019      	b.n	800c5ce <scalbn+0x86>
 800c59a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c59e:	460b      	mov	r3, r1
 800c5a0:	3a36      	subs	r2, #54	; 0x36
 800c5a2:	4432      	add	r2, r6
 800c5a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c5a8:	428a      	cmp	r2, r1
 800c5aa:	dd08      	ble.n	800c5be <scalbn+0x76>
 800c5ac:	2d00      	cmp	r5, #0
 800c5ae:	a120      	add	r1, pc, #128	; (adr r1, 800c630 <scalbn+0xe8>)
 800c5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5b4:	da1c      	bge.n	800c5f0 <scalbn+0xa8>
 800c5b6:	a120      	add	r1, pc, #128	; (adr r1, 800c638 <scalbn+0xf0>)
 800c5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5bc:	e018      	b.n	800c5f0 <scalbn+0xa8>
 800c5be:	2a00      	cmp	r2, #0
 800c5c0:	dd08      	ble.n	800c5d4 <scalbn+0x8c>
 800c5c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5ce:	ec45 4b10 	vmov	d0, r4, r5
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5d8:	da19      	bge.n	800c60e <scalbn+0xc6>
 800c5da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c5de:	429e      	cmp	r6, r3
 800c5e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c5e4:	dd0a      	ble.n	800c5fc <scalbn+0xb4>
 800c5e6:	a112      	add	r1, pc, #72	; (adr r1, 800c630 <scalbn+0xe8>)
 800c5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e2      	bne.n	800c5b6 <scalbn+0x6e>
 800c5f0:	a30f      	add	r3, pc, #60	; (adr r3, 800c630 <scalbn+0xe8>)
 800c5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f6:	f7f4 f817 	bl	8000628 <__aeabi_dmul>
 800c5fa:	e7cb      	b.n	800c594 <scalbn+0x4c>
 800c5fc:	a10a      	add	r1, pc, #40	; (adr r1, 800c628 <scalbn+0xe0>)
 800c5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d0b8      	beq.n	800c578 <scalbn+0x30>
 800c606:	a10e      	add	r1, pc, #56	; (adr r1, 800c640 <scalbn+0xf8>)
 800c608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c60c:	e7b4      	b.n	800c578 <scalbn+0x30>
 800c60e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c612:	3236      	adds	r2, #54	; 0x36
 800c614:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c618:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c61c:	4620      	mov	r0, r4
 800c61e:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <scalbn+0x108>)
 800c620:	2200      	movs	r2, #0
 800c622:	e7e8      	b.n	800c5f6 <scalbn+0xae>
 800c624:	f3af 8000 	nop.w
 800c628:	c2f8f359 	.word	0xc2f8f359
 800c62c:	01a56e1f 	.word	0x01a56e1f
 800c630:	8800759c 	.word	0x8800759c
 800c634:	7e37e43c 	.word	0x7e37e43c
 800c638:	8800759c 	.word	0x8800759c
 800c63c:	fe37e43c 	.word	0xfe37e43c
 800c640:	c2f8f359 	.word	0xc2f8f359
 800c644:	81a56e1f 	.word	0x81a56e1f
 800c648:	43500000 	.word	0x43500000
 800c64c:	ffff3cb0 	.word	0xffff3cb0
 800c650:	3c900000 	.word	0x3c900000

0800c654 <_init>:
 800c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c656:	bf00      	nop
 800c658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c65a:	bc08      	pop	{r3}
 800c65c:	469e      	mov	lr, r3
 800c65e:	4770      	bx	lr

0800c660 <_fini>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	bf00      	nop
 800c664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c666:	bc08      	pop	{r3}
 800c668:	469e      	mov	lr, r3
 800c66a:	4770      	bx	lr
