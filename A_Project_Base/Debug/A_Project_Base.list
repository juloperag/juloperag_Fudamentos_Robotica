
A_Project_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  08009268  08009268  00019268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009834  08009834  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009834  08009834  00019834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800983c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c0  200001f0  08009a28  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  08009a28  00020bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061e1  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001699  00000000  00000000  000263fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  00027a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000488  00000000  00000000  00027ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113a4  00000000  00000000  00028480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007dcc  00000000  00000000  00039824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059184  00000000  00000000  000415f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009a774  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  0009a7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009250 	.word	0x08009250

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009250 	.word	0x08009250

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9dd 	b.w	8001074 <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f86b 	bl	8000da4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f85e 	bl	8000da4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f84d 	bl	8000da4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f83f 	bl	8000da4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_d2lz>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
 8000d42:	f7ff fed3 	bl	8000aec <__aeabi_dcmplt>
 8000d46:	b928      	cbnz	r0, 8000d54 <__aeabi_d2lz+0x1c>
 8000d48:	4620      	mov	r0, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d50:	f000 b80a 	b.w	8000d68 <__aeabi_d2ulz>
 8000d54:	4620      	mov	r0, r4
 8000d56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d5a:	f000 f805 	bl	8000d68 <__aeabi_d2ulz>
 8000d5e:	4240      	negs	r0, r0
 8000d60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop

08000d68 <__aeabi_d2ulz>:
 8000d68:	b5d0      	push	{r4, r6, r7, lr}
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__aeabi_d2ulz+0x34>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4606      	mov	r6, r0
 8000d70:	460f      	mov	r7, r1
 8000d72:	f7ff fc49 	bl	8000608 <__aeabi_dmul>
 8000d76:	f7ff ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	f7ff fbca 	bl	8000514 <__aeabi_ui2d>
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <__aeabi_d2ulz+0x38>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f7ff fc40 	bl	8000608 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	4639      	mov	r1, r7
 8000d90:	f7ff fa82 	bl	8000298 <__aeabi_dsub>
 8000d94:	f7ff ff10 	bl	8000bb8 <__aeabi_d2uiz>
 8000d98:	4621      	mov	r1, r4
 8000d9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d9c:	3df00000 	.word	0x3df00000
 8000da0:	41f00000 	.word	0x41f00000

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	4604      	mov	r4, r0
 8000dac:	468e      	mov	lr, r1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14d      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db2:	428a      	cmp	r2, r1
 8000db4:	4694      	mov	ip, r2
 8000db6:	d969      	bls.n	8000e8c <__udivmoddi4+0xe8>
 8000db8:	fab2 f282 	clz	r2, r2
 8000dbc:	b152      	cbz	r2, 8000dd4 <__udivmoddi4+0x30>
 8000dbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000dc2:	f1c2 0120 	rsb	r1, r2, #32
 8000dc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dce:	ea41 0e03 	orr.w	lr, r1, r3
 8000dd2:	4094      	lsls	r4, r2
 8000dd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd8:	0c21      	lsrs	r1, r4, #16
 8000dda:	fbbe f6f8 	udiv	r6, lr, r8
 8000dde:	fa1f f78c 	uxth.w	r7, ip
 8000de2:	fb08 e316 	mls	r3, r8, r6, lr
 8000de6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dea:	fb06 f107 	mul.w	r1, r6, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dfa:	f080 811f 	bcs.w	800103c <__udivmoddi4+0x298>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 811c 	bls.w	800103c <__udivmoddi4+0x298>
 8000e04:	3e02      	subs	r6, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb00 f707 	mul.w	r7, r0, r7
 8000e1c:	42a7      	cmp	r7, r4
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x92>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	f080 810a 	bcs.w	8001040 <__udivmoddi4+0x29c>
 8000e2c:	42a7      	cmp	r7, r4
 8000e2e:	f240 8107 	bls.w	8001040 <__udivmoddi4+0x29c>
 8000e32:	4464      	add	r4, ip
 8000e34:	3802      	subs	r0, #2
 8000e36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3a:	1be4      	subs	r4, r4, r7
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	b11d      	cbz	r5, 8000e48 <__udivmoddi4+0xa4>
 8000e40:	40d4      	lsrs	r4, r2
 8000e42:	2300      	movs	r3, #0
 8000e44:	e9c5 4300 	strd	r4, r3, [r5]
 8000e48:	4631      	mov	r1, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0xc2>
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	f000 80ef 	beq.w	8001036 <__udivmoddi4+0x292>
 8000e58:	2600      	movs	r6, #0
 8000e5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5e:	4630      	mov	r0, r6
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f683 	clz	r6, r3
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d14a      	bne.n	8000f04 <__udivmoddi4+0x160>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xd4>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80f9 	bhi.w	800106a <__udivmoddi4+0x2c6>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	469e      	mov	lr, r3
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d0e0      	beq.n	8000e48 <__udivmoddi4+0xa4>
 8000e86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e8a:	e7dd      	b.n	8000e48 <__udivmoddi4+0xa4>
 8000e8c:	b902      	cbnz	r2, 8000e90 <__udivmoddi4+0xec>
 8000e8e:	deff      	udf	#255	; 0xff
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f040 8092 	bne.w	8000fbe <__udivmoddi4+0x21a>
 8000e9a:	eba1 010c 	sub.w	r1, r1, ip
 8000e9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea2:	fa1f fe8c 	uxth.w	lr, ip
 8000ea6:	2601      	movs	r6, #1
 8000ea8:	0c20      	lsrs	r0, r4, #16
 8000eaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000eae:	fb07 1113 	mls	r1, r7, r3, r1
 8000eb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb6:	fb0e f003 	mul.w	r0, lr, r3
 8000eba:	4288      	cmp	r0, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x12c>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x12a>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f200 80cb 	bhi.w	8001064 <__udivmoddi4+0x2c0>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1110 	mls	r1, r7, r0, r1
 8000edc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ee0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ee4:	45a6      	cmp	lr, r4
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x156>
 8000ee8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef0:	d202      	bcs.n	8000ef8 <__udivmoddi4+0x154>
 8000ef2:	45a6      	cmp	lr, r4
 8000ef4:	f200 80bb 	bhi.w	800106e <__udivmoddi4+0x2ca>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	eba4 040e 	sub.w	r4, r4, lr
 8000efe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f02:	e79c      	b.n	8000e3e <__udivmoddi4+0x9a>
 8000f04:	f1c6 0720 	rsb	r7, r6, #32
 8000f08:	40b3      	lsls	r3, r6
 8000f0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f12:	fa20 f407 	lsr.w	r4, r0, r7
 8000f16:	fa01 f306 	lsl.w	r3, r1, r6
 8000f1a:	431c      	orrs	r4, r3
 8000f1c:	40f9      	lsrs	r1, r7
 8000f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f22:	fa00 f306 	lsl.w	r3, r0, r6
 8000f26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f2a:	0c20      	lsrs	r0, r4, #16
 8000f2c:	fa1f fe8c 	uxth.w	lr, ip
 8000f30:	fb09 1118 	mls	r1, r9, r8, r1
 8000f34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f38:	fb08 f00e 	mul.w	r0, r8, lr
 8000f3c:	4288      	cmp	r0, r1
 8000f3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f42:	d90b      	bls.n	8000f5c <__udivmoddi4+0x1b8>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f4c:	f080 8088 	bcs.w	8001060 <__udivmoddi4+0x2bc>
 8000f50:	4288      	cmp	r0, r1
 8000f52:	f240 8085 	bls.w	8001060 <__udivmoddi4+0x2bc>
 8000f56:	f1a8 0802 	sub.w	r8, r8, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	1a09      	subs	r1, r1, r0
 8000f5e:	b2a4      	uxth	r4, r4
 8000f60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f64:	fb09 1110 	mls	r1, r9, r0, r1
 8000f68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f70:	458e      	cmp	lr, r1
 8000f72:	d908      	bls.n	8000f86 <__udivmoddi4+0x1e2>
 8000f74:	eb1c 0101 	adds.w	r1, ip, r1
 8000f78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f7c:	d26c      	bcs.n	8001058 <__udivmoddi4+0x2b4>
 8000f7e:	458e      	cmp	lr, r1
 8000f80:	d96a      	bls.n	8001058 <__udivmoddi4+0x2b4>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4461      	add	r1, ip
 8000f86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f8e:	eba1 010e 	sub.w	r1, r1, lr
 8000f92:	42a1      	cmp	r1, r4
 8000f94:	46c8      	mov	r8, r9
 8000f96:	46a6      	mov	lr, r4
 8000f98:	d356      	bcc.n	8001048 <__udivmoddi4+0x2a4>
 8000f9a:	d053      	beq.n	8001044 <__udivmoddi4+0x2a0>
 8000f9c:	b15d      	cbz	r5, 8000fb6 <__udivmoddi4+0x212>
 8000f9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000fa2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fa6:	fa01 f707 	lsl.w	r7, r1, r7
 8000faa:	fa22 f306 	lsr.w	r3, r2, r6
 8000fae:	40f1      	lsrs	r1, r6
 8000fb0:	431f      	orrs	r7, r3
 8000fb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fb6:	2600      	movs	r6, #0
 8000fb8:	4631      	mov	r1, r6
 8000fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fbe:	f1c2 0320 	rsb	r3, r2, #32
 8000fc2:	40d8      	lsrs	r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	4301      	orrs	r1, r0
 8000fd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd4:	fa1f fe8c 	uxth.w	lr, ip
 8000fd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000fe0:	0c0b      	lsrs	r3, r1, #16
 8000fe2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fe6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fea:	429e      	cmp	r6, r3
 8000fec:	fa04 f402 	lsl.w	r4, r4, r2
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x260>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ffa:	d22f      	bcs.n	800105c <__udivmoddi4+0x2b8>
 8000ffc:	429e      	cmp	r6, r3
 8000ffe:	d92d      	bls.n	800105c <__udivmoddi4+0x2b8>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1b9b      	subs	r3, r3, r6
 8001006:	b289      	uxth	r1, r1
 8001008:	fbb3 f6f7 	udiv	r6, r3, r7
 800100c:	fb07 3316 	mls	r3, r7, r6, r3
 8001010:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001014:	fb06 f30e 	mul.w	r3, r6, lr
 8001018:	428b      	cmp	r3, r1
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x28a>
 800101c:	eb1c 0101 	adds.w	r1, ip, r1
 8001020:	f106 38ff 	add.w	r8, r6, #4294967295
 8001024:	d216      	bcs.n	8001054 <__udivmoddi4+0x2b0>
 8001026:	428b      	cmp	r3, r1
 8001028:	d914      	bls.n	8001054 <__udivmoddi4+0x2b0>
 800102a:	3e02      	subs	r6, #2
 800102c:	4461      	add	r1, ip
 800102e:	1ac9      	subs	r1, r1, r3
 8001030:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001034:	e738      	b.n	8000ea8 <__udivmoddi4+0x104>
 8001036:	462e      	mov	r6, r5
 8001038:	4628      	mov	r0, r5
 800103a:	e705      	b.n	8000e48 <__udivmoddi4+0xa4>
 800103c:	4606      	mov	r6, r0
 800103e:	e6e3      	b.n	8000e08 <__udivmoddi4+0x64>
 8001040:	4618      	mov	r0, r3
 8001042:	e6f8      	b.n	8000e36 <__udivmoddi4+0x92>
 8001044:	454b      	cmp	r3, r9
 8001046:	d2a9      	bcs.n	8000f9c <__udivmoddi4+0x1f8>
 8001048:	ebb9 0802 	subs.w	r8, r9, r2
 800104c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001050:	3801      	subs	r0, #1
 8001052:	e7a3      	b.n	8000f9c <__udivmoddi4+0x1f8>
 8001054:	4646      	mov	r6, r8
 8001056:	e7ea      	b.n	800102e <__udivmoddi4+0x28a>
 8001058:	4620      	mov	r0, r4
 800105a:	e794      	b.n	8000f86 <__udivmoddi4+0x1e2>
 800105c:	4640      	mov	r0, r8
 800105e:	e7d1      	b.n	8001004 <__udivmoddi4+0x260>
 8001060:	46d0      	mov	r8, sl
 8001062:	e77b      	b.n	8000f5c <__udivmoddi4+0x1b8>
 8001064:	3b02      	subs	r3, #2
 8001066:	4461      	add	r1, ip
 8001068:	e732      	b.n	8000ed0 <__udivmoddi4+0x12c>
 800106a:	4630      	mov	r0, r6
 800106c:	e709      	b.n	8000e82 <__udivmoddi4+0xde>
 800106e:	4464      	add	r4, ip
 8001070:	3802      	subs	r0, #2
 8001072:	e742      	b.n	8000efa <__udivmoddi4+0x156>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <main>:
#define WHO_AM_I    117                            //Registro para verificar la identidad del equipo

void acelerometro_I2C(void);                       //Cabecera para la comunicacion I2C

int main(void)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af02      	add	r7, sp, #8
	//Realizamos la configuracuion inicial
	int_Hardware();
 800107e:	f000 f88f 	bl	80011a0 <int_Hardware>
	//Activamos el SysTick
	config_SysTick_ms();
 8001082:	f002 ff4d 	bl	8003f20 <config_SysTick_ms>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 8001086:	4b39      	ldr	r3, [pc, #228]	; (800116c <main+0xf4>)
 8001088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108c:	4a37      	ldr	r2, [pc, #220]	; (800116c <main+0xf4>)
 800108e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001092:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos para el PIN un 1 logico,
	GPIO_writePin (&handler_BlinkyPin, SET);
 8001096:	2101      	movs	r1, #1
 8001098:	4835      	ldr	r0, [pc, #212]	; (8001170 <main+0xf8>)
 800109a:	f002 f9dd 	bl	8003458 <GPIO_writePin>

	while(1)
	{
		if(charRead != '\0')
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <main+0xfc>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d050      	beq.n	8001148 <main+0xd0>
		{
			if(charRead == '1')
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <main+0xfc>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b31      	cmp	r3, #49	; 0x31
 80010ac:	d149      	bne.n	8001142 <main+0xca>
			{
				//------------------------------Implementacion USART-Systick--------------------------------
				//Definimos el tiempo que a pasado desde que el programa empezo a ejecutarse
				uint32_t tiempo = (uint32_t) getTicksMs();
 80010ae:	f002 ff71 	bl	8003f94 <getTicksMs>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4613      	mov	r3, r2
 80010b8:	617b      	str	r3, [r7, #20]
				//ese tiempo lo volvemos un string
				sprintf(bufferMsg,"Tiempo Transcurrido: %lu ms \n",tiempo);
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	492e      	ldr	r1, [pc, #184]	; (8001178 <main+0x100>)
 80010be:	482f      	ldr	r0, [pc, #188]	; (800117c <main+0x104>)
 80010c0:	f004 fad4 	bl	800566c <siprintf>
				//Enviamos por puerto serial dicho string
				writeMsg(&handler_USART_USB, bufferMsg);
 80010c4:	492d      	ldr	r1, [pc, #180]	; (800117c <main+0x104>)
 80010c6:	482e      	ldr	r0, [pc, #184]	; (8001180 <main+0x108>)
 80010c8:	f003 fa35 	bl	8004536 <writeMsg>

				//-----------------------------Implementacion USART-Librerias Externas--------------------------------
				//Definimos un arreglo que contiene numeros decimales
				float32_t value[2] = {-12.12, 2.14};
 80010cc:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <main+0x10c>)
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010d6:	e883 0003 	stmia.w	r3, {r0, r1}
				float32_t valueAbs[2] = {0.0,0.0};
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
				//Aplicamos la funcion que se importo de la librerias CMSIS
				arm_abs_f32(value,valueAbs,2);
 80010e6:	1d39      	adds	r1, r7, #4
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2202      	movs	r2, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fbbe 	bl	8001870 <arm_abs_f32>
				//Enviamos un mensaje por el puerto Serial
				sprintf(bufferMsg,"El valor abs de %#.2f = %#.2f \n", value[0], valueAbs[0]);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fa2e 	bl	8000558 <__aeabi_f2d>
 80010fc:	4604      	mov	r4, r0
 80010fe:	460d      	mov	r5, r1
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa28 	bl	8000558 <__aeabi_f2d>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9cd 2300 	strd	r2, r3, [sp]
 8001110:	4622      	mov	r2, r4
 8001112:	462b      	mov	r3, r5
 8001114:	491c      	ldr	r1, [pc, #112]	; (8001188 <main+0x110>)
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <main+0x104>)
 8001118:	f004 faa8 	bl	800566c <siprintf>
				//Enviamos por puerto serial dicho string
				writeMsg(&handler_USART_USB, bufferMsg);
 800111c:	4917      	ldr	r1, [pc, #92]	; (800117c <main+0x104>)
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <main+0x108>)
 8001120:	f003 fa09 	bl	8004536 <writeMsg>

				//-----------------------------Implementacion USART-ADC--------------------------------
				sprintf(bufferMsg, "Data Canal 1: %u \n", adcData);
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <main+0x114>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4919      	ldr	r1, [pc, #100]	; (8001190 <main+0x118>)
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <main+0x104>)
 800112e:	f004 fa9d 	bl	800566c <siprintf>
				writeMsg(&handler_USART_USB, bufferMsg);
 8001132:	4912      	ldr	r1, [pc, #72]	; (800117c <main+0x104>)
 8001134:	4812      	ldr	r0, [pc, #72]	; (8001180 <main+0x108>)
 8001136:	f003 f9fe 	bl	8004536 <writeMsg>

				//reniciamos
				charRead = '\0';
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <main+0xfc>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e7ad      	b.n	800109e <main+0x26>
			}
			else
			{
				acelerometro_I2C();
 8001142:	f000 f997 	bl	8001474 <acelerometro_I2C>
 8001146:	e7aa      	b.n	800109e <main+0x26>
			}
		}
		else if(estado==1)
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <main+0x11c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10a      	bne.n	8001166 <main+0xee>
		{
			//Cambiamos el porcentaje del dutty
			updateDuttyCycle(&handler_PWM, duttyporc);
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <main+0x120>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	4810      	ldr	r0, [pc, #64]	; (800119c <main+0x124>)
 800115a:	f002 feb3 	bl	8003ec4 <updateDuttyCycle>
			estado = 0;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <main+0x11c>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e79b      	b.n	800109e <main+0x26>
			//Leemos la coordenada en x del Giroscopio;
		}
		else
		{
			__NOP();
 8001166:	bf00      	nop
		if(charRead != '\0')
 8001168:	e799      	b.n	800109e <main+0x26>
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00
 8001170:	2000020c 	.word	0x2000020c
 8001174:	20000000 	.word	0x20000000
 8001178:	08009268 	.word	0x08009268
 800117c:	20000260 	.word	0x20000260
 8001180:	20000254 	.word	0x20000254
 8001184:	080092bc 	.word	0x080092bc
 8001188:	08009288 	.word	0x08009288
 800118c:	20000306 	.word	0x20000306
 8001190:	080092a8 	.word	0x080092a8
 8001194:	200002c8 	.word	0x200002c8
 8001198:	20000017 	.word	0x20000017
 800119c:	200002bc 	.word	0x200002bc

080011a0 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af02      	add	r7, sp, #8
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80011a6:	4b7d      	ldr	r3, [pc, #500]	; (800139c <int_Hardware+0x1fc>)
 80011a8:	4a7d      	ldr	r2, [pc, #500]	; (80013a0 <int_Hardware+0x200>)
 80011aa:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 80011ac:	4b7b      	ldr	r3, [pc, #492]	; (800139c <int_Hardware+0x1fc>)
 80011ae:	2205      	movs	r2, #5
 80011b0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011b2:	2300      	movs	r3, #0
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	2300      	movs	r3, #0
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2200      	movs	r2, #0
 80011be:	2101      	movs	r1, #1
 80011c0:	4876      	ldr	r0, [pc, #472]	; (800139c <int_Hardware+0x1fc>)
 80011c2:	f001 fffd 	bl	80031c0 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 80011c6:	4875      	ldr	r0, [pc, #468]	; (800139c <int_Hardware+0x1fc>)
 80011c8:	f002 f81c 	bl	8003204 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA2----------------
	//------------AF7: USART2_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 80011cc:	4b75      	ldr	r3, [pc, #468]	; (80013a4 <int_Hardware+0x204>)
 80011ce:	4a74      	ldr	r2, [pc, #464]	; (80013a0 <int_Hardware+0x200>)
 80011d0:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 80011d2:	4b74      	ldr	r3, [pc, #464]	; (80013a4 <int_Hardware+0x204>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80011d8:	2307      	movs	r3, #7
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2300      	movs	r3, #0
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	486f      	ldr	r0, [pc, #444]	; (80013a4 <int_Hardware+0x204>)
 80011e8:	f001 ffea 	bl	80031c0 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 80011ec:	486d      	ldr	r0, [pc, #436]	; (80013a4 <int_Hardware+0x204>)
 80011ee:	f002 f809 	bl	8003204 <GPIO_Config>

	//---------------PIN: PA3----------------
	//------------AF7: USART2_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 80011f2:	4b6d      	ldr	r3, [pc, #436]	; (80013a8 <int_Hardware+0x208>)
 80011f4:	4a6a      	ldr	r2, [pc, #424]	; (80013a0 <int_Hardware+0x200>)
 80011f6:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 80011f8:	4b6b      	ldr	r3, [pc, #428]	; (80013a8 <int_Hardware+0x208>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 80011fe:	2307      	movs	r3, #7
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	2300      	movs	r3, #0
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	2200      	movs	r2, #0
 800120a:	2102      	movs	r1, #2
 800120c:	4866      	ldr	r0, [pc, #408]	; (80013a8 <int_Hardware+0x208>)
 800120e:	f001 ffd7 	bl	80031c0 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001212:	4865      	ldr	r0, [pc, #404]	; (80013a8 <int_Hardware+0x208>)
 8001214:	f001 fff6 	bl	8003204 <GPIO_Config>

	//---------------------------PWM--------------------------------
	//---------------PIN: PB6----------------
	//------------AF2: TIM4_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_PWM.pGPIOx = GPIOB;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <int_Hardware+0x20c>)
 800121a:	4a65      	ldr	r2, [pc, #404]	; (80013b0 <int_Hardware+0x210>)
 800121c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_PWM.GPIO_PinConfig.GPIO_PinNumber = PIN_6; 						//PIN_x, 0-15
 800121e:	4b63      	ldr	r3, [pc, #396]	; (80013ac <int_Hardware+0x20c>)
 8001220:	2206      	movs	r2, #6
 8001222:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_PWM, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 8001224:	2302      	movs	r3, #2
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2300      	movs	r3, #0
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	2200      	movs	r2, #0
 8001230:	2102      	movs	r1, #2
 8001232:	485e      	ldr	r0, [pc, #376]	; (80013ac <int_Hardware+0x20c>)
 8001234:	f001 ffc4 	bl	80031c0 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_PWM);
 8001238:	485c      	ldr	r0, [pc, #368]	; (80013ac <int_Hardware+0x20c>)
 800123a:	f001 ffe3 	bl	8003204 <GPIO_Config>

	//---------------------------I2C--------------------------------
	//---------------PIN: PB8----------------
	//------------AF4: I2C1_SCL----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SCL_Acelerometro.pGPIOx = GPIOB;
 800123e:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <int_Hardware+0x214>)
 8001240:	4a5b      	ldr	r2, [pc, #364]	; (80013b0 <int_Hardware+0x210>)
 8001242:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SCL_Acelerometro.GPIO_PinConfig.GPIO_PinNumber = PIN_8; 						//PIN_x, 0-15
 8001244:	4b5b      	ldr	r3, [pc, #364]	; (80013b4 <int_Hardware+0x214>)
 8001246:	2208      	movs	r2, #8
 8001248:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SCL_Acelerometro, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 800124a:	2304      	movs	r3, #4
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	2300      	movs	r3, #0
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2302      	movs	r3, #2
 8001254:	2201      	movs	r2, #1
 8001256:	2102      	movs	r1, #2
 8001258:	4856      	ldr	r0, [pc, #344]	; (80013b4 <int_Hardware+0x214>)
 800125a:	f001 ffb1 	bl	80031c0 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SCL_Acelerometro);
 800125e:	4855      	ldr	r0, [pc, #340]	; (80013b4 <int_Hardware+0x214>)
 8001260:	f001 ffd0 	bl	8003204 <GPIO_Config>

	//---------------PIN: PB9----------------
	//------------AF4: I2C1_SDA----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_SDA_Acelerometro.pGPIOx = GPIOB;
 8001264:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <int_Hardware+0x218>)
 8001266:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <int_Hardware+0x210>)
 8001268:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_SDA_Acelerometro.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 800126a:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <int_Hardware+0x218>)
 800126c:	2209      	movs	r2, #9
 800126e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_SDA_Acelerometro, GPIO_MODE_ALTFN, GPIO_OTYPER_OPENDRAIN, GPIO_OSPEEDR_FAST, GPIO_PUPDR_NOTHING, AF4);
 8001270:	2304      	movs	r3, #4
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2302      	movs	r3, #2
 800127a:	2201      	movs	r2, #1
 800127c:	2102      	movs	r1, #2
 800127e:	484e      	ldr	r0, [pc, #312]	; (80013b8 <int_Hardware+0x218>)
 8001280:	f001 ff9e 	bl	80031c0 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_SDA_Acelerometro);
 8001284:	484c      	ldr	r0, [pc, #304]	; (80013b8 <int_Hardware+0x218>)
 8001286:	f001 ffbd 	bl	8003204 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART2----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 800128a:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <int_Hardware+0x21c>)
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <int_Hardware+0x220>)
 800128e:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8001290:	4b4a      	ldr	r3, [pc, #296]	; (80013bc <int_Hardware+0x21c>)
 8001292:	2202      	movs	r2, #2
 8001294:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_9600;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <int_Hardware+0x21c>)
 8001298:	2200      	movs	r2, #0
 800129a:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 800129c:	4b47      	ldr	r3, [pc, #284]	; (80013bc <int_Hardware+0x21c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 80012a2:	4b46      	ldr	r3, [pc, #280]	; (80013bc <int_Hardware+0x21c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 80012a8:	4b44      	ldr	r3, [pc, #272]	; (80013bc <int_Hardware+0x21c>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_DISABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <int_Hardware+0x21c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 80012b4:	4841      	ldr	r0, [pc, #260]	; (80013bc <int_Hardware+0x21c>)
 80012b6:	f002 feb9 	bl	800402c <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 80012ba:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <int_Hardware+0x224>)
 80012bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c0:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <int_Hardware+0x224>)
 80012c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c8:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80012ca:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <int_Hardware+0x224>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <int_Hardware+0x224>)
 80012d2:	22fa      	movs	r2, #250	; 0xfa
 80012d4:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <int_Hardware+0x224>)
 80012d8:	2201      	movs	r2, #1
 80012da:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80012dc:	4839      	ldr	r0, [pc, #228]	; (80013c4 <int_Hardware+0x224>)
 80012de:	f000 fd53 	bl	8001d88 <BasicTimer_Config>

	//---------------TIM4----------------
	//Definimos el TIMx a usar
	handler_TIMER_PWM.ptrTIMx = TIM4;
 80012e2:	4b39      	ldr	r3, [pc, #228]	; (80013c8 <int_Hardware+0x228>)
 80012e4:	4a39      	ldr	r2, [pc, #228]	; (80013cc <int_Hardware+0x22c>)
 80012e6:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_PWM.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80012e8:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <int_Hardware+0x228>)
 80012ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ee:	805a      	strh	r2, [r3, #2]
	handler_TIMER_PWM.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <int_Hardware+0x228>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
	handler_TIMER_PWM.TIMx_Config.TIMX_period = 20;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <int_Hardware+0x228>)
 80012f8:	2214      	movs	r2, #20
 80012fa:	605a      	str	r2, [r3, #4]
	handler_TIMER_PWM.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <int_Hardware+0x228>)
 80012fe:	2200      	movs	r2, #0
 8001300:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_PWM);
 8001302:	4831      	ldr	r0, [pc, #196]	; (80013c8 <int_Hardware+0x228>)
 8001304:	f000 fd40 	bl	8001d88 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC13----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_Button.pGPIOx = GPIOC;
 8001308:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <int_Hardware+0x230>)
 800130a:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <int_Hardware+0x234>)
 800130c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_Button.GPIO_PinConfig.GPIO_PinNumber = PIN_13;
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <int_Hardware+0x230>)
 8001310:	220d      	movs	r2, #13
 8001312:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	handler_EXTI_Button.pGPIOHandler = &handler_GPIO_Button;
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <int_Hardware+0x238>)
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <int_Hardware+0x230>)
 8001318:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	handler_EXTI_Button.edgeType = EXTERNAL_INTERRUPP_FALLING_EDGE;
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <int_Hardware+0x238>)
 800131c:	2200      	movs	r2, #0
 800131e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(&handler_EXTI_Button);
 8001320:	482d      	ldr	r0, [pc, #180]	; (80013d8 <int_Hardware+0x238>)
 8001322:	f000 fea5 	bl	8002070 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM4_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM.ptrTIMx = TIM4;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <int_Hardware+0x23c>)
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <int_Hardware+0x22c>)
 800132a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <int_Hardware+0x23c>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	handler_PWM.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <int_Hardware+0x23c>)
 8001334:	220a      	movs	r2, #10
 8001336:	805a      	strh	r2, [r3, #2]
	handler_PWM.config.polarity = POLARITY_HIGH;    //POLARITY_x x-> HIGH, LOW
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <int_Hardware+0x23c>)
 800133a:	2200      	movs	r2, #0
 800133c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM);
 800133e:	4827      	ldr	r0, [pc, #156]	; (80013dc <int_Hardware+0x23c>)
 8001340:	f002 fb08 	bl	8003954 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM, CHANNEL_ENABLE);
 8001344:	2101      	movs	r1, #1
 8001346:	4825      	ldr	r0, [pc, #148]	; (80013dc <int_Hardware+0x23c>)
 8001348:	f002 fc64 	bl	8003c14 <statusInOutPWM>

	//-------------------Inicio de Configuracion I2Cx----------------------

	//---------------I2C1----------------
	//Definimos el I2Cx a usar
	handler_I2C_Acelerometro.prtI2Cx = I2C1;
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <int_Hardware+0x240>)
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <int_Hardware+0x244>)
 8001350:	601a      	str	r2, [r3, #0]
	//Definimos la configuracion para el I2C
	handler_I2C_Acelerometro.modeI2C = I2C_MODE_FM;               //I2C_MODE_x  x->SM,FM
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <int_Hardware+0x240>)
 8001354:	2201      	movs	r2, #1
 8001356:	715a      	strb	r2, [r3, #5]
	handler_I2C_Acelerometro.slaveAddress = ACCEL_ADDRESSS;       //Direccion del Sclave
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <int_Hardware+0x240>)
 800135a:	2268      	movs	r2, #104	; 0x68
 800135c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	i2c_Config(&handler_I2C_Acelerometro);
 800135e:	4820      	ldr	r0, [pc, #128]	; (80013e0 <int_Hardware+0x240>)
 8001360:	f002 f8bc 	bl	80034dc <i2c_Config>
	//---------------------Fin de Configuracion I2Cx----------------------

	//-------------------Inicio configuracion ADC-----------------------

	//---------------Channel_0----------------
	 handler_ADC_Channel0.conversion.channelSequence_0 =  ADC_CHANNEL_0;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <int_Hardware+0x248>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	 handler_ADC_Channel0.sampling.samplingPeriodChannel_0 = ADC_SAMPLING_PERIOD_84_CYCLES;      //ADC_SAMPLING_PERIOD_x_CYCLES  x-> 3, 15, 28, 56, 84, 112, 144, 480
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <int_Hardware+0x248>)
 800136c:	2204      	movs	r2, #4
 800136e:	825a      	strh	r2, [r3, #18]
	 handler_ADC_Channel0.resolution = ADC_RESOLUTION_12_BIT;                                    //ADC_RESOLUTION_x_BIT          x-> 8,6,10,12
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <int_Hardware+0x248>)
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 handler_ADC_Channel0.dataAlignment =  ADC_ALIGNMENT_RIGHT;                                  //ADC_ALIGNMENT_x               x-> RIGHT, LEFT
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <int_Hardware+0x248>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	 handler_ADC_Channel0.externalEvent = ADC_EXTERNAL_EVENT_DISABLE;                            //ADC_EXTERNAL_EVENT_x          x-> DISABLE, RISING, FALLING, BOTH
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <int_Hardware+0x248>)
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	 handler_ADC_Channel0.typeEXTEvent =  ADC_EVENT_TIMER_1_CC1;                                 //ADC_EVENT_TIMER_x_y           x-> 1, 2, 3, 4, 5 | y-> Depende
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <int_Hardware+0x248>)
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 adc_Config(&handler_ADC_Channel0);
 8001390:	4815      	ldr	r0, [pc, #84]	; (80013e8 <int_Hardware+0x248>)
 8001392:	f000 fad7 	bl	8001944 <adc_Config>

	//-------------------Fin configuracion ADC-----------------------

}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000020c 	.word	0x2000020c
 80013a0:	40020000 	.word	0x40020000
 80013a4:	2000023c 	.word	0x2000023c
 80013a8:	20000248 	.word	0x20000248
 80013ac:	200002a0 	.word	0x200002a0
 80013b0:	40020400 	.word	0x40020400
 80013b4:	20000308 	.word	0x20000308
 80013b8:	20000314 	.word	0x20000314
 80013bc:	20000254 	.word	0x20000254
 80013c0:	40004400 	.word	0x40004400
 80013c4:	20000218 	.word	0x20000218
 80013c8:	200002ac 	.word	0x200002ac
 80013cc:	40000800 	.word	0x40000800
 80013d0:	20000228 	.word	0x20000228
 80013d4:	40020800 	.word	0x40020800
 80013d8:	20000234 	.word	0x20000234
 80013dc:	200002bc 	.word	0x200002bc
 80013e0:	20000320 	.word	0x20000320
 80013e4:	40005400 	.word	0x40005400
 80013e8:	200002cc 	.word	0x200002cc

080013ec <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <BasicTimer2_Callback+0x14>)
 80013f2:	f002 f85c 	bl	80034ae <GPIOxTooglePin>
	startSingleADC();
 80013f6:	f000 fbbf 	bl	8001b78 <startSingleADC>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000020c 	.word	0x2000020c

08001404 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	charRead = getRxData();
 8001408:	f003 f8b4 	bl	8004574 <getRxData>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <BasicUSART2_Callback+0x14>)
 8001412:	701a      	strb	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000

0800141c <adcComplete_Callback>:

//-------------------------ADC--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el ADC
void adcComplete_Callback(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	adcData = getADC();
 8001420:	f000 fbc0 	bl	8001ba4 <getADC>
 8001424:	4603      	mov	r3, r0
 8001426:	461a      	mov	r2, r3
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <adcComplete_Callback+0x14>)
 800142a:	801a      	strh	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000306 	.word	0x20000306

08001434 <callback_extInt13>:

//-------------------------UserButton--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13
void callback_extInt13(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	writeMsg(&handler_USART_USB, sendMg);
 8001438:	490a      	ldr	r1, [pc, #40]	; (8001464 <callback_extInt13+0x30>)
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <callback_extInt13+0x34>)
 800143c:	f003 f87b 	bl	8004536 <writeMsg>
	if(duttyporc<100)
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <callback_extInt13+0x38>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b63      	cmp	r3, #99	; 0x63
 8001446:	d806      	bhi.n	8001456 <callback_extInt13+0x22>
	{
		duttyporc++;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <callback_extInt13+0x38>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <callback_extInt13+0x38>)
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e000      	b.n	8001458 <callback_extInt13+0x24>
	}
	else
	{
		__NOP();
 8001456:	bf00      	nop
	}
	estado = 1;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <callback_extInt13+0x3c>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000004 	.word	0x20000004
 8001468:	20000254 	.word	0x20000254
 800146c:	20000017 	.word	0x20000017
 8001470:	200002c8 	.word	0x200002c8

08001474 <acelerometro_I2C>:
//----------------------------Fin de la definicion de las funciones ISR----------------------------------------

//----------------------------Inicio de la definicion de las funciones-----------------------------------------

void acelerometro_I2C(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
	uint8_t i2cBuffer = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]

	switch(charRead)
 800147e:	4b77      	ldr	r3, [pc, #476]	; (800165c <acelerometro_I2C+0x1e8>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	3b70      	subs	r3, #112	; 0x70
 8001484:	2b0a      	cmp	r3, #10
 8001486:	f200 80e0 	bhi.w	800164a <acelerometro_I2C+0x1d6>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <acelerometro_I2C+0x1c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014f5 	.word	0x080014f5
 8001494:	0800164b 	.word	0x0800164b
 8001498:	0800152d 	.word	0x0800152d
 800149c:	0800164b 	.word	0x0800164b
 80014a0:	0800164b 	.word	0x0800164b
 80014a4:	0800164b 	.word	0x0800164b
 80014a8:	0800164b 	.word	0x0800164b
 80014ac:	080014bd 	.word	0x080014bd
 80014b0:	0800154f 	.word	0x0800154f
 80014b4:	080015a3 	.word	0x080015a3
 80014b8:	080015f7 	.word	0x080015f7
	{
	case 'w':
	{
		//Definimos un string
		sprintf(bufferMsg,"WHO AM I (r)?\n");
 80014bc:	4968      	ldr	r1, [pc, #416]	; (8001660 <acelerometro_I2C+0x1ec>)
 80014be:	4869      	ldr	r0, [pc, #420]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014c0:	f004 f8d4 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80014c4:	4967      	ldr	r1, [pc, #412]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014c6:	4868      	ldr	r0, [pc, #416]	; (8001668 <acelerometro_I2C+0x1f4>)
 80014c8:	f003 f835 	bl	8004536 <writeMsg>
		//Leemos el registro deseado del Sclave
		i2cBuffer = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, WHO_AM_I);
 80014cc:	2175      	movs	r1, #117	; 0x75
 80014ce:	4867      	ldr	r0, [pc, #412]	; (800166c <acelerometro_I2C+0x1f8>)
 80014d0:	f002 f9b8 	bl	8003844 <i2c_ReadSingleRegister>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
		//Definimos un string
		sprintf(bufferMsg,"dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	461a      	mov	r2, r3
 80014dc:	4964      	ldr	r1, [pc, #400]	; (8001670 <acelerometro_I2C+0x1fc>)
 80014de:	4861      	ldr	r0, [pc, #388]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014e0:	f004 f8c4 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80014e4:	495f      	ldr	r1, [pc, #380]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014e6:	4860      	ldr	r0, [pc, #384]	; (8001668 <acelerometro_I2C+0x1f4>)
 80014e8:	f003 f825 	bl	8004536 <writeMsg>
		charRead = '\0';
 80014ec:	4b5b      	ldr	r3, [pc, #364]	; (800165c <acelerometro_I2C+0x1e8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
		break;
 80014f2:	e0ae      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'p':
	{
		//Definimos un string
		sprintf(bufferMsg,"PWR_MGMT_l state (r)\n");
 80014f4:	495f      	ldr	r1, [pc, #380]	; (8001674 <acelerometro_I2C+0x200>)
 80014f6:	485b      	ldr	r0, [pc, #364]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014f8:	f004 f8b8 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80014fc:	4959      	ldr	r1, [pc, #356]	; (8001664 <acelerometro_I2C+0x1f0>)
 80014fe:	485a      	ldr	r0, [pc, #360]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001500:	f003 f819 	bl	8004536 <writeMsg>
		//Leemos el registro deseado del Sclave
		i2cBuffer = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, PWR_MGMT_l);
 8001504:	216b      	movs	r1, #107	; 0x6b
 8001506:	4859      	ldr	r0, [pc, #356]	; (800166c <acelerometro_I2C+0x1f8>)
 8001508:	f002 f99c 	bl	8003844 <i2c_ReadSingleRegister>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
		//Definimos un string
		sprintf(bufferMsg,"dataRead = 0x%x \n", (unsigned int) i2cBuffer);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	461a      	mov	r2, r3
 8001514:	4956      	ldr	r1, [pc, #344]	; (8001670 <acelerometro_I2C+0x1fc>)
 8001516:	4853      	ldr	r0, [pc, #332]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001518:	f004 f8a8 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 800151c:	4951      	ldr	r1, [pc, #324]	; (8001664 <acelerometro_I2C+0x1f0>)
 800151e:	4852      	ldr	r0, [pc, #328]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001520:	f003 f809 	bl	8004536 <writeMsg>
		charRead = '\0';
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <acelerometro_I2C+0x1e8>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
		break;
 800152a:	e092      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'r':
	{
		//Definimos un string
		sprintf(bufferMsg,"PWR_MGMT_l reset (r)\n");
 800152c:	4952      	ldr	r1, [pc, #328]	; (8001678 <acelerometro_I2C+0x204>)
 800152e:	484d      	ldr	r0, [pc, #308]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001530:	f004 f89c 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 8001534:	494b      	ldr	r1, [pc, #300]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001536:	484c      	ldr	r0, [pc, #304]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001538:	f002 fffd 	bl	8004536 <writeMsg>
		//Escribimos en el registro deseado del Sclave
		i2c_WriteSingleRegister(&handler_I2C_Acelerometro, PWR_MGMT_l, 0x00);
 800153c:	2200      	movs	r2, #0
 800153e:	216b      	movs	r1, #107	; 0x6b
 8001540:	484a      	ldr	r0, [pc, #296]	; (800166c <acelerometro_I2C+0x1f8>)
 8001542:	f002 f9b0 	bl	80038a6 <i2c_WriteSingleRegister>

		charRead = '\0';
 8001546:	4b45      	ldr	r3, [pc, #276]	; (800165c <acelerometro_I2C+0x1e8>)
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
		break;
 800154c:	e081      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'x':
	{
		//Definimos un string
		sprintf(bufferMsg,"Axis X data (r)\n");
 800154e:	494b      	ldr	r1, [pc, #300]	; (800167c <acelerometro_I2C+0x208>)
 8001550:	4844      	ldr	r0, [pc, #272]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001552:	f004 f88b 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 8001556:	4943      	ldr	r1, [pc, #268]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001558:	4843      	ldr	r0, [pc, #268]	; (8001668 <acelerometro_I2C+0x1f4>)
 800155a:	f002 ffec 	bl	8004536 <writeMsg>
		//Leemos el registro correspondiente a la poscicion en X del acelerometro
		uint8_t AccelX_low = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_XOUT_L);
 800155e:	213c      	movs	r1, #60	; 0x3c
 8001560:	4842      	ldr	r0, [pc, #264]	; (800166c <acelerometro_I2C+0x1f8>)
 8001562:	f002 f96f 	bl	8003844 <i2c_ReadSingleRegister>
 8001566:	4603      	mov	r3, r0
 8001568:	717b      	strb	r3, [r7, #5]
		uint8_t AccelX_high = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_XOUT_H);
 800156a:	213b      	movs	r1, #59	; 0x3b
 800156c:	483f      	ldr	r0, [pc, #252]	; (800166c <acelerometro_I2C+0x1f8>)
 800156e:	f002 f969 	bl	8003844 <i2c_ReadSingleRegister>
 8001572:	4603      	mov	r3, r0
 8001574:	713b      	strb	r3, [r7, #4]
		uint16_t AccelX = AccelX_high<<8 | AccelX_low;
 8001576:	793b      	ldrb	r3, [r7, #4]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	797b      	ldrb	r3, [r7, #5]
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	b21b      	sxth	r3, r3
 8001584:	807b      	strh	r3, [r7, #2]
		//Definimos un string
		sprintf(bufferMsg,"AccelX = %d \n", (int) AccelX );
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	493d      	ldr	r1, [pc, #244]	; (8001680 <acelerometro_I2C+0x20c>)
 800158c:	4835      	ldr	r0, [pc, #212]	; (8001664 <acelerometro_I2C+0x1f0>)
 800158e:	f004 f86d 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 8001592:	4934      	ldr	r1, [pc, #208]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001594:	4834      	ldr	r0, [pc, #208]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001596:	f002 ffce 	bl	8004536 <writeMsg>

		charRead = '\0';
 800159a:	4b30      	ldr	r3, [pc, #192]	; (800165c <acelerometro_I2C+0x1e8>)
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
		break;
 80015a0:	e057      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'y':
	{
		//Definimos un string
		sprintf(bufferMsg,"Axis Y data (r)\n");
 80015a2:	4938      	ldr	r1, [pc, #224]	; (8001684 <acelerometro_I2C+0x210>)
 80015a4:	482f      	ldr	r0, [pc, #188]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015a6:	f004 f861 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80015aa:	492e      	ldr	r1, [pc, #184]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015ac:	482e      	ldr	r0, [pc, #184]	; (8001668 <acelerometro_I2C+0x1f4>)
 80015ae:	f002 ffc2 	bl	8004536 <writeMsg>
		//Leemos el registro correspondiente a la poscicion en X del acelerometro
		uint8_t AccelY_low = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_YOUT_L);
 80015b2:	213e      	movs	r1, #62	; 0x3e
 80015b4:	482d      	ldr	r0, [pc, #180]	; (800166c <acelerometro_I2C+0x1f8>)
 80015b6:	f002 f945 	bl	8003844 <i2c_ReadSingleRegister>
 80015ba:	4603      	mov	r3, r0
 80015bc:	727b      	strb	r3, [r7, #9]
		uint8_t AccelY_high = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_YOUT_H);
 80015be:	213d      	movs	r1, #61	; 0x3d
 80015c0:	482a      	ldr	r0, [pc, #168]	; (800166c <acelerometro_I2C+0x1f8>)
 80015c2:	f002 f93f 	bl	8003844 <i2c_ReadSingleRegister>
 80015c6:	4603      	mov	r3, r0
 80015c8:	723b      	strb	r3, [r7, #8]
		uint16_t AccelY = AccelY_high<<8 | AccelY_low;
 80015ca:	7a3b      	ldrb	r3, [r7, #8]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7a7b      	ldrb	r3, [r7, #9]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	80fb      	strh	r3, [r7, #6]
		//Definimos un string
		sprintf(bufferMsg,"AccelY = %d \n", (int) AccelY);
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	461a      	mov	r2, r3
 80015de:	492a      	ldr	r1, [pc, #168]	; (8001688 <acelerometro_I2C+0x214>)
 80015e0:	4820      	ldr	r0, [pc, #128]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015e2:	f004 f843 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80015e6:	491f      	ldr	r1, [pc, #124]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015e8:	481f      	ldr	r0, [pc, #124]	; (8001668 <acelerometro_I2C+0x1f4>)
 80015ea:	f002 ffa4 	bl	8004536 <writeMsg>

		charRead = '\0';
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <acelerometro_I2C+0x1e8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
		break;
 80015f4:	e02d      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	case 'z':
	{
		//Definimos un string
		sprintf(bufferMsg,"Axis Z data (r)\n");
 80015f6:	4925      	ldr	r1, [pc, #148]	; (800168c <acelerometro_I2C+0x218>)
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <acelerometro_I2C+0x1f0>)
 80015fa:	f004 f837 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 80015fe:	4919      	ldr	r1, [pc, #100]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001600:	4819      	ldr	r0, [pc, #100]	; (8001668 <acelerometro_I2C+0x1f4>)
 8001602:	f002 ff98 	bl	8004536 <writeMsg>
		//Leemos el registro correspondiente a la poscicion en X del acelerometro
		uint8_t AccelZ_low = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_ZOUT_L);
 8001606:	2140      	movs	r1, #64	; 0x40
 8001608:	4818      	ldr	r0, [pc, #96]	; (800166c <acelerometro_I2C+0x1f8>)
 800160a:	f002 f91b 	bl	8003844 <i2c_ReadSingleRegister>
 800160e:	4603      	mov	r3, r0
 8001610:	73bb      	strb	r3, [r7, #14]
		uint8_t AccelZ_high = i2c_ReadSingleRegister(&handler_I2C_Acelerometro, ACCEL_ZOUT_H);
 8001612:	213f      	movs	r1, #63	; 0x3f
 8001614:	4815      	ldr	r0, [pc, #84]	; (800166c <acelerometro_I2C+0x1f8>)
 8001616:	f002 f915 	bl	8003844 <i2c_ReadSingleRegister>
 800161a:	4603      	mov	r3, r0
 800161c:	737b      	strb	r3, [r7, #13]
		uint16_t AccelZ = AccelZ_high<<8 | AccelZ_low;
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21b      	sxth	r3, r3
 800162c:	817b      	strh	r3, [r7, #10]
		//Definimos un string
		sprintf(bufferMsg,"AccelZ = %d \n", (int) AccelZ );
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	461a      	mov	r2, r3
 8001632:	4917      	ldr	r1, [pc, #92]	; (8001690 <acelerometro_I2C+0x21c>)
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <acelerometro_I2C+0x1f0>)
 8001636:	f004 f819 	bl	800566c <siprintf>
		//Enviamos por puerto serial dicho string
		writeMsg(&handler_USART_USB, bufferMsg);
 800163a:	490a      	ldr	r1, [pc, #40]	; (8001664 <acelerometro_I2C+0x1f0>)
 800163c:	480a      	ldr	r0, [pc, #40]	; (8001668 <acelerometro_I2C+0x1f4>)
 800163e:	f002 ff7a 	bl	8004536 <writeMsg>

		charRead = '\0';
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <acelerometro_I2C+0x1e8>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		break;
 8001648:	e003      	b.n	8001652 <acelerometro_I2C+0x1de>
	}
	default:
	{
		charRead = '\0';
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <acelerometro_I2C+0x1e8>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
		break;
 8001650:	bf00      	nop
	}
	}
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000
 8001660:	080092c4 	.word	0x080092c4
 8001664:	20000260 	.word	0x20000260
 8001668:	20000254 	.word	0x20000254
 800166c:	20000320 	.word	0x20000320
 8001670:	080092d4 	.word	0x080092d4
 8001674:	080092e8 	.word	0x080092e8
 8001678:	08009300 	.word	0x08009300
 800167c:	08009318 	.word	0x08009318
 8001680:	0800932c 	.word	0x0800932c
 8001684:	0800933c 	.word	0x0800933c
 8001688:	08009350 	.word	0x08009350
 800168c:	08009360 	.word	0x08009360
 8001690:	08009374 	.word	0x08009374

08001694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001698:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800169e:	490d      	ldr	r1, [pc, #52]	; (80016d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <LoopForever+0xe>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016b4:	4c0a      	ldr	r4, [pc, #40]	; (80016e0 <LoopForever+0x16>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016c2:	f003 f927 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c6:	f7ff fcd7 	bl	8001078 <main>

080016ca <LoopForever>:

LoopForever:
    b LoopForever
 80016ca:	e7fe      	b.n	80016ca <LoopForever>
  ldr   r0, =_estack
 80016cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80016d8:	0800983c 	.word	0x0800983c
  ldr r2, =_sbss
 80016dc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80016e0:	20000bb0 	.word	0x20000bb0

080016e4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <BusFault_Handler>

080016e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
	return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_kill>:

int _kill(int pid, int sig)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001700:	f003 f902 	bl	8004908 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	2216      	movs	r2, #22
 8001708:	601a      	str	r2, [r3, #0]
	return -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_exit>:

void _exit (int status)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800171e:	f04f 31ff 	mov.w	r1, #4294967295
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffe7 	bl	80016f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001728:	e7fe      	b.n	8001728 <_exit+0x12>

0800172a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e00a      	b.n	8001752 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800173c:	f3af 8000 	nop.w
 8001740:	4601      	mov	r1, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	60ba      	str	r2, [r7, #8]
 8001748:	b2ca      	uxtb	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	dbf0      	blt.n	800173c <_read+0x12>
	}

return len;
 800175a:	687b      	ldr	r3, [r7, #4]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e009      	b.n	800178a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	60ba      	str	r2, [r7, #8]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3301      	adds	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	429a      	cmp	r2, r3
 8001790:	dbf1      	blt.n	8001776 <_write+0x12>
	}
	return len;
 8001792:	687b      	ldr	r3, [r7, #4]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_close>:

int _close(int file)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	return -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c4:	605a      	str	r2, [r3, #4]
	return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_isatty>:

int _isatty(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
	return 0;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f003 f868 	bl	8004908 <__errno>
 8001838:	4603      	mov	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20020000 	.word	0x20020000
 8001864:	00000400 	.word	0x00000400
 8001868:	20000328 	.word	0x20000328
 800186c:	20000bb0 	.word	0x20000bb0

08001870 <arm_abs_f32>:
#else
void arm_abs_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8001870:	b480      	push	{r7}
 8001872:	b087      	sub	sp, #28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8001880:	e00e      	b.n	80018a0 <arm_abs_f32+0x30>
  {
    /* C = |A| */

    /* Calculate absolute and store result in destination buffer. */
    *pDst++ = fabsf(*pSrc++);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1d1a      	adds	r2, r3, #4
 8001886:	60fa      	str	r2, [r7, #12]
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1d1a      	adds	r2, r3, #4
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	eef0 7ae7 	vabs.f32	s15, s15
 8001896:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3b01      	subs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ed      	bne.n	8001882 <arm_abs_f32+0x12>
  }

}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <adc_Config>:
uint8_t channelSequence = 0;          //Definimos una variable para guardar el canal
uint16_t samplingPeriodChannel = 0;   //Definimos una variable para almacenar el tiempo de muestre
uint16_t	adcRawData = 0;           //Creamos una variable auxiliar

void adc_Config(ADC_Config_t *adcConfig)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Configuracion del Pin analogo------------------------------------------

	configAnalogPin(adcConfig->conversion.channelSequence_0);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f94b 	bl	8001bec <configAnalogPin>

	//---------------------------------2) Activamos la señal de reloj------------------------------------------
	//Registro: APB2ENR

	RCC->APB2ENR &= ~RCC_APB2ENR_ADC1EN;
 8001956:	4b85      	ldr	r3, [pc, #532]	; (8001b6c <adc_Config+0x228>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a84      	ldr	r2, [pc, #528]	; (8001b6c <adc_Config+0x228>)
 800195c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <adc_Config+0x228>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a81      	ldr	r2, [pc, #516]	; (8001b6c <adc_Config+0x228>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6453      	str	r3, [r2, #68]	; 0x44

	//---------------------------------3) Limpiamos los registros------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ADC1->CR1 = 0;
 800196e:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <adc_Config+0x22c>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0;
 8001974:	4b7e      	ldr	r3, [pc, #504]	; (8001b70 <adc_Config+0x22c>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]

	//----------------------------------4) Resolucion del ADC-----------------------------------------
	//Registro: CR1

	//Verificamos la resolucion escogida
	switch(adcConfig->resolution)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001980:	2b03      	cmp	r3, #3
 8001982:	d83d      	bhi.n	8001a00 <adc_Config+0xbc>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <adc_Config+0x48>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019b3 	.word	0x080019b3
 8001994:	080019cd 	.word	0x080019cd
 8001998:	080019e7 	.word	0x080019e7
	{
		case ADC_RESOLUTION_12_BIT:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 800199c:	4b74      	ldr	r3, [pc, #464]	; (8001b70 <adc_Config+0x22c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a73      	ldr	r2, [pc, #460]	; (8001b70 <adc_Config+0x22c>)
 80019a2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019a6:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b00<<ADC_CR1_RES_Pos;
 80019a8:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <adc_Config+0x22c>)
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <adc_Config+0x22c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	6053      	str	r3, [r2, #4]

			break;
 80019b0:	e031      	b.n	8001a16 <adc_Config+0xd2>
		}

		case ADC_RESOLUTION_10_BIT:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <adc_Config+0x22c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <adc_Config+0x22c>)
 80019b8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019bc:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b01<<ADC_CR1_RES_Pos;
 80019be:	4b6c      	ldr	r3, [pc, #432]	; (8001b70 <adc_Config+0x22c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4a6b      	ldr	r2, [pc, #428]	; (8001b70 <adc_Config+0x22c>)
 80019c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c8:	6053      	str	r3, [r2, #4]
			break;
 80019ca:	e024      	b.n	8001a16 <adc_Config+0xd2>
		}

		case ADC_RESOLUTION_8_BIT:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <adc_Config+0x22c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <adc_Config+0x22c>)
 80019d2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019d6:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b10<<ADC_CR1_RES_Pos;
 80019d8:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <adc_Config+0x22c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a64      	ldr	r2, [pc, #400]	; (8001b70 <adc_Config+0x22c>)
 80019de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e2:	6053      	str	r3, [r2, #4]

			break;
 80019e4:	e017      	b.n	8001a16 <adc_Config+0xd2>
		}

		case ADC_RESOLUTION_6_BIT:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <adc_Config+0x22c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a61      	ldr	r2, [pc, #388]	; (8001b70 <adc_Config+0x22c>)
 80019ec:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80019f0:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b11<<ADC_CR1_RES_Pos;
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <adc_Config+0x22c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a5e      	ldr	r2, [pc, #376]	; (8001b70 <adc_Config+0x22c>)
 80019f8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80019fc:	6053      	str	r3, [r2, #4]
			break;
 80019fe:	e00a      	b.n	8001a16 <adc_Config+0xd2>
		}

		default:
		{
			ADC1->CR1 &= ~(0b11<<ADC_CR1_RES_Pos);
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <adc_Config+0x22c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a5a      	ldr	r2, [pc, #360]	; (8001b70 <adc_Config+0x22c>)
 8001a06:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001a0a:	6053      	str	r3, [r2, #4]
			ADC1->CR1 |= 0b00<<ADC_CR1_RES_Pos;
 8001a0c:	4b58      	ldr	r3, [pc, #352]	; (8001b70 <adc_Config+0x22c>)
 8001a0e:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <adc_Config+0x22c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	6053      	str	r3, [r2, #4]
			break;
 8001a14:	bf00      	nop
	}

	//---------------------------------5) Desactivamos el modo Scan -----------------------------------------
	//Registro: CR1

	ADC1->CR1 &= ~ADC_CR1_SCAN;
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <adc_Config+0x22c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a55      	ldr	r2, [pc, #340]	; (8001b70 <adc_Config+0x22c>)
 8001a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a20:	6053      	str	r3, [r2, #4]

	//---------------------------------6) Alineacion de los datos----------------------------------------
	//Registro: CR2

	//Verificamos la alineacion escogida
	if(adcConfig->dataAlignment == ADC_ALIGNMENT_RIGHT)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d106      	bne.n	8001a3a <adc_Config+0xf6>
	{
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <adc_Config+0x22c>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a4f      	ldr	r2, [pc, #316]	; (8001b70 <adc_Config+0x22c>)
 8001a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a36:	6093      	str	r3, [r2, #8]
 8001a38:	e00b      	b.n	8001a52 <adc_Config+0x10e>

	}
	else
	{
		ADC1->CR2 &= ~ADC_CR2_ALIGN;
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <adc_Config+0x22c>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4a4c      	ldr	r2, [pc, #304]	; (8001b70 <adc_Config+0x22c>)
 8001a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a44:	6093      	str	r3, [r2, #8]
		ADC1->CR2 |= ADC_CR2_ALIGN;
 8001a46:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <adc_Config+0x22c>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <adc_Config+0x22c>)
 8001a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a50:	6093      	str	r3, [r2, #8]
	}

	//---------------------------------7) Desactivamos el modo continuo---------------------------------------
	//Registro: CR2

	ADC1->CR2 &= ~ADC_CR2_CONT;
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <adc_Config+0x22c>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4a46      	ldr	r2, [pc, #280]	; (8001b70 <adc_Config+0x22c>)
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	6093      	str	r3, [r2, #8]

	//---------------------------------8) Definimos el Sampling---------------------------------------
	//Registro: SMPR2
	//Registro: SMPR1

	if(adcConfig->conversion.channelSequence_0<=ADC_CHANNEL_9)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	d810      	bhi.n	8001a88 <adc_Config+0x144>
	{
		ADC1->SMPR2 |= (adcConfig->sampling.samplingPeriodChannel_0<<(3*(adcConfig->conversion.channelSequence_0)));
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <adc_Config+0x22c>)
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	8a5b      	ldrh	r3, [r3, #18]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	460b      	mov	r3, r1
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	440b      	add	r3, r1
 8001a7c:	fa00 f303 	lsl.w	r3, r0, r3
 8001a80:	493b      	ldr	r1, [pc, #236]	; (8001b70 <adc_Config+0x22c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	610b      	str	r3, [r1, #16]
 8001a86:	e010      	b.n	8001aaa <adc_Config+0x166>
	}
	else
	{
		ADC1->SMPR1 |= (adcConfig->sampling.samplingPeriodChannel_0<<(3*(adcConfig->conversion.channelSequence_0-10)));
 8001a88:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <adc_Config+0x22c>)
 8001a8a:	68d9      	ldr	r1, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	8a5b      	ldrh	r3, [r3, #18]
 8001a90:	4618      	mov	r0, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f1a3 020a 	sub.w	r2, r3, #10
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	fa00 f303 	lsl.w	r3, r0, r3
 8001aa4:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <adc_Config+0x22c>)
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	60d3      	str	r3, [r2, #12]

	//---------------------------------9) Configuracion elementos en la secuencias---------------------------------------
	//Registro: SQR1
	//Registro: SQR3

	ADC1->SQR1 = 0; //Definimos un solo elemento en la secuancia, impricitamente se especifica un solo elemento L
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <adc_Config+0x22c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 |= (adcConfig->conversion.channelSequence_0 << 0); //Definimos que el canal seleccionado sea la primera conversion
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <adc_Config+0x22c>)
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	7812      	ldrb	r2, [r2, #0]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <adc_Config+0x22c>)
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6353      	str	r3, [r2, #52]	; 0x34

	//---------------------------------10) Configuramos el preescaler del ADC---------------------------------------
	//Registro: CCR

	uint8_t clocKAPB2 = getConfigPLL();
 8001ac0:	f001 ff14 	bl	80038ec <getConfigPLL>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]

	//Verificamos que la señal de reloj entrante al ADC no supere los 36MHz
	if(clocKAPB2/2<=36)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b49      	cmp	r3, #73	; 0x49
 8001acc:	d806      	bhi.n	8001adc <adc_Config+0x198>
	{
		ADC->CCR &= ~(0b11<<ADC_CCR_ADCPRE_Pos);   //Preescaler	de 2
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <adc_Config+0x230>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <adc_Config+0x230>)
 8001ad4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ad8:	6053      	str	r3, [r2, #4]
 8001ada:	e00b      	b.n	8001af4 <adc_Config+0x1b0>
	}
	else
	{
		ADC->CCR &= ~(0b11<<ADC_CCR_ADCPRE_Pos);
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <adc_Config+0x230>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a24      	ldr	r2, [pc, #144]	; (8001b74 <adc_Config+0x230>)
 8001ae2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ae6:	6053      	str	r3, [r2, #4]
		ADC->CCR |= (0b01<<ADC_CCR_ADCPRE_Pos);   //Preescaler	de 4
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <adc_Config+0x230>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <adc_Config+0x230>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6053      	str	r3, [r2, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Activamos la interupcion debido a finalizar una conversion
	ADC1->CR1 |= ADC_CR1_EOCIE;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <adc_Config+0x22c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <adc_Config+0x22c>)
 8001afe:	f043 0320 	orr.w	r3, r3, #32
 8001b02:	6053      	str	r3, [r2, #4]

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(ADC_IRQn);
 8001b04:	2012      	movs	r0, #18
 8001b06:	f7ff fed5 	bl	80018b4 <__NVIC_EnableIRQ>

	//Configuramos la prioridad para la interrupción ADC
	NVIC_SetPriority(ADC_IRQn, 4);
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	2012      	movs	r0, #18
 8001b0e:	f7ff feef 	bl	80018f0 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b12:	b662      	cpsie	i
}
 8001b14:	bf00      	nop

	//---------------------------------14) Configuracion de eventos externos---------------------------------------
	//Registro: CR2

	//Seleccionamos el tipo de evento externo
	ADC1->CR2 &= ~(0b1111<<ADC_CR2_EXTSEL_Pos);
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <adc_Config+0x22c>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <adc_Config+0x22c>)
 8001b1c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001b20:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (adcConfig->typeEXTEvent<<ADC_CR2_EXTSEL_Pos);
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <adc_Config+0x22c>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8001b2c:	0612      	lsls	r2, r2, #24
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <adc_Config+0x22c>)
 8001b32:	430b      	orrs	r3, r1
 8001b34:	6093      	str	r3, [r2, #8]

	//definimos como sera el evento externo
	ADC1->CR2 &= ~(0b11<<ADC_CR2_EXTEN_Pos);
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <adc_Config+0x22c>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <adc_Config+0x22c>)
 8001b3c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001b40:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (adcConfig->externalEvent<<ADC_CR2_EXTEN_Pos);
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <adc_Config+0x22c>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8001b4c:	0712      	lsls	r2, r2, #28
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <adc_Config+0x22c>)
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6093      	str	r3, [r2, #8]

	//---------------------------------13) Activamos el modulo ADC---------------------------------------
	//Registro: CR2

	ADC1->CR2 |= ADC_CR2_ADON;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <adc_Config+0x22c>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <adc_Config+0x22c>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6093      	str	r3, [r2, #8]
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40012000 	.word	0x40012000
 8001b74:	40012300 	.word	0x40012300

08001b78 <startSingleADC>:
}


//Funcion para realizar solo una conversion ADC, El dato es leido en el Callback empleando getADC()
void startSingleADC(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
	//Limpiamos el bit del overrun
	ADC1->CR1 &= ~ADC_CR1_OVRIE;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <startSingleADC+0x28>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <startSingleADC+0x28>)
 8001b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b86:	6053      	str	r3, [r2, #4]
	// Iniciamos un ciclo de conversión ADC
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <startSingleADC+0x28>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <startSingleADC+0x28>)
 8001b8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b92:	6093      	str	r3, [r2, #8]
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40012000 	.word	0x40012000

08001ba4 <getADC>:


//Funcion que retorna el ultimo dato arquirido por el ADC
uint16_t getADC(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	//Retorna el ultimo valor del ADC
	return adcRawData;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <getADC+0x14>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000338 	.word	0x20000338

08001bbc <ADC_IRQHandler>:
	__NOP();
}

//ISR de la interrupción por conversión ADC
void ADC_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	if(ADC1->SR & ADC_SR_EOC)
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <ADC_IRQHandler+0x28>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <ADC_IRQHandler+0x20>
	{
		// Evaluamos que se dio la interrupción por conversión ADC
		adcRawData = ADC1->DR;
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <ADC_IRQHandler+0x28>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <ADC_IRQHandler+0x2c>)
 8001bd4:	801a      	strh	r2, [r3, #0]
		//llamamos la funcion de la interupcion
		adcComplete_Callback();
 8001bd6:	f7ff fc21 	bl	800141c <adcComplete_Callback>
	}
	else
	{
		__NOP();
	}
}
 8001bda:	e000      	b.n	8001bde <ADC_IRQHandler+0x22>
		__NOP();
 8001bdc:	bf00      	nop
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40012000 	.word	0x40012000
 8001be8:	20000338 	.word	0x20000338

08001bec <configAnalogPin>:


//--------------------------------Funciones especificas para el uso del ADC -------------------

//Función que configura que pin deseamos que funcione como canal ADC
void configAnalogPin(uint8_t adcChannel) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]

	// Seleccionamos el canal y lo configuramos como análogo.
	switch (adcChannel) {
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	f200 8093 	bhi.w	8001d24 <configAnalogPin+0x138>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <configAnalogPin+0x18>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c45 	.word	0x08001c45
 8001c08:	08001c53 	.word	0x08001c53
 8001c0c:	08001c61 	.word	0x08001c61
 8001c10:	08001c6f 	.word	0x08001c6f
 8001c14:	08001c7d 	.word	0x08001c7d
 8001c18:	08001c8b 	.word	0x08001c8b
 8001c1c:	08001c99 	.word	0x08001c99
 8001c20:	08001ca7 	.word	0x08001ca7
 8001c24:	08001cb5 	.word	0x08001cb5
 8001c28:	08001cc3 	.word	0x08001cc3
 8001c2c:	08001cd1 	.word	0x08001cd1
 8001c30:	08001cdf 	.word	0x08001cdf
 8001c34:	08001ced 	.word	0x08001ced
 8001c38:	08001cfb 	.word	0x08001cfb
 8001c3c:	08001d09 	.word	0x08001d09
 8001c40:	08001d17 	.word	0x08001d17

	case ADC_CHANNEL_0: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <configAnalogPin+0x150>)
 8001c46:	4a3e      	ldr	r2, [pc, #248]	; (8001d40 <configAnalogPin+0x154>)
 8001c48:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <configAnalogPin+0x150>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]

		break;
 8001c50:	e069      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_1: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <configAnalogPin+0x150>)
 8001c54:	4a3a      	ldr	r2, [pc, #232]	; (8001d40 <configAnalogPin+0x154>)
 8001c56:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <configAnalogPin+0x150>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]

		break;
 8001c5e:	e062      	b.n	8001d26 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_2: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <configAnalogPin+0x150>)
 8001c62:	4a37      	ldr	r2, [pc, #220]	; (8001d40 <configAnalogPin+0x154>)
 8001c64:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <configAnalogPin+0x150>)
 8001c68:	2202      	movs	r2, #2
 8001c6a:	701a      	strb	r2, [r3, #0]
		break;
 8001c6c:	e05b      	b.n	8001d26 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_3: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c6e:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <configAnalogPin+0x150>)
 8001c70:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <configAnalogPin+0x154>)
 8001c72:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <configAnalogPin+0x150>)
 8001c76:	2203      	movs	r2, #3
 8001c78:	701a      	strb	r2, [r3, #0]
		break;
 8001c7a:	e054      	b.n	8001d26 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_4: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <configAnalogPin+0x150>)
 8001c7e:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <configAnalogPin+0x154>)
 8001c80:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <configAnalogPin+0x150>)
 8001c84:	2204      	movs	r2, #4
 8001c86:	701a      	strb	r2, [r3, #0]
		break;
 8001c88:	e04d      	b.n	8001d26 <configAnalogPin+0x13a>
	}

	case ADC_CHANNEL_5: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <configAnalogPin+0x150>)
 8001c8c:	4a2c      	ldr	r2, [pc, #176]	; (8001d40 <configAnalogPin+0x154>)
 8001c8e:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <configAnalogPin+0x150>)
 8001c92:	2205      	movs	r2, #5
 8001c94:	701a      	strb	r2, [r3, #0]
		break;
 8001c96:	e046      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_6: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <configAnalogPin+0x150>)
 8001c9a:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <configAnalogPin+0x154>)
 8001c9c:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_6;
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <configAnalogPin+0x150>)
 8001ca0:	2206      	movs	r2, #6
 8001ca2:	701a      	strb	r2, [r3, #0]
		break;
 8001ca4:	e03f      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_7: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <configAnalogPin+0x150>)
 8001ca8:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <configAnalogPin+0x154>)
 8001caa:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_7;
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <configAnalogPin+0x150>)
 8001cae:	2207      	movs	r2, #7
 8001cb0:	701a      	strb	r2, [r3, #0]
		break;
 8001cb2:	e038      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_8: {

		handlerAdcPin.pGPIOx 						= GPIOB;
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <configAnalogPin+0x150>)
 8001cb6:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <configAnalogPin+0x158>)
 8001cb8:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <configAnalogPin+0x150>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
		break;
 8001cc0:	e031      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_9: {

		handlerAdcPin.pGPIOx 						= GPIOB;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <configAnalogPin+0x150>)
 8001cc4:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <configAnalogPin+0x158>)
 8001cc6:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001cc8:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <configAnalogPin+0x150>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
		break;
 8001cce:	e02a      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_10: {

		handlerAdcPin.pGPIOx 						= GPIOC;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <configAnalogPin+0x150>)
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <configAnalogPin+0x15c>)
 8001cd4:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_0;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <configAnalogPin+0x150>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
		break;
 8001cdc:	e023      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_11: {
		handlerAdcPin.pGPIOx 						= GPIOC;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <configAnalogPin+0x150>)
 8001ce0:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <configAnalogPin+0x15c>)
 8001ce2:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <configAnalogPin+0x150>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
		break;
 8001cea:	e01c      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_12: {

		handlerAdcPin.pGPIOx 						= GPIOA;
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <configAnalogPin+0x150>)
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <configAnalogPin+0x154>)
 8001cf0:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_2;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <configAnalogPin+0x150>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	701a      	strb	r2, [r3, #0]
		break;
 8001cf8:	e015      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_13: {

		handlerAdcPin.pGPIOx 						= GPIOC;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <configAnalogPin+0x150>)
 8001cfc:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <configAnalogPin+0x15c>)
 8001cfe:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <configAnalogPin+0x150>)
 8001d02:	2203      	movs	r2, #3
 8001d04:	701a      	strb	r2, [r3, #0]
		break;
 8001d06:	e00e      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_14: {

		handlerAdcPin.pGPIOx 						= GPIOC;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <configAnalogPin+0x150>)
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	; (8001d48 <configAnalogPin+0x15c>)
 8001d0c:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_4;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <configAnalogPin+0x150>)
 8001d10:	2204      	movs	r2, #4
 8001d12:	701a      	strb	r2, [r3, #0]
		break;
 8001d14:	e007      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	case ADC_CHANNEL_15: {

		handlerAdcPin.pGPIOx 						= GPIOC;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <configAnalogPin+0x150>)
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <configAnalogPin+0x15c>)
 8001d1a:	609a      	str	r2, [r3, #8]
		handlerAdcPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <configAnalogPin+0x150>)
 8001d1e:	2205      	movs	r2, #5
 8001d20:	701a      	strb	r2, [r3, #0]
		break;
 8001d22:	e000      	b.n	8001d26 <configAnalogPin+0x13a>
	}
	default: {
		break;
 8001d24:	bf00      	nop
	}
	}

	//Definimos el modo analogo para el pin definido
	handlerAdcPin.GPIO_PinConfig.GPIO_PinModer = GPIO_MODE_ANALOG;
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <configAnalogPin+0x150>)
 8001d28:	2203      	movs	r2, #3
 8001d2a:	705a      	strb	r2, [r3, #1]
	GPIO_Config(&handlerAdcPin);
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <configAnalogPin+0x150>)
 8001d2e:	f001 fa69 	bl	8003204 <GPIO_Config>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000032c 	.word	0x2000032c
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800

08001d4c <__NVIC_EnableIRQ>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d98:	d10a      	bne.n	8001db0 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001d9a:	4b62      	ldr	r3, [pc, #392]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a61      	ldr	r2, [pc, #388]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4a5f      	ldr	r2, [pc, #380]	; (8001f28 <BasicTimer_Config+0x1a0>)
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e02e      	b.n	8001e0e <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <BasicTimer_Config+0x1a4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10a      	bne.n	8001dd0 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8001dba:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a59      	ldr	r2, [pc, #356]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a59      	ldr	r2, [pc, #356]	; (8001f30 <BasicTimer_Config+0x1a8>)
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01e      	b.n	8001e0e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4a57      	ldr	r2, [pc, #348]	; (8001f34 <BasicTimer_Config+0x1ac>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10a      	bne.n	8001df0 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001dda:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4a53      	ldr	r2, [pc, #332]	; (8001f38 <BasicTimer_Config+0x1b0>)
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00e      	b.n	8001e0e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a51      	ldr	r2, [pc, #324]	; (8001f3c <BasicTimer_Config+0x1b4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d109      	bne.n	8001e0e <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8001dfa:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a49      	ldr	r2, [pc, #292]	; (8001f24 <BasicTimer_Config+0x19c>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <BasicTimer_Config+0x1b8>)
 8001e0c:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001e0e:	f001 fd6d 	bl	80038ec <getConfigPLL>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8001e16:	f001 fd85 	bl	8003924 <getClockAPB1>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8001e1e:	7bbb      	ldrb	r3, [r7, #14]
 8001e20:	2b31      	cmp	r3, #49	; 0x31
 8001e22:	d903      	bls.n	8001e2c <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	e000      	b.n	8001e2e <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8001e2c:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	8852      	ldrh	r2, [r2, #2]
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	1e5a      	subs	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d112      	bne.n	8001e6e <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f022 0210 	bic.w	r2, r2, #16
 8001e56:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	3201      	adds	r2, #1
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
 8001e6c:	e018      	b.n	8001ea0 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f022 0210 	bic.w	r2, r2, #16
 8001e7c:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f042 0210 	orr.w	r2, r2, #16
 8001e8c:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6852      	ldr	r2, [r2, #4]
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d103      	bne.n	8001eb6 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8001eae:	201c      	movs	r0, #28
 8001eb0:	f7ff ff4c 	bl	8001d4c <__NVIC_EnableIRQ>
 8001eb4:	e019      	b.n	8001eea <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <BasicTimer_Config+0x1a4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d103      	bne.n	8001ec8 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8001ec0:	201d      	movs	r0, #29
 8001ec2:	f7ff ff43 	bl	8001d4c <__NVIC_EnableIRQ>
 8001ec6:	e010      	b.n	8001eea <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <BasicTimer_Config+0x1ac>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d103      	bne.n	8001eda <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8001ed2:	201e      	movs	r0, #30
 8001ed4:	f7ff ff3a 	bl	8001d4c <__NVIC_EnableIRQ>
 8001ed8:	e007      	b.n	8001eea <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <BasicTimer_Config+0x1b4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d102      	bne.n	8001eea <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8001ee4:	2032      	movs	r0, #50	; 0x32
 8001ee6:	f7ff ff31 	bl	8001d4c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001eea:	b662      	cpsie	i
}
 8001eec:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7a1b      	ldrb	r3, [r3, #8]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f87d 	bl	8001ff4 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	2000033c 	.word	0x2000033c
 8001f2c:	40000400 	.word	0x40000400
 8001f30:	20000340 	.word	0x20000340
 8001f34:	40000800 	.word	0x40000800
 8001f38:	20000344 	.word	0x20000344
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	20000348 	.word	0x20000348

08001f44 <BasicTimer3_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer3_Callback(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
	__NOP();
 8001f48:	bf00      	nop
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <BasicTimer4_Callback>:

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
	__NOP();
 8001f58:	bf00      	nop
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	__NOP();
 8001f68:	bf00      	nop
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <TIM2_IRQHandler+0x1c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691a      	ldr	r2, [r3, #16]
 8001f7e:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <TIM2_IRQHandler+0x1c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8001f88:	f7ff fa30 	bl	80013ec <BasicTimer2_Callback>

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000033c 	.word	0x2000033c

08001f94 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <TIM3_IRQHandler+0x1c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <TIM3_IRQHandler+0x1c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8001fa8:	f7ff ffcc 	bl	8001f44 <BasicTimer3_Callback>

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000340 	.word	0x20000340

08001fb4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <TIM4_IRQHandler+0x1c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <TIM4_IRQHandler+0x1c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8001fc8:	f7ff ffc4 	bl	8001f54 <BasicTimer4_Callback>

}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000344 	.word	0x20000344

08001fd4 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <TIM5_IRQHandler+0x1c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <TIM5_IRQHandler+0x1c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8001fe8:	f7ff ffbc 	bl	8001f64 <BasicTimer5_Callback>

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000348 	.word	0x20000348

08001ff4 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d108      	bne.n	8002018 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002016:	e007      	b.n	8002028 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	60da      	str	r2, [r3, #12]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <__NVIC_EnableIRQ>:
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db0b      	blt.n	800205e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	f003 021f 	and.w	r2, r3, #31
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <__NVIC_EnableIRQ+0x38>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	2001      	movs	r0, #1
 8002056:	fa00 f202 	lsl.w	r2, r0, r2
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af02      	add	r7, sp, #8
 8002076:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	2300      	movs	r3, #0
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2301      	movs	r3, #1
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	f001 f899 	bl	80031c0 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f001 f8b6 	bl	8003204 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002098:	4b97      	ldr	r3, [pc, #604]	; (80022f8 <extInt_Config+0x288>)
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	4a96      	ldr	r2, [pc, #600]	; (80022f8 <extInt_Config+0x288>)
 800209e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a2:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b0f      	cmp	r3, #15
 80020ac:	f200 85cf 	bhi.w	8002c4e <extInt_Config+0xbde>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <extInt_Config+0x48>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020f9 	.word	0x080020f9
 80020bc:	080021af 	.word	0x080021af
 80020c0:	08002265 	.word	0x08002265
 80020c4:	0800233b 	.word	0x0800233b
 80020c8:	080023f1 	.word	0x080023f1
 80020cc:	0800249f 	.word	0x0800249f
 80020d0:	08002565 	.word	0x08002565
 80020d4:	0800260d 	.word	0x0800260d
 80020d8:	080026b5 	.word	0x080026b5
 80020dc:	0800275d 	.word	0x0800275d
 80020e0:	08002823 	.word	0x08002823
 80020e4:	080028cb 	.word	0x080028cb
 80020e8:	08002973 	.word	0x08002973
 80020ec:	08002a39 	.word	0x08002a39
 80020f0:	08002ae1 	.word	0x08002ae1
 80020f4:	08002b89 	.word	0x08002b89
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80020f8:	4b80      	ldr	r3, [pc, #512]	; (80022fc <extInt_Config+0x28c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a7f      	ldr	r2, [pc, #508]	; (80022fc <extInt_Config+0x28c>)
 80020fe:	f023 030f 	bic.w	r3, r3, #15
 8002102:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4a7d      	ldr	r2, [pc, #500]	; (8002300 <extInt_Config+0x290>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d105      	bne.n	800211c <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002110:	4b7a      	ldr	r3, [pc, #488]	; (80022fc <extInt_Config+0x28c>)
 8002112:	4a7a      	ldr	r2, [pc, #488]	; (80022fc <extInt_Config+0x28c>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002118:	f000 bd9b 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	4a78      	ldr	r2, [pc, #480]	; (8002304 <extInt_Config+0x294>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d107      	bne.n	8002138 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002128:	4b74      	ldr	r3, [pc, #464]	; (80022fc <extInt_Config+0x28c>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a73      	ldr	r2, [pc, #460]	; (80022fc <extInt_Config+0x28c>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6093      	str	r3, [r2, #8]
		break;
 8002134:	f000 bd8d 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4a72      	ldr	r2, [pc, #456]	; (8002308 <extInt_Config+0x298>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d107      	bne.n	8002154 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002144:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <extInt_Config+0x28c>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4a6c      	ldr	r2, [pc, #432]	; (80022fc <extInt_Config+0x28c>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	6093      	str	r3, [r2, #8]
		break;
 8002150:	f000 bd7f 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	4a6c      	ldr	r2, [pc, #432]	; (800230c <extInt_Config+0x29c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d107      	bne.n	8002170 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002160:	4b66      	ldr	r3, [pc, #408]	; (80022fc <extInt_Config+0x28c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a65      	ldr	r2, [pc, #404]	; (80022fc <extInt_Config+0x28c>)
 8002166:	f043 0303 	orr.w	r3, r3, #3
 800216a:	6093      	str	r3, [r2, #8]
		break;
 800216c:	f000 bd71 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4a66      	ldr	r2, [pc, #408]	; (8002310 <extInt_Config+0x2a0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d107      	bne.n	800218c <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <extInt_Config+0x28c>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a5e      	ldr	r2, [pc, #376]	; (80022fc <extInt_Config+0x28c>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6093      	str	r3, [r2, #8]
		break;
 8002188:	f000 bd63 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4a60      	ldr	r2, [pc, #384]	; (8002314 <extInt_Config+0x2a4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d107      	bne.n	80021a8 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002198:	4b58      	ldr	r3, [pc, #352]	; (80022fc <extInt_Config+0x28c>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <extInt_Config+0x28c>)
 800219e:	f043 0307 	orr.w	r3, r3, #7
 80021a2:	6093      	str	r3, [r2, #8]
		break;
 80021a4:	f000 bd55 	b.w	8002c52 <extInt_Config+0xbe2>
			__NOP();
 80021a8:	bf00      	nop
		break;
 80021aa:	f000 bd52 	b.w	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <extInt_Config+0x28c>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4a52      	ldr	r2, [pc, #328]	; (80022fc <extInt_Config+0x28c>)
 80021b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021b8:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <extInt_Config+0x290>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d105      	bne.n	80021d2 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80021c6:	4b4d      	ldr	r3, [pc, #308]	; (80022fc <extInt_Config+0x28c>)
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <extInt_Config+0x28c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80021ce:	f000 bd40 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <extInt_Config+0x294>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d107      	bne.n	80021ee <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <extInt_Config+0x28c>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	4a46      	ldr	r2, [pc, #280]	; (80022fc <extInt_Config+0x28c>)
 80021e4:	f043 0310 	orr.w	r3, r3, #16
 80021e8:	6093      	str	r3, [r2, #8]
		break;
 80021ea:	f000 bd32 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a44      	ldr	r2, [pc, #272]	; (8002308 <extInt_Config+0x298>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d107      	bne.n	800220a <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80021fa:	4b40      	ldr	r3, [pc, #256]	; (80022fc <extInt_Config+0x28c>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <extInt_Config+0x28c>)
 8002200:	f043 0320 	orr.w	r3, r3, #32
 8002204:	6093      	str	r3, [r2, #8]
		break;
 8002206:	f000 bd24 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a3e      	ldr	r2, [pc, #248]	; (800230c <extInt_Config+0x29c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d107      	bne.n	8002226 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <extInt_Config+0x28c>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4a38      	ldr	r2, [pc, #224]	; (80022fc <extInt_Config+0x28c>)
 800221c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002220:	6093      	str	r3, [r2, #8]
		break;
 8002222:	f000 bd16 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4a38      	ldr	r2, [pc, #224]	; (8002310 <extInt_Config+0x2a0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d107      	bne.n	8002242 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <extInt_Config+0x28c>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4a31      	ldr	r2, [pc, #196]	; (80022fc <extInt_Config+0x28c>)
 8002238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800223c:	6093      	str	r3, [r2, #8]
		break;
 800223e:	f000 bd08 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a32      	ldr	r2, [pc, #200]	; (8002314 <extInt_Config+0x2a4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d107      	bne.n	800225e <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800224e:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <extInt_Config+0x28c>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <extInt_Config+0x28c>)
 8002254:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002258:	6093      	str	r3, [r2, #8]
		break;
 800225a:	f000 bcfa 	b.w	8002c52 <extInt_Config+0xbe2>
			__NOP();
 800225e:	bf00      	nop
		break;
 8002260:	f000 bcf7 	b.w	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <extInt_Config+0x28c>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <extInt_Config+0x28c>)
 800226a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800226e:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	4a22      	ldr	r2, [pc, #136]	; (8002300 <extInt_Config+0x290>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d105      	bne.n	8002288 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 800227c:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <extInt_Config+0x28c>)
 800227e:	4a1f      	ldr	r2, [pc, #124]	; (80022fc <extInt_Config+0x28c>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002284:	f000 bce5 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <extInt_Config+0x294>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d107      	bne.n	80022a4 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <extInt_Config+0x28c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a18      	ldr	r2, [pc, #96]	; (80022fc <extInt_Config+0x28c>)
 800229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229e:	6093      	str	r3, [r2, #8]
		break;
 80022a0:	f000 bcd7 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <extInt_Config+0x298>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d107      	bne.n	80022c0 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <extInt_Config+0x28c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <extInt_Config+0x28c>)
 80022b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ba:	6093      	str	r3, [r2, #8]
		break;
 80022bc:	f000 bcc9 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <extInt_Config+0x29c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d107      	bne.n	80022dc <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <extInt_Config+0x28c>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <extInt_Config+0x28c>)
 80022d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80022d6:	6093      	str	r3, [r2, #8]
		break;
 80022d8:	f000 bcbb 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <extInt_Config+0x2a0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d117      	bne.n	8002318 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <extInt_Config+0x28c>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4a03      	ldr	r2, [pc, #12]	; (80022fc <extInt_Config+0x28c>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f2:	6093      	str	r3, [r2, #8]
		break;
 80022f4:	f000 bcad 	b.w	8002c52 <extInt_Config+0xbe2>
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40013800 	.word	0x40013800
 8002300:	40020000 	.word	0x40020000
 8002304:	40020400 	.word	0x40020400
 8002308:	40020800 	.word	0x40020800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40021000 	.word	0x40021000
 8002314:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <extInt_Config+0x4d8>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d107      	bne.n	8002334 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002324:	4b89      	ldr	r3, [pc, #548]	; (800254c <extInt_Config+0x4dc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a88      	ldr	r2, [pc, #544]	; (800254c <extInt_Config+0x4dc>)
 800232a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800232e:	6093      	str	r3, [r2, #8]
		break;
 8002330:	f000 bc8f 	b.w	8002c52 <extInt_Config+0xbe2>
			__NOP();
 8002334:	bf00      	nop
		break;
 8002336:	f000 bc8c 	b.w	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 800233a:	4b84      	ldr	r3, [pc, #528]	; (800254c <extInt_Config+0x4dc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	4a83      	ldr	r2, [pc, #524]	; (800254c <extInt_Config+0x4dc>)
 8002340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002344:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4a80      	ldr	r2, [pc, #512]	; (8002550 <extInt_Config+0x4e0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d105      	bne.n	800235e <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8002352:	4b7e      	ldr	r3, [pc, #504]	; (800254c <extInt_Config+0x4dc>)
 8002354:	4a7d      	ldr	r2, [pc, #500]	; (800254c <extInt_Config+0x4dc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800235a:	f000 bc7a 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a7b      	ldr	r2, [pc, #492]	; (8002554 <extInt_Config+0x4e4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d107      	bne.n	800237a <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 800236a:	4b78      	ldr	r3, [pc, #480]	; (800254c <extInt_Config+0x4dc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4a77      	ldr	r2, [pc, #476]	; (800254c <extInt_Config+0x4dc>)
 8002370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002374:	6093      	str	r3, [r2, #8]
		break;
 8002376:	f000 bc6c 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a75      	ldr	r2, [pc, #468]	; (8002558 <extInt_Config+0x4e8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d107      	bne.n	8002396 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002386:	4b71      	ldr	r3, [pc, #452]	; (800254c <extInt_Config+0x4dc>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4a70      	ldr	r2, [pc, #448]	; (800254c <extInt_Config+0x4dc>)
 800238c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002390:	6093      	str	r3, [r2, #8]
		break;
 8002392:	f000 bc5e 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a6f      	ldr	r2, [pc, #444]	; (800255c <extInt_Config+0x4ec>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d107      	bne.n	80023b2 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 80023a2:	4b6a      	ldr	r3, [pc, #424]	; (800254c <extInt_Config+0x4dc>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4a69      	ldr	r2, [pc, #420]	; (800254c <extInt_Config+0x4dc>)
 80023a8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80023ac:	6093      	str	r3, [r2, #8]
		break;
 80023ae:	f000 bc50 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a69      	ldr	r2, [pc, #420]	; (8002560 <extInt_Config+0x4f0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d107      	bne.n	80023ce <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 80023be:	4b63      	ldr	r3, [pc, #396]	; (800254c <extInt_Config+0x4dc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	4a62      	ldr	r2, [pc, #392]	; (800254c <extInt_Config+0x4dc>)
 80023c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c8:	6093      	str	r3, [r2, #8]
		break;
 80023ca:	f000 bc42 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a5c      	ldr	r2, [pc, #368]	; (8002548 <extInt_Config+0x4d8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d107      	bne.n	80023ea <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 80023da:	4b5c      	ldr	r3, [pc, #368]	; (800254c <extInt_Config+0x4dc>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4a5b      	ldr	r2, [pc, #364]	; (800254c <extInt_Config+0x4dc>)
 80023e0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80023e4:	6093      	str	r3, [r2, #8]
		break;
 80023e6:	f000 bc34 	b.w	8002c52 <extInt_Config+0xbe2>
			__NOP();
 80023ea:	bf00      	nop
		break;
 80023ec:	f000 bc31 	b.w	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80023f0:	4b56      	ldr	r3, [pc, #344]	; (800254c <extInt_Config+0x4dc>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <extInt_Config+0x4dc>)
 80023f6:	f023 030f 	bic.w	r3, r3, #15
 80023fa:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4a53      	ldr	r2, [pc, #332]	; (8002550 <extInt_Config+0x4e0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d105      	bne.n	8002414 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <extInt_Config+0x4dc>)
 800240a:	4a50      	ldr	r2, [pc, #320]	; (800254c <extInt_Config+0x4dc>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002410:	f000 bc1f 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4a4e      	ldr	r2, [pc, #312]	; (8002554 <extInt_Config+0x4e4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d107      	bne.n	8002430 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8002420:	4b4a      	ldr	r3, [pc, #296]	; (800254c <extInt_Config+0x4dc>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a49      	ldr	r2, [pc, #292]	; (800254c <extInt_Config+0x4dc>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	60d3      	str	r3, [r2, #12]
		break;
 800242c:	f000 bc11 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4a48      	ldr	r2, [pc, #288]	; (8002558 <extInt_Config+0x4e8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d107      	bne.n	800244c <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <extInt_Config+0x4dc>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <extInt_Config+0x4dc>)
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	60d3      	str	r3, [r2, #12]
		break;
 8002448:	f000 bc03 	b.w	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4a42      	ldr	r2, [pc, #264]	; (800255c <extInt_Config+0x4ec>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d106      	bne.n	8002466 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002458:	4b3c      	ldr	r3, [pc, #240]	; (800254c <extInt_Config+0x4dc>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4a3b      	ldr	r2, [pc, #236]	; (800254c <extInt_Config+0x4dc>)
 800245e:	f043 0303 	orr.w	r3, r3, #3
 8002462:	60d3      	str	r3, [r2, #12]
		break;
 8002464:	e3f5      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a3c      	ldr	r2, [pc, #240]	; (8002560 <extInt_Config+0x4f0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d106      	bne.n	8002480 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8002472:	4b36      	ldr	r3, [pc, #216]	; (800254c <extInt_Config+0x4dc>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4a35      	ldr	r2, [pc, #212]	; (800254c <extInt_Config+0x4dc>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	60d3      	str	r3, [r2, #12]
		break;
 800247e:	e3e8      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4a30      	ldr	r2, [pc, #192]	; (8002548 <extInt_Config+0x4d8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d106      	bne.n	800249a <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <extInt_Config+0x4dc>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <extInt_Config+0x4dc>)
 8002492:	f043 0307 	orr.w	r3, r3, #7
 8002496:	60d3      	str	r3, [r2, #12]
		break;
 8002498:	e3db      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 800249a:	bf00      	nop
		break;
 800249c:	e3d9      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <extInt_Config+0x4dc>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	4a2a      	ldr	r2, [pc, #168]	; (800254c <extInt_Config+0x4dc>)
 80024a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024a8:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a27      	ldr	r2, [pc, #156]	; (8002550 <extInt_Config+0x4e0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d104      	bne.n	80024c0 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <extInt_Config+0x4dc>)
 80024b8:	4a24      	ldr	r2, [pc, #144]	; (800254c <extInt_Config+0x4dc>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80024be:	e3c8      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	4a23      	ldr	r2, [pc, #140]	; (8002554 <extInt_Config+0x4e4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d106      	bne.n	80024da <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <extInt_Config+0x4dc>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4a1e      	ldr	r2, [pc, #120]	; (800254c <extInt_Config+0x4dc>)
 80024d2:	f043 0310 	orr.w	r3, r3, #16
 80024d6:	60d3      	str	r3, [r2, #12]
		break;
 80024d8:	e3bb      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <extInt_Config+0x4e8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d106      	bne.n	80024f4 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <extInt_Config+0x4dc>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	4a18      	ldr	r2, [pc, #96]	; (800254c <extInt_Config+0x4dc>)
 80024ec:	f043 0320 	orr.w	r3, r3, #32
 80024f0:	60d3      	str	r3, [r2, #12]
		break;
 80024f2:	e3ae      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <extInt_Config+0x4ec>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d106      	bne.n	800250e <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <extInt_Config+0x4dc>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <extInt_Config+0x4dc>)
 8002506:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800250a:	60d3      	str	r3, [r2, #12]
		break;
 800250c:	e3a1      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <extInt_Config+0x4f0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d106      	bne.n	8002528 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <extInt_Config+0x4dc>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4a0b      	ldr	r2, [pc, #44]	; (800254c <extInt_Config+0x4dc>)
 8002520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002524:	60d3      	str	r3, [r2, #12]
		break;
 8002526:	e394      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4a06      	ldr	r2, [pc, #24]	; (8002548 <extInt_Config+0x4d8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d106      	bne.n	8002542 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <extInt_Config+0x4dc>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <extInt_Config+0x4dc>)
 800253a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800253e:	60d3      	str	r3, [r2, #12]
		break;
 8002540:	e387      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 8002542:	bf00      	nop
		break;
 8002544:	e385      	b.n	8002c52 <extInt_Config+0xbe2>
 8002546:	bf00      	nop
 8002548:	40021c00 	.word	0x40021c00
 800254c:	40013800 	.word	0x40013800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400
 8002558:	40020800 	.word	0x40020800
 800255c:	40020c00 	.word	0x40020c00
 8002560:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8002564:	4b86      	ldr	r3, [pc, #536]	; (8002780 <extInt_Config+0x710>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a85      	ldr	r2, [pc, #532]	; (8002780 <extInt_Config+0x710>)
 800256a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800256e:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	4a83      	ldr	r2, [pc, #524]	; (8002784 <extInt_Config+0x714>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d104      	bne.n	8002586 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 800257c:	4b80      	ldr	r3, [pc, #512]	; (8002780 <extInt_Config+0x710>)
 800257e:	4a80      	ldr	r2, [pc, #512]	; (8002780 <extInt_Config+0x710>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002584:	e365      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a7e      	ldr	r2, [pc, #504]	; (8002788 <extInt_Config+0x718>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d106      	bne.n	80025a0 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8002592:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <extInt_Config+0x710>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	4a7a      	ldr	r2, [pc, #488]	; (8002780 <extInt_Config+0x710>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	60d3      	str	r3, [r2, #12]
		break;
 800259e:	e358      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4a79      	ldr	r2, [pc, #484]	; (800278c <extInt_Config+0x71c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d106      	bne.n	80025ba <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 80025ac:	4b74      	ldr	r3, [pc, #464]	; (8002780 <extInt_Config+0x710>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a73      	ldr	r2, [pc, #460]	; (8002780 <extInt_Config+0x710>)
 80025b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b6:	60d3      	str	r3, [r2, #12]
		break;
 80025b8:	e34b      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a73      	ldr	r2, [pc, #460]	; (8002790 <extInt_Config+0x720>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d106      	bne.n	80025d4 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 80025c6:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <extInt_Config+0x710>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4a6d      	ldr	r2, [pc, #436]	; (8002780 <extInt_Config+0x710>)
 80025cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025d0:	60d3      	str	r3, [r2, #12]
		break;
 80025d2:	e33e      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a6e      	ldr	r2, [pc, #440]	; (8002794 <extInt_Config+0x724>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d106      	bne.n	80025ee <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 80025e0:	4b67      	ldr	r3, [pc, #412]	; (8002780 <extInt_Config+0x710>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a66      	ldr	r2, [pc, #408]	; (8002780 <extInt_Config+0x710>)
 80025e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ea:	60d3      	str	r3, [r2, #12]
		break;
 80025ec:	e331      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a68      	ldr	r2, [pc, #416]	; (8002798 <extInt_Config+0x728>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d106      	bne.n	8002608 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80025fa:	4b61      	ldr	r3, [pc, #388]	; (8002780 <extInt_Config+0x710>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	4a60      	ldr	r2, [pc, #384]	; (8002780 <extInt_Config+0x710>)
 8002600:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002604:	60d3      	str	r3, [r2, #12]
		break;
 8002606:	e324      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 8002608:	bf00      	nop
		break;
 800260a:	e322      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 800260c:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <extInt_Config+0x710>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a5b      	ldr	r2, [pc, #364]	; (8002780 <extInt_Config+0x710>)
 8002612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002616:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4a59      	ldr	r2, [pc, #356]	; (8002784 <extInt_Config+0x714>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d104      	bne.n	800262e <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8002624:	4b56      	ldr	r3, [pc, #344]	; (8002780 <extInt_Config+0x710>)
 8002626:	4a56      	ldr	r2, [pc, #344]	; (8002780 <extInt_Config+0x710>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800262c:	e311      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a54      	ldr	r2, [pc, #336]	; (8002788 <extInt_Config+0x718>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d106      	bne.n	8002648 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 800263a:	4b51      	ldr	r3, [pc, #324]	; (8002780 <extInt_Config+0x710>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a50      	ldr	r2, [pc, #320]	; (8002780 <extInt_Config+0x710>)
 8002640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002644:	60d3      	str	r3, [r2, #12]
		break;
 8002646:	e304      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4a4f      	ldr	r2, [pc, #316]	; (800278c <extInt_Config+0x71c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d106      	bne.n	8002662 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <extInt_Config+0x710>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a49      	ldr	r2, [pc, #292]	; (8002780 <extInt_Config+0x710>)
 800265a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800265e:	60d3      	str	r3, [r2, #12]
		break;
 8002660:	e2f7      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a49      	ldr	r2, [pc, #292]	; (8002790 <extInt_Config+0x720>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d106      	bne.n	800267c <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800266e:	4b44      	ldr	r3, [pc, #272]	; (8002780 <extInt_Config+0x710>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a43      	ldr	r2, [pc, #268]	; (8002780 <extInt_Config+0x710>)
 8002674:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002678:	60d3      	str	r3, [r2, #12]
		break;
 800267a:	e2ea      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4a44      	ldr	r2, [pc, #272]	; (8002794 <extInt_Config+0x724>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d106      	bne.n	8002696 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002688:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <extInt_Config+0x710>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a3c      	ldr	r2, [pc, #240]	; (8002780 <extInt_Config+0x710>)
 800268e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002692:	60d3      	str	r3, [r2, #12]
		break;
 8002694:	e2dd      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a3e      	ldr	r2, [pc, #248]	; (8002798 <extInt_Config+0x728>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d106      	bne.n	80026b0 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <extInt_Config+0x710>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4a36      	ldr	r2, [pc, #216]	; (8002780 <extInt_Config+0x710>)
 80026a8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80026ac:	60d3      	str	r3, [r2, #12]
		break;
 80026ae:	e2d0      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 80026b0:	bf00      	nop
		break;
 80026b2:	e2ce      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <extInt_Config+0x710>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	4a31      	ldr	r2, [pc, #196]	; (8002780 <extInt_Config+0x710>)
 80026ba:	f023 030f 	bic.w	r3, r3, #15
 80026be:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <extInt_Config+0x714>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d104      	bne.n	80026d6 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <extInt_Config+0x710>)
 80026ce:	4a2c      	ldr	r2, [pc, #176]	; (8002780 <extInt_Config+0x710>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80026d4:	e2bd      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <extInt_Config+0x718>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d106      	bne.n	80026f0 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <extInt_Config+0x710>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	4a26      	ldr	r2, [pc, #152]	; (8002780 <extInt_Config+0x710>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6113      	str	r3, [r2, #16]
		break;
 80026ee:	e2b0      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4a25      	ldr	r2, [pc, #148]	; (800278c <extInt_Config+0x71c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d106      	bne.n	800270a <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <extInt_Config+0x710>)
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <extInt_Config+0x710>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	6113      	str	r3, [r2, #16]
		break;
 8002708:	e2a3      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <extInt_Config+0x720>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d106      	bne.n	8002724 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002716:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <extInt_Config+0x710>)
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	4a19      	ldr	r2, [pc, #100]	; (8002780 <extInt_Config+0x710>)
 800271c:	f043 0303 	orr.w	r3, r3, #3
 8002720:	6113      	str	r3, [r2, #16]
		break;
 8002722:	e296      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <extInt_Config+0x724>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d106      	bne.n	800273e <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <extInt_Config+0x710>)
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	4a12      	ldr	r2, [pc, #72]	; (8002780 <extInt_Config+0x710>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6113      	str	r3, [r2, #16]
		break;
 800273c:	e289      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <extInt_Config+0x728>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d106      	bne.n	8002758 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 800274a:	4b0d      	ldr	r3, [pc, #52]	; (8002780 <extInt_Config+0x710>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4a0c      	ldr	r2, [pc, #48]	; (8002780 <extInt_Config+0x710>)
 8002750:	f043 0307 	orr.w	r3, r3, #7
 8002754:	6113      	str	r3, [r2, #16]
		break;
 8002756:	e27c      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 8002758:	bf00      	nop
		break;
 800275a:	e27a      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <extInt_Config+0x710>)
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	4a07      	ldr	r2, [pc, #28]	; (8002780 <extInt_Config+0x710>)
 8002762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002766:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <extInt_Config+0x714>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d113      	bne.n	800279c <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <extInt_Config+0x710>)
 8002776:	4a02      	ldr	r2, [pc, #8]	; (8002780 <extInt_Config+0x710>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800277c:	e269      	b.n	8002c52 <extInt_Config+0xbe2>
 800277e:	bf00      	nop
 8002780:	40013800 	.word	0x40013800
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4a83      	ldr	r2, [pc, #524]	; (80029b0 <extInt_Config+0x940>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d106      	bne.n	80027b6 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 80027a8:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <extInt_Config+0x944>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	4a81      	ldr	r2, [pc, #516]	; (80029b4 <extInt_Config+0x944>)
 80027ae:	f043 0310 	orr.w	r3, r3, #16
 80027b2:	6113      	str	r3, [r2, #16]
		break;
 80027b4:	e24d      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a7e      	ldr	r2, [pc, #504]	; (80029b8 <extInt_Config+0x948>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d106      	bne.n	80027d0 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 80027c2:	4b7c      	ldr	r3, [pc, #496]	; (80029b4 <extInt_Config+0x944>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	4a7b      	ldr	r2, [pc, #492]	; (80029b4 <extInt_Config+0x944>)
 80027c8:	f043 0320 	orr.w	r3, r3, #32
 80027cc:	6113      	str	r3, [r2, #16]
		break;
 80027ce:	e240      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	4a79      	ldr	r2, [pc, #484]	; (80029bc <extInt_Config+0x94c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d106      	bne.n	80027ea <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 80027dc:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <extInt_Config+0x944>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	4a74      	ldr	r2, [pc, #464]	; (80029b4 <extInt_Config+0x944>)
 80027e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80027e6:	6113      	str	r3, [r2, #16]
		break;
 80027e8:	e233      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a73      	ldr	r2, [pc, #460]	; (80029c0 <extInt_Config+0x950>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d106      	bne.n	8002804 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80027f6:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <extInt_Config+0x944>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <extInt_Config+0x944>)
 80027fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002800:	6113      	str	r3, [r2, #16]
		break;
 8002802:	e226      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	4a6e      	ldr	r2, [pc, #440]	; (80029c4 <extInt_Config+0x954>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d106      	bne.n	800281e <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <extInt_Config+0x944>)
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	4a67      	ldr	r2, [pc, #412]	; (80029b4 <extInt_Config+0x944>)
 8002816:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800281a:	6113      	str	r3, [r2, #16]
		break;
 800281c:	e219      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 800281e:	bf00      	nop
		break;
 8002820:	e217      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 8002822:	4b64      	ldr	r3, [pc, #400]	; (80029b4 <extInt_Config+0x944>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4a63      	ldr	r2, [pc, #396]	; (80029b4 <extInt_Config+0x944>)
 8002828:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800282c:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a64      	ldr	r2, [pc, #400]	; (80029c8 <extInt_Config+0x958>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d104      	bne.n	8002844 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 800283a:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <extInt_Config+0x944>)
 800283c:	4a5d      	ldr	r2, [pc, #372]	; (80029b4 <extInt_Config+0x944>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002842:	e206      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	4a59      	ldr	r2, [pc, #356]	; (80029b0 <extInt_Config+0x940>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d106      	bne.n	800285e <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8002850:	4b58      	ldr	r3, [pc, #352]	; (80029b4 <extInt_Config+0x944>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	4a57      	ldr	r2, [pc, #348]	; (80029b4 <extInt_Config+0x944>)
 8002856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285a:	6113      	str	r3, [r2, #16]
		break;
 800285c:	e1f9      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a54      	ldr	r2, [pc, #336]	; (80029b8 <extInt_Config+0x948>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d106      	bne.n	8002878 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 800286a:	4b52      	ldr	r3, [pc, #328]	; (80029b4 <extInt_Config+0x944>)
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	4a51      	ldr	r2, [pc, #324]	; (80029b4 <extInt_Config+0x944>)
 8002870:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002874:	6113      	str	r3, [r2, #16]
		break;
 8002876:	e1ec      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4a4f      	ldr	r2, [pc, #316]	; (80029bc <extInt_Config+0x94c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d106      	bne.n	8002892 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002884:	4b4b      	ldr	r3, [pc, #300]	; (80029b4 <extInt_Config+0x944>)
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	4a4a      	ldr	r2, [pc, #296]	; (80029b4 <extInt_Config+0x944>)
 800288a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800288e:	6113      	str	r3, [r2, #16]
		break;
 8002890:	e1df      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a49      	ldr	r2, [pc, #292]	; (80029c0 <extInt_Config+0x950>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d106      	bne.n	80028ac <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800289e:	4b45      	ldr	r3, [pc, #276]	; (80029b4 <extInt_Config+0x944>)
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	4a44      	ldr	r2, [pc, #272]	; (80029b4 <extInt_Config+0x944>)
 80028a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a8:	6113      	str	r3, [r2, #16]
		break;
 80028aa:	e1d2      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4a44      	ldr	r2, [pc, #272]	; (80029c4 <extInt_Config+0x954>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d106      	bne.n	80028c6 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 80028b8:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <extInt_Config+0x944>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	4a3d      	ldr	r2, [pc, #244]	; (80029b4 <extInt_Config+0x944>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c2:	6113      	str	r3, [r2, #16]
		break;
 80028c4:	e1c5      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 80028c6:	bf00      	nop
		break;
 80028c8:	e1c3      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 80028ca:	4b3a      	ldr	r3, [pc, #232]	; (80029b4 <extInt_Config+0x944>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	4a39      	ldr	r2, [pc, #228]	; (80029b4 <extInt_Config+0x944>)
 80028d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d4:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a3a      	ldr	r2, [pc, #232]	; (80029c8 <extInt_Config+0x958>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d104      	bne.n	80028ec <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80028e2:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <extInt_Config+0x944>)
 80028e4:	4a33      	ldr	r2, [pc, #204]	; (80029b4 <extInt_Config+0x944>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80028ea:	e1b2      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a2f      	ldr	r2, [pc, #188]	; (80029b0 <extInt_Config+0x940>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d106      	bne.n	8002906 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80028f8:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <extInt_Config+0x944>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <extInt_Config+0x944>)
 80028fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002902:	6113      	str	r3, [r2, #16]
		break;
 8002904:	e1a5      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a2a      	ldr	r2, [pc, #168]	; (80029b8 <extInt_Config+0x948>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d106      	bne.n	8002920 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8002912:	4b28      	ldr	r3, [pc, #160]	; (80029b4 <extInt_Config+0x944>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <extInt_Config+0x944>)
 8002918:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291c:	6113      	str	r3, [r2, #16]
		break;
 800291e:	e198      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4a25      	ldr	r2, [pc, #148]	; (80029bc <extInt_Config+0x94c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d106      	bne.n	800293a <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <extInt_Config+0x944>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <extInt_Config+0x944>)
 8002932:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002936:	6113      	str	r3, [r2, #16]
		break;
 8002938:	e18b      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <extInt_Config+0x950>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d106      	bne.n	8002954 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002946:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <extInt_Config+0x944>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <extInt_Config+0x944>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002950:	6113      	str	r3, [r2, #16]
		break;
 8002952:	e17e      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <extInt_Config+0x954>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d106      	bne.n	800296e <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <extInt_Config+0x944>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <extInt_Config+0x944>)
 8002966:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800296a:	6113      	str	r3, [r2, #16]
		break;
 800296c:	e171      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 800296e:	bf00      	nop
		break;
 8002970:	e16f      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <extInt_Config+0x944>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <extInt_Config+0x944>)
 8002978:	f023 030f 	bic.w	r3, r3, #15
 800297c:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <extInt_Config+0x958>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d104      	bne.n	8002994 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <extInt_Config+0x944>)
 800298c:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <extInt_Config+0x944>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002992:	e15e      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <extInt_Config+0x940>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d115      	bne.n	80029cc <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <extInt_Config+0x944>)
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	4a03      	ldr	r2, [pc, #12]	; (80029b4 <extInt_Config+0x944>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6153      	str	r3, [r2, #20]
		break;
 80029ac:	e151      	b.n	8002c52 <extInt_Config+0xbe2>
 80029ae:	bf00      	nop
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40013800 	.word	0x40013800
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a83      	ldr	r2, [pc, #524]	; (8002be0 <extInt_Config+0xb70>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d106      	bne.n	80029e6 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80029d8:	4b82      	ldr	r3, [pc, #520]	; (8002be4 <extInt_Config+0xb74>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	4a81      	ldr	r2, [pc, #516]	; (8002be4 <extInt_Config+0xb74>)
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	6153      	str	r3, [r2, #20]
		break;
 80029e4:	e135      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a7e      	ldr	r2, [pc, #504]	; (8002be8 <extInt_Config+0xb78>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d106      	bne.n	8002a00 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80029f2:	4b7c      	ldr	r3, [pc, #496]	; (8002be4 <extInt_Config+0xb74>)
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4a7b      	ldr	r2, [pc, #492]	; (8002be4 <extInt_Config+0xb74>)
 80029f8:	f043 0303 	orr.w	r3, r3, #3
 80029fc:	6153      	str	r3, [r2, #20]
		break;
 80029fe:	e128      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	4a79      	ldr	r2, [pc, #484]	; (8002bec <extInt_Config+0xb7c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d106      	bne.n	8002a1a <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002a0c:	4b75      	ldr	r3, [pc, #468]	; (8002be4 <extInt_Config+0xb74>)
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4a74      	ldr	r2, [pc, #464]	; (8002be4 <extInt_Config+0xb74>)
 8002a12:	f043 0304 	orr.w	r3, r3, #4
 8002a16:	6153      	str	r3, [r2, #20]
		break;
 8002a18:	e11b      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <extInt_Config+0xb80>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d106      	bne.n	8002a34 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002a26:	4b6f      	ldr	r3, [pc, #444]	; (8002be4 <extInt_Config+0xb74>)
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4a6e      	ldr	r2, [pc, #440]	; (8002be4 <extInt_Config+0xb74>)
 8002a2c:	f043 0307 	orr.w	r3, r3, #7
 8002a30:	6153      	str	r3, [r2, #20]
		break;
 8002a32:	e10e      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 8002a34:	bf00      	nop
		break;
 8002a36:	e10c      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8002a38:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <extInt_Config+0xb74>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	4a69      	ldr	r2, [pc, #420]	; (8002be4 <extInt_Config+0xb74>)
 8002a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a42:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4a6a      	ldr	r2, [pc, #424]	; (8002bf4 <extInt_Config+0xb84>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d104      	bne.n	8002a5a <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002a50:	4b64      	ldr	r3, [pc, #400]	; (8002be4 <extInt_Config+0xb74>)
 8002a52:	4a64      	ldr	r2, [pc, #400]	; (8002be4 <extInt_Config+0xb74>)
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002a58:	e0fb      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a65      	ldr	r2, [pc, #404]	; (8002bf8 <extInt_Config+0xb88>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d106      	bne.n	8002a74 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002a66:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <extInt_Config+0xb74>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4a5e      	ldr	r2, [pc, #376]	; (8002be4 <extInt_Config+0xb74>)
 8002a6c:	f043 0310 	orr.w	r3, r3, #16
 8002a70:	6153      	str	r3, [r2, #20]
		break;
 8002a72:	e0ee      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a59      	ldr	r2, [pc, #356]	; (8002be0 <extInt_Config+0xb70>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d106      	bne.n	8002a8e <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002a80:	4b58      	ldr	r3, [pc, #352]	; (8002be4 <extInt_Config+0xb74>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4a57      	ldr	r2, [pc, #348]	; (8002be4 <extInt_Config+0xb74>)
 8002a86:	f043 0320 	orr.w	r3, r3, #32
 8002a8a:	6153      	str	r3, [r2, #20]
		break;
 8002a8c:	e0e1      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a54      	ldr	r2, [pc, #336]	; (8002be8 <extInt_Config+0xb78>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d106      	bne.n	8002aa8 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002a9a:	4b52      	ldr	r3, [pc, #328]	; (8002be4 <extInt_Config+0xb74>)
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	4a51      	ldr	r2, [pc, #324]	; (8002be4 <extInt_Config+0xb74>)
 8002aa0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002aa4:	6153      	str	r3, [r2, #20]
		break;
 8002aa6:	e0d4      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4a4f      	ldr	r2, [pc, #316]	; (8002bec <extInt_Config+0xb7c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d106      	bne.n	8002ac2 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002ab4:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <extInt_Config+0xb74>)
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	4a4a      	ldr	r2, [pc, #296]	; (8002be4 <extInt_Config+0xb74>)
 8002aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abe:	6153      	str	r3, [r2, #20]
		break;
 8002ac0:	e0c7      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a49      	ldr	r2, [pc, #292]	; (8002bf0 <extInt_Config+0xb80>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d106      	bne.n	8002adc <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002ace:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <extInt_Config+0xb74>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4a44      	ldr	r2, [pc, #272]	; (8002be4 <extInt_Config+0xb74>)
 8002ad4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ad8:	6153      	str	r3, [r2, #20]
		break;
 8002ada:	e0ba      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 8002adc:	bf00      	nop
		break;
 8002ade:	e0b8      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8002ae0:	4b40      	ldr	r3, [pc, #256]	; (8002be4 <extInt_Config+0xb74>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	4a3f      	ldr	r2, [pc, #252]	; (8002be4 <extInt_Config+0xb74>)
 8002ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aea:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <extInt_Config+0xb84>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d104      	bne.n	8002b02 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002af8:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <extInt_Config+0xb74>)
 8002afa:	4a3a      	ldr	r2, [pc, #232]	; (8002be4 <extInt_Config+0xb74>)
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002b00:	e0a7      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a3b      	ldr	r2, [pc, #236]	; (8002bf8 <extInt_Config+0xb88>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d106      	bne.n	8002b1c <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002b0e:	4b35      	ldr	r3, [pc, #212]	; (8002be4 <extInt_Config+0xb74>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4a34      	ldr	r2, [pc, #208]	; (8002be4 <extInt_Config+0xb74>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	6153      	str	r3, [r2, #20]
		break;
 8002b1a:	e09a      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <extInt_Config+0xb70>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d106      	bne.n	8002b36 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002b28:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <extInt_Config+0xb74>)
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	4a2d      	ldr	r2, [pc, #180]	; (8002be4 <extInt_Config+0xb74>)
 8002b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b32:	6153      	str	r3, [r2, #20]
		break;
 8002b34:	e08d      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a2a      	ldr	r2, [pc, #168]	; (8002be8 <extInt_Config+0xb78>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d106      	bne.n	8002b50 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002b42:	4b28      	ldr	r3, [pc, #160]	; (8002be4 <extInt_Config+0xb74>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4a27      	ldr	r2, [pc, #156]	; (8002be4 <extInt_Config+0xb74>)
 8002b48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b4c:	6153      	str	r3, [r2, #20]
		break;
 8002b4e:	e080      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4a25      	ldr	r2, [pc, #148]	; (8002bec <extInt_Config+0xb7c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d106      	bne.n	8002b6a <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <extInt_Config+0xb74>)
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <extInt_Config+0xb74>)
 8002b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b66:	6153      	str	r3, [r2, #20]
		break;
 8002b68:	e073      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <extInt_Config+0xb80>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d106      	bne.n	8002b84 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <extInt_Config+0xb74>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <extInt_Config+0xb74>)
 8002b7c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b80:	6153      	str	r3, [r2, #20]
		break;
 8002b82:	e066      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 8002b84:	bf00      	nop
		break;
 8002b86:	e064      	b.n	8002c52 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <extInt_Config+0xb74>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <extInt_Config+0xb74>)
 8002b8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b92:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <extInt_Config+0xb84>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d104      	bne.n	8002baa <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <extInt_Config+0xb74>)
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <extInt_Config+0xb74>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002ba8:	e053      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <extInt_Config+0xb88>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d106      	bne.n	8002bc4 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <extInt_Config+0xb74>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <extInt_Config+0xb74>)
 8002bbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bc0:	6153      	str	r3, [r2, #20]
		break;
 8002bc2:	e046      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <extInt_Config+0xb70>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d115      	bne.n	8002bfc <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <extInt_Config+0xb74>)
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	4a03      	ldr	r2, [pc, #12]	; (8002be4 <extInt_Config+0xb74>)
 8002bd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bda:	6153      	str	r3, [r2, #20]
		break;
 8002bdc:	e039      	b.n	8002c52 <extInt_Config+0xbe2>
 8002bde:	bf00      	nop
 8002be0:	40020800 	.word	0x40020800
 8002be4:	40013800 	.word	0x40013800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40021c00 	.word	0x40021c00
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4a9d      	ldr	r2, [pc, #628]	; (8002e78 <extInt_Config+0xe08>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d106      	bne.n	8002c16 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002c08:	4b9c      	ldr	r3, [pc, #624]	; (8002e7c <extInt_Config+0xe0c>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4a9b      	ldr	r2, [pc, #620]	; (8002e7c <extInt_Config+0xe0c>)
 8002c0e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002c12:	6153      	str	r3, [r2, #20]
		break;
 8002c14:	e01d      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a98      	ldr	r2, [pc, #608]	; (8002e80 <extInt_Config+0xe10>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d106      	bne.n	8002c30 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002c22:	4b96      	ldr	r3, [pc, #600]	; (8002e7c <extInt_Config+0xe0c>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4a95      	ldr	r2, [pc, #596]	; (8002e7c <extInt_Config+0xe0c>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c2c:	6153      	str	r3, [r2, #20]
		break;
 8002c2e:	e010      	b.n	8002c52 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4a93      	ldr	r2, [pc, #588]	; (8002e84 <extInt_Config+0xe14>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d106      	bne.n	8002c4a <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002c3c:	4b8f      	ldr	r3, [pc, #572]	; (8002e7c <extInt_Config+0xe0c>)
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	4a8e      	ldr	r2, [pc, #568]	; (8002e7c <extInt_Config+0xe0c>)
 8002c42:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002c46:	6153      	str	r3, [r2, #20]
		break;
 8002c48:	e003      	b.n	8002c52 <extInt_Config+0xbe2>
			__NOP();
 8002c4a:	bf00      	nop
		break;
 8002c4c:	e001      	b.n	8002c52 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8002c4e:	bf00      	nop
		break;
 8002c50:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	791b      	ldrb	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d126      	bne.n	8002ca8 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c5a:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <extInt_Config+0xe18>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	4611      	mov	r1, r2
 8002c66:	2201      	movs	r2, #1
 8002c68:	408a      	lsls	r2, r1
 8002c6a:	43d2      	mvns	r2, r2
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4a86      	ldr	r2, [pc, #536]	; (8002e88 <extInt_Config+0xe18>)
 8002c70:	400b      	ands	r3, r1
 8002c72:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c74:	4b84      	ldr	r3, [pc, #528]	; (8002e88 <extInt_Config+0xe18>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	2201      	movs	r2, #1
 8002c82:	408a      	lsls	r2, r1
 8002c84:	43d2      	mvns	r2, r2
 8002c86:	4611      	mov	r1, r2
 8002c88:	4a7f      	ldr	r2, [pc, #508]	; (8002e88 <extInt_Config+0xe18>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002c8e:	4b7e      	ldr	r3, [pc, #504]	; (8002e88 <extInt_Config+0xe18>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	7812      	ldrb	r2, [r2, #0]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	408a      	lsls	r2, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4a79      	ldr	r2, [pc, #484]	; (8002e88 <extInt_Config+0xe18>)
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	6093      	str	r3, [r2, #8]
 8002ca6:	e05c      	b.n	8002d62 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	791b      	ldrb	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d126      	bne.n	8002cfe <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002cb0:	4b75      	ldr	r3, [pc, #468]	; (8002e88 <extInt_Config+0xe18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	7812      	ldrb	r2, [r2, #0]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	408a      	lsls	r2, r1
 8002cc0:	43d2      	mvns	r2, r2
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4a70      	ldr	r2, [pc, #448]	; (8002e88 <extInt_Config+0xe18>)
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002cca:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <extInt_Config+0xe18>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	7812      	ldrb	r2, [r2, #0]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	408a      	lsls	r2, r1
 8002cda:	43d2      	mvns	r2, r2
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <extInt_Config+0xe18>)
 8002ce0:	400b      	ands	r3, r1
 8002ce2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002ce4:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <extInt_Config+0xe18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	7812      	ldrb	r2, [r2, #0]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	408a      	lsls	r2, r1
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4a64      	ldr	r2, [pc, #400]	; (8002e88 <extInt_Config+0xe18>)
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	60d3      	str	r3, [r2, #12]
 8002cfc:	e031      	b.n	8002d62 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002cfe:	4b62      	ldr	r3, [pc, #392]	; (8002e88 <extInt_Config+0xe18>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	408a      	lsls	r2, r1
 8002d0e:	43d2      	mvns	r2, r2
 8002d10:	4611      	mov	r1, r2
 8002d12:	4a5d      	ldr	r2, [pc, #372]	; (8002e88 <extInt_Config+0xe18>)
 8002d14:	400b      	ands	r3, r1
 8002d16:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002d18:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <extInt_Config+0xe18>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	7812      	ldrb	r2, [r2, #0]
 8002d22:	4611      	mov	r1, r2
 8002d24:	2201      	movs	r2, #1
 8002d26:	408a      	lsls	r2, r1
 8002d28:	43d2      	mvns	r2, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4a56      	ldr	r2, [pc, #344]	; (8002e88 <extInt_Config+0xe18>)
 8002d2e:	400b      	ands	r3, r1
 8002d30:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <extInt_Config+0xe18>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	7812      	ldrb	r2, [r2, #0]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	2201      	movs	r2, #1
 8002d40:	408a      	lsls	r2, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	4a50      	ldr	r2, [pc, #320]	; (8002e88 <extInt_Config+0xe18>)
 8002d46:	430b      	orrs	r3, r1
 8002d48:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002d4a:	4b4f      	ldr	r3, [pc, #316]	; (8002e88 <extInt_Config+0xe18>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	4611      	mov	r1, r2
 8002d56:	2201      	movs	r2, #1
 8002d58:	408a      	lsls	r2, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <extInt_Config+0xe18>)
 8002d5e:	430b      	orrs	r3, r1
 8002d60:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <extInt_Config+0xe18>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6812      	ldr	r2, [r2, #0]
 8002d6a:	7812      	ldrb	r2, [r2, #0]
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	2201      	movs	r2, #1
 8002d70:	408a      	lsls	r2, r1
 8002d72:	43d2      	mvns	r2, r2
 8002d74:	4611      	mov	r1, r2
 8002d76:	4a44      	ldr	r2, [pc, #272]	; (8002e88 <extInt_Config+0xe18>)
 8002d78:	400b      	ands	r3, r1
 8002d7a:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002d7c:	4b42      	ldr	r3, [pc, #264]	; (8002e88 <extInt_Config+0xe18>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	4611      	mov	r1, r2
 8002d88:	2201      	movs	r2, #1
 8002d8a:	408a      	lsls	r2, r1
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4a3e      	ldr	r2, [pc, #248]	; (8002e88 <extInt_Config+0xe18>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d94:	b672      	cpsid	i
}
 8002d96:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	d862      	bhi.n	8002e68 <extInt_Config+0xdf8>
 8002da2:	a201      	add	r2, pc, #4	; (adr r2, 8002da8 <extInt_Config+0xd38>)
 8002da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da8:	08002de9 	.word	0x08002de9
 8002dac:	08002df1 	.word	0x08002df1
 8002db0:	08002df9 	.word	0x08002df9
 8002db4:	08002e01 	.word	0x08002e01
 8002db8:	08002e09 	.word	0x08002e09
 8002dbc:	08002e11 	.word	0x08002e11
 8002dc0:	08002e19 	.word	0x08002e19
 8002dc4:	08002e21 	.word	0x08002e21
 8002dc8:	08002e29 	.word	0x08002e29
 8002dcc:	08002e31 	.word	0x08002e31
 8002dd0:	08002e39 	.word	0x08002e39
 8002dd4:	08002e41 	.word	0x08002e41
 8002dd8:	08002e49 	.word	0x08002e49
 8002ddc:	08002e51 	.word	0x08002e51
 8002de0:	08002e59 	.word	0x08002e59
 8002de4:	08002e61 	.word	0x08002e61
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8002de8:	2006      	movs	r0, #6
 8002dea:	f7ff f923 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002dee:	e03c      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8002df0:	2007      	movs	r0, #7
 8002df2:	f7ff f91f 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002df6:	e038      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8002df8:	2008      	movs	r0, #8
 8002dfa:	f7ff f91b 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002dfe:	e034      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8002e00:	2009      	movs	r0, #9
 8002e02:	f7ff f917 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e06:	e030      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8002e08:	200a      	movs	r0, #10
 8002e0a:	f7ff f913 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e0e:	e02c      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e10:	2017      	movs	r0, #23
 8002e12:	f7ff f90f 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e16:	e028      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e18:	2017      	movs	r0, #23
 8002e1a:	f7ff f90b 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e1e:	e024      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e20:	2017      	movs	r0, #23
 8002e22:	f7ff f907 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e26:	e020      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e28:	2017      	movs	r0, #23
 8002e2a:	f7ff f903 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e2e:	e01c      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e30:	2017      	movs	r0, #23
 8002e32:	f7ff f8ff 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e36:	e018      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e38:	2028      	movs	r0, #40	; 0x28
 8002e3a:	f7ff f8fb 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e3e:	e014      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e40:	2028      	movs	r0, #40	; 0x28
 8002e42:	f7ff f8f7 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e46:	e010      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e48:	2028      	movs	r0, #40	; 0x28
 8002e4a:	f7ff f8f3 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e4e:	e00c      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e50:	2028      	movs	r0, #40	; 0x28
 8002e52:	f7ff f8ef 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e56:	e008      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e58:	2028      	movs	r0, #40	; 0x28
 8002e5a:	f7ff f8eb 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e5e:	e004      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e60:	2028      	movs	r0, #40	; 0x28
 8002e62:	f7ff f8e7 	bl	8002034 <__NVIC_EnableIRQ>
		break;
 8002e66:	e000      	b.n	8002e6a <extInt_Config+0xdfa>
	}

	default: {
		break;
 8002e68:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002e6a:	b662      	cpsie	i
}
 8002e6c:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40020c00 	.word	0x40020c00
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40021c00 	.word	0x40021c00
 8002e88:	40013c00 	.word	0x40013c00

08002e8c <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
	__NOP();
 8002e90:	bf00      	nop
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <callback_extInt1>:

__attribute__ ((weak)) void callback_extInt1(void){
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
	__NOP();
 8002ea0:	bf00      	nop
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt2(void){
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
	__NOP();
 8002eb0:	bf00      	nop
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <callback_extInt3>:

__attribute__ ((weak)) void callback_extInt3(void){
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
	__NOP();
 8002ec0:	bf00      	nop
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt4(void){
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
	__NOP();
 8002ed0:	bf00      	nop
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
	__NOP();
 8002ee0:	bf00      	nop
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
	__NOP();
 8002ef0:	bf00      	nop
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
	__NOP();
 8002f00:	bf00      	nop
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
	__NOP();
 8002f10:	bf00      	nop
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
	__NOP();
 8002f20:	bf00      	nop
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
	__NOP();
 8002f30:	bf00      	nop
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
	__NOP();
 8002f40:	bf00      	nop
}
 8002f42:	bf00      	nop
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	__NOP();
 8002f50:	bf00      	nop
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt13(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt14(void){
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
	__NOP();
 8002f60:	bf00      	nop
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
	__NOP();
 8002f70:	bf00      	nop
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <EXTI0_IRQHandler+0x28>)
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <EXTI0_IRQHandler+0x28>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <EXTI0_IRQHandler+0x28>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8002f98:	f7ff ff78 	bl	8002e8c <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8002f9c:	e000      	b.n	8002fa0 <EXTI0_IRQHandler+0x24>
		__NOP();
 8002f9e:	bf00      	nop
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40013c00 	.word	0x40013c00

08002fa8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <EXTI1_IRQHandler+0x28>)
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <EXTI1_IRQHandler+0x28>)
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <EXTI1_IRQHandler+0x28>)
 8002fbe:	f043 0302 	orr.w	r3, r3, #2
 8002fc2:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8002fc4:	f7ff ff6a 	bl	8002e9c <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8002fc8:	e000      	b.n	8002fcc <EXTI1_IRQHandler+0x24>
		__NOP();
 8002fca:	bf00      	nop
}
 8002fcc:	bf00      	nop
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40013c00 	.word	0x40013c00

08002fd4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <EXTI2_IRQHandler+0x28>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d008      	beq.n	8002ff6 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <EXTI2_IRQHandler+0x28>)
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <EXTI2_IRQHandler+0x28>)
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8002ff0:	f7ff ff5c 	bl	8002eac <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8002ff4:	e000      	b.n	8002ff8 <EXTI2_IRQHandler+0x24>
		__NOP();
 8002ff6:	bf00      	nop
}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40013c00 	.word	0x40013c00

08003000 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <EXTI3_IRQHandler+0x28>)
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <EXTI3_IRQHandler+0x28>)
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	4a04      	ldr	r2, [pc, #16]	; (8003028 <EXTI3_IRQHandler+0x28>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 800301c:	f7ff ff4e 	bl	8002ebc <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8003020:	e000      	b.n	8003024 <EXTI3_IRQHandler+0x24>
		__NOP();
 8003022:	bf00      	nop
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40013c00 	.word	0x40013c00

0800302c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <EXTI4_IRQHandler+0x28>)
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <EXTI4_IRQHandler+0x28>)
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <EXTI4_IRQHandler+0x28>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8003048:	f7ff ff40 	bl	8002ecc <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 800304c:	e000      	b.n	8003050 <EXTI4_IRQHandler+0x24>
		__NOP();
 800304e:	bf00      	nop
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40013c00 	.word	0x40013c00

08003058 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8003068:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	4a22      	ldr	r2, [pc, #136]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 800306e:	f043 0320 	orr.w	r3, r3, #32
 8003072:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8003074:	f7ff ff32 	bl	8002edc <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8003078:	e03c      	b.n	80030f4 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 800307a:	4b1f      	ldr	r3, [pc, #124]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 800308c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003090:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8003092:	f7ff ff2b 	bl	8002eec <callback_extInt6>
}
 8003096:	e02d      	b.n	80030f4 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003098:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	4a13      	ldr	r2, [pc, #76]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 80030aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ae:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 80030b0:	f7ff ff24 	bl	8002efc <callback_extInt7>
}
 80030b4:	e01e      	b.n	80030f4 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	4a0c      	ldr	r2, [pc, #48]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 80030ce:	f7ff ff1d 	bl	8002f0c <callback_extInt8>
}
 80030d2:	e00f      	b.n	80030f4 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <EXTI9_5_IRQHandler+0xa0>)
 80030e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ea:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 80030ec:	f7ff ff16 	bl	8002f1c <callback_extInt9>
}
 80030f0:	e000      	b.n	80030f4 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80030f2:	bf00      	nop
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40013c00 	.word	0x40013c00

080030fc <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	4a2a      	ldr	r2, [pc, #168]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 8003112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003116:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8003118:	f7ff ff08 	bl	8002f2c <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 800311c:	e04b      	b.n	80031b6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 800311e:	4b27      	ldr	r3, [pc, #156]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4a23      	ldr	r2, [pc, #140]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 8003130:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003134:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8003136:	f7ff ff01 	bl	8002f3c <callback_extInt11>
}
 800313a:	e03c      	b.n	80031b6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8003148:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800314e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003152:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8003154:	f7ff fefa 	bl	8002f4c <callback_extInt12>
}
 8003158:	e02d      	b.n	80031b6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 800315a:	4b18      	ldr	r3, [pc, #96]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8003166:	4b15      	ldr	r3, [pc, #84]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800316c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003170:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8003172:	f7fe f95f 	bl	8001434 <callback_extInt13>
}
 8003176:	e01e      	b.n	80031b6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 800318a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318e:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8003190:	f7ff fee4 	bl	8002f5c <callback_extInt14>
}
 8003194:	e00f      	b.n	80031b6 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <EXTI15_10_IRQHandler+0xc0>)
 80031a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ac:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 80031ae:	f7ff fedd 	bl	8002f6c <callback_extInt15>
}
 80031b2:	e000      	b.n	80031b6 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 80031b4:	bf00      	nop
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40013c00 	.word	0x40013c00

080031c0 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	4603      	mov	r3, r0
 80031d0:	70fb      	strb	r3, [r7, #3]
 80031d2:	460b      	mov	r3, r1
 80031d4:	70bb      	strb	r3, [r7, #2]
 80031d6:	4613      	mov	r3, r2
 80031d8:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	78ba      	ldrb	r2, [r7, #2]
 80031e4:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	787a      	ldrb	r2, [r7, #1]
 80031ea:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7c3a      	ldrb	r2, [r7, #16]
 80031f0:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7d3a      	ldrb	r2, [r7, #20]
 80031f6:	715a      	strb	r2, [r3, #5]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a88      	ldr	r2, [pc, #544]	; (800343c <GPIO_Config+0x238>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d106      	bne.n	800322c <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 800321e:	4b88      	ldr	r3, [pc, #544]	; (8003440 <GPIO_Config+0x23c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a87      	ldr	r2, [pc, #540]	; (8003440 <GPIO_Config+0x23c>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	e03a      	b.n	80032a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a84      	ldr	r2, [pc, #528]	; (8003444 <GPIO_Config+0x240>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d106      	bne.n	8003244 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003236:	4b82      	ldr	r3, [pc, #520]	; (8003440 <GPIO_Config+0x23c>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a81      	ldr	r2, [pc, #516]	; (8003440 <GPIO_Config+0x23c>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	e02e      	b.n	80032a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a7f      	ldr	r2, [pc, #508]	; (8003448 <GPIO_Config+0x244>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d106      	bne.n	800325c <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 800324e:	4b7c      	ldr	r3, [pc, #496]	; (8003440 <GPIO_Config+0x23c>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a7b      	ldr	r2, [pc, #492]	; (8003440 <GPIO_Config+0x23c>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	e022      	b.n	80032a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a7a      	ldr	r2, [pc, #488]	; (800344c <GPIO_Config+0x248>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d106      	bne.n	8003274 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003266:	4b76      	ldr	r3, [pc, #472]	; (8003440 <GPIO_Config+0x23c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a75      	ldr	r2, [pc, #468]	; (8003440 <GPIO_Config+0x23c>)
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	e016      	b.n	80032a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a75      	ldr	r2, [pc, #468]	; (8003450 <GPIO_Config+0x24c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d106      	bne.n	800328c <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800327e:	4b70      	ldr	r3, [pc, #448]	; (8003440 <GPIO_Config+0x23c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a6f      	ldr	r2, [pc, #444]	; (8003440 <GPIO_Config+0x23c>)
 8003284:	f043 0310 	orr.w	r3, r3, #16
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	e00a      	b.n	80032a2 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a70      	ldr	r2, [pc, #448]	; (8003454 <GPIO_Config+0x250>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d105      	bne.n	80032a2 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003296:	4b6a      	ldr	r3, [pc, #424]	; (8003440 <GPIO_Config+0x23c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a69      	ldr	r2, [pc, #420]	; (8003440 <GPIO_Config+0x23c>)
 800329c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	2103      	movs	r1, #3
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	400a      	ands	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	6819      	ldr	r1, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	789b      	ldrb	r3, [r3, #2]
 80032e6:	461a      	mov	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	2301      	movs	r3, #1
 8003300:	408b      	lsls	r3, r1
 8003302:	43db      	mvns	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	400a      	ands	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	78db      	ldrb	r3, [r3, #3]
 8003322:	461a      	mov	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2103      	movs	r1, #3
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	4619      	mov	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	400a      	ands	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	6899      	ldr	r1, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	791b      	ldrb	r3, [r3, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	2103      	movs	r1, #3
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	400a      	ands	r2, r1
 800338c:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	68d9      	ldr	r1, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	430a      	orrs	r2, r1
 800339c:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	785b      	ldrb	r3, [r3, #1]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d143      	bne.n	800342e <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b07      	cmp	r3, #7
 80033ac:	d81f      	bhi.n	80033ee <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	210f      	movs	r1, #15
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	4619      	mov	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	400a      	ands	r2, r1
 80033ce:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	6a1a      	ldr	r2, [r3, #32]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	795b      	ldrb	r3, [r3, #5]
 80033da:	4619      	mov	r1, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 80033ec:	e01f      	b.n	800342e <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	3b08      	subs	r3, #8
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fe:	210f      	movs	r1, #15
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	400a      	ands	r2, r1
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	795b      	ldrb	r3, [r3, #5]
 800341c:	4619      	mov	r1, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	4619      	mov	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	430a      	orrs	r2, r1
 800342c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40020000 	.word	0x40020000
 8003440:	40023800 	.word	0x40023800
 8003444:	40020400 	.word	0x40020400
 8003448:	40020800 	.word	0x40020800
 800344c:	40020c00 	.word	0x40020c00
 8003450:	40021000 	.word	0x40021000
 8003454:	40021c00 	.word	0x40021c00

08003458 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10d      	bne.n	8003486 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	4619      	mov	r1, r3
 8003476:	2301      	movs	r3, #1
 8003478:	408b      	lsls	r3, r1
 800347a:	4619      	mov	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	430a      	orrs	r2, r1
 8003482:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8003484:	e00d      	b.n	80034a2 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	699a      	ldr	r2, [r3, #24]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	3310      	adds	r3, #16
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	4619      	mov	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	430a      	orrs	r2, r1
 80034a0:	619a      	str	r2, [r3, #24]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	4619      	mov	r1, r3
 80034c2:	2301      	movs	r3, #1
 80034c4:	408b      	lsls	r3, r1
 80034c6:	4619      	mov	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	404a      	eors	r2, r1
 80034ce:	615a      	str	r2, [r3, #20]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <i2c_Config>:
 * Recordar de configurar los pines GPIOx por medio de las funciones alternativas,
 * Ademas de configurar dichos pines como open_drain
 */

void i2c_Config(I2C_Handler_t *ptrHandlerI2C)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	uint8_t clockAPB1 = getClockAPB1();     //Variable que guarda la velocidad de reloj entregada al bus APB1
 80034e4:	f000 fa1e 	bl	8003924 <getClockAPB1>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	if(ptrHandlerI2C->prtI2Cx == I2C1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a60      	ldr	r2, [pc, #384]	; (8003674 <i2c_Config+0x198>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d106      	bne.n	8003504 <i2c_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80034f6:	4b60      	ldr	r3, [pc, #384]	; (8003678 <i2c_Config+0x19c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a5f      	ldr	r2, [pc, #380]	; (8003678 <i2c_Config+0x19c>)
 80034fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	e016      	b.n	8003532 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a5c      	ldr	r2, [pc, #368]	; (800367c <i2c_Config+0x1a0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d106      	bne.n	800351c <i2c_Config+0x40>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800350e:	4b5a      	ldr	r3, [pc, #360]	; (8003678 <i2c_Config+0x19c>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a59      	ldr	r2, [pc, #356]	; (8003678 <i2c_Config+0x19c>)
 8003514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	e00a      	b.n	8003532 <i2c_Config+0x56>
	}
	else if(ptrHandlerI2C->prtI2Cx == I2C3)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a57      	ldr	r2, [pc, #348]	; (8003680 <i2c_Config+0x1a4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d105      	bne.n	8003532 <i2c_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8003526:	4b54      	ldr	r3, [pc, #336]	; (8003678 <i2c_Config+0x19c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a53      	ldr	r2, [pc, #332]	; (8003678 <i2c_Config+0x19c>)
 800352c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
	}

	//---------------------------------2) Reiniciamos el periferico------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_SWRST;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003540:	601a      	str	r2, [r3, #0]
	__NOP();
 8003542:	bf00      	nop
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_SWRST;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003552:	601a      	str	r2, [r3, #0]

	//-----------------------------------3) Valor del reloj principal------------------------------------------
	//Registro: CR2

	ptrHandlerI2C->prtI2Cx->CR2 &= ~(0b111111<<I2C_CR2_FREQ_Pos);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003562:	605a      	str	r2, [r3, #4]
	ptrHandlerI2C->prtI2Cx->CR2 |= (clockAPB1<<I2C_CR2_FREQ_Pos);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6859      	ldr	r1, [r3, #4]
 800356a:	7bfa      	ldrb	r2, [r7, #15]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
	//-------------------------------------4) Configuracion del I2C------------------------------------------
	//Registro: CCR
	//Registro: TRISE

	//Variables que almacenan el respectivo valor a cargar en los registros CRR y Trise
	uint16_t valueCRR = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	81bb      	strh	r3, [r7, #12]
	uint8_t valueTrise = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	72fb      	strb	r3, [r7, #11]

	//definimos inicialmente los registro en 0
	ptrHandlerI2C->prtI2Cx->CCR = 0;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2200      	movs	r2, #0
 8003582:	61da      	str	r2, [r3, #28]
	ptrHandlerI2C->prtI2Cx->TRISE = 0;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2200      	movs	r2, #0
 800358a:	621a      	str	r2, [r3, #32]

	//Configuramos el I2C deacuerdo al modo selsecionado
	if(ptrHandlerI2C->modeI2C == I2C_MODE_SM)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	795b      	ldrb	r3, [r3, #5]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d121      	bne.n	80035d8 <i2c_Config+0xfc>
	{
		//Seleccionamos el modo estandar
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a2:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (5000*clockAPB1)/1000;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	0092      	lsls	r2, r2, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69d9      	ldr	r1, [r3, #28]
 80035b6:	89ba      	ldrh	r2, [r7, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((1000*clockAPB1)/1000)+1;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	3301      	adds	r3, #1
 80035c4:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a19      	ldr	r1, [r3, #32]
 80035cc:	7afa      	ldrb	r2, [r7, #11]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	621a      	str	r2, [r3, #32]
 80035d6:	e039      	b.n	800364c <i2c_Config+0x170>
	}
	else
	{
		//Seleccionamos el modo Fast
		ptrHandlerI2C->prtI2Cx->CCR &= ~I2C_CCR_FS;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e6:	61da      	str	r2, [r3, #28]
		ptrHandlerI2C->prtI2Cx->CCR |= I2C_CCR_FS;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035f6:	61da      	str	r2, [r3, #28]

		//Definimos la señal de reloj
		valueCRR = (2500*clockAPB1)/3000;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	4a20      	ldr	r2, [pc, #128]	; (8003684 <i2c_Config+0x1a8>)
 8003604:	fb82 1203 	smull	r1, r2, r2, r3
 8003608:	1192      	asrs	r2, r2, #6
 800360a:	17db      	asrs	r3, r3, #31
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	81bb      	strh	r3, [r7, #12]
		ptrHandlerI2C->prtI2Cx->CCR |= (valueCRR<<I2C_CCR_CCR_Pos);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69d9      	ldr	r1, [r3, #28]
 8003616:	89ba      	ldrh	r2, [r7, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	61da      	str	r2, [r3, #28]

		//Definimos el tiempo maximo en el T-RIse
		valueTrise = ((300*clockAPB1)/1000)+1;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <i2c_Config+0x1ac>)
 800362c:	fb82 1203 	smull	r1, r2, r2, r3
 8003630:	1192      	asrs	r2, r2, #6
 8003632:	17db      	asrs	r3, r3, #31
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	72fb      	strb	r3, [r7, #11]
		ptrHandlerI2C->prtI2Cx->TRISE |= valueTrise;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a19      	ldr	r1, [r3, #32]
 8003642:	7afa      	ldrb	r2, [r7, #11]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	621a      	str	r2, [r3, #32]
	}

	//-----------------------------------5) Activamos el modulo I2C------------------------------------------
	//Registro: CR1

	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_PE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_PE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40005400 	.word	0x40005400
 8003678:	40023800 	.word	0x40023800
 800367c:	40005800 	.word	0x40005800
 8003680:	40005c00 	.word	0x40005c00
 8003684:	057619f1 	.word	0x057619f1
 8003688:	10624dd3 	.word	0x10624dd3

0800368c <i2c_StartTrasaction>:

//----------------------------------------Funciones para la Transaccion----------------------------------------
//Funcion para empezar la Transaccion
void i2c_StartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	/*verificamos que la linea no esta ocupada
	 * bit "busy" en I2C
	 */
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8003694:	e000      	b.n	8003698 <i2c_StartTrasaction+0xc>
	{
		__NOP();
 8003696:	bf00      	nop
	while (ptrHandlerI2C->prtI2Cx->SR2 & I2C_SR2_BUSY)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f7      	bne.n	8003696 <i2c_StartTrasaction+0xa>
	}
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b4:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 80036b6:	e000      	b.n	80036ba <i2c_StartTrasaction+0x2e>
	{
		__NOP();
 80036b8:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f7      	beq.n	80036b8 <i2c_StartTrasaction+0x2c>
	}
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <i2c_ReStartTrasaction>:

//Generar de nuevo una señal para empazar la Transaccion
void i2c_ReStartTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
	//Generamos un Start bit
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_START;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ec:	601a      	str	r2, [r3, #0]
	//Esperamos a que la bandera "SB" del evento "Start" se levante
	//Se limpia la bandera "SB" leyendo SR1->escribiendo en DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 80036ee:	e000      	b.n	80036f2 <i2c_ReStartTrasaction+0x1c>
	{
		__NOP();
 80036f0:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_SB))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f7      	beq.n	80036f0 <i2c_ReStartTrasaction+0x1a>
	}
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <i2c_SendSlaveAddressRW>:

//Funcion para enviar la direcion de Slave ademas de definir la lectura o escritura del Sclave
void i2c_SendSlaveAddressRW(I2C_Handler_t *ptrHandlerI2C, uint8_t slaveAddress, uint8_t readOrWrite)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	70fb      	strb	r3, [r7, #3]
 800371a:	4613      	mov	r3, r2
 800371c:	70bb      	strb	r3, [r7, #2]
	//Definimos una variable auxiliar
	uint8_t auxByte = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
	(void) auxByte;

	//Cargamos la direccion del Sclave, ademas cargamos el bit de lectura o escritura
	ptrHandlerI2C->prtI2Cx->DR = (slaveAddress<<1) | readOrWrite;
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	005a      	lsls	r2, r3, #1
 8003726:	78bb      	ldrb	r3, [r7, #2]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "ADDR" del evento "Address" se levante
	//Se limpia la bandera "ADDR" leyendo SR1->leyendo en SR2
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8003730:	e000      	b.n	8003734 <i2c_SendSlaveAddressRW+0x26>
	{
		__NOP();
 8003732:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_ADDR))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f7      	beq.n	8003732 <i2c_SendSlaveAddressRW+0x24>
	}
	//Se limpia la bandera "ADDR"
	auxByte = ptrHandlerI2C->prtI2Cx->SR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	73fb      	strb	r3, [r7, #15]
	auxByte = ptrHandlerI2C->prtI2Cx->SR2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	73fb      	strb	r3, [r7, #15]
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <i2c_SendMemoryAddress>:

//Enviamos la direccion de memoria que deseamos leer o escribir
void i2c_SendMemoryAddress(I2C_Handler_t *ptrHandlerI2C, uint8_t memAddr)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	70fb      	strb	r3, [r7, #3]
	//Enviamos la direccion de memoria que desamos leer
	ptrHandlerI2C->prtI2Cx->DR = memAddr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "TXE" del evento "Data1" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8003772:	e000      	b.n	8003776 <i2c_SendMemoryAddress+0x18>
	{
		__NOP();
 8003774:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_TXE))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f7      	beq.n	8003774 <i2c_SendMemoryAddress+0x16>
	}
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <i2c_SendDataByte>:

//Escritura de datos
void i2c_SendDataByte(I2C_Handler_t *ptrHandlerI2C, uint8_t dataToWrite)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	70fb      	strb	r3, [r7, #3]
	//Cargamos el valor que desasmos escribir
	ptrHandlerI2C->prtI2Cx->DR = dataToWrite;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	611a      	str	r2, [r3, #16]
	//Esperamos a que la bandera "BTF" del evento "Transmision" se levante
	//Se limpia la bandera "TxE" y "BTF" con la condicion Stop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 80037a6:	e000      	b.n	80037aa <i2c_SendDataByte+0x18>
	{
		__NOP();
 80037a8:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_BTF))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f7      	beq.n	80037a8 <i2c_SendDataByte+0x16>
	}
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <i2c_ReadDataByte>:

//Lectura de datos
uint8_t i2c_ReadDataByte(I2C_Handler_t *ptrHandlerI2C)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
	//Esperamos a que la bandera "RxNE" del evento "Recepcion" se levante
	//Se limpia la bandera "RxNE" leyendo el registro DR
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 80037ce:	e000      	b.n	80037d2 <i2c_ReadDataByte+0xc>
	{
		__NOP();
 80037d0:	bf00      	nop
	while (!(ptrHandlerI2C->prtI2Cx->SR1 & I2C_SR1_RXNE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f7      	beq.n	80037d0 <i2c_ReadDataByte+0xa>
	}
	//guardamos los datos recibimos
	ptrHandlerI2C->dataI2C = ptrHandlerI2C->prtI2Cx->DR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	719a      	strb	r2, [r3, #6]
	return ptrHandlerI2C->dataI2C ;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	799b      	ldrb	r3, [r3, #6]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <i2c_SendNoAck>:

//Funcion para activar la indicaicon de NoACK(indicacion para el Sclave de terminar la transmision de datos)
void i2c_SendNoAck(I2C_Handler_t *ptrHandlerI2C)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	//Esribimos cero en el bit Ack del registro CR1
	ptrHandlerI2C->prtI2Cx->CR1 &= ~I2C_CR1_ACK;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003812:	601a      	str	r2, [r3, #0]

}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <i2c_StopTrasaction>:
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_ACK;
}

//Funcion para generar el Stop bit
void i2c_StopTrasaction(I2C_Handler_t *ptrHandlerI2C)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	ptrHandlerI2C->prtI2Cx->CR1 |= I2C_CR1_STOP;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <i2c_ReadSingleRegister>:

//------------------------------------Funciones para la comunicacion por I2C----------------------------------------

uint8_t i2c_ReadSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
	//0. Creacion de una variable auxiliara para recibir el dato leido
	uint8_t auxRead = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff19 	bl	800368c <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff53 	bl	800370e <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos leer
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff76 	bl	800375e <i2c_SendMemoryAddress>
	//4. Creamos una condicion de re start
	i2c_ReStartTrasaction(ptrHandlerI2C);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff2f 	bl	80036d6 <i2c_ReStartTrasaction>
	//5. Enviamos la direccion del Sclavo e indicamos que se desea leer el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_READ_DATA);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	791b      	ldrb	r3, [r3, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff44 	bl	800370e <i2c_SendSlaveAddressRW>
	//6. Leemos el dato que envia el Sclavo
	auxRead = i2c_ReadDataByte(ptrHandlerI2C);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ff9d 	bl	80037c6 <i2c_ReadDataByte>
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]
	//7. Generamso la condicio de NoAck
	i2c_SendNoAck(ptrHandlerI2C);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ffb3 	bl	80037fc <i2c_SendNoAck>
	//8. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffc2 	bl	8003820 <i2c_StopTrasaction>

	return auxRead;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <i2c_WriteSingleRegister>:

void i2c_WriteSingleRegister(I2C_Handler_t *ptrHandlerI2C, uint8_t regToRead, uint8_t newValue)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70fb      	strb	r3, [r7, #3]
 80038b2:	4613      	mov	r3, r2
 80038b4:	70bb      	strb	r3, [r7, #2]
	//1. Generacion de Start bit
	i2c_StartTrasaction(ptrHandlerI2C);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fee8 	bl	800368c <i2c_StartTrasaction>
	//2. Enviamos la direccion del Sclavo e indicamos que se desea escribir el Sclave
	i2c_SendSlaveAddressRW(ptrHandlerI2C, ptrHandlerI2C->slaveAddress, I2C_WRITE_DATA);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	791b      	ldrb	r3, [r3, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff22 	bl	800370e <i2c_SendSlaveAddressRW>
	//3. Enviamos la direccion de memoria que deseamos escribir
	i2c_SendMemoryAddress(ptrHandlerI2C, regToRead);
 80038ca:	78fb      	ldrb	r3, [r7, #3]
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff ff45 	bl	800375e <i2c_SendMemoryAddress>
	//4. Enviamos el dato que se desea escribir en el Sclave
	i2c_SendDataByte(ptrHandlerI2C, newValue);
 80038d4:	78bb      	ldrb	r3, [r7, #2]
 80038d6:	4619      	mov	r1, r3
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff5a 	bl	8003792 <i2c_SendDataByte>
	//5. Generamos la condicion de Stop
	i2c_StopTrasaction(ptrHandlerI2C);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff9e 	bl	8003820 <i2c_StopTrasaction>
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <getConfigPLL+0x30>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d103      	bne.n	800390a <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <getConfigPLL+0x34>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	71fb      	strb	r3, [r7, #7]
 8003908:	e001      	b.n	800390e <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 800390a:	2310      	movs	r3, #16
 800390c:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 800390e:	79fb      	ldrb	r3, [r7, #7]
}
 8003910:	4618      	mov	r0, r3
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40023800 	.word	0x40023800
 8003920:	2000034c 	.word	0x2000034c

08003924 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 800392a:	f7ff ffdf 	bl	80038ec <getConfigPLL>
 800392e:	4603      	mov	r3, r0
 8003930:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8003932:	2300      	movs	r3, #0
 8003934:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8003936:	79bb      	ldrb	r3, [r7, #6]
 8003938:	2b31      	cmp	r3, #49	; 0x31
 800393a:	d802      	bhi.n	8003942 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 800393c:	79bb      	ldrb	r3, [r7, #6]
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	e002      	b.n	8003948 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8003942:	79bb      	ldrb	r3, [r7, #6]
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8003948:	79fb      	ldrb	r3, [r7, #7]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003964:	d106      	bne.n	8003974 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003966:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <pwm_Config+0x218>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a80      	ldr	r2, [pc, #512]	; (8003b6c <pwm_Config+0x218>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
 8003972:	e024      	b.n	80039be <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a7d      	ldr	r2, [pc, #500]	; (8003b70 <pwm_Config+0x21c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d106      	bne.n	800398c <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800397e:	4b7b      	ldr	r3, [pc, #492]	; (8003b6c <pwm_Config+0x218>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a7a      	ldr	r2, [pc, #488]	; (8003b6c <pwm_Config+0x218>)
 8003984:	f043 0302 	orr.w	r3, r3, #2
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	e018      	b.n	80039be <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a78      	ldr	r2, [pc, #480]	; (8003b74 <pwm_Config+0x220>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d106      	bne.n	80039a4 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003996:	4b75      	ldr	r3, [pc, #468]	; (8003b6c <pwm_Config+0x218>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a74      	ldr	r2, [pc, #464]	; (8003b6c <pwm_Config+0x218>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
 80039a2:	e00c      	b.n	80039be <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4a73      	ldr	r2, [pc, #460]	; (8003b78 <pwm_Config+0x224>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d106      	bne.n	80039bc <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80039ae:	4b6f      	ldr	r3, [pc, #444]	; (8003b6c <pwm_Config+0x218>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <pwm_Config+0x218>)
 80039b4:	f043 0308 	orr.w	r3, r3, #8
 80039b8:	6413      	str	r3, [r2, #64]	; 0x40
 80039ba:	e000      	b.n	80039be <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 80039bc:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa4c 	bl	8003e5c <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	f200 8118 	bhi.w	8003bfe <pwm_Config+0x2aa>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <pwm_Config+0x80>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	08003a67 	.word	0x08003a67
 80039dc:	08003ae9 	.word	0x08003ae9
 80039e0:	08003b7d 	.word	0x08003b7d
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f022 0203 	bic.w	r2, r2, #3
 80039f2:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a02:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003a12:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f022 0208 	bic.w	r2, r2, #8
 8003a22:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f042 0208 	orr.w	r2, r2, #8
 8003a32:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f022 0204 	bic.w	r2, r2, #4
 8003a42:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f042 0204 	orr.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a62:	619a      	str	r2, [r3, #24]

		break;
 8003a64:	e0cc      	b.n	8003c00 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f022 0203 	bic.w	r2, r2, #3
 8003a74:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a84:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003a94:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	699a      	ldr	r2, [r3, #24]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa4:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab4:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac4:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad4:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae4:	619a      	str	r2, [r3, #24]

		break;
 8003ae6:	e08b      	b.n	8003c00 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f022 0203 	bic.w	r2, r2, #3
 8003af6:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b06:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003b16:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f022 0208 	bic.w	r2, r2, #8
 8003b26:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f022 0204 	bic.w	r2, r2, #4
 8003b46:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f042 0204 	orr.w	r2, r2, #4
 8003b56:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b66:	61da      	str	r2, [r3, #28]

		break;
 8003b68:	e04a      	b.n	8003c00 <pwm_Config+0x2ac>
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40000800 	.word	0x40000800
 8003b78:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b8a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b9a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	69da      	ldr	r2, [r3, #28]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003baa:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bba:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bca:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bda:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	69da      	ldr	r2, [r3, #28]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bea:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bfa:	61da      	str	r2, [r3, #28]

		break;
 8003bfc:	e000      	b.n	8003c00 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8003bfe:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	791b      	ldrb	r3, [r3, #4]
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f896 	bl	8003d38 <statusPolarityPWM>

}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d87f      	bhi.n	8003d28 <statusInOutPWM+0x114>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <statusInOutPWM+0x1c>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c41 	.word	0x08003c41
 8003c34:	08003c7b 	.word	0x08003c7b
 8003c38:	08003cb5 	.word	0x08003cb5
 8003c3c:	08003cef 	.word	0x08003cef
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8003c40:	78fb      	ldrb	r3, [r7, #3]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d110      	bne.n	8003c68 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	6a1a      	ldr	r2, [r3, #32]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8003c66:	e060      	b.n	8003d2a <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	621a      	str	r2, [r3, #32]
		break;
 8003c78:	e057      	b.n	8003d2a <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d110      	bne.n	8003ca2 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	6a1a      	ldr	r2, [r3, #32]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f022 0210 	bic.w	r2, r2, #16
 8003c8e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	6a1a      	ldr	r2, [r3, #32]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f042 0210 	orr.w	r2, r2, #16
 8003c9e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8003ca0:	e043      	b.n	8003d2a <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	6a1a      	ldr	r2, [r3, #32]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f022 0210 	bic.w	r2, r2, #16
 8003cb0:	621a      	str	r2, [r3, #32]
		break;
 8003cb2:	e03a      	b.n	8003d2a <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d110      	bne.n	8003cdc <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	6a1a      	ldr	r2, [r3, #32]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd8:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8003cda:	e026      	b.n	8003d2a <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cea:	621a      	str	r2, [r3, #32]
		break;
 8003cec:	e01d      	b.n	8003d2a <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d110      	bne.n	8003d16 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d02:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d12:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8003d14:	e009      	b.n	8003d2a <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d24:	621a      	str	r2, [r3, #32]
		break;
 8003d26:	e000      	b.n	8003d2a <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8003d28:	bf00      	nop
	}
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop

08003d38 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b03      	cmp	r3, #3
 8003d4a:	d87f      	bhi.n	8003e4c <statusPolarityPWM+0x114>
 8003d4c:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <statusPolarityPWM+0x1c>)
 8003d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d52:	bf00      	nop
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d9f 	.word	0x08003d9f
 8003d5c:	08003dd9 	.word	0x08003dd9
 8003d60:	08003e13 	.word	0x08003e13
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d110      	bne.n	8003d8c <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f022 0202 	bic.w	r2, r2, #2
 8003d78:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f042 0202 	orr.w	r2, r2, #2
 8003d88:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8003d8a:	e060      	b.n	8003e4e <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	6a1a      	ldr	r2, [r3, #32]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f022 0202 	bic.w	r2, r2, #2
 8003d9a:	621a      	str	r2, [r3, #32]
		break;
 8003d9c:	e057      	b.n	8003e4e <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d110      	bne.n	8003dc6 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f022 0220 	bic.w	r2, r2, #32
 8003db2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	6a1a      	ldr	r2, [r3, #32]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f042 0220 	orr.w	r2, r2, #32
 8003dc2:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8003dc4:	e043      	b.n	8003e4e <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	6a1a      	ldr	r2, [r3, #32]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f022 0220 	bic.w	r2, r2, #32
 8003dd4:	621a      	str	r2, [r3, #32]
		break;
 8003dd6:	e03a      	b.n	8003e4e <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d110      	bne.n	8003e00 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003dec:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	6a1a      	ldr	r2, [r3, #32]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfc:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8003dfe:	e026      	b.n	8003e4e <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	6a1a      	ldr	r2, [r3, #32]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e0e:	621a      	str	r2, [r3, #32]
		break;
 8003e10:	e01d      	b.n	8003e4e <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d110      	bne.n	8003e3a <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	6a1a      	ldr	r2, [r3, #32]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e26:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e36:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8003e38:	e009      	b.n	8003e4e <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	6a1a      	ldr	r2, [r3, #32]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e48:	621a      	str	r2, [r3, #32]
		break;
 8003e4a:	e000      	b.n	8003e4e <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8003e4c:	bf00      	nop
	}
	}

}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop

08003e5c <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d823      	bhi.n	8003eb4 <setDuttyCycle+0x58>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <setDuttyCycle+0x18>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003e85 	.word	0x08003e85
 8003e78:	08003e91 	.word	0x08003e91
 8003e7c:	08003e9d 	.word	0x08003e9d
 8003e80:	08003ea9 	.word	0x08003ea9
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	885a      	ldrh	r2, [r3, #2]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003e8e:	e012      	b.n	8003eb6 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	885a      	ldrh	r2, [r3, #2]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003e9a:	e00c      	b.n	8003eb6 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	885a      	ldrh	r2, [r3, #2]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003ea6:	e006      	b.n	8003eb6 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	885a      	ldrh	r2, [r3, #2]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003eb2:	e000      	b.n	8003eb6 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8003eb4:	bf00      	nop
	}
	}

}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop

08003ec4 <updateDuttyCycle>:


//Actualizacion del Dutty sin porcentaje
void updateDuttyCycle(PWM_Handler_t *prtPwmHandler, uint16_t newDutty)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = newDutty;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff ffc0 	bl	8003e5c <setDuttyCycle>
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <__NVIC_EnableIRQ>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <config_SysTick_ms>:
uint64_t ticks_start = 0;
uint64_t ticks_counting = 0;

//Funcion para la configurar del Systick
void config_SysTick_ms(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 8003f26:	4919      	ldr	r1, [pc, #100]	; (8003f8c <config_SysTick_ms+0x6c>)
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1ms
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003f34:	f7ff fcda 	bl	80038ec <getConfigPLL>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock*1000;              //Cargamos el valor correspondiente a 1 ms
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f42:	fb03 f202 	mul.w	r2, r3, r2
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <config_SysTick_ms+0x70>)
 8003f48:	605a      	str	r2, [r3, #4]
//		break;
//	}
//	}

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <config_SysTick_ms+0x70>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <config_SysTick_ms+0x70>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <config_SysTick_ms+0x70>)
 8003f56:	f043 0304 	orr.w	r3, r3, #4
 8003f5a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f5c:	b672      	cpsid	i
}
 8003f5e:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	f7ff ffbe 	bl	8003ee4 <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <config_SysTick_ms+0x70>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <config_SysTick_ms+0x70>)
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <config_SysTick_ms+0x70>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <config_SysTick_ms+0x70>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f80:	b662      	cpsie	i
}
 8003f82:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000350 	.word	0x20000350
 8003f90:	e000e010 	.word	0xe000e010

08003f94 <getTicksMs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksMs(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
	return ticks;
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <getTicksMs+0x18>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000350 	.word	0x20000350

08003fb0 <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <SysTick_Handler+0x38>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00e      	beq.n	8003fde <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <SysTick_Handler+0x38>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <SysTick_Handler+0x38>)
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fca:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8003fcc:	4b07      	ldr	r3, [pc, #28]	; (8003fec <SysTick_Handler+0x3c>)
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	1c50      	adds	r0, r2, #1
 8003fd4:	f143 0100 	adc.w	r1, r3, #0
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <SysTick_Handler+0x3c>)
 8003fda:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e010 	.word	0xe000e010
 8003fec:	20000350 	.word	0x20000350

08003ff0 <__NVIC_EnableIRQ>:
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	db0b      	blt.n	800401a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	4907      	ldr	r1, [pc, #28]	; (8004028 <__NVIC_EnableIRQ+0x38>)
 800400a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2001      	movs	r0, #1
 8004012:	fa00 f202 	lsl.w	r2, r0, r2
 8004016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	e000e100 	.word	0xe000e100

0800402c <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a8f      	ldr	r2, [pc, #572]	; (8004278 <USART_Config+0x24c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d107      	bne.n	800404e <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 800403e:	4b8f      	ldr	r3, [pc, #572]	; (800427c <USART_Config+0x250>)
 8004040:	2210      	movs	r2, #16
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a8d      	ldr	r2, [pc, #564]	; (8004280 <USART_Config+0x254>)
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e019      	b.n	8004082 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	4a8c      	ldr	r2, [pc, #560]	; (8004284 <USART_Config+0x258>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8004058:	4b88      	ldr	r3, [pc, #544]	; (800427c <USART_Config+0x250>)
 800405a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a88      	ldr	r2, [pc, #544]	; (8004288 <USART_Config+0x25c>)
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e00b      	b.n	8004082 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4a87      	ldr	r2, [pc, #540]	; (800428c <USART_Config+0x260>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d106      	bne.n	8004082 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004074:	4b81      	ldr	r3, [pc, #516]	; (800427c <USART_Config+0x250>)
 8004076:	2220      	movs	r2, #32
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	4a84      	ldr	r2, [pc, #528]	; (8004290 <USART_Config+0x264>)
 8004080:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	789b      	ldrb	r3, [r3, #2]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03d      	beq.n	8004116 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b8:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040c8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040d8:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	789b      	ldrb	r3, [r3, #2]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d110      	bne.n	8004104 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	68da      	ldr	r2, [r3, #12]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040f0:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	e018      	b.n	8004136 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	e00f      	b.n	8004136 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004134:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	78db      	ldrb	r3, [r3, #3]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d84c      	bhi.n	80041d8 <USART_Config+0x1ac>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <USART_Config+0x118>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004155 	.word	0x08004155
 8004148:	08004173 	.word	0x08004173
 800414c:	08004195 	.word	0x08004195
 8004150:	080041b7 	.word	0x080041b7
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004162:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	6912      	ldr	r2, [r2, #16]
 800416e:	611a      	str	r2, [r3, #16]
		break;
 8004170:	e041      	b.n	80041f6 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004180:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004190:	611a      	str	r2, [r3, #16]
		break;
 8004192:	e030      	b.n	80041f6 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80041a2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041b2:	611a      	str	r2, [r3, #16]
		break;
 80041b4:	e01f      	b.n	80041f6 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80041c4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80041d4:	611a      	str	r2, [r3, #16]
		break;
 80041d6:	e00e      	b.n	80041f6 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80041e6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	6912      	ldr	r2, [r2, #16]
 80041f2:	611a      	str	r2, [r3, #16]
		break;
 80041f4:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4a21      	ldr	r2, [pc, #132]	; (8004284 <USART_Config+0x258>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d104      	bne.n	800420e <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004204:	f7ff fb8e 	bl	8003924 <getClockAPB1>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e003      	b.n	8004216 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 800420e:	f7ff fb6d 	bl	80038ec <getConfigPLL>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	785b      	ldrb	r3, [r3, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004224:	4618      	mov	r0, r3
 8004226:	f000 f91f 	bl	8004468 <getValueBaudRate>
 800422a:	4603      	mov	r3, r0
 800422c:	461a      	mov	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	e02f      	b.n	8004296 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10b      	bne.n	8004256 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f90f 	bl	8004468 <getValueBaudRate>
 800424a:	4603      	mov	r3, r0
 800424c:	461a      	mov	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	e01f      	b.n	8004296 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	785b      	ldrb	r3, [r3, #1]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d11a      	bne.n	8004294 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f8ff 	bl	8004468 <getValueBaudRate>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	e00f      	b.n	8004296 <USART_Config+0x26a>
 8004276:	bf00      	nop
 8004278:	40011000 	.word	0x40011000
 800427c:	40023800 	.word	0x40023800
 8004280:	20000358 	.word	0x20000358
 8004284:	40004400 	.word	0x40004400
 8004288:	2000035c 	.word	0x2000035c
 800428c:	40011400 	.word	0x40011400
 8004290:	20000360 	.word	0x20000360
	}
	else
	{
		__NOP();
 8004294:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d866      	bhi.n	800436c <USART_Config+0x340>
 800429e:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <USART_Config+0x278>)
 80042a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042d7 	.word	0x080042d7
 80042ac:	080042f9 	.word	0x080042f9
 80042b0:	0800433b 	.word	0x0800433b
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f022 0208 	bic.w	r2, r2, #8
 80042c2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f042 0208 	orr.w	r2, r2, #8
 80042d2:	60da      	str	r2, [r3, #12]

		break;
 80042d4:	e063      	b.n	800439e <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f022 0204 	bic.w	r2, r2, #4
 80042e4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f042 0204 	orr.w	r2, r2, #4
 80042f4:	60da      	str	r2, [r3, #12]

		break;
 80042f6:	e052      	b.n	800439e <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f022 0208 	bic.w	r2, r2, #8
 8004306:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f042 0208 	orr.w	r2, r2, #8
 8004316:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f022 0204 	bic.w	r2, r2, #4
 8004326:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f042 0204 	orr.w	r2, r2, #4
 8004336:	60da      	str	r2, [r3, #12]


		break;
 8004338:	e031      	b.n	800439e <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004348:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f022 0208 	bic.w	r2, r2, #8
 8004358:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f022 0204 	bic.w	r2, r2, #4
 8004368:	60da      	str	r2, [r3, #12]
		break;
 800436a:	e018      	b.n	800439e <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800437a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f022 0208 	bic.w	r2, r2, #8
 800438a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f022 0204 	bic.w	r2, r2, #4
 800439a:	60da      	str	r2, [r3, #12]
		break;
 800439c:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800439e:	b672      	cpsid	i
}
 80043a0:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	791b      	ldrb	r3, [r3, #4]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d110      	bne.n	80043cc <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f022 0220 	bic.w	r2, r2, #32
 80043b8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f042 0220 	orr.w	r2, r2, #32
 80043c8:	60da      	str	r2, [r3, #12]
 80043ca:	e007      	b.n	80043dc <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f022 0220 	bic.w	r2, r2, #32
 80043da:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	791b      	ldrb	r3, [r3, #4]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d003      	beq.n	80043ec <USART_Config+0x3c0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	795b      	ldrb	r3, [r3, #5]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d11a      	bne.n	8004422 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a1a      	ldr	r2, [pc, #104]	; (800445c <USART_Config+0x430>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d103      	bne.n	80043fe <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80043f6:	2025      	movs	r0, #37	; 0x25
 80043f8:	f7ff fdfa 	bl	8003ff0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80043fc:	e013      	b.n	8004426 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	4a17      	ldr	r2, [pc, #92]	; (8004460 <USART_Config+0x434>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d103      	bne.n	8004410 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004408:	2026      	movs	r0, #38	; 0x26
 800440a:	f7ff fdf1 	bl	8003ff0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 800440e:	e00a      	b.n	8004426 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <USART_Config+0x438>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d105      	bne.n	8004426 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 800441a:	2047      	movs	r0, #71	; 0x47
 800441c:	f7ff fde8 	bl	8003ff0 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004420:	e001      	b.n	8004426 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8004422:	bf00      	nop
 8004424:	e000      	b.n	8004428 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004426:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004428:	b662      	cpsie	i
}
 800442a:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b03      	cmp	r3, #3
 8004432:	d00f      	beq.n	8004454 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004442:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004452:	60da      	str	r2, [r3, #12]
	}
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40011000 	.word	0x40011000
 8004460:	40004400 	.word	0x40004400
 8004464:	40011400 	.word	0x40011400

08004468 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004468:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800446c:	b086      	sub	sp, #24
 800446e:	af00      	add	r7, sp, #0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	4601      	mov	r1, r0
 8004474:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004476:	79f9      	ldrb	r1, [r7, #7]
 8004478:	2000      	movs	r0, #0
 800447a:	460a      	mov	r2, r1
 800447c:	4603      	mov	r3, r0
 800447e:	491f      	ldr	r1, [pc, #124]	; (80044fc <getValueBaudRate+0x94>)
 8004480:	fb01 f003 	mul.w	r0, r1, r3
 8004484:	2102      	movs	r1, #2
 8004486:	fb02 f101 	mul.w	r1, r2, r1
 800448a:	4401      	add	r1, r0
 800448c:	481b      	ldr	r0, [pc, #108]	; (80044fc <getValueBaudRate+0x94>)
 800448e:	fba2 4500 	umull	r4, r5, r2, r0
 8004492:	194b      	adds	r3, r1, r5
 8004494:	461d      	mov	r5, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	2200      	movs	r2, #0
 800449c:	4698      	mov	r8, r3
 800449e:	4691      	mov	r9, r2
 80044a0:	4642      	mov	r2, r8
 80044a2:	464b      	mov	r3, r9
 80044a4:	4620      	mov	r0, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	f7fc fbf6 	bl	8000c98 <__aeabi_ldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4a12      	ldr	r2, [pc, #72]	; (8004500 <getValueBaudRate+0x98>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	0b5b      	lsrs	r3, r3, #13
 80044be:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <getValueBaudRate+0x98>)
 80044d8:	fba2 2303 	umull	r2, r3, r2, r3
 80044dc:	0a5b      	lsrs	r3, r3, #9
 80044de:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	7afb      	ldrb	r3, [r7, #11]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	813b      	strh	r3, [r7, #8]

    return value;
 80044f0:	893b      	ldrh	r3, [r7, #8]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80044fc:	540be400 	.word	0x540be400
 8004500:	d1b71759 	.word	0xd1b71759

08004504 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004510:	e000      	b.n	8004514 <writeChar+0x10>
	{
		__NOP();
 8004512:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f7      	beq.n	8004512 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	78fa      	ldrb	r2, [r7, #3]
 8004528:	605a      	str	r2, [r3, #4]

}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 8004544:	e00a      	b.n	800455c <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	4413      	add	r3, r2
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f7ff ffd7 	bl	8004504 <writeChar>
		i++;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	3301      	adds	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	4413      	add	r3, r2
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ee      	bne.n	8004546 <writeMsg+0x10>
	}
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <getRxData>:
	}
}

//Funcion para leer un char
uint8_t getRxData(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
	return auxRxData;
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <getRxData+0x14>)
 800457a:	781b      	ldrb	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20000364 	.word	0x20000364

0800458c <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10c      	bne.n	80045b8 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 80045b6:	e005      	b.n	80045c4 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
	__NOP();
 80045d4:	bf00      	nop
}
 80045d6:	bf00      	nop
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
	__NOP();
 80045e4:	bf00      	nop
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80045f4:	4b37      	ldr	r3, [pc, #220]	; (80046d4 <USART1_IRQHandler+0xe4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d008      	beq.n	8004614 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8004602:	4b34      	ldr	r3, [pc, #208]	; (80046d4 <USART1_IRQHandler+0xe4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4b33      	ldr	r3, [pc, #204]	; (80046d8 <USART1_IRQHandler+0xe8>)
 800460c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800460e:	f7ff ffdf 	bl	80045d0 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004612:	e05d      	b.n	80046d0 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8004614:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <USART1_IRQHandler+0xe4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d055      	beq.n	80046ce <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004622:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <USART1_IRQHandler+0xec>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <USART1_IRQHandler+0xf0>)
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <USART1_IRQHandler+0xe4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004634:	4b27      	ldr	r3, [pc, #156]	; (80046d4 <USART1_IRQHandler+0xe4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ffa6 	bl	800458c <interruptionTX>
}
 8004640:	e046      	b.n	80046d0 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <USART1_IRQHandler+0xec>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d142      	bne.n	80046d0 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <USART1_IRQHandler+0xf4>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <USART1_IRQHandler+0xf8>)
 8004652:	5c9b      	ldrb	r3, [r3, r2]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00e      	beq.n	8004676 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8004658:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <USART1_IRQHandler+0xf4>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <USART1_IRQHandler+0xf8>)
 8004660:	5c9a      	ldrb	r2, [r3, r2]
 8004662:	4b1c      	ldr	r3, [pc, #112]	; (80046d4 <USART1_IRQHandler+0xe4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	605a      	str	r2, [r3, #4]
				posChar++;
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <USART1_IRQHandler+0xf4>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	b2da      	uxtb	r2, r3
 8004670:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <USART1_IRQHandler+0xf4>)
 8004672:	701a      	strb	r2, [r3, #0]
}
 8004674:	e02c      	b.n	80046d0 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004676:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <USART1_IRQHandler+0xfc>)
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <USART1_IRQHandler+0x100>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d215      	bcs.n	80046ae <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004682:	4b1a      	ldr	r3, [pc, #104]	; (80046ec <USART1_IRQHandler+0xfc>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	2364      	movs	r3, #100	; 0x64
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	4a19      	ldr	r2, [pc, #100]	; (80046f4 <USART1_IRQHandler+0x104>)
 8004690:	4413      	add	r3, r2
 8004692:	4619      	mov	r1, r3
 8004694:	4814      	ldr	r0, [pc, #80]	; (80046e8 <USART1_IRQHandler+0xf8>)
 8004696:	f000 ffe9 	bl	800566c <siprintf>
					posChar = 0;
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <USART1_IRQHandler+0xf4>)
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80046a0:	4b12      	ldr	r3, [pc, #72]	; (80046ec <USART1_IRQHandler+0xfc>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	4b10      	ldr	r3, [pc, #64]	; (80046ec <USART1_IRQHandler+0xfc>)
 80046aa:	701a      	strb	r2, [r3, #0]
}
 80046ac:	e010      	b.n	80046d0 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <USART1_IRQHandler+0xe4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff69 	bl	800458c <interruptionTX>
					posChar = 0;
 80046ba:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <USART1_IRQHandler+0xf4>)
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <USART1_IRQHandler+0xfc>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <USART1_IRQHandler+0x100>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
}
 80046cc:	e000      	b.n	80046d0 <USART1_IRQHandler+0xe0>
		__NOP();
 80046ce:	bf00      	nop
}
 80046d0:	bf00      	nop
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20000358 	.word	0x20000358
 80046d8:	20000364 	.word	0x20000364
 80046dc:	20000b9f 	.word	0x20000b9f
 80046e0:	20000365 	.word	0x20000365
 80046e4:	20000b9e 	.word	0x20000b9e
 80046e8:	20000368 	.word	0x20000368
 80046ec:	20000b9d 	.word	0x20000b9d
 80046f0:	20000b9c 	.word	0x20000b9c
 80046f4:	200003cc 	.word	0x200003cc

080046f8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 80046fc:	4b37      	ldr	r3, [pc, #220]	; (80047dc <USART2_IRQHandler+0xe4>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 800470a:	4b34      	ldr	r3, [pc, #208]	; (80047dc <USART2_IRQHandler+0xe4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <USART2_IRQHandler+0xe8>)
 8004714:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8004716:	f7fc fe75 	bl	8001404 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 800471a:	e05d      	b.n	80047d8 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 800471c:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <USART2_IRQHandler+0xe4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d055      	beq.n	80047d6 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800472a:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <USART2_IRQHandler+0xec>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8004732:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <USART2_IRQHandler+0xf0>)
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <USART2_IRQHandler+0xe4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <USART2_IRQHandler+0xe4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff ff22 	bl	800458c <interruptionTX>
}
 8004748:	e046      	b.n	80047d8 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800474a:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <USART2_IRQHandler+0xec>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d142      	bne.n	80047d8 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <USART2_IRQHandler+0xf4>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <USART2_IRQHandler+0xf8>)
 800475a:	5c9b      	ldrb	r3, [r3, r2]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00e      	beq.n	800477e <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8004760:	4b22      	ldr	r3, [pc, #136]	; (80047ec <USART2_IRQHandler+0xf4>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <USART2_IRQHandler+0xf8>)
 8004768:	5c9a      	ldrb	r2, [r3, r2]
 800476a:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <USART2_IRQHandler+0xe4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	605a      	str	r2, [r3, #4]
				posChar++;
 8004770:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <USART2_IRQHandler+0xf4>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	3301      	adds	r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <USART2_IRQHandler+0xf4>)
 800477a:	701a      	strb	r2, [r3, #0]
}
 800477c:	e02c      	b.n	80047d8 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <USART2_IRQHandler+0xfc>)
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <USART2_IRQHandler+0x100>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d215      	bcs.n	80047b6 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800478a:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <USART2_IRQHandler+0xfc>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	2364      	movs	r3, #100	; 0x64
 8004792:	fb02 f303 	mul.w	r3, r2, r3
 8004796:	4a19      	ldr	r2, [pc, #100]	; (80047fc <USART2_IRQHandler+0x104>)
 8004798:	4413      	add	r3, r2
 800479a:	4619      	mov	r1, r3
 800479c:	4814      	ldr	r0, [pc, #80]	; (80047f0 <USART2_IRQHandler+0xf8>)
 800479e:	f000 ff65 	bl	800566c <siprintf>
					posChar = 0;
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <USART2_IRQHandler+0xf4>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80047a8:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <USART2_IRQHandler+0xfc>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <USART2_IRQHandler+0xfc>)
 80047b2:	701a      	strb	r2, [r3, #0]
}
 80047b4:	e010      	b.n	80047d8 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <USART2_IRQHandler+0xe4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fee5 	bl	800458c <interruptionTX>
					posChar = 0;
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <USART2_IRQHandler+0xf4>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <USART2_IRQHandler+0xfc>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <USART2_IRQHandler+0x100>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]
}
 80047d4:	e000      	b.n	80047d8 <USART2_IRQHandler+0xe0>
		__NOP();
 80047d6:	bf00      	nop
}
 80047d8:	bf00      	nop
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	2000035c 	.word	0x2000035c
 80047e0:	20000364 	.word	0x20000364
 80047e4:	20000b9f 	.word	0x20000b9f
 80047e8:	20000365 	.word	0x20000365
 80047ec:	20000b9e 	.word	0x20000b9e
 80047f0:	20000368 	.word	0x20000368
 80047f4:	20000b9d 	.word	0x20000b9d
 80047f8:	20000b9c 	.word	0x20000b9c
 80047fc:	200003cc 	.word	0x200003cc

08004800 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8004804:	4b37      	ldr	r3, [pc, #220]	; (80048e4 <USART6_IRQHandler+0xe4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8004812:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <USART6_IRQHandler+0xe4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <USART6_IRQHandler+0xe8>)
 800481c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 800481e:	f7ff fedf 	bl	80045e0 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004822:	e05d      	b.n	80048e0 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8004824:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <USART6_IRQHandler+0xe4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d055      	beq.n	80048de <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004832:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <USART6_IRQHandler+0xec>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <USART6_IRQHandler+0xf0>)
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	4b29      	ldr	r3, [pc, #164]	; (80048e4 <USART6_IRQHandler+0xe4>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004844:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <USART6_IRQHandler+0xe4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2100      	movs	r1, #0
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fe9e 	bl	800458c <interruptionTX>
}
 8004850:	e046      	b.n	80048e0 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004852:	4b26      	ldr	r3, [pc, #152]	; (80048ec <USART6_IRQHandler+0xec>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d142      	bne.n	80048e0 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800485a:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <USART6_IRQHandler+0xf4>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <USART6_IRQHandler+0xf8>)
 8004862:	5c9b      	ldrb	r3, [r3, r2]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00e      	beq.n	8004886 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8004868:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <USART6_IRQHandler+0xf4>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <USART6_IRQHandler+0xf8>)
 8004870:	5c9a      	ldrb	r2, [r3, r2]
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <USART6_IRQHandler+0xe4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	605a      	str	r2, [r3, #4]
				posChar++;
 8004878:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <USART6_IRQHandler+0xf4>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	b2da      	uxtb	r2, r3
 8004880:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <USART6_IRQHandler+0xf4>)
 8004882:	701a      	strb	r2, [r3, #0]
}
 8004884:	e02c      	b.n	80048e0 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004886:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <USART6_IRQHandler+0xfc>)
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <USART6_IRQHandler+0x100>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d215      	bcs.n	80048be <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004892:	4b1a      	ldr	r3, [pc, #104]	; (80048fc <USART6_IRQHandler+0xfc>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	2364      	movs	r3, #100	; 0x64
 800489a:	fb02 f303 	mul.w	r3, r2, r3
 800489e:	4a19      	ldr	r2, [pc, #100]	; (8004904 <USART6_IRQHandler+0x104>)
 80048a0:	4413      	add	r3, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	4814      	ldr	r0, [pc, #80]	; (80048f8 <USART6_IRQHandler+0xf8>)
 80048a6:	f000 fee1 	bl	800566c <siprintf>
					posChar = 0;
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <USART6_IRQHandler+0xf4>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80048b0:	4b12      	ldr	r3, [pc, #72]	; (80048fc <USART6_IRQHandler+0xfc>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <USART6_IRQHandler+0xfc>)
 80048ba:	701a      	strb	r2, [r3, #0]
}
 80048bc:	e010      	b.n	80048e0 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <USART6_IRQHandler+0xe4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fe61 	bl	800458c <interruptionTX>
					posChar = 0;
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <USART6_IRQHandler+0xf4>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <USART6_IRQHandler+0xfc>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <USART6_IRQHandler+0x100>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
}
 80048dc:	e000      	b.n	80048e0 <USART6_IRQHandler+0xe0>
		__NOP();
 80048de:	bf00      	nop
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000360 	.word	0x20000360
 80048e8:	20000364 	.word	0x20000364
 80048ec:	20000b9f 	.word	0x20000b9f
 80048f0:	20000365 	.word	0x20000365
 80048f4:	20000b9e 	.word	0x20000b9e
 80048f8:	20000368 	.word	0x20000368
 80048fc:	20000b9d 	.word	0x20000b9d
 8004900:	20000b9c 	.word	0x20000b9c
 8004904:	200003cc 	.word	0x200003cc

08004908 <__errno>:
 8004908:	4b01      	ldr	r3, [pc, #4]	; (8004910 <__errno+0x8>)
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000018 	.word	0x20000018

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4d0d      	ldr	r5, [pc, #52]	; (800494c <__libc_init_array+0x38>)
 8004918:	4c0d      	ldr	r4, [pc, #52]	; (8004950 <__libc_init_array+0x3c>)
 800491a:	1b64      	subs	r4, r4, r5
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	2600      	movs	r6, #0
 8004920:	42a6      	cmp	r6, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	4d0b      	ldr	r5, [pc, #44]	; (8004954 <__libc_init_array+0x40>)
 8004926:	4c0c      	ldr	r4, [pc, #48]	; (8004958 <__libc_init_array+0x44>)
 8004928:	f004 fc92 	bl	8009250 <_init>
 800492c:	1b64      	subs	r4, r4, r5
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	2600      	movs	r6, #0
 8004932:	42a6      	cmp	r6, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f855 3b04 	ldr.w	r3, [r5], #4
 800493c:	4798      	blx	r3
 800493e:	3601      	adds	r6, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f855 3b04 	ldr.w	r3, [r5], #4
 8004946:	4798      	blx	r3
 8004948:	3601      	adds	r6, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	08009834 	.word	0x08009834
 8004950:	08009834 	.word	0x08009834
 8004954:	08009834 	.word	0x08009834
 8004958:	08009838 	.word	0x08009838

0800495c <memset>:
 800495c:	4402      	add	r2, r0
 800495e:	4603      	mov	r3, r0
 8004960:	4293      	cmp	r3, r2
 8004962:	d100      	bne.n	8004966 <memset+0xa>
 8004964:	4770      	bx	lr
 8004966:	f803 1b01 	strb.w	r1, [r3], #1
 800496a:	e7f9      	b.n	8004960 <memset+0x4>

0800496c <__cvt>:
 800496c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004970:	ec55 4b10 	vmov	r4, r5, d0
 8004974:	2d00      	cmp	r5, #0
 8004976:	460e      	mov	r6, r1
 8004978:	4619      	mov	r1, r3
 800497a:	462b      	mov	r3, r5
 800497c:	bfbb      	ittet	lt
 800497e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004982:	461d      	movlt	r5, r3
 8004984:	2300      	movge	r3, #0
 8004986:	232d      	movlt	r3, #45	; 0x2d
 8004988:	700b      	strb	r3, [r1, #0]
 800498a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800498c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004990:	4691      	mov	r9, r2
 8004992:	f023 0820 	bic.w	r8, r3, #32
 8004996:	bfbc      	itt	lt
 8004998:	4622      	movlt	r2, r4
 800499a:	4614      	movlt	r4, r2
 800499c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049a0:	d005      	beq.n	80049ae <__cvt+0x42>
 80049a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80049a6:	d100      	bne.n	80049aa <__cvt+0x3e>
 80049a8:	3601      	adds	r6, #1
 80049aa:	2102      	movs	r1, #2
 80049ac:	e000      	b.n	80049b0 <__cvt+0x44>
 80049ae:	2103      	movs	r1, #3
 80049b0:	ab03      	add	r3, sp, #12
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	ab02      	add	r3, sp, #8
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	ec45 4b10 	vmov	d0, r4, r5
 80049bc:	4653      	mov	r3, sl
 80049be:	4632      	mov	r2, r6
 80049c0:	f001 fdae 	bl	8006520 <_dtoa_r>
 80049c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80049c8:	4607      	mov	r7, r0
 80049ca:	d102      	bne.n	80049d2 <__cvt+0x66>
 80049cc:	f019 0f01 	tst.w	r9, #1
 80049d0:	d022      	beq.n	8004a18 <__cvt+0xac>
 80049d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049d6:	eb07 0906 	add.w	r9, r7, r6
 80049da:	d110      	bne.n	80049fe <__cvt+0x92>
 80049dc:	783b      	ldrb	r3, [r7, #0]
 80049de:	2b30      	cmp	r3, #48	; 0x30
 80049e0:	d10a      	bne.n	80049f8 <__cvt+0x8c>
 80049e2:	2200      	movs	r2, #0
 80049e4:	2300      	movs	r3, #0
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fc f875 	bl	8000ad8 <__aeabi_dcmpeq>
 80049ee:	b918      	cbnz	r0, 80049f8 <__cvt+0x8c>
 80049f0:	f1c6 0601 	rsb	r6, r6, #1
 80049f4:	f8ca 6000 	str.w	r6, [sl]
 80049f8:	f8da 3000 	ldr.w	r3, [sl]
 80049fc:	4499      	add	r9, r3
 80049fe:	2200      	movs	r2, #0
 8004a00:	2300      	movs	r3, #0
 8004a02:	4620      	mov	r0, r4
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7fc f867 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a0a:	b108      	cbz	r0, 8004a10 <__cvt+0xa4>
 8004a0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a10:	2230      	movs	r2, #48	; 0x30
 8004a12:	9b03      	ldr	r3, [sp, #12]
 8004a14:	454b      	cmp	r3, r9
 8004a16:	d307      	bcc.n	8004a28 <__cvt+0xbc>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a1c:	1bdb      	subs	r3, r3, r7
 8004a1e:	4638      	mov	r0, r7
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	b004      	add	sp, #16
 8004a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a28:	1c59      	adds	r1, r3, #1
 8004a2a:	9103      	str	r1, [sp, #12]
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e7f0      	b.n	8004a12 <__cvt+0xa6>

08004a30 <__exponent>:
 8004a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a32:	4603      	mov	r3, r0
 8004a34:	2900      	cmp	r1, #0
 8004a36:	bfb8      	it	lt
 8004a38:	4249      	neglt	r1, r1
 8004a3a:	f803 2b02 	strb.w	r2, [r3], #2
 8004a3e:	bfb4      	ite	lt
 8004a40:	222d      	movlt	r2, #45	; 0x2d
 8004a42:	222b      	movge	r2, #43	; 0x2b
 8004a44:	2909      	cmp	r1, #9
 8004a46:	7042      	strb	r2, [r0, #1]
 8004a48:	dd2a      	ble.n	8004aa0 <__exponent+0x70>
 8004a4a:	f10d 0407 	add.w	r4, sp, #7
 8004a4e:	46a4      	mov	ip, r4
 8004a50:	270a      	movs	r7, #10
 8004a52:	46a6      	mov	lr, r4
 8004a54:	460a      	mov	r2, r1
 8004a56:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a5a:	fb07 1516 	mls	r5, r7, r6, r1
 8004a5e:	3530      	adds	r5, #48	; 0x30
 8004a60:	2a63      	cmp	r2, #99	; 0x63
 8004a62:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	dcf1      	bgt.n	8004a52 <__exponent+0x22>
 8004a6e:	3130      	adds	r1, #48	; 0x30
 8004a70:	f1ae 0502 	sub.w	r5, lr, #2
 8004a74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a78:	1c44      	adds	r4, r0, #1
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	4561      	cmp	r1, ip
 8004a7e:	d30a      	bcc.n	8004a96 <__exponent+0x66>
 8004a80:	f10d 0209 	add.w	r2, sp, #9
 8004a84:	eba2 020e 	sub.w	r2, r2, lr
 8004a88:	4565      	cmp	r5, ip
 8004a8a:	bf88      	it	hi
 8004a8c:	2200      	movhi	r2, #0
 8004a8e:	4413      	add	r3, r2
 8004a90:	1a18      	subs	r0, r3, r0
 8004a92:	b003      	add	sp, #12
 8004a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a9e:	e7ed      	b.n	8004a7c <__exponent+0x4c>
 8004aa0:	2330      	movs	r3, #48	; 0x30
 8004aa2:	3130      	adds	r1, #48	; 0x30
 8004aa4:	7083      	strb	r3, [r0, #2]
 8004aa6:	70c1      	strb	r1, [r0, #3]
 8004aa8:	1d03      	adds	r3, r0, #4
 8004aaa:	e7f1      	b.n	8004a90 <__exponent+0x60>

08004aac <_printf_float>:
 8004aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	ed2d 8b02 	vpush	{d8}
 8004ab4:	b08d      	sub	sp, #52	; 0x34
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004abc:	4616      	mov	r6, r2
 8004abe:	461f      	mov	r7, r3
 8004ac0:	4605      	mov	r5, r0
 8004ac2:	f002 fe8b 	bl	80077dc <_localeconv_r>
 8004ac6:	f8d0 a000 	ldr.w	sl, [r0]
 8004aca:	4650      	mov	r0, sl
 8004acc:	f7fb fb88 	bl	80001e0 <strlen>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	9305      	str	r3, [sp, #20]
 8004ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8004adc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ae0:	3307      	adds	r3, #7
 8004ae2:	f023 0307 	bic.w	r3, r3, #7
 8004ae6:	f103 0208 	add.w	r2, r3, #8
 8004aea:	f8c8 2000 	str.w	r2, [r8]
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004af6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004afa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004afe:	9307      	str	r3, [sp, #28]
 8004b00:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b04:	ee08 0a10 	vmov	s16, r0
 8004b08:	4b9f      	ldr	r3, [pc, #636]	; (8004d88 <_printf_float+0x2dc>)
 8004b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b12:	f7fc f813 	bl	8000b3c <__aeabi_dcmpun>
 8004b16:	bb88      	cbnz	r0, 8004b7c <_printf_float+0xd0>
 8004b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b1c:	4b9a      	ldr	r3, [pc, #616]	; (8004d88 <_printf_float+0x2dc>)
 8004b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b22:	f7fb ffed 	bl	8000b00 <__aeabi_dcmple>
 8004b26:	bb48      	cbnz	r0, 8004b7c <_printf_float+0xd0>
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	4649      	mov	r1, r9
 8004b30:	f7fb ffdc 	bl	8000aec <__aeabi_dcmplt>
 8004b34:	b110      	cbz	r0, 8004b3c <_printf_float+0x90>
 8004b36:	232d      	movs	r3, #45	; 0x2d
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	4b93      	ldr	r3, [pc, #588]	; (8004d8c <_printf_float+0x2e0>)
 8004b3e:	4894      	ldr	r0, [pc, #592]	; (8004d90 <_printf_float+0x2e4>)
 8004b40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004b44:	bf94      	ite	ls
 8004b46:	4698      	movls	r8, r3
 8004b48:	4680      	movhi	r8, r0
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	6123      	str	r3, [r4, #16]
 8004b4e:	9b05      	ldr	r3, [sp, #20]
 8004b50:	f023 0204 	bic.w	r2, r3, #4
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	f04f 0900 	mov.w	r9, #0
 8004b5a:	9700      	str	r7, [sp, #0]
 8004b5c:	4633      	mov	r3, r6
 8004b5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b60:	4621      	mov	r1, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	f000 f9d8 	bl	8004f18 <_printf_common>
 8004b68:	3001      	adds	r0, #1
 8004b6a:	f040 8090 	bne.w	8004c8e <_printf_float+0x1e2>
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b72:	b00d      	add	sp, #52	; 0x34
 8004b74:	ecbd 8b02 	vpop	{d8}
 8004b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	4640      	mov	r0, r8
 8004b82:	4649      	mov	r1, r9
 8004b84:	f7fb ffda 	bl	8000b3c <__aeabi_dcmpun>
 8004b88:	b140      	cbz	r0, 8004b9c <_printf_float+0xf0>
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bfbc      	itt	lt
 8004b90:	232d      	movlt	r3, #45	; 0x2d
 8004b92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b96:	487f      	ldr	r0, [pc, #508]	; (8004d94 <_printf_float+0x2e8>)
 8004b98:	4b7f      	ldr	r3, [pc, #508]	; (8004d98 <_printf_float+0x2ec>)
 8004b9a:	e7d1      	b.n	8004b40 <_printf_float+0x94>
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004ba2:	9206      	str	r2, [sp, #24]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	d13f      	bne.n	8004c28 <_printf_float+0x17c>
 8004ba8:	2306      	movs	r3, #6
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	9b05      	ldr	r3, [sp, #20]
 8004bae:	6861      	ldr	r1, [r4, #4]
 8004bb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	9303      	str	r3, [sp, #12]
 8004bb8:	ab0a      	add	r3, sp, #40	; 0x28
 8004bba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004bbe:	ab09      	add	r3, sp, #36	; 0x24
 8004bc0:	ec49 8b10 	vmov	d0, r8, r9
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	6022      	str	r2, [r4, #0]
 8004bc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f7ff fecd 	bl	800496c <__cvt>
 8004bd2:	9b06      	ldr	r3, [sp, #24]
 8004bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bd6:	2b47      	cmp	r3, #71	; 0x47
 8004bd8:	4680      	mov	r8, r0
 8004bda:	d108      	bne.n	8004bee <_printf_float+0x142>
 8004bdc:	1cc8      	adds	r0, r1, #3
 8004bde:	db02      	blt.n	8004be6 <_printf_float+0x13a>
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	4299      	cmp	r1, r3
 8004be4:	dd41      	ble.n	8004c6a <_printf_float+0x1be>
 8004be6:	f1ab 0b02 	sub.w	fp, fp, #2
 8004bea:	fa5f fb8b 	uxtb.w	fp, fp
 8004bee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bf2:	d820      	bhi.n	8004c36 <_printf_float+0x18a>
 8004bf4:	3901      	subs	r1, #1
 8004bf6:	465a      	mov	r2, fp
 8004bf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bfc:	9109      	str	r1, [sp, #36]	; 0x24
 8004bfe:	f7ff ff17 	bl	8004a30 <__exponent>
 8004c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c04:	1813      	adds	r3, r2, r0
 8004c06:	2a01      	cmp	r2, #1
 8004c08:	4681      	mov	r9, r0
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	dc02      	bgt.n	8004c14 <_printf_float+0x168>
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	07d2      	lsls	r2, r2, #31
 8004c12:	d501      	bpl.n	8004c18 <_printf_float+0x16c>
 8004c14:	3301      	adds	r3, #1
 8004c16:	6123      	str	r3, [r4, #16]
 8004c18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d09c      	beq.n	8004b5a <_printf_float+0xae>
 8004c20:	232d      	movs	r3, #45	; 0x2d
 8004c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c26:	e798      	b.n	8004b5a <_printf_float+0xae>
 8004c28:	9a06      	ldr	r2, [sp, #24]
 8004c2a:	2a47      	cmp	r2, #71	; 0x47
 8004c2c:	d1be      	bne.n	8004bac <_printf_float+0x100>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1bc      	bne.n	8004bac <_printf_float+0x100>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e7b9      	b.n	8004baa <_printf_float+0xfe>
 8004c36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004c3a:	d118      	bne.n	8004c6e <_printf_float+0x1c2>
 8004c3c:	2900      	cmp	r1, #0
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	dd0b      	ble.n	8004c5a <_printf_float+0x1ae>
 8004c42:	6121      	str	r1, [r4, #16]
 8004c44:	b913      	cbnz	r3, 8004c4c <_printf_float+0x1a0>
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	07d0      	lsls	r0, r2, #31
 8004c4a:	d502      	bpl.n	8004c52 <_printf_float+0x1a6>
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	440b      	add	r3, r1
 8004c50:	6123      	str	r3, [r4, #16]
 8004c52:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c54:	f04f 0900 	mov.w	r9, #0
 8004c58:	e7de      	b.n	8004c18 <_printf_float+0x16c>
 8004c5a:	b913      	cbnz	r3, 8004c62 <_printf_float+0x1b6>
 8004c5c:	6822      	ldr	r2, [r4, #0]
 8004c5e:	07d2      	lsls	r2, r2, #31
 8004c60:	d501      	bpl.n	8004c66 <_printf_float+0x1ba>
 8004c62:	3302      	adds	r3, #2
 8004c64:	e7f4      	b.n	8004c50 <_printf_float+0x1a4>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e7f2      	b.n	8004c50 <_printf_float+0x1a4>
 8004c6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c70:	4299      	cmp	r1, r3
 8004c72:	db05      	blt.n	8004c80 <_printf_float+0x1d4>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	6121      	str	r1, [r4, #16]
 8004c78:	07d8      	lsls	r0, r3, #31
 8004c7a:	d5ea      	bpl.n	8004c52 <_printf_float+0x1a6>
 8004c7c:	1c4b      	adds	r3, r1, #1
 8004c7e:	e7e7      	b.n	8004c50 <_printf_float+0x1a4>
 8004c80:	2900      	cmp	r1, #0
 8004c82:	bfd4      	ite	le
 8004c84:	f1c1 0202 	rsble	r2, r1, #2
 8004c88:	2201      	movgt	r2, #1
 8004c8a:	4413      	add	r3, r2
 8004c8c:	e7e0      	b.n	8004c50 <_printf_float+0x1a4>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	055a      	lsls	r2, r3, #21
 8004c92:	d407      	bmi.n	8004ca4 <_printf_float+0x1f8>
 8004c94:	6923      	ldr	r3, [r4, #16]
 8004c96:	4642      	mov	r2, r8
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d12c      	bne.n	8004cfc <_printf_float+0x250>
 8004ca2:	e764      	b.n	8004b6e <_printf_float+0xc2>
 8004ca4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ca8:	f240 80e0 	bls.w	8004e6c <_printf_float+0x3c0>
 8004cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f7fb ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d034      	beq.n	8004d26 <_printf_float+0x27a>
 8004cbc:	4a37      	ldr	r2, [pc, #220]	; (8004d9c <_printf_float+0x2f0>)
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f43f af51 	beq.w	8004b6e <_printf_float+0xc2>
 8004ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	db02      	blt.n	8004cda <_printf_float+0x22e>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	07d8      	lsls	r0, r3, #31
 8004cd8:	d510      	bpl.n	8004cfc <_printf_float+0x250>
 8004cda:	ee18 3a10 	vmov	r3, s16
 8004cde:	4652      	mov	r2, sl
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f af41 	beq.w	8004b6e <_printf_float+0xc2>
 8004cec:	f04f 0800 	mov.w	r8, #0
 8004cf0:	f104 091a 	add.w	r9, r4, #26
 8004cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4543      	cmp	r3, r8
 8004cfa:	dc09      	bgt.n	8004d10 <_printf_float+0x264>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	079b      	lsls	r3, r3, #30
 8004d00:	f100 8105 	bmi.w	8004f0e <_printf_float+0x462>
 8004d04:	68e0      	ldr	r0, [r4, #12]
 8004d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d08:	4298      	cmp	r0, r3
 8004d0a:	bfb8      	it	lt
 8004d0c:	4618      	movlt	r0, r3
 8004d0e:	e730      	b.n	8004b72 <_printf_float+0xc6>
 8004d10:	2301      	movs	r3, #1
 8004d12:	464a      	mov	r2, r9
 8004d14:	4631      	mov	r1, r6
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b8      	blx	r7
 8004d1a:	3001      	adds	r0, #1
 8004d1c:	f43f af27 	beq.w	8004b6e <_printf_float+0xc2>
 8004d20:	f108 0801 	add.w	r8, r8, #1
 8004d24:	e7e6      	b.n	8004cf4 <_printf_float+0x248>
 8004d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	dc39      	bgt.n	8004da0 <_printf_float+0x2f4>
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <_printf_float+0x2f0>)
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4631      	mov	r1, r6
 8004d32:	4628      	mov	r0, r5
 8004d34:	47b8      	blx	r7
 8004d36:	3001      	adds	r0, #1
 8004d38:	f43f af19 	beq.w	8004b6e <_printf_float+0xc2>
 8004d3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d102      	bne.n	8004d4a <_printf_float+0x29e>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	07d9      	lsls	r1, r3, #31
 8004d48:	d5d8      	bpl.n	8004cfc <_printf_float+0x250>
 8004d4a:	ee18 3a10 	vmov	r3, s16
 8004d4e:	4652      	mov	r2, sl
 8004d50:	4631      	mov	r1, r6
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b8      	blx	r7
 8004d56:	3001      	adds	r0, #1
 8004d58:	f43f af09 	beq.w	8004b6e <_printf_float+0xc2>
 8004d5c:	f04f 0900 	mov.w	r9, #0
 8004d60:	f104 0a1a 	add.w	sl, r4, #26
 8004d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d66:	425b      	negs	r3, r3
 8004d68:	454b      	cmp	r3, r9
 8004d6a:	dc01      	bgt.n	8004d70 <_printf_float+0x2c4>
 8004d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d6e:	e792      	b.n	8004c96 <_printf_float+0x1ea>
 8004d70:	2301      	movs	r3, #1
 8004d72:	4652      	mov	r2, sl
 8004d74:	4631      	mov	r1, r6
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	f43f aef7 	beq.w	8004b6e <_printf_float+0xc2>
 8004d80:	f109 0901 	add.w	r9, r9, #1
 8004d84:	e7ee      	b.n	8004d64 <_printf_float+0x2b8>
 8004d86:	bf00      	nop
 8004d88:	7fefffff 	.word	0x7fefffff
 8004d8c:	08009388 	.word	0x08009388
 8004d90:	0800938c 	.word	0x0800938c
 8004d94:	08009394 	.word	0x08009394
 8004d98:	08009390 	.word	0x08009390
 8004d9c:	08009398 	.word	0x08009398
 8004da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004da2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004da4:	429a      	cmp	r2, r3
 8004da6:	bfa8      	it	ge
 8004da8:	461a      	movge	r2, r3
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	4691      	mov	r9, r2
 8004dae:	dc37      	bgt.n	8004e20 <_printf_float+0x374>
 8004db0:	f04f 0b00 	mov.w	fp, #0
 8004db4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004db8:	f104 021a 	add.w	r2, r4, #26
 8004dbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004dbe:	9305      	str	r3, [sp, #20]
 8004dc0:	eba3 0309 	sub.w	r3, r3, r9
 8004dc4:	455b      	cmp	r3, fp
 8004dc6:	dc33      	bgt.n	8004e30 <_printf_float+0x384>
 8004dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	db3b      	blt.n	8004e48 <_printf_float+0x39c>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	07da      	lsls	r2, r3, #31
 8004dd4:	d438      	bmi.n	8004e48 <_printf_float+0x39c>
 8004dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd8:	9a05      	ldr	r2, [sp, #20]
 8004dda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ddc:	1a9a      	subs	r2, r3, r2
 8004dde:	eba3 0901 	sub.w	r9, r3, r1
 8004de2:	4591      	cmp	r9, r2
 8004de4:	bfa8      	it	ge
 8004de6:	4691      	movge	r9, r2
 8004de8:	f1b9 0f00 	cmp.w	r9, #0
 8004dec:	dc35      	bgt.n	8004e5a <_printf_float+0x3ae>
 8004dee:	f04f 0800 	mov.w	r8, #0
 8004df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004df6:	f104 0a1a 	add.w	sl, r4, #26
 8004dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	eba3 0309 	sub.w	r3, r3, r9
 8004e04:	4543      	cmp	r3, r8
 8004e06:	f77f af79 	ble.w	8004cfc <_printf_float+0x250>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f aeaa 	beq.w	8004b6e <_printf_float+0xc2>
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	e7ec      	b.n	8004dfa <_printf_float+0x34e>
 8004e20:	4613      	mov	r3, r2
 8004e22:	4631      	mov	r1, r6
 8004e24:	4642      	mov	r2, r8
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d1c0      	bne.n	8004db0 <_printf_float+0x304>
 8004e2e:	e69e      	b.n	8004b6e <_printf_float+0xc2>
 8004e30:	2301      	movs	r3, #1
 8004e32:	4631      	mov	r1, r6
 8004e34:	4628      	mov	r0, r5
 8004e36:	9205      	str	r2, [sp, #20]
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f ae97 	beq.w	8004b6e <_printf_float+0xc2>
 8004e40:	9a05      	ldr	r2, [sp, #20]
 8004e42:	f10b 0b01 	add.w	fp, fp, #1
 8004e46:	e7b9      	b.n	8004dbc <_printf_float+0x310>
 8004e48:	ee18 3a10 	vmov	r3, s16
 8004e4c:	4652      	mov	r2, sl
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	d1be      	bne.n	8004dd6 <_printf_float+0x32a>
 8004e58:	e689      	b.n	8004b6e <_printf_float+0xc2>
 8004e5a:	9a05      	ldr	r2, [sp, #20]
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	4442      	add	r2, r8
 8004e60:	4631      	mov	r1, r6
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b8      	blx	r7
 8004e66:	3001      	adds	r0, #1
 8004e68:	d1c1      	bne.n	8004dee <_printf_float+0x342>
 8004e6a:	e680      	b.n	8004b6e <_printf_float+0xc2>
 8004e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e6e:	2a01      	cmp	r2, #1
 8004e70:	dc01      	bgt.n	8004e76 <_printf_float+0x3ca>
 8004e72:	07db      	lsls	r3, r3, #31
 8004e74:	d538      	bpl.n	8004ee8 <_printf_float+0x43c>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4642      	mov	r2, r8
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f ae74 	beq.w	8004b6e <_printf_float+0xc2>
 8004e86:	ee18 3a10 	vmov	r3, s16
 8004e8a:	4652      	mov	r2, sl
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b8      	blx	r7
 8004e92:	3001      	adds	r0, #1
 8004e94:	f43f ae6b 	beq.w	8004b6e <_printf_float+0xc2>
 8004e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f7fb fe1a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ea4:	b9d8      	cbnz	r0, 8004ede <_printf_float+0x432>
 8004ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea8:	f108 0201 	add.w	r2, r8, #1
 8004eac:	3b01      	subs	r3, #1
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b8      	blx	r7
 8004eb4:	3001      	adds	r0, #1
 8004eb6:	d10e      	bne.n	8004ed6 <_printf_float+0x42a>
 8004eb8:	e659      	b.n	8004b6e <_printf_float+0xc2>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4652      	mov	r2, sl
 8004ebe:	4631      	mov	r1, r6
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	47b8      	blx	r7
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	f43f ae52 	beq.w	8004b6e <_printf_float+0xc2>
 8004eca:	f108 0801 	add.w	r8, r8, #1
 8004ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4543      	cmp	r3, r8
 8004ed4:	dcf1      	bgt.n	8004eba <_printf_float+0x40e>
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004edc:	e6dc      	b.n	8004c98 <_printf_float+0x1ec>
 8004ede:	f04f 0800 	mov.w	r8, #0
 8004ee2:	f104 0a1a 	add.w	sl, r4, #26
 8004ee6:	e7f2      	b.n	8004ece <_printf_float+0x422>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	4642      	mov	r2, r8
 8004eec:	e7df      	b.n	8004eae <_printf_float+0x402>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	464a      	mov	r2, r9
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	f43f ae38 	beq.w	8004b6e <_printf_float+0xc2>
 8004efe:	f108 0801 	add.w	r8, r8, #1
 8004f02:	68e3      	ldr	r3, [r4, #12]
 8004f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f06:	1a5b      	subs	r3, r3, r1
 8004f08:	4543      	cmp	r3, r8
 8004f0a:	dcf0      	bgt.n	8004eee <_printf_float+0x442>
 8004f0c:	e6fa      	b.n	8004d04 <_printf_float+0x258>
 8004f0e:	f04f 0800 	mov.w	r8, #0
 8004f12:	f104 0919 	add.w	r9, r4, #25
 8004f16:	e7f4      	b.n	8004f02 <_printf_float+0x456>

08004f18 <_printf_common>:
 8004f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	4699      	mov	r9, r3
 8004f20:	688a      	ldr	r2, [r1, #8]
 8004f22:	690b      	ldr	r3, [r1, #16]
 8004f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bfb8      	it	lt
 8004f2c:	4613      	movlt	r3, r2
 8004f2e:	6033      	str	r3, [r6, #0]
 8004f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f34:	4607      	mov	r7, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	b10a      	cbz	r2, 8004f3e <_printf_common+0x26>
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	6033      	str	r3, [r6, #0]
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	0699      	lsls	r1, r3, #26
 8004f42:	bf42      	ittt	mi
 8004f44:	6833      	ldrmi	r3, [r6, #0]
 8004f46:	3302      	addmi	r3, #2
 8004f48:	6033      	strmi	r3, [r6, #0]
 8004f4a:	6825      	ldr	r5, [r4, #0]
 8004f4c:	f015 0506 	ands.w	r5, r5, #6
 8004f50:	d106      	bne.n	8004f60 <_printf_common+0x48>
 8004f52:	f104 0a19 	add.w	sl, r4, #25
 8004f56:	68e3      	ldr	r3, [r4, #12]
 8004f58:	6832      	ldr	r2, [r6, #0]
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	42ab      	cmp	r3, r5
 8004f5e:	dc26      	bgt.n	8004fae <_printf_common+0x96>
 8004f60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f64:	1e13      	subs	r3, r2, #0
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	bf18      	it	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	0692      	lsls	r2, r2, #26
 8004f6e:	d42b      	bmi.n	8004fc8 <_printf_common+0xb0>
 8004f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f74:	4649      	mov	r1, r9
 8004f76:	4638      	mov	r0, r7
 8004f78:	47c0      	blx	r8
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d01e      	beq.n	8004fbc <_printf_common+0xa4>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	68e5      	ldr	r5, [r4, #12]
 8004f82:	6832      	ldr	r2, [r6, #0]
 8004f84:	f003 0306 	and.w	r3, r3, #6
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	bf08      	it	eq
 8004f8c:	1aad      	subeq	r5, r5, r2
 8004f8e:	68a3      	ldr	r3, [r4, #8]
 8004f90:	6922      	ldr	r2, [r4, #16]
 8004f92:	bf0c      	ite	eq
 8004f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f98:	2500      	movne	r5, #0
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	bfc4      	itt	gt
 8004f9e:	1a9b      	subgt	r3, r3, r2
 8004fa0:	18ed      	addgt	r5, r5, r3
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	341a      	adds	r4, #26
 8004fa6:	42b5      	cmp	r5, r6
 8004fa8:	d11a      	bne.n	8004fe0 <_printf_common+0xc8>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e008      	b.n	8004fc0 <_printf_common+0xa8>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	47c0      	blx	r8
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d103      	bne.n	8004fc4 <_printf_common+0xac>
 8004fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc4:	3501      	adds	r5, #1
 8004fc6:	e7c6      	b.n	8004f56 <_printf_common+0x3e>
 8004fc8:	18e1      	adds	r1, r4, r3
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	2030      	movs	r0, #48	; 0x30
 8004fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fd2:	4422      	add	r2, r4
 8004fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fdc:	3302      	adds	r3, #2
 8004fde:	e7c7      	b.n	8004f70 <_printf_common+0x58>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	47c0      	blx	r8
 8004fea:	3001      	adds	r0, #1
 8004fec:	d0e6      	beq.n	8004fbc <_printf_common+0xa4>
 8004fee:	3601      	adds	r6, #1
 8004ff0:	e7d9      	b.n	8004fa6 <_printf_common+0x8e>
	...

08004ff4 <_printf_i>:
 8004ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff8:	7e0f      	ldrb	r7, [r1, #24]
 8004ffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ffc:	2f78      	cmp	r7, #120	; 0x78
 8004ffe:	4691      	mov	r9, r2
 8005000:	4680      	mov	r8, r0
 8005002:	460c      	mov	r4, r1
 8005004:	469a      	mov	sl, r3
 8005006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800500a:	d807      	bhi.n	800501c <_printf_i+0x28>
 800500c:	2f62      	cmp	r7, #98	; 0x62
 800500e:	d80a      	bhi.n	8005026 <_printf_i+0x32>
 8005010:	2f00      	cmp	r7, #0
 8005012:	f000 80d8 	beq.w	80051c6 <_printf_i+0x1d2>
 8005016:	2f58      	cmp	r7, #88	; 0x58
 8005018:	f000 80a3 	beq.w	8005162 <_printf_i+0x16e>
 800501c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005024:	e03a      	b.n	800509c <_printf_i+0xa8>
 8005026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800502a:	2b15      	cmp	r3, #21
 800502c:	d8f6      	bhi.n	800501c <_printf_i+0x28>
 800502e:	a101      	add	r1, pc, #4	; (adr r1, 8005034 <_printf_i+0x40>)
 8005030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005034:	0800508d 	.word	0x0800508d
 8005038:	080050a1 	.word	0x080050a1
 800503c:	0800501d 	.word	0x0800501d
 8005040:	0800501d 	.word	0x0800501d
 8005044:	0800501d 	.word	0x0800501d
 8005048:	0800501d 	.word	0x0800501d
 800504c:	080050a1 	.word	0x080050a1
 8005050:	0800501d 	.word	0x0800501d
 8005054:	0800501d 	.word	0x0800501d
 8005058:	0800501d 	.word	0x0800501d
 800505c:	0800501d 	.word	0x0800501d
 8005060:	080051ad 	.word	0x080051ad
 8005064:	080050d1 	.word	0x080050d1
 8005068:	0800518f 	.word	0x0800518f
 800506c:	0800501d 	.word	0x0800501d
 8005070:	0800501d 	.word	0x0800501d
 8005074:	080051cf 	.word	0x080051cf
 8005078:	0800501d 	.word	0x0800501d
 800507c:	080050d1 	.word	0x080050d1
 8005080:	0800501d 	.word	0x0800501d
 8005084:	0800501d 	.word	0x0800501d
 8005088:	08005197 	.word	0x08005197
 800508c:	682b      	ldr	r3, [r5, #0]
 800508e:	1d1a      	adds	r2, r3, #4
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	602a      	str	r2, [r5, #0]
 8005094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800509c:	2301      	movs	r3, #1
 800509e:	e0a3      	b.n	80051e8 <_printf_i+0x1f4>
 80050a0:	6820      	ldr	r0, [r4, #0]
 80050a2:	6829      	ldr	r1, [r5, #0]
 80050a4:	0606      	lsls	r6, r0, #24
 80050a6:	f101 0304 	add.w	r3, r1, #4
 80050aa:	d50a      	bpl.n	80050c2 <_printf_i+0xce>
 80050ac:	680e      	ldr	r6, [r1, #0]
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	da03      	bge.n	80050bc <_printf_i+0xc8>
 80050b4:	232d      	movs	r3, #45	; 0x2d
 80050b6:	4276      	negs	r6, r6
 80050b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050bc:	485e      	ldr	r0, [pc, #376]	; (8005238 <_printf_i+0x244>)
 80050be:	230a      	movs	r3, #10
 80050c0:	e019      	b.n	80050f6 <_printf_i+0x102>
 80050c2:	680e      	ldr	r6, [r1, #0]
 80050c4:	602b      	str	r3, [r5, #0]
 80050c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050ca:	bf18      	it	ne
 80050cc:	b236      	sxthne	r6, r6
 80050ce:	e7ef      	b.n	80050b0 <_printf_i+0xbc>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	6820      	ldr	r0, [r4, #0]
 80050d4:	1d19      	adds	r1, r3, #4
 80050d6:	6029      	str	r1, [r5, #0]
 80050d8:	0601      	lsls	r1, r0, #24
 80050da:	d501      	bpl.n	80050e0 <_printf_i+0xec>
 80050dc:	681e      	ldr	r6, [r3, #0]
 80050de:	e002      	b.n	80050e6 <_printf_i+0xf2>
 80050e0:	0646      	lsls	r6, r0, #25
 80050e2:	d5fb      	bpl.n	80050dc <_printf_i+0xe8>
 80050e4:	881e      	ldrh	r6, [r3, #0]
 80050e6:	4854      	ldr	r0, [pc, #336]	; (8005238 <_printf_i+0x244>)
 80050e8:	2f6f      	cmp	r7, #111	; 0x6f
 80050ea:	bf0c      	ite	eq
 80050ec:	2308      	moveq	r3, #8
 80050ee:	230a      	movne	r3, #10
 80050f0:	2100      	movs	r1, #0
 80050f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050f6:	6865      	ldr	r5, [r4, #4]
 80050f8:	60a5      	str	r5, [r4, #8]
 80050fa:	2d00      	cmp	r5, #0
 80050fc:	bfa2      	ittt	ge
 80050fe:	6821      	ldrge	r1, [r4, #0]
 8005100:	f021 0104 	bicge.w	r1, r1, #4
 8005104:	6021      	strge	r1, [r4, #0]
 8005106:	b90e      	cbnz	r6, 800510c <_printf_i+0x118>
 8005108:	2d00      	cmp	r5, #0
 800510a:	d04d      	beq.n	80051a8 <_printf_i+0x1b4>
 800510c:	4615      	mov	r5, r2
 800510e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005112:	fb03 6711 	mls	r7, r3, r1, r6
 8005116:	5dc7      	ldrb	r7, [r0, r7]
 8005118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800511c:	4637      	mov	r7, r6
 800511e:	42bb      	cmp	r3, r7
 8005120:	460e      	mov	r6, r1
 8005122:	d9f4      	bls.n	800510e <_printf_i+0x11a>
 8005124:	2b08      	cmp	r3, #8
 8005126:	d10b      	bne.n	8005140 <_printf_i+0x14c>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	07de      	lsls	r6, r3, #31
 800512c:	d508      	bpl.n	8005140 <_printf_i+0x14c>
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	6861      	ldr	r1, [r4, #4]
 8005132:	4299      	cmp	r1, r3
 8005134:	bfde      	ittt	le
 8005136:	2330      	movle	r3, #48	; 0x30
 8005138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800513c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005140:	1b52      	subs	r2, r2, r5
 8005142:	6122      	str	r2, [r4, #16]
 8005144:	f8cd a000 	str.w	sl, [sp]
 8005148:	464b      	mov	r3, r9
 800514a:	aa03      	add	r2, sp, #12
 800514c:	4621      	mov	r1, r4
 800514e:	4640      	mov	r0, r8
 8005150:	f7ff fee2 	bl	8004f18 <_printf_common>
 8005154:	3001      	adds	r0, #1
 8005156:	d14c      	bne.n	80051f2 <_printf_i+0x1fe>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	b004      	add	sp, #16
 800515e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005162:	4835      	ldr	r0, [pc, #212]	; (8005238 <_printf_i+0x244>)
 8005164:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005168:	6829      	ldr	r1, [r5, #0]
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005170:	6029      	str	r1, [r5, #0]
 8005172:	061d      	lsls	r5, r3, #24
 8005174:	d514      	bpl.n	80051a0 <_printf_i+0x1ac>
 8005176:	07df      	lsls	r7, r3, #31
 8005178:	bf44      	itt	mi
 800517a:	f043 0320 	orrmi.w	r3, r3, #32
 800517e:	6023      	strmi	r3, [r4, #0]
 8005180:	b91e      	cbnz	r6, 800518a <_printf_i+0x196>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	f023 0320 	bic.w	r3, r3, #32
 8005188:	6023      	str	r3, [r4, #0]
 800518a:	2310      	movs	r3, #16
 800518c:	e7b0      	b.n	80050f0 <_printf_i+0xfc>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	f043 0320 	orr.w	r3, r3, #32
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	2378      	movs	r3, #120	; 0x78
 8005198:	4828      	ldr	r0, [pc, #160]	; (800523c <_printf_i+0x248>)
 800519a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800519e:	e7e3      	b.n	8005168 <_printf_i+0x174>
 80051a0:	0659      	lsls	r1, r3, #25
 80051a2:	bf48      	it	mi
 80051a4:	b2b6      	uxthmi	r6, r6
 80051a6:	e7e6      	b.n	8005176 <_printf_i+0x182>
 80051a8:	4615      	mov	r5, r2
 80051aa:	e7bb      	b.n	8005124 <_printf_i+0x130>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	6826      	ldr	r6, [r4, #0]
 80051b0:	6961      	ldr	r1, [r4, #20]
 80051b2:	1d18      	adds	r0, r3, #4
 80051b4:	6028      	str	r0, [r5, #0]
 80051b6:	0635      	lsls	r5, r6, #24
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	d501      	bpl.n	80051c0 <_printf_i+0x1cc>
 80051bc:	6019      	str	r1, [r3, #0]
 80051be:	e002      	b.n	80051c6 <_printf_i+0x1d2>
 80051c0:	0670      	lsls	r0, r6, #25
 80051c2:	d5fb      	bpl.n	80051bc <_printf_i+0x1c8>
 80051c4:	8019      	strh	r1, [r3, #0]
 80051c6:	2300      	movs	r3, #0
 80051c8:	6123      	str	r3, [r4, #16]
 80051ca:	4615      	mov	r5, r2
 80051cc:	e7ba      	b.n	8005144 <_printf_i+0x150>
 80051ce:	682b      	ldr	r3, [r5, #0]
 80051d0:	1d1a      	adds	r2, r3, #4
 80051d2:	602a      	str	r2, [r5, #0]
 80051d4:	681d      	ldr	r5, [r3, #0]
 80051d6:	6862      	ldr	r2, [r4, #4]
 80051d8:	2100      	movs	r1, #0
 80051da:	4628      	mov	r0, r5
 80051dc:	f7fb f808 	bl	80001f0 <memchr>
 80051e0:	b108      	cbz	r0, 80051e6 <_printf_i+0x1f2>
 80051e2:	1b40      	subs	r0, r0, r5
 80051e4:	6060      	str	r0, [r4, #4]
 80051e6:	6863      	ldr	r3, [r4, #4]
 80051e8:	6123      	str	r3, [r4, #16]
 80051ea:	2300      	movs	r3, #0
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f0:	e7a8      	b.n	8005144 <_printf_i+0x150>
 80051f2:	6923      	ldr	r3, [r4, #16]
 80051f4:	462a      	mov	r2, r5
 80051f6:	4649      	mov	r1, r9
 80051f8:	4640      	mov	r0, r8
 80051fa:	47d0      	blx	sl
 80051fc:	3001      	adds	r0, #1
 80051fe:	d0ab      	beq.n	8005158 <_printf_i+0x164>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	079b      	lsls	r3, r3, #30
 8005204:	d413      	bmi.n	800522e <_printf_i+0x23a>
 8005206:	68e0      	ldr	r0, [r4, #12]
 8005208:	9b03      	ldr	r3, [sp, #12]
 800520a:	4298      	cmp	r0, r3
 800520c:	bfb8      	it	lt
 800520e:	4618      	movlt	r0, r3
 8005210:	e7a4      	b.n	800515c <_printf_i+0x168>
 8005212:	2301      	movs	r3, #1
 8005214:	4632      	mov	r2, r6
 8005216:	4649      	mov	r1, r9
 8005218:	4640      	mov	r0, r8
 800521a:	47d0      	blx	sl
 800521c:	3001      	adds	r0, #1
 800521e:	d09b      	beq.n	8005158 <_printf_i+0x164>
 8005220:	3501      	adds	r5, #1
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	9903      	ldr	r1, [sp, #12]
 8005226:	1a5b      	subs	r3, r3, r1
 8005228:	42ab      	cmp	r3, r5
 800522a:	dcf2      	bgt.n	8005212 <_printf_i+0x21e>
 800522c:	e7eb      	b.n	8005206 <_printf_i+0x212>
 800522e:	2500      	movs	r5, #0
 8005230:	f104 0619 	add.w	r6, r4, #25
 8005234:	e7f5      	b.n	8005222 <_printf_i+0x22e>
 8005236:	bf00      	nop
 8005238:	0800939a 	.word	0x0800939a
 800523c:	080093ab 	.word	0x080093ab

08005240 <_scanf_float>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	b087      	sub	sp, #28
 8005246:	4617      	mov	r7, r2
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	688b      	ldr	r3, [r1, #8]
 800524c:	1e5a      	subs	r2, r3, #1
 800524e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005252:	bf83      	ittte	hi
 8005254:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005258:	195b      	addhi	r3, r3, r5
 800525a:	9302      	strhi	r3, [sp, #8]
 800525c:	2300      	movls	r3, #0
 800525e:	bf86      	itte	hi
 8005260:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005264:	608b      	strhi	r3, [r1, #8]
 8005266:	9302      	strls	r3, [sp, #8]
 8005268:	680b      	ldr	r3, [r1, #0]
 800526a:	468b      	mov	fp, r1
 800526c:	2500      	movs	r5, #0
 800526e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005272:	f84b 3b1c 	str.w	r3, [fp], #28
 8005276:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800527a:	4680      	mov	r8, r0
 800527c:	460c      	mov	r4, r1
 800527e:	465e      	mov	r6, fp
 8005280:	46aa      	mov	sl, r5
 8005282:	46a9      	mov	r9, r5
 8005284:	9501      	str	r5, [sp, #4]
 8005286:	68a2      	ldr	r2, [r4, #8]
 8005288:	b152      	cbz	r2, 80052a0 <_scanf_float+0x60>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b4e      	cmp	r3, #78	; 0x4e
 8005290:	d864      	bhi.n	800535c <_scanf_float+0x11c>
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d83c      	bhi.n	8005310 <_scanf_float+0xd0>
 8005296:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800529a:	b2c8      	uxtb	r0, r1
 800529c:	280e      	cmp	r0, #14
 800529e:	d93a      	bls.n	8005316 <_scanf_float+0xd6>
 80052a0:	f1b9 0f00 	cmp.w	r9, #0
 80052a4:	d003      	beq.n	80052ae <_scanf_float+0x6e>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052b2:	f1ba 0f01 	cmp.w	sl, #1
 80052b6:	f200 8113 	bhi.w	80054e0 <_scanf_float+0x2a0>
 80052ba:	455e      	cmp	r6, fp
 80052bc:	f200 8105 	bhi.w	80054ca <_scanf_float+0x28a>
 80052c0:	2501      	movs	r5, #1
 80052c2:	4628      	mov	r0, r5
 80052c4:	b007      	add	sp, #28
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80052ce:	2a0d      	cmp	r2, #13
 80052d0:	d8e6      	bhi.n	80052a0 <_scanf_float+0x60>
 80052d2:	a101      	add	r1, pc, #4	; (adr r1, 80052d8 <_scanf_float+0x98>)
 80052d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80052d8:	08005417 	.word	0x08005417
 80052dc:	080052a1 	.word	0x080052a1
 80052e0:	080052a1 	.word	0x080052a1
 80052e4:	080052a1 	.word	0x080052a1
 80052e8:	08005477 	.word	0x08005477
 80052ec:	0800544f 	.word	0x0800544f
 80052f0:	080052a1 	.word	0x080052a1
 80052f4:	080052a1 	.word	0x080052a1
 80052f8:	08005425 	.word	0x08005425
 80052fc:	080052a1 	.word	0x080052a1
 8005300:	080052a1 	.word	0x080052a1
 8005304:	080052a1 	.word	0x080052a1
 8005308:	080052a1 	.word	0x080052a1
 800530c:	080053dd 	.word	0x080053dd
 8005310:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005314:	e7db      	b.n	80052ce <_scanf_float+0x8e>
 8005316:	290e      	cmp	r1, #14
 8005318:	d8c2      	bhi.n	80052a0 <_scanf_float+0x60>
 800531a:	a001      	add	r0, pc, #4	; (adr r0, 8005320 <_scanf_float+0xe0>)
 800531c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005320:	080053cf 	.word	0x080053cf
 8005324:	080052a1 	.word	0x080052a1
 8005328:	080053cf 	.word	0x080053cf
 800532c:	08005463 	.word	0x08005463
 8005330:	080052a1 	.word	0x080052a1
 8005334:	0800537d 	.word	0x0800537d
 8005338:	080053b9 	.word	0x080053b9
 800533c:	080053b9 	.word	0x080053b9
 8005340:	080053b9 	.word	0x080053b9
 8005344:	080053b9 	.word	0x080053b9
 8005348:	080053b9 	.word	0x080053b9
 800534c:	080053b9 	.word	0x080053b9
 8005350:	080053b9 	.word	0x080053b9
 8005354:	080053b9 	.word	0x080053b9
 8005358:	080053b9 	.word	0x080053b9
 800535c:	2b6e      	cmp	r3, #110	; 0x6e
 800535e:	d809      	bhi.n	8005374 <_scanf_float+0x134>
 8005360:	2b60      	cmp	r3, #96	; 0x60
 8005362:	d8b2      	bhi.n	80052ca <_scanf_float+0x8a>
 8005364:	2b54      	cmp	r3, #84	; 0x54
 8005366:	d077      	beq.n	8005458 <_scanf_float+0x218>
 8005368:	2b59      	cmp	r3, #89	; 0x59
 800536a:	d199      	bne.n	80052a0 <_scanf_float+0x60>
 800536c:	2d07      	cmp	r5, #7
 800536e:	d197      	bne.n	80052a0 <_scanf_float+0x60>
 8005370:	2508      	movs	r5, #8
 8005372:	e029      	b.n	80053c8 <_scanf_float+0x188>
 8005374:	2b74      	cmp	r3, #116	; 0x74
 8005376:	d06f      	beq.n	8005458 <_scanf_float+0x218>
 8005378:	2b79      	cmp	r3, #121	; 0x79
 800537a:	e7f6      	b.n	800536a <_scanf_float+0x12a>
 800537c:	6821      	ldr	r1, [r4, #0]
 800537e:	05c8      	lsls	r0, r1, #23
 8005380:	d51a      	bpl.n	80053b8 <_scanf_float+0x178>
 8005382:	9b02      	ldr	r3, [sp, #8]
 8005384:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005388:	6021      	str	r1, [r4, #0]
 800538a:	f109 0901 	add.w	r9, r9, #1
 800538e:	b11b      	cbz	r3, 8005398 <_scanf_float+0x158>
 8005390:	3b01      	subs	r3, #1
 8005392:	3201      	adds	r2, #1
 8005394:	9302      	str	r3, [sp, #8]
 8005396:	60a2      	str	r2, [r4, #8]
 8005398:	68a3      	ldr	r3, [r4, #8]
 800539a:	3b01      	subs	r3, #1
 800539c:	60a3      	str	r3, [r4, #8]
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	3301      	adds	r3, #1
 80053a2:	6123      	str	r3, [r4, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	607b      	str	r3, [r7, #4]
 80053ac:	f340 8084 	ble.w	80054b8 <_scanf_float+0x278>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	603b      	str	r3, [r7, #0]
 80053b6:	e766      	b.n	8005286 <_scanf_float+0x46>
 80053b8:	eb1a 0f05 	cmn.w	sl, r5
 80053bc:	f47f af70 	bne.w	80052a0 <_scanf_float+0x60>
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80053c6:	6022      	str	r2, [r4, #0]
 80053c8:	f806 3b01 	strb.w	r3, [r6], #1
 80053cc:	e7e4      	b.n	8005398 <_scanf_float+0x158>
 80053ce:	6822      	ldr	r2, [r4, #0]
 80053d0:	0610      	lsls	r0, r2, #24
 80053d2:	f57f af65 	bpl.w	80052a0 <_scanf_float+0x60>
 80053d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053da:	e7f4      	b.n	80053c6 <_scanf_float+0x186>
 80053dc:	f1ba 0f00 	cmp.w	sl, #0
 80053e0:	d10e      	bne.n	8005400 <_scanf_float+0x1c0>
 80053e2:	f1b9 0f00 	cmp.w	r9, #0
 80053e6:	d10e      	bne.n	8005406 <_scanf_float+0x1c6>
 80053e8:	6822      	ldr	r2, [r4, #0]
 80053ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80053ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80053f2:	d108      	bne.n	8005406 <_scanf_float+0x1c6>
 80053f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053f8:	6022      	str	r2, [r4, #0]
 80053fa:	f04f 0a01 	mov.w	sl, #1
 80053fe:	e7e3      	b.n	80053c8 <_scanf_float+0x188>
 8005400:	f1ba 0f02 	cmp.w	sl, #2
 8005404:	d055      	beq.n	80054b2 <_scanf_float+0x272>
 8005406:	2d01      	cmp	r5, #1
 8005408:	d002      	beq.n	8005410 <_scanf_float+0x1d0>
 800540a:	2d04      	cmp	r5, #4
 800540c:	f47f af48 	bne.w	80052a0 <_scanf_float+0x60>
 8005410:	3501      	adds	r5, #1
 8005412:	b2ed      	uxtb	r5, r5
 8005414:	e7d8      	b.n	80053c8 <_scanf_float+0x188>
 8005416:	f1ba 0f01 	cmp.w	sl, #1
 800541a:	f47f af41 	bne.w	80052a0 <_scanf_float+0x60>
 800541e:	f04f 0a02 	mov.w	sl, #2
 8005422:	e7d1      	b.n	80053c8 <_scanf_float+0x188>
 8005424:	b97d      	cbnz	r5, 8005446 <_scanf_float+0x206>
 8005426:	f1b9 0f00 	cmp.w	r9, #0
 800542a:	f47f af3c 	bne.w	80052a6 <_scanf_float+0x66>
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005434:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005438:	f47f af39 	bne.w	80052ae <_scanf_float+0x6e>
 800543c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005440:	6022      	str	r2, [r4, #0]
 8005442:	2501      	movs	r5, #1
 8005444:	e7c0      	b.n	80053c8 <_scanf_float+0x188>
 8005446:	2d03      	cmp	r5, #3
 8005448:	d0e2      	beq.n	8005410 <_scanf_float+0x1d0>
 800544a:	2d05      	cmp	r5, #5
 800544c:	e7de      	b.n	800540c <_scanf_float+0x1cc>
 800544e:	2d02      	cmp	r5, #2
 8005450:	f47f af26 	bne.w	80052a0 <_scanf_float+0x60>
 8005454:	2503      	movs	r5, #3
 8005456:	e7b7      	b.n	80053c8 <_scanf_float+0x188>
 8005458:	2d06      	cmp	r5, #6
 800545a:	f47f af21 	bne.w	80052a0 <_scanf_float+0x60>
 800545e:	2507      	movs	r5, #7
 8005460:	e7b2      	b.n	80053c8 <_scanf_float+0x188>
 8005462:	6822      	ldr	r2, [r4, #0]
 8005464:	0591      	lsls	r1, r2, #22
 8005466:	f57f af1b 	bpl.w	80052a0 <_scanf_float+0x60>
 800546a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800546e:	6022      	str	r2, [r4, #0]
 8005470:	f8cd 9004 	str.w	r9, [sp, #4]
 8005474:	e7a8      	b.n	80053c8 <_scanf_float+0x188>
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800547c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005480:	d006      	beq.n	8005490 <_scanf_float+0x250>
 8005482:	0550      	lsls	r0, r2, #21
 8005484:	f57f af0c 	bpl.w	80052a0 <_scanf_float+0x60>
 8005488:	f1b9 0f00 	cmp.w	r9, #0
 800548c:	f43f af0f 	beq.w	80052ae <_scanf_float+0x6e>
 8005490:	0591      	lsls	r1, r2, #22
 8005492:	bf58      	it	pl
 8005494:	9901      	ldrpl	r1, [sp, #4]
 8005496:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800549a:	bf58      	it	pl
 800549c:	eba9 0101 	subpl.w	r1, r9, r1
 80054a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80054a4:	bf58      	it	pl
 80054a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80054aa:	6022      	str	r2, [r4, #0]
 80054ac:	f04f 0900 	mov.w	r9, #0
 80054b0:	e78a      	b.n	80053c8 <_scanf_float+0x188>
 80054b2:	f04f 0a03 	mov.w	sl, #3
 80054b6:	e787      	b.n	80053c8 <_scanf_float+0x188>
 80054b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80054bc:	4639      	mov	r1, r7
 80054be:	4640      	mov	r0, r8
 80054c0:	4798      	blx	r3
 80054c2:	2800      	cmp	r0, #0
 80054c4:	f43f aedf 	beq.w	8005286 <_scanf_float+0x46>
 80054c8:	e6ea      	b.n	80052a0 <_scanf_float+0x60>
 80054ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054d2:	463a      	mov	r2, r7
 80054d4:	4640      	mov	r0, r8
 80054d6:	4798      	blx	r3
 80054d8:	6923      	ldr	r3, [r4, #16]
 80054da:	3b01      	subs	r3, #1
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	e6ec      	b.n	80052ba <_scanf_float+0x7a>
 80054e0:	1e6b      	subs	r3, r5, #1
 80054e2:	2b06      	cmp	r3, #6
 80054e4:	d825      	bhi.n	8005532 <_scanf_float+0x2f2>
 80054e6:	2d02      	cmp	r5, #2
 80054e8:	d836      	bhi.n	8005558 <_scanf_float+0x318>
 80054ea:	455e      	cmp	r6, fp
 80054ec:	f67f aee8 	bls.w	80052c0 <_scanf_float+0x80>
 80054f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054f8:	463a      	mov	r2, r7
 80054fa:	4640      	mov	r0, r8
 80054fc:	4798      	blx	r3
 80054fe:	6923      	ldr	r3, [r4, #16]
 8005500:	3b01      	subs	r3, #1
 8005502:	6123      	str	r3, [r4, #16]
 8005504:	e7f1      	b.n	80054ea <_scanf_float+0x2aa>
 8005506:	9802      	ldr	r0, [sp, #8]
 8005508:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800550c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005510:	9002      	str	r0, [sp, #8]
 8005512:	463a      	mov	r2, r7
 8005514:	4640      	mov	r0, r8
 8005516:	4798      	blx	r3
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	3b01      	subs	r3, #1
 800551c:	6123      	str	r3, [r4, #16]
 800551e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005522:	fa5f fa8a 	uxtb.w	sl, sl
 8005526:	f1ba 0f02 	cmp.w	sl, #2
 800552a:	d1ec      	bne.n	8005506 <_scanf_float+0x2c6>
 800552c:	3d03      	subs	r5, #3
 800552e:	b2ed      	uxtb	r5, r5
 8005530:	1b76      	subs	r6, r6, r5
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	05da      	lsls	r2, r3, #23
 8005536:	d52f      	bpl.n	8005598 <_scanf_float+0x358>
 8005538:	055b      	lsls	r3, r3, #21
 800553a:	d510      	bpl.n	800555e <_scanf_float+0x31e>
 800553c:	455e      	cmp	r6, fp
 800553e:	f67f aebf 	bls.w	80052c0 <_scanf_float+0x80>
 8005542:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005546:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800554a:	463a      	mov	r2, r7
 800554c:	4640      	mov	r0, r8
 800554e:	4798      	blx	r3
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	3b01      	subs	r3, #1
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	e7f1      	b.n	800553c <_scanf_float+0x2fc>
 8005558:	46aa      	mov	sl, r5
 800555a:	9602      	str	r6, [sp, #8]
 800555c:	e7df      	b.n	800551e <_scanf_float+0x2de>
 800555e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	2965      	cmp	r1, #101	; 0x65
 8005566:	f103 33ff 	add.w	r3, r3, #4294967295
 800556a:	f106 35ff 	add.w	r5, r6, #4294967295
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	d00c      	beq.n	800558c <_scanf_float+0x34c>
 8005572:	2945      	cmp	r1, #69	; 0x45
 8005574:	d00a      	beq.n	800558c <_scanf_float+0x34c>
 8005576:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800557a:	463a      	mov	r2, r7
 800557c:	4640      	mov	r0, r8
 800557e:	4798      	blx	r3
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005586:	3b01      	subs	r3, #1
 8005588:	1eb5      	subs	r5, r6, #2
 800558a:	6123      	str	r3, [r4, #16]
 800558c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005590:	463a      	mov	r2, r7
 8005592:	4640      	mov	r0, r8
 8005594:	4798      	blx	r3
 8005596:	462e      	mov	r6, r5
 8005598:	6825      	ldr	r5, [r4, #0]
 800559a:	f015 0510 	ands.w	r5, r5, #16
 800559e:	d159      	bne.n	8005654 <_scanf_float+0x414>
 80055a0:	7035      	strb	r5, [r6, #0]
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ac:	d11b      	bne.n	80055e6 <_scanf_float+0x3a6>
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	454b      	cmp	r3, r9
 80055b2:	eba3 0209 	sub.w	r2, r3, r9
 80055b6:	d123      	bne.n	8005600 <_scanf_float+0x3c0>
 80055b8:	2200      	movs	r2, #0
 80055ba:	4659      	mov	r1, fp
 80055bc:	4640      	mov	r0, r8
 80055be:	f000 fe99 	bl	80062f4 <_strtod_r>
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	f012 0f02 	tst.w	r2, #2
 80055ca:	ec57 6b10 	vmov	r6, r7, d0
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	d021      	beq.n	8005616 <_scanf_float+0x3d6>
 80055d2:	9903      	ldr	r1, [sp, #12]
 80055d4:	1d1a      	adds	r2, r3, #4
 80055d6:	600a      	str	r2, [r1, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	e9c3 6700 	strd	r6, r7, [r3]
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	3301      	adds	r3, #1
 80055e2:	60e3      	str	r3, [r4, #12]
 80055e4:	e66d      	b.n	80052c2 <_scanf_float+0x82>
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0e5      	beq.n	80055b8 <_scanf_float+0x378>
 80055ec:	9905      	ldr	r1, [sp, #20]
 80055ee:	230a      	movs	r3, #10
 80055f0:	462a      	mov	r2, r5
 80055f2:	3101      	adds	r1, #1
 80055f4:	4640      	mov	r0, r8
 80055f6:	f000 ff05 	bl	8006404 <_strtol_r>
 80055fa:	9b04      	ldr	r3, [sp, #16]
 80055fc:	9e05      	ldr	r6, [sp, #20]
 80055fe:	1ac2      	subs	r2, r0, r3
 8005600:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005604:	429e      	cmp	r6, r3
 8005606:	bf28      	it	cs
 8005608:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800560c:	4912      	ldr	r1, [pc, #72]	; (8005658 <_scanf_float+0x418>)
 800560e:	4630      	mov	r0, r6
 8005610:	f000 f82c 	bl	800566c <siprintf>
 8005614:	e7d0      	b.n	80055b8 <_scanf_float+0x378>
 8005616:	9903      	ldr	r1, [sp, #12]
 8005618:	f012 0f04 	tst.w	r2, #4
 800561c:	f103 0204 	add.w	r2, r3, #4
 8005620:	600a      	str	r2, [r1, #0]
 8005622:	d1d9      	bne.n	80055d8 <_scanf_float+0x398>
 8005624:	f8d3 8000 	ldr.w	r8, [r3]
 8005628:	ee10 2a10 	vmov	r2, s0
 800562c:	ee10 0a10 	vmov	r0, s0
 8005630:	463b      	mov	r3, r7
 8005632:	4639      	mov	r1, r7
 8005634:	f7fb fa82 	bl	8000b3c <__aeabi_dcmpun>
 8005638:	b128      	cbz	r0, 8005646 <_scanf_float+0x406>
 800563a:	4808      	ldr	r0, [pc, #32]	; (800565c <_scanf_float+0x41c>)
 800563c:	f000 f810 	bl	8005660 <nanf>
 8005640:	ed88 0a00 	vstr	s0, [r8]
 8005644:	e7cb      	b.n	80055de <_scanf_float+0x39e>
 8005646:	4630      	mov	r0, r6
 8005648:	4639      	mov	r1, r7
 800564a:	f7fb fad5 	bl	8000bf8 <__aeabi_d2f>
 800564e:	f8c8 0000 	str.w	r0, [r8]
 8005652:	e7c4      	b.n	80055de <_scanf_float+0x39e>
 8005654:	2500      	movs	r5, #0
 8005656:	e634      	b.n	80052c2 <_scanf_float+0x82>
 8005658:	080093bc 	.word	0x080093bc
 800565c:	080097c8 	.word	0x080097c8

08005660 <nanf>:
 8005660:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005668 <nanf+0x8>
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	7fc00000 	.word	0x7fc00000

0800566c <siprintf>:
 800566c:	b40e      	push	{r1, r2, r3}
 800566e:	b500      	push	{lr}
 8005670:	b09c      	sub	sp, #112	; 0x70
 8005672:	ab1d      	add	r3, sp, #116	; 0x74
 8005674:	9002      	str	r0, [sp, #8]
 8005676:	9006      	str	r0, [sp, #24]
 8005678:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800567c:	4809      	ldr	r0, [pc, #36]	; (80056a4 <siprintf+0x38>)
 800567e:	9107      	str	r1, [sp, #28]
 8005680:	9104      	str	r1, [sp, #16]
 8005682:	4909      	ldr	r1, [pc, #36]	; (80056a8 <siprintf+0x3c>)
 8005684:	f853 2b04 	ldr.w	r2, [r3], #4
 8005688:	9105      	str	r1, [sp, #20]
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	a902      	add	r1, sp, #8
 8005690:	f002 fee4 	bl	800845c <_svfiprintf_r>
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	b01c      	add	sp, #112	; 0x70
 800569c:	f85d eb04 	ldr.w	lr, [sp], #4
 80056a0:	b003      	add	sp, #12
 80056a2:	4770      	bx	lr
 80056a4:	20000018 	.word	0x20000018
 80056a8:	ffff0208 	.word	0xffff0208

080056ac <sulp>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	4604      	mov	r4, r0
 80056b0:	460d      	mov	r5, r1
 80056b2:	ec45 4b10 	vmov	d0, r4, r5
 80056b6:	4616      	mov	r6, r2
 80056b8:	f002 fc2e 	bl	8007f18 <__ulp>
 80056bc:	ec51 0b10 	vmov	r0, r1, d0
 80056c0:	b17e      	cbz	r6, 80056e2 <sulp+0x36>
 80056c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80056c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dd09      	ble.n	80056e2 <sulp+0x36>
 80056ce:	051b      	lsls	r3, r3, #20
 80056d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80056d4:	2400      	movs	r4, #0
 80056d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f7fa ff93 	bl	8000608 <__aeabi_dmul>
 80056e2:	bd70      	pop	{r4, r5, r6, pc}
 80056e4:	0000      	movs	r0, r0
	...

080056e8 <_strtod_l>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	ed2d 8b02 	vpush	{d8}
 80056f0:	b09d      	sub	sp, #116	; 0x74
 80056f2:	461f      	mov	r7, r3
 80056f4:	2300      	movs	r3, #0
 80056f6:	9318      	str	r3, [sp, #96]	; 0x60
 80056f8:	4ba2      	ldr	r3, [pc, #648]	; (8005984 <_strtod_l+0x29c>)
 80056fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	9305      	str	r3, [sp, #20]
 8005700:	4604      	mov	r4, r0
 8005702:	4618      	mov	r0, r3
 8005704:	4688      	mov	r8, r1
 8005706:	f7fa fd6b 	bl	80001e0 <strlen>
 800570a:	f04f 0a00 	mov.w	sl, #0
 800570e:	4605      	mov	r5, r0
 8005710:	f04f 0b00 	mov.w	fp, #0
 8005714:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800571a:	781a      	ldrb	r2, [r3, #0]
 800571c:	2a2b      	cmp	r2, #43	; 0x2b
 800571e:	d04e      	beq.n	80057be <_strtod_l+0xd6>
 8005720:	d83b      	bhi.n	800579a <_strtod_l+0xb2>
 8005722:	2a0d      	cmp	r2, #13
 8005724:	d834      	bhi.n	8005790 <_strtod_l+0xa8>
 8005726:	2a08      	cmp	r2, #8
 8005728:	d834      	bhi.n	8005794 <_strtod_l+0xac>
 800572a:	2a00      	cmp	r2, #0
 800572c:	d03e      	beq.n	80057ac <_strtod_l+0xc4>
 800572e:	2300      	movs	r3, #0
 8005730:	930a      	str	r3, [sp, #40]	; 0x28
 8005732:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005734:	7833      	ldrb	r3, [r6, #0]
 8005736:	2b30      	cmp	r3, #48	; 0x30
 8005738:	f040 80b0 	bne.w	800589c <_strtod_l+0x1b4>
 800573c:	7873      	ldrb	r3, [r6, #1]
 800573e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005742:	2b58      	cmp	r3, #88	; 0x58
 8005744:	d168      	bne.n	8005818 <_strtod_l+0x130>
 8005746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	ab18      	add	r3, sp, #96	; 0x60
 800574c:	9702      	str	r7, [sp, #8]
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	4a8d      	ldr	r2, [pc, #564]	; (8005988 <_strtod_l+0x2a0>)
 8005752:	ab19      	add	r3, sp, #100	; 0x64
 8005754:	a917      	add	r1, sp, #92	; 0x5c
 8005756:	4620      	mov	r0, r4
 8005758:	f001 fd38 	bl	80071cc <__gethex>
 800575c:	f010 0707 	ands.w	r7, r0, #7
 8005760:	4605      	mov	r5, r0
 8005762:	d005      	beq.n	8005770 <_strtod_l+0x88>
 8005764:	2f06      	cmp	r7, #6
 8005766:	d12c      	bne.n	80057c2 <_strtod_l+0xda>
 8005768:	3601      	adds	r6, #1
 800576a:	2300      	movs	r3, #0
 800576c:	9617      	str	r6, [sp, #92]	; 0x5c
 800576e:	930a      	str	r3, [sp, #40]	; 0x28
 8005770:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 8590 	bne.w	8006298 <_strtod_l+0xbb0>
 8005778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577a:	b1eb      	cbz	r3, 80057b8 <_strtod_l+0xd0>
 800577c:	4652      	mov	r2, sl
 800577e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005782:	ec43 2b10 	vmov	d0, r2, r3
 8005786:	b01d      	add	sp, #116	; 0x74
 8005788:	ecbd 8b02 	vpop	{d8}
 800578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005790:	2a20      	cmp	r2, #32
 8005792:	d1cc      	bne.n	800572e <_strtod_l+0x46>
 8005794:	3301      	adds	r3, #1
 8005796:	9317      	str	r3, [sp, #92]	; 0x5c
 8005798:	e7be      	b.n	8005718 <_strtod_l+0x30>
 800579a:	2a2d      	cmp	r2, #45	; 0x2d
 800579c:	d1c7      	bne.n	800572e <_strtod_l+0x46>
 800579e:	2201      	movs	r2, #1
 80057a0:	920a      	str	r2, [sp, #40]	; 0x28
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1c2      	bne.n	8005732 <_strtod_l+0x4a>
 80057ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057ae:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 856e 	bne.w	8006294 <_strtod_l+0xbac>
 80057b8:	4652      	mov	r2, sl
 80057ba:	465b      	mov	r3, fp
 80057bc:	e7e1      	b.n	8005782 <_strtod_l+0x9a>
 80057be:	2200      	movs	r2, #0
 80057c0:	e7ee      	b.n	80057a0 <_strtod_l+0xb8>
 80057c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80057c4:	b13a      	cbz	r2, 80057d6 <_strtod_l+0xee>
 80057c6:	2135      	movs	r1, #53	; 0x35
 80057c8:	a81a      	add	r0, sp, #104	; 0x68
 80057ca:	f002 fcb0 	bl	800812e <__copybits>
 80057ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80057d0:	4620      	mov	r0, r4
 80057d2:	f002 f86f 	bl	80078b4 <_Bfree>
 80057d6:	3f01      	subs	r7, #1
 80057d8:	2f04      	cmp	r7, #4
 80057da:	d806      	bhi.n	80057ea <_strtod_l+0x102>
 80057dc:	e8df f007 	tbb	[pc, r7]
 80057e0:	1714030a 	.word	0x1714030a
 80057e4:	0a          	.byte	0x0a
 80057e5:	00          	.byte	0x00
 80057e6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80057ea:	0728      	lsls	r0, r5, #28
 80057ec:	d5c0      	bpl.n	8005770 <_strtod_l+0x88>
 80057ee:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80057f2:	e7bd      	b.n	8005770 <_strtod_l+0x88>
 80057f4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80057f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80057fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80057fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005802:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005806:	e7f0      	b.n	80057ea <_strtod_l+0x102>
 8005808:	f8df b180 	ldr.w	fp, [pc, #384]	; 800598c <_strtod_l+0x2a4>
 800580c:	e7ed      	b.n	80057ea <_strtod_l+0x102>
 800580e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005812:	f04f 3aff 	mov.w	sl, #4294967295
 8005816:	e7e8      	b.n	80057ea <_strtod_l+0x102>
 8005818:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	9217      	str	r2, [sp, #92]	; 0x5c
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b30      	cmp	r3, #48	; 0x30
 8005822:	d0f9      	beq.n	8005818 <_strtod_l+0x130>
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0a3      	beq.n	8005770 <_strtod_l+0x88>
 8005828:	2301      	movs	r3, #1
 800582a:	f04f 0900 	mov.w	r9, #0
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005832:	9308      	str	r3, [sp, #32]
 8005834:	f8cd 901c 	str.w	r9, [sp, #28]
 8005838:	464f      	mov	r7, r9
 800583a:	220a      	movs	r2, #10
 800583c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800583e:	7806      	ldrb	r6, [r0, #0]
 8005840:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005844:	b2d9      	uxtb	r1, r3
 8005846:	2909      	cmp	r1, #9
 8005848:	d92a      	bls.n	80058a0 <_strtod_l+0x1b8>
 800584a:	9905      	ldr	r1, [sp, #20]
 800584c:	462a      	mov	r2, r5
 800584e:	f002 ff1f 	bl	8008690 <strncmp>
 8005852:	b398      	cbz	r0, 80058bc <_strtod_l+0x1d4>
 8005854:	2000      	movs	r0, #0
 8005856:	4632      	mov	r2, r6
 8005858:	463d      	mov	r5, r7
 800585a:	9005      	str	r0, [sp, #20]
 800585c:	4603      	mov	r3, r0
 800585e:	2a65      	cmp	r2, #101	; 0x65
 8005860:	d001      	beq.n	8005866 <_strtod_l+0x17e>
 8005862:	2a45      	cmp	r2, #69	; 0x45
 8005864:	d118      	bne.n	8005898 <_strtod_l+0x1b0>
 8005866:	b91d      	cbnz	r5, 8005870 <_strtod_l+0x188>
 8005868:	9a04      	ldr	r2, [sp, #16]
 800586a:	4302      	orrs	r2, r0
 800586c:	d09e      	beq.n	80057ac <_strtod_l+0xc4>
 800586e:	2500      	movs	r5, #0
 8005870:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005874:	f108 0201 	add.w	r2, r8, #1
 8005878:	9217      	str	r2, [sp, #92]	; 0x5c
 800587a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800587e:	2a2b      	cmp	r2, #43	; 0x2b
 8005880:	d075      	beq.n	800596e <_strtod_l+0x286>
 8005882:	2a2d      	cmp	r2, #45	; 0x2d
 8005884:	d07b      	beq.n	800597e <_strtod_l+0x296>
 8005886:	f04f 0c00 	mov.w	ip, #0
 800588a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800588e:	2909      	cmp	r1, #9
 8005890:	f240 8082 	bls.w	8005998 <_strtod_l+0x2b0>
 8005894:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005898:	2600      	movs	r6, #0
 800589a:	e09d      	b.n	80059d8 <_strtod_l+0x2f0>
 800589c:	2300      	movs	r3, #0
 800589e:	e7c4      	b.n	800582a <_strtod_l+0x142>
 80058a0:	2f08      	cmp	r7, #8
 80058a2:	bfd8      	it	le
 80058a4:	9907      	ldrle	r1, [sp, #28]
 80058a6:	f100 0001 	add.w	r0, r0, #1
 80058aa:	bfda      	itte	le
 80058ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80058b0:	9307      	strle	r3, [sp, #28]
 80058b2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80058b6:	3701      	adds	r7, #1
 80058b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80058ba:	e7bf      	b.n	800583c <_strtod_l+0x154>
 80058bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058be:	195a      	adds	r2, r3, r5
 80058c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80058c2:	5d5a      	ldrb	r2, [r3, r5]
 80058c4:	2f00      	cmp	r7, #0
 80058c6:	d037      	beq.n	8005938 <_strtod_l+0x250>
 80058c8:	9005      	str	r0, [sp, #20]
 80058ca:	463d      	mov	r5, r7
 80058cc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80058d0:	2b09      	cmp	r3, #9
 80058d2:	d912      	bls.n	80058fa <_strtod_l+0x212>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e7c2      	b.n	800585e <_strtod_l+0x176>
 80058d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80058de:	785a      	ldrb	r2, [r3, #1]
 80058e0:	3001      	adds	r0, #1
 80058e2:	2a30      	cmp	r2, #48	; 0x30
 80058e4:	d0f8      	beq.n	80058d8 <_strtod_l+0x1f0>
 80058e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	f200 84d9 	bhi.w	80062a2 <_strtod_l+0xbba>
 80058f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058f2:	9005      	str	r0, [sp, #20]
 80058f4:	2000      	movs	r0, #0
 80058f6:	9308      	str	r3, [sp, #32]
 80058f8:	4605      	mov	r5, r0
 80058fa:	3a30      	subs	r2, #48	; 0x30
 80058fc:	f100 0301 	add.w	r3, r0, #1
 8005900:	d014      	beq.n	800592c <_strtod_l+0x244>
 8005902:	9905      	ldr	r1, [sp, #20]
 8005904:	4419      	add	r1, r3
 8005906:	9105      	str	r1, [sp, #20]
 8005908:	462b      	mov	r3, r5
 800590a:	eb00 0e05 	add.w	lr, r0, r5
 800590e:	210a      	movs	r1, #10
 8005910:	4573      	cmp	r3, lr
 8005912:	d113      	bne.n	800593c <_strtod_l+0x254>
 8005914:	182b      	adds	r3, r5, r0
 8005916:	2b08      	cmp	r3, #8
 8005918:	f105 0501 	add.w	r5, r5, #1
 800591c:	4405      	add	r5, r0
 800591e:	dc1c      	bgt.n	800595a <_strtod_l+0x272>
 8005920:	9907      	ldr	r1, [sp, #28]
 8005922:	230a      	movs	r3, #10
 8005924:	fb03 2301 	mla	r3, r3, r1, r2
 8005928:	9307      	str	r3, [sp, #28]
 800592a:	2300      	movs	r3, #0
 800592c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800592e:	1c51      	adds	r1, r2, #1
 8005930:	9117      	str	r1, [sp, #92]	; 0x5c
 8005932:	7852      	ldrb	r2, [r2, #1]
 8005934:	4618      	mov	r0, r3
 8005936:	e7c9      	b.n	80058cc <_strtod_l+0x1e4>
 8005938:	4638      	mov	r0, r7
 800593a:	e7d2      	b.n	80058e2 <_strtod_l+0x1fa>
 800593c:	2b08      	cmp	r3, #8
 800593e:	dc04      	bgt.n	800594a <_strtod_l+0x262>
 8005940:	9e07      	ldr	r6, [sp, #28]
 8005942:	434e      	muls	r6, r1
 8005944:	9607      	str	r6, [sp, #28]
 8005946:	3301      	adds	r3, #1
 8005948:	e7e2      	b.n	8005910 <_strtod_l+0x228>
 800594a:	f103 0c01 	add.w	ip, r3, #1
 800594e:	f1bc 0f10 	cmp.w	ip, #16
 8005952:	bfd8      	it	le
 8005954:	fb01 f909 	mulle.w	r9, r1, r9
 8005958:	e7f5      	b.n	8005946 <_strtod_l+0x25e>
 800595a:	2d10      	cmp	r5, #16
 800595c:	bfdc      	itt	le
 800595e:	230a      	movle	r3, #10
 8005960:	fb03 2909 	mlale	r9, r3, r9, r2
 8005964:	e7e1      	b.n	800592a <_strtod_l+0x242>
 8005966:	2300      	movs	r3, #0
 8005968:	9305      	str	r3, [sp, #20]
 800596a:	2301      	movs	r3, #1
 800596c:	e77c      	b.n	8005868 <_strtod_l+0x180>
 800596e:	f04f 0c00 	mov.w	ip, #0
 8005972:	f108 0202 	add.w	r2, r8, #2
 8005976:	9217      	str	r2, [sp, #92]	; 0x5c
 8005978:	f898 2002 	ldrb.w	r2, [r8, #2]
 800597c:	e785      	b.n	800588a <_strtod_l+0x1a2>
 800597e:	f04f 0c01 	mov.w	ip, #1
 8005982:	e7f6      	b.n	8005972 <_strtod_l+0x28a>
 8005984:	08009610 	.word	0x08009610
 8005988:	080093c4 	.word	0x080093c4
 800598c:	7ff00000 	.word	0x7ff00000
 8005990:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005992:	1c51      	adds	r1, r2, #1
 8005994:	9117      	str	r1, [sp, #92]	; 0x5c
 8005996:	7852      	ldrb	r2, [r2, #1]
 8005998:	2a30      	cmp	r2, #48	; 0x30
 800599a:	d0f9      	beq.n	8005990 <_strtod_l+0x2a8>
 800599c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80059a0:	2908      	cmp	r1, #8
 80059a2:	f63f af79 	bhi.w	8005898 <_strtod_l+0x1b0>
 80059a6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80059aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059ac:	9206      	str	r2, [sp, #24]
 80059ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059b0:	1c51      	adds	r1, r2, #1
 80059b2:	9117      	str	r1, [sp, #92]	; 0x5c
 80059b4:	7852      	ldrb	r2, [r2, #1]
 80059b6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80059ba:	2e09      	cmp	r6, #9
 80059bc:	d937      	bls.n	8005a2e <_strtod_l+0x346>
 80059be:	9e06      	ldr	r6, [sp, #24]
 80059c0:	1b89      	subs	r1, r1, r6
 80059c2:	2908      	cmp	r1, #8
 80059c4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80059c8:	dc02      	bgt.n	80059d0 <_strtod_l+0x2e8>
 80059ca:	4576      	cmp	r6, lr
 80059cc:	bfa8      	it	ge
 80059ce:	4676      	movge	r6, lr
 80059d0:	f1bc 0f00 	cmp.w	ip, #0
 80059d4:	d000      	beq.n	80059d8 <_strtod_l+0x2f0>
 80059d6:	4276      	negs	r6, r6
 80059d8:	2d00      	cmp	r5, #0
 80059da:	d14d      	bne.n	8005a78 <_strtod_l+0x390>
 80059dc:	9904      	ldr	r1, [sp, #16]
 80059de:	4301      	orrs	r1, r0
 80059e0:	f47f aec6 	bne.w	8005770 <_strtod_l+0x88>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f47f aee1 	bne.w	80057ac <_strtod_l+0xc4>
 80059ea:	2a69      	cmp	r2, #105	; 0x69
 80059ec:	d027      	beq.n	8005a3e <_strtod_l+0x356>
 80059ee:	dc24      	bgt.n	8005a3a <_strtod_l+0x352>
 80059f0:	2a49      	cmp	r2, #73	; 0x49
 80059f2:	d024      	beq.n	8005a3e <_strtod_l+0x356>
 80059f4:	2a4e      	cmp	r2, #78	; 0x4e
 80059f6:	f47f aed9 	bne.w	80057ac <_strtod_l+0xc4>
 80059fa:	499f      	ldr	r1, [pc, #636]	; (8005c78 <_strtod_l+0x590>)
 80059fc:	a817      	add	r0, sp, #92	; 0x5c
 80059fe:	f001 fe3d 	bl	800767c <__match>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	f43f aed2 	beq.w	80057ac <_strtod_l+0xc4>
 8005a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b28      	cmp	r3, #40	; 0x28
 8005a0e:	d12d      	bne.n	8005a6c <_strtod_l+0x384>
 8005a10:	499a      	ldr	r1, [pc, #616]	; (8005c7c <_strtod_l+0x594>)
 8005a12:	aa1a      	add	r2, sp, #104	; 0x68
 8005a14:	a817      	add	r0, sp, #92	; 0x5c
 8005a16:	f001 fe45 	bl	80076a4 <__hexnan>
 8005a1a:	2805      	cmp	r0, #5
 8005a1c:	d126      	bne.n	8005a6c <_strtod_l+0x384>
 8005a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a20:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005a24:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005a28:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005a2c:	e6a0      	b.n	8005770 <_strtod_l+0x88>
 8005a2e:	210a      	movs	r1, #10
 8005a30:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005a34:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005a38:	e7b9      	b.n	80059ae <_strtod_l+0x2c6>
 8005a3a:	2a6e      	cmp	r2, #110	; 0x6e
 8005a3c:	e7db      	b.n	80059f6 <_strtod_l+0x30e>
 8005a3e:	4990      	ldr	r1, [pc, #576]	; (8005c80 <_strtod_l+0x598>)
 8005a40:	a817      	add	r0, sp, #92	; 0x5c
 8005a42:	f001 fe1b 	bl	800767c <__match>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f43f aeb0 	beq.w	80057ac <_strtod_l+0xc4>
 8005a4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a4e:	498d      	ldr	r1, [pc, #564]	; (8005c84 <_strtod_l+0x59c>)
 8005a50:	3b01      	subs	r3, #1
 8005a52:	a817      	add	r0, sp, #92	; 0x5c
 8005a54:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a56:	f001 fe11 	bl	800767c <__match>
 8005a5a:	b910      	cbnz	r0, 8005a62 <_strtod_l+0x37a>
 8005a5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a5e:	3301      	adds	r3, #1
 8005a60:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a62:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005c94 <_strtod_l+0x5ac>
 8005a66:	f04f 0a00 	mov.w	sl, #0
 8005a6a:	e681      	b.n	8005770 <_strtod_l+0x88>
 8005a6c:	4886      	ldr	r0, [pc, #536]	; (8005c88 <_strtod_l+0x5a0>)
 8005a6e:	f002 fdf7 	bl	8008660 <nan>
 8005a72:	ec5b ab10 	vmov	sl, fp, d0
 8005a76:	e67b      	b.n	8005770 <_strtod_l+0x88>
 8005a78:	9b05      	ldr	r3, [sp, #20]
 8005a7a:	9807      	ldr	r0, [sp, #28]
 8005a7c:	1af3      	subs	r3, r6, r3
 8005a7e:	2f00      	cmp	r7, #0
 8005a80:	bf08      	it	eq
 8005a82:	462f      	moveq	r7, r5
 8005a84:	2d10      	cmp	r5, #16
 8005a86:	9306      	str	r3, [sp, #24]
 8005a88:	46a8      	mov	r8, r5
 8005a8a:	bfa8      	it	ge
 8005a8c:	f04f 0810 	movge.w	r8, #16
 8005a90:	f7fa fd40 	bl	8000514 <__aeabi_ui2d>
 8005a94:	2d09      	cmp	r5, #9
 8005a96:	4682      	mov	sl, r0
 8005a98:	468b      	mov	fp, r1
 8005a9a:	dd13      	ble.n	8005ac4 <_strtod_l+0x3dc>
 8005a9c:	4b7b      	ldr	r3, [pc, #492]	; (8005c8c <_strtod_l+0x5a4>)
 8005a9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005aa2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005aa6:	f7fa fdaf 	bl	8000608 <__aeabi_dmul>
 8005aaa:	4682      	mov	sl, r0
 8005aac:	4648      	mov	r0, r9
 8005aae:	468b      	mov	fp, r1
 8005ab0:	f7fa fd30 	bl	8000514 <__aeabi_ui2d>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4650      	mov	r0, sl
 8005aba:	4659      	mov	r1, fp
 8005abc:	f7fa fbee 	bl	800029c <__adddf3>
 8005ac0:	4682      	mov	sl, r0
 8005ac2:	468b      	mov	fp, r1
 8005ac4:	2d0f      	cmp	r5, #15
 8005ac6:	dc38      	bgt.n	8005b3a <_strtod_l+0x452>
 8005ac8:	9b06      	ldr	r3, [sp, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f43f ae50 	beq.w	8005770 <_strtod_l+0x88>
 8005ad0:	dd24      	ble.n	8005b1c <_strtod_l+0x434>
 8005ad2:	2b16      	cmp	r3, #22
 8005ad4:	dc0b      	bgt.n	8005aee <_strtod_l+0x406>
 8005ad6:	496d      	ldr	r1, [pc, #436]	; (8005c8c <_strtod_l+0x5a4>)
 8005ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	465b      	mov	r3, fp
 8005ae4:	f7fa fd90 	bl	8000608 <__aeabi_dmul>
 8005ae8:	4682      	mov	sl, r0
 8005aea:	468b      	mov	fp, r1
 8005aec:	e640      	b.n	8005770 <_strtod_l+0x88>
 8005aee:	9a06      	ldr	r2, [sp, #24]
 8005af0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005af4:	4293      	cmp	r3, r2
 8005af6:	db20      	blt.n	8005b3a <_strtod_l+0x452>
 8005af8:	4c64      	ldr	r4, [pc, #400]	; (8005c8c <_strtod_l+0x5a4>)
 8005afa:	f1c5 050f 	rsb	r5, r5, #15
 8005afe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005b02:	4652      	mov	r2, sl
 8005b04:	465b      	mov	r3, fp
 8005b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b0a:	f7fa fd7d 	bl	8000608 <__aeabi_dmul>
 8005b0e:	9b06      	ldr	r3, [sp, #24]
 8005b10:	1b5d      	subs	r5, r3, r5
 8005b12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005b16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005b1a:	e7e3      	b.n	8005ae4 <_strtod_l+0x3fc>
 8005b1c:	9b06      	ldr	r3, [sp, #24]
 8005b1e:	3316      	adds	r3, #22
 8005b20:	db0b      	blt.n	8005b3a <_strtod_l+0x452>
 8005b22:	9b05      	ldr	r3, [sp, #20]
 8005b24:	1b9e      	subs	r6, r3, r6
 8005b26:	4b59      	ldr	r3, [pc, #356]	; (8005c8c <_strtod_l+0x5a4>)
 8005b28:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005b2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b30:	4650      	mov	r0, sl
 8005b32:	4659      	mov	r1, fp
 8005b34:	f7fa fe92 	bl	800085c <__aeabi_ddiv>
 8005b38:	e7d6      	b.n	8005ae8 <_strtod_l+0x400>
 8005b3a:	9b06      	ldr	r3, [sp, #24]
 8005b3c:	eba5 0808 	sub.w	r8, r5, r8
 8005b40:	4498      	add	r8, r3
 8005b42:	f1b8 0f00 	cmp.w	r8, #0
 8005b46:	dd74      	ble.n	8005c32 <_strtod_l+0x54a>
 8005b48:	f018 030f 	ands.w	r3, r8, #15
 8005b4c:	d00a      	beq.n	8005b64 <_strtod_l+0x47c>
 8005b4e:	494f      	ldr	r1, [pc, #316]	; (8005c8c <_strtod_l+0x5a4>)
 8005b50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b54:	4652      	mov	r2, sl
 8005b56:	465b      	mov	r3, fp
 8005b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b5c:	f7fa fd54 	bl	8000608 <__aeabi_dmul>
 8005b60:	4682      	mov	sl, r0
 8005b62:	468b      	mov	fp, r1
 8005b64:	f038 080f 	bics.w	r8, r8, #15
 8005b68:	d04f      	beq.n	8005c0a <_strtod_l+0x522>
 8005b6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005b6e:	dd22      	ble.n	8005bb6 <_strtod_l+0x4ce>
 8005b70:	2500      	movs	r5, #0
 8005b72:	462e      	mov	r6, r5
 8005b74:	9507      	str	r5, [sp, #28]
 8005b76:	9505      	str	r5, [sp, #20]
 8005b78:	2322      	movs	r3, #34	; 0x22
 8005b7a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005c94 <_strtod_l+0x5ac>
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	f04f 0a00 	mov.w	sl, #0
 8005b84:	9b07      	ldr	r3, [sp, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f43f adf2 	beq.w	8005770 <_strtod_l+0x88>
 8005b8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f001 fe90 	bl	80078b4 <_Bfree>
 8005b94:	9905      	ldr	r1, [sp, #20]
 8005b96:	4620      	mov	r0, r4
 8005b98:	f001 fe8c 	bl	80078b4 <_Bfree>
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	f001 fe88 	bl	80078b4 <_Bfree>
 8005ba4:	9907      	ldr	r1, [sp, #28]
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f001 fe84 	bl	80078b4 <_Bfree>
 8005bac:	4629      	mov	r1, r5
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f001 fe80 	bl	80078b4 <_Bfree>
 8005bb4:	e5dc      	b.n	8005770 <_strtod_l+0x88>
 8005bb6:	4b36      	ldr	r3, [pc, #216]	; (8005c90 <_strtod_l+0x5a8>)
 8005bb8:	9304      	str	r3, [sp, #16]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005bc0:	4650      	mov	r0, sl
 8005bc2:	4659      	mov	r1, fp
 8005bc4:	4699      	mov	r9, r3
 8005bc6:	f1b8 0f01 	cmp.w	r8, #1
 8005bca:	dc21      	bgt.n	8005c10 <_strtod_l+0x528>
 8005bcc:	b10b      	cbz	r3, 8005bd2 <_strtod_l+0x4ea>
 8005bce:	4682      	mov	sl, r0
 8005bd0:	468b      	mov	fp, r1
 8005bd2:	4b2f      	ldr	r3, [pc, #188]	; (8005c90 <_strtod_l+0x5a8>)
 8005bd4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005bd8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005bdc:	4652      	mov	r2, sl
 8005bde:	465b      	mov	r3, fp
 8005be0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005be4:	f7fa fd10 	bl	8000608 <__aeabi_dmul>
 8005be8:	4b2a      	ldr	r3, [pc, #168]	; (8005c94 <_strtod_l+0x5ac>)
 8005bea:	460a      	mov	r2, r1
 8005bec:	400b      	ands	r3, r1
 8005bee:	492a      	ldr	r1, [pc, #168]	; (8005c98 <_strtod_l+0x5b0>)
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	4682      	mov	sl, r0
 8005bf4:	d8bc      	bhi.n	8005b70 <_strtod_l+0x488>
 8005bf6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005bfa:	428b      	cmp	r3, r1
 8005bfc:	bf86      	itte	hi
 8005bfe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005c9c <_strtod_l+0x5b4>
 8005c02:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c06:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9304      	str	r3, [sp, #16]
 8005c0e:	e084      	b.n	8005d1a <_strtod_l+0x632>
 8005c10:	f018 0f01 	tst.w	r8, #1
 8005c14:	d005      	beq.n	8005c22 <_strtod_l+0x53a>
 8005c16:	9b04      	ldr	r3, [sp, #16]
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f7fa fcf4 	bl	8000608 <__aeabi_dmul>
 8005c20:	2301      	movs	r3, #1
 8005c22:	9a04      	ldr	r2, [sp, #16]
 8005c24:	3208      	adds	r2, #8
 8005c26:	f109 0901 	add.w	r9, r9, #1
 8005c2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c2e:	9204      	str	r2, [sp, #16]
 8005c30:	e7c9      	b.n	8005bc6 <_strtod_l+0x4de>
 8005c32:	d0ea      	beq.n	8005c0a <_strtod_l+0x522>
 8005c34:	f1c8 0800 	rsb	r8, r8, #0
 8005c38:	f018 020f 	ands.w	r2, r8, #15
 8005c3c:	d00a      	beq.n	8005c54 <_strtod_l+0x56c>
 8005c3e:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <_strtod_l+0x5a4>)
 8005c40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c44:	4650      	mov	r0, sl
 8005c46:	4659      	mov	r1, fp
 8005c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4c:	f7fa fe06 	bl	800085c <__aeabi_ddiv>
 8005c50:	4682      	mov	sl, r0
 8005c52:	468b      	mov	fp, r1
 8005c54:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005c58:	d0d7      	beq.n	8005c0a <_strtod_l+0x522>
 8005c5a:	f1b8 0f1f 	cmp.w	r8, #31
 8005c5e:	dd1f      	ble.n	8005ca0 <_strtod_l+0x5b8>
 8005c60:	2500      	movs	r5, #0
 8005c62:	462e      	mov	r6, r5
 8005c64:	9507      	str	r5, [sp, #28]
 8005c66:	9505      	str	r5, [sp, #20]
 8005c68:	2322      	movs	r3, #34	; 0x22
 8005c6a:	f04f 0a00 	mov.w	sl, #0
 8005c6e:	f04f 0b00 	mov.w	fp, #0
 8005c72:	6023      	str	r3, [r4, #0]
 8005c74:	e786      	b.n	8005b84 <_strtod_l+0x49c>
 8005c76:	bf00      	nop
 8005c78:	08009395 	.word	0x08009395
 8005c7c:	080093d8 	.word	0x080093d8
 8005c80:	0800938d 	.word	0x0800938d
 8005c84:	0800951c 	.word	0x0800951c
 8005c88:	080097c8 	.word	0x080097c8
 8005c8c:	080096a8 	.word	0x080096a8
 8005c90:	08009680 	.word	0x08009680
 8005c94:	7ff00000 	.word	0x7ff00000
 8005c98:	7ca00000 	.word	0x7ca00000
 8005c9c:	7fefffff 	.word	0x7fefffff
 8005ca0:	f018 0310 	ands.w	r3, r8, #16
 8005ca4:	bf18      	it	ne
 8005ca6:	236a      	movne	r3, #106	; 0x6a
 8005ca8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006058 <_strtod_l+0x970>
 8005cac:	9304      	str	r3, [sp, #16]
 8005cae:	4650      	mov	r0, sl
 8005cb0:	4659      	mov	r1, fp
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f018 0f01 	tst.w	r8, #1
 8005cb8:	d004      	beq.n	8005cc4 <_strtod_l+0x5dc>
 8005cba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005cbe:	f7fa fca3 	bl	8000608 <__aeabi_dmul>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005cc8:	f109 0908 	add.w	r9, r9, #8
 8005ccc:	d1f2      	bne.n	8005cb4 <_strtod_l+0x5cc>
 8005cce:	b10b      	cbz	r3, 8005cd4 <_strtod_l+0x5ec>
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	468b      	mov	fp, r1
 8005cd4:	9b04      	ldr	r3, [sp, #16]
 8005cd6:	b1c3      	cbz	r3, 8005d0a <_strtod_l+0x622>
 8005cd8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005cdc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	4659      	mov	r1, fp
 8005ce4:	dd11      	ble.n	8005d0a <_strtod_l+0x622>
 8005ce6:	2b1f      	cmp	r3, #31
 8005ce8:	f340 8124 	ble.w	8005f34 <_strtod_l+0x84c>
 8005cec:	2b34      	cmp	r3, #52	; 0x34
 8005cee:	bfde      	ittt	le
 8005cf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005cf4:	f04f 33ff 	movle.w	r3, #4294967295
 8005cf8:	fa03 f202 	lslle.w	r2, r3, r2
 8005cfc:	f04f 0a00 	mov.w	sl, #0
 8005d00:	bfcc      	ite	gt
 8005d02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005d06:	ea02 0b01 	andle.w	fp, r2, r1
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4650      	mov	r0, sl
 8005d10:	4659      	mov	r1, fp
 8005d12:	f7fa fee1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d1a2      	bne.n	8005c60 <_strtod_l+0x578>
 8005d1a:	9b07      	ldr	r3, [sp, #28]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	9908      	ldr	r1, [sp, #32]
 8005d20:	462b      	mov	r3, r5
 8005d22:	463a      	mov	r2, r7
 8005d24:	4620      	mov	r0, r4
 8005d26:	f001 fe2d 	bl	8007984 <__s2b>
 8005d2a:	9007      	str	r0, [sp, #28]
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	f43f af1f 	beq.w	8005b70 <_strtod_l+0x488>
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	1b9e      	subs	r6, r3, r6
 8005d36:	9b06      	ldr	r3, [sp, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfb4      	ite	lt
 8005d3c:	4633      	movlt	r3, r6
 8005d3e:	2300      	movge	r3, #0
 8005d40:	930c      	str	r3, [sp, #48]	; 0x30
 8005d42:	9b06      	ldr	r3, [sp, #24]
 8005d44:	2500      	movs	r5, #0
 8005d46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d4a:	9312      	str	r3, [sp, #72]	; 0x48
 8005d4c:	462e      	mov	r6, r5
 8005d4e:	9b07      	ldr	r3, [sp, #28]
 8005d50:	4620      	mov	r0, r4
 8005d52:	6859      	ldr	r1, [r3, #4]
 8005d54:	f001 fd6e 	bl	8007834 <_Balloc>
 8005d58:	9005      	str	r0, [sp, #20]
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	f43f af0c 	beq.w	8005b78 <_strtod_l+0x490>
 8005d60:	9b07      	ldr	r3, [sp, #28]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	3202      	adds	r2, #2
 8005d66:	f103 010c 	add.w	r1, r3, #12
 8005d6a:	0092      	lsls	r2, r2, #2
 8005d6c:	300c      	adds	r0, #12
 8005d6e:	f001 fd53 	bl	8007818 <memcpy>
 8005d72:	ec4b ab10 	vmov	d0, sl, fp
 8005d76:	aa1a      	add	r2, sp, #104	; 0x68
 8005d78:	a919      	add	r1, sp, #100	; 0x64
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f002 f948 	bl	8008010 <__d2b>
 8005d80:	ec4b ab18 	vmov	d8, sl, fp
 8005d84:	9018      	str	r0, [sp, #96]	; 0x60
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f43f aef6 	beq.w	8005b78 <_strtod_l+0x490>
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	4620      	mov	r0, r4
 8005d90:	f001 fe92 	bl	8007ab8 <__i2b>
 8005d94:	4606      	mov	r6, r0
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f aeee 	beq.w	8005b78 <_strtod_l+0x490>
 8005d9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d9e:	9904      	ldr	r1, [sp, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bfab      	itete	ge
 8005da4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005da6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005da8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005daa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005dae:	bfac      	ite	ge
 8005db0:	eb03 0902 	addge.w	r9, r3, r2
 8005db4:	1ad7      	sublt	r7, r2, r3
 8005db6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005db8:	eba3 0801 	sub.w	r8, r3, r1
 8005dbc:	4490      	add	r8, r2
 8005dbe:	4ba1      	ldr	r3, [pc, #644]	; (8006044 <_strtod_l+0x95c>)
 8005dc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005dc4:	4598      	cmp	r8, r3
 8005dc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005dca:	f280 80c7 	bge.w	8005f5c <_strtod_l+0x874>
 8005dce:	eba3 0308 	sub.w	r3, r3, r8
 8005dd2:	2b1f      	cmp	r3, #31
 8005dd4:	eba2 0203 	sub.w	r2, r2, r3
 8005dd8:	f04f 0101 	mov.w	r1, #1
 8005ddc:	f300 80b1 	bgt.w	8005f42 <_strtod_l+0x85a>
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	930d      	str	r3, [sp, #52]	; 0x34
 8005de6:	2300      	movs	r3, #0
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	eb09 0802 	add.w	r8, r9, r2
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	45c1      	cmp	r9, r8
 8005df2:	4417      	add	r7, r2
 8005df4:	441f      	add	r7, r3
 8005df6:	464b      	mov	r3, r9
 8005df8:	bfa8      	it	ge
 8005dfa:	4643      	movge	r3, r8
 8005dfc:	42bb      	cmp	r3, r7
 8005dfe:	bfa8      	it	ge
 8005e00:	463b      	movge	r3, r7
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bfc2      	ittt	gt
 8005e06:	eba8 0803 	subgt.w	r8, r8, r3
 8005e0a:	1aff      	subgt	r7, r7, r3
 8005e0c:	eba9 0903 	subgt.w	r9, r9, r3
 8005e10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dd17      	ble.n	8005e46 <_strtod_l+0x75e>
 8005e16:	4631      	mov	r1, r6
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f001 ff0c 	bl	8007c38 <__pow5mult>
 8005e20:	4606      	mov	r6, r0
 8005e22:	2800      	cmp	r0, #0
 8005e24:	f43f aea8 	beq.w	8005b78 <_strtod_l+0x490>
 8005e28:	4601      	mov	r1, r0
 8005e2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f001 fe59 	bl	8007ae4 <__multiply>
 8005e32:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e34:	2800      	cmp	r0, #0
 8005e36:	f43f ae9f 	beq.w	8005b78 <_strtod_l+0x490>
 8005e3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f001 fd39 	bl	80078b4 <_Bfree>
 8005e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e44:	9318      	str	r3, [sp, #96]	; 0x60
 8005e46:	f1b8 0f00 	cmp.w	r8, #0
 8005e4a:	f300 808c 	bgt.w	8005f66 <_strtod_l+0x87e>
 8005e4e:	9b06      	ldr	r3, [sp, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	dd08      	ble.n	8005e66 <_strtod_l+0x77e>
 8005e54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e56:	9905      	ldr	r1, [sp, #20]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f001 feed 	bl	8007c38 <__pow5mult>
 8005e5e:	9005      	str	r0, [sp, #20]
 8005e60:	2800      	cmp	r0, #0
 8005e62:	f43f ae89 	beq.w	8005b78 <_strtod_l+0x490>
 8005e66:	2f00      	cmp	r7, #0
 8005e68:	dd08      	ble.n	8005e7c <_strtod_l+0x794>
 8005e6a:	9905      	ldr	r1, [sp, #20]
 8005e6c:	463a      	mov	r2, r7
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f001 ff3c 	bl	8007cec <__lshift>
 8005e74:	9005      	str	r0, [sp, #20]
 8005e76:	2800      	cmp	r0, #0
 8005e78:	f43f ae7e 	beq.w	8005b78 <_strtod_l+0x490>
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dd08      	ble.n	8005e94 <_strtod_l+0x7ac>
 8005e82:	4631      	mov	r1, r6
 8005e84:	464a      	mov	r2, r9
 8005e86:	4620      	mov	r0, r4
 8005e88:	f001 ff30 	bl	8007cec <__lshift>
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	2800      	cmp	r0, #0
 8005e90:	f43f ae72 	beq.w	8005b78 <_strtod_l+0x490>
 8005e94:	9a05      	ldr	r2, [sp, #20]
 8005e96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f001 ffb3 	bl	8007e04 <__mdiff>
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	f43f ae69 	beq.w	8005b78 <_strtod_l+0x490>
 8005ea6:	68c3      	ldr	r3, [r0, #12]
 8005ea8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60c3      	str	r3, [r0, #12]
 8005eae:	4631      	mov	r1, r6
 8005eb0:	f001 ff8c 	bl	8007dcc <__mcmp>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	da60      	bge.n	8005f7a <_strtod_l+0x892>
 8005eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eba:	ea53 030a 	orrs.w	r3, r3, sl
 8005ebe:	f040 8082 	bne.w	8005fc6 <_strtod_l+0x8de>
 8005ec2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d17d      	bne.n	8005fc6 <_strtod_l+0x8de>
 8005eca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ece:	0d1b      	lsrs	r3, r3, #20
 8005ed0:	051b      	lsls	r3, r3, #20
 8005ed2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005ed6:	d976      	bls.n	8005fc6 <_strtod_l+0x8de>
 8005ed8:	696b      	ldr	r3, [r5, #20]
 8005eda:	b913      	cbnz	r3, 8005ee2 <_strtod_l+0x7fa>
 8005edc:	692b      	ldr	r3, [r5, #16]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	dd71      	ble.n	8005fc6 <_strtod_l+0x8de>
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f001 ff00 	bl	8007cec <__lshift>
 8005eec:	4631      	mov	r1, r6
 8005eee:	4605      	mov	r5, r0
 8005ef0:	f001 ff6c 	bl	8007dcc <__mcmp>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	dd66      	ble.n	8005fc6 <_strtod_l+0x8de>
 8005ef8:	9904      	ldr	r1, [sp, #16]
 8005efa:	4a53      	ldr	r2, [pc, #332]	; (8006048 <_strtod_l+0x960>)
 8005efc:	465b      	mov	r3, fp
 8005efe:	2900      	cmp	r1, #0
 8005f00:	f000 8081 	beq.w	8006006 <_strtod_l+0x91e>
 8005f04:	ea02 010b 	and.w	r1, r2, fp
 8005f08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005f0c:	dc7b      	bgt.n	8006006 <_strtod_l+0x91e>
 8005f0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005f12:	f77f aea9 	ble.w	8005c68 <_strtod_l+0x580>
 8005f16:	4b4d      	ldr	r3, [pc, #308]	; (800604c <_strtod_l+0x964>)
 8005f18:	4650      	mov	r0, sl
 8005f1a:	4659      	mov	r1, fp
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f7fa fb73 	bl	8000608 <__aeabi_dmul>
 8005f22:	460b      	mov	r3, r1
 8005f24:	4303      	orrs	r3, r0
 8005f26:	bf08      	it	eq
 8005f28:	2322      	moveq	r3, #34	; 0x22
 8005f2a:	4682      	mov	sl, r0
 8005f2c:	468b      	mov	fp, r1
 8005f2e:	bf08      	it	eq
 8005f30:	6023      	streq	r3, [r4, #0]
 8005f32:	e62b      	b.n	8005b8c <_strtod_l+0x4a4>
 8005f34:	f04f 32ff 	mov.w	r2, #4294967295
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	ea03 0a0a 	and.w	sl, r3, sl
 8005f40:	e6e3      	b.n	8005d0a <_strtod_l+0x622>
 8005f42:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005f46:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005f4a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005f4e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005f52:	fa01 f308 	lsl.w	r3, r1, r8
 8005f56:	9308      	str	r3, [sp, #32]
 8005f58:	910d      	str	r1, [sp, #52]	; 0x34
 8005f5a:	e746      	b.n	8005dea <_strtod_l+0x702>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9308      	str	r3, [sp, #32]
 8005f60:	2301      	movs	r3, #1
 8005f62:	930d      	str	r3, [sp, #52]	; 0x34
 8005f64:	e741      	b.n	8005dea <_strtod_l+0x702>
 8005f66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f68:	4642      	mov	r2, r8
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f001 febe 	bl	8007cec <__lshift>
 8005f70:	9018      	str	r0, [sp, #96]	; 0x60
 8005f72:	2800      	cmp	r0, #0
 8005f74:	f47f af6b 	bne.w	8005e4e <_strtod_l+0x766>
 8005f78:	e5fe      	b.n	8005b78 <_strtod_l+0x490>
 8005f7a:	465f      	mov	r7, fp
 8005f7c:	d16e      	bne.n	800605c <_strtod_l+0x974>
 8005f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f84:	b342      	cbz	r2, 8005fd8 <_strtod_l+0x8f0>
 8005f86:	4a32      	ldr	r2, [pc, #200]	; (8006050 <_strtod_l+0x968>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d128      	bne.n	8005fde <_strtod_l+0x8f6>
 8005f8c:	9b04      	ldr	r3, [sp, #16]
 8005f8e:	4651      	mov	r1, sl
 8005f90:	b1eb      	cbz	r3, 8005fce <_strtod_l+0x8e6>
 8005f92:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <_strtod_l+0x960>)
 8005f94:	403b      	ands	r3, r7
 8005f96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9e:	d819      	bhi.n	8005fd4 <_strtod_l+0x8ec>
 8005fa0:	0d1b      	lsrs	r3, r3, #20
 8005fa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	4299      	cmp	r1, r3
 8005fac:	d117      	bne.n	8005fde <_strtod_l+0x8f6>
 8005fae:	4b29      	ldr	r3, [pc, #164]	; (8006054 <_strtod_l+0x96c>)
 8005fb0:	429f      	cmp	r7, r3
 8005fb2:	d102      	bne.n	8005fba <_strtod_l+0x8d2>
 8005fb4:	3101      	adds	r1, #1
 8005fb6:	f43f addf 	beq.w	8005b78 <_strtod_l+0x490>
 8005fba:	4b23      	ldr	r3, [pc, #140]	; (8006048 <_strtod_l+0x960>)
 8005fbc:	403b      	ands	r3, r7
 8005fbe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005fc2:	f04f 0a00 	mov.w	sl, #0
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1a4      	bne.n	8005f16 <_strtod_l+0x82e>
 8005fcc:	e5de      	b.n	8005b8c <_strtod_l+0x4a4>
 8005fce:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd2:	e7ea      	b.n	8005faa <_strtod_l+0x8c2>
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	e7e8      	b.n	8005faa <_strtod_l+0x8c2>
 8005fd8:	ea53 030a 	orrs.w	r3, r3, sl
 8005fdc:	d08c      	beq.n	8005ef8 <_strtod_l+0x810>
 8005fde:	9b08      	ldr	r3, [sp, #32]
 8005fe0:	b1db      	cbz	r3, 800601a <_strtod_l+0x932>
 8005fe2:	423b      	tst	r3, r7
 8005fe4:	d0ef      	beq.n	8005fc6 <_strtod_l+0x8de>
 8005fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe8:	9a04      	ldr	r2, [sp, #16]
 8005fea:	4650      	mov	r0, sl
 8005fec:	4659      	mov	r1, fp
 8005fee:	b1c3      	cbz	r3, 8006022 <_strtod_l+0x93a>
 8005ff0:	f7ff fb5c 	bl	80056ac <sulp>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	ec51 0b18 	vmov	r0, r1, d8
 8005ffc:	f7fa f94e 	bl	800029c <__adddf3>
 8006000:	4682      	mov	sl, r0
 8006002:	468b      	mov	fp, r1
 8006004:	e7df      	b.n	8005fc6 <_strtod_l+0x8de>
 8006006:	4013      	ands	r3, r2
 8006008:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800600c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006010:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006014:	f04f 3aff 	mov.w	sl, #4294967295
 8006018:	e7d5      	b.n	8005fc6 <_strtod_l+0x8de>
 800601a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800601c:	ea13 0f0a 	tst.w	r3, sl
 8006020:	e7e0      	b.n	8005fe4 <_strtod_l+0x8fc>
 8006022:	f7ff fb43 	bl	80056ac <sulp>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	ec51 0b18 	vmov	r0, r1, d8
 800602e:	f7fa f933 	bl	8000298 <__aeabi_dsub>
 8006032:	2200      	movs	r2, #0
 8006034:	2300      	movs	r3, #0
 8006036:	4682      	mov	sl, r0
 8006038:	468b      	mov	fp, r1
 800603a:	f7fa fd4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800603e:	2800      	cmp	r0, #0
 8006040:	d0c1      	beq.n	8005fc6 <_strtod_l+0x8de>
 8006042:	e611      	b.n	8005c68 <_strtod_l+0x580>
 8006044:	fffffc02 	.word	0xfffffc02
 8006048:	7ff00000 	.word	0x7ff00000
 800604c:	39500000 	.word	0x39500000
 8006050:	000fffff 	.word	0x000fffff
 8006054:	7fefffff 	.word	0x7fefffff
 8006058:	080093f0 	.word	0x080093f0
 800605c:	4631      	mov	r1, r6
 800605e:	4628      	mov	r0, r5
 8006060:	f002 f832 	bl	80080c8 <__ratio>
 8006064:	ec59 8b10 	vmov	r8, r9, d0
 8006068:	ee10 0a10 	vmov	r0, s0
 800606c:	2200      	movs	r2, #0
 800606e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006072:	4649      	mov	r1, r9
 8006074:	f7fa fd44 	bl	8000b00 <__aeabi_dcmple>
 8006078:	2800      	cmp	r0, #0
 800607a:	d07a      	beq.n	8006172 <_strtod_l+0xa8a>
 800607c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d04a      	beq.n	8006118 <_strtod_l+0xa30>
 8006082:	4b95      	ldr	r3, [pc, #596]	; (80062d8 <_strtod_l+0xbf0>)
 8006084:	2200      	movs	r2, #0
 8006086:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800608a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80062d8 <_strtod_l+0xbf0>
 800608e:	f04f 0800 	mov.w	r8, #0
 8006092:	4b92      	ldr	r3, [pc, #584]	; (80062dc <_strtod_l+0xbf4>)
 8006094:	403b      	ands	r3, r7
 8006096:	930d      	str	r3, [sp, #52]	; 0x34
 8006098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800609a:	4b91      	ldr	r3, [pc, #580]	; (80062e0 <_strtod_l+0xbf8>)
 800609c:	429a      	cmp	r2, r3
 800609e:	f040 80b0 	bne.w	8006202 <_strtod_l+0xb1a>
 80060a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060a6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80060aa:	ec4b ab10 	vmov	d0, sl, fp
 80060ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060b2:	f001 ff31 	bl	8007f18 <__ulp>
 80060b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060ba:	ec53 2b10 	vmov	r2, r3, d0
 80060be:	f7fa faa3 	bl	8000608 <__aeabi_dmul>
 80060c2:	4652      	mov	r2, sl
 80060c4:	465b      	mov	r3, fp
 80060c6:	f7fa f8e9 	bl	800029c <__adddf3>
 80060ca:	460b      	mov	r3, r1
 80060cc:	4983      	ldr	r1, [pc, #524]	; (80062dc <_strtod_l+0xbf4>)
 80060ce:	4a85      	ldr	r2, [pc, #532]	; (80062e4 <_strtod_l+0xbfc>)
 80060d0:	4019      	ands	r1, r3
 80060d2:	4291      	cmp	r1, r2
 80060d4:	4682      	mov	sl, r0
 80060d6:	d960      	bls.n	800619a <_strtod_l+0xab2>
 80060d8:	ee18 3a90 	vmov	r3, s17
 80060dc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d104      	bne.n	80060ee <_strtod_l+0xa06>
 80060e4:	ee18 3a10 	vmov	r3, s16
 80060e8:	3301      	adds	r3, #1
 80060ea:	f43f ad45 	beq.w	8005b78 <_strtod_l+0x490>
 80060ee:	f8df b200 	ldr.w	fp, [pc, #512]	; 80062f0 <_strtod_l+0xc08>
 80060f2:	f04f 3aff 	mov.w	sl, #4294967295
 80060f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060f8:	4620      	mov	r0, r4
 80060fa:	f001 fbdb 	bl	80078b4 <_Bfree>
 80060fe:	9905      	ldr	r1, [sp, #20]
 8006100:	4620      	mov	r0, r4
 8006102:	f001 fbd7 	bl	80078b4 <_Bfree>
 8006106:	4631      	mov	r1, r6
 8006108:	4620      	mov	r0, r4
 800610a:	f001 fbd3 	bl	80078b4 <_Bfree>
 800610e:	4629      	mov	r1, r5
 8006110:	4620      	mov	r0, r4
 8006112:	f001 fbcf 	bl	80078b4 <_Bfree>
 8006116:	e61a      	b.n	8005d4e <_strtod_l+0x666>
 8006118:	f1ba 0f00 	cmp.w	sl, #0
 800611c:	d11b      	bne.n	8006156 <_strtod_l+0xa6e>
 800611e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006122:	b9f3      	cbnz	r3, 8006162 <_strtod_l+0xa7a>
 8006124:	4b6c      	ldr	r3, [pc, #432]	; (80062d8 <_strtod_l+0xbf0>)
 8006126:	2200      	movs	r2, #0
 8006128:	4640      	mov	r0, r8
 800612a:	4649      	mov	r1, r9
 800612c:	f7fa fcde 	bl	8000aec <__aeabi_dcmplt>
 8006130:	b9d0      	cbnz	r0, 8006168 <_strtod_l+0xa80>
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	4b6c      	ldr	r3, [pc, #432]	; (80062e8 <_strtod_l+0xc00>)
 8006138:	2200      	movs	r2, #0
 800613a:	f7fa fa65 	bl	8000608 <__aeabi_dmul>
 800613e:	4680      	mov	r8, r0
 8006140:	4689      	mov	r9, r1
 8006142:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006146:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800614a:	9315      	str	r3, [sp, #84]	; 0x54
 800614c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006150:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006154:	e79d      	b.n	8006092 <_strtod_l+0x9aa>
 8006156:	f1ba 0f01 	cmp.w	sl, #1
 800615a:	d102      	bne.n	8006162 <_strtod_l+0xa7a>
 800615c:	2f00      	cmp	r7, #0
 800615e:	f43f ad83 	beq.w	8005c68 <_strtod_l+0x580>
 8006162:	4b62      	ldr	r3, [pc, #392]	; (80062ec <_strtod_l+0xc04>)
 8006164:	2200      	movs	r2, #0
 8006166:	e78e      	b.n	8006086 <_strtod_l+0x99e>
 8006168:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80062e8 <_strtod_l+0xc00>
 800616c:	f04f 0800 	mov.w	r8, #0
 8006170:	e7e7      	b.n	8006142 <_strtod_l+0xa5a>
 8006172:	4b5d      	ldr	r3, [pc, #372]	; (80062e8 <_strtod_l+0xc00>)
 8006174:	4640      	mov	r0, r8
 8006176:	4649      	mov	r1, r9
 8006178:	2200      	movs	r2, #0
 800617a:	f7fa fa45 	bl	8000608 <__aeabi_dmul>
 800617e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006180:	4680      	mov	r8, r0
 8006182:	4689      	mov	r9, r1
 8006184:	b933      	cbnz	r3, 8006194 <_strtod_l+0xaac>
 8006186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800618a:	900e      	str	r0, [sp, #56]	; 0x38
 800618c:	930f      	str	r3, [sp, #60]	; 0x3c
 800618e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006192:	e7dd      	b.n	8006150 <_strtod_l+0xa68>
 8006194:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006198:	e7f9      	b.n	800618e <_strtod_l+0xaa6>
 800619a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1a8      	bne.n	80060f6 <_strtod_l+0xa0e>
 80061a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061aa:	0d1b      	lsrs	r3, r3, #20
 80061ac:	051b      	lsls	r3, r3, #20
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d1a1      	bne.n	80060f6 <_strtod_l+0xa0e>
 80061b2:	4640      	mov	r0, r8
 80061b4:	4649      	mov	r1, r9
 80061b6:	f7fa fdbf 	bl	8000d38 <__aeabi_d2lz>
 80061ba:	f7fa f9f7 	bl	80005ac <__aeabi_l2d>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4640      	mov	r0, r8
 80061c4:	4649      	mov	r1, r9
 80061c6:	f7fa f867 	bl	8000298 <__aeabi_dsub>
 80061ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061d0:	ea43 030a 	orr.w	r3, r3, sl
 80061d4:	4313      	orrs	r3, r2
 80061d6:	4680      	mov	r8, r0
 80061d8:	4689      	mov	r9, r1
 80061da:	d055      	beq.n	8006288 <_strtod_l+0xba0>
 80061dc:	a336      	add	r3, pc, #216	; (adr r3, 80062b8 <_strtod_l+0xbd0>)
 80061de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e2:	f7fa fc83 	bl	8000aec <__aeabi_dcmplt>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f47f acd0 	bne.w	8005b8c <_strtod_l+0x4a4>
 80061ec:	a334      	add	r3, pc, #208	; (adr r3, 80062c0 <_strtod_l+0xbd8>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	4640      	mov	r0, r8
 80061f4:	4649      	mov	r1, r9
 80061f6:	f7fa fc97 	bl	8000b28 <__aeabi_dcmpgt>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	f43f af7b 	beq.w	80060f6 <_strtod_l+0xa0e>
 8006200:	e4c4      	b.n	8005b8c <_strtod_l+0x4a4>
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	b333      	cbz	r3, 8006254 <_strtod_l+0xb6c>
 8006206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006208:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800620c:	d822      	bhi.n	8006254 <_strtod_l+0xb6c>
 800620e:	a32e      	add	r3, pc, #184	; (adr r3, 80062c8 <_strtod_l+0xbe0>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	4640      	mov	r0, r8
 8006216:	4649      	mov	r1, r9
 8006218:	f7fa fc72 	bl	8000b00 <__aeabi_dcmple>
 800621c:	b1a0      	cbz	r0, 8006248 <_strtod_l+0xb60>
 800621e:	4649      	mov	r1, r9
 8006220:	4640      	mov	r0, r8
 8006222:	f7fa fcc9 	bl	8000bb8 <__aeabi_d2uiz>
 8006226:	2801      	cmp	r0, #1
 8006228:	bf38      	it	cc
 800622a:	2001      	movcc	r0, #1
 800622c:	f7fa f972 	bl	8000514 <__aeabi_ui2d>
 8006230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006232:	4680      	mov	r8, r0
 8006234:	4689      	mov	r9, r1
 8006236:	bb23      	cbnz	r3, 8006282 <_strtod_l+0xb9a>
 8006238:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800623c:	9010      	str	r0, [sp, #64]	; 0x40
 800623e:	9311      	str	r3, [sp, #68]	; 0x44
 8006240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006244:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800624c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	9309      	str	r3, [sp, #36]	; 0x24
 8006254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006258:	eeb0 0a48 	vmov.f32	s0, s16
 800625c:	eef0 0a68 	vmov.f32	s1, s17
 8006260:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006264:	f001 fe58 	bl	8007f18 <__ulp>
 8006268:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800626c:	ec53 2b10 	vmov	r2, r3, d0
 8006270:	f7fa f9ca 	bl	8000608 <__aeabi_dmul>
 8006274:	ec53 2b18 	vmov	r2, r3, d8
 8006278:	f7fa f810 	bl	800029c <__adddf3>
 800627c:	4682      	mov	sl, r0
 800627e:	468b      	mov	fp, r1
 8006280:	e78d      	b.n	800619e <_strtod_l+0xab6>
 8006282:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006286:	e7db      	b.n	8006240 <_strtod_l+0xb58>
 8006288:	a311      	add	r3, pc, #68	; (adr r3, 80062d0 <_strtod_l+0xbe8>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f7fa fc2d 	bl	8000aec <__aeabi_dcmplt>
 8006292:	e7b2      	b.n	80061fa <_strtod_l+0xb12>
 8006294:	2300      	movs	r3, #0
 8006296:	930a      	str	r3, [sp, #40]	; 0x28
 8006298:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800629a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	f7ff ba6b 	b.w	8005778 <_strtod_l+0x90>
 80062a2:	2a65      	cmp	r2, #101	; 0x65
 80062a4:	f43f ab5f 	beq.w	8005966 <_strtod_l+0x27e>
 80062a8:	2a45      	cmp	r2, #69	; 0x45
 80062aa:	f43f ab5c 	beq.w	8005966 <_strtod_l+0x27e>
 80062ae:	2301      	movs	r3, #1
 80062b0:	f7ff bb94 	b.w	80059dc <_strtod_l+0x2f4>
 80062b4:	f3af 8000 	nop.w
 80062b8:	94a03595 	.word	0x94a03595
 80062bc:	3fdfffff 	.word	0x3fdfffff
 80062c0:	35afe535 	.word	0x35afe535
 80062c4:	3fe00000 	.word	0x3fe00000
 80062c8:	ffc00000 	.word	0xffc00000
 80062cc:	41dfffff 	.word	0x41dfffff
 80062d0:	94a03595 	.word	0x94a03595
 80062d4:	3fcfffff 	.word	0x3fcfffff
 80062d8:	3ff00000 	.word	0x3ff00000
 80062dc:	7ff00000 	.word	0x7ff00000
 80062e0:	7fe00000 	.word	0x7fe00000
 80062e4:	7c9fffff 	.word	0x7c9fffff
 80062e8:	3fe00000 	.word	0x3fe00000
 80062ec:	bff00000 	.word	0xbff00000
 80062f0:	7fefffff 	.word	0x7fefffff

080062f4 <_strtod_r>:
 80062f4:	4b01      	ldr	r3, [pc, #4]	; (80062fc <_strtod_r+0x8>)
 80062f6:	f7ff b9f7 	b.w	80056e8 <_strtod_l>
 80062fa:	bf00      	nop
 80062fc:	20000080 	.word	0x20000080

08006300 <_strtol_l.constprop.0>:
 8006300:	2b01      	cmp	r3, #1
 8006302:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006306:	d001      	beq.n	800630c <_strtol_l.constprop.0+0xc>
 8006308:	2b24      	cmp	r3, #36	; 0x24
 800630a:	d906      	bls.n	800631a <_strtol_l.constprop.0+0x1a>
 800630c:	f7fe fafc 	bl	8004908 <__errno>
 8006310:	2316      	movs	r3, #22
 8006312:	6003      	str	r3, [r0, #0]
 8006314:	2000      	movs	r0, #0
 8006316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006400 <_strtol_l.constprop.0+0x100>
 800631e:	460d      	mov	r5, r1
 8006320:	462e      	mov	r6, r5
 8006322:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006326:	f814 700c 	ldrb.w	r7, [r4, ip]
 800632a:	f017 0708 	ands.w	r7, r7, #8
 800632e:	d1f7      	bne.n	8006320 <_strtol_l.constprop.0+0x20>
 8006330:	2c2d      	cmp	r4, #45	; 0x2d
 8006332:	d132      	bne.n	800639a <_strtol_l.constprop.0+0x9a>
 8006334:	782c      	ldrb	r4, [r5, #0]
 8006336:	2701      	movs	r7, #1
 8006338:	1cb5      	adds	r5, r6, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d05b      	beq.n	80063f6 <_strtol_l.constprop.0+0xf6>
 800633e:	2b10      	cmp	r3, #16
 8006340:	d109      	bne.n	8006356 <_strtol_l.constprop.0+0x56>
 8006342:	2c30      	cmp	r4, #48	; 0x30
 8006344:	d107      	bne.n	8006356 <_strtol_l.constprop.0+0x56>
 8006346:	782c      	ldrb	r4, [r5, #0]
 8006348:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800634c:	2c58      	cmp	r4, #88	; 0x58
 800634e:	d14d      	bne.n	80063ec <_strtol_l.constprop.0+0xec>
 8006350:	786c      	ldrb	r4, [r5, #1]
 8006352:	2310      	movs	r3, #16
 8006354:	3502      	adds	r5, #2
 8006356:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800635a:	f108 38ff 	add.w	r8, r8, #4294967295
 800635e:	f04f 0c00 	mov.w	ip, #0
 8006362:	fbb8 f9f3 	udiv	r9, r8, r3
 8006366:	4666      	mov	r6, ip
 8006368:	fb03 8a19 	mls	sl, r3, r9, r8
 800636c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006370:	f1be 0f09 	cmp.w	lr, #9
 8006374:	d816      	bhi.n	80063a4 <_strtol_l.constprop.0+0xa4>
 8006376:	4674      	mov	r4, lr
 8006378:	42a3      	cmp	r3, r4
 800637a:	dd24      	ble.n	80063c6 <_strtol_l.constprop.0+0xc6>
 800637c:	f1bc 0f00 	cmp.w	ip, #0
 8006380:	db1e      	blt.n	80063c0 <_strtol_l.constprop.0+0xc0>
 8006382:	45b1      	cmp	r9, r6
 8006384:	d31c      	bcc.n	80063c0 <_strtol_l.constprop.0+0xc0>
 8006386:	d101      	bne.n	800638c <_strtol_l.constprop.0+0x8c>
 8006388:	45a2      	cmp	sl, r4
 800638a:	db19      	blt.n	80063c0 <_strtol_l.constprop.0+0xc0>
 800638c:	fb06 4603 	mla	r6, r6, r3, r4
 8006390:	f04f 0c01 	mov.w	ip, #1
 8006394:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006398:	e7e8      	b.n	800636c <_strtol_l.constprop.0+0x6c>
 800639a:	2c2b      	cmp	r4, #43	; 0x2b
 800639c:	bf04      	itt	eq
 800639e:	782c      	ldrbeq	r4, [r5, #0]
 80063a0:	1cb5      	addeq	r5, r6, #2
 80063a2:	e7ca      	b.n	800633a <_strtol_l.constprop.0+0x3a>
 80063a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80063a8:	f1be 0f19 	cmp.w	lr, #25
 80063ac:	d801      	bhi.n	80063b2 <_strtol_l.constprop.0+0xb2>
 80063ae:	3c37      	subs	r4, #55	; 0x37
 80063b0:	e7e2      	b.n	8006378 <_strtol_l.constprop.0+0x78>
 80063b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80063b6:	f1be 0f19 	cmp.w	lr, #25
 80063ba:	d804      	bhi.n	80063c6 <_strtol_l.constprop.0+0xc6>
 80063bc:	3c57      	subs	r4, #87	; 0x57
 80063be:	e7db      	b.n	8006378 <_strtol_l.constprop.0+0x78>
 80063c0:	f04f 3cff 	mov.w	ip, #4294967295
 80063c4:	e7e6      	b.n	8006394 <_strtol_l.constprop.0+0x94>
 80063c6:	f1bc 0f00 	cmp.w	ip, #0
 80063ca:	da05      	bge.n	80063d8 <_strtol_l.constprop.0+0xd8>
 80063cc:	2322      	movs	r3, #34	; 0x22
 80063ce:	6003      	str	r3, [r0, #0]
 80063d0:	4646      	mov	r6, r8
 80063d2:	b942      	cbnz	r2, 80063e6 <_strtol_l.constprop.0+0xe6>
 80063d4:	4630      	mov	r0, r6
 80063d6:	e79e      	b.n	8006316 <_strtol_l.constprop.0+0x16>
 80063d8:	b107      	cbz	r7, 80063dc <_strtol_l.constprop.0+0xdc>
 80063da:	4276      	negs	r6, r6
 80063dc:	2a00      	cmp	r2, #0
 80063de:	d0f9      	beq.n	80063d4 <_strtol_l.constprop.0+0xd4>
 80063e0:	f1bc 0f00 	cmp.w	ip, #0
 80063e4:	d000      	beq.n	80063e8 <_strtol_l.constprop.0+0xe8>
 80063e6:	1e69      	subs	r1, r5, #1
 80063e8:	6011      	str	r1, [r2, #0]
 80063ea:	e7f3      	b.n	80063d4 <_strtol_l.constprop.0+0xd4>
 80063ec:	2430      	movs	r4, #48	; 0x30
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1b1      	bne.n	8006356 <_strtol_l.constprop.0+0x56>
 80063f2:	2308      	movs	r3, #8
 80063f4:	e7af      	b.n	8006356 <_strtol_l.constprop.0+0x56>
 80063f6:	2c30      	cmp	r4, #48	; 0x30
 80063f8:	d0a5      	beq.n	8006346 <_strtol_l.constprop.0+0x46>
 80063fa:	230a      	movs	r3, #10
 80063fc:	e7ab      	b.n	8006356 <_strtol_l.constprop.0+0x56>
 80063fe:	bf00      	nop
 8006400:	08009419 	.word	0x08009419

08006404 <_strtol_r>:
 8006404:	f7ff bf7c 	b.w	8006300 <_strtol_l.constprop.0>

08006408 <quorem>:
 8006408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	6903      	ldr	r3, [r0, #16]
 800640e:	690c      	ldr	r4, [r1, #16]
 8006410:	42a3      	cmp	r3, r4
 8006412:	4607      	mov	r7, r0
 8006414:	f2c0 8081 	blt.w	800651a <quorem+0x112>
 8006418:	3c01      	subs	r4, #1
 800641a:	f101 0814 	add.w	r8, r1, #20
 800641e:	f100 0514 	add.w	r5, r0, #20
 8006422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800642c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006430:	3301      	adds	r3, #1
 8006432:	429a      	cmp	r2, r3
 8006434:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006438:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800643c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006440:	d331      	bcc.n	80064a6 <quorem+0x9e>
 8006442:	f04f 0e00 	mov.w	lr, #0
 8006446:	4640      	mov	r0, r8
 8006448:	46ac      	mov	ip, r5
 800644a:	46f2      	mov	sl, lr
 800644c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006450:	b293      	uxth	r3, r2
 8006452:	fb06 e303 	mla	r3, r6, r3, lr
 8006456:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800645a:	b29b      	uxth	r3, r3
 800645c:	ebaa 0303 	sub.w	r3, sl, r3
 8006460:	f8dc a000 	ldr.w	sl, [ip]
 8006464:	0c12      	lsrs	r2, r2, #16
 8006466:	fa13 f38a 	uxtah	r3, r3, sl
 800646a:	fb06 e202 	mla	r2, r6, r2, lr
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	9b00      	ldr	r3, [sp, #0]
 8006472:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006476:	b292      	uxth	r2, r2
 8006478:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800647c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006480:	f8bd 3000 	ldrh.w	r3, [sp]
 8006484:	4581      	cmp	r9, r0
 8006486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800648a:	f84c 3b04 	str.w	r3, [ip], #4
 800648e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006492:	d2db      	bcs.n	800644c <quorem+0x44>
 8006494:	f855 300b 	ldr.w	r3, [r5, fp]
 8006498:	b92b      	cbnz	r3, 80064a6 <quorem+0x9e>
 800649a:	9b01      	ldr	r3, [sp, #4]
 800649c:	3b04      	subs	r3, #4
 800649e:	429d      	cmp	r5, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	d32e      	bcc.n	8006502 <quorem+0xfa>
 80064a4:	613c      	str	r4, [r7, #16]
 80064a6:	4638      	mov	r0, r7
 80064a8:	f001 fc90 	bl	8007dcc <__mcmp>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	db24      	blt.n	80064fa <quorem+0xf2>
 80064b0:	3601      	adds	r6, #1
 80064b2:	4628      	mov	r0, r5
 80064b4:	f04f 0c00 	mov.w	ip, #0
 80064b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80064bc:	f8d0 e000 	ldr.w	lr, [r0]
 80064c0:	b293      	uxth	r3, r2
 80064c2:	ebac 0303 	sub.w	r3, ip, r3
 80064c6:	0c12      	lsrs	r2, r2, #16
 80064c8:	fa13 f38e 	uxtah	r3, r3, lr
 80064cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064da:	45c1      	cmp	r9, r8
 80064dc:	f840 3b04 	str.w	r3, [r0], #4
 80064e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064e4:	d2e8      	bcs.n	80064b8 <quorem+0xb0>
 80064e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ee:	b922      	cbnz	r2, 80064fa <quorem+0xf2>
 80064f0:	3b04      	subs	r3, #4
 80064f2:	429d      	cmp	r5, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	d30a      	bcc.n	800650e <quorem+0x106>
 80064f8:	613c      	str	r4, [r7, #16]
 80064fa:	4630      	mov	r0, r6
 80064fc:	b003      	add	sp, #12
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	3b04      	subs	r3, #4
 8006506:	2a00      	cmp	r2, #0
 8006508:	d1cc      	bne.n	80064a4 <quorem+0x9c>
 800650a:	3c01      	subs	r4, #1
 800650c:	e7c7      	b.n	800649e <quorem+0x96>
 800650e:	6812      	ldr	r2, [r2, #0]
 8006510:	3b04      	subs	r3, #4
 8006512:	2a00      	cmp	r2, #0
 8006514:	d1f0      	bne.n	80064f8 <quorem+0xf0>
 8006516:	3c01      	subs	r4, #1
 8006518:	e7eb      	b.n	80064f2 <quorem+0xea>
 800651a:	2000      	movs	r0, #0
 800651c:	e7ee      	b.n	80064fc <quorem+0xf4>
	...

08006520 <_dtoa_r>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	ed2d 8b04 	vpush	{d8-d9}
 8006528:	ec57 6b10 	vmov	r6, r7, d0
 800652c:	b093      	sub	sp, #76	; 0x4c
 800652e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006530:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006534:	9106      	str	r1, [sp, #24]
 8006536:	ee10 aa10 	vmov	sl, s0
 800653a:	4604      	mov	r4, r0
 800653c:	9209      	str	r2, [sp, #36]	; 0x24
 800653e:	930c      	str	r3, [sp, #48]	; 0x30
 8006540:	46bb      	mov	fp, r7
 8006542:	b975      	cbnz	r5, 8006562 <_dtoa_r+0x42>
 8006544:	2010      	movs	r0, #16
 8006546:	f001 f94d 	bl	80077e4 <malloc>
 800654a:	4602      	mov	r2, r0
 800654c:	6260      	str	r0, [r4, #36]	; 0x24
 800654e:	b920      	cbnz	r0, 800655a <_dtoa_r+0x3a>
 8006550:	4ba7      	ldr	r3, [pc, #668]	; (80067f0 <_dtoa_r+0x2d0>)
 8006552:	21ea      	movs	r1, #234	; 0xea
 8006554:	48a7      	ldr	r0, [pc, #668]	; (80067f4 <_dtoa_r+0x2d4>)
 8006556:	f002 f8bd 	bl	80086d4 <__assert_func>
 800655a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800655e:	6005      	str	r5, [r0, #0]
 8006560:	60c5      	str	r5, [r0, #12]
 8006562:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006564:	6819      	ldr	r1, [r3, #0]
 8006566:	b151      	cbz	r1, 800657e <_dtoa_r+0x5e>
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	604a      	str	r2, [r1, #4]
 800656c:	2301      	movs	r3, #1
 800656e:	4093      	lsls	r3, r2
 8006570:	608b      	str	r3, [r1, #8]
 8006572:	4620      	mov	r0, r4
 8006574:	f001 f99e 	bl	80078b4 <_Bfree>
 8006578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	1e3b      	subs	r3, r7, #0
 8006580:	bfaa      	itet	ge
 8006582:	2300      	movge	r3, #0
 8006584:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006588:	f8c8 3000 	strge.w	r3, [r8]
 800658c:	4b9a      	ldr	r3, [pc, #616]	; (80067f8 <_dtoa_r+0x2d8>)
 800658e:	bfbc      	itt	lt
 8006590:	2201      	movlt	r2, #1
 8006592:	f8c8 2000 	strlt.w	r2, [r8]
 8006596:	ea33 030b 	bics.w	r3, r3, fp
 800659a:	d11b      	bne.n	80065d4 <_dtoa_r+0xb4>
 800659c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800659e:	f242 730f 	movw	r3, #9999	; 0x270f
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065a8:	4333      	orrs	r3, r6
 80065aa:	f000 8592 	beq.w	80070d2 <_dtoa_r+0xbb2>
 80065ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065b0:	b963      	cbnz	r3, 80065cc <_dtoa_r+0xac>
 80065b2:	4b92      	ldr	r3, [pc, #584]	; (80067fc <_dtoa_r+0x2dc>)
 80065b4:	e022      	b.n	80065fc <_dtoa_r+0xdc>
 80065b6:	4b92      	ldr	r3, [pc, #584]	; (8006800 <_dtoa_r+0x2e0>)
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	3308      	adds	r3, #8
 80065bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	9801      	ldr	r0, [sp, #4]
 80065c2:	b013      	add	sp, #76	; 0x4c
 80065c4:	ecbd 8b04 	vpop	{d8-d9}
 80065c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065cc:	4b8b      	ldr	r3, [pc, #556]	; (80067fc <_dtoa_r+0x2dc>)
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	3303      	adds	r3, #3
 80065d2:	e7f3      	b.n	80065bc <_dtoa_r+0x9c>
 80065d4:	2200      	movs	r2, #0
 80065d6:	2300      	movs	r3, #0
 80065d8:	4650      	mov	r0, sl
 80065da:	4659      	mov	r1, fp
 80065dc:	f7fa fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80065e0:	ec4b ab19 	vmov	d9, sl, fp
 80065e4:	4680      	mov	r8, r0
 80065e6:	b158      	cbz	r0, 8006600 <_dtoa_r+0xe0>
 80065e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065ea:	2301      	movs	r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 856b 	beq.w	80070cc <_dtoa_r+0xbac>
 80065f6:	4883      	ldr	r0, [pc, #524]	; (8006804 <_dtoa_r+0x2e4>)
 80065f8:	6018      	str	r0, [r3, #0]
 80065fa:	1e43      	subs	r3, r0, #1
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	e7df      	b.n	80065c0 <_dtoa_r+0xa0>
 8006600:	ec4b ab10 	vmov	d0, sl, fp
 8006604:	aa10      	add	r2, sp, #64	; 0x40
 8006606:	a911      	add	r1, sp, #68	; 0x44
 8006608:	4620      	mov	r0, r4
 800660a:	f001 fd01 	bl	8008010 <__d2b>
 800660e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006612:	ee08 0a10 	vmov	s16, r0
 8006616:	2d00      	cmp	r5, #0
 8006618:	f000 8084 	beq.w	8006724 <_dtoa_r+0x204>
 800661c:	ee19 3a90 	vmov	r3, s19
 8006620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006624:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006628:	4656      	mov	r6, sl
 800662a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800662e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006632:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006636:	4b74      	ldr	r3, [pc, #464]	; (8006808 <_dtoa_r+0x2e8>)
 8006638:	2200      	movs	r2, #0
 800663a:	4630      	mov	r0, r6
 800663c:	4639      	mov	r1, r7
 800663e:	f7f9 fe2b 	bl	8000298 <__aeabi_dsub>
 8006642:	a365      	add	r3, pc, #404	; (adr r3, 80067d8 <_dtoa_r+0x2b8>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 ffde 	bl	8000608 <__aeabi_dmul>
 800664c:	a364      	add	r3, pc, #400	; (adr r3, 80067e0 <_dtoa_r+0x2c0>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7f9 fe23 	bl	800029c <__adddf3>
 8006656:	4606      	mov	r6, r0
 8006658:	4628      	mov	r0, r5
 800665a:	460f      	mov	r7, r1
 800665c:	f7f9 ff6a 	bl	8000534 <__aeabi_i2d>
 8006660:	a361      	add	r3, pc, #388	; (adr r3, 80067e8 <_dtoa_r+0x2c8>)
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f7f9 ffcf 	bl	8000608 <__aeabi_dmul>
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4630      	mov	r0, r6
 8006670:	4639      	mov	r1, r7
 8006672:	f7f9 fe13 	bl	800029c <__adddf3>
 8006676:	4606      	mov	r6, r0
 8006678:	460f      	mov	r7, r1
 800667a:	f7fa fa75 	bl	8000b68 <__aeabi_d2iz>
 800667e:	2200      	movs	r2, #0
 8006680:	9000      	str	r0, [sp, #0]
 8006682:	2300      	movs	r3, #0
 8006684:	4630      	mov	r0, r6
 8006686:	4639      	mov	r1, r7
 8006688:	f7fa fa30 	bl	8000aec <__aeabi_dcmplt>
 800668c:	b150      	cbz	r0, 80066a4 <_dtoa_r+0x184>
 800668e:	9800      	ldr	r0, [sp, #0]
 8006690:	f7f9 ff50 	bl	8000534 <__aeabi_i2d>
 8006694:	4632      	mov	r2, r6
 8006696:	463b      	mov	r3, r7
 8006698:	f7fa fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800669c:	b910      	cbnz	r0, 80066a4 <_dtoa_r+0x184>
 800669e:	9b00      	ldr	r3, [sp, #0]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	9b00      	ldr	r3, [sp, #0]
 80066a6:	2b16      	cmp	r3, #22
 80066a8:	d85a      	bhi.n	8006760 <_dtoa_r+0x240>
 80066aa:	9a00      	ldr	r2, [sp, #0]
 80066ac:	4b57      	ldr	r3, [pc, #348]	; (800680c <_dtoa_r+0x2ec>)
 80066ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b6:	ec51 0b19 	vmov	r0, r1, d9
 80066ba:	f7fa fa17 	bl	8000aec <__aeabi_dcmplt>
 80066be:	2800      	cmp	r0, #0
 80066c0:	d050      	beq.n	8006764 <_dtoa_r+0x244>
 80066c2:	9b00      	ldr	r3, [sp, #0]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	2300      	movs	r3, #0
 80066ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80066cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066ce:	1b5d      	subs	r5, r3, r5
 80066d0:	1e6b      	subs	r3, r5, #1
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	bf45      	ittet	mi
 80066d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80066da:	9304      	strmi	r3, [sp, #16]
 80066dc:	2300      	movpl	r3, #0
 80066de:	2300      	movmi	r3, #0
 80066e0:	bf4c      	ite	mi
 80066e2:	9305      	strmi	r3, [sp, #20]
 80066e4:	9304      	strpl	r3, [sp, #16]
 80066e6:	9b00      	ldr	r3, [sp, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	db3d      	blt.n	8006768 <_dtoa_r+0x248>
 80066ec:	9b05      	ldr	r3, [sp, #20]
 80066ee:	9a00      	ldr	r2, [sp, #0]
 80066f0:	920a      	str	r2, [sp, #40]	; 0x28
 80066f2:	4413      	add	r3, r2
 80066f4:	9305      	str	r3, [sp, #20]
 80066f6:	2300      	movs	r3, #0
 80066f8:	9307      	str	r3, [sp, #28]
 80066fa:	9b06      	ldr	r3, [sp, #24]
 80066fc:	2b09      	cmp	r3, #9
 80066fe:	f200 8089 	bhi.w	8006814 <_dtoa_r+0x2f4>
 8006702:	2b05      	cmp	r3, #5
 8006704:	bfc4      	itt	gt
 8006706:	3b04      	subgt	r3, #4
 8006708:	9306      	strgt	r3, [sp, #24]
 800670a:	9b06      	ldr	r3, [sp, #24]
 800670c:	f1a3 0302 	sub.w	r3, r3, #2
 8006710:	bfcc      	ite	gt
 8006712:	2500      	movgt	r5, #0
 8006714:	2501      	movle	r5, #1
 8006716:	2b03      	cmp	r3, #3
 8006718:	f200 8087 	bhi.w	800682a <_dtoa_r+0x30a>
 800671c:	e8df f003 	tbb	[pc, r3]
 8006720:	59383a2d 	.word	0x59383a2d
 8006724:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006728:	441d      	add	r5, r3
 800672a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800672e:	2b20      	cmp	r3, #32
 8006730:	bfc1      	itttt	gt
 8006732:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006736:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800673a:	fa0b f303 	lslgt.w	r3, fp, r3
 800673e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006742:	bfda      	itte	le
 8006744:	f1c3 0320 	rsble	r3, r3, #32
 8006748:	fa06 f003 	lslle.w	r0, r6, r3
 800674c:	4318      	orrgt	r0, r3
 800674e:	f7f9 fee1 	bl	8000514 <__aeabi_ui2d>
 8006752:	2301      	movs	r3, #1
 8006754:	4606      	mov	r6, r0
 8006756:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800675a:	3d01      	subs	r5, #1
 800675c:	930e      	str	r3, [sp, #56]	; 0x38
 800675e:	e76a      	b.n	8006636 <_dtoa_r+0x116>
 8006760:	2301      	movs	r3, #1
 8006762:	e7b2      	b.n	80066ca <_dtoa_r+0x1aa>
 8006764:	900b      	str	r0, [sp, #44]	; 0x2c
 8006766:	e7b1      	b.n	80066cc <_dtoa_r+0x1ac>
 8006768:	9b04      	ldr	r3, [sp, #16]
 800676a:	9a00      	ldr	r2, [sp, #0]
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	4253      	negs	r3, r2
 8006772:	9307      	str	r3, [sp, #28]
 8006774:	2300      	movs	r3, #0
 8006776:	930a      	str	r3, [sp, #40]	; 0x28
 8006778:	e7bf      	b.n	80066fa <_dtoa_r+0x1da>
 800677a:	2300      	movs	r3, #0
 800677c:	9308      	str	r3, [sp, #32]
 800677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	dc55      	bgt.n	8006830 <_dtoa_r+0x310>
 8006784:	2301      	movs	r3, #1
 8006786:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800678a:	461a      	mov	r2, r3
 800678c:	9209      	str	r2, [sp, #36]	; 0x24
 800678e:	e00c      	b.n	80067aa <_dtoa_r+0x28a>
 8006790:	2301      	movs	r3, #1
 8006792:	e7f3      	b.n	800677c <_dtoa_r+0x25c>
 8006794:	2300      	movs	r3, #0
 8006796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006798:	9308      	str	r3, [sp, #32]
 800679a:	9b00      	ldr	r3, [sp, #0]
 800679c:	4413      	add	r3, r2
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	3301      	adds	r3, #1
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	9303      	str	r3, [sp, #12]
 80067a6:	bfb8      	it	lt
 80067a8:	2301      	movlt	r3, #1
 80067aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80067ac:	2200      	movs	r2, #0
 80067ae:	6042      	str	r2, [r0, #4]
 80067b0:	2204      	movs	r2, #4
 80067b2:	f102 0614 	add.w	r6, r2, #20
 80067b6:	429e      	cmp	r6, r3
 80067b8:	6841      	ldr	r1, [r0, #4]
 80067ba:	d93d      	bls.n	8006838 <_dtoa_r+0x318>
 80067bc:	4620      	mov	r0, r4
 80067be:	f001 f839 	bl	8007834 <_Balloc>
 80067c2:	9001      	str	r0, [sp, #4]
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d13b      	bne.n	8006840 <_dtoa_r+0x320>
 80067c8:	4b11      	ldr	r3, [pc, #68]	; (8006810 <_dtoa_r+0x2f0>)
 80067ca:	4602      	mov	r2, r0
 80067cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067d0:	e6c0      	b.n	8006554 <_dtoa_r+0x34>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7df      	b.n	8006796 <_dtoa_r+0x276>
 80067d6:	bf00      	nop
 80067d8:	636f4361 	.word	0x636f4361
 80067dc:	3fd287a7 	.word	0x3fd287a7
 80067e0:	8b60c8b3 	.word	0x8b60c8b3
 80067e4:	3fc68a28 	.word	0x3fc68a28
 80067e8:	509f79fb 	.word	0x509f79fb
 80067ec:	3fd34413 	.word	0x3fd34413
 80067f0:	08009526 	.word	0x08009526
 80067f4:	0800953d 	.word	0x0800953d
 80067f8:	7ff00000 	.word	0x7ff00000
 80067fc:	08009522 	.word	0x08009522
 8006800:	08009519 	.word	0x08009519
 8006804:	08009399 	.word	0x08009399
 8006808:	3ff80000 	.word	0x3ff80000
 800680c:	080096a8 	.word	0x080096a8
 8006810:	08009598 	.word	0x08009598
 8006814:	2501      	movs	r5, #1
 8006816:	2300      	movs	r3, #0
 8006818:	9306      	str	r3, [sp, #24]
 800681a:	9508      	str	r5, [sp, #32]
 800681c:	f04f 33ff 	mov.w	r3, #4294967295
 8006820:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006824:	2200      	movs	r2, #0
 8006826:	2312      	movs	r3, #18
 8006828:	e7b0      	b.n	800678c <_dtoa_r+0x26c>
 800682a:	2301      	movs	r3, #1
 800682c:	9308      	str	r3, [sp, #32]
 800682e:	e7f5      	b.n	800681c <_dtoa_r+0x2fc>
 8006830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006832:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006836:	e7b8      	b.n	80067aa <_dtoa_r+0x28a>
 8006838:	3101      	adds	r1, #1
 800683a:	6041      	str	r1, [r0, #4]
 800683c:	0052      	lsls	r2, r2, #1
 800683e:	e7b8      	b.n	80067b2 <_dtoa_r+0x292>
 8006840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006842:	9a01      	ldr	r2, [sp, #4]
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	2b0e      	cmp	r3, #14
 800684a:	f200 809d 	bhi.w	8006988 <_dtoa_r+0x468>
 800684e:	2d00      	cmp	r5, #0
 8006850:	f000 809a 	beq.w	8006988 <_dtoa_r+0x468>
 8006854:	9b00      	ldr	r3, [sp, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	dd32      	ble.n	80068c0 <_dtoa_r+0x3a0>
 800685a:	4ab7      	ldr	r2, [pc, #732]	; (8006b38 <_dtoa_r+0x618>)
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006864:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006868:	9b00      	ldr	r3, [sp, #0]
 800686a:	05d8      	lsls	r0, r3, #23
 800686c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006870:	d516      	bpl.n	80068a0 <_dtoa_r+0x380>
 8006872:	4bb2      	ldr	r3, [pc, #712]	; (8006b3c <_dtoa_r+0x61c>)
 8006874:	ec51 0b19 	vmov	r0, r1, d9
 8006878:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800687c:	f7f9 ffee 	bl	800085c <__aeabi_ddiv>
 8006880:	f007 070f 	and.w	r7, r7, #15
 8006884:	4682      	mov	sl, r0
 8006886:	468b      	mov	fp, r1
 8006888:	2503      	movs	r5, #3
 800688a:	4eac      	ldr	r6, [pc, #688]	; (8006b3c <_dtoa_r+0x61c>)
 800688c:	b957      	cbnz	r7, 80068a4 <_dtoa_r+0x384>
 800688e:	4642      	mov	r2, r8
 8006890:	464b      	mov	r3, r9
 8006892:	4650      	mov	r0, sl
 8006894:	4659      	mov	r1, fp
 8006896:	f7f9 ffe1 	bl	800085c <__aeabi_ddiv>
 800689a:	4682      	mov	sl, r0
 800689c:	468b      	mov	fp, r1
 800689e:	e028      	b.n	80068f2 <_dtoa_r+0x3d2>
 80068a0:	2502      	movs	r5, #2
 80068a2:	e7f2      	b.n	800688a <_dtoa_r+0x36a>
 80068a4:	07f9      	lsls	r1, r7, #31
 80068a6:	d508      	bpl.n	80068ba <_dtoa_r+0x39a>
 80068a8:	4640      	mov	r0, r8
 80068aa:	4649      	mov	r1, r9
 80068ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068b0:	f7f9 feaa 	bl	8000608 <__aeabi_dmul>
 80068b4:	3501      	adds	r5, #1
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	107f      	asrs	r7, r7, #1
 80068bc:	3608      	adds	r6, #8
 80068be:	e7e5      	b.n	800688c <_dtoa_r+0x36c>
 80068c0:	f000 809b 	beq.w	80069fa <_dtoa_r+0x4da>
 80068c4:	9b00      	ldr	r3, [sp, #0]
 80068c6:	4f9d      	ldr	r7, [pc, #628]	; (8006b3c <_dtoa_r+0x61c>)
 80068c8:	425e      	negs	r6, r3
 80068ca:	4b9b      	ldr	r3, [pc, #620]	; (8006b38 <_dtoa_r+0x618>)
 80068cc:	f006 020f 	and.w	r2, r6, #15
 80068d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d8:	ec51 0b19 	vmov	r0, r1, d9
 80068dc:	f7f9 fe94 	bl	8000608 <__aeabi_dmul>
 80068e0:	1136      	asrs	r6, r6, #4
 80068e2:	4682      	mov	sl, r0
 80068e4:	468b      	mov	fp, r1
 80068e6:	2300      	movs	r3, #0
 80068e8:	2502      	movs	r5, #2
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	d17a      	bne.n	80069e4 <_dtoa_r+0x4c4>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1d3      	bne.n	800689a <_dtoa_r+0x37a>
 80068f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8082 	beq.w	80069fe <_dtoa_r+0x4de>
 80068fa:	4b91      	ldr	r3, [pc, #580]	; (8006b40 <_dtoa_r+0x620>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	4650      	mov	r0, sl
 8006900:	4659      	mov	r1, fp
 8006902:	f7fa f8f3 	bl	8000aec <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	d079      	beq.n	80069fe <_dtoa_r+0x4de>
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d076      	beq.n	80069fe <_dtoa_r+0x4de>
 8006910:	9b02      	ldr	r3, [sp, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	dd36      	ble.n	8006984 <_dtoa_r+0x464>
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	4650      	mov	r0, sl
 800691a:	4659      	mov	r1, fp
 800691c:	1e5f      	subs	r7, r3, #1
 800691e:	2200      	movs	r2, #0
 8006920:	4b88      	ldr	r3, [pc, #544]	; (8006b44 <_dtoa_r+0x624>)
 8006922:	f7f9 fe71 	bl	8000608 <__aeabi_dmul>
 8006926:	9e02      	ldr	r6, [sp, #8]
 8006928:	4682      	mov	sl, r0
 800692a:	468b      	mov	fp, r1
 800692c:	3501      	adds	r5, #1
 800692e:	4628      	mov	r0, r5
 8006930:	f7f9 fe00 	bl	8000534 <__aeabi_i2d>
 8006934:	4652      	mov	r2, sl
 8006936:	465b      	mov	r3, fp
 8006938:	f7f9 fe66 	bl	8000608 <__aeabi_dmul>
 800693c:	4b82      	ldr	r3, [pc, #520]	; (8006b48 <_dtoa_r+0x628>)
 800693e:	2200      	movs	r2, #0
 8006940:	f7f9 fcac 	bl	800029c <__adddf3>
 8006944:	46d0      	mov	r8, sl
 8006946:	46d9      	mov	r9, fp
 8006948:	4682      	mov	sl, r0
 800694a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800694e:	2e00      	cmp	r6, #0
 8006950:	d158      	bne.n	8006a04 <_dtoa_r+0x4e4>
 8006952:	4b7e      	ldr	r3, [pc, #504]	; (8006b4c <_dtoa_r+0x62c>)
 8006954:	2200      	movs	r2, #0
 8006956:	4640      	mov	r0, r8
 8006958:	4649      	mov	r1, r9
 800695a:	f7f9 fc9d 	bl	8000298 <__aeabi_dsub>
 800695e:	4652      	mov	r2, sl
 8006960:	465b      	mov	r3, fp
 8006962:	4680      	mov	r8, r0
 8006964:	4689      	mov	r9, r1
 8006966:	f7fa f8df 	bl	8000b28 <__aeabi_dcmpgt>
 800696a:	2800      	cmp	r0, #0
 800696c:	f040 8295 	bne.w	8006e9a <_dtoa_r+0x97a>
 8006970:	4652      	mov	r2, sl
 8006972:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006976:	4640      	mov	r0, r8
 8006978:	4649      	mov	r1, r9
 800697a:	f7fa f8b7 	bl	8000aec <__aeabi_dcmplt>
 800697e:	2800      	cmp	r0, #0
 8006980:	f040 8289 	bne.w	8006e96 <_dtoa_r+0x976>
 8006984:	ec5b ab19 	vmov	sl, fp, d9
 8006988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800698a:	2b00      	cmp	r3, #0
 800698c:	f2c0 8148 	blt.w	8006c20 <_dtoa_r+0x700>
 8006990:	9a00      	ldr	r2, [sp, #0]
 8006992:	2a0e      	cmp	r2, #14
 8006994:	f300 8144 	bgt.w	8006c20 <_dtoa_r+0x700>
 8006998:	4b67      	ldr	r3, [pc, #412]	; (8006b38 <_dtoa_r+0x618>)
 800699a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800699e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f280 80d5 	bge.w	8006b54 <_dtoa_r+0x634>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f300 80d1 	bgt.w	8006b54 <_dtoa_r+0x634>
 80069b2:	f040 826f 	bne.w	8006e94 <_dtoa_r+0x974>
 80069b6:	4b65      	ldr	r3, [pc, #404]	; (8006b4c <_dtoa_r+0x62c>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 fe23 	bl	8000608 <__aeabi_dmul>
 80069c2:	4652      	mov	r2, sl
 80069c4:	465b      	mov	r3, fp
 80069c6:	f7fa f8a5 	bl	8000b14 <__aeabi_dcmpge>
 80069ca:	9e03      	ldr	r6, [sp, #12]
 80069cc:	4637      	mov	r7, r6
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f040 8245 	bne.w	8006e5e <_dtoa_r+0x93e>
 80069d4:	9d01      	ldr	r5, [sp, #4]
 80069d6:	2331      	movs	r3, #49	; 0x31
 80069d8:	f805 3b01 	strb.w	r3, [r5], #1
 80069dc:	9b00      	ldr	r3, [sp, #0]
 80069de:	3301      	adds	r3, #1
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	e240      	b.n	8006e66 <_dtoa_r+0x946>
 80069e4:	07f2      	lsls	r2, r6, #31
 80069e6:	d505      	bpl.n	80069f4 <_dtoa_r+0x4d4>
 80069e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ec:	f7f9 fe0c 	bl	8000608 <__aeabi_dmul>
 80069f0:	3501      	adds	r5, #1
 80069f2:	2301      	movs	r3, #1
 80069f4:	1076      	asrs	r6, r6, #1
 80069f6:	3708      	adds	r7, #8
 80069f8:	e777      	b.n	80068ea <_dtoa_r+0x3ca>
 80069fa:	2502      	movs	r5, #2
 80069fc:	e779      	b.n	80068f2 <_dtoa_r+0x3d2>
 80069fe:	9f00      	ldr	r7, [sp, #0]
 8006a00:	9e03      	ldr	r6, [sp, #12]
 8006a02:	e794      	b.n	800692e <_dtoa_r+0x40e>
 8006a04:	9901      	ldr	r1, [sp, #4]
 8006a06:	4b4c      	ldr	r3, [pc, #304]	; (8006b38 <_dtoa_r+0x618>)
 8006a08:	4431      	add	r1, r6
 8006a0a:	910d      	str	r1, [sp, #52]	; 0x34
 8006a0c:	9908      	ldr	r1, [sp, #32]
 8006a0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a16:	2900      	cmp	r1, #0
 8006a18:	d043      	beq.n	8006aa2 <_dtoa_r+0x582>
 8006a1a:	494d      	ldr	r1, [pc, #308]	; (8006b50 <_dtoa_r+0x630>)
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	f7f9 ff1d 	bl	800085c <__aeabi_ddiv>
 8006a22:	4652      	mov	r2, sl
 8006a24:	465b      	mov	r3, fp
 8006a26:	f7f9 fc37 	bl	8000298 <__aeabi_dsub>
 8006a2a:	9d01      	ldr	r5, [sp, #4]
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	468b      	mov	fp, r1
 8006a30:	4649      	mov	r1, r9
 8006a32:	4640      	mov	r0, r8
 8006a34:	f7fa f898 	bl	8000b68 <__aeabi_d2iz>
 8006a38:	4606      	mov	r6, r0
 8006a3a:	f7f9 fd7b 	bl	8000534 <__aeabi_i2d>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	460b      	mov	r3, r1
 8006a42:	4640      	mov	r0, r8
 8006a44:	4649      	mov	r1, r9
 8006a46:	f7f9 fc27 	bl	8000298 <__aeabi_dsub>
 8006a4a:	3630      	adds	r6, #48	; 0x30
 8006a4c:	f805 6b01 	strb.w	r6, [r5], #1
 8006a50:	4652      	mov	r2, sl
 8006a52:	465b      	mov	r3, fp
 8006a54:	4680      	mov	r8, r0
 8006a56:	4689      	mov	r9, r1
 8006a58:	f7fa f848 	bl	8000aec <__aeabi_dcmplt>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	d163      	bne.n	8006b28 <_dtoa_r+0x608>
 8006a60:	4642      	mov	r2, r8
 8006a62:	464b      	mov	r3, r9
 8006a64:	4936      	ldr	r1, [pc, #216]	; (8006b40 <_dtoa_r+0x620>)
 8006a66:	2000      	movs	r0, #0
 8006a68:	f7f9 fc16 	bl	8000298 <__aeabi_dsub>
 8006a6c:	4652      	mov	r2, sl
 8006a6e:	465b      	mov	r3, fp
 8006a70:	f7fa f83c 	bl	8000aec <__aeabi_dcmplt>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	f040 80b5 	bne.w	8006be4 <_dtoa_r+0x6c4>
 8006a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a7c:	429d      	cmp	r5, r3
 8006a7e:	d081      	beq.n	8006984 <_dtoa_r+0x464>
 8006a80:	4b30      	ldr	r3, [pc, #192]	; (8006b44 <_dtoa_r+0x624>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	4650      	mov	r0, sl
 8006a86:	4659      	mov	r1, fp
 8006a88:	f7f9 fdbe 	bl	8000608 <__aeabi_dmul>
 8006a8c:	4b2d      	ldr	r3, [pc, #180]	; (8006b44 <_dtoa_r+0x624>)
 8006a8e:	4682      	mov	sl, r0
 8006a90:	468b      	mov	fp, r1
 8006a92:	4640      	mov	r0, r8
 8006a94:	4649      	mov	r1, r9
 8006a96:	2200      	movs	r2, #0
 8006a98:	f7f9 fdb6 	bl	8000608 <__aeabi_dmul>
 8006a9c:	4680      	mov	r8, r0
 8006a9e:	4689      	mov	r9, r1
 8006aa0:	e7c6      	b.n	8006a30 <_dtoa_r+0x510>
 8006aa2:	4650      	mov	r0, sl
 8006aa4:	4659      	mov	r1, fp
 8006aa6:	f7f9 fdaf 	bl	8000608 <__aeabi_dmul>
 8006aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aac:	9d01      	ldr	r5, [sp, #4]
 8006aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab0:	4682      	mov	sl, r0
 8006ab2:	468b      	mov	fp, r1
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	4640      	mov	r0, r8
 8006ab8:	f7fa f856 	bl	8000b68 <__aeabi_d2iz>
 8006abc:	4606      	mov	r6, r0
 8006abe:	f7f9 fd39 	bl	8000534 <__aeabi_i2d>
 8006ac2:	3630      	adds	r6, #48	; 0x30
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7f9 fbe4 	bl	8000298 <__aeabi_dsub>
 8006ad0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	4680      	mov	r8, r0
 8006ada:	4689      	mov	r9, r1
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	d124      	bne.n	8006b2c <_dtoa_r+0x60c>
 8006ae2:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <_dtoa_r+0x630>)
 8006ae4:	4650      	mov	r0, sl
 8006ae6:	4659      	mov	r1, fp
 8006ae8:	f7f9 fbd8 	bl	800029c <__adddf3>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	f7fa f818 	bl	8000b28 <__aeabi_dcmpgt>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d173      	bne.n	8006be4 <_dtoa_r+0x6c4>
 8006afc:	4652      	mov	r2, sl
 8006afe:	465b      	mov	r3, fp
 8006b00:	4913      	ldr	r1, [pc, #76]	; (8006b50 <_dtoa_r+0x630>)
 8006b02:	2000      	movs	r0, #0
 8006b04:	f7f9 fbc8 	bl	8000298 <__aeabi_dsub>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4649      	mov	r1, r9
 8006b10:	f7f9 ffec 	bl	8000aec <__aeabi_dcmplt>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	f43f af35 	beq.w	8006984 <_dtoa_r+0x464>
 8006b1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b1c:	1e6b      	subs	r3, r5, #1
 8006b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b24:	2b30      	cmp	r3, #48	; 0x30
 8006b26:	d0f8      	beq.n	8006b1a <_dtoa_r+0x5fa>
 8006b28:	9700      	str	r7, [sp, #0]
 8006b2a:	e049      	b.n	8006bc0 <_dtoa_r+0x6a0>
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <_dtoa_r+0x624>)
 8006b2e:	f7f9 fd6b 	bl	8000608 <__aeabi_dmul>
 8006b32:	4680      	mov	r8, r0
 8006b34:	4689      	mov	r9, r1
 8006b36:	e7bd      	b.n	8006ab4 <_dtoa_r+0x594>
 8006b38:	080096a8 	.word	0x080096a8
 8006b3c:	08009680 	.word	0x08009680
 8006b40:	3ff00000 	.word	0x3ff00000
 8006b44:	40240000 	.word	0x40240000
 8006b48:	401c0000 	.word	0x401c0000
 8006b4c:	40140000 	.word	0x40140000
 8006b50:	3fe00000 	.word	0x3fe00000
 8006b54:	9d01      	ldr	r5, [sp, #4]
 8006b56:	4656      	mov	r6, sl
 8006b58:	465f      	mov	r7, fp
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	4630      	mov	r0, r6
 8006b60:	4639      	mov	r1, r7
 8006b62:	f7f9 fe7b 	bl	800085c <__aeabi_ddiv>
 8006b66:	f7f9 ffff 	bl	8000b68 <__aeabi_d2iz>
 8006b6a:	4682      	mov	sl, r0
 8006b6c:	f7f9 fce2 	bl	8000534 <__aeabi_i2d>
 8006b70:	4642      	mov	r2, r8
 8006b72:	464b      	mov	r3, r9
 8006b74:	f7f9 fd48 	bl	8000608 <__aeabi_dmul>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	4639      	mov	r1, r7
 8006b80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b84:	f7f9 fb88 	bl	8000298 <__aeabi_dsub>
 8006b88:	f805 6b01 	strb.w	r6, [r5], #1
 8006b8c:	9e01      	ldr	r6, [sp, #4]
 8006b8e:	9f03      	ldr	r7, [sp, #12]
 8006b90:	1bae      	subs	r6, r5, r6
 8006b92:	42b7      	cmp	r7, r6
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	d135      	bne.n	8006c06 <_dtoa_r+0x6e6>
 8006b9a:	f7f9 fb7f 	bl	800029c <__adddf3>
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460f      	mov	r7, r1
 8006ba6:	f7f9 ffbf 	bl	8000b28 <__aeabi_dcmpgt>
 8006baa:	b9d0      	cbnz	r0, 8006be2 <_dtoa_r+0x6c2>
 8006bac:	4642      	mov	r2, r8
 8006bae:	464b      	mov	r3, r9
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	f7f9 ff90 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bb8:	b110      	cbz	r0, 8006bc0 <_dtoa_r+0x6a0>
 8006bba:	f01a 0f01 	tst.w	sl, #1
 8006bbe:	d110      	bne.n	8006be2 <_dtoa_r+0x6c2>
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	f000 fe75 	bl	80078b4 <_Bfree>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	9800      	ldr	r0, [sp, #0]
 8006bce:	702b      	strb	r3, [r5, #0]
 8006bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	6018      	str	r0, [r3, #0]
 8006bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f43f acf1 	beq.w	80065c0 <_dtoa_r+0xa0>
 8006bde:	601d      	str	r5, [r3, #0]
 8006be0:	e4ee      	b.n	80065c0 <_dtoa_r+0xa0>
 8006be2:	9f00      	ldr	r7, [sp, #0]
 8006be4:	462b      	mov	r3, r5
 8006be6:	461d      	mov	r5, r3
 8006be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bec:	2a39      	cmp	r2, #57	; 0x39
 8006bee:	d106      	bne.n	8006bfe <_dtoa_r+0x6de>
 8006bf0:	9a01      	ldr	r2, [sp, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d1f7      	bne.n	8006be6 <_dtoa_r+0x6c6>
 8006bf6:	9901      	ldr	r1, [sp, #4]
 8006bf8:	2230      	movs	r2, #48	; 0x30
 8006bfa:	3701      	adds	r7, #1
 8006bfc:	700a      	strb	r2, [r1, #0]
 8006bfe:	781a      	ldrb	r2, [r3, #0]
 8006c00:	3201      	adds	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	e790      	b.n	8006b28 <_dtoa_r+0x608>
 8006c06:	4ba6      	ldr	r3, [pc, #664]	; (8006ea0 <_dtoa_r+0x980>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f7f9 fcfd 	bl	8000608 <__aeabi_dmul>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2300      	movs	r3, #0
 8006c12:	4606      	mov	r6, r0
 8006c14:	460f      	mov	r7, r1
 8006c16:	f7f9 ff5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d09d      	beq.n	8006b5a <_dtoa_r+0x63a>
 8006c1e:	e7cf      	b.n	8006bc0 <_dtoa_r+0x6a0>
 8006c20:	9a08      	ldr	r2, [sp, #32]
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	f000 80d7 	beq.w	8006dd6 <_dtoa_r+0x8b6>
 8006c28:	9a06      	ldr	r2, [sp, #24]
 8006c2a:	2a01      	cmp	r2, #1
 8006c2c:	f300 80ba 	bgt.w	8006da4 <_dtoa_r+0x884>
 8006c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	f000 80b2 	beq.w	8006d9c <_dtoa_r+0x87c>
 8006c38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c3c:	9e07      	ldr	r6, [sp, #28]
 8006c3e:	9d04      	ldr	r5, [sp, #16]
 8006c40:	9a04      	ldr	r2, [sp, #16]
 8006c42:	441a      	add	r2, r3
 8006c44:	9204      	str	r2, [sp, #16]
 8006c46:	9a05      	ldr	r2, [sp, #20]
 8006c48:	2101      	movs	r1, #1
 8006c4a:	441a      	add	r2, r3
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	9205      	str	r2, [sp, #20]
 8006c50:	f000 ff32 	bl	8007ab8 <__i2b>
 8006c54:	4607      	mov	r7, r0
 8006c56:	2d00      	cmp	r5, #0
 8006c58:	dd0c      	ble.n	8006c74 <_dtoa_r+0x754>
 8006c5a:	9b05      	ldr	r3, [sp, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dd09      	ble.n	8006c74 <_dtoa_r+0x754>
 8006c60:	42ab      	cmp	r3, r5
 8006c62:	9a04      	ldr	r2, [sp, #16]
 8006c64:	bfa8      	it	ge
 8006c66:	462b      	movge	r3, r5
 8006c68:	1ad2      	subs	r2, r2, r3
 8006c6a:	9204      	str	r2, [sp, #16]
 8006c6c:	9a05      	ldr	r2, [sp, #20]
 8006c6e:	1aed      	subs	r5, r5, r3
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	9305      	str	r3, [sp, #20]
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	b31b      	cbz	r3, 8006cc0 <_dtoa_r+0x7a0>
 8006c78:	9b08      	ldr	r3, [sp, #32]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80af 	beq.w	8006dde <_dtoa_r+0x8be>
 8006c80:	2e00      	cmp	r6, #0
 8006c82:	dd13      	ble.n	8006cac <_dtoa_r+0x78c>
 8006c84:	4639      	mov	r1, r7
 8006c86:	4632      	mov	r2, r6
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 ffd5 	bl	8007c38 <__pow5mult>
 8006c8e:	ee18 2a10 	vmov	r2, s16
 8006c92:	4601      	mov	r1, r0
 8006c94:	4607      	mov	r7, r0
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 ff24 	bl	8007ae4 <__multiply>
 8006c9c:	ee18 1a10 	vmov	r1, s16
 8006ca0:	4680      	mov	r8, r0
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f000 fe06 	bl	80078b4 <_Bfree>
 8006ca8:	ee08 8a10 	vmov	s16, r8
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	1b9a      	subs	r2, r3, r6
 8006cb0:	d006      	beq.n	8006cc0 <_dtoa_r+0x7a0>
 8006cb2:	ee18 1a10 	vmov	r1, s16
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 ffbe 	bl	8007c38 <__pow5mult>
 8006cbc:	ee08 0a10 	vmov	s16, r0
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fef8 	bl	8007ab8 <__i2b>
 8006cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	4606      	mov	r6, r0
 8006cce:	f340 8088 	ble.w	8006de2 <_dtoa_r+0x8c2>
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4601      	mov	r1, r0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f000 ffae 	bl	8007c38 <__pow5mult>
 8006cdc:	9b06      	ldr	r3, [sp, #24]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	f340 8081 	ble.w	8006de8 <_dtoa_r+0x8c8>
 8006ce6:	f04f 0800 	mov.w	r8, #0
 8006cea:	6933      	ldr	r3, [r6, #16]
 8006cec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cf0:	6918      	ldr	r0, [r3, #16]
 8006cf2:	f000 fe91 	bl	8007a18 <__hi0bits>
 8006cf6:	f1c0 0020 	rsb	r0, r0, #32
 8006cfa:	9b05      	ldr	r3, [sp, #20]
 8006cfc:	4418      	add	r0, r3
 8006cfe:	f010 001f 	ands.w	r0, r0, #31
 8006d02:	f000 8092 	beq.w	8006e2a <_dtoa_r+0x90a>
 8006d06:	f1c0 0320 	rsb	r3, r0, #32
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	f340 808a 	ble.w	8006e24 <_dtoa_r+0x904>
 8006d10:	f1c0 001c 	rsb	r0, r0, #28
 8006d14:	9b04      	ldr	r3, [sp, #16]
 8006d16:	4403      	add	r3, r0
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	9b05      	ldr	r3, [sp, #20]
 8006d1c:	4403      	add	r3, r0
 8006d1e:	4405      	add	r5, r0
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	9b04      	ldr	r3, [sp, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	dd07      	ble.n	8006d38 <_dtoa_r+0x818>
 8006d28:	ee18 1a10 	vmov	r1, s16
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f000 ffdc 	bl	8007cec <__lshift>
 8006d34:	ee08 0a10 	vmov	s16, r0
 8006d38:	9b05      	ldr	r3, [sp, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dd05      	ble.n	8006d4a <_dtoa_r+0x82a>
 8006d3e:	4631      	mov	r1, r6
 8006d40:	461a      	mov	r2, r3
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 ffd2 	bl	8007cec <__lshift>
 8006d48:	4606      	mov	r6, r0
 8006d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d06e      	beq.n	8006e2e <_dtoa_r+0x90e>
 8006d50:	ee18 0a10 	vmov	r0, s16
 8006d54:	4631      	mov	r1, r6
 8006d56:	f001 f839 	bl	8007dcc <__mcmp>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	da67      	bge.n	8006e2e <_dtoa_r+0x90e>
 8006d5e:	9b00      	ldr	r3, [sp, #0]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	ee18 1a10 	vmov	r1, s16
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	220a      	movs	r2, #10
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 fdc3 	bl	80078f8 <__multadd>
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	ee08 0a10 	vmov	s16, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 81b1 	beq.w	80070e0 <_dtoa_r+0xbc0>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	4639      	mov	r1, r7
 8006d82:	220a      	movs	r2, #10
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 fdb7 	bl	80078f8 <__multadd>
 8006d8a:	9b02      	ldr	r3, [sp, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	4607      	mov	r7, r0
 8006d90:	f300 808e 	bgt.w	8006eb0 <_dtoa_r+0x990>
 8006d94:	9b06      	ldr	r3, [sp, #24]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	dc51      	bgt.n	8006e3e <_dtoa_r+0x91e>
 8006d9a:	e089      	b.n	8006eb0 <_dtoa_r+0x990>
 8006d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006da2:	e74b      	b.n	8006c3c <_dtoa_r+0x71c>
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	1e5e      	subs	r6, r3, #1
 8006da8:	9b07      	ldr	r3, [sp, #28]
 8006daa:	42b3      	cmp	r3, r6
 8006dac:	bfbf      	itttt	lt
 8006dae:	9b07      	ldrlt	r3, [sp, #28]
 8006db0:	9607      	strlt	r6, [sp, #28]
 8006db2:	1af2      	sublt	r2, r6, r3
 8006db4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006db6:	bfb6      	itet	lt
 8006db8:	189b      	addlt	r3, r3, r2
 8006dba:	1b9e      	subge	r6, r3, r6
 8006dbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006dbe:	9b03      	ldr	r3, [sp, #12]
 8006dc0:	bfb8      	it	lt
 8006dc2:	2600      	movlt	r6, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	bfb7      	itett	lt
 8006dc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006dcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006dd0:	1a9d      	sublt	r5, r3, r2
 8006dd2:	2300      	movlt	r3, #0
 8006dd4:	e734      	b.n	8006c40 <_dtoa_r+0x720>
 8006dd6:	9e07      	ldr	r6, [sp, #28]
 8006dd8:	9d04      	ldr	r5, [sp, #16]
 8006dda:	9f08      	ldr	r7, [sp, #32]
 8006ddc:	e73b      	b.n	8006c56 <_dtoa_r+0x736>
 8006dde:	9a07      	ldr	r2, [sp, #28]
 8006de0:	e767      	b.n	8006cb2 <_dtoa_r+0x792>
 8006de2:	9b06      	ldr	r3, [sp, #24]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	dc18      	bgt.n	8006e1a <_dtoa_r+0x8fa>
 8006de8:	f1ba 0f00 	cmp.w	sl, #0
 8006dec:	d115      	bne.n	8006e1a <_dtoa_r+0x8fa>
 8006dee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006df2:	b993      	cbnz	r3, 8006e1a <_dtoa_r+0x8fa>
 8006df4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006df8:	0d1b      	lsrs	r3, r3, #20
 8006dfa:	051b      	lsls	r3, r3, #20
 8006dfc:	b183      	cbz	r3, 8006e20 <_dtoa_r+0x900>
 8006dfe:	9b04      	ldr	r3, [sp, #16]
 8006e00:	3301      	adds	r3, #1
 8006e02:	9304      	str	r3, [sp, #16]
 8006e04:	9b05      	ldr	r3, [sp, #20]
 8006e06:	3301      	adds	r3, #1
 8006e08:	9305      	str	r3, [sp, #20]
 8006e0a:	f04f 0801 	mov.w	r8, #1
 8006e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f47f af6a 	bne.w	8006cea <_dtoa_r+0x7ca>
 8006e16:	2001      	movs	r0, #1
 8006e18:	e76f      	b.n	8006cfa <_dtoa_r+0x7da>
 8006e1a:	f04f 0800 	mov.w	r8, #0
 8006e1e:	e7f6      	b.n	8006e0e <_dtoa_r+0x8ee>
 8006e20:	4698      	mov	r8, r3
 8006e22:	e7f4      	b.n	8006e0e <_dtoa_r+0x8ee>
 8006e24:	f43f af7d 	beq.w	8006d22 <_dtoa_r+0x802>
 8006e28:	4618      	mov	r0, r3
 8006e2a:	301c      	adds	r0, #28
 8006e2c:	e772      	b.n	8006d14 <_dtoa_r+0x7f4>
 8006e2e:	9b03      	ldr	r3, [sp, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	dc37      	bgt.n	8006ea4 <_dtoa_r+0x984>
 8006e34:	9b06      	ldr	r3, [sp, #24]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	dd34      	ble.n	8006ea4 <_dtoa_r+0x984>
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	9302      	str	r3, [sp, #8]
 8006e3e:	9b02      	ldr	r3, [sp, #8]
 8006e40:	b96b      	cbnz	r3, 8006e5e <_dtoa_r+0x93e>
 8006e42:	4631      	mov	r1, r6
 8006e44:	2205      	movs	r2, #5
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 fd56 	bl	80078f8 <__multadd>
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	4606      	mov	r6, r0
 8006e50:	ee18 0a10 	vmov	r0, s16
 8006e54:	f000 ffba 	bl	8007dcc <__mcmp>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	f73f adbb 	bgt.w	80069d4 <_dtoa_r+0x4b4>
 8006e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e60:	9d01      	ldr	r5, [sp, #4]
 8006e62:	43db      	mvns	r3, r3
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	f04f 0800 	mov.w	r8, #0
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f000 fd21 	bl	80078b4 <_Bfree>
 8006e72:	2f00      	cmp	r7, #0
 8006e74:	f43f aea4 	beq.w	8006bc0 <_dtoa_r+0x6a0>
 8006e78:	f1b8 0f00 	cmp.w	r8, #0
 8006e7c:	d005      	beq.n	8006e8a <_dtoa_r+0x96a>
 8006e7e:	45b8      	cmp	r8, r7
 8006e80:	d003      	beq.n	8006e8a <_dtoa_r+0x96a>
 8006e82:	4641      	mov	r1, r8
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 fd15 	bl	80078b4 <_Bfree>
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f000 fd11 	bl	80078b4 <_Bfree>
 8006e92:	e695      	b.n	8006bc0 <_dtoa_r+0x6a0>
 8006e94:	2600      	movs	r6, #0
 8006e96:	4637      	mov	r7, r6
 8006e98:	e7e1      	b.n	8006e5e <_dtoa_r+0x93e>
 8006e9a:	9700      	str	r7, [sp, #0]
 8006e9c:	4637      	mov	r7, r6
 8006e9e:	e599      	b.n	80069d4 <_dtoa_r+0x4b4>
 8006ea0:	40240000 	.word	0x40240000
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80ca 	beq.w	8007040 <_dtoa_r+0xb20>
 8006eac:	9b03      	ldr	r3, [sp, #12]
 8006eae:	9302      	str	r3, [sp, #8]
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	dd05      	ble.n	8006ec0 <_dtoa_r+0x9a0>
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f000 ff17 	bl	8007cec <__lshift>
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	d05b      	beq.n	8006f7e <_dtoa_r+0xa5e>
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fcb3 	bl	8007834 <_Balloc>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	b928      	cbnz	r0, 8006ede <_dtoa_r+0x9be>
 8006ed2:	4b87      	ldr	r3, [pc, #540]	; (80070f0 <_dtoa_r+0xbd0>)
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006eda:	f7ff bb3b 	b.w	8006554 <_dtoa_r+0x34>
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	3202      	adds	r2, #2
 8006ee2:	0092      	lsls	r2, r2, #2
 8006ee4:	f107 010c 	add.w	r1, r7, #12
 8006ee8:	300c      	adds	r0, #12
 8006eea:	f000 fc95 	bl	8007818 <memcpy>
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f000 fefa 	bl	8007cec <__lshift>
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	f103 0901 	add.w	r9, r3, #1
 8006efe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	9305      	str	r3, [sp, #20]
 8006f06:	f00a 0301 	and.w	r3, sl, #1
 8006f0a:	46b8      	mov	r8, r7
 8006f0c:	9304      	str	r3, [sp, #16]
 8006f0e:	4607      	mov	r7, r0
 8006f10:	4631      	mov	r1, r6
 8006f12:	ee18 0a10 	vmov	r0, s16
 8006f16:	f7ff fa77 	bl	8006408 <quorem>
 8006f1a:	4641      	mov	r1, r8
 8006f1c:	9002      	str	r0, [sp, #8]
 8006f1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f22:	ee18 0a10 	vmov	r0, s16
 8006f26:	f000 ff51 	bl	8007dcc <__mcmp>
 8006f2a:	463a      	mov	r2, r7
 8006f2c:	9003      	str	r0, [sp, #12]
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 ff67 	bl	8007e04 <__mdiff>
 8006f36:	68c2      	ldr	r2, [r0, #12]
 8006f38:	f109 3bff 	add.w	fp, r9, #4294967295
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	bb02      	cbnz	r2, 8006f82 <_dtoa_r+0xa62>
 8006f40:	4601      	mov	r1, r0
 8006f42:	ee18 0a10 	vmov	r0, s16
 8006f46:	f000 ff41 	bl	8007dcc <__mcmp>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4620      	mov	r0, r4
 8006f50:	9207      	str	r2, [sp, #28]
 8006f52:	f000 fcaf 	bl	80078b4 <_Bfree>
 8006f56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f5a:	ea43 0102 	orr.w	r1, r3, r2
 8006f5e:	9b04      	ldr	r3, [sp, #16]
 8006f60:	430b      	orrs	r3, r1
 8006f62:	464d      	mov	r5, r9
 8006f64:	d10f      	bne.n	8006f86 <_dtoa_r+0xa66>
 8006f66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f6a:	d02a      	beq.n	8006fc2 <_dtoa_r+0xaa2>
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dd02      	ble.n	8006f78 <_dtoa_r+0xa58>
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f78:	f88b a000 	strb.w	sl, [fp]
 8006f7c:	e775      	b.n	8006e6a <_dtoa_r+0x94a>
 8006f7e:	4638      	mov	r0, r7
 8006f80:	e7ba      	b.n	8006ef8 <_dtoa_r+0x9d8>
 8006f82:	2201      	movs	r2, #1
 8006f84:	e7e2      	b.n	8006f4c <_dtoa_r+0xa2c>
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	db04      	blt.n	8006f96 <_dtoa_r+0xa76>
 8006f8c:	9906      	ldr	r1, [sp, #24]
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	9904      	ldr	r1, [sp, #16]
 8006f92:	430b      	orrs	r3, r1
 8006f94:	d122      	bne.n	8006fdc <_dtoa_r+0xabc>
 8006f96:	2a00      	cmp	r2, #0
 8006f98:	ddee      	ble.n	8006f78 <_dtoa_r+0xa58>
 8006f9a:	ee18 1a10 	vmov	r1, s16
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fea3 	bl	8007cec <__lshift>
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	ee08 0a10 	vmov	s16, r0
 8006fac:	f000 ff0e 	bl	8007dcc <__mcmp>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	dc03      	bgt.n	8006fbc <_dtoa_r+0xa9c>
 8006fb4:	d1e0      	bne.n	8006f78 <_dtoa_r+0xa58>
 8006fb6:	f01a 0f01 	tst.w	sl, #1
 8006fba:	d0dd      	beq.n	8006f78 <_dtoa_r+0xa58>
 8006fbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fc0:	d1d7      	bne.n	8006f72 <_dtoa_r+0xa52>
 8006fc2:	2339      	movs	r3, #57	; 0x39
 8006fc4:	f88b 3000 	strb.w	r3, [fp]
 8006fc8:	462b      	mov	r3, r5
 8006fca:	461d      	mov	r5, r3
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fd2:	2a39      	cmp	r2, #57	; 0x39
 8006fd4:	d071      	beq.n	80070ba <_dtoa_r+0xb9a>
 8006fd6:	3201      	adds	r2, #1
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e746      	b.n	8006e6a <_dtoa_r+0x94a>
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	dd07      	ble.n	8006ff0 <_dtoa_r+0xad0>
 8006fe0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fe4:	d0ed      	beq.n	8006fc2 <_dtoa_r+0xaa2>
 8006fe6:	f10a 0301 	add.w	r3, sl, #1
 8006fea:	f88b 3000 	strb.w	r3, [fp]
 8006fee:	e73c      	b.n	8006e6a <_dtoa_r+0x94a>
 8006ff0:	9b05      	ldr	r3, [sp, #20]
 8006ff2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006ff6:	4599      	cmp	r9, r3
 8006ff8:	d047      	beq.n	800708a <_dtoa_r+0xb6a>
 8006ffa:	ee18 1a10 	vmov	r1, s16
 8006ffe:	2300      	movs	r3, #0
 8007000:	220a      	movs	r2, #10
 8007002:	4620      	mov	r0, r4
 8007004:	f000 fc78 	bl	80078f8 <__multadd>
 8007008:	45b8      	cmp	r8, r7
 800700a:	ee08 0a10 	vmov	s16, r0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	f04f 020a 	mov.w	r2, #10
 8007016:	4641      	mov	r1, r8
 8007018:	4620      	mov	r0, r4
 800701a:	d106      	bne.n	800702a <_dtoa_r+0xb0a>
 800701c:	f000 fc6c 	bl	80078f8 <__multadd>
 8007020:	4680      	mov	r8, r0
 8007022:	4607      	mov	r7, r0
 8007024:	f109 0901 	add.w	r9, r9, #1
 8007028:	e772      	b.n	8006f10 <_dtoa_r+0x9f0>
 800702a:	f000 fc65 	bl	80078f8 <__multadd>
 800702e:	4639      	mov	r1, r7
 8007030:	4680      	mov	r8, r0
 8007032:	2300      	movs	r3, #0
 8007034:	220a      	movs	r2, #10
 8007036:	4620      	mov	r0, r4
 8007038:	f000 fc5e 	bl	80078f8 <__multadd>
 800703c:	4607      	mov	r7, r0
 800703e:	e7f1      	b.n	8007024 <_dtoa_r+0xb04>
 8007040:	9b03      	ldr	r3, [sp, #12]
 8007042:	9302      	str	r3, [sp, #8]
 8007044:	9d01      	ldr	r5, [sp, #4]
 8007046:	ee18 0a10 	vmov	r0, s16
 800704a:	4631      	mov	r1, r6
 800704c:	f7ff f9dc 	bl	8006408 <quorem>
 8007050:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	f805 ab01 	strb.w	sl, [r5], #1
 800705a:	1aea      	subs	r2, r5, r3
 800705c:	9b02      	ldr	r3, [sp, #8]
 800705e:	4293      	cmp	r3, r2
 8007060:	dd09      	ble.n	8007076 <_dtoa_r+0xb56>
 8007062:	ee18 1a10 	vmov	r1, s16
 8007066:	2300      	movs	r3, #0
 8007068:	220a      	movs	r2, #10
 800706a:	4620      	mov	r0, r4
 800706c:	f000 fc44 	bl	80078f8 <__multadd>
 8007070:	ee08 0a10 	vmov	s16, r0
 8007074:	e7e7      	b.n	8007046 <_dtoa_r+0xb26>
 8007076:	9b02      	ldr	r3, [sp, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	bfc8      	it	gt
 800707c:	461d      	movgt	r5, r3
 800707e:	9b01      	ldr	r3, [sp, #4]
 8007080:	bfd8      	it	le
 8007082:	2501      	movle	r5, #1
 8007084:	441d      	add	r5, r3
 8007086:	f04f 0800 	mov.w	r8, #0
 800708a:	ee18 1a10 	vmov	r1, s16
 800708e:	2201      	movs	r2, #1
 8007090:	4620      	mov	r0, r4
 8007092:	f000 fe2b 	bl	8007cec <__lshift>
 8007096:	4631      	mov	r1, r6
 8007098:	ee08 0a10 	vmov	s16, r0
 800709c:	f000 fe96 	bl	8007dcc <__mcmp>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	dc91      	bgt.n	8006fc8 <_dtoa_r+0xaa8>
 80070a4:	d102      	bne.n	80070ac <_dtoa_r+0xb8c>
 80070a6:	f01a 0f01 	tst.w	sl, #1
 80070aa:	d18d      	bne.n	8006fc8 <_dtoa_r+0xaa8>
 80070ac:	462b      	mov	r3, r5
 80070ae:	461d      	mov	r5, r3
 80070b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070b4:	2a30      	cmp	r2, #48	; 0x30
 80070b6:	d0fa      	beq.n	80070ae <_dtoa_r+0xb8e>
 80070b8:	e6d7      	b.n	8006e6a <_dtoa_r+0x94a>
 80070ba:	9a01      	ldr	r2, [sp, #4]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d184      	bne.n	8006fca <_dtoa_r+0xaaa>
 80070c0:	9b00      	ldr	r3, [sp, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	2331      	movs	r3, #49	; 0x31
 80070c8:	7013      	strb	r3, [r2, #0]
 80070ca:	e6ce      	b.n	8006e6a <_dtoa_r+0x94a>
 80070cc:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <_dtoa_r+0xbd4>)
 80070ce:	f7ff ba95 	b.w	80065fc <_dtoa_r+0xdc>
 80070d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f47f aa6e 	bne.w	80065b6 <_dtoa_r+0x96>
 80070da:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <_dtoa_r+0xbd8>)
 80070dc:	f7ff ba8e 	b.w	80065fc <_dtoa_r+0xdc>
 80070e0:	9b02      	ldr	r3, [sp, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	dcae      	bgt.n	8007044 <_dtoa_r+0xb24>
 80070e6:	9b06      	ldr	r3, [sp, #24]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	f73f aea8 	bgt.w	8006e3e <_dtoa_r+0x91e>
 80070ee:	e7a9      	b.n	8007044 <_dtoa_r+0xb24>
 80070f0:	08009598 	.word	0x08009598
 80070f4:	08009398 	.word	0x08009398
 80070f8:	08009519 	.word	0x08009519

080070fc <rshift>:
 80070fc:	6903      	ldr	r3, [r0, #16]
 80070fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007106:	ea4f 1261 	mov.w	r2, r1, asr #5
 800710a:	f100 0414 	add.w	r4, r0, #20
 800710e:	dd45      	ble.n	800719c <rshift+0xa0>
 8007110:	f011 011f 	ands.w	r1, r1, #31
 8007114:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007118:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800711c:	d10c      	bne.n	8007138 <rshift+0x3c>
 800711e:	f100 0710 	add.w	r7, r0, #16
 8007122:	4629      	mov	r1, r5
 8007124:	42b1      	cmp	r1, r6
 8007126:	d334      	bcc.n	8007192 <rshift+0x96>
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	1eea      	subs	r2, r5, #3
 800712e:	4296      	cmp	r6, r2
 8007130:	bf38      	it	cc
 8007132:	2300      	movcc	r3, #0
 8007134:	4423      	add	r3, r4
 8007136:	e015      	b.n	8007164 <rshift+0x68>
 8007138:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800713c:	f1c1 0820 	rsb	r8, r1, #32
 8007140:	40cf      	lsrs	r7, r1
 8007142:	f105 0e04 	add.w	lr, r5, #4
 8007146:	46a1      	mov	r9, r4
 8007148:	4576      	cmp	r6, lr
 800714a:	46f4      	mov	ip, lr
 800714c:	d815      	bhi.n	800717a <rshift+0x7e>
 800714e:	1a9a      	subs	r2, r3, r2
 8007150:	0092      	lsls	r2, r2, #2
 8007152:	3a04      	subs	r2, #4
 8007154:	3501      	adds	r5, #1
 8007156:	42ae      	cmp	r6, r5
 8007158:	bf38      	it	cc
 800715a:	2200      	movcc	r2, #0
 800715c:	18a3      	adds	r3, r4, r2
 800715e:	50a7      	str	r7, [r4, r2]
 8007160:	b107      	cbz	r7, 8007164 <rshift+0x68>
 8007162:	3304      	adds	r3, #4
 8007164:	1b1a      	subs	r2, r3, r4
 8007166:	42a3      	cmp	r3, r4
 8007168:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800716c:	bf08      	it	eq
 800716e:	2300      	moveq	r3, #0
 8007170:	6102      	str	r2, [r0, #16]
 8007172:	bf08      	it	eq
 8007174:	6143      	streq	r3, [r0, #20]
 8007176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800717a:	f8dc c000 	ldr.w	ip, [ip]
 800717e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007182:	ea4c 0707 	orr.w	r7, ip, r7
 8007186:	f849 7b04 	str.w	r7, [r9], #4
 800718a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800718e:	40cf      	lsrs	r7, r1
 8007190:	e7da      	b.n	8007148 <rshift+0x4c>
 8007192:	f851 cb04 	ldr.w	ip, [r1], #4
 8007196:	f847 cf04 	str.w	ip, [r7, #4]!
 800719a:	e7c3      	b.n	8007124 <rshift+0x28>
 800719c:	4623      	mov	r3, r4
 800719e:	e7e1      	b.n	8007164 <rshift+0x68>

080071a0 <__hexdig_fun>:
 80071a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80071a4:	2b09      	cmp	r3, #9
 80071a6:	d802      	bhi.n	80071ae <__hexdig_fun+0xe>
 80071a8:	3820      	subs	r0, #32
 80071aa:	b2c0      	uxtb	r0, r0
 80071ac:	4770      	bx	lr
 80071ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80071b2:	2b05      	cmp	r3, #5
 80071b4:	d801      	bhi.n	80071ba <__hexdig_fun+0x1a>
 80071b6:	3847      	subs	r0, #71	; 0x47
 80071b8:	e7f7      	b.n	80071aa <__hexdig_fun+0xa>
 80071ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80071be:	2b05      	cmp	r3, #5
 80071c0:	d801      	bhi.n	80071c6 <__hexdig_fun+0x26>
 80071c2:	3827      	subs	r0, #39	; 0x27
 80071c4:	e7f1      	b.n	80071aa <__hexdig_fun+0xa>
 80071c6:	2000      	movs	r0, #0
 80071c8:	4770      	bx	lr
	...

080071cc <__gethex>:
 80071cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d0:	ed2d 8b02 	vpush	{d8}
 80071d4:	b089      	sub	sp, #36	; 0x24
 80071d6:	ee08 0a10 	vmov	s16, r0
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	4bb4      	ldr	r3, [pc, #720]	; (80074b0 <__gethex+0x2e4>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	4618      	mov	r0, r3
 80071e4:	468b      	mov	fp, r1
 80071e6:	4690      	mov	r8, r2
 80071e8:	f7f8 fffa 	bl	80001e0 <strlen>
 80071ec:	9b01      	ldr	r3, [sp, #4]
 80071ee:	f8db 2000 	ldr.w	r2, [fp]
 80071f2:	4403      	add	r3, r0
 80071f4:	4682      	mov	sl, r0
 80071f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80071fa:	9305      	str	r3, [sp, #20]
 80071fc:	1c93      	adds	r3, r2, #2
 80071fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007202:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007206:	32fe      	adds	r2, #254	; 0xfe
 8007208:	18d1      	adds	r1, r2, r3
 800720a:	461f      	mov	r7, r3
 800720c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007210:	9100      	str	r1, [sp, #0]
 8007212:	2830      	cmp	r0, #48	; 0x30
 8007214:	d0f8      	beq.n	8007208 <__gethex+0x3c>
 8007216:	f7ff ffc3 	bl	80071a0 <__hexdig_fun>
 800721a:	4604      	mov	r4, r0
 800721c:	2800      	cmp	r0, #0
 800721e:	d13a      	bne.n	8007296 <__gethex+0xca>
 8007220:	9901      	ldr	r1, [sp, #4]
 8007222:	4652      	mov	r2, sl
 8007224:	4638      	mov	r0, r7
 8007226:	f001 fa33 	bl	8008690 <strncmp>
 800722a:	4605      	mov	r5, r0
 800722c:	2800      	cmp	r0, #0
 800722e:	d168      	bne.n	8007302 <__gethex+0x136>
 8007230:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007234:	eb07 060a 	add.w	r6, r7, sl
 8007238:	f7ff ffb2 	bl	80071a0 <__hexdig_fun>
 800723c:	2800      	cmp	r0, #0
 800723e:	d062      	beq.n	8007306 <__gethex+0x13a>
 8007240:	4633      	mov	r3, r6
 8007242:	7818      	ldrb	r0, [r3, #0]
 8007244:	2830      	cmp	r0, #48	; 0x30
 8007246:	461f      	mov	r7, r3
 8007248:	f103 0301 	add.w	r3, r3, #1
 800724c:	d0f9      	beq.n	8007242 <__gethex+0x76>
 800724e:	f7ff ffa7 	bl	80071a0 <__hexdig_fun>
 8007252:	2301      	movs	r3, #1
 8007254:	fab0 f480 	clz	r4, r0
 8007258:	0964      	lsrs	r4, r4, #5
 800725a:	4635      	mov	r5, r6
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	463a      	mov	r2, r7
 8007260:	4616      	mov	r6, r2
 8007262:	3201      	adds	r2, #1
 8007264:	7830      	ldrb	r0, [r6, #0]
 8007266:	f7ff ff9b 	bl	80071a0 <__hexdig_fun>
 800726a:	2800      	cmp	r0, #0
 800726c:	d1f8      	bne.n	8007260 <__gethex+0x94>
 800726e:	9901      	ldr	r1, [sp, #4]
 8007270:	4652      	mov	r2, sl
 8007272:	4630      	mov	r0, r6
 8007274:	f001 fa0c 	bl	8008690 <strncmp>
 8007278:	b980      	cbnz	r0, 800729c <__gethex+0xd0>
 800727a:	b94d      	cbnz	r5, 8007290 <__gethex+0xc4>
 800727c:	eb06 050a 	add.w	r5, r6, sl
 8007280:	462a      	mov	r2, r5
 8007282:	4616      	mov	r6, r2
 8007284:	3201      	adds	r2, #1
 8007286:	7830      	ldrb	r0, [r6, #0]
 8007288:	f7ff ff8a 	bl	80071a0 <__hexdig_fun>
 800728c:	2800      	cmp	r0, #0
 800728e:	d1f8      	bne.n	8007282 <__gethex+0xb6>
 8007290:	1bad      	subs	r5, r5, r6
 8007292:	00ad      	lsls	r5, r5, #2
 8007294:	e004      	b.n	80072a0 <__gethex+0xd4>
 8007296:	2400      	movs	r4, #0
 8007298:	4625      	mov	r5, r4
 800729a:	e7e0      	b.n	800725e <__gethex+0x92>
 800729c:	2d00      	cmp	r5, #0
 800729e:	d1f7      	bne.n	8007290 <__gethex+0xc4>
 80072a0:	7833      	ldrb	r3, [r6, #0]
 80072a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80072a6:	2b50      	cmp	r3, #80	; 0x50
 80072a8:	d13b      	bne.n	8007322 <__gethex+0x156>
 80072aa:	7873      	ldrb	r3, [r6, #1]
 80072ac:	2b2b      	cmp	r3, #43	; 0x2b
 80072ae:	d02c      	beq.n	800730a <__gethex+0x13e>
 80072b0:	2b2d      	cmp	r3, #45	; 0x2d
 80072b2:	d02e      	beq.n	8007312 <__gethex+0x146>
 80072b4:	1c71      	adds	r1, r6, #1
 80072b6:	f04f 0900 	mov.w	r9, #0
 80072ba:	7808      	ldrb	r0, [r1, #0]
 80072bc:	f7ff ff70 	bl	80071a0 <__hexdig_fun>
 80072c0:	1e43      	subs	r3, r0, #1
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b18      	cmp	r3, #24
 80072c6:	d82c      	bhi.n	8007322 <__gethex+0x156>
 80072c8:	f1a0 0210 	sub.w	r2, r0, #16
 80072cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80072d0:	f7ff ff66 	bl	80071a0 <__hexdig_fun>
 80072d4:	1e43      	subs	r3, r0, #1
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b18      	cmp	r3, #24
 80072da:	d91d      	bls.n	8007318 <__gethex+0x14c>
 80072dc:	f1b9 0f00 	cmp.w	r9, #0
 80072e0:	d000      	beq.n	80072e4 <__gethex+0x118>
 80072e2:	4252      	negs	r2, r2
 80072e4:	4415      	add	r5, r2
 80072e6:	f8cb 1000 	str.w	r1, [fp]
 80072ea:	b1e4      	cbz	r4, 8007326 <__gethex+0x15a>
 80072ec:	9b00      	ldr	r3, [sp, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bf14      	ite	ne
 80072f2:	2700      	movne	r7, #0
 80072f4:	2706      	moveq	r7, #6
 80072f6:	4638      	mov	r0, r7
 80072f8:	b009      	add	sp, #36	; 0x24
 80072fa:	ecbd 8b02 	vpop	{d8}
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	463e      	mov	r6, r7
 8007304:	4625      	mov	r5, r4
 8007306:	2401      	movs	r4, #1
 8007308:	e7ca      	b.n	80072a0 <__gethex+0xd4>
 800730a:	f04f 0900 	mov.w	r9, #0
 800730e:	1cb1      	adds	r1, r6, #2
 8007310:	e7d3      	b.n	80072ba <__gethex+0xee>
 8007312:	f04f 0901 	mov.w	r9, #1
 8007316:	e7fa      	b.n	800730e <__gethex+0x142>
 8007318:	230a      	movs	r3, #10
 800731a:	fb03 0202 	mla	r2, r3, r2, r0
 800731e:	3a10      	subs	r2, #16
 8007320:	e7d4      	b.n	80072cc <__gethex+0x100>
 8007322:	4631      	mov	r1, r6
 8007324:	e7df      	b.n	80072e6 <__gethex+0x11a>
 8007326:	1bf3      	subs	r3, r6, r7
 8007328:	3b01      	subs	r3, #1
 800732a:	4621      	mov	r1, r4
 800732c:	2b07      	cmp	r3, #7
 800732e:	dc0b      	bgt.n	8007348 <__gethex+0x17c>
 8007330:	ee18 0a10 	vmov	r0, s16
 8007334:	f000 fa7e 	bl	8007834 <_Balloc>
 8007338:	4604      	mov	r4, r0
 800733a:	b940      	cbnz	r0, 800734e <__gethex+0x182>
 800733c:	4b5d      	ldr	r3, [pc, #372]	; (80074b4 <__gethex+0x2e8>)
 800733e:	4602      	mov	r2, r0
 8007340:	21de      	movs	r1, #222	; 0xde
 8007342:	485d      	ldr	r0, [pc, #372]	; (80074b8 <__gethex+0x2ec>)
 8007344:	f001 f9c6 	bl	80086d4 <__assert_func>
 8007348:	3101      	adds	r1, #1
 800734a:	105b      	asrs	r3, r3, #1
 800734c:	e7ee      	b.n	800732c <__gethex+0x160>
 800734e:	f100 0914 	add.w	r9, r0, #20
 8007352:	f04f 0b00 	mov.w	fp, #0
 8007356:	f1ca 0301 	rsb	r3, sl, #1
 800735a:	f8cd 9008 	str.w	r9, [sp, #8]
 800735e:	f8cd b000 	str.w	fp, [sp]
 8007362:	9306      	str	r3, [sp, #24]
 8007364:	42b7      	cmp	r7, r6
 8007366:	d340      	bcc.n	80073ea <__gethex+0x21e>
 8007368:	9802      	ldr	r0, [sp, #8]
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	f840 3b04 	str.w	r3, [r0], #4
 8007370:	eba0 0009 	sub.w	r0, r0, r9
 8007374:	1080      	asrs	r0, r0, #2
 8007376:	0146      	lsls	r6, r0, #5
 8007378:	6120      	str	r0, [r4, #16]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fb4c 	bl	8007a18 <__hi0bits>
 8007380:	1a30      	subs	r0, r6, r0
 8007382:	f8d8 6000 	ldr.w	r6, [r8]
 8007386:	42b0      	cmp	r0, r6
 8007388:	dd63      	ble.n	8007452 <__gethex+0x286>
 800738a:	1b87      	subs	r7, r0, r6
 800738c:	4639      	mov	r1, r7
 800738e:	4620      	mov	r0, r4
 8007390:	f000 fef0 	bl	8008174 <__any_on>
 8007394:	4682      	mov	sl, r0
 8007396:	b1a8      	cbz	r0, 80073c4 <__gethex+0x1f8>
 8007398:	1e7b      	subs	r3, r7, #1
 800739a:	1159      	asrs	r1, r3, #5
 800739c:	f003 021f 	and.w	r2, r3, #31
 80073a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80073a4:	f04f 0a01 	mov.w	sl, #1
 80073a8:	fa0a f202 	lsl.w	r2, sl, r2
 80073ac:	420a      	tst	r2, r1
 80073ae:	d009      	beq.n	80073c4 <__gethex+0x1f8>
 80073b0:	4553      	cmp	r3, sl
 80073b2:	dd05      	ble.n	80073c0 <__gethex+0x1f4>
 80073b4:	1eb9      	subs	r1, r7, #2
 80073b6:	4620      	mov	r0, r4
 80073b8:	f000 fedc 	bl	8008174 <__any_on>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d145      	bne.n	800744c <__gethex+0x280>
 80073c0:	f04f 0a02 	mov.w	sl, #2
 80073c4:	4639      	mov	r1, r7
 80073c6:	4620      	mov	r0, r4
 80073c8:	f7ff fe98 	bl	80070fc <rshift>
 80073cc:	443d      	add	r5, r7
 80073ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80073d2:	42ab      	cmp	r3, r5
 80073d4:	da4c      	bge.n	8007470 <__gethex+0x2a4>
 80073d6:	ee18 0a10 	vmov	r0, s16
 80073da:	4621      	mov	r1, r4
 80073dc:	f000 fa6a 	bl	80078b4 <_Bfree>
 80073e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073e2:	2300      	movs	r3, #0
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	27a3      	movs	r7, #163	; 0xa3
 80073e8:	e785      	b.n	80072f6 <__gethex+0x12a>
 80073ea:	1e73      	subs	r3, r6, #1
 80073ec:	9a05      	ldr	r2, [sp, #20]
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d019      	beq.n	800742c <__gethex+0x260>
 80073f8:	f1bb 0f20 	cmp.w	fp, #32
 80073fc:	d107      	bne.n	800740e <__gethex+0x242>
 80073fe:	9b02      	ldr	r3, [sp, #8]
 8007400:	9a00      	ldr	r2, [sp, #0]
 8007402:	f843 2b04 	str.w	r2, [r3], #4
 8007406:	9302      	str	r3, [sp, #8]
 8007408:	2300      	movs	r3, #0
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	469b      	mov	fp, r3
 800740e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007412:	f7ff fec5 	bl	80071a0 <__hexdig_fun>
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	f000 000f 	and.w	r0, r0, #15
 800741c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007420:	4303      	orrs	r3, r0
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	f10b 0b04 	add.w	fp, fp, #4
 8007428:	9b03      	ldr	r3, [sp, #12]
 800742a:	e00d      	b.n	8007448 <__gethex+0x27c>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	9a06      	ldr	r2, [sp, #24]
 8007430:	4413      	add	r3, r2
 8007432:	42bb      	cmp	r3, r7
 8007434:	d3e0      	bcc.n	80073f8 <__gethex+0x22c>
 8007436:	4618      	mov	r0, r3
 8007438:	9901      	ldr	r1, [sp, #4]
 800743a:	9307      	str	r3, [sp, #28]
 800743c:	4652      	mov	r2, sl
 800743e:	f001 f927 	bl	8008690 <strncmp>
 8007442:	9b07      	ldr	r3, [sp, #28]
 8007444:	2800      	cmp	r0, #0
 8007446:	d1d7      	bne.n	80073f8 <__gethex+0x22c>
 8007448:	461e      	mov	r6, r3
 800744a:	e78b      	b.n	8007364 <__gethex+0x198>
 800744c:	f04f 0a03 	mov.w	sl, #3
 8007450:	e7b8      	b.n	80073c4 <__gethex+0x1f8>
 8007452:	da0a      	bge.n	800746a <__gethex+0x29e>
 8007454:	1a37      	subs	r7, r6, r0
 8007456:	4621      	mov	r1, r4
 8007458:	ee18 0a10 	vmov	r0, s16
 800745c:	463a      	mov	r2, r7
 800745e:	f000 fc45 	bl	8007cec <__lshift>
 8007462:	1bed      	subs	r5, r5, r7
 8007464:	4604      	mov	r4, r0
 8007466:	f100 0914 	add.w	r9, r0, #20
 800746a:	f04f 0a00 	mov.w	sl, #0
 800746e:	e7ae      	b.n	80073ce <__gethex+0x202>
 8007470:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007474:	42a8      	cmp	r0, r5
 8007476:	dd72      	ble.n	800755e <__gethex+0x392>
 8007478:	1b45      	subs	r5, r0, r5
 800747a:	42ae      	cmp	r6, r5
 800747c:	dc36      	bgt.n	80074ec <__gethex+0x320>
 800747e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007482:	2b02      	cmp	r3, #2
 8007484:	d02a      	beq.n	80074dc <__gethex+0x310>
 8007486:	2b03      	cmp	r3, #3
 8007488:	d02c      	beq.n	80074e4 <__gethex+0x318>
 800748a:	2b01      	cmp	r3, #1
 800748c:	d11c      	bne.n	80074c8 <__gethex+0x2fc>
 800748e:	42ae      	cmp	r6, r5
 8007490:	d11a      	bne.n	80074c8 <__gethex+0x2fc>
 8007492:	2e01      	cmp	r6, #1
 8007494:	d112      	bne.n	80074bc <__gethex+0x2f0>
 8007496:	9a04      	ldr	r2, [sp, #16]
 8007498:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	2301      	movs	r3, #1
 80074a0:	6123      	str	r3, [r4, #16]
 80074a2:	f8c9 3000 	str.w	r3, [r9]
 80074a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074a8:	2762      	movs	r7, #98	; 0x62
 80074aa:	601c      	str	r4, [r3, #0]
 80074ac:	e723      	b.n	80072f6 <__gethex+0x12a>
 80074ae:	bf00      	nop
 80074b0:	08009610 	.word	0x08009610
 80074b4:	08009598 	.word	0x08009598
 80074b8:	080095a9 	.word	0x080095a9
 80074bc:	1e71      	subs	r1, r6, #1
 80074be:	4620      	mov	r0, r4
 80074c0:	f000 fe58 	bl	8008174 <__any_on>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d1e6      	bne.n	8007496 <__gethex+0x2ca>
 80074c8:	ee18 0a10 	vmov	r0, s16
 80074cc:	4621      	mov	r1, r4
 80074ce:	f000 f9f1 	bl	80078b4 <_Bfree>
 80074d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074d4:	2300      	movs	r3, #0
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	2750      	movs	r7, #80	; 0x50
 80074da:	e70c      	b.n	80072f6 <__gethex+0x12a>
 80074dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f2      	bne.n	80074c8 <__gethex+0x2fc>
 80074e2:	e7d8      	b.n	8007496 <__gethex+0x2ca>
 80074e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1d5      	bne.n	8007496 <__gethex+0x2ca>
 80074ea:	e7ed      	b.n	80074c8 <__gethex+0x2fc>
 80074ec:	1e6f      	subs	r7, r5, #1
 80074ee:	f1ba 0f00 	cmp.w	sl, #0
 80074f2:	d131      	bne.n	8007558 <__gethex+0x38c>
 80074f4:	b127      	cbz	r7, 8007500 <__gethex+0x334>
 80074f6:	4639      	mov	r1, r7
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fe3b 	bl	8008174 <__any_on>
 80074fe:	4682      	mov	sl, r0
 8007500:	117b      	asrs	r3, r7, #5
 8007502:	2101      	movs	r1, #1
 8007504:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007508:	f007 071f 	and.w	r7, r7, #31
 800750c:	fa01 f707 	lsl.w	r7, r1, r7
 8007510:	421f      	tst	r7, r3
 8007512:	4629      	mov	r1, r5
 8007514:	4620      	mov	r0, r4
 8007516:	bf18      	it	ne
 8007518:	f04a 0a02 	orrne.w	sl, sl, #2
 800751c:	1b76      	subs	r6, r6, r5
 800751e:	f7ff fded 	bl	80070fc <rshift>
 8007522:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007526:	2702      	movs	r7, #2
 8007528:	f1ba 0f00 	cmp.w	sl, #0
 800752c:	d048      	beq.n	80075c0 <__gethex+0x3f4>
 800752e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d015      	beq.n	8007562 <__gethex+0x396>
 8007536:	2b03      	cmp	r3, #3
 8007538:	d017      	beq.n	800756a <__gethex+0x39e>
 800753a:	2b01      	cmp	r3, #1
 800753c:	d109      	bne.n	8007552 <__gethex+0x386>
 800753e:	f01a 0f02 	tst.w	sl, #2
 8007542:	d006      	beq.n	8007552 <__gethex+0x386>
 8007544:	f8d9 0000 	ldr.w	r0, [r9]
 8007548:	ea4a 0a00 	orr.w	sl, sl, r0
 800754c:	f01a 0f01 	tst.w	sl, #1
 8007550:	d10e      	bne.n	8007570 <__gethex+0x3a4>
 8007552:	f047 0710 	orr.w	r7, r7, #16
 8007556:	e033      	b.n	80075c0 <__gethex+0x3f4>
 8007558:	f04f 0a01 	mov.w	sl, #1
 800755c:	e7d0      	b.n	8007500 <__gethex+0x334>
 800755e:	2701      	movs	r7, #1
 8007560:	e7e2      	b.n	8007528 <__gethex+0x35c>
 8007562:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007564:	f1c3 0301 	rsb	r3, r3, #1
 8007568:	9315      	str	r3, [sp, #84]	; 0x54
 800756a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0f0      	beq.n	8007552 <__gethex+0x386>
 8007570:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007574:	f104 0314 	add.w	r3, r4, #20
 8007578:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800757c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007580:	f04f 0c00 	mov.w	ip, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f853 2b04 	ldr.w	r2, [r3], #4
 800758a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800758e:	d01c      	beq.n	80075ca <__gethex+0x3fe>
 8007590:	3201      	adds	r2, #1
 8007592:	6002      	str	r2, [r0, #0]
 8007594:	2f02      	cmp	r7, #2
 8007596:	f104 0314 	add.w	r3, r4, #20
 800759a:	d13f      	bne.n	800761c <__gethex+0x450>
 800759c:	f8d8 2000 	ldr.w	r2, [r8]
 80075a0:	3a01      	subs	r2, #1
 80075a2:	42b2      	cmp	r2, r6
 80075a4:	d10a      	bne.n	80075bc <__gethex+0x3f0>
 80075a6:	1171      	asrs	r1, r6, #5
 80075a8:	2201      	movs	r2, #1
 80075aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075ae:	f006 061f 	and.w	r6, r6, #31
 80075b2:	fa02 f606 	lsl.w	r6, r2, r6
 80075b6:	421e      	tst	r6, r3
 80075b8:	bf18      	it	ne
 80075ba:	4617      	movne	r7, r2
 80075bc:	f047 0720 	orr.w	r7, r7, #32
 80075c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075c2:	601c      	str	r4, [r3, #0]
 80075c4:	9b04      	ldr	r3, [sp, #16]
 80075c6:	601d      	str	r5, [r3, #0]
 80075c8:	e695      	b.n	80072f6 <__gethex+0x12a>
 80075ca:	4299      	cmp	r1, r3
 80075cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80075d0:	d8d8      	bhi.n	8007584 <__gethex+0x3b8>
 80075d2:	68a3      	ldr	r3, [r4, #8]
 80075d4:	459b      	cmp	fp, r3
 80075d6:	db19      	blt.n	800760c <__gethex+0x440>
 80075d8:	6861      	ldr	r1, [r4, #4]
 80075da:	ee18 0a10 	vmov	r0, s16
 80075de:	3101      	adds	r1, #1
 80075e0:	f000 f928 	bl	8007834 <_Balloc>
 80075e4:	4681      	mov	r9, r0
 80075e6:	b918      	cbnz	r0, 80075f0 <__gethex+0x424>
 80075e8:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <__gethex+0x488>)
 80075ea:	4602      	mov	r2, r0
 80075ec:	2184      	movs	r1, #132	; 0x84
 80075ee:	e6a8      	b.n	8007342 <__gethex+0x176>
 80075f0:	6922      	ldr	r2, [r4, #16]
 80075f2:	3202      	adds	r2, #2
 80075f4:	f104 010c 	add.w	r1, r4, #12
 80075f8:	0092      	lsls	r2, r2, #2
 80075fa:	300c      	adds	r0, #12
 80075fc:	f000 f90c 	bl	8007818 <memcpy>
 8007600:	4621      	mov	r1, r4
 8007602:	ee18 0a10 	vmov	r0, s16
 8007606:	f000 f955 	bl	80078b4 <_Bfree>
 800760a:	464c      	mov	r4, r9
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007614:	6122      	str	r2, [r4, #16]
 8007616:	2201      	movs	r2, #1
 8007618:	615a      	str	r2, [r3, #20]
 800761a:	e7bb      	b.n	8007594 <__gethex+0x3c8>
 800761c:	6922      	ldr	r2, [r4, #16]
 800761e:	455a      	cmp	r2, fp
 8007620:	dd0b      	ble.n	800763a <__gethex+0x46e>
 8007622:	2101      	movs	r1, #1
 8007624:	4620      	mov	r0, r4
 8007626:	f7ff fd69 	bl	80070fc <rshift>
 800762a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800762e:	3501      	adds	r5, #1
 8007630:	42ab      	cmp	r3, r5
 8007632:	f6ff aed0 	blt.w	80073d6 <__gethex+0x20a>
 8007636:	2701      	movs	r7, #1
 8007638:	e7c0      	b.n	80075bc <__gethex+0x3f0>
 800763a:	f016 061f 	ands.w	r6, r6, #31
 800763e:	d0fa      	beq.n	8007636 <__gethex+0x46a>
 8007640:	4453      	add	r3, sl
 8007642:	f1c6 0620 	rsb	r6, r6, #32
 8007646:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800764a:	f000 f9e5 	bl	8007a18 <__hi0bits>
 800764e:	42b0      	cmp	r0, r6
 8007650:	dbe7      	blt.n	8007622 <__gethex+0x456>
 8007652:	e7f0      	b.n	8007636 <__gethex+0x46a>
 8007654:	08009598 	.word	0x08009598

08007658 <L_shift>:
 8007658:	f1c2 0208 	rsb	r2, r2, #8
 800765c:	0092      	lsls	r2, r2, #2
 800765e:	b570      	push	{r4, r5, r6, lr}
 8007660:	f1c2 0620 	rsb	r6, r2, #32
 8007664:	6843      	ldr	r3, [r0, #4]
 8007666:	6804      	ldr	r4, [r0, #0]
 8007668:	fa03 f506 	lsl.w	r5, r3, r6
 800766c:	432c      	orrs	r4, r5
 800766e:	40d3      	lsrs	r3, r2
 8007670:	6004      	str	r4, [r0, #0]
 8007672:	f840 3f04 	str.w	r3, [r0, #4]!
 8007676:	4288      	cmp	r0, r1
 8007678:	d3f4      	bcc.n	8007664 <L_shift+0xc>
 800767a:	bd70      	pop	{r4, r5, r6, pc}

0800767c <__match>:
 800767c:	b530      	push	{r4, r5, lr}
 800767e:	6803      	ldr	r3, [r0, #0]
 8007680:	3301      	adds	r3, #1
 8007682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007686:	b914      	cbnz	r4, 800768e <__match+0x12>
 8007688:	6003      	str	r3, [r0, #0]
 800768a:	2001      	movs	r0, #1
 800768c:	bd30      	pop	{r4, r5, pc}
 800768e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007692:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007696:	2d19      	cmp	r5, #25
 8007698:	bf98      	it	ls
 800769a:	3220      	addls	r2, #32
 800769c:	42a2      	cmp	r2, r4
 800769e:	d0f0      	beq.n	8007682 <__match+0x6>
 80076a0:	2000      	movs	r0, #0
 80076a2:	e7f3      	b.n	800768c <__match+0x10>

080076a4 <__hexnan>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	680b      	ldr	r3, [r1, #0]
 80076aa:	115e      	asrs	r6, r3, #5
 80076ac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80076b0:	f013 031f 	ands.w	r3, r3, #31
 80076b4:	b087      	sub	sp, #28
 80076b6:	bf18      	it	ne
 80076b8:	3604      	addne	r6, #4
 80076ba:	2500      	movs	r5, #0
 80076bc:	1f37      	subs	r7, r6, #4
 80076be:	4690      	mov	r8, r2
 80076c0:	6802      	ldr	r2, [r0, #0]
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	4682      	mov	sl, r0
 80076c6:	f846 5c04 	str.w	r5, [r6, #-4]
 80076ca:	46b9      	mov	r9, r7
 80076cc:	463c      	mov	r4, r7
 80076ce:	9502      	str	r5, [sp, #8]
 80076d0:	46ab      	mov	fp, r5
 80076d2:	7851      	ldrb	r1, [r2, #1]
 80076d4:	1c53      	adds	r3, r2, #1
 80076d6:	9303      	str	r3, [sp, #12]
 80076d8:	b341      	cbz	r1, 800772c <__hexnan+0x88>
 80076da:	4608      	mov	r0, r1
 80076dc:	9205      	str	r2, [sp, #20]
 80076de:	9104      	str	r1, [sp, #16]
 80076e0:	f7ff fd5e 	bl	80071a0 <__hexdig_fun>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d14f      	bne.n	8007788 <__hexnan+0xe4>
 80076e8:	9904      	ldr	r1, [sp, #16]
 80076ea:	9a05      	ldr	r2, [sp, #20]
 80076ec:	2920      	cmp	r1, #32
 80076ee:	d818      	bhi.n	8007722 <__hexnan+0x7e>
 80076f0:	9b02      	ldr	r3, [sp, #8]
 80076f2:	459b      	cmp	fp, r3
 80076f4:	dd13      	ble.n	800771e <__hexnan+0x7a>
 80076f6:	454c      	cmp	r4, r9
 80076f8:	d206      	bcs.n	8007708 <__hexnan+0x64>
 80076fa:	2d07      	cmp	r5, #7
 80076fc:	dc04      	bgt.n	8007708 <__hexnan+0x64>
 80076fe:	462a      	mov	r2, r5
 8007700:	4649      	mov	r1, r9
 8007702:	4620      	mov	r0, r4
 8007704:	f7ff ffa8 	bl	8007658 <L_shift>
 8007708:	4544      	cmp	r4, r8
 800770a:	d950      	bls.n	80077ae <__hexnan+0x10a>
 800770c:	2300      	movs	r3, #0
 800770e:	f1a4 0904 	sub.w	r9, r4, #4
 8007712:	f844 3c04 	str.w	r3, [r4, #-4]
 8007716:	f8cd b008 	str.w	fp, [sp, #8]
 800771a:	464c      	mov	r4, r9
 800771c:	461d      	mov	r5, r3
 800771e:	9a03      	ldr	r2, [sp, #12]
 8007720:	e7d7      	b.n	80076d2 <__hexnan+0x2e>
 8007722:	2929      	cmp	r1, #41	; 0x29
 8007724:	d156      	bne.n	80077d4 <__hexnan+0x130>
 8007726:	3202      	adds	r2, #2
 8007728:	f8ca 2000 	str.w	r2, [sl]
 800772c:	f1bb 0f00 	cmp.w	fp, #0
 8007730:	d050      	beq.n	80077d4 <__hexnan+0x130>
 8007732:	454c      	cmp	r4, r9
 8007734:	d206      	bcs.n	8007744 <__hexnan+0xa0>
 8007736:	2d07      	cmp	r5, #7
 8007738:	dc04      	bgt.n	8007744 <__hexnan+0xa0>
 800773a:	462a      	mov	r2, r5
 800773c:	4649      	mov	r1, r9
 800773e:	4620      	mov	r0, r4
 8007740:	f7ff ff8a 	bl	8007658 <L_shift>
 8007744:	4544      	cmp	r4, r8
 8007746:	d934      	bls.n	80077b2 <__hexnan+0x10e>
 8007748:	f1a8 0204 	sub.w	r2, r8, #4
 800774c:	4623      	mov	r3, r4
 800774e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007752:	f842 1f04 	str.w	r1, [r2, #4]!
 8007756:	429f      	cmp	r7, r3
 8007758:	d2f9      	bcs.n	800774e <__hexnan+0xaa>
 800775a:	1b3b      	subs	r3, r7, r4
 800775c:	f023 0303 	bic.w	r3, r3, #3
 8007760:	3304      	adds	r3, #4
 8007762:	3401      	adds	r4, #1
 8007764:	3e03      	subs	r6, #3
 8007766:	42b4      	cmp	r4, r6
 8007768:	bf88      	it	hi
 800776a:	2304      	movhi	r3, #4
 800776c:	4443      	add	r3, r8
 800776e:	2200      	movs	r2, #0
 8007770:	f843 2b04 	str.w	r2, [r3], #4
 8007774:	429f      	cmp	r7, r3
 8007776:	d2fb      	bcs.n	8007770 <__hexnan+0xcc>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	b91b      	cbnz	r3, 8007784 <__hexnan+0xe0>
 800777c:	4547      	cmp	r7, r8
 800777e:	d127      	bne.n	80077d0 <__hexnan+0x12c>
 8007780:	2301      	movs	r3, #1
 8007782:	603b      	str	r3, [r7, #0]
 8007784:	2005      	movs	r0, #5
 8007786:	e026      	b.n	80077d6 <__hexnan+0x132>
 8007788:	3501      	adds	r5, #1
 800778a:	2d08      	cmp	r5, #8
 800778c:	f10b 0b01 	add.w	fp, fp, #1
 8007790:	dd06      	ble.n	80077a0 <__hexnan+0xfc>
 8007792:	4544      	cmp	r4, r8
 8007794:	d9c3      	bls.n	800771e <__hexnan+0x7a>
 8007796:	2300      	movs	r3, #0
 8007798:	f844 3c04 	str.w	r3, [r4, #-4]
 800779c:	2501      	movs	r5, #1
 800779e:	3c04      	subs	r4, #4
 80077a0:	6822      	ldr	r2, [r4, #0]
 80077a2:	f000 000f 	and.w	r0, r0, #15
 80077a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80077aa:	6022      	str	r2, [r4, #0]
 80077ac:	e7b7      	b.n	800771e <__hexnan+0x7a>
 80077ae:	2508      	movs	r5, #8
 80077b0:	e7b5      	b.n	800771e <__hexnan+0x7a>
 80077b2:	9b01      	ldr	r3, [sp, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0df      	beq.n	8007778 <__hexnan+0xd4>
 80077b8:	f04f 32ff 	mov.w	r2, #4294967295
 80077bc:	f1c3 0320 	rsb	r3, r3, #32
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
 80077c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80077c8:	401a      	ands	r2, r3
 80077ca:	f846 2c04 	str.w	r2, [r6, #-4]
 80077ce:	e7d3      	b.n	8007778 <__hexnan+0xd4>
 80077d0:	3f04      	subs	r7, #4
 80077d2:	e7d1      	b.n	8007778 <__hexnan+0xd4>
 80077d4:	2004      	movs	r0, #4
 80077d6:	b007      	add	sp, #28
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077dc <_localeconv_r>:
 80077dc:	4800      	ldr	r0, [pc, #0]	; (80077e0 <_localeconv_r+0x4>)
 80077de:	4770      	bx	lr
 80077e0:	20000170 	.word	0x20000170

080077e4 <malloc>:
 80077e4:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <malloc+0xc>)
 80077e6:	4601      	mov	r1, r0
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	f000 bd67 	b.w	80082bc <_malloc_r>
 80077ee:	bf00      	nop
 80077f0:	20000018 	.word	0x20000018

080077f4 <__ascii_mbtowc>:
 80077f4:	b082      	sub	sp, #8
 80077f6:	b901      	cbnz	r1, 80077fa <__ascii_mbtowc+0x6>
 80077f8:	a901      	add	r1, sp, #4
 80077fa:	b142      	cbz	r2, 800780e <__ascii_mbtowc+0x1a>
 80077fc:	b14b      	cbz	r3, 8007812 <__ascii_mbtowc+0x1e>
 80077fe:	7813      	ldrb	r3, [r2, #0]
 8007800:	600b      	str	r3, [r1, #0]
 8007802:	7812      	ldrb	r2, [r2, #0]
 8007804:	1e10      	subs	r0, r2, #0
 8007806:	bf18      	it	ne
 8007808:	2001      	movne	r0, #1
 800780a:	b002      	add	sp, #8
 800780c:	4770      	bx	lr
 800780e:	4610      	mov	r0, r2
 8007810:	e7fb      	b.n	800780a <__ascii_mbtowc+0x16>
 8007812:	f06f 0001 	mvn.w	r0, #1
 8007816:	e7f8      	b.n	800780a <__ascii_mbtowc+0x16>

08007818 <memcpy>:
 8007818:	440a      	add	r2, r1
 800781a:	4291      	cmp	r1, r2
 800781c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007820:	d100      	bne.n	8007824 <memcpy+0xc>
 8007822:	4770      	bx	lr
 8007824:	b510      	push	{r4, lr}
 8007826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800782a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800782e:	4291      	cmp	r1, r2
 8007830:	d1f9      	bne.n	8007826 <memcpy+0xe>
 8007832:	bd10      	pop	{r4, pc}

08007834 <_Balloc>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007838:	4604      	mov	r4, r0
 800783a:	460d      	mov	r5, r1
 800783c:	b976      	cbnz	r6, 800785c <_Balloc+0x28>
 800783e:	2010      	movs	r0, #16
 8007840:	f7ff ffd0 	bl	80077e4 <malloc>
 8007844:	4602      	mov	r2, r0
 8007846:	6260      	str	r0, [r4, #36]	; 0x24
 8007848:	b920      	cbnz	r0, 8007854 <_Balloc+0x20>
 800784a:	4b18      	ldr	r3, [pc, #96]	; (80078ac <_Balloc+0x78>)
 800784c:	4818      	ldr	r0, [pc, #96]	; (80078b0 <_Balloc+0x7c>)
 800784e:	2166      	movs	r1, #102	; 0x66
 8007850:	f000 ff40 	bl	80086d4 <__assert_func>
 8007854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007858:	6006      	str	r6, [r0, #0]
 800785a:	60c6      	str	r6, [r0, #12]
 800785c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800785e:	68f3      	ldr	r3, [r6, #12]
 8007860:	b183      	cbz	r3, 8007884 <_Balloc+0x50>
 8007862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800786a:	b9b8      	cbnz	r0, 800789c <_Balloc+0x68>
 800786c:	2101      	movs	r1, #1
 800786e:	fa01 f605 	lsl.w	r6, r1, r5
 8007872:	1d72      	adds	r2, r6, #5
 8007874:	0092      	lsls	r2, r2, #2
 8007876:	4620      	mov	r0, r4
 8007878:	f000 fc9d 	bl	80081b6 <_calloc_r>
 800787c:	b160      	cbz	r0, 8007898 <_Balloc+0x64>
 800787e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007882:	e00e      	b.n	80078a2 <_Balloc+0x6e>
 8007884:	2221      	movs	r2, #33	; 0x21
 8007886:	2104      	movs	r1, #4
 8007888:	4620      	mov	r0, r4
 800788a:	f000 fc94 	bl	80081b6 <_calloc_r>
 800788e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007890:	60f0      	str	r0, [r6, #12]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e4      	bne.n	8007862 <_Balloc+0x2e>
 8007898:	2000      	movs	r0, #0
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	6802      	ldr	r2, [r0, #0]
 800789e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078a2:	2300      	movs	r3, #0
 80078a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078a8:	e7f7      	b.n	800789a <_Balloc+0x66>
 80078aa:	bf00      	nop
 80078ac:	08009526 	.word	0x08009526
 80078b0:	08009624 	.word	0x08009624

080078b4 <_Bfree>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b976      	cbnz	r6, 80078dc <_Bfree+0x28>
 80078be:	2010      	movs	r0, #16
 80078c0:	f7ff ff90 	bl	80077e4 <malloc>
 80078c4:	4602      	mov	r2, r0
 80078c6:	6268      	str	r0, [r5, #36]	; 0x24
 80078c8:	b920      	cbnz	r0, 80078d4 <_Bfree+0x20>
 80078ca:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <_Bfree+0x3c>)
 80078cc:	4809      	ldr	r0, [pc, #36]	; (80078f4 <_Bfree+0x40>)
 80078ce:	218a      	movs	r1, #138	; 0x8a
 80078d0:	f000 ff00 	bl	80086d4 <__assert_func>
 80078d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078d8:	6006      	str	r6, [r0, #0]
 80078da:	60c6      	str	r6, [r0, #12]
 80078dc:	b13c      	cbz	r4, 80078ee <_Bfree+0x3a>
 80078de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078e0:	6862      	ldr	r2, [r4, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078e8:	6021      	str	r1, [r4, #0]
 80078ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	08009526 	.word	0x08009526
 80078f4:	08009624 	.word	0x08009624

080078f8 <__multadd>:
 80078f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fc:	690d      	ldr	r5, [r1, #16]
 80078fe:	4607      	mov	r7, r0
 8007900:	460c      	mov	r4, r1
 8007902:	461e      	mov	r6, r3
 8007904:	f101 0c14 	add.w	ip, r1, #20
 8007908:	2000      	movs	r0, #0
 800790a:	f8dc 3000 	ldr.w	r3, [ip]
 800790e:	b299      	uxth	r1, r3
 8007910:	fb02 6101 	mla	r1, r2, r1, r6
 8007914:	0c1e      	lsrs	r6, r3, #16
 8007916:	0c0b      	lsrs	r3, r1, #16
 8007918:	fb02 3306 	mla	r3, r2, r6, r3
 800791c:	b289      	uxth	r1, r1
 800791e:	3001      	adds	r0, #1
 8007920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007924:	4285      	cmp	r5, r0
 8007926:	f84c 1b04 	str.w	r1, [ip], #4
 800792a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800792e:	dcec      	bgt.n	800790a <__multadd+0x12>
 8007930:	b30e      	cbz	r6, 8007976 <__multadd+0x7e>
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	42ab      	cmp	r3, r5
 8007936:	dc19      	bgt.n	800796c <__multadd+0x74>
 8007938:	6861      	ldr	r1, [r4, #4]
 800793a:	4638      	mov	r0, r7
 800793c:	3101      	adds	r1, #1
 800793e:	f7ff ff79 	bl	8007834 <_Balloc>
 8007942:	4680      	mov	r8, r0
 8007944:	b928      	cbnz	r0, 8007952 <__multadd+0x5a>
 8007946:	4602      	mov	r2, r0
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <__multadd+0x84>)
 800794a:	480d      	ldr	r0, [pc, #52]	; (8007980 <__multadd+0x88>)
 800794c:	21b5      	movs	r1, #181	; 0xb5
 800794e:	f000 fec1 	bl	80086d4 <__assert_func>
 8007952:	6922      	ldr	r2, [r4, #16]
 8007954:	3202      	adds	r2, #2
 8007956:	f104 010c 	add.w	r1, r4, #12
 800795a:	0092      	lsls	r2, r2, #2
 800795c:	300c      	adds	r0, #12
 800795e:	f7ff ff5b 	bl	8007818 <memcpy>
 8007962:	4621      	mov	r1, r4
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff ffa5 	bl	80078b4 <_Bfree>
 800796a:	4644      	mov	r4, r8
 800796c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007970:	3501      	adds	r5, #1
 8007972:	615e      	str	r6, [r3, #20]
 8007974:	6125      	str	r5, [r4, #16]
 8007976:	4620      	mov	r0, r4
 8007978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800797c:	08009598 	.word	0x08009598
 8007980:	08009624 	.word	0x08009624

08007984 <__s2b>:
 8007984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007988:	460c      	mov	r4, r1
 800798a:	4615      	mov	r5, r2
 800798c:	461f      	mov	r7, r3
 800798e:	2209      	movs	r2, #9
 8007990:	3308      	adds	r3, #8
 8007992:	4606      	mov	r6, r0
 8007994:	fb93 f3f2 	sdiv	r3, r3, r2
 8007998:	2100      	movs	r1, #0
 800799a:	2201      	movs	r2, #1
 800799c:	429a      	cmp	r2, r3
 800799e:	db09      	blt.n	80079b4 <__s2b+0x30>
 80079a0:	4630      	mov	r0, r6
 80079a2:	f7ff ff47 	bl	8007834 <_Balloc>
 80079a6:	b940      	cbnz	r0, 80079ba <__s2b+0x36>
 80079a8:	4602      	mov	r2, r0
 80079aa:	4b19      	ldr	r3, [pc, #100]	; (8007a10 <__s2b+0x8c>)
 80079ac:	4819      	ldr	r0, [pc, #100]	; (8007a14 <__s2b+0x90>)
 80079ae:	21ce      	movs	r1, #206	; 0xce
 80079b0:	f000 fe90 	bl	80086d4 <__assert_func>
 80079b4:	0052      	lsls	r2, r2, #1
 80079b6:	3101      	adds	r1, #1
 80079b8:	e7f0      	b.n	800799c <__s2b+0x18>
 80079ba:	9b08      	ldr	r3, [sp, #32]
 80079bc:	6143      	str	r3, [r0, #20]
 80079be:	2d09      	cmp	r5, #9
 80079c0:	f04f 0301 	mov.w	r3, #1
 80079c4:	6103      	str	r3, [r0, #16]
 80079c6:	dd16      	ble.n	80079f6 <__s2b+0x72>
 80079c8:	f104 0909 	add.w	r9, r4, #9
 80079cc:	46c8      	mov	r8, r9
 80079ce:	442c      	add	r4, r5
 80079d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80079d4:	4601      	mov	r1, r0
 80079d6:	3b30      	subs	r3, #48	; 0x30
 80079d8:	220a      	movs	r2, #10
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ff8c 	bl	80078f8 <__multadd>
 80079e0:	45a0      	cmp	r8, r4
 80079e2:	d1f5      	bne.n	80079d0 <__s2b+0x4c>
 80079e4:	f1a5 0408 	sub.w	r4, r5, #8
 80079e8:	444c      	add	r4, r9
 80079ea:	1b2d      	subs	r5, r5, r4
 80079ec:	1963      	adds	r3, r4, r5
 80079ee:	42bb      	cmp	r3, r7
 80079f0:	db04      	blt.n	80079fc <__s2b+0x78>
 80079f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079f6:	340a      	adds	r4, #10
 80079f8:	2509      	movs	r5, #9
 80079fa:	e7f6      	b.n	80079ea <__s2b+0x66>
 80079fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a00:	4601      	mov	r1, r0
 8007a02:	3b30      	subs	r3, #48	; 0x30
 8007a04:	220a      	movs	r2, #10
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ff76 	bl	80078f8 <__multadd>
 8007a0c:	e7ee      	b.n	80079ec <__s2b+0x68>
 8007a0e:	bf00      	nop
 8007a10:	08009598 	.word	0x08009598
 8007a14:	08009624 	.word	0x08009624

08007a18 <__hi0bits>:
 8007a18:	0c03      	lsrs	r3, r0, #16
 8007a1a:	041b      	lsls	r3, r3, #16
 8007a1c:	b9d3      	cbnz	r3, 8007a54 <__hi0bits+0x3c>
 8007a1e:	0400      	lsls	r0, r0, #16
 8007a20:	2310      	movs	r3, #16
 8007a22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a26:	bf04      	itt	eq
 8007a28:	0200      	lsleq	r0, r0, #8
 8007a2a:	3308      	addeq	r3, #8
 8007a2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007a30:	bf04      	itt	eq
 8007a32:	0100      	lsleq	r0, r0, #4
 8007a34:	3304      	addeq	r3, #4
 8007a36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007a3a:	bf04      	itt	eq
 8007a3c:	0080      	lsleq	r0, r0, #2
 8007a3e:	3302      	addeq	r3, #2
 8007a40:	2800      	cmp	r0, #0
 8007a42:	db05      	blt.n	8007a50 <__hi0bits+0x38>
 8007a44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a48:	f103 0301 	add.w	r3, r3, #1
 8007a4c:	bf08      	it	eq
 8007a4e:	2320      	moveq	r3, #32
 8007a50:	4618      	mov	r0, r3
 8007a52:	4770      	bx	lr
 8007a54:	2300      	movs	r3, #0
 8007a56:	e7e4      	b.n	8007a22 <__hi0bits+0xa>

08007a58 <__lo0bits>:
 8007a58:	6803      	ldr	r3, [r0, #0]
 8007a5a:	f013 0207 	ands.w	r2, r3, #7
 8007a5e:	4601      	mov	r1, r0
 8007a60:	d00b      	beq.n	8007a7a <__lo0bits+0x22>
 8007a62:	07da      	lsls	r2, r3, #31
 8007a64:	d423      	bmi.n	8007aae <__lo0bits+0x56>
 8007a66:	0798      	lsls	r0, r3, #30
 8007a68:	bf49      	itett	mi
 8007a6a:	085b      	lsrmi	r3, r3, #1
 8007a6c:	089b      	lsrpl	r3, r3, #2
 8007a6e:	2001      	movmi	r0, #1
 8007a70:	600b      	strmi	r3, [r1, #0]
 8007a72:	bf5c      	itt	pl
 8007a74:	600b      	strpl	r3, [r1, #0]
 8007a76:	2002      	movpl	r0, #2
 8007a78:	4770      	bx	lr
 8007a7a:	b298      	uxth	r0, r3
 8007a7c:	b9a8      	cbnz	r0, 8007aaa <__lo0bits+0x52>
 8007a7e:	0c1b      	lsrs	r3, r3, #16
 8007a80:	2010      	movs	r0, #16
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	b90a      	cbnz	r2, 8007a8a <__lo0bits+0x32>
 8007a86:	3008      	adds	r0, #8
 8007a88:	0a1b      	lsrs	r3, r3, #8
 8007a8a:	071a      	lsls	r2, r3, #28
 8007a8c:	bf04      	itt	eq
 8007a8e:	091b      	lsreq	r3, r3, #4
 8007a90:	3004      	addeq	r0, #4
 8007a92:	079a      	lsls	r2, r3, #30
 8007a94:	bf04      	itt	eq
 8007a96:	089b      	lsreq	r3, r3, #2
 8007a98:	3002      	addeq	r0, #2
 8007a9a:	07da      	lsls	r2, r3, #31
 8007a9c:	d403      	bmi.n	8007aa6 <__lo0bits+0x4e>
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	f100 0001 	add.w	r0, r0, #1
 8007aa4:	d005      	beq.n	8007ab2 <__lo0bits+0x5a>
 8007aa6:	600b      	str	r3, [r1, #0]
 8007aa8:	4770      	bx	lr
 8007aaa:	4610      	mov	r0, r2
 8007aac:	e7e9      	b.n	8007a82 <__lo0bits+0x2a>
 8007aae:	2000      	movs	r0, #0
 8007ab0:	4770      	bx	lr
 8007ab2:	2020      	movs	r0, #32
 8007ab4:	4770      	bx	lr
	...

08007ab8 <__i2b>:
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	460c      	mov	r4, r1
 8007abc:	2101      	movs	r1, #1
 8007abe:	f7ff feb9 	bl	8007834 <_Balloc>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	b928      	cbnz	r0, 8007ad2 <__i2b+0x1a>
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <__i2b+0x24>)
 8007ac8:	4805      	ldr	r0, [pc, #20]	; (8007ae0 <__i2b+0x28>)
 8007aca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ace:	f000 fe01 	bl	80086d4 <__assert_func>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	6144      	str	r4, [r0, #20]
 8007ad6:	6103      	str	r3, [r0, #16]
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	bf00      	nop
 8007adc:	08009598 	.word	0x08009598
 8007ae0:	08009624 	.word	0x08009624

08007ae4 <__multiply>:
 8007ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	4691      	mov	r9, r2
 8007aea:	690a      	ldr	r2, [r1, #16]
 8007aec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	bfb8      	it	lt
 8007af4:	460b      	movlt	r3, r1
 8007af6:	460c      	mov	r4, r1
 8007af8:	bfbc      	itt	lt
 8007afa:	464c      	movlt	r4, r9
 8007afc:	4699      	movlt	r9, r3
 8007afe:	6927      	ldr	r7, [r4, #16]
 8007b00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b04:	68a3      	ldr	r3, [r4, #8]
 8007b06:	6861      	ldr	r1, [r4, #4]
 8007b08:	eb07 060a 	add.w	r6, r7, sl
 8007b0c:	42b3      	cmp	r3, r6
 8007b0e:	b085      	sub	sp, #20
 8007b10:	bfb8      	it	lt
 8007b12:	3101      	addlt	r1, #1
 8007b14:	f7ff fe8e 	bl	8007834 <_Balloc>
 8007b18:	b930      	cbnz	r0, 8007b28 <__multiply+0x44>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	4b44      	ldr	r3, [pc, #272]	; (8007c30 <__multiply+0x14c>)
 8007b1e:	4845      	ldr	r0, [pc, #276]	; (8007c34 <__multiply+0x150>)
 8007b20:	f240 115d 	movw	r1, #349	; 0x15d
 8007b24:	f000 fdd6 	bl	80086d4 <__assert_func>
 8007b28:	f100 0514 	add.w	r5, r0, #20
 8007b2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b30:	462b      	mov	r3, r5
 8007b32:	2200      	movs	r2, #0
 8007b34:	4543      	cmp	r3, r8
 8007b36:	d321      	bcc.n	8007b7c <__multiply+0x98>
 8007b38:	f104 0314 	add.w	r3, r4, #20
 8007b3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007b40:	f109 0314 	add.w	r3, r9, #20
 8007b44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b48:	9202      	str	r2, [sp, #8]
 8007b4a:	1b3a      	subs	r2, r7, r4
 8007b4c:	3a15      	subs	r2, #21
 8007b4e:	f022 0203 	bic.w	r2, r2, #3
 8007b52:	3204      	adds	r2, #4
 8007b54:	f104 0115 	add.w	r1, r4, #21
 8007b58:	428f      	cmp	r7, r1
 8007b5a:	bf38      	it	cc
 8007b5c:	2204      	movcc	r2, #4
 8007b5e:	9201      	str	r2, [sp, #4]
 8007b60:	9a02      	ldr	r2, [sp, #8]
 8007b62:	9303      	str	r3, [sp, #12]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d80c      	bhi.n	8007b82 <__multiply+0x9e>
 8007b68:	2e00      	cmp	r6, #0
 8007b6a:	dd03      	ble.n	8007b74 <__multiply+0x90>
 8007b6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d05a      	beq.n	8007c2a <__multiply+0x146>
 8007b74:	6106      	str	r6, [r0, #16]
 8007b76:	b005      	add	sp, #20
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	f843 2b04 	str.w	r2, [r3], #4
 8007b80:	e7d8      	b.n	8007b34 <__multiply+0x50>
 8007b82:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b86:	f1ba 0f00 	cmp.w	sl, #0
 8007b8a:	d024      	beq.n	8007bd6 <__multiply+0xf2>
 8007b8c:	f104 0e14 	add.w	lr, r4, #20
 8007b90:	46a9      	mov	r9, r5
 8007b92:	f04f 0c00 	mov.w	ip, #0
 8007b96:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b9a:	f8d9 1000 	ldr.w	r1, [r9]
 8007b9e:	fa1f fb82 	uxth.w	fp, r2
 8007ba2:	b289      	uxth	r1, r1
 8007ba4:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ba8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007bac:	f8d9 2000 	ldr.w	r2, [r9]
 8007bb0:	4461      	add	r1, ip
 8007bb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bb6:	fb0a c20b 	mla	r2, sl, fp, ip
 8007bba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007bbe:	b289      	uxth	r1, r1
 8007bc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bc4:	4577      	cmp	r7, lr
 8007bc6:	f849 1b04 	str.w	r1, [r9], #4
 8007bca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007bce:	d8e2      	bhi.n	8007b96 <__multiply+0xb2>
 8007bd0:	9a01      	ldr	r2, [sp, #4]
 8007bd2:	f845 c002 	str.w	ip, [r5, r2]
 8007bd6:	9a03      	ldr	r2, [sp, #12]
 8007bd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	f1b9 0f00 	cmp.w	r9, #0
 8007be2:	d020      	beq.n	8007c26 <__multiply+0x142>
 8007be4:	6829      	ldr	r1, [r5, #0]
 8007be6:	f104 0c14 	add.w	ip, r4, #20
 8007bea:	46ae      	mov	lr, r5
 8007bec:	f04f 0a00 	mov.w	sl, #0
 8007bf0:	f8bc b000 	ldrh.w	fp, [ip]
 8007bf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bf8:	fb09 220b 	mla	r2, r9, fp, r2
 8007bfc:	4492      	add	sl, r2
 8007bfe:	b289      	uxth	r1, r1
 8007c00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007c04:	f84e 1b04 	str.w	r1, [lr], #4
 8007c08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007c0c:	f8be 1000 	ldrh.w	r1, [lr]
 8007c10:	0c12      	lsrs	r2, r2, #16
 8007c12:	fb09 1102 	mla	r1, r9, r2, r1
 8007c16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007c1a:	4567      	cmp	r7, ip
 8007c1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007c20:	d8e6      	bhi.n	8007bf0 <__multiply+0x10c>
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	50a9      	str	r1, [r5, r2]
 8007c26:	3504      	adds	r5, #4
 8007c28:	e79a      	b.n	8007b60 <__multiply+0x7c>
 8007c2a:	3e01      	subs	r6, #1
 8007c2c:	e79c      	b.n	8007b68 <__multiply+0x84>
 8007c2e:	bf00      	nop
 8007c30:	08009598 	.word	0x08009598
 8007c34:	08009624 	.word	0x08009624

08007c38 <__pow5mult>:
 8007c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c3c:	4615      	mov	r5, r2
 8007c3e:	f012 0203 	ands.w	r2, r2, #3
 8007c42:	4606      	mov	r6, r0
 8007c44:	460f      	mov	r7, r1
 8007c46:	d007      	beq.n	8007c58 <__pow5mult+0x20>
 8007c48:	4c25      	ldr	r4, [pc, #148]	; (8007ce0 <__pow5mult+0xa8>)
 8007c4a:	3a01      	subs	r2, #1
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c52:	f7ff fe51 	bl	80078f8 <__multadd>
 8007c56:	4607      	mov	r7, r0
 8007c58:	10ad      	asrs	r5, r5, #2
 8007c5a:	d03d      	beq.n	8007cd8 <__pow5mult+0xa0>
 8007c5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c5e:	b97c      	cbnz	r4, 8007c80 <__pow5mult+0x48>
 8007c60:	2010      	movs	r0, #16
 8007c62:	f7ff fdbf 	bl	80077e4 <malloc>
 8007c66:	4602      	mov	r2, r0
 8007c68:	6270      	str	r0, [r6, #36]	; 0x24
 8007c6a:	b928      	cbnz	r0, 8007c78 <__pow5mult+0x40>
 8007c6c:	4b1d      	ldr	r3, [pc, #116]	; (8007ce4 <__pow5mult+0xac>)
 8007c6e:	481e      	ldr	r0, [pc, #120]	; (8007ce8 <__pow5mult+0xb0>)
 8007c70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c74:	f000 fd2e 	bl	80086d4 <__assert_func>
 8007c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c7c:	6004      	str	r4, [r0, #0]
 8007c7e:	60c4      	str	r4, [r0, #12]
 8007c80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c88:	b94c      	cbnz	r4, 8007c9e <__pow5mult+0x66>
 8007c8a:	f240 2171 	movw	r1, #625	; 0x271
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7ff ff12 	bl	8007ab8 <__i2b>
 8007c94:	2300      	movs	r3, #0
 8007c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	6003      	str	r3, [r0, #0]
 8007c9e:	f04f 0900 	mov.w	r9, #0
 8007ca2:	07eb      	lsls	r3, r5, #31
 8007ca4:	d50a      	bpl.n	8007cbc <__pow5mult+0x84>
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	4622      	mov	r2, r4
 8007caa:	4630      	mov	r0, r6
 8007cac:	f7ff ff1a 	bl	8007ae4 <__multiply>
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	4680      	mov	r8, r0
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f7ff fdfd 	bl	80078b4 <_Bfree>
 8007cba:	4647      	mov	r7, r8
 8007cbc:	106d      	asrs	r5, r5, #1
 8007cbe:	d00b      	beq.n	8007cd8 <__pow5mult+0xa0>
 8007cc0:	6820      	ldr	r0, [r4, #0]
 8007cc2:	b938      	cbnz	r0, 8007cd4 <__pow5mult+0x9c>
 8007cc4:	4622      	mov	r2, r4
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f7ff ff0b 	bl	8007ae4 <__multiply>
 8007cce:	6020      	str	r0, [r4, #0]
 8007cd0:	f8c0 9000 	str.w	r9, [r0]
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	e7e4      	b.n	8007ca2 <__pow5mult+0x6a>
 8007cd8:	4638      	mov	r0, r7
 8007cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cde:	bf00      	nop
 8007ce0:	08009770 	.word	0x08009770
 8007ce4:	08009526 	.word	0x08009526
 8007ce8:	08009624 	.word	0x08009624

08007cec <__lshift>:
 8007cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	6849      	ldr	r1, [r1, #4]
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cfa:	68a3      	ldr	r3, [r4, #8]
 8007cfc:	4607      	mov	r7, r0
 8007cfe:	4691      	mov	r9, r2
 8007d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d04:	f108 0601 	add.w	r6, r8, #1
 8007d08:	42b3      	cmp	r3, r6
 8007d0a:	db0b      	blt.n	8007d24 <__lshift+0x38>
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff fd91 	bl	8007834 <_Balloc>
 8007d12:	4605      	mov	r5, r0
 8007d14:	b948      	cbnz	r0, 8007d2a <__lshift+0x3e>
 8007d16:	4602      	mov	r2, r0
 8007d18:	4b2a      	ldr	r3, [pc, #168]	; (8007dc4 <__lshift+0xd8>)
 8007d1a:	482b      	ldr	r0, [pc, #172]	; (8007dc8 <__lshift+0xdc>)
 8007d1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d20:	f000 fcd8 	bl	80086d4 <__assert_func>
 8007d24:	3101      	adds	r1, #1
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	e7ee      	b.n	8007d08 <__lshift+0x1c>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f100 0114 	add.w	r1, r0, #20
 8007d30:	f100 0210 	add.w	r2, r0, #16
 8007d34:	4618      	mov	r0, r3
 8007d36:	4553      	cmp	r3, sl
 8007d38:	db37      	blt.n	8007daa <__lshift+0xbe>
 8007d3a:	6920      	ldr	r0, [r4, #16]
 8007d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d40:	f104 0314 	add.w	r3, r4, #20
 8007d44:	f019 091f 	ands.w	r9, r9, #31
 8007d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d50:	d02f      	beq.n	8007db2 <__lshift+0xc6>
 8007d52:	f1c9 0e20 	rsb	lr, r9, #32
 8007d56:	468a      	mov	sl, r1
 8007d58:	f04f 0c00 	mov.w	ip, #0
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	fa02 f209 	lsl.w	r2, r2, r9
 8007d62:	ea42 020c 	orr.w	r2, r2, ip
 8007d66:	f84a 2b04 	str.w	r2, [sl], #4
 8007d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6e:	4298      	cmp	r0, r3
 8007d70:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d74:	d8f2      	bhi.n	8007d5c <__lshift+0x70>
 8007d76:	1b03      	subs	r3, r0, r4
 8007d78:	3b15      	subs	r3, #21
 8007d7a:	f023 0303 	bic.w	r3, r3, #3
 8007d7e:	3304      	adds	r3, #4
 8007d80:	f104 0215 	add.w	r2, r4, #21
 8007d84:	4290      	cmp	r0, r2
 8007d86:	bf38      	it	cc
 8007d88:	2304      	movcc	r3, #4
 8007d8a:	f841 c003 	str.w	ip, [r1, r3]
 8007d8e:	f1bc 0f00 	cmp.w	ip, #0
 8007d92:	d001      	beq.n	8007d98 <__lshift+0xac>
 8007d94:	f108 0602 	add.w	r6, r8, #2
 8007d98:	3e01      	subs	r6, #1
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	612e      	str	r6, [r5, #16]
 8007d9e:	4621      	mov	r1, r4
 8007da0:	f7ff fd88 	bl	80078b4 <_Bfree>
 8007da4:	4628      	mov	r0, r5
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007dae:	3301      	adds	r3, #1
 8007db0:	e7c1      	b.n	8007d36 <__lshift+0x4a>
 8007db2:	3904      	subs	r1, #4
 8007db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007dbc:	4298      	cmp	r0, r3
 8007dbe:	d8f9      	bhi.n	8007db4 <__lshift+0xc8>
 8007dc0:	e7ea      	b.n	8007d98 <__lshift+0xac>
 8007dc2:	bf00      	nop
 8007dc4:	08009598 	.word	0x08009598
 8007dc8:	08009624 	.word	0x08009624

08007dcc <__mcmp>:
 8007dcc:	b530      	push	{r4, r5, lr}
 8007dce:	6902      	ldr	r2, [r0, #16]
 8007dd0:	690c      	ldr	r4, [r1, #16]
 8007dd2:	1b12      	subs	r2, r2, r4
 8007dd4:	d10e      	bne.n	8007df4 <__mcmp+0x28>
 8007dd6:	f100 0314 	add.w	r3, r0, #20
 8007dda:	3114      	adds	r1, #20
 8007ddc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007de0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007de4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007de8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007dec:	42a5      	cmp	r5, r4
 8007dee:	d003      	beq.n	8007df8 <__mcmp+0x2c>
 8007df0:	d305      	bcc.n	8007dfe <__mcmp+0x32>
 8007df2:	2201      	movs	r2, #1
 8007df4:	4610      	mov	r0, r2
 8007df6:	bd30      	pop	{r4, r5, pc}
 8007df8:	4283      	cmp	r3, r0
 8007dfa:	d3f3      	bcc.n	8007de4 <__mcmp+0x18>
 8007dfc:	e7fa      	b.n	8007df4 <__mcmp+0x28>
 8007dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007e02:	e7f7      	b.n	8007df4 <__mcmp+0x28>

08007e04 <__mdiff>:
 8007e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e08:	460c      	mov	r4, r1
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4690      	mov	r8, r2
 8007e12:	f7ff ffdb 	bl	8007dcc <__mcmp>
 8007e16:	1e05      	subs	r5, r0, #0
 8007e18:	d110      	bne.n	8007e3c <__mdiff+0x38>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff fd09 	bl	8007834 <_Balloc>
 8007e22:	b930      	cbnz	r0, 8007e32 <__mdiff+0x2e>
 8007e24:	4b3a      	ldr	r3, [pc, #232]	; (8007f10 <__mdiff+0x10c>)
 8007e26:	4602      	mov	r2, r0
 8007e28:	f240 2132 	movw	r1, #562	; 0x232
 8007e2c:	4839      	ldr	r0, [pc, #228]	; (8007f14 <__mdiff+0x110>)
 8007e2e:	f000 fc51 	bl	80086d4 <__assert_func>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	bfa4      	itt	ge
 8007e3e:	4643      	movge	r3, r8
 8007e40:	46a0      	movge	r8, r4
 8007e42:	4630      	mov	r0, r6
 8007e44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e48:	bfa6      	itte	ge
 8007e4a:	461c      	movge	r4, r3
 8007e4c:	2500      	movge	r5, #0
 8007e4e:	2501      	movlt	r5, #1
 8007e50:	f7ff fcf0 	bl	8007834 <_Balloc>
 8007e54:	b920      	cbnz	r0, 8007e60 <__mdiff+0x5c>
 8007e56:	4b2e      	ldr	r3, [pc, #184]	; (8007f10 <__mdiff+0x10c>)
 8007e58:	4602      	mov	r2, r0
 8007e5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e5e:	e7e5      	b.n	8007e2c <__mdiff+0x28>
 8007e60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e64:	6926      	ldr	r6, [r4, #16]
 8007e66:	60c5      	str	r5, [r0, #12]
 8007e68:	f104 0914 	add.w	r9, r4, #20
 8007e6c:	f108 0514 	add.w	r5, r8, #20
 8007e70:	f100 0e14 	add.w	lr, r0, #20
 8007e74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e7c:	f108 0210 	add.w	r2, r8, #16
 8007e80:	46f2      	mov	sl, lr
 8007e82:	2100      	movs	r1, #0
 8007e84:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e8c:	fa1f f883 	uxth.w	r8, r3
 8007e90:	fa11 f18b 	uxtah	r1, r1, fp
 8007e94:	0c1b      	lsrs	r3, r3, #16
 8007e96:	eba1 0808 	sub.w	r8, r1, r8
 8007e9a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e9e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007ea2:	fa1f f888 	uxth.w	r8, r8
 8007ea6:	1419      	asrs	r1, r3, #16
 8007ea8:	454e      	cmp	r6, r9
 8007eaa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007eae:	f84a 3b04 	str.w	r3, [sl], #4
 8007eb2:	d8e7      	bhi.n	8007e84 <__mdiff+0x80>
 8007eb4:	1b33      	subs	r3, r6, r4
 8007eb6:	3b15      	subs	r3, #21
 8007eb8:	f023 0303 	bic.w	r3, r3, #3
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	3415      	adds	r4, #21
 8007ec0:	42a6      	cmp	r6, r4
 8007ec2:	bf38      	it	cc
 8007ec4:	2304      	movcc	r3, #4
 8007ec6:	441d      	add	r5, r3
 8007ec8:	4473      	add	r3, lr
 8007eca:	469e      	mov	lr, r3
 8007ecc:	462e      	mov	r6, r5
 8007ece:	4566      	cmp	r6, ip
 8007ed0:	d30e      	bcc.n	8007ef0 <__mdiff+0xec>
 8007ed2:	f10c 0203 	add.w	r2, ip, #3
 8007ed6:	1b52      	subs	r2, r2, r5
 8007ed8:	f022 0203 	bic.w	r2, r2, #3
 8007edc:	3d03      	subs	r5, #3
 8007ede:	45ac      	cmp	ip, r5
 8007ee0:	bf38      	it	cc
 8007ee2:	2200      	movcc	r2, #0
 8007ee4:	441a      	add	r2, r3
 8007ee6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007eea:	b17b      	cbz	r3, 8007f0c <__mdiff+0x108>
 8007eec:	6107      	str	r7, [r0, #16]
 8007eee:	e7a3      	b.n	8007e38 <__mdiff+0x34>
 8007ef0:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ef4:	fa11 f288 	uxtah	r2, r1, r8
 8007ef8:	1414      	asrs	r4, r2, #16
 8007efa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007efe:	b292      	uxth	r2, r2
 8007f00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f04:	f84e 2b04 	str.w	r2, [lr], #4
 8007f08:	1421      	asrs	r1, r4, #16
 8007f0a:	e7e0      	b.n	8007ece <__mdiff+0xca>
 8007f0c:	3f01      	subs	r7, #1
 8007f0e:	e7ea      	b.n	8007ee6 <__mdiff+0xe2>
 8007f10:	08009598 	.word	0x08009598
 8007f14:	08009624 	.word	0x08009624

08007f18 <__ulp>:
 8007f18:	b082      	sub	sp, #8
 8007f1a:	ed8d 0b00 	vstr	d0, [sp]
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	4912      	ldr	r1, [pc, #72]	; (8007f6c <__ulp+0x54>)
 8007f22:	4019      	ands	r1, r3
 8007f24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007f28:	2900      	cmp	r1, #0
 8007f2a:	dd05      	ble.n	8007f38 <__ulp+0x20>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	ec43 2b10 	vmov	d0, r2, r3
 8007f34:	b002      	add	sp, #8
 8007f36:	4770      	bx	lr
 8007f38:	4249      	negs	r1, r1
 8007f3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007f3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	da04      	bge.n	8007f56 <__ulp+0x3e>
 8007f4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007f50:	fa41 f300 	asr.w	r3, r1, r0
 8007f54:	e7ec      	b.n	8007f30 <__ulp+0x18>
 8007f56:	f1a0 0114 	sub.w	r1, r0, #20
 8007f5a:	291e      	cmp	r1, #30
 8007f5c:	bfda      	itte	le
 8007f5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007f62:	fa20 f101 	lsrle.w	r1, r0, r1
 8007f66:	2101      	movgt	r1, #1
 8007f68:	460a      	mov	r2, r1
 8007f6a:	e7e1      	b.n	8007f30 <__ulp+0x18>
 8007f6c:	7ff00000 	.word	0x7ff00000

08007f70 <__b2d>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	6905      	ldr	r5, [r0, #16]
 8007f74:	f100 0714 	add.w	r7, r0, #20
 8007f78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007f7c:	1f2e      	subs	r6, r5, #4
 8007f7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7ff fd48 	bl	8007a18 <__hi0bits>
 8007f88:	f1c0 0320 	rsb	r3, r0, #32
 8007f8c:	280a      	cmp	r0, #10
 8007f8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800800c <__b2d+0x9c>
 8007f92:	600b      	str	r3, [r1, #0]
 8007f94:	dc14      	bgt.n	8007fc0 <__b2d+0x50>
 8007f96:	f1c0 0e0b 	rsb	lr, r0, #11
 8007f9a:	fa24 f10e 	lsr.w	r1, r4, lr
 8007f9e:	42b7      	cmp	r7, r6
 8007fa0:	ea41 030c 	orr.w	r3, r1, ip
 8007fa4:	bf34      	ite	cc
 8007fa6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007faa:	2100      	movcs	r1, #0
 8007fac:	3015      	adds	r0, #21
 8007fae:	fa04 f000 	lsl.w	r0, r4, r0
 8007fb2:	fa21 f10e 	lsr.w	r1, r1, lr
 8007fb6:	ea40 0201 	orr.w	r2, r0, r1
 8007fba:	ec43 2b10 	vmov	d0, r2, r3
 8007fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fc0:	42b7      	cmp	r7, r6
 8007fc2:	bf3a      	itte	cc
 8007fc4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007fc8:	f1a5 0608 	subcc.w	r6, r5, #8
 8007fcc:	2100      	movcs	r1, #0
 8007fce:	380b      	subs	r0, #11
 8007fd0:	d017      	beq.n	8008002 <__b2d+0x92>
 8007fd2:	f1c0 0c20 	rsb	ip, r0, #32
 8007fd6:	fa04 f500 	lsl.w	r5, r4, r0
 8007fda:	42be      	cmp	r6, r7
 8007fdc:	fa21 f40c 	lsr.w	r4, r1, ip
 8007fe0:	ea45 0504 	orr.w	r5, r5, r4
 8007fe4:	bf8c      	ite	hi
 8007fe6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007fea:	2400      	movls	r4, #0
 8007fec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007ff0:	fa01 f000 	lsl.w	r0, r1, r0
 8007ff4:	fa24 f40c 	lsr.w	r4, r4, ip
 8007ff8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007ffc:	ea40 0204 	orr.w	r2, r0, r4
 8008000:	e7db      	b.n	8007fba <__b2d+0x4a>
 8008002:	ea44 030c 	orr.w	r3, r4, ip
 8008006:	460a      	mov	r2, r1
 8008008:	e7d7      	b.n	8007fba <__b2d+0x4a>
 800800a:	bf00      	nop
 800800c:	3ff00000 	.word	0x3ff00000

08008010 <__d2b>:
 8008010:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008014:	4689      	mov	r9, r1
 8008016:	2101      	movs	r1, #1
 8008018:	ec57 6b10 	vmov	r6, r7, d0
 800801c:	4690      	mov	r8, r2
 800801e:	f7ff fc09 	bl	8007834 <_Balloc>
 8008022:	4604      	mov	r4, r0
 8008024:	b930      	cbnz	r0, 8008034 <__d2b+0x24>
 8008026:	4602      	mov	r2, r0
 8008028:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <__d2b+0xb0>)
 800802a:	4826      	ldr	r0, [pc, #152]	; (80080c4 <__d2b+0xb4>)
 800802c:	f240 310a 	movw	r1, #778	; 0x30a
 8008030:	f000 fb50 	bl	80086d4 <__assert_func>
 8008034:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800803c:	bb35      	cbnz	r5, 800808c <__d2b+0x7c>
 800803e:	2e00      	cmp	r6, #0
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	d028      	beq.n	8008096 <__d2b+0x86>
 8008044:	4668      	mov	r0, sp
 8008046:	9600      	str	r6, [sp, #0]
 8008048:	f7ff fd06 	bl	8007a58 <__lo0bits>
 800804c:	9900      	ldr	r1, [sp, #0]
 800804e:	b300      	cbz	r0, 8008092 <__d2b+0x82>
 8008050:	9a01      	ldr	r2, [sp, #4]
 8008052:	f1c0 0320 	rsb	r3, r0, #32
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	430b      	orrs	r3, r1
 800805c:	40c2      	lsrs	r2, r0
 800805e:	6163      	str	r3, [r4, #20]
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	61a3      	str	r3, [r4, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	bf14      	ite	ne
 800806a:	2202      	movne	r2, #2
 800806c:	2201      	moveq	r2, #1
 800806e:	6122      	str	r2, [r4, #16]
 8008070:	b1d5      	cbz	r5, 80080a8 <__d2b+0x98>
 8008072:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008076:	4405      	add	r5, r0
 8008078:	f8c9 5000 	str.w	r5, [r9]
 800807c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008080:	f8c8 0000 	str.w	r0, [r8]
 8008084:	4620      	mov	r0, r4
 8008086:	b003      	add	sp, #12
 8008088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800808c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008090:	e7d5      	b.n	800803e <__d2b+0x2e>
 8008092:	6161      	str	r1, [r4, #20]
 8008094:	e7e5      	b.n	8008062 <__d2b+0x52>
 8008096:	a801      	add	r0, sp, #4
 8008098:	f7ff fcde 	bl	8007a58 <__lo0bits>
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	6163      	str	r3, [r4, #20]
 80080a0:	2201      	movs	r2, #1
 80080a2:	6122      	str	r2, [r4, #16]
 80080a4:	3020      	adds	r0, #32
 80080a6:	e7e3      	b.n	8008070 <__d2b+0x60>
 80080a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080b0:	f8c9 0000 	str.w	r0, [r9]
 80080b4:	6918      	ldr	r0, [r3, #16]
 80080b6:	f7ff fcaf 	bl	8007a18 <__hi0bits>
 80080ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080be:	e7df      	b.n	8008080 <__d2b+0x70>
 80080c0:	08009598 	.word	0x08009598
 80080c4:	08009624 	.word	0x08009624

080080c8 <__ratio>:
 80080c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	4688      	mov	r8, r1
 80080ce:	4669      	mov	r1, sp
 80080d0:	4681      	mov	r9, r0
 80080d2:	f7ff ff4d 	bl	8007f70 <__b2d>
 80080d6:	a901      	add	r1, sp, #4
 80080d8:	4640      	mov	r0, r8
 80080da:	ec55 4b10 	vmov	r4, r5, d0
 80080de:	f7ff ff47 	bl	8007f70 <__b2d>
 80080e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80080ea:	eba3 0c02 	sub.w	ip, r3, r2
 80080ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080f2:	1a9b      	subs	r3, r3, r2
 80080f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80080f8:	ec51 0b10 	vmov	r0, r1, d0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bfd6      	itet	le
 8008100:	460a      	movle	r2, r1
 8008102:	462a      	movgt	r2, r5
 8008104:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008108:	468b      	mov	fp, r1
 800810a:	462f      	mov	r7, r5
 800810c:	bfd4      	ite	le
 800810e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008112:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008116:	4620      	mov	r0, r4
 8008118:	ee10 2a10 	vmov	r2, s0
 800811c:	465b      	mov	r3, fp
 800811e:	4639      	mov	r1, r7
 8008120:	f7f8 fb9c 	bl	800085c <__aeabi_ddiv>
 8008124:	ec41 0b10 	vmov	d0, r0, r1
 8008128:	b003      	add	sp, #12
 800812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800812e <__copybits>:
 800812e:	3901      	subs	r1, #1
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	1149      	asrs	r1, r1, #5
 8008134:	6914      	ldr	r4, [r2, #16]
 8008136:	3101      	adds	r1, #1
 8008138:	f102 0314 	add.w	r3, r2, #20
 800813c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008140:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008144:	1f05      	subs	r5, r0, #4
 8008146:	42a3      	cmp	r3, r4
 8008148:	d30c      	bcc.n	8008164 <__copybits+0x36>
 800814a:	1aa3      	subs	r3, r4, r2
 800814c:	3b11      	subs	r3, #17
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	3211      	adds	r2, #17
 8008154:	42a2      	cmp	r2, r4
 8008156:	bf88      	it	hi
 8008158:	2300      	movhi	r3, #0
 800815a:	4418      	add	r0, r3
 800815c:	2300      	movs	r3, #0
 800815e:	4288      	cmp	r0, r1
 8008160:	d305      	bcc.n	800816e <__copybits+0x40>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	f853 6b04 	ldr.w	r6, [r3], #4
 8008168:	f845 6f04 	str.w	r6, [r5, #4]!
 800816c:	e7eb      	b.n	8008146 <__copybits+0x18>
 800816e:	f840 3b04 	str.w	r3, [r0], #4
 8008172:	e7f4      	b.n	800815e <__copybits+0x30>

08008174 <__any_on>:
 8008174:	f100 0214 	add.w	r2, r0, #20
 8008178:	6900      	ldr	r0, [r0, #16]
 800817a:	114b      	asrs	r3, r1, #5
 800817c:	4298      	cmp	r0, r3
 800817e:	b510      	push	{r4, lr}
 8008180:	db11      	blt.n	80081a6 <__any_on+0x32>
 8008182:	dd0a      	ble.n	800819a <__any_on+0x26>
 8008184:	f011 011f 	ands.w	r1, r1, #31
 8008188:	d007      	beq.n	800819a <__any_on+0x26>
 800818a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800818e:	fa24 f001 	lsr.w	r0, r4, r1
 8008192:	fa00 f101 	lsl.w	r1, r0, r1
 8008196:	428c      	cmp	r4, r1
 8008198:	d10b      	bne.n	80081b2 <__any_on+0x3e>
 800819a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800819e:	4293      	cmp	r3, r2
 80081a0:	d803      	bhi.n	80081aa <__any_on+0x36>
 80081a2:	2000      	movs	r0, #0
 80081a4:	bd10      	pop	{r4, pc}
 80081a6:	4603      	mov	r3, r0
 80081a8:	e7f7      	b.n	800819a <__any_on+0x26>
 80081aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d0f5      	beq.n	800819e <__any_on+0x2a>
 80081b2:	2001      	movs	r0, #1
 80081b4:	e7f6      	b.n	80081a4 <__any_on+0x30>

080081b6 <_calloc_r>:
 80081b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081b8:	fba1 2402 	umull	r2, r4, r1, r2
 80081bc:	b94c      	cbnz	r4, 80081d2 <_calloc_r+0x1c>
 80081be:	4611      	mov	r1, r2
 80081c0:	9201      	str	r2, [sp, #4]
 80081c2:	f000 f87b 	bl	80082bc <_malloc_r>
 80081c6:	9a01      	ldr	r2, [sp, #4]
 80081c8:	4605      	mov	r5, r0
 80081ca:	b930      	cbnz	r0, 80081da <_calloc_r+0x24>
 80081cc:	4628      	mov	r0, r5
 80081ce:	b003      	add	sp, #12
 80081d0:	bd30      	pop	{r4, r5, pc}
 80081d2:	220c      	movs	r2, #12
 80081d4:	6002      	str	r2, [r0, #0]
 80081d6:	2500      	movs	r5, #0
 80081d8:	e7f8      	b.n	80081cc <_calloc_r+0x16>
 80081da:	4621      	mov	r1, r4
 80081dc:	f7fc fbbe 	bl	800495c <memset>
 80081e0:	e7f4      	b.n	80081cc <_calloc_r+0x16>
	...

080081e4 <_free_r>:
 80081e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d044      	beq.n	8008274 <_free_r+0x90>
 80081ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ee:	9001      	str	r0, [sp, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f1a1 0404 	sub.w	r4, r1, #4
 80081f6:	bfb8      	it	lt
 80081f8:	18e4      	addlt	r4, r4, r3
 80081fa:	f000 fab5 	bl	8008768 <__malloc_lock>
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <_free_r+0x94>)
 8008200:	9801      	ldr	r0, [sp, #4]
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	b933      	cbnz	r3, 8008214 <_free_r+0x30>
 8008206:	6063      	str	r3, [r4, #4]
 8008208:	6014      	str	r4, [r2, #0]
 800820a:	b003      	add	sp, #12
 800820c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008210:	f000 bab0 	b.w	8008774 <__malloc_unlock>
 8008214:	42a3      	cmp	r3, r4
 8008216:	d908      	bls.n	800822a <_free_r+0x46>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	1961      	adds	r1, r4, r5
 800821c:	428b      	cmp	r3, r1
 800821e:	bf01      	itttt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	e7ed      	b.n	8008206 <_free_r+0x22>
 800822a:	461a      	mov	r2, r3
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b10b      	cbz	r3, 8008234 <_free_r+0x50>
 8008230:	42a3      	cmp	r3, r4
 8008232:	d9fa      	bls.n	800822a <_free_r+0x46>
 8008234:	6811      	ldr	r1, [r2, #0]
 8008236:	1855      	adds	r5, r2, r1
 8008238:	42a5      	cmp	r5, r4
 800823a:	d10b      	bne.n	8008254 <_free_r+0x70>
 800823c:	6824      	ldr	r4, [r4, #0]
 800823e:	4421      	add	r1, r4
 8008240:	1854      	adds	r4, r2, r1
 8008242:	42a3      	cmp	r3, r4
 8008244:	6011      	str	r1, [r2, #0]
 8008246:	d1e0      	bne.n	800820a <_free_r+0x26>
 8008248:	681c      	ldr	r4, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	6053      	str	r3, [r2, #4]
 800824e:	4421      	add	r1, r4
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	e7da      	b.n	800820a <_free_r+0x26>
 8008254:	d902      	bls.n	800825c <_free_r+0x78>
 8008256:	230c      	movs	r3, #12
 8008258:	6003      	str	r3, [r0, #0]
 800825a:	e7d6      	b.n	800820a <_free_r+0x26>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1961      	adds	r1, r4, r5
 8008260:	428b      	cmp	r3, r1
 8008262:	bf04      	itt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	6063      	str	r3, [r4, #4]
 800826a:	bf04      	itt	eq
 800826c:	1949      	addeq	r1, r1, r5
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	6054      	str	r4, [r2, #4]
 8008272:	e7ca      	b.n	800820a <_free_r+0x26>
 8008274:	b003      	add	sp, #12
 8008276:	bd30      	pop	{r4, r5, pc}
 8008278:	20000ba0 	.word	0x20000ba0

0800827c <sbrk_aligned>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4e0e      	ldr	r6, [pc, #56]	; (80082b8 <sbrk_aligned+0x3c>)
 8008280:	460c      	mov	r4, r1
 8008282:	6831      	ldr	r1, [r6, #0]
 8008284:	4605      	mov	r5, r0
 8008286:	b911      	cbnz	r1, 800828e <sbrk_aligned+0x12>
 8008288:	f000 f9f2 	bl	8008670 <_sbrk_r>
 800828c:	6030      	str	r0, [r6, #0]
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 f9ed 	bl	8008670 <_sbrk_r>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d00a      	beq.n	80082b0 <sbrk_aligned+0x34>
 800829a:	1cc4      	adds	r4, r0, #3
 800829c:	f024 0403 	bic.w	r4, r4, #3
 80082a0:	42a0      	cmp	r0, r4
 80082a2:	d007      	beq.n	80082b4 <sbrk_aligned+0x38>
 80082a4:	1a21      	subs	r1, r4, r0
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 f9e2 	bl	8008670 <_sbrk_r>
 80082ac:	3001      	adds	r0, #1
 80082ae:	d101      	bne.n	80082b4 <sbrk_aligned+0x38>
 80082b0:	f04f 34ff 	mov.w	r4, #4294967295
 80082b4:	4620      	mov	r0, r4
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	20000ba4 	.word	0x20000ba4

080082bc <_malloc_r>:
 80082bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c0:	1ccd      	adds	r5, r1, #3
 80082c2:	f025 0503 	bic.w	r5, r5, #3
 80082c6:	3508      	adds	r5, #8
 80082c8:	2d0c      	cmp	r5, #12
 80082ca:	bf38      	it	cc
 80082cc:	250c      	movcc	r5, #12
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	4607      	mov	r7, r0
 80082d2:	db01      	blt.n	80082d8 <_malloc_r+0x1c>
 80082d4:	42a9      	cmp	r1, r5
 80082d6:	d905      	bls.n	80082e4 <_malloc_r+0x28>
 80082d8:	230c      	movs	r3, #12
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	2600      	movs	r6, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e4:	4e2e      	ldr	r6, [pc, #184]	; (80083a0 <_malloc_r+0xe4>)
 80082e6:	f000 fa3f 	bl	8008768 <__malloc_lock>
 80082ea:	6833      	ldr	r3, [r6, #0]
 80082ec:	461c      	mov	r4, r3
 80082ee:	bb34      	cbnz	r4, 800833e <_malloc_r+0x82>
 80082f0:	4629      	mov	r1, r5
 80082f2:	4638      	mov	r0, r7
 80082f4:	f7ff ffc2 	bl	800827c <sbrk_aligned>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	4604      	mov	r4, r0
 80082fc:	d14d      	bne.n	800839a <_malloc_r+0xde>
 80082fe:	6834      	ldr	r4, [r6, #0]
 8008300:	4626      	mov	r6, r4
 8008302:	2e00      	cmp	r6, #0
 8008304:	d140      	bne.n	8008388 <_malloc_r+0xcc>
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	4631      	mov	r1, r6
 800830a:	4638      	mov	r0, r7
 800830c:	eb04 0803 	add.w	r8, r4, r3
 8008310:	f000 f9ae 	bl	8008670 <_sbrk_r>
 8008314:	4580      	cmp	r8, r0
 8008316:	d13a      	bne.n	800838e <_malloc_r+0xd2>
 8008318:	6821      	ldr	r1, [r4, #0]
 800831a:	3503      	adds	r5, #3
 800831c:	1a6d      	subs	r5, r5, r1
 800831e:	f025 0503 	bic.w	r5, r5, #3
 8008322:	3508      	adds	r5, #8
 8008324:	2d0c      	cmp	r5, #12
 8008326:	bf38      	it	cc
 8008328:	250c      	movcc	r5, #12
 800832a:	4629      	mov	r1, r5
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ffa5 	bl	800827c <sbrk_aligned>
 8008332:	3001      	adds	r0, #1
 8008334:	d02b      	beq.n	800838e <_malloc_r+0xd2>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	442b      	add	r3, r5
 800833a:	6023      	str	r3, [r4, #0]
 800833c:	e00e      	b.n	800835c <_malloc_r+0xa0>
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	1b52      	subs	r2, r2, r5
 8008342:	d41e      	bmi.n	8008382 <_malloc_r+0xc6>
 8008344:	2a0b      	cmp	r2, #11
 8008346:	d916      	bls.n	8008376 <_malloc_r+0xba>
 8008348:	1961      	adds	r1, r4, r5
 800834a:	42a3      	cmp	r3, r4
 800834c:	6025      	str	r5, [r4, #0]
 800834e:	bf18      	it	ne
 8008350:	6059      	strne	r1, [r3, #4]
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	bf08      	it	eq
 8008356:	6031      	streq	r1, [r6, #0]
 8008358:	5162      	str	r2, [r4, r5]
 800835a:	604b      	str	r3, [r1, #4]
 800835c:	4638      	mov	r0, r7
 800835e:	f104 060b 	add.w	r6, r4, #11
 8008362:	f000 fa07 	bl	8008774 <__malloc_unlock>
 8008366:	f026 0607 	bic.w	r6, r6, #7
 800836a:	1d23      	adds	r3, r4, #4
 800836c:	1af2      	subs	r2, r6, r3
 800836e:	d0b6      	beq.n	80082de <_malloc_r+0x22>
 8008370:	1b9b      	subs	r3, r3, r6
 8008372:	50a3      	str	r3, [r4, r2]
 8008374:	e7b3      	b.n	80082de <_malloc_r+0x22>
 8008376:	6862      	ldr	r2, [r4, #4]
 8008378:	42a3      	cmp	r3, r4
 800837a:	bf0c      	ite	eq
 800837c:	6032      	streq	r2, [r6, #0]
 800837e:	605a      	strne	r2, [r3, #4]
 8008380:	e7ec      	b.n	800835c <_malloc_r+0xa0>
 8008382:	4623      	mov	r3, r4
 8008384:	6864      	ldr	r4, [r4, #4]
 8008386:	e7b2      	b.n	80082ee <_malloc_r+0x32>
 8008388:	4634      	mov	r4, r6
 800838a:	6876      	ldr	r6, [r6, #4]
 800838c:	e7b9      	b.n	8008302 <_malloc_r+0x46>
 800838e:	230c      	movs	r3, #12
 8008390:	603b      	str	r3, [r7, #0]
 8008392:	4638      	mov	r0, r7
 8008394:	f000 f9ee 	bl	8008774 <__malloc_unlock>
 8008398:	e7a1      	b.n	80082de <_malloc_r+0x22>
 800839a:	6025      	str	r5, [r4, #0]
 800839c:	e7de      	b.n	800835c <_malloc_r+0xa0>
 800839e:	bf00      	nop
 80083a0:	20000ba0 	.word	0x20000ba0

080083a4 <__ssputs_r>:
 80083a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	688e      	ldr	r6, [r1, #8]
 80083aa:	429e      	cmp	r6, r3
 80083ac:	4682      	mov	sl, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	4690      	mov	r8, r2
 80083b2:	461f      	mov	r7, r3
 80083b4:	d838      	bhi.n	8008428 <__ssputs_r+0x84>
 80083b6:	898a      	ldrh	r2, [r1, #12]
 80083b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083bc:	d032      	beq.n	8008424 <__ssputs_r+0x80>
 80083be:	6825      	ldr	r5, [r4, #0]
 80083c0:	6909      	ldr	r1, [r1, #16]
 80083c2:	eba5 0901 	sub.w	r9, r5, r1
 80083c6:	6965      	ldr	r5, [r4, #20]
 80083c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083d0:	3301      	adds	r3, #1
 80083d2:	444b      	add	r3, r9
 80083d4:	106d      	asrs	r5, r5, #1
 80083d6:	429d      	cmp	r5, r3
 80083d8:	bf38      	it	cc
 80083da:	461d      	movcc	r5, r3
 80083dc:	0553      	lsls	r3, r2, #21
 80083de:	d531      	bpl.n	8008444 <__ssputs_r+0xa0>
 80083e0:	4629      	mov	r1, r5
 80083e2:	f7ff ff6b 	bl	80082bc <_malloc_r>
 80083e6:	4606      	mov	r6, r0
 80083e8:	b950      	cbnz	r0, 8008400 <__ssputs_r+0x5c>
 80083ea:	230c      	movs	r3, #12
 80083ec:	f8ca 3000 	str.w	r3, [sl]
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f6:	81a3      	strh	r3, [r4, #12]
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295
 80083fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008400:	6921      	ldr	r1, [r4, #16]
 8008402:	464a      	mov	r2, r9
 8008404:	f7ff fa08 	bl	8007818 <memcpy>
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800840e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008412:	81a3      	strh	r3, [r4, #12]
 8008414:	6126      	str	r6, [r4, #16]
 8008416:	6165      	str	r5, [r4, #20]
 8008418:	444e      	add	r6, r9
 800841a:	eba5 0509 	sub.w	r5, r5, r9
 800841e:	6026      	str	r6, [r4, #0]
 8008420:	60a5      	str	r5, [r4, #8]
 8008422:	463e      	mov	r6, r7
 8008424:	42be      	cmp	r6, r7
 8008426:	d900      	bls.n	800842a <__ssputs_r+0x86>
 8008428:	463e      	mov	r6, r7
 800842a:	6820      	ldr	r0, [r4, #0]
 800842c:	4632      	mov	r2, r6
 800842e:	4641      	mov	r1, r8
 8008430:	f000 f980 	bl	8008734 <memmove>
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	1b9b      	subs	r3, r3, r6
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	4433      	add	r3, r6
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	2000      	movs	r0, #0
 8008442:	e7db      	b.n	80083fc <__ssputs_r+0x58>
 8008444:	462a      	mov	r2, r5
 8008446:	f000 f99b 	bl	8008780 <_realloc_r>
 800844a:	4606      	mov	r6, r0
 800844c:	2800      	cmp	r0, #0
 800844e:	d1e1      	bne.n	8008414 <__ssputs_r+0x70>
 8008450:	6921      	ldr	r1, [r4, #16]
 8008452:	4650      	mov	r0, sl
 8008454:	f7ff fec6 	bl	80081e4 <_free_r>
 8008458:	e7c7      	b.n	80083ea <__ssputs_r+0x46>
	...

0800845c <_svfiprintf_r>:
 800845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008460:	4698      	mov	r8, r3
 8008462:	898b      	ldrh	r3, [r1, #12]
 8008464:	061b      	lsls	r3, r3, #24
 8008466:	b09d      	sub	sp, #116	; 0x74
 8008468:	4607      	mov	r7, r0
 800846a:	460d      	mov	r5, r1
 800846c:	4614      	mov	r4, r2
 800846e:	d50e      	bpl.n	800848e <_svfiprintf_r+0x32>
 8008470:	690b      	ldr	r3, [r1, #16]
 8008472:	b963      	cbnz	r3, 800848e <_svfiprintf_r+0x32>
 8008474:	2140      	movs	r1, #64	; 0x40
 8008476:	f7ff ff21 	bl	80082bc <_malloc_r>
 800847a:	6028      	str	r0, [r5, #0]
 800847c:	6128      	str	r0, [r5, #16]
 800847e:	b920      	cbnz	r0, 800848a <_svfiprintf_r+0x2e>
 8008480:	230c      	movs	r3, #12
 8008482:	603b      	str	r3, [r7, #0]
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	e0d1      	b.n	800862e <_svfiprintf_r+0x1d2>
 800848a:	2340      	movs	r3, #64	; 0x40
 800848c:	616b      	str	r3, [r5, #20]
 800848e:	2300      	movs	r3, #0
 8008490:	9309      	str	r3, [sp, #36]	; 0x24
 8008492:	2320      	movs	r3, #32
 8008494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008498:	f8cd 800c 	str.w	r8, [sp, #12]
 800849c:	2330      	movs	r3, #48	; 0x30
 800849e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008648 <_svfiprintf_r+0x1ec>
 80084a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084a6:	f04f 0901 	mov.w	r9, #1
 80084aa:	4623      	mov	r3, r4
 80084ac:	469a      	mov	sl, r3
 80084ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084b2:	b10a      	cbz	r2, 80084b8 <_svfiprintf_r+0x5c>
 80084b4:	2a25      	cmp	r2, #37	; 0x25
 80084b6:	d1f9      	bne.n	80084ac <_svfiprintf_r+0x50>
 80084b8:	ebba 0b04 	subs.w	fp, sl, r4
 80084bc:	d00b      	beq.n	80084d6 <_svfiprintf_r+0x7a>
 80084be:	465b      	mov	r3, fp
 80084c0:	4622      	mov	r2, r4
 80084c2:	4629      	mov	r1, r5
 80084c4:	4638      	mov	r0, r7
 80084c6:	f7ff ff6d 	bl	80083a4 <__ssputs_r>
 80084ca:	3001      	adds	r0, #1
 80084cc:	f000 80aa 	beq.w	8008624 <_svfiprintf_r+0x1c8>
 80084d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084d2:	445a      	add	r2, fp
 80084d4:	9209      	str	r2, [sp, #36]	; 0x24
 80084d6:	f89a 3000 	ldrb.w	r3, [sl]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 80a2 	beq.w	8008624 <_svfiprintf_r+0x1c8>
 80084e0:	2300      	movs	r3, #0
 80084e2:	f04f 32ff 	mov.w	r2, #4294967295
 80084e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ea:	f10a 0a01 	add.w	sl, sl, #1
 80084ee:	9304      	str	r3, [sp, #16]
 80084f0:	9307      	str	r3, [sp, #28]
 80084f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084f6:	931a      	str	r3, [sp, #104]	; 0x68
 80084f8:	4654      	mov	r4, sl
 80084fa:	2205      	movs	r2, #5
 80084fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008500:	4851      	ldr	r0, [pc, #324]	; (8008648 <_svfiprintf_r+0x1ec>)
 8008502:	f7f7 fe75 	bl	80001f0 <memchr>
 8008506:	9a04      	ldr	r2, [sp, #16]
 8008508:	b9d8      	cbnz	r0, 8008542 <_svfiprintf_r+0xe6>
 800850a:	06d0      	lsls	r0, r2, #27
 800850c:	bf44      	itt	mi
 800850e:	2320      	movmi	r3, #32
 8008510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008514:	0711      	lsls	r1, r2, #28
 8008516:	bf44      	itt	mi
 8008518:	232b      	movmi	r3, #43	; 0x2b
 800851a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800851e:	f89a 3000 	ldrb.w	r3, [sl]
 8008522:	2b2a      	cmp	r3, #42	; 0x2a
 8008524:	d015      	beq.n	8008552 <_svfiprintf_r+0xf6>
 8008526:	9a07      	ldr	r2, [sp, #28]
 8008528:	4654      	mov	r4, sl
 800852a:	2000      	movs	r0, #0
 800852c:	f04f 0c0a 	mov.w	ip, #10
 8008530:	4621      	mov	r1, r4
 8008532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008536:	3b30      	subs	r3, #48	; 0x30
 8008538:	2b09      	cmp	r3, #9
 800853a:	d94e      	bls.n	80085da <_svfiprintf_r+0x17e>
 800853c:	b1b0      	cbz	r0, 800856c <_svfiprintf_r+0x110>
 800853e:	9207      	str	r2, [sp, #28]
 8008540:	e014      	b.n	800856c <_svfiprintf_r+0x110>
 8008542:	eba0 0308 	sub.w	r3, r0, r8
 8008546:	fa09 f303 	lsl.w	r3, r9, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	9304      	str	r3, [sp, #16]
 800854e:	46a2      	mov	sl, r4
 8008550:	e7d2      	b.n	80084f8 <_svfiprintf_r+0x9c>
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	1d19      	adds	r1, r3, #4
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	9103      	str	r1, [sp, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	bfbb      	ittet	lt
 800855e:	425b      	neglt	r3, r3
 8008560:	f042 0202 	orrlt.w	r2, r2, #2
 8008564:	9307      	strge	r3, [sp, #28]
 8008566:	9307      	strlt	r3, [sp, #28]
 8008568:	bfb8      	it	lt
 800856a:	9204      	strlt	r2, [sp, #16]
 800856c:	7823      	ldrb	r3, [r4, #0]
 800856e:	2b2e      	cmp	r3, #46	; 0x2e
 8008570:	d10c      	bne.n	800858c <_svfiprintf_r+0x130>
 8008572:	7863      	ldrb	r3, [r4, #1]
 8008574:	2b2a      	cmp	r3, #42	; 0x2a
 8008576:	d135      	bne.n	80085e4 <_svfiprintf_r+0x188>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	1d1a      	adds	r2, r3, #4
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	9203      	str	r2, [sp, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	bfb8      	it	lt
 8008584:	f04f 33ff 	movlt.w	r3, #4294967295
 8008588:	3402      	adds	r4, #2
 800858a:	9305      	str	r3, [sp, #20]
 800858c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008658 <_svfiprintf_r+0x1fc>
 8008590:	7821      	ldrb	r1, [r4, #0]
 8008592:	2203      	movs	r2, #3
 8008594:	4650      	mov	r0, sl
 8008596:	f7f7 fe2b 	bl	80001f0 <memchr>
 800859a:	b140      	cbz	r0, 80085ae <_svfiprintf_r+0x152>
 800859c:	2340      	movs	r3, #64	; 0x40
 800859e:	eba0 000a 	sub.w	r0, r0, sl
 80085a2:	fa03 f000 	lsl.w	r0, r3, r0
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	4303      	orrs	r3, r0
 80085aa:	3401      	adds	r4, #1
 80085ac:	9304      	str	r3, [sp, #16]
 80085ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b2:	4826      	ldr	r0, [pc, #152]	; (800864c <_svfiprintf_r+0x1f0>)
 80085b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085b8:	2206      	movs	r2, #6
 80085ba:	f7f7 fe19 	bl	80001f0 <memchr>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d038      	beq.n	8008634 <_svfiprintf_r+0x1d8>
 80085c2:	4b23      	ldr	r3, [pc, #140]	; (8008650 <_svfiprintf_r+0x1f4>)
 80085c4:	bb1b      	cbnz	r3, 800860e <_svfiprintf_r+0x1b2>
 80085c6:	9b03      	ldr	r3, [sp, #12]
 80085c8:	3307      	adds	r3, #7
 80085ca:	f023 0307 	bic.w	r3, r3, #7
 80085ce:	3308      	adds	r3, #8
 80085d0:	9303      	str	r3, [sp, #12]
 80085d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d4:	4433      	add	r3, r6
 80085d6:	9309      	str	r3, [sp, #36]	; 0x24
 80085d8:	e767      	b.n	80084aa <_svfiprintf_r+0x4e>
 80085da:	fb0c 3202 	mla	r2, ip, r2, r3
 80085de:	460c      	mov	r4, r1
 80085e0:	2001      	movs	r0, #1
 80085e2:	e7a5      	b.n	8008530 <_svfiprintf_r+0xd4>
 80085e4:	2300      	movs	r3, #0
 80085e6:	3401      	adds	r4, #1
 80085e8:	9305      	str	r3, [sp, #20]
 80085ea:	4619      	mov	r1, r3
 80085ec:	f04f 0c0a 	mov.w	ip, #10
 80085f0:	4620      	mov	r0, r4
 80085f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f6:	3a30      	subs	r2, #48	; 0x30
 80085f8:	2a09      	cmp	r2, #9
 80085fa:	d903      	bls.n	8008604 <_svfiprintf_r+0x1a8>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0c5      	beq.n	800858c <_svfiprintf_r+0x130>
 8008600:	9105      	str	r1, [sp, #20]
 8008602:	e7c3      	b.n	800858c <_svfiprintf_r+0x130>
 8008604:	fb0c 2101 	mla	r1, ip, r1, r2
 8008608:	4604      	mov	r4, r0
 800860a:	2301      	movs	r3, #1
 800860c:	e7f0      	b.n	80085f0 <_svfiprintf_r+0x194>
 800860e:	ab03      	add	r3, sp, #12
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	462a      	mov	r2, r5
 8008614:	4b0f      	ldr	r3, [pc, #60]	; (8008654 <_svfiprintf_r+0x1f8>)
 8008616:	a904      	add	r1, sp, #16
 8008618:	4638      	mov	r0, r7
 800861a:	f7fc fa47 	bl	8004aac <_printf_float>
 800861e:	1c42      	adds	r2, r0, #1
 8008620:	4606      	mov	r6, r0
 8008622:	d1d6      	bne.n	80085d2 <_svfiprintf_r+0x176>
 8008624:	89ab      	ldrh	r3, [r5, #12]
 8008626:	065b      	lsls	r3, r3, #25
 8008628:	f53f af2c 	bmi.w	8008484 <_svfiprintf_r+0x28>
 800862c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800862e:	b01d      	add	sp, #116	; 0x74
 8008630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008634:	ab03      	add	r3, sp, #12
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	462a      	mov	r2, r5
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <_svfiprintf_r+0x1f8>)
 800863c:	a904      	add	r1, sp, #16
 800863e:	4638      	mov	r0, r7
 8008640:	f7fc fcd8 	bl	8004ff4 <_printf_i>
 8008644:	e7eb      	b.n	800861e <_svfiprintf_r+0x1c2>
 8008646:	bf00      	nop
 8008648:	0800977c 	.word	0x0800977c
 800864c:	08009786 	.word	0x08009786
 8008650:	08004aad 	.word	0x08004aad
 8008654:	080083a5 	.word	0x080083a5
 8008658:	08009782 	.word	0x08009782
 800865c:	00000000 	.word	0x00000000

08008660 <nan>:
 8008660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008668 <nan+0x8>
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	00000000 	.word	0x00000000
 800866c:	7ff80000 	.word	0x7ff80000

08008670 <_sbrk_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4d06      	ldr	r5, [pc, #24]	; (800868c <_sbrk_r+0x1c>)
 8008674:	2300      	movs	r3, #0
 8008676:	4604      	mov	r4, r0
 8008678:	4608      	mov	r0, r1
 800867a:	602b      	str	r3, [r5, #0]
 800867c:	f7f9 f8c2 	bl	8001804 <_sbrk>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_sbrk_r+0x1a>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_sbrk_r+0x1a>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20000ba8 	.word	0x20000ba8

08008690 <strncmp>:
 8008690:	b510      	push	{r4, lr}
 8008692:	b17a      	cbz	r2, 80086b4 <strncmp+0x24>
 8008694:	4603      	mov	r3, r0
 8008696:	3901      	subs	r1, #1
 8008698:	1884      	adds	r4, r0, r2
 800869a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800869e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80086a2:	4290      	cmp	r0, r2
 80086a4:	d101      	bne.n	80086aa <strncmp+0x1a>
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	d101      	bne.n	80086ae <strncmp+0x1e>
 80086aa:	1a80      	subs	r0, r0, r2
 80086ac:	bd10      	pop	{r4, pc}
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d1f3      	bne.n	800869a <strncmp+0xa>
 80086b2:	e7fa      	b.n	80086aa <strncmp+0x1a>
 80086b4:	4610      	mov	r0, r2
 80086b6:	e7f9      	b.n	80086ac <strncmp+0x1c>

080086b8 <__ascii_wctomb>:
 80086b8:	b149      	cbz	r1, 80086ce <__ascii_wctomb+0x16>
 80086ba:	2aff      	cmp	r2, #255	; 0xff
 80086bc:	bf85      	ittet	hi
 80086be:	238a      	movhi	r3, #138	; 0x8a
 80086c0:	6003      	strhi	r3, [r0, #0]
 80086c2:	700a      	strbls	r2, [r1, #0]
 80086c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80086c8:	bf98      	it	ls
 80086ca:	2001      	movls	r0, #1
 80086cc:	4770      	bx	lr
 80086ce:	4608      	mov	r0, r1
 80086d0:	4770      	bx	lr
	...

080086d4 <__assert_func>:
 80086d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086d6:	4614      	mov	r4, r2
 80086d8:	461a      	mov	r2, r3
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <__assert_func+0x2c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4605      	mov	r5, r0
 80086e0:	68d8      	ldr	r0, [r3, #12]
 80086e2:	b14c      	cbz	r4, 80086f8 <__assert_func+0x24>
 80086e4:	4b07      	ldr	r3, [pc, #28]	; (8008704 <__assert_func+0x30>)
 80086e6:	9100      	str	r1, [sp, #0]
 80086e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086ec:	4906      	ldr	r1, [pc, #24]	; (8008708 <__assert_func+0x34>)
 80086ee:	462b      	mov	r3, r5
 80086f0:	f000 f80e 	bl	8008710 <fiprintf>
 80086f4:	f000 fa8c 	bl	8008c10 <abort>
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <__assert_func+0x38>)
 80086fa:	461c      	mov	r4, r3
 80086fc:	e7f3      	b.n	80086e6 <__assert_func+0x12>
 80086fe:	bf00      	nop
 8008700:	20000018 	.word	0x20000018
 8008704:	0800978d 	.word	0x0800978d
 8008708:	0800979a 	.word	0x0800979a
 800870c:	080097c8 	.word	0x080097c8

08008710 <fiprintf>:
 8008710:	b40e      	push	{r1, r2, r3}
 8008712:	b503      	push	{r0, r1, lr}
 8008714:	4601      	mov	r1, r0
 8008716:	ab03      	add	r3, sp, #12
 8008718:	4805      	ldr	r0, [pc, #20]	; (8008730 <fiprintf+0x20>)
 800871a:	f853 2b04 	ldr.w	r2, [r3], #4
 800871e:	6800      	ldr	r0, [r0, #0]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f000 f885 	bl	8008830 <_vfiprintf_r>
 8008726:	b002      	add	sp, #8
 8008728:	f85d eb04 	ldr.w	lr, [sp], #4
 800872c:	b003      	add	sp, #12
 800872e:	4770      	bx	lr
 8008730:	20000018 	.word	0x20000018

08008734 <memmove>:
 8008734:	4288      	cmp	r0, r1
 8008736:	b510      	push	{r4, lr}
 8008738:	eb01 0402 	add.w	r4, r1, r2
 800873c:	d902      	bls.n	8008744 <memmove+0x10>
 800873e:	4284      	cmp	r4, r0
 8008740:	4623      	mov	r3, r4
 8008742:	d807      	bhi.n	8008754 <memmove+0x20>
 8008744:	1e43      	subs	r3, r0, #1
 8008746:	42a1      	cmp	r1, r4
 8008748:	d008      	beq.n	800875c <memmove+0x28>
 800874a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800874e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008752:	e7f8      	b.n	8008746 <memmove+0x12>
 8008754:	4402      	add	r2, r0
 8008756:	4601      	mov	r1, r0
 8008758:	428a      	cmp	r2, r1
 800875a:	d100      	bne.n	800875e <memmove+0x2a>
 800875c:	bd10      	pop	{r4, pc}
 800875e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008762:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008766:	e7f7      	b.n	8008758 <memmove+0x24>

08008768 <__malloc_lock>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__malloc_lock+0x8>)
 800876a:	f000 bc11 	b.w	8008f90 <__retarget_lock_acquire_recursive>
 800876e:	bf00      	nop
 8008770:	20000bac 	.word	0x20000bac

08008774 <__malloc_unlock>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__malloc_unlock+0x8>)
 8008776:	f000 bc0c 	b.w	8008f92 <__retarget_lock_release_recursive>
 800877a:	bf00      	nop
 800877c:	20000bac 	.word	0x20000bac

08008780 <_realloc_r>:
 8008780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008784:	4680      	mov	r8, r0
 8008786:	4614      	mov	r4, r2
 8008788:	460e      	mov	r6, r1
 800878a:	b921      	cbnz	r1, 8008796 <_realloc_r+0x16>
 800878c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008790:	4611      	mov	r1, r2
 8008792:	f7ff bd93 	b.w	80082bc <_malloc_r>
 8008796:	b92a      	cbnz	r2, 80087a4 <_realloc_r+0x24>
 8008798:	f7ff fd24 	bl	80081e4 <_free_r>
 800879c:	4625      	mov	r5, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a4:	f000 fc5c 	bl	8009060 <_malloc_usable_size_r>
 80087a8:	4284      	cmp	r4, r0
 80087aa:	4607      	mov	r7, r0
 80087ac:	d802      	bhi.n	80087b4 <_realloc_r+0x34>
 80087ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087b2:	d812      	bhi.n	80087da <_realloc_r+0x5a>
 80087b4:	4621      	mov	r1, r4
 80087b6:	4640      	mov	r0, r8
 80087b8:	f7ff fd80 	bl	80082bc <_malloc_r>
 80087bc:	4605      	mov	r5, r0
 80087be:	2800      	cmp	r0, #0
 80087c0:	d0ed      	beq.n	800879e <_realloc_r+0x1e>
 80087c2:	42bc      	cmp	r4, r7
 80087c4:	4622      	mov	r2, r4
 80087c6:	4631      	mov	r1, r6
 80087c8:	bf28      	it	cs
 80087ca:	463a      	movcs	r2, r7
 80087cc:	f7ff f824 	bl	8007818 <memcpy>
 80087d0:	4631      	mov	r1, r6
 80087d2:	4640      	mov	r0, r8
 80087d4:	f7ff fd06 	bl	80081e4 <_free_r>
 80087d8:	e7e1      	b.n	800879e <_realloc_r+0x1e>
 80087da:	4635      	mov	r5, r6
 80087dc:	e7df      	b.n	800879e <_realloc_r+0x1e>

080087de <__sfputc_r>:
 80087de:	6893      	ldr	r3, [r2, #8]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	b410      	push	{r4}
 80087e6:	6093      	str	r3, [r2, #8]
 80087e8:	da08      	bge.n	80087fc <__sfputc_r+0x1e>
 80087ea:	6994      	ldr	r4, [r2, #24]
 80087ec:	42a3      	cmp	r3, r4
 80087ee:	db01      	blt.n	80087f4 <__sfputc_r+0x16>
 80087f0:	290a      	cmp	r1, #10
 80087f2:	d103      	bne.n	80087fc <__sfputc_r+0x1e>
 80087f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087f8:	f000 b94a 	b.w	8008a90 <__swbuf_r>
 80087fc:	6813      	ldr	r3, [r2, #0]
 80087fe:	1c58      	adds	r0, r3, #1
 8008800:	6010      	str	r0, [r2, #0]
 8008802:	7019      	strb	r1, [r3, #0]
 8008804:	4608      	mov	r0, r1
 8008806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800880a:	4770      	bx	lr

0800880c <__sfputs_r>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	4606      	mov	r6, r0
 8008810:	460f      	mov	r7, r1
 8008812:	4614      	mov	r4, r2
 8008814:	18d5      	adds	r5, r2, r3
 8008816:	42ac      	cmp	r4, r5
 8008818:	d101      	bne.n	800881e <__sfputs_r+0x12>
 800881a:	2000      	movs	r0, #0
 800881c:	e007      	b.n	800882e <__sfputs_r+0x22>
 800881e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008822:	463a      	mov	r2, r7
 8008824:	4630      	mov	r0, r6
 8008826:	f7ff ffda 	bl	80087de <__sfputc_r>
 800882a:	1c43      	adds	r3, r0, #1
 800882c:	d1f3      	bne.n	8008816 <__sfputs_r+0xa>
 800882e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008830 <_vfiprintf_r>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	460d      	mov	r5, r1
 8008836:	b09d      	sub	sp, #116	; 0x74
 8008838:	4614      	mov	r4, r2
 800883a:	4698      	mov	r8, r3
 800883c:	4606      	mov	r6, r0
 800883e:	b118      	cbz	r0, 8008848 <_vfiprintf_r+0x18>
 8008840:	6983      	ldr	r3, [r0, #24]
 8008842:	b90b      	cbnz	r3, 8008848 <_vfiprintf_r+0x18>
 8008844:	f000 fb06 	bl	8008e54 <__sinit>
 8008848:	4b89      	ldr	r3, [pc, #548]	; (8008a70 <_vfiprintf_r+0x240>)
 800884a:	429d      	cmp	r5, r3
 800884c:	d11b      	bne.n	8008886 <_vfiprintf_r+0x56>
 800884e:	6875      	ldr	r5, [r6, #4]
 8008850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008852:	07d9      	lsls	r1, r3, #31
 8008854:	d405      	bmi.n	8008862 <_vfiprintf_r+0x32>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	059a      	lsls	r2, r3, #22
 800885a:	d402      	bmi.n	8008862 <_vfiprintf_r+0x32>
 800885c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800885e:	f000 fb97 	bl	8008f90 <__retarget_lock_acquire_recursive>
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	071b      	lsls	r3, r3, #28
 8008866:	d501      	bpl.n	800886c <_vfiprintf_r+0x3c>
 8008868:	692b      	ldr	r3, [r5, #16]
 800886a:	b9eb      	cbnz	r3, 80088a8 <_vfiprintf_r+0x78>
 800886c:	4629      	mov	r1, r5
 800886e:	4630      	mov	r0, r6
 8008870:	f000 f960 	bl	8008b34 <__swsetup_r>
 8008874:	b1c0      	cbz	r0, 80088a8 <_vfiprintf_r+0x78>
 8008876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008878:	07dc      	lsls	r4, r3, #31
 800887a:	d50e      	bpl.n	800889a <_vfiprintf_r+0x6a>
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	b01d      	add	sp, #116	; 0x74
 8008882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	4b7b      	ldr	r3, [pc, #492]	; (8008a74 <_vfiprintf_r+0x244>)
 8008888:	429d      	cmp	r5, r3
 800888a:	d101      	bne.n	8008890 <_vfiprintf_r+0x60>
 800888c:	68b5      	ldr	r5, [r6, #8]
 800888e:	e7df      	b.n	8008850 <_vfiprintf_r+0x20>
 8008890:	4b79      	ldr	r3, [pc, #484]	; (8008a78 <_vfiprintf_r+0x248>)
 8008892:	429d      	cmp	r5, r3
 8008894:	bf08      	it	eq
 8008896:	68f5      	ldreq	r5, [r6, #12]
 8008898:	e7da      	b.n	8008850 <_vfiprintf_r+0x20>
 800889a:	89ab      	ldrh	r3, [r5, #12]
 800889c:	0598      	lsls	r0, r3, #22
 800889e:	d4ed      	bmi.n	800887c <_vfiprintf_r+0x4c>
 80088a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088a2:	f000 fb76 	bl	8008f92 <__retarget_lock_release_recursive>
 80088a6:	e7e9      	b.n	800887c <_vfiprintf_r+0x4c>
 80088a8:	2300      	movs	r3, #0
 80088aa:	9309      	str	r3, [sp, #36]	; 0x24
 80088ac:	2320      	movs	r3, #32
 80088ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80088b6:	2330      	movs	r3, #48	; 0x30
 80088b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a7c <_vfiprintf_r+0x24c>
 80088bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088c0:	f04f 0901 	mov.w	r9, #1
 80088c4:	4623      	mov	r3, r4
 80088c6:	469a      	mov	sl, r3
 80088c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088cc:	b10a      	cbz	r2, 80088d2 <_vfiprintf_r+0xa2>
 80088ce:	2a25      	cmp	r2, #37	; 0x25
 80088d0:	d1f9      	bne.n	80088c6 <_vfiprintf_r+0x96>
 80088d2:	ebba 0b04 	subs.w	fp, sl, r4
 80088d6:	d00b      	beq.n	80088f0 <_vfiprintf_r+0xc0>
 80088d8:	465b      	mov	r3, fp
 80088da:	4622      	mov	r2, r4
 80088dc:	4629      	mov	r1, r5
 80088de:	4630      	mov	r0, r6
 80088e0:	f7ff ff94 	bl	800880c <__sfputs_r>
 80088e4:	3001      	adds	r0, #1
 80088e6:	f000 80aa 	beq.w	8008a3e <_vfiprintf_r+0x20e>
 80088ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088ec:	445a      	add	r2, fp
 80088ee:	9209      	str	r2, [sp, #36]	; 0x24
 80088f0:	f89a 3000 	ldrb.w	r3, [sl]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 80a2 	beq.w	8008a3e <_vfiprintf_r+0x20e>
 80088fa:	2300      	movs	r3, #0
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008904:	f10a 0a01 	add.w	sl, sl, #1
 8008908:	9304      	str	r3, [sp, #16]
 800890a:	9307      	str	r3, [sp, #28]
 800890c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008910:	931a      	str	r3, [sp, #104]	; 0x68
 8008912:	4654      	mov	r4, sl
 8008914:	2205      	movs	r2, #5
 8008916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800891a:	4858      	ldr	r0, [pc, #352]	; (8008a7c <_vfiprintf_r+0x24c>)
 800891c:	f7f7 fc68 	bl	80001f0 <memchr>
 8008920:	9a04      	ldr	r2, [sp, #16]
 8008922:	b9d8      	cbnz	r0, 800895c <_vfiprintf_r+0x12c>
 8008924:	06d1      	lsls	r1, r2, #27
 8008926:	bf44      	itt	mi
 8008928:	2320      	movmi	r3, #32
 800892a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892e:	0713      	lsls	r3, r2, #28
 8008930:	bf44      	itt	mi
 8008932:	232b      	movmi	r3, #43	; 0x2b
 8008934:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008938:	f89a 3000 	ldrb.w	r3, [sl]
 800893c:	2b2a      	cmp	r3, #42	; 0x2a
 800893e:	d015      	beq.n	800896c <_vfiprintf_r+0x13c>
 8008940:	9a07      	ldr	r2, [sp, #28]
 8008942:	4654      	mov	r4, sl
 8008944:	2000      	movs	r0, #0
 8008946:	f04f 0c0a 	mov.w	ip, #10
 800894a:	4621      	mov	r1, r4
 800894c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008950:	3b30      	subs	r3, #48	; 0x30
 8008952:	2b09      	cmp	r3, #9
 8008954:	d94e      	bls.n	80089f4 <_vfiprintf_r+0x1c4>
 8008956:	b1b0      	cbz	r0, 8008986 <_vfiprintf_r+0x156>
 8008958:	9207      	str	r2, [sp, #28]
 800895a:	e014      	b.n	8008986 <_vfiprintf_r+0x156>
 800895c:	eba0 0308 	sub.w	r3, r0, r8
 8008960:	fa09 f303 	lsl.w	r3, r9, r3
 8008964:	4313      	orrs	r3, r2
 8008966:	9304      	str	r3, [sp, #16]
 8008968:	46a2      	mov	sl, r4
 800896a:	e7d2      	b.n	8008912 <_vfiprintf_r+0xe2>
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	1d19      	adds	r1, r3, #4
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	9103      	str	r1, [sp, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	bfbb      	ittet	lt
 8008978:	425b      	neglt	r3, r3
 800897a:	f042 0202 	orrlt.w	r2, r2, #2
 800897e:	9307      	strge	r3, [sp, #28]
 8008980:	9307      	strlt	r3, [sp, #28]
 8008982:	bfb8      	it	lt
 8008984:	9204      	strlt	r2, [sp, #16]
 8008986:	7823      	ldrb	r3, [r4, #0]
 8008988:	2b2e      	cmp	r3, #46	; 0x2e
 800898a:	d10c      	bne.n	80089a6 <_vfiprintf_r+0x176>
 800898c:	7863      	ldrb	r3, [r4, #1]
 800898e:	2b2a      	cmp	r3, #42	; 0x2a
 8008990:	d135      	bne.n	80089fe <_vfiprintf_r+0x1ce>
 8008992:	9b03      	ldr	r3, [sp, #12]
 8008994:	1d1a      	adds	r2, r3, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	9203      	str	r2, [sp, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	bfb8      	it	lt
 800899e:	f04f 33ff 	movlt.w	r3, #4294967295
 80089a2:	3402      	adds	r4, #2
 80089a4:	9305      	str	r3, [sp, #20]
 80089a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a8c <_vfiprintf_r+0x25c>
 80089aa:	7821      	ldrb	r1, [r4, #0]
 80089ac:	2203      	movs	r2, #3
 80089ae:	4650      	mov	r0, sl
 80089b0:	f7f7 fc1e 	bl	80001f0 <memchr>
 80089b4:	b140      	cbz	r0, 80089c8 <_vfiprintf_r+0x198>
 80089b6:	2340      	movs	r3, #64	; 0x40
 80089b8:	eba0 000a 	sub.w	r0, r0, sl
 80089bc:	fa03 f000 	lsl.w	r0, r3, r0
 80089c0:	9b04      	ldr	r3, [sp, #16]
 80089c2:	4303      	orrs	r3, r0
 80089c4:	3401      	adds	r4, #1
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	482c      	ldr	r0, [pc, #176]	; (8008a80 <_vfiprintf_r+0x250>)
 80089ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089d2:	2206      	movs	r2, #6
 80089d4:	f7f7 fc0c 	bl	80001f0 <memchr>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d03f      	beq.n	8008a5c <_vfiprintf_r+0x22c>
 80089dc:	4b29      	ldr	r3, [pc, #164]	; (8008a84 <_vfiprintf_r+0x254>)
 80089de:	bb1b      	cbnz	r3, 8008a28 <_vfiprintf_r+0x1f8>
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	3307      	adds	r3, #7
 80089e4:	f023 0307 	bic.w	r3, r3, #7
 80089e8:	3308      	adds	r3, #8
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ee:	443b      	add	r3, r7
 80089f0:	9309      	str	r3, [sp, #36]	; 0x24
 80089f2:	e767      	b.n	80088c4 <_vfiprintf_r+0x94>
 80089f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80089f8:	460c      	mov	r4, r1
 80089fa:	2001      	movs	r0, #1
 80089fc:	e7a5      	b.n	800894a <_vfiprintf_r+0x11a>
 80089fe:	2300      	movs	r3, #0
 8008a00:	3401      	adds	r4, #1
 8008a02:	9305      	str	r3, [sp, #20]
 8008a04:	4619      	mov	r1, r3
 8008a06:	f04f 0c0a 	mov.w	ip, #10
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a10:	3a30      	subs	r2, #48	; 0x30
 8008a12:	2a09      	cmp	r2, #9
 8008a14:	d903      	bls.n	8008a1e <_vfiprintf_r+0x1ee>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0c5      	beq.n	80089a6 <_vfiprintf_r+0x176>
 8008a1a:	9105      	str	r1, [sp, #20]
 8008a1c:	e7c3      	b.n	80089a6 <_vfiprintf_r+0x176>
 8008a1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a22:	4604      	mov	r4, r0
 8008a24:	2301      	movs	r3, #1
 8008a26:	e7f0      	b.n	8008a0a <_vfiprintf_r+0x1da>
 8008a28:	ab03      	add	r3, sp, #12
 8008a2a:	9300      	str	r3, [sp, #0]
 8008a2c:	462a      	mov	r2, r5
 8008a2e:	4b16      	ldr	r3, [pc, #88]	; (8008a88 <_vfiprintf_r+0x258>)
 8008a30:	a904      	add	r1, sp, #16
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7fc f83a 	bl	8004aac <_printf_float>
 8008a38:	4607      	mov	r7, r0
 8008a3a:	1c78      	adds	r0, r7, #1
 8008a3c:	d1d6      	bne.n	80089ec <_vfiprintf_r+0x1bc>
 8008a3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a40:	07d9      	lsls	r1, r3, #31
 8008a42:	d405      	bmi.n	8008a50 <_vfiprintf_r+0x220>
 8008a44:	89ab      	ldrh	r3, [r5, #12]
 8008a46:	059a      	lsls	r2, r3, #22
 8008a48:	d402      	bmi.n	8008a50 <_vfiprintf_r+0x220>
 8008a4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a4c:	f000 faa1 	bl	8008f92 <__retarget_lock_release_recursive>
 8008a50:	89ab      	ldrh	r3, [r5, #12]
 8008a52:	065b      	lsls	r3, r3, #25
 8008a54:	f53f af12 	bmi.w	800887c <_vfiprintf_r+0x4c>
 8008a58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a5a:	e711      	b.n	8008880 <_vfiprintf_r+0x50>
 8008a5c:	ab03      	add	r3, sp, #12
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	462a      	mov	r2, r5
 8008a62:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <_vfiprintf_r+0x258>)
 8008a64:	a904      	add	r1, sp, #16
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7fc fac4 	bl	8004ff4 <_printf_i>
 8008a6c:	e7e4      	b.n	8008a38 <_vfiprintf_r+0x208>
 8008a6e:	bf00      	nop
 8008a70:	080097ec 	.word	0x080097ec
 8008a74:	0800980c 	.word	0x0800980c
 8008a78:	080097cc 	.word	0x080097cc
 8008a7c:	0800977c 	.word	0x0800977c
 8008a80:	08009786 	.word	0x08009786
 8008a84:	08004aad 	.word	0x08004aad
 8008a88:	0800880d 	.word	0x0800880d
 8008a8c:	08009782 	.word	0x08009782

08008a90 <__swbuf_r>:
 8008a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a92:	460e      	mov	r6, r1
 8008a94:	4614      	mov	r4, r2
 8008a96:	4605      	mov	r5, r0
 8008a98:	b118      	cbz	r0, 8008aa2 <__swbuf_r+0x12>
 8008a9a:	6983      	ldr	r3, [r0, #24]
 8008a9c:	b90b      	cbnz	r3, 8008aa2 <__swbuf_r+0x12>
 8008a9e:	f000 f9d9 	bl	8008e54 <__sinit>
 8008aa2:	4b21      	ldr	r3, [pc, #132]	; (8008b28 <__swbuf_r+0x98>)
 8008aa4:	429c      	cmp	r4, r3
 8008aa6:	d12b      	bne.n	8008b00 <__swbuf_r+0x70>
 8008aa8:	686c      	ldr	r4, [r5, #4]
 8008aaa:	69a3      	ldr	r3, [r4, #24]
 8008aac:	60a3      	str	r3, [r4, #8]
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	071a      	lsls	r2, r3, #28
 8008ab2:	d52f      	bpl.n	8008b14 <__swbuf_r+0x84>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	b36b      	cbz	r3, 8008b14 <__swbuf_r+0x84>
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	6820      	ldr	r0, [r4, #0]
 8008abc:	1ac0      	subs	r0, r0, r3
 8008abe:	6963      	ldr	r3, [r4, #20]
 8008ac0:	b2f6      	uxtb	r6, r6
 8008ac2:	4283      	cmp	r3, r0
 8008ac4:	4637      	mov	r7, r6
 8008ac6:	dc04      	bgt.n	8008ad2 <__swbuf_r+0x42>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4628      	mov	r0, r5
 8008acc:	f000 f92e 	bl	8008d2c <_fflush_r>
 8008ad0:	bb30      	cbnz	r0, 8008b20 <__swbuf_r+0x90>
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	3b01      	subs	r3, #1
 8008ad6:	60a3      	str	r3, [r4, #8]
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	1c5a      	adds	r2, r3, #1
 8008adc:	6022      	str	r2, [r4, #0]
 8008ade:	701e      	strb	r6, [r3, #0]
 8008ae0:	6963      	ldr	r3, [r4, #20]
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	4283      	cmp	r3, r0
 8008ae6:	d004      	beq.n	8008af2 <__swbuf_r+0x62>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	07db      	lsls	r3, r3, #31
 8008aec:	d506      	bpl.n	8008afc <__swbuf_r+0x6c>
 8008aee:	2e0a      	cmp	r6, #10
 8008af0:	d104      	bne.n	8008afc <__swbuf_r+0x6c>
 8008af2:	4621      	mov	r1, r4
 8008af4:	4628      	mov	r0, r5
 8008af6:	f000 f919 	bl	8008d2c <_fflush_r>
 8008afa:	b988      	cbnz	r0, 8008b20 <__swbuf_r+0x90>
 8008afc:	4638      	mov	r0, r7
 8008afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <__swbuf_r+0x9c>)
 8008b02:	429c      	cmp	r4, r3
 8008b04:	d101      	bne.n	8008b0a <__swbuf_r+0x7a>
 8008b06:	68ac      	ldr	r4, [r5, #8]
 8008b08:	e7cf      	b.n	8008aaa <__swbuf_r+0x1a>
 8008b0a:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <__swbuf_r+0xa0>)
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	bf08      	it	eq
 8008b10:	68ec      	ldreq	r4, [r5, #12]
 8008b12:	e7ca      	b.n	8008aaa <__swbuf_r+0x1a>
 8008b14:	4621      	mov	r1, r4
 8008b16:	4628      	mov	r0, r5
 8008b18:	f000 f80c 	bl	8008b34 <__swsetup_r>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d0cb      	beq.n	8008ab8 <__swbuf_r+0x28>
 8008b20:	f04f 37ff 	mov.w	r7, #4294967295
 8008b24:	e7ea      	b.n	8008afc <__swbuf_r+0x6c>
 8008b26:	bf00      	nop
 8008b28:	080097ec 	.word	0x080097ec
 8008b2c:	0800980c 	.word	0x0800980c
 8008b30:	080097cc 	.word	0x080097cc

08008b34 <__swsetup_r>:
 8008b34:	4b32      	ldr	r3, [pc, #200]	; (8008c00 <__swsetup_r+0xcc>)
 8008b36:	b570      	push	{r4, r5, r6, lr}
 8008b38:	681d      	ldr	r5, [r3, #0]
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	b125      	cbz	r5, 8008b4a <__swsetup_r+0x16>
 8008b40:	69ab      	ldr	r3, [r5, #24]
 8008b42:	b913      	cbnz	r3, 8008b4a <__swsetup_r+0x16>
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 f985 	bl	8008e54 <__sinit>
 8008b4a:	4b2e      	ldr	r3, [pc, #184]	; (8008c04 <__swsetup_r+0xd0>)
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d10f      	bne.n	8008b70 <__swsetup_r+0x3c>
 8008b50:	686c      	ldr	r4, [r5, #4]
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b58:	0719      	lsls	r1, r3, #28
 8008b5a:	d42c      	bmi.n	8008bb6 <__swsetup_r+0x82>
 8008b5c:	06dd      	lsls	r5, r3, #27
 8008b5e:	d411      	bmi.n	8008b84 <__swsetup_r+0x50>
 8008b60:	2309      	movs	r3, #9
 8008b62:	6033      	str	r3, [r6, #0]
 8008b64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6e:	e03e      	b.n	8008bee <__swsetup_r+0xba>
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <__swsetup_r+0xd4>)
 8008b72:	429c      	cmp	r4, r3
 8008b74:	d101      	bne.n	8008b7a <__swsetup_r+0x46>
 8008b76:	68ac      	ldr	r4, [r5, #8]
 8008b78:	e7eb      	b.n	8008b52 <__swsetup_r+0x1e>
 8008b7a:	4b24      	ldr	r3, [pc, #144]	; (8008c0c <__swsetup_r+0xd8>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	bf08      	it	eq
 8008b80:	68ec      	ldreq	r4, [r5, #12]
 8008b82:	e7e6      	b.n	8008b52 <__swsetup_r+0x1e>
 8008b84:	0758      	lsls	r0, r3, #29
 8008b86:	d512      	bpl.n	8008bae <__swsetup_r+0x7a>
 8008b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b8a:	b141      	cbz	r1, 8008b9e <__swsetup_r+0x6a>
 8008b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b90:	4299      	cmp	r1, r3
 8008b92:	d002      	beq.n	8008b9a <__swsetup_r+0x66>
 8008b94:	4630      	mov	r0, r6
 8008b96:	f7ff fb25 	bl	80081e4 <_free_r>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	6063      	str	r3, [r4, #4]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	89a3      	ldrh	r3, [r4, #12]
 8008bb0:	f043 0308 	orr.w	r3, r3, #8
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	b94b      	cbnz	r3, 8008bce <__swsetup_r+0x9a>
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc4:	d003      	beq.n	8008bce <__swsetup_r+0x9a>
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 fa09 	bl	8008fe0 <__smakebuf_r>
 8008bce:	89a0      	ldrh	r0, [r4, #12]
 8008bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bd4:	f010 0301 	ands.w	r3, r0, #1
 8008bd8:	d00a      	beq.n	8008bf0 <__swsetup_r+0xbc>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	6963      	ldr	r3, [r4, #20]
 8008be0:	425b      	negs	r3, r3
 8008be2:	61a3      	str	r3, [r4, #24]
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	b943      	cbnz	r3, 8008bfa <__swsetup_r+0xc6>
 8008be8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008bec:	d1ba      	bne.n	8008b64 <__swsetup_r+0x30>
 8008bee:	bd70      	pop	{r4, r5, r6, pc}
 8008bf0:	0781      	lsls	r1, r0, #30
 8008bf2:	bf58      	it	pl
 8008bf4:	6963      	ldrpl	r3, [r4, #20]
 8008bf6:	60a3      	str	r3, [r4, #8]
 8008bf8:	e7f4      	b.n	8008be4 <__swsetup_r+0xb0>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	e7f7      	b.n	8008bee <__swsetup_r+0xba>
 8008bfe:	bf00      	nop
 8008c00:	20000018 	.word	0x20000018
 8008c04:	080097ec 	.word	0x080097ec
 8008c08:	0800980c 	.word	0x0800980c
 8008c0c:	080097cc 	.word	0x080097cc

08008c10 <abort>:
 8008c10:	b508      	push	{r3, lr}
 8008c12:	2006      	movs	r0, #6
 8008c14:	f000 fa54 	bl	80090c0 <raise>
 8008c18:	2001      	movs	r0, #1
 8008c1a:	f7f8 fd7c 	bl	8001716 <_exit>
	...

08008c20 <__sflush_r>:
 8008c20:	898a      	ldrh	r2, [r1, #12]
 8008c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c26:	4605      	mov	r5, r0
 8008c28:	0710      	lsls	r0, r2, #28
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	d458      	bmi.n	8008ce0 <__sflush_r+0xc0>
 8008c2e:	684b      	ldr	r3, [r1, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	dc05      	bgt.n	8008c40 <__sflush_r+0x20>
 8008c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dc02      	bgt.n	8008c40 <__sflush_r+0x20>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c42:	2e00      	cmp	r6, #0
 8008c44:	d0f9      	beq.n	8008c3a <__sflush_r+0x1a>
 8008c46:	2300      	movs	r3, #0
 8008c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c4c:	682f      	ldr	r7, [r5, #0]
 8008c4e:	602b      	str	r3, [r5, #0]
 8008c50:	d032      	beq.n	8008cb8 <__sflush_r+0x98>
 8008c52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	075a      	lsls	r2, r3, #29
 8008c58:	d505      	bpl.n	8008c66 <__sflush_r+0x46>
 8008c5a:	6863      	ldr	r3, [r4, #4]
 8008c5c:	1ac0      	subs	r0, r0, r3
 8008c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c60:	b10b      	cbz	r3, 8008c66 <__sflush_r+0x46>
 8008c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c64:	1ac0      	subs	r0, r0, r3
 8008c66:	2300      	movs	r3, #0
 8008c68:	4602      	mov	r2, r0
 8008c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c6c:	6a21      	ldr	r1, [r4, #32]
 8008c6e:	4628      	mov	r0, r5
 8008c70:	47b0      	blx	r6
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	d106      	bne.n	8008c86 <__sflush_r+0x66>
 8008c78:	6829      	ldr	r1, [r5, #0]
 8008c7a:	291d      	cmp	r1, #29
 8008c7c:	d82c      	bhi.n	8008cd8 <__sflush_r+0xb8>
 8008c7e:	4a2a      	ldr	r2, [pc, #168]	; (8008d28 <__sflush_r+0x108>)
 8008c80:	40ca      	lsrs	r2, r1
 8008c82:	07d6      	lsls	r6, r2, #31
 8008c84:	d528      	bpl.n	8008cd8 <__sflush_r+0xb8>
 8008c86:	2200      	movs	r2, #0
 8008c88:	6062      	str	r2, [r4, #4]
 8008c8a:	04d9      	lsls	r1, r3, #19
 8008c8c:	6922      	ldr	r2, [r4, #16]
 8008c8e:	6022      	str	r2, [r4, #0]
 8008c90:	d504      	bpl.n	8008c9c <__sflush_r+0x7c>
 8008c92:	1c42      	adds	r2, r0, #1
 8008c94:	d101      	bne.n	8008c9a <__sflush_r+0x7a>
 8008c96:	682b      	ldr	r3, [r5, #0]
 8008c98:	b903      	cbnz	r3, 8008c9c <__sflush_r+0x7c>
 8008c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c9e:	602f      	str	r7, [r5, #0]
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	d0ca      	beq.n	8008c3a <__sflush_r+0x1a>
 8008ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ca8:	4299      	cmp	r1, r3
 8008caa:	d002      	beq.n	8008cb2 <__sflush_r+0x92>
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7ff fa99 	bl	80081e4 <_free_r>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	6360      	str	r0, [r4, #52]	; 0x34
 8008cb6:	e7c1      	b.n	8008c3c <__sflush_r+0x1c>
 8008cb8:	6a21      	ldr	r1, [r4, #32]
 8008cba:	2301      	movs	r3, #1
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b0      	blx	r6
 8008cc0:	1c41      	adds	r1, r0, #1
 8008cc2:	d1c7      	bne.n	8008c54 <__sflush_r+0x34>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0c4      	beq.n	8008c54 <__sflush_r+0x34>
 8008cca:	2b1d      	cmp	r3, #29
 8008ccc:	d001      	beq.n	8008cd2 <__sflush_r+0xb2>
 8008cce:	2b16      	cmp	r3, #22
 8008cd0:	d101      	bne.n	8008cd6 <__sflush_r+0xb6>
 8008cd2:	602f      	str	r7, [r5, #0]
 8008cd4:	e7b1      	b.n	8008c3a <__sflush_r+0x1a>
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	e7ad      	b.n	8008c3c <__sflush_r+0x1c>
 8008ce0:	690f      	ldr	r7, [r1, #16]
 8008ce2:	2f00      	cmp	r7, #0
 8008ce4:	d0a9      	beq.n	8008c3a <__sflush_r+0x1a>
 8008ce6:	0793      	lsls	r3, r2, #30
 8008ce8:	680e      	ldr	r6, [r1, #0]
 8008cea:	bf08      	it	eq
 8008cec:	694b      	ldreq	r3, [r1, #20]
 8008cee:	600f      	str	r7, [r1, #0]
 8008cf0:	bf18      	it	ne
 8008cf2:	2300      	movne	r3, #0
 8008cf4:	eba6 0807 	sub.w	r8, r6, r7
 8008cf8:	608b      	str	r3, [r1, #8]
 8008cfa:	f1b8 0f00 	cmp.w	r8, #0
 8008cfe:	dd9c      	ble.n	8008c3a <__sflush_r+0x1a>
 8008d00:	6a21      	ldr	r1, [r4, #32]
 8008d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d04:	4643      	mov	r3, r8
 8008d06:	463a      	mov	r2, r7
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b0      	blx	r6
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	dc06      	bgt.n	8008d1e <__sflush_r+0xfe>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	e78e      	b.n	8008c3c <__sflush_r+0x1c>
 8008d1e:	4407      	add	r7, r0
 8008d20:	eba8 0800 	sub.w	r8, r8, r0
 8008d24:	e7e9      	b.n	8008cfa <__sflush_r+0xda>
 8008d26:	bf00      	nop
 8008d28:	20400001 	.word	0x20400001

08008d2c <_fflush_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	690b      	ldr	r3, [r1, #16]
 8008d30:	4605      	mov	r5, r0
 8008d32:	460c      	mov	r4, r1
 8008d34:	b913      	cbnz	r3, 8008d3c <_fflush_r+0x10>
 8008d36:	2500      	movs	r5, #0
 8008d38:	4628      	mov	r0, r5
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	b118      	cbz	r0, 8008d46 <_fflush_r+0x1a>
 8008d3e:	6983      	ldr	r3, [r0, #24]
 8008d40:	b90b      	cbnz	r3, 8008d46 <_fflush_r+0x1a>
 8008d42:	f000 f887 	bl	8008e54 <__sinit>
 8008d46:	4b14      	ldr	r3, [pc, #80]	; (8008d98 <_fflush_r+0x6c>)
 8008d48:	429c      	cmp	r4, r3
 8008d4a:	d11b      	bne.n	8008d84 <_fflush_r+0x58>
 8008d4c:	686c      	ldr	r4, [r5, #4]
 8008d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d0ef      	beq.n	8008d36 <_fflush_r+0xa>
 8008d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d58:	07d0      	lsls	r0, r2, #31
 8008d5a:	d404      	bmi.n	8008d66 <_fflush_r+0x3a>
 8008d5c:	0599      	lsls	r1, r3, #22
 8008d5e:	d402      	bmi.n	8008d66 <_fflush_r+0x3a>
 8008d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d62:	f000 f915 	bl	8008f90 <__retarget_lock_acquire_recursive>
 8008d66:	4628      	mov	r0, r5
 8008d68:	4621      	mov	r1, r4
 8008d6a:	f7ff ff59 	bl	8008c20 <__sflush_r>
 8008d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d70:	07da      	lsls	r2, r3, #31
 8008d72:	4605      	mov	r5, r0
 8008d74:	d4e0      	bmi.n	8008d38 <_fflush_r+0xc>
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	059b      	lsls	r3, r3, #22
 8008d7a:	d4dd      	bmi.n	8008d38 <_fflush_r+0xc>
 8008d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d7e:	f000 f908 	bl	8008f92 <__retarget_lock_release_recursive>
 8008d82:	e7d9      	b.n	8008d38 <_fflush_r+0xc>
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <_fflush_r+0x70>)
 8008d86:	429c      	cmp	r4, r3
 8008d88:	d101      	bne.n	8008d8e <_fflush_r+0x62>
 8008d8a:	68ac      	ldr	r4, [r5, #8]
 8008d8c:	e7df      	b.n	8008d4e <_fflush_r+0x22>
 8008d8e:	4b04      	ldr	r3, [pc, #16]	; (8008da0 <_fflush_r+0x74>)
 8008d90:	429c      	cmp	r4, r3
 8008d92:	bf08      	it	eq
 8008d94:	68ec      	ldreq	r4, [r5, #12]
 8008d96:	e7da      	b.n	8008d4e <_fflush_r+0x22>
 8008d98:	080097ec 	.word	0x080097ec
 8008d9c:	0800980c 	.word	0x0800980c
 8008da0:	080097cc 	.word	0x080097cc

08008da4 <std>:
 8008da4:	2300      	movs	r3, #0
 8008da6:	b510      	push	{r4, lr}
 8008da8:	4604      	mov	r4, r0
 8008daa:	e9c0 3300 	strd	r3, r3, [r0]
 8008dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008db2:	6083      	str	r3, [r0, #8]
 8008db4:	8181      	strh	r1, [r0, #12]
 8008db6:	6643      	str	r3, [r0, #100]	; 0x64
 8008db8:	81c2      	strh	r2, [r0, #14]
 8008dba:	6183      	str	r3, [r0, #24]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	2208      	movs	r2, #8
 8008dc0:	305c      	adds	r0, #92	; 0x5c
 8008dc2:	f7fb fdcb 	bl	800495c <memset>
 8008dc6:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <std+0x38>)
 8008dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8008dca:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <std+0x3c>)
 8008dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dce:	4b05      	ldr	r3, [pc, #20]	; (8008de4 <std+0x40>)
 8008dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <std+0x44>)
 8008dd4:	6224      	str	r4, [r4, #32]
 8008dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8008dd8:	bd10      	pop	{r4, pc}
 8008dda:	bf00      	nop
 8008ddc:	080090f9 	.word	0x080090f9
 8008de0:	0800911b 	.word	0x0800911b
 8008de4:	08009153 	.word	0x08009153
 8008de8:	08009177 	.word	0x08009177

08008dec <_cleanup_r>:
 8008dec:	4901      	ldr	r1, [pc, #4]	; (8008df4 <_cleanup_r+0x8>)
 8008dee:	f000 b8af 	b.w	8008f50 <_fwalk_reent>
 8008df2:	bf00      	nop
 8008df4:	08008d2d 	.word	0x08008d2d

08008df8 <__sfmoreglue>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	2268      	movs	r2, #104	; 0x68
 8008dfc:	1e4d      	subs	r5, r1, #1
 8008dfe:	4355      	muls	r5, r2
 8008e00:	460e      	mov	r6, r1
 8008e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e06:	f7ff fa59 	bl	80082bc <_malloc_r>
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	b140      	cbz	r0, 8008e20 <__sfmoreglue+0x28>
 8008e0e:	2100      	movs	r1, #0
 8008e10:	e9c0 1600 	strd	r1, r6, [r0]
 8008e14:	300c      	adds	r0, #12
 8008e16:	60a0      	str	r0, [r4, #8]
 8008e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e1c:	f7fb fd9e 	bl	800495c <memset>
 8008e20:	4620      	mov	r0, r4
 8008e22:	bd70      	pop	{r4, r5, r6, pc}

08008e24 <__sfp_lock_acquire>:
 8008e24:	4801      	ldr	r0, [pc, #4]	; (8008e2c <__sfp_lock_acquire+0x8>)
 8008e26:	f000 b8b3 	b.w	8008f90 <__retarget_lock_acquire_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	20000bad 	.word	0x20000bad

08008e30 <__sfp_lock_release>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__sfp_lock_release+0x8>)
 8008e32:	f000 b8ae 	b.w	8008f92 <__retarget_lock_release_recursive>
 8008e36:	bf00      	nop
 8008e38:	20000bad 	.word	0x20000bad

08008e3c <__sinit_lock_acquire>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__sinit_lock_acquire+0x8>)
 8008e3e:	f000 b8a7 	b.w	8008f90 <__retarget_lock_acquire_recursive>
 8008e42:	bf00      	nop
 8008e44:	20000bae 	.word	0x20000bae

08008e48 <__sinit_lock_release>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__sinit_lock_release+0x8>)
 8008e4a:	f000 b8a2 	b.w	8008f92 <__retarget_lock_release_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20000bae 	.word	0x20000bae

08008e54 <__sinit>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	4604      	mov	r4, r0
 8008e58:	f7ff fff0 	bl	8008e3c <__sinit_lock_acquire>
 8008e5c:	69a3      	ldr	r3, [r4, #24]
 8008e5e:	b11b      	cbz	r3, 8008e68 <__sinit+0x14>
 8008e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e64:	f7ff bff0 	b.w	8008e48 <__sinit_lock_release>
 8008e68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e6c:	6523      	str	r3, [r4, #80]	; 0x50
 8008e6e:	4b13      	ldr	r3, [pc, #76]	; (8008ebc <__sinit+0x68>)
 8008e70:	4a13      	ldr	r2, [pc, #76]	; (8008ec0 <__sinit+0x6c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	bf04      	itt	eq
 8008e7a:	2301      	moveq	r3, #1
 8008e7c:	61a3      	streq	r3, [r4, #24]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f000 f820 	bl	8008ec4 <__sfp>
 8008e84:	6060      	str	r0, [r4, #4]
 8008e86:	4620      	mov	r0, r4
 8008e88:	f000 f81c 	bl	8008ec4 <__sfp>
 8008e8c:	60a0      	str	r0, [r4, #8]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 f818 	bl	8008ec4 <__sfp>
 8008e94:	2200      	movs	r2, #0
 8008e96:	60e0      	str	r0, [r4, #12]
 8008e98:	2104      	movs	r1, #4
 8008e9a:	6860      	ldr	r0, [r4, #4]
 8008e9c:	f7ff ff82 	bl	8008da4 <std>
 8008ea0:	68a0      	ldr	r0, [r4, #8]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	2109      	movs	r1, #9
 8008ea6:	f7ff ff7d 	bl	8008da4 <std>
 8008eaa:	68e0      	ldr	r0, [r4, #12]
 8008eac:	2202      	movs	r2, #2
 8008eae:	2112      	movs	r1, #18
 8008eb0:	f7ff ff78 	bl	8008da4 <std>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	61a3      	str	r3, [r4, #24]
 8008eb8:	e7d2      	b.n	8008e60 <__sinit+0xc>
 8008eba:	bf00      	nop
 8008ebc:	08009384 	.word	0x08009384
 8008ec0:	08008ded 	.word	0x08008ded

08008ec4 <__sfp>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	f7ff ffac 	bl	8008e24 <__sfp_lock_acquire>
 8008ecc:	4b1e      	ldr	r3, [pc, #120]	; (8008f48 <__sfp+0x84>)
 8008ece:	681e      	ldr	r6, [r3, #0]
 8008ed0:	69b3      	ldr	r3, [r6, #24]
 8008ed2:	b913      	cbnz	r3, 8008eda <__sfp+0x16>
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f7ff ffbd 	bl	8008e54 <__sinit>
 8008eda:	3648      	adds	r6, #72	; 0x48
 8008edc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	d503      	bpl.n	8008eec <__sfp+0x28>
 8008ee4:	6833      	ldr	r3, [r6, #0]
 8008ee6:	b30b      	cbz	r3, 8008f2c <__sfp+0x68>
 8008ee8:	6836      	ldr	r6, [r6, #0]
 8008eea:	e7f7      	b.n	8008edc <__sfp+0x18>
 8008eec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ef0:	b9d5      	cbnz	r5, 8008f28 <__sfp+0x64>
 8008ef2:	4b16      	ldr	r3, [pc, #88]	; (8008f4c <__sfp+0x88>)
 8008ef4:	60e3      	str	r3, [r4, #12]
 8008ef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008efa:	6665      	str	r5, [r4, #100]	; 0x64
 8008efc:	f000 f847 	bl	8008f8e <__retarget_lock_init_recursive>
 8008f00:	f7ff ff96 	bl	8008e30 <__sfp_lock_release>
 8008f04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f0c:	6025      	str	r5, [r4, #0]
 8008f0e:	61a5      	str	r5, [r4, #24]
 8008f10:	2208      	movs	r2, #8
 8008f12:	4629      	mov	r1, r5
 8008f14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f18:	f7fb fd20 	bl	800495c <memset>
 8008f1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f24:	4620      	mov	r0, r4
 8008f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f28:	3468      	adds	r4, #104	; 0x68
 8008f2a:	e7d9      	b.n	8008ee0 <__sfp+0x1c>
 8008f2c:	2104      	movs	r1, #4
 8008f2e:	4638      	mov	r0, r7
 8008f30:	f7ff ff62 	bl	8008df8 <__sfmoreglue>
 8008f34:	4604      	mov	r4, r0
 8008f36:	6030      	str	r0, [r6, #0]
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1d5      	bne.n	8008ee8 <__sfp+0x24>
 8008f3c:	f7ff ff78 	bl	8008e30 <__sfp_lock_release>
 8008f40:	230c      	movs	r3, #12
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	e7ee      	b.n	8008f24 <__sfp+0x60>
 8008f46:	bf00      	nop
 8008f48:	08009384 	.word	0x08009384
 8008f4c:	ffff0001 	.word	0xffff0001

08008f50 <_fwalk_reent>:
 8008f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f54:	4606      	mov	r6, r0
 8008f56:	4688      	mov	r8, r1
 8008f58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f5c:	2700      	movs	r7, #0
 8008f5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f62:	f1b9 0901 	subs.w	r9, r9, #1
 8008f66:	d505      	bpl.n	8008f74 <_fwalk_reent+0x24>
 8008f68:	6824      	ldr	r4, [r4, #0]
 8008f6a:	2c00      	cmp	r4, #0
 8008f6c:	d1f7      	bne.n	8008f5e <_fwalk_reent+0xe>
 8008f6e:	4638      	mov	r0, r7
 8008f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f74:	89ab      	ldrh	r3, [r5, #12]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d907      	bls.n	8008f8a <_fwalk_reent+0x3a>
 8008f7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	d003      	beq.n	8008f8a <_fwalk_reent+0x3a>
 8008f82:	4629      	mov	r1, r5
 8008f84:	4630      	mov	r0, r6
 8008f86:	47c0      	blx	r8
 8008f88:	4307      	orrs	r7, r0
 8008f8a:	3568      	adds	r5, #104	; 0x68
 8008f8c:	e7e9      	b.n	8008f62 <_fwalk_reent+0x12>

08008f8e <__retarget_lock_init_recursive>:
 8008f8e:	4770      	bx	lr

08008f90 <__retarget_lock_acquire_recursive>:
 8008f90:	4770      	bx	lr

08008f92 <__retarget_lock_release_recursive>:
 8008f92:	4770      	bx	lr

08008f94 <__swhatbuf_r>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	460e      	mov	r6, r1
 8008f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	b096      	sub	sp, #88	; 0x58
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	461d      	mov	r5, r3
 8008fa4:	da08      	bge.n	8008fb8 <__swhatbuf_r+0x24>
 8008fa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	602a      	str	r2, [r5, #0]
 8008fae:	061a      	lsls	r2, r3, #24
 8008fb0:	d410      	bmi.n	8008fd4 <__swhatbuf_r+0x40>
 8008fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb6:	e00e      	b.n	8008fd6 <__swhatbuf_r+0x42>
 8008fb8:	466a      	mov	r2, sp
 8008fba:	f000 f903 	bl	80091c4 <_fstat_r>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	dbf1      	blt.n	8008fa6 <__swhatbuf_r+0x12>
 8008fc2:	9a01      	ldr	r2, [sp, #4]
 8008fc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fcc:	425a      	negs	r2, r3
 8008fce:	415a      	adcs	r2, r3
 8008fd0:	602a      	str	r2, [r5, #0]
 8008fd2:	e7ee      	b.n	8008fb2 <__swhatbuf_r+0x1e>
 8008fd4:	2340      	movs	r3, #64	; 0x40
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	b016      	add	sp, #88	; 0x58
 8008fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08008fe0 <__smakebuf_r>:
 8008fe0:	898b      	ldrh	r3, [r1, #12]
 8008fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fe4:	079d      	lsls	r5, r3, #30
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	d507      	bpl.n	8008ffc <__smakebuf_r+0x1c>
 8008fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	6123      	str	r3, [r4, #16]
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	6163      	str	r3, [r4, #20]
 8008ff8:	b002      	add	sp, #8
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
 8008ffc:	ab01      	add	r3, sp, #4
 8008ffe:	466a      	mov	r2, sp
 8009000:	f7ff ffc8 	bl	8008f94 <__swhatbuf_r>
 8009004:	9900      	ldr	r1, [sp, #0]
 8009006:	4605      	mov	r5, r0
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff f957 	bl	80082bc <_malloc_r>
 800900e:	b948      	cbnz	r0, 8009024 <__smakebuf_r+0x44>
 8009010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009014:	059a      	lsls	r2, r3, #22
 8009016:	d4ef      	bmi.n	8008ff8 <__smakebuf_r+0x18>
 8009018:	f023 0303 	bic.w	r3, r3, #3
 800901c:	f043 0302 	orr.w	r3, r3, #2
 8009020:	81a3      	strh	r3, [r4, #12]
 8009022:	e7e3      	b.n	8008fec <__smakebuf_r+0xc>
 8009024:	4b0d      	ldr	r3, [pc, #52]	; (800905c <__smakebuf_r+0x7c>)
 8009026:	62b3      	str	r3, [r6, #40]	; 0x28
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	6020      	str	r0, [r4, #0]
 800902c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009030:	81a3      	strh	r3, [r4, #12]
 8009032:	9b00      	ldr	r3, [sp, #0]
 8009034:	6163      	str	r3, [r4, #20]
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	6120      	str	r0, [r4, #16]
 800903a:	b15b      	cbz	r3, 8009054 <__smakebuf_r+0x74>
 800903c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009040:	4630      	mov	r0, r6
 8009042:	f000 f8d1 	bl	80091e8 <_isatty_r>
 8009046:	b128      	cbz	r0, 8009054 <__smakebuf_r+0x74>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f023 0303 	bic.w	r3, r3, #3
 800904e:	f043 0301 	orr.w	r3, r3, #1
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	89a0      	ldrh	r0, [r4, #12]
 8009056:	4305      	orrs	r5, r0
 8009058:	81a5      	strh	r5, [r4, #12]
 800905a:	e7cd      	b.n	8008ff8 <__smakebuf_r+0x18>
 800905c:	08008ded 	.word	0x08008ded

08009060 <_malloc_usable_size_r>:
 8009060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009064:	1f18      	subs	r0, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfbc      	itt	lt
 800906a:	580b      	ldrlt	r3, [r1, r0]
 800906c:	18c0      	addlt	r0, r0, r3
 800906e:	4770      	bx	lr

08009070 <_raise_r>:
 8009070:	291f      	cmp	r1, #31
 8009072:	b538      	push	{r3, r4, r5, lr}
 8009074:	4604      	mov	r4, r0
 8009076:	460d      	mov	r5, r1
 8009078:	d904      	bls.n	8009084 <_raise_r+0x14>
 800907a:	2316      	movs	r3, #22
 800907c:	6003      	str	r3, [r0, #0]
 800907e:	f04f 30ff 	mov.w	r0, #4294967295
 8009082:	bd38      	pop	{r3, r4, r5, pc}
 8009084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009086:	b112      	cbz	r2, 800908e <_raise_r+0x1e>
 8009088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800908c:	b94b      	cbnz	r3, 80090a2 <_raise_r+0x32>
 800908e:	4620      	mov	r0, r4
 8009090:	f000 f830 	bl	80090f4 <_getpid_r>
 8009094:	462a      	mov	r2, r5
 8009096:	4601      	mov	r1, r0
 8009098:	4620      	mov	r0, r4
 800909a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800909e:	f000 b817 	b.w	80090d0 <_kill_r>
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d00a      	beq.n	80090bc <_raise_r+0x4c>
 80090a6:	1c59      	adds	r1, r3, #1
 80090a8:	d103      	bne.n	80090b2 <_raise_r+0x42>
 80090aa:	2316      	movs	r3, #22
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	2001      	movs	r0, #1
 80090b0:	e7e7      	b.n	8009082 <_raise_r+0x12>
 80090b2:	2400      	movs	r4, #0
 80090b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090b8:	4628      	mov	r0, r5
 80090ba:	4798      	blx	r3
 80090bc:	2000      	movs	r0, #0
 80090be:	e7e0      	b.n	8009082 <_raise_r+0x12>

080090c0 <raise>:
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <raise+0xc>)
 80090c2:	4601      	mov	r1, r0
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	f7ff bfd3 	b.w	8009070 <_raise_r>
 80090ca:	bf00      	nop
 80090cc:	20000018 	.word	0x20000018

080090d0 <_kill_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d07      	ldr	r5, [pc, #28]	; (80090f0 <_kill_r+0x20>)
 80090d4:	2300      	movs	r3, #0
 80090d6:	4604      	mov	r4, r0
 80090d8:	4608      	mov	r0, r1
 80090da:	4611      	mov	r1, r2
 80090dc:	602b      	str	r3, [r5, #0]
 80090de:	f7f8 fb0a 	bl	80016f6 <_kill>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	d102      	bne.n	80090ec <_kill_r+0x1c>
 80090e6:	682b      	ldr	r3, [r5, #0]
 80090e8:	b103      	cbz	r3, 80090ec <_kill_r+0x1c>
 80090ea:	6023      	str	r3, [r4, #0]
 80090ec:	bd38      	pop	{r3, r4, r5, pc}
 80090ee:	bf00      	nop
 80090f0:	20000ba8 	.word	0x20000ba8

080090f4 <_getpid_r>:
 80090f4:	f7f8 baf7 	b.w	80016e6 <_getpid>

080090f8 <__sread>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	460c      	mov	r4, r1
 80090fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009100:	f000 f894 	bl	800922c <_read_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	bfab      	itete	ge
 8009108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800910a:	89a3      	ldrhlt	r3, [r4, #12]
 800910c:	181b      	addge	r3, r3, r0
 800910e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009112:	bfac      	ite	ge
 8009114:	6563      	strge	r3, [r4, #84]	; 0x54
 8009116:	81a3      	strhlt	r3, [r4, #12]
 8009118:	bd10      	pop	{r4, pc}

0800911a <__swrite>:
 800911a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911e:	461f      	mov	r7, r3
 8009120:	898b      	ldrh	r3, [r1, #12]
 8009122:	05db      	lsls	r3, r3, #23
 8009124:	4605      	mov	r5, r0
 8009126:	460c      	mov	r4, r1
 8009128:	4616      	mov	r6, r2
 800912a:	d505      	bpl.n	8009138 <__swrite+0x1e>
 800912c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009130:	2302      	movs	r3, #2
 8009132:	2200      	movs	r2, #0
 8009134:	f000 f868 	bl	8009208 <_lseek_r>
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800913e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	4632      	mov	r2, r6
 8009146:	463b      	mov	r3, r7
 8009148:	4628      	mov	r0, r5
 800914a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800914e:	f000 b817 	b.w	8009180 <_write_r>

08009152 <__sseek>:
 8009152:	b510      	push	{r4, lr}
 8009154:	460c      	mov	r4, r1
 8009156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800915a:	f000 f855 	bl	8009208 <_lseek_r>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	bf15      	itete	ne
 8009164:	6560      	strne	r0, [r4, #84]	; 0x54
 8009166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800916a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800916e:	81a3      	strheq	r3, [r4, #12]
 8009170:	bf18      	it	ne
 8009172:	81a3      	strhne	r3, [r4, #12]
 8009174:	bd10      	pop	{r4, pc}

08009176 <__sclose>:
 8009176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800917a:	f000 b813 	b.w	80091a4 <_close_r>
	...

08009180 <_write_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d07      	ldr	r5, [pc, #28]	; (80091a0 <_write_r+0x20>)
 8009184:	4604      	mov	r4, r0
 8009186:	4608      	mov	r0, r1
 8009188:	4611      	mov	r1, r2
 800918a:	2200      	movs	r2, #0
 800918c:	602a      	str	r2, [r5, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	f7f8 fae8 	bl	8001764 <_write>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_write_r+0x1e>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_write_r+0x1e>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	20000ba8 	.word	0x20000ba8

080091a4 <_close_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4d06      	ldr	r5, [pc, #24]	; (80091c0 <_close_r+0x1c>)
 80091a8:	2300      	movs	r3, #0
 80091aa:	4604      	mov	r4, r0
 80091ac:	4608      	mov	r0, r1
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	f7f8 faf4 	bl	800179c <_close>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_close_r+0x1a>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_close_r+0x1a>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	20000ba8 	.word	0x20000ba8

080091c4 <_fstat_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d07      	ldr	r5, [pc, #28]	; (80091e4 <_fstat_r+0x20>)
 80091c8:	2300      	movs	r3, #0
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	f7f8 faef 	bl	80017b4 <_fstat>
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	d102      	bne.n	80091e0 <_fstat_r+0x1c>
 80091da:	682b      	ldr	r3, [r5, #0]
 80091dc:	b103      	cbz	r3, 80091e0 <_fstat_r+0x1c>
 80091de:	6023      	str	r3, [r4, #0]
 80091e0:	bd38      	pop	{r3, r4, r5, pc}
 80091e2:	bf00      	nop
 80091e4:	20000ba8 	.word	0x20000ba8

080091e8 <_isatty_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d06      	ldr	r5, [pc, #24]	; (8009204 <_isatty_r+0x1c>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	f7f8 faee 	bl	80017d4 <_isatty>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d102      	bne.n	8009202 <_isatty_r+0x1a>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	b103      	cbz	r3, 8009202 <_isatty_r+0x1a>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	20000ba8 	.word	0x20000ba8

08009208 <_lseek_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4d07      	ldr	r5, [pc, #28]	; (8009228 <_lseek_r+0x20>)
 800920c:	4604      	mov	r4, r0
 800920e:	4608      	mov	r0, r1
 8009210:	4611      	mov	r1, r2
 8009212:	2200      	movs	r2, #0
 8009214:	602a      	str	r2, [r5, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	f7f8 fae7 	bl	80017ea <_lseek>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_lseek_r+0x1e>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_lseek_r+0x1e>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	20000ba8 	.word	0x20000ba8

0800922c <_read_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4d07      	ldr	r5, [pc, #28]	; (800924c <_read_r+0x20>)
 8009230:	4604      	mov	r4, r0
 8009232:	4608      	mov	r0, r1
 8009234:	4611      	mov	r1, r2
 8009236:	2200      	movs	r2, #0
 8009238:	602a      	str	r2, [r5, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f7f8 fa75 	bl	800172a <_read>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_read_r+0x1e>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_read_r+0x1e>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20000ba8 	.word	0x20000ba8

08009250 <_init>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	bf00      	nop
 8009254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009256:	bc08      	pop	{r3}
 8009258:	469e      	mov	lr, r3
 800925a:	4770      	bx	lr

0800925c <_fini>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	bf00      	nop
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr
