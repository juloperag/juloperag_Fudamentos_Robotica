
Control_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08009fc0  08009fc0  00019fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7e4  0800a7e4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7e4  0800a7e4  0001a7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7ec  0800a7ec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  200001e4  0800a9d8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c9c  0800a9d8  00020c9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004de7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000115d  00000000  00000000  00024ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  00026158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  000265c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f87  00000000  00000000  00026990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006888  00000000  00000000  00037917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000586ce  00000000  00000000  0003e19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009686d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002830  00000000  00000000  000968c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009fa4 	.word	0x08009fa4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08009fa4 	.word	0x08009fa4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	631a      	str	r2, [r3, #48]	; 0x30
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f003 f9e1 	bl	8004480 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f002 fd97 	bl	8003c30 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f003 f8ed 	bl	80042f4 <statusPolarityPWM>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fdbf 	bl	8003cb4 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001136:	f000 f84d 	bl	80011d4 <int_Hardware>
	//Activamos el SysTick
	//config_SysTick_us();
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <main+0x7c>)
 800113c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <main+0x7c>)
 8001142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800114a:	f000 f9d1 	bl	80014f0 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800114e:	2101      	movs	r1, #1
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <main+0x80>)
 8001152:	f002 fd6d 	bl	8003c30 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001156:	2101      	movs	r1, #1
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <main+0x84>)
 800115a:	f002 fd69 	bl	8003c30 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800115e:	2101      	movs	r1, #1
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <main+0x88>)
 8001162:	f002 fd65 	bl	8003c30 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001166:	2101      	movs	r1, #1
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <main+0x8c>)
 800116a:	f002 fd61 	bl	8003c30 <GPIO_writePin>
	int_Config_Motor();
 800116e:	f000 f9c9 	bl	8001504 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x90>)
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <main+0x94>)
 8001176:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x98>)
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <main+0x9c>)
 800117c:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <main+0xa0>)
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <main+0xa4>)
 8001182:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <main+0xa8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <main+0x76>
		{
			runCommand(bufferRecepcion);
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <main+0xac>)
 800118e:	f000 fc8f 	bl	8001ab0 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <main+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e7f4      	b.n	8001184 <main+0x60>
		}
		else
		{
			__NOP();
 800119a:	bf00      	nop
		if(commandComplete==1)
 800119c:	e7f2      	b.n	8001184 <main+0x60>
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	200002c0 	.word	0x200002c0
 80011a8:	20000334 	.word	0x20000334
 80011ac:	200002cc 	.word	0x200002cc
 80011b0:	20000340 	.word	0x20000340
 80011b4:	200003c4 	.word	0x200003c4
 80011b8:	200002e4 	.word	0x200002e4
 80011bc:	200003e0 	.word	0x200003e0
 80011c0:	40105fa7 	.word	0x40105fa7
 80011c4:	200003e4 	.word	0x200003e4
 80011c8:	400facee 	.word	0x400facee
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	200003ec 	.word	0x200003ec

080011d4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80011da:	4bab      	ldr	r3, [pc, #684]	; (8001488 <int_Hardware+0x2b4>)
 80011dc:	4aab      	ldr	r2, [pc, #684]	; (800148c <int_Hardware+0x2b8>)
 80011de:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80011e0:	4ba9      	ldr	r3, [pc, #676]	; (8001488 <int_Hardware+0x2b4>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	48a4      	ldr	r0, [pc, #656]	; (8001488 <int_Hardware+0x2b4>)
 80011f6:	f002 fbcf 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80011fa:	48a3      	ldr	r0, [pc, #652]	; (8001488 <int_Hardware+0x2b4>)
 80011fc:	f002 fbee 	bl	80039dc <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <int_Hardware+0x2bc>)
 8001202:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <int_Hardware+0x2c0>)
 8001204:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001206:	4ba2      	ldr	r3, [pc, #648]	; (8001490 <int_Hardware+0x2bc>)
 8001208:	2205      	movs	r2, #5
 800120a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800120c:	2300      	movs	r3, #0
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	489d      	ldr	r0, [pc, #628]	; (8001490 <int_Hardware+0x2bc>)
 800121c:	f002 fbbc 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001220:	489b      	ldr	r0, [pc, #620]	; (8001490 <int_Hardware+0x2bc>)
 8001222:	f002 fbdb 	bl	80039dc <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001226:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <int_Hardware+0x2c4>)
 8001228:	4a9a      	ldr	r2, [pc, #616]	; (8001494 <int_Hardware+0x2c0>)
 800122a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <int_Hardware+0x2c4>)
 800122e:	2209      	movs	r2, #9
 8001230:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001232:	2307      	movs	r3, #7
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4895      	ldr	r0, [pc, #596]	; (8001498 <int_Hardware+0x2c4>)
 8001242:	f002 fba9 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001246:	4894      	ldr	r0, [pc, #592]	; (8001498 <int_Hardware+0x2c4>)
 8001248:	f002 fbc8 	bl	80039dc <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <int_Hardware+0x2c8>)
 800124e:	4a91      	ldr	r2, [pc, #580]	; (8001494 <int_Hardware+0x2c0>)
 8001250:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <int_Hardware+0x2c8>)
 8001254:	220a      	movs	r2, #10
 8001256:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001258:	2307      	movs	r3, #7
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2300      	movs	r3, #0
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	488d      	ldr	r0, [pc, #564]	; (800149c <int_Hardware+0x2c8>)
 8001268:	f002 fb96 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800126c:	488b      	ldr	r0, [pc, #556]	; (800149c <int_Hardware+0x2c8>)
 800126e:	f002 fbb5 	bl	80039dc <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <int_Hardware+0x2cc>)
 8001274:	4a87      	ldr	r2, [pc, #540]	; (8001494 <int_Hardware+0x2c0>)
 8001276:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <int_Hardware+0x2cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800127e:	2302      	movs	r3, #2
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	4884      	ldr	r0, [pc, #528]	; (80014a0 <int_Hardware+0x2cc>)
 800128e:	f002 fb83 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001292:	4883      	ldr	r0, [pc, #524]	; (80014a0 <int_Hardware+0x2cc>)
 8001294:	f002 fba2 	bl	80039dc <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001298:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <int_Hardware+0x2d0>)
 800129a:	4a7c      	ldr	r2, [pc, #496]	; (800148c <int_Hardware+0x2b8>)
 800129c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <int_Hardware+0x2d0>)
 80012a0:	220c      	movs	r2, #12
 80012a2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	487c      	ldr	r0, [pc, #496]	; (80014a4 <int_Hardware+0x2d0>)
 80012b4:	f002 fb70 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80012b8:	487a      	ldr	r0, [pc, #488]	; (80014a4 <int_Hardware+0x2d0>)
 80012ba:	f002 fb8f 	bl	80039dc <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <int_Hardware+0x2d4>)
 80012c0:	4a72      	ldr	r2, [pc, #456]	; (800148c <int_Hardware+0x2b8>)
 80012c2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <int_Hardware+0x2d4>)
 80012c6:	220a      	movs	r2, #10
 80012c8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <int_Hardware+0x2d4>)
 80012da:	f002 fb5d 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80012de:	4872      	ldr	r0, [pc, #456]	; (80014a8 <int_Hardware+0x2d4>)
 80012e0:	f002 fb7c 	bl	80039dc <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80012e4:	4b71      	ldr	r3, [pc, #452]	; (80014ac <int_Hardware+0x2d8>)
 80012e6:	4a6b      	ldr	r2, [pc, #428]	; (8001494 <int_Hardware+0x2c0>)
 80012e8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80012ea:	4b70      	ldr	r3, [pc, #448]	; (80014ac <int_Hardware+0x2d8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80012f0:	2302      	movs	r3, #2
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	486b      	ldr	r0, [pc, #428]	; (80014ac <int_Hardware+0x2d8>)
 8001300:	f002 fb4a 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001304:	4869      	ldr	r0, [pc, #420]	; (80014ac <int_Hardware+0x2d8>)
 8001306:	f002 fb69 	bl	80039dc <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 800130a:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <int_Hardware+0x2dc>)
 800130c:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <int_Hardware+0x2e0>)
 800130e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001310:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <int_Hardware+0x2dc>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001316:	2300      	movs	r3, #0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4862      	ldr	r0, [pc, #392]	; (80014b0 <int_Hardware+0x2dc>)
 8001326:	f002 fb37 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800132a:	4861      	ldr	r0, [pc, #388]	; (80014b0 <int_Hardware+0x2dc>)
 800132c:	f002 fb56 	bl	80039dc <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001330:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <int_Hardware+0x2e4>)
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <int_Hardware+0x2b8>)
 8001334:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <int_Hardware+0x2e4>)
 8001338:	220b      	movs	r2, #11
 800133a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	2101      	movs	r1, #1
 800134a:	485b      	ldr	r0, [pc, #364]	; (80014b8 <int_Hardware+0x2e4>)
 800134c:	f002 fb24 	bl	8003998 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001350:	4859      	ldr	r0, [pc, #356]	; (80014b8 <int_Hardware+0x2e4>)
 8001352:	f002 fb43 	bl	80039dc <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <int_Hardware+0x2e8>)
 8001358:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <int_Hardware+0x2ec>)
 800135a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <int_Hardware+0x2e8>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <int_Hardware+0x2e8>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001368:	4b54      	ldr	r3, [pc, #336]	; (80014bc <int_Hardware+0x2e8>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <int_Hardware+0x2e8>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001374:	4b51      	ldr	r3, [pc, #324]	; (80014bc <int_Hardware+0x2e8>)
 8001376:	2201      	movs	r2, #1
 8001378:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800137a:	4b50      	ldr	r3, [pc, #320]	; (80014bc <int_Hardware+0x2e8>)
 800137c:	2201      	movs	r2, #1
 800137e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8001380:	484e      	ldr	r0, [pc, #312]	; (80014bc <int_Hardware+0x2e8>)
 8001382:	f003 f8c1 	bl	8004508 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001386:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <int_Hardware+0x2f0>)
 8001388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138c:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <int_Hardware+0x2f0>)
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <int_Hardware+0x2f0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800139c:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <int_Hardware+0x2f0>)
 800139e:	22fa      	movs	r2, #250	; 0xfa
 80013a0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <int_Hardware+0x2f0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80013a8:	4846      	ldr	r0, [pc, #280]	; (80014c4 <int_Hardware+0x2f0>)
 80013aa:	f001 f8d1 	bl	8002550 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <int_Hardware+0x2f4>)
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <int_Hardware+0x2f8>)
 80013b2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <int_Hardware+0x2f4>)
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <int_Hardware+0x2f4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <int_Hardware+0x2f4>)
 80013c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c8:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <int_Hardware+0x2f4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 80013d0:	483d      	ldr	r0, [pc, #244]	; (80014c8 <int_Hardware+0x2f4>)
 80013d2:	f001 f8bd 	bl	8002550 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <int_Hardware+0x2fc>)
 80013d8:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <int_Hardware+0x300>)
 80013da:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <int_Hardware+0x2fc>)
 80013de:	220a      	movs	r2, #10
 80013e0:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <int_Hardware+0x2fc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <int_Hardware+0x2fc>)
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <int_Hardware+0x2fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80013f4:	4836      	ldr	r0, [pc, #216]	; (80014d0 <int_Hardware+0x2fc>)
 80013f6:	f001 f8ab 	bl	8002550 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <int_Hardware+0x304>)
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <int_Hardware+0x2b8>)
 80013fe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <int_Hardware+0x304>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <int_Hardware+0x308>)
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <int_Hardware+0x304>)
 800140a:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <int_Hardware+0x308>)
 800140e:	2202      	movs	r2, #2
 8001410:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <int_Hardware+0x308>)
 8001414:	f001 fa20 	bl	8002858 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <int_Hardware+0x30c>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <int_Hardware+0x2b8>)
 800141c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <int_Hardware+0x30c>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <int_Hardware+0x310>)
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <int_Hardware+0x30c>)
 8001428:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <int_Hardware+0x310>)
 800142c:	2202      	movs	r2, #2
 800142e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <int_Hardware+0x310>)
 8001432:	f001 fa11 	bl	8002858 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <int_Hardware+0x314>)
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <int_Hardware+0x300>)
 800143a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <int_Hardware+0x314>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <int_Hardware+0x314>)
 8001444:	220a      	movs	r2, #10
 8001446:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <int_Hardware+0x314>)
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <int_Hardware+0x314>)
 8001450:	f002 fd5e 	bl	8003f10 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001454:	2101      	movs	r1, #1
 8001456:	4824      	ldr	r0, [pc, #144]	; (80014e8 <int_Hardware+0x314>)
 8001458:	f002 feba 	bl	80041d0 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <int_Hardware+0x318>)
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <int_Hardware+0x300>)
 8001460:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <int_Hardware+0x318>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <int_Hardware+0x318>)
 800146a:	220a      	movs	r2, #10
 800146c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <int_Hardware+0x318>)
 8001470:	2201      	movs	r2, #1
 8001472:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <int_Hardware+0x318>)
 8001476:	f002 fd4b 	bl	8003f10 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 800147a:	2101      	movs	r1, #1
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <int_Hardware+0x318>)
 800147e:	f002 fea7 	bl	80041d0 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000021c 	.word	0x2000021c
 800148c:	40020800 	.word	0x40020800
 8001490:	20000200 	.word	0x20000200
 8001494:	40020000 	.word	0x40020000
 8001498:	20000250 	.word	0x20000250
 800149c:	2000025c 	.word	0x2000025c
 80014a0:	200002b4 	.word	0x200002b4
 80014a4:	200002c0 	.word	0x200002c0
 80014a8:	200002cc 	.word	0x200002cc
 80014ac:	20000328 	.word	0x20000328
 80014b0:	20000334 	.word	0x20000334
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	20000340 	.word	0x20000340
 80014bc:	20000268 	.word	0x20000268
 80014c0:	40011000 	.word	0x40011000
 80014c4:	2000020c 	.word	0x2000020c
 80014c8:	200003ac 	.word	0x200003ac
 80014cc:	40000400 	.word	0x40000400
 80014d0:	2000039c 	.word	0x2000039c
 80014d4:	40000c00 	.word	0x40000c00
 80014d8:	20000228 	.word	0x20000228
 80014dc:	20000234 	.word	0x20000234
 80014e0:	2000023c 	.word	0x2000023c
 80014e4:	20000248 	.word	0x20000248
 80014e8:	200002d8 	.word	0x200002d8
 80014ec:	2000034c 	.word	0x2000034c

080014f0 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 fc8f 	bl	8003e18 <configMCO2>
	configMCO2PRE(4);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f002 fca8 	bl	8003e50 <configMCO2PRE>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 800150a:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <int_Config_Motor+0x100>)
 800150c:	4a3e      	ldr	r2, [pc, #248]	; (8001608 <int_Config_Motor+0x104>)
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_R.configMotor.frecuency = &value_period;
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <int_Config_Motor+0x100>)
 8001512:	4a3e      	ldr	r2, [pc, #248]	; (800160c <int_Config_Motor+0x108>)
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
	handler_Motor_R.configMotor.dir = SET;
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <int_Config_Motor+0x100>)
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <int_Config_Motor+0x100>)
 8001520:	4a3b      	ldr	r2, [pc, #236]	; (8001610 <int_Config_Motor+0x10c>)
 8001522:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <int_Config_Motor+0x100>)
 8001526:	4a3b      	ldr	r2, [pc, #236]	; (8001614 <int_Config_Motor+0x110>)
 8001528:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <int_Config_Motor+0x100>)
 800152c:	4a3a      	ldr	r2, [pc, #232]	; (8001618 <int_Config_Motor+0x114>)
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_R.parametersMotor.timeCount = 1;
 8001530:	4b34      	ldr	r3, [pc, #208]	; (8001604 <int_Config_Motor+0x100>)
 8001532:	2201      	movs	r2, #1
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_R.parametersMotor.backCount = 0;
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <int_Config_Motor+0x100>)
 8001538:	2200      	movs	r2, #0
 800153a:	845a      	strh	r2, [r3, #34]	; 0x22
	handler_Motor_R.parametersMotor.e = handler_Motor_R.parametersMotor.e_1 = handler_Motor_R.parametersMotor.e_2 = 0;
 800153c:	4b31      	ldr	r3, [pc, #196]	; (8001604 <int_Config_Motor+0x100>)
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	4b2f      	ldr	r3, [pc, #188]	; (8001604 <int_Config_Motor+0x100>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4a2e      	ldr	r2, [pc, #184]	; (8001604 <int_Config_Motor+0x100>)
 800154a:	60d3      	str	r3, [r2, #12]
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <int_Config_Motor+0x100>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <int_Config_Motor+0x100>)
 8001552:	6093      	str	r3, [r2, #8]
	handler_Motor_R.parametersMotor.u = handler_Motor_R.parametersMotor.u_1 = 0;
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <int_Config_Motor+0x100>)
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <int_Config_Motor+0x100>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a28      	ldr	r2, [pc, #160]	; (8001604 <int_Config_Motor+0x100>)
 8001562:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	float theta=25+Ts/2;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <int_Config_Motor+0x118>)
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800156e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001572:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001576:	ee77 7a87 	vadd.f32	s15, s15, s14
 800157a:	edc7 7a01 	vstr	s15, [r7, #4]
	constains_calculator(&handler_Motor_R, 2.2, 50, theta);   //k,tau,theta
 800157e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001582:	eddf 0a27 	vldr	s1, [pc, #156]	; 8001620 <int_Config_Motor+0x11c>
 8001586:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8001624 <int_Config_Motor+0x120>
 800158a:	481e      	ldr	r0, [pc, #120]	; (8001604 <int_Config_Motor+0x100>)
 800158c:	f000 fde2 	bl	8002154 <constains_calculator>

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <int_Config_Motor+0x124>)
 8001592:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <int_Config_Motor+0x104>)
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
	handler_Motor_L.configMotor.frecuency = &value_period;
 8001596:	4b24      	ldr	r3, [pc, #144]	; (8001628 <int_Config_Motor+0x124>)
 8001598:	4a1c      	ldr	r2, [pc, #112]	; (800160c <int_Config_Motor+0x108>)
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
	handler_Motor_L.configMotor.dir = SET;
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <int_Config_Motor+0x124>)
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <int_Config_Motor+0x124>)
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <int_Config_Motor+0x128>)
 80015a8:	63da      	str	r2, [r3, #60]	; 0x3c
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <int_Config_Motor+0x124>)
 80015ac:	4a20      	ldr	r2, [pc, #128]	; (8001630 <int_Config_Motor+0x12c>)
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <int_Config_Motor+0x124>)
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <int_Config_Motor+0x130>)
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
	//definicion de parametros
	handler_Motor_L.parametersMotor.timeCount = 1;
 80015b6:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <int_Config_Motor+0x124>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.backCount = 0;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <int_Config_Motor+0x124>)
 80015be:	2200      	movs	r2, #0
 80015c0:	845a      	strh	r2, [r3, #34]	; 0x22
	handler_Motor_L.parametersMotor.e = handler_Motor_L.parametersMotor.e_1 = handler_Motor_L.parametersMotor.e_2 = 0;
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <int_Config_Motor+0x124>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <int_Config_Motor+0x124>)
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	4a16      	ldr	r2, [pc, #88]	; (8001628 <int_Config_Motor+0x124>)
 80015d0:	60d3      	str	r3, [r2, #12]
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <int_Config_Motor+0x124>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <int_Config_Motor+0x124>)
 80015d8:	6093      	str	r3, [r2, #8]
	handler_Motor_L.parametersMotor.u = handler_Motor_L.parametersMotor.u_1 = 0;
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <int_Config_Motor+0x124>)
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <int_Config_Motor+0x124>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <int_Config_Motor+0x124>)
 80015e8:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&handler_Motor_L, 2.2, 50, theta);   //k,tau,theta
 80015ea:	ed97 1a01 	vldr	s2, [r7, #4]
 80015ee:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001620 <int_Config_Motor+0x11c>
 80015f2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001624 <int_Config_Motor+0x120>
 80015f6:	480c      	ldr	r0, [pc, #48]	; (8001628 <int_Config_Motor+0x124>)
 80015f8:	f000 fdac 	bl	8002154 <constains_calculator>

};
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200002e4 	.word	0x200002e4
 8001608:	41a00000 	.word	0x41a00000
 800160c:	20000002 	.word	0x20000002
 8001610:	200002cc 	.word	0x200002cc
 8001614:	200002c0 	.word	0x200002c0
 8001618:	200002d8 	.word	0x200002d8
 800161c:	20000004 	.word	0x20000004
 8001620:	42480000 	.word	0x42480000
 8001624:	400ccccd 	.word	0x400ccccd
 8001628:	20000358 	.word	0x20000358
 800162c:	20000340 	.word	0x20000340
 8001630:	20000334 	.word	0x20000334
 8001634:	2000034c 	.word	0x2000034c

08001638 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <BasicTimer2_Callback+0x10>)
 800163e:	f002 fb22 	bl	8003c86 <GPIOxTooglePin>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000200 	.word	0x20000200
 800164c:	00000000 	.word	0x00000000

08001650 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b085      	sub	sp, #20
 8001654:	af04      	add	r7, sp, #16
	if(flag_motor==1)
 8001656:	4b94      	ldr	r3, [pc, #592]	; (80018a8 <BasicTimer3_Callback+0x258>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	f040 8099 	bne.w	8001792 <BasicTimer3_Callback+0x142>
	{
		//Calculamos la velocidad
		//velocity_L = (cm_L*1000)/handler_Motor_L.parametersMotor.timeCount;   //[m/s]
		//velocity_R = (cm_R*1000)/handler_Motor_R.parametersMotor.timeCount;   //[m/s]
		velocity_L = (cm_L*handler_Motor_L.parametersMotor.count)/periodo_TIMER_Count;   //[m/s]
 8001660:	4b92      	ldr	r3, [pc, #584]	; (80018ac <BasicTimer3_Callback+0x25c>)
 8001662:	8c1b      	ldrh	r3, [r3, #32]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166c:	4b90      	ldr	r3, [pc, #576]	; (80018b0 <BasicTimer3_Callback+0x260>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001676:	4b8f      	ldr	r3, [pc, #572]	; (80018b4 <BasicTimer3_Callback+0x264>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001686:	4b8c      	ldr	r3, [pc, #560]	; (80018b8 <BasicTimer3_Callback+0x268>)
 8001688:	edc3 7a00 	vstr	s15, [r3]
		velocity_R = (cm_R*handler_Motor_R.parametersMotor.count)/periodo_TIMER_Count;   //[m/s]
 800168c:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <BasicTimer3_Callback+0x26c>)
 800168e:	8c1b      	ldrh	r3, [r3, #32]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	4b89      	ldr	r3, [pc, #548]	; (80018c0 <BasicTimer3_Callback+0x270>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee67 6a27 	vmul.f32	s13, s14, s15
 80016a2:	4b84      	ldr	r3, [pc, #528]	; (80018b4 <BasicTimer3_Callback+0x264>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b2:	4b84      	ldr	r3, [pc, #528]	; (80018c4 <BasicTimer3_Callback+0x274>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]
		//Convertirmos los valores de velocidad a porcentaje
		//Falla porVel_L = 546.4481*velocity_L-36.5573;
		//Regular porVel_R = 563*velocity_R + -26;
		//Estable porVel_R = 591.9159*velocity_R-36.5313;
		//porVel_L = 17.8 + -185*(velocity_L) + 3973*pow(velocity_L,2) + -6556*pow(velocity_L,3);
		porVel_L = 600*velocity_L - 36.53;
 80016b8:	4b7f      	ldr	r3, [pc, #508]	; (80018b8 <BasicTimer3_Callback+0x268>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80018c8 <BasicTimer3_Callback+0x278>
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c6:	ee17 0a90 	vmov	r0, s15
 80016ca:	f7fe ff55 	bl	8000578 <__aeabi_f2d>
 80016ce:	a374      	add	r3, pc, #464	; (adr r3, 80018a0 <BasicTimer3_Callback+0x250>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe fdf0 	bl	80002b8 <__aeabi_dsub>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff fa9a 	bl	8000c18 <__aeabi_d2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4a79      	ldr	r2, [pc, #484]	; (80018cc <BasicTimer3_Callback+0x27c>)
 80016e8:	6013      	str	r3, [r2, #0]
		porVel_R = 600*velocity_R - 36.53;
 80016ea:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <BasicTimer3_Callback+0x274>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80018c8 <BasicTimer3_Callback+0x278>
 80016f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f8:	ee17 0a90 	vmov	r0, s15
 80016fc:	f7fe ff3c 	bl	8000578 <__aeabi_f2d>
 8001700:	a367      	add	r3, pc, #412	; (adr r3, 80018a0 <BasicTimer3_Callback+0x250>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe fdd7 	bl	80002b8 <__aeabi_dsub>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fa81 	bl	8000c18 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	4a6d      	ldr	r2, [pc, #436]	; (80018d0 <BasicTimer3_Callback+0x280>)
 800171a:	6013      	str	r3, [r2, #0]
		//Aumentamos el contador de tiempo
		count_time++;    			   //Tiempo en xperiodo_TIMER_Count ms
 800171c:	4b6d      	ldr	r3, [pc, #436]	; (80018d4 <BasicTimer3_Callback+0x284>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <BasicTimer3_Callback+0x284>)
 8001726:	801a      	strh	r2, [r3, #0]
		//Convertimos el valor y imprimemos
		sprintf(bufferMsg,"%u\t%#.4f\t%#.3f\n", count_time, velocity_L , velocity_R);
 8001728:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <BasicTimer3_Callback+0x284>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	461e      	mov	r6, r3
 800172e:	4b62      	ldr	r3, [pc, #392]	; (80018b8 <BasicTimer3_Callback+0x268>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff20 	bl	8000578 <__aeabi_f2d>
 8001738:	4604      	mov	r4, r0
 800173a:	460d      	mov	r5, r1
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <BasicTimer3_Callback+0x274>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe ff19 	bl	8000578 <__aeabi_f2d>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800174e:	e9cd 4500 	strd	r4, r5, [sp]
 8001752:	4632      	mov	r2, r6
 8001754:	4960      	ldr	r1, [pc, #384]	; (80018d8 <BasicTimer3_Callback+0x288>)
 8001756:	4861      	ldr	r0, [pc, #388]	; (80018dc <BasicTimer3_Callback+0x28c>)
 8001758:	f004 f9fc 	bl	8005b54 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 800175c:	495f      	ldr	r1, [pc, #380]	; (80018dc <BasicTimer3_Callback+0x28c>)
 800175e:	4860      	ldr	r0, [pc, #384]	; (80018e0 <BasicTimer3_Callback+0x290>)
 8001760:	f003 f93e 	bl	80049e0 <writeMsgForTXE>
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
 8001764:	4b55      	ldr	r3, [pc, #340]	; (80018bc <BasicTimer3_Callback+0x26c>)
 8001766:	2200      	movs	r2, #0
 8001768:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 800176a:	4b50      	ldr	r3, [pc, #320]	; (80018ac <BasicTimer3_Callback+0x25c>)
 800176c:	2200      	movs	r2, #0
 800176e:	841a      	strh	r2, [r3, #32]
		//Aplicamos el PID
		PID(&handler_Motor_L, porVel_L);
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <BasicTimer3_Callback+0x27c>)
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	484c      	ldr	r0, [pc, #304]	; (80018ac <BasicTimer3_Callback+0x25c>)
 800177c:	f000 fb92 	bl	8001ea4 <PID>
		PID(&handler_Motor_R, porVel_R);
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <BasicTimer3_Callback+0x280>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	484c      	ldr	r0, [pc, #304]	; (80018bc <BasicTimer3_Callback+0x26c>)
 800178c:	f000 fb8a 	bl	8001ea4 <PID>
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
		handler_Motor_L.parametersMotor.count = 0;
	}

}
 8001790:	e080      	b.n	8001894 <BasicTimer3_Callback+0x244>
	else if(flag_motor==3)
 8001792:	4b45      	ldr	r3, [pc, #276]	; (80018a8 <BasicTimer3_Callback+0x258>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d120      	bne.n	80017dc <BasicTimer3_Callback+0x18c>
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 800179a:	4b4e      	ldr	r3, [pc, #312]	; (80018d4 <BasicTimer3_Callback+0x284>)
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <BasicTimer3_Callback+0x264>)
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <BasicTimer3_Callback+0x284>)
 80017a8:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 80017aa:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <BasicTimer3_Callback+0x284>)
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <BasicTimer3_Callback+0x26c>)
 80017b2:	8c1b      	ldrh	r3, [r3, #32]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4b3d      	ldr	r3, [pc, #244]	; (80018ac <BasicTimer3_Callback+0x25c>)
 80017b8:	8c1b      	ldrh	r3, [r3, #32]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	460b      	mov	r3, r1
 80017be:	4949      	ldr	r1, [pc, #292]	; (80018e4 <BasicTimer3_Callback+0x294>)
 80017c0:	4846      	ldr	r0, [pc, #280]	; (80018dc <BasicTimer3_Callback+0x28c>)
 80017c2:	f004 f9c7 	bl	8005b54 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80017c6:	4945      	ldr	r1, [pc, #276]	; (80018dc <BasicTimer3_Callback+0x28c>)
 80017c8:	4845      	ldr	r0, [pc, #276]	; (80018e0 <BasicTimer3_Callback+0x290>)
 80017ca:	f003 f909 	bl	80049e0 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <BasicTimer3_Callback+0x26c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 80017d4:	4b35      	ldr	r3, [pc, #212]	; (80018ac <BasicTimer3_Callback+0x25c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	841a      	strh	r2, [r3, #32]
}
 80017da:	e05b      	b.n	8001894 <BasicTimer3_Callback+0x244>
	else if(flag_motor==4)
 80017dc:	4b32      	ldr	r3, [pc, #200]	; (80018a8 <BasicTimer3_Callback+0x258>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d157      	bne.n	8001894 <BasicTimer3_Callback+0x244>
		velocity_L = (cm_L*handler_Motor_L.parametersMotor.count)/periodo_TIMER_Count;   //[m/s]
 80017e4:	4b31      	ldr	r3, [pc, #196]	; (80018ac <BasicTimer3_Callback+0x25c>)
 80017e6:	8c1b      	ldrh	r3, [r3, #32]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f0:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <BasicTimer3_Callback+0x260>)
 80017f2:	edd3 7a00 	vldr	s15, [r3]
 80017f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <BasicTimer3_Callback+0x264>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <BasicTimer3_Callback+0x268>)
 800180c:	edc3 7a00 	vstr	s15, [r3]
		velocity_R = (cm_R*handler_Motor_R.parametersMotor.count)/periodo_TIMER_Count;   //[m/s]
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <BasicTimer3_Callback+0x26c>)
 8001812:	8c1b      	ldrh	r3, [r3, #32]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <BasicTimer3_Callback+0x270>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001826:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <BasicTimer3_Callback+0x264>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <BasicTimer3_Callback+0x274>)
 8001838:	edc3 7a00 	vstr	s15, [r3]
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <BasicTimer3_Callback+0x284>)
 800183e:	881a      	ldrh	r2, [r3, #0]
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <BasicTimer3_Callback+0x264>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	4413      	add	r3, r2
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <BasicTimer3_Callback+0x284>)
 800184a:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, velocity_L , velocity_R);
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <BasicTimer3_Callback+0x284>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	461e      	mov	r6, r3
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <BasicTimer3_Callback+0x268>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe8e 	bl	8000578 <__aeabi_f2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <BasicTimer3_Callback+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe87 	bl	8000578 <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001872:	e9cd 4500 	strd	r4, r5, [sp]
 8001876:	4632      	mov	r2, r6
 8001878:	491b      	ldr	r1, [pc, #108]	; (80018e8 <BasicTimer3_Callback+0x298>)
 800187a:	4818      	ldr	r0, [pc, #96]	; (80018dc <BasicTimer3_Callback+0x28c>)
 800187c:	f004 f96a 	bl	8005b54 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <BasicTimer3_Callback+0x28c>)
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <BasicTimer3_Callback+0x290>)
 8001884:	f003 f8ac 	bl	80049e0 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <BasicTimer3_Callback+0x26c>)
 800188a:	2200      	movs	r2, #0
 800188c:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <BasicTimer3_Callback+0x25c>)
 8001890:	2200      	movs	r2, #0
 8001892:	841a      	strh	r2, [r3, #32]
}
 8001894:	bf00      	nop
 8001896:	3704      	adds	r7, #4
 8001898:	46bd      	mov	sp, r7
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	0a3d70a4 	.word	0x0a3d70a4
 80018a4:	404243d7 	.word	0x404243d7
 80018a8:	200003c8 	.word	0x200003c8
 80018ac:	20000358 	.word	0x20000358
 80018b0:	200003e0 	.word	0x200003e0
 80018b4:	20000008 	.word	0x20000008
 80018b8:	200003d0 	.word	0x200003d0
 80018bc:	200002e4 	.word	0x200002e4
 80018c0:	200003e4 	.word	0x200003e4
 80018c4:	200003d4 	.word	0x200003d4
 80018c8:	44160000 	.word	0x44160000
 80018cc:	200003d8 	.word	0x200003d8
 80018d0:	200003dc 	.word	0x200003dc
 80018d4:	200003ca 	.word	0x200003ca
 80018d8:	08009fc0 	.word	0x08009fc0
 80018dc:	20000274 	.word	0x20000274
 80018e0:	20000268 	.word	0x20000268
 80018e4:	08009fd0 	.word	0x08009fd0
 80018e8:	08009fdc 	.word	0x08009fdc

080018ec <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 80018f0:	f003 f8b4 	bl	8004a5c <getRxData>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <BasicUSART1_Callback+0x18>)
 80018fa:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 80018fc:	f000 f8a8 	bl	8001a50 <recepcionCommand>
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000000 	.word	0x20000000

08001908 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 800190c:	4b20      	ldr	r3, [pc, #128]	; (8001990 <callback_extInt1+0x88>)
 800190e:	8c1b      	ldrh	r3, [r3, #32]
 8001910:	3301      	adds	r3, #1
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <callback_extInt1+0x88>)
 8001916:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <callback_extInt1+0x88>)
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	3301      	adds	r3, #1
 800191e:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <callback_extInt1+0x88>)
 8001920:	6293      	str	r3, [r2, #40]	; 0x28
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_R.parametersMotor.timeCount = timeNow-timeBackR;
//	timeBackR = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <callback_extInt1+0x8c>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d112      	bne.n	8001950 <callback_extInt1+0x48>
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <callback_extInt1+0x90>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10e      	bne.n	8001950 <callback_extInt1+0x48>
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <callback_extInt1+0x88>)
 8001934:	8c1a      	ldrh	r2, [r3, #32]
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <callback_extInt1+0x94>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d908      	bls.n	8001950 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 800193e:	2000      	movs	r0, #0
 8001940:	f000 fb3a 	bl	8001fb8 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <callback_extInt1+0x98>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fbbc 	bl	80010c6 <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 800194e:	e01d      	b.n	800198c <callback_extInt1+0x84>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8001950:	4b10      	ldr	r3, [pc, #64]	; (8001994 <callback_extInt1+0x8c>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d119      	bne.n	800198c <callback_extInt1+0x84>
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <callback_extInt1+0x9c>)
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <callback_extInt1+0x88>)
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <callback_extInt1+0xa0>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	d400      	bmi.n	8001986 <callback_extInt1+0x7e>
}
 8001984:	e002      	b.n	800198c <callback_extInt1+0x84>
		status_motor(RESET);
 8001986:	2000      	movs	r0, #0
 8001988:	f000 fb16 	bl	8001fb8 <status_motor>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200002e4 	.word	0x200002e4
 8001994:	200003c8 	.word	0x200003c8
 8001998:	200003c9 	.word	0x200003c9
 800199c:	200003cc 	.word	0x200003cc
 80019a0:	200003c4 	.word	0x200003c4
 80019a4:	200003bc 	.word	0x200003bc
 80019a8:	200003e4 	.word	0x200003e4

080019ac <callback_extInt3>:
void callback_extInt3(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <callback_extInt3+0x88>)
 80019b2:	8c1b      	ldrh	r3, [r3, #32]
 80019b4:	3301      	adds	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <callback_extInt3+0x88>)
 80019ba:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <callback_extInt3+0x88>)
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <callback_extInt3+0x88>)
 80019c4:	6293      	str	r3, [r2, #40]	; 0x28
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_L.parametersMotor.timeCount = timeNow-timeBackL;
//	timeBackL = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <callback_extInt3+0x8c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d112      	bne.n	80019f4 <callback_extInt3+0x48>
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <callback_extInt3+0x90>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d10e      	bne.n	80019f4 <callback_extInt3+0x48>
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <callback_extInt3+0x88>)
 80019d8:	8c1a      	ldrh	r2, [r3, #32]
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <callback_extInt3+0x94>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d908      	bls.n	80019f4 <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 fae8 	bl	8001fb8 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <callback_extInt3+0x98>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fb6a 	bl	80010c6 <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 80019f2:	e01d      	b.n	8001a30 <callback_extInt3+0x84>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 80019f4:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <callback_extInt3+0x8c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d119      	bne.n	8001a30 <callback_extInt3+0x84>
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <callback_extInt3+0x9c>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <callback_extInt3+0x88>)
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a14:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <callback_extInt3+0xa0>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	d400      	bmi.n	8001a2a <callback_extInt3+0x7e>
}
 8001a28:	e002      	b.n	8001a30 <callback_extInt3+0x84>
		status_motor(RESET);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 fac4 	bl	8001fb8 <status_motor>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000358 	.word	0x20000358
 8001a38:	200003c8 	.word	0x200003c8
 8001a3c:	200003c9 	.word	0x200003c9
 8001a40:	200003cc 	.word	0x200003cc
 8001a44:	200003c4 	.word	0x200003c4
 8001a48:	200003bc 	.word	0x200003bc
 8001a4c:	200003e0 	.word	0x200003e0

08001a50 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <recepcionCommand+0x4c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b40      	cmp	r3, #64	; 0x40
 8001a5a:	d10c      	bne.n	8001a76 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8001a5c:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <recepcionCommand+0x50>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <recepcionCommand+0x54>)
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <recepcionCommand+0x58>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <recepcionCommand+0x50>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8001a74:	e00c      	b.n	8001a90 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <recepcionCommand+0x50>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <recepcionCommand+0x4c>)
 8001a7e:	7819      	ldrb	r1, [r3, #0]
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <recepcionCommand+0x54>)
 8001a82:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <recepcionCommand+0x50>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <recepcionCommand+0x50>)
 8001a8e:	701a      	strb	r2, [r3, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	200003e8 	.word	0x200003e8
 8001aa4:	200003ec 	.word	0x200003ec
 8001aa8:	2000000c 	.word	0x2000000c
 8001aac:	00000000 	.word	0x00000000

08001ab0 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b09b      	sub	sp, #108	; 0x6c
 8001ab4:	af04      	add	r7, sp, #16
 8001ab6:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	223c      	movs	r2, #60	; 0x3c
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 f9bd 	bl	8004e44 <memset>
	int firtsParameter = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 8001ada:	f107 0114 	add.w	r1, r7, #20
 8001ade:	f107 0218 	add.w	r2, r7, #24
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	9302      	str	r3, [sp, #8]
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	460b      	mov	r3, r1
 8001af6:	499c      	ldr	r1, [pc, #624]	; (8001d68 <runCommand+0x2b8>)
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f004 f84b 	bl	8005b94 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8001afe:	f107 0318 	add.w	r3, r7, #24
 8001b02:	499a      	ldr	r1, [pc, #616]	; (8001d6c <runCommand+0x2bc>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fb6b 	bl	80001e0 <strcmp>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d128      	bne.n	8001b62 <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8001b10:	4997      	ldr	r1, [pc, #604]	; (8001d70 <runCommand+0x2c0>)
 8001b12:	4898      	ldr	r0, [pc, #608]	; (8001d74 <runCommand+0x2c4>)
 8001b14:	f002 ff64 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001b18:	4997      	ldr	r1, [pc, #604]	; (8001d78 <runCommand+0x2c8>)
 8001b1a:	4896      	ldr	r0, [pc, #600]	; (8001d74 <runCommand+0x2c4>)
 8001b1c:	f002 ff60 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 8001b20:	4996      	ldr	r1, [pc, #600]	; (8001d7c <runCommand+0x2cc>)
 8001b22:	4894      	ldr	r0, [pc, #592]	; (8001d74 <runCommand+0x2c4>)
 8001b24:	f002 ff5c 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # ---Inicia Linea recta, #: dist [mm], #: dutty de estabilidad \n");
 8001b28:	4995      	ldr	r1, [pc, #596]	; (8001d80 <runCommand+0x2d0>)
 8001b2a:	4892      	ldr	r0, [pc, #584]	; (8001d74 <runCommand+0x2c4>)
 8001b2c:	f002 ff58 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 8001b30:	4994      	ldr	r1, [pc, #592]	; (8001d84 <runCommand+0x2d4>)
 8001b32:	4890      	ldr	r0, [pc, #576]	; (8001d74 <runCommand+0x2c4>)
 8001b34:	f002 ff54 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) start # # # # ---Inicia movimiento, #: perTC [ms], #: dutty_L, #dutty_R, #: freqTP [Hz] \n");
 8001b38:	4993      	ldr	r1, [pc, #588]	; (8001d88 <runCommand+0x2d8>)
 8001b3a:	488e      	ldr	r0, [pc, #568]	; (8001d74 <runCommand+0x2c4>)
 8001b3c:	f002 ff50 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) reaction # # # ---Inicia Curva de reaccion,#: perTC [ms], #: dutty_L y dutty_R, #: freqTP [Hz] \n");
 8001b40:	4992      	ldr	r1, [pc, #584]	; (8001d8c <runCommand+0x2dc>)
 8001b42:	488c      	ldr	r0, [pc, #560]	; (8001d74 <runCommand+0x2c4>)
 8001b44:	f002 ff4c 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 8001b48:	4991      	ldr	r1, [pc, #580]	; (8001d90 <runCommand+0x2e0>)
 8001b4a:	488a      	ldr	r0, [pc, #552]	; (8001d74 <runCommand+0x2c4>)
 8001b4c:	f002 ff48 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: L,k,tau \n");
 8001b50:	4990      	ldr	r1, [pc, #576]	; (8001d94 <runCommand+0x2e4>)
 8001b52:	4888      	ldr	r0, [pc, #544]	; (8001d74 <runCommand+0x2c4>)
 8001b54:	f002 ff44 	bl	80049e0 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 8001b58:	498f      	ldr	r1, [pc, #572]	; (8001d98 <runCommand+0x2e8>)
 8001b5a:	4886      	ldr	r0, [pc, #536]	; (8001d74 <runCommand+0x2c4>)
 8001b5c:	f002 ff40 	bl	80049e0 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8001b60:	e18b      	b.n	8001e7a <runCommand+0x3ca>
	else if (strcmp(cmd, "frequency") == 0)
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	498d      	ldr	r1, [pc, #564]	; (8001d9c <runCommand+0x2ec>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fb39 	bl	80001e0 <strcmp>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <runCommand+0xd4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4a8a      	ldr	r2, [pc, #552]	; (8001da0 <runCommand+0x2f0>)
 8001b78:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	4b89      	ldr	r3, [pc, #548]	; (8001da4 <runCommand+0x2f4>)
 8001b80:	801a      	strh	r2, [r3, #0]
}
 8001b82:	e17a      	b.n	8001e7a <runCommand+0x3ca>
	else if (strcmp(cmd, "line") == 0)
 8001b84:	f107 0318 	add.w	r3, r7, #24
 8001b88:	4987      	ldr	r1, [pc, #540]	; (8001da8 <runCommand+0x2f8>)
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fb28 	bl	80001e0 <strcmp>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d141      	bne.n	8001c1a <runCommand+0x16a>
		periodo_TIMER_Count = Ts;
 8001b96:	4b85      	ldr	r3, [pc, #532]	; (8001dac <runCommand+0x2fc>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba0:	ee17 3a90 	vmov	r3, s15
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <runCommand+0x300>)
 8001ba8:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b81      	ldr	r3, [pc, #516]	; (8001db4 <runCommand+0x304>)
 8001bb0:	801a      	strh	r2, [r3, #0]
		setpoint = secondParameter;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	4b7e      	ldr	r3, [pc, #504]	; (8001db8 <runCommand+0x308>)
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
		handler_Motor_L.parametersMotor.e = handler_Motor_L.parametersMotor.e_1 = handler_Motor_L.parametersMotor.e_2 = 0;
 8001bc2:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <runCommand+0x30c>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	4b7c      	ldr	r3, [pc, #496]	; (8001dbc <runCommand+0x30c>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	4a7b      	ldr	r2, [pc, #492]	; (8001dbc <runCommand+0x30c>)
 8001bd0:	60d3      	str	r3, [r2, #12]
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <runCommand+0x30c>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	4a79      	ldr	r2, [pc, #484]	; (8001dbc <runCommand+0x30c>)
 8001bd8:	6093      	str	r3, [r2, #8]
		handler_Motor_R.parametersMotor.e = handler_Motor_R.parametersMotor.e_1 = handler_Motor_R.parametersMotor.e_2 = 0;
 8001bda:	4b79      	ldr	r3, [pc, #484]	; (8001dc0 <runCommand+0x310>)
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <runCommand+0x310>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	4a76      	ldr	r2, [pc, #472]	; (8001dc0 <runCommand+0x310>)
 8001be8:	60d3      	str	r3, [r2, #12]
 8001bea:	4b75      	ldr	r3, [pc, #468]	; (8001dc0 <runCommand+0x310>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4a74      	ldr	r2, [pc, #464]	; (8001dc0 <runCommand+0x310>)
 8001bf0:	6093      	str	r3, [r2, #8]
		config_motor(1, periodo_TIMER_Count,  setpoint, setpoint, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001bf2:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <runCommand+0x300>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <runCommand+0x308>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	4b6e      	ldr	r3, [pc, #440]	; (8001db8 <runCommand+0x308>)
 8001c00:	ed93 7a00 	vldr	s14, [r3]
 8001c04:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <runCommand+0x2f4>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	eef0 0a47 	vmov.f32	s1, s14
 8001c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c12:	2001      	movs	r0, #1
 8001c14:	f000 fa4c 	bl	80020b0 <config_motor>
}
 8001c18:	e12f      	b.n	8001e7a <runCommand+0x3ca>
	else if (strcmp(cmd, "turn") == 0)
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4969      	ldr	r1, [pc, #420]	; (8001dc4 <runCommand+0x314>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fadd 	bl	80001e0 <strcmp>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d162      	bne.n	8001cf2 <runCommand+0x242>
		flag_turn = secondParameter;
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <runCommand+0x318>)
 8001c32:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 8001c34:	4b64      	ldr	r3, [pc, #400]	; (8001dc8 <runCommand+0x318>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d114      	bne.n	8001c66 <runCommand+0x1b6>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <runCommand+0x31c>)
 8001c40:	fb82 1203 	smull	r1, r2, r2, r3
 8001c44:	1052      	asrs	r2, r2, #1
 8001c46:	17db      	asrs	r3, r3, #31
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <runCommand+0x320>)
 8001c52:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 8001c54:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <runCommand+0x324>)
 8001c56:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <runCommand+0x310>)
 8001c58:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001c5a:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <runCommand+0x324>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fa31 	bl	80010c6 <updateDirMotor>
 8001c64:	e013      	b.n	8001c8e <runCommand+0x1de>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4a58      	ldr	r2, [pc, #352]	; (8001dcc <runCommand+0x31c>)
 8001c6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c6e:	1052      	asrs	r2, r2, #1
 8001c70:	17db      	asrs	r3, r3, #31
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <runCommand+0x320>)
 8001c7c:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8001c7e:	4b55      	ldr	r3, [pc, #340]	; (8001dd4 <runCommand+0x324>)
 8001c80:	4a4e      	ldr	r2, [pc, #312]	; (8001dbc <runCommand+0x30c>)
 8001c82:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <runCommand+0x324>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fa1c 	bl	80010c6 <updateDirMotor>
		config_motor(2, periodo_TIMER_Count, 0.9234*((float) thirdParameter)-3, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001c8e:	4b48      	ldr	r3, [pc, #288]	; (8001db0 <runCommand+0x300>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	461c      	mov	r4, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	ee17 0a90 	vmov	r0, s15
 8001ca2:	f7fe fc69 	bl	8000578 <__aeabi_f2d>
 8001ca6:	a32e      	add	r3, pc, #184	; (adr r3, 8001d60 <runCommand+0x2b0>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	f7fe fcbc 	bl	8000628 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <runCommand+0x328>)
 8001cbe:	f7fe fafb 	bl	80002b8 <__aeabi_dsub>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ffa5 	bl	8000c18 <__aeabi_d2f>
 8001cce:	4601      	mov	r1, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cda:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <runCommand+0x2f4>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	eef0 0a67 	vmov.f32	s1, s15
 8001ce4:	ee00 1a10 	vmov	s0, r1
 8001ce8:	4621      	mov	r1, r4
 8001cea:	2002      	movs	r0, #2
 8001cec:	f000 f9e0 	bl	80020b0 <config_motor>
}
 8001cf0:	e0c3      	b.n	8001e7a <runCommand+0x3ca>
	else if (strcmp(cmd, "start") == 0)
 8001cf2:	f107 0318 	add.w	r3, r7, #24
 8001cf6:	4939      	ldr	r1, [pc, #228]	; (8001ddc <runCommand+0x32c>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fa71 	bl	80001e0 <strcmp>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d171      	bne.n	8001de8 <runCommand+0x338>
		periodo_TIMER_Count = firtsParameter;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <runCommand+0x300>)
 8001d0a:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count,  (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <runCommand+0x300>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4a32      	ldr	r2, [pc, #200]	; (8001de0 <runCommand+0x330>)
 8001d16:	fb82 0203 	smull	r0, r2, r2, r3
 8001d1a:	1152      	asrs	r2, r2, #5
 8001d1c:	17db      	asrs	r3, r3, #31
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	; (8001de0 <runCommand+0x330>)
 8001d2c:	fb82 0203 	smull	r0, r2, r2, r3
 8001d30:	1152      	asrs	r2, r2, #5
 8001d32:	17db      	asrs	r3, r3, #31
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	ee07 3a10 	vmov	s14, r3
 8001d3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	461a      	mov	r2, r3
 8001d42:	eef0 0a47 	vmov.f32	s1, s14
 8001d46:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	f000 f9b0 	bl	80020b0 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 8001d50:	4924      	ldr	r1, [pc, #144]	; (8001de4 <runCommand+0x334>)
 8001d52:	4808      	ldr	r0, [pc, #32]	; (8001d74 <runCommand+0x2c4>)
 8001d54:	f002 fe44 	bl	80049e0 <writeMsgForTXE>
}
 8001d58:	e08f      	b.n	8001e7a <runCommand+0x3ca>
 8001d5a:	bf00      	nop
 8001d5c:	f3af 8000 	nop.w
 8001d60:	28240b78 	.word	0x28240b78
 8001d64:	3fed8c7e 	.word	0x3fed8c7e
 8001d68:	08009fec 	.word	0x08009fec
 8001d6c:	08009ffc 	.word	0x08009ffc
 8001d70:	0800a004 	.word	0x0800a004
 8001d74:	20000268 	.word	0x20000268
 8001d78:	0800a014 	.word	0x0800a014
 8001d7c:	0800a040 	.word	0x0800a040
 8001d80:	0800a090 	.word	0x0800a090
 8001d84:	0800a0dc 	.word	0x0800a0dc
 8001d88:	0800a124 	.word	0x0800a124
 8001d8c:	0800a184 	.word	0x0800a184
 8001d90:	0800a1e8 	.word	0x0800a1e8
 8001d94:	0800a220 	.word	0x0800a220
 8001d98:	0800a254 	.word	0x0800a254
 8001d9c:	0800a2a4 	.word	0x0800a2a4
 8001da0:	000186a0 	.word	0x000186a0
 8001da4:	2000000a 	.word	0x2000000a
 8001da8:	0800a2b0 	.word	0x0800a2b0
 8001dac:	20000004 	.word	0x20000004
 8001db0:	20000008 	.word	0x20000008
 8001db4:	200003bc 	.word	0x200003bc
 8001db8:	200003c0 	.word	0x200003c0
 8001dbc:	20000358 	.word	0x20000358
 8001dc0:	200002e4 	.word	0x200002e4
 8001dc4:	0800a2b8 	.word	0x0800a2b8
 8001dc8:	200003c9 	.word	0x200003c9
 8001dcc:	66666667 	.word	0x66666667
 8001dd0:	200003cc 	.word	0x200003cc
 8001dd4:	200003c4 	.word	0x200003c4
 8001dd8:	40080000 	.word	0x40080000
 8001ddc:	0800a2c0 	.word	0x0800a2c0
 8001de0:	51eb851f 	.word	0x51eb851f
 8001de4:	0800a2c8 	.word	0x0800a2c8
	else if (strcmp(cmd, "reaction") == 0)
 8001de8:	f107 0318 	add.w	r3, r7, #24
 8001dec:	4925      	ldr	r1, [pc, #148]	; (8001e84 <runCommand+0x3d4>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe f9f6 	bl	80001e0 <strcmp>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12a      	bne.n	8001e50 <runCommand+0x3a0>
		periodo_TIMER_Count = firtsParameter;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <runCommand+0x3d8>)
 8001e00:	801a      	strh	r2, [r3, #0]
		config_motor(4, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001e02:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <runCommand+0x3d8>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	4619      	mov	r1, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <runCommand+0x3dc>)
 8001e0c:	fb82 0203 	smull	r0, r2, r2, r3
 8001e10:	1152      	asrs	r2, r2, #5
 8001e12:	17db      	asrs	r3, r3, #31
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <runCommand+0x3dc>)
 8001e22:	fb82 0203 	smull	r0, r2, r2, r3
 8001e26:	1152      	asrs	r2, r2, #5
 8001e28:	17db      	asrs	r3, r3, #31
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	ee07 3a10 	vmov	s14, r3
 8001e30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	461a      	mov	r2, r3
 8001e38:	eef0 0a47 	vmov.f32	s1, s14
 8001e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e40:	2004      	movs	r0, #4
 8001e42:	f000 f935 	bl	80020b0 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 8001e46:	4912      	ldr	r1, [pc, #72]	; (8001e90 <runCommand+0x3e0>)
 8001e48:	4812      	ldr	r0, [pc, #72]	; (8001e94 <runCommand+0x3e4>)
 8001e4a:	f002 fdc9 	bl	80049e0 <writeMsgForTXE>
}
 8001e4e:	e014      	b.n	8001e7a <runCommand+0x3ca>
	else if (strcmp(cmd, "stop") == 0)
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4910      	ldr	r1, [pc, #64]	; (8001e98 <runCommand+0x3e8>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe f9c2 	bl	80001e0 <strcmp>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d107      	bne.n	8001e72 <runCommand+0x3c2>
		status_motor(RESET);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f8a8 	bl	8001fb8 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <runCommand+0x3ec>)
 8001e6a:	480a      	ldr	r0, [pc, #40]	; (8001e94 <runCommand+0x3e4>)
 8001e6c:	f002 fdb8 	bl	80049e0 <writeMsgForTXE>
}
 8001e70:	e003      	b.n	8001e7a <runCommand+0x3ca>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8001e72:	490b      	ldr	r1, [pc, #44]	; (8001ea0 <runCommand+0x3f0>)
 8001e74:	4807      	ldr	r0, [pc, #28]	; (8001e94 <runCommand+0x3e4>)
 8001e76:	f002 fdb3 	bl	80049e0 <writeMsgForTXE>
}
 8001e7a:	bf00      	nop
 8001e7c:	375c      	adds	r7, #92	; 0x5c
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	0800a2dc 	.word	0x0800a2dc
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	51eb851f 	.word	0x51eb851f
 8001e90:	0800a2c8 	.word	0x0800a2c8
 8001e94:	20000268 	.word	0x20000268
 8001e98:	0800a2e8 	.word	0x0800a2e8
 8001e9c:	0800a2f0 	.word	0x0800a2f0
 8001ea0:	0800a308 	.word	0x0800a308

08001ea4 <PID>:
//----------------------------Inicio de la definicion de las funciones-----------------------------------------


//--------------------PID----------------------
void PID(Motor_Handler_t *ptrMotorHandler, float measure)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	ed87 0a00 	vstr	s0, [r7]
	//Calculo del error
	ptrMotorHandler->parametersMotor.e = setpoint-measure;
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <PID+0x108>)
 8001eb2:	ed93 7a00 	vldr	s14, [r3]
 8001eb6:	edd7 7a00 	vldr	s15, [r7]
 8001eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	edc3 7a02 	vstr	s15, [r3, #8]
    // Controle PID
	float p0 =  ptrMotorHandler->parametersMotor.q0*ptrMotorHandler->parametersMotor.e;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a05 	vstr	s15, [r7, #20]
	float p1 =  ptrMotorHandler->parametersMotor.q1*ptrMotorHandler->parametersMotor.e_1;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee8:	edc7 7a04 	vstr	s15, [r7, #16]
	float p2 =  ptrMotorHandler->parametersMotor.q2*ptrMotorHandler->parametersMotor.e_2;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	ed93 7a07 	vldr	s14, [r3, #28]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efc:	edc7 7a03 	vstr	s15, [r7, #12]
	ptrMotorHandler->parametersMotor.u = ptrMotorHandler->parametersMotor.u_1 + p0 + p1 + p2;        //Ley del controlador PID discreto
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	edc3 7a00 	vstr	s15, [r3]
    //Saturo la accion de control 'uT' en un tope maximo y minimo
    if (ptrMotorHandler->parametersMotor.u >= 100.0)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	edd3 7a00 	vldr	s15, [r3]
 8001f2a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001fb0 <PID+0x10c>
 8001f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	db03      	blt.n	8001f40 <PID+0x9c>
    {
    	ptrMotorHandler->parametersMotor.u = 100.0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <PID+0x110>)
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	e00d      	b.n	8001f5c <PID+0xb8>
    }
    else if(ptrMotorHandler->parametersMotor.u <= 0.0)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	d804      	bhi.n	8001f5a <PID+0xb6>
    {
    	ptrMotorHandler->parametersMotor.u = 0.0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e000      	b.n	8001f5c <PID+0xb8>
    }
    else
    {
    	__NOP();
 8001f5a:	bf00      	nop
    }
     //Retorno a los valores reales
    ptrMotorHandler->parametersMotor.e_2 = ptrMotorHandler->parametersMotor.e_1;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	611a      	str	r2, [r3, #16]
    ptrMotorHandler->parametersMotor.e_1 = ptrMotorHandler->parametersMotor.e;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	60da      	str	r2, [r3, #12]
    ptrMotorHandler->parametersMotor.u_1 = ptrMotorHandler->parametersMotor.u;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	605a      	str	r2, [r3, #4]
    //Actualizamoe el valor del dutty
    if(ptrMotorHandler->parametersMotor.u>(setpoint-5))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	ed93 7a00 	vldr	s14, [r3]
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <PID+0x108>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001f84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f90:	dc00      	bgt.n	8001f94 <PID+0xf0>
    {
    	updateDuttyMotor(ptrMotorHandler, ptrMotorHandler->parametersMotor.u);
    }
}
 8001f92:	e007      	b.n	8001fa4 <PID+0x100>
    	updateDuttyMotor(ptrMotorHandler, ptrMotorHandler->parametersMotor.u);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff f87a 	bl	8001098 <updateDuttyMotor>
}
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200003c0 	.word	0x200003c0
 8001fb0:	42c80000 	.word	0x42c80000
 8001fb4:	42c80000 	.word	0x42c80000

08001fb8 <status_motor>:

void status_motor(uint8_t status)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d138      	bne.n	800203a <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <status_motor+0xe8>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 f8fe 	bl	80041d0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <status_motor+0xec>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	2101      	movs	r1, #1
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 f8f8 	bl	80041d0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <status_motor+0xe8>)
 8001fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <status_motor+0xe8>)
 8001fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f001 fe1c 	bl	8003c30 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <status_motor+0xec>)
 8001ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <status_motor+0xec>)
 8001ffe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	4610      	mov	r0, r2
 800200c:	f001 fe10 	bl	8003c30 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8002010:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <status_motor+0xe8>)
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f001 fe0a 	bl	8003c30 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <status_motor+0xec>)
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f001 fe04 	bl	8003c30 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 8002028:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <status_motor+0xf0>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d033      	beq.n	8002098 <status_motor+0xe0>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 8002030:	2101      	movs	r1, #1
 8002032:	481e      	ldr	r0, [pc, #120]	; (80020ac <status_motor+0xf4>)
 8002034:	f000 fbba 	bl	80027ac <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 8002038:	e02e      	b.n	8002098 <status_motor+0xe0>
		if(flag_motor!=2)
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <status_motor+0xf0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d003      	beq.n	800204a <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 8002042:	2100      	movs	r1, #0
 8002044:	4819      	ldr	r0, [pc, #100]	; (80020ac <status_motor+0xf4>)
 8002046:	f000 fbb1 	bl	80027ac <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <status_motor+0xe8>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f002 f8bd 	bl	80041d0 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <status_motor+0xec>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f002 f8b7 	bl	80041d0 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <status_motor+0xe8>)
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f001 fde1 	bl	8003c30 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <status_motor+0xec>)
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fddb 	bl	8003c30 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <status_motor+0xe8>)
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	2101      	movs	r1, #1
 8002080:	4618      	mov	r0, r3
 8002082:	f001 fdd5 	bl	8003c30 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <status_motor+0xec>)
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	2101      	movs	r1, #1
 800208c:	4618      	mov	r0, r3
 800208e:	f001 fdcf 	bl	8003c30 <GPIO_writePin>
		flag_motor = 0;
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <status_motor+0xf0>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000358 	.word	0x20000358
 80020a4:	200002e4 	.word	0x200002e4
 80020a8:	200003c8 	.word	0x200003c8
 80020ac:	200003ac 	.word	0x200003ac

080020b0 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6139      	str	r1, [r7, #16]
 80020ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80020be:	edc7 0a02 	vstr	s1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4619      	mov	r1, r3
 80020cc:	4819      	ldr	r0, [pc, #100]	; (8002134 <config_motor+0x84>)
 80020ce:	f000 fb8d 	bl	80027ec <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <config_motor+0x88>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <config_motor+0x8c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <config_motor+0x88>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <config_motor+0x8c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <config_motor+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 80020f0:	4a14      	ldr	r2, [pc, #80]	; (8002144 <config_motor+0x94>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <config_motor+0x98>)
 80020fc:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <config_motor+0x98>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	4619      	mov	r1, r3
 8002104:	4811      	ldr	r0, [pc, #68]	; (800214c <config_motor+0x9c>)
 8002106:	f000 fb71 	bl	80027ec <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 800210a:	ed97 0a02 	vldr	s0, [r7, #8]
 800210e:	480a      	ldr	r0, [pc, #40]	; (8002138 <config_motor+0x88>)
 8002110:	f7fe ffc2 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8002114:	ed97 0a03 	vldr	s0, [r7, #12]
 8002118:	4808      	ldr	r0, [pc, #32]	; (800213c <config_motor+0x8c>)
 800211a:	f7fe ffbd 	bl	8001098 <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 800211e:	4a0c      	ldr	r2, [pc, #48]	; (8002150 <config_motor+0xa0>)
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 8002124:	2001      	movs	r0, #1
 8002126:	f7ff ff47 	bl	8001fb8 <status_motor>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200003ac 	.word	0x200003ac
 8002138:	200002e4 	.word	0x200002e4
 800213c:	20000358 	.word	0x20000358
 8002140:	200003ca 	.word	0x200003ca
 8002144:	000186a0 	.word	0x000186a0
 8002148:	20000002 	.word	0x20000002
 800214c:	2000039c 	.word	0x2000039c
 8002150:	200003c8 	.word	0x200003c8

08002154 <constains_calculator>:


void constains_calculator(Motor_Handler_t *ptrMotorhandler,float k, float tau, float theta)   //k,tau,theta
{
 8002154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002162:	edc7 0a01 	vstr	s1, [r7, #4]
 8002166:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo de constantes de porcentaje, integracion y derivacion por metodo de Ziegler y Nichols
	   float kp=(1.2*tau)/(k*theta);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fa04 	bl	8000578 <__aeabi_f2d>
 8002170:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002174:	4b6d      	ldr	r3, [pc, #436]	; (800232c <constains_calculator+0x1d8>)
 8002176:	f7fe fa57 	bl	8000628 <__aeabi_dmul>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4614      	mov	r4, r2
 8002180:	461d      	mov	r5, r3
 8002182:	ed97 7a02 	vldr	s14, [r7, #8]
 8002186:	edd7 7a00 	vldr	s15, [r7]
 800218a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218e:	ee17 0a90 	vmov	r0, s15
 8002192:	f7fe f9f1 	bl	8000578 <__aeabi_f2d>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4620      	mov	r0, r4
 800219c:	4629      	mov	r1, r5
 800219e:	f7fe fb6d 	bl	800087c <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fd35 	bl	8000c18 <__aeabi_d2f>
 80021ae:	4603      	mov	r3, r0
 80021b0:	61fb      	str	r3, [r7, #28]
	   float ti=2.0*theta;
 80021b2:	edd7 7a00 	vldr	s15, [r7]
 80021b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021ba:	edc7 7a06 	vstr	s15, [r7, #24]
	   float td=0.5*theta;
 80021be:	edd7 7a00 	vldr	s15, [r7]
 80021c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ca:	edc7 7a05 	vstr	s15, [r7, #20]
	  //Calculo do controle PID digital
	   ptrMotorhandler->parametersMotor.q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 80021ce:	69f8      	ldr	r0, [r7, #28]
 80021d0:	f7fe f9d2 	bl	8000578 <__aeabi_f2d>
 80021d4:	4604      	mov	r4, r0
 80021d6:	460d      	mov	r5, r1
 80021d8:	4b55      	ldr	r3, [pc, #340]	; (8002330 <constains_calculator+0x1dc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f9cb 	bl	8000578 <__aeabi_f2d>
 80021e2:	4680      	mov	r8, r0
 80021e4:	4689      	mov	r9, r1
 80021e6:	69b8      	ldr	r0, [r7, #24]
 80021e8:	f7fe f9c6 	bl	8000578 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	f7fe f864 	bl	80002bc <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4640      	mov	r0, r8
 80021fa:	4649      	mov	r1, r9
 80021fc:	f7fe fb3e 	bl	800087c <__aeabi_ddiv>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	4b49      	ldr	r3, [pc, #292]	; (8002334 <constains_calculator+0x1e0>)
 800220e:	f7fe f855 	bl	80002bc <__adddf3>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4690      	mov	r8, r2
 8002218:	4699      	mov	r9, r3
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <constains_calculator+0x1dc>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ed97 7a05 	vldr	s14, [r7, #20]
 8002224:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002228:	ee16 0a90 	vmov	r0, s13
 800222c:	f7fe f9a4 	bl	8000578 <__aeabi_f2d>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4640      	mov	r0, r8
 8002236:	4649      	mov	r1, r9
 8002238:	f7fe f840 	bl	80002bc <__adddf3>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	f7fe f9f0 	bl	8000628 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fce2 	bl	8000c18 <__aeabi_d2f>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	615a      	str	r2, [r3, #20]
	   ptrMotorhandler->parametersMotor.q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 800225a:	edd7 7a07 	vldr	s15, [r7, #28]
 800225e:	eef1 7a67 	vneg.f32	s15, s15
 8002262:	ee17 3a90 	vmov	r3, s15
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f986 	bl	8000578 <__aeabi_f2d>
 800226c:	4604      	mov	r4, r0
 800226e:	460d      	mov	r5, r1
 8002270:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <constains_calculator+0x1dc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f97f 	bl	8000578 <__aeabi_f2d>
 800227a:	4680      	mov	r8, r0
 800227c:	4689      	mov	r9, r1
 800227e:	69b8      	ldr	r0, [r7, #24]
 8002280:	f7fe f97a 	bl	8000578 <__aeabi_f2d>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	f7fe f818 	bl	80002bc <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4640      	mov	r0, r8
 8002292:	4649      	mov	r1, r9
 8002294:	f7fe faf2 	bl	800087c <__aeabi_ddiv>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	f04f 0000 	mov.w	r0, #0
 80022a0:	4924      	ldr	r1, [pc, #144]	; (8002334 <constains_calculator+0x1e0>)
 80022a2:	f7fe f809 	bl	80002b8 <__aeabi_dsub>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4690      	mov	r8, r2
 80022ac:	4699      	mov	r9, r3
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7fe f962 	bl	8000578 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	f7fe f800 	bl	80002bc <__adddf3>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4692      	mov	sl, r2
 80022c2:	469b      	mov	fp, r3
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <constains_calculator+0x1dc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f955 	bl	8000578 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4650      	mov	r0, sl
 80022d4:	4659      	mov	r1, fp
 80022d6:	f7fe fad1 	bl	800087c <__aeabi_ddiv>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4640      	mov	r0, r8
 80022e0:	4649      	mov	r1, r9
 80022e2:	f7fd ffeb 	bl	80002bc <__adddf3>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fe f99b 	bl	8000628 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7fe fc8d 	bl	8000c18 <__aeabi_d2f>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	619a      	str	r2, [r3, #24]
	   ptrMotorhandler->parametersMotor.q2 = (kp*td)/Ts;
 8002304:	ed97 7a07 	vldr	s14, [r7, #28]
 8002308:	edd7 7a05 	vldr	s15, [r7, #20]
 800230c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <constains_calculator+0x1dc>)
 8002312:	ed93 7a00 	vldr	s14, [r3]
 8002316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8002320:	bf00      	nop
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800232a:	bf00      	nop
 800232c:	3ff33333 	.word	0x3ff33333
 8002330:	20000004 	.word	0x20000004
 8002334:	3ff00000 	.word	0x3ff00000

08002338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800233a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800233c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <LoopForever+0x6>)
  ldr r1, =_edata
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <LoopForever+0xe>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002358:	4c0a      	ldr	r4, [pc, #40]	; (8002384 <LoopForever+0x16>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002366:	f002 fd49 	bl	8004dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800236a:	f7fe fedb 	bl	8001124 <main>

0800236e <LoopForever>:

LoopForever:
    b LoopForever
 800236e:	e7fe      	b.n	800236e <LoopForever>
  ldr   r0, =_estack
 8002370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002378:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800237c:	0800a7f4 	.word	0x0800a7f4
  ldr r2, =_sbss
 8002380:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002384:	20000c9c 	.word	0x20000c9c

08002388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC_IRQHandler>

0800238a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
	return 1;
 800238e:	2301      	movs	r3, #1
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_kill>:

int _kill(int pid, int sig)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023a4:	f002 fd24 	bl	8004df0 <__errno>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2216      	movs	r2, #22
 80023ac:	601a      	str	r2, [r3, #0]
	return -1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <_exit>:

void _exit (int status)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023c2:	f04f 31ff 	mov.w	r1, #4294967295
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffe7 	bl	800239a <_kill>
	while (1) {}		/* Make sure we hang here */
 80023cc:	e7fe      	b.n	80023cc <_exit+0x12>

080023ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e00a      	b.n	80023f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023e0:	f3af 8000 	nop.w
 80023e4:	4601      	mov	r1, r0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	60ba      	str	r2, [r7, #8]
 80023ec:	b2ca      	uxtb	r2, r1
 80023ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dbf0      	blt.n	80023e0 <_read+0x12>
	}

return len;
 80023fe:	687b      	ldr	r3, [r7, #4]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e009      	b.n	800242e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	60ba      	str	r2, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	dbf1      	blt.n	800241a <_write+0x12>
	}
	return len;
 8002436:	687b      	ldr	r3, [r7, #4]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_close>:

int _close(int file)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	return -1;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002468:	605a      	str	r2, [r3, #4]
	return 0;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_isatty>:

int _isatty(int file)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
	return 0;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f002 fc8a 	bl	8004df0 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20020000 	.word	0x20020000
 8002508:	00000400 	.word	0x00000400
 800250c:	2000042c 	.word	0x2000042c
 8002510:	20000ca0 	.word	0x20000ca0

08002514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db0b      	blt.n	800253e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4907      	ldr	r1, [pc, #28]	; (800254c <__NVIC_EnableIRQ+0x38>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2001      	movs	r0, #1
 8002536:	fa00 f202 	lsl.w	r2, r0, r2
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e100 	.word	0xe000e100

08002550 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002560:	d10a      	bne.n	8002578 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002562:	4b62      	ldr	r3, [pc, #392]	; (80026ec <BasicTimer_Config+0x19c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a61      	ldr	r2, [pc, #388]	; (80026ec <BasicTimer_Config+0x19c>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4a5f      	ldr	r2, [pc, #380]	; (80026f0 <BasicTimer_Config+0x1a0>)
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e02e      	b.n	80025d6 <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a5d      	ldr	r2, [pc, #372]	; (80026f4 <BasicTimer_Config+0x1a4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10a      	bne.n	8002598 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002582:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <BasicTimer_Config+0x19c>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a59      	ldr	r2, [pc, #356]	; (80026ec <BasicTimer_Config+0x19c>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	4a59      	ldr	r2, [pc, #356]	; (80026f8 <BasicTimer_Config+0x1a8>)
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e01e      	b.n	80025d6 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a57      	ldr	r2, [pc, #348]	; (80026fc <BasicTimer_Config+0x1ac>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10a      	bne.n	80025b8 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80025a2:	4b52      	ldr	r3, [pc, #328]	; (80026ec <BasicTimer_Config+0x19c>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a51      	ldr	r2, [pc, #324]	; (80026ec <BasicTimer_Config+0x19c>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a53      	ldr	r2, [pc, #332]	; (8002700 <BasicTimer_Config+0x1b0>)
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00e      	b.n	80025d6 <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a51      	ldr	r2, [pc, #324]	; (8002704 <BasicTimer_Config+0x1b4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d109      	bne.n	80025d6 <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <BasicTimer_Config+0x19c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a49      	ldr	r2, [pc, #292]	; (80026ec <BasicTimer_Config+0x19c>)
 80025c8:	f043 0308 	orr.w	r3, r3, #8
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <BasicTimer_Config+0x1b8>)
 80025d4:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80025d6:	f001 fbeb 	bl	8003db0 <getConfigPLL>
 80025da:	4603      	mov	r3, r0
 80025dc:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80025de:	f001 fc03 	bl	8003de8 <getClockAPB1>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80025e6:	7bbb      	ldrb	r3, [r7, #14]
 80025e8:	2b31      	cmp	r3, #49	; 0x31
 80025ea:	d903      	bls.n	80025f4 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e000      	b.n	80025f6 <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80025f4:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	8852      	ldrh	r2, [r2, #2]
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d112      	bne.n	8002636 <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f022 0210 	bic.w	r2, r2, #16
 800261e:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	3201      	adds	r2, #1
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
 8002634:	e018      	b.n	8002668 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f022 0210 	bic.w	r2, r2, #16
 8002644:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f042 0210 	orr.w	r2, r2, #16
 8002654:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6852      	ldr	r2, [r2, #4]
 8002666:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d103      	bne.n	800267e <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002676:	201c      	movs	r0, #28
 8002678:	f7ff ff4c 	bl	8002514 <__NVIC_EnableIRQ>
 800267c:	e019      	b.n	80026b2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	4a1c      	ldr	r2, [pc, #112]	; (80026f4 <BasicTimer_Config+0x1a4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d103      	bne.n	8002690 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002688:	201d      	movs	r0, #29
 800268a:	f7ff ff43 	bl	8002514 <__NVIC_EnableIRQ>
 800268e:	e010      	b.n	80026b2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a19      	ldr	r2, [pc, #100]	; (80026fc <BasicTimer_Config+0x1ac>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d103      	bne.n	80026a2 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800269a:	201e      	movs	r0, #30
 800269c:	f7ff ff3a 	bl	8002514 <__NVIC_EnableIRQ>
 80026a0:	e007      	b.n	80026b2 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <BasicTimer_Config+0x1b4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d102      	bne.n	80026b2 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 80026ac:	2032      	movs	r0, #50	; 0x32
 80026ae:	f7ff ff31 	bl	8002514 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80026b2:	b662      	cpsie	i
}
 80026b4:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7a1b      	ldrb	r3, [r3, #8]
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f875 	bl	80027ac <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f022 0201 	bic.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	20000430 	.word	0x20000430
 80026f4:	40000400 	.word	0x40000400
 80026f8:	20000434 	.word	0x20000434
 80026fc:	40000800 	.word	0x40000800
 8002700:	20000438 	.word	0x20000438
 8002704:	40000c00 	.word	0x40000c00
 8002708:	2000043c 	.word	0x2000043c

0800270c <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
	__NOP();
 8002710:	bf00      	nop
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
	__NOP();
 8002720:	bf00      	nop
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <TIM2_IRQHandler+0x1c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <TIM2_IRQHandler+0x1c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002740:	f7fe ff7a 	bl	8001638 <BasicTimer2_Callback>

}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000430 	.word	0x20000430

0800274c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <TIM3_IRQHandler+0x1c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <TIM3_IRQHandler+0x1c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002760:	f7fe ff76 	bl	8001650 <BasicTimer3_Callback>

}
 8002764:	bf00      	nop
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000434 	.word	0x20000434

0800276c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <TIM4_IRQHandler+0x1c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <TIM4_IRQHandler+0x1c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002780:	f7ff ffc4 	bl	800270c <BasicTimer4_Callback>

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000438 	.word	0x20000438

0800278c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <TIM5_IRQHandler+0x1c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <TIM5_IRQHandler+0x1c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 80027a0:	f7ff ffbc 	bl	800271c <BasicTimer5_Callback>

}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000043c 	.word	0x2000043c

080027ac <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d108      	bne.n	80027d0 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 80027ce:	e007      	b.n	80027e0 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	60da      	str	r2, [r3, #12]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6852      	ldr	r2, [r2, #4]
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <__NVIC_EnableIRQ>:
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db0b      	blt.n	8002846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <__NVIC_EnableIRQ+0x38>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2001      	movs	r0, #1
 800283e:	fa00 f202 	lsl.w	r2, r0, r2
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100

08002858 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af02      	add	r7, sp, #8
 800285e:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	2300      	movs	r3, #0
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	2300      	movs	r3, #0
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2301      	movs	r3, #1
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	f001 f891 	bl	8003998 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f001 f8ae 	bl	80039dc <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002880:	4b97      	ldr	r3, [pc, #604]	; (8002ae0 <extInt_Config+0x288>)
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	4a96      	ldr	r2, [pc, #600]	; (8002ae0 <extInt_Config+0x288>)
 8002886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288a:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	f200 85cf 	bhi.w	8003436 <extInt_Config+0xbde>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <extInt_Config+0x48>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028e1 	.word	0x080028e1
 80028a4:	08002997 	.word	0x08002997
 80028a8:	08002a4d 	.word	0x08002a4d
 80028ac:	08002b23 	.word	0x08002b23
 80028b0:	08002bd9 	.word	0x08002bd9
 80028b4:	08002c87 	.word	0x08002c87
 80028b8:	08002d4d 	.word	0x08002d4d
 80028bc:	08002df5 	.word	0x08002df5
 80028c0:	08002e9d 	.word	0x08002e9d
 80028c4:	08002f45 	.word	0x08002f45
 80028c8:	0800300b 	.word	0x0800300b
 80028cc:	080030b3 	.word	0x080030b3
 80028d0:	0800315b 	.word	0x0800315b
 80028d4:	08003221 	.word	0x08003221
 80028d8:	080032c9 	.word	0x080032c9
 80028dc:	08003371 	.word	0x08003371
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80028e0:	4b80      	ldr	r3, [pc, #512]	; (8002ae4 <extInt_Config+0x28c>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4a7f      	ldr	r2, [pc, #508]	; (8002ae4 <extInt_Config+0x28c>)
 80028e6:	f023 030f 	bic.w	r3, r3, #15
 80028ea:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a7d      	ldr	r2, [pc, #500]	; (8002ae8 <extInt_Config+0x290>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d105      	bne.n	8002904 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80028f8:	4b7a      	ldr	r3, [pc, #488]	; (8002ae4 <extInt_Config+0x28c>)
 80028fa:	4a7a      	ldr	r2, [pc, #488]	; (8002ae4 <extInt_Config+0x28c>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002900:	f000 bd9b 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4a78      	ldr	r2, [pc, #480]	; (8002aec <extInt_Config+0x294>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d107      	bne.n	8002920 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002910:	4b74      	ldr	r3, [pc, #464]	; (8002ae4 <extInt_Config+0x28c>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a73      	ldr	r2, [pc, #460]	; (8002ae4 <extInt_Config+0x28c>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	6093      	str	r3, [r2, #8]
		break;
 800291c:	f000 bd8d 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4a72      	ldr	r2, [pc, #456]	; (8002af0 <extInt_Config+0x298>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d107      	bne.n	800293c <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 800292c:	4b6d      	ldr	r3, [pc, #436]	; (8002ae4 <extInt_Config+0x28c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a6c      	ldr	r2, [pc, #432]	; (8002ae4 <extInt_Config+0x28c>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	6093      	str	r3, [r2, #8]
		break;
 8002938:	f000 bd7f 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4a6c      	ldr	r2, [pc, #432]	; (8002af4 <extInt_Config+0x29c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d107      	bne.n	8002958 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002948:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <extInt_Config+0x28c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <extInt_Config+0x28c>)
 800294e:	f043 0303 	orr.w	r3, r3, #3
 8002952:	6093      	str	r3, [r2, #8]
		break;
 8002954:	f000 bd71 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	4a66      	ldr	r2, [pc, #408]	; (8002af8 <extInt_Config+0x2a0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d107      	bne.n	8002974 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002964:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <extInt_Config+0x28c>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a5e      	ldr	r2, [pc, #376]	; (8002ae4 <extInt_Config+0x28c>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6093      	str	r3, [r2, #8]
		break;
 8002970:	f000 bd63 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4a60      	ldr	r2, [pc, #384]	; (8002afc <extInt_Config+0x2a4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d107      	bne.n	8002990 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002980:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <extInt_Config+0x28c>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <extInt_Config+0x28c>)
 8002986:	f043 0307 	orr.w	r3, r3, #7
 800298a:	6093      	str	r3, [r2, #8]
		break;
 800298c:	f000 bd55 	b.w	800343a <extInt_Config+0xbe2>
			__NOP();
 8002990:	bf00      	nop
		break;
 8002992:	f000 bd52 	b.w	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8002996:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <extInt_Config+0x28c>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <extInt_Config+0x28c>)
 800299c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a0:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <extInt_Config+0x290>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d105      	bne.n	80029ba <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 80029ae:	4b4d      	ldr	r3, [pc, #308]	; (8002ae4 <extInt_Config+0x28c>)
 80029b0:	4a4c      	ldr	r2, [pc, #304]	; (8002ae4 <extInt_Config+0x28c>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80029b6:	f000 bd40 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a4a      	ldr	r2, [pc, #296]	; (8002aec <extInt_Config+0x294>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d107      	bne.n	80029d6 <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <extInt_Config+0x28c>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	4a46      	ldr	r2, [pc, #280]	; (8002ae4 <extInt_Config+0x28c>)
 80029cc:	f043 0310 	orr.w	r3, r3, #16
 80029d0:	6093      	str	r3, [r2, #8]
		break;
 80029d2:	f000 bd32 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a44      	ldr	r2, [pc, #272]	; (8002af0 <extInt_Config+0x298>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d107      	bne.n	80029f2 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80029e2:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <extInt_Config+0x28c>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4a3f      	ldr	r2, [pc, #252]	; (8002ae4 <extInt_Config+0x28c>)
 80029e8:	f043 0320 	orr.w	r3, r3, #32
 80029ec:	6093      	str	r3, [r2, #8]
		break;
 80029ee:	f000 bd24 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a3e      	ldr	r2, [pc, #248]	; (8002af4 <extInt_Config+0x29c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d107      	bne.n	8002a0e <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80029fe:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <extInt_Config+0x28c>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4a38      	ldr	r2, [pc, #224]	; (8002ae4 <extInt_Config+0x28c>)
 8002a04:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a08:	6093      	str	r3, [r2, #8]
		break;
 8002a0a:	f000 bd16 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <extInt_Config+0x2a0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d107      	bne.n	8002a2a <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002a1a:	4b32      	ldr	r3, [pc, #200]	; (8002ae4 <extInt_Config+0x28c>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	4a31      	ldr	r2, [pc, #196]	; (8002ae4 <extInt_Config+0x28c>)
 8002a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a24:	6093      	str	r3, [r2, #8]
		break;
 8002a26:	f000 bd08 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a32      	ldr	r2, [pc, #200]	; (8002afc <extInt_Config+0x2a4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d107      	bne.n	8002a46 <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <extInt_Config+0x28c>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <extInt_Config+0x28c>)
 8002a3c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002a40:	6093      	str	r3, [r2, #8]
		break;
 8002a42:	f000 bcfa 	b.w	800343a <extInt_Config+0xbe2>
			__NOP();
 8002a46:	bf00      	nop
		break;
 8002a48:	f000 bcf7 	b.w	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <extInt_Config+0x28c>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <extInt_Config+0x28c>)
 8002a52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a56:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4a22      	ldr	r2, [pc, #136]	; (8002ae8 <extInt_Config+0x290>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d105      	bne.n	8002a70 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <extInt_Config+0x28c>)
 8002a66:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <extInt_Config+0x28c>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002a6c:	f000 bce5 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <extInt_Config+0x294>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d107      	bne.n	8002a8c <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <extInt_Config+0x28c>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <extInt_Config+0x28c>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a86:	6093      	str	r3, [r2, #8]
		break;
 8002a88:	f000 bcd7 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <extInt_Config+0x298>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d107      	bne.n	8002aa8 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002a98:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <extInt_Config+0x28c>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a11      	ldr	r2, [pc, #68]	; (8002ae4 <extInt_Config+0x28c>)
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa2:	6093      	str	r3, [r2, #8]
		break;
 8002aa4:	f000 bcc9 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <extInt_Config+0x29c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d107      	bne.n	8002ac4 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <extInt_Config+0x28c>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <extInt_Config+0x28c>)
 8002aba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002abe:	6093      	str	r3, [r2, #8]
		break;
 8002ac0:	f000 bcbb 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <extInt_Config+0x2a0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d117      	bne.n	8002b00 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <extInt_Config+0x28c>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <extInt_Config+0x28c>)
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ada:	6093      	str	r3, [r2, #8]
		break;
 8002adc:	f000 bcad 	b.w	800343a <extInt_Config+0xbe2>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40013800 	.word	0x40013800
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	40020400 	.word	0x40020400
 8002af0:	40020800 	.word	0x40020800
 8002af4:	40020c00 	.word	0x40020c00
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a8a      	ldr	r2, [pc, #552]	; (8002d30 <extInt_Config+0x4d8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d107      	bne.n	8002b1c <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002b0c:	4b89      	ldr	r3, [pc, #548]	; (8002d34 <extInt_Config+0x4dc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a88      	ldr	r2, [pc, #544]	; (8002d34 <extInt_Config+0x4dc>)
 8002b12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b16:	6093      	str	r3, [r2, #8]
		break;
 8002b18:	f000 bc8f 	b.w	800343a <extInt_Config+0xbe2>
			__NOP();
 8002b1c:	bf00      	nop
		break;
 8002b1e:	f000 bc8c 	b.w	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8002b22:	4b84      	ldr	r3, [pc, #528]	; (8002d34 <extInt_Config+0x4dc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4a83      	ldr	r2, [pc, #524]	; (8002d34 <extInt_Config+0x4dc>)
 8002b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b2c:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a80      	ldr	r2, [pc, #512]	; (8002d38 <extInt_Config+0x4e0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d105      	bne.n	8002b46 <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8002b3a:	4b7e      	ldr	r3, [pc, #504]	; (8002d34 <extInt_Config+0x4dc>)
 8002b3c:	4a7d      	ldr	r2, [pc, #500]	; (8002d34 <extInt_Config+0x4dc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002b42:	f000 bc7a 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a7b      	ldr	r2, [pc, #492]	; (8002d3c <extInt_Config+0x4e4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d107      	bne.n	8002b62 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002b52:	4b78      	ldr	r3, [pc, #480]	; (8002d34 <extInt_Config+0x4dc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4a77      	ldr	r2, [pc, #476]	; (8002d34 <extInt_Config+0x4dc>)
 8002b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b5c:	6093      	str	r3, [r2, #8]
		break;
 8002b5e:	f000 bc6c 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a75      	ldr	r2, [pc, #468]	; (8002d40 <extInt_Config+0x4e8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d107      	bne.n	8002b7e <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002b6e:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <extInt_Config+0x4dc>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	4a70      	ldr	r2, [pc, #448]	; (8002d34 <extInt_Config+0x4dc>)
 8002b74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b78:	6093      	str	r3, [r2, #8]
		break;
 8002b7a:	f000 bc5e 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a6f      	ldr	r2, [pc, #444]	; (8002d44 <extInt_Config+0x4ec>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d107      	bne.n	8002b9a <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8002b8a:	4b6a      	ldr	r3, [pc, #424]	; (8002d34 <extInt_Config+0x4dc>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4a69      	ldr	r2, [pc, #420]	; (8002d34 <extInt_Config+0x4dc>)
 8002b90:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002b94:	6093      	str	r3, [r2, #8]
		break;
 8002b96:	f000 bc50 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <extInt_Config+0x4f0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d107      	bne.n	8002bb6 <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <extInt_Config+0x4dc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	4a62      	ldr	r2, [pc, #392]	; (8002d34 <extInt_Config+0x4dc>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6093      	str	r3, [r2, #8]
		break;
 8002bb2:	f000 bc42 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a5c      	ldr	r2, [pc, #368]	; (8002d30 <extInt_Config+0x4d8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d107      	bne.n	8002bd2 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <extInt_Config+0x4dc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4a5b      	ldr	r2, [pc, #364]	; (8002d34 <extInt_Config+0x4dc>)
 8002bc8:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002bcc:	6093      	str	r3, [r2, #8]
		break;
 8002bce:	f000 bc34 	b.w	800343a <extInt_Config+0xbe2>
			__NOP();
 8002bd2:	bf00      	nop
		break;
 8002bd4:	f000 bc31 	b.w	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8002bd8:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <extInt_Config+0x4dc>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a55      	ldr	r2, [pc, #340]	; (8002d34 <extInt_Config+0x4dc>)
 8002bde:	f023 030f 	bic.w	r3, r3, #15
 8002be2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4a53      	ldr	r2, [pc, #332]	; (8002d38 <extInt_Config+0x4e0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d105      	bne.n	8002bfc <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002bf0:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <extInt_Config+0x4dc>)
 8002bf2:	4a50      	ldr	r2, [pc, #320]	; (8002d34 <extInt_Config+0x4dc>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002bf8:	f000 bc1f 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <extInt_Config+0x4e4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d107      	bne.n	8002c18 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8002c08:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <extInt_Config+0x4dc>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a49      	ldr	r2, [pc, #292]	; (8002d34 <extInt_Config+0x4dc>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	60d3      	str	r3, [r2, #12]
		break;
 8002c14:	f000 bc11 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4a48      	ldr	r2, [pc, #288]	; (8002d40 <extInt_Config+0x4e8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d107      	bne.n	8002c34 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002c24:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <extInt_Config+0x4dc>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <extInt_Config+0x4dc>)
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	60d3      	str	r3, [r2, #12]
		break;
 8002c30:	f000 bc03 	b.w	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4a42      	ldr	r2, [pc, #264]	; (8002d44 <extInt_Config+0x4ec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d106      	bne.n	8002c4e <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002c40:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <extInt_Config+0x4dc>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a3b      	ldr	r2, [pc, #236]	; (8002d34 <extInt_Config+0x4dc>)
 8002c46:	f043 0303 	orr.w	r3, r3, #3
 8002c4a:	60d3      	str	r3, [r2, #12]
		break;
 8002c4c:	e3f5      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	4a3c      	ldr	r2, [pc, #240]	; (8002d48 <extInt_Config+0x4f0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d106      	bne.n	8002c68 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8002c5a:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <extInt_Config+0x4dc>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	4a35      	ldr	r2, [pc, #212]	; (8002d34 <extInt_Config+0x4dc>)
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	60d3      	str	r3, [r2, #12]
		break;
 8002c66:	e3e8      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <extInt_Config+0x4d8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d106      	bne.n	8002c82 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002c74:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <extInt_Config+0x4dc>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a2e      	ldr	r2, [pc, #184]	; (8002d34 <extInt_Config+0x4dc>)
 8002c7a:	f043 0307 	orr.w	r3, r3, #7
 8002c7e:	60d3      	str	r3, [r2, #12]
		break;
 8002c80:	e3db      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 8002c82:	bf00      	nop
		break;
 8002c84:	e3d9      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8002c86:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <extInt_Config+0x4dc>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <extInt_Config+0x4dc>)
 8002c8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c90:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a27      	ldr	r2, [pc, #156]	; (8002d38 <extInt_Config+0x4e0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d104      	bne.n	8002ca8 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002c9e:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <extInt_Config+0x4dc>)
 8002ca0:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <extInt_Config+0x4dc>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002ca6:	e3c8      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <extInt_Config+0x4e4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d106      	bne.n	8002cc2 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <extInt_Config+0x4dc>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a1e      	ldr	r2, [pc, #120]	; (8002d34 <extInt_Config+0x4dc>)
 8002cba:	f043 0310 	orr.w	r3, r3, #16
 8002cbe:	60d3      	str	r3, [r2, #12]
		break;
 8002cc0:	e3bb      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <extInt_Config+0x4e8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d106      	bne.n	8002cdc <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <extInt_Config+0x4dc>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <extInt_Config+0x4dc>)
 8002cd4:	f043 0320 	orr.w	r3, r3, #32
 8002cd8:	60d3      	str	r3, [r2, #12]
		break;
 8002cda:	e3ae      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <extInt_Config+0x4ec>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d106      	bne.n	8002cf6 <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <extInt_Config+0x4dc>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <extInt_Config+0x4dc>)
 8002cee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002cf2:	60d3      	str	r3, [r2, #12]
		break;
 8002cf4:	e3a1      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <extInt_Config+0x4f0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d106      	bne.n	8002d10 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <extInt_Config+0x4dc>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <extInt_Config+0x4dc>)
 8002d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0c:	60d3      	str	r3, [r2, #12]
		break;
 8002d0e:	e394      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <extInt_Config+0x4d8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d106      	bne.n	8002d2a <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <extInt_Config+0x4dc>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <extInt_Config+0x4dc>)
 8002d22:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d26:	60d3      	str	r3, [r2, #12]
		break;
 8002d28:	e387      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 8002d2a:	bf00      	nop
		break;
 8002d2c:	e385      	b.n	800343a <extInt_Config+0xbe2>
 8002d2e:	bf00      	nop
 8002d30:	40021c00 	.word	0x40021c00
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40020800 	.word	0x40020800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8002d4c:	4b86      	ldr	r3, [pc, #536]	; (8002f68 <extInt_Config+0x710>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a85      	ldr	r2, [pc, #532]	; (8002f68 <extInt_Config+0x710>)
 8002d52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d56:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	4a83      	ldr	r2, [pc, #524]	; (8002f6c <extInt_Config+0x714>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d104      	bne.n	8002d6e <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002d64:	4b80      	ldr	r3, [pc, #512]	; (8002f68 <extInt_Config+0x710>)
 8002d66:	4a80      	ldr	r2, [pc, #512]	; (8002f68 <extInt_Config+0x710>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002d6c:	e365      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a7e      	ldr	r2, [pc, #504]	; (8002f70 <extInt_Config+0x718>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d106      	bne.n	8002d88 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8002d7a:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <extInt_Config+0x710>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a7a      	ldr	r2, [pc, #488]	; (8002f68 <extInt_Config+0x710>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	60d3      	str	r3, [r2, #12]
		break;
 8002d86:	e358      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	4a79      	ldr	r2, [pc, #484]	; (8002f74 <extInt_Config+0x71c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d106      	bne.n	8002da2 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002d94:	4b74      	ldr	r3, [pc, #464]	; (8002f68 <extInt_Config+0x710>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a73      	ldr	r2, [pc, #460]	; (8002f68 <extInt_Config+0x710>)
 8002d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9e:	60d3      	str	r3, [r2, #12]
		break;
 8002da0:	e34b      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a73      	ldr	r2, [pc, #460]	; (8002f78 <extInt_Config+0x720>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d106      	bne.n	8002dbc <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002dae:	4b6e      	ldr	r3, [pc, #440]	; (8002f68 <extInt_Config+0x710>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4a6d      	ldr	r2, [pc, #436]	; (8002f68 <extInt_Config+0x710>)
 8002db4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002db8:	60d3      	str	r3, [r2, #12]
		break;
 8002dba:	e33e      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4a6e      	ldr	r2, [pc, #440]	; (8002f7c <extInt_Config+0x724>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d106      	bne.n	8002dd6 <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002dc8:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <extInt_Config+0x710>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <extInt_Config+0x710>)
 8002dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd2:	60d3      	str	r3, [r2, #12]
		break;
 8002dd4:	e331      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a68      	ldr	r2, [pc, #416]	; (8002f80 <extInt_Config+0x728>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d106      	bne.n	8002df0 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8002de2:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <extInt_Config+0x710>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	4a60      	ldr	r2, [pc, #384]	; (8002f68 <extInt_Config+0x710>)
 8002de8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dec:	60d3      	str	r3, [r2, #12]
		break;
 8002dee:	e324      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 8002df0:	bf00      	nop
		break;
 8002df2:	e322      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8002df4:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <extInt_Config+0x710>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a5b      	ldr	r2, [pc, #364]	; (8002f68 <extInt_Config+0x710>)
 8002dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dfe:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4a59      	ldr	r2, [pc, #356]	; (8002f6c <extInt_Config+0x714>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d104      	bne.n	8002e16 <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8002e0c:	4b56      	ldr	r3, [pc, #344]	; (8002f68 <extInt_Config+0x710>)
 8002e0e:	4a56      	ldr	r2, [pc, #344]	; (8002f68 <extInt_Config+0x710>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002e14:	e311      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a54      	ldr	r2, [pc, #336]	; (8002f70 <extInt_Config+0x718>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d106      	bne.n	8002e30 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002e22:	4b51      	ldr	r3, [pc, #324]	; (8002f68 <extInt_Config+0x710>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4a50      	ldr	r2, [pc, #320]	; (8002f68 <extInt_Config+0x710>)
 8002e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e2c:	60d3      	str	r3, [r2, #12]
		break;
 8002e2e:	e304      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <extInt_Config+0x71c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d106      	bne.n	8002e4a <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8002e3c:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <extInt_Config+0x710>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a49      	ldr	r2, [pc, #292]	; (8002f68 <extInt_Config+0x710>)
 8002e42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e46:	60d3      	str	r3, [r2, #12]
		break;
 8002e48:	e2f7      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a49      	ldr	r2, [pc, #292]	; (8002f78 <extInt_Config+0x720>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d106      	bne.n	8002e64 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8002e56:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <extInt_Config+0x710>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4a43      	ldr	r2, [pc, #268]	; (8002f68 <extInt_Config+0x710>)
 8002e5c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002e60:	60d3      	str	r3, [r2, #12]
		break;
 8002e62:	e2ea      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4a44      	ldr	r2, [pc, #272]	; (8002f7c <extInt_Config+0x724>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d106      	bne.n	8002e7e <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002e70:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <extInt_Config+0x710>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a3c      	ldr	r2, [pc, #240]	; (8002f68 <extInt_Config+0x710>)
 8002e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e7a:	60d3      	str	r3, [r2, #12]
		break;
 8002e7c:	e2dd      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4a3e      	ldr	r2, [pc, #248]	; (8002f80 <extInt_Config+0x728>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d106      	bne.n	8002e98 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <extInt_Config+0x710>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4a36      	ldr	r2, [pc, #216]	; (8002f68 <extInt_Config+0x710>)
 8002e90:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002e94:	60d3      	str	r3, [r2, #12]
		break;
 8002e96:	e2d0      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 8002e98:	bf00      	nop
		break;
 8002e9a:	e2ce      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <extInt_Config+0x710>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	4a31      	ldr	r2, [pc, #196]	; (8002f68 <extInt_Config+0x710>)
 8002ea2:	f023 030f 	bic.w	r3, r3, #15
 8002ea6:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <extInt_Config+0x714>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d104      	bne.n	8002ebe <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <extInt_Config+0x710>)
 8002eb6:	4a2c      	ldr	r2, [pc, #176]	; (8002f68 <extInt_Config+0x710>)
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002ebc:	e2bd      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <extInt_Config+0x718>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d106      	bne.n	8002ed8 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8002eca:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <extInt_Config+0x710>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <extInt_Config+0x710>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6113      	str	r3, [r2, #16]
		break;
 8002ed6:	e2b0      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <extInt_Config+0x71c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d106      	bne.n	8002ef2 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 8002ee4:	4b20      	ldr	r3, [pc, #128]	; (8002f68 <extInt_Config+0x710>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <extInt_Config+0x710>)
 8002eea:	f043 0302 	orr.w	r3, r3, #2
 8002eee:	6113      	str	r3, [r2, #16]
		break;
 8002ef0:	e2a3      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <extInt_Config+0x720>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d106      	bne.n	8002f0c <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8002efe:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <extInt_Config+0x710>)
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <extInt_Config+0x710>)
 8002f04:	f043 0303 	orr.w	r3, r3, #3
 8002f08:	6113      	str	r3, [r2, #16]
		break;
 8002f0a:	e296      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <extInt_Config+0x724>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d106      	bne.n	8002f26 <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <extInt_Config+0x710>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <extInt_Config+0x710>)
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	6113      	str	r3, [r2, #16]
		break;
 8002f24:	e289      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <extInt_Config+0x728>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d106      	bne.n	8002f40 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <extInt_Config+0x710>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	4a0c      	ldr	r2, [pc, #48]	; (8002f68 <extInt_Config+0x710>)
 8002f38:	f043 0307 	orr.w	r3, r3, #7
 8002f3c:	6113      	str	r3, [r2, #16]
		break;
 8002f3e:	e27c      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 8002f40:	bf00      	nop
		break;
 8002f42:	e27a      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <extInt_Config+0x710>)
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <extInt_Config+0x710>)
 8002f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f4e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <extInt_Config+0x714>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d113      	bne.n	8002f84 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002f5c:	4b02      	ldr	r3, [pc, #8]	; (8002f68 <extInt_Config+0x710>)
 8002f5e:	4a02      	ldr	r2, [pc, #8]	; (8002f68 <extInt_Config+0x710>)
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002f64:	e269      	b.n	800343a <extInt_Config+0xbe2>
 8002f66:	bf00      	nop
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	4a83      	ldr	r2, [pc, #524]	; (8003198 <extInt_Config+0x940>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d106      	bne.n	8002f9e <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002f90:	4b82      	ldr	r3, [pc, #520]	; (800319c <extInt_Config+0x944>)
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	4a81      	ldr	r2, [pc, #516]	; (800319c <extInt_Config+0x944>)
 8002f96:	f043 0310 	orr.w	r3, r3, #16
 8002f9a:	6113      	str	r3, [r2, #16]
		break;
 8002f9c:	e24d      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a7e      	ldr	r2, [pc, #504]	; (80031a0 <extInt_Config+0x948>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d106      	bne.n	8002fb8 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002faa:	4b7c      	ldr	r3, [pc, #496]	; (800319c <extInt_Config+0x944>)
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	4a7b      	ldr	r2, [pc, #492]	; (800319c <extInt_Config+0x944>)
 8002fb0:	f043 0320 	orr.w	r3, r3, #32
 8002fb4:	6113      	str	r3, [r2, #16]
		break;
 8002fb6:	e240      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4a79      	ldr	r2, [pc, #484]	; (80031a4 <extInt_Config+0x94c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d106      	bne.n	8002fd2 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002fc4:	4b75      	ldr	r3, [pc, #468]	; (800319c <extInt_Config+0x944>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	4a74      	ldr	r2, [pc, #464]	; (800319c <extInt_Config+0x944>)
 8002fca:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002fce:	6113      	str	r3, [r2, #16]
		break;
 8002fd0:	e233      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a73      	ldr	r2, [pc, #460]	; (80031a8 <extInt_Config+0x950>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d106      	bne.n	8002fec <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002fde:	4b6f      	ldr	r3, [pc, #444]	; (800319c <extInt_Config+0x944>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	4a6e      	ldr	r2, [pc, #440]	; (800319c <extInt_Config+0x944>)
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe8:	6113      	str	r3, [r2, #16]
		break;
 8002fea:	e226      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	4a6e      	ldr	r2, [pc, #440]	; (80031ac <extInt_Config+0x954>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d106      	bne.n	8003006 <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002ff8:	4b68      	ldr	r3, [pc, #416]	; (800319c <extInt_Config+0x944>)
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	4a67      	ldr	r2, [pc, #412]	; (800319c <extInt_Config+0x944>)
 8002ffe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003002:	6113      	str	r3, [r2, #16]
		break;
 8003004:	e219      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 8003006:	bf00      	nop
		break;
 8003008:	e217      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 800300a:	4b64      	ldr	r3, [pc, #400]	; (800319c <extInt_Config+0x944>)
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	4a63      	ldr	r2, [pc, #396]	; (800319c <extInt_Config+0x944>)
 8003010:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003014:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a64      	ldr	r2, [pc, #400]	; (80031b0 <extInt_Config+0x958>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d104      	bne.n	800302c <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8003022:	4b5e      	ldr	r3, [pc, #376]	; (800319c <extInt_Config+0x944>)
 8003024:	4a5d      	ldr	r2, [pc, #372]	; (800319c <extInt_Config+0x944>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800302a:	e206      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4a59      	ldr	r2, [pc, #356]	; (8003198 <extInt_Config+0x940>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d106      	bne.n	8003046 <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <extInt_Config+0x944>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	4a57      	ldr	r2, [pc, #348]	; (800319c <extInt_Config+0x944>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6113      	str	r3, [r2, #16]
		break;
 8003044:	e1f9      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4a54      	ldr	r2, [pc, #336]	; (80031a0 <extInt_Config+0x948>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d106      	bne.n	8003060 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003052:	4b52      	ldr	r3, [pc, #328]	; (800319c <extInt_Config+0x944>)
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	4a51      	ldr	r2, [pc, #324]	; (800319c <extInt_Config+0x944>)
 8003058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305c:	6113      	str	r3, [r2, #16]
		break;
 800305e:	e1ec      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a4f      	ldr	r2, [pc, #316]	; (80031a4 <extInt_Config+0x94c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d106      	bne.n	800307a <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <extInt_Config+0x944>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4a4a      	ldr	r2, [pc, #296]	; (800319c <extInt_Config+0x944>)
 8003072:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003076:	6113      	str	r3, [r2, #16]
		break;
 8003078:	e1df      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <extInt_Config+0x950>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d106      	bne.n	8003094 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8003086:	4b45      	ldr	r3, [pc, #276]	; (800319c <extInt_Config+0x944>)
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	4a44      	ldr	r2, [pc, #272]	; (800319c <extInt_Config+0x944>)
 800308c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003090:	6113      	str	r3, [r2, #16]
		break;
 8003092:	e1d2      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	4a44      	ldr	r2, [pc, #272]	; (80031ac <extInt_Config+0x954>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d106      	bne.n	80030ae <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 80030a0:	4b3e      	ldr	r3, [pc, #248]	; (800319c <extInt_Config+0x944>)
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	4a3d      	ldr	r2, [pc, #244]	; (800319c <extInt_Config+0x944>)
 80030a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030aa:	6113      	str	r3, [r2, #16]
		break;
 80030ac:	e1c5      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 80030ae:	bf00      	nop
		break;
 80030b0:	e1c3      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 80030b2:	4b3a      	ldr	r3, [pc, #232]	; (800319c <extInt_Config+0x944>)
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	4a39      	ldr	r2, [pc, #228]	; (800319c <extInt_Config+0x944>)
 80030b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030bc:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a3a      	ldr	r2, [pc, #232]	; (80031b0 <extInt_Config+0x958>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d104      	bne.n	80030d4 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 80030ca:	4b34      	ldr	r3, [pc, #208]	; (800319c <extInt_Config+0x944>)
 80030cc:	4a33      	ldr	r2, [pc, #204]	; (800319c <extInt_Config+0x944>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80030d2:	e1b2      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <extInt_Config+0x940>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d106      	bne.n	80030ee <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80030e0:	4b2e      	ldr	r3, [pc, #184]	; (800319c <extInt_Config+0x944>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4a2d      	ldr	r2, [pc, #180]	; (800319c <extInt_Config+0x944>)
 80030e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ea:	6113      	str	r3, [r2, #16]
		break;
 80030ec:	e1a5      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <extInt_Config+0x948>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d106      	bne.n	8003108 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80030fa:	4b28      	ldr	r3, [pc, #160]	; (800319c <extInt_Config+0x944>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	4a27      	ldr	r2, [pc, #156]	; (800319c <extInt_Config+0x944>)
 8003100:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003104:	6113      	str	r3, [r2, #16]
		break;
 8003106:	e198      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <extInt_Config+0x94c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d106      	bne.n	8003122 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8003114:	4b21      	ldr	r3, [pc, #132]	; (800319c <extInt_Config+0x944>)
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	4a20      	ldr	r2, [pc, #128]	; (800319c <extInt_Config+0x944>)
 800311a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800311e:	6113      	str	r3, [r2, #16]
		break;
 8003120:	e18b      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <extInt_Config+0x950>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d106      	bne.n	800313c <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <extInt_Config+0x944>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	4a1a      	ldr	r2, [pc, #104]	; (800319c <extInt_Config+0x944>)
 8003134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003138:	6113      	str	r3, [r2, #16]
		break;
 800313a:	e17e      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <extInt_Config+0x954>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d106      	bne.n	8003156 <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8003148:	4b14      	ldr	r3, [pc, #80]	; (800319c <extInt_Config+0x944>)
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <extInt_Config+0x944>)
 800314e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003152:	6113      	str	r3, [r2, #16]
		break;
 8003154:	e171      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 8003156:	bf00      	nop
		break;
 8003158:	e16f      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800315a:	4b10      	ldr	r3, [pc, #64]	; (800319c <extInt_Config+0x944>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4a0f      	ldr	r2, [pc, #60]	; (800319c <extInt_Config+0x944>)
 8003160:	f023 030f 	bic.w	r3, r3, #15
 8003164:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <extInt_Config+0x958>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d104      	bne.n	800317c <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <extInt_Config+0x944>)
 8003174:	4a09      	ldr	r2, [pc, #36]	; (800319c <extInt_Config+0x944>)
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800317a:	e15e      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <extInt_Config+0x940>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d115      	bne.n	80031b4 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <extInt_Config+0x944>)
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	4a03      	ldr	r2, [pc, #12]	; (800319c <extInt_Config+0x944>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6153      	str	r3, [r2, #20]
		break;
 8003194:	e151      	b.n	800343a <extInt_Config+0xbe2>
 8003196:	bf00      	nop
 8003198:	40020400 	.word	0x40020400
 800319c:	40013800 	.word	0x40013800
 80031a0:	40020800 	.word	0x40020800
 80031a4:	40020c00 	.word	0x40020c00
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40021c00 	.word	0x40021c00
 80031b0:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4a83      	ldr	r2, [pc, #524]	; (80033c8 <extInt_Config+0xb70>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d106      	bne.n	80031ce <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 80031c0:	4b82      	ldr	r3, [pc, #520]	; (80033cc <extInt_Config+0xb74>)
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	4a81      	ldr	r2, [pc, #516]	; (80033cc <extInt_Config+0xb74>)
 80031c6:	f043 0302 	orr.w	r3, r3, #2
 80031ca:	6153      	str	r3, [r2, #20]
		break;
 80031cc:	e135      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a7e      	ldr	r2, [pc, #504]	; (80033d0 <extInt_Config+0xb78>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d106      	bne.n	80031e8 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 80031da:	4b7c      	ldr	r3, [pc, #496]	; (80033cc <extInt_Config+0xb74>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	4a7b      	ldr	r2, [pc, #492]	; (80033cc <extInt_Config+0xb74>)
 80031e0:	f043 0303 	orr.w	r3, r3, #3
 80031e4:	6153      	str	r3, [r2, #20]
		break;
 80031e6:	e128      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <extInt_Config+0xb7c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d106      	bne.n	8003202 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80031f4:	4b75      	ldr	r3, [pc, #468]	; (80033cc <extInt_Config+0xb74>)
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	4a74      	ldr	r2, [pc, #464]	; (80033cc <extInt_Config+0xb74>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6153      	str	r3, [r2, #20]
		break;
 8003200:	e11b      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a73      	ldr	r2, [pc, #460]	; (80033d8 <extInt_Config+0xb80>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d106      	bne.n	800321c <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 800320e:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <extInt_Config+0xb74>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <extInt_Config+0xb74>)
 8003214:	f043 0307 	orr.w	r3, r3, #7
 8003218:	6153      	str	r3, [r2, #20]
		break;
 800321a:	e10e      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 800321c:	bf00      	nop
		break;
 800321e:	e10c      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8003220:	4b6a      	ldr	r3, [pc, #424]	; (80033cc <extInt_Config+0xb74>)
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	4a69      	ldr	r2, [pc, #420]	; (80033cc <extInt_Config+0xb74>)
 8003226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800322a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4a6a      	ldr	r2, [pc, #424]	; (80033dc <extInt_Config+0xb84>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d104      	bne.n	8003242 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8003238:	4b64      	ldr	r3, [pc, #400]	; (80033cc <extInt_Config+0xb74>)
 800323a:	4a64      	ldr	r2, [pc, #400]	; (80033cc <extInt_Config+0xb74>)
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003240:	e0fb      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <extInt_Config+0xb88>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d106      	bne.n	800325c <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 800324e:	4b5f      	ldr	r3, [pc, #380]	; (80033cc <extInt_Config+0xb74>)
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	4a5e      	ldr	r2, [pc, #376]	; (80033cc <extInt_Config+0xb74>)
 8003254:	f043 0310 	orr.w	r3, r3, #16
 8003258:	6153      	str	r3, [r2, #20]
		break;
 800325a:	e0ee      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	4a59      	ldr	r2, [pc, #356]	; (80033c8 <extInt_Config+0xb70>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d106      	bne.n	8003276 <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8003268:	4b58      	ldr	r3, [pc, #352]	; (80033cc <extInt_Config+0xb74>)
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	4a57      	ldr	r2, [pc, #348]	; (80033cc <extInt_Config+0xb74>)
 800326e:	f043 0320 	orr.w	r3, r3, #32
 8003272:	6153      	str	r3, [r2, #20]
		break;
 8003274:	e0e1      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a54      	ldr	r2, [pc, #336]	; (80033d0 <extInt_Config+0xb78>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d106      	bne.n	8003290 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8003282:	4b52      	ldr	r3, [pc, #328]	; (80033cc <extInt_Config+0xb74>)
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	4a51      	ldr	r2, [pc, #324]	; (80033cc <extInt_Config+0xb74>)
 8003288:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800328c:	6153      	str	r3, [r2, #20]
		break;
 800328e:	e0d4      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	4a4f      	ldr	r2, [pc, #316]	; (80033d4 <extInt_Config+0xb7c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d106      	bne.n	80032aa <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 800329c:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <extInt_Config+0xb74>)
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	4a4a      	ldr	r2, [pc, #296]	; (80033cc <extInt_Config+0xb74>)
 80032a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a6:	6153      	str	r3, [r2, #20]
		break;
 80032a8:	e0c7      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a49      	ldr	r2, [pc, #292]	; (80033d8 <extInt_Config+0xb80>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d106      	bne.n	80032c4 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 80032b6:	4b45      	ldr	r3, [pc, #276]	; (80033cc <extInt_Config+0xb74>)
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	4a44      	ldr	r2, [pc, #272]	; (80033cc <extInt_Config+0xb74>)
 80032bc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80032c0:	6153      	str	r3, [r2, #20]
		break;
 80032c2:	e0ba      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 80032c4:	bf00      	nop
		break;
 80032c6:	e0b8      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 80032c8:	4b40      	ldr	r3, [pc, #256]	; (80033cc <extInt_Config+0xb74>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	4a3f      	ldr	r2, [pc, #252]	; (80033cc <extInt_Config+0xb74>)
 80032ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032d2:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4a40      	ldr	r2, [pc, #256]	; (80033dc <extInt_Config+0xb84>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d104      	bne.n	80032ea <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80032e0:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <extInt_Config+0xb74>)
 80032e2:	4a3a      	ldr	r2, [pc, #232]	; (80033cc <extInt_Config+0xb74>)
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80032e8:	e0a7      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a3b      	ldr	r2, [pc, #236]	; (80033e0 <extInt_Config+0xb88>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d106      	bne.n	8003304 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80032f6:	4b35      	ldr	r3, [pc, #212]	; (80033cc <extInt_Config+0xb74>)
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4a34      	ldr	r2, [pc, #208]	; (80033cc <extInt_Config+0xb74>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6153      	str	r3, [r2, #20]
		break;
 8003302:	e09a      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <extInt_Config+0xb70>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d106      	bne.n	800331e <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8003310:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <extInt_Config+0xb74>)
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	4a2d      	ldr	r2, [pc, #180]	; (80033cc <extInt_Config+0xb74>)
 8003316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800331a:	6153      	str	r3, [r2, #20]
		break;
 800331c:	e08d      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <extInt_Config+0xb78>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d106      	bne.n	8003338 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 800332a:	4b28      	ldr	r3, [pc, #160]	; (80033cc <extInt_Config+0xb74>)
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4a27      	ldr	r2, [pc, #156]	; (80033cc <extInt_Config+0xb74>)
 8003330:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003334:	6153      	str	r3, [r2, #20]
		break;
 8003336:	e080      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <extInt_Config+0xb7c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d106      	bne.n	8003352 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003344:	4b21      	ldr	r3, [pc, #132]	; (80033cc <extInt_Config+0xb74>)
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	4a20      	ldr	r2, [pc, #128]	; (80033cc <extInt_Config+0xb74>)
 800334a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800334e:	6153      	str	r3, [r2, #20]
		break;
 8003350:	e073      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a1f      	ldr	r2, [pc, #124]	; (80033d8 <extInt_Config+0xb80>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d106      	bne.n	800336c <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <extInt_Config+0xb74>)
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <extInt_Config+0xb74>)
 8003364:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003368:	6153      	str	r3, [r2, #20]
		break;
 800336a:	e066      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 800336c:	bf00      	nop
		break;
 800336e:	e064      	b.n	800343a <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <extInt_Config+0xb74>)
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	4a15      	ldr	r2, [pc, #84]	; (80033cc <extInt_Config+0xb74>)
 8003376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800337a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <extInt_Config+0xb84>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d104      	bne.n	8003392 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <extInt_Config+0xb74>)
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <extInt_Config+0xb74>)
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003390:	e053      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a11      	ldr	r2, [pc, #68]	; (80033e0 <extInt_Config+0xb88>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d106      	bne.n	80033ac <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <extInt_Config+0xb74>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <extInt_Config+0xb74>)
 80033a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033a8:	6153      	str	r3, [r2, #20]
		break;
 80033aa:	e046      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <extInt_Config+0xb70>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d115      	bne.n	80033e4 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <extInt_Config+0xb74>)
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <extInt_Config+0xb74>)
 80033be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033c2:	6153      	str	r3, [r2, #20]
		break;
 80033c4:	e039      	b.n	800343a <extInt_Config+0xbe2>
 80033c6:	bf00      	nop
 80033c8:	40020800 	.word	0x40020800
 80033cc:	40013800 	.word	0x40013800
 80033d0:	40020c00 	.word	0x40020c00
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40021c00 	.word	0x40021c00
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	4a9d      	ldr	r2, [pc, #628]	; (8003660 <extInt_Config+0xe08>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d106      	bne.n	80033fe <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80033f0:	4b9c      	ldr	r3, [pc, #624]	; (8003664 <extInt_Config+0xe0c>)
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	4a9b      	ldr	r2, [pc, #620]	; (8003664 <extInt_Config+0xe0c>)
 80033f6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80033fa:	6153      	str	r3, [r2, #20]
		break;
 80033fc:	e01d      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a98      	ldr	r2, [pc, #608]	; (8003668 <extInt_Config+0xe10>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d106      	bne.n	8003418 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 800340a:	4b96      	ldr	r3, [pc, #600]	; (8003664 <extInt_Config+0xe0c>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4a95      	ldr	r2, [pc, #596]	; (8003664 <extInt_Config+0xe0c>)
 8003410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003414:	6153      	str	r3, [r2, #20]
		break;
 8003416:	e010      	b.n	800343a <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4a93      	ldr	r2, [pc, #588]	; (800366c <extInt_Config+0xe14>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d106      	bne.n	8003432 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8003424:	4b8f      	ldr	r3, [pc, #572]	; (8003664 <extInt_Config+0xe0c>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	4a8e      	ldr	r2, [pc, #568]	; (8003664 <extInt_Config+0xe0c>)
 800342a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800342e:	6153      	str	r3, [r2, #20]
		break;
 8003430:	e003      	b.n	800343a <extInt_Config+0xbe2>
			__NOP();
 8003432:	bf00      	nop
		break;
 8003434:	e001      	b.n	800343a <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8003436:	bf00      	nop
		break;
 8003438:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d126      	bne.n	8003490 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003442:	4b8b      	ldr	r3, [pc, #556]	; (8003670 <extInt_Config+0xe18>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	7812      	ldrb	r2, [r2, #0]
 800344c:	4611      	mov	r1, r2
 800344e:	2201      	movs	r2, #1
 8003450:	408a      	lsls	r2, r1
 8003452:	43d2      	mvns	r2, r2
 8003454:	4611      	mov	r1, r2
 8003456:	4a86      	ldr	r2, [pc, #536]	; (8003670 <extInt_Config+0xe18>)
 8003458:	400b      	ands	r3, r1
 800345a:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800345c:	4b84      	ldr	r3, [pc, #528]	; (8003670 <extInt_Config+0xe18>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	4611      	mov	r1, r2
 8003468:	2201      	movs	r2, #1
 800346a:	408a      	lsls	r2, r1
 800346c:	43d2      	mvns	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	4a7f      	ldr	r2, [pc, #508]	; (8003670 <extInt_Config+0xe18>)
 8003472:	400b      	ands	r3, r1
 8003474:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003476:	4b7e      	ldr	r3, [pc, #504]	; (8003670 <extInt_Config+0xe18>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	7812      	ldrb	r2, [r2, #0]
 8003480:	4611      	mov	r1, r2
 8003482:	2201      	movs	r2, #1
 8003484:	408a      	lsls	r2, r1
 8003486:	4611      	mov	r1, r2
 8003488:	4a79      	ldr	r2, [pc, #484]	; (8003670 <extInt_Config+0xe18>)
 800348a:	430b      	orrs	r3, r1
 800348c:	6093      	str	r3, [r2, #8]
 800348e:	e05c      	b.n	800354a <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	791b      	ldrb	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d126      	bne.n	80034e6 <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003498:	4b75      	ldr	r3, [pc, #468]	; (8003670 <extInt_Config+0xe18>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	4611      	mov	r1, r2
 80034a4:	2201      	movs	r2, #1
 80034a6:	408a      	lsls	r2, r1
 80034a8:	43d2      	mvns	r2, r2
 80034aa:	4611      	mov	r1, r2
 80034ac:	4a70      	ldr	r2, [pc, #448]	; (8003670 <extInt_Config+0xe18>)
 80034ae:	400b      	ands	r3, r1
 80034b0:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80034b2:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <extInt_Config+0xe18>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	7812      	ldrb	r2, [r2, #0]
 80034bc:	4611      	mov	r1, r2
 80034be:	2201      	movs	r2, #1
 80034c0:	408a      	lsls	r2, r1
 80034c2:	43d2      	mvns	r2, r2
 80034c4:	4611      	mov	r1, r2
 80034c6:	4a6a      	ldr	r2, [pc, #424]	; (8003670 <extInt_Config+0xe18>)
 80034c8:	400b      	ands	r3, r1
 80034ca:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80034cc:	4b68      	ldr	r3, [pc, #416]	; (8003670 <extInt_Config+0xe18>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	7812      	ldrb	r2, [r2, #0]
 80034d6:	4611      	mov	r1, r2
 80034d8:	2201      	movs	r2, #1
 80034da:	408a      	lsls	r2, r1
 80034dc:	4611      	mov	r1, r2
 80034de:	4a64      	ldr	r2, [pc, #400]	; (8003670 <extInt_Config+0xe18>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	60d3      	str	r3, [r2, #12]
 80034e4:	e031      	b.n	800354a <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80034e6:	4b62      	ldr	r3, [pc, #392]	; (8003670 <extInt_Config+0xe18>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	7812      	ldrb	r2, [r2, #0]
 80034f0:	4611      	mov	r1, r2
 80034f2:	2201      	movs	r2, #1
 80034f4:	408a      	lsls	r2, r1
 80034f6:	43d2      	mvns	r2, r2
 80034f8:	4611      	mov	r1, r2
 80034fa:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <extInt_Config+0xe18>)
 80034fc:	400b      	ands	r3, r1
 80034fe:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003500:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <extInt_Config+0xe18>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	7812      	ldrb	r2, [r2, #0]
 800350a:	4611      	mov	r1, r2
 800350c:	2201      	movs	r2, #1
 800350e:	408a      	lsls	r2, r1
 8003510:	43d2      	mvns	r2, r2
 8003512:	4611      	mov	r1, r2
 8003514:	4a56      	ldr	r2, [pc, #344]	; (8003670 <extInt_Config+0xe18>)
 8003516:	400b      	ands	r3, r1
 8003518:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800351a:	4b55      	ldr	r3, [pc, #340]	; (8003670 <extInt_Config+0xe18>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	7812      	ldrb	r2, [r2, #0]
 8003524:	4611      	mov	r1, r2
 8003526:	2201      	movs	r2, #1
 8003528:	408a      	lsls	r2, r1
 800352a:	4611      	mov	r1, r2
 800352c:	4a50      	ldr	r2, [pc, #320]	; (8003670 <extInt_Config+0xe18>)
 800352e:	430b      	orrs	r3, r1
 8003530:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003532:	4b4f      	ldr	r3, [pc, #316]	; (8003670 <extInt_Config+0xe18>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	7812      	ldrb	r2, [r2, #0]
 800353c:	4611      	mov	r1, r2
 800353e:	2201      	movs	r2, #1
 8003540:	408a      	lsls	r2, r1
 8003542:	4611      	mov	r1, r2
 8003544:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <extInt_Config+0xe18>)
 8003546:	430b      	orrs	r3, r1
 8003548:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800354a:	4b49      	ldr	r3, [pc, #292]	; (8003670 <extInt_Config+0xe18>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	7812      	ldrb	r2, [r2, #0]
 8003554:	4611      	mov	r1, r2
 8003556:	2201      	movs	r2, #1
 8003558:	408a      	lsls	r2, r1
 800355a:	43d2      	mvns	r2, r2
 800355c:	4611      	mov	r1, r2
 800355e:	4a44      	ldr	r2, [pc, #272]	; (8003670 <extInt_Config+0xe18>)
 8003560:	400b      	ands	r3, r1
 8003562:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <extInt_Config+0xe18>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	4611      	mov	r1, r2
 8003570:	2201      	movs	r2, #1
 8003572:	408a      	lsls	r2, r1
 8003574:	4611      	mov	r1, r2
 8003576:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <extInt_Config+0xe18>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800357c:	b672      	cpsid	i
}
 800357e:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d862      	bhi.n	8003650 <extInt_Config+0xdf8>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <extInt_Config+0xd38>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035d1 	.word	0x080035d1
 8003594:	080035d9 	.word	0x080035d9
 8003598:	080035e1 	.word	0x080035e1
 800359c:	080035e9 	.word	0x080035e9
 80035a0:	080035f1 	.word	0x080035f1
 80035a4:	080035f9 	.word	0x080035f9
 80035a8:	08003601 	.word	0x08003601
 80035ac:	08003609 	.word	0x08003609
 80035b0:	08003611 	.word	0x08003611
 80035b4:	08003619 	.word	0x08003619
 80035b8:	08003621 	.word	0x08003621
 80035bc:	08003629 	.word	0x08003629
 80035c0:	08003631 	.word	0x08003631
 80035c4:	08003639 	.word	0x08003639
 80035c8:	08003641 	.word	0x08003641
 80035cc:	08003649 	.word	0x08003649
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 80035d0:	2006      	movs	r0, #6
 80035d2:	f7ff f923 	bl	800281c <__NVIC_EnableIRQ>
		break;
 80035d6:	e03c      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 80035d8:	2007      	movs	r0, #7
 80035da:	f7ff f91f 	bl	800281c <__NVIC_EnableIRQ>
		break;
 80035de:	e038      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80035e0:	2008      	movs	r0, #8
 80035e2:	f7ff f91b 	bl	800281c <__NVIC_EnableIRQ>
		break;
 80035e6:	e034      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80035e8:	2009      	movs	r0, #9
 80035ea:	f7ff f917 	bl	800281c <__NVIC_EnableIRQ>
		break;
 80035ee:	e030      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80035f0:	200a      	movs	r0, #10
 80035f2:	f7ff f913 	bl	800281c <__NVIC_EnableIRQ>
		break;
 80035f6:	e02c      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80035f8:	2017      	movs	r0, #23
 80035fa:	f7ff f90f 	bl	800281c <__NVIC_EnableIRQ>
		break;
 80035fe:	e028      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003600:	2017      	movs	r0, #23
 8003602:	f7ff f90b 	bl	800281c <__NVIC_EnableIRQ>
		break;
 8003606:	e024      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003608:	2017      	movs	r0, #23
 800360a:	f7ff f907 	bl	800281c <__NVIC_EnableIRQ>
		break;
 800360e:	e020      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003610:	2017      	movs	r0, #23
 8003612:	f7ff f903 	bl	800281c <__NVIC_EnableIRQ>
		break;
 8003616:	e01c      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003618:	2017      	movs	r0, #23
 800361a:	f7ff f8ff 	bl	800281c <__NVIC_EnableIRQ>
		break;
 800361e:	e018      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003620:	2028      	movs	r0, #40	; 0x28
 8003622:	f7ff f8fb 	bl	800281c <__NVIC_EnableIRQ>
		break;
 8003626:	e014      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003628:	2028      	movs	r0, #40	; 0x28
 800362a:	f7ff f8f7 	bl	800281c <__NVIC_EnableIRQ>
		break;
 800362e:	e010      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003630:	2028      	movs	r0, #40	; 0x28
 8003632:	f7ff f8f3 	bl	800281c <__NVIC_EnableIRQ>
		break;
 8003636:	e00c      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003638:	2028      	movs	r0, #40	; 0x28
 800363a:	f7ff f8ef 	bl	800281c <__NVIC_EnableIRQ>
		break;
 800363e:	e008      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003640:	2028      	movs	r0, #40	; 0x28
 8003642:	f7ff f8eb 	bl	800281c <__NVIC_EnableIRQ>
		break;
 8003646:	e004      	b.n	8003652 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003648:	2028      	movs	r0, #40	; 0x28
 800364a:	f7ff f8e7 	bl	800281c <__NVIC_EnableIRQ>
		break;
 800364e:	e000      	b.n	8003652 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8003650:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003652:	b662      	cpsie	i
}
 8003654:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40020c00 	.word	0x40020c00
 8003664:	40013800 	.word	0x40013800
 8003668:	40021000 	.word	0x40021000
 800366c:	40021c00 	.word	0x40021c00
 8003670:	40013c00 	.word	0x40013c00

08003674 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	__NOP();
 8003678:	bf00      	nop
}
 800367a:	bf00      	nop
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
	__NOP();
 8003688:	bf00      	nop
}
 800368a:	bf00      	nop
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
	__NOP();
 8003698:	bf00      	nop
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
	__NOP();
 80036a8:	bf00      	nop
}
 80036aa:	bf00      	nop
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
	__NOP();
 80036b8:	bf00      	nop
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
	__NOP();
 80036c8:	bf00      	nop
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
	__NOP();
 80036d8:	bf00      	nop
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
	__NOP();
 80036e8:	bf00      	nop
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
	__NOP();
 80036f8:	bf00      	nop
}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
	__NOP();
 8003708:	bf00      	nop
}
 800370a:	bf00      	nop
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
	__NOP();
 8003718:	bf00      	nop
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
	__NOP();
 8003728:	bf00      	nop
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
	__NOP();
 8003738:	bf00      	nop
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
	__NOP();
 8003748:	bf00      	nop
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <EXTI0_IRQHandler+0x28>)
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <EXTI0_IRQHandler+0x28>)
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <EXTI0_IRQHandler+0x28>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003770:	f7ff ff80 	bl	8003674 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8003774:	e000      	b.n	8003778 <EXTI0_IRQHandler+0x24>
		__NOP();
 8003776:	bf00      	nop
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40013c00 	.word	0x40013c00

08003780 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <EXTI1_IRQHandler+0x28>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <EXTI1_IRQHandler+0x28>)
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <EXTI1_IRQHandler+0x28>)
 8003796:	f043 0302 	orr.w	r3, r3, #2
 800379a:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 800379c:	f7fe f8b4 	bl	8001908 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 80037a0:	e000      	b.n	80037a4 <EXTI1_IRQHandler+0x24>
		__NOP();
 80037a2:	bf00      	nop
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40013c00 	.word	0x40013c00

080037ac <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <EXTI2_IRQHandler+0x28>)
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <EXTI2_IRQHandler+0x28>)
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <EXTI2_IRQHandler+0x28>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 80037c8:	f7ff ff5c 	bl	8003684 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 80037cc:	e000      	b.n	80037d0 <EXTI2_IRQHandler+0x24>
		__NOP();
 80037ce:	bf00      	nop
}
 80037d0:	bf00      	nop
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <EXTI3_IRQHandler+0x28>)
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <EXTI3_IRQHandler+0x28>)
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <EXTI3_IRQHandler+0x28>)
 80037ee:	f043 0308 	orr.w	r3, r3, #8
 80037f2:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80037f4:	f7fe f8da 	bl	80019ac <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80037f8:	e000      	b.n	80037fc <EXTI3_IRQHandler+0x24>
		__NOP();
 80037fa:	bf00      	nop
}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40013c00 	.word	0x40013c00

08003804 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8003808:	4b08      	ldr	r3, [pc, #32]	; (800382c <EXTI4_IRQHandler+0x28>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <EXTI4_IRQHandler+0x28>)
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4a04      	ldr	r2, [pc, #16]	; (800382c <EXTI4_IRQHandler+0x28>)
 800381a:	f043 0310 	orr.w	r3, r3, #16
 800381e:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8003820:	f7ff ff38 	bl	8003694 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8003824:	e000      	b.n	8003828 <EXTI4_IRQHandler+0x24>
		__NOP();
 8003826:	bf00      	nop
}
 8003828:	bf00      	nop
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40013c00 	.word	0x40013c00

08003830 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8003840:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003846:	f043 0320 	orr.w	r3, r3, #32
 800384a:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 800384c:	f7ff ff2a 	bl	80036a4 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8003850:	e03c      	b.n	80038cc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	4a1b      	ldr	r2, [pc, #108]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003868:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800386a:	f7ff ff23 	bl	80036b4 <callback_extInt6>
}
 800386e:	e02d      	b.n	80038cc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003886:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8003888:	f7ff ff1c 	bl	80036c4 <callback_extInt7>
}
 800388c:	e01e      	b.n	80038cc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 800388e:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	4a0c      	ldr	r2, [pc, #48]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 80038a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a4:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 80038a6:	f7ff ff15 	bl	80036d4 <callback_extInt8>
}
 80038aa:	e00f      	b.n	80038cc <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <EXTI9_5_IRQHandler+0xa0>)
 80038be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c2:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 80038c4:	f7ff ff0e 	bl	80036e4 <callback_extInt9>
}
 80038c8:	e000      	b.n	80038cc <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 80038ca:	bf00      	nop
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40013c00 	.word	0x40013c00

080038d4 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 80038d8:	4b2e      	ldr	r3, [pc, #184]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80038e4:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 80038ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ee:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80038f0:	f7ff ff00 	bl	80036f4 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80038f4:	e04b      	b.n	800398e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80038f6:	4b27      	ldr	r3, [pc, #156]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4a23      	ldr	r2, [pc, #140]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800390c:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 800390e:	f7ff fef9 	bl	8003704 <callback_extInt11>
}
 8003912:	e03c      	b.n	800398e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800392a:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 800392c:	f7ff fef2 	bl	8003714 <callback_extInt12>
}
 8003930:	e02d      	b.n	800398e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4a14      	ldr	r2, [pc, #80]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003944:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003948:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800394a:	f7ff feeb 	bl	8003724 <callback_extInt13>
}
 800394e:	e01e      	b.n	800398e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003966:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8003968:	f7ff fee4 	bl	8003734 <callback_extInt14>
}
 800396c:	e00f      	b.n	800398e <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4a05      	ldr	r2, [pc, #20]	; (8003994 <EXTI15_10_IRQHandler+0xc0>)
 8003980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003984:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8003986:	f7ff fedd 	bl	8003744 <callback_extInt15>
}
 800398a:	e000      	b.n	800398e <EXTI15_10_IRQHandler+0xba>
		__NOP();
 800398c:	bf00      	nop
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40013c00 	.word	0x40013c00

08003998 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	4608      	mov	r0, r1
 80039a2:	4611      	mov	r1, r2
 80039a4:	461a      	mov	r2, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	70fb      	strb	r3, [r7, #3]
 80039aa:	460b      	mov	r3, r1
 80039ac:	70bb      	strb	r3, [r7, #2]
 80039ae:	4613      	mov	r3, r2
 80039b0:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	787a      	ldrb	r2, [r7, #1]
 80039c2:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7c3a      	ldrb	r2, [r7, #16]
 80039c8:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7d3a      	ldrb	r2, [r7, #20]
 80039ce:	715a      	strb	r2, [r3, #5]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4a88      	ldr	r2, [pc, #544]	; (8003c14 <GPIO_Config+0x238>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d106      	bne.n	8003a04 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80039f6:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <GPIO_Config+0x23c>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a87      	ldr	r2, [pc, #540]	; (8003c18 <GPIO_Config+0x23c>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	e03a      	b.n	8003a7a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a84      	ldr	r2, [pc, #528]	; (8003c1c <GPIO_Config+0x240>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d106      	bne.n	8003a1c <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003a0e:	4b82      	ldr	r3, [pc, #520]	; (8003c18 <GPIO_Config+0x23c>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	4a81      	ldr	r2, [pc, #516]	; (8003c18 <GPIO_Config+0x23c>)
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1a:	e02e      	b.n	8003a7a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a7f      	ldr	r2, [pc, #508]	; (8003c20 <GPIO_Config+0x244>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d106      	bne.n	8003a34 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8003a26:	4b7c      	ldr	r3, [pc, #496]	; (8003c18 <GPIO_Config+0x23c>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a7b      	ldr	r2, [pc, #492]	; (8003c18 <GPIO_Config+0x23c>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	e022      	b.n	8003a7a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a7a      	ldr	r2, [pc, #488]	; (8003c24 <GPIO_Config+0x248>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d106      	bne.n	8003a4c <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003a3e:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <GPIO_Config+0x23c>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a75      	ldr	r2, [pc, #468]	; (8003c18 <GPIO_Config+0x23c>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	e016      	b.n	8003a7a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a75      	ldr	r2, [pc, #468]	; (8003c28 <GPIO_Config+0x24c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d106      	bne.n	8003a64 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8003a56:	4b70      	ldr	r3, [pc, #448]	; (8003c18 <GPIO_Config+0x23c>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	4a6f      	ldr	r2, [pc, #444]	; (8003c18 <GPIO_Config+0x23c>)
 8003a5c:	f043 0310 	orr.w	r3, r3, #16
 8003a60:	6313      	str	r3, [r2, #48]	; 0x30
 8003a62:	e00a      	b.n	8003a7a <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a70      	ldr	r2, [pc, #448]	; (8003c2c <GPIO_Config+0x250>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d105      	bne.n	8003a7a <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003a6e:	4b6a      	ldr	r3, [pc, #424]	; (8003c18 <GPIO_Config+0x23c>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a69      	ldr	r2, [pc, #420]	; (8003c18 <GPIO_Config+0x23c>)
 8003a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2103      	movs	r1, #3
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	6819      	ldr	r1, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	789b      	ldrb	r3, [r3, #2]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	408b      	lsls	r3, r1
 8003ada:	43db      	mvns	r3, r3
 8003adc:	4619      	mov	r1, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	6859      	ldr	r1, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	78db      	ldrb	r3, [r3, #3]
 8003afa:	461a      	mov	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	2103      	movs	r1, #3
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	400a      	ands	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	6899      	ldr	r1, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	791b      	ldrb	r3, [r3, #4]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2103      	movs	r1, #3
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	400a      	ands	r2, r1
 8003b64:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	68d9      	ldr	r1, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d143      	bne.n	8003c06 <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b07      	cmp	r3, #7
 8003b84:	d81f      	bhi.n	8003bc6 <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	210f      	movs	r1, #15
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	400a      	ands	r2, r1
 8003ba6:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	6a1a      	ldr	r2, [r3, #32]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	795b      	ldrb	r3, [r3, #5]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bba:	4619      	mov	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8003bc4:	e01f      	b.n	8003c06 <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	3b08      	subs	r3, #8
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bd6:	210f      	movs	r1, #15
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	400a      	ands	r2, r1
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	795b      	ldrb	r3, [r3, #5]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c06:	bf00      	nop
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020400 	.word	0x40020400
 8003c20:	40020800 	.word	0x40020800
 8003c24:	40020c00 	.word	0x40020c00
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40021c00 	.word	0x40021c00

08003c30 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10d      	bne.n	8003c5e <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	2301      	movs	r3, #1
 8003c50:	408b      	lsls	r3, r1
 8003c52:	4619      	mov	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8003c5c:	e00d      	b.n	8003c7a <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	3310      	adds	r3, #16
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	619a      	str	r2, [r3, #24]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	408b      	lsls	r3, r1
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	404a      	eors	r2, r1
 8003ca6:	615a      	str	r2, [r3, #20]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8003cbe:	4a39      	ldr	r2, [pc, #228]	; (8003da4 <configPLL+0xf0>)
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	2b31      	cmp	r3, #49	; 0x31
 8003cc8:	d804      	bhi.n	8003cd4 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <configPLL+0xf4>)
 8003ccc:	4a36      	ldr	r2, [pc, #216]	; (8003da8 <configPLL+0xf4>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	6093      	str	r3, [r2, #8]
 8003cd2:	e005      	b.n	8003ce0 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003cd4:	4b34      	ldr	r3, [pc, #208]	; (8003da8 <configPLL+0xf4>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a33      	ldr	r2, [pc, #204]	; (8003da8 <configPLL+0xf4>)
 8003cda:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003cde:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8003ce0:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <configPLL+0xf4>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4a30      	ldr	r2, [pc, #192]	; (8003da8 <configPLL+0xf4>)
 8003ce6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003cea:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <configPLL+0xf4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <configPLL+0xf4>)
 8003cf2:	f043 0312 	orr.w	r3, r3, #18
 8003cf6:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <configPLL+0xf4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	79fa      	ldrb	r2, [r7, #7]
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	3a0e      	subs	r2, #14
 8003d02:	0192      	lsls	r2, r2, #6
 8003d04:	4611      	mov	r1, r2
 8003d06:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <configPLL+0xf4>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8003d0c:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <configPLL+0xf4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <configPLL+0xf4>)
 8003d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d16:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8003d18:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <configPLL+0xf4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <configPLL+0xf4>)
 8003d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8003d24:	e000      	b.n	8003d28 <configPLL+0x74>
	{
		__NOP();
 8003d26:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <configPLL+0xf4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0f8      	beq.n	8003d26 <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	2b5a      	cmp	r3, #90	; 0x5a
 8003d38:	d909      	bls.n	8003d4e <configPLL+0x9a>
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	2b64      	cmp	r3, #100	; 0x64
 8003d3e:	d806      	bhi.n	8003d4e <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <configPLL+0xf8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <configPLL+0xf8>)
 8003d46:	f043 0303 	orr.w	r3, r3, #3
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e01d      	b.n	8003d8a <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d909      	bls.n	8003d68 <configPLL+0xb4>
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	2b5a      	cmp	r3, #90	; 0x5a
 8003d58:	d806      	bhi.n	8003d68 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8003d5a:	4b14      	ldr	r3, [pc, #80]	; (8003dac <configPLL+0xf8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a13      	ldr	r2, [pc, #76]	; (8003dac <configPLL+0xf8>)
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e010      	b.n	8003d8a <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	2b1e      	cmp	r3, #30
 8003d6c:	d909      	bls.n	8003d82 <configPLL+0xce>
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d806      	bhi.n	8003d82 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8003d74:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <configPLL+0xf8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0c      	ldr	r2, [pc, #48]	; (8003dac <configPLL+0xf8>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	e003      	b.n	8003d8a <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <configPLL+0xf8>)
 8003d84:	4a09      	ldr	r2, [pc, #36]	; (8003dac <configPLL+0xf8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <configPLL+0xf4>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <configPLL+0xf4>)
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	6093      	str	r3, [r2, #8]

}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000440 	.word	0x20000440
 8003da8:	40023800 	.word	0x40023800
 8003dac:	40023c00 	.word	0x40023c00

08003db0 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8003dba:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <getConfigPLL+0x30>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d103      	bne.n	8003dce <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <getConfigPLL+0x34>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	71fb      	strb	r3, [r7, #7]
 8003dcc:	e001      	b.n	8003dd2 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8003dce:	2310      	movs	r3, #16
 8003dd0:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40023800 	.word	0x40023800
 8003de4:	20000440 	.word	0x20000440

08003de8 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003dee:	f7ff ffdf 	bl	8003db0 <getConfigPLL>
 8003df2:	4603      	mov	r3, r0
 8003df4:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8003df6:	2300      	movs	r3, #0
 8003df8:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8003dfa:	79bb      	ldrb	r3, [r7, #6]
 8003dfc:	2b31      	cmp	r3, #49	; 0x31
 8003dfe:	d802      	bhi.n	8003e06 <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8003e00:	79bb      	ldrb	r3, [r7, #6]
 8003e02:	71fb      	strb	r3, [r7, #7]
 8003e04:	e002      	b.n	8003e0c <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8003e06:	79bb      	ldrb	r3, [r7, #6]
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <configMCO2+0x34>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <configMCO2+0x34>)
 8003e28:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e2c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8003e2e:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <configMCO2+0x34>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	79fa      	ldrb	r2, [r7, #7]
 8003e34:	0792      	lsls	r2, r2, #30
 8003e36:	4611      	mov	r1, r2
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <configMCO2+0x34>)
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	6093      	str	r3, [r2, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d84b      	bhi.n	8003efa <configMCO2PRE+0xaa>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <configMCO2PRE+0x18>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e7d 	.word	0x08003e7d
 8003e6c:	08003e93 	.word	0x08003e93
 8003e70:	08003ead 	.word	0x08003ead
 8003e74:	08003ec7 	.word	0x08003ec7
 8003e78:	08003ee1 	.word	0x08003ee1
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003e7c:	4b23      	ldr	r3, [pc, #140]	; (8003f0c <configMCO2PRE+0xbc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <configMCO2PRE+0xbc>)
 8003e82:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003e86:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8003e88:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <configMCO2PRE+0xbc>)
 8003e8a:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <configMCO2PRE+0xbc>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	6093      	str	r3, [r2, #8]
			break;
 8003e90:	e035      	b.n	8003efe <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003e92:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <configMCO2PRE+0xbc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <configMCO2PRE+0xbc>)
 8003e98:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003e9c:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8003e9e:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ea4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ea8:	6093      	str	r3, [r2, #8]
			break;
 8003eaa:	e028      	b.n	8003efe <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <configMCO2PRE+0xbc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <configMCO2PRE+0xbc>)
 8003eb2:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003eb6:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8003eb8:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <configMCO2PRE+0xbc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a13      	ldr	r2, [pc, #76]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ebe:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8003ec2:	6093      	str	r3, [r2, #8]
			break;
 8003ec4:	e01b      	b.n	8003efe <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ecc:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003ed0:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ed8:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8003edc:	6093      	str	r3, [r2, #8]
			break;
 8003ede:	e00e      	b.n	8003efe <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ee6:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003eea:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <configMCO2PRE+0xbc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a06      	ldr	r2, [pc, #24]	; (8003f0c <configMCO2PRE+0xbc>)
 8003ef2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003ef6:	6093      	str	r3, [r2, #8]
			break;
 8003ef8:	e001      	b.n	8003efe <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8003efa:	bf00      	nop
			break;
 8003efc:	bf00      	nop
		}
	}

}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800

08003f10 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d106      	bne.n	8003f30 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8003f22:	4b81      	ldr	r3, [pc, #516]	; (8004128 <pwm_Config+0x218>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a80      	ldr	r2, [pc, #512]	; (8004128 <pwm_Config+0x218>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	e024      	b.n	8003f7a <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a7d      	ldr	r2, [pc, #500]	; (800412c <pwm_Config+0x21c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d106      	bne.n	8003f48 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003f3a:	4b7b      	ldr	r3, [pc, #492]	; (8004128 <pwm_Config+0x218>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a7a      	ldr	r2, [pc, #488]	; (8004128 <pwm_Config+0x218>)
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
 8003f46:	e018      	b.n	8003f7a <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a78      	ldr	r2, [pc, #480]	; (8004130 <pwm_Config+0x220>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d106      	bne.n	8003f60 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003f52:	4b75      	ldr	r3, [pc, #468]	; (8004128 <pwm_Config+0x218>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4a74      	ldr	r2, [pc, #464]	; (8004128 <pwm_Config+0x218>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5e:	e00c      	b.n	8003f7a <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	4a73      	ldr	r2, [pc, #460]	; (8004134 <pwm_Config+0x224>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d106      	bne.n	8003f78 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003f6a:	4b6f      	ldr	r3, [pc, #444]	; (8004128 <pwm_Config+0x218>)
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	4a6e      	ldr	r2, [pc, #440]	; (8004128 <pwm_Config+0x218>)
 8003f70:	f043 0308 	orr.w	r3, r3, #8
 8003f74:	6413      	str	r3, [r2, #64]	; 0x40
 8003f76:	e000      	b.n	8003f7a <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8003f78:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa4c 	bl	8004418 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b03      	cmp	r3, #3
 8003f86:	f200 8118 	bhi.w	80041ba <pwm_Config+0x2aa>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <pwm_Config+0x80>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08004023 	.word	0x08004023
 8003f98:	080040a5 	.word	0x080040a5
 8003f9c:	08004139 	.word	0x08004139
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f022 0203 	bic.w	r2, r2, #3
 8003fae:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fbe:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003fce:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	699a      	ldr	r2, [r3, #24]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f022 0208 	bic.w	r2, r2, #8
 8003fde:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f042 0208 	orr.w	r2, r2, #8
 8003fee:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f022 0204 	bic.w	r2, r2, #4
 8003ffe:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f042 0204 	orr.w	r2, r2, #4
 800400e:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800401e:	619a      	str	r2, [r3, #24]

		break;
 8004020:	e0cc      	b.n	80041bc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f022 0203 	bic.w	r2, r2, #3
 8004030:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	699a      	ldr	r2, [r3, #24]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004040:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004050:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004060:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004070:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004080:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004090:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	699a      	ldr	r2, [r3, #24]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a0:	619a      	str	r2, [r3, #24]

		break;
 80040a2:	e08b      	b.n	80041bc <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f022 0203 	bic.w	r2, r2, #3
 80040b2:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040c2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80040d2:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f022 0208 	bic.w	r2, r2, #8
 80040e2:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f042 0208 	orr.w	r2, r2, #8
 80040f2:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f042 0204 	orr.w	r2, r2, #4
 8004112:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004122:	61da      	str	r2, [r3, #28]

		break;
 8004124:	e04a      	b.n	80041bc <pwm_Config+0x2ac>
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	69da      	ldr	r2, [r3, #28]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004146:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	69da      	ldr	r2, [r3, #28]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004156:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004166:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004176:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004186:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	69da      	ldr	r2, [r3, #28]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004196:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	69da      	ldr	r2, [r3, #28]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041b6:	61da      	str	r2, [r3, #28]

		break;
 80041b8:	e000      	b.n	80041bc <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 80041ba:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	791b      	ldrb	r3, [r3, #4]
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f896 	bl	80042f4 <statusPolarityPWM>

}
 80041c8:	bf00      	nop
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d87f      	bhi.n	80042e4 <statusInOutPWM+0x114>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <statusInOutPWM+0x1c>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004237 	.word	0x08004237
 80041f4:	08004271 	.word	0x08004271
 80041f8:	080042ab 	.word	0x080042ab
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d110      	bne.n	8004224 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	6a1a      	ldr	r2, [r3, #32]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8004222:	e060      	b.n	80042e6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	621a      	str	r2, [r3, #32]
		break;
 8004234:	e057      	b.n	80042e6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d110      	bne.n	800425e <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	6a1a      	ldr	r2, [r3, #32]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f022 0210 	bic.w	r2, r2, #16
 800424a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f042 0210 	orr.w	r2, r2, #16
 800425a:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 800425c:	e043      	b.n	80042e6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f022 0210 	bic.w	r2, r2, #16
 800426c:	621a      	str	r2, [r3, #32]
		break;
 800426e:	e03a      	b.n	80042e6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d110      	bne.n	8004298 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	6a1a      	ldr	r2, [r3, #32]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004284:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004294:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8004296:	e026      	b.n	80042e6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	6a1a      	ldr	r2, [r3, #32]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a6:	621a      	str	r2, [r3, #32]
		break;
 80042a8:	e01d      	b.n	80042e6 <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d110      	bne.n	80042d2 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042be:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042ce:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 80042d0:	e009      	b.n	80042e6 <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	6a1a      	ldr	r2, [r3, #32]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042e0:	621a      	str	r2, [r3, #32]
		break;
 80042e2:	e000      	b.n	80042e6 <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 80042e4:	bf00      	nop
	}
	}
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop

080042f4 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d87f      	bhi.n	8004408 <statusPolarityPWM+0x114>
 8004308:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <statusPolarityPWM+0x1c>)
 800430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430e:	bf00      	nop
 8004310:	08004321 	.word	0x08004321
 8004314:	0800435b 	.word	0x0800435b
 8004318:	08004395 	.word	0x08004395
 800431c:	080043cf 	.word	0x080043cf
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d110      	bne.n	8004348 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	6a1a      	ldr	r2, [r3, #32]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f022 0202 	bic.w	r2, r2, #2
 8004334:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	6a1a      	ldr	r2, [r3, #32]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f042 0202 	orr.w	r2, r2, #2
 8004344:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8004346:	e060      	b.n	800440a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	6a1a      	ldr	r2, [r3, #32]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f022 0202 	bic.w	r2, r2, #2
 8004356:	621a      	str	r2, [r3, #32]
		break;
 8004358:	e057      	b.n	800440a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d110      	bne.n	8004382 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f022 0220 	bic.w	r2, r2, #32
 800436e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f042 0220 	orr.w	r2, r2, #32
 800437e:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8004380:	e043      	b.n	800440a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f022 0220 	bic.w	r2, r2, #32
 8004390:	621a      	str	r2, [r3, #32]
		break;
 8004392:	e03a      	b.n	800440a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d110      	bne.n	80043bc <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	6a1a      	ldr	r2, [r3, #32]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043a8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043b8:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 80043ba:	e026      	b.n	800440a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043ca:	621a      	str	r2, [r3, #32]
		break;
 80043cc:	e01d      	b.n	800440a <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d110      	bne.n	80043f6 <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043e2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	6a1a      	ldr	r2, [r3, #32]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043f2:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 80043f4:	e009      	b.n	800440a <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004404:	621a      	str	r2, [r3, #32]
		break;
 8004406:	e000      	b.n	800440a <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8004408:	bf00      	nop
	}
	}

}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop

08004418 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d823      	bhi.n	8004470 <setDuttyCycle+0x58>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <setDuttyCycle+0x18>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004441 	.word	0x08004441
 8004434:	0800444d 	.word	0x0800444d
 8004438:	08004459 	.word	0x08004459
 800443c:	08004465 	.word	0x08004465
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	885a      	ldrh	r2, [r3, #2]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800444a:	e012      	b.n	8004472 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	885a      	ldrh	r2, [r3, #2]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004456:	e00c      	b.n	8004472 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	885a      	ldrh	r2, [r3, #2]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8004462:	e006      	b.n	8004472 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	885a      	ldrh	r2, [r3, #2]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800446e:	e000      	b.n	8004472 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8004470:	bf00      	nop
	}
	}

}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop

08004480 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <updateDuttyCyclePercentageFloat+0x48>)
 8004494:	fba2 2303 	umull	r2, r3, r2, r3
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	b29b      	uxth	r3, r3
 800449c:	ee07 3a90 	vmov	s15, r3
 80044a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044a4:	edd7 7a00 	vldr	s15, [r7]
 80044a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b0:	ee17 3a90 	vmov	r3, s15
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff ffac 	bl	8004418 <setDuttyCycle>
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <__NVIC_EnableIRQ>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db0b      	blt.n	80044f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	f003 021f 	and.w	r2, r3, #31
 80044e4:	4907      	ldr	r1, [pc, #28]	; (8004504 <__NVIC_EnableIRQ+0x38>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2001      	movs	r0, #1
 80044ee:	fa00 f202 	lsl.w	r2, r0, r2
 80044f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000e100 	.word	0xe000e100

08004508 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a8f      	ldr	r2, [pc, #572]	; (8004754 <USART_Config+0x24c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d107      	bne.n	800452a <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 800451a:	4b8f      	ldr	r3, [pc, #572]	; (8004758 <USART_Config+0x250>)
 800451c:	2210      	movs	r2, #16
 800451e:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	4a8d      	ldr	r2, [pc, #564]	; (800475c <USART_Config+0x254>)
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	e019      	b.n	800455e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4a8c      	ldr	r2, [pc, #560]	; (8004760 <USART_Config+0x258>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d108      	bne.n	8004546 <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8004534:	4b88      	ldr	r3, [pc, #544]	; (8004758 <USART_Config+0x250>)
 8004536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a88      	ldr	r2, [pc, #544]	; (8004764 <USART_Config+0x25c>)
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e00b      	b.n	800455e <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	4a87      	ldr	r2, [pc, #540]	; (8004768 <USART_Config+0x260>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d106      	bne.n	800455e <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004550:	4b81      	ldr	r3, [pc, #516]	; (8004758 <USART_Config+0x250>)
 8004552:	2220      	movs	r2, #32
 8004554:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4a84      	ldr	r2, [pc, #528]	; (800476c <USART_Config+0x264>)
 800455c:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	789b      	ldrb	r3, [r3, #2]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d03d      	beq.n	80045f2 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004594:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045a4:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045b4:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	789b      	ldrb	r3, [r3, #2]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d110      	bne.n	80045e0 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045cc:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	e018      	b.n	8004612 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e00f      	b.n	8004612 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004600:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004610:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	78db      	ldrb	r3, [r3, #3]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d84c      	bhi.n	80046b4 <USART_Config+0x1ac>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <USART_Config+0x118>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	0800464f 	.word	0x0800464f
 8004628:	08004671 	.word	0x08004671
 800462c:	08004693 	.word	0x08004693
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800463e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	6912      	ldr	r2, [r2, #16]
 800464a:	611a      	str	r2, [r3, #16]
		break;
 800464c:	e041      	b.n	80046d2 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800465c:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800466c:	611a      	str	r2, [r3, #16]
		break;
 800466e:	e030      	b.n	80046d2 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800467e:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800468e:	611a      	str	r2, [r3, #16]
		break;
 8004690:	e01f      	b.n	80046d2 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80046a0:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80046b0:	611a      	str	r2, [r3, #16]
		break;
 80046b2:	e00e      	b.n	80046d2 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80046c2:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	6912      	ldr	r2, [r2, #16]
 80046ce:	611a      	str	r2, [r3, #16]
		break;
 80046d0:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4a21      	ldr	r2, [pc, #132]	; (8004760 <USART_Config+0x258>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d104      	bne.n	80046ea <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80046e0:	f7ff fb82 	bl	8003de8 <getClockAPB1>
 80046e4:	4603      	mov	r3, r0
 80046e6:	73fb      	strb	r3, [r7, #15]
 80046e8:	e003      	b.n	80046f2 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 80046ea:	f7ff fb61 	bl	8003db0 <getConfigPLL>
 80046ee:	4603      	mov	r3, r0
 80046f0:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	785b      	ldrb	r3, [r3, #1]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f91f 	bl	8004944 <getValueBaudRate>
 8004706:	4603      	mov	r3, r0
 8004708:	461a      	mov	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	e02f      	b.n	8004772 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	785b      	ldrb	r3, [r3, #1]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d10b      	bne.n	8004732 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f90f 	bl	8004944 <getValueBaudRate>
 8004726:	4603      	mov	r3, r0
 8004728:	461a      	mov	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	e01f      	b.n	8004772 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	785b      	ldrb	r3, [r3, #1]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d11a      	bne.n	8004770 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004740:	4618      	mov	r0, r3
 8004742:	f000 f8ff 	bl	8004944 <getValueBaudRate>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	e00f      	b.n	8004772 <USART_Config+0x26a>
 8004752:	bf00      	nop
 8004754:	40011000 	.word	0x40011000
 8004758:	40023800 	.word	0x40023800
 800475c:	20000444 	.word	0x20000444
 8004760:	40004400 	.word	0x40004400
 8004764:	20000448 	.word	0x20000448
 8004768:	40011400 	.word	0x40011400
 800476c:	2000044c 	.word	0x2000044c
	}
	else
	{
		__NOP();
 8004770:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d866      	bhi.n	8004848 <USART_Config+0x340>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <USART_Config+0x278>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004791 	.word	0x08004791
 8004784:	080047b3 	.word	0x080047b3
 8004788:	080047d5 	.word	0x080047d5
 800478c:	08004817 	.word	0x08004817
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f022 0208 	bic.w	r2, r2, #8
 800479e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f042 0208 	orr.w	r2, r2, #8
 80047ae:	60da      	str	r2, [r3, #12]

		break;
 80047b0:	e063      	b.n	800487a <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f022 0204 	bic.w	r2, r2, #4
 80047c0:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f042 0204 	orr.w	r2, r2, #4
 80047d0:	60da      	str	r2, [r3, #12]

		break;
 80047d2:	e052      	b.n	800487a <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f022 0208 	bic.w	r2, r2, #8
 80047e2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f042 0208 	orr.w	r2, r2, #8
 80047f2:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f022 0204 	bic.w	r2, r2, #4
 8004802:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f042 0204 	orr.w	r2, r2, #4
 8004812:	60da      	str	r2, [r3, #12]


		break;
 8004814:	e031      	b.n	800487a <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004824:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f022 0208 	bic.w	r2, r2, #8
 8004834:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f022 0204 	bic.w	r2, r2, #4
 8004844:	60da      	str	r2, [r3, #12]
		break;
 8004846:	e018      	b.n	800487a <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004856:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f022 0208 	bic.w	r2, r2, #8
 8004866:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f022 0204 	bic.w	r2, r2, #4
 8004876:	60da      	str	r2, [r3, #12]
		break;
 8004878:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 800487a:	b672      	cpsid	i
}
 800487c:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	791b      	ldrb	r3, [r3, #4]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d110      	bne.n	80048a8 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f022 0220 	bic.w	r2, r2, #32
 8004894:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f042 0220 	orr.w	r2, r2, #32
 80048a4:	60da      	str	r2, [r3, #12]
 80048a6:	e007      	b.n	80048b8 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f022 0220 	bic.w	r2, r2, #32
 80048b6:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	791b      	ldrb	r3, [r3, #4]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d003      	beq.n	80048c8 <USART_Config+0x3c0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	795b      	ldrb	r3, [r3, #5]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d11a      	bne.n	80048fe <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <USART_Config+0x430>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d103      	bne.n	80048da <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80048d2:	2025      	movs	r0, #37	; 0x25
 80048d4:	f7ff fdfa 	bl	80044cc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80048d8:	e013      	b.n	8004902 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4a17      	ldr	r2, [pc, #92]	; (800493c <USART_Config+0x434>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d103      	bne.n	80048ec <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80048e4:	2026      	movs	r0, #38	; 0x26
 80048e6:	f7ff fdf1 	bl	80044cc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80048ea:	e00a      	b.n	8004902 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a13      	ldr	r2, [pc, #76]	; (8004940 <USART_Config+0x438>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d105      	bne.n	8004902 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80048f6:	2047      	movs	r0, #71	; 0x47
 80048f8:	f7ff fde8 	bl	80044cc <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80048fc:	e001      	b.n	8004902 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80048fe:	bf00      	nop
 8004900:	e000      	b.n	8004904 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004902:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004904:	b662      	cpsie	i
}
 8004906:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d00f      	beq.n	8004930 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800491e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800492e:	60da      	str	r2, [r3, #12]
	}
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40011000 	.word	0x40011000
 800493c:	40004400 	.word	0x40004400
 8004940:	40011400 	.word	0x40011400

08004944 <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004944:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	6039      	str	r1, [r7, #0]
 800494e:	4601      	mov	r1, r0
 8004950:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004952:	79f9      	ldrb	r1, [r7, #7]
 8004954:	2000      	movs	r0, #0
 8004956:	460a      	mov	r2, r1
 8004958:	4603      	mov	r3, r0
 800495a:	491f      	ldr	r1, [pc, #124]	; (80049d8 <getValueBaudRate+0x94>)
 800495c:	fb01 f003 	mul.w	r0, r1, r3
 8004960:	2102      	movs	r1, #2
 8004962:	fb02 f101 	mul.w	r1, r2, r1
 8004966:	4401      	add	r1, r0
 8004968:	481b      	ldr	r0, [pc, #108]	; (80049d8 <getValueBaudRate+0x94>)
 800496a:	fba2 4500 	umull	r4, r5, r2, r0
 800496e:	194b      	adds	r3, r1, r5
 8004970:	461d      	mov	r5, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	2200      	movs	r2, #0
 8004978:	4698      	mov	r8, r3
 800497a:	4691      	mov	r9, r2
 800497c:	4642      	mov	r2, r8
 800497e:	464b      	mov	r3, r9
 8004980:	4620      	mov	r0, r4
 8004982:	4629      	mov	r1, r5
 8004984:	f7fc f998 	bl	8000cb8 <__aeabi_ldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4613      	mov	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <getValueBaudRate+0x98>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	0b5b      	lsrs	r3, r3, #13
 800499a:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f242 7210 	movw	r2, #10000	; 0x2710
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <getValueBaudRate+0x98>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	0a5b      	lsrs	r3, r3, #9
 80049ba:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	7afb      	ldrb	r3, [r7, #11]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	4313      	orrs	r3, r2
 80049ca:	813b      	strh	r3, [r7, #8]

    return value;
 80049cc:	893b      	ldrh	r3, [r7, #8]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80049d8:	540be400 	.word	0x540be400
 80049dc:	d1b71759 	.word	0xd1b71759

080049e0 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 80049ea:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <writeMsgForTXE+0x64>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d111      	bne.n	8004a16 <writeMsgForTXE+0x36>
 80049f2:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <writeMsgForTXE+0x68>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10d      	bne.n	8004a16 <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	4813      	ldr	r0, [pc, #76]	; (8004a4c <writeMsgForTXE+0x6c>)
 80049fe:	f001 f8a9 	bl	8005b54 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <writeMsgForTXE+0x70>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f830 	bl	8004a74 <interruptionTX>
 8004a14:	e012      	b.n	8004a3c <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <writeMsgForTXE+0x74>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2364      	movs	r3, #100	; 0x64
 8004a1e:	fb02 f303 	mul.w	r3, r2, r3
 8004a22:	4a0d      	ldr	r2, [pc, #52]	; (8004a58 <writeMsgForTXE+0x78>)
 8004a24:	4413      	add	r3, r2
 8004a26:	6839      	ldr	r1, [r7, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f001 f893 	bl	8005b54 <siprintf>
		inLine++;
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <writeMsgForTXE+0x74>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	3301      	adds	r3, #1
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <writeMsgForTXE+0x74>)
 8004a38:	701a      	strb	r2, [r3, #0]
	}
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000c8a 	.word	0x20000c8a
 8004a48:	20000c89 	.word	0x20000c89
 8004a4c:	20000454 	.word	0x20000454
 8004a50:	20000c8b 	.word	0x20000c8b
 8004a54:	20000c88 	.word	0x20000c88
 8004a58:	200004b8 	.word	0x200004b8

08004a5c <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
	return auxRxData;
 8004a60:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <getRxData+0x14>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000450 	.word	0x20000450

08004a74 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d10c      	bne.n	8004aa0 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8004a9e:	e005      	b.n	8004aac <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
	__NOP();
 8004abc:	bf00      	nop
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
	__NOP();
 8004acc:	bf00      	nop
}
 8004ace:	bf00      	nop
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8004adc:	4b37      	ldr	r3, [pc, #220]	; (8004bbc <USART1_IRQHandler+0xe4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8004aea:	4b34      	ldr	r3, [pc, #208]	; (8004bbc <USART1_IRQHandler+0xe4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4b33      	ldr	r3, [pc, #204]	; (8004bc0 <USART1_IRQHandler+0xe8>)
 8004af4:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8004af6:	f7fc fef9 	bl	80018ec <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004afa:	e05d      	b.n	8004bb8 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8004afc:	4b2f      	ldr	r3, [pc, #188]	; (8004bbc <USART1_IRQHandler+0xe4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d055      	beq.n	8004bb6 <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004b0a:	4b2e      	ldr	r3, [pc, #184]	; (8004bc4 <USART1_IRQHandler+0xec>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10b      	bne.n	8004b2a <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8004b12:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <USART1_IRQHandler+0xf0>)
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <USART1_IRQHandler+0xe4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004b1c:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <USART1_IRQHandler+0xe4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ffa6 	bl	8004a74 <interruptionTX>
}
 8004b28:	e046      	b.n	8004bb8 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <USART1_IRQHandler+0xec>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d142      	bne.n	8004bb8 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004b32:	4b26      	ldr	r3, [pc, #152]	; (8004bcc <USART1_IRQHandler+0xf4>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <USART1_IRQHandler+0xf8>)
 8004b3a:	5c9b      	ldrb	r3, [r3, r2]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00e      	beq.n	8004b5e <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <USART1_IRQHandler+0xf4>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <USART1_IRQHandler+0xf8>)
 8004b48:	5c9a      	ldrb	r2, [r3, r2]
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <USART1_IRQHandler+0xe4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
				posChar++;
 8004b50:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <USART1_IRQHandler+0xf4>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	3301      	adds	r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <USART1_IRQHandler+0xf4>)
 8004b5a:	701a      	strb	r2, [r3, #0]
}
 8004b5c:	e02c      	b.n	8004bb8 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <USART1_IRQHandler+0xfc>)
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	4b1d      	ldr	r3, [pc, #116]	; (8004bd8 <USART1_IRQHandler+0x100>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d215      	bcs.n	8004b96 <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004b6a:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <USART1_IRQHandler+0xfc>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2364      	movs	r3, #100	; 0x64
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <USART1_IRQHandler+0x104>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4814      	ldr	r0, [pc, #80]	; (8004bd0 <USART1_IRQHandler+0xf8>)
 8004b7e:	f000 ffe9 	bl	8005b54 <siprintf>
					posChar = 0;
 8004b82:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <USART1_IRQHandler+0xf4>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <USART1_IRQHandler+0xfc>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <USART1_IRQHandler+0xfc>)
 8004b92:	701a      	strb	r2, [r3, #0]
}
 8004b94:	e010      	b.n	8004bb8 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <USART1_IRQHandler+0xe4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff ff69 	bl	8004a74 <interruptionTX>
					posChar = 0;
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <USART1_IRQHandler+0xf4>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <USART1_IRQHandler+0xfc>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004bae:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <USART1_IRQHandler+0x100>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
}
 8004bb4:	e000      	b.n	8004bb8 <USART1_IRQHandler+0xe0>
		__NOP();
 8004bb6:	bf00      	nop
}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20000444 	.word	0x20000444
 8004bc0:	20000450 	.word	0x20000450
 8004bc4:	20000c8b 	.word	0x20000c8b
 8004bc8:	20000451 	.word	0x20000451
 8004bcc:	20000c8a 	.word	0x20000c8a
 8004bd0:	20000454 	.word	0x20000454
 8004bd4:	20000c89 	.word	0x20000c89
 8004bd8:	20000c88 	.word	0x20000c88
 8004bdc:	200004b8 	.word	0x200004b8

08004be0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8004be4:	4b37      	ldr	r3, [pc, #220]	; (8004cc4 <USART2_IRQHandler+0xe4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8004bf2:	4b34      	ldr	r3, [pc, #208]	; (8004cc4 <USART2_IRQHandler+0xe4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4b33      	ldr	r3, [pc, #204]	; (8004cc8 <USART2_IRQHandler+0xe8>)
 8004bfc:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8004bfe:	f7ff ff5b 	bl	8004ab8 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004c02:	e05d      	b.n	8004cc0 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8004c04:	4b2f      	ldr	r3, [pc, #188]	; (8004cc4 <USART2_IRQHandler+0xe4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d055      	beq.n	8004cbe <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <USART2_IRQHandler+0xec>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8004c1a:	4b2d      	ldr	r3, [pc, #180]	; (8004cd0 <USART2_IRQHandler+0xf0>)
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	4b29      	ldr	r3, [pc, #164]	; (8004cc4 <USART2_IRQHandler+0xe4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8004c24:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <USART2_IRQHandler+0xe4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ff22 	bl	8004a74 <interruptionTX>
}
 8004c30:	e046      	b.n	8004cc0 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004c32:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <USART2_IRQHandler+0xec>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d142      	bne.n	8004cc0 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004c3a:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <USART2_IRQHandler+0xf4>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <USART2_IRQHandler+0xf8>)
 8004c42:	5c9b      	ldrb	r3, [r3, r2]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00e      	beq.n	8004c66 <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8004c48:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <USART2_IRQHandler+0xf4>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <USART2_IRQHandler+0xf8>)
 8004c50:	5c9a      	ldrb	r2, [r3, r2]
 8004c52:	4b1c      	ldr	r3, [pc, #112]	; (8004cc4 <USART2_IRQHandler+0xe4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	605a      	str	r2, [r3, #4]
				posChar++;
 8004c58:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <USART2_IRQHandler+0xf4>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <USART2_IRQHandler+0xf4>)
 8004c62:	701a      	strb	r2, [r3, #0]
}
 8004c64:	e02c      	b.n	8004cc0 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004c66:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <USART2_IRQHandler+0xfc>)
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <USART2_IRQHandler+0x100>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d215      	bcs.n	8004c9e <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <USART2_IRQHandler+0xfc>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	2364      	movs	r3, #100	; 0x64
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	4a19      	ldr	r2, [pc, #100]	; (8004ce4 <USART2_IRQHandler+0x104>)
 8004c80:	4413      	add	r3, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	4814      	ldr	r0, [pc, #80]	; (8004cd8 <USART2_IRQHandler+0xf8>)
 8004c86:	f000 ff65 	bl	8005b54 <siprintf>
					posChar = 0;
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <USART2_IRQHandler+0xf4>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <USART2_IRQHandler+0xfc>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <USART2_IRQHandler+0xfc>)
 8004c9a:	701a      	strb	r2, [r3, #0]
}
 8004c9c:	e010      	b.n	8004cc0 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <USART2_IRQHandler+0xe4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff fee5 	bl	8004a74 <interruptionTX>
					posChar = 0;
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <USART2_IRQHandler+0xf4>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <USART2_IRQHandler+0xfc>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <USART2_IRQHandler+0x100>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
}
 8004cbc:	e000      	b.n	8004cc0 <USART2_IRQHandler+0xe0>
		__NOP();
 8004cbe:	bf00      	nop
}
 8004cc0:	bf00      	nop
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000448 	.word	0x20000448
 8004cc8:	20000450 	.word	0x20000450
 8004ccc:	20000c8b 	.word	0x20000c8b
 8004cd0:	20000451 	.word	0x20000451
 8004cd4:	20000c8a 	.word	0x20000c8a
 8004cd8:	20000454 	.word	0x20000454
 8004cdc:	20000c89 	.word	0x20000c89
 8004ce0:	20000c88 	.word	0x20000c88
 8004ce4:	200004b8 	.word	0x200004b8

08004ce8 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8004cec:	4b37      	ldr	r3, [pc, #220]	; (8004dcc <USART6_IRQHandler+0xe4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d008      	beq.n	8004d0c <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8004cfa:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <USART6_IRQHandler+0xe4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <USART6_IRQHandler+0xe8>)
 8004d04:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8004d06:	f7ff fedf 	bl	8004ac8 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004d0a:	e05d      	b.n	8004dc8 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8004d0c:	4b2f      	ldr	r3, [pc, #188]	; (8004dcc <USART6_IRQHandler+0xe4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d055      	beq.n	8004dc6 <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <USART6_IRQHandler+0xec>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8004d22:	4b2d      	ldr	r3, [pc, #180]	; (8004dd8 <USART6_IRQHandler+0xf0>)
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	4b29      	ldr	r3, [pc, #164]	; (8004dcc <USART6_IRQHandler+0xe4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004d2c:	4b27      	ldr	r3, [pc, #156]	; (8004dcc <USART6_IRQHandler+0xe4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fe9e 	bl	8004a74 <interruptionTX>
}
 8004d38:	e046      	b.n	8004dc8 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004d3a:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <USART6_IRQHandler+0xec>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d142      	bne.n	8004dc8 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004d42:	4b26      	ldr	r3, [pc, #152]	; (8004ddc <USART6_IRQHandler+0xf4>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	4b25      	ldr	r3, [pc, #148]	; (8004de0 <USART6_IRQHandler+0xf8>)
 8004d4a:	5c9b      	ldrb	r3, [r3, r2]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00e      	beq.n	8004d6e <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8004d50:	4b22      	ldr	r3, [pc, #136]	; (8004ddc <USART6_IRQHandler+0xf4>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b22      	ldr	r3, [pc, #136]	; (8004de0 <USART6_IRQHandler+0xf8>)
 8004d58:	5c9a      	ldrb	r2, [r3, r2]
 8004d5a:	4b1c      	ldr	r3, [pc, #112]	; (8004dcc <USART6_IRQHandler+0xe4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
				posChar++;
 8004d60:	4b1e      	ldr	r3, [pc, #120]	; (8004ddc <USART6_IRQHandler+0xf4>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	4b1c      	ldr	r3, [pc, #112]	; (8004ddc <USART6_IRQHandler+0xf4>)
 8004d6a:	701a      	strb	r2, [r3, #0]
}
 8004d6c:	e02c      	b.n	8004dc8 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004d6e:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <USART6_IRQHandler+0xfc>)
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <USART6_IRQHandler+0x100>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d215      	bcs.n	8004da6 <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004d7a:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <USART6_IRQHandler+0xfc>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2364      	movs	r3, #100	; 0x64
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	4a19      	ldr	r2, [pc, #100]	; (8004dec <USART6_IRQHandler+0x104>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4814      	ldr	r0, [pc, #80]	; (8004de0 <USART6_IRQHandler+0xf8>)
 8004d8e:	f000 fee1 	bl	8005b54 <siprintf>
					posChar = 0;
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <USART6_IRQHandler+0xf4>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <USART6_IRQHandler+0xfc>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <USART6_IRQHandler+0xfc>)
 8004da2:	701a      	strb	r2, [r3, #0]
}
 8004da4:	e010      	b.n	8004dc8 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <USART6_IRQHandler+0xe4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fe61 	bl	8004a74 <interruptionTX>
					posChar = 0;
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <USART6_IRQHandler+0xf4>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <USART6_IRQHandler+0xfc>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <USART6_IRQHandler+0x100>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
}
 8004dc4:	e000      	b.n	8004dc8 <USART6_IRQHandler+0xe0>
		__NOP();
 8004dc6:	bf00      	nop
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	2000044c 	.word	0x2000044c
 8004dd0:	20000450 	.word	0x20000450
 8004dd4:	20000c8b 	.word	0x20000c8b
 8004dd8:	20000451 	.word	0x20000451
 8004ddc:	20000c8a 	.word	0x20000c8a
 8004de0:	20000454 	.word	0x20000454
 8004de4:	20000c89 	.word	0x20000c89
 8004de8:	20000c88 	.word	0x20000c88
 8004dec:	200004b8 	.word	0x200004b8

08004df0 <__errno>:
 8004df0:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <__errno+0x8>)
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000010 	.word	0x20000010

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	; (8004e34 <__libc_init_array+0x38>)
 8004e00:	4c0d      	ldr	r4, [pc, #52]	; (8004e38 <__libc_init_array+0x3c>)
 8004e02:	1b64      	subs	r4, r4, r5
 8004e04:	10a4      	asrs	r4, r4, #2
 8004e06:	2600      	movs	r6, #0
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	4d0b      	ldr	r5, [pc, #44]	; (8004e3c <__libc_init_array+0x40>)
 8004e0e:	4c0c      	ldr	r4, [pc, #48]	; (8004e40 <__libc_init_array+0x44>)
 8004e10:	f005 f8c8 	bl	8009fa4 <_init>
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	2600      	movs	r6, #0
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	0800a7ec 	.word	0x0800a7ec
 8004e38:	0800a7ec 	.word	0x0800a7ec
 8004e3c:	0800a7ec 	.word	0x0800a7ec
 8004e40:	0800a7f0 	.word	0x0800a7f0

08004e44 <memset>:
 8004e44:	4402      	add	r2, r0
 8004e46:	4603      	mov	r3, r0
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <memset+0xa>
 8004e4c:	4770      	bx	lr
 8004e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e52:	e7f9      	b.n	8004e48 <memset+0x4>

08004e54 <__cvt>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	ec55 4b10 	vmov	r4, r5, d0
 8004e5c:	2d00      	cmp	r5, #0
 8004e5e:	460e      	mov	r6, r1
 8004e60:	4619      	mov	r1, r3
 8004e62:	462b      	mov	r3, r5
 8004e64:	bfbb      	ittet	lt
 8004e66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e6a:	461d      	movlt	r5, r3
 8004e6c:	2300      	movge	r3, #0
 8004e6e:	232d      	movlt	r3, #45	; 0x2d
 8004e70:	700b      	strb	r3, [r1, #0]
 8004e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e78:	4691      	mov	r9, r2
 8004e7a:	f023 0820 	bic.w	r8, r3, #32
 8004e7e:	bfbc      	itt	lt
 8004e80:	4622      	movlt	r2, r4
 8004e82:	4614      	movlt	r4, r2
 8004e84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e88:	d005      	beq.n	8004e96 <__cvt+0x42>
 8004e8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e8e:	d100      	bne.n	8004e92 <__cvt+0x3e>
 8004e90:	3601      	adds	r6, #1
 8004e92:	2102      	movs	r1, #2
 8004e94:	e000      	b.n	8004e98 <__cvt+0x44>
 8004e96:	2103      	movs	r1, #3
 8004e98:	ab03      	add	r3, sp, #12
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	ab02      	add	r3, sp, #8
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	ec45 4b10 	vmov	d0, r4, r5
 8004ea4:	4653      	mov	r3, sl
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	f001 fe42 	bl	8006b30 <_dtoa_r>
 8004eac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004eb0:	4607      	mov	r7, r0
 8004eb2:	d102      	bne.n	8004eba <__cvt+0x66>
 8004eb4:	f019 0f01 	tst.w	r9, #1
 8004eb8:	d022      	beq.n	8004f00 <__cvt+0xac>
 8004eba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ebe:	eb07 0906 	add.w	r9, r7, r6
 8004ec2:	d110      	bne.n	8004ee6 <__cvt+0x92>
 8004ec4:	783b      	ldrb	r3, [r7, #0]
 8004ec6:	2b30      	cmp	r3, #48	; 0x30
 8004ec8:	d10a      	bne.n	8004ee0 <__cvt+0x8c>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2300      	movs	r3, #0
 8004ece:	4620      	mov	r0, r4
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	f7fb fe11 	bl	8000af8 <__aeabi_dcmpeq>
 8004ed6:	b918      	cbnz	r0, 8004ee0 <__cvt+0x8c>
 8004ed8:	f1c6 0601 	rsb	r6, r6, #1
 8004edc:	f8ca 6000 	str.w	r6, [sl]
 8004ee0:	f8da 3000 	ldr.w	r3, [sl]
 8004ee4:	4499      	add	r9, r3
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4620      	mov	r0, r4
 8004eec:	4629      	mov	r1, r5
 8004eee:	f7fb fe03 	bl	8000af8 <__aeabi_dcmpeq>
 8004ef2:	b108      	cbz	r0, 8004ef8 <__cvt+0xa4>
 8004ef4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ef8:	2230      	movs	r2, #48	; 0x30
 8004efa:	9b03      	ldr	r3, [sp, #12]
 8004efc:	454b      	cmp	r3, r9
 8004efe:	d307      	bcc.n	8004f10 <__cvt+0xbc>
 8004f00:	9b03      	ldr	r3, [sp, #12]
 8004f02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f04:	1bdb      	subs	r3, r3, r7
 8004f06:	4638      	mov	r0, r7
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	b004      	add	sp, #16
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	1c59      	adds	r1, r3, #1
 8004f12:	9103      	str	r1, [sp, #12]
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e7f0      	b.n	8004efa <__cvt+0xa6>

08004f18 <__exponent>:
 8004f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	bfb8      	it	lt
 8004f20:	4249      	neglt	r1, r1
 8004f22:	f803 2b02 	strb.w	r2, [r3], #2
 8004f26:	bfb4      	ite	lt
 8004f28:	222d      	movlt	r2, #45	; 0x2d
 8004f2a:	222b      	movge	r2, #43	; 0x2b
 8004f2c:	2909      	cmp	r1, #9
 8004f2e:	7042      	strb	r2, [r0, #1]
 8004f30:	dd2a      	ble.n	8004f88 <__exponent+0x70>
 8004f32:	f10d 0407 	add.w	r4, sp, #7
 8004f36:	46a4      	mov	ip, r4
 8004f38:	270a      	movs	r7, #10
 8004f3a:	46a6      	mov	lr, r4
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f42:	fb07 1516 	mls	r5, r7, r6, r1
 8004f46:	3530      	adds	r5, #48	; 0x30
 8004f48:	2a63      	cmp	r2, #99	; 0x63
 8004f4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f52:	4631      	mov	r1, r6
 8004f54:	dcf1      	bgt.n	8004f3a <__exponent+0x22>
 8004f56:	3130      	adds	r1, #48	; 0x30
 8004f58:	f1ae 0502 	sub.w	r5, lr, #2
 8004f5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f60:	1c44      	adds	r4, r0, #1
 8004f62:	4629      	mov	r1, r5
 8004f64:	4561      	cmp	r1, ip
 8004f66:	d30a      	bcc.n	8004f7e <__exponent+0x66>
 8004f68:	f10d 0209 	add.w	r2, sp, #9
 8004f6c:	eba2 020e 	sub.w	r2, r2, lr
 8004f70:	4565      	cmp	r5, ip
 8004f72:	bf88      	it	hi
 8004f74:	2200      	movhi	r2, #0
 8004f76:	4413      	add	r3, r2
 8004f78:	1a18      	subs	r0, r3, r0
 8004f7a:	b003      	add	sp, #12
 8004f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f86:	e7ed      	b.n	8004f64 <__exponent+0x4c>
 8004f88:	2330      	movs	r3, #48	; 0x30
 8004f8a:	3130      	adds	r1, #48	; 0x30
 8004f8c:	7083      	strb	r3, [r0, #2]
 8004f8e:	70c1      	strb	r1, [r0, #3]
 8004f90:	1d03      	adds	r3, r0, #4
 8004f92:	e7f1      	b.n	8004f78 <__exponent+0x60>

08004f94 <_printf_float>:
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	ed2d 8b02 	vpush	{d8}
 8004f9c:	b08d      	sub	sp, #52	; 0x34
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	4605      	mov	r5, r0
 8004faa:	f002 ff1f 	bl	8007dec <_localeconv_r>
 8004fae:	f8d0 a000 	ldr.w	sl, [r0]
 8004fb2:	4650      	mov	r0, sl
 8004fb4:	f7fb f91e 	bl	80001f4 <strlen>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	930a      	str	r3, [sp, #40]	; 0x28
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	9305      	str	r3, [sp, #20]
 8004fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fc8:	3307      	adds	r3, #7
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	f103 0208 	add.w	r2, r3, #8
 8004fd2:	f8c8 2000 	str.w	r2, [r8]
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fe6:	9307      	str	r3, [sp, #28]
 8004fe8:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fec:	ee08 0a10 	vmov	s16, r0
 8004ff0:	4b9f      	ldr	r3, [pc, #636]	; (8005270 <_printf_float+0x2dc>)
 8004ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffa:	f7fb fdaf 	bl	8000b5c <__aeabi_dcmpun>
 8004ffe:	bb88      	cbnz	r0, 8005064 <_printf_float+0xd0>
 8005000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005004:	4b9a      	ldr	r3, [pc, #616]	; (8005270 <_printf_float+0x2dc>)
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	f7fb fd89 	bl	8000b20 <__aeabi_dcmple>
 800500e:	bb48      	cbnz	r0, 8005064 <_printf_float+0xd0>
 8005010:	2200      	movs	r2, #0
 8005012:	2300      	movs	r3, #0
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb fd78 	bl	8000b0c <__aeabi_dcmplt>
 800501c:	b110      	cbz	r0, 8005024 <_printf_float+0x90>
 800501e:	232d      	movs	r3, #45	; 0x2d
 8005020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005024:	4b93      	ldr	r3, [pc, #588]	; (8005274 <_printf_float+0x2e0>)
 8005026:	4894      	ldr	r0, [pc, #592]	; (8005278 <_printf_float+0x2e4>)
 8005028:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800502c:	bf94      	ite	ls
 800502e:	4698      	movls	r8, r3
 8005030:	4680      	movhi	r8, r0
 8005032:	2303      	movs	r3, #3
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	9b05      	ldr	r3, [sp, #20]
 8005038:	f023 0204 	bic.w	r2, r3, #4
 800503c:	6022      	str	r2, [r4, #0]
 800503e:	f04f 0900 	mov.w	r9, #0
 8005042:	9700      	str	r7, [sp, #0]
 8005044:	4633      	mov	r3, r6
 8005046:	aa0b      	add	r2, sp, #44	; 0x2c
 8005048:	4621      	mov	r1, r4
 800504a:	4628      	mov	r0, r5
 800504c:	f000 f9d8 	bl	8005400 <_printf_common>
 8005050:	3001      	adds	r0, #1
 8005052:	f040 8090 	bne.w	8005176 <_printf_float+0x1e2>
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	b00d      	add	sp, #52	; 0x34
 800505c:	ecbd 8b02 	vpop	{d8}
 8005060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	4640      	mov	r0, r8
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb fd76 	bl	8000b5c <__aeabi_dcmpun>
 8005070:	b140      	cbz	r0, 8005084 <_printf_float+0xf0>
 8005072:	464b      	mov	r3, r9
 8005074:	2b00      	cmp	r3, #0
 8005076:	bfbc      	itt	lt
 8005078:	232d      	movlt	r3, #45	; 0x2d
 800507a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800507e:	487f      	ldr	r0, [pc, #508]	; (800527c <_printf_float+0x2e8>)
 8005080:	4b7f      	ldr	r3, [pc, #508]	; (8005280 <_printf_float+0x2ec>)
 8005082:	e7d1      	b.n	8005028 <_printf_float+0x94>
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800508a:	9206      	str	r2, [sp, #24]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	d13f      	bne.n	8005110 <_printf_float+0x17c>
 8005090:	2306      	movs	r3, #6
 8005092:	6063      	str	r3, [r4, #4]
 8005094:	9b05      	ldr	r3, [sp, #20]
 8005096:	6861      	ldr	r1, [r4, #4]
 8005098:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800509c:	2300      	movs	r3, #0
 800509e:	9303      	str	r3, [sp, #12]
 80050a0:	ab0a      	add	r3, sp, #40	; 0x28
 80050a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050a6:	ab09      	add	r3, sp, #36	; 0x24
 80050a8:	ec49 8b10 	vmov	d0, r8, r9
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	6022      	str	r2, [r4, #0]
 80050b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050b4:	4628      	mov	r0, r5
 80050b6:	f7ff fecd 	bl	8004e54 <__cvt>
 80050ba:	9b06      	ldr	r3, [sp, #24]
 80050bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050be:	2b47      	cmp	r3, #71	; 0x47
 80050c0:	4680      	mov	r8, r0
 80050c2:	d108      	bne.n	80050d6 <_printf_float+0x142>
 80050c4:	1cc8      	adds	r0, r1, #3
 80050c6:	db02      	blt.n	80050ce <_printf_float+0x13a>
 80050c8:	6863      	ldr	r3, [r4, #4]
 80050ca:	4299      	cmp	r1, r3
 80050cc:	dd41      	ble.n	8005152 <_printf_float+0x1be>
 80050ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80050d2:	fa5f fb8b 	uxtb.w	fp, fp
 80050d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050da:	d820      	bhi.n	800511e <_printf_float+0x18a>
 80050dc:	3901      	subs	r1, #1
 80050de:	465a      	mov	r2, fp
 80050e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050e4:	9109      	str	r1, [sp, #36]	; 0x24
 80050e6:	f7ff ff17 	bl	8004f18 <__exponent>
 80050ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ec:	1813      	adds	r3, r2, r0
 80050ee:	2a01      	cmp	r2, #1
 80050f0:	4681      	mov	r9, r0
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	dc02      	bgt.n	80050fc <_printf_float+0x168>
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	07d2      	lsls	r2, r2, #31
 80050fa:	d501      	bpl.n	8005100 <_printf_float+0x16c>
 80050fc:	3301      	adds	r3, #1
 80050fe:	6123      	str	r3, [r4, #16]
 8005100:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005104:	2b00      	cmp	r3, #0
 8005106:	d09c      	beq.n	8005042 <_printf_float+0xae>
 8005108:	232d      	movs	r3, #45	; 0x2d
 800510a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510e:	e798      	b.n	8005042 <_printf_float+0xae>
 8005110:	9a06      	ldr	r2, [sp, #24]
 8005112:	2a47      	cmp	r2, #71	; 0x47
 8005114:	d1be      	bne.n	8005094 <_printf_float+0x100>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1bc      	bne.n	8005094 <_printf_float+0x100>
 800511a:	2301      	movs	r3, #1
 800511c:	e7b9      	b.n	8005092 <_printf_float+0xfe>
 800511e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005122:	d118      	bne.n	8005156 <_printf_float+0x1c2>
 8005124:	2900      	cmp	r1, #0
 8005126:	6863      	ldr	r3, [r4, #4]
 8005128:	dd0b      	ble.n	8005142 <_printf_float+0x1ae>
 800512a:	6121      	str	r1, [r4, #16]
 800512c:	b913      	cbnz	r3, 8005134 <_printf_float+0x1a0>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	07d0      	lsls	r0, r2, #31
 8005132:	d502      	bpl.n	800513a <_printf_float+0x1a6>
 8005134:	3301      	adds	r3, #1
 8005136:	440b      	add	r3, r1
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	65a1      	str	r1, [r4, #88]	; 0x58
 800513c:	f04f 0900 	mov.w	r9, #0
 8005140:	e7de      	b.n	8005100 <_printf_float+0x16c>
 8005142:	b913      	cbnz	r3, 800514a <_printf_float+0x1b6>
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	07d2      	lsls	r2, r2, #31
 8005148:	d501      	bpl.n	800514e <_printf_float+0x1ba>
 800514a:	3302      	adds	r3, #2
 800514c:	e7f4      	b.n	8005138 <_printf_float+0x1a4>
 800514e:	2301      	movs	r3, #1
 8005150:	e7f2      	b.n	8005138 <_printf_float+0x1a4>
 8005152:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005158:	4299      	cmp	r1, r3
 800515a:	db05      	blt.n	8005168 <_printf_float+0x1d4>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	6121      	str	r1, [r4, #16]
 8005160:	07d8      	lsls	r0, r3, #31
 8005162:	d5ea      	bpl.n	800513a <_printf_float+0x1a6>
 8005164:	1c4b      	adds	r3, r1, #1
 8005166:	e7e7      	b.n	8005138 <_printf_float+0x1a4>
 8005168:	2900      	cmp	r1, #0
 800516a:	bfd4      	ite	le
 800516c:	f1c1 0202 	rsble	r2, r1, #2
 8005170:	2201      	movgt	r2, #1
 8005172:	4413      	add	r3, r2
 8005174:	e7e0      	b.n	8005138 <_printf_float+0x1a4>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	055a      	lsls	r2, r3, #21
 800517a:	d407      	bmi.n	800518c <_printf_float+0x1f8>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	4642      	mov	r2, r8
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	d12c      	bne.n	80051e4 <_printf_float+0x250>
 800518a:	e764      	b.n	8005056 <_printf_float+0xc2>
 800518c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005190:	f240 80e0 	bls.w	8005354 <_printf_float+0x3c0>
 8005194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005198:	2200      	movs	r2, #0
 800519a:	2300      	movs	r3, #0
 800519c:	f7fb fcac 	bl	8000af8 <__aeabi_dcmpeq>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d034      	beq.n	800520e <_printf_float+0x27a>
 80051a4:	4a37      	ldr	r2, [pc, #220]	; (8005284 <_printf_float+0x2f0>)
 80051a6:	2301      	movs	r3, #1
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	f43f af51 	beq.w	8005056 <_printf_float+0xc2>
 80051b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b8:	429a      	cmp	r2, r3
 80051ba:	db02      	blt.n	80051c2 <_printf_float+0x22e>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	07d8      	lsls	r0, r3, #31
 80051c0:	d510      	bpl.n	80051e4 <_printf_float+0x250>
 80051c2:	ee18 3a10 	vmov	r3, s16
 80051c6:	4652      	mov	r2, sl
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	47b8      	blx	r7
 80051ce:	3001      	adds	r0, #1
 80051d0:	f43f af41 	beq.w	8005056 <_printf_float+0xc2>
 80051d4:	f04f 0800 	mov.w	r8, #0
 80051d8:	f104 091a 	add.w	r9, r4, #26
 80051dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	4543      	cmp	r3, r8
 80051e2:	dc09      	bgt.n	80051f8 <_printf_float+0x264>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	079b      	lsls	r3, r3, #30
 80051e8:	f100 8105 	bmi.w	80053f6 <_printf_float+0x462>
 80051ec:	68e0      	ldr	r0, [r4, #12]
 80051ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f0:	4298      	cmp	r0, r3
 80051f2:	bfb8      	it	lt
 80051f4:	4618      	movlt	r0, r3
 80051f6:	e730      	b.n	800505a <_printf_float+0xc6>
 80051f8:	2301      	movs	r3, #1
 80051fa:	464a      	mov	r2, r9
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	f43f af27 	beq.w	8005056 <_printf_float+0xc2>
 8005208:	f108 0801 	add.w	r8, r8, #1
 800520c:	e7e6      	b.n	80051dc <_printf_float+0x248>
 800520e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	dc39      	bgt.n	8005288 <_printf_float+0x2f4>
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <_printf_float+0x2f0>)
 8005216:	2301      	movs	r3, #1
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f af19 	beq.w	8005056 <_printf_float+0xc2>
 8005224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005228:	4313      	orrs	r3, r2
 800522a:	d102      	bne.n	8005232 <_printf_float+0x29e>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	07d9      	lsls	r1, r3, #31
 8005230:	d5d8      	bpl.n	80051e4 <_printf_float+0x250>
 8005232:	ee18 3a10 	vmov	r3, s16
 8005236:	4652      	mov	r2, sl
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f af09 	beq.w	8005056 <_printf_float+0xc2>
 8005244:	f04f 0900 	mov.w	r9, #0
 8005248:	f104 0a1a 	add.w	sl, r4, #26
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	425b      	negs	r3, r3
 8005250:	454b      	cmp	r3, r9
 8005252:	dc01      	bgt.n	8005258 <_printf_float+0x2c4>
 8005254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005256:	e792      	b.n	800517e <_printf_float+0x1ea>
 8005258:	2301      	movs	r3, #1
 800525a:	4652      	mov	r2, sl
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f aef7 	beq.w	8005056 <_printf_float+0xc2>
 8005268:	f109 0901 	add.w	r9, r9, #1
 800526c:	e7ee      	b.n	800524c <_printf_float+0x2b8>
 800526e:	bf00      	nop
 8005270:	7fefffff 	.word	0x7fefffff
 8005274:	0800a330 	.word	0x0800a330
 8005278:	0800a334 	.word	0x0800a334
 800527c:	0800a33c 	.word	0x0800a33c
 8005280:	0800a338 	.word	0x0800a338
 8005284:	0800a731 	.word	0x0800a731
 8005288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800528a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800528c:	429a      	cmp	r2, r3
 800528e:	bfa8      	it	ge
 8005290:	461a      	movge	r2, r3
 8005292:	2a00      	cmp	r2, #0
 8005294:	4691      	mov	r9, r2
 8005296:	dc37      	bgt.n	8005308 <_printf_float+0x374>
 8005298:	f04f 0b00 	mov.w	fp, #0
 800529c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a0:	f104 021a 	add.w	r2, r4, #26
 80052a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052a6:	9305      	str	r3, [sp, #20]
 80052a8:	eba3 0309 	sub.w	r3, r3, r9
 80052ac:	455b      	cmp	r3, fp
 80052ae:	dc33      	bgt.n	8005318 <_printf_float+0x384>
 80052b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052b4:	429a      	cmp	r2, r3
 80052b6:	db3b      	blt.n	8005330 <_printf_float+0x39c>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	07da      	lsls	r2, r3, #31
 80052bc:	d438      	bmi.n	8005330 <_printf_float+0x39c>
 80052be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c0:	9a05      	ldr	r2, [sp, #20]
 80052c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052c4:	1a9a      	subs	r2, r3, r2
 80052c6:	eba3 0901 	sub.w	r9, r3, r1
 80052ca:	4591      	cmp	r9, r2
 80052cc:	bfa8      	it	ge
 80052ce:	4691      	movge	r9, r2
 80052d0:	f1b9 0f00 	cmp.w	r9, #0
 80052d4:	dc35      	bgt.n	8005342 <_printf_float+0x3ae>
 80052d6:	f04f 0800 	mov.w	r8, #0
 80052da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052de:	f104 0a1a 	add.w	sl, r4, #26
 80052e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	eba3 0309 	sub.w	r3, r3, r9
 80052ec:	4543      	cmp	r3, r8
 80052ee:	f77f af79 	ble.w	80051e4 <_printf_float+0x250>
 80052f2:	2301      	movs	r3, #1
 80052f4:	4652      	mov	r2, sl
 80052f6:	4631      	mov	r1, r6
 80052f8:	4628      	mov	r0, r5
 80052fa:	47b8      	blx	r7
 80052fc:	3001      	adds	r0, #1
 80052fe:	f43f aeaa 	beq.w	8005056 <_printf_float+0xc2>
 8005302:	f108 0801 	add.w	r8, r8, #1
 8005306:	e7ec      	b.n	80052e2 <_printf_float+0x34e>
 8005308:	4613      	mov	r3, r2
 800530a:	4631      	mov	r1, r6
 800530c:	4642      	mov	r2, r8
 800530e:	4628      	mov	r0, r5
 8005310:	47b8      	blx	r7
 8005312:	3001      	adds	r0, #1
 8005314:	d1c0      	bne.n	8005298 <_printf_float+0x304>
 8005316:	e69e      	b.n	8005056 <_printf_float+0xc2>
 8005318:	2301      	movs	r3, #1
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	9205      	str	r2, [sp, #20]
 8005320:	47b8      	blx	r7
 8005322:	3001      	adds	r0, #1
 8005324:	f43f ae97 	beq.w	8005056 <_printf_float+0xc2>
 8005328:	9a05      	ldr	r2, [sp, #20]
 800532a:	f10b 0b01 	add.w	fp, fp, #1
 800532e:	e7b9      	b.n	80052a4 <_printf_float+0x310>
 8005330:	ee18 3a10 	vmov	r3, s16
 8005334:	4652      	mov	r2, sl
 8005336:	4631      	mov	r1, r6
 8005338:	4628      	mov	r0, r5
 800533a:	47b8      	blx	r7
 800533c:	3001      	adds	r0, #1
 800533e:	d1be      	bne.n	80052be <_printf_float+0x32a>
 8005340:	e689      	b.n	8005056 <_printf_float+0xc2>
 8005342:	9a05      	ldr	r2, [sp, #20]
 8005344:	464b      	mov	r3, r9
 8005346:	4442      	add	r2, r8
 8005348:	4631      	mov	r1, r6
 800534a:	4628      	mov	r0, r5
 800534c:	47b8      	blx	r7
 800534e:	3001      	adds	r0, #1
 8005350:	d1c1      	bne.n	80052d6 <_printf_float+0x342>
 8005352:	e680      	b.n	8005056 <_printf_float+0xc2>
 8005354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005356:	2a01      	cmp	r2, #1
 8005358:	dc01      	bgt.n	800535e <_printf_float+0x3ca>
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d538      	bpl.n	80053d0 <_printf_float+0x43c>
 800535e:	2301      	movs	r3, #1
 8005360:	4642      	mov	r2, r8
 8005362:	4631      	mov	r1, r6
 8005364:	4628      	mov	r0, r5
 8005366:	47b8      	blx	r7
 8005368:	3001      	adds	r0, #1
 800536a:	f43f ae74 	beq.w	8005056 <_printf_float+0xc2>
 800536e:	ee18 3a10 	vmov	r3, s16
 8005372:	4652      	mov	r2, sl
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f43f ae6b 	beq.w	8005056 <_printf_float+0xc2>
 8005380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005384:	2200      	movs	r2, #0
 8005386:	2300      	movs	r3, #0
 8005388:	f7fb fbb6 	bl	8000af8 <__aeabi_dcmpeq>
 800538c:	b9d8      	cbnz	r0, 80053c6 <_printf_float+0x432>
 800538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005390:	f108 0201 	add.w	r2, r8, #1
 8005394:	3b01      	subs	r3, #1
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	d10e      	bne.n	80053be <_printf_float+0x42a>
 80053a0:	e659      	b.n	8005056 <_printf_float+0xc2>
 80053a2:	2301      	movs	r3, #1
 80053a4:	4652      	mov	r2, sl
 80053a6:	4631      	mov	r1, r6
 80053a8:	4628      	mov	r0, r5
 80053aa:	47b8      	blx	r7
 80053ac:	3001      	adds	r0, #1
 80053ae:	f43f ae52 	beq.w	8005056 <_printf_float+0xc2>
 80053b2:	f108 0801 	add.w	r8, r8, #1
 80053b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b8:	3b01      	subs	r3, #1
 80053ba:	4543      	cmp	r3, r8
 80053bc:	dcf1      	bgt.n	80053a2 <_printf_float+0x40e>
 80053be:	464b      	mov	r3, r9
 80053c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053c4:	e6dc      	b.n	8005180 <_printf_float+0x1ec>
 80053c6:	f04f 0800 	mov.w	r8, #0
 80053ca:	f104 0a1a 	add.w	sl, r4, #26
 80053ce:	e7f2      	b.n	80053b6 <_printf_float+0x422>
 80053d0:	2301      	movs	r3, #1
 80053d2:	4642      	mov	r2, r8
 80053d4:	e7df      	b.n	8005396 <_printf_float+0x402>
 80053d6:	2301      	movs	r3, #1
 80053d8:	464a      	mov	r2, r9
 80053da:	4631      	mov	r1, r6
 80053dc:	4628      	mov	r0, r5
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	f43f ae38 	beq.w	8005056 <_printf_float+0xc2>
 80053e6:	f108 0801 	add.w	r8, r8, #1
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ee:	1a5b      	subs	r3, r3, r1
 80053f0:	4543      	cmp	r3, r8
 80053f2:	dcf0      	bgt.n	80053d6 <_printf_float+0x442>
 80053f4:	e6fa      	b.n	80051ec <_printf_float+0x258>
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	f104 0919 	add.w	r9, r4, #25
 80053fe:	e7f4      	b.n	80053ea <_printf_float+0x456>

08005400 <_printf_common>:
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	4616      	mov	r6, r2
 8005406:	4699      	mov	r9, r3
 8005408:	688a      	ldr	r2, [r1, #8]
 800540a:	690b      	ldr	r3, [r1, #16]
 800540c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005410:	4293      	cmp	r3, r2
 8005412:	bfb8      	it	lt
 8005414:	4613      	movlt	r3, r2
 8005416:	6033      	str	r3, [r6, #0]
 8005418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800541c:	4607      	mov	r7, r0
 800541e:	460c      	mov	r4, r1
 8005420:	b10a      	cbz	r2, 8005426 <_printf_common+0x26>
 8005422:	3301      	adds	r3, #1
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	0699      	lsls	r1, r3, #26
 800542a:	bf42      	ittt	mi
 800542c:	6833      	ldrmi	r3, [r6, #0]
 800542e:	3302      	addmi	r3, #2
 8005430:	6033      	strmi	r3, [r6, #0]
 8005432:	6825      	ldr	r5, [r4, #0]
 8005434:	f015 0506 	ands.w	r5, r5, #6
 8005438:	d106      	bne.n	8005448 <_printf_common+0x48>
 800543a:	f104 0a19 	add.w	sl, r4, #25
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	6832      	ldr	r2, [r6, #0]
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	42ab      	cmp	r3, r5
 8005446:	dc26      	bgt.n	8005496 <_printf_common+0x96>
 8005448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800544c:	1e13      	subs	r3, r2, #0
 800544e:	6822      	ldr	r2, [r4, #0]
 8005450:	bf18      	it	ne
 8005452:	2301      	movne	r3, #1
 8005454:	0692      	lsls	r2, r2, #26
 8005456:	d42b      	bmi.n	80054b0 <_printf_common+0xb0>
 8005458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800545c:	4649      	mov	r1, r9
 800545e:	4638      	mov	r0, r7
 8005460:	47c0      	blx	r8
 8005462:	3001      	adds	r0, #1
 8005464:	d01e      	beq.n	80054a4 <_printf_common+0xa4>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	68e5      	ldr	r5, [r4, #12]
 800546a:	6832      	ldr	r2, [r6, #0]
 800546c:	f003 0306 	and.w	r3, r3, #6
 8005470:	2b04      	cmp	r3, #4
 8005472:	bf08      	it	eq
 8005474:	1aad      	subeq	r5, r5, r2
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	6922      	ldr	r2, [r4, #16]
 800547a:	bf0c      	ite	eq
 800547c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005480:	2500      	movne	r5, #0
 8005482:	4293      	cmp	r3, r2
 8005484:	bfc4      	itt	gt
 8005486:	1a9b      	subgt	r3, r3, r2
 8005488:	18ed      	addgt	r5, r5, r3
 800548a:	2600      	movs	r6, #0
 800548c:	341a      	adds	r4, #26
 800548e:	42b5      	cmp	r5, r6
 8005490:	d11a      	bne.n	80054c8 <_printf_common+0xc8>
 8005492:	2000      	movs	r0, #0
 8005494:	e008      	b.n	80054a8 <_printf_common+0xa8>
 8005496:	2301      	movs	r3, #1
 8005498:	4652      	mov	r2, sl
 800549a:	4649      	mov	r1, r9
 800549c:	4638      	mov	r0, r7
 800549e:	47c0      	blx	r8
 80054a0:	3001      	adds	r0, #1
 80054a2:	d103      	bne.n	80054ac <_printf_common+0xac>
 80054a4:	f04f 30ff 	mov.w	r0, #4294967295
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ac:	3501      	adds	r5, #1
 80054ae:	e7c6      	b.n	800543e <_printf_common+0x3e>
 80054b0:	18e1      	adds	r1, r4, r3
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	2030      	movs	r0, #48	; 0x30
 80054b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054ba:	4422      	add	r2, r4
 80054bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c4:	3302      	adds	r3, #2
 80054c6:	e7c7      	b.n	8005458 <_printf_common+0x58>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4622      	mov	r2, r4
 80054cc:	4649      	mov	r1, r9
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c0      	blx	r8
 80054d2:	3001      	adds	r0, #1
 80054d4:	d0e6      	beq.n	80054a4 <_printf_common+0xa4>
 80054d6:	3601      	adds	r6, #1
 80054d8:	e7d9      	b.n	800548e <_printf_common+0x8e>
	...

080054dc <_printf_i>:
 80054dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	7e0f      	ldrb	r7, [r1, #24]
 80054e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e4:	2f78      	cmp	r7, #120	; 0x78
 80054e6:	4691      	mov	r9, r2
 80054e8:	4680      	mov	r8, r0
 80054ea:	460c      	mov	r4, r1
 80054ec:	469a      	mov	sl, r3
 80054ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054f2:	d807      	bhi.n	8005504 <_printf_i+0x28>
 80054f4:	2f62      	cmp	r7, #98	; 0x62
 80054f6:	d80a      	bhi.n	800550e <_printf_i+0x32>
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	f000 80d8 	beq.w	80056ae <_printf_i+0x1d2>
 80054fe:	2f58      	cmp	r7, #88	; 0x58
 8005500:	f000 80a3 	beq.w	800564a <_printf_i+0x16e>
 8005504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800550c:	e03a      	b.n	8005584 <_printf_i+0xa8>
 800550e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005512:	2b15      	cmp	r3, #21
 8005514:	d8f6      	bhi.n	8005504 <_printf_i+0x28>
 8005516:	a101      	add	r1, pc, #4	; (adr r1, 800551c <_printf_i+0x40>)
 8005518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800551c:	08005575 	.word	0x08005575
 8005520:	08005589 	.word	0x08005589
 8005524:	08005505 	.word	0x08005505
 8005528:	08005505 	.word	0x08005505
 800552c:	08005505 	.word	0x08005505
 8005530:	08005505 	.word	0x08005505
 8005534:	08005589 	.word	0x08005589
 8005538:	08005505 	.word	0x08005505
 800553c:	08005505 	.word	0x08005505
 8005540:	08005505 	.word	0x08005505
 8005544:	08005505 	.word	0x08005505
 8005548:	08005695 	.word	0x08005695
 800554c:	080055b9 	.word	0x080055b9
 8005550:	08005677 	.word	0x08005677
 8005554:	08005505 	.word	0x08005505
 8005558:	08005505 	.word	0x08005505
 800555c:	080056b7 	.word	0x080056b7
 8005560:	08005505 	.word	0x08005505
 8005564:	080055b9 	.word	0x080055b9
 8005568:	08005505 	.word	0x08005505
 800556c:	08005505 	.word	0x08005505
 8005570:	0800567f 	.word	0x0800567f
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	602a      	str	r2, [r5, #0]
 800557c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005584:	2301      	movs	r3, #1
 8005586:	e0a3      	b.n	80056d0 <_printf_i+0x1f4>
 8005588:	6820      	ldr	r0, [r4, #0]
 800558a:	6829      	ldr	r1, [r5, #0]
 800558c:	0606      	lsls	r6, r0, #24
 800558e:	f101 0304 	add.w	r3, r1, #4
 8005592:	d50a      	bpl.n	80055aa <_printf_i+0xce>
 8005594:	680e      	ldr	r6, [r1, #0]
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	2e00      	cmp	r6, #0
 800559a:	da03      	bge.n	80055a4 <_printf_i+0xc8>
 800559c:	232d      	movs	r3, #45	; 0x2d
 800559e:	4276      	negs	r6, r6
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	485e      	ldr	r0, [pc, #376]	; (8005720 <_printf_i+0x244>)
 80055a6:	230a      	movs	r3, #10
 80055a8:	e019      	b.n	80055de <_printf_i+0x102>
 80055aa:	680e      	ldr	r6, [r1, #0]
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b2:	bf18      	it	ne
 80055b4:	b236      	sxthne	r6, r6
 80055b6:	e7ef      	b.n	8005598 <_printf_i+0xbc>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	6820      	ldr	r0, [r4, #0]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	6029      	str	r1, [r5, #0]
 80055c0:	0601      	lsls	r1, r0, #24
 80055c2:	d501      	bpl.n	80055c8 <_printf_i+0xec>
 80055c4:	681e      	ldr	r6, [r3, #0]
 80055c6:	e002      	b.n	80055ce <_printf_i+0xf2>
 80055c8:	0646      	lsls	r6, r0, #25
 80055ca:	d5fb      	bpl.n	80055c4 <_printf_i+0xe8>
 80055cc:	881e      	ldrh	r6, [r3, #0]
 80055ce:	4854      	ldr	r0, [pc, #336]	; (8005720 <_printf_i+0x244>)
 80055d0:	2f6f      	cmp	r7, #111	; 0x6f
 80055d2:	bf0c      	ite	eq
 80055d4:	2308      	moveq	r3, #8
 80055d6:	230a      	movne	r3, #10
 80055d8:	2100      	movs	r1, #0
 80055da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055de:	6865      	ldr	r5, [r4, #4]
 80055e0:	60a5      	str	r5, [r4, #8]
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	bfa2      	ittt	ge
 80055e6:	6821      	ldrge	r1, [r4, #0]
 80055e8:	f021 0104 	bicge.w	r1, r1, #4
 80055ec:	6021      	strge	r1, [r4, #0]
 80055ee:	b90e      	cbnz	r6, 80055f4 <_printf_i+0x118>
 80055f0:	2d00      	cmp	r5, #0
 80055f2:	d04d      	beq.n	8005690 <_printf_i+0x1b4>
 80055f4:	4615      	mov	r5, r2
 80055f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80055fa:	fb03 6711 	mls	r7, r3, r1, r6
 80055fe:	5dc7      	ldrb	r7, [r0, r7]
 8005600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005604:	4637      	mov	r7, r6
 8005606:	42bb      	cmp	r3, r7
 8005608:	460e      	mov	r6, r1
 800560a:	d9f4      	bls.n	80055f6 <_printf_i+0x11a>
 800560c:	2b08      	cmp	r3, #8
 800560e:	d10b      	bne.n	8005628 <_printf_i+0x14c>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	07de      	lsls	r6, r3, #31
 8005614:	d508      	bpl.n	8005628 <_printf_i+0x14c>
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	6861      	ldr	r1, [r4, #4]
 800561a:	4299      	cmp	r1, r3
 800561c:	bfde      	ittt	le
 800561e:	2330      	movle	r3, #48	; 0x30
 8005620:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005624:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005628:	1b52      	subs	r2, r2, r5
 800562a:	6122      	str	r2, [r4, #16]
 800562c:	f8cd a000 	str.w	sl, [sp]
 8005630:	464b      	mov	r3, r9
 8005632:	aa03      	add	r2, sp, #12
 8005634:	4621      	mov	r1, r4
 8005636:	4640      	mov	r0, r8
 8005638:	f7ff fee2 	bl	8005400 <_printf_common>
 800563c:	3001      	adds	r0, #1
 800563e:	d14c      	bne.n	80056da <_printf_i+0x1fe>
 8005640:	f04f 30ff 	mov.w	r0, #4294967295
 8005644:	b004      	add	sp, #16
 8005646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564a:	4835      	ldr	r0, [pc, #212]	; (8005720 <_printf_i+0x244>)
 800564c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005650:	6829      	ldr	r1, [r5, #0]
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	f851 6b04 	ldr.w	r6, [r1], #4
 8005658:	6029      	str	r1, [r5, #0]
 800565a:	061d      	lsls	r5, r3, #24
 800565c:	d514      	bpl.n	8005688 <_printf_i+0x1ac>
 800565e:	07df      	lsls	r7, r3, #31
 8005660:	bf44      	itt	mi
 8005662:	f043 0320 	orrmi.w	r3, r3, #32
 8005666:	6023      	strmi	r3, [r4, #0]
 8005668:	b91e      	cbnz	r6, 8005672 <_printf_i+0x196>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	f023 0320 	bic.w	r3, r3, #32
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	2310      	movs	r3, #16
 8005674:	e7b0      	b.n	80055d8 <_printf_i+0xfc>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f043 0320 	orr.w	r3, r3, #32
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	2378      	movs	r3, #120	; 0x78
 8005680:	4828      	ldr	r0, [pc, #160]	; (8005724 <_printf_i+0x248>)
 8005682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005686:	e7e3      	b.n	8005650 <_printf_i+0x174>
 8005688:	0659      	lsls	r1, r3, #25
 800568a:	bf48      	it	mi
 800568c:	b2b6      	uxthmi	r6, r6
 800568e:	e7e6      	b.n	800565e <_printf_i+0x182>
 8005690:	4615      	mov	r5, r2
 8005692:	e7bb      	b.n	800560c <_printf_i+0x130>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	6826      	ldr	r6, [r4, #0]
 8005698:	6961      	ldr	r1, [r4, #20]
 800569a:	1d18      	adds	r0, r3, #4
 800569c:	6028      	str	r0, [r5, #0]
 800569e:	0635      	lsls	r5, r6, #24
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	d501      	bpl.n	80056a8 <_printf_i+0x1cc>
 80056a4:	6019      	str	r1, [r3, #0]
 80056a6:	e002      	b.n	80056ae <_printf_i+0x1d2>
 80056a8:	0670      	lsls	r0, r6, #25
 80056aa:	d5fb      	bpl.n	80056a4 <_printf_i+0x1c8>
 80056ac:	8019      	strh	r1, [r3, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	6123      	str	r3, [r4, #16]
 80056b2:	4615      	mov	r5, r2
 80056b4:	e7ba      	b.n	800562c <_printf_i+0x150>
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	1d1a      	adds	r2, r3, #4
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	6862      	ldr	r2, [r4, #4]
 80056c0:	2100      	movs	r1, #0
 80056c2:	4628      	mov	r0, r5
 80056c4:	f7fa fda4 	bl	8000210 <memchr>
 80056c8:	b108      	cbz	r0, 80056ce <_printf_i+0x1f2>
 80056ca:	1b40      	subs	r0, r0, r5
 80056cc:	6060      	str	r0, [r4, #4]
 80056ce:	6863      	ldr	r3, [r4, #4]
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	2300      	movs	r3, #0
 80056d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d8:	e7a8      	b.n	800562c <_printf_i+0x150>
 80056da:	6923      	ldr	r3, [r4, #16]
 80056dc:	462a      	mov	r2, r5
 80056de:	4649      	mov	r1, r9
 80056e0:	4640      	mov	r0, r8
 80056e2:	47d0      	blx	sl
 80056e4:	3001      	adds	r0, #1
 80056e6:	d0ab      	beq.n	8005640 <_printf_i+0x164>
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	079b      	lsls	r3, r3, #30
 80056ec:	d413      	bmi.n	8005716 <_printf_i+0x23a>
 80056ee:	68e0      	ldr	r0, [r4, #12]
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	4298      	cmp	r0, r3
 80056f4:	bfb8      	it	lt
 80056f6:	4618      	movlt	r0, r3
 80056f8:	e7a4      	b.n	8005644 <_printf_i+0x168>
 80056fa:	2301      	movs	r3, #1
 80056fc:	4632      	mov	r2, r6
 80056fe:	4649      	mov	r1, r9
 8005700:	4640      	mov	r0, r8
 8005702:	47d0      	blx	sl
 8005704:	3001      	adds	r0, #1
 8005706:	d09b      	beq.n	8005640 <_printf_i+0x164>
 8005708:	3501      	adds	r5, #1
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	9903      	ldr	r1, [sp, #12]
 800570e:	1a5b      	subs	r3, r3, r1
 8005710:	42ab      	cmp	r3, r5
 8005712:	dcf2      	bgt.n	80056fa <_printf_i+0x21e>
 8005714:	e7eb      	b.n	80056ee <_printf_i+0x212>
 8005716:	2500      	movs	r5, #0
 8005718:	f104 0619 	add.w	r6, r4, #25
 800571c:	e7f5      	b.n	800570a <_printf_i+0x22e>
 800571e:	bf00      	nop
 8005720:	0800a340 	.word	0x0800a340
 8005724:	0800a351 	.word	0x0800a351

08005728 <_scanf_float>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	b087      	sub	sp, #28
 800572e:	4617      	mov	r7, r2
 8005730:	9303      	str	r3, [sp, #12]
 8005732:	688b      	ldr	r3, [r1, #8]
 8005734:	1e5a      	subs	r2, r3, #1
 8005736:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800573a:	bf83      	ittte	hi
 800573c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005740:	195b      	addhi	r3, r3, r5
 8005742:	9302      	strhi	r3, [sp, #8]
 8005744:	2300      	movls	r3, #0
 8005746:	bf86      	itte	hi
 8005748:	f240 135d 	movwhi	r3, #349	; 0x15d
 800574c:	608b      	strhi	r3, [r1, #8]
 800574e:	9302      	strls	r3, [sp, #8]
 8005750:	680b      	ldr	r3, [r1, #0]
 8005752:	468b      	mov	fp, r1
 8005754:	2500      	movs	r5, #0
 8005756:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800575a:	f84b 3b1c 	str.w	r3, [fp], #28
 800575e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005762:	4680      	mov	r8, r0
 8005764:	460c      	mov	r4, r1
 8005766:	465e      	mov	r6, fp
 8005768:	46aa      	mov	sl, r5
 800576a:	46a9      	mov	r9, r5
 800576c:	9501      	str	r5, [sp, #4]
 800576e:	68a2      	ldr	r2, [r4, #8]
 8005770:	b152      	cbz	r2, 8005788 <_scanf_float+0x60>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b4e      	cmp	r3, #78	; 0x4e
 8005778:	d864      	bhi.n	8005844 <_scanf_float+0x11c>
 800577a:	2b40      	cmp	r3, #64	; 0x40
 800577c:	d83c      	bhi.n	80057f8 <_scanf_float+0xd0>
 800577e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005782:	b2c8      	uxtb	r0, r1
 8005784:	280e      	cmp	r0, #14
 8005786:	d93a      	bls.n	80057fe <_scanf_float+0xd6>
 8005788:	f1b9 0f00 	cmp.w	r9, #0
 800578c:	d003      	beq.n	8005796 <_scanf_float+0x6e>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	f10a 3aff 	add.w	sl, sl, #4294967295
 800579a:	f1ba 0f01 	cmp.w	sl, #1
 800579e:	f200 8113 	bhi.w	80059c8 <_scanf_float+0x2a0>
 80057a2:	455e      	cmp	r6, fp
 80057a4:	f200 8105 	bhi.w	80059b2 <_scanf_float+0x28a>
 80057a8:	2501      	movs	r5, #1
 80057aa:	4628      	mov	r0, r5
 80057ac:	b007      	add	sp, #28
 80057ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80057b6:	2a0d      	cmp	r2, #13
 80057b8:	d8e6      	bhi.n	8005788 <_scanf_float+0x60>
 80057ba:	a101      	add	r1, pc, #4	; (adr r1, 80057c0 <_scanf_float+0x98>)
 80057bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057c0:	080058ff 	.word	0x080058ff
 80057c4:	08005789 	.word	0x08005789
 80057c8:	08005789 	.word	0x08005789
 80057cc:	08005789 	.word	0x08005789
 80057d0:	0800595f 	.word	0x0800595f
 80057d4:	08005937 	.word	0x08005937
 80057d8:	08005789 	.word	0x08005789
 80057dc:	08005789 	.word	0x08005789
 80057e0:	0800590d 	.word	0x0800590d
 80057e4:	08005789 	.word	0x08005789
 80057e8:	08005789 	.word	0x08005789
 80057ec:	08005789 	.word	0x08005789
 80057f0:	08005789 	.word	0x08005789
 80057f4:	080058c5 	.word	0x080058c5
 80057f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80057fc:	e7db      	b.n	80057b6 <_scanf_float+0x8e>
 80057fe:	290e      	cmp	r1, #14
 8005800:	d8c2      	bhi.n	8005788 <_scanf_float+0x60>
 8005802:	a001      	add	r0, pc, #4	; (adr r0, 8005808 <_scanf_float+0xe0>)
 8005804:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005808:	080058b7 	.word	0x080058b7
 800580c:	08005789 	.word	0x08005789
 8005810:	080058b7 	.word	0x080058b7
 8005814:	0800594b 	.word	0x0800594b
 8005818:	08005789 	.word	0x08005789
 800581c:	08005865 	.word	0x08005865
 8005820:	080058a1 	.word	0x080058a1
 8005824:	080058a1 	.word	0x080058a1
 8005828:	080058a1 	.word	0x080058a1
 800582c:	080058a1 	.word	0x080058a1
 8005830:	080058a1 	.word	0x080058a1
 8005834:	080058a1 	.word	0x080058a1
 8005838:	080058a1 	.word	0x080058a1
 800583c:	080058a1 	.word	0x080058a1
 8005840:	080058a1 	.word	0x080058a1
 8005844:	2b6e      	cmp	r3, #110	; 0x6e
 8005846:	d809      	bhi.n	800585c <_scanf_float+0x134>
 8005848:	2b60      	cmp	r3, #96	; 0x60
 800584a:	d8b2      	bhi.n	80057b2 <_scanf_float+0x8a>
 800584c:	2b54      	cmp	r3, #84	; 0x54
 800584e:	d077      	beq.n	8005940 <_scanf_float+0x218>
 8005850:	2b59      	cmp	r3, #89	; 0x59
 8005852:	d199      	bne.n	8005788 <_scanf_float+0x60>
 8005854:	2d07      	cmp	r5, #7
 8005856:	d197      	bne.n	8005788 <_scanf_float+0x60>
 8005858:	2508      	movs	r5, #8
 800585a:	e029      	b.n	80058b0 <_scanf_float+0x188>
 800585c:	2b74      	cmp	r3, #116	; 0x74
 800585e:	d06f      	beq.n	8005940 <_scanf_float+0x218>
 8005860:	2b79      	cmp	r3, #121	; 0x79
 8005862:	e7f6      	b.n	8005852 <_scanf_float+0x12a>
 8005864:	6821      	ldr	r1, [r4, #0]
 8005866:	05c8      	lsls	r0, r1, #23
 8005868:	d51a      	bpl.n	80058a0 <_scanf_float+0x178>
 800586a:	9b02      	ldr	r3, [sp, #8]
 800586c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005870:	6021      	str	r1, [r4, #0]
 8005872:	f109 0901 	add.w	r9, r9, #1
 8005876:	b11b      	cbz	r3, 8005880 <_scanf_float+0x158>
 8005878:	3b01      	subs	r3, #1
 800587a:	3201      	adds	r2, #1
 800587c:	9302      	str	r3, [sp, #8]
 800587e:	60a2      	str	r2, [r4, #8]
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	3b01      	subs	r3, #1
 8005884:	60a3      	str	r3, [r4, #8]
 8005886:	6923      	ldr	r3, [r4, #16]
 8005888:	3301      	adds	r3, #1
 800588a:	6123      	str	r3, [r4, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	3b01      	subs	r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	f340 8084 	ble.w	80059a0 <_scanf_float+0x278>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	e766      	b.n	800576e <_scanf_float+0x46>
 80058a0:	eb1a 0f05 	cmn.w	sl, r5
 80058a4:	f47f af70 	bne.w	8005788 <_scanf_float+0x60>
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80058ae:	6022      	str	r2, [r4, #0]
 80058b0:	f806 3b01 	strb.w	r3, [r6], #1
 80058b4:	e7e4      	b.n	8005880 <_scanf_float+0x158>
 80058b6:	6822      	ldr	r2, [r4, #0]
 80058b8:	0610      	lsls	r0, r2, #24
 80058ba:	f57f af65 	bpl.w	8005788 <_scanf_float+0x60>
 80058be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058c2:	e7f4      	b.n	80058ae <_scanf_float+0x186>
 80058c4:	f1ba 0f00 	cmp.w	sl, #0
 80058c8:	d10e      	bne.n	80058e8 <_scanf_float+0x1c0>
 80058ca:	f1b9 0f00 	cmp.w	r9, #0
 80058ce:	d10e      	bne.n	80058ee <_scanf_float+0x1c6>
 80058d0:	6822      	ldr	r2, [r4, #0]
 80058d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80058d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80058da:	d108      	bne.n	80058ee <_scanf_float+0x1c6>
 80058dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80058e0:	6022      	str	r2, [r4, #0]
 80058e2:	f04f 0a01 	mov.w	sl, #1
 80058e6:	e7e3      	b.n	80058b0 <_scanf_float+0x188>
 80058e8:	f1ba 0f02 	cmp.w	sl, #2
 80058ec:	d055      	beq.n	800599a <_scanf_float+0x272>
 80058ee:	2d01      	cmp	r5, #1
 80058f0:	d002      	beq.n	80058f8 <_scanf_float+0x1d0>
 80058f2:	2d04      	cmp	r5, #4
 80058f4:	f47f af48 	bne.w	8005788 <_scanf_float+0x60>
 80058f8:	3501      	adds	r5, #1
 80058fa:	b2ed      	uxtb	r5, r5
 80058fc:	e7d8      	b.n	80058b0 <_scanf_float+0x188>
 80058fe:	f1ba 0f01 	cmp.w	sl, #1
 8005902:	f47f af41 	bne.w	8005788 <_scanf_float+0x60>
 8005906:	f04f 0a02 	mov.w	sl, #2
 800590a:	e7d1      	b.n	80058b0 <_scanf_float+0x188>
 800590c:	b97d      	cbnz	r5, 800592e <_scanf_float+0x206>
 800590e:	f1b9 0f00 	cmp.w	r9, #0
 8005912:	f47f af3c 	bne.w	800578e <_scanf_float+0x66>
 8005916:	6822      	ldr	r2, [r4, #0]
 8005918:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800591c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005920:	f47f af39 	bne.w	8005796 <_scanf_float+0x6e>
 8005924:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005928:	6022      	str	r2, [r4, #0]
 800592a:	2501      	movs	r5, #1
 800592c:	e7c0      	b.n	80058b0 <_scanf_float+0x188>
 800592e:	2d03      	cmp	r5, #3
 8005930:	d0e2      	beq.n	80058f8 <_scanf_float+0x1d0>
 8005932:	2d05      	cmp	r5, #5
 8005934:	e7de      	b.n	80058f4 <_scanf_float+0x1cc>
 8005936:	2d02      	cmp	r5, #2
 8005938:	f47f af26 	bne.w	8005788 <_scanf_float+0x60>
 800593c:	2503      	movs	r5, #3
 800593e:	e7b7      	b.n	80058b0 <_scanf_float+0x188>
 8005940:	2d06      	cmp	r5, #6
 8005942:	f47f af21 	bne.w	8005788 <_scanf_float+0x60>
 8005946:	2507      	movs	r5, #7
 8005948:	e7b2      	b.n	80058b0 <_scanf_float+0x188>
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	0591      	lsls	r1, r2, #22
 800594e:	f57f af1b 	bpl.w	8005788 <_scanf_float+0x60>
 8005952:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005956:	6022      	str	r2, [r4, #0]
 8005958:	f8cd 9004 	str.w	r9, [sp, #4]
 800595c:	e7a8      	b.n	80058b0 <_scanf_float+0x188>
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005964:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005968:	d006      	beq.n	8005978 <_scanf_float+0x250>
 800596a:	0550      	lsls	r0, r2, #21
 800596c:	f57f af0c 	bpl.w	8005788 <_scanf_float+0x60>
 8005970:	f1b9 0f00 	cmp.w	r9, #0
 8005974:	f43f af0f 	beq.w	8005796 <_scanf_float+0x6e>
 8005978:	0591      	lsls	r1, r2, #22
 800597a:	bf58      	it	pl
 800597c:	9901      	ldrpl	r1, [sp, #4]
 800597e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005982:	bf58      	it	pl
 8005984:	eba9 0101 	subpl.w	r1, r9, r1
 8005988:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800598c:	bf58      	it	pl
 800598e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005992:	6022      	str	r2, [r4, #0]
 8005994:	f04f 0900 	mov.w	r9, #0
 8005998:	e78a      	b.n	80058b0 <_scanf_float+0x188>
 800599a:	f04f 0a03 	mov.w	sl, #3
 800599e:	e787      	b.n	80058b0 <_scanf_float+0x188>
 80059a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80059a4:	4639      	mov	r1, r7
 80059a6:	4640      	mov	r0, r8
 80059a8:	4798      	blx	r3
 80059aa:	2800      	cmp	r0, #0
 80059ac:	f43f aedf 	beq.w	800576e <_scanf_float+0x46>
 80059b0:	e6ea      	b.n	8005788 <_scanf_float+0x60>
 80059b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059ba:	463a      	mov	r2, r7
 80059bc:	4640      	mov	r0, r8
 80059be:	4798      	blx	r3
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	e6ec      	b.n	80057a2 <_scanf_float+0x7a>
 80059c8:	1e6b      	subs	r3, r5, #1
 80059ca:	2b06      	cmp	r3, #6
 80059cc:	d825      	bhi.n	8005a1a <_scanf_float+0x2f2>
 80059ce:	2d02      	cmp	r5, #2
 80059d0:	d836      	bhi.n	8005a40 <_scanf_float+0x318>
 80059d2:	455e      	cmp	r6, fp
 80059d4:	f67f aee8 	bls.w	80057a8 <_scanf_float+0x80>
 80059d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059e0:	463a      	mov	r2, r7
 80059e2:	4640      	mov	r0, r8
 80059e4:	4798      	blx	r3
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	e7f1      	b.n	80059d2 <_scanf_float+0x2aa>
 80059ee:	9802      	ldr	r0, [sp, #8]
 80059f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80059f8:	9002      	str	r0, [sp, #8]
 80059fa:	463a      	mov	r2, r7
 80059fc:	4640      	mov	r0, r8
 80059fe:	4798      	blx	r3
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a0a:	fa5f fa8a 	uxtb.w	sl, sl
 8005a0e:	f1ba 0f02 	cmp.w	sl, #2
 8005a12:	d1ec      	bne.n	80059ee <_scanf_float+0x2c6>
 8005a14:	3d03      	subs	r5, #3
 8005a16:	b2ed      	uxtb	r5, r5
 8005a18:	1b76      	subs	r6, r6, r5
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	05da      	lsls	r2, r3, #23
 8005a1e:	d52f      	bpl.n	8005a80 <_scanf_float+0x358>
 8005a20:	055b      	lsls	r3, r3, #21
 8005a22:	d510      	bpl.n	8005a46 <_scanf_float+0x31e>
 8005a24:	455e      	cmp	r6, fp
 8005a26:	f67f aebf 	bls.w	80057a8 <_scanf_float+0x80>
 8005a2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a32:	463a      	mov	r2, r7
 8005a34:	4640      	mov	r0, r8
 8005a36:	4798      	blx	r3
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	e7f1      	b.n	8005a24 <_scanf_float+0x2fc>
 8005a40:	46aa      	mov	sl, r5
 8005a42:	9602      	str	r6, [sp, #8]
 8005a44:	e7df      	b.n	8005a06 <_scanf_float+0x2de>
 8005a46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	2965      	cmp	r1, #101	; 0x65
 8005a4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a52:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	d00c      	beq.n	8005a74 <_scanf_float+0x34c>
 8005a5a:	2945      	cmp	r1, #69	; 0x45
 8005a5c:	d00a      	beq.n	8005a74 <_scanf_float+0x34c>
 8005a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a62:	463a      	mov	r2, r7
 8005a64:	4640      	mov	r0, r8
 8005a66:	4798      	blx	r3
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	1eb5      	subs	r5, r6, #2
 8005a72:	6123      	str	r3, [r4, #16]
 8005a74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a78:	463a      	mov	r2, r7
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	4798      	blx	r3
 8005a7e:	462e      	mov	r6, r5
 8005a80:	6825      	ldr	r5, [r4, #0]
 8005a82:	f015 0510 	ands.w	r5, r5, #16
 8005a86:	d159      	bne.n	8005b3c <_scanf_float+0x414>
 8005a88:	7035      	strb	r5, [r6, #0]
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a94:	d11b      	bne.n	8005ace <_scanf_float+0x3a6>
 8005a96:	9b01      	ldr	r3, [sp, #4]
 8005a98:	454b      	cmp	r3, r9
 8005a9a:	eba3 0209 	sub.w	r2, r3, r9
 8005a9e:	d123      	bne.n	8005ae8 <_scanf_float+0x3c0>
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	4640      	mov	r0, r8
 8005aa6:	f000 ff09 	bl	80068bc <_strtod_r>
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	f012 0f02 	tst.w	r2, #2
 8005ab2:	ec57 6b10 	vmov	r6, r7, d0
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	d021      	beq.n	8005afe <_scanf_float+0x3d6>
 8005aba:	9903      	ldr	r1, [sp, #12]
 8005abc:	1d1a      	adds	r2, r3, #4
 8005abe:	600a      	str	r2, [r1, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	e9c3 6700 	strd	r6, r7, [r3]
 8005ac6:	68e3      	ldr	r3, [r4, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60e3      	str	r3, [r4, #12]
 8005acc:	e66d      	b.n	80057aa <_scanf_float+0x82>
 8005ace:	9b04      	ldr	r3, [sp, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0e5      	beq.n	8005aa0 <_scanf_float+0x378>
 8005ad4:	9905      	ldr	r1, [sp, #20]
 8005ad6:	230a      	movs	r3, #10
 8005ad8:	462a      	mov	r2, r5
 8005ada:	3101      	adds	r1, #1
 8005adc:	4640      	mov	r0, r8
 8005ade:	f000 ff75 	bl	80069cc <_strtol_r>
 8005ae2:	9b04      	ldr	r3, [sp, #16]
 8005ae4:	9e05      	ldr	r6, [sp, #20]
 8005ae6:	1ac2      	subs	r2, r0, r3
 8005ae8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005aec:	429e      	cmp	r6, r3
 8005aee:	bf28      	it	cs
 8005af0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005af4:	4912      	ldr	r1, [pc, #72]	; (8005b40 <_scanf_float+0x418>)
 8005af6:	4630      	mov	r0, r6
 8005af8:	f000 f82c 	bl	8005b54 <siprintf>
 8005afc:	e7d0      	b.n	8005aa0 <_scanf_float+0x378>
 8005afe:	9903      	ldr	r1, [sp, #12]
 8005b00:	f012 0f04 	tst.w	r2, #4
 8005b04:	f103 0204 	add.w	r2, r3, #4
 8005b08:	600a      	str	r2, [r1, #0]
 8005b0a:	d1d9      	bne.n	8005ac0 <_scanf_float+0x398>
 8005b0c:	f8d3 8000 	ldr.w	r8, [r3]
 8005b10:	ee10 2a10 	vmov	r2, s0
 8005b14:	ee10 0a10 	vmov	r0, s0
 8005b18:	463b      	mov	r3, r7
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	f7fb f81e 	bl	8000b5c <__aeabi_dcmpun>
 8005b20:	b128      	cbz	r0, 8005b2e <_scanf_float+0x406>
 8005b22:	4808      	ldr	r0, [pc, #32]	; (8005b44 <_scanf_float+0x41c>)
 8005b24:	f000 f810 	bl	8005b48 <nanf>
 8005b28:	ed88 0a00 	vstr	s0, [r8]
 8005b2c:	e7cb      	b.n	8005ac6 <_scanf_float+0x39e>
 8005b2e:	4630      	mov	r0, r6
 8005b30:	4639      	mov	r1, r7
 8005b32:	f7fb f871 	bl	8000c18 <__aeabi_d2f>
 8005b36:	f8c8 0000 	str.w	r0, [r8]
 8005b3a:	e7c4      	b.n	8005ac6 <_scanf_float+0x39e>
 8005b3c:	2500      	movs	r5, #0
 8005b3e:	e634      	b.n	80057aa <_scanf_float+0x82>
 8005b40:	0800a362 	.word	0x0800a362
 8005b44:	0800a783 	.word	0x0800a783

08005b48 <nanf>:
 8005b48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b50 <nanf+0x8>
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	7fc00000 	.word	0x7fc00000

08005b54 <siprintf>:
 8005b54:	b40e      	push	{r1, r2, r3}
 8005b56:	b500      	push	{lr}
 8005b58:	b09c      	sub	sp, #112	; 0x70
 8005b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8005b5c:	9002      	str	r0, [sp, #8]
 8005b5e:	9006      	str	r0, [sp, #24]
 8005b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b64:	4809      	ldr	r0, [pc, #36]	; (8005b8c <siprintf+0x38>)
 8005b66:	9107      	str	r1, [sp, #28]
 8005b68:	9104      	str	r1, [sp, #16]
 8005b6a:	4909      	ldr	r1, [pc, #36]	; (8005b90 <siprintf+0x3c>)
 8005b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b70:	9105      	str	r1, [sp, #20]
 8005b72:	6800      	ldr	r0, [r0, #0]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	a902      	add	r1, sp, #8
 8005b78:	f002 ff8a 	bl	8008a90 <_svfiprintf_r>
 8005b7c:	9b02      	ldr	r3, [sp, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	b01c      	add	sp, #112	; 0x70
 8005b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b88:	b003      	add	sp, #12
 8005b8a:	4770      	bx	lr
 8005b8c:	20000010 	.word	0x20000010
 8005b90:	ffff0208 	.word	0xffff0208

08005b94 <siscanf>:
 8005b94:	b40e      	push	{r1, r2, r3}
 8005b96:	b510      	push	{r4, lr}
 8005b98:	b09f      	sub	sp, #124	; 0x7c
 8005b9a:	ac21      	add	r4, sp, #132	; 0x84
 8005b9c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005ba0:	f854 2b04 	ldr.w	r2, [r4], #4
 8005ba4:	9201      	str	r2, [sp, #4]
 8005ba6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005baa:	9004      	str	r0, [sp, #16]
 8005bac:	9008      	str	r0, [sp, #32]
 8005bae:	f7fa fb21 	bl	80001f4 <strlen>
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <siscanf+0x50>)
 8005bb4:	9005      	str	r0, [sp, #20]
 8005bb6:	9009      	str	r0, [sp, #36]	; 0x24
 8005bb8:	930d      	str	r3, [sp, #52]	; 0x34
 8005bba:	480b      	ldr	r0, [pc, #44]	; (8005be8 <siscanf+0x54>)
 8005bbc:	9a01      	ldr	r2, [sp, #4]
 8005bbe:	6800      	ldr	r0, [r0, #0]
 8005bc0:	9403      	str	r4, [sp, #12]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9311      	str	r3, [sp, #68]	; 0x44
 8005bc6:	9316      	str	r3, [sp, #88]	; 0x58
 8005bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bcc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005bd0:	a904      	add	r1, sp, #16
 8005bd2:	4623      	mov	r3, r4
 8005bd4:	f003 f8b6 	bl	8008d44 <__ssvfiscanf_r>
 8005bd8:	b01f      	add	sp, #124	; 0x7c
 8005bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bde:	b003      	add	sp, #12
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	08005c0f 	.word	0x08005c0f
 8005be8:	20000010 	.word	0x20000010

08005bec <__sread>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	460c      	mov	r4, r1
 8005bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf4:	f003 fb70 	bl	80092d8 <_read_r>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	bfab      	itete	ge
 8005bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8005c00:	181b      	addge	r3, r3, r0
 8005c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c06:	bfac      	ite	ge
 8005c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c0a:	81a3      	strhlt	r3, [r4, #12]
 8005c0c:	bd10      	pop	{r4, pc}

08005c0e <__seofread>:
 8005c0e:	2000      	movs	r0, #0
 8005c10:	4770      	bx	lr

08005c12 <__swrite>:
 8005c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	461f      	mov	r7, r3
 8005c18:	898b      	ldrh	r3, [r1, #12]
 8005c1a:	05db      	lsls	r3, r3, #23
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	4616      	mov	r6, r2
 8005c22:	d505      	bpl.n	8005c30 <__swrite+0x1e>
 8005c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c28:	2302      	movs	r3, #2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f002 f8e2 	bl	8007df4 <_lseek_r>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	4628      	mov	r0, r5
 8005c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	f000 bec3 	b.w	80069d0 <_write_r>

08005c4a <__sseek>:
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c52:	f002 f8cf 	bl	8007df4 <_lseek_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	bf15      	itete	ne
 8005c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c66:	81a3      	strheq	r3, [r4, #12]
 8005c68:	bf18      	it	ne
 8005c6a:	81a3      	strhne	r3, [r4, #12]
 8005c6c:	bd10      	pop	{r4, pc}

08005c6e <__sclose>:
 8005c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c72:	f000 bebf 	b.w	80069f4 <_close_r>

08005c76 <sulp>:
 8005c76:	b570      	push	{r4, r5, r6, lr}
 8005c78:	4604      	mov	r4, r0
 8005c7a:	460d      	mov	r5, r1
 8005c7c:	ec45 4b10 	vmov	d0, r4, r5
 8005c80:	4616      	mov	r6, r2
 8005c82:	f002 fc63 	bl	800854c <__ulp>
 8005c86:	ec51 0b10 	vmov	r0, r1, d0
 8005c8a:	b17e      	cbz	r6, 8005cac <sulp+0x36>
 8005c8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005c90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	dd09      	ble.n	8005cac <sulp+0x36>
 8005c98:	051b      	lsls	r3, r3, #20
 8005c9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005c9e:	2400      	movs	r4, #0
 8005ca0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	f7fa fcbe 	bl	8000628 <__aeabi_dmul>
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cb0 <_strtod_l>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	ed2d 8b02 	vpush	{d8}
 8005cb8:	b09d      	sub	sp, #116	; 0x74
 8005cba:	461f      	mov	r7, r3
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9318      	str	r3, [sp, #96]	; 0x60
 8005cc0:	4ba2      	ldr	r3, [pc, #648]	; (8005f4c <_strtod_l+0x29c>)
 8005cc2:	9213      	str	r2, [sp, #76]	; 0x4c
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	9305      	str	r3, [sp, #20]
 8005cc8:	4604      	mov	r4, r0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	4688      	mov	r8, r1
 8005cce:	f7fa fa91 	bl	80001f4 <strlen>
 8005cd2:	f04f 0a00 	mov.w	sl, #0
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	f04f 0b00 	mov.w	fp, #0
 8005cdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	2a2b      	cmp	r2, #43	; 0x2b
 8005ce6:	d04e      	beq.n	8005d86 <_strtod_l+0xd6>
 8005ce8:	d83b      	bhi.n	8005d62 <_strtod_l+0xb2>
 8005cea:	2a0d      	cmp	r2, #13
 8005cec:	d834      	bhi.n	8005d58 <_strtod_l+0xa8>
 8005cee:	2a08      	cmp	r2, #8
 8005cf0:	d834      	bhi.n	8005d5c <_strtod_l+0xac>
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	d03e      	beq.n	8005d74 <_strtod_l+0xc4>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8005cfa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005cfc:	7833      	ldrb	r3, [r6, #0]
 8005cfe:	2b30      	cmp	r3, #48	; 0x30
 8005d00:	f040 80b0 	bne.w	8005e64 <_strtod_l+0x1b4>
 8005d04:	7873      	ldrb	r3, [r6, #1]
 8005d06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d0a:	2b58      	cmp	r3, #88	; 0x58
 8005d0c:	d168      	bne.n	8005de0 <_strtod_l+0x130>
 8005d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	ab18      	add	r3, sp, #96	; 0x60
 8005d14:	9702      	str	r7, [sp, #8]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	4a8d      	ldr	r2, [pc, #564]	; (8005f50 <_strtod_l+0x2a0>)
 8005d1a:	ab19      	add	r3, sp, #100	; 0x64
 8005d1c:	a917      	add	r1, sp, #92	; 0x5c
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f001 fd5c 	bl	80077dc <__gethex>
 8005d24:	f010 0707 	ands.w	r7, r0, #7
 8005d28:	4605      	mov	r5, r0
 8005d2a:	d005      	beq.n	8005d38 <_strtod_l+0x88>
 8005d2c:	2f06      	cmp	r7, #6
 8005d2e:	d12c      	bne.n	8005d8a <_strtod_l+0xda>
 8005d30:	3601      	adds	r6, #1
 8005d32:	2300      	movs	r3, #0
 8005d34:	9617      	str	r6, [sp, #92]	; 0x5c
 8005d36:	930a      	str	r3, [sp, #40]	; 0x28
 8005d38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 8590 	bne.w	8006860 <_strtod_l+0xbb0>
 8005d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d42:	b1eb      	cbz	r3, 8005d80 <_strtod_l+0xd0>
 8005d44:	4652      	mov	r2, sl
 8005d46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d4a:	ec43 2b10 	vmov	d0, r2, r3
 8005d4e:	b01d      	add	sp, #116	; 0x74
 8005d50:	ecbd 8b02 	vpop	{d8}
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d58:	2a20      	cmp	r2, #32
 8005d5a:	d1cc      	bne.n	8005cf6 <_strtod_l+0x46>
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d60:	e7be      	b.n	8005ce0 <_strtod_l+0x30>
 8005d62:	2a2d      	cmp	r2, #45	; 0x2d
 8005d64:	d1c7      	bne.n	8005cf6 <_strtod_l+0x46>
 8005d66:	2201      	movs	r2, #1
 8005d68:	920a      	str	r2, [sp, #40]	; 0x28
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1c2      	bne.n	8005cfa <_strtod_l+0x4a>
 8005d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f040 856e 	bne.w	800685c <_strtod_l+0xbac>
 8005d80:	4652      	mov	r2, sl
 8005d82:	465b      	mov	r3, fp
 8005d84:	e7e1      	b.n	8005d4a <_strtod_l+0x9a>
 8005d86:	2200      	movs	r2, #0
 8005d88:	e7ee      	b.n	8005d68 <_strtod_l+0xb8>
 8005d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005d8c:	b13a      	cbz	r2, 8005d9e <_strtod_l+0xee>
 8005d8e:	2135      	movs	r1, #53	; 0x35
 8005d90:	a81a      	add	r0, sp, #104	; 0x68
 8005d92:	f002 fce6 	bl	8008762 <__copybits>
 8005d96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f002 f8a5 	bl	8007ee8 <_Bfree>
 8005d9e:	3f01      	subs	r7, #1
 8005da0:	2f04      	cmp	r7, #4
 8005da2:	d806      	bhi.n	8005db2 <_strtod_l+0x102>
 8005da4:	e8df f007 	tbb	[pc, r7]
 8005da8:	1714030a 	.word	0x1714030a
 8005dac:	0a          	.byte	0x0a
 8005dad:	00          	.byte	0x00
 8005dae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005db2:	0728      	lsls	r0, r5, #28
 8005db4:	d5c0      	bpl.n	8005d38 <_strtod_l+0x88>
 8005db6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005dba:	e7bd      	b.n	8005d38 <_strtod_l+0x88>
 8005dbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005dc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005dc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005dca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005dce:	e7f0      	b.n	8005db2 <_strtod_l+0x102>
 8005dd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005f54 <_strtod_l+0x2a4>
 8005dd4:	e7ed      	b.n	8005db2 <_strtod_l+0x102>
 8005dd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005dda:	f04f 3aff 	mov.w	sl, #4294967295
 8005dde:	e7e8      	b.n	8005db2 <_strtod_l+0x102>
 8005de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b30      	cmp	r3, #48	; 0x30
 8005dea:	d0f9      	beq.n	8005de0 <_strtod_l+0x130>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0a3      	beq.n	8005d38 <_strtod_l+0x88>
 8005df0:	2301      	movs	r3, #1
 8005df2:	f04f 0900 	mov.w	r9, #0
 8005df6:	9304      	str	r3, [sp, #16]
 8005df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dfa:	9308      	str	r3, [sp, #32]
 8005dfc:	f8cd 901c 	str.w	r9, [sp, #28]
 8005e00:	464f      	mov	r7, r9
 8005e02:	220a      	movs	r2, #10
 8005e04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005e06:	7806      	ldrb	r6, [r0, #0]
 8005e08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005e0c:	b2d9      	uxtb	r1, r3
 8005e0e:	2909      	cmp	r1, #9
 8005e10:	d92a      	bls.n	8005e68 <_strtod_l+0x1b8>
 8005e12:	9905      	ldr	r1, [sp, #20]
 8005e14:	462a      	mov	r2, r5
 8005e16:	f003 fac3 	bl	80093a0 <strncmp>
 8005e1a:	b398      	cbz	r0, 8005e84 <_strtod_l+0x1d4>
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4632      	mov	r2, r6
 8005e20:	463d      	mov	r5, r7
 8005e22:	9005      	str	r0, [sp, #20]
 8005e24:	4603      	mov	r3, r0
 8005e26:	2a65      	cmp	r2, #101	; 0x65
 8005e28:	d001      	beq.n	8005e2e <_strtod_l+0x17e>
 8005e2a:	2a45      	cmp	r2, #69	; 0x45
 8005e2c:	d118      	bne.n	8005e60 <_strtod_l+0x1b0>
 8005e2e:	b91d      	cbnz	r5, 8005e38 <_strtod_l+0x188>
 8005e30:	9a04      	ldr	r2, [sp, #16]
 8005e32:	4302      	orrs	r2, r0
 8005e34:	d09e      	beq.n	8005d74 <_strtod_l+0xc4>
 8005e36:	2500      	movs	r5, #0
 8005e38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005e3c:	f108 0201 	add.w	r2, r8, #1
 8005e40:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e42:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005e46:	2a2b      	cmp	r2, #43	; 0x2b
 8005e48:	d075      	beq.n	8005f36 <_strtod_l+0x286>
 8005e4a:	2a2d      	cmp	r2, #45	; 0x2d
 8005e4c:	d07b      	beq.n	8005f46 <_strtod_l+0x296>
 8005e4e:	f04f 0c00 	mov.w	ip, #0
 8005e52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005e56:	2909      	cmp	r1, #9
 8005e58:	f240 8082 	bls.w	8005f60 <_strtod_l+0x2b0>
 8005e5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e60:	2600      	movs	r6, #0
 8005e62:	e09d      	b.n	8005fa0 <_strtod_l+0x2f0>
 8005e64:	2300      	movs	r3, #0
 8005e66:	e7c4      	b.n	8005df2 <_strtod_l+0x142>
 8005e68:	2f08      	cmp	r7, #8
 8005e6a:	bfd8      	it	le
 8005e6c:	9907      	ldrle	r1, [sp, #28]
 8005e6e:	f100 0001 	add.w	r0, r0, #1
 8005e72:	bfda      	itte	le
 8005e74:	fb02 3301 	mlale	r3, r2, r1, r3
 8005e78:	9307      	strle	r3, [sp, #28]
 8005e7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005e7e:	3701      	adds	r7, #1
 8005e80:	9017      	str	r0, [sp, #92]	; 0x5c
 8005e82:	e7bf      	b.n	8005e04 <_strtod_l+0x154>
 8005e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e86:	195a      	adds	r2, r3, r5
 8005e88:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e8a:	5d5a      	ldrb	r2, [r3, r5]
 8005e8c:	2f00      	cmp	r7, #0
 8005e8e:	d037      	beq.n	8005f00 <_strtod_l+0x250>
 8005e90:	9005      	str	r0, [sp, #20]
 8005e92:	463d      	mov	r5, r7
 8005e94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005e98:	2b09      	cmp	r3, #9
 8005e9a:	d912      	bls.n	8005ec2 <_strtod_l+0x212>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e7c2      	b.n	8005e26 <_strtod_l+0x176>
 8005ea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ea6:	785a      	ldrb	r2, [r3, #1]
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	2a30      	cmp	r2, #48	; 0x30
 8005eac:	d0f8      	beq.n	8005ea0 <_strtod_l+0x1f0>
 8005eae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	f200 84d9 	bhi.w	800686a <_strtod_l+0xbba>
 8005eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eba:	9005      	str	r0, [sp, #20]
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	9308      	str	r3, [sp, #32]
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	3a30      	subs	r2, #48	; 0x30
 8005ec4:	f100 0301 	add.w	r3, r0, #1
 8005ec8:	d014      	beq.n	8005ef4 <_strtod_l+0x244>
 8005eca:	9905      	ldr	r1, [sp, #20]
 8005ecc:	4419      	add	r1, r3
 8005ece:	9105      	str	r1, [sp, #20]
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	eb00 0e05 	add.w	lr, r0, r5
 8005ed6:	210a      	movs	r1, #10
 8005ed8:	4573      	cmp	r3, lr
 8005eda:	d113      	bne.n	8005f04 <_strtod_l+0x254>
 8005edc:	182b      	adds	r3, r5, r0
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	f105 0501 	add.w	r5, r5, #1
 8005ee4:	4405      	add	r5, r0
 8005ee6:	dc1c      	bgt.n	8005f22 <_strtod_l+0x272>
 8005ee8:	9907      	ldr	r1, [sp, #28]
 8005eea:	230a      	movs	r3, #10
 8005eec:	fb03 2301 	mla	r3, r3, r1, r2
 8005ef0:	9307      	str	r3, [sp, #28]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ef6:	1c51      	adds	r1, r2, #1
 8005ef8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005efa:	7852      	ldrb	r2, [r2, #1]
 8005efc:	4618      	mov	r0, r3
 8005efe:	e7c9      	b.n	8005e94 <_strtod_l+0x1e4>
 8005f00:	4638      	mov	r0, r7
 8005f02:	e7d2      	b.n	8005eaa <_strtod_l+0x1fa>
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	dc04      	bgt.n	8005f12 <_strtod_l+0x262>
 8005f08:	9e07      	ldr	r6, [sp, #28]
 8005f0a:	434e      	muls	r6, r1
 8005f0c:	9607      	str	r6, [sp, #28]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	e7e2      	b.n	8005ed8 <_strtod_l+0x228>
 8005f12:	f103 0c01 	add.w	ip, r3, #1
 8005f16:	f1bc 0f10 	cmp.w	ip, #16
 8005f1a:	bfd8      	it	le
 8005f1c:	fb01 f909 	mulle.w	r9, r1, r9
 8005f20:	e7f5      	b.n	8005f0e <_strtod_l+0x25e>
 8005f22:	2d10      	cmp	r5, #16
 8005f24:	bfdc      	itt	le
 8005f26:	230a      	movle	r3, #10
 8005f28:	fb03 2909 	mlale	r9, r3, r9, r2
 8005f2c:	e7e1      	b.n	8005ef2 <_strtod_l+0x242>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9305      	str	r3, [sp, #20]
 8005f32:	2301      	movs	r3, #1
 8005f34:	e77c      	b.n	8005e30 <_strtod_l+0x180>
 8005f36:	f04f 0c00 	mov.w	ip, #0
 8005f3a:	f108 0202 	add.w	r2, r8, #2
 8005f3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f40:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005f44:	e785      	b.n	8005e52 <_strtod_l+0x1a2>
 8005f46:	f04f 0c01 	mov.w	ip, #1
 8005f4a:	e7f6      	b.n	8005f3a <_strtod_l+0x28a>
 8005f4c:	0800a5b0 	.word	0x0800a5b0
 8005f50:	0800a368 	.word	0x0800a368
 8005f54:	7ff00000 	.word	0x7ff00000
 8005f58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f5a:	1c51      	adds	r1, r2, #1
 8005f5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f5e:	7852      	ldrb	r2, [r2, #1]
 8005f60:	2a30      	cmp	r2, #48	; 0x30
 8005f62:	d0f9      	beq.n	8005f58 <_strtod_l+0x2a8>
 8005f64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005f68:	2908      	cmp	r1, #8
 8005f6a:	f63f af79 	bhi.w	8005e60 <_strtod_l+0x1b0>
 8005f6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005f72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f74:	9206      	str	r2, [sp, #24]
 8005f76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005f78:	1c51      	adds	r1, r2, #1
 8005f7a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005f7c:	7852      	ldrb	r2, [r2, #1]
 8005f7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005f82:	2e09      	cmp	r6, #9
 8005f84:	d937      	bls.n	8005ff6 <_strtod_l+0x346>
 8005f86:	9e06      	ldr	r6, [sp, #24]
 8005f88:	1b89      	subs	r1, r1, r6
 8005f8a:	2908      	cmp	r1, #8
 8005f8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005f90:	dc02      	bgt.n	8005f98 <_strtod_l+0x2e8>
 8005f92:	4576      	cmp	r6, lr
 8005f94:	bfa8      	it	ge
 8005f96:	4676      	movge	r6, lr
 8005f98:	f1bc 0f00 	cmp.w	ip, #0
 8005f9c:	d000      	beq.n	8005fa0 <_strtod_l+0x2f0>
 8005f9e:	4276      	negs	r6, r6
 8005fa0:	2d00      	cmp	r5, #0
 8005fa2:	d14d      	bne.n	8006040 <_strtod_l+0x390>
 8005fa4:	9904      	ldr	r1, [sp, #16]
 8005fa6:	4301      	orrs	r1, r0
 8005fa8:	f47f aec6 	bne.w	8005d38 <_strtod_l+0x88>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f47f aee1 	bne.w	8005d74 <_strtod_l+0xc4>
 8005fb2:	2a69      	cmp	r2, #105	; 0x69
 8005fb4:	d027      	beq.n	8006006 <_strtod_l+0x356>
 8005fb6:	dc24      	bgt.n	8006002 <_strtod_l+0x352>
 8005fb8:	2a49      	cmp	r2, #73	; 0x49
 8005fba:	d024      	beq.n	8006006 <_strtod_l+0x356>
 8005fbc:	2a4e      	cmp	r2, #78	; 0x4e
 8005fbe:	f47f aed9 	bne.w	8005d74 <_strtod_l+0xc4>
 8005fc2:	499f      	ldr	r1, [pc, #636]	; (8006240 <_strtod_l+0x590>)
 8005fc4:	a817      	add	r0, sp, #92	; 0x5c
 8005fc6:	f001 fe61 	bl	8007c8c <__match>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f43f aed2 	beq.w	8005d74 <_strtod_l+0xc4>
 8005fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b28      	cmp	r3, #40	; 0x28
 8005fd6:	d12d      	bne.n	8006034 <_strtod_l+0x384>
 8005fd8:	499a      	ldr	r1, [pc, #616]	; (8006244 <_strtod_l+0x594>)
 8005fda:	aa1a      	add	r2, sp, #104	; 0x68
 8005fdc:	a817      	add	r0, sp, #92	; 0x5c
 8005fde:	f001 fe69 	bl	8007cb4 <__hexnan>
 8005fe2:	2805      	cmp	r0, #5
 8005fe4:	d126      	bne.n	8006034 <_strtod_l+0x384>
 8005fe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005fe8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005fec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005ff0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005ff4:	e6a0      	b.n	8005d38 <_strtod_l+0x88>
 8005ff6:	210a      	movs	r1, #10
 8005ff8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005ffc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006000:	e7b9      	b.n	8005f76 <_strtod_l+0x2c6>
 8006002:	2a6e      	cmp	r2, #110	; 0x6e
 8006004:	e7db      	b.n	8005fbe <_strtod_l+0x30e>
 8006006:	4990      	ldr	r1, [pc, #576]	; (8006248 <_strtod_l+0x598>)
 8006008:	a817      	add	r0, sp, #92	; 0x5c
 800600a:	f001 fe3f 	bl	8007c8c <__match>
 800600e:	2800      	cmp	r0, #0
 8006010:	f43f aeb0 	beq.w	8005d74 <_strtod_l+0xc4>
 8006014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006016:	498d      	ldr	r1, [pc, #564]	; (800624c <_strtod_l+0x59c>)
 8006018:	3b01      	subs	r3, #1
 800601a:	a817      	add	r0, sp, #92	; 0x5c
 800601c:	9317      	str	r3, [sp, #92]	; 0x5c
 800601e:	f001 fe35 	bl	8007c8c <__match>
 8006022:	b910      	cbnz	r0, 800602a <_strtod_l+0x37a>
 8006024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006026:	3301      	adds	r3, #1
 8006028:	9317      	str	r3, [sp, #92]	; 0x5c
 800602a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800625c <_strtod_l+0x5ac>
 800602e:	f04f 0a00 	mov.w	sl, #0
 8006032:	e681      	b.n	8005d38 <_strtod_l+0x88>
 8006034:	4886      	ldr	r0, [pc, #536]	; (8006250 <_strtod_l+0x5a0>)
 8006036:	f003 f963 	bl	8009300 <nan>
 800603a:	ec5b ab10 	vmov	sl, fp, d0
 800603e:	e67b      	b.n	8005d38 <_strtod_l+0x88>
 8006040:	9b05      	ldr	r3, [sp, #20]
 8006042:	9807      	ldr	r0, [sp, #28]
 8006044:	1af3      	subs	r3, r6, r3
 8006046:	2f00      	cmp	r7, #0
 8006048:	bf08      	it	eq
 800604a:	462f      	moveq	r7, r5
 800604c:	2d10      	cmp	r5, #16
 800604e:	9306      	str	r3, [sp, #24]
 8006050:	46a8      	mov	r8, r5
 8006052:	bfa8      	it	ge
 8006054:	f04f 0810 	movge.w	r8, #16
 8006058:	f7fa fa6c 	bl	8000534 <__aeabi_ui2d>
 800605c:	2d09      	cmp	r5, #9
 800605e:	4682      	mov	sl, r0
 8006060:	468b      	mov	fp, r1
 8006062:	dd13      	ble.n	800608c <_strtod_l+0x3dc>
 8006064:	4b7b      	ldr	r3, [pc, #492]	; (8006254 <_strtod_l+0x5a4>)
 8006066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800606a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800606e:	f7fa fadb 	bl	8000628 <__aeabi_dmul>
 8006072:	4682      	mov	sl, r0
 8006074:	4648      	mov	r0, r9
 8006076:	468b      	mov	fp, r1
 8006078:	f7fa fa5c 	bl	8000534 <__aeabi_ui2d>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4650      	mov	r0, sl
 8006082:	4659      	mov	r1, fp
 8006084:	f7fa f91a 	bl	80002bc <__adddf3>
 8006088:	4682      	mov	sl, r0
 800608a:	468b      	mov	fp, r1
 800608c:	2d0f      	cmp	r5, #15
 800608e:	dc38      	bgt.n	8006102 <_strtod_l+0x452>
 8006090:	9b06      	ldr	r3, [sp, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f43f ae50 	beq.w	8005d38 <_strtod_l+0x88>
 8006098:	dd24      	ble.n	80060e4 <_strtod_l+0x434>
 800609a:	2b16      	cmp	r3, #22
 800609c:	dc0b      	bgt.n	80060b6 <_strtod_l+0x406>
 800609e:	496d      	ldr	r1, [pc, #436]	; (8006254 <_strtod_l+0x5a4>)
 80060a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80060a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060a8:	4652      	mov	r2, sl
 80060aa:	465b      	mov	r3, fp
 80060ac:	f7fa fabc 	bl	8000628 <__aeabi_dmul>
 80060b0:	4682      	mov	sl, r0
 80060b2:	468b      	mov	fp, r1
 80060b4:	e640      	b.n	8005d38 <_strtod_l+0x88>
 80060b6:	9a06      	ldr	r2, [sp, #24]
 80060b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80060bc:	4293      	cmp	r3, r2
 80060be:	db20      	blt.n	8006102 <_strtod_l+0x452>
 80060c0:	4c64      	ldr	r4, [pc, #400]	; (8006254 <_strtod_l+0x5a4>)
 80060c2:	f1c5 050f 	rsb	r5, r5, #15
 80060c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80060ca:	4652      	mov	r2, sl
 80060cc:	465b      	mov	r3, fp
 80060ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060d2:	f7fa faa9 	bl	8000628 <__aeabi_dmul>
 80060d6:	9b06      	ldr	r3, [sp, #24]
 80060d8:	1b5d      	subs	r5, r3, r5
 80060da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80060de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80060e2:	e7e3      	b.n	80060ac <_strtod_l+0x3fc>
 80060e4:	9b06      	ldr	r3, [sp, #24]
 80060e6:	3316      	adds	r3, #22
 80060e8:	db0b      	blt.n	8006102 <_strtod_l+0x452>
 80060ea:	9b05      	ldr	r3, [sp, #20]
 80060ec:	1b9e      	subs	r6, r3, r6
 80060ee:	4b59      	ldr	r3, [pc, #356]	; (8006254 <_strtod_l+0x5a4>)
 80060f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80060f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060f8:	4650      	mov	r0, sl
 80060fa:	4659      	mov	r1, fp
 80060fc:	f7fa fbbe 	bl	800087c <__aeabi_ddiv>
 8006100:	e7d6      	b.n	80060b0 <_strtod_l+0x400>
 8006102:	9b06      	ldr	r3, [sp, #24]
 8006104:	eba5 0808 	sub.w	r8, r5, r8
 8006108:	4498      	add	r8, r3
 800610a:	f1b8 0f00 	cmp.w	r8, #0
 800610e:	dd74      	ble.n	80061fa <_strtod_l+0x54a>
 8006110:	f018 030f 	ands.w	r3, r8, #15
 8006114:	d00a      	beq.n	800612c <_strtod_l+0x47c>
 8006116:	494f      	ldr	r1, [pc, #316]	; (8006254 <_strtod_l+0x5a4>)
 8006118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800611c:	4652      	mov	r2, sl
 800611e:	465b      	mov	r3, fp
 8006120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006124:	f7fa fa80 	bl	8000628 <__aeabi_dmul>
 8006128:	4682      	mov	sl, r0
 800612a:	468b      	mov	fp, r1
 800612c:	f038 080f 	bics.w	r8, r8, #15
 8006130:	d04f      	beq.n	80061d2 <_strtod_l+0x522>
 8006132:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006136:	dd22      	ble.n	800617e <_strtod_l+0x4ce>
 8006138:	2500      	movs	r5, #0
 800613a:	462e      	mov	r6, r5
 800613c:	9507      	str	r5, [sp, #28]
 800613e:	9505      	str	r5, [sp, #20]
 8006140:	2322      	movs	r3, #34	; 0x22
 8006142:	f8df b118 	ldr.w	fp, [pc, #280]	; 800625c <_strtod_l+0x5ac>
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	f04f 0a00 	mov.w	sl, #0
 800614c:	9b07      	ldr	r3, [sp, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f43f adf2 	beq.w	8005d38 <_strtod_l+0x88>
 8006154:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006156:	4620      	mov	r0, r4
 8006158:	f001 fec6 	bl	8007ee8 <_Bfree>
 800615c:	9905      	ldr	r1, [sp, #20]
 800615e:	4620      	mov	r0, r4
 8006160:	f001 fec2 	bl	8007ee8 <_Bfree>
 8006164:	4631      	mov	r1, r6
 8006166:	4620      	mov	r0, r4
 8006168:	f001 febe 	bl	8007ee8 <_Bfree>
 800616c:	9907      	ldr	r1, [sp, #28]
 800616e:	4620      	mov	r0, r4
 8006170:	f001 feba 	bl	8007ee8 <_Bfree>
 8006174:	4629      	mov	r1, r5
 8006176:	4620      	mov	r0, r4
 8006178:	f001 feb6 	bl	8007ee8 <_Bfree>
 800617c:	e5dc      	b.n	8005d38 <_strtod_l+0x88>
 800617e:	4b36      	ldr	r3, [pc, #216]	; (8006258 <_strtod_l+0x5a8>)
 8006180:	9304      	str	r3, [sp, #16]
 8006182:	2300      	movs	r3, #0
 8006184:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006188:	4650      	mov	r0, sl
 800618a:	4659      	mov	r1, fp
 800618c:	4699      	mov	r9, r3
 800618e:	f1b8 0f01 	cmp.w	r8, #1
 8006192:	dc21      	bgt.n	80061d8 <_strtod_l+0x528>
 8006194:	b10b      	cbz	r3, 800619a <_strtod_l+0x4ea>
 8006196:	4682      	mov	sl, r0
 8006198:	468b      	mov	fp, r1
 800619a:	4b2f      	ldr	r3, [pc, #188]	; (8006258 <_strtod_l+0x5a8>)
 800619c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80061a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80061a4:	4652      	mov	r2, sl
 80061a6:	465b      	mov	r3, fp
 80061a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80061ac:	f7fa fa3c 	bl	8000628 <__aeabi_dmul>
 80061b0:	4b2a      	ldr	r3, [pc, #168]	; (800625c <_strtod_l+0x5ac>)
 80061b2:	460a      	mov	r2, r1
 80061b4:	400b      	ands	r3, r1
 80061b6:	492a      	ldr	r1, [pc, #168]	; (8006260 <_strtod_l+0x5b0>)
 80061b8:	428b      	cmp	r3, r1
 80061ba:	4682      	mov	sl, r0
 80061bc:	d8bc      	bhi.n	8006138 <_strtod_l+0x488>
 80061be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80061c2:	428b      	cmp	r3, r1
 80061c4:	bf86      	itte	hi
 80061c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006264 <_strtod_l+0x5b4>
 80061ca:	f04f 3aff 	movhi.w	sl, #4294967295
 80061ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80061d2:	2300      	movs	r3, #0
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	e084      	b.n	80062e2 <_strtod_l+0x632>
 80061d8:	f018 0f01 	tst.w	r8, #1
 80061dc:	d005      	beq.n	80061ea <_strtod_l+0x53a>
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa fa20 	bl	8000628 <__aeabi_dmul>
 80061e8:	2301      	movs	r3, #1
 80061ea:	9a04      	ldr	r2, [sp, #16]
 80061ec:	3208      	adds	r2, #8
 80061ee:	f109 0901 	add.w	r9, r9, #1
 80061f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80061f6:	9204      	str	r2, [sp, #16]
 80061f8:	e7c9      	b.n	800618e <_strtod_l+0x4de>
 80061fa:	d0ea      	beq.n	80061d2 <_strtod_l+0x522>
 80061fc:	f1c8 0800 	rsb	r8, r8, #0
 8006200:	f018 020f 	ands.w	r2, r8, #15
 8006204:	d00a      	beq.n	800621c <_strtod_l+0x56c>
 8006206:	4b13      	ldr	r3, [pc, #76]	; (8006254 <_strtod_l+0x5a4>)
 8006208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800620c:	4650      	mov	r0, sl
 800620e:	4659      	mov	r1, fp
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa fb32 	bl	800087c <__aeabi_ddiv>
 8006218:	4682      	mov	sl, r0
 800621a:	468b      	mov	fp, r1
 800621c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006220:	d0d7      	beq.n	80061d2 <_strtod_l+0x522>
 8006222:	f1b8 0f1f 	cmp.w	r8, #31
 8006226:	dd1f      	ble.n	8006268 <_strtod_l+0x5b8>
 8006228:	2500      	movs	r5, #0
 800622a:	462e      	mov	r6, r5
 800622c:	9507      	str	r5, [sp, #28]
 800622e:	9505      	str	r5, [sp, #20]
 8006230:	2322      	movs	r3, #34	; 0x22
 8006232:	f04f 0a00 	mov.w	sl, #0
 8006236:	f04f 0b00 	mov.w	fp, #0
 800623a:	6023      	str	r3, [r4, #0]
 800623c:	e786      	b.n	800614c <_strtod_l+0x49c>
 800623e:	bf00      	nop
 8006240:	0800a33d 	.word	0x0800a33d
 8006244:	0800a37c 	.word	0x0800a37c
 8006248:	0800a335 	.word	0x0800a335
 800624c:	0800a4bc 	.word	0x0800a4bc
 8006250:	0800a783 	.word	0x0800a783
 8006254:	0800a648 	.word	0x0800a648
 8006258:	0800a620 	.word	0x0800a620
 800625c:	7ff00000 	.word	0x7ff00000
 8006260:	7ca00000 	.word	0x7ca00000
 8006264:	7fefffff 	.word	0x7fefffff
 8006268:	f018 0310 	ands.w	r3, r8, #16
 800626c:	bf18      	it	ne
 800626e:	236a      	movne	r3, #106	; 0x6a
 8006270:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006620 <_strtod_l+0x970>
 8006274:	9304      	str	r3, [sp, #16]
 8006276:	4650      	mov	r0, sl
 8006278:	4659      	mov	r1, fp
 800627a:	2300      	movs	r3, #0
 800627c:	f018 0f01 	tst.w	r8, #1
 8006280:	d004      	beq.n	800628c <_strtod_l+0x5dc>
 8006282:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006286:	f7fa f9cf 	bl	8000628 <__aeabi_dmul>
 800628a:	2301      	movs	r3, #1
 800628c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006290:	f109 0908 	add.w	r9, r9, #8
 8006294:	d1f2      	bne.n	800627c <_strtod_l+0x5cc>
 8006296:	b10b      	cbz	r3, 800629c <_strtod_l+0x5ec>
 8006298:	4682      	mov	sl, r0
 800629a:	468b      	mov	fp, r1
 800629c:	9b04      	ldr	r3, [sp, #16]
 800629e:	b1c3      	cbz	r3, 80062d2 <_strtod_l+0x622>
 80062a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80062a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	4659      	mov	r1, fp
 80062ac:	dd11      	ble.n	80062d2 <_strtod_l+0x622>
 80062ae:	2b1f      	cmp	r3, #31
 80062b0:	f340 8124 	ble.w	80064fc <_strtod_l+0x84c>
 80062b4:	2b34      	cmp	r3, #52	; 0x34
 80062b6:	bfde      	ittt	le
 80062b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80062bc:	f04f 33ff 	movle.w	r3, #4294967295
 80062c0:	fa03 f202 	lslle.w	r2, r3, r2
 80062c4:	f04f 0a00 	mov.w	sl, #0
 80062c8:	bfcc      	ite	gt
 80062ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80062ce:	ea02 0b01 	andle.w	fp, r2, r1
 80062d2:	2200      	movs	r2, #0
 80062d4:	2300      	movs	r3, #0
 80062d6:	4650      	mov	r0, sl
 80062d8:	4659      	mov	r1, fp
 80062da:	f7fa fc0d 	bl	8000af8 <__aeabi_dcmpeq>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d1a2      	bne.n	8006228 <_strtod_l+0x578>
 80062e2:	9b07      	ldr	r3, [sp, #28]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	9908      	ldr	r1, [sp, #32]
 80062e8:	462b      	mov	r3, r5
 80062ea:	463a      	mov	r2, r7
 80062ec:	4620      	mov	r0, r4
 80062ee:	f001 fe63 	bl	8007fb8 <__s2b>
 80062f2:	9007      	str	r0, [sp, #28]
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f43f af1f 	beq.w	8006138 <_strtod_l+0x488>
 80062fa:	9b05      	ldr	r3, [sp, #20]
 80062fc:	1b9e      	subs	r6, r3, r6
 80062fe:	9b06      	ldr	r3, [sp, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	bfb4      	ite	lt
 8006304:	4633      	movlt	r3, r6
 8006306:	2300      	movge	r3, #0
 8006308:	930c      	str	r3, [sp, #48]	; 0x30
 800630a:	9b06      	ldr	r3, [sp, #24]
 800630c:	2500      	movs	r5, #0
 800630e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006312:	9312      	str	r3, [sp, #72]	; 0x48
 8006314:	462e      	mov	r6, r5
 8006316:	9b07      	ldr	r3, [sp, #28]
 8006318:	4620      	mov	r0, r4
 800631a:	6859      	ldr	r1, [r3, #4]
 800631c:	f001 fda4 	bl	8007e68 <_Balloc>
 8006320:	9005      	str	r0, [sp, #20]
 8006322:	2800      	cmp	r0, #0
 8006324:	f43f af0c 	beq.w	8006140 <_strtod_l+0x490>
 8006328:	9b07      	ldr	r3, [sp, #28]
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	3202      	adds	r2, #2
 800632e:	f103 010c 	add.w	r1, r3, #12
 8006332:	0092      	lsls	r2, r2, #2
 8006334:	300c      	adds	r0, #12
 8006336:	f001 fd89 	bl	8007e4c <memcpy>
 800633a:	ec4b ab10 	vmov	d0, sl, fp
 800633e:	aa1a      	add	r2, sp, #104	; 0x68
 8006340:	a919      	add	r1, sp, #100	; 0x64
 8006342:	4620      	mov	r0, r4
 8006344:	f002 f97e 	bl	8008644 <__d2b>
 8006348:	ec4b ab18 	vmov	d8, sl, fp
 800634c:	9018      	str	r0, [sp, #96]	; 0x60
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f aef6 	beq.w	8006140 <_strtod_l+0x490>
 8006354:	2101      	movs	r1, #1
 8006356:	4620      	mov	r0, r4
 8006358:	f001 fec8 	bl	80080ec <__i2b>
 800635c:	4606      	mov	r6, r0
 800635e:	2800      	cmp	r0, #0
 8006360:	f43f aeee 	beq.w	8006140 <_strtod_l+0x490>
 8006364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006366:	9904      	ldr	r1, [sp, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	bfab      	itete	ge
 800636c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800636e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006370:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006372:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006376:	bfac      	ite	ge
 8006378:	eb03 0902 	addge.w	r9, r3, r2
 800637c:	1ad7      	sublt	r7, r2, r3
 800637e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006380:	eba3 0801 	sub.w	r8, r3, r1
 8006384:	4490      	add	r8, r2
 8006386:	4ba1      	ldr	r3, [pc, #644]	; (800660c <_strtod_l+0x95c>)
 8006388:	f108 38ff 	add.w	r8, r8, #4294967295
 800638c:	4598      	cmp	r8, r3
 800638e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006392:	f280 80c7 	bge.w	8006524 <_strtod_l+0x874>
 8006396:	eba3 0308 	sub.w	r3, r3, r8
 800639a:	2b1f      	cmp	r3, #31
 800639c:	eba2 0203 	sub.w	r2, r2, r3
 80063a0:	f04f 0101 	mov.w	r1, #1
 80063a4:	f300 80b1 	bgt.w	800650a <_strtod_l+0x85a>
 80063a8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ac:	930d      	str	r3, [sp, #52]	; 0x34
 80063ae:	2300      	movs	r3, #0
 80063b0:	9308      	str	r3, [sp, #32]
 80063b2:	eb09 0802 	add.w	r8, r9, r2
 80063b6:	9b04      	ldr	r3, [sp, #16]
 80063b8:	45c1      	cmp	r9, r8
 80063ba:	4417      	add	r7, r2
 80063bc:	441f      	add	r7, r3
 80063be:	464b      	mov	r3, r9
 80063c0:	bfa8      	it	ge
 80063c2:	4643      	movge	r3, r8
 80063c4:	42bb      	cmp	r3, r7
 80063c6:	bfa8      	it	ge
 80063c8:	463b      	movge	r3, r7
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfc2      	ittt	gt
 80063ce:	eba8 0803 	subgt.w	r8, r8, r3
 80063d2:	1aff      	subgt	r7, r7, r3
 80063d4:	eba9 0903 	subgt.w	r9, r9, r3
 80063d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063da:	2b00      	cmp	r3, #0
 80063dc:	dd17      	ble.n	800640e <_strtod_l+0x75e>
 80063de:	4631      	mov	r1, r6
 80063e0:	461a      	mov	r2, r3
 80063e2:	4620      	mov	r0, r4
 80063e4:	f001 ff42 	bl	800826c <__pow5mult>
 80063e8:	4606      	mov	r6, r0
 80063ea:	2800      	cmp	r0, #0
 80063ec:	f43f aea8 	beq.w	8006140 <_strtod_l+0x490>
 80063f0:	4601      	mov	r1, r0
 80063f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80063f4:	4620      	mov	r0, r4
 80063f6:	f001 fe8f 	bl	8008118 <__multiply>
 80063fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f43f ae9f 	beq.w	8006140 <_strtod_l+0x490>
 8006402:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006404:	4620      	mov	r0, r4
 8006406:	f001 fd6f 	bl	8007ee8 <_Bfree>
 800640a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800640c:	9318      	str	r3, [sp, #96]	; 0x60
 800640e:	f1b8 0f00 	cmp.w	r8, #0
 8006412:	f300 808c 	bgt.w	800652e <_strtod_l+0x87e>
 8006416:	9b06      	ldr	r3, [sp, #24]
 8006418:	2b00      	cmp	r3, #0
 800641a:	dd08      	ble.n	800642e <_strtod_l+0x77e>
 800641c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800641e:	9905      	ldr	r1, [sp, #20]
 8006420:	4620      	mov	r0, r4
 8006422:	f001 ff23 	bl	800826c <__pow5mult>
 8006426:	9005      	str	r0, [sp, #20]
 8006428:	2800      	cmp	r0, #0
 800642a:	f43f ae89 	beq.w	8006140 <_strtod_l+0x490>
 800642e:	2f00      	cmp	r7, #0
 8006430:	dd08      	ble.n	8006444 <_strtod_l+0x794>
 8006432:	9905      	ldr	r1, [sp, #20]
 8006434:	463a      	mov	r2, r7
 8006436:	4620      	mov	r0, r4
 8006438:	f001 ff72 	bl	8008320 <__lshift>
 800643c:	9005      	str	r0, [sp, #20]
 800643e:	2800      	cmp	r0, #0
 8006440:	f43f ae7e 	beq.w	8006140 <_strtod_l+0x490>
 8006444:	f1b9 0f00 	cmp.w	r9, #0
 8006448:	dd08      	ble.n	800645c <_strtod_l+0x7ac>
 800644a:	4631      	mov	r1, r6
 800644c:	464a      	mov	r2, r9
 800644e:	4620      	mov	r0, r4
 8006450:	f001 ff66 	bl	8008320 <__lshift>
 8006454:	4606      	mov	r6, r0
 8006456:	2800      	cmp	r0, #0
 8006458:	f43f ae72 	beq.w	8006140 <_strtod_l+0x490>
 800645c:	9a05      	ldr	r2, [sp, #20]
 800645e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006460:	4620      	mov	r0, r4
 8006462:	f001 ffe9 	bl	8008438 <__mdiff>
 8006466:	4605      	mov	r5, r0
 8006468:	2800      	cmp	r0, #0
 800646a:	f43f ae69 	beq.w	8006140 <_strtod_l+0x490>
 800646e:	68c3      	ldr	r3, [r0, #12]
 8006470:	930b      	str	r3, [sp, #44]	; 0x2c
 8006472:	2300      	movs	r3, #0
 8006474:	60c3      	str	r3, [r0, #12]
 8006476:	4631      	mov	r1, r6
 8006478:	f001 ffc2 	bl	8008400 <__mcmp>
 800647c:	2800      	cmp	r0, #0
 800647e:	da60      	bge.n	8006542 <_strtod_l+0x892>
 8006480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006482:	ea53 030a 	orrs.w	r3, r3, sl
 8006486:	f040 8082 	bne.w	800658e <_strtod_l+0x8de>
 800648a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800648e:	2b00      	cmp	r3, #0
 8006490:	d17d      	bne.n	800658e <_strtod_l+0x8de>
 8006492:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006496:	0d1b      	lsrs	r3, r3, #20
 8006498:	051b      	lsls	r3, r3, #20
 800649a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800649e:	d976      	bls.n	800658e <_strtod_l+0x8de>
 80064a0:	696b      	ldr	r3, [r5, #20]
 80064a2:	b913      	cbnz	r3, 80064aa <_strtod_l+0x7fa>
 80064a4:	692b      	ldr	r3, [r5, #16]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	dd71      	ble.n	800658e <_strtod_l+0x8de>
 80064aa:	4629      	mov	r1, r5
 80064ac:	2201      	movs	r2, #1
 80064ae:	4620      	mov	r0, r4
 80064b0:	f001 ff36 	bl	8008320 <__lshift>
 80064b4:	4631      	mov	r1, r6
 80064b6:	4605      	mov	r5, r0
 80064b8:	f001 ffa2 	bl	8008400 <__mcmp>
 80064bc:	2800      	cmp	r0, #0
 80064be:	dd66      	ble.n	800658e <_strtod_l+0x8de>
 80064c0:	9904      	ldr	r1, [sp, #16]
 80064c2:	4a53      	ldr	r2, [pc, #332]	; (8006610 <_strtod_l+0x960>)
 80064c4:	465b      	mov	r3, fp
 80064c6:	2900      	cmp	r1, #0
 80064c8:	f000 8081 	beq.w	80065ce <_strtod_l+0x91e>
 80064cc:	ea02 010b 	and.w	r1, r2, fp
 80064d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064d4:	dc7b      	bgt.n	80065ce <_strtod_l+0x91e>
 80064d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80064da:	f77f aea9 	ble.w	8006230 <_strtod_l+0x580>
 80064de:	4b4d      	ldr	r3, [pc, #308]	; (8006614 <_strtod_l+0x964>)
 80064e0:	4650      	mov	r0, sl
 80064e2:	4659      	mov	r1, fp
 80064e4:	2200      	movs	r2, #0
 80064e6:	f7fa f89f 	bl	8000628 <__aeabi_dmul>
 80064ea:	460b      	mov	r3, r1
 80064ec:	4303      	orrs	r3, r0
 80064ee:	bf08      	it	eq
 80064f0:	2322      	moveq	r3, #34	; 0x22
 80064f2:	4682      	mov	sl, r0
 80064f4:	468b      	mov	fp, r1
 80064f6:	bf08      	it	eq
 80064f8:	6023      	streq	r3, [r4, #0]
 80064fa:	e62b      	b.n	8006154 <_strtod_l+0x4a4>
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	fa02 f303 	lsl.w	r3, r2, r3
 8006504:	ea03 0a0a 	and.w	sl, r3, sl
 8006508:	e6e3      	b.n	80062d2 <_strtod_l+0x622>
 800650a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800650e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006512:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006516:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800651a:	fa01 f308 	lsl.w	r3, r1, r8
 800651e:	9308      	str	r3, [sp, #32]
 8006520:	910d      	str	r1, [sp, #52]	; 0x34
 8006522:	e746      	b.n	80063b2 <_strtod_l+0x702>
 8006524:	2300      	movs	r3, #0
 8006526:	9308      	str	r3, [sp, #32]
 8006528:	2301      	movs	r3, #1
 800652a:	930d      	str	r3, [sp, #52]	; 0x34
 800652c:	e741      	b.n	80063b2 <_strtod_l+0x702>
 800652e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006530:	4642      	mov	r2, r8
 8006532:	4620      	mov	r0, r4
 8006534:	f001 fef4 	bl	8008320 <__lshift>
 8006538:	9018      	str	r0, [sp, #96]	; 0x60
 800653a:	2800      	cmp	r0, #0
 800653c:	f47f af6b 	bne.w	8006416 <_strtod_l+0x766>
 8006540:	e5fe      	b.n	8006140 <_strtod_l+0x490>
 8006542:	465f      	mov	r7, fp
 8006544:	d16e      	bne.n	8006624 <_strtod_l+0x974>
 8006546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800654c:	b342      	cbz	r2, 80065a0 <_strtod_l+0x8f0>
 800654e:	4a32      	ldr	r2, [pc, #200]	; (8006618 <_strtod_l+0x968>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d128      	bne.n	80065a6 <_strtod_l+0x8f6>
 8006554:	9b04      	ldr	r3, [sp, #16]
 8006556:	4651      	mov	r1, sl
 8006558:	b1eb      	cbz	r3, 8006596 <_strtod_l+0x8e6>
 800655a:	4b2d      	ldr	r3, [pc, #180]	; (8006610 <_strtod_l+0x960>)
 800655c:	403b      	ands	r3, r7
 800655e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006562:	f04f 32ff 	mov.w	r2, #4294967295
 8006566:	d819      	bhi.n	800659c <_strtod_l+0x8ec>
 8006568:	0d1b      	lsrs	r3, r3, #20
 800656a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	4299      	cmp	r1, r3
 8006574:	d117      	bne.n	80065a6 <_strtod_l+0x8f6>
 8006576:	4b29      	ldr	r3, [pc, #164]	; (800661c <_strtod_l+0x96c>)
 8006578:	429f      	cmp	r7, r3
 800657a:	d102      	bne.n	8006582 <_strtod_l+0x8d2>
 800657c:	3101      	adds	r1, #1
 800657e:	f43f addf 	beq.w	8006140 <_strtod_l+0x490>
 8006582:	4b23      	ldr	r3, [pc, #140]	; (8006610 <_strtod_l+0x960>)
 8006584:	403b      	ands	r3, r7
 8006586:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800658a:	f04f 0a00 	mov.w	sl, #0
 800658e:	9b04      	ldr	r3, [sp, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1a4      	bne.n	80064de <_strtod_l+0x82e>
 8006594:	e5de      	b.n	8006154 <_strtod_l+0x4a4>
 8006596:	f04f 33ff 	mov.w	r3, #4294967295
 800659a:	e7ea      	b.n	8006572 <_strtod_l+0x8c2>
 800659c:	4613      	mov	r3, r2
 800659e:	e7e8      	b.n	8006572 <_strtod_l+0x8c2>
 80065a0:	ea53 030a 	orrs.w	r3, r3, sl
 80065a4:	d08c      	beq.n	80064c0 <_strtod_l+0x810>
 80065a6:	9b08      	ldr	r3, [sp, #32]
 80065a8:	b1db      	cbz	r3, 80065e2 <_strtod_l+0x932>
 80065aa:	423b      	tst	r3, r7
 80065ac:	d0ef      	beq.n	800658e <_strtod_l+0x8de>
 80065ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b0:	9a04      	ldr	r2, [sp, #16]
 80065b2:	4650      	mov	r0, sl
 80065b4:	4659      	mov	r1, fp
 80065b6:	b1c3      	cbz	r3, 80065ea <_strtod_l+0x93a>
 80065b8:	f7ff fb5d 	bl	8005c76 <sulp>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	ec51 0b18 	vmov	r0, r1, d8
 80065c4:	f7f9 fe7a 	bl	80002bc <__adddf3>
 80065c8:	4682      	mov	sl, r0
 80065ca:	468b      	mov	fp, r1
 80065cc:	e7df      	b.n	800658e <_strtod_l+0x8de>
 80065ce:	4013      	ands	r3, r2
 80065d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80065d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80065d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80065dc:	f04f 3aff 	mov.w	sl, #4294967295
 80065e0:	e7d5      	b.n	800658e <_strtod_l+0x8de>
 80065e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e4:	ea13 0f0a 	tst.w	r3, sl
 80065e8:	e7e0      	b.n	80065ac <_strtod_l+0x8fc>
 80065ea:	f7ff fb44 	bl	8005c76 <sulp>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	ec51 0b18 	vmov	r0, r1, d8
 80065f6:	f7f9 fe5f 	bl	80002b8 <__aeabi_dsub>
 80065fa:	2200      	movs	r2, #0
 80065fc:	2300      	movs	r3, #0
 80065fe:	4682      	mov	sl, r0
 8006600:	468b      	mov	fp, r1
 8006602:	f7fa fa79 	bl	8000af8 <__aeabi_dcmpeq>
 8006606:	2800      	cmp	r0, #0
 8006608:	d0c1      	beq.n	800658e <_strtod_l+0x8de>
 800660a:	e611      	b.n	8006230 <_strtod_l+0x580>
 800660c:	fffffc02 	.word	0xfffffc02
 8006610:	7ff00000 	.word	0x7ff00000
 8006614:	39500000 	.word	0x39500000
 8006618:	000fffff 	.word	0x000fffff
 800661c:	7fefffff 	.word	0x7fefffff
 8006620:	0800a390 	.word	0x0800a390
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	f002 f868 	bl	80086fc <__ratio>
 800662c:	ec59 8b10 	vmov	r8, r9, d0
 8006630:	ee10 0a10 	vmov	r0, s0
 8006634:	2200      	movs	r2, #0
 8006636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800663a:	4649      	mov	r1, r9
 800663c:	f7fa fa70 	bl	8000b20 <__aeabi_dcmple>
 8006640:	2800      	cmp	r0, #0
 8006642:	d07a      	beq.n	800673a <_strtod_l+0xa8a>
 8006644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d04a      	beq.n	80066e0 <_strtod_l+0xa30>
 800664a:	4b95      	ldr	r3, [pc, #596]	; (80068a0 <_strtod_l+0xbf0>)
 800664c:	2200      	movs	r2, #0
 800664e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006652:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80068a0 <_strtod_l+0xbf0>
 8006656:	f04f 0800 	mov.w	r8, #0
 800665a:	4b92      	ldr	r3, [pc, #584]	; (80068a4 <_strtod_l+0xbf4>)
 800665c:	403b      	ands	r3, r7
 800665e:	930d      	str	r3, [sp, #52]	; 0x34
 8006660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006662:	4b91      	ldr	r3, [pc, #580]	; (80068a8 <_strtod_l+0xbf8>)
 8006664:	429a      	cmp	r2, r3
 8006666:	f040 80b0 	bne.w	80067ca <_strtod_l+0xb1a>
 800666a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800666e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006672:	ec4b ab10 	vmov	d0, sl, fp
 8006676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800667a:	f001 ff67 	bl	800854c <__ulp>
 800667e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006682:	ec53 2b10 	vmov	r2, r3, d0
 8006686:	f7f9 ffcf 	bl	8000628 <__aeabi_dmul>
 800668a:	4652      	mov	r2, sl
 800668c:	465b      	mov	r3, fp
 800668e:	f7f9 fe15 	bl	80002bc <__adddf3>
 8006692:	460b      	mov	r3, r1
 8006694:	4983      	ldr	r1, [pc, #524]	; (80068a4 <_strtod_l+0xbf4>)
 8006696:	4a85      	ldr	r2, [pc, #532]	; (80068ac <_strtod_l+0xbfc>)
 8006698:	4019      	ands	r1, r3
 800669a:	4291      	cmp	r1, r2
 800669c:	4682      	mov	sl, r0
 800669e:	d960      	bls.n	8006762 <_strtod_l+0xab2>
 80066a0:	ee18 3a90 	vmov	r3, s17
 80066a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d104      	bne.n	80066b6 <_strtod_l+0xa06>
 80066ac:	ee18 3a10 	vmov	r3, s16
 80066b0:	3301      	adds	r3, #1
 80066b2:	f43f ad45 	beq.w	8006140 <_strtod_l+0x490>
 80066b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80068b8 <_strtod_l+0xc08>
 80066ba:	f04f 3aff 	mov.w	sl, #4294967295
 80066be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066c0:	4620      	mov	r0, r4
 80066c2:	f001 fc11 	bl	8007ee8 <_Bfree>
 80066c6:	9905      	ldr	r1, [sp, #20]
 80066c8:	4620      	mov	r0, r4
 80066ca:	f001 fc0d 	bl	8007ee8 <_Bfree>
 80066ce:	4631      	mov	r1, r6
 80066d0:	4620      	mov	r0, r4
 80066d2:	f001 fc09 	bl	8007ee8 <_Bfree>
 80066d6:	4629      	mov	r1, r5
 80066d8:	4620      	mov	r0, r4
 80066da:	f001 fc05 	bl	8007ee8 <_Bfree>
 80066de:	e61a      	b.n	8006316 <_strtod_l+0x666>
 80066e0:	f1ba 0f00 	cmp.w	sl, #0
 80066e4:	d11b      	bne.n	800671e <_strtod_l+0xa6e>
 80066e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066ea:	b9f3      	cbnz	r3, 800672a <_strtod_l+0xa7a>
 80066ec:	4b6c      	ldr	r3, [pc, #432]	; (80068a0 <_strtod_l+0xbf0>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7fa fa0a 	bl	8000b0c <__aeabi_dcmplt>
 80066f8:	b9d0      	cbnz	r0, 8006730 <_strtod_l+0xa80>
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	4b6c      	ldr	r3, [pc, #432]	; (80068b0 <_strtod_l+0xc00>)
 8006700:	2200      	movs	r2, #0
 8006702:	f7f9 ff91 	bl	8000628 <__aeabi_dmul>
 8006706:	4680      	mov	r8, r0
 8006708:	4689      	mov	r9, r1
 800670a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800670e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006712:	9315      	str	r3, [sp, #84]	; 0x54
 8006714:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006718:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800671c:	e79d      	b.n	800665a <_strtod_l+0x9aa>
 800671e:	f1ba 0f01 	cmp.w	sl, #1
 8006722:	d102      	bne.n	800672a <_strtod_l+0xa7a>
 8006724:	2f00      	cmp	r7, #0
 8006726:	f43f ad83 	beq.w	8006230 <_strtod_l+0x580>
 800672a:	4b62      	ldr	r3, [pc, #392]	; (80068b4 <_strtod_l+0xc04>)
 800672c:	2200      	movs	r2, #0
 800672e:	e78e      	b.n	800664e <_strtod_l+0x99e>
 8006730:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80068b0 <_strtod_l+0xc00>
 8006734:	f04f 0800 	mov.w	r8, #0
 8006738:	e7e7      	b.n	800670a <_strtod_l+0xa5a>
 800673a:	4b5d      	ldr	r3, [pc, #372]	; (80068b0 <_strtod_l+0xc00>)
 800673c:	4640      	mov	r0, r8
 800673e:	4649      	mov	r1, r9
 8006740:	2200      	movs	r2, #0
 8006742:	f7f9 ff71 	bl	8000628 <__aeabi_dmul>
 8006746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006748:	4680      	mov	r8, r0
 800674a:	4689      	mov	r9, r1
 800674c:	b933      	cbnz	r3, 800675c <_strtod_l+0xaac>
 800674e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006752:	900e      	str	r0, [sp, #56]	; 0x38
 8006754:	930f      	str	r3, [sp, #60]	; 0x3c
 8006756:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800675a:	e7dd      	b.n	8006718 <_strtod_l+0xa68>
 800675c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006760:	e7f9      	b.n	8006756 <_strtod_l+0xaa6>
 8006762:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1a8      	bne.n	80066be <_strtod_l+0xa0e>
 800676c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006772:	0d1b      	lsrs	r3, r3, #20
 8006774:	051b      	lsls	r3, r3, #20
 8006776:	429a      	cmp	r2, r3
 8006778:	d1a1      	bne.n	80066be <_strtod_l+0xa0e>
 800677a:	4640      	mov	r0, r8
 800677c:	4649      	mov	r1, r9
 800677e:	f7fa faeb 	bl	8000d58 <__aeabi_d2lz>
 8006782:	f7f9 ff23 	bl	80005cc <__aeabi_l2d>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4640      	mov	r0, r8
 800678c:	4649      	mov	r1, r9
 800678e:	f7f9 fd93 	bl	80002b8 <__aeabi_dsub>
 8006792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006798:	ea43 030a 	orr.w	r3, r3, sl
 800679c:	4313      	orrs	r3, r2
 800679e:	4680      	mov	r8, r0
 80067a0:	4689      	mov	r9, r1
 80067a2:	d055      	beq.n	8006850 <_strtod_l+0xba0>
 80067a4:	a336      	add	r3, pc, #216	; (adr r3, 8006880 <_strtod_l+0xbd0>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f7fa f9af 	bl	8000b0c <__aeabi_dcmplt>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f47f acd0 	bne.w	8006154 <_strtod_l+0x4a4>
 80067b4:	a334      	add	r3, pc, #208	; (adr r3, 8006888 <_strtod_l+0xbd8>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	4640      	mov	r0, r8
 80067bc:	4649      	mov	r1, r9
 80067be:	f7fa f9c3 	bl	8000b48 <__aeabi_dcmpgt>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f43f af7b 	beq.w	80066be <_strtod_l+0xa0e>
 80067c8:	e4c4      	b.n	8006154 <_strtod_l+0x4a4>
 80067ca:	9b04      	ldr	r3, [sp, #16]
 80067cc:	b333      	cbz	r3, 800681c <_strtod_l+0xb6c>
 80067ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067d4:	d822      	bhi.n	800681c <_strtod_l+0xb6c>
 80067d6:	a32e      	add	r3, pc, #184	; (adr r3, 8006890 <_strtod_l+0xbe0>)
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	4640      	mov	r0, r8
 80067de:	4649      	mov	r1, r9
 80067e0:	f7fa f99e 	bl	8000b20 <__aeabi_dcmple>
 80067e4:	b1a0      	cbz	r0, 8006810 <_strtod_l+0xb60>
 80067e6:	4649      	mov	r1, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	f7fa f9f5 	bl	8000bd8 <__aeabi_d2uiz>
 80067ee:	2801      	cmp	r0, #1
 80067f0:	bf38      	it	cc
 80067f2:	2001      	movcc	r0, #1
 80067f4:	f7f9 fe9e 	bl	8000534 <__aeabi_ui2d>
 80067f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067fa:	4680      	mov	r8, r0
 80067fc:	4689      	mov	r9, r1
 80067fe:	bb23      	cbnz	r3, 800684a <_strtod_l+0xb9a>
 8006800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006804:	9010      	str	r0, [sp, #64]	; 0x40
 8006806:	9311      	str	r3, [sp, #68]	; 0x44
 8006808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800680c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006814:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	9309      	str	r3, [sp, #36]	; 0x24
 800681c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006820:	eeb0 0a48 	vmov.f32	s0, s16
 8006824:	eef0 0a68 	vmov.f32	s1, s17
 8006828:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800682c:	f001 fe8e 	bl	800854c <__ulp>
 8006830:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006834:	ec53 2b10 	vmov	r2, r3, d0
 8006838:	f7f9 fef6 	bl	8000628 <__aeabi_dmul>
 800683c:	ec53 2b18 	vmov	r2, r3, d8
 8006840:	f7f9 fd3c 	bl	80002bc <__adddf3>
 8006844:	4682      	mov	sl, r0
 8006846:	468b      	mov	fp, r1
 8006848:	e78d      	b.n	8006766 <_strtod_l+0xab6>
 800684a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800684e:	e7db      	b.n	8006808 <_strtod_l+0xb58>
 8006850:	a311      	add	r3, pc, #68	; (adr r3, 8006898 <_strtod_l+0xbe8>)
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	f7fa f959 	bl	8000b0c <__aeabi_dcmplt>
 800685a:	e7b2      	b.n	80067c2 <_strtod_l+0xb12>
 800685c:	2300      	movs	r3, #0
 800685e:	930a      	str	r3, [sp, #40]	; 0x28
 8006860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	f7ff ba6b 	b.w	8005d40 <_strtod_l+0x90>
 800686a:	2a65      	cmp	r2, #101	; 0x65
 800686c:	f43f ab5f 	beq.w	8005f2e <_strtod_l+0x27e>
 8006870:	2a45      	cmp	r2, #69	; 0x45
 8006872:	f43f ab5c 	beq.w	8005f2e <_strtod_l+0x27e>
 8006876:	2301      	movs	r3, #1
 8006878:	f7ff bb94 	b.w	8005fa4 <_strtod_l+0x2f4>
 800687c:	f3af 8000 	nop.w
 8006880:	94a03595 	.word	0x94a03595
 8006884:	3fdfffff 	.word	0x3fdfffff
 8006888:	35afe535 	.word	0x35afe535
 800688c:	3fe00000 	.word	0x3fe00000
 8006890:	ffc00000 	.word	0xffc00000
 8006894:	41dfffff 	.word	0x41dfffff
 8006898:	94a03595 	.word	0x94a03595
 800689c:	3fcfffff 	.word	0x3fcfffff
 80068a0:	3ff00000 	.word	0x3ff00000
 80068a4:	7ff00000 	.word	0x7ff00000
 80068a8:	7fe00000 	.word	0x7fe00000
 80068ac:	7c9fffff 	.word	0x7c9fffff
 80068b0:	3fe00000 	.word	0x3fe00000
 80068b4:	bff00000 	.word	0xbff00000
 80068b8:	7fefffff 	.word	0x7fefffff

080068bc <_strtod_r>:
 80068bc:	4b01      	ldr	r3, [pc, #4]	; (80068c4 <_strtod_r+0x8>)
 80068be:	f7ff b9f7 	b.w	8005cb0 <_strtod_l>
 80068c2:	bf00      	nop
 80068c4:	20000078 	.word	0x20000078

080068c8 <_strtol_l.constprop.0>:
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ce:	d001      	beq.n	80068d4 <_strtol_l.constprop.0+0xc>
 80068d0:	2b24      	cmp	r3, #36	; 0x24
 80068d2:	d906      	bls.n	80068e2 <_strtol_l.constprop.0+0x1a>
 80068d4:	f7fe fa8c 	bl	8004df0 <__errno>
 80068d8:	2316      	movs	r3, #22
 80068da:	6003      	str	r3, [r0, #0]
 80068dc:	2000      	movs	r0, #0
 80068de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80069c8 <_strtol_l.constprop.0+0x100>
 80068e6:	460d      	mov	r5, r1
 80068e8:	462e      	mov	r6, r5
 80068ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80068f2:	f017 0708 	ands.w	r7, r7, #8
 80068f6:	d1f7      	bne.n	80068e8 <_strtol_l.constprop.0+0x20>
 80068f8:	2c2d      	cmp	r4, #45	; 0x2d
 80068fa:	d132      	bne.n	8006962 <_strtol_l.constprop.0+0x9a>
 80068fc:	782c      	ldrb	r4, [r5, #0]
 80068fe:	2701      	movs	r7, #1
 8006900:	1cb5      	adds	r5, r6, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d05b      	beq.n	80069be <_strtol_l.constprop.0+0xf6>
 8006906:	2b10      	cmp	r3, #16
 8006908:	d109      	bne.n	800691e <_strtol_l.constprop.0+0x56>
 800690a:	2c30      	cmp	r4, #48	; 0x30
 800690c:	d107      	bne.n	800691e <_strtol_l.constprop.0+0x56>
 800690e:	782c      	ldrb	r4, [r5, #0]
 8006910:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006914:	2c58      	cmp	r4, #88	; 0x58
 8006916:	d14d      	bne.n	80069b4 <_strtol_l.constprop.0+0xec>
 8006918:	786c      	ldrb	r4, [r5, #1]
 800691a:	2310      	movs	r3, #16
 800691c:	3502      	adds	r5, #2
 800691e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006922:	f108 38ff 	add.w	r8, r8, #4294967295
 8006926:	f04f 0c00 	mov.w	ip, #0
 800692a:	fbb8 f9f3 	udiv	r9, r8, r3
 800692e:	4666      	mov	r6, ip
 8006930:	fb03 8a19 	mls	sl, r3, r9, r8
 8006934:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006938:	f1be 0f09 	cmp.w	lr, #9
 800693c:	d816      	bhi.n	800696c <_strtol_l.constprop.0+0xa4>
 800693e:	4674      	mov	r4, lr
 8006940:	42a3      	cmp	r3, r4
 8006942:	dd24      	ble.n	800698e <_strtol_l.constprop.0+0xc6>
 8006944:	f1bc 0f00 	cmp.w	ip, #0
 8006948:	db1e      	blt.n	8006988 <_strtol_l.constprop.0+0xc0>
 800694a:	45b1      	cmp	r9, r6
 800694c:	d31c      	bcc.n	8006988 <_strtol_l.constprop.0+0xc0>
 800694e:	d101      	bne.n	8006954 <_strtol_l.constprop.0+0x8c>
 8006950:	45a2      	cmp	sl, r4
 8006952:	db19      	blt.n	8006988 <_strtol_l.constprop.0+0xc0>
 8006954:	fb06 4603 	mla	r6, r6, r3, r4
 8006958:	f04f 0c01 	mov.w	ip, #1
 800695c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006960:	e7e8      	b.n	8006934 <_strtol_l.constprop.0+0x6c>
 8006962:	2c2b      	cmp	r4, #43	; 0x2b
 8006964:	bf04      	itt	eq
 8006966:	782c      	ldrbeq	r4, [r5, #0]
 8006968:	1cb5      	addeq	r5, r6, #2
 800696a:	e7ca      	b.n	8006902 <_strtol_l.constprop.0+0x3a>
 800696c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006970:	f1be 0f19 	cmp.w	lr, #25
 8006974:	d801      	bhi.n	800697a <_strtol_l.constprop.0+0xb2>
 8006976:	3c37      	subs	r4, #55	; 0x37
 8006978:	e7e2      	b.n	8006940 <_strtol_l.constprop.0+0x78>
 800697a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800697e:	f1be 0f19 	cmp.w	lr, #25
 8006982:	d804      	bhi.n	800698e <_strtol_l.constprop.0+0xc6>
 8006984:	3c57      	subs	r4, #87	; 0x57
 8006986:	e7db      	b.n	8006940 <_strtol_l.constprop.0+0x78>
 8006988:	f04f 3cff 	mov.w	ip, #4294967295
 800698c:	e7e6      	b.n	800695c <_strtol_l.constprop.0+0x94>
 800698e:	f1bc 0f00 	cmp.w	ip, #0
 8006992:	da05      	bge.n	80069a0 <_strtol_l.constprop.0+0xd8>
 8006994:	2322      	movs	r3, #34	; 0x22
 8006996:	6003      	str	r3, [r0, #0]
 8006998:	4646      	mov	r6, r8
 800699a:	b942      	cbnz	r2, 80069ae <_strtol_l.constprop.0+0xe6>
 800699c:	4630      	mov	r0, r6
 800699e:	e79e      	b.n	80068de <_strtol_l.constprop.0+0x16>
 80069a0:	b107      	cbz	r7, 80069a4 <_strtol_l.constprop.0+0xdc>
 80069a2:	4276      	negs	r6, r6
 80069a4:	2a00      	cmp	r2, #0
 80069a6:	d0f9      	beq.n	800699c <_strtol_l.constprop.0+0xd4>
 80069a8:	f1bc 0f00 	cmp.w	ip, #0
 80069ac:	d000      	beq.n	80069b0 <_strtol_l.constprop.0+0xe8>
 80069ae:	1e69      	subs	r1, r5, #1
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	e7f3      	b.n	800699c <_strtol_l.constprop.0+0xd4>
 80069b4:	2430      	movs	r4, #48	; 0x30
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1b1      	bne.n	800691e <_strtol_l.constprop.0+0x56>
 80069ba:	2308      	movs	r3, #8
 80069bc:	e7af      	b.n	800691e <_strtol_l.constprop.0+0x56>
 80069be:	2c30      	cmp	r4, #48	; 0x30
 80069c0:	d0a5      	beq.n	800690e <_strtol_l.constprop.0+0x46>
 80069c2:	230a      	movs	r3, #10
 80069c4:	e7ab      	b.n	800691e <_strtol_l.constprop.0+0x56>
 80069c6:	bf00      	nop
 80069c8:	0800a3b9 	.word	0x0800a3b9

080069cc <_strtol_r>:
 80069cc:	f7ff bf7c 	b.w	80068c8 <_strtol_l.constprop.0>

080069d0 <_write_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d07      	ldr	r5, [pc, #28]	; (80069f0 <_write_r+0x20>)
 80069d4:	4604      	mov	r4, r0
 80069d6:	4608      	mov	r0, r1
 80069d8:	4611      	mov	r1, r2
 80069da:	2200      	movs	r2, #0
 80069dc:	602a      	str	r2, [r5, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	f7fb fd12 	bl	8002408 <_write>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_write_r+0x1e>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_write_r+0x1e>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000c94 	.word	0x20000c94

080069f4 <_close_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d06      	ldr	r5, [pc, #24]	; (8006a10 <_close_r+0x1c>)
 80069f8:	2300      	movs	r3, #0
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	f7fb fd1e 	bl	8002440 <_close>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_close_r+0x1a>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_close_r+0x1a>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	20000c94 	.word	0x20000c94

08006a14 <quorem>:
 8006a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	6903      	ldr	r3, [r0, #16]
 8006a1a:	690c      	ldr	r4, [r1, #16]
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	4607      	mov	r7, r0
 8006a20:	f2c0 8081 	blt.w	8006b26 <quorem+0x112>
 8006a24:	3c01      	subs	r4, #1
 8006a26:	f101 0814 	add.w	r8, r1, #20
 8006a2a:	f100 0514 	add.w	r5, r0, #20
 8006a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a48:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a4c:	d331      	bcc.n	8006ab2 <quorem+0x9e>
 8006a4e:	f04f 0e00 	mov.w	lr, #0
 8006a52:	4640      	mov	r0, r8
 8006a54:	46ac      	mov	ip, r5
 8006a56:	46f2      	mov	sl, lr
 8006a58:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a5c:	b293      	uxth	r3, r2
 8006a5e:	fb06 e303 	mla	r3, r6, r3, lr
 8006a62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	ebaa 0303 	sub.w	r3, sl, r3
 8006a6c:	f8dc a000 	ldr.w	sl, [ip]
 8006a70:	0c12      	lsrs	r2, r2, #16
 8006a72:	fa13 f38a 	uxtah	r3, r3, sl
 8006a76:	fb06 e202 	mla	r2, r6, r2, lr
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	9b00      	ldr	r3, [sp, #0]
 8006a7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a82:	b292      	uxth	r2, r2
 8006a84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a90:	4581      	cmp	r9, r0
 8006a92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a96:	f84c 3b04 	str.w	r3, [ip], #4
 8006a9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a9e:	d2db      	bcs.n	8006a58 <quorem+0x44>
 8006aa0:	f855 300b 	ldr.w	r3, [r5, fp]
 8006aa4:	b92b      	cbnz	r3, 8006ab2 <quorem+0x9e>
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	3b04      	subs	r3, #4
 8006aaa:	429d      	cmp	r5, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	d32e      	bcc.n	8006b0e <quorem+0xfa>
 8006ab0:	613c      	str	r4, [r7, #16]
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	f001 fca4 	bl	8008400 <__mcmp>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	db24      	blt.n	8006b06 <quorem+0xf2>
 8006abc:	3601      	adds	r6, #1
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f04f 0c00 	mov.w	ip, #0
 8006ac4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ac8:	f8d0 e000 	ldr.w	lr, [r0]
 8006acc:	b293      	uxth	r3, r2
 8006ace:	ebac 0303 	sub.w	r3, ip, r3
 8006ad2:	0c12      	lsrs	r2, r2, #16
 8006ad4:	fa13 f38e 	uxtah	r3, r3, lr
 8006ad8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006adc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae6:	45c1      	cmp	r9, r8
 8006ae8:	f840 3b04 	str.w	r3, [r0], #4
 8006aec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006af0:	d2e8      	bcs.n	8006ac4 <quorem+0xb0>
 8006af2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006af6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006afa:	b922      	cbnz	r2, 8006b06 <quorem+0xf2>
 8006afc:	3b04      	subs	r3, #4
 8006afe:	429d      	cmp	r5, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	d30a      	bcc.n	8006b1a <quorem+0x106>
 8006b04:	613c      	str	r4, [r7, #16]
 8006b06:	4630      	mov	r0, r6
 8006b08:	b003      	add	sp, #12
 8006b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	3b04      	subs	r3, #4
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	d1cc      	bne.n	8006ab0 <quorem+0x9c>
 8006b16:	3c01      	subs	r4, #1
 8006b18:	e7c7      	b.n	8006aaa <quorem+0x96>
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	3b04      	subs	r3, #4
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d1f0      	bne.n	8006b04 <quorem+0xf0>
 8006b22:	3c01      	subs	r4, #1
 8006b24:	e7eb      	b.n	8006afe <quorem+0xea>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e7ee      	b.n	8006b08 <quorem+0xf4>
 8006b2a:	0000      	movs	r0, r0
 8006b2c:	0000      	movs	r0, r0
	...

08006b30 <_dtoa_r>:
 8006b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	ed2d 8b04 	vpush	{d8-d9}
 8006b38:	ec57 6b10 	vmov	r6, r7, d0
 8006b3c:	b093      	sub	sp, #76	; 0x4c
 8006b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b44:	9106      	str	r1, [sp, #24]
 8006b46:	ee10 aa10 	vmov	sl, s0
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8006b50:	46bb      	mov	fp, r7
 8006b52:	b975      	cbnz	r5, 8006b72 <_dtoa_r+0x42>
 8006b54:	2010      	movs	r0, #16
 8006b56:	f001 f95f 	bl	8007e18 <malloc>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8006b5e:	b920      	cbnz	r0, 8006b6a <_dtoa_r+0x3a>
 8006b60:	4ba7      	ldr	r3, [pc, #668]	; (8006e00 <_dtoa_r+0x2d0>)
 8006b62:	21ea      	movs	r1, #234	; 0xea
 8006b64:	48a7      	ldr	r0, [pc, #668]	; (8006e04 <_dtoa_r+0x2d4>)
 8006b66:	f002 fceb 	bl	8009540 <__assert_func>
 8006b6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b6e:	6005      	str	r5, [r0, #0]
 8006b70:	60c5      	str	r5, [r0, #12]
 8006b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b74:	6819      	ldr	r1, [r3, #0]
 8006b76:	b151      	cbz	r1, 8006b8e <_dtoa_r+0x5e>
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	604a      	str	r2, [r1, #4]
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4093      	lsls	r3, r2
 8006b80:	608b      	str	r3, [r1, #8]
 8006b82:	4620      	mov	r0, r4
 8006b84:	f001 f9b0 	bl	8007ee8 <_Bfree>
 8006b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	1e3b      	subs	r3, r7, #0
 8006b90:	bfaa      	itet	ge
 8006b92:	2300      	movge	r3, #0
 8006b94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006b98:	f8c8 3000 	strge.w	r3, [r8]
 8006b9c:	4b9a      	ldr	r3, [pc, #616]	; (8006e08 <_dtoa_r+0x2d8>)
 8006b9e:	bfbc      	itt	lt
 8006ba0:	2201      	movlt	r2, #1
 8006ba2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ba6:	ea33 030b 	bics.w	r3, r3, fp
 8006baa:	d11b      	bne.n	8006be4 <_dtoa_r+0xb4>
 8006bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bae:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bb8:	4333      	orrs	r3, r6
 8006bba:	f000 8592 	beq.w	80076e2 <_dtoa_r+0xbb2>
 8006bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bc0:	b963      	cbnz	r3, 8006bdc <_dtoa_r+0xac>
 8006bc2:	4b92      	ldr	r3, [pc, #584]	; (8006e0c <_dtoa_r+0x2dc>)
 8006bc4:	e022      	b.n	8006c0c <_dtoa_r+0xdc>
 8006bc6:	4b92      	ldr	r3, [pc, #584]	; (8006e10 <_dtoa_r+0x2e0>)
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	9801      	ldr	r0, [sp, #4]
 8006bd2:	b013      	add	sp, #76	; 0x4c
 8006bd4:	ecbd 8b04 	vpop	{d8-d9}
 8006bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bdc:	4b8b      	ldr	r3, [pc, #556]	; (8006e0c <_dtoa_r+0x2dc>)
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	3303      	adds	r3, #3
 8006be2:	e7f3      	b.n	8006bcc <_dtoa_r+0x9c>
 8006be4:	2200      	movs	r2, #0
 8006be6:	2300      	movs	r3, #0
 8006be8:	4650      	mov	r0, sl
 8006bea:	4659      	mov	r1, fp
 8006bec:	f7f9 ff84 	bl	8000af8 <__aeabi_dcmpeq>
 8006bf0:	ec4b ab19 	vmov	d9, sl, fp
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	b158      	cbz	r0, 8006c10 <_dtoa_r+0xe0>
 8006bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 856b 	beq.w	80076dc <_dtoa_r+0xbac>
 8006c06:	4883      	ldr	r0, [pc, #524]	; (8006e14 <_dtoa_r+0x2e4>)
 8006c08:	6018      	str	r0, [r3, #0]
 8006c0a:	1e43      	subs	r3, r0, #1
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	e7df      	b.n	8006bd0 <_dtoa_r+0xa0>
 8006c10:	ec4b ab10 	vmov	d0, sl, fp
 8006c14:	aa10      	add	r2, sp, #64	; 0x40
 8006c16:	a911      	add	r1, sp, #68	; 0x44
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 fd13 	bl	8008644 <__d2b>
 8006c1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c22:	ee08 0a10 	vmov	s16, r0
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	f000 8084 	beq.w	8006d34 <_dtoa_r+0x204>
 8006c2c:	ee19 3a90 	vmov	r3, s19
 8006c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c38:	4656      	mov	r6, sl
 8006c3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c46:	4b74      	ldr	r3, [pc, #464]	; (8006e18 <_dtoa_r+0x2e8>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	f7f9 fb33 	bl	80002b8 <__aeabi_dsub>
 8006c52:	a365      	add	r3, pc, #404	; (adr r3, 8006de8 <_dtoa_r+0x2b8>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f7f9 fce6 	bl	8000628 <__aeabi_dmul>
 8006c5c:	a364      	add	r3, pc, #400	; (adr r3, 8006df0 <_dtoa_r+0x2c0>)
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f7f9 fb2b 	bl	80002bc <__adddf3>
 8006c66:	4606      	mov	r6, r0
 8006c68:	4628      	mov	r0, r5
 8006c6a:	460f      	mov	r7, r1
 8006c6c:	f7f9 fc72 	bl	8000554 <__aeabi_i2d>
 8006c70:	a361      	add	r3, pc, #388	; (adr r3, 8006df8 <_dtoa_r+0x2c8>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	f7f9 fcd7 	bl	8000628 <__aeabi_dmul>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	4630      	mov	r0, r6
 8006c80:	4639      	mov	r1, r7
 8006c82:	f7f9 fb1b 	bl	80002bc <__adddf3>
 8006c86:	4606      	mov	r6, r0
 8006c88:	460f      	mov	r7, r1
 8006c8a:	f7f9 ff7d 	bl	8000b88 <__aeabi_d2iz>
 8006c8e:	2200      	movs	r2, #0
 8006c90:	9000      	str	r0, [sp, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	4630      	mov	r0, r6
 8006c96:	4639      	mov	r1, r7
 8006c98:	f7f9 ff38 	bl	8000b0c <__aeabi_dcmplt>
 8006c9c:	b150      	cbz	r0, 8006cb4 <_dtoa_r+0x184>
 8006c9e:	9800      	ldr	r0, [sp, #0]
 8006ca0:	f7f9 fc58 	bl	8000554 <__aeabi_i2d>
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	f7f9 ff26 	bl	8000af8 <__aeabi_dcmpeq>
 8006cac:	b910      	cbnz	r0, 8006cb4 <_dtoa_r+0x184>
 8006cae:	9b00      	ldr	r3, [sp, #0]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	9b00      	ldr	r3, [sp, #0]
 8006cb6:	2b16      	cmp	r3, #22
 8006cb8:	d85a      	bhi.n	8006d70 <_dtoa_r+0x240>
 8006cba:	9a00      	ldr	r2, [sp, #0]
 8006cbc:	4b57      	ldr	r3, [pc, #348]	; (8006e1c <_dtoa_r+0x2ec>)
 8006cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	ec51 0b19 	vmov	r0, r1, d9
 8006cca:	f7f9 ff1f 	bl	8000b0c <__aeabi_dcmplt>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d050      	beq.n	8006d74 <_dtoa_r+0x244>
 8006cd2:	9b00      	ldr	r3, [sp, #0]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cde:	1b5d      	subs	r5, r3, r5
 8006ce0:	1e6b      	subs	r3, r5, #1
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	bf45      	ittet	mi
 8006ce6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006cea:	9304      	strmi	r3, [sp, #16]
 8006cec:	2300      	movpl	r3, #0
 8006cee:	2300      	movmi	r3, #0
 8006cf0:	bf4c      	ite	mi
 8006cf2:	9305      	strmi	r3, [sp, #20]
 8006cf4:	9304      	strpl	r3, [sp, #16]
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	db3d      	blt.n	8006d78 <_dtoa_r+0x248>
 8006cfc:	9b05      	ldr	r3, [sp, #20]
 8006cfe:	9a00      	ldr	r2, [sp, #0]
 8006d00:	920a      	str	r2, [sp, #40]	; 0x28
 8006d02:	4413      	add	r3, r2
 8006d04:	9305      	str	r3, [sp, #20]
 8006d06:	2300      	movs	r3, #0
 8006d08:	9307      	str	r3, [sp, #28]
 8006d0a:	9b06      	ldr	r3, [sp, #24]
 8006d0c:	2b09      	cmp	r3, #9
 8006d0e:	f200 8089 	bhi.w	8006e24 <_dtoa_r+0x2f4>
 8006d12:	2b05      	cmp	r3, #5
 8006d14:	bfc4      	itt	gt
 8006d16:	3b04      	subgt	r3, #4
 8006d18:	9306      	strgt	r3, [sp, #24]
 8006d1a:	9b06      	ldr	r3, [sp, #24]
 8006d1c:	f1a3 0302 	sub.w	r3, r3, #2
 8006d20:	bfcc      	ite	gt
 8006d22:	2500      	movgt	r5, #0
 8006d24:	2501      	movle	r5, #1
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	f200 8087 	bhi.w	8006e3a <_dtoa_r+0x30a>
 8006d2c:	e8df f003 	tbb	[pc, r3]
 8006d30:	59383a2d 	.word	0x59383a2d
 8006d34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d38:	441d      	add	r5, r3
 8006d3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	bfc1      	itttt	gt
 8006d42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d52:	bfda      	itte	le
 8006d54:	f1c3 0320 	rsble	r3, r3, #32
 8006d58:	fa06 f003 	lslle.w	r0, r6, r3
 8006d5c:	4318      	orrgt	r0, r3
 8006d5e:	f7f9 fbe9 	bl	8000534 <__aeabi_ui2d>
 8006d62:	2301      	movs	r3, #1
 8006d64:	4606      	mov	r6, r0
 8006d66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d6a:	3d01      	subs	r5, #1
 8006d6c:	930e      	str	r3, [sp, #56]	; 0x38
 8006d6e:	e76a      	b.n	8006c46 <_dtoa_r+0x116>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e7b2      	b.n	8006cda <_dtoa_r+0x1aa>
 8006d74:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d76:	e7b1      	b.n	8006cdc <_dtoa_r+0x1ac>
 8006d78:	9b04      	ldr	r3, [sp, #16]
 8006d7a:	9a00      	ldr	r2, [sp, #0]
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	9304      	str	r3, [sp, #16]
 8006d80:	4253      	negs	r3, r2
 8006d82:	9307      	str	r3, [sp, #28]
 8006d84:	2300      	movs	r3, #0
 8006d86:	930a      	str	r3, [sp, #40]	; 0x28
 8006d88:	e7bf      	b.n	8006d0a <_dtoa_r+0x1da>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9308      	str	r3, [sp, #32]
 8006d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dc55      	bgt.n	8006e40 <_dtoa_r+0x310>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d9e:	e00c      	b.n	8006dba <_dtoa_r+0x28a>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e7f3      	b.n	8006d8c <_dtoa_r+0x25c>
 8006da4:	2300      	movs	r3, #0
 8006da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da8:	9308      	str	r3, [sp, #32]
 8006daa:	9b00      	ldr	r3, [sp, #0]
 8006dac:	4413      	add	r3, r2
 8006dae:	9302      	str	r3, [sp, #8]
 8006db0:	3301      	adds	r3, #1
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	9303      	str	r3, [sp, #12]
 8006db6:	bfb8      	it	lt
 8006db8:	2301      	movlt	r3, #1
 8006dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	6042      	str	r2, [r0, #4]
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	f102 0614 	add.w	r6, r2, #20
 8006dc6:	429e      	cmp	r6, r3
 8006dc8:	6841      	ldr	r1, [r0, #4]
 8006dca:	d93d      	bls.n	8006e48 <_dtoa_r+0x318>
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f001 f84b 	bl	8007e68 <_Balloc>
 8006dd2:	9001      	str	r0, [sp, #4]
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d13b      	bne.n	8006e50 <_dtoa_r+0x320>
 8006dd8:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <_dtoa_r+0x2f0>)
 8006dda:	4602      	mov	r2, r0
 8006ddc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006de0:	e6c0      	b.n	8006b64 <_dtoa_r+0x34>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e7df      	b.n	8006da6 <_dtoa_r+0x276>
 8006de6:	bf00      	nop
 8006de8:	636f4361 	.word	0x636f4361
 8006dec:	3fd287a7 	.word	0x3fd287a7
 8006df0:	8b60c8b3 	.word	0x8b60c8b3
 8006df4:	3fc68a28 	.word	0x3fc68a28
 8006df8:	509f79fb 	.word	0x509f79fb
 8006dfc:	3fd34413 	.word	0x3fd34413
 8006e00:	0800a4c6 	.word	0x0800a4c6
 8006e04:	0800a4dd 	.word	0x0800a4dd
 8006e08:	7ff00000 	.word	0x7ff00000
 8006e0c:	0800a4c2 	.word	0x0800a4c2
 8006e10:	0800a4b9 	.word	0x0800a4b9
 8006e14:	0800a732 	.word	0x0800a732
 8006e18:	3ff80000 	.word	0x3ff80000
 8006e1c:	0800a648 	.word	0x0800a648
 8006e20:	0800a538 	.word	0x0800a538
 8006e24:	2501      	movs	r5, #1
 8006e26:	2300      	movs	r3, #0
 8006e28:	9306      	str	r3, [sp, #24]
 8006e2a:	9508      	str	r5, [sp, #32]
 8006e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	2312      	movs	r3, #18
 8006e38:	e7b0      	b.n	8006d9c <_dtoa_r+0x26c>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	9308      	str	r3, [sp, #32]
 8006e3e:	e7f5      	b.n	8006e2c <_dtoa_r+0x2fc>
 8006e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e46:	e7b8      	b.n	8006dba <_dtoa_r+0x28a>
 8006e48:	3101      	adds	r1, #1
 8006e4a:	6041      	str	r1, [r0, #4]
 8006e4c:	0052      	lsls	r2, r2, #1
 8006e4e:	e7b8      	b.n	8006dc2 <_dtoa_r+0x292>
 8006e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e52:	9a01      	ldr	r2, [sp, #4]
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	2b0e      	cmp	r3, #14
 8006e5a:	f200 809d 	bhi.w	8006f98 <_dtoa_r+0x468>
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	f000 809a 	beq.w	8006f98 <_dtoa_r+0x468>
 8006e64:	9b00      	ldr	r3, [sp, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	dd32      	ble.n	8006ed0 <_dtoa_r+0x3a0>
 8006e6a:	4ab7      	ldr	r2, [pc, #732]	; (8007148 <_dtoa_r+0x618>)
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e78:	9b00      	ldr	r3, [sp, #0]
 8006e7a:	05d8      	lsls	r0, r3, #23
 8006e7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006e80:	d516      	bpl.n	8006eb0 <_dtoa_r+0x380>
 8006e82:	4bb2      	ldr	r3, [pc, #712]	; (800714c <_dtoa_r+0x61c>)
 8006e84:	ec51 0b19 	vmov	r0, r1, d9
 8006e88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e8c:	f7f9 fcf6 	bl	800087c <__aeabi_ddiv>
 8006e90:	f007 070f 	and.w	r7, r7, #15
 8006e94:	4682      	mov	sl, r0
 8006e96:	468b      	mov	fp, r1
 8006e98:	2503      	movs	r5, #3
 8006e9a:	4eac      	ldr	r6, [pc, #688]	; (800714c <_dtoa_r+0x61c>)
 8006e9c:	b957      	cbnz	r7, 8006eb4 <_dtoa_r+0x384>
 8006e9e:	4642      	mov	r2, r8
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	4650      	mov	r0, sl
 8006ea4:	4659      	mov	r1, fp
 8006ea6:	f7f9 fce9 	bl	800087c <__aeabi_ddiv>
 8006eaa:	4682      	mov	sl, r0
 8006eac:	468b      	mov	fp, r1
 8006eae:	e028      	b.n	8006f02 <_dtoa_r+0x3d2>
 8006eb0:	2502      	movs	r5, #2
 8006eb2:	e7f2      	b.n	8006e9a <_dtoa_r+0x36a>
 8006eb4:	07f9      	lsls	r1, r7, #31
 8006eb6:	d508      	bpl.n	8006eca <_dtoa_r+0x39a>
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ec0:	f7f9 fbb2 	bl	8000628 <__aeabi_dmul>
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	4680      	mov	r8, r0
 8006ec8:	4689      	mov	r9, r1
 8006eca:	107f      	asrs	r7, r7, #1
 8006ecc:	3608      	adds	r6, #8
 8006ece:	e7e5      	b.n	8006e9c <_dtoa_r+0x36c>
 8006ed0:	f000 809b 	beq.w	800700a <_dtoa_r+0x4da>
 8006ed4:	9b00      	ldr	r3, [sp, #0]
 8006ed6:	4f9d      	ldr	r7, [pc, #628]	; (800714c <_dtoa_r+0x61c>)
 8006ed8:	425e      	negs	r6, r3
 8006eda:	4b9b      	ldr	r3, [pc, #620]	; (8007148 <_dtoa_r+0x618>)
 8006edc:	f006 020f 	and.w	r2, r6, #15
 8006ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	ec51 0b19 	vmov	r0, r1, d9
 8006eec:	f7f9 fb9c 	bl	8000628 <__aeabi_dmul>
 8006ef0:	1136      	asrs	r6, r6, #4
 8006ef2:	4682      	mov	sl, r0
 8006ef4:	468b      	mov	fp, r1
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2502      	movs	r5, #2
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	d17a      	bne.n	8006ff4 <_dtoa_r+0x4c4>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1d3      	bne.n	8006eaa <_dtoa_r+0x37a>
 8006f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8082 	beq.w	800700e <_dtoa_r+0x4de>
 8006f0a:	4b91      	ldr	r3, [pc, #580]	; (8007150 <_dtoa_r+0x620>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4650      	mov	r0, sl
 8006f10:	4659      	mov	r1, fp
 8006f12:	f7f9 fdfb 	bl	8000b0c <__aeabi_dcmplt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d079      	beq.n	800700e <_dtoa_r+0x4de>
 8006f1a:	9b03      	ldr	r3, [sp, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d076      	beq.n	800700e <_dtoa_r+0x4de>
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dd36      	ble.n	8006f94 <_dtoa_r+0x464>
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	4650      	mov	r0, sl
 8006f2a:	4659      	mov	r1, fp
 8006f2c:	1e5f      	subs	r7, r3, #1
 8006f2e:	2200      	movs	r2, #0
 8006f30:	4b88      	ldr	r3, [pc, #544]	; (8007154 <_dtoa_r+0x624>)
 8006f32:	f7f9 fb79 	bl	8000628 <__aeabi_dmul>
 8006f36:	9e02      	ldr	r6, [sp, #8]
 8006f38:	4682      	mov	sl, r0
 8006f3a:	468b      	mov	fp, r1
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	4628      	mov	r0, r5
 8006f40:	f7f9 fb08 	bl	8000554 <__aeabi_i2d>
 8006f44:	4652      	mov	r2, sl
 8006f46:	465b      	mov	r3, fp
 8006f48:	f7f9 fb6e 	bl	8000628 <__aeabi_dmul>
 8006f4c:	4b82      	ldr	r3, [pc, #520]	; (8007158 <_dtoa_r+0x628>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f7f9 f9b4 	bl	80002bc <__adddf3>
 8006f54:	46d0      	mov	r8, sl
 8006f56:	46d9      	mov	r9, fp
 8006f58:	4682      	mov	sl, r0
 8006f5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f5e:	2e00      	cmp	r6, #0
 8006f60:	d158      	bne.n	8007014 <_dtoa_r+0x4e4>
 8006f62:	4b7e      	ldr	r3, [pc, #504]	; (800715c <_dtoa_r+0x62c>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	f7f9 f9a5 	bl	80002b8 <__aeabi_dsub>
 8006f6e:	4652      	mov	r2, sl
 8006f70:	465b      	mov	r3, fp
 8006f72:	4680      	mov	r8, r0
 8006f74:	4689      	mov	r9, r1
 8006f76:	f7f9 fde7 	bl	8000b48 <__aeabi_dcmpgt>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f040 8295 	bne.w	80074aa <_dtoa_r+0x97a>
 8006f80:	4652      	mov	r2, sl
 8006f82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f86:	4640      	mov	r0, r8
 8006f88:	4649      	mov	r1, r9
 8006f8a:	f7f9 fdbf 	bl	8000b0c <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f040 8289 	bne.w	80074a6 <_dtoa_r+0x976>
 8006f94:	ec5b ab19 	vmov	sl, fp, d9
 8006f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f2c0 8148 	blt.w	8007230 <_dtoa_r+0x700>
 8006fa0:	9a00      	ldr	r2, [sp, #0]
 8006fa2:	2a0e      	cmp	r2, #14
 8006fa4:	f300 8144 	bgt.w	8007230 <_dtoa_r+0x700>
 8006fa8:	4b67      	ldr	r3, [pc, #412]	; (8007148 <_dtoa_r+0x618>)
 8006faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f280 80d5 	bge.w	8007164 <_dtoa_r+0x634>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f300 80d1 	bgt.w	8007164 <_dtoa_r+0x634>
 8006fc2:	f040 826f 	bne.w	80074a4 <_dtoa_r+0x974>
 8006fc6:	4b65      	ldr	r3, [pc, #404]	; (800715c <_dtoa_r+0x62c>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4640      	mov	r0, r8
 8006fcc:	4649      	mov	r1, r9
 8006fce:	f7f9 fb2b 	bl	8000628 <__aeabi_dmul>
 8006fd2:	4652      	mov	r2, sl
 8006fd4:	465b      	mov	r3, fp
 8006fd6:	f7f9 fdad 	bl	8000b34 <__aeabi_dcmpge>
 8006fda:	9e03      	ldr	r6, [sp, #12]
 8006fdc:	4637      	mov	r7, r6
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f040 8245 	bne.w	800746e <_dtoa_r+0x93e>
 8006fe4:	9d01      	ldr	r5, [sp, #4]
 8006fe6:	2331      	movs	r3, #49	; 0x31
 8006fe8:	f805 3b01 	strb.w	r3, [r5], #1
 8006fec:	9b00      	ldr	r3, [sp, #0]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	e240      	b.n	8007476 <_dtoa_r+0x946>
 8006ff4:	07f2      	lsls	r2, r6, #31
 8006ff6:	d505      	bpl.n	8007004 <_dtoa_r+0x4d4>
 8006ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffc:	f7f9 fb14 	bl	8000628 <__aeabi_dmul>
 8007000:	3501      	adds	r5, #1
 8007002:	2301      	movs	r3, #1
 8007004:	1076      	asrs	r6, r6, #1
 8007006:	3708      	adds	r7, #8
 8007008:	e777      	b.n	8006efa <_dtoa_r+0x3ca>
 800700a:	2502      	movs	r5, #2
 800700c:	e779      	b.n	8006f02 <_dtoa_r+0x3d2>
 800700e:	9f00      	ldr	r7, [sp, #0]
 8007010:	9e03      	ldr	r6, [sp, #12]
 8007012:	e794      	b.n	8006f3e <_dtoa_r+0x40e>
 8007014:	9901      	ldr	r1, [sp, #4]
 8007016:	4b4c      	ldr	r3, [pc, #304]	; (8007148 <_dtoa_r+0x618>)
 8007018:	4431      	add	r1, r6
 800701a:	910d      	str	r1, [sp, #52]	; 0x34
 800701c:	9908      	ldr	r1, [sp, #32]
 800701e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007026:	2900      	cmp	r1, #0
 8007028:	d043      	beq.n	80070b2 <_dtoa_r+0x582>
 800702a:	494d      	ldr	r1, [pc, #308]	; (8007160 <_dtoa_r+0x630>)
 800702c:	2000      	movs	r0, #0
 800702e:	f7f9 fc25 	bl	800087c <__aeabi_ddiv>
 8007032:	4652      	mov	r2, sl
 8007034:	465b      	mov	r3, fp
 8007036:	f7f9 f93f 	bl	80002b8 <__aeabi_dsub>
 800703a:	9d01      	ldr	r5, [sp, #4]
 800703c:	4682      	mov	sl, r0
 800703e:	468b      	mov	fp, r1
 8007040:	4649      	mov	r1, r9
 8007042:	4640      	mov	r0, r8
 8007044:	f7f9 fda0 	bl	8000b88 <__aeabi_d2iz>
 8007048:	4606      	mov	r6, r0
 800704a:	f7f9 fa83 	bl	8000554 <__aeabi_i2d>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	f7f9 f92f 	bl	80002b8 <__aeabi_dsub>
 800705a:	3630      	adds	r6, #48	; 0x30
 800705c:	f805 6b01 	strb.w	r6, [r5], #1
 8007060:	4652      	mov	r2, sl
 8007062:	465b      	mov	r3, fp
 8007064:	4680      	mov	r8, r0
 8007066:	4689      	mov	r9, r1
 8007068:	f7f9 fd50 	bl	8000b0c <__aeabi_dcmplt>
 800706c:	2800      	cmp	r0, #0
 800706e:	d163      	bne.n	8007138 <_dtoa_r+0x608>
 8007070:	4642      	mov	r2, r8
 8007072:	464b      	mov	r3, r9
 8007074:	4936      	ldr	r1, [pc, #216]	; (8007150 <_dtoa_r+0x620>)
 8007076:	2000      	movs	r0, #0
 8007078:	f7f9 f91e 	bl	80002b8 <__aeabi_dsub>
 800707c:	4652      	mov	r2, sl
 800707e:	465b      	mov	r3, fp
 8007080:	f7f9 fd44 	bl	8000b0c <__aeabi_dcmplt>
 8007084:	2800      	cmp	r0, #0
 8007086:	f040 80b5 	bne.w	80071f4 <_dtoa_r+0x6c4>
 800708a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800708c:	429d      	cmp	r5, r3
 800708e:	d081      	beq.n	8006f94 <_dtoa_r+0x464>
 8007090:	4b30      	ldr	r3, [pc, #192]	; (8007154 <_dtoa_r+0x624>)
 8007092:	2200      	movs	r2, #0
 8007094:	4650      	mov	r0, sl
 8007096:	4659      	mov	r1, fp
 8007098:	f7f9 fac6 	bl	8000628 <__aeabi_dmul>
 800709c:	4b2d      	ldr	r3, [pc, #180]	; (8007154 <_dtoa_r+0x624>)
 800709e:	4682      	mov	sl, r0
 80070a0:	468b      	mov	fp, r1
 80070a2:	4640      	mov	r0, r8
 80070a4:	4649      	mov	r1, r9
 80070a6:	2200      	movs	r2, #0
 80070a8:	f7f9 fabe 	bl	8000628 <__aeabi_dmul>
 80070ac:	4680      	mov	r8, r0
 80070ae:	4689      	mov	r9, r1
 80070b0:	e7c6      	b.n	8007040 <_dtoa_r+0x510>
 80070b2:	4650      	mov	r0, sl
 80070b4:	4659      	mov	r1, fp
 80070b6:	f7f9 fab7 	bl	8000628 <__aeabi_dmul>
 80070ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070bc:	9d01      	ldr	r5, [sp, #4]
 80070be:	930f      	str	r3, [sp, #60]	; 0x3c
 80070c0:	4682      	mov	sl, r0
 80070c2:	468b      	mov	fp, r1
 80070c4:	4649      	mov	r1, r9
 80070c6:	4640      	mov	r0, r8
 80070c8:	f7f9 fd5e 	bl	8000b88 <__aeabi_d2iz>
 80070cc:	4606      	mov	r6, r0
 80070ce:	f7f9 fa41 	bl	8000554 <__aeabi_i2d>
 80070d2:	3630      	adds	r6, #48	; 0x30
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4640      	mov	r0, r8
 80070da:	4649      	mov	r1, r9
 80070dc:	f7f9 f8ec 	bl	80002b8 <__aeabi_dsub>
 80070e0:	f805 6b01 	strb.w	r6, [r5], #1
 80070e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e6:	429d      	cmp	r5, r3
 80070e8:	4680      	mov	r8, r0
 80070ea:	4689      	mov	r9, r1
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	d124      	bne.n	800713c <_dtoa_r+0x60c>
 80070f2:	4b1b      	ldr	r3, [pc, #108]	; (8007160 <_dtoa_r+0x630>)
 80070f4:	4650      	mov	r0, sl
 80070f6:	4659      	mov	r1, fp
 80070f8:	f7f9 f8e0 	bl	80002bc <__adddf3>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4640      	mov	r0, r8
 8007102:	4649      	mov	r1, r9
 8007104:	f7f9 fd20 	bl	8000b48 <__aeabi_dcmpgt>
 8007108:	2800      	cmp	r0, #0
 800710a:	d173      	bne.n	80071f4 <_dtoa_r+0x6c4>
 800710c:	4652      	mov	r2, sl
 800710e:	465b      	mov	r3, fp
 8007110:	4913      	ldr	r1, [pc, #76]	; (8007160 <_dtoa_r+0x630>)
 8007112:	2000      	movs	r0, #0
 8007114:	f7f9 f8d0 	bl	80002b8 <__aeabi_dsub>
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 fcf4 	bl	8000b0c <__aeabi_dcmplt>
 8007124:	2800      	cmp	r0, #0
 8007126:	f43f af35 	beq.w	8006f94 <_dtoa_r+0x464>
 800712a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800712c:	1e6b      	subs	r3, r5, #1
 800712e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007130:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007134:	2b30      	cmp	r3, #48	; 0x30
 8007136:	d0f8      	beq.n	800712a <_dtoa_r+0x5fa>
 8007138:	9700      	str	r7, [sp, #0]
 800713a:	e049      	b.n	80071d0 <_dtoa_r+0x6a0>
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <_dtoa_r+0x624>)
 800713e:	f7f9 fa73 	bl	8000628 <__aeabi_dmul>
 8007142:	4680      	mov	r8, r0
 8007144:	4689      	mov	r9, r1
 8007146:	e7bd      	b.n	80070c4 <_dtoa_r+0x594>
 8007148:	0800a648 	.word	0x0800a648
 800714c:	0800a620 	.word	0x0800a620
 8007150:	3ff00000 	.word	0x3ff00000
 8007154:	40240000 	.word	0x40240000
 8007158:	401c0000 	.word	0x401c0000
 800715c:	40140000 	.word	0x40140000
 8007160:	3fe00000 	.word	0x3fe00000
 8007164:	9d01      	ldr	r5, [sp, #4]
 8007166:	4656      	mov	r6, sl
 8007168:	465f      	mov	r7, fp
 800716a:	4642      	mov	r2, r8
 800716c:	464b      	mov	r3, r9
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 fb83 	bl	800087c <__aeabi_ddiv>
 8007176:	f7f9 fd07 	bl	8000b88 <__aeabi_d2iz>
 800717a:	4682      	mov	sl, r0
 800717c:	f7f9 f9ea 	bl	8000554 <__aeabi_i2d>
 8007180:	4642      	mov	r2, r8
 8007182:	464b      	mov	r3, r9
 8007184:	f7f9 fa50 	bl	8000628 <__aeabi_dmul>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007194:	f7f9 f890 	bl	80002b8 <__aeabi_dsub>
 8007198:	f805 6b01 	strb.w	r6, [r5], #1
 800719c:	9e01      	ldr	r6, [sp, #4]
 800719e:	9f03      	ldr	r7, [sp, #12]
 80071a0:	1bae      	subs	r6, r5, r6
 80071a2:	42b7      	cmp	r7, r6
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	d135      	bne.n	8007216 <_dtoa_r+0x6e6>
 80071aa:	f7f9 f887 	bl	80002bc <__adddf3>
 80071ae:	4642      	mov	r2, r8
 80071b0:	464b      	mov	r3, r9
 80071b2:	4606      	mov	r6, r0
 80071b4:	460f      	mov	r7, r1
 80071b6:	f7f9 fcc7 	bl	8000b48 <__aeabi_dcmpgt>
 80071ba:	b9d0      	cbnz	r0, 80071f2 <_dtoa_r+0x6c2>
 80071bc:	4642      	mov	r2, r8
 80071be:	464b      	mov	r3, r9
 80071c0:	4630      	mov	r0, r6
 80071c2:	4639      	mov	r1, r7
 80071c4:	f7f9 fc98 	bl	8000af8 <__aeabi_dcmpeq>
 80071c8:	b110      	cbz	r0, 80071d0 <_dtoa_r+0x6a0>
 80071ca:	f01a 0f01 	tst.w	sl, #1
 80071ce:	d110      	bne.n	80071f2 <_dtoa_r+0x6c2>
 80071d0:	4620      	mov	r0, r4
 80071d2:	ee18 1a10 	vmov	r1, s16
 80071d6:	f000 fe87 	bl	8007ee8 <_Bfree>
 80071da:	2300      	movs	r3, #0
 80071dc:	9800      	ldr	r0, [sp, #0]
 80071de:	702b      	strb	r3, [r5, #0]
 80071e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071e2:	3001      	adds	r0, #1
 80071e4:	6018      	str	r0, [r3, #0]
 80071e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f43f acf1 	beq.w	8006bd0 <_dtoa_r+0xa0>
 80071ee:	601d      	str	r5, [r3, #0]
 80071f0:	e4ee      	b.n	8006bd0 <_dtoa_r+0xa0>
 80071f2:	9f00      	ldr	r7, [sp, #0]
 80071f4:	462b      	mov	r3, r5
 80071f6:	461d      	mov	r5, r3
 80071f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071fc:	2a39      	cmp	r2, #57	; 0x39
 80071fe:	d106      	bne.n	800720e <_dtoa_r+0x6de>
 8007200:	9a01      	ldr	r2, [sp, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d1f7      	bne.n	80071f6 <_dtoa_r+0x6c6>
 8007206:	9901      	ldr	r1, [sp, #4]
 8007208:	2230      	movs	r2, #48	; 0x30
 800720a:	3701      	adds	r7, #1
 800720c:	700a      	strb	r2, [r1, #0]
 800720e:	781a      	ldrb	r2, [r3, #0]
 8007210:	3201      	adds	r2, #1
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	e790      	b.n	8007138 <_dtoa_r+0x608>
 8007216:	4ba6      	ldr	r3, [pc, #664]	; (80074b0 <_dtoa_r+0x980>)
 8007218:	2200      	movs	r2, #0
 800721a:	f7f9 fa05 	bl	8000628 <__aeabi_dmul>
 800721e:	2200      	movs	r2, #0
 8007220:	2300      	movs	r3, #0
 8007222:	4606      	mov	r6, r0
 8007224:	460f      	mov	r7, r1
 8007226:	f7f9 fc67 	bl	8000af8 <__aeabi_dcmpeq>
 800722a:	2800      	cmp	r0, #0
 800722c:	d09d      	beq.n	800716a <_dtoa_r+0x63a>
 800722e:	e7cf      	b.n	80071d0 <_dtoa_r+0x6a0>
 8007230:	9a08      	ldr	r2, [sp, #32]
 8007232:	2a00      	cmp	r2, #0
 8007234:	f000 80d7 	beq.w	80073e6 <_dtoa_r+0x8b6>
 8007238:	9a06      	ldr	r2, [sp, #24]
 800723a:	2a01      	cmp	r2, #1
 800723c:	f300 80ba 	bgt.w	80073b4 <_dtoa_r+0x884>
 8007240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007242:	2a00      	cmp	r2, #0
 8007244:	f000 80b2 	beq.w	80073ac <_dtoa_r+0x87c>
 8007248:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800724c:	9e07      	ldr	r6, [sp, #28]
 800724e:	9d04      	ldr	r5, [sp, #16]
 8007250:	9a04      	ldr	r2, [sp, #16]
 8007252:	441a      	add	r2, r3
 8007254:	9204      	str	r2, [sp, #16]
 8007256:	9a05      	ldr	r2, [sp, #20]
 8007258:	2101      	movs	r1, #1
 800725a:	441a      	add	r2, r3
 800725c:	4620      	mov	r0, r4
 800725e:	9205      	str	r2, [sp, #20]
 8007260:	f000 ff44 	bl	80080ec <__i2b>
 8007264:	4607      	mov	r7, r0
 8007266:	2d00      	cmp	r5, #0
 8007268:	dd0c      	ble.n	8007284 <_dtoa_r+0x754>
 800726a:	9b05      	ldr	r3, [sp, #20]
 800726c:	2b00      	cmp	r3, #0
 800726e:	dd09      	ble.n	8007284 <_dtoa_r+0x754>
 8007270:	42ab      	cmp	r3, r5
 8007272:	9a04      	ldr	r2, [sp, #16]
 8007274:	bfa8      	it	ge
 8007276:	462b      	movge	r3, r5
 8007278:	1ad2      	subs	r2, r2, r3
 800727a:	9204      	str	r2, [sp, #16]
 800727c:	9a05      	ldr	r2, [sp, #20]
 800727e:	1aed      	subs	r5, r5, r3
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	9b07      	ldr	r3, [sp, #28]
 8007286:	b31b      	cbz	r3, 80072d0 <_dtoa_r+0x7a0>
 8007288:	9b08      	ldr	r3, [sp, #32]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 80af 	beq.w	80073ee <_dtoa_r+0x8be>
 8007290:	2e00      	cmp	r6, #0
 8007292:	dd13      	ble.n	80072bc <_dtoa_r+0x78c>
 8007294:	4639      	mov	r1, r7
 8007296:	4632      	mov	r2, r6
 8007298:	4620      	mov	r0, r4
 800729a:	f000 ffe7 	bl	800826c <__pow5mult>
 800729e:	ee18 2a10 	vmov	r2, s16
 80072a2:	4601      	mov	r1, r0
 80072a4:	4607      	mov	r7, r0
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 ff36 	bl	8008118 <__multiply>
 80072ac:	ee18 1a10 	vmov	r1, s16
 80072b0:	4680      	mov	r8, r0
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 fe18 	bl	8007ee8 <_Bfree>
 80072b8:	ee08 8a10 	vmov	s16, r8
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	1b9a      	subs	r2, r3, r6
 80072c0:	d006      	beq.n	80072d0 <_dtoa_r+0x7a0>
 80072c2:	ee18 1a10 	vmov	r1, s16
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 ffd0 	bl	800826c <__pow5mult>
 80072cc:	ee08 0a10 	vmov	s16, r0
 80072d0:	2101      	movs	r1, #1
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 ff0a 	bl	80080ec <__i2b>
 80072d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	4606      	mov	r6, r0
 80072de:	f340 8088 	ble.w	80073f2 <_dtoa_r+0x8c2>
 80072e2:	461a      	mov	r2, r3
 80072e4:	4601      	mov	r1, r0
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 ffc0 	bl	800826c <__pow5mult>
 80072ec:	9b06      	ldr	r3, [sp, #24]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	4606      	mov	r6, r0
 80072f2:	f340 8081 	ble.w	80073f8 <_dtoa_r+0x8c8>
 80072f6:	f04f 0800 	mov.w	r8, #0
 80072fa:	6933      	ldr	r3, [r6, #16]
 80072fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007300:	6918      	ldr	r0, [r3, #16]
 8007302:	f000 fea3 	bl	800804c <__hi0bits>
 8007306:	f1c0 0020 	rsb	r0, r0, #32
 800730a:	9b05      	ldr	r3, [sp, #20]
 800730c:	4418      	add	r0, r3
 800730e:	f010 001f 	ands.w	r0, r0, #31
 8007312:	f000 8092 	beq.w	800743a <_dtoa_r+0x90a>
 8007316:	f1c0 0320 	rsb	r3, r0, #32
 800731a:	2b04      	cmp	r3, #4
 800731c:	f340 808a 	ble.w	8007434 <_dtoa_r+0x904>
 8007320:	f1c0 001c 	rsb	r0, r0, #28
 8007324:	9b04      	ldr	r3, [sp, #16]
 8007326:	4403      	add	r3, r0
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	4403      	add	r3, r0
 800732e:	4405      	add	r5, r0
 8007330:	9305      	str	r3, [sp, #20]
 8007332:	9b04      	ldr	r3, [sp, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	dd07      	ble.n	8007348 <_dtoa_r+0x818>
 8007338:	ee18 1a10 	vmov	r1, s16
 800733c:	461a      	mov	r2, r3
 800733e:	4620      	mov	r0, r4
 8007340:	f000 ffee 	bl	8008320 <__lshift>
 8007344:	ee08 0a10 	vmov	s16, r0
 8007348:	9b05      	ldr	r3, [sp, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dd05      	ble.n	800735a <_dtoa_r+0x82a>
 800734e:	4631      	mov	r1, r6
 8007350:	461a      	mov	r2, r3
 8007352:	4620      	mov	r0, r4
 8007354:	f000 ffe4 	bl	8008320 <__lshift>
 8007358:	4606      	mov	r6, r0
 800735a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d06e      	beq.n	800743e <_dtoa_r+0x90e>
 8007360:	ee18 0a10 	vmov	r0, s16
 8007364:	4631      	mov	r1, r6
 8007366:	f001 f84b 	bl	8008400 <__mcmp>
 800736a:	2800      	cmp	r0, #0
 800736c:	da67      	bge.n	800743e <_dtoa_r+0x90e>
 800736e:	9b00      	ldr	r3, [sp, #0]
 8007370:	3b01      	subs	r3, #1
 8007372:	ee18 1a10 	vmov	r1, s16
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	220a      	movs	r2, #10
 800737a:	2300      	movs	r3, #0
 800737c:	4620      	mov	r0, r4
 800737e:	f000 fdd5 	bl	8007f2c <__multadd>
 8007382:	9b08      	ldr	r3, [sp, #32]
 8007384:	ee08 0a10 	vmov	s16, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 81b1 	beq.w	80076f0 <_dtoa_r+0xbc0>
 800738e:	2300      	movs	r3, #0
 8007390:	4639      	mov	r1, r7
 8007392:	220a      	movs	r2, #10
 8007394:	4620      	mov	r0, r4
 8007396:	f000 fdc9 	bl	8007f2c <__multadd>
 800739a:	9b02      	ldr	r3, [sp, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	4607      	mov	r7, r0
 80073a0:	f300 808e 	bgt.w	80074c0 <_dtoa_r+0x990>
 80073a4:	9b06      	ldr	r3, [sp, #24]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	dc51      	bgt.n	800744e <_dtoa_r+0x91e>
 80073aa:	e089      	b.n	80074c0 <_dtoa_r+0x990>
 80073ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073b2:	e74b      	b.n	800724c <_dtoa_r+0x71c>
 80073b4:	9b03      	ldr	r3, [sp, #12]
 80073b6:	1e5e      	subs	r6, r3, #1
 80073b8:	9b07      	ldr	r3, [sp, #28]
 80073ba:	42b3      	cmp	r3, r6
 80073bc:	bfbf      	itttt	lt
 80073be:	9b07      	ldrlt	r3, [sp, #28]
 80073c0:	9607      	strlt	r6, [sp, #28]
 80073c2:	1af2      	sublt	r2, r6, r3
 80073c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073c6:	bfb6      	itet	lt
 80073c8:	189b      	addlt	r3, r3, r2
 80073ca:	1b9e      	subge	r6, r3, r6
 80073cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	bfb8      	it	lt
 80073d2:	2600      	movlt	r6, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bfb7      	itett	lt
 80073d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80073dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80073e0:	1a9d      	sublt	r5, r3, r2
 80073e2:	2300      	movlt	r3, #0
 80073e4:	e734      	b.n	8007250 <_dtoa_r+0x720>
 80073e6:	9e07      	ldr	r6, [sp, #28]
 80073e8:	9d04      	ldr	r5, [sp, #16]
 80073ea:	9f08      	ldr	r7, [sp, #32]
 80073ec:	e73b      	b.n	8007266 <_dtoa_r+0x736>
 80073ee:	9a07      	ldr	r2, [sp, #28]
 80073f0:	e767      	b.n	80072c2 <_dtoa_r+0x792>
 80073f2:	9b06      	ldr	r3, [sp, #24]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	dc18      	bgt.n	800742a <_dtoa_r+0x8fa>
 80073f8:	f1ba 0f00 	cmp.w	sl, #0
 80073fc:	d115      	bne.n	800742a <_dtoa_r+0x8fa>
 80073fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007402:	b993      	cbnz	r3, 800742a <_dtoa_r+0x8fa>
 8007404:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007408:	0d1b      	lsrs	r3, r3, #20
 800740a:	051b      	lsls	r3, r3, #20
 800740c:	b183      	cbz	r3, 8007430 <_dtoa_r+0x900>
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	3301      	adds	r3, #1
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	9b05      	ldr	r3, [sp, #20]
 8007416:	3301      	adds	r3, #1
 8007418:	9305      	str	r3, [sp, #20]
 800741a:	f04f 0801 	mov.w	r8, #1
 800741e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007420:	2b00      	cmp	r3, #0
 8007422:	f47f af6a 	bne.w	80072fa <_dtoa_r+0x7ca>
 8007426:	2001      	movs	r0, #1
 8007428:	e76f      	b.n	800730a <_dtoa_r+0x7da>
 800742a:	f04f 0800 	mov.w	r8, #0
 800742e:	e7f6      	b.n	800741e <_dtoa_r+0x8ee>
 8007430:	4698      	mov	r8, r3
 8007432:	e7f4      	b.n	800741e <_dtoa_r+0x8ee>
 8007434:	f43f af7d 	beq.w	8007332 <_dtoa_r+0x802>
 8007438:	4618      	mov	r0, r3
 800743a:	301c      	adds	r0, #28
 800743c:	e772      	b.n	8007324 <_dtoa_r+0x7f4>
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	dc37      	bgt.n	80074b4 <_dtoa_r+0x984>
 8007444:	9b06      	ldr	r3, [sp, #24]
 8007446:	2b02      	cmp	r3, #2
 8007448:	dd34      	ble.n	80074b4 <_dtoa_r+0x984>
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	9302      	str	r3, [sp, #8]
 800744e:	9b02      	ldr	r3, [sp, #8]
 8007450:	b96b      	cbnz	r3, 800746e <_dtoa_r+0x93e>
 8007452:	4631      	mov	r1, r6
 8007454:	2205      	movs	r2, #5
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fd68 	bl	8007f2c <__multadd>
 800745c:	4601      	mov	r1, r0
 800745e:	4606      	mov	r6, r0
 8007460:	ee18 0a10 	vmov	r0, s16
 8007464:	f000 ffcc 	bl	8008400 <__mcmp>
 8007468:	2800      	cmp	r0, #0
 800746a:	f73f adbb 	bgt.w	8006fe4 <_dtoa_r+0x4b4>
 800746e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007470:	9d01      	ldr	r5, [sp, #4]
 8007472:	43db      	mvns	r3, r3
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	4631      	mov	r1, r6
 800747c:	4620      	mov	r0, r4
 800747e:	f000 fd33 	bl	8007ee8 <_Bfree>
 8007482:	2f00      	cmp	r7, #0
 8007484:	f43f aea4 	beq.w	80071d0 <_dtoa_r+0x6a0>
 8007488:	f1b8 0f00 	cmp.w	r8, #0
 800748c:	d005      	beq.n	800749a <_dtoa_r+0x96a>
 800748e:	45b8      	cmp	r8, r7
 8007490:	d003      	beq.n	800749a <_dtoa_r+0x96a>
 8007492:	4641      	mov	r1, r8
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fd27 	bl	8007ee8 <_Bfree>
 800749a:	4639      	mov	r1, r7
 800749c:	4620      	mov	r0, r4
 800749e:	f000 fd23 	bl	8007ee8 <_Bfree>
 80074a2:	e695      	b.n	80071d0 <_dtoa_r+0x6a0>
 80074a4:	2600      	movs	r6, #0
 80074a6:	4637      	mov	r7, r6
 80074a8:	e7e1      	b.n	800746e <_dtoa_r+0x93e>
 80074aa:	9700      	str	r7, [sp, #0]
 80074ac:	4637      	mov	r7, r6
 80074ae:	e599      	b.n	8006fe4 <_dtoa_r+0x4b4>
 80074b0:	40240000 	.word	0x40240000
 80074b4:	9b08      	ldr	r3, [sp, #32]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 80ca 	beq.w	8007650 <_dtoa_r+0xb20>
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	9302      	str	r3, [sp, #8]
 80074c0:	2d00      	cmp	r5, #0
 80074c2:	dd05      	ble.n	80074d0 <_dtoa_r+0x9a0>
 80074c4:	4639      	mov	r1, r7
 80074c6:	462a      	mov	r2, r5
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 ff29 	bl	8008320 <__lshift>
 80074ce:	4607      	mov	r7, r0
 80074d0:	f1b8 0f00 	cmp.w	r8, #0
 80074d4:	d05b      	beq.n	800758e <_dtoa_r+0xa5e>
 80074d6:	6879      	ldr	r1, [r7, #4]
 80074d8:	4620      	mov	r0, r4
 80074da:	f000 fcc5 	bl	8007e68 <_Balloc>
 80074de:	4605      	mov	r5, r0
 80074e0:	b928      	cbnz	r0, 80074ee <_dtoa_r+0x9be>
 80074e2:	4b87      	ldr	r3, [pc, #540]	; (8007700 <_dtoa_r+0xbd0>)
 80074e4:	4602      	mov	r2, r0
 80074e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80074ea:	f7ff bb3b 	b.w	8006b64 <_dtoa_r+0x34>
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	3202      	adds	r2, #2
 80074f2:	0092      	lsls	r2, r2, #2
 80074f4:	f107 010c 	add.w	r1, r7, #12
 80074f8:	300c      	adds	r0, #12
 80074fa:	f000 fca7 	bl	8007e4c <memcpy>
 80074fe:	2201      	movs	r2, #1
 8007500:	4629      	mov	r1, r5
 8007502:	4620      	mov	r0, r4
 8007504:	f000 ff0c 	bl	8008320 <__lshift>
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	f103 0901 	add.w	r9, r3, #1
 800750e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007512:	4413      	add	r3, r2
 8007514:	9305      	str	r3, [sp, #20]
 8007516:	f00a 0301 	and.w	r3, sl, #1
 800751a:	46b8      	mov	r8, r7
 800751c:	9304      	str	r3, [sp, #16]
 800751e:	4607      	mov	r7, r0
 8007520:	4631      	mov	r1, r6
 8007522:	ee18 0a10 	vmov	r0, s16
 8007526:	f7ff fa75 	bl	8006a14 <quorem>
 800752a:	4641      	mov	r1, r8
 800752c:	9002      	str	r0, [sp, #8]
 800752e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007532:	ee18 0a10 	vmov	r0, s16
 8007536:	f000 ff63 	bl	8008400 <__mcmp>
 800753a:	463a      	mov	r2, r7
 800753c:	9003      	str	r0, [sp, #12]
 800753e:	4631      	mov	r1, r6
 8007540:	4620      	mov	r0, r4
 8007542:	f000 ff79 	bl	8008438 <__mdiff>
 8007546:	68c2      	ldr	r2, [r0, #12]
 8007548:	f109 3bff 	add.w	fp, r9, #4294967295
 800754c:	4605      	mov	r5, r0
 800754e:	bb02      	cbnz	r2, 8007592 <_dtoa_r+0xa62>
 8007550:	4601      	mov	r1, r0
 8007552:	ee18 0a10 	vmov	r0, s16
 8007556:	f000 ff53 	bl	8008400 <__mcmp>
 800755a:	4602      	mov	r2, r0
 800755c:	4629      	mov	r1, r5
 800755e:	4620      	mov	r0, r4
 8007560:	9207      	str	r2, [sp, #28]
 8007562:	f000 fcc1 	bl	8007ee8 <_Bfree>
 8007566:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800756a:	ea43 0102 	orr.w	r1, r3, r2
 800756e:	9b04      	ldr	r3, [sp, #16]
 8007570:	430b      	orrs	r3, r1
 8007572:	464d      	mov	r5, r9
 8007574:	d10f      	bne.n	8007596 <_dtoa_r+0xa66>
 8007576:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800757a:	d02a      	beq.n	80075d2 <_dtoa_r+0xaa2>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	dd02      	ble.n	8007588 <_dtoa_r+0xa58>
 8007582:	9b02      	ldr	r3, [sp, #8]
 8007584:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007588:	f88b a000 	strb.w	sl, [fp]
 800758c:	e775      	b.n	800747a <_dtoa_r+0x94a>
 800758e:	4638      	mov	r0, r7
 8007590:	e7ba      	b.n	8007508 <_dtoa_r+0x9d8>
 8007592:	2201      	movs	r2, #1
 8007594:	e7e2      	b.n	800755c <_dtoa_r+0xa2c>
 8007596:	9b03      	ldr	r3, [sp, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	db04      	blt.n	80075a6 <_dtoa_r+0xa76>
 800759c:	9906      	ldr	r1, [sp, #24]
 800759e:	430b      	orrs	r3, r1
 80075a0:	9904      	ldr	r1, [sp, #16]
 80075a2:	430b      	orrs	r3, r1
 80075a4:	d122      	bne.n	80075ec <_dtoa_r+0xabc>
 80075a6:	2a00      	cmp	r2, #0
 80075a8:	ddee      	ble.n	8007588 <_dtoa_r+0xa58>
 80075aa:	ee18 1a10 	vmov	r1, s16
 80075ae:	2201      	movs	r2, #1
 80075b0:	4620      	mov	r0, r4
 80075b2:	f000 feb5 	bl	8008320 <__lshift>
 80075b6:	4631      	mov	r1, r6
 80075b8:	ee08 0a10 	vmov	s16, r0
 80075bc:	f000 ff20 	bl	8008400 <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dc03      	bgt.n	80075cc <_dtoa_r+0xa9c>
 80075c4:	d1e0      	bne.n	8007588 <_dtoa_r+0xa58>
 80075c6:	f01a 0f01 	tst.w	sl, #1
 80075ca:	d0dd      	beq.n	8007588 <_dtoa_r+0xa58>
 80075cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075d0:	d1d7      	bne.n	8007582 <_dtoa_r+0xa52>
 80075d2:	2339      	movs	r3, #57	; 0x39
 80075d4:	f88b 3000 	strb.w	r3, [fp]
 80075d8:	462b      	mov	r3, r5
 80075da:	461d      	mov	r5, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075e2:	2a39      	cmp	r2, #57	; 0x39
 80075e4:	d071      	beq.n	80076ca <_dtoa_r+0xb9a>
 80075e6:	3201      	adds	r2, #1
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	e746      	b.n	800747a <_dtoa_r+0x94a>
 80075ec:	2a00      	cmp	r2, #0
 80075ee:	dd07      	ble.n	8007600 <_dtoa_r+0xad0>
 80075f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075f4:	d0ed      	beq.n	80075d2 <_dtoa_r+0xaa2>
 80075f6:	f10a 0301 	add.w	r3, sl, #1
 80075fa:	f88b 3000 	strb.w	r3, [fp]
 80075fe:	e73c      	b.n	800747a <_dtoa_r+0x94a>
 8007600:	9b05      	ldr	r3, [sp, #20]
 8007602:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007606:	4599      	cmp	r9, r3
 8007608:	d047      	beq.n	800769a <_dtoa_r+0xb6a>
 800760a:	ee18 1a10 	vmov	r1, s16
 800760e:	2300      	movs	r3, #0
 8007610:	220a      	movs	r2, #10
 8007612:	4620      	mov	r0, r4
 8007614:	f000 fc8a 	bl	8007f2c <__multadd>
 8007618:	45b8      	cmp	r8, r7
 800761a:	ee08 0a10 	vmov	s16, r0
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	f04f 020a 	mov.w	r2, #10
 8007626:	4641      	mov	r1, r8
 8007628:	4620      	mov	r0, r4
 800762a:	d106      	bne.n	800763a <_dtoa_r+0xb0a>
 800762c:	f000 fc7e 	bl	8007f2c <__multadd>
 8007630:	4680      	mov	r8, r0
 8007632:	4607      	mov	r7, r0
 8007634:	f109 0901 	add.w	r9, r9, #1
 8007638:	e772      	b.n	8007520 <_dtoa_r+0x9f0>
 800763a:	f000 fc77 	bl	8007f2c <__multadd>
 800763e:	4639      	mov	r1, r7
 8007640:	4680      	mov	r8, r0
 8007642:	2300      	movs	r3, #0
 8007644:	220a      	movs	r2, #10
 8007646:	4620      	mov	r0, r4
 8007648:	f000 fc70 	bl	8007f2c <__multadd>
 800764c:	4607      	mov	r7, r0
 800764e:	e7f1      	b.n	8007634 <_dtoa_r+0xb04>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	9302      	str	r3, [sp, #8]
 8007654:	9d01      	ldr	r5, [sp, #4]
 8007656:	ee18 0a10 	vmov	r0, s16
 800765a:	4631      	mov	r1, r6
 800765c:	f7ff f9da 	bl	8006a14 <quorem>
 8007660:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007664:	9b01      	ldr	r3, [sp, #4]
 8007666:	f805 ab01 	strb.w	sl, [r5], #1
 800766a:	1aea      	subs	r2, r5, r3
 800766c:	9b02      	ldr	r3, [sp, #8]
 800766e:	4293      	cmp	r3, r2
 8007670:	dd09      	ble.n	8007686 <_dtoa_r+0xb56>
 8007672:	ee18 1a10 	vmov	r1, s16
 8007676:	2300      	movs	r3, #0
 8007678:	220a      	movs	r2, #10
 800767a:	4620      	mov	r0, r4
 800767c:	f000 fc56 	bl	8007f2c <__multadd>
 8007680:	ee08 0a10 	vmov	s16, r0
 8007684:	e7e7      	b.n	8007656 <_dtoa_r+0xb26>
 8007686:	9b02      	ldr	r3, [sp, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	bfc8      	it	gt
 800768c:	461d      	movgt	r5, r3
 800768e:	9b01      	ldr	r3, [sp, #4]
 8007690:	bfd8      	it	le
 8007692:	2501      	movle	r5, #1
 8007694:	441d      	add	r5, r3
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	ee18 1a10 	vmov	r1, s16
 800769e:	2201      	movs	r2, #1
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 fe3d 	bl	8008320 <__lshift>
 80076a6:	4631      	mov	r1, r6
 80076a8:	ee08 0a10 	vmov	s16, r0
 80076ac:	f000 fea8 	bl	8008400 <__mcmp>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	dc91      	bgt.n	80075d8 <_dtoa_r+0xaa8>
 80076b4:	d102      	bne.n	80076bc <_dtoa_r+0xb8c>
 80076b6:	f01a 0f01 	tst.w	sl, #1
 80076ba:	d18d      	bne.n	80075d8 <_dtoa_r+0xaa8>
 80076bc:	462b      	mov	r3, r5
 80076be:	461d      	mov	r5, r3
 80076c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076c4:	2a30      	cmp	r2, #48	; 0x30
 80076c6:	d0fa      	beq.n	80076be <_dtoa_r+0xb8e>
 80076c8:	e6d7      	b.n	800747a <_dtoa_r+0x94a>
 80076ca:	9a01      	ldr	r2, [sp, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d184      	bne.n	80075da <_dtoa_r+0xaaa>
 80076d0:	9b00      	ldr	r3, [sp, #0]
 80076d2:	3301      	adds	r3, #1
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	2331      	movs	r3, #49	; 0x31
 80076d8:	7013      	strb	r3, [r2, #0]
 80076da:	e6ce      	b.n	800747a <_dtoa_r+0x94a>
 80076dc:	4b09      	ldr	r3, [pc, #36]	; (8007704 <_dtoa_r+0xbd4>)
 80076de:	f7ff ba95 	b.w	8006c0c <_dtoa_r+0xdc>
 80076e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f47f aa6e 	bne.w	8006bc6 <_dtoa_r+0x96>
 80076ea:	4b07      	ldr	r3, [pc, #28]	; (8007708 <_dtoa_r+0xbd8>)
 80076ec:	f7ff ba8e 	b.w	8006c0c <_dtoa_r+0xdc>
 80076f0:	9b02      	ldr	r3, [sp, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dcae      	bgt.n	8007654 <_dtoa_r+0xb24>
 80076f6:	9b06      	ldr	r3, [sp, #24]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	f73f aea8 	bgt.w	800744e <_dtoa_r+0x91e>
 80076fe:	e7a9      	b.n	8007654 <_dtoa_r+0xb24>
 8007700:	0800a538 	.word	0x0800a538
 8007704:	0800a731 	.word	0x0800a731
 8007708:	0800a4b9 	.word	0x0800a4b9

0800770c <rshift>:
 800770c:	6903      	ldr	r3, [r0, #16]
 800770e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007716:	ea4f 1261 	mov.w	r2, r1, asr #5
 800771a:	f100 0414 	add.w	r4, r0, #20
 800771e:	dd45      	ble.n	80077ac <rshift+0xa0>
 8007720:	f011 011f 	ands.w	r1, r1, #31
 8007724:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007728:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800772c:	d10c      	bne.n	8007748 <rshift+0x3c>
 800772e:	f100 0710 	add.w	r7, r0, #16
 8007732:	4629      	mov	r1, r5
 8007734:	42b1      	cmp	r1, r6
 8007736:	d334      	bcc.n	80077a2 <rshift+0x96>
 8007738:	1a9b      	subs	r3, r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	1eea      	subs	r2, r5, #3
 800773e:	4296      	cmp	r6, r2
 8007740:	bf38      	it	cc
 8007742:	2300      	movcc	r3, #0
 8007744:	4423      	add	r3, r4
 8007746:	e015      	b.n	8007774 <rshift+0x68>
 8007748:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800774c:	f1c1 0820 	rsb	r8, r1, #32
 8007750:	40cf      	lsrs	r7, r1
 8007752:	f105 0e04 	add.w	lr, r5, #4
 8007756:	46a1      	mov	r9, r4
 8007758:	4576      	cmp	r6, lr
 800775a:	46f4      	mov	ip, lr
 800775c:	d815      	bhi.n	800778a <rshift+0x7e>
 800775e:	1a9a      	subs	r2, r3, r2
 8007760:	0092      	lsls	r2, r2, #2
 8007762:	3a04      	subs	r2, #4
 8007764:	3501      	adds	r5, #1
 8007766:	42ae      	cmp	r6, r5
 8007768:	bf38      	it	cc
 800776a:	2200      	movcc	r2, #0
 800776c:	18a3      	adds	r3, r4, r2
 800776e:	50a7      	str	r7, [r4, r2]
 8007770:	b107      	cbz	r7, 8007774 <rshift+0x68>
 8007772:	3304      	adds	r3, #4
 8007774:	1b1a      	subs	r2, r3, r4
 8007776:	42a3      	cmp	r3, r4
 8007778:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800777c:	bf08      	it	eq
 800777e:	2300      	moveq	r3, #0
 8007780:	6102      	str	r2, [r0, #16]
 8007782:	bf08      	it	eq
 8007784:	6143      	streq	r3, [r0, #20]
 8007786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800778a:	f8dc c000 	ldr.w	ip, [ip]
 800778e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007792:	ea4c 0707 	orr.w	r7, ip, r7
 8007796:	f849 7b04 	str.w	r7, [r9], #4
 800779a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800779e:	40cf      	lsrs	r7, r1
 80077a0:	e7da      	b.n	8007758 <rshift+0x4c>
 80077a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80077a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80077aa:	e7c3      	b.n	8007734 <rshift+0x28>
 80077ac:	4623      	mov	r3, r4
 80077ae:	e7e1      	b.n	8007774 <rshift+0x68>

080077b0 <__hexdig_fun>:
 80077b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80077b4:	2b09      	cmp	r3, #9
 80077b6:	d802      	bhi.n	80077be <__hexdig_fun+0xe>
 80077b8:	3820      	subs	r0, #32
 80077ba:	b2c0      	uxtb	r0, r0
 80077bc:	4770      	bx	lr
 80077be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80077c2:	2b05      	cmp	r3, #5
 80077c4:	d801      	bhi.n	80077ca <__hexdig_fun+0x1a>
 80077c6:	3847      	subs	r0, #71	; 0x47
 80077c8:	e7f7      	b.n	80077ba <__hexdig_fun+0xa>
 80077ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	d801      	bhi.n	80077d6 <__hexdig_fun+0x26>
 80077d2:	3827      	subs	r0, #39	; 0x27
 80077d4:	e7f1      	b.n	80077ba <__hexdig_fun+0xa>
 80077d6:	2000      	movs	r0, #0
 80077d8:	4770      	bx	lr
	...

080077dc <__gethex>:
 80077dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e0:	ed2d 8b02 	vpush	{d8}
 80077e4:	b089      	sub	sp, #36	; 0x24
 80077e6:	ee08 0a10 	vmov	s16, r0
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	4bb4      	ldr	r3, [pc, #720]	; (8007ac0 <__gethex+0x2e4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	4618      	mov	r0, r3
 80077f4:	468b      	mov	fp, r1
 80077f6:	4690      	mov	r8, r2
 80077f8:	f7f8 fcfc 	bl	80001f4 <strlen>
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	f8db 2000 	ldr.w	r2, [fp]
 8007802:	4403      	add	r3, r0
 8007804:	4682      	mov	sl, r0
 8007806:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800780a:	9305      	str	r3, [sp, #20]
 800780c:	1c93      	adds	r3, r2, #2
 800780e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007812:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007816:	32fe      	adds	r2, #254	; 0xfe
 8007818:	18d1      	adds	r1, r2, r3
 800781a:	461f      	mov	r7, r3
 800781c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007820:	9100      	str	r1, [sp, #0]
 8007822:	2830      	cmp	r0, #48	; 0x30
 8007824:	d0f8      	beq.n	8007818 <__gethex+0x3c>
 8007826:	f7ff ffc3 	bl	80077b0 <__hexdig_fun>
 800782a:	4604      	mov	r4, r0
 800782c:	2800      	cmp	r0, #0
 800782e:	d13a      	bne.n	80078a6 <__gethex+0xca>
 8007830:	9901      	ldr	r1, [sp, #4]
 8007832:	4652      	mov	r2, sl
 8007834:	4638      	mov	r0, r7
 8007836:	f001 fdb3 	bl	80093a0 <strncmp>
 800783a:	4605      	mov	r5, r0
 800783c:	2800      	cmp	r0, #0
 800783e:	d168      	bne.n	8007912 <__gethex+0x136>
 8007840:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007844:	eb07 060a 	add.w	r6, r7, sl
 8007848:	f7ff ffb2 	bl	80077b0 <__hexdig_fun>
 800784c:	2800      	cmp	r0, #0
 800784e:	d062      	beq.n	8007916 <__gethex+0x13a>
 8007850:	4633      	mov	r3, r6
 8007852:	7818      	ldrb	r0, [r3, #0]
 8007854:	2830      	cmp	r0, #48	; 0x30
 8007856:	461f      	mov	r7, r3
 8007858:	f103 0301 	add.w	r3, r3, #1
 800785c:	d0f9      	beq.n	8007852 <__gethex+0x76>
 800785e:	f7ff ffa7 	bl	80077b0 <__hexdig_fun>
 8007862:	2301      	movs	r3, #1
 8007864:	fab0 f480 	clz	r4, r0
 8007868:	0964      	lsrs	r4, r4, #5
 800786a:	4635      	mov	r5, r6
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	463a      	mov	r2, r7
 8007870:	4616      	mov	r6, r2
 8007872:	3201      	adds	r2, #1
 8007874:	7830      	ldrb	r0, [r6, #0]
 8007876:	f7ff ff9b 	bl	80077b0 <__hexdig_fun>
 800787a:	2800      	cmp	r0, #0
 800787c:	d1f8      	bne.n	8007870 <__gethex+0x94>
 800787e:	9901      	ldr	r1, [sp, #4]
 8007880:	4652      	mov	r2, sl
 8007882:	4630      	mov	r0, r6
 8007884:	f001 fd8c 	bl	80093a0 <strncmp>
 8007888:	b980      	cbnz	r0, 80078ac <__gethex+0xd0>
 800788a:	b94d      	cbnz	r5, 80078a0 <__gethex+0xc4>
 800788c:	eb06 050a 	add.w	r5, r6, sl
 8007890:	462a      	mov	r2, r5
 8007892:	4616      	mov	r6, r2
 8007894:	3201      	adds	r2, #1
 8007896:	7830      	ldrb	r0, [r6, #0]
 8007898:	f7ff ff8a 	bl	80077b0 <__hexdig_fun>
 800789c:	2800      	cmp	r0, #0
 800789e:	d1f8      	bne.n	8007892 <__gethex+0xb6>
 80078a0:	1bad      	subs	r5, r5, r6
 80078a2:	00ad      	lsls	r5, r5, #2
 80078a4:	e004      	b.n	80078b0 <__gethex+0xd4>
 80078a6:	2400      	movs	r4, #0
 80078a8:	4625      	mov	r5, r4
 80078aa:	e7e0      	b.n	800786e <__gethex+0x92>
 80078ac:	2d00      	cmp	r5, #0
 80078ae:	d1f7      	bne.n	80078a0 <__gethex+0xc4>
 80078b0:	7833      	ldrb	r3, [r6, #0]
 80078b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078b6:	2b50      	cmp	r3, #80	; 0x50
 80078b8:	d13b      	bne.n	8007932 <__gethex+0x156>
 80078ba:	7873      	ldrb	r3, [r6, #1]
 80078bc:	2b2b      	cmp	r3, #43	; 0x2b
 80078be:	d02c      	beq.n	800791a <__gethex+0x13e>
 80078c0:	2b2d      	cmp	r3, #45	; 0x2d
 80078c2:	d02e      	beq.n	8007922 <__gethex+0x146>
 80078c4:	1c71      	adds	r1, r6, #1
 80078c6:	f04f 0900 	mov.w	r9, #0
 80078ca:	7808      	ldrb	r0, [r1, #0]
 80078cc:	f7ff ff70 	bl	80077b0 <__hexdig_fun>
 80078d0:	1e43      	subs	r3, r0, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b18      	cmp	r3, #24
 80078d6:	d82c      	bhi.n	8007932 <__gethex+0x156>
 80078d8:	f1a0 0210 	sub.w	r2, r0, #16
 80078dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078e0:	f7ff ff66 	bl	80077b0 <__hexdig_fun>
 80078e4:	1e43      	subs	r3, r0, #1
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b18      	cmp	r3, #24
 80078ea:	d91d      	bls.n	8007928 <__gethex+0x14c>
 80078ec:	f1b9 0f00 	cmp.w	r9, #0
 80078f0:	d000      	beq.n	80078f4 <__gethex+0x118>
 80078f2:	4252      	negs	r2, r2
 80078f4:	4415      	add	r5, r2
 80078f6:	f8cb 1000 	str.w	r1, [fp]
 80078fa:	b1e4      	cbz	r4, 8007936 <__gethex+0x15a>
 80078fc:	9b00      	ldr	r3, [sp, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bf14      	ite	ne
 8007902:	2700      	movne	r7, #0
 8007904:	2706      	moveq	r7, #6
 8007906:	4638      	mov	r0, r7
 8007908:	b009      	add	sp, #36	; 0x24
 800790a:	ecbd 8b02 	vpop	{d8}
 800790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007912:	463e      	mov	r6, r7
 8007914:	4625      	mov	r5, r4
 8007916:	2401      	movs	r4, #1
 8007918:	e7ca      	b.n	80078b0 <__gethex+0xd4>
 800791a:	f04f 0900 	mov.w	r9, #0
 800791e:	1cb1      	adds	r1, r6, #2
 8007920:	e7d3      	b.n	80078ca <__gethex+0xee>
 8007922:	f04f 0901 	mov.w	r9, #1
 8007926:	e7fa      	b.n	800791e <__gethex+0x142>
 8007928:	230a      	movs	r3, #10
 800792a:	fb03 0202 	mla	r2, r3, r2, r0
 800792e:	3a10      	subs	r2, #16
 8007930:	e7d4      	b.n	80078dc <__gethex+0x100>
 8007932:	4631      	mov	r1, r6
 8007934:	e7df      	b.n	80078f6 <__gethex+0x11a>
 8007936:	1bf3      	subs	r3, r6, r7
 8007938:	3b01      	subs	r3, #1
 800793a:	4621      	mov	r1, r4
 800793c:	2b07      	cmp	r3, #7
 800793e:	dc0b      	bgt.n	8007958 <__gethex+0x17c>
 8007940:	ee18 0a10 	vmov	r0, s16
 8007944:	f000 fa90 	bl	8007e68 <_Balloc>
 8007948:	4604      	mov	r4, r0
 800794a:	b940      	cbnz	r0, 800795e <__gethex+0x182>
 800794c:	4b5d      	ldr	r3, [pc, #372]	; (8007ac4 <__gethex+0x2e8>)
 800794e:	4602      	mov	r2, r0
 8007950:	21de      	movs	r1, #222	; 0xde
 8007952:	485d      	ldr	r0, [pc, #372]	; (8007ac8 <__gethex+0x2ec>)
 8007954:	f001 fdf4 	bl	8009540 <__assert_func>
 8007958:	3101      	adds	r1, #1
 800795a:	105b      	asrs	r3, r3, #1
 800795c:	e7ee      	b.n	800793c <__gethex+0x160>
 800795e:	f100 0914 	add.w	r9, r0, #20
 8007962:	f04f 0b00 	mov.w	fp, #0
 8007966:	f1ca 0301 	rsb	r3, sl, #1
 800796a:	f8cd 9008 	str.w	r9, [sp, #8]
 800796e:	f8cd b000 	str.w	fp, [sp]
 8007972:	9306      	str	r3, [sp, #24]
 8007974:	42b7      	cmp	r7, r6
 8007976:	d340      	bcc.n	80079fa <__gethex+0x21e>
 8007978:	9802      	ldr	r0, [sp, #8]
 800797a:	9b00      	ldr	r3, [sp, #0]
 800797c:	f840 3b04 	str.w	r3, [r0], #4
 8007980:	eba0 0009 	sub.w	r0, r0, r9
 8007984:	1080      	asrs	r0, r0, #2
 8007986:	0146      	lsls	r6, r0, #5
 8007988:	6120      	str	r0, [r4, #16]
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fb5e 	bl	800804c <__hi0bits>
 8007990:	1a30      	subs	r0, r6, r0
 8007992:	f8d8 6000 	ldr.w	r6, [r8]
 8007996:	42b0      	cmp	r0, r6
 8007998:	dd63      	ble.n	8007a62 <__gethex+0x286>
 800799a:	1b87      	subs	r7, r0, r6
 800799c:	4639      	mov	r1, r7
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 ff02 	bl	80087a8 <__any_on>
 80079a4:	4682      	mov	sl, r0
 80079a6:	b1a8      	cbz	r0, 80079d4 <__gethex+0x1f8>
 80079a8:	1e7b      	subs	r3, r7, #1
 80079aa:	1159      	asrs	r1, r3, #5
 80079ac:	f003 021f 	and.w	r2, r3, #31
 80079b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80079b4:	f04f 0a01 	mov.w	sl, #1
 80079b8:	fa0a f202 	lsl.w	r2, sl, r2
 80079bc:	420a      	tst	r2, r1
 80079be:	d009      	beq.n	80079d4 <__gethex+0x1f8>
 80079c0:	4553      	cmp	r3, sl
 80079c2:	dd05      	ble.n	80079d0 <__gethex+0x1f4>
 80079c4:	1eb9      	subs	r1, r7, #2
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 feee 	bl	80087a8 <__any_on>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d145      	bne.n	8007a5c <__gethex+0x280>
 80079d0:	f04f 0a02 	mov.w	sl, #2
 80079d4:	4639      	mov	r1, r7
 80079d6:	4620      	mov	r0, r4
 80079d8:	f7ff fe98 	bl	800770c <rshift>
 80079dc:	443d      	add	r5, r7
 80079de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079e2:	42ab      	cmp	r3, r5
 80079e4:	da4c      	bge.n	8007a80 <__gethex+0x2a4>
 80079e6:	ee18 0a10 	vmov	r0, s16
 80079ea:	4621      	mov	r1, r4
 80079ec:	f000 fa7c 	bl	8007ee8 <_Bfree>
 80079f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079f2:	2300      	movs	r3, #0
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	27a3      	movs	r7, #163	; 0xa3
 80079f8:	e785      	b.n	8007906 <__gethex+0x12a>
 80079fa:	1e73      	subs	r3, r6, #1
 80079fc:	9a05      	ldr	r2, [sp, #20]
 80079fe:	9303      	str	r3, [sp, #12]
 8007a00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d019      	beq.n	8007a3c <__gethex+0x260>
 8007a08:	f1bb 0f20 	cmp.w	fp, #32
 8007a0c:	d107      	bne.n	8007a1e <__gethex+0x242>
 8007a0e:	9b02      	ldr	r3, [sp, #8]
 8007a10:	9a00      	ldr	r2, [sp, #0]
 8007a12:	f843 2b04 	str.w	r2, [r3], #4
 8007a16:	9302      	str	r3, [sp, #8]
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	469b      	mov	fp, r3
 8007a1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a22:	f7ff fec5 	bl	80077b0 <__hexdig_fun>
 8007a26:	9b00      	ldr	r3, [sp, #0]
 8007a28:	f000 000f 	and.w	r0, r0, #15
 8007a2c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a30:	4303      	orrs	r3, r0
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	f10b 0b04 	add.w	fp, fp, #4
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	e00d      	b.n	8007a58 <__gethex+0x27c>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	9a06      	ldr	r2, [sp, #24]
 8007a40:	4413      	add	r3, r2
 8007a42:	42bb      	cmp	r3, r7
 8007a44:	d3e0      	bcc.n	8007a08 <__gethex+0x22c>
 8007a46:	4618      	mov	r0, r3
 8007a48:	9901      	ldr	r1, [sp, #4]
 8007a4a:	9307      	str	r3, [sp, #28]
 8007a4c:	4652      	mov	r2, sl
 8007a4e:	f001 fca7 	bl	80093a0 <strncmp>
 8007a52:	9b07      	ldr	r3, [sp, #28]
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d1d7      	bne.n	8007a08 <__gethex+0x22c>
 8007a58:	461e      	mov	r6, r3
 8007a5a:	e78b      	b.n	8007974 <__gethex+0x198>
 8007a5c:	f04f 0a03 	mov.w	sl, #3
 8007a60:	e7b8      	b.n	80079d4 <__gethex+0x1f8>
 8007a62:	da0a      	bge.n	8007a7a <__gethex+0x29e>
 8007a64:	1a37      	subs	r7, r6, r0
 8007a66:	4621      	mov	r1, r4
 8007a68:	ee18 0a10 	vmov	r0, s16
 8007a6c:	463a      	mov	r2, r7
 8007a6e:	f000 fc57 	bl	8008320 <__lshift>
 8007a72:	1bed      	subs	r5, r5, r7
 8007a74:	4604      	mov	r4, r0
 8007a76:	f100 0914 	add.w	r9, r0, #20
 8007a7a:	f04f 0a00 	mov.w	sl, #0
 8007a7e:	e7ae      	b.n	80079de <__gethex+0x202>
 8007a80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a84:	42a8      	cmp	r0, r5
 8007a86:	dd72      	ble.n	8007b6e <__gethex+0x392>
 8007a88:	1b45      	subs	r5, r0, r5
 8007a8a:	42ae      	cmp	r6, r5
 8007a8c:	dc36      	bgt.n	8007afc <__gethex+0x320>
 8007a8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d02a      	beq.n	8007aec <__gethex+0x310>
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d02c      	beq.n	8007af4 <__gethex+0x318>
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d11c      	bne.n	8007ad8 <__gethex+0x2fc>
 8007a9e:	42ae      	cmp	r6, r5
 8007aa0:	d11a      	bne.n	8007ad8 <__gethex+0x2fc>
 8007aa2:	2e01      	cmp	r6, #1
 8007aa4:	d112      	bne.n	8007acc <__gethex+0x2f0>
 8007aa6:	9a04      	ldr	r2, [sp, #16]
 8007aa8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	2301      	movs	r3, #1
 8007ab0:	6123      	str	r3, [r4, #16]
 8007ab2:	f8c9 3000 	str.w	r3, [r9]
 8007ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ab8:	2762      	movs	r7, #98	; 0x62
 8007aba:	601c      	str	r4, [r3, #0]
 8007abc:	e723      	b.n	8007906 <__gethex+0x12a>
 8007abe:	bf00      	nop
 8007ac0:	0800a5b0 	.word	0x0800a5b0
 8007ac4:	0800a538 	.word	0x0800a538
 8007ac8:	0800a549 	.word	0x0800a549
 8007acc:	1e71      	subs	r1, r6, #1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 fe6a 	bl	80087a8 <__any_on>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d1e6      	bne.n	8007aa6 <__gethex+0x2ca>
 8007ad8:	ee18 0a10 	vmov	r0, s16
 8007adc:	4621      	mov	r1, r4
 8007ade:	f000 fa03 	bl	8007ee8 <_Bfree>
 8007ae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	2750      	movs	r7, #80	; 0x50
 8007aea:	e70c      	b.n	8007906 <__gethex+0x12a>
 8007aec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1f2      	bne.n	8007ad8 <__gethex+0x2fc>
 8007af2:	e7d8      	b.n	8007aa6 <__gethex+0x2ca>
 8007af4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1d5      	bne.n	8007aa6 <__gethex+0x2ca>
 8007afa:	e7ed      	b.n	8007ad8 <__gethex+0x2fc>
 8007afc:	1e6f      	subs	r7, r5, #1
 8007afe:	f1ba 0f00 	cmp.w	sl, #0
 8007b02:	d131      	bne.n	8007b68 <__gethex+0x38c>
 8007b04:	b127      	cbz	r7, 8007b10 <__gethex+0x334>
 8007b06:	4639      	mov	r1, r7
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 fe4d 	bl	80087a8 <__any_on>
 8007b0e:	4682      	mov	sl, r0
 8007b10:	117b      	asrs	r3, r7, #5
 8007b12:	2101      	movs	r1, #1
 8007b14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b18:	f007 071f 	and.w	r7, r7, #31
 8007b1c:	fa01 f707 	lsl.w	r7, r1, r7
 8007b20:	421f      	tst	r7, r3
 8007b22:	4629      	mov	r1, r5
 8007b24:	4620      	mov	r0, r4
 8007b26:	bf18      	it	ne
 8007b28:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b2c:	1b76      	subs	r6, r6, r5
 8007b2e:	f7ff fded 	bl	800770c <rshift>
 8007b32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b36:	2702      	movs	r7, #2
 8007b38:	f1ba 0f00 	cmp.w	sl, #0
 8007b3c:	d048      	beq.n	8007bd0 <__gethex+0x3f4>
 8007b3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d015      	beq.n	8007b72 <__gethex+0x396>
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d017      	beq.n	8007b7a <__gethex+0x39e>
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d109      	bne.n	8007b62 <__gethex+0x386>
 8007b4e:	f01a 0f02 	tst.w	sl, #2
 8007b52:	d006      	beq.n	8007b62 <__gethex+0x386>
 8007b54:	f8d9 0000 	ldr.w	r0, [r9]
 8007b58:	ea4a 0a00 	orr.w	sl, sl, r0
 8007b5c:	f01a 0f01 	tst.w	sl, #1
 8007b60:	d10e      	bne.n	8007b80 <__gethex+0x3a4>
 8007b62:	f047 0710 	orr.w	r7, r7, #16
 8007b66:	e033      	b.n	8007bd0 <__gethex+0x3f4>
 8007b68:	f04f 0a01 	mov.w	sl, #1
 8007b6c:	e7d0      	b.n	8007b10 <__gethex+0x334>
 8007b6e:	2701      	movs	r7, #1
 8007b70:	e7e2      	b.n	8007b38 <__gethex+0x35c>
 8007b72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b74:	f1c3 0301 	rsb	r3, r3, #1
 8007b78:	9315      	str	r3, [sp, #84]	; 0x54
 8007b7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0f0      	beq.n	8007b62 <__gethex+0x386>
 8007b80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b84:	f104 0314 	add.w	r3, r4, #20
 8007b88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b90:	f04f 0c00 	mov.w	ip, #0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b9e:	d01c      	beq.n	8007bda <__gethex+0x3fe>
 8007ba0:	3201      	adds	r2, #1
 8007ba2:	6002      	str	r2, [r0, #0]
 8007ba4:	2f02      	cmp	r7, #2
 8007ba6:	f104 0314 	add.w	r3, r4, #20
 8007baa:	d13f      	bne.n	8007c2c <__gethex+0x450>
 8007bac:	f8d8 2000 	ldr.w	r2, [r8]
 8007bb0:	3a01      	subs	r2, #1
 8007bb2:	42b2      	cmp	r2, r6
 8007bb4:	d10a      	bne.n	8007bcc <__gethex+0x3f0>
 8007bb6:	1171      	asrs	r1, r6, #5
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007bbe:	f006 061f 	and.w	r6, r6, #31
 8007bc2:	fa02 f606 	lsl.w	r6, r2, r6
 8007bc6:	421e      	tst	r6, r3
 8007bc8:	bf18      	it	ne
 8007bca:	4617      	movne	r7, r2
 8007bcc:	f047 0720 	orr.w	r7, r7, #32
 8007bd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bd2:	601c      	str	r4, [r3, #0]
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	601d      	str	r5, [r3, #0]
 8007bd8:	e695      	b.n	8007906 <__gethex+0x12a>
 8007bda:	4299      	cmp	r1, r3
 8007bdc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007be0:	d8d8      	bhi.n	8007b94 <__gethex+0x3b8>
 8007be2:	68a3      	ldr	r3, [r4, #8]
 8007be4:	459b      	cmp	fp, r3
 8007be6:	db19      	blt.n	8007c1c <__gethex+0x440>
 8007be8:	6861      	ldr	r1, [r4, #4]
 8007bea:	ee18 0a10 	vmov	r0, s16
 8007bee:	3101      	adds	r1, #1
 8007bf0:	f000 f93a 	bl	8007e68 <_Balloc>
 8007bf4:	4681      	mov	r9, r0
 8007bf6:	b918      	cbnz	r0, 8007c00 <__gethex+0x424>
 8007bf8:	4b1a      	ldr	r3, [pc, #104]	; (8007c64 <__gethex+0x488>)
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	2184      	movs	r1, #132	; 0x84
 8007bfe:	e6a8      	b.n	8007952 <__gethex+0x176>
 8007c00:	6922      	ldr	r2, [r4, #16]
 8007c02:	3202      	adds	r2, #2
 8007c04:	f104 010c 	add.w	r1, r4, #12
 8007c08:	0092      	lsls	r2, r2, #2
 8007c0a:	300c      	adds	r0, #12
 8007c0c:	f000 f91e 	bl	8007e4c <memcpy>
 8007c10:	4621      	mov	r1, r4
 8007c12:	ee18 0a10 	vmov	r0, s16
 8007c16:	f000 f967 	bl	8007ee8 <_Bfree>
 8007c1a:	464c      	mov	r4, r9
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c24:	6122      	str	r2, [r4, #16]
 8007c26:	2201      	movs	r2, #1
 8007c28:	615a      	str	r2, [r3, #20]
 8007c2a:	e7bb      	b.n	8007ba4 <__gethex+0x3c8>
 8007c2c:	6922      	ldr	r2, [r4, #16]
 8007c2e:	455a      	cmp	r2, fp
 8007c30:	dd0b      	ble.n	8007c4a <__gethex+0x46e>
 8007c32:	2101      	movs	r1, #1
 8007c34:	4620      	mov	r0, r4
 8007c36:	f7ff fd69 	bl	800770c <rshift>
 8007c3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c3e:	3501      	adds	r5, #1
 8007c40:	42ab      	cmp	r3, r5
 8007c42:	f6ff aed0 	blt.w	80079e6 <__gethex+0x20a>
 8007c46:	2701      	movs	r7, #1
 8007c48:	e7c0      	b.n	8007bcc <__gethex+0x3f0>
 8007c4a:	f016 061f 	ands.w	r6, r6, #31
 8007c4e:	d0fa      	beq.n	8007c46 <__gethex+0x46a>
 8007c50:	4453      	add	r3, sl
 8007c52:	f1c6 0620 	rsb	r6, r6, #32
 8007c56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c5a:	f000 f9f7 	bl	800804c <__hi0bits>
 8007c5e:	42b0      	cmp	r0, r6
 8007c60:	dbe7      	blt.n	8007c32 <__gethex+0x456>
 8007c62:	e7f0      	b.n	8007c46 <__gethex+0x46a>
 8007c64:	0800a538 	.word	0x0800a538

08007c68 <L_shift>:
 8007c68:	f1c2 0208 	rsb	r2, r2, #8
 8007c6c:	0092      	lsls	r2, r2, #2
 8007c6e:	b570      	push	{r4, r5, r6, lr}
 8007c70:	f1c2 0620 	rsb	r6, r2, #32
 8007c74:	6843      	ldr	r3, [r0, #4]
 8007c76:	6804      	ldr	r4, [r0, #0]
 8007c78:	fa03 f506 	lsl.w	r5, r3, r6
 8007c7c:	432c      	orrs	r4, r5
 8007c7e:	40d3      	lsrs	r3, r2
 8007c80:	6004      	str	r4, [r0, #0]
 8007c82:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c86:	4288      	cmp	r0, r1
 8007c88:	d3f4      	bcc.n	8007c74 <L_shift+0xc>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}

08007c8c <__match>:
 8007c8c:	b530      	push	{r4, r5, lr}
 8007c8e:	6803      	ldr	r3, [r0, #0]
 8007c90:	3301      	adds	r3, #1
 8007c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c96:	b914      	cbnz	r4, 8007c9e <__match+0x12>
 8007c98:	6003      	str	r3, [r0, #0]
 8007c9a:	2001      	movs	r0, #1
 8007c9c:	bd30      	pop	{r4, r5, pc}
 8007c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ca2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007ca6:	2d19      	cmp	r5, #25
 8007ca8:	bf98      	it	ls
 8007caa:	3220      	addls	r2, #32
 8007cac:	42a2      	cmp	r2, r4
 8007cae:	d0f0      	beq.n	8007c92 <__match+0x6>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e7f3      	b.n	8007c9c <__match+0x10>

08007cb4 <__hexnan>:
 8007cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb8:	680b      	ldr	r3, [r1, #0]
 8007cba:	115e      	asrs	r6, r3, #5
 8007cbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007cc0:	f013 031f 	ands.w	r3, r3, #31
 8007cc4:	b087      	sub	sp, #28
 8007cc6:	bf18      	it	ne
 8007cc8:	3604      	addne	r6, #4
 8007cca:	2500      	movs	r5, #0
 8007ccc:	1f37      	subs	r7, r6, #4
 8007cce:	4690      	mov	r8, r2
 8007cd0:	6802      	ldr	r2, [r0, #0]
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	f846 5c04 	str.w	r5, [r6, #-4]
 8007cda:	46b9      	mov	r9, r7
 8007cdc:	463c      	mov	r4, r7
 8007cde:	9502      	str	r5, [sp, #8]
 8007ce0:	46ab      	mov	fp, r5
 8007ce2:	7851      	ldrb	r1, [r2, #1]
 8007ce4:	1c53      	adds	r3, r2, #1
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	b341      	cbz	r1, 8007d3c <__hexnan+0x88>
 8007cea:	4608      	mov	r0, r1
 8007cec:	9205      	str	r2, [sp, #20]
 8007cee:	9104      	str	r1, [sp, #16]
 8007cf0:	f7ff fd5e 	bl	80077b0 <__hexdig_fun>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d14f      	bne.n	8007d98 <__hexnan+0xe4>
 8007cf8:	9904      	ldr	r1, [sp, #16]
 8007cfa:	9a05      	ldr	r2, [sp, #20]
 8007cfc:	2920      	cmp	r1, #32
 8007cfe:	d818      	bhi.n	8007d32 <__hexnan+0x7e>
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	459b      	cmp	fp, r3
 8007d04:	dd13      	ble.n	8007d2e <__hexnan+0x7a>
 8007d06:	454c      	cmp	r4, r9
 8007d08:	d206      	bcs.n	8007d18 <__hexnan+0x64>
 8007d0a:	2d07      	cmp	r5, #7
 8007d0c:	dc04      	bgt.n	8007d18 <__hexnan+0x64>
 8007d0e:	462a      	mov	r2, r5
 8007d10:	4649      	mov	r1, r9
 8007d12:	4620      	mov	r0, r4
 8007d14:	f7ff ffa8 	bl	8007c68 <L_shift>
 8007d18:	4544      	cmp	r4, r8
 8007d1a:	d950      	bls.n	8007dbe <__hexnan+0x10a>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f1a4 0904 	sub.w	r9, r4, #4
 8007d22:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d26:	f8cd b008 	str.w	fp, [sp, #8]
 8007d2a:	464c      	mov	r4, r9
 8007d2c:	461d      	mov	r5, r3
 8007d2e:	9a03      	ldr	r2, [sp, #12]
 8007d30:	e7d7      	b.n	8007ce2 <__hexnan+0x2e>
 8007d32:	2929      	cmp	r1, #41	; 0x29
 8007d34:	d156      	bne.n	8007de4 <__hexnan+0x130>
 8007d36:	3202      	adds	r2, #2
 8007d38:	f8ca 2000 	str.w	r2, [sl]
 8007d3c:	f1bb 0f00 	cmp.w	fp, #0
 8007d40:	d050      	beq.n	8007de4 <__hexnan+0x130>
 8007d42:	454c      	cmp	r4, r9
 8007d44:	d206      	bcs.n	8007d54 <__hexnan+0xa0>
 8007d46:	2d07      	cmp	r5, #7
 8007d48:	dc04      	bgt.n	8007d54 <__hexnan+0xa0>
 8007d4a:	462a      	mov	r2, r5
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f7ff ff8a 	bl	8007c68 <L_shift>
 8007d54:	4544      	cmp	r4, r8
 8007d56:	d934      	bls.n	8007dc2 <__hexnan+0x10e>
 8007d58:	f1a8 0204 	sub.w	r2, r8, #4
 8007d5c:	4623      	mov	r3, r4
 8007d5e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d62:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d66:	429f      	cmp	r7, r3
 8007d68:	d2f9      	bcs.n	8007d5e <__hexnan+0xaa>
 8007d6a:	1b3b      	subs	r3, r7, r4
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	3304      	adds	r3, #4
 8007d72:	3401      	adds	r4, #1
 8007d74:	3e03      	subs	r6, #3
 8007d76:	42b4      	cmp	r4, r6
 8007d78:	bf88      	it	hi
 8007d7a:	2304      	movhi	r3, #4
 8007d7c:	4443      	add	r3, r8
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f843 2b04 	str.w	r2, [r3], #4
 8007d84:	429f      	cmp	r7, r3
 8007d86:	d2fb      	bcs.n	8007d80 <__hexnan+0xcc>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	b91b      	cbnz	r3, 8007d94 <__hexnan+0xe0>
 8007d8c:	4547      	cmp	r7, r8
 8007d8e:	d127      	bne.n	8007de0 <__hexnan+0x12c>
 8007d90:	2301      	movs	r3, #1
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	2005      	movs	r0, #5
 8007d96:	e026      	b.n	8007de6 <__hexnan+0x132>
 8007d98:	3501      	adds	r5, #1
 8007d9a:	2d08      	cmp	r5, #8
 8007d9c:	f10b 0b01 	add.w	fp, fp, #1
 8007da0:	dd06      	ble.n	8007db0 <__hexnan+0xfc>
 8007da2:	4544      	cmp	r4, r8
 8007da4:	d9c3      	bls.n	8007d2e <__hexnan+0x7a>
 8007da6:	2300      	movs	r3, #0
 8007da8:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dac:	2501      	movs	r5, #1
 8007dae:	3c04      	subs	r4, #4
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	f000 000f 	and.w	r0, r0, #15
 8007db6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007dba:	6022      	str	r2, [r4, #0]
 8007dbc:	e7b7      	b.n	8007d2e <__hexnan+0x7a>
 8007dbe:	2508      	movs	r5, #8
 8007dc0:	e7b5      	b.n	8007d2e <__hexnan+0x7a>
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0df      	beq.n	8007d88 <__hexnan+0xd4>
 8007dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dcc:	f1c3 0320 	rsb	r3, r3, #32
 8007dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007dd8:	401a      	ands	r2, r3
 8007dda:	f846 2c04 	str.w	r2, [r6, #-4]
 8007dde:	e7d3      	b.n	8007d88 <__hexnan+0xd4>
 8007de0:	3f04      	subs	r7, #4
 8007de2:	e7d1      	b.n	8007d88 <__hexnan+0xd4>
 8007de4:	2004      	movs	r0, #4
 8007de6:	b007      	add	sp, #28
 8007de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dec <_localeconv_r>:
 8007dec:	4800      	ldr	r0, [pc, #0]	; (8007df0 <_localeconv_r+0x4>)
 8007dee:	4770      	bx	lr
 8007df0:	20000168 	.word	0x20000168

08007df4 <_lseek_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d07      	ldr	r5, [pc, #28]	; (8007e14 <_lseek_r+0x20>)
 8007df8:	4604      	mov	r4, r0
 8007dfa:	4608      	mov	r0, r1
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	2200      	movs	r2, #0
 8007e00:	602a      	str	r2, [r5, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	f7fa fb43 	bl	800248e <_lseek>
 8007e08:	1c43      	adds	r3, r0, #1
 8007e0a:	d102      	bne.n	8007e12 <_lseek_r+0x1e>
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	b103      	cbz	r3, 8007e12 <_lseek_r+0x1e>
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	bd38      	pop	{r3, r4, r5, pc}
 8007e14:	20000c94 	.word	0x20000c94

08007e18 <malloc>:
 8007e18:	4b02      	ldr	r3, [pc, #8]	; (8007e24 <malloc+0xc>)
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	f000 bd67 	b.w	80088f0 <_malloc_r>
 8007e22:	bf00      	nop
 8007e24:	20000010 	.word	0x20000010

08007e28 <__ascii_mbtowc>:
 8007e28:	b082      	sub	sp, #8
 8007e2a:	b901      	cbnz	r1, 8007e2e <__ascii_mbtowc+0x6>
 8007e2c:	a901      	add	r1, sp, #4
 8007e2e:	b142      	cbz	r2, 8007e42 <__ascii_mbtowc+0x1a>
 8007e30:	b14b      	cbz	r3, 8007e46 <__ascii_mbtowc+0x1e>
 8007e32:	7813      	ldrb	r3, [r2, #0]
 8007e34:	600b      	str	r3, [r1, #0]
 8007e36:	7812      	ldrb	r2, [r2, #0]
 8007e38:	1e10      	subs	r0, r2, #0
 8007e3a:	bf18      	it	ne
 8007e3c:	2001      	movne	r0, #1
 8007e3e:	b002      	add	sp, #8
 8007e40:	4770      	bx	lr
 8007e42:	4610      	mov	r0, r2
 8007e44:	e7fb      	b.n	8007e3e <__ascii_mbtowc+0x16>
 8007e46:	f06f 0001 	mvn.w	r0, #1
 8007e4a:	e7f8      	b.n	8007e3e <__ascii_mbtowc+0x16>

08007e4c <memcpy>:
 8007e4c:	440a      	add	r2, r1
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e54:	d100      	bne.n	8007e58 <memcpy+0xc>
 8007e56:	4770      	bx	lr
 8007e58:	b510      	push	{r4, lr}
 8007e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e62:	4291      	cmp	r1, r2
 8007e64:	d1f9      	bne.n	8007e5a <memcpy+0xe>
 8007e66:	bd10      	pop	{r4, pc}

08007e68 <_Balloc>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	b976      	cbnz	r6, 8007e90 <_Balloc+0x28>
 8007e72:	2010      	movs	r0, #16
 8007e74:	f7ff ffd0 	bl	8007e18 <malloc>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e7c:	b920      	cbnz	r0, 8007e88 <_Balloc+0x20>
 8007e7e:	4b18      	ldr	r3, [pc, #96]	; (8007ee0 <_Balloc+0x78>)
 8007e80:	4818      	ldr	r0, [pc, #96]	; (8007ee4 <_Balloc+0x7c>)
 8007e82:	2166      	movs	r1, #102	; 0x66
 8007e84:	f001 fb5c 	bl	8009540 <__assert_func>
 8007e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e8c:	6006      	str	r6, [r0, #0]
 8007e8e:	60c6      	str	r6, [r0, #12]
 8007e90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e92:	68f3      	ldr	r3, [r6, #12]
 8007e94:	b183      	cbz	r3, 8007eb8 <_Balloc+0x50>
 8007e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e9e:	b9b8      	cbnz	r0, 8007ed0 <_Balloc+0x68>
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ea6:	1d72      	adds	r2, r6, #5
 8007ea8:	0092      	lsls	r2, r2, #2
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fc9d 	bl	80087ea <_calloc_r>
 8007eb0:	b160      	cbz	r0, 8007ecc <_Balloc+0x64>
 8007eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eb6:	e00e      	b.n	8007ed6 <_Balloc+0x6e>
 8007eb8:	2221      	movs	r2, #33	; 0x21
 8007eba:	2104      	movs	r1, #4
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 fc94 	bl	80087ea <_calloc_r>
 8007ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec4:	60f0      	str	r0, [r6, #12]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e4      	bne.n	8007e96 <_Balloc+0x2e>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	6802      	ldr	r2, [r0, #0]
 8007ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007edc:	e7f7      	b.n	8007ece <_Balloc+0x66>
 8007ede:	bf00      	nop
 8007ee0:	0800a4c6 	.word	0x0800a4c6
 8007ee4:	0800a5c4 	.word	0x0800a5c4

08007ee8 <_Bfree>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b976      	cbnz	r6, 8007f10 <_Bfree+0x28>
 8007ef2:	2010      	movs	r0, #16
 8007ef4:	f7ff ff90 	bl	8007e18 <malloc>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	6268      	str	r0, [r5, #36]	; 0x24
 8007efc:	b920      	cbnz	r0, 8007f08 <_Bfree+0x20>
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <_Bfree+0x3c>)
 8007f00:	4809      	ldr	r0, [pc, #36]	; (8007f28 <_Bfree+0x40>)
 8007f02:	218a      	movs	r1, #138	; 0x8a
 8007f04:	f001 fb1c 	bl	8009540 <__assert_func>
 8007f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f0c:	6006      	str	r6, [r0, #0]
 8007f0e:	60c6      	str	r6, [r0, #12]
 8007f10:	b13c      	cbz	r4, 8007f22 <_Bfree+0x3a>
 8007f12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f14:	6862      	ldr	r2, [r4, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f1c:	6021      	str	r1, [r4, #0]
 8007f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	0800a4c6 	.word	0x0800a4c6
 8007f28:	0800a5c4 	.word	0x0800a5c4

08007f2c <__multadd>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	690d      	ldr	r5, [r1, #16]
 8007f32:	4607      	mov	r7, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	461e      	mov	r6, r3
 8007f38:	f101 0c14 	add.w	ip, r1, #20
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f42:	b299      	uxth	r1, r3
 8007f44:	fb02 6101 	mla	r1, r2, r1, r6
 8007f48:	0c1e      	lsrs	r6, r3, #16
 8007f4a:	0c0b      	lsrs	r3, r1, #16
 8007f4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007f50:	b289      	uxth	r1, r1
 8007f52:	3001      	adds	r0, #1
 8007f54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f58:	4285      	cmp	r5, r0
 8007f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f62:	dcec      	bgt.n	8007f3e <__multadd+0x12>
 8007f64:	b30e      	cbz	r6, 8007faa <__multadd+0x7e>
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dc19      	bgt.n	8007fa0 <__multadd+0x74>
 8007f6c:	6861      	ldr	r1, [r4, #4]
 8007f6e:	4638      	mov	r0, r7
 8007f70:	3101      	adds	r1, #1
 8007f72:	f7ff ff79 	bl	8007e68 <_Balloc>
 8007f76:	4680      	mov	r8, r0
 8007f78:	b928      	cbnz	r0, 8007f86 <__multadd+0x5a>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <__multadd+0x84>)
 8007f7e:	480d      	ldr	r0, [pc, #52]	; (8007fb4 <__multadd+0x88>)
 8007f80:	21b5      	movs	r1, #181	; 0xb5
 8007f82:	f001 fadd 	bl	8009540 <__assert_func>
 8007f86:	6922      	ldr	r2, [r4, #16]
 8007f88:	3202      	adds	r2, #2
 8007f8a:	f104 010c 	add.w	r1, r4, #12
 8007f8e:	0092      	lsls	r2, r2, #2
 8007f90:	300c      	adds	r0, #12
 8007f92:	f7ff ff5b 	bl	8007e4c <memcpy>
 8007f96:	4621      	mov	r1, r4
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f7ff ffa5 	bl	8007ee8 <_Bfree>
 8007f9e:	4644      	mov	r4, r8
 8007fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	615e      	str	r6, [r3, #20]
 8007fa8:	6125      	str	r5, [r4, #16]
 8007faa:	4620      	mov	r0, r4
 8007fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb0:	0800a538 	.word	0x0800a538
 8007fb4:	0800a5c4 	.word	0x0800a5c4

08007fb8 <__s2b>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	4615      	mov	r5, r2
 8007fc0:	461f      	mov	r7, r3
 8007fc2:	2209      	movs	r2, #9
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fcc:	2100      	movs	r1, #0
 8007fce:	2201      	movs	r2, #1
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	db09      	blt.n	8007fe8 <__s2b+0x30>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff ff47 	bl	8007e68 <_Balloc>
 8007fda:	b940      	cbnz	r0, 8007fee <__s2b+0x36>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	4b19      	ldr	r3, [pc, #100]	; (8008044 <__s2b+0x8c>)
 8007fe0:	4819      	ldr	r0, [pc, #100]	; (8008048 <__s2b+0x90>)
 8007fe2:	21ce      	movs	r1, #206	; 0xce
 8007fe4:	f001 faac 	bl	8009540 <__assert_func>
 8007fe8:	0052      	lsls	r2, r2, #1
 8007fea:	3101      	adds	r1, #1
 8007fec:	e7f0      	b.n	8007fd0 <__s2b+0x18>
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	6143      	str	r3, [r0, #20]
 8007ff2:	2d09      	cmp	r5, #9
 8007ff4:	f04f 0301 	mov.w	r3, #1
 8007ff8:	6103      	str	r3, [r0, #16]
 8007ffa:	dd16      	ble.n	800802a <__s2b+0x72>
 8007ffc:	f104 0909 	add.w	r9, r4, #9
 8008000:	46c8      	mov	r8, r9
 8008002:	442c      	add	r4, r5
 8008004:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008008:	4601      	mov	r1, r0
 800800a:	3b30      	subs	r3, #48	; 0x30
 800800c:	220a      	movs	r2, #10
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff ff8c 	bl	8007f2c <__multadd>
 8008014:	45a0      	cmp	r8, r4
 8008016:	d1f5      	bne.n	8008004 <__s2b+0x4c>
 8008018:	f1a5 0408 	sub.w	r4, r5, #8
 800801c:	444c      	add	r4, r9
 800801e:	1b2d      	subs	r5, r5, r4
 8008020:	1963      	adds	r3, r4, r5
 8008022:	42bb      	cmp	r3, r7
 8008024:	db04      	blt.n	8008030 <__s2b+0x78>
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	340a      	adds	r4, #10
 800802c:	2509      	movs	r5, #9
 800802e:	e7f6      	b.n	800801e <__s2b+0x66>
 8008030:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008034:	4601      	mov	r1, r0
 8008036:	3b30      	subs	r3, #48	; 0x30
 8008038:	220a      	movs	r2, #10
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff ff76 	bl	8007f2c <__multadd>
 8008040:	e7ee      	b.n	8008020 <__s2b+0x68>
 8008042:	bf00      	nop
 8008044:	0800a538 	.word	0x0800a538
 8008048:	0800a5c4 	.word	0x0800a5c4

0800804c <__hi0bits>:
 800804c:	0c03      	lsrs	r3, r0, #16
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	b9d3      	cbnz	r3, 8008088 <__hi0bits+0x3c>
 8008052:	0400      	lsls	r0, r0, #16
 8008054:	2310      	movs	r3, #16
 8008056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800805a:	bf04      	itt	eq
 800805c:	0200      	lsleq	r0, r0, #8
 800805e:	3308      	addeq	r3, #8
 8008060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008064:	bf04      	itt	eq
 8008066:	0100      	lsleq	r0, r0, #4
 8008068:	3304      	addeq	r3, #4
 800806a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800806e:	bf04      	itt	eq
 8008070:	0080      	lsleq	r0, r0, #2
 8008072:	3302      	addeq	r3, #2
 8008074:	2800      	cmp	r0, #0
 8008076:	db05      	blt.n	8008084 <__hi0bits+0x38>
 8008078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800807c:	f103 0301 	add.w	r3, r3, #1
 8008080:	bf08      	it	eq
 8008082:	2320      	moveq	r3, #32
 8008084:	4618      	mov	r0, r3
 8008086:	4770      	bx	lr
 8008088:	2300      	movs	r3, #0
 800808a:	e7e4      	b.n	8008056 <__hi0bits+0xa>

0800808c <__lo0bits>:
 800808c:	6803      	ldr	r3, [r0, #0]
 800808e:	f013 0207 	ands.w	r2, r3, #7
 8008092:	4601      	mov	r1, r0
 8008094:	d00b      	beq.n	80080ae <__lo0bits+0x22>
 8008096:	07da      	lsls	r2, r3, #31
 8008098:	d423      	bmi.n	80080e2 <__lo0bits+0x56>
 800809a:	0798      	lsls	r0, r3, #30
 800809c:	bf49      	itett	mi
 800809e:	085b      	lsrmi	r3, r3, #1
 80080a0:	089b      	lsrpl	r3, r3, #2
 80080a2:	2001      	movmi	r0, #1
 80080a4:	600b      	strmi	r3, [r1, #0]
 80080a6:	bf5c      	itt	pl
 80080a8:	600b      	strpl	r3, [r1, #0]
 80080aa:	2002      	movpl	r0, #2
 80080ac:	4770      	bx	lr
 80080ae:	b298      	uxth	r0, r3
 80080b0:	b9a8      	cbnz	r0, 80080de <__lo0bits+0x52>
 80080b2:	0c1b      	lsrs	r3, r3, #16
 80080b4:	2010      	movs	r0, #16
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	b90a      	cbnz	r2, 80080be <__lo0bits+0x32>
 80080ba:	3008      	adds	r0, #8
 80080bc:	0a1b      	lsrs	r3, r3, #8
 80080be:	071a      	lsls	r2, r3, #28
 80080c0:	bf04      	itt	eq
 80080c2:	091b      	lsreq	r3, r3, #4
 80080c4:	3004      	addeq	r0, #4
 80080c6:	079a      	lsls	r2, r3, #30
 80080c8:	bf04      	itt	eq
 80080ca:	089b      	lsreq	r3, r3, #2
 80080cc:	3002      	addeq	r0, #2
 80080ce:	07da      	lsls	r2, r3, #31
 80080d0:	d403      	bmi.n	80080da <__lo0bits+0x4e>
 80080d2:	085b      	lsrs	r3, r3, #1
 80080d4:	f100 0001 	add.w	r0, r0, #1
 80080d8:	d005      	beq.n	80080e6 <__lo0bits+0x5a>
 80080da:	600b      	str	r3, [r1, #0]
 80080dc:	4770      	bx	lr
 80080de:	4610      	mov	r0, r2
 80080e0:	e7e9      	b.n	80080b6 <__lo0bits+0x2a>
 80080e2:	2000      	movs	r0, #0
 80080e4:	4770      	bx	lr
 80080e6:	2020      	movs	r0, #32
 80080e8:	4770      	bx	lr
	...

080080ec <__i2b>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	460c      	mov	r4, r1
 80080f0:	2101      	movs	r1, #1
 80080f2:	f7ff feb9 	bl	8007e68 <_Balloc>
 80080f6:	4602      	mov	r2, r0
 80080f8:	b928      	cbnz	r0, 8008106 <__i2b+0x1a>
 80080fa:	4b05      	ldr	r3, [pc, #20]	; (8008110 <__i2b+0x24>)
 80080fc:	4805      	ldr	r0, [pc, #20]	; (8008114 <__i2b+0x28>)
 80080fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008102:	f001 fa1d 	bl	8009540 <__assert_func>
 8008106:	2301      	movs	r3, #1
 8008108:	6144      	str	r4, [r0, #20]
 800810a:	6103      	str	r3, [r0, #16]
 800810c:	bd10      	pop	{r4, pc}
 800810e:	bf00      	nop
 8008110:	0800a538 	.word	0x0800a538
 8008114:	0800a5c4 	.word	0x0800a5c4

08008118 <__multiply>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	4691      	mov	r9, r2
 800811e:	690a      	ldr	r2, [r1, #16]
 8008120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008124:	429a      	cmp	r2, r3
 8008126:	bfb8      	it	lt
 8008128:	460b      	movlt	r3, r1
 800812a:	460c      	mov	r4, r1
 800812c:	bfbc      	itt	lt
 800812e:	464c      	movlt	r4, r9
 8008130:	4699      	movlt	r9, r3
 8008132:	6927      	ldr	r7, [r4, #16]
 8008134:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008138:	68a3      	ldr	r3, [r4, #8]
 800813a:	6861      	ldr	r1, [r4, #4]
 800813c:	eb07 060a 	add.w	r6, r7, sl
 8008140:	42b3      	cmp	r3, r6
 8008142:	b085      	sub	sp, #20
 8008144:	bfb8      	it	lt
 8008146:	3101      	addlt	r1, #1
 8008148:	f7ff fe8e 	bl	8007e68 <_Balloc>
 800814c:	b930      	cbnz	r0, 800815c <__multiply+0x44>
 800814e:	4602      	mov	r2, r0
 8008150:	4b44      	ldr	r3, [pc, #272]	; (8008264 <__multiply+0x14c>)
 8008152:	4845      	ldr	r0, [pc, #276]	; (8008268 <__multiply+0x150>)
 8008154:	f240 115d 	movw	r1, #349	; 0x15d
 8008158:	f001 f9f2 	bl	8009540 <__assert_func>
 800815c:	f100 0514 	add.w	r5, r0, #20
 8008160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008164:	462b      	mov	r3, r5
 8008166:	2200      	movs	r2, #0
 8008168:	4543      	cmp	r3, r8
 800816a:	d321      	bcc.n	80081b0 <__multiply+0x98>
 800816c:	f104 0314 	add.w	r3, r4, #20
 8008170:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008174:	f109 0314 	add.w	r3, r9, #20
 8008178:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800817c:	9202      	str	r2, [sp, #8]
 800817e:	1b3a      	subs	r2, r7, r4
 8008180:	3a15      	subs	r2, #21
 8008182:	f022 0203 	bic.w	r2, r2, #3
 8008186:	3204      	adds	r2, #4
 8008188:	f104 0115 	add.w	r1, r4, #21
 800818c:	428f      	cmp	r7, r1
 800818e:	bf38      	it	cc
 8008190:	2204      	movcc	r2, #4
 8008192:	9201      	str	r2, [sp, #4]
 8008194:	9a02      	ldr	r2, [sp, #8]
 8008196:	9303      	str	r3, [sp, #12]
 8008198:	429a      	cmp	r2, r3
 800819a:	d80c      	bhi.n	80081b6 <__multiply+0x9e>
 800819c:	2e00      	cmp	r6, #0
 800819e:	dd03      	ble.n	80081a8 <__multiply+0x90>
 80081a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d05a      	beq.n	800825e <__multiply+0x146>
 80081a8:	6106      	str	r6, [r0, #16]
 80081aa:	b005      	add	sp, #20
 80081ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b0:	f843 2b04 	str.w	r2, [r3], #4
 80081b4:	e7d8      	b.n	8008168 <__multiply+0x50>
 80081b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80081ba:	f1ba 0f00 	cmp.w	sl, #0
 80081be:	d024      	beq.n	800820a <__multiply+0xf2>
 80081c0:	f104 0e14 	add.w	lr, r4, #20
 80081c4:	46a9      	mov	r9, r5
 80081c6:	f04f 0c00 	mov.w	ip, #0
 80081ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081ce:	f8d9 1000 	ldr.w	r1, [r9]
 80081d2:	fa1f fb82 	uxth.w	fp, r2
 80081d6:	b289      	uxth	r1, r1
 80081d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80081dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80081e0:	f8d9 2000 	ldr.w	r2, [r9]
 80081e4:	4461      	add	r1, ip
 80081e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80081ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081f2:	b289      	uxth	r1, r1
 80081f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081f8:	4577      	cmp	r7, lr
 80081fa:	f849 1b04 	str.w	r1, [r9], #4
 80081fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008202:	d8e2      	bhi.n	80081ca <__multiply+0xb2>
 8008204:	9a01      	ldr	r2, [sp, #4]
 8008206:	f845 c002 	str.w	ip, [r5, r2]
 800820a:	9a03      	ldr	r2, [sp, #12]
 800820c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008210:	3304      	adds	r3, #4
 8008212:	f1b9 0f00 	cmp.w	r9, #0
 8008216:	d020      	beq.n	800825a <__multiply+0x142>
 8008218:	6829      	ldr	r1, [r5, #0]
 800821a:	f104 0c14 	add.w	ip, r4, #20
 800821e:	46ae      	mov	lr, r5
 8008220:	f04f 0a00 	mov.w	sl, #0
 8008224:	f8bc b000 	ldrh.w	fp, [ip]
 8008228:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800822c:	fb09 220b 	mla	r2, r9, fp, r2
 8008230:	4492      	add	sl, r2
 8008232:	b289      	uxth	r1, r1
 8008234:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008238:	f84e 1b04 	str.w	r1, [lr], #4
 800823c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008240:	f8be 1000 	ldrh.w	r1, [lr]
 8008244:	0c12      	lsrs	r2, r2, #16
 8008246:	fb09 1102 	mla	r1, r9, r2, r1
 800824a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800824e:	4567      	cmp	r7, ip
 8008250:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008254:	d8e6      	bhi.n	8008224 <__multiply+0x10c>
 8008256:	9a01      	ldr	r2, [sp, #4]
 8008258:	50a9      	str	r1, [r5, r2]
 800825a:	3504      	adds	r5, #4
 800825c:	e79a      	b.n	8008194 <__multiply+0x7c>
 800825e:	3e01      	subs	r6, #1
 8008260:	e79c      	b.n	800819c <__multiply+0x84>
 8008262:	bf00      	nop
 8008264:	0800a538 	.word	0x0800a538
 8008268:	0800a5c4 	.word	0x0800a5c4

0800826c <__pow5mult>:
 800826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008270:	4615      	mov	r5, r2
 8008272:	f012 0203 	ands.w	r2, r2, #3
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	d007      	beq.n	800828c <__pow5mult+0x20>
 800827c:	4c25      	ldr	r4, [pc, #148]	; (8008314 <__pow5mult+0xa8>)
 800827e:	3a01      	subs	r2, #1
 8008280:	2300      	movs	r3, #0
 8008282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008286:	f7ff fe51 	bl	8007f2c <__multadd>
 800828a:	4607      	mov	r7, r0
 800828c:	10ad      	asrs	r5, r5, #2
 800828e:	d03d      	beq.n	800830c <__pow5mult+0xa0>
 8008290:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008292:	b97c      	cbnz	r4, 80082b4 <__pow5mult+0x48>
 8008294:	2010      	movs	r0, #16
 8008296:	f7ff fdbf 	bl	8007e18 <malloc>
 800829a:	4602      	mov	r2, r0
 800829c:	6270      	str	r0, [r6, #36]	; 0x24
 800829e:	b928      	cbnz	r0, 80082ac <__pow5mult+0x40>
 80082a0:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <__pow5mult+0xac>)
 80082a2:	481e      	ldr	r0, [pc, #120]	; (800831c <__pow5mult+0xb0>)
 80082a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80082a8:	f001 f94a 	bl	8009540 <__assert_func>
 80082ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082b0:	6004      	str	r4, [r0, #0]
 80082b2:	60c4      	str	r4, [r0, #12]
 80082b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082bc:	b94c      	cbnz	r4, 80082d2 <__pow5mult+0x66>
 80082be:	f240 2171 	movw	r1, #625	; 0x271
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ff12 	bl	80080ec <__i2b>
 80082c8:	2300      	movs	r3, #0
 80082ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80082ce:	4604      	mov	r4, r0
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	f04f 0900 	mov.w	r9, #0
 80082d6:	07eb      	lsls	r3, r5, #31
 80082d8:	d50a      	bpl.n	80082f0 <__pow5mult+0x84>
 80082da:	4639      	mov	r1, r7
 80082dc:	4622      	mov	r2, r4
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff ff1a 	bl	8008118 <__multiply>
 80082e4:	4639      	mov	r1, r7
 80082e6:	4680      	mov	r8, r0
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7ff fdfd 	bl	8007ee8 <_Bfree>
 80082ee:	4647      	mov	r7, r8
 80082f0:	106d      	asrs	r5, r5, #1
 80082f2:	d00b      	beq.n	800830c <__pow5mult+0xa0>
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	b938      	cbnz	r0, 8008308 <__pow5mult+0x9c>
 80082f8:	4622      	mov	r2, r4
 80082fa:	4621      	mov	r1, r4
 80082fc:	4630      	mov	r0, r6
 80082fe:	f7ff ff0b 	bl	8008118 <__multiply>
 8008302:	6020      	str	r0, [r4, #0]
 8008304:	f8c0 9000 	str.w	r9, [r0]
 8008308:	4604      	mov	r4, r0
 800830a:	e7e4      	b.n	80082d6 <__pow5mult+0x6a>
 800830c:	4638      	mov	r0, r7
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	bf00      	nop
 8008314:	0800a710 	.word	0x0800a710
 8008318:	0800a4c6 	.word	0x0800a4c6
 800831c:	0800a5c4 	.word	0x0800a5c4

08008320 <__lshift>:
 8008320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008324:	460c      	mov	r4, r1
 8008326:	6849      	ldr	r1, [r1, #4]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800832e:	68a3      	ldr	r3, [r4, #8]
 8008330:	4607      	mov	r7, r0
 8008332:	4691      	mov	r9, r2
 8008334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008338:	f108 0601 	add.w	r6, r8, #1
 800833c:	42b3      	cmp	r3, r6
 800833e:	db0b      	blt.n	8008358 <__lshift+0x38>
 8008340:	4638      	mov	r0, r7
 8008342:	f7ff fd91 	bl	8007e68 <_Balloc>
 8008346:	4605      	mov	r5, r0
 8008348:	b948      	cbnz	r0, 800835e <__lshift+0x3e>
 800834a:	4602      	mov	r2, r0
 800834c:	4b2a      	ldr	r3, [pc, #168]	; (80083f8 <__lshift+0xd8>)
 800834e:	482b      	ldr	r0, [pc, #172]	; (80083fc <__lshift+0xdc>)
 8008350:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008354:	f001 f8f4 	bl	8009540 <__assert_func>
 8008358:	3101      	adds	r1, #1
 800835a:	005b      	lsls	r3, r3, #1
 800835c:	e7ee      	b.n	800833c <__lshift+0x1c>
 800835e:	2300      	movs	r3, #0
 8008360:	f100 0114 	add.w	r1, r0, #20
 8008364:	f100 0210 	add.w	r2, r0, #16
 8008368:	4618      	mov	r0, r3
 800836a:	4553      	cmp	r3, sl
 800836c:	db37      	blt.n	80083de <__lshift+0xbe>
 800836e:	6920      	ldr	r0, [r4, #16]
 8008370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008374:	f104 0314 	add.w	r3, r4, #20
 8008378:	f019 091f 	ands.w	r9, r9, #31
 800837c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008380:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008384:	d02f      	beq.n	80083e6 <__lshift+0xc6>
 8008386:	f1c9 0e20 	rsb	lr, r9, #32
 800838a:	468a      	mov	sl, r1
 800838c:	f04f 0c00 	mov.w	ip, #0
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	fa02 f209 	lsl.w	r2, r2, r9
 8008396:	ea42 020c 	orr.w	r2, r2, ip
 800839a:	f84a 2b04 	str.w	r2, [sl], #4
 800839e:	f853 2b04 	ldr.w	r2, [r3], #4
 80083a2:	4298      	cmp	r0, r3
 80083a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80083a8:	d8f2      	bhi.n	8008390 <__lshift+0x70>
 80083aa:	1b03      	subs	r3, r0, r4
 80083ac:	3b15      	subs	r3, #21
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	3304      	adds	r3, #4
 80083b4:	f104 0215 	add.w	r2, r4, #21
 80083b8:	4290      	cmp	r0, r2
 80083ba:	bf38      	it	cc
 80083bc:	2304      	movcc	r3, #4
 80083be:	f841 c003 	str.w	ip, [r1, r3]
 80083c2:	f1bc 0f00 	cmp.w	ip, #0
 80083c6:	d001      	beq.n	80083cc <__lshift+0xac>
 80083c8:	f108 0602 	add.w	r6, r8, #2
 80083cc:	3e01      	subs	r6, #1
 80083ce:	4638      	mov	r0, r7
 80083d0:	612e      	str	r6, [r5, #16]
 80083d2:	4621      	mov	r1, r4
 80083d4:	f7ff fd88 	bl	8007ee8 <_Bfree>
 80083d8:	4628      	mov	r0, r5
 80083da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083de:	f842 0f04 	str.w	r0, [r2, #4]!
 80083e2:	3301      	adds	r3, #1
 80083e4:	e7c1      	b.n	800836a <__lshift+0x4a>
 80083e6:	3904      	subs	r1, #4
 80083e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80083f0:	4298      	cmp	r0, r3
 80083f2:	d8f9      	bhi.n	80083e8 <__lshift+0xc8>
 80083f4:	e7ea      	b.n	80083cc <__lshift+0xac>
 80083f6:	bf00      	nop
 80083f8:	0800a538 	.word	0x0800a538
 80083fc:	0800a5c4 	.word	0x0800a5c4

08008400 <__mcmp>:
 8008400:	b530      	push	{r4, r5, lr}
 8008402:	6902      	ldr	r2, [r0, #16]
 8008404:	690c      	ldr	r4, [r1, #16]
 8008406:	1b12      	subs	r2, r2, r4
 8008408:	d10e      	bne.n	8008428 <__mcmp+0x28>
 800840a:	f100 0314 	add.w	r3, r0, #20
 800840e:	3114      	adds	r1, #20
 8008410:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008418:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800841c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008420:	42a5      	cmp	r5, r4
 8008422:	d003      	beq.n	800842c <__mcmp+0x2c>
 8008424:	d305      	bcc.n	8008432 <__mcmp+0x32>
 8008426:	2201      	movs	r2, #1
 8008428:	4610      	mov	r0, r2
 800842a:	bd30      	pop	{r4, r5, pc}
 800842c:	4283      	cmp	r3, r0
 800842e:	d3f3      	bcc.n	8008418 <__mcmp+0x18>
 8008430:	e7fa      	b.n	8008428 <__mcmp+0x28>
 8008432:	f04f 32ff 	mov.w	r2, #4294967295
 8008436:	e7f7      	b.n	8008428 <__mcmp+0x28>

08008438 <__mdiff>:
 8008438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	460c      	mov	r4, r1
 800843e:	4606      	mov	r6, r0
 8008440:	4611      	mov	r1, r2
 8008442:	4620      	mov	r0, r4
 8008444:	4690      	mov	r8, r2
 8008446:	f7ff ffdb 	bl	8008400 <__mcmp>
 800844a:	1e05      	subs	r5, r0, #0
 800844c:	d110      	bne.n	8008470 <__mdiff+0x38>
 800844e:	4629      	mov	r1, r5
 8008450:	4630      	mov	r0, r6
 8008452:	f7ff fd09 	bl	8007e68 <_Balloc>
 8008456:	b930      	cbnz	r0, 8008466 <__mdiff+0x2e>
 8008458:	4b3a      	ldr	r3, [pc, #232]	; (8008544 <__mdiff+0x10c>)
 800845a:	4602      	mov	r2, r0
 800845c:	f240 2132 	movw	r1, #562	; 0x232
 8008460:	4839      	ldr	r0, [pc, #228]	; (8008548 <__mdiff+0x110>)
 8008462:	f001 f86d 	bl	8009540 <__assert_func>
 8008466:	2301      	movs	r3, #1
 8008468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800846c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	bfa4      	itt	ge
 8008472:	4643      	movge	r3, r8
 8008474:	46a0      	movge	r8, r4
 8008476:	4630      	mov	r0, r6
 8008478:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800847c:	bfa6      	itte	ge
 800847e:	461c      	movge	r4, r3
 8008480:	2500      	movge	r5, #0
 8008482:	2501      	movlt	r5, #1
 8008484:	f7ff fcf0 	bl	8007e68 <_Balloc>
 8008488:	b920      	cbnz	r0, 8008494 <__mdiff+0x5c>
 800848a:	4b2e      	ldr	r3, [pc, #184]	; (8008544 <__mdiff+0x10c>)
 800848c:	4602      	mov	r2, r0
 800848e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008492:	e7e5      	b.n	8008460 <__mdiff+0x28>
 8008494:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008498:	6926      	ldr	r6, [r4, #16]
 800849a:	60c5      	str	r5, [r0, #12]
 800849c:	f104 0914 	add.w	r9, r4, #20
 80084a0:	f108 0514 	add.w	r5, r8, #20
 80084a4:	f100 0e14 	add.w	lr, r0, #20
 80084a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80084ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084b0:	f108 0210 	add.w	r2, r8, #16
 80084b4:	46f2      	mov	sl, lr
 80084b6:	2100      	movs	r1, #0
 80084b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80084bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80084c0:	fa1f f883 	uxth.w	r8, r3
 80084c4:	fa11 f18b 	uxtah	r1, r1, fp
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	eba1 0808 	sub.w	r8, r1, r8
 80084ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80084d6:	fa1f f888 	uxth.w	r8, r8
 80084da:	1419      	asrs	r1, r3, #16
 80084dc:	454e      	cmp	r6, r9
 80084de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80084e2:	f84a 3b04 	str.w	r3, [sl], #4
 80084e6:	d8e7      	bhi.n	80084b8 <__mdiff+0x80>
 80084e8:	1b33      	subs	r3, r6, r4
 80084ea:	3b15      	subs	r3, #21
 80084ec:	f023 0303 	bic.w	r3, r3, #3
 80084f0:	3304      	adds	r3, #4
 80084f2:	3415      	adds	r4, #21
 80084f4:	42a6      	cmp	r6, r4
 80084f6:	bf38      	it	cc
 80084f8:	2304      	movcc	r3, #4
 80084fa:	441d      	add	r5, r3
 80084fc:	4473      	add	r3, lr
 80084fe:	469e      	mov	lr, r3
 8008500:	462e      	mov	r6, r5
 8008502:	4566      	cmp	r6, ip
 8008504:	d30e      	bcc.n	8008524 <__mdiff+0xec>
 8008506:	f10c 0203 	add.w	r2, ip, #3
 800850a:	1b52      	subs	r2, r2, r5
 800850c:	f022 0203 	bic.w	r2, r2, #3
 8008510:	3d03      	subs	r5, #3
 8008512:	45ac      	cmp	ip, r5
 8008514:	bf38      	it	cc
 8008516:	2200      	movcc	r2, #0
 8008518:	441a      	add	r2, r3
 800851a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800851e:	b17b      	cbz	r3, 8008540 <__mdiff+0x108>
 8008520:	6107      	str	r7, [r0, #16]
 8008522:	e7a3      	b.n	800846c <__mdiff+0x34>
 8008524:	f856 8b04 	ldr.w	r8, [r6], #4
 8008528:	fa11 f288 	uxtah	r2, r1, r8
 800852c:	1414      	asrs	r4, r2, #16
 800852e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008532:	b292      	uxth	r2, r2
 8008534:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008538:	f84e 2b04 	str.w	r2, [lr], #4
 800853c:	1421      	asrs	r1, r4, #16
 800853e:	e7e0      	b.n	8008502 <__mdiff+0xca>
 8008540:	3f01      	subs	r7, #1
 8008542:	e7ea      	b.n	800851a <__mdiff+0xe2>
 8008544:	0800a538 	.word	0x0800a538
 8008548:	0800a5c4 	.word	0x0800a5c4

0800854c <__ulp>:
 800854c:	b082      	sub	sp, #8
 800854e:	ed8d 0b00 	vstr	d0, [sp]
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	4912      	ldr	r1, [pc, #72]	; (80085a0 <__ulp+0x54>)
 8008556:	4019      	ands	r1, r3
 8008558:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800855c:	2900      	cmp	r1, #0
 800855e:	dd05      	ble.n	800856c <__ulp+0x20>
 8008560:	2200      	movs	r2, #0
 8008562:	460b      	mov	r3, r1
 8008564:	ec43 2b10 	vmov	d0, r2, r3
 8008568:	b002      	add	sp, #8
 800856a:	4770      	bx	lr
 800856c:	4249      	negs	r1, r1
 800856e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008572:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	f04f 0300 	mov.w	r3, #0
 800857e:	da04      	bge.n	800858a <__ulp+0x3e>
 8008580:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008584:	fa41 f300 	asr.w	r3, r1, r0
 8008588:	e7ec      	b.n	8008564 <__ulp+0x18>
 800858a:	f1a0 0114 	sub.w	r1, r0, #20
 800858e:	291e      	cmp	r1, #30
 8008590:	bfda      	itte	le
 8008592:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008596:	fa20 f101 	lsrle.w	r1, r0, r1
 800859a:	2101      	movgt	r1, #1
 800859c:	460a      	mov	r2, r1
 800859e:	e7e1      	b.n	8008564 <__ulp+0x18>
 80085a0:	7ff00000 	.word	0x7ff00000

080085a4 <__b2d>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	6905      	ldr	r5, [r0, #16]
 80085a8:	f100 0714 	add.w	r7, r0, #20
 80085ac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80085b0:	1f2e      	subs	r6, r5, #4
 80085b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7ff fd48 	bl	800804c <__hi0bits>
 80085bc:	f1c0 0320 	rsb	r3, r0, #32
 80085c0:	280a      	cmp	r0, #10
 80085c2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008640 <__b2d+0x9c>
 80085c6:	600b      	str	r3, [r1, #0]
 80085c8:	dc14      	bgt.n	80085f4 <__b2d+0x50>
 80085ca:	f1c0 0e0b 	rsb	lr, r0, #11
 80085ce:	fa24 f10e 	lsr.w	r1, r4, lr
 80085d2:	42b7      	cmp	r7, r6
 80085d4:	ea41 030c 	orr.w	r3, r1, ip
 80085d8:	bf34      	ite	cc
 80085da:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80085de:	2100      	movcs	r1, #0
 80085e0:	3015      	adds	r0, #21
 80085e2:	fa04 f000 	lsl.w	r0, r4, r0
 80085e6:	fa21 f10e 	lsr.w	r1, r1, lr
 80085ea:	ea40 0201 	orr.w	r2, r0, r1
 80085ee:	ec43 2b10 	vmov	d0, r2, r3
 80085f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f4:	42b7      	cmp	r7, r6
 80085f6:	bf3a      	itte	cc
 80085f8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80085fc:	f1a5 0608 	subcc.w	r6, r5, #8
 8008600:	2100      	movcs	r1, #0
 8008602:	380b      	subs	r0, #11
 8008604:	d017      	beq.n	8008636 <__b2d+0x92>
 8008606:	f1c0 0c20 	rsb	ip, r0, #32
 800860a:	fa04 f500 	lsl.w	r5, r4, r0
 800860e:	42be      	cmp	r6, r7
 8008610:	fa21 f40c 	lsr.w	r4, r1, ip
 8008614:	ea45 0504 	orr.w	r5, r5, r4
 8008618:	bf8c      	ite	hi
 800861a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800861e:	2400      	movls	r4, #0
 8008620:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008624:	fa01 f000 	lsl.w	r0, r1, r0
 8008628:	fa24 f40c 	lsr.w	r4, r4, ip
 800862c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008630:	ea40 0204 	orr.w	r2, r0, r4
 8008634:	e7db      	b.n	80085ee <__b2d+0x4a>
 8008636:	ea44 030c 	orr.w	r3, r4, ip
 800863a:	460a      	mov	r2, r1
 800863c:	e7d7      	b.n	80085ee <__b2d+0x4a>
 800863e:	bf00      	nop
 8008640:	3ff00000 	.word	0x3ff00000

08008644 <__d2b>:
 8008644:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008648:	4689      	mov	r9, r1
 800864a:	2101      	movs	r1, #1
 800864c:	ec57 6b10 	vmov	r6, r7, d0
 8008650:	4690      	mov	r8, r2
 8008652:	f7ff fc09 	bl	8007e68 <_Balloc>
 8008656:	4604      	mov	r4, r0
 8008658:	b930      	cbnz	r0, 8008668 <__d2b+0x24>
 800865a:	4602      	mov	r2, r0
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <__d2b+0xb0>)
 800865e:	4826      	ldr	r0, [pc, #152]	; (80086f8 <__d2b+0xb4>)
 8008660:	f240 310a 	movw	r1, #778	; 0x30a
 8008664:	f000 ff6c 	bl	8009540 <__assert_func>
 8008668:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800866c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008670:	bb35      	cbnz	r5, 80086c0 <__d2b+0x7c>
 8008672:	2e00      	cmp	r6, #0
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	d028      	beq.n	80086ca <__d2b+0x86>
 8008678:	4668      	mov	r0, sp
 800867a:	9600      	str	r6, [sp, #0]
 800867c:	f7ff fd06 	bl	800808c <__lo0bits>
 8008680:	9900      	ldr	r1, [sp, #0]
 8008682:	b300      	cbz	r0, 80086c6 <__d2b+0x82>
 8008684:	9a01      	ldr	r2, [sp, #4]
 8008686:	f1c0 0320 	rsb	r3, r0, #32
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	430b      	orrs	r3, r1
 8008690:	40c2      	lsrs	r2, r0
 8008692:	6163      	str	r3, [r4, #20]
 8008694:	9201      	str	r2, [sp, #4]
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	61a3      	str	r3, [r4, #24]
 800869a:	2b00      	cmp	r3, #0
 800869c:	bf14      	ite	ne
 800869e:	2202      	movne	r2, #2
 80086a0:	2201      	moveq	r2, #1
 80086a2:	6122      	str	r2, [r4, #16]
 80086a4:	b1d5      	cbz	r5, 80086dc <__d2b+0x98>
 80086a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086aa:	4405      	add	r5, r0
 80086ac:	f8c9 5000 	str.w	r5, [r9]
 80086b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80086b4:	f8c8 0000 	str.w	r0, [r8]
 80086b8:	4620      	mov	r0, r4
 80086ba:	b003      	add	sp, #12
 80086bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086c4:	e7d5      	b.n	8008672 <__d2b+0x2e>
 80086c6:	6161      	str	r1, [r4, #20]
 80086c8:	e7e5      	b.n	8008696 <__d2b+0x52>
 80086ca:	a801      	add	r0, sp, #4
 80086cc:	f7ff fcde 	bl	800808c <__lo0bits>
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	6163      	str	r3, [r4, #20]
 80086d4:	2201      	movs	r2, #1
 80086d6:	6122      	str	r2, [r4, #16]
 80086d8:	3020      	adds	r0, #32
 80086da:	e7e3      	b.n	80086a4 <__d2b+0x60>
 80086dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086e4:	f8c9 0000 	str.w	r0, [r9]
 80086e8:	6918      	ldr	r0, [r3, #16]
 80086ea:	f7ff fcaf 	bl	800804c <__hi0bits>
 80086ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086f2:	e7df      	b.n	80086b4 <__d2b+0x70>
 80086f4:	0800a538 	.word	0x0800a538
 80086f8:	0800a5c4 	.word	0x0800a5c4

080086fc <__ratio>:
 80086fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	4688      	mov	r8, r1
 8008702:	4669      	mov	r1, sp
 8008704:	4681      	mov	r9, r0
 8008706:	f7ff ff4d 	bl	80085a4 <__b2d>
 800870a:	a901      	add	r1, sp, #4
 800870c:	4640      	mov	r0, r8
 800870e:	ec55 4b10 	vmov	r4, r5, d0
 8008712:	f7ff ff47 	bl	80085a4 <__b2d>
 8008716:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800871a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800871e:	eba3 0c02 	sub.w	ip, r3, r2
 8008722:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800872c:	ec51 0b10 	vmov	r0, r1, d0
 8008730:	2b00      	cmp	r3, #0
 8008732:	bfd6      	itet	le
 8008734:	460a      	movle	r2, r1
 8008736:	462a      	movgt	r2, r5
 8008738:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800873c:	468b      	mov	fp, r1
 800873e:	462f      	mov	r7, r5
 8008740:	bfd4      	ite	le
 8008742:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008746:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800874a:	4620      	mov	r0, r4
 800874c:	ee10 2a10 	vmov	r2, s0
 8008750:	465b      	mov	r3, fp
 8008752:	4639      	mov	r1, r7
 8008754:	f7f8 f892 	bl	800087c <__aeabi_ddiv>
 8008758:	ec41 0b10 	vmov	d0, r0, r1
 800875c:	b003      	add	sp, #12
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008762 <__copybits>:
 8008762:	3901      	subs	r1, #1
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	1149      	asrs	r1, r1, #5
 8008768:	6914      	ldr	r4, [r2, #16]
 800876a:	3101      	adds	r1, #1
 800876c:	f102 0314 	add.w	r3, r2, #20
 8008770:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008774:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008778:	1f05      	subs	r5, r0, #4
 800877a:	42a3      	cmp	r3, r4
 800877c:	d30c      	bcc.n	8008798 <__copybits+0x36>
 800877e:	1aa3      	subs	r3, r4, r2
 8008780:	3b11      	subs	r3, #17
 8008782:	f023 0303 	bic.w	r3, r3, #3
 8008786:	3211      	adds	r2, #17
 8008788:	42a2      	cmp	r2, r4
 800878a:	bf88      	it	hi
 800878c:	2300      	movhi	r3, #0
 800878e:	4418      	add	r0, r3
 8008790:	2300      	movs	r3, #0
 8008792:	4288      	cmp	r0, r1
 8008794:	d305      	bcc.n	80087a2 <__copybits+0x40>
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	f853 6b04 	ldr.w	r6, [r3], #4
 800879c:	f845 6f04 	str.w	r6, [r5, #4]!
 80087a0:	e7eb      	b.n	800877a <__copybits+0x18>
 80087a2:	f840 3b04 	str.w	r3, [r0], #4
 80087a6:	e7f4      	b.n	8008792 <__copybits+0x30>

080087a8 <__any_on>:
 80087a8:	f100 0214 	add.w	r2, r0, #20
 80087ac:	6900      	ldr	r0, [r0, #16]
 80087ae:	114b      	asrs	r3, r1, #5
 80087b0:	4298      	cmp	r0, r3
 80087b2:	b510      	push	{r4, lr}
 80087b4:	db11      	blt.n	80087da <__any_on+0x32>
 80087b6:	dd0a      	ble.n	80087ce <__any_on+0x26>
 80087b8:	f011 011f 	ands.w	r1, r1, #31
 80087bc:	d007      	beq.n	80087ce <__any_on+0x26>
 80087be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087c2:	fa24 f001 	lsr.w	r0, r4, r1
 80087c6:	fa00 f101 	lsl.w	r1, r0, r1
 80087ca:	428c      	cmp	r4, r1
 80087cc:	d10b      	bne.n	80087e6 <__any_on+0x3e>
 80087ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d803      	bhi.n	80087de <__any_on+0x36>
 80087d6:	2000      	movs	r0, #0
 80087d8:	bd10      	pop	{r4, pc}
 80087da:	4603      	mov	r3, r0
 80087dc:	e7f7      	b.n	80087ce <__any_on+0x26>
 80087de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087e2:	2900      	cmp	r1, #0
 80087e4:	d0f5      	beq.n	80087d2 <__any_on+0x2a>
 80087e6:	2001      	movs	r0, #1
 80087e8:	e7f6      	b.n	80087d8 <__any_on+0x30>

080087ea <_calloc_r>:
 80087ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087ec:	fba1 2402 	umull	r2, r4, r1, r2
 80087f0:	b94c      	cbnz	r4, 8008806 <_calloc_r+0x1c>
 80087f2:	4611      	mov	r1, r2
 80087f4:	9201      	str	r2, [sp, #4]
 80087f6:	f000 f87b 	bl	80088f0 <_malloc_r>
 80087fa:	9a01      	ldr	r2, [sp, #4]
 80087fc:	4605      	mov	r5, r0
 80087fe:	b930      	cbnz	r0, 800880e <_calloc_r+0x24>
 8008800:	4628      	mov	r0, r5
 8008802:	b003      	add	sp, #12
 8008804:	bd30      	pop	{r4, r5, pc}
 8008806:	220c      	movs	r2, #12
 8008808:	6002      	str	r2, [r0, #0]
 800880a:	2500      	movs	r5, #0
 800880c:	e7f8      	b.n	8008800 <_calloc_r+0x16>
 800880e:	4621      	mov	r1, r4
 8008810:	f7fc fb18 	bl	8004e44 <memset>
 8008814:	e7f4      	b.n	8008800 <_calloc_r+0x16>
	...

08008818 <_free_r>:
 8008818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800881a:	2900      	cmp	r1, #0
 800881c:	d044      	beq.n	80088a8 <_free_r+0x90>
 800881e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008822:	9001      	str	r0, [sp, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f1a1 0404 	sub.w	r4, r1, #4
 800882a:	bfb8      	it	lt
 800882c:	18e4      	addlt	r4, r4, r3
 800882e:	f001 f88b 	bl	8009948 <__malloc_lock>
 8008832:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <_free_r+0x94>)
 8008834:	9801      	ldr	r0, [sp, #4]
 8008836:	6813      	ldr	r3, [r2, #0]
 8008838:	b933      	cbnz	r3, 8008848 <_free_r+0x30>
 800883a:	6063      	str	r3, [r4, #4]
 800883c:	6014      	str	r4, [r2, #0]
 800883e:	b003      	add	sp, #12
 8008840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008844:	f001 b886 	b.w	8009954 <__malloc_unlock>
 8008848:	42a3      	cmp	r3, r4
 800884a:	d908      	bls.n	800885e <_free_r+0x46>
 800884c:	6825      	ldr	r5, [r4, #0]
 800884e:	1961      	adds	r1, r4, r5
 8008850:	428b      	cmp	r3, r1
 8008852:	bf01      	itttt	eq
 8008854:	6819      	ldreq	r1, [r3, #0]
 8008856:	685b      	ldreq	r3, [r3, #4]
 8008858:	1949      	addeq	r1, r1, r5
 800885a:	6021      	streq	r1, [r4, #0]
 800885c:	e7ed      	b.n	800883a <_free_r+0x22>
 800885e:	461a      	mov	r2, r3
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	b10b      	cbz	r3, 8008868 <_free_r+0x50>
 8008864:	42a3      	cmp	r3, r4
 8008866:	d9fa      	bls.n	800885e <_free_r+0x46>
 8008868:	6811      	ldr	r1, [r2, #0]
 800886a:	1855      	adds	r5, r2, r1
 800886c:	42a5      	cmp	r5, r4
 800886e:	d10b      	bne.n	8008888 <_free_r+0x70>
 8008870:	6824      	ldr	r4, [r4, #0]
 8008872:	4421      	add	r1, r4
 8008874:	1854      	adds	r4, r2, r1
 8008876:	42a3      	cmp	r3, r4
 8008878:	6011      	str	r1, [r2, #0]
 800887a:	d1e0      	bne.n	800883e <_free_r+0x26>
 800887c:	681c      	ldr	r4, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	6053      	str	r3, [r2, #4]
 8008882:	4421      	add	r1, r4
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	e7da      	b.n	800883e <_free_r+0x26>
 8008888:	d902      	bls.n	8008890 <_free_r+0x78>
 800888a:	230c      	movs	r3, #12
 800888c:	6003      	str	r3, [r0, #0]
 800888e:	e7d6      	b.n	800883e <_free_r+0x26>
 8008890:	6825      	ldr	r5, [r4, #0]
 8008892:	1961      	adds	r1, r4, r5
 8008894:	428b      	cmp	r3, r1
 8008896:	bf04      	itt	eq
 8008898:	6819      	ldreq	r1, [r3, #0]
 800889a:	685b      	ldreq	r3, [r3, #4]
 800889c:	6063      	str	r3, [r4, #4]
 800889e:	bf04      	itt	eq
 80088a0:	1949      	addeq	r1, r1, r5
 80088a2:	6021      	streq	r1, [r4, #0]
 80088a4:	6054      	str	r4, [r2, #4]
 80088a6:	e7ca      	b.n	800883e <_free_r+0x26>
 80088a8:	b003      	add	sp, #12
 80088aa:	bd30      	pop	{r4, r5, pc}
 80088ac:	20000c8c 	.word	0x20000c8c

080088b0 <sbrk_aligned>:
 80088b0:	b570      	push	{r4, r5, r6, lr}
 80088b2:	4e0e      	ldr	r6, [pc, #56]	; (80088ec <sbrk_aligned+0x3c>)
 80088b4:	460c      	mov	r4, r1
 80088b6:	6831      	ldr	r1, [r6, #0]
 80088b8:	4605      	mov	r5, r0
 80088ba:	b911      	cbnz	r1, 80088c2 <sbrk_aligned+0x12>
 80088bc:	f000 fd28 	bl	8009310 <_sbrk_r>
 80088c0:	6030      	str	r0, [r6, #0]
 80088c2:	4621      	mov	r1, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 fd23 	bl	8009310 <_sbrk_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d00a      	beq.n	80088e4 <sbrk_aligned+0x34>
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d007      	beq.n	80088e8 <sbrk_aligned+0x38>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4628      	mov	r0, r5
 80088dc:	f000 fd18 	bl	8009310 <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d101      	bne.n	80088e8 <sbrk_aligned+0x38>
 80088e4:	f04f 34ff 	mov.w	r4, #4294967295
 80088e8:	4620      	mov	r0, r4
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	20000c90 	.word	0x20000c90

080088f0 <_malloc_r>:
 80088f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f4:	1ccd      	adds	r5, r1, #3
 80088f6:	f025 0503 	bic.w	r5, r5, #3
 80088fa:	3508      	adds	r5, #8
 80088fc:	2d0c      	cmp	r5, #12
 80088fe:	bf38      	it	cc
 8008900:	250c      	movcc	r5, #12
 8008902:	2d00      	cmp	r5, #0
 8008904:	4607      	mov	r7, r0
 8008906:	db01      	blt.n	800890c <_malloc_r+0x1c>
 8008908:	42a9      	cmp	r1, r5
 800890a:	d905      	bls.n	8008918 <_malloc_r+0x28>
 800890c:	230c      	movs	r3, #12
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	2600      	movs	r6, #0
 8008912:	4630      	mov	r0, r6
 8008914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008918:	4e2e      	ldr	r6, [pc, #184]	; (80089d4 <_malloc_r+0xe4>)
 800891a:	f001 f815 	bl	8009948 <__malloc_lock>
 800891e:	6833      	ldr	r3, [r6, #0]
 8008920:	461c      	mov	r4, r3
 8008922:	bb34      	cbnz	r4, 8008972 <_malloc_r+0x82>
 8008924:	4629      	mov	r1, r5
 8008926:	4638      	mov	r0, r7
 8008928:	f7ff ffc2 	bl	80088b0 <sbrk_aligned>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	4604      	mov	r4, r0
 8008930:	d14d      	bne.n	80089ce <_malloc_r+0xde>
 8008932:	6834      	ldr	r4, [r6, #0]
 8008934:	4626      	mov	r6, r4
 8008936:	2e00      	cmp	r6, #0
 8008938:	d140      	bne.n	80089bc <_malloc_r+0xcc>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	4631      	mov	r1, r6
 800893e:	4638      	mov	r0, r7
 8008940:	eb04 0803 	add.w	r8, r4, r3
 8008944:	f000 fce4 	bl	8009310 <_sbrk_r>
 8008948:	4580      	cmp	r8, r0
 800894a:	d13a      	bne.n	80089c2 <_malloc_r+0xd2>
 800894c:	6821      	ldr	r1, [r4, #0]
 800894e:	3503      	adds	r5, #3
 8008950:	1a6d      	subs	r5, r5, r1
 8008952:	f025 0503 	bic.w	r5, r5, #3
 8008956:	3508      	adds	r5, #8
 8008958:	2d0c      	cmp	r5, #12
 800895a:	bf38      	it	cc
 800895c:	250c      	movcc	r5, #12
 800895e:	4629      	mov	r1, r5
 8008960:	4638      	mov	r0, r7
 8008962:	f7ff ffa5 	bl	80088b0 <sbrk_aligned>
 8008966:	3001      	adds	r0, #1
 8008968:	d02b      	beq.n	80089c2 <_malloc_r+0xd2>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	442b      	add	r3, r5
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	e00e      	b.n	8008990 <_malloc_r+0xa0>
 8008972:	6822      	ldr	r2, [r4, #0]
 8008974:	1b52      	subs	r2, r2, r5
 8008976:	d41e      	bmi.n	80089b6 <_malloc_r+0xc6>
 8008978:	2a0b      	cmp	r2, #11
 800897a:	d916      	bls.n	80089aa <_malloc_r+0xba>
 800897c:	1961      	adds	r1, r4, r5
 800897e:	42a3      	cmp	r3, r4
 8008980:	6025      	str	r5, [r4, #0]
 8008982:	bf18      	it	ne
 8008984:	6059      	strne	r1, [r3, #4]
 8008986:	6863      	ldr	r3, [r4, #4]
 8008988:	bf08      	it	eq
 800898a:	6031      	streq	r1, [r6, #0]
 800898c:	5162      	str	r2, [r4, r5]
 800898e:	604b      	str	r3, [r1, #4]
 8008990:	4638      	mov	r0, r7
 8008992:	f104 060b 	add.w	r6, r4, #11
 8008996:	f000 ffdd 	bl	8009954 <__malloc_unlock>
 800899a:	f026 0607 	bic.w	r6, r6, #7
 800899e:	1d23      	adds	r3, r4, #4
 80089a0:	1af2      	subs	r2, r6, r3
 80089a2:	d0b6      	beq.n	8008912 <_malloc_r+0x22>
 80089a4:	1b9b      	subs	r3, r3, r6
 80089a6:	50a3      	str	r3, [r4, r2]
 80089a8:	e7b3      	b.n	8008912 <_malloc_r+0x22>
 80089aa:	6862      	ldr	r2, [r4, #4]
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	bf0c      	ite	eq
 80089b0:	6032      	streq	r2, [r6, #0]
 80089b2:	605a      	strne	r2, [r3, #4]
 80089b4:	e7ec      	b.n	8008990 <_malloc_r+0xa0>
 80089b6:	4623      	mov	r3, r4
 80089b8:	6864      	ldr	r4, [r4, #4]
 80089ba:	e7b2      	b.n	8008922 <_malloc_r+0x32>
 80089bc:	4634      	mov	r4, r6
 80089be:	6876      	ldr	r6, [r6, #4]
 80089c0:	e7b9      	b.n	8008936 <_malloc_r+0x46>
 80089c2:	230c      	movs	r3, #12
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4638      	mov	r0, r7
 80089c8:	f000 ffc4 	bl	8009954 <__malloc_unlock>
 80089cc:	e7a1      	b.n	8008912 <_malloc_r+0x22>
 80089ce:	6025      	str	r5, [r4, #0]
 80089d0:	e7de      	b.n	8008990 <_malloc_r+0xa0>
 80089d2:	bf00      	nop
 80089d4:	20000c8c 	.word	0x20000c8c

080089d8 <__ssputs_r>:
 80089d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089dc:	688e      	ldr	r6, [r1, #8]
 80089de:	429e      	cmp	r6, r3
 80089e0:	4682      	mov	sl, r0
 80089e2:	460c      	mov	r4, r1
 80089e4:	4690      	mov	r8, r2
 80089e6:	461f      	mov	r7, r3
 80089e8:	d838      	bhi.n	8008a5c <__ssputs_r+0x84>
 80089ea:	898a      	ldrh	r2, [r1, #12]
 80089ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089f0:	d032      	beq.n	8008a58 <__ssputs_r+0x80>
 80089f2:	6825      	ldr	r5, [r4, #0]
 80089f4:	6909      	ldr	r1, [r1, #16]
 80089f6:	eba5 0901 	sub.w	r9, r5, r1
 80089fa:	6965      	ldr	r5, [r4, #20]
 80089fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a04:	3301      	adds	r3, #1
 8008a06:	444b      	add	r3, r9
 8008a08:	106d      	asrs	r5, r5, #1
 8008a0a:	429d      	cmp	r5, r3
 8008a0c:	bf38      	it	cc
 8008a0e:	461d      	movcc	r5, r3
 8008a10:	0553      	lsls	r3, r2, #21
 8008a12:	d531      	bpl.n	8008a78 <__ssputs_r+0xa0>
 8008a14:	4629      	mov	r1, r5
 8008a16:	f7ff ff6b 	bl	80088f0 <_malloc_r>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	b950      	cbnz	r0, 8008a34 <__ssputs_r+0x5c>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	f8ca 3000 	str.w	r3, [sl]
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a34:	6921      	ldr	r1, [r4, #16]
 8008a36:	464a      	mov	r2, r9
 8008a38:	f7ff fa08 	bl	8007e4c <memcpy>
 8008a3c:	89a3      	ldrh	r3, [r4, #12]
 8008a3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	6126      	str	r6, [r4, #16]
 8008a4a:	6165      	str	r5, [r4, #20]
 8008a4c:	444e      	add	r6, r9
 8008a4e:	eba5 0509 	sub.w	r5, r5, r9
 8008a52:	6026      	str	r6, [r4, #0]
 8008a54:	60a5      	str	r5, [r4, #8]
 8008a56:	463e      	mov	r6, r7
 8008a58:	42be      	cmp	r6, r7
 8008a5a:	d900      	bls.n	8008a5e <__ssputs_r+0x86>
 8008a5c:	463e      	mov	r6, r7
 8008a5e:	6820      	ldr	r0, [r4, #0]
 8008a60:	4632      	mov	r2, r6
 8008a62:	4641      	mov	r1, r8
 8008a64:	f000 ff56 	bl	8009914 <memmove>
 8008a68:	68a3      	ldr	r3, [r4, #8]
 8008a6a:	1b9b      	subs	r3, r3, r6
 8008a6c:	60a3      	str	r3, [r4, #8]
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	4433      	add	r3, r6
 8008a72:	6023      	str	r3, [r4, #0]
 8008a74:	2000      	movs	r0, #0
 8008a76:	e7db      	b.n	8008a30 <__ssputs_r+0x58>
 8008a78:	462a      	mov	r2, r5
 8008a7a:	f000 ff71 	bl	8009960 <_realloc_r>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d1e1      	bne.n	8008a48 <__ssputs_r+0x70>
 8008a84:	6921      	ldr	r1, [r4, #16]
 8008a86:	4650      	mov	r0, sl
 8008a88:	f7ff fec6 	bl	8008818 <_free_r>
 8008a8c:	e7c7      	b.n	8008a1e <__ssputs_r+0x46>
	...

08008a90 <_svfiprintf_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	4698      	mov	r8, r3
 8008a96:	898b      	ldrh	r3, [r1, #12]
 8008a98:	061b      	lsls	r3, r3, #24
 8008a9a:	b09d      	sub	sp, #116	; 0x74
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	d50e      	bpl.n	8008ac2 <_svfiprintf_r+0x32>
 8008aa4:	690b      	ldr	r3, [r1, #16]
 8008aa6:	b963      	cbnz	r3, 8008ac2 <_svfiprintf_r+0x32>
 8008aa8:	2140      	movs	r1, #64	; 0x40
 8008aaa:	f7ff ff21 	bl	80088f0 <_malloc_r>
 8008aae:	6028      	str	r0, [r5, #0]
 8008ab0:	6128      	str	r0, [r5, #16]
 8008ab2:	b920      	cbnz	r0, 8008abe <_svfiprintf_r+0x2e>
 8008ab4:	230c      	movs	r3, #12
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	e0d1      	b.n	8008c62 <_svfiprintf_r+0x1d2>
 8008abe:	2340      	movs	r3, #64	; 0x40
 8008ac0:	616b      	str	r3, [r5, #20]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ac6:	2320      	movs	r3, #32
 8008ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ad0:	2330      	movs	r3, #48	; 0x30
 8008ad2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c7c <_svfiprintf_r+0x1ec>
 8008ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ada:	f04f 0901 	mov.w	r9, #1
 8008ade:	4623      	mov	r3, r4
 8008ae0:	469a      	mov	sl, r3
 8008ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ae6:	b10a      	cbz	r2, 8008aec <_svfiprintf_r+0x5c>
 8008ae8:	2a25      	cmp	r2, #37	; 0x25
 8008aea:	d1f9      	bne.n	8008ae0 <_svfiprintf_r+0x50>
 8008aec:	ebba 0b04 	subs.w	fp, sl, r4
 8008af0:	d00b      	beq.n	8008b0a <_svfiprintf_r+0x7a>
 8008af2:	465b      	mov	r3, fp
 8008af4:	4622      	mov	r2, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff ff6d 	bl	80089d8 <__ssputs_r>
 8008afe:	3001      	adds	r0, #1
 8008b00:	f000 80aa 	beq.w	8008c58 <_svfiprintf_r+0x1c8>
 8008b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b06:	445a      	add	r2, fp
 8008b08:	9209      	str	r2, [sp, #36]	; 0x24
 8008b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 80a2 	beq.w	8008c58 <_svfiprintf_r+0x1c8>
 8008b14:	2300      	movs	r3, #0
 8008b16:	f04f 32ff 	mov.w	r2, #4294967295
 8008b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b1e:	f10a 0a01 	add.w	sl, sl, #1
 8008b22:	9304      	str	r3, [sp, #16]
 8008b24:	9307      	str	r3, [sp, #28]
 8008b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b2c:	4654      	mov	r4, sl
 8008b2e:	2205      	movs	r2, #5
 8008b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b34:	4851      	ldr	r0, [pc, #324]	; (8008c7c <_svfiprintf_r+0x1ec>)
 8008b36:	f7f7 fb6b 	bl	8000210 <memchr>
 8008b3a:	9a04      	ldr	r2, [sp, #16]
 8008b3c:	b9d8      	cbnz	r0, 8008b76 <_svfiprintf_r+0xe6>
 8008b3e:	06d0      	lsls	r0, r2, #27
 8008b40:	bf44      	itt	mi
 8008b42:	2320      	movmi	r3, #32
 8008b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b48:	0711      	lsls	r1, r2, #28
 8008b4a:	bf44      	itt	mi
 8008b4c:	232b      	movmi	r3, #43	; 0x2b
 8008b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b52:	f89a 3000 	ldrb.w	r3, [sl]
 8008b56:	2b2a      	cmp	r3, #42	; 0x2a
 8008b58:	d015      	beq.n	8008b86 <_svfiprintf_r+0xf6>
 8008b5a:	9a07      	ldr	r2, [sp, #28]
 8008b5c:	4654      	mov	r4, sl
 8008b5e:	2000      	movs	r0, #0
 8008b60:	f04f 0c0a 	mov.w	ip, #10
 8008b64:	4621      	mov	r1, r4
 8008b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b6a:	3b30      	subs	r3, #48	; 0x30
 8008b6c:	2b09      	cmp	r3, #9
 8008b6e:	d94e      	bls.n	8008c0e <_svfiprintf_r+0x17e>
 8008b70:	b1b0      	cbz	r0, 8008ba0 <_svfiprintf_r+0x110>
 8008b72:	9207      	str	r2, [sp, #28]
 8008b74:	e014      	b.n	8008ba0 <_svfiprintf_r+0x110>
 8008b76:	eba0 0308 	sub.w	r3, r0, r8
 8008b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	46a2      	mov	sl, r4
 8008b84:	e7d2      	b.n	8008b2c <_svfiprintf_r+0x9c>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	1d19      	adds	r1, r3, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	9103      	str	r1, [sp, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bfbb      	ittet	lt
 8008b92:	425b      	neglt	r3, r3
 8008b94:	f042 0202 	orrlt.w	r2, r2, #2
 8008b98:	9307      	strge	r3, [sp, #28]
 8008b9a:	9307      	strlt	r3, [sp, #28]
 8008b9c:	bfb8      	it	lt
 8008b9e:	9204      	strlt	r2, [sp, #16]
 8008ba0:	7823      	ldrb	r3, [r4, #0]
 8008ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8008ba4:	d10c      	bne.n	8008bc0 <_svfiprintf_r+0x130>
 8008ba6:	7863      	ldrb	r3, [r4, #1]
 8008ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8008baa:	d135      	bne.n	8008c18 <_svfiprintf_r+0x188>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	1d1a      	adds	r2, r3, #4
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	9203      	str	r2, [sp, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	bfb8      	it	lt
 8008bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bbc:	3402      	adds	r4, #2
 8008bbe:	9305      	str	r3, [sp, #20]
 8008bc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c8c <_svfiprintf_r+0x1fc>
 8008bc4:	7821      	ldrb	r1, [r4, #0]
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	4650      	mov	r0, sl
 8008bca:	f7f7 fb21 	bl	8000210 <memchr>
 8008bce:	b140      	cbz	r0, 8008be2 <_svfiprintf_r+0x152>
 8008bd0:	2340      	movs	r3, #64	; 0x40
 8008bd2:	eba0 000a 	sub.w	r0, r0, sl
 8008bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	4303      	orrs	r3, r0
 8008bde:	3401      	adds	r4, #1
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008be6:	4826      	ldr	r0, [pc, #152]	; (8008c80 <_svfiprintf_r+0x1f0>)
 8008be8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bec:	2206      	movs	r2, #6
 8008bee:	f7f7 fb0f 	bl	8000210 <memchr>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d038      	beq.n	8008c68 <_svfiprintf_r+0x1d8>
 8008bf6:	4b23      	ldr	r3, [pc, #140]	; (8008c84 <_svfiprintf_r+0x1f4>)
 8008bf8:	bb1b      	cbnz	r3, 8008c42 <_svfiprintf_r+0x1b2>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	3307      	adds	r3, #7
 8008bfe:	f023 0307 	bic.w	r3, r3, #7
 8008c02:	3308      	adds	r3, #8
 8008c04:	9303      	str	r3, [sp, #12]
 8008c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c08:	4433      	add	r3, r6
 8008c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c0c:	e767      	b.n	8008ade <_svfiprintf_r+0x4e>
 8008c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c12:	460c      	mov	r4, r1
 8008c14:	2001      	movs	r0, #1
 8008c16:	e7a5      	b.n	8008b64 <_svfiprintf_r+0xd4>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	3401      	adds	r4, #1
 8008c1c:	9305      	str	r3, [sp, #20]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	f04f 0c0a 	mov.w	ip, #10
 8008c24:	4620      	mov	r0, r4
 8008c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c2a:	3a30      	subs	r2, #48	; 0x30
 8008c2c:	2a09      	cmp	r2, #9
 8008c2e:	d903      	bls.n	8008c38 <_svfiprintf_r+0x1a8>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d0c5      	beq.n	8008bc0 <_svfiprintf_r+0x130>
 8008c34:	9105      	str	r1, [sp, #20]
 8008c36:	e7c3      	b.n	8008bc0 <_svfiprintf_r+0x130>
 8008c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e7f0      	b.n	8008c24 <_svfiprintf_r+0x194>
 8008c42:	ab03      	add	r3, sp, #12
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	462a      	mov	r2, r5
 8008c48:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <_svfiprintf_r+0x1f8>)
 8008c4a:	a904      	add	r1, sp, #16
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f7fc f9a1 	bl	8004f94 <_printf_float>
 8008c52:	1c42      	adds	r2, r0, #1
 8008c54:	4606      	mov	r6, r0
 8008c56:	d1d6      	bne.n	8008c06 <_svfiprintf_r+0x176>
 8008c58:	89ab      	ldrh	r3, [r5, #12]
 8008c5a:	065b      	lsls	r3, r3, #25
 8008c5c:	f53f af2c 	bmi.w	8008ab8 <_svfiprintf_r+0x28>
 8008c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c62:	b01d      	add	sp, #116	; 0x74
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c68:	ab03      	add	r3, sp, #12
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <_svfiprintf_r+0x1f8>)
 8008c70:	a904      	add	r1, sp, #16
 8008c72:	4638      	mov	r0, r7
 8008c74:	f7fc fc32 	bl	80054dc <_printf_i>
 8008c78:	e7eb      	b.n	8008c52 <_svfiprintf_r+0x1c2>
 8008c7a:	bf00      	nop
 8008c7c:	0800a71c 	.word	0x0800a71c
 8008c80:	0800a726 	.word	0x0800a726
 8008c84:	08004f95 	.word	0x08004f95
 8008c88:	080089d9 	.word	0x080089d9
 8008c8c:	0800a722 	.word	0x0800a722

08008c90 <_sungetc_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	1c4b      	adds	r3, r1, #1
 8008c94:	4614      	mov	r4, r2
 8008c96:	d103      	bne.n	8008ca0 <_sungetc_r+0x10>
 8008c98:	f04f 35ff 	mov.w	r5, #4294967295
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	8993      	ldrh	r3, [r2, #12]
 8008ca2:	f023 0320 	bic.w	r3, r3, #32
 8008ca6:	8193      	strh	r3, [r2, #12]
 8008ca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008caa:	6852      	ldr	r2, [r2, #4]
 8008cac:	b2cd      	uxtb	r5, r1
 8008cae:	b18b      	cbz	r3, 8008cd4 <_sungetc_r+0x44>
 8008cb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	dd08      	ble.n	8008cc8 <_sungetc_r+0x38>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	1e5a      	subs	r2, r3, #1
 8008cba:	6022      	str	r2, [r4, #0]
 8008cbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	6063      	str	r3, [r4, #4]
 8008cc6:	e7e9      	b.n	8008c9c <_sungetc_r+0xc>
 8008cc8:	4621      	mov	r1, r4
 8008cca:	f000 fbf1 	bl	80094b0 <__submore>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d0f1      	beq.n	8008cb6 <_sungetc_r+0x26>
 8008cd2:	e7e1      	b.n	8008c98 <_sungetc_r+0x8>
 8008cd4:	6921      	ldr	r1, [r4, #16]
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	b151      	cbz	r1, 8008cf0 <_sungetc_r+0x60>
 8008cda:	4299      	cmp	r1, r3
 8008cdc:	d208      	bcs.n	8008cf0 <_sungetc_r+0x60>
 8008cde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008ce2:	42a9      	cmp	r1, r5
 8008ce4:	d104      	bne.n	8008cf0 <_sungetc_r+0x60>
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	3201      	adds	r2, #1
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	6062      	str	r2, [r4, #4]
 8008cee:	e7d5      	b.n	8008c9c <_sungetc_r+0xc>
 8008cf0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cf8:	6363      	str	r3, [r4, #52]	; 0x34
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cfe:	4623      	mov	r3, r4
 8008d00:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	2301      	movs	r3, #1
 8008d08:	e7dc      	b.n	8008cc4 <_sungetc_r+0x34>

08008d0a <__ssrefill_r>:
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008d10:	b169      	cbz	r1, 8008d2e <__ssrefill_r+0x24>
 8008d12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d16:	4299      	cmp	r1, r3
 8008d18:	d001      	beq.n	8008d1e <__ssrefill_r+0x14>
 8008d1a:	f7ff fd7d 	bl	8008818 <_free_r>
 8008d1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d20:	6063      	str	r3, [r4, #4]
 8008d22:	2000      	movs	r0, #0
 8008d24:	6360      	str	r0, [r4, #52]	; 0x34
 8008d26:	b113      	cbz	r3, 8008d2e <__ssrefill_r+0x24>
 8008d28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	6063      	str	r3, [r4, #4]
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	f043 0320 	orr.w	r3, r3, #32
 8008d3c:	81a3      	strh	r3, [r4, #12]
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d42:	e7f3      	b.n	8008d2c <__ssrefill_r+0x22>

08008d44 <__ssvfiscanf_r>:
 8008d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	460c      	mov	r4, r1
 8008d4a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008d4e:	2100      	movs	r1, #0
 8008d50:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008d54:	49a6      	ldr	r1, [pc, #664]	; (8008ff0 <__ssvfiscanf_r+0x2ac>)
 8008d56:	91a0      	str	r1, [sp, #640]	; 0x280
 8008d58:	f10d 0804 	add.w	r8, sp, #4
 8008d5c:	49a5      	ldr	r1, [pc, #660]	; (8008ff4 <__ssvfiscanf_r+0x2b0>)
 8008d5e:	4fa6      	ldr	r7, [pc, #664]	; (8008ff8 <__ssvfiscanf_r+0x2b4>)
 8008d60:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008ffc <__ssvfiscanf_r+0x2b8>
 8008d64:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008d68:	4606      	mov	r6, r0
 8008d6a:	91a1      	str	r1, [sp, #644]	; 0x284
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	7813      	ldrb	r3, [r2, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 815a 	beq.w	800902a <__ssvfiscanf_r+0x2e6>
 8008d76:	5dd9      	ldrb	r1, [r3, r7]
 8008d78:	f011 0108 	ands.w	r1, r1, #8
 8008d7c:	f102 0501 	add.w	r5, r2, #1
 8008d80:	d019      	beq.n	8008db6 <__ssvfiscanf_r+0x72>
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dd0f      	ble.n	8008da8 <__ssvfiscanf_r+0x64>
 8008d88:	6823      	ldr	r3, [r4, #0]
 8008d8a:	781a      	ldrb	r2, [r3, #0]
 8008d8c:	5cba      	ldrb	r2, [r7, r2]
 8008d8e:	0712      	lsls	r2, r2, #28
 8008d90:	d401      	bmi.n	8008d96 <__ssvfiscanf_r+0x52>
 8008d92:	462a      	mov	r2, r5
 8008d94:	e7eb      	b.n	8008d6e <__ssvfiscanf_r+0x2a>
 8008d96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008d98:	3201      	adds	r2, #1
 8008d9a:	9245      	str	r2, [sp, #276]	; 0x114
 8008d9c:	6862      	ldr	r2, [r4, #4]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	3a01      	subs	r2, #1
 8008da2:	6062      	str	r2, [r4, #4]
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	e7ec      	b.n	8008d82 <__ssvfiscanf_r+0x3e>
 8008da8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008daa:	4621      	mov	r1, r4
 8008dac:	4630      	mov	r0, r6
 8008dae:	4798      	blx	r3
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d0e9      	beq.n	8008d88 <__ssvfiscanf_r+0x44>
 8008db4:	e7ed      	b.n	8008d92 <__ssvfiscanf_r+0x4e>
 8008db6:	2b25      	cmp	r3, #37	; 0x25
 8008db8:	d012      	beq.n	8008de0 <__ssvfiscanf_r+0x9c>
 8008dba:	469a      	mov	sl, r3
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f340 8091 	ble.w	8008ee6 <__ssvfiscanf_r+0x1a2>
 8008dc4:	6822      	ldr	r2, [r4, #0]
 8008dc6:	7813      	ldrb	r3, [r2, #0]
 8008dc8:	4553      	cmp	r3, sl
 8008dca:	f040 812e 	bne.w	800902a <__ssvfiscanf_r+0x2e6>
 8008dce:	6863      	ldr	r3, [r4, #4]
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	6063      	str	r3, [r4, #4]
 8008dd4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008dd6:	3201      	adds	r2, #1
 8008dd8:	3301      	adds	r3, #1
 8008dda:	6022      	str	r2, [r4, #0]
 8008ddc:	9345      	str	r3, [sp, #276]	; 0x114
 8008dde:	e7d8      	b.n	8008d92 <__ssvfiscanf_r+0x4e>
 8008de0:	9141      	str	r1, [sp, #260]	; 0x104
 8008de2:	9143      	str	r1, [sp, #268]	; 0x10c
 8008de4:	7853      	ldrb	r3, [r2, #1]
 8008de6:	2b2a      	cmp	r3, #42	; 0x2a
 8008de8:	bf02      	ittt	eq
 8008dea:	2310      	moveq	r3, #16
 8008dec:	1c95      	addeq	r5, r2, #2
 8008dee:	9341      	streq	r3, [sp, #260]	; 0x104
 8008df0:	220a      	movs	r2, #10
 8008df2:	46aa      	mov	sl, r5
 8008df4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008df8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d91d      	bls.n	8008e3c <__ssvfiscanf_r+0xf8>
 8008e00:	487e      	ldr	r0, [pc, #504]	; (8008ffc <__ssvfiscanf_r+0x2b8>)
 8008e02:	2203      	movs	r2, #3
 8008e04:	f7f7 fa04 	bl	8000210 <memchr>
 8008e08:	b140      	cbz	r0, 8008e1c <__ssvfiscanf_r+0xd8>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	eba0 0009 	sub.w	r0, r0, r9
 8008e10:	fa03 f000 	lsl.w	r0, r3, r0
 8008e14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e16:	4318      	orrs	r0, r3
 8008e18:	9041      	str	r0, [sp, #260]	; 0x104
 8008e1a:	4655      	mov	r5, sl
 8008e1c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e20:	2b78      	cmp	r3, #120	; 0x78
 8008e22:	d806      	bhi.n	8008e32 <__ssvfiscanf_r+0xee>
 8008e24:	2b57      	cmp	r3, #87	; 0x57
 8008e26:	d810      	bhi.n	8008e4a <__ssvfiscanf_r+0x106>
 8008e28:	2b25      	cmp	r3, #37	; 0x25
 8008e2a:	d0c6      	beq.n	8008dba <__ssvfiscanf_r+0x76>
 8008e2c:	d856      	bhi.n	8008edc <__ssvfiscanf_r+0x198>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d064      	beq.n	8008efc <__ssvfiscanf_r+0x1b8>
 8008e32:	2303      	movs	r3, #3
 8008e34:	9347      	str	r3, [sp, #284]	; 0x11c
 8008e36:	230a      	movs	r3, #10
 8008e38:	9342      	str	r3, [sp, #264]	; 0x108
 8008e3a:	e071      	b.n	8008f20 <__ssvfiscanf_r+0x1dc>
 8008e3c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008e3e:	fb02 1103 	mla	r1, r2, r3, r1
 8008e42:	3930      	subs	r1, #48	; 0x30
 8008e44:	9143      	str	r1, [sp, #268]	; 0x10c
 8008e46:	4655      	mov	r5, sl
 8008e48:	e7d3      	b.n	8008df2 <__ssvfiscanf_r+0xae>
 8008e4a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008e4e:	2a20      	cmp	r2, #32
 8008e50:	d8ef      	bhi.n	8008e32 <__ssvfiscanf_r+0xee>
 8008e52:	a101      	add	r1, pc, #4	; (adr r1, 8008e58 <__ssvfiscanf_r+0x114>)
 8008e54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e58:	08008f0b 	.word	0x08008f0b
 8008e5c:	08008e33 	.word	0x08008e33
 8008e60:	08008e33 	.word	0x08008e33
 8008e64:	08008f69 	.word	0x08008f69
 8008e68:	08008e33 	.word	0x08008e33
 8008e6c:	08008e33 	.word	0x08008e33
 8008e70:	08008e33 	.word	0x08008e33
 8008e74:	08008e33 	.word	0x08008e33
 8008e78:	08008e33 	.word	0x08008e33
 8008e7c:	08008e33 	.word	0x08008e33
 8008e80:	08008e33 	.word	0x08008e33
 8008e84:	08008f7f 	.word	0x08008f7f
 8008e88:	08008f55 	.word	0x08008f55
 8008e8c:	08008ee3 	.word	0x08008ee3
 8008e90:	08008ee3 	.word	0x08008ee3
 8008e94:	08008ee3 	.word	0x08008ee3
 8008e98:	08008e33 	.word	0x08008e33
 8008e9c:	08008f59 	.word	0x08008f59
 8008ea0:	08008e33 	.word	0x08008e33
 8008ea4:	08008e33 	.word	0x08008e33
 8008ea8:	08008e33 	.word	0x08008e33
 8008eac:	08008e33 	.word	0x08008e33
 8008eb0:	08008f8f 	.word	0x08008f8f
 8008eb4:	08008f61 	.word	0x08008f61
 8008eb8:	08008f03 	.word	0x08008f03
 8008ebc:	08008e33 	.word	0x08008e33
 8008ec0:	08008e33 	.word	0x08008e33
 8008ec4:	08008f8b 	.word	0x08008f8b
 8008ec8:	08008e33 	.word	0x08008e33
 8008ecc:	08008f55 	.word	0x08008f55
 8008ed0:	08008e33 	.word	0x08008e33
 8008ed4:	08008e33 	.word	0x08008e33
 8008ed8:	08008f0b 	.word	0x08008f0b
 8008edc:	3b45      	subs	r3, #69	; 0x45
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d8a7      	bhi.n	8008e32 <__ssvfiscanf_r+0xee>
 8008ee2:	2305      	movs	r3, #5
 8008ee4:	e01b      	b.n	8008f1e <__ssvfiscanf_r+0x1da>
 8008ee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4630      	mov	r0, r6
 8008eec:	4798      	blx	r3
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f43f af68 	beq.w	8008dc4 <__ssvfiscanf_r+0x80>
 8008ef4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f040 808d 	bne.w	8009016 <__ssvfiscanf_r+0x2d2>
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	e08f      	b.n	8009022 <__ssvfiscanf_r+0x2de>
 8008f02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008f04:	f042 0220 	orr.w	r2, r2, #32
 8008f08:	9241      	str	r2, [sp, #260]	; 0x104
 8008f0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f10:	9241      	str	r2, [sp, #260]	; 0x104
 8008f12:	2210      	movs	r2, #16
 8008f14:	2b6f      	cmp	r3, #111	; 0x6f
 8008f16:	9242      	str	r2, [sp, #264]	; 0x108
 8008f18:	bf34      	ite	cc
 8008f1a:	2303      	movcc	r3, #3
 8008f1c:	2304      	movcs	r3, #4
 8008f1e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008f20:	6863      	ldr	r3, [r4, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dd42      	ble.n	8008fac <__ssvfiscanf_r+0x268>
 8008f26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f28:	0659      	lsls	r1, r3, #25
 8008f2a:	d404      	bmi.n	8008f36 <__ssvfiscanf_r+0x1f2>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	781a      	ldrb	r2, [r3, #0]
 8008f30:	5cba      	ldrb	r2, [r7, r2]
 8008f32:	0712      	lsls	r2, r2, #28
 8008f34:	d441      	bmi.n	8008fba <__ssvfiscanf_r+0x276>
 8008f36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	dc50      	bgt.n	8008fde <__ssvfiscanf_r+0x29a>
 8008f3c:	466b      	mov	r3, sp
 8008f3e:	4622      	mov	r2, r4
 8008f40:	a941      	add	r1, sp, #260	; 0x104
 8008f42:	4630      	mov	r0, r6
 8008f44:	f000 f876 	bl	8009034 <_scanf_chars>
 8008f48:	2801      	cmp	r0, #1
 8008f4a:	d06e      	beq.n	800902a <__ssvfiscanf_r+0x2e6>
 8008f4c:	2802      	cmp	r0, #2
 8008f4e:	f47f af20 	bne.w	8008d92 <__ssvfiscanf_r+0x4e>
 8008f52:	e7cf      	b.n	8008ef4 <__ssvfiscanf_r+0x1b0>
 8008f54:	220a      	movs	r2, #10
 8008f56:	e7dd      	b.n	8008f14 <__ssvfiscanf_r+0x1d0>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	9342      	str	r3, [sp, #264]	; 0x108
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e7de      	b.n	8008f1e <__ssvfiscanf_r+0x1da>
 8008f60:	2308      	movs	r3, #8
 8008f62:	9342      	str	r3, [sp, #264]	; 0x108
 8008f64:	2304      	movs	r3, #4
 8008f66:	e7da      	b.n	8008f1e <__ssvfiscanf_r+0x1da>
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f000 f9e0 	bl	8009330 <__sccl>
 8008f70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f76:	9341      	str	r3, [sp, #260]	; 0x104
 8008f78:	4605      	mov	r5, r0
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e7cf      	b.n	8008f1e <__ssvfiscanf_r+0x1da>
 8008f7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f84:	9341      	str	r3, [sp, #260]	; 0x104
 8008f86:	2300      	movs	r3, #0
 8008f88:	e7c9      	b.n	8008f1e <__ssvfiscanf_r+0x1da>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e7c7      	b.n	8008f1e <__ssvfiscanf_r+0x1da>
 8008f8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008f90:	06c3      	lsls	r3, r0, #27
 8008f92:	f53f aefe 	bmi.w	8008d92 <__ssvfiscanf_r+0x4e>
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f9a:	1d19      	adds	r1, r3, #4
 8008f9c:	9100      	str	r1, [sp, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f010 0f01 	tst.w	r0, #1
 8008fa4:	bf14      	ite	ne
 8008fa6:	801a      	strhne	r2, [r3, #0]
 8008fa8:	601a      	streq	r2, [r3, #0]
 8008faa:	e6f2      	b.n	8008d92 <__ssvfiscanf_r+0x4e>
 8008fac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	4798      	blx	r3
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d0b6      	beq.n	8008f26 <__ssvfiscanf_r+0x1e2>
 8008fb8:	e79c      	b.n	8008ef4 <__ssvfiscanf_r+0x1b0>
 8008fba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008fbc:	3201      	adds	r2, #1
 8008fbe:	9245      	str	r2, [sp, #276]	; 0x114
 8008fc0:	6862      	ldr	r2, [r4, #4]
 8008fc2:	3a01      	subs	r2, #1
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	6062      	str	r2, [r4, #4]
 8008fc8:	dd02      	ble.n	8008fd0 <__ssvfiscanf_r+0x28c>
 8008fca:	3301      	adds	r3, #1
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	e7ad      	b.n	8008f2c <__ssvfiscanf_r+0x1e8>
 8008fd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4798      	blx	r3
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d0a7      	beq.n	8008f2c <__ssvfiscanf_r+0x1e8>
 8008fdc:	e78a      	b.n	8008ef4 <__ssvfiscanf_r+0x1b0>
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	dc0e      	bgt.n	8009000 <__ssvfiscanf_r+0x2bc>
 8008fe2:	466b      	mov	r3, sp
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	a941      	add	r1, sp, #260	; 0x104
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 f87d 	bl	80090e8 <_scanf_i>
 8008fee:	e7ab      	b.n	8008f48 <__ssvfiscanf_r+0x204>
 8008ff0:	08008c91 	.word	0x08008c91
 8008ff4:	08008d0b 	.word	0x08008d0b
 8008ff8:	0800a3b9 	.word	0x0800a3b9
 8008ffc:	0800a722 	.word	0x0800a722
 8009000:	4b0b      	ldr	r3, [pc, #44]	; (8009030 <__ssvfiscanf_r+0x2ec>)
 8009002:	2b00      	cmp	r3, #0
 8009004:	f43f aec5 	beq.w	8008d92 <__ssvfiscanf_r+0x4e>
 8009008:	466b      	mov	r3, sp
 800900a:	4622      	mov	r2, r4
 800900c:	a941      	add	r1, sp, #260	; 0x104
 800900e:	4630      	mov	r0, r6
 8009010:	f7fc fb8a 	bl	8005728 <_scanf_float>
 8009014:	e798      	b.n	8008f48 <__ssvfiscanf_r+0x204>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	f013 0f40 	tst.w	r3, #64	; 0x40
 800901c:	bf18      	it	ne
 800901e:	f04f 30ff 	movne.w	r0, #4294967295
 8009022:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800902c:	e7f9      	b.n	8009022 <__ssvfiscanf_r+0x2de>
 800902e:	bf00      	nop
 8009030:	08005729 	.word	0x08005729

08009034 <_scanf_chars>:
 8009034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009038:	4615      	mov	r5, r2
 800903a:	688a      	ldr	r2, [r1, #8]
 800903c:	4680      	mov	r8, r0
 800903e:	460c      	mov	r4, r1
 8009040:	b932      	cbnz	r2, 8009050 <_scanf_chars+0x1c>
 8009042:	698a      	ldr	r2, [r1, #24]
 8009044:	2a00      	cmp	r2, #0
 8009046:	bf0c      	ite	eq
 8009048:	2201      	moveq	r2, #1
 800904a:	f04f 32ff 	movne.w	r2, #4294967295
 800904e:	608a      	str	r2, [r1, #8]
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80090e4 <_scanf_chars+0xb0>
 8009056:	06d1      	lsls	r1, r2, #27
 8009058:	bf5f      	itttt	pl
 800905a:	681a      	ldrpl	r2, [r3, #0]
 800905c:	1d11      	addpl	r1, r2, #4
 800905e:	6019      	strpl	r1, [r3, #0]
 8009060:	6816      	ldrpl	r6, [r2, #0]
 8009062:	2700      	movs	r7, #0
 8009064:	69a0      	ldr	r0, [r4, #24]
 8009066:	b188      	cbz	r0, 800908c <_scanf_chars+0x58>
 8009068:	2801      	cmp	r0, #1
 800906a:	d107      	bne.n	800907c <_scanf_chars+0x48>
 800906c:	682a      	ldr	r2, [r5, #0]
 800906e:	7811      	ldrb	r1, [r2, #0]
 8009070:	6962      	ldr	r2, [r4, #20]
 8009072:	5c52      	ldrb	r2, [r2, r1]
 8009074:	b952      	cbnz	r2, 800908c <_scanf_chars+0x58>
 8009076:	2f00      	cmp	r7, #0
 8009078:	d031      	beq.n	80090de <_scanf_chars+0xaa>
 800907a:	e022      	b.n	80090c2 <_scanf_chars+0x8e>
 800907c:	2802      	cmp	r0, #2
 800907e:	d120      	bne.n	80090c2 <_scanf_chars+0x8e>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009088:	071b      	lsls	r3, r3, #28
 800908a:	d41a      	bmi.n	80090c2 <_scanf_chars+0x8e>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	06da      	lsls	r2, r3, #27
 8009090:	bf5e      	ittt	pl
 8009092:	682b      	ldrpl	r3, [r5, #0]
 8009094:	781b      	ldrbpl	r3, [r3, #0]
 8009096:	f806 3b01 	strbpl.w	r3, [r6], #1
 800909a:	682a      	ldr	r2, [r5, #0]
 800909c:	686b      	ldr	r3, [r5, #4]
 800909e:	3201      	adds	r2, #1
 80090a0:	602a      	str	r2, [r5, #0]
 80090a2:	68a2      	ldr	r2, [r4, #8]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	3a01      	subs	r2, #1
 80090a8:	606b      	str	r3, [r5, #4]
 80090aa:	3701      	adds	r7, #1
 80090ac:	60a2      	str	r2, [r4, #8]
 80090ae:	b142      	cbz	r2, 80090c2 <_scanf_chars+0x8e>
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dcd7      	bgt.n	8009064 <_scanf_chars+0x30>
 80090b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090b8:	4629      	mov	r1, r5
 80090ba:	4640      	mov	r0, r8
 80090bc:	4798      	blx	r3
 80090be:	2800      	cmp	r0, #0
 80090c0:	d0d0      	beq.n	8009064 <_scanf_chars+0x30>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	f013 0310 	ands.w	r3, r3, #16
 80090c8:	d105      	bne.n	80090d6 <_scanf_chars+0xa2>
 80090ca:	68e2      	ldr	r2, [r4, #12]
 80090cc:	3201      	adds	r2, #1
 80090ce:	60e2      	str	r2, [r4, #12]
 80090d0:	69a2      	ldr	r2, [r4, #24]
 80090d2:	b102      	cbz	r2, 80090d6 <_scanf_chars+0xa2>
 80090d4:	7033      	strb	r3, [r6, #0]
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	443b      	add	r3, r7
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	2000      	movs	r0, #0
 80090de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090e2:	bf00      	nop
 80090e4:	0800a3b9 	.word	0x0800a3b9

080090e8 <_scanf_i>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	4698      	mov	r8, r3
 80090ee:	4b76      	ldr	r3, [pc, #472]	; (80092c8 <_scanf_i+0x1e0>)
 80090f0:	460c      	mov	r4, r1
 80090f2:	4682      	mov	sl, r0
 80090f4:	4616      	mov	r6, r2
 80090f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090fa:	b087      	sub	sp, #28
 80090fc:	ab03      	add	r3, sp, #12
 80090fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009102:	4b72      	ldr	r3, [pc, #456]	; (80092cc <_scanf_i+0x1e4>)
 8009104:	69a1      	ldr	r1, [r4, #24]
 8009106:	4a72      	ldr	r2, [pc, #456]	; (80092d0 <_scanf_i+0x1e8>)
 8009108:	2903      	cmp	r1, #3
 800910a:	bf18      	it	ne
 800910c:	461a      	movne	r2, r3
 800910e:	68a3      	ldr	r3, [r4, #8]
 8009110:	9201      	str	r2, [sp, #4]
 8009112:	1e5a      	subs	r2, r3, #1
 8009114:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009118:	bf88      	it	hi
 800911a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800911e:	4627      	mov	r7, r4
 8009120:	bf82      	ittt	hi
 8009122:	eb03 0905 	addhi.w	r9, r3, r5
 8009126:	f240 135d 	movwhi	r3, #349	; 0x15d
 800912a:	60a3      	strhi	r3, [r4, #8]
 800912c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009130:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009134:	bf98      	it	ls
 8009136:	f04f 0900 	movls.w	r9, #0
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	463d      	mov	r5, r7
 800913e:	f04f 0b00 	mov.w	fp, #0
 8009142:	6831      	ldr	r1, [r6, #0]
 8009144:	ab03      	add	r3, sp, #12
 8009146:	7809      	ldrb	r1, [r1, #0]
 8009148:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800914c:	2202      	movs	r2, #2
 800914e:	f7f7 f85f 	bl	8000210 <memchr>
 8009152:	b328      	cbz	r0, 80091a0 <_scanf_i+0xb8>
 8009154:	f1bb 0f01 	cmp.w	fp, #1
 8009158:	d159      	bne.n	800920e <_scanf_i+0x126>
 800915a:	6862      	ldr	r2, [r4, #4]
 800915c:	b92a      	cbnz	r2, 800916a <_scanf_i+0x82>
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	2308      	movs	r3, #8
 8009162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009166:	6063      	str	r3, [r4, #4]
 8009168:	6022      	str	r2, [r4, #0]
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	68a2      	ldr	r2, [r4, #8]
 8009174:	1e51      	subs	r1, r2, #1
 8009176:	60a1      	str	r1, [r4, #8]
 8009178:	b192      	cbz	r2, 80091a0 <_scanf_i+0xb8>
 800917a:	6832      	ldr	r2, [r6, #0]
 800917c:	1c51      	adds	r1, r2, #1
 800917e:	6031      	str	r1, [r6, #0]
 8009180:	7812      	ldrb	r2, [r2, #0]
 8009182:	f805 2b01 	strb.w	r2, [r5], #1
 8009186:	6872      	ldr	r2, [r6, #4]
 8009188:	3a01      	subs	r2, #1
 800918a:	2a00      	cmp	r2, #0
 800918c:	6072      	str	r2, [r6, #4]
 800918e:	dc07      	bgt.n	80091a0 <_scanf_i+0xb8>
 8009190:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009194:	4631      	mov	r1, r6
 8009196:	4650      	mov	r0, sl
 8009198:	4790      	blx	r2
 800919a:	2800      	cmp	r0, #0
 800919c:	f040 8085 	bne.w	80092aa <_scanf_i+0x1c2>
 80091a0:	f10b 0b01 	add.w	fp, fp, #1
 80091a4:	f1bb 0f03 	cmp.w	fp, #3
 80091a8:	d1cb      	bne.n	8009142 <_scanf_i+0x5a>
 80091aa:	6863      	ldr	r3, [r4, #4]
 80091ac:	b90b      	cbnz	r3, 80091b2 <_scanf_i+0xca>
 80091ae:	230a      	movs	r3, #10
 80091b0:	6063      	str	r3, [r4, #4]
 80091b2:	6863      	ldr	r3, [r4, #4]
 80091b4:	4947      	ldr	r1, [pc, #284]	; (80092d4 <_scanf_i+0x1ec>)
 80091b6:	6960      	ldr	r0, [r4, #20]
 80091b8:	1ac9      	subs	r1, r1, r3
 80091ba:	f000 f8b9 	bl	8009330 <__sccl>
 80091be:	f04f 0b00 	mov.w	fp, #0
 80091c2:	68a3      	ldr	r3, [r4, #8]
 80091c4:	6822      	ldr	r2, [r4, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d03d      	beq.n	8009246 <_scanf_i+0x15e>
 80091ca:	6831      	ldr	r1, [r6, #0]
 80091cc:	6960      	ldr	r0, [r4, #20]
 80091ce:	f891 c000 	ldrb.w	ip, [r1]
 80091d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d035      	beq.n	8009246 <_scanf_i+0x15e>
 80091da:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80091de:	d124      	bne.n	800922a <_scanf_i+0x142>
 80091e0:	0510      	lsls	r0, r2, #20
 80091e2:	d522      	bpl.n	800922a <_scanf_i+0x142>
 80091e4:	f10b 0b01 	add.w	fp, fp, #1
 80091e8:	f1b9 0f00 	cmp.w	r9, #0
 80091ec:	d003      	beq.n	80091f6 <_scanf_i+0x10e>
 80091ee:	3301      	adds	r3, #1
 80091f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80091f4:	60a3      	str	r3, [r4, #8]
 80091f6:	6873      	ldr	r3, [r6, #4]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	6073      	str	r3, [r6, #4]
 80091fe:	dd1b      	ble.n	8009238 <_scanf_i+0x150>
 8009200:	6833      	ldr	r3, [r6, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	6033      	str	r3, [r6, #0]
 8009206:	68a3      	ldr	r3, [r4, #8]
 8009208:	3b01      	subs	r3, #1
 800920a:	60a3      	str	r3, [r4, #8]
 800920c:	e7d9      	b.n	80091c2 <_scanf_i+0xda>
 800920e:	f1bb 0f02 	cmp.w	fp, #2
 8009212:	d1ae      	bne.n	8009172 <_scanf_i+0x8a>
 8009214:	6822      	ldr	r2, [r4, #0]
 8009216:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800921a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800921e:	d1bf      	bne.n	80091a0 <_scanf_i+0xb8>
 8009220:	2310      	movs	r3, #16
 8009222:	6063      	str	r3, [r4, #4]
 8009224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009228:	e7a2      	b.n	8009170 <_scanf_i+0x88>
 800922a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800922e:	6022      	str	r2, [r4, #0]
 8009230:	780b      	ldrb	r3, [r1, #0]
 8009232:	f805 3b01 	strb.w	r3, [r5], #1
 8009236:	e7de      	b.n	80091f6 <_scanf_i+0x10e>
 8009238:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800923c:	4631      	mov	r1, r6
 800923e:	4650      	mov	r0, sl
 8009240:	4798      	blx	r3
 8009242:	2800      	cmp	r0, #0
 8009244:	d0df      	beq.n	8009206 <_scanf_i+0x11e>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	05db      	lsls	r3, r3, #23
 800924a:	d50d      	bpl.n	8009268 <_scanf_i+0x180>
 800924c:	42bd      	cmp	r5, r7
 800924e:	d909      	bls.n	8009264 <_scanf_i+0x17c>
 8009250:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009258:	4632      	mov	r2, r6
 800925a:	4650      	mov	r0, sl
 800925c:	4798      	blx	r3
 800925e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009262:	464d      	mov	r5, r9
 8009264:	42bd      	cmp	r5, r7
 8009266:	d02d      	beq.n	80092c4 <_scanf_i+0x1dc>
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	f012 0210 	ands.w	r2, r2, #16
 800926e:	d113      	bne.n	8009298 <_scanf_i+0x1b0>
 8009270:	702a      	strb	r2, [r5, #0]
 8009272:	6863      	ldr	r3, [r4, #4]
 8009274:	9e01      	ldr	r6, [sp, #4]
 8009276:	4639      	mov	r1, r7
 8009278:	4650      	mov	r0, sl
 800927a:	47b0      	blx	r6
 800927c:	6821      	ldr	r1, [r4, #0]
 800927e:	f8d8 3000 	ldr.w	r3, [r8]
 8009282:	f011 0f20 	tst.w	r1, #32
 8009286:	d013      	beq.n	80092b0 <_scanf_i+0x1c8>
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	f8c8 2000 	str.w	r2, [r8]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6018      	str	r0, [r3, #0]
 8009292:	68e3      	ldr	r3, [r4, #12]
 8009294:	3301      	adds	r3, #1
 8009296:	60e3      	str	r3, [r4, #12]
 8009298:	1bed      	subs	r5, r5, r7
 800929a:	44ab      	add	fp, r5
 800929c:	6925      	ldr	r5, [r4, #16]
 800929e:	445d      	add	r5, fp
 80092a0:	6125      	str	r5, [r4, #16]
 80092a2:	2000      	movs	r0, #0
 80092a4:	b007      	add	sp, #28
 80092a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092aa:	f04f 0b00 	mov.w	fp, #0
 80092ae:	e7ca      	b.n	8009246 <_scanf_i+0x15e>
 80092b0:	1d1a      	adds	r2, r3, #4
 80092b2:	f8c8 2000 	str.w	r2, [r8]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f011 0f01 	tst.w	r1, #1
 80092bc:	bf14      	ite	ne
 80092be:	8018      	strhne	r0, [r3, #0]
 80092c0:	6018      	streq	r0, [r3, #0]
 80092c2:	e7e6      	b.n	8009292 <_scanf_i+0x1aa>
 80092c4:	2001      	movs	r0, #1
 80092c6:	e7ed      	b.n	80092a4 <_scanf_i+0x1bc>
 80092c8:	0800a320 	.word	0x0800a320
 80092cc:	080094ad 	.word	0x080094ad
 80092d0:	080069cd 	.word	0x080069cd
 80092d4:	0800a746 	.word	0x0800a746

080092d8 <_read_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_read_r+0x20>)
 80092dc:	4604      	mov	r4, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f9 f871 	bl	80023ce <_read>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_read_r+0x1e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_read_r+0x1e>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20000c94 	.word	0x20000c94
 80092fc:	00000000 	.word	0x00000000

08009300 <nan>:
 8009300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009308 <nan+0x8>
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	00000000 	.word	0x00000000
 800930c:	7ff80000 	.word	0x7ff80000

08009310 <_sbrk_r>:
 8009310:	b538      	push	{r3, r4, r5, lr}
 8009312:	4d06      	ldr	r5, [pc, #24]	; (800932c <_sbrk_r+0x1c>)
 8009314:	2300      	movs	r3, #0
 8009316:	4604      	mov	r4, r0
 8009318:	4608      	mov	r0, r1
 800931a:	602b      	str	r3, [r5, #0]
 800931c:	f7f9 f8c4 	bl	80024a8 <_sbrk>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d102      	bne.n	800932a <_sbrk_r+0x1a>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	b103      	cbz	r3, 800932a <_sbrk_r+0x1a>
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	20000c94 	.word	0x20000c94

08009330 <__sccl>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	780b      	ldrb	r3, [r1, #0]
 8009334:	4604      	mov	r4, r0
 8009336:	2b5e      	cmp	r3, #94	; 0x5e
 8009338:	bf0b      	itete	eq
 800933a:	784b      	ldrbeq	r3, [r1, #1]
 800933c:	1c48      	addne	r0, r1, #1
 800933e:	1c88      	addeq	r0, r1, #2
 8009340:	2200      	movne	r2, #0
 8009342:	bf08      	it	eq
 8009344:	2201      	moveq	r2, #1
 8009346:	1e61      	subs	r1, r4, #1
 8009348:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800934c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009350:	42a9      	cmp	r1, r5
 8009352:	d1fb      	bne.n	800934c <__sccl+0x1c>
 8009354:	b90b      	cbnz	r3, 800935a <__sccl+0x2a>
 8009356:	3801      	subs	r0, #1
 8009358:	bd70      	pop	{r4, r5, r6, pc}
 800935a:	f082 0201 	eor.w	r2, r2, #1
 800935e:	54e2      	strb	r2, [r4, r3]
 8009360:	4605      	mov	r5, r0
 8009362:	4628      	mov	r0, r5
 8009364:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009368:	292d      	cmp	r1, #45	; 0x2d
 800936a:	d006      	beq.n	800937a <__sccl+0x4a>
 800936c:	295d      	cmp	r1, #93	; 0x5d
 800936e:	d0f3      	beq.n	8009358 <__sccl+0x28>
 8009370:	b909      	cbnz	r1, 8009376 <__sccl+0x46>
 8009372:	4628      	mov	r0, r5
 8009374:	e7f0      	b.n	8009358 <__sccl+0x28>
 8009376:	460b      	mov	r3, r1
 8009378:	e7f1      	b.n	800935e <__sccl+0x2e>
 800937a:	786e      	ldrb	r6, [r5, #1]
 800937c:	2e5d      	cmp	r6, #93	; 0x5d
 800937e:	d0fa      	beq.n	8009376 <__sccl+0x46>
 8009380:	42b3      	cmp	r3, r6
 8009382:	dcf8      	bgt.n	8009376 <__sccl+0x46>
 8009384:	3502      	adds	r5, #2
 8009386:	4619      	mov	r1, r3
 8009388:	3101      	adds	r1, #1
 800938a:	428e      	cmp	r6, r1
 800938c:	5462      	strb	r2, [r4, r1]
 800938e:	dcfb      	bgt.n	8009388 <__sccl+0x58>
 8009390:	1af1      	subs	r1, r6, r3
 8009392:	3901      	subs	r1, #1
 8009394:	1c58      	adds	r0, r3, #1
 8009396:	42b3      	cmp	r3, r6
 8009398:	bfa8      	it	ge
 800939a:	2100      	movge	r1, #0
 800939c:	1843      	adds	r3, r0, r1
 800939e:	e7e0      	b.n	8009362 <__sccl+0x32>

080093a0 <strncmp>:
 80093a0:	b510      	push	{r4, lr}
 80093a2:	b17a      	cbz	r2, 80093c4 <strncmp+0x24>
 80093a4:	4603      	mov	r3, r0
 80093a6:	3901      	subs	r1, #1
 80093a8:	1884      	adds	r4, r0, r2
 80093aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80093ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80093b2:	4290      	cmp	r0, r2
 80093b4:	d101      	bne.n	80093ba <strncmp+0x1a>
 80093b6:	42a3      	cmp	r3, r4
 80093b8:	d101      	bne.n	80093be <strncmp+0x1e>
 80093ba:	1a80      	subs	r0, r0, r2
 80093bc:	bd10      	pop	{r4, pc}
 80093be:	2800      	cmp	r0, #0
 80093c0:	d1f3      	bne.n	80093aa <strncmp+0xa>
 80093c2:	e7fa      	b.n	80093ba <strncmp+0x1a>
 80093c4:	4610      	mov	r0, r2
 80093c6:	e7f9      	b.n	80093bc <strncmp+0x1c>

080093c8 <_strtoul_l.constprop.0>:
 80093c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093cc:	4f36      	ldr	r7, [pc, #216]	; (80094a8 <_strtoul_l.constprop.0+0xe0>)
 80093ce:	4686      	mov	lr, r0
 80093d0:	460d      	mov	r5, r1
 80093d2:	4628      	mov	r0, r5
 80093d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093d8:	5de6      	ldrb	r6, [r4, r7]
 80093da:	f016 0608 	ands.w	r6, r6, #8
 80093de:	d1f8      	bne.n	80093d2 <_strtoul_l.constprop.0+0xa>
 80093e0:	2c2d      	cmp	r4, #45	; 0x2d
 80093e2:	d12f      	bne.n	8009444 <_strtoul_l.constprop.0+0x7c>
 80093e4:	782c      	ldrb	r4, [r5, #0]
 80093e6:	2601      	movs	r6, #1
 80093e8:	1c85      	adds	r5, r0, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d057      	beq.n	800949e <_strtoul_l.constprop.0+0xd6>
 80093ee:	2b10      	cmp	r3, #16
 80093f0:	d109      	bne.n	8009406 <_strtoul_l.constprop.0+0x3e>
 80093f2:	2c30      	cmp	r4, #48	; 0x30
 80093f4:	d107      	bne.n	8009406 <_strtoul_l.constprop.0+0x3e>
 80093f6:	7828      	ldrb	r0, [r5, #0]
 80093f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80093fc:	2858      	cmp	r0, #88	; 0x58
 80093fe:	d149      	bne.n	8009494 <_strtoul_l.constprop.0+0xcc>
 8009400:	786c      	ldrb	r4, [r5, #1]
 8009402:	2310      	movs	r3, #16
 8009404:	3502      	adds	r5, #2
 8009406:	f04f 38ff 	mov.w	r8, #4294967295
 800940a:	2700      	movs	r7, #0
 800940c:	fbb8 f8f3 	udiv	r8, r8, r3
 8009410:	fb03 f908 	mul.w	r9, r3, r8
 8009414:	ea6f 0909 	mvn.w	r9, r9
 8009418:	4638      	mov	r0, r7
 800941a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800941e:	f1bc 0f09 	cmp.w	ip, #9
 8009422:	d814      	bhi.n	800944e <_strtoul_l.constprop.0+0x86>
 8009424:	4664      	mov	r4, ip
 8009426:	42a3      	cmp	r3, r4
 8009428:	dd22      	ble.n	8009470 <_strtoul_l.constprop.0+0xa8>
 800942a:	2f00      	cmp	r7, #0
 800942c:	db1d      	blt.n	800946a <_strtoul_l.constprop.0+0xa2>
 800942e:	4580      	cmp	r8, r0
 8009430:	d31b      	bcc.n	800946a <_strtoul_l.constprop.0+0xa2>
 8009432:	d101      	bne.n	8009438 <_strtoul_l.constprop.0+0x70>
 8009434:	45a1      	cmp	r9, r4
 8009436:	db18      	blt.n	800946a <_strtoul_l.constprop.0+0xa2>
 8009438:	fb00 4003 	mla	r0, r0, r3, r4
 800943c:	2701      	movs	r7, #1
 800943e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009442:	e7ea      	b.n	800941a <_strtoul_l.constprop.0+0x52>
 8009444:	2c2b      	cmp	r4, #43	; 0x2b
 8009446:	bf04      	itt	eq
 8009448:	782c      	ldrbeq	r4, [r5, #0]
 800944a:	1c85      	addeq	r5, r0, #2
 800944c:	e7cd      	b.n	80093ea <_strtoul_l.constprop.0+0x22>
 800944e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009452:	f1bc 0f19 	cmp.w	ip, #25
 8009456:	d801      	bhi.n	800945c <_strtoul_l.constprop.0+0x94>
 8009458:	3c37      	subs	r4, #55	; 0x37
 800945a:	e7e4      	b.n	8009426 <_strtoul_l.constprop.0+0x5e>
 800945c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009460:	f1bc 0f19 	cmp.w	ip, #25
 8009464:	d804      	bhi.n	8009470 <_strtoul_l.constprop.0+0xa8>
 8009466:	3c57      	subs	r4, #87	; 0x57
 8009468:	e7dd      	b.n	8009426 <_strtoul_l.constprop.0+0x5e>
 800946a:	f04f 37ff 	mov.w	r7, #4294967295
 800946e:	e7e6      	b.n	800943e <_strtoul_l.constprop.0+0x76>
 8009470:	2f00      	cmp	r7, #0
 8009472:	da07      	bge.n	8009484 <_strtoul_l.constprop.0+0xbc>
 8009474:	2322      	movs	r3, #34	; 0x22
 8009476:	f8ce 3000 	str.w	r3, [lr]
 800947a:	f04f 30ff 	mov.w	r0, #4294967295
 800947e:	b932      	cbnz	r2, 800948e <_strtoul_l.constprop.0+0xc6>
 8009480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009484:	b106      	cbz	r6, 8009488 <_strtoul_l.constprop.0+0xc0>
 8009486:	4240      	negs	r0, r0
 8009488:	2a00      	cmp	r2, #0
 800948a:	d0f9      	beq.n	8009480 <_strtoul_l.constprop.0+0xb8>
 800948c:	b107      	cbz	r7, 8009490 <_strtoul_l.constprop.0+0xc8>
 800948e:	1e69      	subs	r1, r5, #1
 8009490:	6011      	str	r1, [r2, #0]
 8009492:	e7f5      	b.n	8009480 <_strtoul_l.constprop.0+0xb8>
 8009494:	2430      	movs	r4, #48	; 0x30
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1b5      	bne.n	8009406 <_strtoul_l.constprop.0+0x3e>
 800949a:	2308      	movs	r3, #8
 800949c:	e7b3      	b.n	8009406 <_strtoul_l.constprop.0+0x3e>
 800949e:	2c30      	cmp	r4, #48	; 0x30
 80094a0:	d0a9      	beq.n	80093f6 <_strtoul_l.constprop.0+0x2e>
 80094a2:	230a      	movs	r3, #10
 80094a4:	e7af      	b.n	8009406 <_strtoul_l.constprop.0+0x3e>
 80094a6:	bf00      	nop
 80094a8:	0800a3b9 	.word	0x0800a3b9

080094ac <_strtoul_r>:
 80094ac:	f7ff bf8c 	b.w	80093c8 <_strtoul_l.constprop.0>

080094b0 <__submore>:
 80094b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b4:	460c      	mov	r4, r1
 80094b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80094b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094bc:	4299      	cmp	r1, r3
 80094be:	d11d      	bne.n	80094fc <__submore+0x4c>
 80094c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094c4:	f7ff fa14 	bl	80088f0 <_malloc_r>
 80094c8:	b918      	cbnz	r0, 80094d2 <__submore+0x22>
 80094ca:	f04f 30ff 	mov.w	r0, #4294967295
 80094ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80094d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80094dc:	6360      	str	r0, [r4, #52]	; 0x34
 80094de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80094e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80094e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80094ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80094ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80094f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80094f6:	6020      	str	r0, [r4, #0]
 80094f8:	2000      	movs	r0, #0
 80094fa:	e7e8      	b.n	80094ce <__submore+0x1e>
 80094fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80094fe:	0077      	lsls	r7, r6, #1
 8009500:	463a      	mov	r2, r7
 8009502:	f000 fa2d 	bl	8009960 <_realloc_r>
 8009506:	4605      	mov	r5, r0
 8009508:	2800      	cmp	r0, #0
 800950a:	d0de      	beq.n	80094ca <__submore+0x1a>
 800950c:	eb00 0806 	add.w	r8, r0, r6
 8009510:	4601      	mov	r1, r0
 8009512:	4632      	mov	r2, r6
 8009514:	4640      	mov	r0, r8
 8009516:	f7fe fc99 	bl	8007e4c <memcpy>
 800951a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800951e:	f8c4 8000 	str.w	r8, [r4]
 8009522:	e7e9      	b.n	80094f8 <__submore+0x48>

08009524 <__ascii_wctomb>:
 8009524:	b149      	cbz	r1, 800953a <__ascii_wctomb+0x16>
 8009526:	2aff      	cmp	r2, #255	; 0xff
 8009528:	bf85      	ittet	hi
 800952a:	238a      	movhi	r3, #138	; 0x8a
 800952c:	6003      	strhi	r3, [r0, #0]
 800952e:	700a      	strbls	r2, [r1, #0]
 8009530:	f04f 30ff 	movhi.w	r0, #4294967295
 8009534:	bf98      	it	ls
 8009536:	2001      	movls	r0, #1
 8009538:	4770      	bx	lr
 800953a:	4608      	mov	r0, r1
 800953c:	4770      	bx	lr
	...

08009540 <__assert_func>:
 8009540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009542:	4614      	mov	r4, r2
 8009544:	461a      	mov	r2, r3
 8009546:	4b09      	ldr	r3, [pc, #36]	; (800956c <__assert_func+0x2c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4605      	mov	r5, r0
 800954c:	68d8      	ldr	r0, [r3, #12]
 800954e:	b14c      	cbz	r4, 8009564 <__assert_func+0x24>
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <__assert_func+0x30>)
 8009552:	9100      	str	r1, [sp, #0]
 8009554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009558:	4906      	ldr	r1, [pc, #24]	; (8009574 <__assert_func+0x34>)
 800955a:	462b      	mov	r3, r5
 800955c:	f000 f9a6 	bl	80098ac <fiprintf>
 8009560:	f000 fc46 	bl	8009df0 <abort>
 8009564:	4b04      	ldr	r3, [pc, #16]	; (8009578 <__assert_func+0x38>)
 8009566:	461c      	mov	r4, r3
 8009568:	e7f3      	b.n	8009552 <__assert_func+0x12>
 800956a:	bf00      	nop
 800956c:	20000010 	.word	0x20000010
 8009570:	0800a748 	.word	0x0800a748
 8009574:	0800a755 	.word	0x0800a755
 8009578:	0800a783 	.word	0x0800a783

0800957c <__sflush_r>:
 800957c:	898a      	ldrh	r2, [r1, #12]
 800957e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009582:	4605      	mov	r5, r0
 8009584:	0710      	lsls	r0, r2, #28
 8009586:	460c      	mov	r4, r1
 8009588:	d458      	bmi.n	800963c <__sflush_r+0xc0>
 800958a:	684b      	ldr	r3, [r1, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	dc05      	bgt.n	800959c <__sflush_r+0x20>
 8009590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009592:	2b00      	cmp	r3, #0
 8009594:	dc02      	bgt.n	800959c <__sflush_r+0x20>
 8009596:	2000      	movs	r0, #0
 8009598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d0f9      	beq.n	8009596 <__sflush_r+0x1a>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095a8:	682f      	ldr	r7, [r5, #0]
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	d032      	beq.n	8009614 <__sflush_r+0x98>
 80095ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	075a      	lsls	r2, r3, #29
 80095b4:	d505      	bpl.n	80095c2 <__sflush_r+0x46>
 80095b6:	6863      	ldr	r3, [r4, #4]
 80095b8:	1ac0      	subs	r0, r0, r3
 80095ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095bc:	b10b      	cbz	r3, 80095c2 <__sflush_r+0x46>
 80095be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095c0:	1ac0      	subs	r0, r0, r3
 80095c2:	2300      	movs	r3, #0
 80095c4:	4602      	mov	r2, r0
 80095c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095c8:	6a21      	ldr	r1, [r4, #32]
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b0      	blx	r6
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	d106      	bne.n	80095e2 <__sflush_r+0x66>
 80095d4:	6829      	ldr	r1, [r5, #0]
 80095d6:	291d      	cmp	r1, #29
 80095d8:	d82c      	bhi.n	8009634 <__sflush_r+0xb8>
 80095da:	4a2a      	ldr	r2, [pc, #168]	; (8009684 <__sflush_r+0x108>)
 80095dc:	40ca      	lsrs	r2, r1
 80095de:	07d6      	lsls	r6, r2, #31
 80095e0:	d528      	bpl.n	8009634 <__sflush_r+0xb8>
 80095e2:	2200      	movs	r2, #0
 80095e4:	6062      	str	r2, [r4, #4]
 80095e6:	04d9      	lsls	r1, r3, #19
 80095e8:	6922      	ldr	r2, [r4, #16]
 80095ea:	6022      	str	r2, [r4, #0]
 80095ec:	d504      	bpl.n	80095f8 <__sflush_r+0x7c>
 80095ee:	1c42      	adds	r2, r0, #1
 80095f0:	d101      	bne.n	80095f6 <__sflush_r+0x7a>
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	b903      	cbnz	r3, 80095f8 <__sflush_r+0x7c>
 80095f6:	6560      	str	r0, [r4, #84]	; 0x54
 80095f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095fa:	602f      	str	r7, [r5, #0]
 80095fc:	2900      	cmp	r1, #0
 80095fe:	d0ca      	beq.n	8009596 <__sflush_r+0x1a>
 8009600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009604:	4299      	cmp	r1, r3
 8009606:	d002      	beq.n	800960e <__sflush_r+0x92>
 8009608:	4628      	mov	r0, r5
 800960a:	f7ff f905 	bl	8008818 <_free_r>
 800960e:	2000      	movs	r0, #0
 8009610:	6360      	str	r0, [r4, #52]	; 0x34
 8009612:	e7c1      	b.n	8009598 <__sflush_r+0x1c>
 8009614:	6a21      	ldr	r1, [r4, #32]
 8009616:	2301      	movs	r3, #1
 8009618:	4628      	mov	r0, r5
 800961a:	47b0      	blx	r6
 800961c:	1c41      	adds	r1, r0, #1
 800961e:	d1c7      	bne.n	80095b0 <__sflush_r+0x34>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0c4      	beq.n	80095b0 <__sflush_r+0x34>
 8009626:	2b1d      	cmp	r3, #29
 8009628:	d001      	beq.n	800962e <__sflush_r+0xb2>
 800962a:	2b16      	cmp	r3, #22
 800962c:	d101      	bne.n	8009632 <__sflush_r+0xb6>
 800962e:	602f      	str	r7, [r5, #0]
 8009630:	e7b1      	b.n	8009596 <__sflush_r+0x1a>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	e7ad      	b.n	8009598 <__sflush_r+0x1c>
 800963c:	690f      	ldr	r7, [r1, #16]
 800963e:	2f00      	cmp	r7, #0
 8009640:	d0a9      	beq.n	8009596 <__sflush_r+0x1a>
 8009642:	0793      	lsls	r3, r2, #30
 8009644:	680e      	ldr	r6, [r1, #0]
 8009646:	bf08      	it	eq
 8009648:	694b      	ldreq	r3, [r1, #20]
 800964a:	600f      	str	r7, [r1, #0]
 800964c:	bf18      	it	ne
 800964e:	2300      	movne	r3, #0
 8009650:	eba6 0807 	sub.w	r8, r6, r7
 8009654:	608b      	str	r3, [r1, #8]
 8009656:	f1b8 0f00 	cmp.w	r8, #0
 800965a:	dd9c      	ble.n	8009596 <__sflush_r+0x1a>
 800965c:	6a21      	ldr	r1, [r4, #32]
 800965e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009660:	4643      	mov	r3, r8
 8009662:	463a      	mov	r2, r7
 8009664:	4628      	mov	r0, r5
 8009666:	47b0      	blx	r6
 8009668:	2800      	cmp	r0, #0
 800966a:	dc06      	bgt.n	800967a <__sflush_r+0xfe>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e78e      	b.n	8009598 <__sflush_r+0x1c>
 800967a:	4407      	add	r7, r0
 800967c:	eba8 0800 	sub.w	r8, r8, r0
 8009680:	e7e9      	b.n	8009656 <__sflush_r+0xda>
 8009682:	bf00      	nop
 8009684:	20400001 	.word	0x20400001

08009688 <_fflush_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	690b      	ldr	r3, [r1, #16]
 800968c:	4605      	mov	r5, r0
 800968e:	460c      	mov	r4, r1
 8009690:	b913      	cbnz	r3, 8009698 <_fflush_r+0x10>
 8009692:	2500      	movs	r5, #0
 8009694:	4628      	mov	r0, r5
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	b118      	cbz	r0, 80096a2 <_fflush_r+0x1a>
 800969a:	6983      	ldr	r3, [r0, #24]
 800969c:	b90b      	cbnz	r3, 80096a2 <_fflush_r+0x1a>
 800969e:	f000 f887 	bl	80097b0 <__sinit>
 80096a2:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <_fflush_r+0x6c>)
 80096a4:	429c      	cmp	r4, r3
 80096a6:	d11b      	bne.n	80096e0 <_fflush_r+0x58>
 80096a8:	686c      	ldr	r4, [r5, #4]
 80096aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0ef      	beq.n	8009692 <_fflush_r+0xa>
 80096b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096b4:	07d0      	lsls	r0, r2, #31
 80096b6:	d404      	bmi.n	80096c2 <_fflush_r+0x3a>
 80096b8:	0599      	lsls	r1, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_fflush_r+0x3a>
 80096bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096be:	f000 f927 	bl	8009910 <__retarget_lock_acquire_recursive>
 80096c2:	4628      	mov	r0, r5
 80096c4:	4621      	mov	r1, r4
 80096c6:	f7ff ff59 	bl	800957c <__sflush_r>
 80096ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096cc:	07da      	lsls	r2, r3, #31
 80096ce:	4605      	mov	r5, r0
 80096d0:	d4e0      	bmi.n	8009694 <_fflush_r+0xc>
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	059b      	lsls	r3, r3, #22
 80096d6:	d4dd      	bmi.n	8009694 <_fflush_r+0xc>
 80096d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096da:	f000 f91a 	bl	8009912 <__retarget_lock_release_recursive>
 80096de:	e7d9      	b.n	8009694 <_fflush_r+0xc>
 80096e0:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <_fflush_r+0x70>)
 80096e2:	429c      	cmp	r4, r3
 80096e4:	d101      	bne.n	80096ea <_fflush_r+0x62>
 80096e6:	68ac      	ldr	r4, [r5, #8]
 80096e8:	e7df      	b.n	80096aa <_fflush_r+0x22>
 80096ea:	4b04      	ldr	r3, [pc, #16]	; (80096fc <_fflush_r+0x74>)
 80096ec:	429c      	cmp	r4, r3
 80096ee:	bf08      	it	eq
 80096f0:	68ec      	ldreq	r4, [r5, #12]
 80096f2:	e7da      	b.n	80096aa <_fflush_r+0x22>
 80096f4:	0800a7a4 	.word	0x0800a7a4
 80096f8:	0800a7c4 	.word	0x0800a7c4
 80096fc:	0800a784 	.word	0x0800a784

08009700 <std>:
 8009700:	2300      	movs	r3, #0
 8009702:	b510      	push	{r4, lr}
 8009704:	4604      	mov	r4, r0
 8009706:	e9c0 3300 	strd	r3, r3, [r0]
 800970a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800970e:	6083      	str	r3, [r0, #8]
 8009710:	8181      	strh	r1, [r0, #12]
 8009712:	6643      	str	r3, [r0, #100]	; 0x64
 8009714:	81c2      	strh	r2, [r0, #14]
 8009716:	6183      	str	r3, [r0, #24]
 8009718:	4619      	mov	r1, r3
 800971a:	2208      	movs	r2, #8
 800971c:	305c      	adds	r0, #92	; 0x5c
 800971e:	f7fb fb91 	bl	8004e44 <memset>
 8009722:	4b05      	ldr	r3, [pc, #20]	; (8009738 <std+0x38>)
 8009724:	6263      	str	r3, [r4, #36]	; 0x24
 8009726:	4b05      	ldr	r3, [pc, #20]	; (800973c <std+0x3c>)
 8009728:	62a3      	str	r3, [r4, #40]	; 0x28
 800972a:	4b05      	ldr	r3, [pc, #20]	; (8009740 <std+0x40>)
 800972c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800972e:	4b05      	ldr	r3, [pc, #20]	; (8009744 <std+0x44>)
 8009730:	6224      	str	r4, [r4, #32]
 8009732:	6323      	str	r3, [r4, #48]	; 0x30
 8009734:	bd10      	pop	{r4, pc}
 8009736:	bf00      	nop
 8009738:	08005bed 	.word	0x08005bed
 800973c:	08005c13 	.word	0x08005c13
 8009740:	08005c4b 	.word	0x08005c4b
 8009744:	08005c6f 	.word	0x08005c6f

08009748 <_cleanup_r>:
 8009748:	4901      	ldr	r1, [pc, #4]	; (8009750 <_cleanup_r+0x8>)
 800974a:	f000 b8c1 	b.w	80098d0 <_fwalk_reent>
 800974e:	bf00      	nop
 8009750:	08009689 	.word	0x08009689

08009754 <__sfmoreglue>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	2268      	movs	r2, #104	; 0x68
 8009758:	1e4d      	subs	r5, r1, #1
 800975a:	4355      	muls	r5, r2
 800975c:	460e      	mov	r6, r1
 800975e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009762:	f7ff f8c5 	bl	80088f0 <_malloc_r>
 8009766:	4604      	mov	r4, r0
 8009768:	b140      	cbz	r0, 800977c <__sfmoreglue+0x28>
 800976a:	2100      	movs	r1, #0
 800976c:	e9c0 1600 	strd	r1, r6, [r0]
 8009770:	300c      	adds	r0, #12
 8009772:	60a0      	str	r0, [r4, #8]
 8009774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009778:	f7fb fb64 	bl	8004e44 <memset>
 800977c:	4620      	mov	r0, r4
 800977e:	bd70      	pop	{r4, r5, r6, pc}

08009780 <__sfp_lock_acquire>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__sfp_lock_acquire+0x8>)
 8009782:	f000 b8c5 	b.w	8009910 <__retarget_lock_acquire_recursive>
 8009786:	bf00      	nop
 8009788:	20000c99 	.word	0x20000c99

0800978c <__sfp_lock_release>:
 800978c:	4801      	ldr	r0, [pc, #4]	; (8009794 <__sfp_lock_release+0x8>)
 800978e:	f000 b8c0 	b.w	8009912 <__retarget_lock_release_recursive>
 8009792:	bf00      	nop
 8009794:	20000c99 	.word	0x20000c99

08009798 <__sinit_lock_acquire>:
 8009798:	4801      	ldr	r0, [pc, #4]	; (80097a0 <__sinit_lock_acquire+0x8>)
 800979a:	f000 b8b9 	b.w	8009910 <__retarget_lock_acquire_recursive>
 800979e:	bf00      	nop
 80097a0:	20000c9a 	.word	0x20000c9a

080097a4 <__sinit_lock_release>:
 80097a4:	4801      	ldr	r0, [pc, #4]	; (80097ac <__sinit_lock_release+0x8>)
 80097a6:	f000 b8b4 	b.w	8009912 <__retarget_lock_release_recursive>
 80097aa:	bf00      	nop
 80097ac:	20000c9a 	.word	0x20000c9a

080097b0 <__sinit>:
 80097b0:	b510      	push	{r4, lr}
 80097b2:	4604      	mov	r4, r0
 80097b4:	f7ff fff0 	bl	8009798 <__sinit_lock_acquire>
 80097b8:	69a3      	ldr	r3, [r4, #24]
 80097ba:	b11b      	cbz	r3, 80097c4 <__sinit+0x14>
 80097bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c0:	f7ff bff0 	b.w	80097a4 <__sinit_lock_release>
 80097c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097c8:	6523      	str	r3, [r4, #80]	; 0x50
 80097ca:	4b13      	ldr	r3, [pc, #76]	; (8009818 <__sinit+0x68>)
 80097cc:	4a13      	ldr	r2, [pc, #76]	; (800981c <__sinit+0x6c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	bf04      	itt	eq
 80097d6:	2301      	moveq	r3, #1
 80097d8:	61a3      	streq	r3, [r4, #24]
 80097da:	4620      	mov	r0, r4
 80097dc:	f000 f820 	bl	8009820 <__sfp>
 80097e0:	6060      	str	r0, [r4, #4]
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 f81c 	bl	8009820 <__sfp>
 80097e8:	60a0      	str	r0, [r4, #8]
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 f818 	bl	8009820 <__sfp>
 80097f0:	2200      	movs	r2, #0
 80097f2:	60e0      	str	r0, [r4, #12]
 80097f4:	2104      	movs	r1, #4
 80097f6:	6860      	ldr	r0, [r4, #4]
 80097f8:	f7ff ff82 	bl	8009700 <std>
 80097fc:	68a0      	ldr	r0, [r4, #8]
 80097fe:	2201      	movs	r2, #1
 8009800:	2109      	movs	r1, #9
 8009802:	f7ff ff7d 	bl	8009700 <std>
 8009806:	68e0      	ldr	r0, [r4, #12]
 8009808:	2202      	movs	r2, #2
 800980a:	2112      	movs	r1, #18
 800980c:	f7ff ff78 	bl	8009700 <std>
 8009810:	2301      	movs	r3, #1
 8009812:	61a3      	str	r3, [r4, #24]
 8009814:	e7d2      	b.n	80097bc <__sinit+0xc>
 8009816:	bf00      	nop
 8009818:	0800a32c 	.word	0x0800a32c
 800981c:	08009749 	.word	0x08009749

08009820 <__sfp>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	4607      	mov	r7, r0
 8009824:	f7ff ffac 	bl	8009780 <__sfp_lock_acquire>
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <__sfp+0x84>)
 800982a:	681e      	ldr	r6, [r3, #0]
 800982c:	69b3      	ldr	r3, [r6, #24]
 800982e:	b913      	cbnz	r3, 8009836 <__sfp+0x16>
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff ffbd 	bl	80097b0 <__sinit>
 8009836:	3648      	adds	r6, #72	; 0x48
 8009838:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800983c:	3b01      	subs	r3, #1
 800983e:	d503      	bpl.n	8009848 <__sfp+0x28>
 8009840:	6833      	ldr	r3, [r6, #0]
 8009842:	b30b      	cbz	r3, 8009888 <__sfp+0x68>
 8009844:	6836      	ldr	r6, [r6, #0]
 8009846:	e7f7      	b.n	8009838 <__sfp+0x18>
 8009848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800984c:	b9d5      	cbnz	r5, 8009884 <__sfp+0x64>
 800984e:	4b16      	ldr	r3, [pc, #88]	; (80098a8 <__sfp+0x88>)
 8009850:	60e3      	str	r3, [r4, #12]
 8009852:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009856:	6665      	str	r5, [r4, #100]	; 0x64
 8009858:	f000 f859 	bl	800990e <__retarget_lock_init_recursive>
 800985c:	f7ff ff96 	bl	800978c <__sfp_lock_release>
 8009860:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009864:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009868:	6025      	str	r5, [r4, #0]
 800986a:	61a5      	str	r5, [r4, #24]
 800986c:	2208      	movs	r2, #8
 800986e:	4629      	mov	r1, r5
 8009870:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009874:	f7fb fae6 	bl	8004e44 <memset>
 8009878:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800987c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009880:	4620      	mov	r0, r4
 8009882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009884:	3468      	adds	r4, #104	; 0x68
 8009886:	e7d9      	b.n	800983c <__sfp+0x1c>
 8009888:	2104      	movs	r1, #4
 800988a:	4638      	mov	r0, r7
 800988c:	f7ff ff62 	bl	8009754 <__sfmoreglue>
 8009890:	4604      	mov	r4, r0
 8009892:	6030      	str	r0, [r6, #0]
 8009894:	2800      	cmp	r0, #0
 8009896:	d1d5      	bne.n	8009844 <__sfp+0x24>
 8009898:	f7ff ff78 	bl	800978c <__sfp_lock_release>
 800989c:	230c      	movs	r3, #12
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	e7ee      	b.n	8009880 <__sfp+0x60>
 80098a2:	bf00      	nop
 80098a4:	0800a32c 	.word	0x0800a32c
 80098a8:	ffff0001 	.word	0xffff0001

080098ac <fiprintf>:
 80098ac:	b40e      	push	{r1, r2, r3}
 80098ae:	b503      	push	{r0, r1, lr}
 80098b0:	4601      	mov	r1, r0
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	4805      	ldr	r0, [pc, #20]	; (80098cc <fiprintf+0x20>)
 80098b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	f000 f8a7 	bl	8009a10 <_vfiprintf_r>
 80098c2:	b002      	add	sp, #8
 80098c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c8:	b003      	add	sp, #12
 80098ca:	4770      	bx	lr
 80098cc:	20000010 	.word	0x20000010

080098d0 <_fwalk_reent>:
 80098d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d4:	4606      	mov	r6, r0
 80098d6:	4688      	mov	r8, r1
 80098d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098dc:	2700      	movs	r7, #0
 80098de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098e2:	f1b9 0901 	subs.w	r9, r9, #1
 80098e6:	d505      	bpl.n	80098f4 <_fwalk_reent+0x24>
 80098e8:	6824      	ldr	r4, [r4, #0]
 80098ea:	2c00      	cmp	r4, #0
 80098ec:	d1f7      	bne.n	80098de <_fwalk_reent+0xe>
 80098ee:	4638      	mov	r0, r7
 80098f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f4:	89ab      	ldrh	r3, [r5, #12]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d907      	bls.n	800990a <_fwalk_reent+0x3a>
 80098fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098fe:	3301      	adds	r3, #1
 8009900:	d003      	beq.n	800990a <_fwalk_reent+0x3a>
 8009902:	4629      	mov	r1, r5
 8009904:	4630      	mov	r0, r6
 8009906:	47c0      	blx	r8
 8009908:	4307      	orrs	r7, r0
 800990a:	3568      	adds	r5, #104	; 0x68
 800990c:	e7e9      	b.n	80098e2 <_fwalk_reent+0x12>

0800990e <__retarget_lock_init_recursive>:
 800990e:	4770      	bx	lr

08009910 <__retarget_lock_acquire_recursive>:
 8009910:	4770      	bx	lr

08009912 <__retarget_lock_release_recursive>:
 8009912:	4770      	bx	lr

08009914 <memmove>:
 8009914:	4288      	cmp	r0, r1
 8009916:	b510      	push	{r4, lr}
 8009918:	eb01 0402 	add.w	r4, r1, r2
 800991c:	d902      	bls.n	8009924 <memmove+0x10>
 800991e:	4284      	cmp	r4, r0
 8009920:	4623      	mov	r3, r4
 8009922:	d807      	bhi.n	8009934 <memmove+0x20>
 8009924:	1e43      	subs	r3, r0, #1
 8009926:	42a1      	cmp	r1, r4
 8009928:	d008      	beq.n	800993c <memmove+0x28>
 800992a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800992e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009932:	e7f8      	b.n	8009926 <memmove+0x12>
 8009934:	4402      	add	r2, r0
 8009936:	4601      	mov	r1, r0
 8009938:	428a      	cmp	r2, r1
 800993a:	d100      	bne.n	800993e <memmove+0x2a>
 800993c:	bd10      	pop	{r4, pc}
 800993e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009946:	e7f7      	b.n	8009938 <memmove+0x24>

08009948 <__malloc_lock>:
 8009948:	4801      	ldr	r0, [pc, #4]	; (8009950 <__malloc_lock+0x8>)
 800994a:	f7ff bfe1 	b.w	8009910 <__retarget_lock_acquire_recursive>
 800994e:	bf00      	nop
 8009950:	20000c98 	.word	0x20000c98

08009954 <__malloc_unlock>:
 8009954:	4801      	ldr	r0, [pc, #4]	; (800995c <__malloc_unlock+0x8>)
 8009956:	f7ff bfdc 	b.w	8009912 <__retarget_lock_release_recursive>
 800995a:	bf00      	nop
 800995c:	20000c98 	.word	0x20000c98

08009960 <_realloc_r>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	4680      	mov	r8, r0
 8009966:	4614      	mov	r4, r2
 8009968:	460e      	mov	r6, r1
 800996a:	b921      	cbnz	r1, 8009976 <_realloc_r+0x16>
 800996c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009970:	4611      	mov	r1, r2
 8009972:	f7fe bfbd 	b.w	80088f0 <_malloc_r>
 8009976:	b92a      	cbnz	r2, 8009984 <_realloc_r+0x24>
 8009978:	f7fe ff4e 	bl	8008818 <_free_r>
 800997c:	4625      	mov	r5, r4
 800997e:	4628      	mov	r0, r5
 8009980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009984:	f000 faa0 	bl	8009ec8 <_malloc_usable_size_r>
 8009988:	4284      	cmp	r4, r0
 800998a:	4607      	mov	r7, r0
 800998c:	d802      	bhi.n	8009994 <_realloc_r+0x34>
 800998e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009992:	d812      	bhi.n	80099ba <_realloc_r+0x5a>
 8009994:	4621      	mov	r1, r4
 8009996:	4640      	mov	r0, r8
 8009998:	f7fe ffaa 	bl	80088f0 <_malloc_r>
 800999c:	4605      	mov	r5, r0
 800999e:	2800      	cmp	r0, #0
 80099a0:	d0ed      	beq.n	800997e <_realloc_r+0x1e>
 80099a2:	42bc      	cmp	r4, r7
 80099a4:	4622      	mov	r2, r4
 80099a6:	4631      	mov	r1, r6
 80099a8:	bf28      	it	cs
 80099aa:	463a      	movcs	r2, r7
 80099ac:	f7fe fa4e 	bl	8007e4c <memcpy>
 80099b0:	4631      	mov	r1, r6
 80099b2:	4640      	mov	r0, r8
 80099b4:	f7fe ff30 	bl	8008818 <_free_r>
 80099b8:	e7e1      	b.n	800997e <_realloc_r+0x1e>
 80099ba:	4635      	mov	r5, r6
 80099bc:	e7df      	b.n	800997e <_realloc_r+0x1e>

080099be <__sfputc_r>:
 80099be:	6893      	ldr	r3, [r2, #8]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	b410      	push	{r4}
 80099c6:	6093      	str	r3, [r2, #8]
 80099c8:	da08      	bge.n	80099dc <__sfputc_r+0x1e>
 80099ca:	6994      	ldr	r4, [r2, #24]
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	db01      	blt.n	80099d4 <__sfputc_r+0x16>
 80099d0:	290a      	cmp	r1, #10
 80099d2:	d103      	bne.n	80099dc <__sfputc_r+0x1e>
 80099d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d8:	f000 b94a 	b.w	8009c70 <__swbuf_r>
 80099dc:	6813      	ldr	r3, [r2, #0]
 80099de:	1c58      	adds	r0, r3, #1
 80099e0:	6010      	str	r0, [r2, #0]
 80099e2:	7019      	strb	r1, [r3, #0]
 80099e4:	4608      	mov	r0, r1
 80099e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <__sfputs_r>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	4614      	mov	r4, r2
 80099f4:	18d5      	adds	r5, r2, r3
 80099f6:	42ac      	cmp	r4, r5
 80099f8:	d101      	bne.n	80099fe <__sfputs_r+0x12>
 80099fa:	2000      	movs	r0, #0
 80099fc:	e007      	b.n	8009a0e <__sfputs_r+0x22>
 80099fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a02:	463a      	mov	r2, r7
 8009a04:	4630      	mov	r0, r6
 8009a06:	f7ff ffda 	bl	80099be <__sfputc_r>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	d1f3      	bne.n	80099f6 <__sfputs_r+0xa>
 8009a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a10 <_vfiprintf_r>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	460d      	mov	r5, r1
 8009a16:	b09d      	sub	sp, #116	; 0x74
 8009a18:	4614      	mov	r4, r2
 8009a1a:	4698      	mov	r8, r3
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	b118      	cbz	r0, 8009a28 <_vfiprintf_r+0x18>
 8009a20:	6983      	ldr	r3, [r0, #24]
 8009a22:	b90b      	cbnz	r3, 8009a28 <_vfiprintf_r+0x18>
 8009a24:	f7ff fec4 	bl	80097b0 <__sinit>
 8009a28:	4b89      	ldr	r3, [pc, #548]	; (8009c50 <_vfiprintf_r+0x240>)
 8009a2a:	429d      	cmp	r5, r3
 8009a2c:	d11b      	bne.n	8009a66 <_vfiprintf_r+0x56>
 8009a2e:	6875      	ldr	r5, [r6, #4]
 8009a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a32:	07d9      	lsls	r1, r3, #31
 8009a34:	d405      	bmi.n	8009a42 <_vfiprintf_r+0x32>
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	059a      	lsls	r2, r3, #22
 8009a3a:	d402      	bmi.n	8009a42 <_vfiprintf_r+0x32>
 8009a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a3e:	f7ff ff67 	bl	8009910 <__retarget_lock_acquire_recursive>
 8009a42:	89ab      	ldrh	r3, [r5, #12]
 8009a44:	071b      	lsls	r3, r3, #28
 8009a46:	d501      	bpl.n	8009a4c <_vfiprintf_r+0x3c>
 8009a48:	692b      	ldr	r3, [r5, #16]
 8009a4a:	b9eb      	cbnz	r3, 8009a88 <_vfiprintf_r+0x78>
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f000 f960 	bl	8009d14 <__swsetup_r>
 8009a54:	b1c0      	cbz	r0, 8009a88 <_vfiprintf_r+0x78>
 8009a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a58:	07dc      	lsls	r4, r3, #31
 8009a5a:	d50e      	bpl.n	8009a7a <_vfiprintf_r+0x6a>
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	b01d      	add	sp, #116	; 0x74
 8009a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a66:	4b7b      	ldr	r3, [pc, #492]	; (8009c54 <_vfiprintf_r+0x244>)
 8009a68:	429d      	cmp	r5, r3
 8009a6a:	d101      	bne.n	8009a70 <_vfiprintf_r+0x60>
 8009a6c:	68b5      	ldr	r5, [r6, #8]
 8009a6e:	e7df      	b.n	8009a30 <_vfiprintf_r+0x20>
 8009a70:	4b79      	ldr	r3, [pc, #484]	; (8009c58 <_vfiprintf_r+0x248>)
 8009a72:	429d      	cmp	r5, r3
 8009a74:	bf08      	it	eq
 8009a76:	68f5      	ldreq	r5, [r6, #12]
 8009a78:	e7da      	b.n	8009a30 <_vfiprintf_r+0x20>
 8009a7a:	89ab      	ldrh	r3, [r5, #12]
 8009a7c:	0598      	lsls	r0, r3, #22
 8009a7e:	d4ed      	bmi.n	8009a5c <_vfiprintf_r+0x4c>
 8009a80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a82:	f7ff ff46 	bl	8009912 <__retarget_lock_release_recursive>
 8009a86:	e7e9      	b.n	8009a5c <_vfiprintf_r+0x4c>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a8c:	2320      	movs	r3, #32
 8009a8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a96:	2330      	movs	r3, #48	; 0x30
 8009a98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c5c <_vfiprintf_r+0x24c>
 8009a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa0:	f04f 0901 	mov.w	r9, #1
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	469a      	mov	sl, r3
 8009aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aac:	b10a      	cbz	r2, 8009ab2 <_vfiprintf_r+0xa2>
 8009aae:	2a25      	cmp	r2, #37	; 0x25
 8009ab0:	d1f9      	bne.n	8009aa6 <_vfiprintf_r+0x96>
 8009ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ab6:	d00b      	beq.n	8009ad0 <_vfiprintf_r+0xc0>
 8009ab8:	465b      	mov	r3, fp
 8009aba:	4622      	mov	r2, r4
 8009abc:	4629      	mov	r1, r5
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7ff ff94 	bl	80099ec <__sfputs_r>
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	f000 80aa 	beq.w	8009c1e <_vfiprintf_r+0x20e>
 8009aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009acc:	445a      	add	r2, fp
 8009ace:	9209      	str	r2, [sp, #36]	; 0x24
 8009ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 80a2 	beq.w	8009c1e <_vfiprintf_r+0x20e>
 8009ada:	2300      	movs	r3, #0
 8009adc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae4:	f10a 0a01 	add.w	sl, sl, #1
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	9307      	str	r3, [sp, #28]
 8009aec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af0:	931a      	str	r3, [sp, #104]	; 0x68
 8009af2:	4654      	mov	r4, sl
 8009af4:	2205      	movs	r2, #5
 8009af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afa:	4858      	ldr	r0, [pc, #352]	; (8009c5c <_vfiprintf_r+0x24c>)
 8009afc:	f7f6 fb88 	bl	8000210 <memchr>
 8009b00:	9a04      	ldr	r2, [sp, #16]
 8009b02:	b9d8      	cbnz	r0, 8009b3c <_vfiprintf_r+0x12c>
 8009b04:	06d1      	lsls	r1, r2, #27
 8009b06:	bf44      	itt	mi
 8009b08:	2320      	movmi	r3, #32
 8009b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b0e:	0713      	lsls	r3, r2, #28
 8009b10:	bf44      	itt	mi
 8009b12:	232b      	movmi	r3, #43	; 0x2b
 8009b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b18:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1e:	d015      	beq.n	8009b4c <_vfiprintf_r+0x13c>
 8009b20:	9a07      	ldr	r2, [sp, #28]
 8009b22:	4654      	mov	r4, sl
 8009b24:	2000      	movs	r0, #0
 8009b26:	f04f 0c0a 	mov.w	ip, #10
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b30:	3b30      	subs	r3, #48	; 0x30
 8009b32:	2b09      	cmp	r3, #9
 8009b34:	d94e      	bls.n	8009bd4 <_vfiprintf_r+0x1c4>
 8009b36:	b1b0      	cbz	r0, 8009b66 <_vfiprintf_r+0x156>
 8009b38:	9207      	str	r2, [sp, #28]
 8009b3a:	e014      	b.n	8009b66 <_vfiprintf_r+0x156>
 8009b3c:	eba0 0308 	sub.w	r3, r0, r8
 8009b40:	fa09 f303 	lsl.w	r3, r9, r3
 8009b44:	4313      	orrs	r3, r2
 8009b46:	9304      	str	r3, [sp, #16]
 8009b48:	46a2      	mov	sl, r4
 8009b4a:	e7d2      	b.n	8009af2 <_vfiprintf_r+0xe2>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	1d19      	adds	r1, r3, #4
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	9103      	str	r1, [sp, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	bfbb      	ittet	lt
 8009b58:	425b      	neglt	r3, r3
 8009b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b5e:	9307      	strge	r3, [sp, #28]
 8009b60:	9307      	strlt	r3, [sp, #28]
 8009b62:	bfb8      	it	lt
 8009b64:	9204      	strlt	r2, [sp, #16]
 8009b66:	7823      	ldrb	r3, [r4, #0]
 8009b68:	2b2e      	cmp	r3, #46	; 0x2e
 8009b6a:	d10c      	bne.n	8009b86 <_vfiprintf_r+0x176>
 8009b6c:	7863      	ldrb	r3, [r4, #1]
 8009b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b70:	d135      	bne.n	8009bde <_vfiprintf_r+0x1ce>
 8009b72:	9b03      	ldr	r3, [sp, #12]
 8009b74:	1d1a      	adds	r2, r3, #4
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	9203      	str	r2, [sp, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bfb8      	it	lt
 8009b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b82:	3402      	adds	r4, #2
 8009b84:	9305      	str	r3, [sp, #20]
 8009b86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c6c <_vfiprintf_r+0x25c>
 8009b8a:	7821      	ldrb	r1, [r4, #0]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	4650      	mov	r0, sl
 8009b90:	f7f6 fb3e 	bl	8000210 <memchr>
 8009b94:	b140      	cbz	r0, 8009ba8 <_vfiprintf_r+0x198>
 8009b96:	2340      	movs	r3, #64	; 0x40
 8009b98:	eba0 000a 	sub.w	r0, r0, sl
 8009b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8009ba0:	9b04      	ldr	r3, [sp, #16]
 8009ba2:	4303      	orrs	r3, r0
 8009ba4:	3401      	adds	r4, #1
 8009ba6:	9304      	str	r3, [sp, #16]
 8009ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bac:	482c      	ldr	r0, [pc, #176]	; (8009c60 <_vfiprintf_r+0x250>)
 8009bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bb2:	2206      	movs	r2, #6
 8009bb4:	f7f6 fb2c 	bl	8000210 <memchr>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d03f      	beq.n	8009c3c <_vfiprintf_r+0x22c>
 8009bbc:	4b29      	ldr	r3, [pc, #164]	; (8009c64 <_vfiprintf_r+0x254>)
 8009bbe:	bb1b      	cbnz	r3, 8009c08 <_vfiprintf_r+0x1f8>
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	3307      	adds	r3, #7
 8009bc4:	f023 0307 	bic.w	r3, r3, #7
 8009bc8:	3308      	adds	r3, #8
 8009bca:	9303      	str	r3, [sp, #12]
 8009bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bce:	443b      	add	r3, r7
 8009bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd2:	e767      	b.n	8009aa4 <_vfiprintf_r+0x94>
 8009bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd8:	460c      	mov	r4, r1
 8009bda:	2001      	movs	r0, #1
 8009bdc:	e7a5      	b.n	8009b2a <_vfiprintf_r+0x11a>
 8009bde:	2300      	movs	r3, #0
 8009be0:	3401      	adds	r4, #1
 8009be2:	9305      	str	r3, [sp, #20]
 8009be4:	4619      	mov	r1, r3
 8009be6:	f04f 0c0a 	mov.w	ip, #10
 8009bea:	4620      	mov	r0, r4
 8009bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bf0:	3a30      	subs	r2, #48	; 0x30
 8009bf2:	2a09      	cmp	r2, #9
 8009bf4:	d903      	bls.n	8009bfe <_vfiprintf_r+0x1ee>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d0c5      	beq.n	8009b86 <_vfiprintf_r+0x176>
 8009bfa:	9105      	str	r1, [sp, #20]
 8009bfc:	e7c3      	b.n	8009b86 <_vfiprintf_r+0x176>
 8009bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c02:	4604      	mov	r4, r0
 8009c04:	2301      	movs	r3, #1
 8009c06:	e7f0      	b.n	8009bea <_vfiprintf_r+0x1da>
 8009c08:	ab03      	add	r3, sp, #12
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	462a      	mov	r2, r5
 8009c0e:	4b16      	ldr	r3, [pc, #88]	; (8009c68 <_vfiprintf_r+0x258>)
 8009c10:	a904      	add	r1, sp, #16
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7fb f9be 	bl	8004f94 <_printf_float>
 8009c18:	4607      	mov	r7, r0
 8009c1a:	1c78      	adds	r0, r7, #1
 8009c1c:	d1d6      	bne.n	8009bcc <_vfiprintf_r+0x1bc>
 8009c1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c20:	07d9      	lsls	r1, r3, #31
 8009c22:	d405      	bmi.n	8009c30 <_vfiprintf_r+0x220>
 8009c24:	89ab      	ldrh	r3, [r5, #12]
 8009c26:	059a      	lsls	r2, r3, #22
 8009c28:	d402      	bmi.n	8009c30 <_vfiprintf_r+0x220>
 8009c2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c2c:	f7ff fe71 	bl	8009912 <__retarget_lock_release_recursive>
 8009c30:	89ab      	ldrh	r3, [r5, #12]
 8009c32:	065b      	lsls	r3, r3, #25
 8009c34:	f53f af12 	bmi.w	8009a5c <_vfiprintf_r+0x4c>
 8009c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3a:	e711      	b.n	8009a60 <_vfiprintf_r+0x50>
 8009c3c:	ab03      	add	r3, sp, #12
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	462a      	mov	r2, r5
 8009c42:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <_vfiprintf_r+0x258>)
 8009c44:	a904      	add	r1, sp, #16
 8009c46:	4630      	mov	r0, r6
 8009c48:	f7fb fc48 	bl	80054dc <_printf_i>
 8009c4c:	e7e4      	b.n	8009c18 <_vfiprintf_r+0x208>
 8009c4e:	bf00      	nop
 8009c50:	0800a7a4 	.word	0x0800a7a4
 8009c54:	0800a7c4 	.word	0x0800a7c4
 8009c58:	0800a784 	.word	0x0800a784
 8009c5c:	0800a71c 	.word	0x0800a71c
 8009c60:	0800a726 	.word	0x0800a726
 8009c64:	08004f95 	.word	0x08004f95
 8009c68:	080099ed 	.word	0x080099ed
 8009c6c:	0800a722 	.word	0x0800a722

08009c70 <__swbuf_r>:
 8009c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c72:	460e      	mov	r6, r1
 8009c74:	4614      	mov	r4, r2
 8009c76:	4605      	mov	r5, r0
 8009c78:	b118      	cbz	r0, 8009c82 <__swbuf_r+0x12>
 8009c7a:	6983      	ldr	r3, [r0, #24]
 8009c7c:	b90b      	cbnz	r3, 8009c82 <__swbuf_r+0x12>
 8009c7e:	f7ff fd97 	bl	80097b0 <__sinit>
 8009c82:	4b21      	ldr	r3, [pc, #132]	; (8009d08 <__swbuf_r+0x98>)
 8009c84:	429c      	cmp	r4, r3
 8009c86:	d12b      	bne.n	8009ce0 <__swbuf_r+0x70>
 8009c88:	686c      	ldr	r4, [r5, #4]
 8009c8a:	69a3      	ldr	r3, [r4, #24]
 8009c8c:	60a3      	str	r3, [r4, #8]
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	071a      	lsls	r2, r3, #28
 8009c92:	d52f      	bpl.n	8009cf4 <__swbuf_r+0x84>
 8009c94:	6923      	ldr	r3, [r4, #16]
 8009c96:	b36b      	cbz	r3, 8009cf4 <__swbuf_r+0x84>
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	6820      	ldr	r0, [r4, #0]
 8009c9c:	1ac0      	subs	r0, r0, r3
 8009c9e:	6963      	ldr	r3, [r4, #20]
 8009ca0:	b2f6      	uxtb	r6, r6
 8009ca2:	4283      	cmp	r3, r0
 8009ca4:	4637      	mov	r7, r6
 8009ca6:	dc04      	bgt.n	8009cb2 <__swbuf_r+0x42>
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4628      	mov	r0, r5
 8009cac:	f7ff fcec 	bl	8009688 <_fflush_r>
 8009cb0:	bb30      	cbnz	r0, 8009d00 <__swbuf_r+0x90>
 8009cb2:	68a3      	ldr	r3, [r4, #8]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	60a3      	str	r3, [r4, #8]
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	6022      	str	r2, [r4, #0]
 8009cbe:	701e      	strb	r6, [r3, #0]
 8009cc0:	6963      	ldr	r3, [r4, #20]
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	4283      	cmp	r3, r0
 8009cc6:	d004      	beq.n	8009cd2 <__swbuf_r+0x62>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	07db      	lsls	r3, r3, #31
 8009ccc:	d506      	bpl.n	8009cdc <__swbuf_r+0x6c>
 8009cce:	2e0a      	cmp	r6, #10
 8009cd0:	d104      	bne.n	8009cdc <__swbuf_r+0x6c>
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f7ff fcd7 	bl	8009688 <_fflush_r>
 8009cda:	b988      	cbnz	r0, 8009d00 <__swbuf_r+0x90>
 8009cdc:	4638      	mov	r0, r7
 8009cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce0:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <__swbuf_r+0x9c>)
 8009ce2:	429c      	cmp	r4, r3
 8009ce4:	d101      	bne.n	8009cea <__swbuf_r+0x7a>
 8009ce6:	68ac      	ldr	r4, [r5, #8]
 8009ce8:	e7cf      	b.n	8009c8a <__swbuf_r+0x1a>
 8009cea:	4b09      	ldr	r3, [pc, #36]	; (8009d10 <__swbuf_r+0xa0>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	bf08      	it	eq
 8009cf0:	68ec      	ldreq	r4, [r5, #12]
 8009cf2:	e7ca      	b.n	8009c8a <__swbuf_r+0x1a>
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f000 f80c 	bl	8009d14 <__swsetup_r>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d0cb      	beq.n	8009c98 <__swbuf_r+0x28>
 8009d00:	f04f 37ff 	mov.w	r7, #4294967295
 8009d04:	e7ea      	b.n	8009cdc <__swbuf_r+0x6c>
 8009d06:	bf00      	nop
 8009d08:	0800a7a4 	.word	0x0800a7a4
 8009d0c:	0800a7c4 	.word	0x0800a7c4
 8009d10:	0800a784 	.word	0x0800a784

08009d14 <__swsetup_r>:
 8009d14:	4b32      	ldr	r3, [pc, #200]	; (8009de0 <__swsetup_r+0xcc>)
 8009d16:	b570      	push	{r4, r5, r6, lr}
 8009d18:	681d      	ldr	r5, [r3, #0]
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	b125      	cbz	r5, 8009d2a <__swsetup_r+0x16>
 8009d20:	69ab      	ldr	r3, [r5, #24]
 8009d22:	b913      	cbnz	r3, 8009d2a <__swsetup_r+0x16>
 8009d24:	4628      	mov	r0, r5
 8009d26:	f7ff fd43 	bl	80097b0 <__sinit>
 8009d2a:	4b2e      	ldr	r3, [pc, #184]	; (8009de4 <__swsetup_r+0xd0>)
 8009d2c:	429c      	cmp	r4, r3
 8009d2e:	d10f      	bne.n	8009d50 <__swsetup_r+0x3c>
 8009d30:	686c      	ldr	r4, [r5, #4]
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d38:	0719      	lsls	r1, r3, #28
 8009d3a:	d42c      	bmi.n	8009d96 <__swsetup_r+0x82>
 8009d3c:	06dd      	lsls	r5, r3, #27
 8009d3e:	d411      	bmi.n	8009d64 <__swsetup_r+0x50>
 8009d40:	2309      	movs	r3, #9
 8009d42:	6033      	str	r3, [r6, #0]
 8009d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d48:	81a3      	strh	r3, [r4, #12]
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4e:	e03e      	b.n	8009dce <__swsetup_r+0xba>
 8009d50:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <__swsetup_r+0xd4>)
 8009d52:	429c      	cmp	r4, r3
 8009d54:	d101      	bne.n	8009d5a <__swsetup_r+0x46>
 8009d56:	68ac      	ldr	r4, [r5, #8]
 8009d58:	e7eb      	b.n	8009d32 <__swsetup_r+0x1e>
 8009d5a:	4b24      	ldr	r3, [pc, #144]	; (8009dec <__swsetup_r+0xd8>)
 8009d5c:	429c      	cmp	r4, r3
 8009d5e:	bf08      	it	eq
 8009d60:	68ec      	ldreq	r4, [r5, #12]
 8009d62:	e7e6      	b.n	8009d32 <__swsetup_r+0x1e>
 8009d64:	0758      	lsls	r0, r3, #29
 8009d66:	d512      	bpl.n	8009d8e <__swsetup_r+0x7a>
 8009d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d6a:	b141      	cbz	r1, 8009d7e <__swsetup_r+0x6a>
 8009d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d70:	4299      	cmp	r1, r3
 8009d72:	d002      	beq.n	8009d7a <__swsetup_r+0x66>
 8009d74:	4630      	mov	r0, r6
 8009d76:	f7fe fd4f 	bl	8008818 <_free_r>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	2300      	movs	r3, #0
 8009d88:	6063      	str	r3, [r4, #4]
 8009d8a:	6923      	ldr	r3, [r4, #16]
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	f043 0308 	orr.w	r3, r3, #8
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	6923      	ldr	r3, [r4, #16]
 8009d98:	b94b      	cbnz	r3, 8009dae <__swsetup_r+0x9a>
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009da4:	d003      	beq.n	8009dae <__swsetup_r+0x9a>
 8009da6:	4621      	mov	r1, r4
 8009da8:	4630      	mov	r0, r6
 8009daa:	f000 f84d 	bl	8009e48 <__smakebuf_r>
 8009dae:	89a0      	ldrh	r0, [r4, #12]
 8009db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009db4:	f010 0301 	ands.w	r3, r0, #1
 8009db8:	d00a      	beq.n	8009dd0 <__swsetup_r+0xbc>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60a3      	str	r3, [r4, #8]
 8009dbe:	6963      	ldr	r3, [r4, #20]
 8009dc0:	425b      	negs	r3, r3
 8009dc2:	61a3      	str	r3, [r4, #24]
 8009dc4:	6923      	ldr	r3, [r4, #16]
 8009dc6:	b943      	cbnz	r3, 8009dda <__swsetup_r+0xc6>
 8009dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dcc:	d1ba      	bne.n	8009d44 <__swsetup_r+0x30>
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
 8009dd0:	0781      	lsls	r1, r0, #30
 8009dd2:	bf58      	it	pl
 8009dd4:	6963      	ldrpl	r3, [r4, #20]
 8009dd6:	60a3      	str	r3, [r4, #8]
 8009dd8:	e7f4      	b.n	8009dc4 <__swsetup_r+0xb0>
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e7f7      	b.n	8009dce <__swsetup_r+0xba>
 8009dde:	bf00      	nop
 8009de0:	20000010 	.word	0x20000010
 8009de4:	0800a7a4 	.word	0x0800a7a4
 8009de8:	0800a7c4 	.word	0x0800a7c4
 8009dec:	0800a784 	.word	0x0800a784

08009df0 <abort>:
 8009df0:	b508      	push	{r3, lr}
 8009df2:	2006      	movs	r0, #6
 8009df4:	f000 f898 	bl	8009f28 <raise>
 8009df8:	2001      	movs	r0, #1
 8009dfa:	f7f8 fade 	bl	80023ba <_exit>

08009dfe <__swhatbuf_r>:
 8009dfe:	b570      	push	{r4, r5, r6, lr}
 8009e00:	460e      	mov	r6, r1
 8009e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e06:	2900      	cmp	r1, #0
 8009e08:	b096      	sub	sp, #88	; 0x58
 8009e0a:	4614      	mov	r4, r2
 8009e0c:	461d      	mov	r5, r3
 8009e0e:	da08      	bge.n	8009e22 <__swhatbuf_r+0x24>
 8009e10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	602a      	str	r2, [r5, #0]
 8009e18:	061a      	lsls	r2, r3, #24
 8009e1a:	d410      	bmi.n	8009e3e <__swhatbuf_r+0x40>
 8009e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e20:	e00e      	b.n	8009e40 <__swhatbuf_r+0x42>
 8009e22:	466a      	mov	r2, sp
 8009e24:	f000 f89c 	bl	8009f60 <_fstat_r>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	dbf1      	blt.n	8009e10 <__swhatbuf_r+0x12>
 8009e2c:	9a01      	ldr	r2, [sp, #4]
 8009e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e36:	425a      	negs	r2, r3
 8009e38:	415a      	adcs	r2, r3
 8009e3a:	602a      	str	r2, [r5, #0]
 8009e3c:	e7ee      	b.n	8009e1c <__swhatbuf_r+0x1e>
 8009e3e:	2340      	movs	r3, #64	; 0x40
 8009e40:	2000      	movs	r0, #0
 8009e42:	6023      	str	r3, [r4, #0]
 8009e44:	b016      	add	sp, #88	; 0x58
 8009e46:	bd70      	pop	{r4, r5, r6, pc}

08009e48 <__smakebuf_r>:
 8009e48:	898b      	ldrh	r3, [r1, #12]
 8009e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e4c:	079d      	lsls	r5, r3, #30
 8009e4e:	4606      	mov	r6, r0
 8009e50:	460c      	mov	r4, r1
 8009e52:	d507      	bpl.n	8009e64 <__smakebuf_r+0x1c>
 8009e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	6123      	str	r3, [r4, #16]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	6163      	str	r3, [r4, #20]
 8009e60:	b002      	add	sp, #8
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	ab01      	add	r3, sp, #4
 8009e66:	466a      	mov	r2, sp
 8009e68:	f7ff ffc9 	bl	8009dfe <__swhatbuf_r>
 8009e6c:	9900      	ldr	r1, [sp, #0]
 8009e6e:	4605      	mov	r5, r0
 8009e70:	4630      	mov	r0, r6
 8009e72:	f7fe fd3d 	bl	80088f0 <_malloc_r>
 8009e76:	b948      	cbnz	r0, 8009e8c <__smakebuf_r+0x44>
 8009e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e7c:	059a      	lsls	r2, r3, #22
 8009e7e:	d4ef      	bmi.n	8009e60 <__smakebuf_r+0x18>
 8009e80:	f023 0303 	bic.w	r3, r3, #3
 8009e84:	f043 0302 	orr.w	r3, r3, #2
 8009e88:	81a3      	strh	r3, [r4, #12]
 8009e8a:	e7e3      	b.n	8009e54 <__smakebuf_r+0xc>
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <__smakebuf_r+0x7c>)
 8009e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	6020      	str	r0, [r4, #0]
 8009e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e98:	81a3      	strh	r3, [r4, #12]
 8009e9a:	9b00      	ldr	r3, [sp, #0]
 8009e9c:	6163      	str	r3, [r4, #20]
 8009e9e:	9b01      	ldr	r3, [sp, #4]
 8009ea0:	6120      	str	r0, [r4, #16]
 8009ea2:	b15b      	cbz	r3, 8009ebc <__smakebuf_r+0x74>
 8009ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f000 f86b 	bl	8009f84 <_isatty_r>
 8009eae:	b128      	cbz	r0, 8009ebc <__smakebuf_r+0x74>
 8009eb0:	89a3      	ldrh	r3, [r4, #12]
 8009eb2:	f023 0303 	bic.w	r3, r3, #3
 8009eb6:	f043 0301 	orr.w	r3, r3, #1
 8009eba:	81a3      	strh	r3, [r4, #12]
 8009ebc:	89a0      	ldrh	r0, [r4, #12]
 8009ebe:	4305      	orrs	r5, r0
 8009ec0:	81a5      	strh	r5, [r4, #12]
 8009ec2:	e7cd      	b.n	8009e60 <__smakebuf_r+0x18>
 8009ec4:	08009749 	.word	0x08009749

08009ec8 <_malloc_usable_size_r>:
 8009ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ecc:	1f18      	subs	r0, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	bfbc      	itt	lt
 8009ed2:	580b      	ldrlt	r3, [r1, r0]
 8009ed4:	18c0      	addlt	r0, r0, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_raise_r>:
 8009ed8:	291f      	cmp	r1, #31
 8009eda:	b538      	push	{r3, r4, r5, lr}
 8009edc:	4604      	mov	r4, r0
 8009ede:	460d      	mov	r5, r1
 8009ee0:	d904      	bls.n	8009eec <_raise_r+0x14>
 8009ee2:	2316      	movs	r3, #22
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009eee:	b112      	cbz	r2, 8009ef6 <_raise_r+0x1e>
 8009ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ef4:	b94b      	cbnz	r3, 8009f0a <_raise_r+0x32>
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 f830 	bl	8009f5c <_getpid_r>
 8009efc:	462a      	mov	r2, r5
 8009efe:	4601      	mov	r1, r0
 8009f00:	4620      	mov	r0, r4
 8009f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f06:	f000 b817 	b.w	8009f38 <_kill_r>
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d00a      	beq.n	8009f24 <_raise_r+0x4c>
 8009f0e:	1c59      	adds	r1, r3, #1
 8009f10:	d103      	bne.n	8009f1a <_raise_r+0x42>
 8009f12:	2316      	movs	r3, #22
 8009f14:	6003      	str	r3, [r0, #0]
 8009f16:	2001      	movs	r0, #1
 8009f18:	e7e7      	b.n	8009eea <_raise_r+0x12>
 8009f1a:	2400      	movs	r4, #0
 8009f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f20:	4628      	mov	r0, r5
 8009f22:	4798      	blx	r3
 8009f24:	2000      	movs	r0, #0
 8009f26:	e7e0      	b.n	8009eea <_raise_r+0x12>

08009f28 <raise>:
 8009f28:	4b02      	ldr	r3, [pc, #8]	; (8009f34 <raise+0xc>)
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	6818      	ldr	r0, [r3, #0]
 8009f2e:	f7ff bfd3 	b.w	8009ed8 <_raise_r>
 8009f32:	bf00      	nop
 8009f34:	20000010 	.word	0x20000010

08009f38 <_kill_r>:
 8009f38:	b538      	push	{r3, r4, r5, lr}
 8009f3a:	4d07      	ldr	r5, [pc, #28]	; (8009f58 <_kill_r+0x20>)
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4604      	mov	r4, r0
 8009f40:	4608      	mov	r0, r1
 8009f42:	4611      	mov	r1, r2
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	f7f8 fa28 	bl	800239a <_kill>
 8009f4a:	1c43      	adds	r3, r0, #1
 8009f4c:	d102      	bne.n	8009f54 <_kill_r+0x1c>
 8009f4e:	682b      	ldr	r3, [r5, #0]
 8009f50:	b103      	cbz	r3, 8009f54 <_kill_r+0x1c>
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	bd38      	pop	{r3, r4, r5, pc}
 8009f56:	bf00      	nop
 8009f58:	20000c94 	.word	0x20000c94

08009f5c <_getpid_r>:
 8009f5c:	f7f8 ba15 	b.w	800238a <_getpid>

08009f60 <_fstat_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	; (8009f80 <_fstat_r+0x20>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	602b      	str	r3, [r5, #0]
 8009f6e:	f7f8 fa73 	bl	8002458 <_fstat>
 8009f72:	1c43      	adds	r3, r0, #1
 8009f74:	d102      	bne.n	8009f7c <_fstat_r+0x1c>
 8009f76:	682b      	ldr	r3, [r5, #0]
 8009f78:	b103      	cbz	r3, 8009f7c <_fstat_r+0x1c>
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	bf00      	nop
 8009f80:	20000c94 	.word	0x20000c94

08009f84 <_isatty_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4d06      	ldr	r5, [pc, #24]	; (8009fa0 <_isatty_r+0x1c>)
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	602b      	str	r3, [r5, #0]
 8009f90:	f7f8 fa72 	bl	8002478 <_isatty>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_isatty_r+0x1a>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_isatty_r+0x1a>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	20000c94 	.word	0x20000c94

08009fa4 <_init>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr

08009fb0 <_fini>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	bf00      	nop
 8009fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb6:	bc08      	pop	{r3}
 8009fb8:	469e      	mov	lr, r3
 8009fba:	4770      	bx	lr
